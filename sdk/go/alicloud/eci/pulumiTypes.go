// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eci

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ContainerGroupAcrRegistryInfo struct {
	// The domain name of the ACR Enterprise Edition instance. Defaults to all domain names of the corresponding instance. Support specifying individual domain names, multiple separated by half comma.
	Domains []string `pulumi:"domains"`
	// The ACR enterprise edition example ID.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the ACR enterprise edition instance.
	InstanceName *string `pulumi:"instanceName"`
	// The ACR enterprise edition instance belongs to the region.
	RegionId *string `pulumi:"regionId"`
}

// ContainerGroupAcrRegistryInfoInput is an input type that accepts ContainerGroupAcrRegistryInfoArgs and ContainerGroupAcrRegistryInfoOutput values.
// You can construct a concrete instance of `ContainerGroupAcrRegistryInfoInput` via:
//
//	ContainerGroupAcrRegistryInfoArgs{...}
type ContainerGroupAcrRegistryInfoInput interface {
	pulumi.Input

	ToContainerGroupAcrRegistryInfoOutput() ContainerGroupAcrRegistryInfoOutput
	ToContainerGroupAcrRegistryInfoOutputWithContext(context.Context) ContainerGroupAcrRegistryInfoOutput
}

type ContainerGroupAcrRegistryInfoArgs struct {
	// The domain name of the ACR Enterprise Edition instance. Defaults to all domain names of the corresponding instance. Support specifying individual domain names, multiple separated by half comma.
	Domains pulumi.StringArrayInput `pulumi:"domains"`
	// The ACR enterprise edition example ID.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The name of the ACR enterprise edition instance.
	InstanceName pulumi.StringPtrInput `pulumi:"instanceName"`
	// The ACR enterprise edition instance belongs to the region.
	RegionId pulumi.StringPtrInput `pulumi:"regionId"`
}

func (ContainerGroupAcrRegistryInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupAcrRegistryInfo)(nil)).Elem()
}

func (i ContainerGroupAcrRegistryInfoArgs) ToContainerGroupAcrRegistryInfoOutput() ContainerGroupAcrRegistryInfoOutput {
	return i.ToContainerGroupAcrRegistryInfoOutputWithContext(context.Background())
}

func (i ContainerGroupAcrRegistryInfoArgs) ToContainerGroupAcrRegistryInfoOutputWithContext(ctx context.Context) ContainerGroupAcrRegistryInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupAcrRegistryInfoOutput)
}

// ContainerGroupAcrRegistryInfoArrayInput is an input type that accepts ContainerGroupAcrRegistryInfoArray and ContainerGroupAcrRegistryInfoArrayOutput values.
// You can construct a concrete instance of `ContainerGroupAcrRegistryInfoArrayInput` via:
//
//	ContainerGroupAcrRegistryInfoArray{ ContainerGroupAcrRegistryInfoArgs{...} }
type ContainerGroupAcrRegistryInfoArrayInput interface {
	pulumi.Input

	ToContainerGroupAcrRegistryInfoArrayOutput() ContainerGroupAcrRegistryInfoArrayOutput
	ToContainerGroupAcrRegistryInfoArrayOutputWithContext(context.Context) ContainerGroupAcrRegistryInfoArrayOutput
}

type ContainerGroupAcrRegistryInfoArray []ContainerGroupAcrRegistryInfoInput

func (ContainerGroupAcrRegistryInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupAcrRegistryInfo)(nil)).Elem()
}

func (i ContainerGroupAcrRegistryInfoArray) ToContainerGroupAcrRegistryInfoArrayOutput() ContainerGroupAcrRegistryInfoArrayOutput {
	return i.ToContainerGroupAcrRegistryInfoArrayOutputWithContext(context.Background())
}

func (i ContainerGroupAcrRegistryInfoArray) ToContainerGroupAcrRegistryInfoArrayOutputWithContext(ctx context.Context) ContainerGroupAcrRegistryInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupAcrRegistryInfoArrayOutput)
}

type ContainerGroupAcrRegistryInfoOutput struct{ *pulumi.OutputState }

func (ContainerGroupAcrRegistryInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupAcrRegistryInfo)(nil)).Elem()
}

func (o ContainerGroupAcrRegistryInfoOutput) ToContainerGroupAcrRegistryInfoOutput() ContainerGroupAcrRegistryInfoOutput {
	return o
}

func (o ContainerGroupAcrRegistryInfoOutput) ToContainerGroupAcrRegistryInfoOutputWithContext(ctx context.Context) ContainerGroupAcrRegistryInfoOutput {
	return o
}

// The domain name of the ACR Enterprise Edition instance. Defaults to all domain names of the corresponding instance. Support specifying individual domain names, multiple separated by half comma.
func (o ContainerGroupAcrRegistryInfoOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupAcrRegistryInfo) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// The ACR enterprise edition example ID.
func (o ContainerGroupAcrRegistryInfoOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupAcrRegistryInfo) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The name of the ACR enterprise edition instance.
func (o ContainerGroupAcrRegistryInfoOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupAcrRegistryInfo) *string { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// The ACR enterprise edition instance belongs to the region.
func (o ContainerGroupAcrRegistryInfoOutput) RegionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupAcrRegistryInfo) *string { return v.RegionId }).(pulumi.StringPtrOutput)
}

type ContainerGroupAcrRegistryInfoArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupAcrRegistryInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupAcrRegistryInfo)(nil)).Elem()
}

func (o ContainerGroupAcrRegistryInfoArrayOutput) ToContainerGroupAcrRegistryInfoArrayOutput() ContainerGroupAcrRegistryInfoArrayOutput {
	return o
}

func (o ContainerGroupAcrRegistryInfoArrayOutput) ToContainerGroupAcrRegistryInfoArrayOutputWithContext(ctx context.Context) ContainerGroupAcrRegistryInfoArrayOutput {
	return o
}

func (o ContainerGroupAcrRegistryInfoArrayOutput) Index(i pulumi.IntInput) ContainerGroupAcrRegistryInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupAcrRegistryInfo {
		return vs[0].([]ContainerGroupAcrRegistryInfo)[vs[1].(int)]
	}).(ContainerGroupAcrRegistryInfoOutput)
}

type ContainerGroupContainer struct {
	// The arguments passed to the commands.
	Args []string `pulumi:"args"`
	// Commands to be executed inside the container when performing health checks using the command line method.
	Commands []string `pulumi:"commands"`
	// The amount of CPU resources allocated to the container. Default value: `0`.
	Cpu *float64 `pulumi:"cpu"`
	// The structure of environmentVars. See `environmentVars` below.
	EnvironmentVars []ContainerGroupContainerEnvironmentVar `pulumi:"environmentVars"`
	// The number GPUs. Default value: `0`.
	Gpu *int `pulumi:"gpu"`
	// The image of the container.
	Image string `pulumi:"image"`
	// The restart policy of the image. Default value: `IfNotPresent`. Valid values: `Always`, `IfNotPresent`, `Never`.
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// The commands to be executed in containers when you use the CLI to specify the preStop callback function.
	LifecyclePreStopHandlerExecs []string `pulumi:"lifecyclePreStopHandlerExecs"`
	// The health check of the container. See `livenessProbe` below.
	LivenessProbes []ContainerGroupContainerLivenessProbe `pulumi:"livenessProbes"`
	// The amount of memory resources allocated to the container. Default value: `0`.
	Memory *float64 `pulumi:"memory"`
	// The name of the mounted volume.
	Name string `pulumi:"name"`
	// The structure of port. See `ports` below.
	Ports []ContainerGroupContainerPort `pulumi:"ports"`
	// The health check of the container. See `readinessProbe` below.
	ReadinessProbes []ContainerGroupContainerReadinessProbe `pulumi:"readinessProbes"`
	// Indicates whether the container passed the readiness probe.
	Ready *bool `pulumi:"ready"`
	// The number of times that the container restarted.
	RestartCount *int `pulumi:"restartCount"`
	// The security context of the container. See `securityContext` below.
	SecurityContexts []ContainerGroupContainerSecurityContext `pulumi:"securityContexts"`
	// The structure of volumeMounts. See `volumeMounts` below.
	VolumeMounts []ContainerGroupContainerVolumeMount `pulumi:"volumeMounts"`
	// The working directory of the container.
	WorkingDir *string `pulumi:"workingDir"`
}

// ContainerGroupContainerInput is an input type that accepts ContainerGroupContainerArgs and ContainerGroupContainerOutput values.
// You can construct a concrete instance of `ContainerGroupContainerInput` via:
//
//	ContainerGroupContainerArgs{...}
type ContainerGroupContainerInput interface {
	pulumi.Input

	ToContainerGroupContainerOutput() ContainerGroupContainerOutput
	ToContainerGroupContainerOutputWithContext(context.Context) ContainerGroupContainerOutput
}

type ContainerGroupContainerArgs struct {
	// The arguments passed to the commands.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Commands to be executed inside the container when performing health checks using the command line method.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// The amount of CPU resources allocated to the container. Default value: `0`.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// The structure of environmentVars. See `environmentVars` below.
	EnvironmentVars ContainerGroupContainerEnvironmentVarArrayInput `pulumi:"environmentVars"`
	// The number GPUs. Default value: `0`.
	Gpu pulumi.IntPtrInput `pulumi:"gpu"`
	// The image of the container.
	Image pulumi.StringInput `pulumi:"image"`
	// The restart policy of the image. Default value: `IfNotPresent`. Valid values: `Always`, `IfNotPresent`, `Never`.
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// The commands to be executed in containers when you use the CLI to specify the preStop callback function.
	LifecyclePreStopHandlerExecs pulumi.StringArrayInput `pulumi:"lifecyclePreStopHandlerExecs"`
	// The health check of the container. See `livenessProbe` below.
	LivenessProbes ContainerGroupContainerLivenessProbeArrayInput `pulumi:"livenessProbes"`
	// The amount of memory resources allocated to the container. Default value: `0`.
	Memory pulumi.Float64PtrInput `pulumi:"memory"`
	// The name of the mounted volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The structure of port. See `ports` below.
	Ports ContainerGroupContainerPortArrayInput `pulumi:"ports"`
	// The health check of the container. See `readinessProbe` below.
	ReadinessProbes ContainerGroupContainerReadinessProbeArrayInput `pulumi:"readinessProbes"`
	// Indicates whether the container passed the readiness probe.
	Ready pulumi.BoolPtrInput `pulumi:"ready"`
	// The number of times that the container restarted.
	RestartCount pulumi.IntPtrInput `pulumi:"restartCount"`
	// The security context of the container. See `securityContext` below.
	SecurityContexts ContainerGroupContainerSecurityContextArrayInput `pulumi:"securityContexts"`
	// The structure of volumeMounts. See `volumeMounts` below.
	VolumeMounts ContainerGroupContainerVolumeMountArrayInput `pulumi:"volumeMounts"`
	// The working directory of the container.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (ContainerGroupContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainer)(nil)).Elem()
}

func (i ContainerGroupContainerArgs) ToContainerGroupContainerOutput() ContainerGroupContainerOutput {
	return i.ToContainerGroupContainerOutputWithContext(context.Background())
}

func (i ContainerGroupContainerArgs) ToContainerGroupContainerOutputWithContext(ctx context.Context) ContainerGroupContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerOutput)
}

// ContainerGroupContainerArrayInput is an input type that accepts ContainerGroupContainerArray and ContainerGroupContainerArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerArrayInput` via:
//
//	ContainerGroupContainerArray{ ContainerGroupContainerArgs{...} }
type ContainerGroupContainerArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerArrayOutput() ContainerGroupContainerArrayOutput
	ToContainerGroupContainerArrayOutputWithContext(context.Context) ContainerGroupContainerArrayOutput
}

type ContainerGroupContainerArray []ContainerGroupContainerInput

func (ContainerGroupContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainer)(nil)).Elem()
}

func (i ContainerGroupContainerArray) ToContainerGroupContainerArrayOutput() ContainerGroupContainerArrayOutput {
	return i.ToContainerGroupContainerArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerArray) ToContainerGroupContainerArrayOutputWithContext(ctx context.Context) ContainerGroupContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerArrayOutput)
}

type ContainerGroupContainerOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainer)(nil)).Elem()
}

func (o ContainerGroupContainerOutput) ToContainerGroupContainerOutput() ContainerGroupContainerOutput {
	return o
}

func (o ContainerGroupContainerOutput) ToContainerGroupContainerOutputWithContext(ctx context.Context) ContainerGroupContainerOutput {
	return o
}

// The arguments passed to the commands.
func (o ContainerGroupContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Commands to be executed inside the container when performing health checks using the command line method.
func (o ContainerGroupContainerOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainer) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// The amount of CPU resources allocated to the container. Default value: `0`.
func (o ContainerGroupContainerOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerGroupContainer) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// The structure of environmentVars. See `environmentVars` below.
func (o ContainerGroupContainerOutput) EnvironmentVars() ContainerGroupContainerEnvironmentVarArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainer) []ContainerGroupContainerEnvironmentVar { return v.EnvironmentVars }).(ContainerGroupContainerEnvironmentVarArrayOutput)
}

// The number GPUs. Default value: `0`.
func (o ContainerGroupContainerOutput) Gpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainer) *int { return v.Gpu }).(pulumi.IntPtrOutput)
}

// The image of the container.
func (o ContainerGroupContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupContainer) string { return v.Image }).(pulumi.StringOutput)
}

// The restart policy of the image. Default value: `IfNotPresent`. Valid values: `Always`, `IfNotPresent`, `Never`.
func (o ContainerGroupContainerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainer) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// The commands to be executed in containers when you use the CLI to specify the preStop callback function.
func (o ContainerGroupContainerOutput) LifecyclePreStopHandlerExecs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainer) []string { return v.LifecyclePreStopHandlerExecs }).(pulumi.StringArrayOutput)
}

// The health check of the container. See `livenessProbe` below.
func (o ContainerGroupContainerOutput) LivenessProbes() ContainerGroupContainerLivenessProbeArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainer) []ContainerGroupContainerLivenessProbe { return v.LivenessProbes }).(ContainerGroupContainerLivenessProbeArrayOutput)
}

// The amount of memory resources allocated to the container. Default value: `0`.
func (o ContainerGroupContainerOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerGroupContainer) *float64 { return v.Memory }).(pulumi.Float64PtrOutput)
}

// The name of the mounted volume.
func (o ContainerGroupContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupContainer) string { return v.Name }).(pulumi.StringOutput)
}

// The structure of port. See `ports` below.
func (o ContainerGroupContainerOutput) Ports() ContainerGroupContainerPortArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainer) []ContainerGroupContainerPort { return v.Ports }).(ContainerGroupContainerPortArrayOutput)
}

// The health check of the container. See `readinessProbe` below.
func (o ContainerGroupContainerOutput) ReadinessProbes() ContainerGroupContainerReadinessProbeArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainer) []ContainerGroupContainerReadinessProbe { return v.ReadinessProbes }).(ContainerGroupContainerReadinessProbeArrayOutput)
}

// Indicates whether the container passed the readiness probe.
func (o ContainerGroupContainerOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainer) *bool { return v.Ready }).(pulumi.BoolPtrOutput)
}

// The number of times that the container restarted.
func (o ContainerGroupContainerOutput) RestartCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainer) *int { return v.RestartCount }).(pulumi.IntPtrOutput)
}

// The security context of the container. See `securityContext` below.
func (o ContainerGroupContainerOutput) SecurityContexts() ContainerGroupContainerSecurityContextArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainer) []ContainerGroupContainerSecurityContext { return v.SecurityContexts }).(ContainerGroupContainerSecurityContextArrayOutput)
}

// The structure of volumeMounts. See `volumeMounts` below.
func (o ContainerGroupContainerOutput) VolumeMounts() ContainerGroupContainerVolumeMountArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainer) []ContainerGroupContainerVolumeMount { return v.VolumeMounts }).(ContainerGroupContainerVolumeMountArrayOutput)
}

// The working directory of the container.
func (o ContainerGroupContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainer) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type ContainerGroupContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainer)(nil)).Elem()
}

func (o ContainerGroupContainerArrayOutput) ToContainerGroupContainerArrayOutput() ContainerGroupContainerArrayOutput {
	return o
}

func (o ContainerGroupContainerArrayOutput) ToContainerGroupContainerArrayOutputWithContext(ctx context.Context) ContainerGroupContainerArrayOutput {
	return o
}

func (o ContainerGroupContainerArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainer {
		return vs[0].([]ContainerGroupContainer)[vs[1].(int)]
	}).(ContainerGroupContainerOutput)
}

type ContainerGroupContainerEnvironmentVar struct {
	// The reference of the environment variable. See `fieldRef` below.
	FieldReves []ContainerGroupContainerEnvironmentVarFieldRef `pulumi:"fieldReves"`
	// The name of the variable. The name can be 1 to 128 characters in length and can contain letters, digits, and underscores (_). It cannot start with a digit.
	Key *string `pulumi:"key"`
	// The value of the variable. The value can be 0 to 256 characters in length.
	Value *string `pulumi:"value"`
}

// ContainerGroupContainerEnvironmentVarInput is an input type that accepts ContainerGroupContainerEnvironmentVarArgs and ContainerGroupContainerEnvironmentVarOutput values.
// You can construct a concrete instance of `ContainerGroupContainerEnvironmentVarInput` via:
//
//	ContainerGroupContainerEnvironmentVarArgs{...}
type ContainerGroupContainerEnvironmentVarInput interface {
	pulumi.Input

	ToContainerGroupContainerEnvironmentVarOutput() ContainerGroupContainerEnvironmentVarOutput
	ToContainerGroupContainerEnvironmentVarOutputWithContext(context.Context) ContainerGroupContainerEnvironmentVarOutput
}

type ContainerGroupContainerEnvironmentVarArgs struct {
	// The reference of the environment variable. See `fieldRef` below.
	FieldReves ContainerGroupContainerEnvironmentVarFieldRefArrayInput `pulumi:"fieldReves"`
	// The name of the variable. The name can be 1 to 128 characters in length and can contain letters, digits, and underscores (_). It cannot start with a digit.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The value of the variable. The value can be 0 to 256 characters in length.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ContainerGroupContainerEnvironmentVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerEnvironmentVar)(nil)).Elem()
}

func (i ContainerGroupContainerEnvironmentVarArgs) ToContainerGroupContainerEnvironmentVarOutput() ContainerGroupContainerEnvironmentVarOutput {
	return i.ToContainerGroupContainerEnvironmentVarOutputWithContext(context.Background())
}

func (i ContainerGroupContainerEnvironmentVarArgs) ToContainerGroupContainerEnvironmentVarOutputWithContext(ctx context.Context) ContainerGroupContainerEnvironmentVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerEnvironmentVarOutput)
}

// ContainerGroupContainerEnvironmentVarArrayInput is an input type that accepts ContainerGroupContainerEnvironmentVarArray and ContainerGroupContainerEnvironmentVarArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerEnvironmentVarArrayInput` via:
//
//	ContainerGroupContainerEnvironmentVarArray{ ContainerGroupContainerEnvironmentVarArgs{...} }
type ContainerGroupContainerEnvironmentVarArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerEnvironmentVarArrayOutput() ContainerGroupContainerEnvironmentVarArrayOutput
	ToContainerGroupContainerEnvironmentVarArrayOutputWithContext(context.Context) ContainerGroupContainerEnvironmentVarArrayOutput
}

type ContainerGroupContainerEnvironmentVarArray []ContainerGroupContainerEnvironmentVarInput

func (ContainerGroupContainerEnvironmentVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerEnvironmentVar)(nil)).Elem()
}

func (i ContainerGroupContainerEnvironmentVarArray) ToContainerGroupContainerEnvironmentVarArrayOutput() ContainerGroupContainerEnvironmentVarArrayOutput {
	return i.ToContainerGroupContainerEnvironmentVarArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerEnvironmentVarArray) ToContainerGroupContainerEnvironmentVarArrayOutputWithContext(ctx context.Context) ContainerGroupContainerEnvironmentVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerEnvironmentVarArrayOutput)
}

type ContainerGroupContainerEnvironmentVarOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerEnvironmentVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerEnvironmentVar)(nil)).Elem()
}

func (o ContainerGroupContainerEnvironmentVarOutput) ToContainerGroupContainerEnvironmentVarOutput() ContainerGroupContainerEnvironmentVarOutput {
	return o
}

func (o ContainerGroupContainerEnvironmentVarOutput) ToContainerGroupContainerEnvironmentVarOutputWithContext(ctx context.Context) ContainerGroupContainerEnvironmentVarOutput {
	return o
}

// The reference of the environment variable. See `fieldRef` below.
func (o ContainerGroupContainerEnvironmentVarOutput) FieldReves() ContainerGroupContainerEnvironmentVarFieldRefArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainerEnvironmentVar) []ContainerGroupContainerEnvironmentVarFieldRef {
		return v.FieldReves
	}).(ContainerGroupContainerEnvironmentVarFieldRefArrayOutput)
}

// The name of the variable. The name can be 1 to 128 characters in length and can contain letters, digits, and underscores (_). It cannot start with a digit.
func (o ContainerGroupContainerEnvironmentVarOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerEnvironmentVar) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The value of the variable. The value can be 0 to 256 characters in length.
func (o ContainerGroupContainerEnvironmentVarOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerEnvironmentVar) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ContainerGroupContainerEnvironmentVarArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerEnvironmentVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerEnvironmentVar)(nil)).Elem()
}

func (o ContainerGroupContainerEnvironmentVarArrayOutput) ToContainerGroupContainerEnvironmentVarArrayOutput() ContainerGroupContainerEnvironmentVarArrayOutput {
	return o
}

func (o ContainerGroupContainerEnvironmentVarArrayOutput) ToContainerGroupContainerEnvironmentVarArrayOutputWithContext(ctx context.Context) ContainerGroupContainerEnvironmentVarArrayOutput {
	return o
}

func (o ContainerGroupContainerEnvironmentVarArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerEnvironmentVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerEnvironmentVar {
		return vs[0].([]ContainerGroupContainerEnvironmentVar)[vs[1].(int)]
	}).(ContainerGroupContainerEnvironmentVarOutput)
}

type ContainerGroupContainerEnvironmentVarFieldRef struct {
	// The path of the reference.
	FieldPath *string `pulumi:"fieldPath"`
}

// ContainerGroupContainerEnvironmentVarFieldRefInput is an input type that accepts ContainerGroupContainerEnvironmentVarFieldRefArgs and ContainerGroupContainerEnvironmentVarFieldRefOutput values.
// You can construct a concrete instance of `ContainerGroupContainerEnvironmentVarFieldRefInput` via:
//
//	ContainerGroupContainerEnvironmentVarFieldRefArgs{...}
type ContainerGroupContainerEnvironmentVarFieldRefInput interface {
	pulumi.Input

	ToContainerGroupContainerEnvironmentVarFieldRefOutput() ContainerGroupContainerEnvironmentVarFieldRefOutput
	ToContainerGroupContainerEnvironmentVarFieldRefOutputWithContext(context.Context) ContainerGroupContainerEnvironmentVarFieldRefOutput
}

type ContainerGroupContainerEnvironmentVarFieldRefArgs struct {
	// The path of the reference.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
}

func (ContainerGroupContainerEnvironmentVarFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerEnvironmentVarFieldRef)(nil)).Elem()
}

func (i ContainerGroupContainerEnvironmentVarFieldRefArgs) ToContainerGroupContainerEnvironmentVarFieldRefOutput() ContainerGroupContainerEnvironmentVarFieldRefOutput {
	return i.ToContainerGroupContainerEnvironmentVarFieldRefOutputWithContext(context.Background())
}

func (i ContainerGroupContainerEnvironmentVarFieldRefArgs) ToContainerGroupContainerEnvironmentVarFieldRefOutputWithContext(ctx context.Context) ContainerGroupContainerEnvironmentVarFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerEnvironmentVarFieldRefOutput)
}

// ContainerGroupContainerEnvironmentVarFieldRefArrayInput is an input type that accepts ContainerGroupContainerEnvironmentVarFieldRefArray and ContainerGroupContainerEnvironmentVarFieldRefArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerEnvironmentVarFieldRefArrayInput` via:
//
//	ContainerGroupContainerEnvironmentVarFieldRefArray{ ContainerGroupContainerEnvironmentVarFieldRefArgs{...} }
type ContainerGroupContainerEnvironmentVarFieldRefArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerEnvironmentVarFieldRefArrayOutput() ContainerGroupContainerEnvironmentVarFieldRefArrayOutput
	ToContainerGroupContainerEnvironmentVarFieldRefArrayOutputWithContext(context.Context) ContainerGroupContainerEnvironmentVarFieldRefArrayOutput
}

type ContainerGroupContainerEnvironmentVarFieldRefArray []ContainerGroupContainerEnvironmentVarFieldRefInput

func (ContainerGroupContainerEnvironmentVarFieldRefArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerEnvironmentVarFieldRef)(nil)).Elem()
}

func (i ContainerGroupContainerEnvironmentVarFieldRefArray) ToContainerGroupContainerEnvironmentVarFieldRefArrayOutput() ContainerGroupContainerEnvironmentVarFieldRefArrayOutput {
	return i.ToContainerGroupContainerEnvironmentVarFieldRefArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerEnvironmentVarFieldRefArray) ToContainerGroupContainerEnvironmentVarFieldRefArrayOutputWithContext(ctx context.Context) ContainerGroupContainerEnvironmentVarFieldRefArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerEnvironmentVarFieldRefArrayOutput)
}

type ContainerGroupContainerEnvironmentVarFieldRefOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerEnvironmentVarFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerEnvironmentVarFieldRef)(nil)).Elem()
}

func (o ContainerGroupContainerEnvironmentVarFieldRefOutput) ToContainerGroupContainerEnvironmentVarFieldRefOutput() ContainerGroupContainerEnvironmentVarFieldRefOutput {
	return o
}

func (o ContainerGroupContainerEnvironmentVarFieldRefOutput) ToContainerGroupContainerEnvironmentVarFieldRefOutputWithContext(ctx context.Context) ContainerGroupContainerEnvironmentVarFieldRefOutput {
	return o
}

// The path of the reference.
func (o ContainerGroupContainerEnvironmentVarFieldRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerEnvironmentVarFieldRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

type ContainerGroupContainerEnvironmentVarFieldRefArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerEnvironmentVarFieldRefArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerEnvironmentVarFieldRef)(nil)).Elem()
}

func (o ContainerGroupContainerEnvironmentVarFieldRefArrayOutput) ToContainerGroupContainerEnvironmentVarFieldRefArrayOutput() ContainerGroupContainerEnvironmentVarFieldRefArrayOutput {
	return o
}

func (o ContainerGroupContainerEnvironmentVarFieldRefArrayOutput) ToContainerGroupContainerEnvironmentVarFieldRefArrayOutputWithContext(ctx context.Context) ContainerGroupContainerEnvironmentVarFieldRefArrayOutput {
	return o
}

func (o ContainerGroupContainerEnvironmentVarFieldRefArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerEnvironmentVarFieldRefOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerEnvironmentVarFieldRef {
		return vs[0].([]ContainerGroupContainerEnvironmentVarFieldRef)[vs[1].(int)]
	}).(ContainerGroupContainerEnvironmentVarFieldRefOutput)
}

type ContainerGroupContainerLivenessProbe struct {
	// Health check using command line method. See `exec` below.
	Execs []ContainerGroupContainerLivenessProbeExec `pulumi:"execs"`
	// Threshold for the number of checks that are determined to have failed since the last successful check (must be consecutive failures), default is 3.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// Health check using HTTP request method. See `httpGet` below.
	HttpGets []ContainerGroupContainerLivenessProbeHttpGet `pulumi:"httpGets"`
	// Check the time to start execution, calculated from the completion of container startup.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// Buffer time for the program to handle operations before closing.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// The check count threshold for re-identifying successful checks since the last failed check (must be consecutive successes), default is 1. Current must be 1.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// Health check using TCP socket method. See `tcpSocket` below.
	TcpSockets []ContainerGroupContainerLivenessProbeTcpSocket `pulumi:"tcpSockets"`
	// Check the timeout, the default is 1 second, the minimum is 1 second.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ContainerGroupContainerLivenessProbeInput is an input type that accepts ContainerGroupContainerLivenessProbeArgs and ContainerGroupContainerLivenessProbeOutput values.
// You can construct a concrete instance of `ContainerGroupContainerLivenessProbeInput` via:
//
//	ContainerGroupContainerLivenessProbeArgs{...}
type ContainerGroupContainerLivenessProbeInput interface {
	pulumi.Input

	ToContainerGroupContainerLivenessProbeOutput() ContainerGroupContainerLivenessProbeOutput
	ToContainerGroupContainerLivenessProbeOutputWithContext(context.Context) ContainerGroupContainerLivenessProbeOutput
}

type ContainerGroupContainerLivenessProbeArgs struct {
	// Health check using command line method. See `exec` below.
	Execs ContainerGroupContainerLivenessProbeExecArrayInput `pulumi:"execs"`
	// Threshold for the number of checks that are determined to have failed since the last successful check (must be consecutive failures), default is 3.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// Health check using HTTP request method. See `httpGet` below.
	HttpGets ContainerGroupContainerLivenessProbeHttpGetArrayInput `pulumi:"httpGets"`
	// Check the time to start execution, calculated from the completion of container startup.
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// Buffer time for the program to handle operations before closing.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// The check count threshold for re-identifying successful checks since the last failed check (must be consecutive successes), default is 1. Current must be 1.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// Health check using TCP socket method. See `tcpSocket` below.
	TcpSockets ContainerGroupContainerLivenessProbeTcpSocketArrayInput `pulumi:"tcpSockets"`
	// Check the timeout, the default is 1 second, the minimum is 1 second.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ContainerGroupContainerLivenessProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerLivenessProbe)(nil)).Elem()
}

func (i ContainerGroupContainerLivenessProbeArgs) ToContainerGroupContainerLivenessProbeOutput() ContainerGroupContainerLivenessProbeOutput {
	return i.ToContainerGroupContainerLivenessProbeOutputWithContext(context.Background())
}

func (i ContainerGroupContainerLivenessProbeArgs) ToContainerGroupContainerLivenessProbeOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerLivenessProbeOutput)
}

// ContainerGroupContainerLivenessProbeArrayInput is an input type that accepts ContainerGroupContainerLivenessProbeArray and ContainerGroupContainerLivenessProbeArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerLivenessProbeArrayInput` via:
//
//	ContainerGroupContainerLivenessProbeArray{ ContainerGroupContainerLivenessProbeArgs{...} }
type ContainerGroupContainerLivenessProbeArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerLivenessProbeArrayOutput() ContainerGroupContainerLivenessProbeArrayOutput
	ToContainerGroupContainerLivenessProbeArrayOutputWithContext(context.Context) ContainerGroupContainerLivenessProbeArrayOutput
}

type ContainerGroupContainerLivenessProbeArray []ContainerGroupContainerLivenessProbeInput

func (ContainerGroupContainerLivenessProbeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerLivenessProbe)(nil)).Elem()
}

func (i ContainerGroupContainerLivenessProbeArray) ToContainerGroupContainerLivenessProbeArrayOutput() ContainerGroupContainerLivenessProbeArrayOutput {
	return i.ToContainerGroupContainerLivenessProbeArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerLivenessProbeArray) ToContainerGroupContainerLivenessProbeArrayOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerLivenessProbeArrayOutput)
}

type ContainerGroupContainerLivenessProbeOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerLivenessProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerLivenessProbe)(nil)).Elem()
}

func (o ContainerGroupContainerLivenessProbeOutput) ToContainerGroupContainerLivenessProbeOutput() ContainerGroupContainerLivenessProbeOutput {
	return o
}

func (o ContainerGroupContainerLivenessProbeOutput) ToContainerGroupContainerLivenessProbeOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeOutput {
	return o
}

// Health check using command line method. See `exec` below.
func (o ContainerGroupContainerLivenessProbeOutput) Execs() ContainerGroupContainerLivenessProbeExecArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbe) []ContainerGroupContainerLivenessProbeExec {
		return v.Execs
	}).(ContainerGroupContainerLivenessProbeExecArrayOutput)
}

// Threshold for the number of checks that are determined to have failed since the last successful check (must be consecutive failures), default is 3.
func (o ContainerGroupContainerLivenessProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// Health check using HTTP request method. See `httpGet` below.
func (o ContainerGroupContainerLivenessProbeOutput) HttpGets() ContainerGroupContainerLivenessProbeHttpGetArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbe) []ContainerGroupContainerLivenessProbeHttpGet {
		return v.HttpGets
	}).(ContainerGroupContainerLivenessProbeHttpGetArrayOutput)
}

// Check the time to start execution, calculated from the completion of container startup.
func (o ContainerGroupContainerLivenessProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// Buffer time for the program to handle operations before closing.
func (o ContainerGroupContainerLivenessProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// The check count threshold for re-identifying successful checks since the last failed check (must be consecutive successes), default is 1. Current must be 1.
func (o ContainerGroupContainerLivenessProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// Health check using TCP socket method. See `tcpSocket` below.
func (o ContainerGroupContainerLivenessProbeOutput) TcpSockets() ContainerGroupContainerLivenessProbeTcpSocketArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbe) []ContainerGroupContainerLivenessProbeTcpSocket {
		return v.TcpSockets
	}).(ContainerGroupContainerLivenessProbeTcpSocketArrayOutput)
}

// Check the timeout, the default is 1 second, the minimum is 1 second.
func (o ContainerGroupContainerLivenessProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ContainerGroupContainerLivenessProbeArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerLivenessProbeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerLivenessProbe)(nil)).Elem()
}

func (o ContainerGroupContainerLivenessProbeArrayOutput) ToContainerGroupContainerLivenessProbeArrayOutput() ContainerGroupContainerLivenessProbeArrayOutput {
	return o
}

func (o ContainerGroupContainerLivenessProbeArrayOutput) ToContainerGroupContainerLivenessProbeArrayOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeArrayOutput {
	return o
}

func (o ContainerGroupContainerLivenessProbeArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerLivenessProbeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerLivenessProbe {
		return vs[0].([]ContainerGroupContainerLivenessProbe)[vs[1].(int)]
	}).(ContainerGroupContainerLivenessProbeOutput)
}

type ContainerGroupContainerLivenessProbeExec struct {
	// Commands to be executed inside the container when performing health checks using the command line method.
	Commands []string `pulumi:"commands"`
}

// ContainerGroupContainerLivenessProbeExecInput is an input type that accepts ContainerGroupContainerLivenessProbeExecArgs and ContainerGroupContainerLivenessProbeExecOutput values.
// You can construct a concrete instance of `ContainerGroupContainerLivenessProbeExecInput` via:
//
//	ContainerGroupContainerLivenessProbeExecArgs{...}
type ContainerGroupContainerLivenessProbeExecInput interface {
	pulumi.Input

	ToContainerGroupContainerLivenessProbeExecOutput() ContainerGroupContainerLivenessProbeExecOutput
	ToContainerGroupContainerLivenessProbeExecOutputWithContext(context.Context) ContainerGroupContainerLivenessProbeExecOutput
}

type ContainerGroupContainerLivenessProbeExecArgs struct {
	// Commands to be executed inside the container when performing health checks using the command line method.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
}

func (ContainerGroupContainerLivenessProbeExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerLivenessProbeExec)(nil)).Elem()
}

func (i ContainerGroupContainerLivenessProbeExecArgs) ToContainerGroupContainerLivenessProbeExecOutput() ContainerGroupContainerLivenessProbeExecOutput {
	return i.ToContainerGroupContainerLivenessProbeExecOutputWithContext(context.Background())
}

func (i ContainerGroupContainerLivenessProbeExecArgs) ToContainerGroupContainerLivenessProbeExecOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerLivenessProbeExecOutput)
}

// ContainerGroupContainerLivenessProbeExecArrayInput is an input type that accepts ContainerGroupContainerLivenessProbeExecArray and ContainerGroupContainerLivenessProbeExecArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerLivenessProbeExecArrayInput` via:
//
//	ContainerGroupContainerLivenessProbeExecArray{ ContainerGroupContainerLivenessProbeExecArgs{...} }
type ContainerGroupContainerLivenessProbeExecArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerLivenessProbeExecArrayOutput() ContainerGroupContainerLivenessProbeExecArrayOutput
	ToContainerGroupContainerLivenessProbeExecArrayOutputWithContext(context.Context) ContainerGroupContainerLivenessProbeExecArrayOutput
}

type ContainerGroupContainerLivenessProbeExecArray []ContainerGroupContainerLivenessProbeExecInput

func (ContainerGroupContainerLivenessProbeExecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerLivenessProbeExec)(nil)).Elem()
}

func (i ContainerGroupContainerLivenessProbeExecArray) ToContainerGroupContainerLivenessProbeExecArrayOutput() ContainerGroupContainerLivenessProbeExecArrayOutput {
	return i.ToContainerGroupContainerLivenessProbeExecArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerLivenessProbeExecArray) ToContainerGroupContainerLivenessProbeExecArrayOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeExecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerLivenessProbeExecArrayOutput)
}

type ContainerGroupContainerLivenessProbeExecOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerLivenessProbeExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerLivenessProbeExec)(nil)).Elem()
}

func (o ContainerGroupContainerLivenessProbeExecOutput) ToContainerGroupContainerLivenessProbeExecOutput() ContainerGroupContainerLivenessProbeExecOutput {
	return o
}

func (o ContainerGroupContainerLivenessProbeExecOutput) ToContainerGroupContainerLivenessProbeExecOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeExecOutput {
	return o
}

// Commands to be executed inside the container when performing health checks using the command line method.
func (o ContainerGroupContainerLivenessProbeExecOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbeExec) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

type ContainerGroupContainerLivenessProbeExecArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerLivenessProbeExecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerLivenessProbeExec)(nil)).Elem()
}

func (o ContainerGroupContainerLivenessProbeExecArrayOutput) ToContainerGroupContainerLivenessProbeExecArrayOutput() ContainerGroupContainerLivenessProbeExecArrayOutput {
	return o
}

func (o ContainerGroupContainerLivenessProbeExecArrayOutput) ToContainerGroupContainerLivenessProbeExecArrayOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeExecArrayOutput {
	return o
}

func (o ContainerGroupContainerLivenessProbeExecArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerLivenessProbeExecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerLivenessProbeExec {
		return vs[0].([]ContainerGroupContainerLivenessProbeExec)[vs[1].(int)]
	}).(ContainerGroupContainerLivenessProbeExecOutput)
}

type ContainerGroupContainerLivenessProbeHttpGet struct {
	// The path of HTTP Get request detection when setting the postStart callback function using the HTTP request method.
	Path *string `pulumi:"path"`
	// When using the HTTP request method for health check, the port number for HTTP Get request detection.
	Port *int `pulumi:"port"`
	// The protocol type corresponding to the HTTP Get request when using the HTTP request method for health checks. Valid values: `HTTP`, `HTTPS`.
	Scheme *string `pulumi:"scheme"`
}

// ContainerGroupContainerLivenessProbeHttpGetInput is an input type that accepts ContainerGroupContainerLivenessProbeHttpGetArgs and ContainerGroupContainerLivenessProbeHttpGetOutput values.
// You can construct a concrete instance of `ContainerGroupContainerLivenessProbeHttpGetInput` via:
//
//	ContainerGroupContainerLivenessProbeHttpGetArgs{...}
type ContainerGroupContainerLivenessProbeHttpGetInput interface {
	pulumi.Input

	ToContainerGroupContainerLivenessProbeHttpGetOutput() ContainerGroupContainerLivenessProbeHttpGetOutput
	ToContainerGroupContainerLivenessProbeHttpGetOutputWithContext(context.Context) ContainerGroupContainerLivenessProbeHttpGetOutput
}

type ContainerGroupContainerLivenessProbeHttpGetArgs struct {
	// The path of HTTP Get request detection when setting the postStart callback function using the HTTP request method.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// When using the HTTP request method for health check, the port number for HTTP Get request detection.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The protocol type corresponding to the HTTP Get request when using the HTTP request method for health checks. Valid values: `HTTP`, `HTTPS`.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ContainerGroupContainerLivenessProbeHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerLivenessProbeHttpGet)(nil)).Elem()
}

func (i ContainerGroupContainerLivenessProbeHttpGetArgs) ToContainerGroupContainerLivenessProbeHttpGetOutput() ContainerGroupContainerLivenessProbeHttpGetOutput {
	return i.ToContainerGroupContainerLivenessProbeHttpGetOutputWithContext(context.Background())
}

func (i ContainerGroupContainerLivenessProbeHttpGetArgs) ToContainerGroupContainerLivenessProbeHttpGetOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerLivenessProbeHttpGetOutput)
}

// ContainerGroupContainerLivenessProbeHttpGetArrayInput is an input type that accepts ContainerGroupContainerLivenessProbeHttpGetArray and ContainerGroupContainerLivenessProbeHttpGetArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerLivenessProbeHttpGetArrayInput` via:
//
//	ContainerGroupContainerLivenessProbeHttpGetArray{ ContainerGroupContainerLivenessProbeHttpGetArgs{...} }
type ContainerGroupContainerLivenessProbeHttpGetArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerLivenessProbeHttpGetArrayOutput() ContainerGroupContainerLivenessProbeHttpGetArrayOutput
	ToContainerGroupContainerLivenessProbeHttpGetArrayOutputWithContext(context.Context) ContainerGroupContainerLivenessProbeHttpGetArrayOutput
}

type ContainerGroupContainerLivenessProbeHttpGetArray []ContainerGroupContainerLivenessProbeHttpGetInput

func (ContainerGroupContainerLivenessProbeHttpGetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerLivenessProbeHttpGet)(nil)).Elem()
}

func (i ContainerGroupContainerLivenessProbeHttpGetArray) ToContainerGroupContainerLivenessProbeHttpGetArrayOutput() ContainerGroupContainerLivenessProbeHttpGetArrayOutput {
	return i.ToContainerGroupContainerLivenessProbeHttpGetArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerLivenessProbeHttpGetArray) ToContainerGroupContainerLivenessProbeHttpGetArrayOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeHttpGetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerLivenessProbeHttpGetArrayOutput)
}

type ContainerGroupContainerLivenessProbeHttpGetOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerLivenessProbeHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerLivenessProbeHttpGet)(nil)).Elem()
}

func (o ContainerGroupContainerLivenessProbeHttpGetOutput) ToContainerGroupContainerLivenessProbeHttpGetOutput() ContainerGroupContainerLivenessProbeHttpGetOutput {
	return o
}

func (o ContainerGroupContainerLivenessProbeHttpGetOutput) ToContainerGroupContainerLivenessProbeHttpGetOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeHttpGetOutput {
	return o
}

// The path of HTTP Get request detection when setting the postStart callback function using the HTTP request method.
func (o ContainerGroupContainerLivenessProbeHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbeHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// When using the HTTP request method for health check, the port number for HTTP Get request detection.
func (o ContainerGroupContainerLivenessProbeHttpGetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbeHttpGet) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The protocol type corresponding to the HTTP Get request when using the HTTP request method for health checks. Valid values: `HTTP`, `HTTPS`.
func (o ContainerGroupContainerLivenessProbeHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbeHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ContainerGroupContainerLivenessProbeHttpGetArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerLivenessProbeHttpGetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerLivenessProbeHttpGet)(nil)).Elem()
}

func (o ContainerGroupContainerLivenessProbeHttpGetArrayOutput) ToContainerGroupContainerLivenessProbeHttpGetArrayOutput() ContainerGroupContainerLivenessProbeHttpGetArrayOutput {
	return o
}

func (o ContainerGroupContainerLivenessProbeHttpGetArrayOutput) ToContainerGroupContainerLivenessProbeHttpGetArrayOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeHttpGetArrayOutput {
	return o
}

func (o ContainerGroupContainerLivenessProbeHttpGetArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerLivenessProbeHttpGetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerLivenessProbeHttpGet {
		return vs[0].([]ContainerGroupContainerLivenessProbeHttpGet)[vs[1].(int)]
	}).(ContainerGroupContainerLivenessProbeHttpGetOutput)
}

type ContainerGroupContainerLivenessProbeTcpSocket struct {
	// When using the HTTP request method for health check, the port number for HTTP Get request detection.
	Port *int `pulumi:"port"`
}

// ContainerGroupContainerLivenessProbeTcpSocketInput is an input type that accepts ContainerGroupContainerLivenessProbeTcpSocketArgs and ContainerGroupContainerLivenessProbeTcpSocketOutput values.
// You can construct a concrete instance of `ContainerGroupContainerLivenessProbeTcpSocketInput` via:
//
//	ContainerGroupContainerLivenessProbeTcpSocketArgs{...}
type ContainerGroupContainerLivenessProbeTcpSocketInput interface {
	pulumi.Input

	ToContainerGroupContainerLivenessProbeTcpSocketOutput() ContainerGroupContainerLivenessProbeTcpSocketOutput
	ToContainerGroupContainerLivenessProbeTcpSocketOutputWithContext(context.Context) ContainerGroupContainerLivenessProbeTcpSocketOutput
}

type ContainerGroupContainerLivenessProbeTcpSocketArgs struct {
	// When using the HTTP request method for health check, the port number for HTTP Get request detection.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ContainerGroupContainerLivenessProbeTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerLivenessProbeTcpSocket)(nil)).Elem()
}

func (i ContainerGroupContainerLivenessProbeTcpSocketArgs) ToContainerGroupContainerLivenessProbeTcpSocketOutput() ContainerGroupContainerLivenessProbeTcpSocketOutput {
	return i.ToContainerGroupContainerLivenessProbeTcpSocketOutputWithContext(context.Background())
}

func (i ContainerGroupContainerLivenessProbeTcpSocketArgs) ToContainerGroupContainerLivenessProbeTcpSocketOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerLivenessProbeTcpSocketOutput)
}

// ContainerGroupContainerLivenessProbeTcpSocketArrayInput is an input type that accepts ContainerGroupContainerLivenessProbeTcpSocketArray and ContainerGroupContainerLivenessProbeTcpSocketArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerLivenessProbeTcpSocketArrayInput` via:
//
//	ContainerGroupContainerLivenessProbeTcpSocketArray{ ContainerGroupContainerLivenessProbeTcpSocketArgs{...} }
type ContainerGroupContainerLivenessProbeTcpSocketArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerLivenessProbeTcpSocketArrayOutput() ContainerGroupContainerLivenessProbeTcpSocketArrayOutput
	ToContainerGroupContainerLivenessProbeTcpSocketArrayOutputWithContext(context.Context) ContainerGroupContainerLivenessProbeTcpSocketArrayOutput
}

type ContainerGroupContainerLivenessProbeTcpSocketArray []ContainerGroupContainerLivenessProbeTcpSocketInput

func (ContainerGroupContainerLivenessProbeTcpSocketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerLivenessProbeTcpSocket)(nil)).Elem()
}

func (i ContainerGroupContainerLivenessProbeTcpSocketArray) ToContainerGroupContainerLivenessProbeTcpSocketArrayOutput() ContainerGroupContainerLivenessProbeTcpSocketArrayOutput {
	return i.ToContainerGroupContainerLivenessProbeTcpSocketArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerLivenessProbeTcpSocketArray) ToContainerGroupContainerLivenessProbeTcpSocketArrayOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeTcpSocketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerLivenessProbeTcpSocketArrayOutput)
}

type ContainerGroupContainerLivenessProbeTcpSocketOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerLivenessProbeTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerLivenessProbeTcpSocket)(nil)).Elem()
}

func (o ContainerGroupContainerLivenessProbeTcpSocketOutput) ToContainerGroupContainerLivenessProbeTcpSocketOutput() ContainerGroupContainerLivenessProbeTcpSocketOutput {
	return o
}

func (o ContainerGroupContainerLivenessProbeTcpSocketOutput) ToContainerGroupContainerLivenessProbeTcpSocketOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeTcpSocketOutput {
	return o
}

// When using the HTTP request method for health check, the port number for HTTP Get request detection.
func (o ContainerGroupContainerLivenessProbeTcpSocketOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerLivenessProbeTcpSocket) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ContainerGroupContainerLivenessProbeTcpSocketArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerLivenessProbeTcpSocketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerLivenessProbeTcpSocket)(nil)).Elem()
}

func (o ContainerGroupContainerLivenessProbeTcpSocketArrayOutput) ToContainerGroupContainerLivenessProbeTcpSocketArrayOutput() ContainerGroupContainerLivenessProbeTcpSocketArrayOutput {
	return o
}

func (o ContainerGroupContainerLivenessProbeTcpSocketArrayOutput) ToContainerGroupContainerLivenessProbeTcpSocketArrayOutputWithContext(ctx context.Context) ContainerGroupContainerLivenessProbeTcpSocketArrayOutput {
	return o
}

func (o ContainerGroupContainerLivenessProbeTcpSocketArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerLivenessProbeTcpSocketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerLivenessProbeTcpSocket {
		return vs[0].([]ContainerGroupContainerLivenessProbeTcpSocket)[vs[1].(int)]
	}).(ContainerGroupContainerLivenessProbeTcpSocketOutput)
}

type ContainerGroupContainerPort struct {
	// When using the HTTP request method for health check, the port number for HTTP Get request detection.
	Port *int `pulumi:"port"`
	// The type of the protocol. Valid values: `TCP` and `UDP`.
	Protocol *string `pulumi:"protocol"`
}

// ContainerGroupContainerPortInput is an input type that accepts ContainerGroupContainerPortArgs and ContainerGroupContainerPortOutput values.
// You can construct a concrete instance of `ContainerGroupContainerPortInput` via:
//
//	ContainerGroupContainerPortArgs{...}
type ContainerGroupContainerPortInput interface {
	pulumi.Input

	ToContainerGroupContainerPortOutput() ContainerGroupContainerPortOutput
	ToContainerGroupContainerPortOutputWithContext(context.Context) ContainerGroupContainerPortOutput
}

type ContainerGroupContainerPortArgs struct {
	// When using the HTTP request method for health check, the port number for HTTP Get request detection.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The type of the protocol. Valid values: `TCP` and `UDP`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ContainerGroupContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerPort)(nil)).Elem()
}

func (i ContainerGroupContainerPortArgs) ToContainerGroupContainerPortOutput() ContainerGroupContainerPortOutput {
	return i.ToContainerGroupContainerPortOutputWithContext(context.Background())
}

func (i ContainerGroupContainerPortArgs) ToContainerGroupContainerPortOutputWithContext(ctx context.Context) ContainerGroupContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerPortOutput)
}

// ContainerGroupContainerPortArrayInput is an input type that accepts ContainerGroupContainerPortArray and ContainerGroupContainerPortArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerPortArrayInput` via:
//
//	ContainerGroupContainerPortArray{ ContainerGroupContainerPortArgs{...} }
type ContainerGroupContainerPortArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerPortArrayOutput() ContainerGroupContainerPortArrayOutput
	ToContainerGroupContainerPortArrayOutputWithContext(context.Context) ContainerGroupContainerPortArrayOutput
}

type ContainerGroupContainerPortArray []ContainerGroupContainerPortInput

func (ContainerGroupContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerPort)(nil)).Elem()
}

func (i ContainerGroupContainerPortArray) ToContainerGroupContainerPortArrayOutput() ContainerGroupContainerPortArrayOutput {
	return i.ToContainerGroupContainerPortArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerPortArray) ToContainerGroupContainerPortArrayOutputWithContext(ctx context.Context) ContainerGroupContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerPortArrayOutput)
}

type ContainerGroupContainerPortOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerPort)(nil)).Elem()
}

func (o ContainerGroupContainerPortOutput) ToContainerGroupContainerPortOutput() ContainerGroupContainerPortOutput {
	return o
}

func (o ContainerGroupContainerPortOutput) ToContainerGroupContainerPortOutputWithContext(ctx context.Context) ContainerGroupContainerPortOutput {
	return o
}

// When using the HTTP request method for health check, the port number for HTTP Get request detection.
func (o ContainerGroupContainerPortOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerPort) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The type of the protocol. Valid values: `TCP` and `UDP`.
func (o ContainerGroupContainerPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ContainerGroupContainerPortArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerPort)(nil)).Elem()
}

func (o ContainerGroupContainerPortArrayOutput) ToContainerGroupContainerPortArrayOutput() ContainerGroupContainerPortArrayOutput {
	return o
}

func (o ContainerGroupContainerPortArrayOutput) ToContainerGroupContainerPortArrayOutputWithContext(ctx context.Context) ContainerGroupContainerPortArrayOutput {
	return o
}

func (o ContainerGroupContainerPortArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerPort {
		return vs[0].([]ContainerGroupContainerPort)[vs[1].(int)]
	}).(ContainerGroupContainerPortOutput)
}

type ContainerGroupContainerReadinessProbe struct {
	// Health check using command line method. See `exec` below.
	Execs []ContainerGroupContainerReadinessProbeExec `pulumi:"execs"`
	// Threshold for the number of checks that are determined to have failed since the last successful check (must be consecutive failures), default is 3.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// Health check using HTTP request method. See `httpGet` below.
	HttpGets []ContainerGroupContainerReadinessProbeHttpGet `pulumi:"httpGets"`
	// Check the time to start execution, calculated from the completion of container startup.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// Buffer time for the program to handle operations before closing.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// The check count threshold for re-identifying successful checks since the last failed check (must be consecutive successes), default is 1. Current must be 1.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// Health check using TCP socket method. See `tcpSocket` below.
	TcpSockets []ContainerGroupContainerReadinessProbeTcpSocket `pulumi:"tcpSockets"`
	// Check the timeout, the default is 1 second, the minimum is 1 second.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ContainerGroupContainerReadinessProbeInput is an input type that accepts ContainerGroupContainerReadinessProbeArgs and ContainerGroupContainerReadinessProbeOutput values.
// You can construct a concrete instance of `ContainerGroupContainerReadinessProbeInput` via:
//
//	ContainerGroupContainerReadinessProbeArgs{...}
type ContainerGroupContainerReadinessProbeInput interface {
	pulumi.Input

	ToContainerGroupContainerReadinessProbeOutput() ContainerGroupContainerReadinessProbeOutput
	ToContainerGroupContainerReadinessProbeOutputWithContext(context.Context) ContainerGroupContainerReadinessProbeOutput
}

type ContainerGroupContainerReadinessProbeArgs struct {
	// Health check using command line method. See `exec` below.
	Execs ContainerGroupContainerReadinessProbeExecArrayInput `pulumi:"execs"`
	// Threshold for the number of checks that are determined to have failed since the last successful check (must be consecutive failures), default is 3.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// Health check using HTTP request method. See `httpGet` below.
	HttpGets ContainerGroupContainerReadinessProbeHttpGetArrayInput `pulumi:"httpGets"`
	// Check the time to start execution, calculated from the completion of container startup.
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// Buffer time for the program to handle operations before closing.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// The check count threshold for re-identifying successful checks since the last failed check (must be consecutive successes), default is 1. Current must be 1.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// Health check using TCP socket method. See `tcpSocket` below.
	TcpSockets ContainerGroupContainerReadinessProbeTcpSocketArrayInput `pulumi:"tcpSockets"`
	// Check the timeout, the default is 1 second, the minimum is 1 second.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ContainerGroupContainerReadinessProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerReadinessProbe)(nil)).Elem()
}

func (i ContainerGroupContainerReadinessProbeArgs) ToContainerGroupContainerReadinessProbeOutput() ContainerGroupContainerReadinessProbeOutput {
	return i.ToContainerGroupContainerReadinessProbeOutputWithContext(context.Background())
}

func (i ContainerGroupContainerReadinessProbeArgs) ToContainerGroupContainerReadinessProbeOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerReadinessProbeOutput)
}

// ContainerGroupContainerReadinessProbeArrayInput is an input type that accepts ContainerGroupContainerReadinessProbeArray and ContainerGroupContainerReadinessProbeArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerReadinessProbeArrayInput` via:
//
//	ContainerGroupContainerReadinessProbeArray{ ContainerGroupContainerReadinessProbeArgs{...} }
type ContainerGroupContainerReadinessProbeArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerReadinessProbeArrayOutput() ContainerGroupContainerReadinessProbeArrayOutput
	ToContainerGroupContainerReadinessProbeArrayOutputWithContext(context.Context) ContainerGroupContainerReadinessProbeArrayOutput
}

type ContainerGroupContainerReadinessProbeArray []ContainerGroupContainerReadinessProbeInput

func (ContainerGroupContainerReadinessProbeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerReadinessProbe)(nil)).Elem()
}

func (i ContainerGroupContainerReadinessProbeArray) ToContainerGroupContainerReadinessProbeArrayOutput() ContainerGroupContainerReadinessProbeArrayOutput {
	return i.ToContainerGroupContainerReadinessProbeArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerReadinessProbeArray) ToContainerGroupContainerReadinessProbeArrayOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerReadinessProbeArrayOutput)
}

type ContainerGroupContainerReadinessProbeOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerReadinessProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerReadinessProbe)(nil)).Elem()
}

func (o ContainerGroupContainerReadinessProbeOutput) ToContainerGroupContainerReadinessProbeOutput() ContainerGroupContainerReadinessProbeOutput {
	return o
}

func (o ContainerGroupContainerReadinessProbeOutput) ToContainerGroupContainerReadinessProbeOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeOutput {
	return o
}

// Health check using command line method. See `exec` below.
func (o ContainerGroupContainerReadinessProbeOutput) Execs() ContainerGroupContainerReadinessProbeExecArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbe) []ContainerGroupContainerReadinessProbeExec {
		return v.Execs
	}).(ContainerGroupContainerReadinessProbeExecArrayOutput)
}

// Threshold for the number of checks that are determined to have failed since the last successful check (must be consecutive failures), default is 3.
func (o ContainerGroupContainerReadinessProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// Health check using HTTP request method. See `httpGet` below.
func (o ContainerGroupContainerReadinessProbeOutput) HttpGets() ContainerGroupContainerReadinessProbeHttpGetArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbe) []ContainerGroupContainerReadinessProbeHttpGet {
		return v.HttpGets
	}).(ContainerGroupContainerReadinessProbeHttpGetArrayOutput)
}

// Check the time to start execution, calculated from the completion of container startup.
func (o ContainerGroupContainerReadinessProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// Buffer time for the program to handle operations before closing.
func (o ContainerGroupContainerReadinessProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// The check count threshold for re-identifying successful checks since the last failed check (must be consecutive successes), default is 1. Current must be 1.
func (o ContainerGroupContainerReadinessProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// Health check using TCP socket method. See `tcpSocket` below.
func (o ContainerGroupContainerReadinessProbeOutput) TcpSockets() ContainerGroupContainerReadinessProbeTcpSocketArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbe) []ContainerGroupContainerReadinessProbeTcpSocket {
		return v.TcpSockets
	}).(ContainerGroupContainerReadinessProbeTcpSocketArrayOutput)
}

// Check the timeout, the default is 1 second, the minimum is 1 second.
func (o ContainerGroupContainerReadinessProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ContainerGroupContainerReadinessProbeArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerReadinessProbeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerReadinessProbe)(nil)).Elem()
}

func (o ContainerGroupContainerReadinessProbeArrayOutput) ToContainerGroupContainerReadinessProbeArrayOutput() ContainerGroupContainerReadinessProbeArrayOutput {
	return o
}

func (o ContainerGroupContainerReadinessProbeArrayOutput) ToContainerGroupContainerReadinessProbeArrayOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeArrayOutput {
	return o
}

func (o ContainerGroupContainerReadinessProbeArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerReadinessProbeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerReadinessProbe {
		return vs[0].([]ContainerGroupContainerReadinessProbe)[vs[1].(int)]
	}).(ContainerGroupContainerReadinessProbeOutput)
}

type ContainerGroupContainerReadinessProbeExec struct {
	// Commands to be executed inside the container when performing health checks using the command line method.
	Commands []string `pulumi:"commands"`
}

// ContainerGroupContainerReadinessProbeExecInput is an input type that accepts ContainerGroupContainerReadinessProbeExecArgs and ContainerGroupContainerReadinessProbeExecOutput values.
// You can construct a concrete instance of `ContainerGroupContainerReadinessProbeExecInput` via:
//
//	ContainerGroupContainerReadinessProbeExecArgs{...}
type ContainerGroupContainerReadinessProbeExecInput interface {
	pulumi.Input

	ToContainerGroupContainerReadinessProbeExecOutput() ContainerGroupContainerReadinessProbeExecOutput
	ToContainerGroupContainerReadinessProbeExecOutputWithContext(context.Context) ContainerGroupContainerReadinessProbeExecOutput
}

type ContainerGroupContainerReadinessProbeExecArgs struct {
	// Commands to be executed inside the container when performing health checks using the command line method.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
}

func (ContainerGroupContainerReadinessProbeExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerReadinessProbeExec)(nil)).Elem()
}

func (i ContainerGroupContainerReadinessProbeExecArgs) ToContainerGroupContainerReadinessProbeExecOutput() ContainerGroupContainerReadinessProbeExecOutput {
	return i.ToContainerGroupContainerReadinessProbeExecOutputWithContext(context.Background())
}

func (i ContainerGroupContainerReadinessProbeExecArgs) ToContainerGroupContainerReadinessProbeExecOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerReadinessProbeExecOutput)
}

// ContainerGroupContainerReadinessProbeExecArrayInput is an input type that accepts ContainerGroupContainerReadinessProbeExecArray and ContainerGroupContainerReadinessProbeExecArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerReadinessProbeExecArrayInput` via:
//
//	ContainerGroupContainerReadinessProbeExecArray{ ContainerGroupContainerReadinessProbeExecArgs{...} }
type ContainerGroupContainerReadinessProbeExecArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerReadinessProbeExecArrayOutput() ContainerGroupContainerReadinessProbeExecArrayOutput
	ToContainerGroupContainerReadinessProbeExecArrayOutputWithContext(context.Context) ContainerGroupContainerReadinessProbeExecArrayOutput
}

type ContainerGroupContainerReadinessProbeExecArray []ContainerGroupContainerReadinessProbeExecInput

func (ContainerGroupContainerReadinessProbeExecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerReadinessProbeExec)(nil)).Elem()
}

func (i ContainerGroupContainerReadinessProbeExecArray) ToContainerGroupContainerReadinessProbeExecArrayOutput() ContainerGroupContainerReadinessProbeExecArrayOutput {
	return i.ToContainerGroupContainerReadinessProbeExecArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerReadinessProbeExecArray) ToContainerGroupContainerReadinessProbeExecArrayOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeExecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerReadinessProbeExecArrayOutput)
}

type ContainerGroupContainerReadinessProbeExecOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerReadinessProbeExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerReadinessProbeExec)(nil)).Elem()
}

func (o ContainerGroupContainerReadinessProbeExecOutput) ToContainerGroupContainerReadinessProbeExecOutput() ContainerGroupContainerReadinessProbeExecOutput {
	return o
}

func (o ContainerGroupContainerReadinessProbeExecOutput) ToContainerGroupContainerReadinessProbeExecOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeExecOutput {
	return o
}

// Commands to be executed inside the container when performing health checks using the command line method.
func (o ContainerGroupContainerReadinessProbeExecOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbeExec) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

type ContainerGroupContainerReadinessProbeExecArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerReadinessProbeExecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerReadinessProbeExec)(nil)).Elem()
}

func (o ContainerGroupContainerReadinessProbeExecArrayOutput) ToContainerGroupContainerReadinessProbeExecArrayOutput() ContainerGroupContainerReadinessProbeExecArrayOutput {
	return o
}

func (o ContainerGroupContainerReadinessProbeExecArrayOutput) ToContainerGroupContainerReadinessProbeExecArrayOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeExecArrayOutput {
	return o
}

func (o ContainerGroupContainerReadinessProbeExecArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerReadinessProbeExecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerReadinessProbeExec {
		return vs[0].([]ContainerGroupContainerReadinessProbeExec)[vs[1].(int)]
	}).(ContainerGroupContainerReadinessProbeExecOutput)
}

type ContainerGroupContainerReadinessProbeHttpGet struct {
	// The path of HTTP Get request detection when setting the postStart callback function using the HTTP request method.
	Path *string `pulumi:"path"`
	// When using the HTTP request method for health check, the port number for HTTP Get request detection.
	Port *int `pulumi:"port"`
	// The protocol type corresponding to the HTTP Get request when using the HTTP request method for health checks. Valid values: `HTTP`, `HTTPS`.
	Scheme *string `pulumi:"scheme"`
}

// ContainerGroupContainerReadinessProbeHttpGetInput is an input type that accepts ContainerGroupContainerReadinessProbeHttpGetArgs and ContainerGroupContainerReadinessProbeHttpGetOutput values.
// You can construct a concrete instance of `ContainerGroupContainerReadinessProbeHttpGetInput` via:
//
//	ContainerGroupContainerReadinessProbeHttpGetArgs{...}
type ContainerGroupContainerReadinessProbeHttpGetInput interface {
	pulumi.Input

	ToContainerGroupContainerReadinessProbeHttpGetOutput() ContainerGroupContainerReadinessProbeHttpGetOutput
	ToContainerGroupContainerReadinessProbeHttpGetOutputWithContext(context.Context) ContainerGroupContainerReadinessProbeHttpGetOutput
}

type ContainerGroupContainerReadinessProbeHttpGetArgs struct {
	// The path of HTTP Get request detection when setting the postStart callback function using the HTTP request method.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// When using the HTTP request method for health check, the port number for HTTP Get request detection.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The protocol type corresponding to the HTTP Get request when using the HTTP request method for health checks. Valid values: `HTTP`, `HTTPS`.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ContainerGroupContainerReadinessProbeHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerReadinessProbeHttpGet)(nil)).Elem()
}

func (i ContainerGroupContainerReadinessProbeHttpGetArgs) ToContainerGroupContainerReadinessProbeHttpGetOutput() ContainerGroupContainerReadinessProbeHttpGetOutput {
	return i.ToContainerGroupContainerReadinessProbeHttpGetOutputWithContext(context.Background())
}

func (i ContainerGroupContainerReadinessProbeHttpGetArgs) ToContainerGroupContainerReadinessProbeHttpGetOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerReadinessProbeHttpGetOutput)
}

// ContainerGroupContainerReadinessProbeHttpGetArrayInput is an input type that accepts ContainerGroupContainerReadinessProbeHttpGetArray and ContainerGroupContainerReadinessProbeHttpGetArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerReadinessProbeHttpGetArrayInput` via:
//
//	ContainerGroupContainerReadinessProbeHttpGetArray{ ContainerGroupContainerReadinessProbeHttpGetArgs{...} }
type ContainerGroupContainerReadinessProbeHttpGetArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerReadinessProbeHttpGetArrayOutput() ContainerGroupContainerReadinessProbeHttpGetArrayOutput
	ToContainerGroupContainerReadinessProbeHttpGetArrayOutputWithContext(context.Context) ContainerGroupContainerReadinessProbeHttpGetArrayOutput
}

type ContainerGroupContainerReadinessProbeHttpGetArray []ContainerGroupContainerReadinessProbeHttpGetInput

func (ContainerGroupContainerReadinessProbeHttpGetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerReadinessProbeHttpGet)(nil)).Elem()
}

func (i ContainerGroupContainerReadinessProbeHttpGetArray) ToContainerGroupContainerReadinessProbeHttpGetArrayOutput() ContainerGroupContainerReadinessProbeHttpGetArrayOutput {
	return i.ToContainerGroupContainerReadinessProbeHttpGetArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerReadinessProbeHttpGetArray) ToContainerGroupContainerReadinessProbeHttpGetArrayOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeHttpGetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerReadinessProbeHttpGetArrayOutput)
}

type ContainerGroupContainerReadinessProbeHttpGetOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerReadinessProbeHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerReadinessProbeHttpGet)(nil)).Elem()
}

func (o ContainerGroupContainerReadinessProbeHttpGetOutput) ToContainerGroupContainerReadinessProbeHttpGetOutput() ContainerGroupContainerReadinessProbeHttpGetOutput {
	return o
}

func (o ContainerGroupContainerReadinessProbeHttpGetOutput) ToContainerGroupContainerReadinessProbeHttpGetOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeHttpGetOutput {
	return o
}

// The path of HTTP Get request detection when setting the postStart callback function using the HTTP request method.
func (o ContainerGroupContainerReadinessProbeHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbeHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// When using the HTTP request method for health check, the port number for HTTP Get request detection.
func (o ContainerGroupContainerReadinessProbeHttpGetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbeHttpGet) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The protocol type corresponding to the HTTP Get request when using the HTTP request method for health checks. Valid values: `HTTP`, `HTTPS`.
func (o ContainerGroupContainerReadinessProbeHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbeHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ContainerGroupContainerReadinessProbeHttpGetArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerReadinessProbeHttpGetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerReadinessProbeHttpGet)(nil)).Elem()
}

func (o ContainerGroupContainerReadinessProbeHttpGetArrayOutput) ToContainerGroupContainerReadinessProbeHttpGetArrayOutput() ContainerGroupContainerReadinessProbeHttpGetArrayOutput {
	return o
}

func (o ContainerGroupContainerReadinessProbeHttpGetArrayOutput) ToContainerGroupContainerReadinessProbeHttpGetArrayOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeHttpGetArrayOutput {
	return o
}

func (o ContainerGroupContainerReadinessProbeHttpGetArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerReadinessProbeHttpGetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerReadinessProbeHttpGet {
		return vs[0].([]ContainerGroupContainerReadinessProbeHttpGet)[vs[1].(int)]
	}).(ContainerGroupContainerReadinessProbeHttpGetOutput)
}

type ContainerGroupContainerReadinessProbeTcpSocket struct {
	// When using the HTTP request method for health check, the port number for HTTP Get request detection.
	Port *int `pulumi:"port"`
}

// ContainerGroupContainerReadinessProbeTcpSocketInput is an input type that accepts ContainerGroupContainerReadinessProbeTcpSocketArgs and ContainerGroupContainerReadinessProbeTcpSocketOutput values.
// You can construct a concrete instance of `ContainerGroupContainerReadinessProbeTcpSocketInput` via:
//
//	ContainerGroupContainerReadinessProbeTcpSocketArgs{...}
type ContainerGroupContainerReadinessProbeTcpSocketInput interface {
	pulumi.Input

	ToContainerGroupContainerReadinessProbeTcpSocketOutput() ContainerGroupContainerReadinessProbeTcpSocketOutput
	ToContainerGroupContainerReadinessProbeTcpSocketOutputWithContext(context.Context) ContainerGroupContainerReadinessProbeTcpSocketOutput
}

type ContainerGroupContainerReadinessProbeTcpSocketArgs struct {
	// When using the HTTP request method for health check, the port number for HTTP Get request detection.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ContainerGroupContainerReadinessProbeTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerReadinessProbeTcpSocket)(nil)).Elem()
}

func (i ContainerGroupContainerReadinessProbeTcpSocketArgs) ToContainerGroupContainerReadinessProbeTcpSocketOutput() ContainerGroupContainerReadinessProbeTcpSocketOutput {
	return i.ToContainerGroupContainerReadinessProbeTcpSocketOutputWithContext(context.Background())
}

func (i ContainerGroupContainerReadinessProbeTcpSocketArgs) ToContainerGroupContainerReadinessProbeTcpSocketOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerReadinessProbeTcpSocketOutput)
}

// ContainerGroupContainerReadinessProbeTcpSocketArrayInput is an input type that accepts ContainerGroupContainerReadinessProbeTcpSocketArray and ContainerGroupContainerReadinessProbeTcpSocketArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerReadinessProbeTcpSocketArrayInput` via:
//
//	ContainerGroupContainerReadinessProbeTcpSocketArray{ ContainerGroupContainerReadinessProbeTcpSocketArgs{...} }
type ContainerGroupContainerReadinessProbeTcpSocketArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerReadinessProbeTcpSocketArrayOutput() ContainerGroupContainerReadinessProbeTcpSocketArrayOutput
	ToContainerGroupContainerReadinessProbeTcpSocketArrayOutputWithContext(context.Context) ContainerGroupContainerReadinessProbeTcpSocketArrayOutput
}

type ContainerGroupContainerReadinessProbeTcpSocketArray []ContainerGroupContainerReadinessProbeTcpSocketInput

func (ContainerGroupContainerReadinessProbeTcpSocketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerReadinessProbeTcpSocket)(nil)).Elem()
}

func (i ContainerGroupContainerReadinessProbeTcpSocketArray) ToContainerGroupContainerReadinessProbeTcpSocketArrayOutput() ContainerGroupContainerReadinessProbeTcpSocketArrayOutput {
	return i.ToContainerGroupContainerReadinessProbeTcpSocketArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerReadinessProbeTcpSocketArray) ToContainerGroupContainerReadinessProbeTcpSocketArrayOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeTcpSocketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerReadinessProbeTcpSocketArrayOutput)
}

type ContainerGroupContainerReadinessProbeTcpSocketOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerReadinessProbeTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerReadinessProbeTcpSocket)(nil)).Elem()
}

func (o ContainerGroupContainerReadinessProbeTcpSocketOutput) ToContainerGroupContainerReadinessProbeTcpSocketOutput() ContainerGroupContainerReadinessProbeTcpSocketOutput {
	return o
}

func (o ContainerGroupContainerReadinessProbeTcpSocketOutput) ToContainerGroupContainerReadinessProbeTcpSocketOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeTcpSocketOutput {
	return o
}

// When using the HTTP request method for health check, the port number for HTTP Get request detection.
func (o ContainerGroupContainerReadinessProbeTcpSocketOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerReadinessProbeTcpSocket) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ContainerGroupContainerReadinessProbeTcpSocketArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerReadinessProbeTcpSocketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerReadinessProbeTcpSocket)(nil)).Elem()
}

func (o ContainerGroupContainerReadinessProbeTcpSocketArrayOutput) ToContainerGroupContainerReadinessProbeTcpSocketArrayOutput() ContainerGroupContainerReadinessProbeTcpSocketArrayOutput {
	return o
}

func (o ContainerGroupContainerReadinessProbeTcpSocketArrayOutput) ToContainerGroupContainerReadinessProbeTcpSocketArrayOutputWithContext(ctx context.Context) ContainerGroupContainerReadinessProbeTcpSocketArrayOutput {
	return o
}

func (o ContainerGroupContainerReadinessProbeTcpSocketArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerReadinessProbeTcpSocketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerReadinessProbeTcpSocket {
		return vs[0].([]ContainerGroupContainerReadinessProbeTcpSocket)[vs[1].(int)]
	}).(ContainerGroupContainerReadinessProbeTcpSocketOutput)
}

type ContainerGroupContainerSecurityContext struct {
	// The permissions that you want to grant to the processes in the containers. See `capability` below.
	Capabilities []ContainerGroupContainerSecurityContextCapability `pulumi:"capabilities"`
	// The ID of the user who runs the container.
	RunAsUser *int `pulumi:"runAsUser"`
}

// ContainerGroupContainerSecurityContextInput is an input type that accepts ContainerGroupContainerSecurityContextArgs and ContainerGroupContainerSecurityContextOutput values.
// You can construct a concrete instance of `ContainerGroupContainerSecurityContextInput` via:
//
//	ContainerGroupContainerSecurityContextArgs{...}
type ContainerGroupContainerSecurityContextInput interface {
	pulumi.Input

	ToContainerGroupContainerSecurityContextOutput() ContainerGroupContainerSecurityContextOutput
	ToContainerGroupContainerSecurityContextOutputWithContext(context.Context) ContainerGroupContainerSecurityContextOutput
}

type ContainerGroupContainerSecurityContextArgs struct {
	// The permissions that you want to grant to the processes in the containers. See `capability` below.
	Capabilities ContainerGroupContainerSecurityContextCapabilityArrayInput `pulumi:"capabilities"`
	// The ID of the user who runs the container.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
}

func (ContainerGroupContainerSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerSecurityContext)(nil)).Elem()
}

func (i ContainerGroupContainerSecurityContextArgs) ToContainerGroupContainerSecurityContextOutput() ContainerGroupContainerSecurityContextOutput {
	return i.ToContainerGroupContainerSecurityContextOutputWithContext(context.Background())
}

func (i ContainerGroupContainerSecurityContextArgs) ToContainerGroupContainerSecurityContextOutputWithContext(ctx context.Context) ContainerGroupContainerSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerSecurityContextOutput)
}

// ContainerGroupContainerSecurityContextArrayInput is an input type that accepts ContainerGroupContainerSecurityContextArray and ContainerGroupContainerSecurityContextArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerSecurityContextArrayInput` via:
//
//	ContainerGroupContainerSecurityContextArray{ ContainerGroupContainerSecurityContextArgs{...} }
type ContainerGroupContainerSecurityContextArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerSecurityContextArrayOutput() ContainerGroupContainerSecurityContextArrayOutput
	ToContainerGroupContainerSecurityContextArrayOutputWithContext(context.Context) ContainerGroupContainerSecurityContextArrayOutput
}

type ContainerGroupContainerSecurityContextArray []ContainerGroupContainerSecurityContextInput

func (ContainerGroupContainerSecurityContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerSecurityContext)(nil)).Elem()
}

func (i ContainerGroupContainerSecurityContextArray) ToContainerGroupContainerSecurityContextArrayOutput() ContainerGroupContainerSecurityContextArrayOutput {
	return i.ToContainerGroupContainerSecurityContextArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerSecurityContextArray) ToContainerGroupContainerSecurityContextArrayOutputWithContext(ctx context.Context) ContainerGroupContainerSecurityContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerSecurityContextArrayOutput)
}

type ContainerGroupContainerSecurityContextOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerSecurityContext)(nil)).Elem()
}

func (o ContainerGroupContainerSecurityContextOutput) ToContainerGroupContainerSecurityContextOutput() ContainerGroupContainerSecurityContextOutput {
	return o
}

func (o ContainerGroupContainerSecurityContextOutput) ToContainerGroupContainerSecurityContextOutputWithContext(ctx context.Context) ContainerGroupContainerSecurityContextOutput {
	return o
}

// The permissions that you want to grant to the processes in the containers. See `capability` below.
func (o ContainerGroupContainerSecurityContextOutput) Capabilities() ContainerGroupContainerSecurityContextCapabilityArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainerSecurityContext) []ContainerGroupContainerSecurityContextCapability {
		return v.Capabilities
	}).(ContainerGroupContainerSecurityContextCapabilityArrayOutput)
}

// The ID of the user who runs the container.
func (o ContainerGroupContainerSecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerSecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

type ContainerGroupContainerSecurityContextArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerSecurityContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerSecurityContext)(nil)).Elem()
}

func (o ContainerGroupContainerSecurityContextArrayOutput) ToContainerGroupContainerSecurityContextArrayOutput() ContainerGroupContainerSecurityContextArrayOutput {
	return o
}

func (o ContainerGroupContainerSecurityContextArrayOutput) ToContainerGroupContainerSecurityContextArrayOutputWithContext(ctx context.Context) ContainerGroupContainerSecurityContextArrayOutput {
	return o
}

func (o ContainerGroupContainerSecurityContextArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerSecurityContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerSecurityContext {
		return vs[0].([]ContainerGroupContainerSecurityContext)[vs[1].(int)]
	}).(ContainerGroupContainerSecurityContextOutput)
}

type ContainerGroupContainerSecurityContextCapability struct {
	// The permissions that you want to grant to the processes in the containers.
	Adds []string `pulumi:"adds"`
}

// ContainerGroupContainerSecurityContextCapabilityInput is an input type that accepts ContainerGroupContainerSecurityContextCapabilityArgs and ContainerGroupContainerSecurityContextCapabilityOutput values.
// You can construct a concrete instance of `ContainerGroupContainerSecurityContextCapabilityInput` via:
//
//	ContainerGroupContainerSecurityContextCapabilityArgs{...}
type ContainerGroupContainerSecurityContextCapabilityInput interface {
	pulumi.Input

	ToContainerGroupContainerSecurityContextCapabilityOutput() ContainerGroupContainerSecurityContextCapabilityOutput
	ToContainerGroupContainerSecurityContextCapabilityOutputWithContext(context.Context) ContainerGroupContainerSecurityContextCapabilityOutput
}

type ContainerGroupContainerSecurityContextCapabilityArgs struct {
	// The permissions that you want to grant to the processes in the containers.
	Adds pulumi.StringArrayInput `pulumi:"adds"`
}

func (ContainerGroupContainerSecurityContextCapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerSecurityContextCapability)(nil)).Elem()
}

func (i ContainerGroupContainerSecurityContextCapabilityArgs) ToContainerGroupContainerSecurityContextCapabilityOutput() ContainerGroupContainerSecurityContextCapabilityOutput {
	return i.ToContainerGroupContainerSecurityContextCapabilityOutputWithContext(context.Background())
}

func (i ContainerGroupContainerSecurityContextCapabilityArgs) ToContainerGroupContainerSecurityContextCapabilityOutputWithContext(ctx context.Context) ContainerGroupContainerSecurityContextCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerSecurityContextCapabilityOutput)
}

// ContainerGroupContainerSecurityContextCapabilityArrayInput is an input type that accepts ContainerGroupContainerSecurityContextCapabilityArray and ContainerGroupContainerSecurityContextCapabilityArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerSecurityContextCapabilityArrayInput` via:
//
//	ContainerGroupContainerSecurityContextCapabilityArray{ ContainerGroupContainerSecurityContextCapabilityArgs{...} }
type ContainerGroupContainerSecurityContextCapabilityArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerSecurityContextCapabilityArrayOutput() ContainerGroupContainerSecurityContextCapabilityArrayOutput
	ToContainerGroupContainerSecurityContextCapabilityArrayOutputWithContext(context.Context) ContainerGroupContainerSecurityContextCapabilityArrayOutput
}

type ContainerGroupContainerSecurityContextCapabilityArray []ContainerGroupContainerSecurityContextCapabilityInput

func (ContainerGroupContainerSecurityContextCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerSecurityContextCapability)(nil)).Elem()
}

func (i ContainerGroupContainerSecurityContextCapabilityArray) ToContainerGroupContainerSecurityContextCapabilityArrayOutput() ContainerGroupContainerSecurityContextCapabilityArrayOutput {
	return i.ToContainerGroupContainerSecurityContextCapabilityArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerSecurityContextCapabilityArray) ToContainerGroupContainerSecurityContextCapabilityArrayOutputWithContext(ctx context.Context) ContainerGroupContainerSecurityContextCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerSecurityContextCapabilityArrayOutput)
}

type ContainerGroupContainerSecurityContextCapabilityOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerSecurityContextCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerSecurityContextCapability)(nil)).Elem()
}

func (o ContainerGroupContainerSecurityContextCapabilityOutput) ToContainerGroupContainerSecurityContextCapabilityOutput() ContainerGroupContainerSecurityContextCapabilityOutput {
	return o
}

func (o ContainerGroupContainerSecurityContextCapabilityOutput) ToContainerGroupContainerSecurityContextCapabilityOutputWithContext(ctx context.Context) ContainerGroupContainerSecurityContextCapabilityOutput {
	return o
}

// The permissions that you want to grant to the processes in the containers.
func (o ContainerGroupContainerSecurityContextCapabilityOutput) Adds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupContainerSecurityContextCapability) []string { return v.Adds }).(pulumi.StringArrayOutput)
}

type ContainerGroupContainerSecurityContextCapabilityArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerSecurityContextCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerSecurityContextCapability)(nil)).Elem()
}

func (o ContainerGroupContainerSecurityContextCapabilityArrayOutput) ToContainerGroupContainerSecurityContextCapabilityArrayOutput() ContainerGroupContainerSecurityContextCapabilityArrayOutput {
	return o
}

func (o ContainerGroupContainerSecurityContextCapabilityArrayOutput) ToContainerGroupContainerSecurityContextCapabilityArrayOutputWithContext(ctx context.Context) ContainerGroupContainerSecurityContextCapabilityArrayOutput {
	return o
}

func (o ContainerGroupContainerSecurityContextCapabilityArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerSecurityContextCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerSecurityContextCapability {
		return vs[0].([]ContainerGroupContainerSecurityContextCapability)[vs[1].(int)]
	}).(ContainerGroupContainerSecurityContextCapabilityOutput)
}

type ContainerGroupContainerVolumeMount struct {
	// The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
	MountPath *string `pulumi:"mountPath"`
	// The name of the mounted volume.
	Name *string `pulumi:"name"`
	// Specifies whether the volume is read-only. Default value: `false`.
	ReadOnly *bool `pulumi:"readOnly"`
}

// ContainerGroupContainerVolumeMountInput is an input type that accepts ContainerGroupContainerVolumeMountArgs and ContainerGroupContainerVolumeMountOutput values.
// You can construct a concrete instance of `ContainerGroupContainerVolumeMountInput` via:
//
//	ContainerGroupContainerVolumeMountArgs{...}
type ContainerGroupContainerVolumeMountInput interface {
	pulumi.Input

	ToContainerGroupContainerVolumeMountOutput() ContainerGroupContainerVolumeMountOutput
	ToContainerGroupContainerVolumeMountOutputWithContext(context.Context) ContainerGroupContainerVolumeMountOutput
}

type ContainerGroupContainerVolumeMountArgs struct {
	// The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// The name of the mounted volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies whether the volume is read-only. Default value: `false`.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ContainerGroupContainerVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerVolumeMount)(nil)).Elem()
}

func (i ContainerGroupContainerVolumeMountArgs) ToContainerGroupContainerVolumeMountOutput() ContainerGroupContainerVolumeMountOutput {
	return i.ToContainerGroupContainerVolumeMountOutputWithContext(context.Background())
}

func (i ContainerGroupContainerVolumeMountArgs) ToContainerGroupContainerVolumeMountOutputWithContext(ctx context.Context) ContainerGroupContainerVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerVolumeMountOutput)
}

// ContainerGroupContainerVolumeMountArrayInput is an input type that accepts ContainerGroupContainerVolumeMountArray and ContainerGroupContainerVolumeMountArrayOutput values.
// You can construct a concrete instance of `ContainerGroupContainerVolumeMountArrayInput` via:
//
//	ContainerGroupContainerVolumeMountArray{ ContainerGroupContainerVolumeMountArgs{...} }
type ContainerGroupContainerVolumeMountArrayInput interface {
	pulumi.Input

	ToContainerGroupContainerVolumeMountArrayOutput() ContainerGroupContainerVolumeMountArrayOutput
	ToContainerGroupContainerVolumeMountArrayOutputWithContext(context.Context) ContainerGroupContainerVolumeMountArrayOutput
}

type ContainerGroupContainerVolumeMountArray []ContainerGroupContainerVolumeMountInput

func (ContainerGroupContainerVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerVolumeMount)(nil)).Elem()
}

func (i ContainerGroupContainerVolumeMountArray) ToContainerGroupContainerVolumeMountArrayOutput() ContainerGroupContainerVolumeMountArrayOutput {
	return i.ToContainerGroupContainerVolumeMountArrayOutputWithContext(context.Background())
}

func (i ContainerGroupContainerVolumeMountArray) ToContainerGroupContainerVolumeMountArrayOutputWithContext(ctx context.Context) ContainerGroupContainerVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupContainerVolumeMountArrayOutput)
}

type ContainerGroupContainerVolumeMountOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupContainerVolumeMount)(nil)).Elem()
}

func (o ContainerGroupContainerVolumeMountOutput) ToContainerGroupContainerVolumeMountOutput() ContainerGroupContainerVolumeMountOutput {
	return o
}

func (o ContainerGroupContainerVolumeMountOutput) ToContainerGroupContainerVolumeMountOutputWithContext(ctx context.Context) ContainerGroupContainerVolumeMountOutput {
	return o
}

// The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
func (o ContainerGroupContainerVolumeMountOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerVolumeMount) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// The name of the mounted volume.
func (o ContainerGroupContainerVolumeMountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerVolumeMount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies whether the volume is read-only. Default value: `false`.
func (o ContainerGroupContainerVolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerGroupContainerVolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ContainerGroupContainerVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupContainerVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupContainerVolumeMount)(nil)).Elem()
}

func (o ContainerGroupContainerVolumeMountArrayOutput) ToContainerGroupContainerVolumeMountArrayOutput() ContainerGroupContainerVolumeMountArrayOutput {
	return o
}

func (o ContainerGroupContainerVolumeMountArrayOutput) ToContainerGroupContainerVolumeMountArrayOutputWithContext(ctx context.Context) ContainerGroupContainerVolumeMountArrayOutput {
	return o
}

func (o ContainerGroupContainerVolumeMountArrayOutput) Index(i pulumi.IntInput) ContainerGroupContainerVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupContainerVolumeMount {
		return vs[0].([]ContainerGroupContainerVolumeMount)[vs[1].(int)]
	}).(ContainerGroupContainerVolumeMountOutput)
}

type ContainerGroupDnsConfig struct {
	// The list of DNS server IP addresses.
	NameServers []string `pulumi:"nameServers"`
	// The structure of options. See `options` below.
	Options []ContainerGroupDnsConfigOption `pulumi:"options"`
	// The list of DNS lookup domains.
	Searches []string `pulumi:"searches"`
}

// ContainerGroupDnsConfigInput is an input type that accepts ContainerGroupDnsConfigArgs and ContainerGroupDnsConfigOutput values.
// You can construct a concrete instance of `ContainerGroupDnsConfigInput` via:
//
//	ContainerGroupDnsConfigArgs{...}
type ContainerGroupDnsConfigInput interface {
	pulumi.Input

	ToContainerGroupDnsConfigOutput() ContainerGroupDnsConfigOutput
	ToContainerGroupDnsConfigOutputWithContext(context.Context) ContainerGroupDnsConfigOutput
}

type ContainerGroupDnsConfigArgs struct {
	// The list of DNS server IP addresses.
	NameServers pulumi.StringArrayInput `pulumi:"nameServers"`
	// The structure of options. See `options` below.
	Options ContainerGroupDnsConfigOptionArrayInput `pulumi:"options"`
	// The list of DNS lookup domains.
	Searches pulumi.StringArrayInput `pulumi:"searches"`
}

func (ContainerGroupDnsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDnsConfig)(nil)).Elem()
}

func (i ContainerGroupDnsConfigArgs) ToContainerGroupDnsConfigOutput() ContainerGroupDnsConfigOutput {
	return i.ToContainerGroupDnsConfigOutputWithContext(context.Background())
}

func (i ContainerGroupDnsConfigArgs) ToContainerGroupDnsConfigOutputWithContext(ctx context.Context) ContainerGroupDnsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDnsConfigOutput)
}

func (i ContainerGroupDnsConfigArgs) ToContainerGroupDnsConfigPtrOutput() ContainerGroupDnsConfigPtrOutput {
	return i.ToContainerGroupDnsConfigPtrOutputWithContext(context.Background())
}

func (i ContainerGroupDnsConfigArgs) ToContainerGroupDnsConfigPtrOutputWithContext(ctx context.Context) ContainerGroupDnsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDnsConfigOutput).ToContainerGroupDnsConfigPtrOutputWithContext(ctx)
}

// ContainerGroupDnsConfigPtrInput is an input type that accepts ContainerGroupDnsConfigArgs, ContainerGroupDnsConfigPtr and ContainerGroupDnsConfigPtrOutput values.
// You can construct a concrete instance of `ContainerGroupDnsConfigPtrInput` via:
//
//	        ContainerGroupDnsConfigArgs{...}
//
//	or:
//
//	        nil
type ContainerGroupDnsConfigPtrInput interface {
	pulumi.Input

	ToContainerGroupDnsConfigPtrOutput() ContainerGroupDnsConfigPtrOutput
	ToContainerGroupDnsConfigPtrOutputWithContext(context.Context) ContainerGroupDnsConfigPtrOutput
}

type containerGroupDnsConfigPtrType ContainerGroupDnsConfigArgs

func ContainerGroupDnsConfigPtr(v *ContainerGroupDnsConfigArgs) ContainerGroupDnsConfigPtrInput {
	return (*containerGroupDnsConfigPtrType)(v)
}

func (*containerGroupDnsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupDnsConfig)(nil)).Elem()
}

func (i *containerGroupDnsConfigPtrType) ToContainerGroupDnsConfigPtrOutput() ContainerGroupDnsConfigPtrOutput {
	return i.ToContainerGroupDnsConfigPtrOutputWithContext(context.Background())
}

func (i *containerGroupDnsConfigPtrType) ToContainerGroupDnsConfigPtrOutputWithContext(ctx context.Context) ContainerGroupDnsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDnsConfigPtrOutput)
}

type ContainerGroupDnsConfigOutput struct{ *pulumi.OutputState }

func (ContainerGroupDnsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDnsConfig)(nil)).Elem()
}

func (o ContainerGroupDnsConfigOutput) ToContainerGroupDnsConfigOutput() ContainerGroupDnsConfigOutput {
	return o
}

func (o ContainerGroupDnsConfigOutput) ToContainerGroupDnsConfigOutputWithContext(ctx context.Context) ContainerGroupDnsConfigOutput {
	return o
}

func (o ContainerGroupDnsConfigOutput) ToContainerGroupDnsConfigPtrOutput() ContainerGroupDnsConfigPtrOutput {
	return o.ToContainerGroupDnsConfigPtrOutputWithContext(context.Background())
}

func (o ContainerGroupDnsConfigOutput) ToContainerGroupDnsConfigPtrOutputWithContext(ctx context.Context) ContainerGroupDnsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerGroupDnsConfig) *ContainerGroupDnsConfig {
		return &v
	}).(ContainerGroupDnsConfigPtrOutput)
}

// The list of DNS server IP addresses.
func (o ContainerGroupDnsConfigOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupDnsConfig) []string { return v.NameServers }).(pulumi.StringArrayOutput)
}

// The structure of options. See `options` below.
func (o ContainerGroupDnsConfigOutput) Options() ContainerGroupDnsConfigOptionArrayOutput {
	return o.ApplyT(func(v ContainerGroupDnsConfig) []ContainerGroupDnsConfigOption { return v.Options }).(ContainerGroupDnsConfigOptionArrayOutput)
}

// The list of DNS lookup domains.
func (o ContainerGroupDnsConfigOutput) Searches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupDnsConfig) []string { return v.Searches }).(pulumi.StringArrayOutput)
}

type ContainerGroupDnsConfigPtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupDnsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupDnsConfig)(nil)).Elem()
}

func (o ContainerGroupDnsConfigPtrOutput) ToContainerGroupDnsConfigPtrOutput() ContainerGroupDnsConfigPtrOutput {
	return o
}

func (o ContainerGroupDnsConfigPtrOutput) ToContainerGroupDnsConfigPtrOutputWithContext(ctx context.Context) ContainerGroupDnsConfigPtrOutput {
	return o
}

func (o ContainerGroupDnsConfigPtrOutput) Elem() ContainerGroupDnsConfigOutput {
	return o.ApplyT(func(v *ContainerGroupDnsConfig) ContainerGroupDnsConfig {
		if v != nil {
			return *v
		}
		var ret ContainerGroupDnsConfig
		return ret
	}).(ContainerGroupDnsConfigOutput)
}

// The list of DNS server IP addresses.
func (o ContainerGroupDnsConfigPtrOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerGroupDnsConfig) []string {
		if v == nil {
			return nil
		}
		return v.NameServers
	}).(pulumi.StringArrayOutput)
}

// The structure of options. See `options` below.
func (o ContainerGroupDnsConfigPtrOutput) Options() ContainerGroupDnsConfigOptionArrayOutput {
	return o.ApplyT(func(v *ContainerGroupDnsConfig) []ContainerGroupDnsConfigOption {
		if v == nil {
			return nil
		}
		return v.Options
	}).(ContainerGroupDnsConfigOptionArrayOutput)
}

// The list of DNS lookup domains.
func (o ContainerGroupDnsConfigPtrOutput) Searches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerGroupDnsConfig) []string {
		if v == nil {
			return nil
		}
		return v.Searches
	}).(pulumi.StringArrayOutput)
}

type ContainerGroupDnsConfigOption struct {
	// The name of the mounted volume.
	Name *string `pulumi:"name"`
	// The value of the variable. The value can be 0 to 256 characters in length.
	Value *string `pulumi:"value"`
}

// ContainerGroupDnsConfigOptionInput is an input type that accepts ContainerGroupDnsConfigOptionArgs and ContainerGroupDnsConfigOptionOutput values.
// You can construct a concrete instance of `ContainerGroupDnsConfigOptionInput` via:
//
//	ContainerGroupDnsConfigOptionArgs{...}
type ContainerGroupDnsConfigOptionInput interface {
	pulumi.Input

	ToContainerGroupDnsConfigOptionOutput() ContainerGroupDnsConfigOptionOutput
	ToContainerGroupDnsConfigOptionOutputWithContext(context.Context) ContainerGroupDnsConfigOptionOutput
}

type ContainerGroupDnsConfigOptionArgs struct {
	// The name of the mounted volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the variable. The value can be 0 to 256 characters in length.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ContainerGroupDnsConfigOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDnsConfigOption)(nil)).Elem()
}

func (i ContainerGroupDnsConfigOptionArgs) ToContainerGroupDnsConfigOptionOutput() ContainerGroupDnsConfigOptionOutput {
	return i.ToContainerGroupDnsConfigOptionOutputWithContext(context.Background())
}

func (i ContainerGroupDnsConfigOptionArgs) ToContainerGroupDnsConfigOptionOutputWithContext(ctx context.Context) ContainerGroupDnsConfigOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDnsConfigOptionOutput)
}

// ContainerGroupDnsConfigOptionArrayInput is an input type that accepts ContainerGroupDnsConfigOptionArray and ContainerGroupDnsConfigOptionArrayOutput values.
// You can construct a concrete instance of `ContainerGroupDnsConfigOptionArrayInput` via:
//
//	ContainerGroupDnsConfigOptionArray{ ContainerGroupDnsConfigOptionArgs{...} }
type ContainerGroupDnsConfigOptionArrayInput interface {
	pulumi.Input

	ToContainerGroupDnsConfigOptionArrayOutput() ContainerGroupDnsConfigOptionArrayOutput
	ToContainerGroupDnsConfigOptionArrayOutputWithContext(context.Context) ContainerGroupDnsConfigOptionArrayOutput
}

type ContainerGroupDnsConfigOptionArray []ContainerGroupDnsConfigOptionInput

func (ContainerGroupDnsConfigOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupDnsConfigOption)(nil)).Elem()
}

func (i ContainerGroupDnsConfigOptionArray) ToContainerGroupDnsConfigOptionArrayOutput() ContainerGroupDnsConfigOptionArrayOutput {
	return i.ToContainerGroupDnsConfigOptionArrayOutputWithContext(context.Background())
}

func (i ContainerGroupDnsConfigOptionArray) ToContainerGroupDnsConfigOptionArrayOutputWithContext(ctx context.Context) ContainerGroupDnsConfigOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDnsConfigOptionArrayOutput)
}

type ContainerGroupDnsConfigOptionOutput struct{ *pulumi.OutputState }

func (ContainerGroupDnsConfigOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDnsConfigOption)(nil)).Elem()
}

func (o ContainerGroupDnsConfigOptionOutput) ToContainerGroupDnsConfigOptionOutput() ContainerGroupDnsConfigOptionOutput {
	return o
}

func (o ContainerGroupDnsConfigOptionOutput) ToContainerGroupDnsConfigOptionOutputWithContext(ctx context.Context) ContainerGroupDnsConfigOptionOutput {
	return o
}

// The name of the mounted volume.
func (o ContainerGroupDnsConfigOptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupDnsConfigOption) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the variable. The value can be 0 to 256 characters in length.
func (o ContainerGroupDnsConfigOptionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupDnsConfigOption) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ContainerGroupDnsConfigOptionArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupDnsConfigOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupDnsConfigOption)(nil)).Elem()
}

func (o ContainerGroupDnsConfigOptionArrayOutput) ToContainerGroupDnsConfigOptionArrayOutput() ContainerGroupDnsConfigOptionArrayOutput {
	return o
}

func (o ContainerGroupDnsConfigOptionArrayOutput) ToContainerGroupDnsConfigOptionArrayOutputWithContext(ctx context.Context) ContainerGroupDnsConfigOptionArrayOutput {
	return o
}

func (o ContainerGroupDnsConfigOptionArrayOutput) Index(i pulumi.IntInput) ContainerGroupDnsConfigOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupDnsConfigOption {
		return vs[0].([]ContainerGroupDnsConfigOption)[vs[1].(int)]
	}).(ContainerGroupDnsConfigOptionOutput)
}

type ContainerGroupHostAlias struct {
	// The information about the host.
	Hostnames []string `pulumi:"hostnames"`
	// The IP address of the host.
	Ip *string `pulumi:"ip"`
}

// ContainerGroupHostAliasInput is an input type that accepts ContainerGroupHostAliasArgs and ContainerGroupHostAliasOutput values.
// You can construct a concrete instance of `ContainerGroupHostAliasInput` via:
//
//	ContainerGroupHostAliasArgs{...}
type ContainerGroupHostAliasInput interface {
	pulumi.Input

	ToContainerGroupHostAliasOutput() ContainerGroupHostAliasOutput
	ToContainerGroupHostAliasOutputWithContext(context.Context) ContainerGroupHostAliasOutput
}

type ContainerGroupHostAliasArgs struct {
	// The information about the host.
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
	// The IP address of the host.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (ContainerGroupHostAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupHostAlias)(nil)).Elem()
}

func (i ContainerGroupHostAliasArgs) ToContainerGroupHostAliasOutput() ContainerGroupHostAliasOutput {
	return i.ToContainerGroupHostAliasOutputWithContext(context.Background())
}

func (i ContainerGroupHostAliasArgs) ToContainerGroupHostAliasOutputWithContext(ctx context.Context) ContainerGroupHostAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupHostAliasOutput)
}

// ContainerGroupHostAliasArrayInput is an input type that accepts ContainerGroupHostAliasArray and ContainerGroupHostAliasArrayOutput values.
// You can construct a concrete instance of `ContainerGroupHostAliasArrayInput` via:
//
//	ContainerGroupHostAliasArray{ ContainerGroupHostAliasArgs{...} }
type ContainerGroupHostAliasArrayInput interface {
	pulumi.Input

	ToContainerGroupHostAliasArrayOutput() ContainerGroupHostAliasArrayOutput
	ToContainerGroupHostAliasArrayOutputWithContext(context.Context) ContainerGroupHostAliasArrayOutput
}

type ContainerGroupHostAliasArray []ContainerGroupHostAliasInput

func (ContainerGroupHostAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupHostAlias)(nil)).Elem()
}

func (i ContainerGroupHostAliasArray) ToContainerGroupHostAliasArrayOutput() ContainerGroupHostAliasArrayOutput {
	return i.ToContainerGroupHostAliasArrayOutputWithContext(context.Background())
}

func (i ContainerGroupHostAliasArray) ToContainerGroupHostAliasArrayOutputWithContext(ctx context.Context) ContainerGroupHostAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupHostAliasArrayOutput)
}

type ContainerGroupHostAliasOutput struct{ *pulumi.OutputState }

func (ContainerGroupHostAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupHostAlias)(nil)).Elem()
}

func (o ContainerGroupHostAliasOutput) ToContainerGroupHostAliasOutput() ContainerGroupHostAliasOutput {
	return o
}

func (o ContainerGroupHostAliasOutput) ToContainerGroupHostAliasOutputWithContext(ctx context.Context) ContainerGroupHostAliasOutput {
	return o
}

// The information about the host.
func (o ContainerGroupHostAliasOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupHostAlias) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// The IP address of the host.
func (o ContainerGroupHostAliasOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupHostAlias) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type ContainerGroupHostAliasArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupHostAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupHostAlias)(nil)).Elem()
}

func (o ContainerGroupHostAliasArrayOutput) ToContainerGroupHostAliasArrayOutput() ContainerGroupHostAliasArrayOutput {
	return o
}

func (o ContainerGroupHostAliasArrayOutput) ToContainerGroupHostAliasArrayOutputWithContext(ctx context.Context) ContainerGroupHostAliasArrayOutput {
	return o
}

func (o ContainerGroupHostAliasArrayOutput) Index(i pulumi.IntInput) ContainerGroupHostAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupHostAlias {
		return vs[0].([]ContainerGroupHostAlias)[vs[1].(int)]
	}).(ContainerGroupHostAliasOutput)
}

type ContainerGroupImageRegistryCredential struct {
	// The password used to log on to the image repository. It is required when `imageRegistryCredential` is configured.
	Password string `pulumi:"password"`
	// The address of the image repository. It is required when `imageRegistryCredential` is configured.
	Server string `pulumi:"server"`
	// The username used to log on to the image repository. It is required when `imageRegistryCredential` is configured.
	UserName string `pulumi:"userName"`
}

// ContainerGroupImageRegistryCredentialInput is an input type that accepts ContainerGroupImageRegistryCredentialArgs and ContainerGroupImageRegistryCredentialOutput values.
// You can construct a concrete instance of `ContainerGroupImageRegistryCredentialInput` via:
//
//	ContainerGroupImageRegistryCredentialArgs{...}
type ContainerGroupImageRegistryCredentialInput interface {
	pulumi.Input

	ToContainerGroupImageRegistryCredentialOutput() ContainerGroupImageRegistryCredentialOutput
	ToContainerGroupImageRegistryCredentialOutputWithContext(context.Context) ContainerGroupImageRegistryCredentialOutput
}

type ContainerGroupImageRegistryCredentialArgs struct {
	// The password used to log on to the image repository. It is required when `imageRegistryCredential` is configured.
	Password pulumi.StringInput `pulumi:"password"`
	// The address of the image repository. It is required when `imageRegistryCredential` is configured.
	Server pulumi.StringInput `pulumi:"server"`
	// The username used to log on to the image repository. It is required when `imageRegistryCredential` is configured.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (ContainerGroupImageRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupImageRegistryCredential)(nil)).Elem()
}

func (i ContainerGroupImageRegistryCredentialArgs) ToContainerGroupImageRegistryCredentialOutput() ContainerGroupImageRegistryCredentialOutput {
	return i.ToContainerGroupImageRegistryCredentialOutputWithContext(context.Background())
}

func (i ContainerGroupImageRegistryCredentialArgs) ToContainerGroupImageRegistryCredentialOutputWithContext(ctx context.Context) ContainerGroupImageRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupImageRegistryCredentialOutput)
}

// ContainerGroupImageRegistryCredentialArrayInput is an input type that accepts ContainerGroupImageRegistryCredentialArray and ContainerGroupImageRegistryCredentialArrayOutput values.
// You can construct a concrete instance of `ContainerGroupImageRegistryCredentialArrayInput` via:
//
//	ContainerGroupImageRegistryCredentialArray{ ContainerGroupImageRegistryCredentialArgs{...} }
type ContainerGroupImageRegistryCredentialArrayInput interface {
	pulumi.Input

	ToContainerGroupImageRegistryCredentialArrayOutput() ContainerGroupImageRegistryCredentialArrayOutput
	ToContainerGroupImageRegistryCredentialArrayOutputWithContext(context.Context) ContainerGroupImageRegistryCredentialArrayOutput
}

type ContainerGroupImageRegistryCredentialArray []ContainerGroupImageRegistryCredentialInput

func (ContainerGroupImageRegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupImageRegistryCredential)(nil)).Elem()
}

func (i ContainerGroupImageRegistryCredentialArray) ToContainerGroupImageRegistryCredentialArrayOutput() ContainerGroupImageRegistryCredentialArrayOutput {
	return i.ToContainerGroupImageRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i ContainerGroupImageRegistryCredentialArray) ToContainerGroupImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ContainerGroupImageRegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupImageRegistryCredentialArrayOutput)
}

type ContainerGroupImageRegistryCredentialOutput struct{ *pulumi.OutputState }

func (ContainerGroupImageRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupImageRegistryCredential)(nil)).Elem()
}

func (o ContainerGroupImageRegistryCredentialOutput) ToContainerGroupImageRegistryCredentialOutput() ContainerGroupImageRegistryCredentialOutput {
	return o
}

func (o ContainerGroupImageRegistryCredentialOutput) ToContainerGroupImageRegistryCredentialOutputWithContext(ctx context.Context) ContainerGroupImageRegistryCredentialOutput {
	return o
}

// The password used to log on to the image repository. It is required when `imageRegistryCredential` is configured.
func (o ContainerGroupImageRegistryCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupImageRegistryCredential) string { return v.Password }).(pulumi.StringOutput)
}

// The address of the image repository. It is required when `imageRegistryCredential` is configured.
func (o ContainerGroupImageRegistryCredentialOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupImageRegistryCredential) string { return v.Server }).(pulumi.StringOutput)
}

// The username used to log on to the image repository. It is required when `imageRegistryCredential` is configured.
func (o ContainerGroupImageRegistryCredentialOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupImageRegistryCredential) string { return v.UserName }).(pulumi.StringOutput)
}

type ContainerGroupImageRegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupImageRegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupImageRegistryCredential)(nil)).Elem()
}

func (o ContainerGroupImageRegistryCredentialArrayOutput) ToContainerGroupImageRegistryCredentialArrayOutput() ContainerGroupImageRegistryCredentialArrayOutput {
	return o
}

func (o ContainerGroupImageRegistryCredentialArrayOutput) ToContainerGroupImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ContainerGroupImageRegistryCredentialArrayOutput {
	return o
}

func (o ContainerGroupImageRegistryCredentialArrayOutput) Index(i pulumi.IntInput) ContainerGroupImageRegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupImageRegistryCredential {
		return vs[0].([]ContainerGroupImageRegistryCredential)[vs[1].(int)]
	}).(ContainerGroupImageRegistryCredentialOutput)
}

type ContainerGroupInitContainer struct {
	// The arguments passed to the commands.
	Args []string `pulumi:"args"`
	// The commands run by the init container.
	Commands []string `pulumi:"commands"`
	// The amount of CPU resources allocated to the container. Default value: `0`.
	Cpu *float64 `pulumi:"cpu"`
	// The structure of environmentVars. See `environmentVars` below.
	EnvironmentVars []ContainerGroupInitContainerEnvironmentVar `pulumi:"environmentVars"`
	// The number GPUs. Default value: `0`.
	Gpu *int `pulumi:"gpu"`
	// The image of the container.
	Image *string `pulumi:"image"`
	// The restart policy of the image. Default value: `IfNotPresent`. Valid values: `Always`, `IfNotPresent`, `Never`.
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// The amount of memory resources allocated to the container. Default value: `0`.
	Memory *float64 `pulumi:"memory"`
	// The name of the mounted volume.
	Name *string `pulumi:"name"`
	// The structure of port. See `ports` below.
	Ports []ContainerGroupInitContainerPort `pulumi:"ports"`
	// Indicates whether the container passed the readiness probe.
	Ready *bool `pulumi:"ready"`
	// The number of times that the container restarted.
	RestartCount *int `pulumi:"restartCount"`
	// The security context of the container. See `securityContext` below.
	SecurityContexts []ContainerGroupInitContainerSecurityContext `pulumi:"securityContexts"`
	// The structure of volumeMounts. See `volumeMounts` below.
	VolumeMounts []ContainerGroupInitContainerVolumeMount `pulumi:"volumeMounts"`
	// The working directory of the container.
	WorkingDir *string `pulumi:"workingDir"`
}

// ContainerGroupInitContainerInput is an input type that accepts ContainerGroupInitContainerArgs and ContainerGroupInitContainerOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerInput` via:
//
//	ContainerGroupInitContainerArgs{...}
type ContainerGroupInitContainerInput interface {
	pulumi.Input

	ToContainerGroupInitContainerOutput() ContainerGroupInitContainerOutput
	ToContainerGroupInitContainerOutputWithContext(context.Context) ContainerGroupInitContainerOutput
}

type ContainerGroupInitContainerArgs struct {
	// The arguments passed to the commands.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// The commands run by the init container.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// The amount of CPU resources allocated to the container. Default value: `0`.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// The structure of environmentVars. See `environmentVars` below.
	EnvironmentVars ContainerGroupInitContainerEnvironmentVarArrayInput `pulumi:"environmentVars"`
	// The number GPUs. Default value: `0`.
	Gpu pulumi.IntPtrInput `pulumi:"gpu"`
	// The image of the container.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// The restart policy of the image. Default value: `IfNotPresent`. Valid values: `Always`, `IfNotPresent`, `Never`.
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// The amount of memory resources allocated to the container. Default value: `0`.
	Memory pulumi.Float64PtrInput `pulumi:"memory"`
	// The name of the mounted volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The structure of port. See `ports` below.
	Ports ContainerGroupInitContainerPortArrayInput `pulumi:"ports"`
	// Indicates whether the container passed the readiness probe.
	Ready pulumi.BoolPtrInput `pulumi:"ready"`
	// The number of times that the container restarted.
	RestartCount pulumi.IntPtrInput `pulumi:"restartCount"`
	// The security context of the container. See `securityContext` below.
	SecurityContexts ContainerGroupInitContainerSecurityContextArrayInput `pulumi:"securityContexts"`
	// The structure of volumeMounts. See `volumeMounts` below.
	VolumeMounts ContainerGroupInitContainerVolumeMountArrayInput `pulumi:"volumeMounts"`
	// The working directory of the container.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (ContainerGroupInitContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainer)(nil)).Elem()
}

func (i ContainerGroupInitContainerArgs) ToContainerGroupInitContainerOutput() ContainerGroupInitContainerOutput {
	return i.ToContainerGroupInitContainerOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerArgs) ToContainerGroupInitContainerOutputWithContext(ctx context.Context) ContainerGroupInitContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerOutput)
}

// ContainerGroupInitContainerArrayInput is an input type that accepts ContainerGroupInitContainerArray and ContainerGroupInitContainerArrayOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerArrayInput` via:
//
//	ContainerGroupInitContainerArray{ ContainerGroupInitContainerArgs{...} }
type ContainerGroupInitContainerArrayInput interface {
	pulumi.Input

	ToContainerGroupInitContainerArrayOutput() ContainerGroupInitContainerArrayOutput
	ToContainerGroupInitContainerArrayOutputWithContext(context.Context) ContainerGroupInitContainerArrayOutput
}

type ContainerGroupInitContainerArray []ContainerGroupInitContainerInput

func (ContainerGroupInitContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainer)(nil)).Elem()
}

func (i ContainerGroupInitContainerArray) ToContainerGroupInitContainerArrayOutput() ContainerGroupInitContainerArrayOutput {
	return i.ToContainerGroupInitContainerArrayOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerArray) ToContainerGroupInitContainerArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerArrayOutput)
}

type ContainerGroupInitContainerOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainer)(nil)).Elem()
}

func (o ContainerGroupInitContainerOutput) ToContainerGroupInitContainerOutput() ContainerGroupInitContainerOutput {
	return o
}

func (o ContainerGroupInitContainerOutput) ToContainerGroupInitContainerOutputWithContext(ctx context.Context) ContainerGroupInitContainerOutput {
	return o
}

// The arguments passed to the commands.
func (o ContainerGroupInitContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// The commands run by the init container.
func (o ContainerGroupInitContainerOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// The amount of CPU resources allocated to the container. Default value: `0`.
func (o ContainerGroupInitContainerOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// The structure of environmentVars. See `environmentVars` below.
func (o ContainerGroupInitContainerOutput) EnvironmentVars() ContainerGroupInitContainerEnvironmentVarArrayOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) []ContainerGroupInitContainerEnvironmentVar {
		return v.EnvironmentVars
	}).(ContainerGroupInitContainerEnvironmentVarArrayOutput)
}

// The number GPUs. Default value: `0`.
func (o ContainerGroupInitContainerOutput) Gpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) *int { return v.Gpu }).(pulumi.IntPtrOutput)
}

// The image of the container.
func (o ContainerGroupInitContainerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// The restart policy of the image. Default value: `IfNotPresent`. Valid values: `Always`, `IfNotPresent`, `Never`.
func (o ContainerGroupInitContainerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// The amount of memory resources allocated to the container. Default value: `0`.
func (o ContainerGroupInitContainerOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) *float64 { return v.Memory }).(pulumi.Float64PtrOutput)
}

// The name of the mounted volume.
func (o ContainerGroupInitContainerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The structure of port. See `ports` below.
func (o ContainerGroupInitContainerOutput) Ports() ContainerGroupInitContainerPortArrayOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) []ContainerGroupInitContainerPort { return v.Ports }).(ContainerGroupInitContainerPortArrayOutput)
}

// Indicates whether the container passed the readiness probe.
func (o ContainerGroupInitContainerOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) *bool { return v.Ready }).(pulumi.BoolPtrOutput)
}

// The number of times that the container restarted.
func (o ContainerGroupInitContainerOutput) RestartCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) *int { return v.RestartCount }).(pulumi.IntPtrOutput)
}

// The security context of the container. See `securityContext` below.
func (o ContainerGroupInitContainerOutput) SecurityContexts() ContainerGroupInitContainerSecurityContextArrayOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) []ContainerGroupInitContainerSecurityContext {
		return v.SecurityContexts
	}).(ContainerGroupInitContainerSecurityContextArrayOutput)
}

// The structure of volumeMounts. See `volumeMounts` below.
func (o ContainerGroupInitContainerOutput) VolumeMounts() ContainerGroupInitContainerVolumeMountArrayOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) []ContainerGroupInitContainerVolumeMount { return v.VolumeMounts }).(ContainerGroupInitContainerVolumeMountArrayOutput)
}

// The working directory of the container.
func (o ContainerGroupInitContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainer) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type ContainerGroupInitContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainer)(nil)).Elem()
}

func (o ContainerGroupInitContainerArrayOutput) ToContainerGroupInitContainerArrayOutput() ContainerGroupInitContainerArrayOutput {
	return o
}

func (o ContainerGroupInitContainerArrayOutput) ToContainerGroupInitContainerArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerArrayOutput {
	return o
}

func (o ContainerGroupInitContainerArrayOutput) Index(i pulumi.IntInput) ContainerGroupInitContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupInitContainer {
		return vs[0].([]ContainerGroupInitContainer)[vs[1].(int)]
	}).(ContainerGroupInitContainerOutput)
}

type ContainerGroupInitContainerEnvironmentVar struct {
	// The reference of the environment variable. See `fieldRef` below.
	FieldReves []ContainerGroupInitContainerEnvironmentVarFieldRef `pulumi:"fieldReves"`
	// The name of the variable. The name can be 1 to 128 characters in length and can contain letters, digits, and underscores (_). It cannot start with a digit.
	Key *string `pulumi:"key"`
	// The value of the variable. The value can be 0 to 256 characters in length.
	Value *string `pulumi:"value"`
}

// ContainerGroupInitContainerEnvironmentVarInput is an input type that accepts ContainerGroupInitContainerEnvironmentVarArgs and ContainerGroupInitContainerEnvironmentVarOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerEnvironmentVarInput` via:
//
//	ContainerGroupInitContainerEnvironmentVarArgs{...}
type ContainerGroupInitContainerEnvironmentVarInput interface {
	pulumi.Input

	ToContainerGroupInitContainerEnvironmentVarOutput() ContainerGroupInitContainerEnvironmentVarOutput
	ToContainerGroupInitContainerEnvironmentVarOutputWithContext(context.Context) ContainerGroupInitContainerEnvironmentVarOutput
}

type ContainerGroupInitContainerEnvironmentVarArgs struct {
	// The reference of the environment variable. See `fieldRef` below.
	FieldReves ContainerGroupInitContainerEnvironmentVarFieldRefArrayInput `pulumi:"fieldReves"`
	// The name of the variable. The name can be 1 to 128 characters in length and can contain letters, digits, and underscores (_). It cannot start with a digit.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The value of the variable. The value can be 0 to 256 characters in length.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ContainerGroupInitContainerEnvironmentVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainerEnvironmentVar)(nil)).Elem()
}

func (i ContainerGroupInitContainerEnvironmentVarArgs) ToContainerGroupInitContainerEnvironmentVarOutput() ContainerGroupInitContainerEnvironmentVarOutput {
	return i.ToContainerGroupInitContainerEnvironmentVarOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerEnvironmentVarArgs) ToContainerGroupInitContainerEnvironmentVarOutputWithContext(ctx context.Context) ContainerGroupInitContainerEnvironmentVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerEnvironmentVarOutput)
}

// ContainerGroupInitContainerEnvironmentVarArrayInput is an input type that accepts ContainerGroupInitContainerEnvironmentVarArray and ContainerGroupInitContainerEnvironmentVarArrayOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerEnvironmentVarArrayInput` via:
//
//	ContainerGroupInitContainerEnvironmentVarArray{ ContainerGroupInitContainerEnvironmentVarArgs{...} }
type ContainerGroupInitContainerEnvironmentVarArrayInput interface {
	pulumi.Input

	ToContainerGroupInitContainerEnvironmentVarArrayOutput() ContainerGroupInitContainerEnvironmentVarArrayOutput
	ToContainerGroupInitContainerEnvironmentVarArrayOutputWithContext(context.Context) ContainerGroupInitContainerEnvironmentVarArrayOutput
}

type ContainerGroupInitContainerEnvironmentVarArray []ContainerGroupInitContainerEnvironmentVarInput

func (ContainerGroupInitContainerEnvironmentVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainerEnvironmentVar)(nil)).Elem()
}

func (i ContainerGroupInitContainerEnvironmentVarArray) ToContainerGroupInitContainerEnvironmentVarArrayOutput() ContainerGroupInitContainerEnvironmentVarArrayOutput {
	return i.ToContainerGroupInitContainerEnvironmentVarArrayOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerEnvironmentVarArray) ToContainerGroupInitContainerEnvironmentVarArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerEnvironmentVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerEnvironmentVarArrayOutput)
}

type ContainerGroupInitContainerEnvironmentVarOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerEnvironmentVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainerEnvironmentVar)(nil)).Elem()
}

func (o ContainerGroupInitContainerEnvironmentVarOutput) ToContainerGroupInitContainerEnvironmentVarOutput() ContainerGroupInitContainerEnvironmentVarOutput {
	return o
}

func (o ContainerGroupInitContainerEnvironmentVarOutput) ToContainerGroupInitContainerEnvironmentVarOutputWithContext(ctx context.Context) ContainerGroupInitContainerEnvironmentVarOutput {
	return o
}

// The reference of the environment variable. See `fieldRef` below.
func (o ContainerGroupInitContainerEnvironmentVarOutput) FieldReves() ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput {
	return o.ApplyT(func(v ContainerGroupInitContainerEnvironmentVar) []ContainerGroupInitContainerEnvironmentVarFieldRef {
		return v.FieldReves
	}).(ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput)
}

// The name of the variable. The name can be 1 to 128 characters in length and can contain letters, digits, and underscores (_). It cannot start with a digit.
func (o ContainerGroupInitContainerEnvironmentVarOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainerEnvironmentVar) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The value of the variable. The value can be 0 to 256 characters in length.
func (o ContainerGroupInitContainerEnvironmentVarOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainerEnvironmentVar) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ContainerGroupInitContainerEnvironmentVarArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerEnvironmentVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainerEnvironmentVar)(nil)).Elem()
}

func (o ContainerGroupInitContainerEnvironmentVarArrayOutput) ToContainerGroupInitContainerEnvironmentVarArrayOutput() ContainerGroupInitContainerEnvironmentVarArrayOutput {
	return o
}

func (o ContainerGroupInitContainerEnvironmentVarArrayOutput) ToContainerGroupInitContainerEnvironmentVarArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerEnvironmentVarArrayOutput {
	return o
}

func (o ContainerGroupInitContainerEnvironmentVarArrayOutput) Index(i pulumi.IntInput) ContainerGroupInitContainerEnvironmentVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupInitContainerEnvironmentVar {
		return vs[0].([]ContainerGroupInitContainerEnvironmentVar)[vs[1].(int)]
	}).(ContainerGroupInitContainerEnvironmentVarOutput)
}

type ContainerGroupInitContainerEnvironmentVarFieldRef struct {
	// The path of the reference.
	FieldPath *string `pulumi:"fieldPath"`
}

// ContainerGroupInitContainerEnvironmentVarFieldRefInput is an input type that accepts ContainerGroupInitContainerEnvironmentVarFieldRefArgs and ContainerGroupInitContainerEnvironmentVarFieldRefOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerEnvironmentVarFieldRefInput` via:
//
//	ContainerGroupInitContainerEnvironmentVarFieldRefArgs{...}
type ContainerGroupInitContainerEnvironmentVarFieldRefInput interface {
	pulumi.Input

	ToContainerGroupInitContainerEnvironmentVarFieldRefOutput() ContainerGroupInitContainerEnvironmentVarFieldRefOutput
	ToContainerGroupInitContainerEnvironmentVarFieldRefOutputWithContext(context.Context) ContainerGroupInitContainerEnvironmentVarFieldRefOutput
}

type ContainerGroupInitContainerEnvironmentVarFieldRefArgs struct {
	// The path of the reference.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
}

func (ContainerGroupInitContainerEnvironmentVarFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainerEnvironmentVarFieldRef)(nil)).Elem()
}

func (i ContainerGroupInitContainerEnvironmentVarFieldRefArgs) ToContainerGroupInitContainerEnvironmentVarFieldRefOutput() ContainerGroupInitContainerEnvironmentVarFieldRefOutput {
	return i.ToContainerGroupInitContainerEnvironmentVarFieldRefOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerEnvironmentVarFieldRefArgs) ToContainerGroupInitContainerEnvironmentVarFieldRefOutputWithContext(ctx context.Context) ContainerGroupInitContainerEnvironmentVarFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerEnvironmentVarFieldRefOutput)
}

// ContainerGroupInitContainerEnvironmentVarFieldRefArrayInput is an input type that accepts ContainerGroupInitContainerEnvironmentVarFieldRefArray and ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerEnvironmentVarFieldRefArrayInput` via:
//
//	ContainerGroupInitContainerEnvironmentVarFieldRefArray{ ContainerGroupInitContainerEnvironmentVarFieldRefArgs{...} }
type ContainerGroupInitContainerEnvironmentVarFieldRefArrayInput interface {
	pulumi.Input

	ToContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput() ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput
	ToContainerGroupInitContainerEnvironmentVarFieldRefArrayOutputWithContext(context.Context) ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput
}

type ContainerGroupInitContainerEnvironmentVarFieldRefArray []ContainerGroupInitContainerEnvironmentVarFieldRefInput

func (ContainerGroupInitContainerEnvironmentVarFieldRefArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainerEnvironmentVarFieldRef)(nil)).Elem()
}

func (i ContainerGroupInitContainerEnvironmentVarFieldRefArray) ToContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput() ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput {
	return i.ToContainerGroupInitContainerEnvironmentVarFieldRefArrayOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerEnvironmentVarFieldRefArray) ToContainerGroupInitContainerEnvironmentVarFieldRefArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput)
}

type ContainerGroupInitContainerEnvironmentVarFieldRefOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerEnvironmentVarFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainerEnvironmentVarFieldRef)(nil)).Elem()
}

func (o ContainerGroupInitContainerEnvironmentVarFieldRefOutput) ToContainerGroupInitContainerEnvironmentVarFieldRefOutput() ContainerGroupInitContainerEnvironmentVarFieldRefOutput {
	return o
}

func (o ContainerGroupInitContainerEnvironmentVarFieldRefOutput) ToContainerGroupInitContainerEnvironmentVarFieldRefOutputWithContext(ctx context.Context) ContainerGroupInitContainerEnvironmentVarFieldRefOutput {
	return o
}

// The path of the reference.
func (o ContainerGroupInitContainerEnvironmentVarFieldRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainerEnvironmentVarFieldRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

type ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainerEnvironmentVarFieldRef)(nil)).Elem()
}

func (o ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput) ToContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput() ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput {
	return o
}

func (o ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput) ToContainerGroupInitContainerEnvironmentVarFieldRefArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput {
	return o
}

func (o ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput) Index(i pulumi.IntInput) ContainerGroupInitContainerEnvironmentVarFieldRefOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupInitContainerEnvironmentVarFieldRef {
		return vs[0].([]ContainerGroupInitContainerEnvironmentVarFieldRef)[vs[1].(int)]
	}).(ContainerGroupInitContainerEnvironmentVarFieldRefOutput)
}

type ContainerGroupInitContainerPort struct {
	// When using the HTTP request method for health check, the port number for HTTP Get request detection.
	Port *int `pulumi:"port"`
	// The type of the protocol. Valid values: `TCP` and `UDP`.
	Protocol *string `pulumi:"protocol"`
}

// ContainerGroupInitContainerPortInput is an input type that accepts ContainerGroupInitContainerPortArgs and ContainerGroupInitContainerPortOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerPortInput` via:
//
//	ContainerGroupInitContainerPortArgs{...}
type ContainerGroupInitContainerPortInput interface {
	pulumi.Input

	ToContainerGroupInitContainerPortOutput() ContainerGroupInitContainerPortOutput
	ToContainerGroupInitContainerPortOutputWithContext(context.Context) ContainerGroupInitContainerPortOutput
}

type ContainerGroupInitContainerPortArgs struct {
	// When using the HTTP request method for health check, the port number for HTTP Get request detection.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The type of the protocol. Valid values: `TCP` and `UDP`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ContainerGroupInitContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainerPort)(nil)).Elem()
}

func (i ContainerGroupInitContainerPortArgs) ToContainerGroupInitContainerPortOutput() ContainerGroupInitContainerPortOutput {
	return i.ToContainerGroupInitContainerPortOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerPortArgs) ToContainerGroupInitContainerPortOutputWithContext(ctx context.Context) ContainerGroupInitContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerPortOutput)
}

// ContainerGroupInitContainerPortArrayInput is an input type that accepts ContainerGroupInitContainerPortArray and ContainerGroupInitContainerPortArrayOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerPortArrayInput` via:
//
//	ContainerGroupInitContainerPortArray{ ContainerGroupInitContainerPortArgs{...} }
type ContainerGroupInitContainerPortArrayInput interface {
	pulumi.Input

	ToContainerGroupInitContainerPortArrayOutput() ContainerGroupInitContainerPortArrayOutput
	ToContainerGroupInitContainerPortArrayOutputWithContext(context.Context) ContainerGroupInitContainerPortArrayOutput
}

type ContainerGroupInitContainerPortArray []ContainerGroupInitContainerPortInput

func (ContainerGroupInitContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainerPort)(nil)).Elem()
}

func (i ContainerGroupInitContainerPortArray) ToContainerGroupInitContainerPortArrayOutput() ContainerGroupInitContainerPortArrayOutput {
	return i.ToContainerGroupInitContainerPortArrayOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerPortArray) ToContainerGroupInitContainerPortArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerPortArrayOutput)
}

type ContainerGroupInitContainerPortOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainerPort)(nil)).Elem()
}

func (o ContainerGroupInitContainerPortOutput) ToContainerGroupInitContainerPortOutput() ContainerGroupInitContainerPortOutput {
	return o
}

func (o ContainerGroupInitContainerPortOutput) ToContainerGroupInitContainerPortOutputWithContext(ctx context.Context) ContainerGroupInitContainerPortOutput {
	return o
}

// When using the HTTP request method for health check, the port number for HTTP Get request detection.
func (o ContainerGroupInitContainerPortOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainerPort) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The type of the protocol. Valid values: `TCP` and `UDP`.
func (o ContainerGroupInitContainerPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainerPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ContainerGroupInitContainerPortArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainerPort)(nil)).Elem()
}

func (o ContainerGroupInitContainerPortArrayOutput) ToContainerGroupInitContainerPortArrayOutput() ContainerGroupInitContainerPortArrayOutput {
	return o
}

func (o ContainerGroupInitContainerPortArrayOutput) ToContainerGroupInitContainerPortArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerPortArrayOutput {
	return o
}

func (o ContainerGroupInitContainerPortArrayOutput) Index(i pulumi.IntInput) ContainerGroupInitContainerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupInitContainerPort {
		return vs[0].([]ContainerGroupInitContainerPort)[vs[1].(int)]
	}).(ContainerGroupInitContainerPortOutput)
}

type ContainerGroupInitContainerSecurityContext struct {
	// The permissions that you want to grant to the processes in the containers. See `capability` below.
	Capabilities []ContainerGroupInitContainerSecurityContextCapability `pulumi:"capabilities"`
	// The ID of the user who runs the container.
	RunAsUser *int `pulumi:"runAsUser"`
}

// ContainerGroupInitContainerSecurityContextInput is an input type that accepts ContainerGroupInitContainerSecurityContextArgs and ContainerGroupInitContainerSecurityContextOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerSecurityContextInput` via:
//
//	ContainerGroupInitContainerSecurityContextArgs{...}
type ContainerGroupInitContainerSecurityContextInput interface {
	pulumi.Input

	ToContainerGroupInitContainerSecurityContextOutput() ContainerGroupInitContainerSecurityContextOutput
	ToContainerGroupInitContainerSecurityContextOutputWithContext(context.Context) ContainerGroupInitContainerSecurityContextOutput
}

type ContainerGroupInitContainerSecurityContextArgs struct {
	// The permissions that you want to grant to the processes in the containers. See `capability` below.
	Capabilities ContainerGroupInitContainerSecurityContextCapabilityArrayInput `pulumi:"capabilities"`
	// The ID of the user who runs the container.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
}

func (ContainerGroupInitContainerSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainerSecurityContext)(nil)).Elem()
}

func (i ContainerGroupInitContainerSecurityContextArgs) ToContainerGroupInitContainerSecurityContextOutput() ContainerGroupInitContainerSecurityContextOutput {
	return i.ToContainerGroupInitContainerSecurityContextOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerSecurityContextArgs) ToContainerGroupInitContainerSecurityContextOutputWithContext(ctx context.Context) ContainerGroupInitContainerSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerSecurityContextOutput)
}

// ContainerGroupInitContainerSecurityContextArrayInput is an input type that accepts ContainerGroupInitContainerSecurityContextArray and ContainerGroupInitContainerSecurityContextArrayOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerSecurityContextArrayInput` via:
//
//	ContainerGroupInitContainerSecurityContextArray{ ContainerGroupInitContainerSecurityContextArgs{...} }
type ContainerGroupInitContainerSecurityContextArrayInput interface {
	pulumi.Input

	ToContainerGroupInitContainerSecurityContextArrayOutput() ContainerGroupInitContainerSecurityContextArrayOutput
	ToContainerGroupInitContainerSecurityContextArrayOutputWithContext(context.Context) ContainerGroupInitContainerSecurityContextArrayOutput
}

type ContainerGroupInitContainerSecurityContextArray []ContainerGroupInitContainerSecurityContextInput

func (ContainerGroupInitContainerSecurityContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainerSecurityContext)(nil)).Elem()
}

func (i ContainerGroupInitContainerSecurityContextArray) ToContainerGroupInitContainerSecurityContextArrayOutput() ContainerGroupInitContainerSecurityContextArrayOutput {
	return i.ToContainerGroupInitContainerSecurityContextArrayOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerSecurityContextArray) ToContainerGroupInitContainerSecurityContextArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerSecurityContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerSecurityContextArrayOutput)
}

type ContainerGroupInitContainerSecurityContextOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainerSecurityContext)(nil)).Elem()
}

func (o ContainerGroupInitContainerSecurityContextOutput) ToContainerGroupInitContainerSecurityContextOutput() ContainerGroupInitContainerSecurityContextOutput {
	return o
}

func (o ContainerGroupInitContainerSecurityContextOutput) ToContainerGroupInitContainerSecurityContextOutputWithContext(ctx context.Context) ContainerGroupInitContainerSecurityContextOutput {
	return o
}

// The permissions that you want to grant to the processes in the containers. See `capability` below.
func (o ContainerGroupInitContainerSecurityContextOutput) Capabilities() ContainerGroupInitContainerSecurityContextCapabilityArrayOutput {
	return o.ApplyT(func(v ContainerGroupInitContainerSecurityContext) []ContainerGroupInitContainerSecurityContextCapability {
		return v.Capabilities
	}).(ContainerGroupInitContainerSecurityContextCapabilityArrayOutput)
}

// The ID of the user who runs the container.
func (o ContainerGroupInitContainerSecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainerSecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

type ContainerGroupInitContainerSecurityContextArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerSecurityContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainerSecurityContext)(nil)).Elem()
}

func (o ContainerGroupInitContainerSecurityContextArrayOutput) ToContainerGroupInitContainerSecurityContextArrayOutput() ContainerGroupInitContainerSecurityContextArrayOutput {
	return o
}

func (o ContainerGroupInitContainerSecurityContextArrayOutput) ToContainerGroupInitContainerSecurityContextArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerSecurityContextArrayOutput {
	return o
}

func (o ContainerGroupInitContainerSecurityContextArrayOutput) Index(i pulumi.IntInput) ContainerGroupInitContainerSecurityContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupInitContainerSecurityContext {
		return vs[0].([]ContainerGroupInitContainerSecurityContext)[vs[1].(int)]
	}).(ContainerGroupInitContainerSecurityContextOutput)
}

type ContainerGroupInitContainerSecurityContextCapability struct {
	// The permissions that you want to grant to the processes in the containers.
	Adds []string `pulumi:"adds"`
}

// ContainerGroupInitContainerSecurityContextCapabilityInput is an input type that accepts ContainerGroupInitContainerSecurityContextCapabilityArgs and ContainerGroupInitContainerSecurityContextCapabilityOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerSecurityContextCapabilityInput` via:
//
//	ContainerGroupInitContainerSecurityContextCapabilityArgs{...}
type ContainerGroupInitContainerSecurityContextCapabilityInput interface {
	pulumi.Input

	ToContainerGroupInitContainerSecurityContextCapabilityOutput() ContainerGroupInitContainerSecurityContextCapabilityOutput
	ToContainerGroupInitContainerSecurityContextCapabilityOutputWithContext(context.Context) ContainerGroupInitContainerSecurityContextCapabilityOutput
}

type ContainerGroupInitContainerSecurityContextCapabilityArgs struct {
	// The permissions that you want to grant to the processes in the containers.
	Adds pulumi.StringArrayInput `pulumi:"adds"`
}

func (ContainerGroupInitContainerSecurityContextCapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainerSecurityContextCapability)(nil)).Elem()
}

func (i ContainerGroupInitContainerSecurityContextCapabilityArgs) ToContainerGroupInitContainerSecurityContextCapabilityOutput() ContainerGroupInitContainerSecurityContextCapabilityOutput {
	return i.ToContainerGroupInitContainerSecurityContextCapabilityOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerSecurityContextCapabilityArgs) ToContainerGroupInitContainerSecurityContextCapabilityOutputWithContext(ctx context.Context) ContainerGroupInitContainerSecurityContextCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerSecurityContextCapabilityOutput)
}

// ContainerGroupInitContainerSecurityContextCapabilityArrayInput is an input type that accepts ContainerGroupInitContainerSecurityContextCapabilityArray and ContainerGroupInitContainerSecurityContextCapabilityArrayOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerSecurityContextCapabilityArrayInput` via:
//
//	ContainerGroupInitContainerSecurityContextCapabilityArray{ ContainerGroupInitContainerSecurityContextCapabilityArgs{...} }
type ContainerGroupInitContainerSecurityContextCapabilityArrayInput interface {
	pulumi.Input

	ToContainerGroupInitContainerSecurityContextCapabilityArrayOutput() ContainerGroupInitContainerSecurityContextCapabilityArrayOutput
	ToContainerGroupInitContainerSecurityContextCapabilityArrayOutputWithContext(context.Context) ContainerGroupInitContainerSecurityContextCapabilityArrayOutput
}

type ContainerGroupInitContainerSecurityContextCapabilityArray []ContainerGroupInitContainerSecurityContextCapabilityInput

func (ContainerGroupInitContainerSecurityContextCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainerSecurityContextCapability)(nil)).Elem()
}

func (i ContainerGroupInitContainerSecurityContextCapabilityArray) ToContainerGroupInitContainerSecurityContextCapabilityArrayOutput() ContainerGroupInitContainerSecurityContextCapabilityArrayOutput {
	return i.ToContainerGroupInitContainerSecurityContextCapabilityArrayOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerSecurityContextCapabilityArray) ToContainerGroupInitContainerSecurityContextCapabilityArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerSecurityContextCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerSecurityContextCapabilityArrayOutput)
}

type ContainerGroupInitContainerSecurityContextCapabilityOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerSecurityContextCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainerSecurityContextCapability)(nil)).Elem()
}

func (o ContainerGroupInitContainerSecurityContextCapabilityOutput) ToContainerGroupInitContainerSecurityContextCapabilityOutput() ContainerGroupInitContainerSecurityContextCapabilityOutput {
	return o
}

func (o ContainerGroupInitContainerSecurityContextCapabilityOutput) ToContainerGroupInitContainerSecurityContextCapabilityOutputWithContext(ctx context.Context) ContainerGroupInitContainerSecurityContextCapabilityOutput {
	return o
}

// The permissions that you want to grant to the processes in the containers.
func (o ContainerGroupInitContainerSecurityContextCapabilityOutput) Adds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupInitContainerSecurityContextCapability) []string { return v.Adds }).(pulumi.StringArrayOutput)
}

type ContainerGroupInitContainerSecurityContextCapabilityArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerSecurityContextCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainerSecurityContextCapability)(nil)).Elem()
}

func (o ContainerGroupInitContainerSecurityContextCapabilityArrayOutput) ToContainerGroupInitContainerSecurityContextCapabilityArrayOutput() ContainerGroupInitContainerSecurityContextCapabilityArrayOutput {
	return o
}

func (o ContainerGroupInitContainerSecurityContextCapabilityArrayOutput) ToContainerGroupInitContainerSecurityContextCapabilityArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerSecurityContextCapabilityArrayOutput {
	return o
}

func (o ContainerGroupInitContainerSecurityContextCapabilityArrayOutput) Index(i pulumi.IntInput) ContainerGroupInitContainerSecurityContextCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupInitContainerSecurityContextCapability {
		return vs[0].([]ContainerGroupInitContainerSecurityContextCapability)[vs[1].(int)]
	}).(ContainerGroupInitContainerSecurityContextCapabilityOutput)
}

type ContainerGroupInitContainerVolumeMount struct {
	// The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
	MountPath *string `pulumi:"mountPath"`
	// The name of the mounted volume.
	Name *string `pulumi:"name"`
	// Specifies whether the volume is read-only. Default value: `false`.
	ReadOnly *bool `pulumi:"readOnly"`
}

// ContainerGroupInitContainerVolumeMountInput is an input type that accepts ContainerGroupInitContainerVolumeMountArgs and ContainerGroupInitContainerVolumeMountOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerVolumeMountInput` via:
//
//	ContainerGroupInitContainerVolumeMountArgs{...}
type ContainerGroupInitContainerVolumeMountInput interface {
	pulumi.Input

	ToContainerGroupInitContainerVolumeMountOutput() ContainerGroupInitContainerVolumeMountOutput
	ToContainerGroupInitContainerVolumeMountOutputWithContext(context.Context) ContainerGroupInitContainerVolumeMountOutput
}

type ContainerGroupInitContainerVolumeMountArgs struct {
	// The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// The name of the mounted volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies whether the volume is read-only. Default value: `false`.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ContainerGroupInitContainerVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainerVolumeMount)(nil)).Elem()
}

func (i ContainerGroupInitContainerVolumeMountArgs) ToContainerGroupInitContainerVolumeMountOutput() ContainerGroupInitContainerVolumeMountOutput {
	return i.ToContainerGroupInitContainerVolumeMountOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerVolumeMountArgs) ToContainerGroupInitContainerVolumeMountOutputWithContext(ctx context.Context) ContainerGroupInitContainerVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerVolumeMountOutput)
}

// ContainerGroupInitContainerVolumeMountArrayInput is an input type that accepts ContainerGroupInitContainerVolumeMountArray and ContainerGroupInitContainerVolumeMountArrayOutput values.
// You can construct a concrete instance of `ContainerGroupInitContainerVolumeMountArrayInput` via:
//
//	ContainerGroupInitContainerVolumeMountArray{ ContainerGroupInitContainerVolumeMountArgs{...} }
type ContainerGroupInitContainerVolumeMountArrayInput interface {
	pulumi.Input

	ToContainerGroupInitContainerVolumeMountArrayOutput() ContainerGroupInitContainerVolumeMountArrayOutput
	ToContainerGroupInitContainerVolumeMountArrayOutputWithContext(context.Context) ContainerGroupInitContainerVolumeMountArrayOutput
}

type ContainerGroupInitContainerVolumeMountArray []ContainerGroupInitContainerVolumeMountInput

func (ContainerGroupInitContainerVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainerVolumeMount)(nil)).Elem()
}

func (i ContainerGroupInitContainerVolumeMountArray) ToContainerGroupInitContainerVolumeMountArrayOutput() ContainerGroupInitContainerVolumeMountArrayOutput {
	return i.ToContainerGroupInitContainerVolumeMountArrayOutputWithContext(context.Background())
}

func (i ContainerGroupInitContainerVolumeMountArray) ToContainerGroupInitContainerVolumeMountArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInitContainerVolumeMountArrayOutput)
}

type ContainerGroupInitContainerVolumeMountOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInitContainerVolumeMount)(nil)).Elem()
}

func (o ContainerGroupInitContainerVolumeMountOutput) ToContainerGroupInitContainerVolumeMountOutput() ContainerGroupInitContainerVolumeMountOutput {
	return o
}

func (o ContainerGroupInitContainerVolumeMountOutput) ToContainerGroupInitContainerVolumeMountOutputWithContext(ctx context.Context) ContainerGroupInitContainerVolumeMountOutput {
	return o
}

// The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
func (o ContainerGroupInitContainerVolumeMountOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainerVolumeMount) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// The name of the mounted volume.
func (o ContainerGroupInitContainerVolumeMountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainerVolumeMount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies whether the volume is read-only. Default value: `false`.
func (o ContainerGroupInitContainerVolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerGroupInitContainerVolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ContainerGroupInitContainerVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupInitContainerVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupInitContainerVolumeMount)(nil)).Elem()
}

func (o ContainerGroupInitContainerVolumeMountArrayOutput) ToContainerGroupInitContainerVolumeMountArrayOutput() ContainerGroupInitContainerVolumeMountArrayOutput {
	return o
}

func (o ContainerGroupInitContainerVolumeMountArrayOutput) ToContainerGroupInitContainerVolumeMountArrayOutputWithContext(ctx context.Context) ContainerGroupInitContainerVolumeMountArrayOutput {
	return o
}

func (o ContainerGroupInitContainerVolumeMountArrayOutput) Index(i pulumi.IntInput) ContainerGroupInitContainerVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupInitContainerVolumeMount {
		return vs[0].([]ContainerGroupInitContainerVolumeMount)[vs[1].(int)]
	}).(ContainerGroupInitContainerVolumeMountOutput)
}

type ContainerGroupSecurityContext struct {
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. See `sysctl` below.
	Sysctls []ContainerGroupSecurityContextSysctl `pulumi:"sysctls"`
}

// ContainerGroupSecurityContextInput is an input type that accepts ContainerGroupSecurityContextArgs and ContainerGroupSecurityContextOutput values.
// You can construct a concrete instance of `ContainerGroupSecurityContextInput` via:
//
//	ContainerGroupSecurityContextArgs{...}
type ContainerGroupSecurityContextInput interface {
	pulumi.Input

	ToContainerGroupSecurityContextOutput() ContainerGroupSecurityContextOutput
	ToContainerGroupSecurityContextOutputWithContext(context.Context) ContainerGroupSecurityContextOutput
}

type ContainerGroupSecurityContextArgs struct {
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. See `sysctl` below.
	Sysctls ContainerGroupSecurityContextSysctlArrayInput `pulumi:"sysctls"`
}

func (ContainerGroupSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupSecurityContext)(nil)).Elem()
}

func (i ContainerGroupSecurityContextArgs) ToContainerGroupSecurityContextOutput() ContainerGroupSecurityContextOutput {
	return i.ToContainerGroupSecurityContextOutputWithContext(context.Background())
}

func (i ContainerGroupSecurityContextArgs) ToContainerGroupSecurityContextOutputWithContext(ctx context.Context) ContainerGroupSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupSecurityContextOutput)
}

func (i ContainerGroupSecurityContextArgs) ToContainerGroupSecurityContextPtrOutput() ContainerGroupSecurityContextPtrOutput {
	return i.ToContainerGroupSecurityContextPtrOutputWithContext(context.Background())
}

func (i ContainerGroupSecurityContextArgs) ToContainerGroupSecurityContextPtrOutputWithContext(ctx context.Context) ContainerGroupSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupSecurityContextOutput).ToContainerGroupSecurityContextPtrOutputWithContext(ctx)
}

// ContainerGroupSecurityContextPtrInput is an input type that accepts ContainerGroupSecurityContextArgs, ContainerGroupSecurityContextPtr and ContainerGroupSecurityContextPtrOutput values.
// You can construct a concrete instance of `ContainerGroupSecurityContextPtrInput` via:
//
//	        ContainerGroupSecurityContextArgs{...}
//
//	or:
//
//	        nil
type ContainerGroupSecurityContextPtrInput interface {
	pulumi.Input

	ToContainerGroupSecurityContextPtrOutput() ContainerGroupSecurityContextPtrOutput
	ToContainerGroupSecurityContextPtrOutputWithContext(context.Context) ContainerGroupSecurityContextPtrOutput
}

type containerGroupSecurityContextPtrType ContainerGroupSecurityContextArgs

func ContainerGroupSecurityContextPtr(v *ContainerGroupSecurityContextArgs) ContainerGroupSecurityContextPtrInput {
	return (*containerGroupSecurityContextPtrType)(v)
}

func (*containerGroupSecurityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupSecurityContext)(nil)).Elem()
}

func (i *containerGroupSecurityContextPtrType) ToContainerGroupSecurityContextPtrOutput() ContainerGroupSecurityContextPtrOutput {
	return i.ToContainerGroupSecurityContextPtrOutputWithContext(context.Background())
}

func (i *containerGroupSecurityContextPtrType) ToContainerGroupSecurityContextPtrOutputWithContext(ctx context.Context) ContainerGroupSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupSecurityContextPtrOutput)
}

type ContainerGroupSecurityContextOutput struct{ *pulumi.OutputState }

func (ContainerGroupSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupSecurityContext)(nil)).Elem()
}

func (o ContainerGroupSecurityContextOutput) ToContainerGroupSecurityContextOutput() ContainerGroupSecurityContextOutput {
	return o
}

func (o ContainerGroupSecurityContextOutput) ToContainerGroupSecurityContextOutputWithContext(ctx context.Context) ContainerGroupSecurityContextOutput {
	return o
}

func (o ContainerGroupSecurityContextOutput) ToContainerGroupSecurityContextPtrOutput() ContainerGroupSecurityContextPtrOutput {
	return o.ToContainerGroupSecurityContextPtrOutputWithContext(context.Background())
}

func (o ContainerGroupSecurityContextOutput) ToContainerGroupSecurityContextPtrOutputWithContext(ctx context.Context) ContainerGroupSecurityContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerGroupSecurityContext) *ContainerGroupSecurityContext {
		return &v
	}).(ContainerGroupSecurityContextPtrOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. See `sysctl` below.
func (o ContainerGroupSecurityContextOutput) Sysctls() ContainerGroupSecurityContextSysctlArrayOutput {
	return o.ApplyT(func(v ContainerGroupSecurityContext) []ContainerGroupSecurityContextSysctl { return v.Sysctls }).(ContainerGroupSecurityContextSysctlArrayOutput)
}

type ContainerGroupSecurityContextPtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupSecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupSecurityContext)(nil)).Elem()
}

func (o ContainerGroupSecurityContextPtrOutput) ToContainerGroupSecurityContextPtrOutput() ContainerGroupSecurityContextPtrOutput {
	return o
}

func (o ContainerGroupSecurityContextPtrOutput) ToContainerGroupSecurityContextPtrOutputWithContext(ctx context.Context) ContainerGroupSecurityContextPtrOutput {
	return o
}

func (o ContainerGroupSecurityContextPtrOutput) Elem() ContainerGroupSecurityContextOutput {
	return o.ApplyT(func(v *ContainerGroupSecurityContext) ContainerGroupSecurityContext {
		if v != nil {
			return *v
		}
		var ret ContainerGroupSecurityContext
		return ret
	}).(ContainerGroupSecurityContextOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. See `sysctl` below.
func (o ContainerGroupSecurityContextPtrOutput) Sysctls() ContainerGroupSecurityContextSysctlArrayOutput {
	return o.ApplyT(func(v *ContainerGroupSecurityContext) []ContainerGroupSecurityContextSysctl {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(ContainerGroupSecurityContextSysctlArrayOutput)
}

type ContainerGroupSecurityContextSysctl struct {
	// The name of the mounted volume.
	Name *string `pulumi:"name"`
	// The value of the variable. The value can be 0 to 256 characters in length.
	Value *string `pulumi:"value"`
}

// ContainerGroupSecurityContextSysctlInput is an input type that accepts ContainerGroupSecurityContextSysctlArgs and ContainerGroupSecurityContextSysctlOutput values.
// You can construct a concrete instance of `ContainerGroupSecurityContextSysctlInput` via:
//
//	ContainerGroupSecurityContextSysctlArgs{...}
type ContainerGroupSecurityContextSysctlInput interface {
	pulumi.Input

	ToContainerGroupSecurityContextSysctlOutput() ContainerGroupSecurityContextSysctlOutput
	ToContainerGroupSecurityContextSysctlOutputWithContext(context.Context) ContainerGroupSecurityContextSysctlOutput
}

type ContainerGroupSecurityContextSysctlArgs struct {
	// The name of the mounted volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the variable. The value can be 0 to 256 characters in length.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ContainerGroupSecurityContextSysctlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupSecurityContextSysctl)(nil)).Elem()
}

func (i ContainerGroupSecurityContextSysctlArgs) ToContainerGroupSecurityContextSysctlOutput() ContainerGroupSecurityContextSysctlOutput {
	return i.ToContainerGroupSecurityContextSysctlOutputWithContext(context.Background())
}

func (i ContainerGroupSecurityContextSysctlArgs) ToContainerGroupSecurityContextSysctlOutputWithContext(ctx context.Context) ContainerGroupSecurityContextSysctlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupSecurityContextSysctlOutput)
}

// ContainerGroupSecurityContextSysctlArrayInput is an input type that accepts ContainerGroupSecurityContextSysctlArray and ContainerGroupSecurityContextSysctlArrayOutput values.
// You can construct a concrete instance of `ContainerGroupSecurityContextSysctlArrayInput` via:
//
//	ContainerGroupSecurityContextSysctlArray{ ContainerGroupSecurityContextSysctlArgs{...} }
type ContainerGroupSecurityContextSysctlArrayInput interface {
	pulumi.Input

	ToContainerGroupSecurityContextSysctlArrayOutput() ContainerGroupSecurityContextSysctlArrayOutput
	ToContainerGroupSecurityContextSysctlArrayOutputWithContext(context.Context) ContainerGroupSecurityContextSysctlArrayOutput
}

type ContainerGroupSecurityContextSysctlArray []ContainerGroupSecurityContextSysctlInput

func (ContainerGroupSecurityContextSysctlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupSecurityContextSysctl)(nil)).Elem()
}

func (i ContainerGroupSecurityContextSysctlArray) ToContainerGroupSecurityContextSysctlArrayOutput() ContainerGroupSecurityContextSysctlArrayOutput {
	return i.ToContainerGroupSecurityContextSysctlArrayOutputWithContext(context.Background())
}

func (i ContainerGroupSecurityContextSysctlArray) ToContainerGroupSecurityContextSysctlArrayOutputWithContext(ctx context.Context) ContainerGroupSecurityContextSysctlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupSecurityContextSysctlArrayOutput)
}

type ContainerGroupSecurityContextSysctlOutput struct{ *pulumi.OutputState }

func (ContainerGroupSecurityContextSysctlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupSecurityContextSysctl)(nil)).Elem()
}

func (o ContainerGroupSecurityContextSysctlOutput) ToContainerGroupSecurityContextSysctlOutput() ContainerGroupSecurityContextSysctlOutput {
	return o
}

func (o ContainerGroupSecurityContextSysctlOutput) ToContainerGroupSecurityContextSysctlOutputWithContext(ctx context.Context) ContainerGroupSecurityContextSysctlOutput {
	return o
}

// The name of the mounted volume.
func (o ContainerGroupSecurityContextSysctlOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupSecurityContextSysctl) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the variable. The value can be 0 to 256 characters in length.
func (o ContainerGroupSecurityContextSysctlOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupSecurityContextSysctl) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ContainerGroupSecurityContextSysctlArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupSecurityContextSysctlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupSecurityContextSysctl)(nil)).Elem()
}

func (o ContainerGroupSecurityContextSysctlArrayOutput) ToContainerGroupSecurityContextSysctlArrayOutput() ContainerGroupSecurityContextSysctlArrayOutput {
	return o
}

func (o ContainerGroupSecurityContextSysctlArrayOutput) ToContainerGroupSecurityContextSysctlArrayOutputWithContext(ctx context.Context) ContainerGroupSecurityContextSysctlArrayOutput {
	return o
}

func (o ContainerGroupSecurityContextSysctlArrayOutput) Index(i pulumi.IntInput) ContainerGroupSecurityContextSysctlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupSecurityContextSysctl {
		return vs[0].([]ContainerGroupSecurityContextSysctl)[vs[1].(int)]
	}).(ContainerGroupSecurityContextSysctlOutput)
}

type ContainerGroupVolume struct {
	// The paths of the ConfigFile volume. See `configFileVolumeConfigFileToPaths` below.
	// > **NOTE:** Every volumes mounted must have `name` and `type` attributes.
	ConfigFileVolumeConfigFileToPaths []ContainerGroupVolumeConfigFileVolumeConfigFileToPath `pulumi:"configFileVolumeConfigFileToPaths"`
	// The ID of DiskVolume.
	DiskVolumeDiskId *string `pulumi:"diskVolumeDiskId"`
	// The system type of DiskVolume.
	DiskVolumeFsType *string `pulumi:"diskVolumeFsType"`
	// The name of the FlexVolume driver.
	FlexVolumeDriver *string `pulumi:"flexVolumeDriver"`
	// The type of the mounted file system. The default value is determined by the script of FlexVolume.
	FlexVolumeFsType *string `pulumi:"flexVolumeFsType"`
	// The list of FlexVolume objects. Each object is a key-value pair contained in a JSON string.
	FlexVolumeOptions *string `pulumi:"flexVolumeOptions"`
	// The name of the volume.
	Name *string `pulumi:"name"`
	// The path to the NFS volume.
	NfsVolumePath *string `pulumi:"nfsVolumePath"`
	// The nfs volume read only. Default value: `false`.
	NfsVolumeReadOnly *bool `pulumi:"nfsVolumeReadOnly"`
	// The address of the NFS server.
	NfsVolumeServer *string `pulumi:"nfsVolumeServer"`
	// The type of the volume.
	Type *string `pulumi:"type"`
}

// ContainerGroupVolumeInput is an input type that accepts ContainerGroupVolumeArgs and ContainerGroupVolumeOutput values.
// You can construct a concrete instance of `ContainerGroupVolumeInput` via:
//
//	ContainerGroupVolumeArgs{...}
type ContainerGroupVolumeInput interface {
	pulumi.Input

	ToContainerGroupVolumeOutput() ContainerGroupVolumeOutput
	ToContainerGroupVolumeOutputWithContext(context.Context) ContainerGroupVolumeOutput
}

type ContainerGroupVolumeArgs struct {
	// The paths of the ConfigFile volume. See `configFileVolumeConfigFileToPaths` below.
	// > **NOTE:** Every volumes mounted must have `name` and `type` attributes.
	ConfigFileVolumeConfigFileToPaths ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayInput `pulumi:"configFileVolumeConfigFileToPaths"`
	// The ID of DiskVolume.
	DiskVolumeDiskId pulumi.StringPtrInput `pulumi:"diskVolumeDiskId"`
	// The system type of DiskVolume.
	DiskVolumeFsType pulumi.StringPtrInput `pulumi:"diskVolumeFsType"`
	// The name of the FlexVolume driver.
	FlexVolumeDriver pulumi.StringPtrInput `pulumi:"flexVolumeDriver"`
	// The type of the mounted file system. The default value is determined by the script of FlexVolume.
	FlexVolumeFsType pulumi.StringPtrInput `pulumi:"flexVolumeFsType"`
	// The list of FlexVolume objects. Each object is a key-value pair contained in a JSON string.
	FlexVolumeOptions pulumi.StringPtrInput `pulumi:"flexVolumeOptions"`
	// The name of the volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The path to the NFS volume.
	NfsVolumePath pulumi.StringPtrInput `pulumi:"nfsVolumePath"`
	// The nfs volume read only. Default value: `false`.
	NfsVolumeReadOnly pulumi.BoolPtrInput `pulumi:"nfsVolumeReadOnly"`
	// The address of the NFS server.
	NfsVolumeServer pulumi.StringPtrInput `pulumi:"nfsVolumeServer"`
	// The type of the volume.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ContainerGroupVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupVolume)(nil)).Elem()
}

func (i ContainerGroupVolumeArgs) ToContainerGroupVolumeOutput() ContainerGroupVolumeOutput {
	return i.ToContainerGroupVolumeOutputWithContext(context.Background())
}

func (i ContainerGroupVolumeArgs) ToContainerGroupVolumeOutputWithContext(ctx context.Context) ContainerGroupVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupVolumeOutput)
}

// ContainerGroupVolumeArrayInput is an input type that accepts ContainerGroupVolumeArray and ContainerGroupVolumeArrayOutput values.
// You can construct a concrete instance of `ContainerGroupVolumeArrayInput` via:
//
//	ContainerGroupVolumeArray{ ContainerGroupVolumeArgs{...} }
type ContainerGroupVolumeArrayInput interface {
	pulumi.Input

	ToContainerGroupVolumeArrayOutput() ContainerGroupVolumeArrayOutput
	ToContainerGroupVolumeArrayOutputWithContext(context.Context) ContainerGroupVolumeArrayOutput
}

type ContainerGroupVolumeArray []ContainerGroupVolumeInput

func (ContainerGroupVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupVolume)(nil)).Elem()
}

func (i ContainerGroupVolumeArray) ToContainerGroupVolumeArrayOutput() ContainerGroupVolumeArrayOutput {
	return i.ToContainerGroupVolumeArrayOutputWithContext(context.Background())
}

func (i ContainerGroupVolumeArray) ToContainerGroupVolumeArrayOutputWithContext(ctx context.Context) ContainerGroupVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupVolumeArrayOutput)
}

type ContainerGroupVolumeOutput struct{ *pulumi.OutputState }

func (ContainerGroupVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupVolume)(nil)).Elem()
}

func (o ContainerGroupVolumeOutput) ToContainerGroupVolumeOutput() ContainerGroupVolumeOutput {
	return o
}

func (o ContainerGroupVolumeOutput) ToContainerGroupVolumeOutputWithContext(ctx context.Context) ContainerGroupVolumeOutput {
	return o
}

// The paths of the ConfigFile volume. See `configFileVolumeConfigFileToPaths` below.
// > **NOTE:** Every volumes mounted must have `name` and `type` attributes.
func (o ContainerGroupVolumeOutput) ConfigFileVolumeConfigFileToPaths() ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput {
	return o.ApplyT(func(v ContainerGroupVolume) []ContainerGroupVolumeConfigFileVolumeConfigFileToPath {
		return v.ConfigFileVolumeConfigFileToPaths
	}).(ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput)
}

// The ID of DiskVolume.
func (o ContainerGroupVolumeOutput) DiskVolumeDiskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupVolume) *string { return v.DiskVolumeDiskId }).(pulumi.StringPtrOutput)
}

// The system type of DiskVolume.
func (o ContainerGroupVolumeOutput) DiskVolumeFsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupVolume) *string { return v.DiskVolumeFsType }).(pulumi.StringPtrOutput)
}

// The name of the FlexVolume driver.
func (o ContainerGroupVolumeOutput) FlexVolumeDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupVolume) *string { return v.FlexVolumeDriver }).(pulumi.StringPtrOutput)
}

// The type of the mounted file system. The default value is determined by the script of FlexVolume.
func (o ContainerGroupVolumeOutput) FlexVolumeFsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupVolume) *string { return v.FlexVolumeFsType }).(pulumi.StringPtrOutput)
}

// The list of FlexVolume objects. Each object is a key-value pair contained in a JSON string.
func (o ContainerGroupVolumeOutput) FlexVolumeOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupVolume) *string { return v.FlexVolumeOptions }).(pulumi.StringPtrOutput)
}

// The name of the volume.
func (o ContainerGroupVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The path to the NFS volume.
func (o ContainerGroupVolumeOutput) NfsVolumePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupVolume) *string { return v.NfsVolumePath }).(pulumi.StringPtrOutput)
}

// The nfs volume read only. Default value: `false`.
func (o ContainerGroupVolumeOutput) NfsVolumeReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerGroupVolume) *bool { return v.NfsVolumeReadOnly }).(pulumi.BoolPtrOutput)
}

// The address of the NFS server.
func (o ContainerGroupVolumeOutput) NfsVolumeServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupVolume) *string { return v.NfsVolumeServer }).(pulumi.StringPtrOutput)
}

// The type of the volume.
func (o ContainerGroupVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ContainerGroupVolumeArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupVolume)(nil)).Elem()
}

func (o ContainerGroupVolumeArrayOutput) ToContainerGroupVolumeArrayOutput() ContainerGroupVolumeArrayOutput {
	return o
}

func (o ContainerGroupVolumeArrayOutput) ToContainerGroupVolumeArrayOutputWithContext(ctx context.Context) ContainerGroupVolumeArrayOutput {
	return o
}

func (o ContainerGroupVolumeArrayOutput) Index(i pulumi.IntInput) ContainerGroupVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupVolume {
		return vs[0].([]ContainerGroupVolume)[vs[1].(int)]
	}).(ContainerGroupVolumeOutput)
}

type ContainerGroupVolumeConfigFileVolumeConfigFileToPath struct {
	// The content of the configuration file. Maximum size: 32 KB.
	Content *string `pulumi:"content"`
	// The path of HTTP Get request detection when setting the postStart callback function using the HTTP request method.
	Path *string `pulumi:"path"`
}

// ContainerGroupVolumeConfigFileVolumeConfigFileToPathInput is an input type that accepts ContainerGroupVolumeConfigFileVolumeConfigFileToPathArgs and ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput values.
// You can construct a concrete instance of `ContainerGroupVolumeConfigFileVolumeConfigFileToPathInput` via:
//
//	ContainerGroupVolumeConfigFileVolumeConfigFileToPathArgs{...}
type ContainerGroupVolumeConfigFileVolumeConfigFileToPathInput interface {
	pulumi.Input

	ToContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput() ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput
	ToContainerGroupVolumeConfigFileVolumeConfigFileToPathOutputWithContext(context.Context) ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput
}

type ContainerGroupVolumeConfigFileVolumeConfigFileToPathArgs struct {
	// The content of the configuration file. Maximum size: 32 KB.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// The path of HTTP Get request detection when setting the postStart callback function using the HTTP request method.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ContainerGroupVolumeConfigFileVolumeConfigFileToPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupVolumeConfigFileVolumeConfigFileToPath)(nil)).Elem()
}

func (i ContainerGroupVolumeConfigFileVolumeConfigFileToPathArgs) ToContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput() ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput {
	return i.ToContainerGroupVolumeConfigFileVolumeConfigFileToPathOutputWithContext(context.Background())
}

func (i ContainerGroupVolumeConfigFileVolumeConfigFileToPathArgs) ToContainerGroupVolumeConfigFileVolumeConfigFileToPathOutputWithContext(ctx context.Context) ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput)
}

// ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayInput is an input type that accepts ContainerGroupVolumeConfigFileVolumeConfigFileToPathArray and ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput values.
// You can construct a concrete instance of `ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayInput` via:
//
//	ContainerGroupVolumeConfigFileVolumeConfigFileToPathArray{ ContainerGroupVolumeConfigFileVolumeConfigFileToPathArgs{...} }
type ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayInput interface {
	pulumi.Input

	ToContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput() ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput
	ToContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutputWithContext(context.Context) ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput
}

type ContainerGroupVolumeConfigFileVolumeConfigFileToPathArray []ContainerGroupVolumeConfigFileVolumeConfigFileToPathInput

func (ContainerGroupVolumeConfigFileVolumeConfigFileToPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupVolumeConfigFileVolumeConfigFileToPath)(nil)).Elem()
}

func (i ContainerGroupVolumeConfigFileVolumeConfigFileToPathArray) ToContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput() ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput {
	return i.ToContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutputWithContext(context.Background())
}

func (i ContainerGroupVolumeConfigFileVolumeConfigFileToPathArray) ToContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutputWithContext(ctx context.Context) ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput)
}

type ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput struct{ *pulumi.OutputState }

func (ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupVolumeConfigFileVolumeConfigFileToPath)(nil)).Elem()
}

func (o ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput) ToContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput() ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput {
	return o
}

func (o ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput) ToContainerGroupVolumeConfigFileVolumeConfigFileToPathOutputWithContext(ctx context.Context) ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput {
	return o
}

// The content of the configuration file. Maximum size: 32 KB.
func (o ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupVolumeConfigFileVolumeConfigFileToPath) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The path of HTTP Get request detection when setting the postStart callback function using the HTTP request method.
func (o ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupVolumeConfigFileVolumeConfigFileToPath) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupVolumeConfigFileVolumeConfigFileToPath)(nil)).Elem()
}

func (o ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput) ToContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput() ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput {
	return o
}

func (o ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput) ToContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutputWithContext(ctx context.Context) ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput {
	return o
}

func (o ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput) Index(i pulumi.IntInput) ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupVolumeConfigFileVolumeConfigFileToPath {
		return vs[0].([]ContainerGroupVolumeConfigFileVolumeConfigFileToPath)[vs[1].(int)]
	}).(ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput)
}

type ImageCacheImageRegistryCredential struct {
	// The password of the Image Registry.
	Password *string `pulumi:"password"`
	// The address of Image Registry without `http://` or `https://`.
	Server *string `pulumi:"server"`
	// The user name of Image Registry.
	UserName *string `pulumi:"userName"`
}

// ImageCacheImageRegistryCredentialInput is an input type that accepts ImageCacheImageRegistryCredentialArgs and ImageCacheImageRegistryCredentialOutput values.
// You can construct a concrete instance of `ImageCacheImageRegistryCredentialInput` via:
//
//	ImageCacheImageRegistryCredentialArgs{...}
type ImageCacheImageRegistryCredentialInput interface {
	pulumi.Input

	ToImageCacheImageRegistryCredentialOutput() ImageCacheImageRegistryCredentialOutput
	ToImageCacheImageRegistryCredentialOutputWithContext(context.Context) ImageCacheImageRegistryCredentialOutput
}

type ImageCacheImageRegistryCredentialArgs struct {
	// The password of the Image Registry.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The address of Image Registry without `http://` or `https://`.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// The user name of Image Registry.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (ImageCacheImageRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageCacheImageRegistryCredential)(nil)).Elem()
}

func (i ImageCacheImageRegistryCredentialArgs) ToImageCacheImageRegistryCredentialOutput() ImageCacheImageRegistryCredentialOutput {
	return i.ToImageCacheImageRegistryCredentialOutputWithContext(context.Background())
}

func (i ImageCacheImageRegistryCredentialArgs) ToImageCacheImageRegistryCredentialOutputWithContext(ctx context.Context) ImageCacheImageRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCacheImageRegistryCredentialOutput)
}

// ImageCacheImageRegistryCredentialArrayInput is an input type that accepts ImageCacheImageRegistryCredentialArray and ImageCacheImageRegistryCredentialArrayOutput values.
// You can construct a concrete instance of `ImageCacheImageRegistryCredentialArrayInput` via:
//
//	ImageCacheImageRegistryCredentialArray{ ImageCacheImageRegistryCredentialArgs{...} }
type ImageCacheImageRegistryCredentialArrayInput interface {
	pulumi.Input

	ToImageCacheImageRegistryCredentialArrayOutput() ImageCacheImageRegistryCredentialArrayOutput
	ToImageCacheImageRegistryCredentialArrayOutputWithContext(context.Context) ImageCacheImageRegistryCredentialArrayOutput
}

type ImageCacheImageRegistryCredentialArray []ImageCacheImageRegistryCredentialInput

func (ImageCacheImageRegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageCacheImageRegistryCredential)(nil)).Elem()
}

func (i ImageCacheImageRegistryCredentialArray) ToImageCacheImageRegistryCredentialArrayOutput() ImageCacheImageRegistryCredentialArrayOutput {
	return i.ToImageCacheImageRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i ImageCacheImageRegistryCredentialArray) ToImageCacheImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ImageCacheImageRegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCacheImageRegistryCredentialArrayOutput)
}

type ImageCacheImageRegistryCredentialOutput struct{ *pulumi.OutputState }

func (ImageCacheImageRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageCacheImageRegistryCredential)(nil)).Elem()
}

func (o ImageCacheImageRegistryCredentialOutput) ToImageCacheImageRegistryCredentialOutput() ImageCacheImageRegistryCredentialOutput {
	return o
}

func (o ImageCacheImageRegistryCredentialOutput) ToImageCacheImageRegistryCredentialOutputWithContext(ctx context.Context) ImageCacheImageRegistryCredentialOutput {
	return o
}

// The password of the Image Registry.
func (o ImageCacheImageRegistryCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageCacheImageRegistryCredential) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The address of Image Registry without `http://` or `https://`.
func (o ImageCacheImageRegistryCredentialOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageCacheImageRegistryCredential) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// The user name of Image Registry.
func (o ImageCacheImageRegistryCredentialOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageCacheImageRegistryCredential) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type ImageCacheImageRegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (ImageCacheImageRegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageCacheImageRegistryCredential)(nil)).Elem()
}

func (o ImageCacheImageRegistryCredentialArrayOutput) ToImageCacheImageRegistryCredentialArrayOutput() ImageCacheImageRegistryCredentialArrayOutput {
	return o
}

func (o ImageCacheImageRegistryCredentialArrayOutput) ToImageCacheImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ImageCacheImageRegistryCredentialArrayOutput {
	return o
}

func (o ImageCacheImageRegistryCredentialArrayOutput) Index(i pulumi.IntInput) ImageCacheImageRegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageCacheImageRegistryCredential {
		return vs[0].([]ImageCacheImageRegistryCredential)[vs[1].(int)]
	}).(ImageCacheImageRegistryCredentialOutput)
}

type OpenApiImageCacheImageRegistryCredential struct {
	Password *string `pulumi:"password"`
	Server   *string `pulumi:"server"`
	UserName *string `pulumi:"userName"`
}

// OpenApiImageCacheImageRegistryCredentialInput is an input type that accepts OpenApiImageCacheImageRegistryCredentialArgs and OpenApiImageCacheImageRegistryCredentialOutput values.
// You can construct a concrete instance of `OpenApiImageCacheImageRegistryCredentialInput` via:
//
//	OpenApiImageCacheImageRegistryCredentialArgs{...}
type OpenApiImageCacheImageRegistryCredentialInput interface {
	pulumi.Input

	ToOpenApiImageCacheImageRegistryCredentialOutput() OpenApiImageCacheImageRegistryCredentialOutput
	ToOpenApiImageCacheImageRegistryCredentialOutputWithContext(context.Context) OpenApiImageCacheImageRegistryCredentialOutput
}

type OpenApiImageCacheImageRegistryCredentialArgs struct {
	Password pulumi.StringPtrInput `pulumi:"password"`
	Server   pulumi.StringPtrInput `pulumi:"server"`
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (OpenApiImageCacheImageRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenApiImageCacheImageRegistryCredential)(nil)).Elem()
}

func (i OpenApiImageCacheImageRegistryCredentialArgs) ToOpenApiImageCacheImageRegistryCredentialOutput() OpenApiImageCacheImageRegistryCredentialOutput {
	return i.ToOpenApiImageCacheImageRegistryCredentialOutputWithContext(context.Background())
}

func (i OpenApiImageCacheImageRegistryCredentialArgs) ToOpenApiImageCacheImageRegistryCredentialOutputWithContext(ctx context.Context) OpenApiImageCacheImageRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenApiImageCacheImageRegistryCredentialOutput)
}

// OpenApiImageCacheImageRegistryCredentialArrayInput is an input type that accepts OpenApiImageCacheImageRegistryCredentialArray and OpenApiImageCacheImageRegistryCredentialArrayOutput values.
// You can construct a concrete instance of `OpenApiImageCacheImageRegistryCredentialArrayInput` via:
//
//	OpenApiImageCacheImageRegistryCredentialArray{ OpenApiImageCacheImageRegistryCredentialArgs{...} }
type OpenApiImageCacheImageRegistryCredentialArrayInput interface {
	pulumi.Input

	ToOpenApiImageCacheImageRegistryCredentialArrayOutput() OpenApiImageCacheImageRegistryCredentialArrayOutput
	ToOpenApiImageCacheImageRegistryCredentialArrayOutputWithContext(context.Context) OpenApiImageCacheImageRegistryCredentialArrayOutput
}

type OpenApiImageCacheImageRegistryCredentialArray []OpenApiImageCacheImageRegistryCredentialInput

func (OpenApiImageCacheImageRegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OpenApiImageCacheImageRegistryCredential)(nil)).Elem()
}

func (i OpenApiImageCacheImageRegistryCredentialArray) ToOpenApiImageCacheImageRegistryCredentialArrayOutput() OpenApiImageCacheImageRegistryCredentialArrayOutput {
	return i.ToOpenApiImageCacheImageRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i OpenApiImageCacheImageRegistryCredentialArray) ToOpenApiImageCacheImageRegistryCredentialArrayOutputWithContext(ctx context.Context) OpenApiImageCacheImageRegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenApiImageCacheImageRegistryCredentialArrayOutput)
}

type OpenApiImageCacheImageRegistryCredentialOutput struct{ *pulumi.OutputState }

func (OpenApiImageCacheImageRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenApiImageCacheImageRegistryCredential)(nil)).Elem()
}

func (o OpenApiImageCacheImageRegistryCredentialOutput) ToOpenApiImageCacheImageRegistryCredentialOutput() OpenApiImageCacheImageRegistryCredentialOutput {
	return o
}

func (o OpenApiImageCacheImageRegistryCredentialOutput) ToOpenApiImageCacheImageRegistryCredentialOutputWithContext(ctx context.Context) OpenApiImageCacheImageRegistryCredentialOutput {
	return o
}

func (o OpenApiImageCacheImageRegistryCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenApiImageCacheImageRegistryCredential) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o OpenApiImageCacheImageRegistryCredentialOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenApiImageCacheImageRegistryCredential) *string { return v.Server }).(pulumi.StringPtrOutput)
}

func (o OpenApiImageCacheImageRegistryCredentialOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenApiImageCacheImageRegistryCredential) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type OpenApiImageCacheImageRegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (OpenApiImageCacheImageRegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OpenApiImageCacheImageRegistryCredential)(nil)).Elem()
}

func (o OpenApiImageCacheImageRegistryCredentialArrayOutput) ToOpenApiImageCacheImageRegistryCredentialArrayOutput() OpenApiImageCacheImageRegistryCredentialArrayOutput {
	return o
}

func (o OpenApiImageCacheImageRegistryCredentialArrayOutput) ToOpenApiImageCacheImageRegistryCredentialArrayOutputWithContext(ctx context.Context) OpenApiImageCacheImageRegistryCredentialArrayOutput {
	return o
}

func (o OpenApiImageCacheImageRegistryCredentialArrayOutput) Index(i pulumi.IntInput) OpenApiImageCacheImageRegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OpenApiImageCacheImageRegistryCredential {
		return vs[0].([]OpenApiImageCacheImageRegistryCredential)[vs[1].(int)]
	}).(OpenApiImageCacheImageRegistryCredentialOutput)
}

type VirtualNodeTaint struct {
	// The effect of the taint. Valid values: `NoSchedule`, `NoExecute` and `PreferNoSchedule`.
	Effect *string `pulumi:"effect"`
	// The key of the taint.
	Key *string `pulumi:"key"`
	// The value of the taint.
	Value *string `pulumi:"value"`
}

// VirtualNodeTaintInput is an input type that accepts VirtualNodeTaintArgs and VirtualNodeTaintOutput values.
// You can construct a concrete instance of `VirtualNodeTaintInput` via:
//
//	VirtualNodeTaintArgs{...}
type VirtualNodeTaintInput interface {
	pulumi.Input

	ToVirtualNodeTaintOutput() VirtualNodeTaintOutput
	ToVirtualNodeTaintOutputWithContext(context.Context) VirtualNodeTaintOutput
}

type VirtualNodeTaintArgs struct {
	// The effect of the taint. Valid values: `NoSchedule`, `NoExecute` and `PreferNoSchedule`.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// The key of the taint.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The value of the taint.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (VirtualNodeTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeTaint)(nil)).Elem()
}

func (i VirtualNodeTaintArgs) ToVirtualNodeTaintOutput() VirtualNodeTaintOutput {
	return i.ToVirtualNodeTaintOutputWithContext(context.Background())
}

func (i VirtualNodeTaintArgs) ToVirtualNodeTaintOutputWithContext(ctx context.Context) VirtualNodeTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeTaintOutput)
}

// VirtualNodeTaintArrayInput is an input type that accepts VirtualNodeTaintArray and VirtualNodeTaintArrayOutput values.
// You can construct a concrete instance of `VirtualNodeTaintArrayInput` via:
//
//	VirtualNodeTaintArray{ VirtualNodeTaintArgs{...} }
type VirtualNodeTaintArrayInput interface {
	pulumi.Input

	ToVirtualNodeTaintArrayOutput() VirtualNodeTaintArrayOutput
	ToVirtualNodeTaintArrayOutputWithContext(context.Context) VirtualNodeTaintArrayOutput
}

type VirtualNodeTaintArray []VirtualNodeTaintInput

func (VirtualNodeTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNodeTaint)(nil)).Elem()
}

func (i VirtualNodeTaintArray) ToVirtualNodeTaintArrayOutput() VirtualNodeTaintArrayOutput {
	return i.ToVirtualNodeTaintArrayOutputWithContext(context.Background())
}

func (i VirtualNodeTaintArray) ToVirtualNodeTaintArrayOutputWithContext(ctx context.Context) VirtualNodeTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeTaintArrayOutput)
}

type VirtualNodeTaintOutput struct{ *pulumi.OutputState }

func (VirtualNodeTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeTaint)(nil)).Elem()
}

func (o VirtualNodeTaintOutput) ToVirtualNodeTaintOutput() VirtualNodeTaintOutput {
	return o
}

func (o VirtualNodeTaintOutput) ToVirtualNodeTaintOutputWithContext(ctx context.Context) VirtualNodeTaintOutput {
	return o
}

// The effect of the taint. Valid values: `NoSchedule`, `NoExecute` and `PreferNoSchedule`.
func (o VirtualNodeTaintOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNodeTaint) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// The key of the taint.
func (o VirtualNodeTaintOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNodeTaint) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The value of the taint.
func (o VirtualNodeTaintOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNodeTaint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type VirtualNodeTaintArrayOutput struct{ *pulumi.OutputState }

func (VirtualNodeTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNodeTaint)(nil)).Elem()
}

func (o VirtualNodeTaintArrayOutput) ToVirtualNodeTaintArrayOutput() VirtualNodeTaintArrayOutput {
	return o
}

func (o VirtualNodeTaintArrayOutput) ToVirtualNodeTaintArrayOutputWithContext(ctx context.Context) VirtualNodeTaintArrayOutput {
	return o
}

func (o VirtualNodeTaintArrayOutput) Index(i pulumi.IntInput) VirtualNodeTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNodeTaint {
		return vs[0].([]VirtualNodeTaint)[vs[1].(int)]
	}).(VirtualNodeTaintOutput)
}

type GetContainerGroupsGroup struct {
	// The id if ContainerGroup.
	ContainerGroupId string `pulumi:"containerGroupId"`
	// The name of ContainerGroup.
	ContainerGroupName string `pulumi:"containerGroupName"`
	// A list of containers. Each element contains the following attributes:
	Containers []GetContainerGroupsGroupContainer `pulumi:"containers"`
	// The amount of CPU resources allocated to the container.
	Cpu      float64 `pulumi:"cpu"`
	Discount int     `pulumi:"discount"`
	// The DNS settings.
	DnsConfigs []GetContainerGroupsGroupDnsConfig `pulumi:"dnsConfigs"`
	// The security context of the container group.
	EciSecurityContexts []GetContainerGroupsGroupEciSecurityContext `pulumi:"eciSecurityContexts"`
	// The ID of the ENI instance.
	EniInstanceId string `pulumi:"eniInstanceId"`
	// The events of the container group. Maximum: `50`.
	Events []GetContainerGroupsGroupEvent `pulumi:"events"`
	// The time when the container group failed to run due to overdue payments. The timestamp follows the UTC and RFC3339 formats.
	ExpiredTime string `pulumi:"expiredTime"`
	// The time when the container failed to run tasks. The timestamp follows the UTC and RFC3339 formats.
	FailedTime string `pulumi:"failedTime"`
	// The mapping between host names and IP addresses for a container in the container group.
	HostAliases []GetContainerGroupsGroupHostAlias `pulumi:"hostAliases"`
	// The ID of the Container Group.
	Id string `pulumi:"id"`
	// A list of init containers. Each element contains the following attributes:
	InitContainers []GetContainerGroupsGroupInitContainer `pulumi:"initContainers"`
	// The type of the ECS instance.
	InstanceType string `pulumi:"instanceType"`
	// The public IP address of the container group.
	InternetIp string `pulumi:"internetIp"`
	// The internal IP address of the container group.
	IntranetIp string `pulumi:"intranetIp"`
	// The IPv6 address.
	Ipv6Address string `pulumi:"ipv6Address"`
	// The amount of memory resources allocated to the container group.
	Memory float64 `pulumi:"memory"`
	// The RAM role that the container group assumes. ECI and ECS share the same RAM role.
	RamRoleName string `pulumi:"ramRoleName"`
	// The ID of the resource group to which the container group belongs. If you have not specified a resource group for the container group, it is added to the default resource group.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The restart policy of the container group.
	RestartPolicy string `pulumi:"restartPolicy"`
	// The ID of the security group.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The status of container.
	Status string `pulumi:"status"`
	// The time when all containers in the container group completed running the specified tasks. The timestamp follows the UTC and RFC 3339 formats. For example, 2018-08-02T15:00:00Z.
	SucceededTime string `pulumi:"succeededTime"`
	// The tags attached to the container group. Each tag is a key-value pair. You can attach up to 20 tags to a container group.
	Tags map[string]interface{} `pulumi:"tags"`
	// The information about the mounted volume. You can mount up to 20 volumes.
	Volumes []GetContainerGroupsGroupVolume `pulumi:"volumes"`
	// The if of vpc.
	VpcId string `pulumi:"vpcId"`
	// The vswitch id.
	VswitchId string `pulumi:"vswitchId"`
	// The IDs of the zones where the container groups are deployed. If this parameter is not set, the system automatically selects the zones. By default, no value is specified.
	ZoneId string `pulumi:"zoneId"`
}

// GetContainerGroupsGroupInput is an input type that accepts GetContainerGroupsGroupArgs and GetContainerGroupsGroupOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupInput` via:
//
//	GetContainerGroupsGroupArgs{...}
type GetContainerGroupsGroupInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupOutput() GetContainerGroupsGroupOutput
	ToGetContainerGroupsGroupOutputWithContext(context.Context) GetContainerGroupsGroupOutput
}

type GetContainerGroupsGroupArgs struct {
	// The id if ContainerGroup.
	ContainerGroupId pulumi.StringInput `pulumi:"containerGroupId"`
	// The name of ContainerGroup.
	ContainerGroupName pulumi.StringInput `pulumi:"containerGroupName"`
	// A list of containers. Each element contains the following attributes:
	Containers GetContainerGroupsGroupContainerArrayInput `pulumi:"containers"`
	// The amount of CPU resources allocated to the container.
	Cpu      pulumi.Float64Input `pulumi:"cpu"`
	Discount pulumi.IntInput     `pulumi:"discount"`
	// The DNS settings.
	DnsConfigs GetContainerGroupsGroupDnsConfigArrayInput `pulumi:"dnsConfigs"`
	// The security context of the container group.
	EciSecurityContexts GetContainerGroupsGroupEciSecurityContextArrayInput `pulumi:"eciSecurityContexts"`
	// The ID of the ENI instance.
	EniInstanceId pulumi.StringInput `pulumi:"eniInstanceId"`
	// The events of the container group. Maximum: `50`.
	Events GetContainerGroupsGroupEventArrayInput `pulumi:"events"`
	// The time when the container group failed to run due to overdue payments. The timestamp follows the UTC and RFC3339 formats.
	ExpiredTime pulumi.StringInput `pulumi:"expiredTime"`
	// The time when the container failed to run tasks. The timestamp follows the UTC and RFC3339 formats.
	FailedTime pulumi.StringInput `pulumi:"failedTime"`
	// The mapping between host names and IP addresses for a container in the container group.
	HostAliases GetContainerGroupsGroupHostAliasArrayInput `pulumi:"hostAliases"`
	// The ID of the Container Group.
	Id pulumi.StringInput `pulumi:"id"`
	// A list of init containers. Each element contains the following attributes:
	InitContainers GetContainerGroupsGroupInitContainerArrayInput `pulumi:"initContainers"`
	// The type of the ECS instance.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// The public IP address of the container group.
	InternetIp pulumi.StringInput `pulumi:"internetIp"`
	// The internal IP address of the container group.
	IntranetIp pulumi.StringInput `pulumi:"intranetIp"`
	// The IPv6 address.
	Ipv6Address pulumi.StringInput `pulumi:"ipv6Address"`
	// The amount of memory resources allocated to the container group.
	Memory pulumi.Float64Input `pulumi:"memory"`
	// The RAM role that the container group assumes. ECI and ECS share the same RAM role.
	RamRoleName pulumi.StringInput `pulumi:"ramRoleName"`
	// The ID of the resource group to which the container group belongs. If you have not specified a resource group for the container group, it is added to the default resource group.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The restart policy of the container group.
	RestartPolicy pulumi.StringInput `pulumi:"restartPolicy"`
	// The ID of the security group.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The status of container.
	Status pulumi.StringInput `pulumi:"status"`
	// The time when all containers in the container group completed running the specified tasks. The timestamp follows the UTC and RFC 3339 formats. For example, 2018-08-02T15:00:00Z.
	SucceededTime pulumi.StringInput `pulumi:"succeededTime"`
	// The tags attached to the container group. Each tag is a key-value pair. You can attach up to 20 tags to a container group.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The information about the mounted volume. You can mount up to 20 volumes.
	Volumes GetContainerGroupsGroupVolumeArrayInput `pulumi:"volumes"`
	// The if of vpc.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The vswitch id.
	VswitchId pulumi.StringInput `pulumi:"vswitchId"`
	// The IDs of the zones where the container groups are deployed. If this parameter is not set, the system automatically selects the zones. By default, no value is specified.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetContainerGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroup)(nil)).Elem()
}

func (i GetContainerGroupsGroupArgs) ToGetContainerGroupsGroupOutput() GetContainerGroupsGroupOutput {
	return i.ToGetContainerGroupsGroupOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupArgs) ToGetContainerGroupsGroupOutputWithContext(ctx context.Context) GetContainerGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupOutput)
}

// GetContainerGroupsGroupArrayInput is an input type that accepts GetContainerGroupsGroupArray and GetContainerGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupArrayInput` via:
//
//	GetContainerGroupsGroupArray{ GetContainerGroupsGroupArgs{...} }
type GetContainerGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupArrayOutput() GetContainerGroupsGroupArrayOutput
	ToGetContainerGroupsGroupArrayOutputWithContext(context.Context) GetContainerGroupsGroupArrayOutput
}

type GetContainerGroupsGroupArray []GetContainerGroupsGroupInput

func (GetContainerGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroup)(nil)).Elem()
}

func (i GetContainerGroupsGroupArray) ToGetContainerGroupsGroupArrayOutput() GetContainerGroupsGroupArrayOutput {
	return i.ToGetContainerGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupArray) ToGetContainerGroupsGroupArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupArrayOutput)
}

type GetContainerGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroup)(nil)).Elem()
}

func (o GetContainerGroupsGroupOutput) ToGetContainerGroupsGroupOutput() GetContainerGroupsGroupOutput {
	return o
}

func (o GetContainerGroupsGroupOutput) ToGetContainerGroupsGroupOutputWithContext(ctx context.Context) GetContainerGroupsGroupOutput {
	return o
}

// The id if ContainerGroup.
func (o GetContainerGroupsGroupOutput) ContainerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.ContainerGroupId }).(pulumi.StringOutput)
}

// The name of ContainerGroup.
func (o GetContainerGroupsGroupOutput) ContainerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.ContainerGroupName }).(pulumi.StringOutput)
}

// A list of containers. Each element contains the following attributes:
func (o GetContainerGroupsGroupOutput) Containers() GetContainerGroupsGroupContainerArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) []GetContainerGroupsGroupContainer { return v.Containers }).(GetContainerGroupsGroupContainerArrayOutput)
}

// The amount of CPU resources allocated to the container.
func (o GetContainerGroupsGroupOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v GetContainerGroupsGroup) float64 { return v.Cpu }).(pulumi.Float64Output)
}

func (o GetContainerGroupsGroupOutput) Discount() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) int { return v.Discount }).(pulumi.IntOutput)
}

// The DNS settings.
func (o GetContainerGroupsGroupOutput) DnsConfigs() GetContainerGroupsGroupDnsConfigArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) []GetContainerGroupsGroupDnsConfig { return v.DnsConfigs }).(GetContainerGroupsGroupDnsConfigArrayOutput)
}

// The security context of the container group.
func (o GetContainerGroupsGroupOutput) EciSecurityContexts() GetContainerGroupsGroupEciSecurityContextArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) []GetContainerGroupsGroupEciSecurityContext {
		return v.EciSecurityContexts
	}).(GetContainerGroupsGroupEciSecurityContextArrayOutput)
}

// The ID of the ENI instance.
func (o GetContainerGroupsGroupOutput) EniInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.EniInstanceId }).(pulumi.StringOutput)
}

// The events of the container group. Maximum: `50`.
func (o GetContainerGroupsGroupOutput) Events() GetContainerGroupsGroupEventArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) []GetContainerGroupsGroupEvent { return v.Events }).(GetContainerGroupsGroupEventArrayOutput)
}

// The time when the container group failed to run due to overdue payments. The timestamp follows the UTC and RFC3339 formats.
func (o GetContainerGroupsGroupOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

// The time when the container failed to run tasks. The timestamp follows the UTC and RFC3339 formats.
func (o GetContainerGroupsGroupOutput) FailedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.FailedTime }).(pulumi.StringOutput)
}

// The mapping between host names and IP addresses for a container in the container group.
func (o GetContainerGroupsGroupOutput) HostAliases() GetContainerGroupsGroupHostAliasArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) []GetContainerGroupsGroupHostAlias { return v.HostAliases }).(GetContainerGroupsGroupHostAliasArrayOutput)
}

// The ID of the Container Group.
func (o GetContainerGroupsGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.Id }).(pulumi.StringOutput)
}

// A list of init containers. Each element contains the following attributes:
func (o GetContainerGroupsGroupOutput) InitContainers() GetContainerGroupsGroupInitContainerArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) []GetContainerGroupsGroupInitContainer { return v.InitContainers }).(GetContainerGroupsGroupInitContainerArrayOutput)
}

// The type of the ECS instance.
func (o GetContainerGroupsGroupOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.InstanceType }).(pulumi.StringOutput)
}

// The public IP address of the container group.
func (o GetContainerGroupsGroupOutput) InternetIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.InternetIp }).(pulumi.StringOutput)
}

// The internal IP address of the container group.
func (o GetContainerGroupsGroupOutput) IntranetIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.IntranetIp }).(pulumi.StringOutput)
}

// The IPv6 address.
func (o GetContainerGroupsGroupOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

// The amount of memory resources allocated to the container group.
func (o GetContainerGroupsGroupOutput) Memory() pulumi.Float64Output {
	return o.ApplyT(func(v GetContainerGroupsGroup) float64 { return v.Memory }).(pulumi.Float64Output)
}

// The RAM role that the container group assumes. ECI and ECS share the same RAM role.
func (o GetContainerGroupsGroupOutput) RamRoleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.RamRoleName }).(pulumi.StringOutput)
}

// The ID of the resource group to which the container group belongs. If you have not specified a resource group for the container group, it is added to the default resource group.
func (o GetContainerGroupsGroupOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The restart policy of the container group.
func (o GetContainerGroupsGroupOutput) RestartPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.RestartPolicy }).(pulumi.StringOutput)
}

// The ID of the security group.
func (o GetContainerGroupsGroupOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The status of container.
func (o GetContainerGroupsGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.Status }).(pulumi.StringOutput)
}

// The time when all containers in the container group completed running the specified tasks. The timestamp follows the UTC and RFC 3339 formats. For example, 2018-08-02T15:00:00Z.
func (o GetContainerGroupsGroupOutput) SucceededTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.SucceededTime }).(pulumi.StringOutput)
}

// The tags attached to the container group. Each tag is a key-value pair. You can attach up to 20 tags to a container group.
func (o GetContainerGroupsGroupOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// The information about the mounted volume. You can mount up to 20 volumes.
func (o GetContainerGroupsGroupOutput) Volumes() GetContainerGroupsGroupVolumeArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) []GetContainerGroupsGroupVolume { return v.Volumes }).(GetContainerGroupsGroupVolumeArrayOutput)
}

// The if of vpc.
func (o GetContainerGroupsGroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.VpcId }).(pulumi.StringOutput)
}

// The vswitch id.
func (o GetContainerGroupsGroupOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.VswitchId }).(pulumi.StringOutput)
}

// The IDs of the zones where the container groups are deployed. If this parameter is not set, the system automatically selects the zones. By default, no value is specified.
func (o GetContainerGroupsGroupOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroup) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroup)(nil)).Elem()
}

func (o GetContainerGroupsGroupArrayOutput) ToGetContainerGroupsGroupArrayOutput() GetContainerGroupsGroupArrayOutput {
	return o
}

func (o GetContainerGroupsGroupArrayOutput) ToGetContainerGroupsGroupArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupArrayOutput {
	return o
}

func (o GetContainerGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroup {
		return vs[0].([]GetContainerGroupsGroup)[vs[1].(int)]
	}).(GetContainerGroupsGroupOutput)
}

type GetContainerGroupsGroupContainer struct {
	// The arguments passed to the commands.
	Args []string `pulumi:"args"`
	// The commands run by the container.
	Commands []string `pulumi:"commands"`
	// The amount of CPU resources allocated to the container.
	Cpu float64 `pulumi:"cpu"`
	// The environment variables.
	EnvironmentVars []GetContainerGroupsGroupContainerEnvironmentVar `pulumi:"environmentVars"`
	// The amount of GPU resources allocated to the container.
	Gpu int `pulumi:"gpu"`
	// The image of the container.
	Image string `pulumi:"image"`
	// The policy for pulling an image.
	ImagePullPolicy string `pulumi:"imagePullPolicy"`
	// The amount of memory resources allocated to the container group.
	Memory float64 `pulumi:"memory"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// The exposed ports and protocols. Maximum: `100`.
	Ports []GetContainerGroupsGroupContainerPort `pulumi:"ports"`
	// Indicates whether the container is ready.
	Ready bool `pulumi:"ready"`
	// The number of times that the container has restarted.
	RestartCount int `pulumi:"restartCount"`
	// The list of volumes mounted to the container.
	VolumeMounts []GetContainerGroupsGroupContainerVolumeMount `pulumi:"volumeMounts"`
	// The working directory of the container.
	WorkingDir string `pulumi:"workingDir"`
}

// GetContainerGroupsGroupContainerInput is an input type that accepts GetContainerGroupsGroupContainerArgs and GetContainerGroupsGroupContainerOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupContainerInput` via:
//
//	GetContainerGroupsGroupContainerArgs{...}
type GetContainerGroupsGroupContainerInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupContainerOutput() GetContainerGroupsGroupContainerOutput
	ToGetContainerGroupsGroupContainerOutputWithContext(context.Context) GetContainerGroupsGroupContainerOutput
}

type GetContainerGroupsGroupContainerArgs struct {
	// The arguments passed to the commands.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// The commands run by the container.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// The amount of CPU resources allocated to the container.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The environment variables.
	EnvironmentVars GetContainerGroupsGroupContainerEnvironmentVarArrayInput `pulumi:"environmentVars"`
	// The amount of GPU resources allocated to the container.
	Gpu pulumi.IntInput `pulumi:"gpu"`
	// The image of the container.
	Image pulumi.StringInput `pulumi:"image"`
	// The policy for pulling an image.
	ImagePullPolicy pulumi.StringInput `pulumi:"imagePullPolicy"`
	// The amount of memory resources allocated to the container group.
	Memory pulumi.Float64Input `pulumi:"memory"`
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The exposed ports and protocols. Maximum: `100`.
	Ports GetContainerGroupsGroupContainerPortArrayInput `pulumi:"ports"`
	// Indicates whether the container is ready.
	Ready pulumi.BoolInput `pulumi:"ready"`
	// The number of times that the container has restarted.
	RestartCount pulumi.IntInput `pulumi:"restartCount"`
	// The list of volumes mounted to the container.
	VolumeMounts GetContainerGroupsGroupContainerVolumeMountArrayInput `pulumi:"volumeMounts"`
	// The working directory of the container.
	WorkingDir pulumi.StringInput `pulumi:"workingDir"`
}

func (GetContainerGroupsGroupContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupContainer)(nil)).Elem()
}

func (i GetContainerGroupsGroupContainerArgs) ToGetContainerGroupsGroupContainerOutput() GetContainerGroupsGroupContainerOutput {
	return i.ToGetContainerGroupsGroupContainerOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupContainerArgs) ToGetContainerGroupsGroupContainerOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupContainerOutput)
}

// GetContainerGroupsGroupContainerArrayInput is an input type that accepts GetContainerGroupsGroupContainerArray and GetContainerGroupsGroupContainerArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupContainerArrayInput` via:
//
//	GetContainerGroupsGroupContainerArray{ GetContainerGroupsGroupContainerArgs{...} }
type GetContainerGroupsGroupContainerArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupContainerArrayOutput() GetContainerGroupsGroupContainerArrayOutput
	ToGetContainerGroupsGroupContainerArrayOutputWithContext(context.Context) GetContainerGroupsGroupContainerArrayOutput
}

type GetContainerGroupsGroupContainerArray []GetContainerGroupsGroupContainerInput

func (GetContainerGroupsGroupContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupContainer)(nil)).Elem()
}

func (i GetContainerGroupsGroupContainerArray) ToGetContainerGroupsGroupContainerArrayOutput() GetContainerGroupsGroupContainerArrayOutput {
	return i.ToGetContainerGroupsGroupContainerArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupContainerArray) ToGetContainerGroupsGroupContainerArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupContainerArrayOutput)
}

type GetContainerGroupsGroupContainerOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupContainer)(nil)).Elem()
}

func (o GetContainerGroupsGroupContainerOutput) ToGetContainerGroupsGroupContainerOutput() GetContainerGroupsGroupContainerOutput {
	return o
}

func (o GetContainerGroupsGroupContainerOutput) ToGetContainerGroupsGroupContainerOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerOutput {
	return o
}

// The arguments passed to the commands.
func (o GetContainerGroupsGroupContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// The commands run by the container.
func (o GetContainerGroupsGroupContainerOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// The amount of CPU resources allocated to the container.
func (o GetContainerGroupsGroupContainerOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The environment variables.
func (o GetContainerGroupsGroupContainerOutput) EnvironmentVars() GetContainerGroupsGroupContainerEnvironmentVarArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) []GetContainerGroupsGroupContainerEnvironmentVar {
		return v.EnvironmentVars
	}).(GetContainerGroupsGroupContainerEnvironmentVarArrayOutput)
}

// The amount of GPU resources allocated to the container.
func (o GetContainerGroupsGroupContainerOutput) Gpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) int { return v.Gpu }).(pulumi.IntOutput)
}

// The image of the container.
func (o GetContainerGroupsGroupContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) string { return v.Image }).(pulumi.StringOutput)
}

// The policy for pulling an image.
func (o GetContainerGroupsGroupContainerOutput) ImagePullPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) string { return v.ImagePullPolicy }).(pulumi.StringOutput)
}

// The amount of memory resources allocated to the container group.
func (o GetContainerGroupsGroupContainerOutput) Memory() pulumi.Float64Output {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) float64 { return v.Memory }).(pulumi.Float64Output)
}

// The name of the volume.
func (o GetContainerGroupsGroupContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) string { return v.Name }).(pulumi.StringOutput)
}

// The exposed ports and protocols. Maximum: `100`.
func (o GetContainerGroupsGroupContainerOutput) Ports() GetContainerGroupsGroupContainerPortArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) []GetContainerGroupsGroupContainerPort { return v.Ports }).(GetContainerGroupsGroupContainerPortArrayOutput)
}

// Indicates whether the container is ready.
func (o GetContainerGroupsGroupContainerOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) bool { return v.Ready }).(pulumi.BoolOutput)
}

// The number of times that the container has restarted.
func (o GetContainerGroupsGroupContainerOutput) RestartCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) int { return v.RestartCount }).(pulumi.IntOutput)
}

// The list of volumes mounted to the container.
func (o GetContainerGroupsGroupContainerOutput) VolumeMounts() GetContainerGroupsGroupContainerVolumeMountArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) []GetContainerGroupsGroupContainerVolumeMount {
		return v.VolumeMounts
	}).(GetContainerGroupsGroupContainerVolumeMountArrayOutput)
}

// The working directory of the container.
func (o GetContainerGroupsGroupContainerOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainer) string { return v.WorkingDir }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupContainerArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupContainer)(nil)).Elem()
}

func (o GetContainerGroupsGroupContainerArrayOutput) ToGetContainerGroupsGroupContainerArrayOutput() GetContainerGroupsGroupContainerArrayOutput {
	return o
}

func (o GetContainerGroupsGroupContainerArrayOutput) ToGetContainerGroupsGroupContainerArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerArrayOutput {
	return o
}

func (o GetContainerGroupsGroupContainerArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupContainer {
		return vs[0].([]GetContainerGroupsGroupContainer)[vs[1].(int)]
	}).(GetContainerGroupsGroupContainerOutput)
}

type GetContainerGroupsGroupContainerEnvironmentVar struct {
	// The name of the variable.
	Key string `pulumi:"key"`
	// The value of the variable.
	Value string `pulumi:"value"`
}

// GetContainerGroupsGroupContainerEnvironmentVarInput is an input type that accepts GetContainerGroupsGroupContainerEnvironmentVarArgs and GetContainerGroupsGroupContainerEnvironmentVarOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupContainerEnvironmentVarInput` via:
//
//	GetContainerGroupsGroupContainerEnvironmentVarArgs{...}
type GetContainerGroupsGroupContainerEnvironmentVarInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupContainerEnvironmentVarOutput() GetContainerGroupsGroupContainerEnvironmentVarOutput
	ToGetContainerGroupsGroupContainerEnvironmentVarOutputWithContext(context.Context) GetContainerGroupsGroupContainerEnvironmentVarOutput
}

type GetContainerGroupsGroupContainerEnvironmentVarArgs struct {
	// The name of the variable.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the variable.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetContainerGroupsGroupContainerEnvironmentVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupContainerEnvironmentVar)(nil)).Elem()
}

func (i GetContainerGroupsGroupContainerEnvironmentVarArgs) ToGetContainerGroupsGroupContainerEnvironmentVarOutput() GetContainerGroupsGroupContainerEnvironmentVarOutput {
	return i.ToGetContainerGroupsGroupContainerEnvironmentVarOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupContainerEnvironmentVarArgs) ToGetContainerGroupsGroupContainerEnvironmentVarOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerEnvironmentVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupContainerEnvironmentVarOutput)
}

// GetContainerGroupsGroupContainerEnvironmentVarArrayInput is an input type that accepts GetContainerGroupsGroupContainerEnvironmentVarArray and GetContainerGroupsGroupContainerEnvironmentVarArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupContainerEnvironmentVarArrayInput` via:
//
//	GetContainerGroupsGroupContainerEnvironmentVarArray{ GetContainerGroupsGroupContainerEnvironmentVarArgs{...} }
type GetContainerGroupsGroupContainerEnvironmentVarArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupContainerEnvironmentVarArrayOutput() GetContainerGroupsGroupContainerEnvironmentVarArrayOutput
	ToGetContainerGroupsGroupContainerEnvironmentVarArrayOutputWithContext(context.Context) GetContainerGroupsGroupContainerEnvironmentVarArrayOutput
}

type GetContainerGroupsGroupContainerEnvironmentVarArray []GetContainerGroupsGroupContainerEnvironmentVarInput

func (GetContainerGroupsGroupContainerEnvironmentVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupContainerEnvironmentVar)(nil)).Elem()
}

func (i GetContainerGroupsGroupContainerEnvironmentVarArray) ToGetContainerGroupsGroupContainerEnvironmentVarArrayOutput() GetContainerGroupsGroupContainerEnvironmentVarArrayOutput {
	return i.ToGetContainerGroupsGroupContainerEnvironmentVarArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupContainerEnvironmentVarArray) ToGetContainerGroupsGroupContainerEnvironmentVarArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerEnvironmentVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupContainerEnvironmentVarArrayOutput)
}

type GetContainerGroupsGroupContainerEnvironmentVarOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupContainerEnvironmentVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupContainerEnvironmentVar)(nil)).Elem()
}

func (o GetContainerGroupsGroupContainerEnvironmentVarOutput) ToGetContainerGroupsGroupContainerEnvironmentVarOutput() GetContainerGroupsGroupContainerEnvironmentVarOutput {
	return o
}

func (o GetContainerGroupsGroupContainerEnvironmentVarOutput) ToGetContainerGroupsGroupContainerEnvironmentVarOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerEnvironmentVarOutput {
	return o
}

// The name of the variable.
func (o GetContainerGroupsGroupContainerEnvironmentVarOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainerEnvironmentVar) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the variable.
func (o GetContainerGroupsGroupContainerEnvironmentVarOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainerEnvironmentVar) string { return v.Value }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupContainerEnvironmentVarArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupContainerEnvironmentVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupContainerEnvironmentVar)(nil)).Elem()
}

func (o GetContainerGroupsGroupContainerEnvironmentVarArrayOutput) ToGetContainerGroupsGroupContainerEnvironmentVarArrayOutput() GetContainerGroupsGroupContainerEnvironmentVarArrayOutput {
	return o
}

func (o GetContainerGroupsGroupContainerEnvironmentVarArrayOutput) ToGetContainerGroupsGroupContainerEnvironmentVarArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerEnvironmentVarArrayOutput {
	return o
}

func (o GetContainerGroupsGroupContainerEnvironmentVarArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupContainerEnvironmentVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupContainerEnvironmentVar {
		return vs[0].([]GetContainerGroupsGroupContainerEnvironmentVar)[vs[1].(int)]
	}).(GetContainerGroupsGroupContainerEnvironmentVarOutput)
}

type GetContainerGroupsGroupContainerPort struct {
	// The port number. Valid values: 1 to 65535.
	Port int `pulumi:"port"`
	// Valid values: `TCP` and `UDP`.
	Protocol string `pulumi:"protocol"`
}

// GetContainerGroupsGroupContainerPortInput is an input type that accepts GetContainerGroupsGroupContainerPortArgs and GetContainerGroupsGroupContainerPortOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupContainerPortInput` via:
//
//	GetContainerGroupsGroupContainerPortArgs{...}
type GetContainerGroupsGroupContainerPortInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupContainerPortOutput() GetContainerGroupsGroupContainerPortOutput
	ToGetContainerGroupsGroupContainerPortOutputWithContext(context.Context) GetContainerGroupsGroupContainerPortOutput
}

type GetContainerGroupsGroupContainerPortArgs struct {
	// The port number. Valid values: 1 to 65535.
	Port pulumi.IntInput `pulumi:"port"`
	// Valid values: `TCP` and `UDP`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetContainerGroupsGroupContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupContainerPort)(nil)).Elem()
}

func (i GetContainerGroupsGroupContainerPortArgs) ToGetContainerGroupsGroupContainerPortOutput() GetContainerGroupsGroupContainerPortOutput {
	return i.ToGetContainerGroupsGroupContainerPortOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupContainerPortArgs) ToGetContainerGroupsGroupContainerPortOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupContainerPortOutput)
}

// GetContainerGroupsGroupContainerPortArrayInput is an input type that accepts GetContainerGroupsGroupContainerPortArray and GetContainerGroupsGroupContainerPortArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupContainerPortArrayInput` via:
//
//	GetContainerGroupsGroupContainerPortArray{ GetContainerGroupsGroupContainerPortArgs{...} }
type GetContainerGroupsGroupContainerPortArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupContainerPortArrayOutput() GetContainerGroupsGroupContainerPortArrayOutput
	ToGetContainerGroupsGroupContainerPortArrayOutputWithContext(context.Context) GetContainerGroupsGroupContainerPortArrayOutput
}

type GetContainerGroupsGroupContainerPortArray []GetContainerGroupsGroupContainerPortInput

func (GetContainerGroupsGroupContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupContainerPort)(nil)).Elem()
}

func (i GetContainerGroupsGroupContainerPortArray) ToGetContainerGroupsGroupContainerPortArrayOutput() GetContainerGroupsGroupContainerPortArrayOutput {
	return i.ToGetContainerGroupsGroupContainerPortArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupContainerPortArray) ToGetContainerGroupsGroupContainerPortArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupContainerPortArrayOutput)
}

type GetContainerGroupsGroupContainerPortOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupContainerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupContainerPort)(nil)).Elem()
}

func (o GetContainerGroupsGroupContainerPortOutput) ToGetContainerGroupsGroupContainerPortOutput() GetContainerGroupsGroupContainerPortOutput {
	return o
}

func (o GetContainerGroupsGroupContainerPortOutput) ToGetContainerGroupsGroupContainerPortOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerPortOutput {
	return o
}

// The port number. Valid values: 1 to 65535.
func (o GetContainerGroupsGroupContainerPortOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainerPort) int { return v.Port }).(pulumi.IntOutput)
}

// Valid values: `TCP` and `UDP`.
func (o GetContainerGroupsGroupContainerPortOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainerPort) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupContainerPortArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupContainerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupContainerPort)(nil)).Elem()
}

func (o GetContainerGroupsGroupContainerPortArrayOutput) ToGetContainerGroupsGroupContainerPortArrayOutput() GetContainerGroupsGroupContainerPortArrayOutput {
	return o
}

func (o GetContainerGroupsGroupContainerPortArrayOutput) ToGetContainerGroupsGroupContainerPortArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerPortArrayOutput {
	return o
}

func (o GetContainerGroupsGroupContainerPortArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupContainerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupContainerPort {
		return vs[0].([]GetContainerGroupsGroupContainerPort)[vs[1].(int)]
	}).(GetContainerGroupsGroupContainerPortOutput)
}

type GetContainerGroupsGroupContainerVolumeMount struct {
	// The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
	MountPath string `pulumi:"mountPath"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// Default value: `false`.
	ReadOnly bool `pulumi:"readOnly"`
}

// GetContainerGroupsGroupContainerVolumeMountInput is an input type that accepts GetContainerGroupsGroupContainerVolumeMountArgs and GetContainerGroupsGroupContainerVolumeMountOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupContainerVolumeMountInput` via:
//
//	GetContainerGroupsGroupContainerVolumeMountArgs{...}
type GetContainerGroupsGroupContainerVolumeMountInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupContainerVolumeMountOutput() GetContainerGroupsGroupContainerVolumeMountOutput
	ToGetContainerGroupsGroupContainerVolumeMountOutputWithContext(context.Context) GetContainerGroupsGroupContainerVolumeMountOutput
}

type GetContainerGroupsGroupContainerVolumeMountArgs struct {
	// The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// Default value: `false`.
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`
}

func (GetContainerGroupsGroupContainerVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupContainerVolumeMount)(nil)).Elem()
}

func (i GetContainerGroupsGroupContainerVolumeMountArgs) ToGetContainerGroupsGroupContainerVolumeMountOutput() GetContainerGroupsGroupContainerVolumeMountOutput {
	return i.ToGetContainerGroupsGroupContainerVolumeMountOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupContainerVolumeMountArgs) ToGetContainerGroupsGroupContainerVolumeMountOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupContainerVolumeMountOutput)
}

// GetContainerGroupsGroupContainerVolumeMountArrayInput is an input type that accepts GetContainerGroupsGroupContainerVolumeMountArray and GetContainerGroupsGroupContainerVolumeMountArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupContainerVolumeMountArrayInput` via:
//
//	GetContainerGroupsGroupContainerVolumeMountArray{ GetContainerGroupsGroupContainerVolumeMountArgs{...} }
type GetContainerGroupsGroupContainerVolumeMountArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupContainerVolumeMountArrayOutput() GetContainerGroupsGroupContainerVolumeMountArrayOutput
	ToGetContainerGroupsGroupContainerVolumeMountArrayOutputWithContext(context.Context) GetContainerGroupsGroupContainerVolumeMountArrayOutput
}

type GetContainerGroupsGroupContainerVolumeMountArray []GetContainerGroupsGroupContainerVolumeMountInput

func (GetContainerGroupsGroupContainerVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupContainerVolumeMount)(nil)).Elem()
}

func (i GetContainerGroupsGroupContainerVolumeMountArray) ToGetContainerGroupsGroupContainerVolumeMountArrayOutput() GetContainerGroupsGroupContainerVolumeMountArrayOutput {
	return i.ToGetContainerGroupsGroupContainerVolumeMountArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupContainerVolumeMountArray) ToGetContainerGroupsGroupContainerVolumeMountArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupContainerVolumeMountArrayOutput)
}

type GetContainerGroupsGroupContainerVolumeMountOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupContainerVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupContainerVolumeMount)(nil)).Elem()
}

func (o GetContainerGroupsGroupContainerVolumeMountOutput) ToGetContainerGroupsGroupContainerVolumeMountOutput() GetContainerGroupsGroupContainerVolumeMountOutput {
	return o
}

func (o GetContainerGroupsGroupContainerVolumeMountOutput) ToGetContainerGroupsGroupContainerVolumeMountOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerVolumeMountOutput {
	return o
}

// The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
func (o GetContainerGroupsGroupContainerVolumeMountOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainerVolumeMount) string { return v.MountPath }).(pulumi.StringOutput)
}

// The name of the volume.
func (o GetContainerGroupsGroupContainerVolumeMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainerVolumeMount) string { return v.Name }).(pulumi.StringOutput)
}

// Default value: `false`.
func (o GetContainerGroupsGroupContainerVolumeMountOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupContainerVolumeMount) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

type GetContainerGroupsGroupContainerVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupContainerVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupContainerVolumeMount)(nil)).Elem()
}

func (o GetContainerGroupsGroupContainerVolumeMountArrayOutput) ToGetContainerGroupsGroupContainerVolumeMountArrayOutput() GetContainerGroupsGroupContainerVolumeMountArrayOutput {
	return o
}

func (o GetContainerGroupsGroupContainerVolumeMountArrayOutput) ToGetContainerGroupsGroupContainerVolumeMountArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupContainerVolumeMountArrayOutput {
	return o
}

func (o GetContainerGroupsGroupContainerVolumeMountArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupContainerVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupContainerVolumeMount {
		return vs[0].([]GetContainerGroupsGroupContainerVolumeMount)[vs[1].(int)]
	}).(GetContainerGroupsGroupContainerVolumeMountOutput)
}

type GetContainerGroupsGroupDnsConfig struct {
	// The list of DNS server IP addresses.
	NameServers []string `pulumi:"nameServers"`
	// The list of objects. Each object is a name-value pair. The value is optional.
	Options []GetContainerGroupsGroupDnsConfigOption `pulumi:"options"`
	// The list of DNS lookup domains.
	Searches []string `pulumi:"searches"`
}

// GetContainerGroupsGroupDnsConfigInput is an input type that accepts GetContainerGroupsGroupDnsConfigArgs and GetContainerGroupsGroupDnsConfigOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupDnsConfigInput` via:
//
//	GetContainerGroupsGroupDnsConfigArgs{...}
type GetContainerGroupsGroupDnsConfigInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupDnsConfigOutput() GetContainerGroupsGroupDnsConfigOutput
	ToGetContainerGroupsGroupDnsConfigOutputWithContext(context.Context) GetContainerGroupsGroupDnsConfigOutput
}

type GetContainerGroupsGroupDnsConfigArgs struct {
	// The list of DNS server IP addresses.
	NameServers pulumi.StringArrayInput `pulumi:"nameServers"`
	// The list of objects. Each object is a name-value pair. The value is optional.
	Options GetContainerGroupsGroupDnsConfigOptionArrayInput `pulumi:"options"`
	// The list of DNS lookup domains.
	Searches pulumi.StringArrayInput `pulumi:"searches"`
}

func (GetContainerGroupsGroupDnsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupDnsConfig)(nil)).Elem()
}

func (i GetContainerGroupsGroupDnsConfigArgs) ToGetContainerGroupsGroupDnsConfigOutput() GetContainerGroupsGroupDnsConfigOutput {
	return i.ToGetContainerGroupsGroupDnsConfigOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupDnsConfigArgs) ToGetContainerGroupsGroupDnsConfigOutputWithContext(ctx context.Context) GetContainerGroupsGroupDnsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupDnsConfigOutput)
}

// GetContainerGroupsGroupDnsConfigArrayInput is an input type that accepts GetContainerGroupsGroupDnsConfigArray and GetContainerGroupsGroupDnsConfigArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupDnsConfigArrayInput` via:
//
//	GetContainerGroupsGroupDnsConfigArray{ GetContainerGroupsGroupDnsConfigArgs{...} }
type GetContainerGroupsGroupDnsConfigArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupDnsConfigArrayOutput() GetContainerGroupsGroupDnsConfigArrayOutput
	ToGetContainerGroupsGroupDnsConfigArrayOutputWithContext(context.Context) GetContainerGroupsGroupDnsConfigArrayOutput
}

type GetContainerGroupsGroupDnsConfigArray []GetContainerGroupsGroupDnsConfigInput

func (GetContainerGroupsGroupDnsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupDnsConfig)(nil)).Elem()
}

func (i GetContainerGroupsGroupDnsConfigArray) ToGetContainerGroupsGroupDnsConfigArrayOutput() GetContainerGroupsGroupDnsConfigArrayOutput {
	return i.ToGetContainerGroupsGroupDnsConfigArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupDnsConfigArray) ToGetContainerGroupsGroupDnsConfigArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupDnsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupDnsConfigArrayOutput)
}

type GetContainerGroupsGroupDnsConfigOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupDnsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupDnsConfig)(nil)).Elem()
}

func (o GetContainerGroupsGroupDnsConfigOutput) ToGetContainerGroupsGroupDnsConfigOutput() GetContainerGroupsGroupDnsConfigOutput {
	return o
}

func (o GetContainerGroupsGroupDnsConfigOutput) ToGetContainerGroupsGroupDnsConfigOutputWithContext(ctx context.Context) GetContainerGroupsGroupDnsConfigOutput {
	return o
}

// The list of DNS server IP addresses.
func (o GetContainerGroupsGroupDnsConfigOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupDnsConfig) []string { return v.NameServers }).(pulumi.StringArrayOutput)
}

// The list of objects. Each object is a name-value pair. The value is optional.
func (o GetContainerGroupsGroupDnsConfigOutput) Options() GetContainerGroupsGroupDnsConfigOptionArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupDnsConfig) []GetContainerGroupsGroupDnsConfigOption { return v.Options }).(GetContainerGroupsGroupDnsConfigOptionArrayOutput)
}

// The list of DNS lookup domains.
func (o GetContainerGroupsGroupDnsConfigOutput) Searches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupDnsConfig) []string { return v.Searches }).(pulumi.StringArrayOutput)
}

type GetContainerGroupsGroupDnsConfigArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupDnsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupDnsConfig)(nil)).Elem()
}

func (o GetContainerGroupsGroupDnsConfigArrayOutput) ToGetContainerGroupsGroupDnsConfigArrayOutput() GetContainerGroupsGroupDnsConfigArrayOutput {
	return o
}

func (o GetContainerGroupsGroupDnsConfigArrayOutput) ToGetContainerGroupsGroupDnsConfigArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupDnsConfigArrayOutput {
	return o
}

func (o GetContainerGroupsGroupDnsConfigArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupDnsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupDnsConfig {
		return vs[0].([]GetContainerGroupsGroupDnsConfig)[vs[1].(int)]
	}).(GetContainerGroupsGroupDnsConfigOutput)
}

type GetContainerGroupsGroupDnsConfigOption struct {
	// The name of the volume.
	Name string `pulumi:"name"`
	// The value of the variable.
	Value string `pulumi:"value"`
}

// GetContainerGroupsGroupDnsConfigOptionInput is an input type that accepts GetContainerGroupsGroupDnsConfigOptionArgs and GetContainerGroupsGroupDnsConfigOptionOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupDnsConfigOptionInput` via:
//
//	GetContainerGroupsGroupDnsConfigOptionArgs{...}
type GetContainerGroupsGroupDnsConfigOptionInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupDnsConfigOptionOutput() GetContainerGroupsGroupDnsConfigOptionOutput
	ToGetContainerGroupsGroupDnsConfigOptionOutputWithContext(context.Context) GetContainerGroupsGroupDnsConfigOptionOutput
}

type GetContainerGroupsGroupDnsConfigOptionArgs struct {
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the variable.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetContainerGroupsGroupDnsConfigOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupDnsConfigOption)(nil)).Elem()
}

func (i GetContainerGroupsGroupDnsConfigOptionArgs) ToGetContainerGroupsGroupDnsConfigOptionOutput() GetContainerGroupsGroupDnsConfigOptionOutput {
	return i.ToGetContainerGroupsGroupDnsConfigOptionOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupDnsConfigOptionArgs) ToGetContainerGroupsGroupDnsConfigOptionOutputWithContext(ctx context.Context) GetContainerGroupsGroupDnsConfigOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupDnsConfigOptionOutput)
}

// GetContainerGroupsGroupDnsConfigOptionArrayInput is an input type that accepts GetContainerGroupsGroupDnsConfigOptionArray and GetContainerGroupsGroupDnsConfigOptionArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupDnsConfigOptionArrayInput` via:
//
//	GetContainerGroupsGroupDnsConfigOptionArray{ GetContainerGroupsGroupDnsConfigOptionArgs{...} }
type GetContainerGroupsGroupDnsConfigOptionArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupDnsConfigOptionArrayOutput() GetContainerGroupsGroupDnsConfigOptionArrayOutput
	ToGetContainerGroupsGroupDnsConfigOptionArrayOutputWithContext(context.Context) GetContainerGroupsGroupDnsConfigOptionArrayOutput
}

type GetContainerGroupsGroupDnsConfigOptionArray []GetContainerGroupsGroupDnsConfigOptionInput

func (GetContainerGroupsGroupDnsConfigOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupDnsConfigOption)(nil)).Elem()
}

func (i GetContainerGroupsGroupDnsConfigOptionArray) ToGetContainerGroupsGroupDnsConfigOptionArrayOutput() GetContainerGroupsGroupDnsConfigOptionArrayOutput {
	return i.ToGetContainerGroupsGroupDnsConfigOptionArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupDnsConfigOptionArray) ToGetContainerGroupsGroupDnsConfigOptionArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupDnsConfigOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupDnsConfigOptionArrayOutput)
}

type GetContainerGroupsGroupDnsConfigOptionOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupDnsConfigOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupDnsConfigOption)(nil)).Elem()
}

func (o GetContainerGroupsGroupDnsConfigOptionOutput) ToGetContainerGroupsGroupDnsConfigOptionOutput() GetContainerGroupsGroupDnsConfigOptionOutput {
	return o
}

func (o GetContainerGroupsGroupDnsConfigOptionOutput) ToGetContainerGroupsGroupDnsConfigOptionOutputWithContext(ctx context.Context) GetContainerGroupsGroupDnsConfigOptionOutput {
	return o
}

// The name of the volume.
func (o GetContainerGroupsGroupDnsConfigOptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupDnsConfigOption) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the variable.
func (o GetContainerGroupsGroupDnsConfigOptionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupDnsConfigOption) string { return v.Value }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupDnsConfigOptionArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupDnsConfigOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupDnsConfigOption)(nil)).Elem()
}

func (o GetContainerGroupsGroupDnsConfigOptionArrayOutput) ToGetContainerGroupsGroupDnsConfigOptionArrayOutput() GetContainerGroupsGroupDnsConfigOptionArrayOutput {
	return o
}

func (o GetContainerGroupsGroupDnsConfigOptionArrayOutput) ToGetContainerGroupsGroupDnsConfigOptionArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupDnsConfigOptionArrayOutput {
	return o
}

func (o GetContainerGroupsGroupDnsConfigOptionArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupDnsConfigOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupDnsConfigOption {
		return vs[0].([]GetContainerGroupsGroupDnsConfigOption)[vs[1].(int)]
	}).(GetContainerGroupsGroupDnsConfigOptionOutput)
}

type GetContainerGroupsGroupEciSecurityContext struct {
	// The system information.
	Sysctls []GetContainerGroupsGroupEciSecurityContextSysctl `pulumi:"sysctls"`
}

// GetContainerGroupsGroupEciSecurityContextInput is an input type that accepts GetContainerGroupsGroupEciSecurityContextArgs and GetContainerGroupsGroupEciSecurityContextOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupEciSecurityContextInput` via:
//
//	GetContainerGroupsGroupEciSecurityContextArgs{...}
type GetContainerGroupsGroupEciSecurityContextInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupEciSecurityContextOutput() GetContainerGroupsGroupEciSecurityContextOutput
	ToGetContainerGroupsGroupEciSecurityContextOutputWithContext(context.Context) GetContainerGroupsGroupEciSecurityContextOutput
}

type GetContainerGroupsGroupEciSecurityContextArgs struct {
	// The system information.
	Sysctls GetContainerGroupsGroupEciSecurityContextSysctlArrayInput `pulumi:"sysctls"`
}

func (GetContainerGroupsGroupEciSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupEciSecurityContext)(nil)).Elem()
}

func (i GetContainerGroupsGroupEciSecurityContextArgs) ToGetContainerGroupsGroupEciSecurityContextOutput() GetContainerGroupsGroupEciSecurityContextOutput {
	return i.ToGetContainerGroupsGroupEciSecurityContextOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupEciSecurityContextArgs) ToGetContainerGroupsGroupEciSecurityContextOutputWithContext(ctx context.Context) GetContainerGroupsGroupEciSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupEciSecurityContextOutput)
}

// GetContainerGroupsGroupEciSecurityContextArrayInput is an input type that accepts GetContainerGroupsGroupEciSecurityContextArray and GetContainerGroupsGroupEciSecurityContextArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupEciSecurityContextArrayInput` via:
//
//	GetContainerGroupsGroupEciSecurityContextArray{ GetContainerGroupsGroupEciSecurityContextArgs{...} }
type GetContainerGroupsGroupEciSecurityContextArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupEciSecurityContextArrayOutput() GetContainerGroupsGroupEciSecurityContextArrayOutput
	ToGetContainerGroupsGroupEciSecurityContextArrayOutputWithContext(context.Context) GetContainerGroupsGroupEciSecurityContextArrayOutput
}

type GetContainerGroupsGroupEciSecurityContextArray []GetContainerGroupsGroupEciSecurityContextInput

func (GetContainerGroupsGroupEciSecurityContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupEciSecurityContext)(nil)).Elem()
}

func (i GetContainerGroupsGroupEciSecurityContextArray) ToGetContainerGroupsGroupEciSecurityContextArrayOutput() GetContainerGroupsGroupEciSecurityContextArrayOutput {
	return i.ToGetContainerGroupsGroupEciSecurityContextArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupEciSecurityContextArray) ToGetContainerGroupsGroupEciSecurityContextArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupEciSecurityContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupEciSecurityContextArrayOutput)
}

type GetContainerGroupsGroupEciSecurityContextOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupEciSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupEciSecurityContext)(nil)).Elem()
}

func (o GetContainerGroupsGroupEciSecurityContextOutput) ToGetContainerGroupsGroupEciSecurityContextOutput() GetContainerGroupsGroupEciSecurityContextOutput {
	return o
}

func (o GetContainerGroupsGroupEciSecurityContextOutput) ToGetContainerGroupsGroupEciSecurityContextOutputWithContext(ctx context.Context) GetContainerGroupsGroupEciSecurityContextOutput {
	return o
}

// The system information.
func (o GetContainerGroupsGroupEciSecurityContextOutput) Sysctls() GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupEciSecurityContext) []GetContainerGroupsGroupEciSecurityContextSysctl {
		return v.Sysctls
	}).(GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput)
}

type GetContainerGroupsGroupEciSecurityContextArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupEciSecurityContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupEciSecurityContext)(nil)).Elem()
}

func (o GetContainerGroupsGroupEciSecurityContextArrayOutput) ToGetContainerGroupsGroupEciSecurityContextArrayOutput() GetContainerGroupsGroupEciSecurityContextArrayOutput {
	return o
}

func (o GetContainerGroupsGroupEciSecurityContextArrayOutput) ToGetContainerGroupsGroupEciSecurityContextArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupEciSecurityContextArrayOutput {
	return o
}

func (o GetContainerGroupsGroupEciSecurityContextArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupEciSecurityContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupEciSecurityContext {
		return vs[0].([]GetContainerGroupsGroupEciSecurityContext)[vs[1].(int)]
	}).(GetContainerGroupsGroupEciSecurityContextOutput)
}

type GetContainerGroupsGroupEciSecurityContextSysctl struct {
	// The name of the volume.
	Name string `pulumi:"name"`
	// The value of the variable.
	Value string `pulumi:"value"`
}

// GetContainerGroupsGroupEciSecurityContextSysctlInput is an input type that accepts GetContainerGroupsGroupEciSecurityContextSysctlArgs and GetContainerGroupsGroupEciSecurityContextSysctlOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupEciSecurityContextSysctlInput` via:
//
//	GetContainerGroupsGroupEciSecurityContextSysctlArgs{...}
type GetContainerGroupsGroupEciSecurityContextSysctlInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupEciSecurityContextSysctlOutput() GetContainerGroupsGroupEciSecurityContextSysctlOutput
	ToGetContainerGroupsGroupEciSecurityContextSysctlOutputWithContext(context.Context) GetContainerGroupsGroupEciSecurityContextSysctlOutput
}

type GetContainerGroupsGroupEciSecurityContextSysctlArgs struct {
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the variable.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetContainerGroupsGroupEciSecurityContextSysctlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupEciSecurityContextSysctl)(nil)).Elem()
}

func (i GetContainerGroupsGroupEciSecurityContextSysctlArgs) ToGetContainerGroupsGroupEciSecurityContextSysctlOutput() GetContainerGroupsGroupEciSecurityContextSysctlOutput {
	return i.ToGetContainerGroupsGroupEciSecurityContextSysctlOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupEciSecurityContextSysctlArgs) ToGetContainerGroupsGroupEciSecurityContextSysctlOutputWithContext(ctx context.Context) GetContainerGroupsGroupEciSecurityContextSysctlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupEciSecurityContextSysctlOutput)
}

// GetContainerGroupsGroupEciSecurityContextSysctlArrayInput is an input type that accepts GetContainerGroupsGroupEciSecurityContextSysctlArray and GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupEciSecurityContextSysctlArrayInput` via:
//
//	GetContainerGroupsGroupEciSecurityContextSysctlArray{ GetContainerGroupsGroupEciSecurityContextSysctlArgs{...} }
type GetContainerGroupsGroupEciSecurityContextSysctlArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupEciSecurityContextSysctlArrayOutput() GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput
	ToGetContainerGroupsGroupEciSecurityContextSysctlArrayOutputWithContext(context.Context) GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput
}

type GetContainerGroupsGroupEciSecurityContextSysctlArray []GetContainerGroupsGroupEciSecurityContextSysctlInput

func (GetContainerGroupsGroupEciSecurityContextSysctlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupEciSecurityContextSysctl)(nil)).Elem()
}

func (i GetContainerGroupsGroupEciSecurityContextSysctlArray) ToGetContainerGroupsGroupEciSecurityContextSysctlArrayOutput() GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput {
	return i.ToGetContainerGroupsGroupEciSecurityContextSysctlArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupEciSecurityContextSysctlArray) ToGetContainerGroupsGroupEciSecurityContextSysctlArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput)
}

type GetContainerGroupsGroupEciSecurityContextSysctlOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupEciSecurityContextSysctlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupEciSecurityContextSysctl)(nil)).Elem()
}

func (o GetContainerGroupsGroupEciSecurityContextSysctlOutput) ToGetContainerGroupsGroupEciSecurityContextSysctlOutput() GetContainerGroupsGroupEciSecurityContextSysctlOutput {
	return o
}

func (o GetContainerGroupsGroupEciSecurityContextSysctlOutput) ToGetContainerGroupsGroupEciSecurityContextSysctlOutputWithContext(ctx context.Context) GetContainerGroupsGroupEciSecurityContextSysctlOutput {
	return o
}

// The name of the volume.
func (o GetContainerGroupsGroupEciSecurityContextSysctlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupEciSecurityContextSysctl) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the variable.
func (o GetContainerGroupsGroupEciSecurityContextSysctlOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupEciSecurityContextSysctl) string { return v.Value }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupEciSecurityContextSysctl)(nil)).Elem()
}

func (o GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput) ToGetContainerGroupsGroupEciSecurityContextSysctlArrayOutput() GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput {
	return o
}

func (o GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput) ToGetContainerGroupsGroupEciSecurityContextSysctlArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput {
	return o
}

func (o GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupEciSecurityContextSysctlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupEciSecurityContextSysctl {
		return vs[0].([]GetContainerGroupsGroupEciSecurityContextSysctl)[vs[1].(int)]
	}).(GetContainerGroupsGroupEciSecurityContextSysctlOutput)
}

type GetContainerGroupsGroupEvent struct {
	// The number of events.
	Count int `pulumi:"count"`
	// The time when the event started.
	FirstTimestamp string `pulumi:"firstTimestamp"`
	// The time when the event ended.
	LastTimestamp string `pulumi:"lastTimestamp"`
	// The content of the event.
	Message string `pulumi:"message"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// The name of the event.
	Reason string `pulumi:"reason"`
	// The type of the volume. Currently, the following types of volumes are supported: EmptyDirVolume, NFSVolume, ConfigFileVolume, and FlexVolume.
	Type string `pulumi:"type"`
}

// GetContainerGroupsGroupEventInput is an input type that accepts GetContainerGroupsGroupEventArgs and GetContainerGroupsGroupEventOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupEventInput` via:
//
//	GetContainerGroupsGroupEventArgs{...}
type GetContainerGroupsGroupEventInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupEventOutput() GetContainerGroupsGroupEventOutput
	ToGetContainerGroupsGroupEventOutputWithContext(context.Context) GetContainerGroupsGroupEventOutput
}

type GetContainerGroupsGroupEventArgs struct {
	// The number of events.
	Count pulumi.IntInput `pulumi:"count"`
	// The time when the event started.
	FirstTimestamp pulumi.StringInput `pulumi:"firstTimestamp"`
	// The time when the event ended.
	LastTimestamp pulumi.StringInput `pulumi:"lastTimestamp"`
	// The content of the event.
	Message pulumi.StringInput `pulumi:"message"`
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the event.
	Reason pulumi.StringInput `pulumi:"reason"`
	// The type of the volume. Currently, the following types of volumes are supported: EmptyDirVolume, NFSVolume, ConfigFileVolume, and FlexVolume.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetContainerGroupsGroupEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupEvent)(nil)).Elem()
}

func (i GetContainerGroupsGroupEventArgs) ToGetContainerGroupsGroupEventOutput() GetContainerGroupsGroupEventOutput {
	return i.ToGetContainerGroupsGroupEventOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupEventArgs) ToGetContainerGroupsGroupEventOutputWithContext(ctx context.Context) GetContainerGroupsGroupEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupEventOutput)
}

// GetContainerGroupsGroupEventArrayInput is an input type that accepts GetContainerGroupsGroupEventArray and GetContainerGroupsGroupEventArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupEventArrayInput` via:
//
//	GetContainerGroupsGroupEventArray{ GetContainerGroupsGroupEventArgs{...} }
type GetContainerGroupsGroupEventArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupEventArrayOutput() GetContainerGroupsGroupEventArrayOutput
	ToGetContainerGroupsGroupEventArrayOutputWithContext(context.Context) GetContainerGroupsGroupEventArrayOutput
}

type GetContainerGroupsGroupEventArray []GetContainerGroupsGroupEventInput

func (GetContainerGroupsGroupEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupEvent)(nil)).Elem()
}

func (i GetContainerGroupsGroupEventArray) ToGetContainerGroupsGroupEventArrayOutput() GetContainerGroupsGroupEventArrayOutput {
	return i.ToGetContainerGroupsGroupEventArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupEventArray) ToGetContainerGroupsGroupEventArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupEventArrayOutput)
}

type GetContainerGroupsGroupEventOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupEvent)(nil)).Elem()
}

func (o GetContainerGroupsGroupEventOutput) ToGetContainerGroupsGroupEventOutput() GetContainerGroupsGroupEventOutput {
	return o
}

func (o GetContainerGroupsGroupEventOutput) ToGetContainerGroupsGroupEventOutputWithContext(ctx context.Context) GetContainerGroupsGroupEventOutput {
	return o
}

// The number of events.
func (o GetContainerGroupsGroupEventOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupEvent) int { return v.Count }).(pulumi.IntOutput)
}

// The time when the event started.
func (o GetContainerGroupsGroupEventOutput) FirstTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupEvent) string { return v.FirstTimestamp }).(pulumi.StringOutput)
}

// The time when the event ended.
func (o GetContainerGroupsGroupEventOutput) LastTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupEvent) string { return v.LastTimestamp }).(pulumi.StringOutput)
}

// The content of the event.
func (o GetContainerGroupsGroupEventOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupEvent) string { return v.Message }).(pulumi.StringOutput)
}

// The name of the volume.
func (o GetContainerGroupsGroupEventOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupEvent) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the event.
func (o GetContainerGroupsGroupEventOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupEvent) string { return v.Reason }).(pulumi.StringOutput)
}

// The type of the volume. Currently, the following types of volumes are supported: EmptyDirVolume, NFSVolume, ConfigFileVolume, and FlexVolume.
func (o GetContainerGroupsGroupEventOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupEvent) string { return v.Type }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupEventArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupEvent)(nil)).Elem()
}

func (o GetContainerGroupsGroupEventArrayOutput) ToGetContainerGroupsGroupEventArrayOutput() GetContainerGroupsGroupEventArrayOutput {
	return o
}

func (o GetContainerGroupsGroupEventArrayOutput) ToGetContainerGroupsGroupEventArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupEventArrayOutput {
	return o
}

func (o GetContainerGroupsGroupEventArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupEvent {
		return vs[0].([]GetContainerGroupsGroupEvent)[vs[1].(int)]
	}).(GetContainerGroupsGroupEventOutput)
}

type GetContainerGroupsGroupHostAlias struct {
	// The name of the host.
	Hostnames []string `pulumi:"hostnames"`
	// The IP address of the container.
	Ip string `pulumi:"ip"`
}

// GetContainerGroupsGroupHostAliasInput is an input type that accepts GetContainerGroupsGroupHostAliasArgs and GetContainerGroupsGroupHostAliasOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupHostAliasInput` via:
//
//	GetContainerGroupsGroupHostAliasArgs{...}
type GetContainerGroupsGroupHostAliasInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupHostAliasOutput() GetContainerGroupsGroupHostAliasOutput
	ToGetContainerGroupsGroupHostAliasOutputWithContext(context.Context) GetContainerGroupsGroupHostAliasOutput
}

type GetContainerGroupsGroupHostAliasArgs struct {
	// The name of the host.
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
	// The IP address of the container.
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (GetContainerGroupsGroupHostAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupHostAlias)(nil)).Elem()
}

func (i GetContainerGroupsGroupHostAliasArgs) ToGetContainerGroupsGroupHostAliasOutput() GetContainerGroupsGroupHostAliasOutput {
	return i.ToGetContainerGroupsGroupHostAliasOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupHostAliasArgs) ToGetContainerGroupsGroupHostAliasOutputWithContext(ctx context.Context) GetContainerGroupsGroupHostAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupHostAliasOutput)
}

// GetContainerGroupsGroupHostAliasArrayInput is an input type that accepts GetContainerGroupsGroupHostAliasArray and GetContainerGroupsGroupHostAliasArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupHostAliasArrayInput` via:
//
//	GetContainerGroupsGroupHostAliasArray{ GetContainerGroupsGroupHostAliasArgs{...} }
type GetContainerGroupsGroupHostAliasArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupHostAliasArrayOutput() GetContainerGroupsGroupHostAliasArrayOutput
	ToGetContainerGroupsGroupHostAliasArrayOutputWithContext(context.Context) GetContainerGroupsGroupHostAliasArrayOutput
}

type GetContainerGroupsGroupHostAliasArray []GetContainerGroupsGroupHostAliasInput

func (GetContainerGroupsGroupHostAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupHostAlias)(nil)).Elem()
}

func (i GetContainerGroupsGroupHostAliasArray) ToGetContainerGroupsGroupHostAliasArrayOutput() GetContainerGroupsGroupHostAliasArrayOutput {
	return i.ToGetContainerGroupsGroupHostAliasArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupHostAliasArray) ToGetContainerGroupsGroupHostAliasArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupHostAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupHostAliasArrayOutput)
}

type GetContainerGroupsGroupHostAliasOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupHostAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupHostAlias)(nil)).Elem()
}

func (o GetContainerGroupsGroupHostAliasOutput) ToGetContainerGroupsGroupHostAliasOutput() GetContainerGroupsGroupHostAliasOutput {
	return o
}

func (o GetContainerGroupsGroupHostAliasOutput) ToGetContainerGroupsGroupHostAliasOutputWithContext(ctx context.Context) GetContainerGroupsGroupHostAliasOutput {
	return o
}

// The name of the host.
func (o GetContainerGroupsGroupHostAliasOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupHostAlias) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// The IP address of the container.
func (o GetContainerGroupsGroupHostAliasOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupHostAlias) string { return v.Ip }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupHostAliasArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupHostAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupHostAlias)(nil)).Elem()
}

func (o GetContainerGroupsGroupHostAliasArrayOutput) ToGetContainerGroupsGroupHostAliasArrayOutput() GetContainerGroupsGroupHostAliasArrayOutput {
	return o
}

func (o GetContainerGroupsGroupHostAliasArrayOutput) ToGetContainerGroupsGroupHostAliasArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupHostAliasArrayOutput {
	return o
}

func (o GetContainerGroupsGroupHostAliasArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupHostAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupHostAlias {
		return vs[0].([]GetContainerGroupsGroupHostAlias)[vs[1].(int)]
	}).(GetContainerGroupsGroupHostAliasOutput)
}

type GetContainerGroupsGroupInitContainer struct {
	// The arguments passed to the commands.
	Args []string `pulumi:"args"`
	// The commands run by the container.
	Commands []string `pulumi:"commands"`
	// The amount of CPU resources allocated to the container.
	Cpu float64 `pulumi:"cpu"`
	// The environment variables.
	EnvironmentVars []GetContainerGroupsGroupInitContainerEnvironmentVar `pulumi:"environmentVars"`
	// The amount of GPU resources allocated to the container.
	Gpu int `pulumi:"gpu"`
	// The image of the container.
	Image string `pulumi:"image"`
	// The policy for pulling an image.
	ImagePullPolicy string `pulumi:"imagePullPolicy"`
	// The amount of memory resources allocated to the container group.
	Memory float64 `pulumi:"memory"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// The exposed ports and protocols. Maximum: `100`.
	Ports []GetContainerGroupsGroupInitContainerPort `pulumi:"ports"`
	// Indicates whether the container is ready.
	Ready bool `pulumi:"ready"`
	// The number of times that the container has restarted.
	RestartCount int `pulumi:"restartCount"`
	// The list of volumes mounted to the container.
	VolumeMounts []GetContainerGroupsGroupInitContainerVolumeMount `pulumi:"volumeMounts"`
	// The working directory of the container.
	WorkingDir string `pulumi:"workingDir"`
}

// GetContainerGroupsGroupInitContainerInput is an input type that accepts GetContainerGroupsGroupInitContainerArgs and GetContainerGroupsGroupInitContainerOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupInitContainerInput` via:
//
//	GetContainerGroupsGroupInitContainerArgs{...}
type GetContainerGroupsGroupInitContainerInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupInitContainerOutput() GetContainerGroupsGroupInitContainerOutput
	ToGetContainerGroupsGroupInitContainerOutputWithContext(context.Context) GetContainerGroupsGroupInitContainerOutput
}

type GetContainerGroupsGroupInitContainerArgs struct {
	// The arguments passed to the commands.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// The commands run by the container.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// The amount of CPU resources allocated to the container.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The environment variables.
	EnvironmentVars GetContainerGroupsGroupInitContainerEnvironmentVarArrayInput `pulumi:"environmentVars"`
	// The amount of GPU resources allocated to the container.
	Gpu pulumi.IntInput `pulumi:"gpu"`
	// The image of the container.
	Image pulumi.StringInput `pulumi:"image"`
	// The policy for pulling an image.
	ImagePullPolicy pulumi.StringInput `pulumi:"imagePullPolicy"`
	// The amount of memory resources allocated to the container group.
	Memory pulumi.Float64Input `pulumi:"memory"`
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The exposed ports and protocols. Maximum: `100`.
	Ports GetContainerGroupsGroupInitContainerPortArrayInput `pulumi:"ports"`
	// Indicates whether the container is ready.
	Ready pulumi.BoolInput `pulumi:"ready"`
	// The number of times that the container has restarted.
	RestartCount pulumi.IntInput `pulumi:"restartCount"`
	// The list of volumes mounted to the container.
	VolumeMounts GetContainerGroupsGroupInitContainerVolumeMountArrayInput `pulumi:"volumeMounts"`
	// The working directory of the container.
	WorkingDir pulumi.StringInput `pulumi:"workingDir"`
}

func (GetContainerGroupsGroupInitContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupInitContainer)(nil)).Elem()
}

func (i GetContainerGroupsGroupInitContainerArgs) ToGetContainerGroupsGroupInitContainerOutput() GetContainerGroupsGroupInitContainerOutput {
	return i.ToGetContainerGroupsGroupInitContainerOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupInitContainerArgs) ToGetContainerGroupsGroupInitContainerOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupInitContainerOutput)
}

// GetContainerGroupsGroupInitContainerArrayInput is an input type that accepts GetContainerGroupsGroupInitContainerArray and GetContainerGroupsGroupInitContainerArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupInitContainerArrayInput` via:
//
//	GetContainerGroupsGroupInitContainerArray{ GetContainerGroupsGroupInitContainerArgs{...} }
type GetContainerGroupsGroupInitContainerArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupInitContainerArrayOutput() GetContainerGroupsGroupInitContainerArrayOutput
	ToGetContainerGroupsGroupInitContainerArrayOutputWithContext(context.Context) GetContainerGroupsGroupInitContainerArrayOutput
}

type GetContainerGroupsGroupInitContainerArray []GetContainerGroupsGroupInitContainerInput

func (GetContainerGroupsGroupInitContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupInitContainer)(nil)).Elem()
}

func (i GetContainerGroupsGroupInitContainerArray) ToGetContainerGroupsGroupInitContainerArrayOutput() GetContainerGroupsGroupInitContainerArrayOutput {
	return i.ToGetContainerGroupsGroupInitContainerArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupInitContainerArray) ToGetContainerGroupsGroupInitContainerArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupInitContainerArrayOutput)
}

type GetContainerGroupsGroupInitContainerOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupInitContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupInitContainer)(nil)).Elem()
}

func (o GetContainerGroupsGroupInitContainerOutput) ToGetContainerGroupsGroupInitContainerOutput() GetContainerGroupsGroupInitContainerOutput {
	return o
}

func (o GetContainerGroupsGroupInitContainerOutput) ToGetContainerGroupsGroupInitContainerOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerOutput {
	return o
}

// The arguments passed to the commands.
func (o GetContainerGroupsGroupInitContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// The commands run by the container.
func (o GetContainerGroupsGroupInitContainerOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// The amount of CPU resources allocated to the container.
func (o GetContainerGroupsGroupInitContainerOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The environment variables.
func (o GetContainerGroupsGroupInitContainerOutput) EnvironmentVars() GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) []GetContainerGroupsGroupInitContainerEnvironmentVar {
		return v.EnvironmentVars
	}).(GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput)
}

// The amount of GPU resources allocated to the container.
func (o GetContainerGroupsGroupInitContainerOutput) Gpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) int { return v.Gpu }).(pulumi.IntOutput)
}

// The image of the container.
func (o GetContainerGroupsGroupInitContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) string { return v.Image }).(pulumi.StringOutput)
}

// The policy for pulling an image.
func (o GetContainerGroupsGroupInitContainerOutput) ImagePullPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) string { return v.ImagePullPolicy }).(pulumi.StringOutput)
}

// The amount of memory resources allocated to the container group.
func (o GetContainerGroupsGroupInitContainerOutput) Memory() pulumi.Float64Output {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) float64 { return v.Memory }).(pulumi.Float64Output)
}

// The name of the volume.
func (o GetContainerGroupsGroupInitContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) string { return v.Name }).(pulumi.StringOutput)
}

// The exposed ports and protocols. Maximum: `100`.
func (o GetContainerGroupsGroupInitContainerOutput) Ports() GetContainerGroupsGroupInitContainerPortArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) []GetContainerGroupsGroupInitContainerPort {
		return v.Ports
	}).(GetContainerGroupsGroupInitContainerPortArrayOutput)
}

// Indicates whether the container is ready.
func (o GetContainerGroupsGroupInitContainerOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) bool { return v.Ready }).(pulumi.BoolOutput)
}

// The number of times that the container has restarted.
func (o GetContainerGroupsGroupInitContainerOutput) RestartCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) int { return v.RestartCount }).(pulumi.IntOutput)
}

// The list of volumes mounted to the container.
func (o GetContainerGroupsGroupInitContainerOutput) VolumeMounts() GetContainerGroupsGroupInitContainerVolumeMountArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) []GetContainerGroupsGroupInitContainerVolumeMount {
		return v.VolumeMounts
	}).(GetContainerGroupsGroupInitContainerVolumeMountArrayOutput)
}

// The working directory of the container.
func (o GetContainerGroupsGroupInitContainerOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainer) string { return v.WorkingDir }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupInitContainerArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupInitContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupInitContainer)(nil)).Elem()
}

func (o GetContainerGroupsGroupInitContainerArrayOutput) ToGetContainerGroupsGroupInitContainerArrayOutput() GetContainerGroupsGroupInitContainerArrayOutput {
	return o
}

func (o GetContainerGroupsGroupInitContainerArrayOutput) ToGetContainerGroupsGroupInitContainerArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerArrayOutput {
	return o
}

func (o GetContainerGroupsGroupInitContainerArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupInitContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupInitContainer {
		return vs[0].([]GetContainerGroupsGroupInitContainer)[vs[1].(int)]
	}).(GetContainerGroupsGroupInitContainerOutput)
}

type GetContainerGroupsGroupInitContainerEnvironmentVar struct {
	// The name of the variable.
	Key string `pulumi:"key"`
	// The value of the variable.
	Value string `pulumi:"value"`
}

// GetContainerGroupsGroupInitContainerEnvironmentVarInput is an input type that accepts GetContainerGroupsGroupInitContainerEnvironmentVarArgs and GetContainerGroupsGroupInitContainerEnvironmentVarOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupInitContainerEnvironmentVarInput` via:
//
//	GetContainerGroupsGroupInitContainerEnvironmentVarArgs{...}
type GetContainerGroupsGroupInitContainerEnvironmentVarInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupInitContainerEnvironmentVarOutput() GetContainerGroupsGroupInitContainerEnvironmentVarOutput
	ToGetContainerGroupsGroupInitContainerEnvironmentVarOutputWithContext(context.Context) GetContainerGroupsGroupInitContainerEnvironmentVarOutput
}

type GetContainerGroupsGroupInitContainerEnvironmentVarArgs struct {
	// The name of the variable.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the variable.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetContainerGroupsGroupInitContainerEnvironmentVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupInitContainerEnvironmentVar)(nil)).Elem()
}

func (i GetContainerGroupsGroupInitContainerEnvironmentVarArgs) ToGetContainerGroupsGroupInitContainerEnvironmentVarOutput() GetContainerGroupsGroupInitContainerEnvironmentVarOutput {
	return i.ToGetContainerGroupsGroupInitContainerEnvironmentVarOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupInitContainerEnvironmentVarArgs) ToGetContainerGroupsGroupInitContainerEnvironmentVarOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerEnvironmentVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupInitContainerEnvironmentVarOutput)
}

// GetContainerGroupsGroupInitContainerEnvironmentVarArrayInput is an input type that accepts GetContainerGroupsGroupInitContainerEnvironmentVarArray and GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupInitContainerEnvironmentVarArrayInput` via:
//
//	GetContainerGroupsGroupInitContainerEnvironmentVarArray{ GetContainerGroupsGroupInitContainerEnvironmentVarArgs{...} }
type GetContainerGroupsGroupInitContainerEnvironmentVarArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput() GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput
	ToGetContainerGroupsGroupInitContainerEnvironmentVarArrayOutputWithContext(context.Context) GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput
}

type GetContainerGroupsGroupInitContainerEnvironmentVarArray []GetContainerGroupsGroupInitContainerEnvironmentVarInput

func (GetContainerGroupsGroupInitContainerEnvironmentVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupInitContainerEnvironmentVar)(nil)).Elem()
}

func (i GetContainerGroupsGroupInitContainerEnvironmentVarArray) ToGetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput() GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput {
	return i.ToGetContainerGroupsGroupInitContainerEnvironmentVarArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupInitContainerEnvironmentVarArray) ToGetContainerGroupsGroupInitContainerEnvironmentVarArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput)
}

type GetContainerGroupsGroupInitContainerEnvironmentVarOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupInitContainerEnvironmentVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupInitContainerEnvironmentVar)(nil)).Elem()
}

func (o GetContainerGroupsGroupInitContainerEnvironmentVarOutput) ToGetContainerGroupsGroupInitContainerEnvironmentVarOutput() GetContainerGroupsGroupInitContainerEnvironmentVarOutput {
	return o
}

func (o GetContainerGroupsGroupInitContainerEnvironmentVarOutput) ToGetContainerGroupsGroupInitContainerEnvironmentVarOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerEnvironmentVarOutput {
	return o
}

// The name of the variable.
func (o GetContainerGroupsGroupInitContainerEnvironmentVarOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainerEnvironmentVar) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the variable.
func (o GetContainerGroupsGroupInitContainerEnvironmentVarOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainerEnvironmentVar) string { return v.Value }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupInitContainerEnvironmentVar)(nil)).Elem()
}

func (o GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput) ToGetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput() GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput {
	return o
}

func (o GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput) ToGetContainerGroupsGroupInitContainerEnvironmentVarArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput {
	return o
}

func (o GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupInitContainerEnvironmentVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupInitContainerEnvironmentVar {
		return vs[0].([]GetContainerGroupsGroupInitContainerEnvironmentVar)[vs[1].(int)]
	}).(GetContainerGroupsGroupInitContainerEnvironmentVarOutput)
}

type GetContainerGroupsGroupInitContainerPort struct {
	// The port number. Valid values: 1 to 65535.
	Port int `pulumi:"port"`
	// Valid values: `TCP` and `UDP`.
	Protocol string `pulumi:"protocol"`
}

// GetContainerGroupsGroupInitContainerPortInput is an input type that accepts GetContainerGroupsGroupInitContainerPortArgs and GetContainerGroupsGroupInitContainerPortOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupInitContainerPortInput` via:
//
//	GetContainerGroupsGroupInitContainerPortArgs{...}
type GetContainerGroupsGroupInitContainerPortInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupInitContainerPortOutput() GetContainerGroupsGroupInitContainerPortOutput
	ToGetContainerGroupsGroupInitContainerPortOutputWithContext(context.Context) GetContainerGroupsGroupInitContainerPortOutput
}

type GetContainerGroupsGroupInitContainerPortArgs struct {
	// The port number. Valid values: 1 to 65535.
	Port pulumi.IntInput `pulumi:"port"`
	// Valid values: `TCP` and `UDP`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetContainerGroupsGroupInitContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupInitContainerPort)(nil)).Elem()
}

func (i GetContainerGroupsGroupInitContainerPortArgs) ToGetContainerGroupsGroupInitContainerPortOutput() GetContainerGroupsGroupInitContainerPortOutput {
	return i.ToGetContainerGroupsGroupInitContainerPortOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupInitContainerPortArgs) ToGetContainerGroupsGroupInitContainerPortOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupInitContainerPortOutput)
}

// GetContainerGroupsGroupInitContainerPortArrayInput is an input type that accepts GetContainerGroupsGroupInitContainerPortArray and GetContainerGroupsGroupInitContainerPortArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupInitContainerPortArrayInput` via:
//
//	GetContainerGroupsGroupInitContainerPortArray{ GetContainerGroupsGroupInitContainerPortArgs{...} }
type GetContainerGroupsGroupInitContainerPortArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupInitContainerPortArrayOutput() GetContainerGroupsGroupInitContainerPortArrayOutput
	ToGetContainerGroupsGroupInitContainerPortArrayOutputWithContext(context.Context) GetContainerGroupsGroupInitContainerPortArrayOutput
}

type GetContainerGroupsGroupInitContainerPortArray []GetContainerGroupsGroupInitContainerPortInput

func (GetContainerGroupsGroupInitContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupInitContainerPort)(nil)).Elem()
}

func (i GetContainerGroupsGroupInitContainerPortArray) ToGetContainerGroupsGroupInitContainerPortArrayOutput() GetContainerGroupsGroupInitContainerPortArrayOutput {
	return i.ToGetContainerGroupsGroupInitContainerPortArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupInitContainerPortArray) ToGetContainerGroupsGroupInitContainerPortArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupInitContainerPortArrayOutput)
}

type GetContainerGroupsGroupInitContainerPortOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupInitContainerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupInitContainerPort)(nil)).Elem()
}

func (o GetContainerGroupsGroupInitContainerPortOutput) ToGetContainerGroupsGroupInitContainerPortOutput() GetContainerGroupsGroupInitContainerPortOutput {
	return o
}

func (o GetContainerGroupsGroupInitContainerPortOutput) ToGetContainerGroupsGroupInitContainerPortOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerPortOutput {
	return o
}

// The port number. Valid values: 1 to 65535.
func (o GetContainerGroupsGroupInitContainerPortOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainerPort) int { return v.Port }).(pulumi.IntOutput)
}

// Valid values: `TCP` and `UDP`.
func (o GetContainerGroupsGroupInitContainerPortOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainerPort) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupInitContainerPortArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupInitContainerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupInitContainerPort)(nil)).Elem()
}

func (o GetContainerGroupsGroupInitContainerPortArrayOutput) ToGetContainerGroupsGroupInitContainerPortArrayOutput() GetContainerGroupsGroupInitContainerPortArrayOutput {
	return o
}

func (o GetContainerGroupsGroupInitContainerPortArrayOutput) ToGetContainerGroupsGroupInitContainerPortArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerPortArrayOutput {
	return o
}

func (o GetContainerGroupsGroupInitContainerPortArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupInitContainerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupInitContainerPort {
		return vs[0].([]GetContainerGroupsGroupInitContainerPort)[vs[1].(int)]
	}).(GetContainerGroupsGroupInitContainerPortOutput)
}

type GetContainerGroupsGroupInitContainerVolumeMount struct {
	// The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
	MountPath string `pulumi:"mountPath"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// Default value: `false`.
	ReadOnly bool `pulumi:"readOnly"`
}

// GetContainerGroupsGroupInitContainerVolumeMountInput is an input type that accepts GetContainerGroupsGroupInitContainerVolumeMountArgs and GetContainerGroupsGroupInitContainerVolumeMountOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupInitContainerVolumeMountInput` via:
//
//	GetContainerGroupsGroupInitContainerVolumeMountArgs{...}
type GetContainerGroupsGroupInitContainerVolumeMountInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupInitContainerVolumeMountOutput() GetContainerGroupsGroupInitContainerVolumeMountOutput
	ToGetContainerGroupsGroupInitContainerVolumeMountOutputWithContext(context.Context) GetContainerGroupsGroupInitContainerVolumeMountOutput
}

type GetContainerGroupsGroupInitContainerVolumeMountArgs struct {
	// The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// Default value: `false`.
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`
}

func (GetContainerGroupsGroupInitContainerVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupInitContainerVolumeMount)(nil)).Elem()
}

func (i GetContainerGroupsGroupInitContainerVolumeMountArgs) ToGetContainerGroupsGroupInitContainerVolumeMountOutput() GetContainerGroupsGroupInitContainerVolumeMountOutput {
	return i.ToGetContainerGroupsGroupInitContainerVolumeMountOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupInitContainerVolumeMountArgs) ToGetContainerGroupsGroupInitContainerVolumeMountOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupInitContainerVolumeMountOutput)
}

// GetContainerGroupsGroupInitContainerVolumeMountArrayInput is an input type that accepts GetContainerGroupsGroupInitContainerVolumeMountArray and GetContainerGroupsGroupInitContainerVolumeMountArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupInitContainerVolumeMountArrayInput` via:
//
//	GetContainerGroupsGroupInitContainerVolumeMountArray{ GetContainerGroupsGroupInitContainerVolumeMountArgs{...} }
type GetContainerGroupsGroupInitContainerVolumeMountArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupInitContainerVolumeMountArrayOutput() GetContainerGroupsGroupInitContainerVolumeMountArrayOutput
	ToGetContainerGroupsGroupInitContainerVolumeMountArrayOutputWithContext(context.Context) GetContainerGroupsGroupInitContainerVolumeMountArrayOutput
}

type GetContainerGroupsGroupInitContainerVolumeMountArray []GetContainerGroupsGroupInitContainerVolumeMountInput

func (GetContainerGroupsGroupInitContainerVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupInitContainerVolumeMount)(nil)).Elem()
}

func (i GetContainerGroupsGroupInitContainerVolumeMountArray) ToGetContainerGroupsGroupInitContainerVolumeMountArrayOutput() GetContainerGroupsGroupInitContainerVolumeMountArrayOutput {
	return i.ToGetContainerGroupsGroupInitContainerVolumeMountArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupInitContainerVolumeMountArray) ToGetContainerGroupsGroupInitContainerVolumeMountArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupInitContainerVolumeMountArrayOutput)
}

type GetContainerGroupsGroupInitContainerVolumeMountOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupInitContainerVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupInitContainerVolumeMount)(nil)).Elem()
}

func (o GetContainerGroupsGroupInitContainerVolumeMountOutput) ToGetContainerGroupsGroupInitContainerVolumeMountOutput() GetContainerGroupsGroupInitContainerVolumeMountOutput {
	return o
}

func (o GetContainerGroupsGroupInitContainerVolumeMountOutput) ToGetContainerGroupsGroupInitContainerVolumeMountOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerVolumeMountOutput {
	return o
}

// The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
func (o GetContainerGroupsGroupInitContainerVolumeMountOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainerVolumeMount) string { return v.MountPath }).(pulumi.StringOutput)
}

// The name of the volume.
func (o GetContainerGroupsGroupInitContainerVolumeMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainerVolumeMount) string { return v.Name }).(pulumi.StringOutput)
}

// Default value: `false`.
func (o GetContainerGroupsGroupInitContainerVolumeMountOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupInitContainerVolumeMount) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

type GetContainerGroupsGroupInitContainerVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupInitContainerVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupInitContainerVolumeMount)(nil)).Elem()
}

func (o GetContainerGroupsGroupInitContainerVolumeMountArrayOutput) ToGetContainerGroupsGroupInitContainerVolumeMountArrayOutput() GetContainerGroupsGroupInitContainerVolumeMountArrayOutput {
	return o
}

func (o GetContainerGroupsGroupInitContainerVolumeMountArrayOutput) ToGetContainerGroupsGroupInitContainerVolumeMountArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupInitContainerVolumeMountArrayOutput {
	return o
}

func (o GetContainerGroupsGroupInitContainerVolumeMountArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupInitContainerVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupInitContainerVolumeMount {
		return vs[0].([]GetContainerGroupsGroupInitContainerVolumeMount)[vs[1].(int)]
	}).(GetContainerGroupsGroupInitContainerVolumeMountOutput)
}

type GetContainerGroupsGroupVolume struct {
	// The list of configuration file paths.
	ConfigFileVolumeConfigFileToPaths []GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPath `pulumi:"configFileVolumeConfigFileToPaths"`
	// The ID of DiskVolume.
	DiskVolumeDiskId string `pulumi:"diskVolumeDiskId"`
	// The type of DiskVolume.
	DiskVolumeFsType string `pulumi:"diskVolumeFsType"`
	// The name of the FlexVolume driver.
	FlexVolumeDriver string `pulumi:"flexVolumeDriver"`
	// The type of the mounted file system. The default value is determined by the script of FlexVolume.
	FlexVolumeFsType string `pulumi:"flexVolumeFsType"`
	// The list of FlexVolume objects.
	FlexVolumeOptions string `pulumi:"flexVolumeOptions"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// The path to the NFS volume.
	NfsVolumePath string `pulumi:"nfsVolumePath"`
	// Default value: `false`.
	NfsVolumeReadOnly bool `pulumi:"nfsVolumeReadOnly"`
	// The address of the NFS server.
	NfsVolumeServer string `pulumi:"nfsVolumeServer"`
	// The type of the volume. Currently, the following types of volumes are supported: EmptyDirVolume, NFSVolume, ConfigFileVolume, and FlexVolume.
	Type string `pulumi:"type"`
}

// GetContainerGroupsGroupVolumeInput is an input type that accepts GetContainerGroupsGroupVolumeArgs and GetContainerGroupsGroupVolumeOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupVolumeInput` via:
//
//	GetContainerGroupsGroupVolumeArgs{...}
type GetContainerGroupsGroupVolumeInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupVolumeOutput() GetContainerGroupsGroupVolumeOutput
	ToGetContainerGroupsGroupVolumeOutputWithContext(context.Context) GetContainerGroupsGroupVolumeOutput
}

type GetContainerGroupsGroupVolumeArgs struct {
	// The list of configuration file paths.
	ConfigFileVolumeConfigFileToPaths GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayInput `pulumi:"configFileVolumeConfigFileToPaths"`
	// The ID of DiskVolume.
	DiskVolumeDiskId pulumi.StringInput `pulumi:"diskVolumeDiskId"`
	// The type of DiskVolume.
	DiskVolumeFsType pulumi.StringInput `pulumi:"diskVolumeFsType"`
	// The name of the FlexVolume driver.
	FlexVolumeDriver pulumi.StringInput `pulumi:"flexVolumeDriver"`
	// The type of the mounted file system. The default value is determined by the script of FlexVolume.
	FlexVolumeFsType pulumi.StringInput `pulumi:"flexVolumeFsType"`
	// The list of FlexVolume objects.
	FlexVolumeOptions pulumi.StringInput `pulumi:"flexVolumeOptions"`
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The path to the NFS volume.
	NfsVolumePath pulumi.StringInput `pulumi:"nfsVolumePath"`
	// Default value: `false`.
	NfsVolumeReadOnly pulumi.BoolInput `pulumi:"nfsVolumeReadOnly"`
	// The address of the NFS server.
	NfsVolumeServer pulumi.StringInput `pulumi:"nfsVolumeServer"`
	// The type of the volume. Currently, the following types of volumes are supported: EmptyDirVolume, NFSVolume, ConfigFileVolume, and FlexVolume.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetContainerGroupsGroupVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupVolume)(nil)).Elem()
}

func (i GetContainerGroupsGroupVolumeArgs) ToGetContainerGroupsGroupVolumeOutput() GetContainerGroupsGroupVolumeOutput {
	return i.ToGetContainerGroupsGroupVolumeOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupVolumeArgs) ToGetContainerGroupsGroupVolumeOutputWithContext(ctx context.Context) GetContainerGroupsGroupVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupVolumeOutput)
}

// GetContainerGroupsGroupVolumeArrayInput is an input type that accepts GetContainerGroupsGroupVolumeArray and GetContainerGroupsGroupVolumeArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupVolumeArrayInput` via:
//
//	GetContainerGroupsGroupVolumeArray{ GetContainerGroupsGroupVolumeArgs{...} }
type GetContainerGroupsGroupVolumeArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupVolumeArrayOutput() GetContainerGroupsGroupVolumeArrayOutput
	ToGetContainerGroupsGroupVolumeArrayOutputWithContext(context.Context) GetContainerGroupsGroupVolumeArrayOutput
}

type GetContainerGroupsGroupVolumeArray []GetContainerGroupsGroupVolumeInput

func (GetContainerGroupsGroupVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupVolume)(nil)).Elem()
}

func (i GetContainerGroupsGroupVolumeArray) ToGetContainerGroupsGroupVolumeArrayOutput() GetContainerGroupsGroupVolumeArrayOutput {
	return i.ToGetContainerGroupsGroupVolumeArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupVolumeArray) ToGetContainerGroupsGroupVolumeArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupVolumeArrayOutput)
}

type GetContainerGroupsGroupVolumeOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupVolume)(nil)).Elem()
}

func (o GetContainerGroupsGroupVolumeOutput) ToGetContainerGroupsGroupVolumeOutput() GetContainerGroupsGroupVolumeOutput {
	return o
}

func (o GetContainerGroupsGroupVolumeOutput) ToGetContainerGroupsGroupVolumeOutputWithContext(ctx context.Context) GetContainerGroupsGroupVolumeOutput {
	return o
}

// The list of configuration file paths.
func (o GetContainerGroupsGroupVolumeOutput) ConfigFileVolumeConfigFileToPaths() GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolume) []GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPath {
		return v.ConfigFileVolumeConfigFileToPaths
	}).(GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput)
}

// The ID of DiskVolume.
func (o GetContainerGroupsGroupVolumeOutput) DiskVolumeDiskId() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolume) string { return v.DiskVolumeDiskId }).(pulumi.StringOutput)
}

// The type of DiskVolume.
func (o GetContainerGroupsGroupVolumeOutput) DiskVolumeFsType() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolume) string { return v.DiskVolumeFsType }).(pulumi.StringOutput)
}

// The name of the FlexVolume driver.
func (o GetContainerGroupsGroupVolumeOutput) FlexVolumeDriver() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolume) string { return v.FlexVolumeDriver }).(pulumi.StringOutput)
}

// The type of the mounted file system. The default value is determined by the script of FlexVolume.
func (o GetContainerGroupsGroupVolumeOutput) FlexVolumeFsType() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolume) string { return v.FlexVolumeFsType }).(pulumi.StringOutput)
}

// The list of FlexVolume objects.
func (o GetContainerGroupsGroupVolumeOutput) FlexVolumeOptions() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolume) string { return v.FlexVolumeOptions }).(pulumi.StringOutput)
}

// The name of the volume.
func (o GetContainerGroupsGroupVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolume) string { return v.Name }).(pulumi.StringOutput)
}

// The path to the NFS volume.
func (o GetContainerGroupsGroupVolumeOutput) NfsVolumePath() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolume) string { return v.NfsVolumePath }).(pulumi.StringOutput)
}

// Default value: `false`.
func (o GetContainerGroupsGroupVolumeOutput) NfsVolumeReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolume) bool { return v.NfsVolumeReadOnly }).(pulumi.BoolOutput)
}

// The address of the NFS server.
func (o GetContainerGroupsGroupVolumeOutput) NfsVolumeServer() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolume) string { return v.NfsVolumeServer }).(pulumi.StringOutput)
}

// The type of the volume. Currently, the following types of volumes are supported: EmptyDirVolume, NFSVolume, ConfigFileVolume, and FlexVolume.
func (o GetContainerGroupsGroupVolumeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolume) string { return v.Type }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupVolume)(nil)).Elem()
}

func (o GetContainerGroupsGroupVolumeArrayOutput) ToGetContainerGroupsGroupVolumeArrayOutput() GetContainerGroupsGroupVolumeArrayOutput {
	return o
}

func (o GetContainerGroupsGroupVolumeArrayOutput) ToGetContainerGroupsGroupVolumeArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupVolumeArrayOutput {
	return o
}

func (o GetContainerGroupsGroupVolumeArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupVolume {
		return vs[0].([]GetContainerGroupsGroupVolume)[vs[1].(int)]
	}).(GetContainerGroupsGroupVolumeOutput)
}

type GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPath struct {
	// The content of the configuration file. Maximum size: 32 KB.
	Content string `pulumi:"content"`
	// The relative file path.
	Path string `pulumi:"path"`
}

// GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathInput is an input type that accepts GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArgs and GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathInput` via:
//
//	GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArgs{...}
type GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput() GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput
	ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutputWithContext(context.Context) GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput
}

type GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArgs struct {
	// The content of the configuration file. Maximum size: 32 KB.
	Content pulumi.StringInput `pulumi:"content"`
	// The relative file path.
	Path pulumi.StringInput `pulumi:"path"`
}

func (GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPath)(nil)).Elem()
}

func (i GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArgs) ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput() GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput {
	return i.ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArgs) ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutputWithContext(ctx context.Context) GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput)
}

// GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayInput is an input type that accepts GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArray and GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput values.
// You can construct a concrete instance of `GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayInput` via:
//
//	GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArray{ GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArgs{...} }
type GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayInput interface {
	pulumi.Input

	ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput() GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput
	ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutputWithContext(context.Context) GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput
}

type GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArray []GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathInput

func (GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPath)(nil)).Elem()
}

func (i GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArray) ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput() GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput {
	return i.ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutputWithContext(context.Background())
}

func (i GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArray) ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput)
}

type GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPath)(nil)).Elem()
}

func (o GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput) ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput() GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput {
	return o
}

func (o GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput) ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutputWithContext(ctx context.Context) GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput {
	return o
}

// The content of the configuration file. Maximum size: 32 KB.
func (o GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPath) string { return v.Content }).(pulumi.StringOutput)
}

// The relative file path.
func (o GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPath) string { return v.Path }).(pulumi.StringOutput)
}

type GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput struct{ *pulumi.OutputState }

func (GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPath)(nil)).Elem()
}

func (o GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput) ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput() GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput {
	return o
}

func (o GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput) ToGetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutputWithContext(ctx context.Context) GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput {
	return o
}

func (o GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput) Index(i pulumi.IntInput) GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPath {
		return vs[0].([]GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPath)[vs[1].(int)]
	}).(GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput)
}

type GetImageCachesCach struct {
	// The id of container group.
	ContainerGroupId string `pulumi:"containerGroupId"`
	// Image cache pulls image event information.
	Events []GetImageCachesCachEvent `pulumi:"events"`
	// The time of expired.
	ExpireDateTime string `pulumi:"expireDateTime"`
	// The ID of the ECI Image Cache.
	Id string `pulumi:"id"`
	// The id of the ECI Image Cache.
	ImageCacheId string `pulumi:"imageCacheId"`
	// The name of ECI Image Cache.
	ImageCacheName string `pulumi:"imageCacheName"`
	// The list of cached images.
	Images []string `pulumi:"images"`
	// The progress of ECI Image Cache.
	Progress string `pulumi:"progress"`
	// The id of snapshot.
	SnapshotId string `pulumi:"snapshotId"`
	// The status of ECI Image Cache.
	Status string `pulumi:"status"`
}

// GetImageCachesCachInput is an input type that accepts GetImageCachesCachArgs and GetImageCachesCachOutput values.
// You can construct a concrete instance of `GetImageCachesCachInput` via:
//
//	GetImageCachesCachArgs{...}
type GetImageCachesCachInput interface {
	pulumi.Input

	ToGetImageCachesCachOutput() GetImageCachesCachOutput
	ToGetImageCachesCachOutputWithContext(context.Context) GetImageCachesCachOutput
}

type GetImageCachesCachArgs struct {
	// The id of container group.
	ContainerGroupId pulumi.StringInput `pulumi:"containerGroupId"`
	// Image cache pulls image event information.
	Events GetImageCachesCachEventArrayInput `pulumi:"events"`
	// The time of expired.
	ExpireDateTime pulumi.StringInput `pulumi:"expireDateTime"`
	// The ID of the ECI Image Cache.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the ECI Image Cache.
	ImageCacheId pulumi.StringInput `pulumi:"imageCacheId"`
	// The name of ECI Image Cache.
	ImageCacheName pulumi.StringInput `pulumi:"imageCacheName"`
	// The list of cached images.
	Images pulumi.StringArrayInput `pulumi:"images"`
	// The progress of ECI Image Cache.
	Progress pulumi.StringInput `pulumi:"progress"`
	// The id of snapshot.
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
	// The status of ECI Image Cache.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetImageCachesCachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageCachesCach)(nil)).Elem()
}

func (i GetImageCachesCachArgs) ToGetImageCachesCachOutput() GetImageCachesCachOutput {
	return i.ToGetImageCachesCachOutputWithContext(context.Background())
}

func (i GetImageCachesCachArgs) ToGetImageCachesCachOutputWithContext(ctx context.Context) GetImageCachesCachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageCachesCachOutput)
}

// GetImageCachesCachArrayInput is an input type that accepts GetImageCachesCachArray and GetImageCachesCachArrayOutput values.
// You can construct a concrete instance of `GetImageCachesCachArrayInput` via:
//
//	GetImageCachesCachArray{ GetImageCachesCachArgs{...} }
type GetImageCachesCachArrayInput interface {
	pulumi.Input

	ToGetImageCachesCachArrayOutput() GetImageCachesCachArrayOutput
	ToGetImageCachesCachArrayOutputWithContext(context.Context) GetImageCachesCachArrayOutput
}

type GetImageCachesCachArray []GetImageCachesCachInput

func (GetImageCachesCachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageCachesCach)(nil)).Elem()
}

func (i GetImageCachesCachArray) ToGetImageCachesCachArrayOutput() GetImageCachesCachArrayOutput {
	return i.ToGetImageCachesCachArrayOutputWithContext(context.Background())
}

func (i GetImageCachesCachArray) ToGetImageCachesCachArrayOutputWithContext(ctx context.Context) GetImageCachesCachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageCachesCachArrayOutput)
}

type GetImageCachesCachOutput struct{ *pulumi.OutputState }

func (GetImageCachesCachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageCachesCach)(nil)).Elem()
}

func (o GetImageCachesCachOutput) ToGetImageCachesCachOutput() GetImageCachesCachOutput {
	return o
}

func (o GetImageCachesCachOutput) ToGetImageCachesCachOutputWithContext(ctx context.Context) GetImageCachesCachOutput {
	return o
}

// The id of container group.
func (o GetImageCachesCachOutput) ContainerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.ContainerGroupId }).(pulumi.StringOutput)
}

// Image cache pulls image event information.
func (o GetImageCachesCachOutput) Events() GetImageCachesCachEventArrayOutput {
	return o.ApplyT(func(v GetImageCachesCach) []GetImageCachesCachEvent { return v.Events }).(GetImageCachesCachEventArrayOutput)
}

// The time of expired.
func (o GetImageCachesCachOutput) ExpireDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.ExpireDateTime }).(pulumi.StringOutput)
}

// The ID of the ECI Image Cache.
func (o GetImageCachesCachOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the ECI Image Cache.
func (o GetImageCachesCachOutput) ImageCacheId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.ImageCacheId }).(pulumi.StringOutput)
}

// The name of ECI Image Cache.
func (o GetImageCachesCachOutput) ImageCacheName() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.ImageCacheName }).(pulumi.StringOutput)
}

// The list of cached images.
func (o GetImageCachesCachOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetImageCachesCach) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// The progress of ECI Image Cache.
func (o GetImageCachesCachOutput) Progress() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.Progress }).(pulumi.StringOutput)
}

// The id of snapshot.
func (o GetImageCachesCachOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// The status of ECI Image Cache.
func (o GetImageCachesCachOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCach) string { return v.Status }).(pulumi.StringOutput)
}

type GetImageCachesCachArrayOutput struct{ *pulumi.OutputState }

func (GetImageCachesCachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageCachesCach)(nil)).Elem()
}

func (o GetImageCachesCachArrayOutput) ToGetImageCachesCachArrayOutput() GetImageCachesCachArrayOutput {
	return o
}

func (o GetImageCachesCachArrayOutput) ToGetImageCachesCachArrayOutputWithContext(ctx context.Context) GetImageCachesCachArrayOutput {
	return o
}

func (o GetImageCachesCachArrayOutput) Index(i pulumi.IntInput) GetImageCachesCachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageCachesCach {
		return vs[0].([]GetImageCachesCach)[vs[1].(int)]
	}).(GetImageCachesCachOutput)
}

type GetImageCachesCachEvent struct {
	// Number of events.
	Count int `pulumi:"count"`
	// Start time.
	FirstTimestamp string `pulumi:"firstTimestamp"`
	// End time.
	LastTimestamp string `pulumi:"lastTimestamp"`
	Message       string `pulumi:"message"`
	// The name of event.
	Name string `pulumi:"name"`
	// The type of event.
	Type string `pulumi:"type"`
}

// GetImageCachesCachEventInput is an input type that accepts GetImageCachesCachEventArgs and GetImageCachesCachEventOutput values.
// You can construct a concrete instance of `GetImageCachesCachEventInput` via:
//
//	GetImageCachesCachEventArgs{...}
type GetImageCachesCachEventInput interface {
	pulumi.Input

	ToGetImageCachesCachEventOutput() GetImageCachesCachEventOutput
	ToGetImageCachesCachEventOutputWithContext(context.Context) GetImageCachesCachEventOutput
}

type GetImageCachesCachEventArgs struct {
	// Number of events.
	Count pulumi.IntInput `pulumi:"count"`
	// Start time.
	FirstTimestamp pulumi.StringInput `pulumi:"firstTimestamp"`
	// End time.
	LastTimestamp pulumi.StringInput `pulumi:"lastTimestamp"`
	Message       pulumi.StringInput `pulumi:"message"`
	// The name of event.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of event.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetImageCachesCachEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageCachesCachEvent)(nil)).Elem()
}

func (i GetImageCachesCachEventArgs) ToGetImageCachesCachEventOutput() GetImageCachesCachEventOutput {
	return i.ToGetImageCachesCachEventOutputWithContext(context.Background())
}

func (i GetImageCachesCachEventArgs) ToGetImageCachesCachEventOutputWithContext(ctx context.Context) GetImageCachesCachEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageCachesCachEventOutput)
}

// GetImageCachesCachEventArrayInput is an input type that accepts GetImageCachesCachEventArray and GetImageCachesCachEventArrayOutput values.
// You can construct a concrete instance of `GetImageCachesCachEventArrayInput` via:
//
//	GetImageCachesCachEventArray{ GetImageCachesCachEventArgs{...} }
type GetImageCachesCachEventArrayInput interface {
	pulumi.Input

	ToGetImageCachesCachEventArrayOutput() GetImageCachesCachEventArrayOutput
	ToGetImageCachesCachEventArrayOutputWithContext(context.Context) GetImageCachesCachEventArrayOutput
}

type GetImageCachesCachEventArray []GetImageCachesCachEventInput

func (GetImageCachesCachEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageCachesCachEvent)(nil)).Elem()
}

func (i GetImageCachesCachEventArray) ToGetImageCachesCachEventArrayOutput() GetImageCachesCachEventArrayOutput {
	return i.ToGetImageCachesCachEventArrayOutputWithContext(context.Background())
}

func (i GetImageCachesCachEventArray) ToGetImageCachesCachEventArrayOutputWithContext(ctx context.Context) GetImageCachesCachEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageCachesCachEventArrayOutput)
}

type GetImageCachesCachEventOutput struct{ *pulumi.OutputState }

func (GetImageCachesCachEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageCachesCachEvent)(nil)).Elem()
}

func (o GetImageCachesCachEventOutput) ToGetImageCachesCachEventOutput() GetImageCachesCachEventOutput {
	return o
}

func (o GetImageCachesCachEventOutput) ToGetImageCachesCachEventOutputWithContext(ctx context.Context) GetImageCachesCachEventOutput {
	return o
}

// Number of events.
func (o GetImageCachesCachEventOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetImageCachesCachEvent) int { return v.Count }).(pulumi.IntOutput)
}

// Start time.
func (o GetImageCachesCachEventOutput) FirstTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCachEvent) string { return v.FirstTimestamp }).(pulumi.StringOutput)
}

// End time.
func (o GetImageCachesCachEventOutput) LastTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCachEvent) string { return v.LastTimestamp }).(pulumi.StringOutput)
}

func (o GetImageCachesCachEventOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCachEvent) string { return v.Message }).(pulumi.StringOutput)
}

// The name of event.
func (o GetImageCachesCachEventOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCachEvent) string { return v.Name }).(pulumi.StringOutput)
}

// The type of event.
func (o GetImageCachesCachEventOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageCachesCachEvent) string { return v.Type }).(pulumi.StringOutput)
}

type GetImageCachesCachEventArrayOutput struct{ *pulumi.OutputState }

func (GetImageCachesCachEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageCachesCachEvent)(nil)).Elem()
}

func (o GetImageCachesCachEventArrayOutput) ToGetImageCachesCachEventArrayOutput() GetImageCachesCachEventArrayOutput {
	return o
}

func (o GetImageCachesCachEventArrayOutput) ToGetImageCachesCachEventArrayOutputWithContext(ctx context.Context) GetImageCachesCachEventArrayOutput {
	return o
}

func (o GetImageCachesCachEventArrayOutput) Index(i pulumi.IntInput) GetImageCachesCachEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageCachesCachEvent {
		return vs[0].([]GetImageCachesCachEvent)[vs[1].(int)]
	}).(GetImageCachesCachEventOutput)
}

type GetVirtualNodesNode struct {
	// The Number of CPU.
	Cpu int `pulumi:"cpu"`
	// The creation time of the virtual node.
	CreateTime string `pulumi:"createTime"`
	// The ENI instance ID.
	EniInstanceId string `pulumi:"eniInstanceId"`
	// The event list.
	Events []GetVirtualNodesNodeEvent `pulumi:"events"`
	// The ID of the Virtual Node.
	Id string `pulumi:"id"`
	// The IP address of a public network.
	InternetIp string `pulumi:"internetIp"`
	// The private IP address of the RDS instance.
	IntranetIp string `pulumi:"intranetIp"`
	// The memory size.
	Memory int `pulumi:"memory"`
	// The ram role.
	RamRoleName string `pulumi:"ramRoleName"`
	// The resource group ID.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The security group ID.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The Status of the virtual node.
	Status string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// Of the virtual node number.
	VirtualNodeId string `pulumi:"virtualNodeId"`
	// The name of the virtual node.
	VirtualNodeName string `pulumi:"virtualNodeName"`
	VpcId           string `pulumi:"vpcId"`
	// The vswitch id.
	VswitchId string `pulumi:"vswitchId"`
	// The Zone.
	ZoneId string `pulumi:"zoneId"`
}

// GetVirtualNodesNodeInput is an input type that accepts GetVirtualNodesNodeArgs and GetVirtualNodesNodeOutput values.
// You can construct a concrete instance of `GetVirtualNodesNodeInput` via:
//
//	GetVirtualNodesNodeArgs{...}
type GetVirtualNodesNodeInput interface {
	pulumi.Input

	ToGetVirtualNodesNodeOutput() GetVirtualNodesNodeOutput
	ToGetVirtualNodesNodeOutputWithContext(context.Context) GetVirtualNodesNodeOutput
}

type GetVirtualNodesNodeArgs struct {
	// The Number of CPU.
	Cpu pulumi.IntInput `pulumi:"cpu"`
	// The creation time of the virtual node.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The ENI instance ID.
	EniInstanceId pulumi.StringInput `pulumi:"eniInstanceId"`
	// The event list.
	Events GetVirtualNodesNodeEventArrayInput `pulumi:"events"`
	// The ID of the Virtual Node.
	Id pulumi.StringInput `pulumi:"id"`
	// The IP address of a public network.
	InternetIp pulumi.StringInput `pulumi:"internetIp"`
	// The private IP address of the RDS instance.
	IntranetIp pulumi.StringInput `pulumi:"intranetIp"`
	// The memory size.
	Memory pulumi.IntInput `pulumi:"memory"`
	// The ram role.
	RamRoleName pulumi.StringInput `pulumi:"ramRoleName"`
	// The resource group ID.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The security group ID.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The Status of the virtual node.
	Status pulumi.StringInput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Of the virtual node number.
	VirtualNodeId pulumi.StringInput `pulumi:"virtualNodeId"`
	// The name of the virtual node.
	VirtualNodeName pulumi.StringInput `pulumi:"virtualNodeName"`
	VpcId           pulumi.StringInput `pulumi:"vpcId"`
	// The vswitch id.
	VswitchId pulumi.StringInput `pulumi:"vswitchId"`
	// The Zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetVirtualNodesNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodesNode)(nil)).Elem()
}

func (i GetVirtualNodesNodeArgs) ToGetVirtualNodesNodeOutput() GetVirtualNodesNodeOutput {
	return i.ToGetVirtualNodesNodeOutputWithContext(context.Background())
}

func (i GetVirtualNodesNodeArgs) ToGetVirtualNodesNodeOutputWithContext(ctx context.Context) GetVirtualNodesNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodesNodeOutput)
}

// GetVirtualNodesNodeArrayInput is an input type that accepts GetVirtualNodesNodeArray and GetVirtualNodesNodeArrayOutput values.
// You can construct a concrete instance of `GetVirtualNodesNodeArrayInput` via:
//
//	GetVirtualNodesNodeArray{ GetVirtualNodesNodeArgs{...} }
type GetVirtualNodesNodeArrayInput interface {
	pulumi.Input

	ToGetVirtualNodesNodeArrayOutput() GetVirtualNodesNodeArrayOutput
	ToGetVirtualNodesNodeArrayOutputWithContext(context.Context) GetVirtualNodesNodeArrayOutput
}

type GetVirtualNodesNodeArray []GetVirtualNodesNodeInput

func (GetVirtualNodesNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualNodesNode)(nil)).Elem()
}

func (i GetVirtualNodesNodeArray) ToGetVirtualNodesNodeArrayOutput() GetVirtualNodesNodeArrayOutput {
	return i.ToGetVirtualNodesNodeArrayOutputWithContext(context.Background())
}

func (i GetVirtualNodesNodeArray) ToGetVirtualNodesNodeArrayOutputWithContext(ctx context.Context) GetVirtualNodesNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodesNodeArrayOutput)
}

type GetVirtualNodesNodeOutput struct{ *pulumi.OutputState }

func (GetVirtualNodesNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodesNode)(nil)).Elem()
}

func (o GetVirtualNodesNodeOutput) ToGetVirtualNodesNodeOutput() GetVirtualNodesNodeOutput {
	return o
}

func (o GetVirtualNodesNodeOutput) ToGetVirtualNodesNodeOutputWithContext(ctx context.Context) GetVirtualNodesNodeOutput {
	return o
}

// The Number of CPU.
func (o GetVirtualNodesNodeOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) int { return v.Cpu }).(pulumi.IntOutput)
}

// The creation time of the virtual node.
func (o GetVirtualNodesNodeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The ENI instance ID.
func (o GetVirtualNodesNodeOutput) EniInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.EniInstanceId }).(pulumi.StringOutput)
}

// The event list.
func (o GetVirtualNodesNodeOutput) Events() GetVirtualNodesNodeEventArrayOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) []GetVirtualNodesNodeEvent { return v.Events }).(GetVirtualNodesNodeEventArrayOutput)
}

// The ID of the Virtual Node.
func (o GetVirtualNodesNodeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.Id }).(pulumi.StringOutput)
}

// The IP address of a public network.
func (o GetVirtualNodesNodeOutput) InternetIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.InternetIp }).(pulumi.StringOutput)
}

// The private IP address of the RDS instance.
func (o GetVirtualNodesNodeOutput) IntranetIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.IntranetIp }).(pulumi.StringOutput)
}

// The memory size.
func (o GetVirtualNodesNodeOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) int { return v.Memory }).(pulumi.IntOutput)
}

// The ram role.
func (o GetVirtualNodesNodeOutput) RamRoleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.RamRoleName }).(pulumi.StringOutput)
}

// The resource group ID.
func (o GetVirtualNodesNodeOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The security group ID.
func (o GetVirtualNodesNodeOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The Status of the virtual node.
func (o GetVirtualNodesNodeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o GetVirtualNodesNodeOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// Of the virtual node number.
func (o GetVirtualNodesNodeOutput) VirtualNodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.VirtualNodeId }).(pulumi.StringOutput)
}

// The name of the virtual node.
func (o GetVirtualNodesNodeOutput) VirtualNodeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.VirtualNodeName }).(pulumi.StringOutput)
}

func (o GetVirtualNodesNodeOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.VpcId }).(pulumi.StringOutput)
}

// The vswitch id.
func (o GetVirtualNodesNodeOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.VswitchId }).(pulumi.StringOutput)
}

// The Zone.
func (o GetVirtualNodesNodeOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNode) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetVirtualNodesNodeArrayOutput struct{ *pulumi.OutputState }

func (GetVirtualNodesNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualNodesNode)(nil)).Elem()
}

func (o GetVirtualNodesNodeArrayOutput) ToGetVirtualNodesNodeArrayOutput() GetVirtualNodesNodeArrayOutput {
	return o
}

func (o GetVirtualNodesNodeArrayOutput) ToGetVirtualNodesNodeArrayOutputWithContext(ctx context.Context) GetVirtualNodesNodeArrayOutput {
	return o
}

func (o GetVirtualNodesNodeArrayOutput) Index(i pulumi.IntInput) GetVirtualNodesNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVirtualNodesNode {
		return vs[0].([]GetVirtualNodesNode)[vs[1].(int)]
	}).(GetVirtualNodesNodeOutput)
}

type GetVirtualNodesNodeEvent struct {
	// The number of occurrences.
	Count int `pulumi:"count"`
	// The first presentation time stamp.
	FirstTimestamp string `pulumi:"firstTimestamp"`
	// The most recent time stamp.
	LastTimestamp string `pulumi:"lastTimestamp"`
	// The event of the message body.
	Message string `pulumi:"message"`
	// The name of the event.
	Name string `pulumi:"name"`
	// The causes of the incident.
	Reason string `pulumi:"reason"`
	// The Event type.
	Type string `pulumi:"type"`
}

// GetVirtualNodesNodeEventInput is an input type that accepts GetVirtualNodesNodeEventArgs and GetVirtualNodesNodeEventOutput values.
// You can construct a concrete instance of `GetVirtualNodesNodeEventInput` via:
//
//	GetVirtualNodesNodeEventArgs{...}
type GetVirtualNodesNodeEventInput interface {
	pulumi.Input

	ToGetVirtualNodesNodeEventOutput() GetVirtualNodesNodeEventOutput
	ToGetVirtualNodesNodeEventOutputWithContext(context.Context) GetVirtualNodesNodeEventOutput
}

type GetVirtualNodesNodeEventArgs struct {
	// The number of occurrences.
	Count pulumi.IntInput `pulumi:"count"`
	// The first presentation time stamp.
	FirstTimestamp pulumi.StringInput `pulumi:"firstTimestamp"`
	// The most recent time stamp.
	LastTimestamp pulumi.StringInput `pulumi:"lastTimestamp"`
	// The event of the message body.
	Message pulumi.StringInput `pulumi:"message"`
	// The name of the event.
	Name pulumi.StringInput `pulumi:"name"`
	// The causes of the incident.
	Reason pulumi.StringInput `pulumi:"reason"`
	// The Event type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetVirtualNodesNodeEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodesNodeEvent)(nil)).Elem()
}

func (i GetVirtualNodesNodeEventArgs) ToGetVirtualNodesNodeEventOutput() GetVirtualNodesNodeEventOutput {
	return i.ToGetVirtualNodesNodeEventOutputWithContext(context.Background())
}

func (i GetVirtualNodesNodeEventArgs) ToGetVirtualNodesNodeEventOutputWithContext(ctx context.Context) GetVirtualNodesNodeEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodesNodeEventOutput)
}

// GetVirtualNodesNodeEventArrayInput is an input type that accepts GetVirtualNodesNodeEventArray and GetVirtualNodesNodeEventArrayOutput values.
// You can construct a concrete instance of `GetVirtualNodesNodeEventArrayInput` via:
//
//	GetVirtualNodesNodeEventArray{ GetVirtualNodesNodeEventArgs{...} }
type GetVirtualNodesNodeEventArrayInput interface {
	pulumi.Input

	ToGetVirtualNodesNodeEventArrayOutput() GetVirtualNodesNodeEventArrayOutput
	ToGetVirtualNodesNodeEventArrayOutputWithContext(context.Context) GetVirtualNodesNodeEventArrayOutput
}

type GetVirtualNodesNodeEventArray []GetVirtualNodesNodeEventInput

func (GetVirtualNodesNodeEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualNodesNodeEvent)(nil)).Elem()
}

func (i GetVirtualNodesNodeEventArray) ToGetVirtualNodesNodeEventArrayOutput() GetVirtualNodesNodeEventArrayOutput {
	return i.ToGetVirtualNodesNodeEventArrayOutputWithContext(context.Background())
}

func (i GetVirtualNodesNodeEventArray) ToGetVirtualNodesNodeEventArrayOutputWithContext(ctx context.Context) GetVirtualNodesNodeEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodesNodeEventArrayOutput)
}

type GetVirtualNodesNodeEventOutput struct{ *pulumi.OutputState }

func (GetVirtualNodesNodeEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodesNodeEvent)(nil)).Elem()
}

func (o GetVirtualNodesNodeEventOutput) ToGetVirtualNodesNodeEventOutput() GetVirtualNodesNodeEventOutput {
	return o
}

func (o GetVirtualNodesNodeEventOutput) ToGetVirtualNodesNodeEventOutputWithContext(ctx context.Context) GetVirtualNodesNodeEventOutput {
	return o
}

// The number of occurrences.
func (o GetVirtualNodesNodeEventOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetVirtualNodesNodeEvent) int { return v.Count }).(pulumi.IntOutput)
}

// The first presentation time stamp.
func (o GetVirtualNodesNodeEventOutput) FirstTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNodeEvent) string { return v.FirstTimestamp }).(pulumi.StringOutput)
}

// The most recent time stamp.
func (o GetVirtualNodesNodeEventOutput) LastTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNodeEvent) string { return v.LastTimestamp }).(pulumi.StringOutput)
}

// The event of the message body.
func (o GetVirtualNodesNodeEventOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNodeEvent) string { return v.Message }).(pulumi.StringOutput)
}

// The name of the event.
func (o GetVirtualNodesNodeEventOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNodeEvent) string { return v.Name }).(pulumi.StringOutput)
}

// The causes of the incident.
func (o GetVirtualNodesNodeEventOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNodeEvent) string { return v.Reason }).(pulumi.StringOutput)
}

// The Event type.
func (o GetVirtualNodesNodeEventOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNodesNodeEvent) string { return v.Type }).(pulumi.StringOutput)
}

type GetVirtualNodesNodeEventArrayOutput struct{ *pulumi.OutputState }

func (GetVirtualNodesNodeEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualNodesNodeEvent)(nil)).Elem()
}

func (o GetVirtualNodesNodeEventArrayOutput) ToGetVirtualNodesNodeEventArrayOutput() GetVirtualNodesNodeEventArrayOutput {
	return o
}

func (o GetVirtualNodesNodeEventArrayOutput) ToGetVirtualNodesNodeEventArrayOutputWithContext(ctx context.Context) GetVirtualNodesNodeEventArrayOutput {
	return o
}

func (o GetVirtualNodesNodeEventArrayOutput) Index(i pulumi.IntInput) GetVirtualNodesNodeEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVirtualNodesNodeEvent {
		return vs[0].([]GetVirtualNodesNodeEvent)[vs[1].(int)]
	}).(GetVirtualNodesNodeEventOutput)
}

type GetZonesZone struct {
	// The endpoint of the region.
	RegionEndpoint string `pulumi:"regionEndpoint"`
	// The list of available zone ids.
	ZoneIds []string `pulumi:"zoneIds"`
}

// GetZonesZoneInput is an input type that accepts GetZonesZoneArgs and GetZonesZoneOutput values.
// You can construct a concrete instance of `GetZonesZoneInput` via:
//
//	GetZonesZoneArgs{...}
type GetZonesZoneInput interface {
	pulumi.Input

	ToGetZonesZoneOutput() GetZonesZoneOutput
	ToGetZonesZoneOutputWithContext(context.Context) GetZonesZoneOutput
}

type GetZonesZoneArgs struct {
	// The endpoint of the region.
	RegionEndpoint pulumi.StringInput `pulumi:"regionEndpoint"`
	// The list of available zone ids.
	ZoneIds pulumi.StringArrayInput `pulumi:"zoneIds"`
}

func (GetZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return i.ToGetZonesZoneOutputWithContext(context.Background())
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneOutput)
}

// GetZonesZoneArrayInput is an input type that accepts GetZonesZoneArray and GetZonesZoneArrayOutput values.
// You can construct a concrete instance of `GetZonesZoneArrayInput` via:
//
//	GetZonesZoneArray{ GetZonesZoneArgs{...} }
type GetZonesZoneArrayInput interface {
	pulumi.Input

	ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput
	ToGetZonesZoneArrayOutputWithContext(context.Context) GetZonesZoneArrayOutput
}

type GetZonesZoneArray []GetZonesZoneInput

func (GetZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return i.ToGetZonesZoneArrayOutputWithContext(context.Background())
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneArrayOutput)
}

type GetZonesZoneOutput struct{ *pulumi.OutputState }

func (GetZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return o
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return o
}

// The endpoint of the region.
func (o GetZonesZoneOutput) RegionEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.RegionEndpoint }).(pulumi.StringOutput)
}

// The list of available zone ids.
func (o GetZonesZoneOutput) ZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetZonesZone) []string { return v.ZoneIds }).(pulumi.StringArrayOutput)
}

type GetZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (GetZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) Index(i pulumi.IntInput) GetZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZonesZone {
		return vs[0].([]GetZonesZone)[vs[1].(int)]
	}).(GetZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupAcrRegistryInfoInput)(nil)).Elem(), ContainerGroupAcrRegistryInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupAcrRegistryInfoArrayInput)(nil)).Elem(), ContainerGroupAcrRegistryInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerInput)(nil)).Elem(), ContainerGroupContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerArrayInput)(nil)).Elem(), ContainerGroupContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerEnvironmentVarInput)(nil)).Elem(), ContainerGroupContainerEnvironmentVarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerEnvironmentVarArrayInput)(nil)).Elem(), ContainerGroupContainerEnvironmentVarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerEnvironmentVarFieldRefInput)(nil)).Elem(), ContainerGroupContainerEnvironmentVarFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerEnvironmentVarFieldRefArrayInput)(nil)).Elem(), ContainerGroupContainerEnvironmentVarFieldRefArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerLivenessProbeInput)(nil)).Elem(), ContainerGroupContainerLivenessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerLivenessProbeArrayInput)(nil)).Elem(), ContainerGroupContainerLivenessProbeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerLivenessProbeExecInput)(nil)).Elem(), ContainerGroupContainerLivenessProbeExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerLivenessProbeExecArrayInput)(nil)).Elem(), ContainerGroupContainerLivenessProbeExecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerLivenessProbeHttpGetInput)(nil)).Elem(), ContainerGroupContainerLivenessProbeHttpGetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerLivenessProbeHttpGetArrayInput)(nil)).Elem(), ContainerGroupContainerLivenessProbeHttpGetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerLivenessProbeTcpSocketInput)(nil)).Elem(), ContainerGroupContainerLivenessProbeTcpSocketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerLivenessProbeTcpSocketArrayInput)(nil)).Elem(), ContainerGroupContainerLivenessProbeTcpSocketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerPortInput)(nil)).Elem(), ContainerGroupContainerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerPortArrayInput)(nil)).Elem(), ContainerGroupContainerPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerReadinessProbeInput)(nil)).Elem(), ContainerGroupContainerReadinessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerReadinessProbeArrayInput)(nil)).Elem(), ContainerGroupContainerReadinessProbeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerReadinessProbeExecInput)(nil)).Elem(), ContainerGroupContainerReadinessProbeExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerReadinessProbeExecArrayInput)(nil)).Elem(), ContainerGroupContainerReadinessProbeExecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerReadinessProbeHttpGetInput)(nil)).Elem(), ContainerGroupContainerReadinessProbeHttpGetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerReadinessProbeHttpGetArrayInput)(nil)).Elem(), ContainerGroupContainerReadinessProbeHttpGetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerReadinessProbeTcpSocketInput)(nil)).Elem(), ContainerGroupContainerReadinessProbeTcpSocketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerReadinessProbeTcpSocketArrayInput)(nil)).Elem(), ContainerGroupContainerReadinessProbeTcpSocketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerSecurityContextInput)(nil)).Elem(), ContainerGroupContainerSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerSecurityContextArrayInput)(nil)).Elem(), ContainerGroupContainerSecurityContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerSecurityContextCapabilityInput)(nil)).Elem(), ContainerGroupContainerSecurityContextCapabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerSecurityContextCapabilityArrayInput)(nil)).Elem(), ContainerGroupContainerSecurityContextCapabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerVolumeMountInput)(nil)).Elem(), ContainerGroupContainerVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupContainerVolumeMountArrayInput)(nil)).Elem(), ContainerGroupContainerVolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupDnsConfigInput)(nil)).Elem(), ContainerGroupDnsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupDnsConfigPtrInput)(nil)).Elem(), ContainerGroupDnsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupDnsConfigOptionInput)(nil)).Elem(), ContainerGroupDnsConfigOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupDnsConfigOptionArrayInput)(nil)).Elem(), ContainerGroupDnsConfigOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupHostAliasInput)(nil)).Elem(), ContainerGroupHostAliasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupHostAliasArrayInput)(nil)).Elem(), ContainerGroupHostAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupImageRegistryCredentialInput)(nil)).Elem(), ContainerGroupImageRegistryCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupImageRegistryCredentialArrayInput)(nil)).Elem(), ContainerGroupImageRegistryCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerInput)(nil)).Elem(), ContainerGroupInitContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerArrayInput)(nil)).Elem(), ContainerGroupInitContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerEnvironmentVarInput)(nil)).Elem(), ContainerGroupInitContainerEnvironmentVarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerEnvironmentVarArrayInput)(nil)).Elem(), ContainerGroupInitContainerEnvironmentVarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerEnvironmentVarFieldRefInput)(nil)).Elem(), ContainerGroupInitContainerEnvironmentVarFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerEnvironmentVarFieldRefArrayInput)(nil)).Elem(), ContainerGroupInitContainerEnvironmentVarFieldRefArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerPortInput)(nil)).Elem(), ContainerGroupInitContainerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerPortArrayInput)(nil)).Elem(), ContainerGroupInitContainerPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerSecurityContextInput)(nil)).Elem(), ContainerGroupInitContainerSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerSecurityContextArrayInput)(nil)).Elem(), ContainerGroupInitContainerSecurityContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerSecurityContextCapabilityInput)(nil)).Elem(), ContainerGroupInitContainerSecurityContextCapabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerSecurityContextCapabilityArrayInput)(nil)).Elem(), ContainerGroupInitContainerSecurityContextCapabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerVolumeMountInput)(nil)).Elem(), ContainerGroupInitContainerVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupInitContainerVolumeMountArrayInput)(nil)).Elem(), ContainerGroupInitContainerVolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupSecurityContextInput)(nil)).Elem(), ContainerGroupSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupSecurityContextPtrInput)(nil)).Elem(), ContainerGroupSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupSecurityContextSysctlInput)(nil)).Elem(), ContainerGroupSecurityContextSysctlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupSecurityContextSysctlArrayInput)(nil)).Elem(), ContainerGroupSecurityContextSysctlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupVolumeInput)(nil)).Elem(), ContainerGroupVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupVolumeArrayInput)(nil)).Elem(), ContainerGroupVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupVolumeConfigFileVolumeConfigFileToPathInput)(nil)).Elem(), ContainerGroupVolumeConfigFileVolumeConfigFileToPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayInput)(nil)).Elem(), ContainerGroupVolumeConfigFileVolumeConfigFileToPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageCacheImageRegistryCredentialInput)(nil)).Elem(), ImageCacheImageRegistryCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageCacheImageRegistryCredentialArrayInput)(nil)).Elem(), ImageCacheImageRegistryCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenApiImageCacheImageRegistryCredentialInput)(nil)).Elem(), OpenApiImageCacheImageRegistryCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenApiImageCacheImageRegistryCredentialArrayInput)(nil)).Elem(), OpenApiImageCacheImageRegistryCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNodeTaintInput)(nil)).Elem(), VirtualNodeTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNodeTaintArrayInput)(nil)).Elem(), VirtualNodeTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupInput)(nil)).Elem(), GetContainerGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupArrayInput)(nil)).Elem(), GetContainerGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupContainerInput)(nil)).Elem(), GetContainerGroupsGroupContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupContainerArrayInput)(nil)).Elem(), GetContainerGroupsGroupContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupContainerEnvironmentVarInput)(nil)).Elem(), GetContainerGroupsGroupContainerEnvironmentVarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupContainerEnvironmentVarArrayInput)(nil)).Elem(), GetContainerGroupsGroupContainerEnvironmentVarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupContainerPortInput)(nil)).Elem(), GetContainerGroupsGroupContainerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupContainerPortArrayInput)(nil)).Elem(), GetContainerGroupsGroupContainerPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupContainerVolumeMountInput)(nil)).Elem(), GetContainerGroupsGroupContainerVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupContainerVolumeMountArrayInput)(nil)).Elem(), GetContainerGroupsGroupContainerVolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupDnsConfigInput)(nil)).Elem(), GetContainerGroupsGroupDnsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupDnsConfigArrayInput)(nil)).Elem(), GetContainerGroupsGroupDnsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupDnsConfigOptionInput)(nil)).Elem(), GetContainerGroupsGroupDnsConfigOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupDnsConfigOptionArrayInput)(nil)).Elem(), GetContainerGroupsGroupDnsConfigOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupEciSecurityContextInput)(nil)).Elem(), GetContainerGroupsGroupEciSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupEciSecurityContextArrayInput)(nil)).Elem(), GetContainerGroupsGroupEciSecurityContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupEciSecurityContextSysctlInput)(nil)).Elem(), GetContainerGroupsGroupEciSecurityContextSysctlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupEciSecurityContextSysctlArrayInput)(nil)).Elem(), GetContainerGroupsGroupEciSecurityContextSysctlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupEventInput)(nil)).Elem(), GetContainerGroupsGroupEventArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupEventArrayInput)(nil)).Elem(), GetContainerGroupsGroupEventArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupHostAliasInput)(nil)).Elem(), GetContainerGroupsGroupHostAliasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupHostAliasArrayInput)(nil)).Elem(), GetContainerGroupsGroupHostAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupInitContainerInput)(nil)).Elem(), GetContainerGroupsGroupInitContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupInitContainerArrayInput)(nil)).Elem(), GetContainerGroupsGroupInitContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupInitContainerEnvironmentVarInput)(nil)).Elem(), GetContainerGroupsGroupInitContainerEnvironmentVarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupInitContainerEnvironmentVarArrayInput)(nil)).Elem(), GetContainerGroupsGroupInitContainerEnvironmentVarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupInitContainerPortInput)(nil)).Elem(), GetContainerGroupsGroupInitContainerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupInitContainerPortArrayInput)(nil)).Elem(), GetContainerGroupsGroupInitContainerPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupInitContainerVolumeMountInput)(nil)).Elem(), GetContainerGroupsGroupInitContainerVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupInitContainerVolumeMountArrayInput)(nil)).Elem(), GetContainerGroupsGroupInitContainerVolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupVolumeInput)(nil)).Elem(), GetContainerGroupsGroupVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupVolumeArrayInput)(nil)).Elem(), GetContainerGroupsGroupVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathInput)(nil)).Elem(), GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayInput)(nil)).Elem(), GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageCachesCachInput)(nil)).Elem(), GetImageCachesCachArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageCachesCachArrayInput)(nil)).Elem(), GetImageCachesCachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageCachesCachEventInput)(nil)).Elem(), GetImageCachesCachEventArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageCachesCachEventArrayInput)(nil)).Elem(), GetImageCachesCachEventArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVirtualNodesNodeInput)(nil)).Elem(), GetVirtualNodesNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVirtualNodesNodeArrayInput)(nil)).Elem(), GetVirtualNodesNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVirtualNodesNodeEventInput)(nil)).Elem(), GetVirtualNodesNodeEventArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVirtualNodesNodeEventArrayInput)(nil)).Elem(), GetVirtualNodesNodeEventArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneInput)(nil)).Elem(), GetZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneArrayInput)(nil)).Elem(), GetZonesZoneArray{})
	pulumi.RegisterOutputType(ContainerGroupAcrRegistryInfoOutput{})
	pulumi.RegisterOutputType(ContainerGroupAcrRegistryInfoArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerEnvironmentVarOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerEnvironmentVarArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerEnvironmentVarFieldRefOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerEnvironmentVarFieldRefArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerLivenessProbeOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerLivenessProbeArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerLivenessProbeExecOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerLivenessProbeExecArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerLivenessProbeHttpGetOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerLivenessProbeHttpGetArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerLivenessProbeTcpSocketOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerLivenessProbeTcpSocketArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerPortOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerPortArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerReadinessProbeOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerReadinessProbeArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerReadinessProbeExecOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerReadinessProbeExecArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerReadinessProbeHttpGetOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerReadinessProbeHttpGetArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerReadinessProbeTcpSocketOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerReadinessProbeTcpSocketArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerSecurityContextOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerSecurityContextArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerSecurityContextCapabilityOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerSecurityContextCapabilityArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerVolumeMountOutput{})
	pulumi.RegisterOutputType(ContainerGroupContainerVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupDnsConfigOutput{})
	pulumi.RegisterOutputType(ContainerGroupDnsConfigPtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupDnsConfigOptionOutput{})
	pulumi.RegisterOutputType(ContainerGroupDnsConfigOptionArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupHostAliasOutput{})
	pulumi.RegisterOutputType(ContainerGroupHostAliasArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupImageRegistryCredentialOutput{})
	pulumi.RegisterOutputType(ContainerGroupImageRegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerEnvironmentVarOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerEnvironmentVarArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerEnvironmentVarFieldRefOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerEnvironmentVarFieldRefArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerPortOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerPortArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerSecurityContextOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerSecurityContextArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerSecurityContextCapabilityOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerSecurityContextCapabilityArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerVolumeMountOutput{})
	pulumi.RegisterOutputType(ContainerGroupInitContainerVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupSecurityContextOutput{})
	pulumi.RegisterOutputType(ContainerGroupSecurityContextPtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupSecurityContextSysctlOutput{})
	pulumi.RegisterOutputType(ContainerGroupSecurityContextSysctlArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupVolumeOutput{})
	pulumi.RegisterOutputType(ContainerGroupVolumeArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupVolumeConfigFileVolumeConfigFileToPathOutput{})
	pulumi.RegisterOutputType(ContainerGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput{})
	pulumi.RegisterOutputType(ImageCacheImageRegistryCredentialOutput{})
	pulumi.RegisterOutputType(ImageCacheImageRegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(OpenApiImageCacheImageRegistryCredentialOutput{})
	pulumi.RegisterOutputType(OpenApiImageCacheImageRegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(VirtualNodeTaintOutput{})
	pulumi.RegisterOutputType(VirtualNodeTaintArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupContainerOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupContainerArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupContainerEnvironmentVarOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupContainerEnvironmentVarArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupContainerPortOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupContainerPortArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupContainerVolumeMountOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupContainerVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupDnsConfigOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupDnsConfigArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupDnsConfigOptionOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupDnsConfigOptionArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupEciSecurityContextOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupEciSecurityContextArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupEciSecurityContextSysctlOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupEciSecurityContextSysctlArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupEventOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupEventArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupHostAliasOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupHostAliasArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupInitContainerOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupInitContainerArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupInitContainerEnvironmentVarOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupInitContainerEnvironmentVarArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupInitContainerPortOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupInitContainerPortArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupInitContainerVolumeMountOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupInitContainerVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupVolumeOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathOutput{})
	pulumi.RegisterOutputType(GetContainerGroupsGroupVolumeConfigFileVolumeConfigFileToPathArrayOutput{})
	pulumi.RegisterOutputType(GetImageCachesCachOutput{})
	pulumi.RegisterOutputType(GetImageCachesCachArrayOutput{})
	pulumi.RegisterOutputType(GetImageCachesCachEventOutput{})
	pulumi.RegisterOutputType(GetImageCachesCachEventArrayOutput{})
	pulumi.RegisterOutputType(GetVirtualNodesNodeOutput{})
	pulumi.RegisterOutputType(GetVirtualNodesNodeArrayOutput{})
	pulumi.RegisterOutputType(GetVirtualNodesNodeEventOutput{})
	pulumi.RegisterOutputType(GetVirtualNodesNodeEventArrayOutput{})
	pulumi.RegisterOutputType(GetZonesZoneOutput{})
	pulumi.RegisterOutputType(GetZonesZoneArrayOutput{})
}
