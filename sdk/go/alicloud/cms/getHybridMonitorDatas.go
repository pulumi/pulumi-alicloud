// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides the Cms Hybrid Monitor Datas of the current Alibaba Cloud user.
//
// > **NOTE:** Available in v1.177.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := cms.GetHybridMonitorDatas(ctx, &cms.GetHybridMonitorDatasArgs{
//				Namespace: "example_value",
//				PromSql:   "AliyunEcs_cpu_total",
//				Start:     "1657505665",
//				End:       "1657520065",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("cmsMetricRuleTemplateId1", _default.Datas[0])
//			return nil
//		})
//	}
//
// ```
func GetHybridMonitorDatas(ctx *pulumi.Context, args *GetHybridMonitorDatasArgs, opts ...pulumi.InvokeOption) (*GetHybridMonitorDatasResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetHybridMonitorDatasResult
	err := ctx.Invoke("alicloud:cms/getHybridMonitorDatas:getHybridMonitorDatas", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHybridMonitorDatas.
type GetHybridMonitorDatasArgs struct {
	// The timestamp that specifies the end of the time range to query.
	End string `pulumi:"end"`
	// The name of the namespace.
	Namespace string `pulumi:"namespace"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	// The interval at which monitoring data is collected. Unit: seconds.
	Period *string `pulumi:"period"`
	// The name of the metric. Note PromQL statements are supported.
	PromSql string `pulumi:"promSql"`
	// The timestamp that specifies the beginning of the time range to query.
	Start string `pulumi:"start"`
}

// A collection of values returned by getHybridMonitorDatas.
type GetHybridMonitorDatasResult struct {
	Datas []GetHybridMonitorDatasData `pulumi:"datas"`
	End   string                      `pulumi:"end"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	Namespace  string  `pulumi:"namespace"`
	OutputFile *string `pulumi:"outputFile"`
	Period     *string `pulumi:"period"`
	PromSql    string  `pulumi:"promSql"`
	Start      string  `pulumi:"start"`
}

func GetHybridMonitorDatasOutput(ctx *pulumi.Context, args GetHybridMonitorDatasOutputArgs, opts ...pulumi.InvokeOption) GetHybridMonitorDatasResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetHybridMonitorDatasResult, error) {
			args := v.(GetHybridMonitorDatasArgs)
			r, err := GetHybridMonitorDatas(ctx, &args, opts...)
			var s GetHybridMonitorDatasResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetHybridMonitorDatasResultOutput)
}

// A collection of arguments for invoking getHybridMonitorDatas.
type GetHybridMonitorDatasOutputArgs struct {
	// The timestamp that specifies the end of the time range to query.
	End pulumi.StringInput `pulumi:"end"`
	// The name of the namespace.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The interval at which monitoring data is collected. Unit: seconds.
	Period pulumi.StringPtrInput `pulumi:"period"`
	// The name of the metric. Note PromQL statements are supported.
	PromSql pulumi.StringInput `pulumi:"promSql"`
	// The timestamp that specifies the beginning of the time range to query.
	Start pulumi.StringInput `pulumi:"start"`
}

func (GetHybridMonitorDatasOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHybridMonitorDatasArgs)(nil)).Elem()
}

// A collection of values returned by getHybridMonitorDatas.
type GetHybridMonitorDatasResultOutput struct{ *pulumi.OutputState }

func (GetHybridMonitorDatasResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHybridMonitorDatasResult)(nil)).Elem()
}

func (o GetHybridMonitorDatasResultOutput) ToGetHybridMonitorDatasResultOutput() GetHybridMonitorDatasResultOutput {
	return o
}

func (o GetHybridMonitorDatasResultOutput) ToGetHybridMonitorDatasResultOutputWithContext(ctx context.Context) GetHybridMonitorDatasResultOutput {
	return o
}

func (o GetHybridMonitorDatasResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetHybridMonitorDatasResult] {
	return pulumix.Output[GetHybridMonitorDatasResult]{
		OutputState: o.OutputState,
	}
}

func (o GetHybridMonitorDatasResultOutput) Datas() GetHybridMonitorDatasDataArrayOutput {
	return o.ApplyT(func(v GetHybridMonitorDatasResult) []GetHybridMonitorDatasData { return v.Datas }).(GetHybridMonitorDatasDataArrayOutput)
}

func (o GetHybridMonitorDatasResultOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v GetHybridMonitorDatasResult) string { return v.End }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetHybridMonitorDatasResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHybridMonitorDatasResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetHybridMonitorDatasResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetHybridMonitorDatasResult) string { return v.Namespace }).(pulumi.StringOutput)
}

func (o GetHybridMonitorDatasResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHybridMonitorDatasResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetHybridMonitorDatasResultOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHybridMonitorDatasResult) *string { return v.Period }).(pulumi.StringPtrOutput)
}

func (o GetHybridMonitorDatasResultOutput) PromSql() pulumi.StringOutput {
	return o.ApplyT(func(v GetHybridMonitorDatasResult) string { return v.PromSql }).(pulumi.StringOutput)
}

func (o GetHybridMonitorDatasResultOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v GetHybridMonitorDatasResult) string { return v.Start }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetHybridMonitorDatasResultOutput{})
}
