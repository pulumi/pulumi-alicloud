// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the Cms Hybrid Monitor Fc Tasks of the current Alibaba Cloud user.
//
// > **NOTE:** Available in v1.179.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ids, err := cms.GetHybridMonitorFcTasks(ctx, &cms.GetHybridMonitorFcTasksArgs{
//				Ids: []string{
//					"example_value",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("cmsHybridMonitorFcTaskId1", ids.Tasks[0].Id)
//			return nil
//		})
//	}
//
// ```
func GetHybridMonitorFcTasks(ctx *pulumi.Context, args *GetHybridMonitorFcTasksArgs, opts ...pulumi.InvokeOption) (*GetHybridMonitorFcTasksResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetHybridMonitorFcTasksResult
	err := ctx.Invoke("alicloud:cms/getHybridMonitorFcTasks:getHybridMonitorFcTasks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHybridMonitorFcTasks.
type GetHybridMonitorFcTasksArgs struct {
	// A list of Hybrid Monitor Fc Task IDs.
	Ids []string `pulumi:"ids"`
	// The index warehouse where the host belongs.
	Namespace *string `pulumi:"namespace"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	PageNumber *int    `pulumi:"pageNumber"`
	PageSize   *int    `pulumi:"pageSize"`
}

// A collection of values returned by getHybridMonitorFcTasks.
type GetHybridMonitorFcTasksResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string                        `pulumi:"id"`
	Ids        []string                      `pulumi:"ids"`
	Namespace  *string                       `pulumi:"namespace"`
	OutputFile *string                       `pulumi:"outputFile"`
	PageNumber *int                          `pulumi:"pageNumber"`
	PageSize   *int                          `pulumi:"pageSize"`
	Tasks      []GetHybridMonitorFcTasksTask `pulumi:"tasks"`
}

func GetHybridMonitorFcTasksOutput(ctx *pulumi.Context, args GetHybridMonitorFcTasksOutputArgs, opts ...pulumi.InvokeOption) GetHybridMonitorFcTasksResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetHybridMonitorFcTasksResult, error) {
			args := v.(GetHybridMonitorFcTasksArgs)
			r, err := GetHybridMonitorFcTasks(ctx, &args, opts...)
			var s GetHybridMonitorFcTasksResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetHybridMonitorFcTasksResultOutput)
}

// A collection of arguments for invoking getHybridMonitorFcTasks.
type GetHybridMonitorFcTasksOutputArgs struct {
	// A list of Hybrid Monitor Fc Task IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The index warehouse where the host belongs.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	PageNumber pulumi.IntPtrInput    `pulumi:"pageNumber"`
	PageSize   pulumi.IntPtrInput    `pulumi:"pageSize"`
}

func (GetHybridMonitorFcTasksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHybridMonitorFcTasksArgs)(nil)).Elem()
}

// A collection of values returned by getHybridMonitorFcTasks.
type GetHybridMonitorFcTasksResultOutput struct{ *pulumi.OutputState }

func (GetHybridMonitorFcTasksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHybridMonitorFcTasksResult)(nil)).Elem()
}

func (o GetHybridMonitorFcTasksResultOutput) ToGetHybridMonitorFcTasksResultOutput() GetHybridMonitorFcTasksResultOutput {
	return o
}

func (o GetHybridMonitorFcTasksResultOutput) ToGetHybridMonitorFcTasksResultOutputWithContext(ctx context.Context) GetHybridMonitorFcTasksResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetHybridMonitorFcTasksResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHybridMonitorFcTasksResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetHybridMonitorFcTasksResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHybridMonitorFcTasksResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetHybridMonitorFcTasksResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHybridMonitorFcTasksResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o GetHybridMonitorFcTasksResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHybridMonitorFcTasksResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetHybridMonitorFcTasksResultOutput) PageNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetHybridMonitorFcTasksResult) *int { return v.PageNumber }).(pulumi.IntPtrOutput)
}

func (o GetHybridMonitorFcTasksResultOutput) PageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetHybridMonitorFcTasksResult) *int { return v.PageSize }).(pulumi.IntPtrOutput)
}

func (o GetHybridMonitorFcTasksResultOutput) Tasks() GetHybridMonitorFcTasksTaskArrayOutput {
	return o.ApplyT(func(v GetHybridMonitorFcTasksResult) []GetHybridMonitorFcTasksTask { return v.Tasks }).(GetHybridMonitorFcTasksTaskArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetHybridMonitorFcTasksResultOutput{})
}
