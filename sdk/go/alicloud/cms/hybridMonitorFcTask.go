// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloud Monitor Service Hybrid Monitor Fc Task resource.
//
// For information about Cloud Monitor Service Hybrid Monitor Fc Task and how to use it, see [What is Hybrid Monitor Fc Task](https://www.alibabacloud.com/help/en/cloudmonitor/latest/createhybridmonitortask).
//
// > **NOTE:** Available in v1.179.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cms.NewHybridMonitorFcTask(ctx, "example", &cms.HybridMonitorFcTaskArgs{
//				Namespace:    pulumi.String("example_value"),
//				TargetUserId: pulumi.String("example_value"),
//				YarmConfig:   pulumi.String("example_value"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cloud Monitor Service Hybrid Monitor Fc Task can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:cms/hybridMonitorFcTask:HybridMonitorFcTask example <hybrid_monitor_fc_task_id>:<namespace>
//
// ```
type HybridMonitorFcTask struct {
	pulumi.CustomResourceState

	// The ID of the monitoring task.
	HybridMonitorFcTaskId pulumi.StringOutput `pulumi:"hybridMonitorFcTaskId"`
	// the namespace of the Alibaba Cloud service.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// The ID of the member account. If you call API operations by using a management account, you can connect the Alibaba Cloud services that are activated for a member account in Resource Directory to Hybrid Cloud Monitoring. You can use Resource Directory to monitor Alibaba Cloud services across enterprise accounts.
	TargetUserId pulumi.StringOutput `pulumi:"targetUserId"`
	// The configuration file of the Alibaba Cloud service that you want to monitor by using Hybrid Cloud Monitoring.
	YarmConfig pulumi.StringOutput `pulumi:"yarmConfig"`
}

// NewHybridMonitorFcTask registers a new resource with the given unique name, arguments, and options.
func NewHybridMonitorFcTask(ctx *pulumi.Context,
	name string, args *HybridMonitorFcTaskArgs, opts ...pulumi.ResourceOption) (*HybridMonitorFcTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.YarmConfig == nil {
		return nil, errors.New("invalid value for required argument 'YarmConfig'")
	}
	var resource HybridMonitorFcTask
	err := ctx.RegisterResource("alicloud:cms/hybridMonitorFcTask:HybridMonitorFcTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHybridMonitorFcTask gets an existing HybridMonitorFcTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHybridMonitorFcTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HybridMonitorFcTaskState, opts ...pulumi.ResourceOption) (*HybridMonitorFcTask, error) {
	var resource HybridMonitorFcTask
	err := ctx.ReadResource("alicloud:cms/hybridMonitorFcTask:HybridMonitorFcTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HybridMonitorFcTask resources.
type hybridMonitorFcTaskState struct {
	// The ID of the monitoring task.
	HybridMonitorFcTaskId *string `pulumi:"hybridMonitorFcTaskId"`
	// the namespace of the Alibaba Cloud service.
	Namespace *string `pulumi:"namespace"`
	// The ID of the member account. If you call API operations by using a management account, you can connect the Alibaba Cloud services that are activated for a member account in Resource Directory to Hybrid Cloud Monitoring. You can use Resource Directory to monitor Alibaba Cloud services across enterprise accounts.
	TargetUserId *string `pulumi:"targetUserId"`
	// The configuration file of the Alibaba Cloud service that you want to monitor by using Hybrid Cloud Monitoring.
	YarmConfig *string `pulumi:"yarmConfig"`
}

type HybridMonitorFcTaskState struct {
	// The ID of the monitoring task.
	HybridMonitorFcTaskId pulumi.StringPtrInput
	// the namespace of the Alibaba Cloud service.
	Namespace pulumi.StringPtrInput
	// The ID of the member account. If you call API operations by using a management account, you can connect the Alibaba Cloud services that are activated for a member account in Resource Directory to Hybrid Cloud Monitoring. You can use Resource Directory to monitor Alibaba Cloud services across enterprise accounts.
	TargetUserId pulumi.StringPtrInput
	// The configuration file of the Alibaba Cloud service that you want to monitor by using Hybrid Cloud Monitoring.
	YarmConfig pulumi.StringPtrInput
}

func (HybridMonitorFcTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*hybridMonitorFcTaskState)(nil)).Elem()
}

type hybridMonitorFcTaskArgs struct {
	// the namespace of the Alibaba Cloud service.
	Namespace string `pulumi:"namespace"`
	// The ID of the member account. If you call API operations by using a management account, you can connect the Alibaba Cloud services that are activated for a member account in Resource Directory to Hybrid Cloud Monitoring. You can use Resource Directory to monitor Alibaba Cloud services across enterprise accounts.
	TargetUserId *string `pulumi:"targetUserId"`
	// The configuration file of the Alibaba Cloud service that you want to monitor by using Hybrid Cloud Monitoring.
	YarmConfig string `pulumi:"yarmConfig"`
}

// The set of arguments for constructing a HybridMonitorFcTask resource.
type HybridMonitorFcTaskArgs struct {
	// the namespace of the Alibaba Cloud service.
	Namespace pulumi.StringInput
	// The ID of the member account. If you call API operations by using a management account, you can connect the Alibaba Cloud services that are activated for a member account in Resource Directory to Hybrid Cloud Monitoring. You can use Resource Directory to monitor Alibaba Cloud services across enterprise accounts.
	TargetUserId pulumi.StringPtrInput
	// The configuration file of the Alibaba Cloud service that you want to monitor by using Hybrid Cloud Monitoring.
	YarmConfig pulumi.StringInput
}

func (HybridMonitorFcTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hybridMonitorFcTaskArgs)(nil)).Elem()
}

type HybridMonitorFcTaskInput interface {
	pulumi.Input

	ToHybridMonitorFcTaskOutput() HybridMonitorFcTaskOutput
	ToHybridMonitorFcTaskOutputWithContext(ctx context.Context) HybridMonitorFcTaskOutput
}

func (*HybridMonitorFcTask) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridMonitorFcTask)(nil)).Elem()
}

func (i *HybridMonitorFcTask) ToHybridMonitorFcTaskOutput() HybridMonitorFcTaskOutput {
	return i.ToHybridMonitorFcTaskOutputWithContext(context.Background())
}

func (i *HybridMonitorFcTask) ToHybridMonitorFcTaskOutputWithContext(ctx context.Context) HybridMonitorFcTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridMonitorFcTaskOutput)
}

// HybridMonitorFcTaskArrayInput is an input type that accepts HybridMonitorFcTaskArray and HybridMonitorFcTaskArrayOutput values.
// You can construct a concrete instance of `HybridMonitorFcTaskArrayInput` via:
//
//	HybridMonitorFcTaskArray{ HybridMonitorFcTaskArgs{...} }
type HybridMonitorFcTaskArrayInput interface {
	pulumi.Input

	ToHybridMonitorFcTaskArrayOutput() HybridMonitorFcTaskArrayOutput
	ToHybridMonitorFcTaskArrayOutputWithContext(context.Context) HybridMonitorFcTaskArrayOutput
}

type HybridMonitorFcTaskArray []HybridMonitorFcTaskInput

func (HybridMonitorFcTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HybridMonitorFcTask)(nil)).Elem()
}

func (i HybridMonitorFcTaskArray) ToHybridMonitorFcTaskArrayOutput() HybridMonitorFcTaskArrayOutput {
	return i.ToHybridMonitorFcTaskArrayOutputWithContext(context.Background())
}

func (i HybridMonitorFcTaskArray) ToHybridMonitorFcTaskArrayOutputWithContext(ctx context.Context) HybridMonitorFcTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridMonitorFcTaskArrayOutput)
}

// HybridMonitorFcTaskMapInput is an input type that accepts HybridMonitorFcTaskMap and HybridMonitorFcTaskMapOutput values.
// You can construct a concrete instance of `HybridMonitorFcTaskMapInput` via:
//
//	HybridMonitorFcTaskMap{ "key": HybridMonitorFcTaskArgs{...} }
type HybridMonitorFcTaskMapInput interface {
	pulumi.Input

	ToHybridMonitorFcTaskMapOutput() HybridMonitorFcTaskMapOutput
	ToHybridMonitorFcTaskMapOutputWithContext(context.Context) HybridMonitorFcTaskMapOutput
}

type HybridMonitorFcTaskMap map[string]HybridMonitorFcTaskInput

func (HybridMonitorFcTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HybridMonitorFcTask)(nil)).Elem()
}

func (i HybridMonitorFcTaskMap) ToHybridMonitorFcTaskMapOutput() HybridMonitorFcTaskMapOutput {
	return i.ToHybridMonitorFcTaskMapOutputWithContext(context.Background())
}

func (i HybridMonitorFcTaskMap) ToHybridMonitorFcTaskMapOutputWithContext(ctx context.Context) HybridMonitorFcTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridMonitorFcTaskMapOutput)
}

type HybridMonitorFcTaskOutput struct{ *pulumi.OutputState }

func (HybridMonitorFcTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridMonitorFcTask)(nil)).Elem()
}

func (o HybridMonitorFcTaskOutput) ToHybridMonitorFcTaskOutput() HybridMonitorFcTaskOutput {
	return o
}

func (o HybridMonitorFcTaskOutput) ToHybridMonitorFcTaskOutputWithContext(ctx context.Context) HybridMonitorFcTaskOutput {
	return o
}

// The ID of the monitoring task.
func (o HybridMonitorFcTaskOutput) HybridMonitorFcTaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridMonitorFcTask) pulumi.StringOutput { return v.HybridMonitorFcTaskId }).(pulumi.StringOutput)
}

// the namespace of the Alibaba Cloud service.
func (o HybridMonitorFcTaskOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridMonitorFcTask) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// The ID of the member account. If you call API operations by using a management account, you can connect the Alibaba Cloud services that are activated for a member account in Resource Directory to Hybrid Cloud Monitoring. You can use Resource Directory to monitor Alibaba Cloud services across enterprise accounts.
func (o HybridMonitorFcTaskOutput) TargetUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridMonitorFcTask) pulumi.StringOutput { return v.TargetUserId }).(pulumi.StringOutput)
}

// The configuration file of the Alibaba Cloud service that you want to monitor by using Hybrid Cloud Monitoring.
func (o HybridMonitorFcTaskOutput) YarmConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridMonitorFcTask) pulumi.StringOutput { return v.YarmConfig }).(pulumi.StringOutput)
}

type HybridMonitorFcTaskArrayOutput struct{ *pulumi.OutputState }

func (HybridMonitorFcTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HybridMonitorFcTask)(nil)).Elem()
}

func (o HybridMonitorFcTaskArrayOutput) ToHybridMonitorFcTaskArrayOutput() HybridMonitorFcTaskArrayOutput {
	return o
}

func (o HybridMonitorFcTaskArrayOutput) ToHybridMonitorFcTaskArrayOutputWithContext(ctx context.Context) HybridMonitorFcTaskArrayOutput {
	return o
}

func (o HybridMonitorFcTaskArrayOutput) Index(i pulumi.IntInput) HybridMonitorFcTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HybridMonitorFcTask {
		return vs[0].([]*HybridMonitorFcTask)[vs[1].(int)]
	}).(HybridMonitorFcTaskOutput)
}

type HybridMonitorFcTaskMapOutput struct{ *pulumi.OutputState }

func (HybridMonitorFcTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HybridMonitorFcTask)(nil)).Elem()
}

func (o HybridMonitorFcTaskMapOutput) ToHybridMonitorFcTaskMapOutput() HybridMonitorFcTaskMapOutput {
	return o
}

func (o HybridMonitorFcTaskMapOutput) ToHybridMonitorFcTaskMapOutputWithContext(ctx context.Context) HybridMonitorFcTaskMapOutput {
	return o
}

func (o HybridMonitorFcTaskMapOutput) MapIndex(k pulumi.StringInput) HybridMonitorFcTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HybridMonitorFcTask {
		return vs[0].(map[string]*HybridMonitorFcTask)[vs[1].(string)]
	}).(HybridMonitorFcTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HybridMonitorFcTaskInput)(nil)).Elem(), &HybridMonitorFcTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*HybridMonitorFcTaskArrayInput)(nil)).Elem(), HybridMonitorFcTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HybridMonitorFcTaskMapInput)(nil)).Elem(), HybridMonitorFcTaskMap{})
	pulumi.RegisterOutputType(HybridMonitorFcTaskOutput{})
	pulumi.RegisterOutputType(HybridMonitorFcTaskArrayOutput{})
	pulumi.RegisterOutputType(HybridMonitorFcTaskMapOutput{})
}
