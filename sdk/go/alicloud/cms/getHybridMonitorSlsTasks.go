// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides the Cms Hybrid Monitor Sls Tasks of the current Alibaba Cloud user.
//
// > **NOTE:** Available in v1.179.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ids, err := cms.GetHybridMonitorSlsTasks(ctx, &cms.GetHybridMonitorSlsTasksArgs{
//				Ids: []string{
//					"example_value",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("cmsHybridMonitorSlsTaskId1", ids.Tasks[0].Id)
//			return nil
//		})
//	}
//
// ```
func GetHybridMonitorSlsTasks(ctx *pulumi.Context, args *GetHybridMonitorSlsTasksArgs, opts ...pulumi.InvokeOption) (*GetHybridMonitorSlsTasksResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetHybridMonitorSlsTasksResult
	err := ctx.Invoke("alicloud:cms/getHybridMonitorSlsTasks:getHybridMonitorSlsTasks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHybridMonitorSlsTasks.
type GetHybridMonitorSlsTasksArgs struct {
	// A list of Hybrid Monitor Sls Task IDs.
	Ids []string `pulumi:"ids"`
	// The keyword that is used to search for metric import tasks.
	Keyword *string `pulumi:"keyword"`
	// The namespace to which the host belongs.
	Namespace *string `pulumi:"namespace"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	PageNumber *int    `pulumi:"pageNumber"`
	PageSize   *int    `pulumi:"pageSize"`
}

// A collection of values returned by getHybridMonitorSlsTasks.
type GetHybridMonitorSlsTasksResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string                         `pulumi:"id"`
	Ids        []string                       `pulumi:"ids"`
	Keyword    *string                        `pulumi:"keyword"`
	Namespace  *string                        `pulumi:"namespace"`
	OutputFile *string                        `pulumi:"outputFile"`
	PageNumber *int                           `pulumi:"pageNumber"`
	PageSize   *int                           `pulumi:"pageSize"`
	Tasks      []GetHybridMonitorSlsTasksTask `pulumi:"tasks"`
}

func GetHybridMonitorSlsTasksOutput(ctx *pulumi.Context, args GetHybridMonitorSlsTasksOutputArgs, opts ...pulumi.InvokeOption) GetHybridMonitorSlsTasksResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetHybridMonitorSlsTasksResult, error) {
			args := v.(GetHybridMonitorSlsTasksArgs)
			r, err := GetHybridMonitorSlsTasks(ctx, &args, opts...)
			var s GetHybridMonitorSlsTasksResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetHybridMonitorSlsTasksResultOutput)
}

// A collection of arguments for invoking getHybridMonitorSlsTasks.
type GetHybridMonitorSlsTasksOutputArgs struct {
	// A list of Hybrid Monitor Sls Task IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The keyword that is used to search for metric import tasks.
	Keyword pulumi.StringPtrInput `pulumi:"keyword"`
	// The namespace to which the host belongs.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	PageNumber pulumi.IntPtrInput    `pulumi:"pageNumber"`
	PageSize   pulumi.IntPtrInput    `pulumi:"pageSize"`
}

func (GetHybridMonitorSlsTasksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHybridMonitorSlsTasksArgs)(nil)).Elem()
}

// A collection of values returned by getHybridMonitorSlsTasks.
type GetHybridMonitorSlsTasksResultOutput struct{ *pulumi.OutputState }

func (GetHybridMonitorSlsTasksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHybridMonitorSlsTasksResult)(nil)).Elem()
}

func (o GetHybridMonitorSlsTasksResultOutput) ToGetHybridMonitorSlsTasksResultOutput() GetHybridMonitorSlsTasksResultOutput {
	return o
}

func (o GetHybridMonitorSlsTasksResultOutput) ToGetHybridMonitorSlsTasksResultOutputWithContext(ctx context.Context) GetHybridMonitorSlsTasksResultOutput {
	return o
}

func (o GetHybridMonitorSlsTasksResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetHybridMonitorSlsTasksResult] {
	return pulumix.Output[GetHybridMonitorSlsTasksResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o GetHybridMonitorSlsTasksResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHybridMonitorSlsTasksResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetHybridMonitorSlsTasksResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHybridMonitorSlsTasksResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetHybridMonitorSlsTasksResultOutput) Keyword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHybridMonitorSlsTasksResult) *string { return v.Keyword }).(pulumi.StringPtrOutput)
}

func (o GetHybridMonitorSlsTasksResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHybridMonitorSlsTasksResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o GetHybridMonitorSlsTasksResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHybridMonitorSlsTasksResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetHybridMonitorSlsTasksResultOutput) PageNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetHybridMonitorSlsTasksResult) *int { return v.PageNumber }).(pulumi.IntPtrOutput)
}

func (o GetHybridMonitorSlsTasksResultOutput) PageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetHybridMonitorSlsTasksResult) *int { return v.PageSize }).(pulumi.IntPtrOutput)
}

func (o GetHybridMonitorSlsTasksResultOutput) Tasks() GetHybridMonitorSlsTasksTaskArrayOutput {
	return o.ApplyT(func(v GetHybridMonitorSlsTasksResult) []GetHybridMonitorSlsTasksTask { return v.Tasks }).(GetHybridMonitorSlsTasksTaskArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetHybridMonitorSlsTasksResultOutput{})
}
