// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloud Monitor Service Sls Group resource.
//
// For information about Cloud Monitor Service Sls Group and how to use it, see [What is Sls Group](https://www.alibabacloud.com/help/doc-detail/28608.htm).
//
// > **NOTE:** Available in v1.171.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			this, err := alicloud.GetAccount(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = cms.NewSlsGroup(ctx, "default", &cms.SlsGroupArgs{
//				SlsGroupConfigs: cms.SlsGroupSlsGroupConfigArray{
//					&cms.SlsGroupSlsGroupConfigArgs{
//						SlsUserId:   *pulumi.String(this.Id),
//						SlsLogstore: pulumi.String("Logstore-ECS"),
//						SlsProject:  pulumi.String("aliyun-project"),
//						SlsRegion:   pulumi.String("cn-hangzhou"),
//					},
//				},
//				SlsGroupDescription: pulumi.Any(_var.Name),
//				SlsGroupName:        pulumi.Any(_var.Name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cloud Monitor Service Sls Group can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:cms/slsGroup:SlsGroup example <sls_group_name>
//
// ```
type SlsGroup struct {
	pulumi.CustomResourceState

	// The Config of the Sls Group. You can specify up to 25 Config. See the following `Block slsGroupConfig`.
	SlsGroupConfigs SlsGroupSlsGroupConfigArrayOutput `pulumi:"slsGroupConfigs"`
	// The Description of the Sls Group.
	SlsGroupDescription pulumi.StringPtrOutput `pulumi:"slsGroupDescription"`
	// The name of the resource. The name must be `2` to `32` characters in length, and can contain letters, digits and underscores (_). It must start with a letter.
	SlsGroupName pulumi.StringOutput `pulumi:"slsGroupName"`
}

// NewSlsGroup registers a new resource with the given unique name, arguments, and options.
func NewSlsGroup(ctx *pulumi.Context,
	name string, args *SlsGroupArgs, opts ...pulumi.ResourceOption) (*SlsGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SlsGroupConfigs == nil {
		return nil, errors.New("invalid value for required argument 'SlsGroupConfigs'")
	}
	if args.SlsGroupName == nil {
		return nil, errors.New("invalid value for required argument 'SlsGroupName'")
	}
	var resource SlsGroup
	err := ctx.RegisterResource("alicloud:cms/slsGroup:SlsGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlsGroup gets an existing SlsGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlsGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SlsGroupState, opts ...pulumi.ResourceOption) (*SlsGroup, error) {
	var resource SlsGroup
	err := ctx.ReadResource("alicloud:cms/slsGroup:SlsGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SlsGroup resources.
type slsGroupState struct {
	// The Config of the Sls Group. You can specify up to 25 Config. See the following `Block slsGroupConfig`.
	SlsGroupConfigs []SlsGroupSlsGroupConfig `pulumi:"slsGroupConfigs"`
	// The Description of the Sls Group.
	SlsGroupDescription *string `pulumi:"slsGroupDescription"`
	// The name of the resource. The name must be `2` to `32` characters in length, and can contain letters, digits and underscores (_). It must start with a letter.
	SlsGroupName *string `pulumi:"slsGroupName"`
}

type SlsGroupState struct {
	// The Config of the Sls Group. You can specify up to 25 Config. See the following `Block slsGroupConfig`.
	SlsGroupConfigs SlsGroupSlsGroupConfigArrayInput
	// The Description of the Sls Group.
	SlsGroupDescription pulumi.StringPtrInput
	// The name of the resource. The name must be `2` to `32` characters in length, and can contain letters, digits and underscores (_). It must start with a letter.
	SlsGroupName pulumi.StringPtrInput
}

func (SlsGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*slsGroupState)(nil)).Elem()
}

type slsGroupArgs struct {
	// The Config of the Sls Group. You can specify up to 25 Config. See the following `Block slsGroupConfig`.
	SlsGroupConfigs []SlsGroupSlsGroupConfig `pulumi:"slsGroupConfigs"`
	// The Description of the Sls Group.
	SlsGroupDescription *string `pulumi:"slsGroupDescription"`
	// The name of the resource. The name must be `2` to `32` characters in length, and can contain letters, digits and underscores (_). It must start with a letter.
	SlsGroupName string `pulumi:"slsGroupName"`
}

// The set of arguments for constructing a SlsGroup resource.
type SlsGroupArgs struct {
	// The Config of the Sls Group. You can specify up to 25 Config. See the following `Block slsGroupConfig`.
	SlsGroupConfigs SlsGroupSlsGroupConfigArrayInput
	// The Description of the Sls Group.
	SlsGroupDescription pulumi.StringPtrInput
	// The name of the resource. The name must be `2` to `32` characters in length, and can contain letters, digits and underscores (_). It must start with a letter.
	SlsGroupName pulumi.StringInput
}

func (SlsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*slsGroupArgs)(nil)).Elem()
}

type SlsGroupInput interface {
	pulumi.Input

	ToSlsGroupOutput() SlsGroupOutput
	ToSlsGroupOutputWithContext(ctx context.Context) SlsGroupOutput
}

func (*SlsGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsGroup)(nil)).Elem()
}

func (i *SlsGroup) ToSlsGroupOutput() SlsGroupOutput {
	return i.ToSlsGroupOutputWithContext(context.Background())
}

func (i *SlsGroup) ToSlsGroupOutputWithContext(ctx context.Context) SlsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsGroupOutput)
}

// SlsGroupArrayInput is an input type that accepts SlsGroupArray and SlsGroupArrayOutput values.
// You can construct a concrete instance of `SlsGroupArrayInput` via:
//
//	SlsGroupArray{ SlsGroupArgs{...} }
type SlsGroupArrayInput interface {
	pulumi.Input

	ToSlsGroupArrayOutput() SlsGroupArrayOutput
	ToSlsGroupArrayOutputWithContext(context.Context) SlsGroupArrayOutput
}

type SlsGroupArray []SlsGroupInput

func (SlsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlsGroup)(nil)).Elem()
}

func (i SlsGroupArray) ToSlsGroupArrayOutput() SlsGroupArrayOutput {
	return i.ToSlsGroupArrayOutputWithContext(context.Background())
}

func (i SlsGroupArray) ToSlsGroupArrayOutputWithContext(ctx context.Context) SlsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsGroupArrayOutput)
}

// SlsGroupMapInput is an input type that accepts SlsGroupMap and SlsGroupMapOutput values.
// You can construct a concrete instance of `SlsGroupMapInput` via:
//
//	SlsGroupMap{ "key": SlsGroupArgs{...} }
type SlsGroupMapInput interface {
	pulumi.Input

	ToSlsGroupMapOutput() SlsGroupMapOutput
	ToSlsGroupMapOutputWithContext(context.Context) SlsGroupMapOutput
}

type SlsGroupMap map[string]SlsGroupInput

func (SlsGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlsGroup)(nil)).Elem()
}

func (i SlsGroupMap) ToSlsGroupMapOutput() SlsGroupMapOutput {
	return i.ToSlsGroupMapOutputWithContext(context.Background())
}

func (i SlsGroupMap) ToSlsGroupMapOutputWithContext(ctx context.Context) SlsGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsGroupMapOutput)
}

type SlsGroupOutput struct{ *pulumi.OutputState }

func (SlsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsGroup)(nil)).Elem()
}

func (o SlsGroupOutput) ToSlsGroupOutput() SlsGroupOutput {
	return o
}

func (o SlsGroupOutput) ToSlsGroupOutputWithContext(ctx context.Context) SlsGroupOutput {
	return o
}

// The Config of the Sls Group. You can specify up to 25 Config. See the following `Block slsGroupConfig`.
func (o SlsGroupOutput) SlsGroupConfigs() SlsGroupSlsGroupConfigArrayOutput {
	return o.ApplyT(func(v *SlsGroup) SlsGroupSlsGroupConfigArrayOutput { return v.SlsGroupConfigs }).(SlsGroupSlsGroupConfigArrayOutput)
}

// The Description of the Sls Group.
func (o SlsGroupOutput) SlsGroupDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsGroup) pulumi.StringPtrOutput { return v.SlsGroupDescription }).(pulumi.StringPtrOutput)
}

// The name of the resource. The name must be `2` to `32` characters in length, and can contain letters, digits and underscores (_). It must start with a letter.
func (o SlsGroupOutput) SlsGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *SlsGroup) pulumi.StringOutput { return v.SlsGroupName }).(pulumi.StringOutput)
}

type SlsGroupArrayOutput struct{ *pulumi.OutputState }

func (SlsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlsGroup)(nil)).Elem()
}

func (o SlsGroupArrayOutput) ToSlsGroupArrayOutput() SlsGroupArrayOutput {
	return o
}

func (o SlsGroupArrayOutput) ToSlsGroupArrayOutputWithContext(ctx context.Context) SlsGroupArrayOutput {
	return o
}

func (o SlsGroupArrayOutput) Index(i pulumi.IntInput) SlsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SlsGroup {
		return vs[0].([]*SlsGroup)[vs[1].(int)]
	}).(SlsGroupOutput)
}

type SlsGroupMapOutput struct{ *pulumi.OutputState }

func (SlsGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlsGroup)(nil)).Elem()
}

func (o SlsGroupMapOutput) ToSlsGroupMapOutput() SlsGroupMapOutput {
	return o
}

func (o SlsGroupMapOutput) ToSlsGroupMapOutputWithContext(ctx context.Context) SlsGroupMapOutput {
	return o
}

func (o SlsGroupMapOutput) MapIndex(k pulumi.StringInput) SlsGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SlsGroup {
		return vs[0].(map[string]*SlsGroup)[vs[1].(string)]
	}).(SlsGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SlsGroupInput)(nil)).Elem(), &SlsGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsGroupArrayInput)(nil)).Elem(), SlsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsGroupMapInput)(nil)).Elem(), SlsGroupMap{})
	pulumi.RegisterOutputType(SlsGroupOutput{})
	pulumi.RegisterOutputType(SlsGroupArrayOutput{})
	pulumi.RegisterOutputType(SlsGroupMapOutput{})
}
