// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ehpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Ehpc Job Template resource.
//
// For information about Ehpc Job Template and how to use it, see [What is Job Template](https://www.alibabacloud.com/help/product/57664.html).
//
// > **NOTE:** Available in v1.133.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ehpc"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ehpc.NewJobTemplate(ctx, "default", &ehpc.JobTemplateArgs{
// 			CommandLine:     pulumi.String("./LammpsTest/lammps.pbs"),
// 			JobTemplateName: pulumi.String("example_value"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Ehpc Job Template can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:ehpc/jobTemplate:JobTemplate example <id>
// ```
type JobTemplate struct {
	pulumi.CustomResourceState

	// Queue Jobs, Is of the Form: 1-10:2.
	ArrayRequest pulumi.StringPtrOutput `pulumi:"arrayRequest"`
	// Job Maximum Run Time.
	ClockTime pulumi.StringPtrOutput `pulumi:"clockTime"`
	// Job Commands.
	CommandLine pulumi.StringOutput `pulumi:"commandLine"`
	// A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
	Gpu pulumi.IntPtrOutput `pulumi:"gpu"`
	// A Job Template Name.
	JobTemplateName pulumi.StringOutput `pulumi:"jobTemplateName"`
	// A Single Compute Node Maximum Memory.
	Mem pulumi.StringPtrOutput `pulumi:"mem"`
	// Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
	Node pulumi.IntPtrOutput `pulumi:"node"`
	// Job Commands the Directory.
	PackagePath pulumi.StringPtrOutput `pulumi:"packagePath"`
	// The Job Priority.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// The Job Queue.
	Queue pulumi.StringPtrOutput `pulumi:"queue"`
	// If the Job Is Support for the Re-Run.
	ReRunable pulumi.BoolOutput `pulumi:"reRunable"`
	// The name of the user who performed the job.
	RunasUser pulumi.StringPtrOutput `pulumi:"runasUser"`
	// Error Output Path.
	StderrRedirectPath pulumi.StringPtrOutput `pulumi:"stderrRedirectPath"`
	// Standard Output Path and.
	StdoutRedirectPath pulumi.StringPtrOutput `pulumi:"stdoutRedirectPath"`
	// A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
	Task pulumi.IntPtrOutput `pulumi:"task"`
	// A Single Task and the Number of Required Threads.
	Thread pulumi.IntPtrOutput `pulumi:"thread"`
	// The Job of the Environment Variable.
	Variables pulumi.StringPtrOutput `pulumi:"variables"`
}

// NewJobTemplate registers a new resource with the given unique name, arguments, and options.
func NewJobTemplate(ctx *pulumi.Context,
	name string, args *JobTemplateArgs, opts ...pulumi.ResourceOption) (*JobTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CommandLine == nil {
		return nil, errors.New("invalid value for required argument 'CommandLine'")
	}
	if args.JobTemplateName == nil {
		return nil, errors.New("invalid value for required argument 'JobTemplateName'")
	}
	var resource JobTemplate
	err := ctx.RegisterResource("alicloud:ehpc/jobTemplate:JobTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobTemplate gets an existing JobTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobTemplateState, opts ...pulumi.ResourceOption) (*JobTemplate, error) {
	var resource JobTemplate
	err := ctx.ReadResource("alicloud:ehpc/jobTemplate:JobTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobTemplate resources.
type jobTemplateState struct {
	// Queue Jobs, Is of the Form: 1-10:2.
	ArrayRequest *string `pulumi:"arrayRequest"`
	// Job Maximum Run Time.
	ClockTime *string `pulumi:"clockTime"`
	// Job Commands.
	CommandLine *string `pulumi:"commandLine"`
	// A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
	Gpu *int `pulumi:"gpu"`
	// A Job Template Name.
	JobTemplateName *string `pulumi:"jobTemplateName"`
	// A Single Compute Node Maximum Memory.
	Mem *string `pulumi:"mem"`
	// Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
	Node *int `pulumi:"node"`
	// Job Commands the Directory.
	PackagePath *string `pulumi:"packagePath"`
	// The Job Priority.
	Priority *int `pulumi:"priority"`
	// The Job Queue.
	Queue *string `pulumi:"queue"`
	// If the Job Is Support for the Re-Run.
	ReRunable *bool `pulumi:"reRunable"`
	// The name of the user who performed the job.
	RunasUser *string `pulumi:"runasUser"`
	// Error Output Path.
	StderrRedirectPath *string `pulumi:"stderrRedirectPath"`
	// Standard Output Path and.
	StdoutRedirectPath *string `pulumi:"stdoutRedirectPath"`
	// A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
	Task *int `pulumi:"task"`
	// A Single Task and the Number of Required Threads.
	Thread *int `pulumi:"thread"`
	// The Job of the Environment Variable.
	Variables *string `pulumi:"variables"`
}

type JobTemplateState struct {
	// Queue Jobs, Is of the Form: 1-10:2.
	ArrayRequest pulumi.StringPtrInput
	// Job Maximum Run Time.
	ClockTime pulumi.StringPtrInput
	// Job Commands.
	CommandLine pulumi.StringPtrInput
	// A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
	Gpu pulumi.IntPtrInput
	// A Job Template Name.
	JobTemplateName pulumi.StringPtrInput
	// A Single Compute Node Maximum Memory.
	Mem pulumi.StringPtrInput
	// Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
	Node pulumi.IntPtrInput
	// Job Commands the Directory.
	PackagePath pulumi.StringPtrInput
	// The Job Priority.
	Priority pulumi.IntPtrInput
	// The Job Queue.
	Queue pulumi.StringPtrInput
	// If the Job Is Support for the Re-Run.
	ReRunable pulumi.BoolPtrInput
	// The name of the user who performed the job.
	RunasUser pulumi.StringPtrInput
	// Error Output Path.
	StderrRedirectPath pulumi.StringPtrInput
	// Standard Output Path and.
	StdoutRedirectPath pulumi.StringPtrInput
	// A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
	Task pulumi.IntPtrInput
	// A Single Task and the Number of Required Threads.
	Thread pulumi.IntPtrInput
	// The Job of the Environment Variable.
	Variables pulumi.StringPtrInput
}

func (JobTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobTemplateState)(nil)).Elem()
}

type jobTemplateArgs struct {
	// Queue Jobs, Is of the Form: 1-10:2.
	ArrayRequest *string `pulumi:"arrayRequest"`
	// Job Maximum Run Time.
	ClockTime *string `pulumi:"clockTime"`
	// Job Commands.
	CommandLine string `pulumi:"commandLine"`
	// A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
	Gpu *int `pulumi:"gpu"`
	// A Job Template Name.
	JobTemplateName string `pulumi:"jobTemplateName"`
	// A Single Compute Node Maximum Memory.
	Mem *string `pulumi:"mem"`
	// Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
	Node *int `pulumi:"node"`
	// Job Commands the Directory.
	PackagePath *string `pulumi:"packagePath"`
	// The Job Priority.
	Priority *int `pulumi:"priority"`
	// The Job Queue.
	Queue *string `pulumi:"queue"`
	// If the Job Is Support for the Re-Run.
	ReRunable *bool `pulumi:"reRunable"`
	// The name of the user who performed the job.
	RunasUser *string `pulumi:"runasUser"`
	// Error Output Path.
	StderrRedirectPath *string `pulumi:"stderrRedirectPath"`
	// Standard Output Path and.
	StdoutRedirectPath *string `pulumi:"stdoutRedirectPath"`
	// A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
	Task *int `pulumi:"task"`
	// A Single Task and the Number of Required Threads.
	Thread *int `pulumi:"thread"`
	// The Job of the Environment Variable.
	Variables *string `pulumi:"variables"`
}

// The set of arguments for constructing a JobTemplate resource.
type JobTemplateArgs struct {
	// Queue Jobs, Is of the Form: 1-10:2.
	ArrayRequest pulumi.StringPtrInput
	// Job Maximum Run Time.
	ClockTime pulumi.StringPtrInput
	// Job Commands.
	CommandLine pulumi.StringInput
	// A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
	Gpu pulumi.IntPtrInput
	// A Job Template Name.
	JobTemplateName pulumi.StringInput
	// A Single Compute Node Maximum Memory.
	Mem pulumi.StringPtrInput
	// Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
	Node pulumi.IntPtrInput
	// Job Commands the Directory.
	PackagePath pulumi.StringPtrInput
	// The Job Priority.
	Priority pulumi.IntPtrInput
	// The Job Queue.
	Queue pulumi.StringPtrInput
	// If the Job Is Support for the Re-Run.
	ReRunable pulumi.BoolPtrInput
	// The name of the user who performed the job.
	RunasUser pulumi.StringPtrInput
	// Error Output Path.
	StderrRedirectPath pulumi.StringPtrInput
	// Standard Output Path and.
	StdoutRedirectPath pulumi.StringPtrInput
	// A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
	Task pulumi.IntPtrInput
	// A Single Task and the Number of Required Threads.
	Thread pulumi.IntPtrInput
	// The Job of the Environment Variable.
	Variables pulumi.StringPtrInput
}

func (JobTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobTemplateArgs)(nil)).Elem()
}

type JobTemplateInput interface {
	pulumi.Input

	ToJobTemplateOutput() JobTemplateOutput
	ToJobTemplateOutputWithContext(ctx context.Context) JobTemplateOutput
}

func (*JobTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**JobTemplate)(nil)).Elem()
}

func (i *JobTemplate) ToJobTemplateOutput() JobTemplateOutput {
	return i.ToJobTemplateOutputWithContext(context.Background())
}

func (i *JobTemplate) ToJobTemplateOutputWithContext(ctx context.Context) JobTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateOutput)
}

// JobTemplateArrayInput is an input type that accepts JobTemplateArray and JobTemplateArrayOutput values.
// You can construct a concrete instance of `JobTemplateArrayInput` via:
//
//          JobTemplateArray{ JobTemplateArgs{...} }
type JobTemplateArrayInput interface {
	pulumi.Input

	ToJobTemplateArrayOutput() JobTemplateArrayOutput
	ToJobTemplateArrayOutputWithContext(context.Context) JobTemplateArrayOutput
}

type JobTemplateArray []JobTemplateInput

func (JobTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobTemplate)(nil)).Elem()
}

func (i JobTemplateArray) ToJobTemplateArrayOutput() JobTemplateArrayOutput {
	return i.ToJobTemplateArrayOutputWithContext(context.Background())
}

func (i JobTemplateArray) ToJobTemplateArrayOutputWithContext(ctx context.Context) JobTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateArrayOutput)
}

// JobTemplateMapInput is an input type that accepts JobTemplateMap and JobTemplateMapOutput values.
// You can construct a concrete instance of `JobTemplateMapInput` via:
//
//          JobTemplateMap{ "key": JobTemplateArgs{...} }
type JobTemplateMapInput interface {
	pulumi.Input

	ToJobTemplateMapOutput() JobTemplateMapOutput
	ToJobTemplateMapOutputWithContext(context.Context) JobTemplateMapOutput
}

type JobTemplateMap map[string]JobTemplateInput

func (JobTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobTemplate)(nil)).Elem()
}

func (i JobTemplateMap) ToJobTemplateMapOutput() JobTemplateMapOutput {
	return i.ToJobTemplateMapOutputWithContext(context.Background())
}

func (i JobTemplateMap) ToJobTemplateMapOutputWithContext(ctx context.Context) JobTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateMapOutput)
}

type JobTemplateOutput struct{ *pulumi.OutputState }

func (JobTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobTemplate)(nil)).Elem()
}

func (o JobTemplateOutput) ToJobTemplateOutput() JobTemplateOutput {
	return o
}

func (o JobTemplateOutput) ToJobTemplateOutputWithContext(ctx context.Context) JobTemplateOutput {
	return o
}

type JobTemplateArrayOutput struct{ *pulumi.OutputState }

func (JobTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobTemplate)(nil)).Elem()
}

func (o JobTemplateArrayOutput) ToJobTemplateArrayOutput() JobTemplateArrayOutput {
	return o
}

func (o JobTemplateArrayOutput) ToJobTemplateArrayOutputWithContext(ctx context.Context) JobTemplateArrayOutput {
	return o
}

func (o JobTemplateArrayOutput) Index(i pulumi.IntInput) JobTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobTemplate {
		return vs[0].([]*JobTemplate)[vs[1].(int)]
	}).(JobTemplateOutput)
}

type JobTemplateMapOutput struct{ *pulumi.OutputState }

func (JobTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobTemplate)(nil)).Elem()
}

func (o JobTemplateMapOutput) ToJobTemplateMapOutput() JobTemplateMapOutput {
	return o
}

func (o JobTemplateMapOutput) ToJobTemplateMapOutputWithContext(ctx context.Context) JobTemplateMapOutput {
	return o
}

func (o JobTemplateMapOutput) MapIndex(k pulumi.StringInput) JobTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobTemplate {
		return vs[0].(map[string]*JobTemplate)[vs[1].(string)]
	}).(JobTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobTemplateInput)(nil)).Elem(), &JobTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTemplateArrayInput)(nil)).Elem(), JobTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTemplateMapInput)(nil)).Elem(), JobTemplateMap{})
	pulumi.RegisterOutputType(JobTemplateOutput{})
	pulumi.RegisterOutputType(JobTemplateArrayOutput{})
	pulumi.RegisterOutputType(JobTemplateMapOutput{})
}
