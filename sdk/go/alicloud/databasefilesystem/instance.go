// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databasefilesystem

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DBFS Instance resource.
//
// For information about DBFS Instance and how to use it, see [What is Instance](https://help.aliyun.com/document_detail/149726.html).
//
// > **NOTE:** Available in v1.136.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/databasefilesystem"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := databasefilesystem.NewInstance(ctx, "example", &databasefilesystem.InstanceArgs{
// 			Category:     pulumi.String("standard"),
// 			InstanceName: pulumi.String("example_value"),
// 			Size:         pulumi.Int(1),
// 			ZoneId:       pulumi.String("example_value"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// DBFS Instance can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:databasefilesystem/instance:Instance example <id>
// ```
type Instance struct {
	pulumi.CustomResourceState

	// The type of the Database file system. Valid values: `standard`.
	Category pulumi.StringOutput `pulumi:"category"`
	// Whether to delete the original snapshot after the DBFS is created using the snapshot. Valid values : `true` anf `false`.
	DeleteSnapshot pulumi.BoolPtrOutput `pulumi:"deleteSnapshot"`
	// The collection of ECS instances mounted to the Database file system. See the following `Block ecsList`. **NOTE:** Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS.
	//
	// Deprecated: Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS.
	EcsLists InstanceEcsListArrayOutput `pulumi:"ecsLists"`
	// Whether to create the Database file system in RAID way. Valid values : `true` anf `false`.
	EnableRaid pulumi.BoolPtrOutput `pulumi:"enableRaid"`
	// Whether to encrypt the database file system. Valid values: `true` and `false`.
	Encryption pulumi.BoolPtrOutput `pulumi:"encryption"`
	// The name of the Database file system.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// The KMS key ID of the Database file system used. This parameter is valid When `encryption` parameter is set to `true`.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// The performance level of the Database file system. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	PerformanceLevel pulumi.StringOutput `pulumi:"performanceLevel"`
	// The number of strip. This parameter is valid When `enableRaid` parameter is set to `true`.
	RaidStripeUnitNumber pulumi.StringPtrOutput `pulumi:"raidStripeUnitNumber"`
	// The size Of the Database file system. Unit: GiB.
	Size pulumi.IntOutput `pulumi:"size"`
	// The snapshot id of the Database file system.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	Status     pulumi.StringOutput    `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// The Zone ID of the Database file system.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	var resource Instance
	err := ctx.RegisterResource("alicloud:databasefilesystem/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("alicloud:databasefilesystem/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// The type of the Database file system. Valid values: `standard`.
	Category *string `pulumi:"category"`
	// Whether to delete the original snapshot after the DBFS is created using the snapshot. Valid values : `true` anf `false`.
	DeleteSnapshot *bool `pulumi:"deleteSnapshot"`
	// The collection of ECS instances mounted to the Database file system. See the following `Block ecsList`. **NOTE:** Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS.
	//
	// Deprecated: Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS.
	EcsLists []InstanceEcsList `pulumi:"ecsLists"`
	// Whether to create the Database file system in RAID way. Valid values : `true` anf `false`.
	EnableRaid *bool `pulumi:"enableRaid"`
	// Whether to encrypt the database file system. Valid values: `true` and `false`.
	Encryption *bool `pulumi:"encryption"`
	// The name of the Database file system.
	InstanceName *string `pulumi:"instanceName"`
	// The KMS key ID of the Database file system used. This parameter is valid When `encryption` parameter is set to `true`.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The performance level of the Database file system. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	PerformanceLevel *string `pulumi:"performanceLevel"`
	// The number of strip. This parameter is valid When `enableRaid` parameter is set to `true`.
	RaidStripeUnitNumber *string `pulumi:"raidStripeUnitNumber"`
	// The size Of the Database file system. Unit: GiB.
	Size *int `pulumi:"size"`
	// The snapshot id of the Database file system.
	SnapshotId *string `pulumi:"snapshotId"`
	Status     *string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The Zone ID of the Database file system.
	ZoneId *string `pulumi:"zoneId"`
}

type InstanceState struct {
	// The type of the Database file system. Valid values: `standard`.
	Category pulumi.StringPtrInput
	// Whether to delete the original snapshot after the DBFS is created using the snapshot. Valid values : `true` anf `false`.
	DeleteSnapshot pulumi.BoolPtrInput
	// The collection of ECS instances mounted to the Database file system. See the following `Block ecsList`. **NOTE:** Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS.
	//
	// Deprecated: Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS.
	EcsLists InstanceEcsListArrayInput
	// Whether to create the Database file system in RAID way. Valid values : `true` anf `false`.
	EnableRaid pulumi.BoolPtrInput
	// Whether to encrypt the database file system. Valid values: `true` and `false`.
	Encryption pulumi.BoolPtrInput
	// The name of the Database file system.
	InstanceName pulumi.StringPtrInput
	// The KMS key ID of the Database file system used. This parameter is valid When `encryption` parameter is set to `true`.
	KmsKeyId pulumi.StringPtrInput
	// The performance level of the Database file system. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	PerformanceLevel pulumi.StringPtrInput
	// The number of strip. This parameter is valid When `enableRaid` parameter is set to `true`.
	RaidStripeUnitNumber pulumi.StringPtrInput
	// The size Of the Database file system. Unit: GiB.
	Size pulumi.IntPtrInput
	// The snapshot id of the Database file system.
	SnapshotId pulumi.StringPtrInput
	Status     pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
	// The Zone ID of the Database file system.
	ZoneId pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// The type of the Database file system. Valid values: `standard`.
	Category *string `pulumi:"category"`
	// Whether to delete the original snapshot after the DBFS is created using the snapshot. Valid values : `true` anf `false`.
	DeleteSnapshot *bool `pulumi:"deleteSnapshot"`
	// The collection of ECS instances mounted to the Database file system. See the following `Block ecsList`. **NOTE:** Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS.
	//
	// Deprecated: Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS.
	EcsLists []InstanceEcsList `pulumi:"ecsLists"`
	// Whether to create the Database file system in RAID way. Valid values : `true` anf `false`.
	EnableRaid *bool `pulumi:"enableRaid"`
	// Whether to encrypt the database file system. Valid values: `true` and `false`.
	Encryption *bool `pulumi:"encryption"`
	// The name of the Database file system.
	InstanceName string `pulumi:"instanceName"`
	// The KMS key ID of the Database file system used. This parameter is valid When `encryption` parameter is set to `true`.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The performance level of the Database file system. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	PerformanceLevel *string `pulumi:"performanceLevel"`
	// The number of strip. This parameter is valid When `enableRaid` parameter is set to `true`.
	RaidStripeUnitNumber *string `pulumi:"raidStripeUnitNumber"`
	// The size Of the Database file system. Unit: GiB.
	Size int `pulumi:"size"`
	// The snapshot id of the Database file system.
	SnapshotId *string `pulumi:"snapshotId"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The Zone ID of the Database file system.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The type of the Database file system. Valid values: `standard`.
	Category pulumi.StringPtrInput
	// Whether to delete the original snapshot after the DBFS is created using the snapshot. Valid values : `true` anf `false`.
	DeleteSnapshot pulumi.BoolPtrInput
	// The collection of ECS instances mounted to the Database file system. See the following `Block ecsList`. **NOTE:** Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS.
	//
	// Deprecated: Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS.
	EcsLists InstanceEcsListArrayInput
	// Whether to create the Database file system in RAID way. Valid values : `true` anf `false`.
	EnableRaid pulumi.BoolPtrInput
	// Whether to encrypt the database file system. Valid values: `true` and `false`.
	Encryption pulumi.BoolPtrInput
	// The name of the Database file system.
	InstanceName pulumi.StringInput
	// The KMS key ID of the Database file system used. This parameter is valid When `encryption` parameter is set to `true`.
	KmsKeyId pulumi.StringPtrInput
	// The performance level of the Database file system. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	PerformanceLevel pulumi.StringPtrInput
	// The number of strip. This parameter is valid When `enableRaid` parameter is set to `true`.
	RaidStripeUnitNumber pulumi.StringPtrInput
	// The size Of the Database file system. Unit: GiB.
	Size pulumi.IntInput
	// The snapshot id of the Database file system.
	SnapshotId pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
	// The Zone ID of the Database file system.
	ZoneId pulumi.StringInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//          InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//          InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
