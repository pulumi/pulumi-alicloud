// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dfs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DFS File System resource.
//
// For information about DFS File System and how to use it, see [What is File System](https://www.alibabacloud.com/help/en/aibaba-cloud-storage-services/latest/apsara-file-storage-for-hdfs).
//
// > **NOTE:** Available since v1.140.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dfs"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			_default, err := dfs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			zoneId := _default.Zones[0].ZoneId
//			storageType := _default.Zones[0].Options[0].StorageType
//			_, err = dfs.NewFileSystem(ctx, "default", &dfs.FileSystemArgs{
//				ProtocolType:                 pulumi.String("HDFS"),
//				Description:                  pulumi.String(name),
//				FileSystemName:               pulumi.String(fmt.Sprintf("%v-%v", name, defaultInteger.Result)),
//				SpaceCapacity:                pulumi.Int(1024),
//				ThroughputMode:               pulumi.String("Provisioned"),
//				ProvisionedThroughputInMiBps: pulumi.Int(512),
//				StorageType:                  pulumi.String(storageType),
//				ZoneId:                       pulumi.String(zoneId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DFS File System can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:dfs/fileSystem:FileSystem example <id>
// ```
type FileSystem struct {
	pulumi.CustomResourceState

	// The creation time of the file system instance.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Redundancy mode of the file system. Value:
	// - LRS (default): Local redundancy.
	// - ZRS: Same-City redundancy. When ZRS is selected, zoneId is a string consisting of multiple zones that are expected to be redundant in the same city, for example,  'zoneId1,zoneId2 '.
	DataRedundancyType pulumi.StringPtrOutput `pulumi:"dataRedundancyType"`
	// The description of the file system resource. No more than 32 characters in length.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The file system name. The naming rules are as follows: The length is 6~64 characters. Globally unique and cannot be an empty string. English letters are supported and can contain numbers, underscores (_), and dashes (-).
	FileSystemName pulumi.StringOutput `pulumi:"fileSystemName"`
	// Save set sequence number, the user selects the content of the specified sequence number in the Save set.
	PartitionNumber pulumi.IntPtrOutput `pulumi:"partitionNumber"`
	// The protocol type.  Only HDFS(Hadoop Distributed File System) is supported.
	ProtocolType pulumi.StringOutput `pulumi:"protocolType"`
	// Provisioned throughput. This parameter is required when ThroughputMode is set to Provisioned. Unit: MB/s Value range: 1~5120.
	ProvisionedThroughputInMiBps pulumi.IntPtrOutput `pulumi:"provisionedThroughputInMiBps"`
	// File system capacity.  When the actual amount of data stored reaches the capacity of the file system, data cannot be written.  Unit: GiB.
	SpaceCapacity pulumi.IntOutput `pulumi:"spaceCapacity"`
	// Save set identity, used to select a user-specified save set.
	StorageSetName pulumi.StringPtrOutput `pulumi:"storageSetName"`
	// The storage media type. Value: STANDARD (default): STANDARD PERFORMANCE: PERFORMANCE type.
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// The throughput mode. Value: Standard (default): Standard throughput Provisioned: preset throughput.
	ThroughputMode pulumi.StringOutput `pulumi:"throughputMode"`
	// Zone Id, which is used to create file system resources to the specified zone.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileSystemName == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemName'")
	}
	if args.ProtocolType == nil {
		return nil, errors.New("invalid value for required argument 'ProtocolType'")
	}
	if args.SpaceCapacity == nil {
		return nil, errors.New("invalid value for required argument 'SpaceCapacity'")
	}
	if args.StorageType == nil {
		return nil, errors.New("invalid value for required argument 'StorageType'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileSystem
	err := ctx.RegisterResource("alicloud:dfs/fileSystem:FileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	var resource FileSystem
	err := ctx.ReadResource("alicloud:dfs/fileSystem:FileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type fileSystemState struct {
	// The creation time of the file system instance.
	CreateTime *string `pulumi:"createTime"`
	// Redundancy mode of the file system. Value:
	// - LRS (default): Local redundancy.
	// - ZRS: Same-City redundancy. When ZRS is selected, zoneId is a string consisting of multiple zones that are expected to be redundant in the same city, for example,  'zoneId1,zoneId2 '.
	DataRedundancyType *string `pulumi:"dataRedundancyType"`
	// The description of the file system resource. No more than 32 characters in length.
	Description *string `pulumi:"description"`
	// The file system name. The naming rules are as follows: The length is 6~64 characters. Globally unique and cannot be an empty string. English letters are supported and can contain numbers, underscores (_), and dashes (-).
	FileSystemName *string `pulumi:"fileSystemName"`
	// Save set sequence number, the user selects the content of the specified sequence number in the Save set.
	PartitionNumber *int `pulumi:"partitionNumber"`
	// The protocol type.  Only HDFS(Hadoop Distributed File System) is supported.
	ProtocolType *string `pulumi:"protocolType"`
	// Provisioned throughput. This parameter is required when ThroughputMode is set to Provisioned. Unit: MB/s Value range: 1~5120.
	ProvisionedThroughputInMiBps *int `pulumi:"provisionedThroughputInMiBps"`
	// File system capacity.  When the actual amount of data stored reaches the capacity of the file system, data cannot be written.  Unit: GiB.
	SpaceCapacity *int `pulumi:"spaceCapacity"`
	// Save set identity, used to select a user-specified save set.
	StorageSetName *string `pulumi:"storageSetName"`
	// The storage media type. Value: STANDARD (default): STANDARD PERFORMANCE: PERFORMANCE type.
	StorageType *string `pulumi:"storageType"`
	// The throughput mode. Value: Standard (default): Standard throughput Provisioned: preset throughput.
	ThroughputMode *string `pulumi:"throughputMode"`
	// Zone Id, which is used to create file system resources to the specified zone.
	ZoneId *string `pulumi:"zoneId"`
}

type FileSystemState struct {
	// The creation time of the file system instance.
	CreateTime pulumi.StringPtrInput
	// Redundancy mode of the file system. Value:
	// - LRS (default): Local redundancy.
	// - ZRS: Same-City redundancy. When ZRS is selected, zoneId is a string consisting of multiple zones that are expected to be redundant in the same city, for example,  'zoneId1,zoneId2 '.
	DataRedundancyType pulumi.StringPtrInput
	// The description of the file system resource. No more than 32 characters in length.
	Description pulumi.StringPtrInput
	// The file system name. The naming rules are as follows: The length is 6~64 characters. Globally unique and cannot be an empty string. English letters are supported and can contain numbers, underscores (_), and dashes (-).
	FileSystemName pulumi.StringPtrInput
	// Save set sequence number, the user selects the content of the specified sequence number in the Save set.
	PartitionNumber pulumi.IntPtrInput
	// The protocol type.  Only HDFS(Hadoop Distributed File System) is supported.
	ProtocolType pulumi.StringPtrInput
	// Provisioned throughput. This parameter is required when ThroughputMode is set to Provisioned. Unit: MB/s Value range: 1~5120.
	ProvisionedThroughputInMiBps pulumi.IntPtrInput
	// File system capacity.  When the actual amount of data stored reaches the capacity of the file system, data cannot be written.  Unit: GiB.
	SpaceCapacity pulumi.IntPtrInput
	// Save set identity, used to select a user-specified save set.
	StorageSetName pulumi.StringPtrInput
	// The storage media type. Value: STANDARD (default): STANDARD PERFORMANCE: PERFORMANCE type.
	StorageType pulumi.StringPtrInput
	// The throughput mode. Value: Standard (default): Standard throughput Provisioned: preset throughput.
	ThroughputMode pulumi.StringPtrInput
	// Zone Id, which is used to create file system resources to the specified zone.
	ZoneId pulumi.StringPtrInput
}

func (FileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemState)(nil)).Elem()
}

type fileSystemArgs struct {
	// Redundancy mode of the file system. Value:
	// - LRS (default): Local redundancy.
	// - ZRS: Same-City redundancy. When ZRS is selected, zoneId is a string consisting of multiple zones that are expected to be redundant in the same city, for example,  'zoneId1,zoneId2 '.
	DataRedundancyType *string `pulumi:"dataRedundancyType"`
	// The description of the file system resource. No more than 32 characters in length.
	Description *string `pulumi:"description"`
	// The file system name. The naming rules are as follows: The length is 6~64 characters. Globally unique and cannot be an empty string. English letters are supported and can contain numbers, underscores (_), and dashes (-).
	FileSystemName string `pulumi:"fileSystemName"`
	// Save set sequence number, the user selects the content of the specified sequence number in the Save set.
	PartitionNumber *int `pulumi:"partitionNumber"`
	// The protocol type.  Only HDFS(Hadoop Distributed File System) is supported.
	ProtocolType string `pulumi:"protocolType"`
	// Provisioned throughput. This parameter is required when ThroughputMode is set to Provisioned. Unit: MB/s Value range: 1~5120.
	ProvisionedThroughputInMiBps *int `pulumi:"provisionedThroughputInMiBps"`
	// File system capacity.  When the actual amount of data stored reaches the capacity of the file system, data cannot be written.  Unit: GiB.
	SpaceCapacity int `pulumi:"spaceCapacity"`
	// Save set identity, used to select a user-specified save set.
	StorageSetName *string `pulumi:"storageSetName"`
	// The storage media type. Value: STANDARD (default): STANDARD PERFORMANCE: PERFORMANCE type.
	StorageType string `pulumi:"storageType"`
	// The throughput mode. Value: Standard (default): Standard throughput Provisioned: preset throughput.
	ThroughputMode *string `pulumi:"throughputMode"`
	// Zone Id, which is used to create file system resources to the specified zone.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	// Redundancy mode of the file system. Value:
	// - LRS (default): Local redundancy.
	// - ZRS: Same-City redundancy. When ZRS is selected, zoneId is a string consisting of multiple zones that are expected to be redundant in the same city, for example,  'zoneId1,zoneId2 '.
	DataRedundancyType pulumi.StringPtrInput
	// The description of the file system resource. No more than 32 characters in length.
	Description pulumi.StringPtrInput
	// The file system name. The naming rules are as follows: The length is 6~64 characters. Globally unique and cannot be an empty string. English letters are supported and can contain numbers, underscores (_), and dashes (-).
	FileSystemName pulumi.StringInput
	// Save set sequence number, the user selects the content of the specified sequence number in the Save set.
	PartitionNumber pulumi.IntPtrInput
	// The protocol type.  Only HDFS(Hadoop Distributed File System) is supported.
	ProtocolType pulumi.StringInput
	// Provisioned throughput. This parameter is required when ThroughputMode is set to Provisioned. Unit: MB/s Value range: 1~5120.
	ProvisionedThroughputInMiBps pulumi.IntPtrInput
	// File system capacity.  When the actual amount of data stored reaches the capacity of the file system, data cannot be written.  Unit: GiB.
	SpaceCapacity pulumi.IntInput
	// Save set identity, used to select a user-specified save set.
	StorageSetName pulumi.StringPtrInput
	// The storage media type. Value: STANDARD (default): STANDARD PERFORMANCE: PERFORMANCE type.
	StorageType pulumi.StringInput
	// The throughput mode. Value: Standard (default): Standard throughput Provisioned: preset throughput.
	ThroughputMode pulumi.StringPtrInput
	// Zone Id, which is used to create file system resources to the specified zone.
	ZoneId pulumi.StringInput
}

func (FileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemArgs)(nil)).Elem()
}

type FileSystemInput interface {
	pulumi.Input

	ToFileSystemOutput() FileSystemOutput
	ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput
}

func (*FileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (i *FileSystem) ToFileSystemOutput() FileSystemOutput {
	return i.ToFileSystemOutputWithContext(context.Background())
}

func (i *FileSystem) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemOutput)
}

// FileSystemArrayInput is an input type that accepts FileSystemArray and FileSystemArrayOutput values.
// You can construct a concrete instance of `FileSystemArrayInput` via:
//
//	FileSystemArray{ FileSystemArgs{...} }
type FileSystemArrayInput interface {
	pulumi.Input

	ToFileSystemArrayOutput() FileSystemArrayOutput
	ToFileSystemArrayOutputWithContext(context.Context) FileSystemArrayOutput
}

type FileSystemArray []FileSystemInput

func (FileSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (i FileSystemArray) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return i.ToFileSystemArrayOutputWithContext(context.Background())
}

func (i FileSystemArray) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemArrayOutput)
}

// FileSystemMapInput is an input type that accepts FileSystemMap and FileSystemMapOutput values.
// You can construct a concrete instance of `FileSystemMapInput` via:
//
//	FileSystemMap{ "key": FileSystemArgs{...} }
type FileSystemMapInput interface {
	pulumi.Input

	ToFileSystemMapOutput() FileSystemMapOutput
	ToFileSystemMapOutputWithContext(context.Context) FileSystemMapOutput
}

type FileSystemMap map[string]FileSystemInput

func (FileSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (i FileSystemMap) ToFileSystemMapOutput() FileSystemMapOutput {
	return i.ToFileSystemMapOutputWithContext(context.Background())
}

func (i FileSystemMap) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemMapOutput)
}

type FileSystemOutput struct{ *pulumi.OutputState }

func (FileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (o FileSystemOutput) ToFileSystemOutput() FileSystemOutput {
	return o
}

func (o FileSystemOutput) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return o
}

// The creation time of the file system instance.
func (o FileSystemOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Redundancy mode of the file system. Value:
// - LRS (default): Local redundancy.
// - ZRS: Same-City redundancy. When ZRS is selected, zoneId is a string consisting of multiple zones that are expected to be redundant in the same city, for example,  'zoneId1,zoneId2 '.
func (o FileSystemOutput) DataRedundancyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.DataRedundancyType }).(pulumi.StringPtrOutput)
}

// The description of the file system resource. No more than 32 characters in length.
func (o FileSystemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The file system name. The naming rules are as follows: The length is 6~64 characters. Globally unique and cannot be an empty string. English letters are supported and can contain numbers, underscores (_), and dashes (-).
func (o FileSystemOutput) FileSystemName() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.FileSystemName }).(pulumi.StringOutput)
}

// Save set sequence number, the user selects the content of the specified sequence number in the Save set.
func (o FileSystemOutput) PartitionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntPtrOutput { return v.PartitionNumber }).(pulumi.IntPtrOutput)
}

// The protocol type.  Only HDFS(Hadoop Distributed File System) is supported.
func (o FileSystemOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ProtocolType }).(pulumi.StringOutput)
}

// Provisioned throughput. This parameter is required when ThroughputMode is set to Provisioned. Unit: MB/s Value range: 1~5120.
func (o FileSystemOutput) ProvisionedThroughputInMiBps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntPtrOutput { return v.ProvisionedThroughputInMiBps }).(pulumi.IntPtrOutput)
}

// File system capacity.  When the actual amount of data stored reaches the capacity of the file system, data cannot be written.  Unit: GiB.
func (o FileSystemOutput) SpaceCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntOutput { return v.SpaceCapacity }).(pulumi.IntOutput)
}

// Save set identity, used to select a user-specified save set.
func (o FileSystemOutput) StorageSetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.StorageSetName }).(pulumi.StringPtrOutput)
}

// The storage media type. Value: STANDARD (default): STANDARD PERFORMANCE: PERFORMANCE type.
func (o FileSystemOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// The throughput mode. Value: Standard (default): Standard throughput Provisioned: preset throughput.
func (o FileSystemOutput) ThroughputMode() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ThroughputMode }).(pulumi.StringOutput)
}

// Zone Id, which is used to create file system resources to the specified zone.
func (o FileSystemOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type FileSystemArrayOutput struct{ *pulumi.OutputState }

func (FileSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) Index(i pulumi.IntInput) FileSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].([]*FileSystem)[vs[1].(int)]
	}).(FileSystemOutput)
}

type FileSystemMapOutput struct{ *pulumi.OutputState }

func (FileSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (o FileSystemMapOutput) ToFileSystemMapOutput() FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) MapIndex(k pulumi.StringInput) FileSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].(map[string]*FileSystem)[vs[1].(string)]
	}).(FileSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemInput)(nil)).Elem(), &FileSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemArrayInput)(nil)).Elem(), FileSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemMapInput)(nil)).Elem(), FileSystemMap{})
	pulumi.RegisterOutputType(FileSystemOutput{})
	pulumi.RegisterOutputType(FileSystemArrayOutput{})
	pulumi.RegisterOutputType(FileSystemMapOutput{})
}
