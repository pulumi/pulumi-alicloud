// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// RAM Password Policy can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:ram/passwordPolicy:PasswordPolicy example <id>.
// ```
type PasswordPolicy struct {
	pulumi.CustomResourceState

	// Whether to restrict logon after the password expires. Value:
	// - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
	// - false (default): After the password expires, the RAM user can change the password and log on normally.
	HardExpiry pulumi.BoolPtrOutput `pulumi:"hardExpiry"`
	// Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
	// Value range: 0~32.
	// Default value: 0, which means that the password retry constraint is not enabled.
	MaxLoginAttemps pulumi.IntPtrOutput `pulumi:"maxLoginAttemps"`
	// Password validity period.
	// Value range: 0~1095. Unit: days.
	// Default value: 0, which means never expires.
	MaxPasswordAge pulumi.IntPtrOutput `pulumi:"maxPasswordAge"`
	// The minimum number of unique characters in the password.
	// Valid values: 0 to 8.
	// The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
	MinimumPasswordDifferentCharacter pulumi.IntPtrOutput `pulumi:"minimumPasswordDifferentCharacter"`
	// The minimum number of characters in the password.
	// Valid values: 8 to 32. Default value: 8.
	MinimumPasswordLength pulumi.IntOutput `pulumi:"minimumPasswordLength"`
	// Whether the user name is not allowed in the password. Value:
	// - true: The password cannot contain the user name.
	// - false (default): The user name can be included in the password.
	PasswordNotContainUserName pulumi.BoolPtrOutput `pulumi:"passwordNotContainUserName"`
	// Historical password check policy.
	// Do not use the previous N Passwords. The value range of N is 0 to 24.
	// Default value: 0, indicating that the historical password check policy is not enabled.
	PasswordReusePrevention pulumi.IntPtrOutput `pulumi:"passwordReusePrevention"`
	// Specifies whether the password must contain lowercase letters. Valid values:
	// - true
	// - false (default)
	RequireLowercaseCharacters pulumi.BoolPtrOutput `pulumi:"requireLowercaseCharacters"`
	// Specifies whether the password must contain digits. Valid values:
	// - true
	// - false (default)
	RequireNumbers pulumi.BoolPtrOutput `pulumi:"requireNumbers"`
	// Specifies whether the password must contain special characters. Valid values:
	// - true
	// - false (default)
	RequireSymbols pulumi.BoolPtrOutput `pulumi:"requireSymbols"`
	// Specifies whether the password must contain uppercase letters. Valid values:
	// - true
	// - false (default)
	RequireUppercaseCharacters pulumi.BoolPtrOutput `pulumi:"requireUppercaseCharacters"`
}

// NewPasswordPolicy registers a new resource with the given unique name, arguments, and options.
func NewPasswordPolicy(ctx *pulumi.Context,
	name string, args *PasswordPolicyArgs, opts ...pulumi.ResourceOption) (*PasswordPolicy, error) {
	if args == nil {
		args = &PasswordPolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PasswordPolicy
	err := ctx.RegisterResource("alicloud:ram/passwordPolicy:PasswordPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPasswordPolicy gets an existing PasswordPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPasswordPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PasswordPolicyState, opts ...pulumi.ResourceOption) (*PasswordPolicy, error) {
	var resource PasswordPolicy
	err := ctx.ReadResource("alicloud:ram/passwordPolicy:PasswordPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PasswordPolicy resources.
type passwordPolicyState struct {
	// Whether to restrict logon after the password expires. Value:
	// - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
	// - false (default): After the password expires, the RAM user can change the password and log on normally.
	HardExpiry *bool `pulumi:"hardExpiry"`
	// Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
	// Value range: 0~32.
	// Default value: 0, which means that the password retry constraint is not enabled.
	MaxLoginAttemps *int `pulumi:"maxLoginAttemps"`
	// Password validity period.
	// Value range: 0~1095. Unit: days.
	// Default value: 0, which means never expires.
	MaxPasswordAge *int `pulumi:"maxPasswordAge"`
	// The minimum number of unique characters in the password.
	// Valid values: 0 to 8.
	// The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
	MinimumPasswordDifferentCharacter *int `pulumi:"minimumPasswordDifferentCharacter"`
	// The minimum number of characters in the password.
	// Valid values: 8 to 32. Default value: 8.
	MinimumPasswordLength *int `pulumi:"minimumPasswordLength"`
	// Whether the user name is not allowed in the password. Value:
	// - true: The password cannot contain the user name.
	// - false (default): The user name can be included in the password.
	PasswordNotContainUserName *bool `pulumi:"passwordNotContainUserName"`
	// Historical password check policy.
	// Do not use the previous N Passwords. The value range of N is 0 to 24.
	// Default value: 0, indicating that the historical password check policy is not enabled.
	PasswordReusePrevention *int `pulumi:"passwordReusePrevention"`
	// Specifies whether the password must contain lowercase letters. Valid values:
	// - true
	// - false (default)
	RequireLowercaseCharacters *bool `pulumi:"requireLowercaseCharacters"`
	// Specifies whether the password must contain digits. Valid values:
	// - true
	// - false (default)
	RequireNumbers *bool `pulumi:"requireNumbers"`
	// Specifies whether the password must contain special characters. Valid values:
	// - true
	// - false (default)
	RequireSymbols *bool `pulumi:"requireSymbols"`
	// Specifies whether the password must contain uppercase letters. Valid values:
	// - true
	// - false (default)
	RequireUppercaseCharacters *bool `pulumi:"requireUppercaseCharacters"`
}

type PasswordPolicyState struct {
	// Whether to restrict logon after the password expires. Value:
	// - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
	// - false (default): After the password expires, the RAM user can change the password and log on normally.
	HardExpiry pulumi.BoolPtrInput
	// Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
	// Value range: 0~32.
	// Default value: 0, which means that the password retry constraint is not enabled.
	MaxLoginAttemps pulumi.IntPtrInput
	// Password validity period.
	// Value range: 0~1095. Unit: days.
	// Default value: 0, which means never expires.
	MaxPasswordAge pulumi.IntPtrInput
	// The minimum number of unique characters in the password.
	// Valid values: 0 to 8.
	// The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
	MinimumPasswordDifferentCharacter pulumi.IntPtrInput
	// The minimum number of characters in the password.
	// Valid values: 8 to 32. Default value: 8.
	MinimumPasswordLength pulumi.IntPtrInput
	// Whether the user name is not allowed in the password. Value:
	// - true: The password cannot contain the user name.
	// - false (default): The user name can be included in the password.
	PasswordNotContainUserName pulumi.BoolPtrInput
	// Historical password check policy.
	// Do not use the previous N Passwords. The value range of N is 0 to 24.
	// Default value: 0, indicating that the historical password check policy is not enabled.
	PasswordReusePrevention pulumi.IntPtrInput
	// Specifies whether the password must contain lowercase letters. Valid values:
	// - true
	// - false (default)
	RequireLowercaseCharacters pulumi.BoolPtrInput
	// Specifies whether the password must contain digits. Valid values:
	// - true
	// - false (default)
	RequireNumbers pulumi.BoolPtrInput
	// Specifies whether the password must contain special characters. Valid values:
	// - true
	// - false (default)
	RequireSymbols pulumi.BoolPtrInput
	// Specifies whether the password must contain uppercase letters. Valid values:
	// - true
	// - false (default)
	RequireUppercaseCharacters pulumi.BoolPtrInput
}

func (PasswordPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordPolicyState)(nil)).Elem()
}

type passwordPolicyArgs struct {
	// Whether to restrict logon after the password expires. Value:
	// - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
	// - false (default): After the password expires, the RAM user can change the password and log on normally.
	HardExpiry *bool `pulumi:"hardExpiry"`
	// Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
	// Value range: 0~32.
	// Default value: 0, which means that the password retry constraint is not enabled.
	MaxLoginAttemps *int `pulumi:"maxLoginAttemps"`
	// Password validity period.
	// Value range: 0~1095. Unit: days.
	// Default value: 0, which means never expires.
	MaxPasswordAge *int `pulumi:"maxPasswordAge"`
	// The minimum number of unique characters in the password.
	// Valid values: 0 to 8.
	// The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
	MinimumPasswordDifferentCharacter *int `pulumi:"minimumPasswordDifferentCharacter"`
	// The minimum number of characters in the password.
	// Valid values: 8 to 32. Default value: 8.
	MinimumPasswordLength *int `pulumi:"minimumPasswordLength"`
	// Whether the user name is not allowed in the password. Value:
	// - true: The password cannot contain the user name.
	// - false (default): The user name can be included in the password.
	PasswordNotContainUserName *bool `pulumi:"passwordNotContainUserName"`
	// Historical password check policy.
	// Do not use the previous N Passwords. The value range of N is 0 to 24.
	// Default value: 0, indicating that the historical password check policy is not enabled.
	PasswordReusePrevention *int `pulumi:"passwordReusePrevention"`
	// Specifies whether the password must contain lowercase letters. Valid values:
	// - true
	// - false (default)
	RequireLowercaseCharacters *bool `pulumi:"requireLowercaseCharacters"`
	// Specifies whether the password must contain digits. Valid values:
	// - true
	// - false (default)
	RequireNumbers *bool `pulumi:"requireNumbers"`
	// Specifies whether the password must contain special characters. Valid values:
	// - true
	// - false (default)
	RequireSymbols *bool `pulumi:"requireSymbols"`
	// Specifies whether the password must contain uppercase letters. Valid values:
	// - true
	// - false (default)
	RequireUppercaseCharacters *bool `pulumi:"requireUppercaseCharacters"`
}

// The set of arguments for constructing a PasswordPolicy resource.
type PasswordPolicyArgs struct {
	// Whether to restrict logon after the password expires. Value:
	// - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
	// - false (default): After the password expires, the RAM user can change the password and log on normally.
	HardExpiry pulumi.BoolPtrInput
	// Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
	// Value range: 0~32.
	// Default value: 0, which means that the password retry constraint is not enabled.
	MaxLoginAttemps pulumi.IntPtrInput
	// Password validity period.
	// Value range: 0~1095. Unit: days.
	// Default value: 0, which means never expires.
	MaxPasswordAge pulumi.IntPtrInput
	// The minimum number of unique characters in the password.
	// Valid values: 0 to 8.
	// The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
	MinimumPasswordDifferentCharacter pulumi.IntPtrInput
	// The minimum number of characters in the password.
	// Valid values: 8 to 32. Default value: 8.
	MinimumPasswordLength pulumi.IntPtrInput
	// Whether the user name is not allowed in the password. Value:
	// - true: The password cannot contain the user name.
	// - false (default): The user name can be included in the password.
	PasswordNotContainUserName pulumi.BoolPtrInput
	// Historical password check policy.
	// Do not use the previous N Passwords. The value range of N is 0 to 24.
	// Default value: 0, indicating that the historical password check policy is not enabled.
	PasswordReusePrevention pulumi.IntPtrInput
	// Specifies whether the password must contain lowercase letters. Valid values:
	// - true
	// - false (default)
	RequireLowercaseCharacters pulumi.BoolPtrInput
	// Specifies whether the password must contain digits. Valid values:
	// - true
	// - false (default)
	RequireNumbers pulumi.BoolPtrInput
	// Specifies whether the password must contain special characters. Valid values:
	// - true
	// - false (default)
	RequireSymbols pulumi.BoolPtrInput
	// Specifies whether the password must contain uppercase letters. Valid values:
	// - true
	// - false (default)
	RequireUppercaseCharacters pulumi.BoolPtrInput
}

func (PasswordPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordPolicyArgs)(nil)).Elem()
}

type PasswordPolicyInput interface {
	pulumi.Input

	ToPasswordPolicyOutput() PasswordPolicyOutput
	ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput
}

func (*PasswordPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordPolicy)(nil)).Elem()
}

func (i *PasswordPolicy) ToPasswordPolicyOutput() PasswordPolicyOutput {
	return i.ToPasswordPolicyOutputWithContext(context.Background())
}

func (i *PasswordPolicy) ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyOutput)
}

// PasswordPolicyArrayInput is an input type that accepts PasswordPolicyArray and PasswordPolicyArrayOutput values.
// You can construct a concrete instance of `PasswordPolicyArrayInput` via:
//
//	PasswordPolicyArray{ PasswordPolicyArgs{...} }
type PasswordPolicyArrayInput interface {
	pulumi.Input

	ToPasswordPolicyArrayOutput() PasswordPolicyArrayOutput
	ToPasswordPolicyArrayOutputWithContext(context.Context) PasswordPolicyArrayOutput
}

type PasswordPolicyArray []PasswordPolicyInput

func (PasswordPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PasswordPolicy)(nil)).Elem()
}

func (i PasswordPolicyArray) ToPasswordPolicyArrayOutput() PasswordPolicyArrayOutput {
	return i.ToPasswordPolicyArrayOutputWithContext(context.Background())
}

func (i PasswordPolicyArray) ToPasswordPolicyArrayOutputWithContext(ctx context.Context) PasswordPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyArrayOutput)
}

// PasswordPolicyMapInput is an input type that accepts PasswordPolicyMap and PasswordPolicyMapOutput values.
// You can construct a concrete instance of `PasswordPolicyMapInput` via:
//
//	PasswordPolicyMap{ "key": PasswordPolicyArgs{...} }
type PasswordPolicyMapInput interface {
	pulumi.Input

	ToPasswordPolicyMapOutput() PasswordPolicyMapOutput
	ToPasswordPolicyMapOutputWithContext(context.Context) PasswordPolicyMapOutput
}

type PasswordPolicyMap map[string]PasswordPolicyInput

func (PasswordPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PasswordPolicy)(nil)).Elem()
}

func (i PasswordPolicyMap) ToPasswordPolicyMapOutput() PasswordPolicyMapOutput {
	return i.ToPasswordPolicyMapOutputWithContext(context.Background())
}

func (i PasswordPolicyMap) ToPasswordPolicyMapOutputWithContext(ctx context.Context) PasswordPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyMapOutput)
}

type PasswordPolicyOutput struct{ *pulumi.OutputState }

func (PasswordPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordPolicy)(nil)).Elem()
}

func (o PasswordPolicyOutput) ToPasswordPolicyOutput() PasswordPolicyOutput {
	return o
}

func (o PasswordPolicyOutput) ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput {
	return o
}

// Whether to restrict logon after the password expires. Value:
// - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
// - false (default): After the password expires, the RAM user can change the password and log on normally.
func (o PasswordPolicyOutput) HardExpiry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.HardExpiry }).(pulumi.BoolPtrOutput)
}

// Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
// Value range: 0~32.
// Default value: 0, which means that the password retry constraint is not enabled.
func (o PasswordPolicyOutput) MaxLoginAttemps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.MaxLoginAttemps }).(pulumi.IntPtrOutput)
}

// Password validity period.
// Value range: 0~1095. Unit: days.
// Default value: 0, which means never expires.
func (o PasswordPolicyOutput) MaxPasswordAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.MaxPasswordAge }).(pulumi.IntPtrOutput)
}

// The minimum number of unique characters in the password.
// Valid values: 0 to 8.
// The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
func (o PasswordPolicyOutput) MinimumPasswordDifferentCharacter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.MinimumPasswordDifferentCharacter }).(pulumi.IntPtrOutput)
}

// The minimum number of characters in the password.
// Valid values: 8 to 32. Default value: 8.
func (o PasswordPolicyOutput) MinimumPasswordLength() pulumi.IntOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntOutput { return v.MinimumPasswordLength }).(pulumi.IntOutput)
}

// Whether the user name is not allowed in the password. Value:
// - true: The password cannot contain the user name.
// - false (default): The user name can be included in the password.
func (o PasswordPolicyOutput) PasswordNotContainUserName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.PasswordNotContainUserName }).(pulumi.BoolPtrOutput)
}

// Historical password check policy.
// Do not use the previous N Passwords. The value range of N is 0 to 24.
// Default value: 0, indicating that the historical password check policy is not enabled.
func (o PasswordPolicyOutput) PasswordReusePrevention() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.PasswordReusePrevention }).(pulumi.IntPtrOutput)
}

// Specifies whether the password must contain lowercase letters. Valid values:
// - true
// - false (default)
func (o PasswordPolicyOutput) RequireLowercaseCharacters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.RequireLowercaseCharacters }).(pulumi.BoolPtrOutput)
}

// Specifies whether the password must contain digits. Valid values:
// - true
// - false (default)
func (o PasswordPolicyOutput) RequireNumbers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.RequireNumbers }).(pulumi.BoolPtrOutput)
}

// Specifies whether the password must contain special characters. Valid values:
// - true
// - false (default)
func (o PasswordPolicyOutput) RequireSymbols() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.RequireSymbols }).(pulumi.BoolPtrOutput)
}

// Specifies whether the password must contain uppercase letters. Valid values:
// - true
// - false (default)
func (o PasswordPolicyOutput) RequireUppercaseCharacters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.RequireUppercaseCharacters }).(pulumi.BoolPtrOutput)
}

type PasswordPolicyArrayOutput struct{ *pulumi.OutputState }

func (PasswordPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PasswordPolicy)(nil)).Elem()
}

func (o PasswordPolicyArrayOutput) ToPasswordPolicyArrayOutput() PasswordPolicyArrayOutput {
	return o
}

func (o PasswordPolicyArrayOutput) ToPasswordPolicyArrayOutputWithContext(ctx context.Context) PasswordPolicyArrayOutput {
	return o
}

func (o PasswordPolicyArrayOutput) Index(i pulumi.IntInput) PasswordPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PasswordPolicy {
		return vs[0].([]*PasswordPolicy)[vs[1].(int)]
	}).(PasswordPolicyOutput)
}

type PasswordPolicyMapOutput struct{ *pulumi.OutputState }

func (PasswordPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PasswordPolicy)(nil)).Elem()
}

func (o PasswordPolicyMapOutput) ToPasswordPolicyMapOutput() PasswordPolicyMapOutput {
	return o
}

func (o PasswordPolicyMapOutput) ToPasswordPolicyMapOutputWithContext(ctx context.Context) PasswordPolicyMapOutput {
	return o
}

func (o PasswordPolicyMapOutput) MapIndex(k pulumi.StringInput) PasswordPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PasswordPolicy {
		return vs[0].(map[string]*PasswordPolicy)[vs[1].(string)]
	}).(PasswordPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyInput)(nil)).Elem(), &PasswordPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyArrayInput)(nil)).Elem(), PasswordPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyMapInput)(nil)).Elem(), PasswordPolicyMap{})
	pulumi.RegisterOutputType(PasswordPolicyOutput{})
	pulumi.RegisterOutputType(PasswordPolicyArrayOutput{})
	pulumi.RegisterOutputType(PasswordPolicyMapOutput{})
}
