// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// RAM Security Preference can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:ram/securityPreference:SecurityPreference example
// ```
type SecurityPreference struct {
	pulumi.CustomResourceState

	// Whether to allow RAM users to manage their own passwords. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToChangePassword pulumi.BoolOutput `pulumi:"allowUserToChangePassword"`
	// Whether to allow RAM users to log on using a passkey. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToLoginWithPasskey pulumi.BoolOutput `pulumi:"allowUserToLoginWithPasskey"`
	// Whether to allow RAM users to manage their own access keys. Value:
	// - true: Allow.
	// - false (default): Not allowed.
	AllowUserToManageAccessKeys pulumi.BoolOutput `pulumi:"allowUserToManageAccessKeys"`
	// Whether to allow RAM users to manage multi-factor authentication devices. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToManageMfaDevices pulumi.BoolOutput `pulumi:"allowUserToManageMfaDevices"`
	// Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToManagePersonalDingTalk pulumi.BoolOutput `pulumi:"allowUserToManagePersonalDingTalk"`
	// Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
	// - true: Allow.
	// - false (default): Not allowed.
	EnableSaveMfaTicket pulumi.BoolOutput `pulumi:"enableSaveMfaTicket"`
	// Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead.
	// Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
	EnforceMfaForLogin pulumi.BoolOutput `pulumi:"enforceMfaForLogin"`
	// The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
	// - If the mask is specified, RAM users can only log on from the specified IP address.
	// - If you do not specify any mask, the login console function will apply to the entire network.
	//
	// When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
	//
	// Configure a maximum of 40 logon masks, with a total length of 512 characters.
	LoginNetworkMasks pulumi.StringPtrOutput `pulumi:"loginNetworkMasks"`
	// The validity period of the logon session of RAM users.
	// Valid values: 1 to 24. Unit: hours.
	// Default value: 6.
	LoginSessionDuration pulumi.IntOutput `pulumi:"loginSessionDuration"`
	// MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
	// - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
	// - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
	// - adaptive: Used only during abnormal login.
	MfaOperationForLogin pulumi.StringOutput `pulumi:"mfaOperationForLogin"`
	// Whether MFA is verified twice during abnormal logon. Value:
	// - autonomous (default): Skip, do not force binding.
	// - enforceVerify: Force binding validation.
	OperationForRiskLogin pulumi.StringOutput `pulumi:"operationForRiskLogin"`
	// Means of multi-factor authentication. Value:
	// - sms: secure phone.
	// - email: Secure mailbox.
	//
	// The following arguments will be discarded. Please use new fields as soon as possible:
	VerificationTypes pulumi.StringArrayOutput `pulumi:"verificationTypes"`
}

// NewSecurityPreference registers a new resource with the given unique name, arguments, and options.
func NewSecurityPreference(ctx *pulumi.Context,
	name string, args *SecurityPreferenceArgs, opts ...pulumi.ResourceOption) (*SecurityPreference, error) {
	if args == nil {
		args = &SecurityPreferenceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityPreference
	err := ctx.RegisterResource("alicloud:ram/securityPreference:SecurityPreference", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityPreference gets an existing SecurityPreference resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityPreference(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityPreferenceState, opts ...pulumi.ResourceOption) (*SecurityPreference, error) {
	var resource SecurityPreference
	err := ctx.ReadResource("alicloud:ram/securityPreference:SecurityPreference", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityPreference resources.
type securityPreferenceState struct {
	// Whether to allow RAM users to manage their own passwords. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToChangePassword *bool `pulumi:"allowUserToChangePassword"`
	// Whether to allow RAM users to log on using a passkey. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToLoginWithPasskey *bool `pulumi:"allowUserToLoginWithPasskey"`
	// Whether to allow RAM users to manage their own access keys. Value:
	// - true: Allow.
	// - false (default): Not allowed.
	AllowUserToManageAccessKeys *bool `pulumi:"allowUserToManageAccessKeys"`
	// Whether to allow RAM users to manage multi-factor authentication devices. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToManageMfaDevices *bool `pulumi:"allowUserToManageMfaDevices"`
	// Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToManagePersonalDingTalk *bool `pulumi:"allowUserToManagePersonalDingTalk"`
	// Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
	// - true: Allow.
	// - false (default): Not allowed.
	EnableSaveMfaTicket *bool `pulumi:"enableSaveMfaTicket"`
	// Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead.
	// Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
	EnforceMfaForLogin *bool `pulumi:"enforceMfaForLogin"`
	// The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
	// - If the mask is specified, RAM users can only log on from the specified IP address.
	// - If you do not specify any mask, the login console function will apply to the entire network.
	//
	// When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
	//
	// Configure a maximum of 40 logon masks, with a total length of 512 characters.
	LoginNetworkMasks *string `pulumi:"loginNetworkMasks"`
	// The validity period of the logon session of RAM users.
	// Valid values: 1 to 24. Unit: hours.
	// Default value: 6.
	LoginSessionDuration *int `pulumi:"loginSessionDuration"`
	// MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
	// - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
	// - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
	// - adaptive: Used only during abnormal login.
	MfaOperationForLogin *string `pulumi:"mfaOperationForLogin"`
	// Whether MFA is verified twice during abnormal logon. Value:
	// - autonomous (default): Skip, do not force binding.
	// - enforceVerify: Force binding validation.
	OperationForRiskLogin *string `pulumi:"operationForRiskLogin"`
	// Means of multi-factor authentication. Value:
	// - sms: secure phone.
	// - email: Secure mailbox.
	//
	// The following arguments will be discarded. Please use new fields as soon as possible:
	VerificationTypes []string `pulumi:"verificationTypes"`
}

type SecurityPreferenceState struct {
	// Whether to allow RAM users to manage their own passwords. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToChangePassword pulumi.BoolPtrInput
	// Whether to allow RAM users to log on using a passkey. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToLoginWithPasskey pulumi.BoolPtrInput
	// Whether to allow RAM users to manage their own access keys. Value:
	// - true: Allow.
	// - false (default): Not allowed.
	AllowUserToManageAccessKeys pulumi.BoolPtrInput
	// Whether to allow RAM users to manage multi-factor authentication devices. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToManageMfaDevices pulumi.BoolPtrInput
	// Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToManagePersonalDingTalk pulumi.BoolPtrInput
	// Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
	// - true: Allow.
	// - false (default): Not allowed.
	EnableSaveMfaTicket pulumi.BoolPtrInput
	// Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead.
	// Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
	EnforceMfaForLogin pulumi.BoolPtrInput
	// The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
	// - If the mask is specified, RAM users can only log on from the specified IP address.
	// - If you do not specify any mask, the login console function will apply to the entire network.
	//
	// When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
	//
	// Configure a maximum of 40 logon masks, with a total length of 512 characters.
	LoginNetworkMasks pulumi.StringPtrInput
	// The validity period of the logon session of RAM users.
	// Valid values: 1 to 24. Unit: hours.
	// Default value: 6.
	LoginSessionDuration pulumi.IntPtrInput
	// MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
	// - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
	// - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
	// - adaptive: Used only during abnormal login.
	MfaOperationForLogin pulumi.StringPtrInput
	// Whether MFA is verified twice during abnormal logon. Value:
	// - autonomous (default): Skip, do not force binding.
	// - enforceVerify: Force binding validation.
	OperationForRiskLogin pulumi.StringPtrInput
	// Means of multi-factor authentication. Value:
	// - sms: secure phone.
	// - email: Secure mailbox.
	//
	// The following arguments will be discarded. Please use new fields as soon as possible:
	VerificationTypes pulumi.StringArrayInput
}

func (SecurityPreferenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityPreferenceState)(nil)).Elem()
}

type securityPreferenceArgs struct {
	// Whether to allow RAM users to manage their own passwords. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToChangePassword *bool `pulumi:"allowUserToChangePassword"`
	// Whether to allow RAM users to log on using a passkey. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToLoginWithPasskey *bool `pulumi:"allowUserToLoginWithPasskey"`
	// Whether to allow RAM users to manage their own access keys. Value:
	// - true: Allow.
	// - false (default): Not allowed.
	AllowUserToManageAccessKeys *bool `pulumi:"allowUserToManageAccessKeys"`
	// Whether to allow RAM users to manage multi-factor authentication devices. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToManageMfaDevices *bool `pulumi:"allowUserToManageMfaDevices"`
	// Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToManagePersonalDingTalk *bool `pulumi:"allowUserToManagePersonalDingTalk"`
	// Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
	// - true: Allow.
	// - false (default): Not allowed.
	EnableSaveMfaTicket *bool `pulumi:"enableSaveMfaTicket"`
	// Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead.
	// Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
	EnforceMfaForLogin *bool `pulumi:"enforceMfaForLogin"`
	// The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
	// - If the mask is specified, RAM users can only log on from the specified IP address.
	// - If you do not specify any mask, the login console function will apply to the entire network.
	//
	// When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
	//
	// Configure a maximum of 40 logon masks, with a total length of 512 characters.
	LoginNetworkMasks *string `pulumi:"loginNetworkMasks"`
	// The validity period of the logon session of RAM users.
	// Valid values: 1 to 24. Unit: hours.
	// Default value: 6.
	LoginSessionDuration *int `pulumi:"loginSessionDuration"`
	// MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
	// - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
	// - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
	// - adaptive: Used only during abnormal login.
	MfaOperationForLogin *string `pulumi:"mfaOperationForLogin"`
	// Whether MFA is verified twice during abnormal logon. Value:
	// - autonomous (default): Skip, do not force binding.
	// - enforceVerify: Force binding validation.
	OperationForRiskLogin *string `pulumi:"operationForRiskLogin"`
	// Means of multi-factor authentication. Value:
	// - sms: secure phone.
	// - email: Secure mailbox.
	//
	// The following arguments will be discarded. Please use new fields as soon as possible:
	VerificationTypes []string `pulumi:"verificationTypes"`
}

// The set of arguments for constructing a SecurityPreference resource.
type SecurityPreferenceArgs struct {
	// Whether to allow RAM users to manage their own passwords. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToChangePassword pulumi.BoolPtrInput
	// Whether to allow RAM users to log on using a passkey. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToLoginWithPasskey pulumi.BoolPtrInput
	// Whether to allow RAM users to manage their own access keys. Value:
	// - true: Allow.
	// - false (default): Not allowed.
	AllowUserToManageAccessKeys pulumi.BoolPtrInput
	// Whether to allow RAM users to manage multi-factor authentication devices. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToManageMfaDevices pulumi.BoolPtrInput
	// Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
	// - true (default): Allowed.
	// - false: not allowed.
	AllowUserToManagePersonalDingTalk pulumi.BoolPtrInput
	// Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
	// - true: Allow.
	// - false (default): Not allowed.
	EnableSaveMfaTicket pulumi.BoolPtrInput
	// Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead.
	// Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
	EnforceMfaForLogin pulumi.BoolPtrInput
	// The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
	// - If the mask is specified, RAM users can only log on from the specified IP address.
	// - If you do not specify any mask, the login console function will apply to the entire network.
	//
	// When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
	//
	// Configure a maximum of 40 logon masks, with a total length of 512 characters.
	LoginNetworkMasks pulumi.StringPtrInput
	// The validity period of the logon session of RAM users.
	// Valid values: 1 to 24. Unit: hours.
	// Default value: 6.
	LoginSessionDuration pulumi.IntPtrInput
	// MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
	// - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
	// - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
	// - adaptive: Used only during abnormal login.
	MfaOperationForLogin pulumi.StringPtrInput
	// Whether MFA is verified twice during abnormal logon. Value:
	// - autonomous (default): Skip, do not force binding.
	// - enforceVerify: Force binding validation.
	OperationForRiskLogin pulumi.StringPtrInput
	// Means of multi-factor authentication. Value:
	// - sms: secure phone.
	// - email: Secure mailbox.
	//
	// The following arguments will be discarded. Please use new fields as soon as possible:
	VerificationTypes pulumi.StringArrayInput
}

func (SecurityPreferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityPreferenceArgs)(nil)).Elem()
}

type SecurityPreferenceInput interface {
	pulumi.Input

	ToSecurityPreferenceOutput() SecurityPreferenceOutput
	ToSecurityPreferenceOutputWithContext(ctx context.Context) SecurityPreferenceOutput
}

func (*SecurityPreference) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPreference)(nil)).Elem()
}

func (i *SecurityPreference) ToSecurityPreferenceOutput() SecurityPreferenceOutput {
	return i.ToSecurityPreferenceOutputWithContext(context.Background())
}

func (i *SecurityPreference) ToSecurityPreferenceOutputWithContext(ctx context.Context) SecurityPreferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPreferenceOutput)
}

// SecurityPreferenceArrayInput is an input type that accepts SecurityPreferenceArray and SecurityPreferenceArrayOutput values.
// You can construct a concrete instance of `SecurityPreferenceArrayInput` via:
//
//	SecurityPreferenceArray{ SecurityPreferenceArgs{...} }
type SecurityPreferenceArrayInput interface {
	pulumi.Input

	ToSecurityPreferenceArrayOutput() SecurityPreferenceArrayOutput
	ToSecurityPreferenceArrayOutputWithContext(context.Context) SecurityPreferenceArrayOutput
}

type SecurityPreferenceArray []SecurityPreferenceInput

func (SecurityPreferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityPreference)(nil)).Elem()
}

func (i SecurityPreferenceArray) ToSecurityPreferenceArrayOutput() SecurityPreferenceArrayOutput {
	return i.ToSecurityPreferenceArrayOutputWithContext(context.Background())
}

func (i SecurityPreferenceArray) ToSecurityPreferenceArrayOutputWithContext(ctx context.Context) SecurityPreferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPreferenceArrayOutput)
}

// SecurityPreferenceMapInput is an input type that accepts SecurityPreferenceMap and SecurityPreferenceMapOutput values.
// You can construct a concrete instance of `SecurityPreferenceMapInput` via:
//
//	SecurityPreferenceMap{ "key": SecurityPreferenceArgs{...} }
type SecurityPreferenceMapInput interface {
	pulumi.Input

	ToSecurityPreferenceMapOutput() SecurityPreferenceMapOutput
	ToSecurityPreferenceMapOutputWithContext(context.Context) SecurityPreferenceMapOutput
}

type SecurityPreferenceMap map[string]SecurityPreferenceInput

func (SecurityPreferenceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityPreference)(nil)).Elem()
}

func (i SecurityPreferenceMap) ToSecurityPreferenceMapOutput() SecurityPreferenceMapOutput {
	return i.ToSecurityPreferenceMapOutputWithContext(context.Background())
}

func (i SecurityPreferenceMap) ToSecurityPreferenceMapOutputWithContext(ctx context.Context) SecurityPreferenceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPreferenceMapOutput)
}

type SecurityPreferenceOutput struct{ *pulumi.OutputState }

func (SecurityPreferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPreference)(nil)).Elem()
}

func (o SecurityPreferenceOutput) ToSecurityPreferenceOutput() SecurityPreferenceOutput {
	return o
}

func (o SecurityPreferenceOutput) ToSecurityPreferenceOutputWithContext(ctx context.Context) SecurityPreferenceOutput {
	return o
}

// Whether to allow RAM users to manage their own passwords. Value:
// - true (default): Allowed.
// - false: not allowed.
func (o SecurityPreferenceOutput) AllowUserToChangePassword() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityPreference) pulumi.BoolOutput { return v.AllowUserToChangePassword }).(pulumi.BoolOutput)
}

// Whether to allow RAM users to log on using a passkey. Value:
// - true (default): Allowed.
// - false: not allowed.
func (o SecurityPreferenceOutput) AllowUserToLoginWithPasskey() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityPreference) pulumi.BoolOutput { return v.AllowUserToLoginWithPasskey }).(pulumi.BoolOutput)
}

// Whether to allow RAM users to manage their own access keys. Value:
// - true: Allow.
// - false (default): Not allowed.
func (o SecurityPreferenceOutput) AllowUserToManageAccessKeys() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityPreference) pulumi.BoolOutput { return v.AllowUserToManageAccessKeys }).(pulumi.BoolOutput)
}

// Whether to allow RAM users to manage multi-factor authentication devices. Value:
// - true (default): Allowed.
// - false: not allowed.
func (o SecurityPreferenceOutput) AllowUserToManageMfaDevices() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityPreference) pulumi.BoolOutput { return v.AllowUserToManageMfaDevices }).(pulumi.BoolOutput)
}

// Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
// - true (default): Allowed.
// - false: not allowed.
func (o SecurityPreferenceOutput) AllowUserToManagePersonalDingTalk() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityPreference) pulumi.BoolOutput { return v.AllowUserToManagePersonalDingTalk }).(pulumi.BoolOutput)
}

// Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
// - true: Allow.
// - false (default): Not allowed.
func (o SecurityPreferenceOutput) EnableSaveMfaTicket() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityPreference) pulumi.BoolOutput { return v.EnableSaveMfaTicket }).(pulumi.BoolOutput)
}

// Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead.
// Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
func (o SecurityPreferenceOutput) EnforceMfaForLogin() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityPreference) pulumi.BoolOutput { return v.EnforceMfaForLogin }).(pulumi.BoolOutput)
}

// The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
// - If the mask is specified, RAM users can only log on from the specified IP address.
// - If you do not specify any mask, the login console function will apply to the entire network.
//
// When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
//
// Configure a maximum of 40 logon masks, with a total length of 512 characters.
func (o SecurityPreferenceOutput) LoginNetworkMasks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPreference) pulumi.StringPtrOutput { return v.LoginNetworkMasks }).(pulumi.StringPtrOutput)
}

// The validity period of the logon session of RAM users.
// Valid values: 1 to 24. Unit: hours.
// Default value: 6.
func (o SecurityPreferenceOutput) LoginSessionDuration() pulumi.IntOutput {
	return o.ApplyT(func(v *SecurityPreference) pulumi.IntOutput { return v.LoginSessionDuration }).(pulumi.IntOutput)
}

// MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
// - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
// - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
// - adaptive: Used only during abnormal login.
func (o SecurityPreferenceOutput) MfaOperationForLogin() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPreference) pulumi.StringOutput { return v.MfaOperationForLogin }).(pulumi.StringOutput)
}

// Whether MFA is verified twice during abnormal logon. Value:
// - autonomous (default): Skip, do not force binding.
// - enforceVerify: Force binding validation.
func (o SecurityPreferenceOutput) OperationForRiskLogin() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPreference) pulumi.StringOutput { return v.OperationForRiskLogin }).(pulumi.StringOutput)
}

// Means of multi-factor authentication. Value:
// - sms: secure phone.
// - email: Secure mailbox.
//
// The following arguments will be discarded. Please use new fields as soon as possible:
func (o SecurityPreferenceOutput) VerificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityPreference) pulumi.StringArrayOutput { return v.VerificationTypes }).(pulumi.StringArrayOutput)
}

type SecurityPreferenceArrayOutput struct{ *pulumi.OutputState }

func (SecurityPreferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityPreference)(nil)).Elem()
}

func (o SecurityPreferenceArrayOutput) ToSecurityPreferenceArrayOutput() SecurityPreferenceArrayOutput {
	return o
}

func (o SecurityPreferenceArrayOutput) ToSecurityPreferenceArrayOutputWithContext(ctx context.Context) SecurityPreferenceArrayOutput {
	return o
}

func (o SecurityPreferenceArrayOutput) Index(i pulumi.IntInput) SecurityPreferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityPreference {
		return vs[0].([]*SecurityPreference)[vs[1].(int)]
	}).(SecurityPreferenceOutput)
}

type SecurityPreferenceMapOutput struct{ *pulumi.OutputState }

func (SecurityPreferenceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityPreference)(nil)).Elem()
}

func (o SecurityPreferenceMapOutput) ToSecurityPreferenceMapOutput() SecurityPreferenceMapOutput {
	return o
}

func (o SecurityPreferenceMapOutput) ToSecurityPreferenceMapOutputWithContext(ctx context.Context) SecurityPreferenceMapOutput {
	return o
}

func (o SecurityPreferenceMapOutput) MapIndex(k pulumi.StringInput) SecurityPreferenceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityPreference {
		return vs[0].(map[string]*SecurityPreference)[vs[1].(string)]
	}).(SecurityPreferenceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPreferenceInput)(nil)).Elem(), &SecurityPreference{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPreferenceArrayInput)(nil)).Elem(), SecurityPreferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPreferenceMapInput)(nil)).Elem(), SecurityPreferenceMap{})
	pulumi.RegisterOutputType(SecurityPreferenceOutput{})
	pulumi.RegisterOutputType(SecurityPreferenceArrayOutput{})
	pulumi.RegisterOutputType(SecurityPreferenceMapOutput{})
}
