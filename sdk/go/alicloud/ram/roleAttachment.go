// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a RAM role attachment resource to bind role for several ECS instances.
type RoleAttachment struct {
	pulumi.CustomResourceState

	// The list of ECS instance's IDs.
	InstanceIds pulumi.StringArrayOutput `pulumi:"instanceIds"`
	// The name of role used to bind. This name can have a string of 1 to 64 characters, must contain only alphanumeric characters or hyphens, such as "-", "_", and must not begin with a hyphen.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
}

// NewRoleAttachment registers a new resource with the given unique name, arguments, and options.
func NewRoleAttachment(ctx *pulumi.Context,
	name string, args *RoleAttachmentArgs, opts ...pulumi.ResourceOption) (*RoleAttachment, error) {
	if args == nil || args.InstanceIds == nil {
		return nil, errors.New("missing required argument 'InstanceIds'")
	}
	if args == nil || args.RoleName == nil {
		return nil, errors.New("missing required argument 'RoleName'")
	}
	if args == nil {
		args = &RoleAttachmentArgs{}
	}
	var resource RoleAttachment
	err := ctx.RegisterResource("alicloud:ram/roleAttachment:RoleAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleAttachment gets an existing RoleAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleAttachmentState, opts ...pulumi.ResourceOption) (*RoleAttachment, error) {
	var resource RoleAttachment
	err := ctx.ReadResource("alicloud:ram/roleAttachment:RoleAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleAttachment resources.
type roleAttachmentState struct {
	// The list of ECS instance's IDs.
	InstanceIds []string `pulumi:"instanceIds"`
	// The name of role used to bind. This name can have a string of 1 to 64 characters, must contain only alphanumeric characters or hyphens, such as "-", "_", and must not begin with a hyphen.
	RoleName *string `pulumi:"roleName"`
}

type RoleAttachmentState struct {
	// The list of ECS instance's IDs.
	InstanceIds pulumi.StringArrayInput
	// The name of role used to bind. This name can have a string of 1 to 64 characters, must contain only alphanumeric characters or hyphens, such as "-", "_", and must not begin with a hyphen.
	RoleName pulumi.StringPtrInput
}

func (RoleAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleAttachmentState)(nil)).Elem()
}

type roleAttachmentArgs struct {
	// The list of ECS instance's IDs.
	InstanceIds []string `pulumi:"instanceIds"`
	// The name of role used to bind. This name can have a string of 1 to 64 characters, must contain only alphanumeric characters or hyphens, such as "-", "_", and must not begin with a hyphen.
	RoleName string `pulumi:"roleName"`
}

// The set of arguments for constructing a RoleAttachment resource.
type RoleAttachmentArgs struct {
	// The list of ECS instance's IDs.
	InstanceIds pulumi.StringArrayInput
	// The name of role used to bind. This name can have a string of 1 to 64 characters, must contain only alphanumeric characters or hyphens, such as "-", "_", and must not begin with a hyphen.
	RoleName pulumi.StringInput
}

func (RoleAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleAttachmentArgs)(nil)).Elem()
}

type RoleAttachmentInput interface {
	pulumi.Input

	ToRoleAttachmentOutput() RoleAttachmentOutput
	ToRoleAttachmentOutputWithContext(ctx context.Context) RoleAttachmentOutput
}

func (RoleAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAttachment)(nil)).Elem()
}

func (i RoleAttachment) ToRoleAttachmentOutput() RoleAttachmentOutput {
	return i.ToRoleAttachmentOutputWithContext(context.Background())
}

func (i RoleAttachment) ToRoleAttachmentOutputWithContext(ctx context.Context) RoleAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAttachmentOutput)
}

type RoleAttachmentOutput struct {
	*pulumi.OutputState
}

func (RoleAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAttachmentOutput)(nil)).Elem()
}

func (o RoleAttachmentOutput) ToRoleAttachmentOutput() RoleAttachmentOutput {
	return o
}

func (o RoleAttachmentOutput) ToRoleAttachmentOutputWithContext(ctx context.Context) RoleAttachmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RoleAttachmentOutput{})
}
