// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a RAM Group Policy Attachment resource.
//
// For information about RAM Group Policy Attachment and how to use it, see [What is Group Policy Attachment](https://next.api.alibabacloud.com/document/Ram/2015-05-01/AttachPolicyToGroup).
//
// > **NOTE:** Available since v1.0.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ram"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a RAM Group Policy attachment.
//			group, err := ram.NewGroup(ctx, "group", &ram.GroupArgs{
//				GroupName: pulumi.String("groupName"),
//				Comments:  pulumi.String("this is a group comments."),
//			})
//			if err != nil {
//				return err
//			}
//			_default, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			policy, err := ram.NewPolicy(ctx, "policy", &ram.PolicyArgs{
//				PolicyName: pulumi.Sprintf("tf-example-%v", _default.Result),
//				PolicyDocument: pulumi.String(`    {
//	      \"Statement\": [
//	        {
//	          \"Action\": [
//	            \"oss:ListObjects\",
//	            \"oss:GetObject\"
//	          ],
//	          \"Effect\": \"Allow\",
//	          \"Resource\": [
//	            \"acs:oss:*:*:mybucket\",
//	            \"acs:oss:*:*:mybucket/*\"
//	          ]
//	        }
//	      ],
//	        \"Version\": \"1\"
//	    }
//
// `),
//
//				Description: pulumi.String("this is a policy test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ram.NewGroupPolicyAttachment(ctx, "attach", &ram.GroupPolicyAttachmentArgs{
//				PolicyName: policy.PolicyName,
//				PolicyType: policy.Type,
//				GroupName:  group.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RAM Group Policy Attachment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:ram/groupPolicyAttachment:GroupPolicyAttachment example group:<policy_name>:<policy_type>:<group_name>
// ```
type GroupPolicyAttachment struct {
	pulumi.CustomResourceState

	// The name of the group.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// The name of the policy.
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
	// Policy type.
	// - Custom: Custom policy.
	// - System: System policy.
	PolicyType pulumi.StringOutput `pulumi:"policyType"`
}

// NewGroupPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewGroupPolicyAttachment(ctx *pulumi.Context,
	name string, args *GroupPolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*GroupPolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	if args.PolicyType == nil {
		return nil, errors.New("invalid value for required argument 'PolicyType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupPolicyAttachment
	err := ctx.RegisterResource("alicloud:ram/groupPolicyAttachment:GroupPolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupPolicyAttachment gets an existing GroupPolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupPolicyAttachmentState, opts ...pulumi.ResourceOption) (*GroupPolicyAttachment, error) {
	var resource GroupPolicyAttachment
	err := ctx.ReadResource("alicloud:ram/groupPolicyAttachment:GroupPolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupPolicyAttachment resources.
type groupPolicyAttachmentState struct {
	// The name of the group.
	GroupName *string `pulumi:"groupName"`
	// The name of the policy.
	PolicyName *string `pulumi:"policyName"`
	// Policy type.
	// - Custom: Custom policy.
	// - System: System policy.
	PolicyType *string `pulumi:"policyType"`
}

type GroupPolicyAttachmentState struct {
	// The name of the group.
	GroupName pulumi.StringPtrInput
	// The name of the policy.
	PolicyName pulumi.StringPtrInput
	// Policy type.
	// - Custom: Custom policy.
	// - System: System policy.
	PolicyType pulumi.StringPtrInput
}

func (GroupPolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyAttachmentState)(nil)).Elem()
}

type groupPolicyAttachmentArgs struct {
	// The name of the group.
	GroupName string `pulumi:"groupName"`
	// The name of the policy.
	PolicyName string `pulumi:"policyName"`
	// Policy type.
	// - Custom: Custom policy.
	// - System: System policy.
	PolicyType string `pulumi:"policyType"`
}

// The set of arguments for constructing a GroupPolicyAttachment resource.
type GroupPolicyAttachmentArgs struct {
	// The name of the group.
	GroupName pulumi.StringInput
	// The name of the policy.
	PolicyName pulumi.StringInput
	// Policy type.
	// - Custom: Custom policy.
	// - System: System policy.
	PolicyType pulumi.StringInput
}

func (GroupPolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyAttachmentArgs)(nil)).Elem()
}

type GroupPolicyAttachmentInput interface {
	pulumi.Input

	ToGroupPolicyAttachmentOutput() GroupPolicyAttachmentOutput
	ToGroupPolicyAttachmentOutputWithContext(ctx context.Context) GroupPolicyAttachmentOutput
}

func (*GroupPolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyAttachment)(nil)).Elem()
}

func (i *GroupPolicyAttachment) ToGroupPolicyAttachmentOutput() GroupPolicyAttachmentOutput {
	return i.ToGroupPolicyAttachmentOutputWithContext(context.Background())
}

func (i *GroupPolicyAttachment) ToGroupPolicyAttachmentOutputWithContext(ctx context.Context) GroupPolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAttachmentOutput)
}

// GroupPolicyAttachmentArrayInput is an input type that accepts GroupPolicyAttachmentArray and GroupPolicyAttachmentArrayOutput values.
// You can construct a concrete instance of `GroupPolicyAttachmentArrayInput` via:
//
//	GroupPolicyAttachmentArray{ GroupPolicyAttachmentArgs{...} }
type GroupPolicyAttachmentArrayInput interface {
	pulumi.Input

	ToGroupPolicyAttachmentArrayOutput() GroupPolicyAttachmentArrayOutput
	ToGroupPolicyAttachmentArrayOutputWithContext(context.Context) GroupPolicyAttachmentArrayOutput
}

type GroupPolicyAttachmentArray []GroupPolicyAttachmentInput

func (GroupPolicyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPolicyAttachment)(nil)).Elem()
}

func (i GroupPolicyAttachmentArray) ToGroupPolicyAttachmentArrayOutput() GroupPolicyAttachmentArrayOutput {
	return i.ToGroupPolicyAttachmentArrayOutputWithContext(context.Background())
}

func (i GroupPolicyAttachmentArray) ToGroupPolicyAttachmentArrayOutputWithContext(ctx context.Context) GroupPolicyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAttachmentArrayOutput)
}

// GroupPolicyAttachmentMapInput is an input type that accepts GroupPolicyAttachmentMap and GroupPolicyAttachmentMapOutput values.
// You can construct a concrete instance of `GroupPolicyAttachmentMapInput` via:
//
//	GroupPolicyAttachmentMap{ "key": GroupPolicyAttachmentArgs{...} }
type GroupPolicyAttachmentMapInput interface {
	pulumi.Input

	ToGroupPolicyAttachmentMapOutput() GroupPolicyAttachmentMapOutput
	ToGroupPolicyAttachmentMapOutputWithContext(context.Context) GroupPolicyAttachmentMapOutput
}

type GroupPolicyAttachmentMap map[string]GroupPolicyAttachmentInput

func (GroupPolicyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPolicyAttachment)(nil)).Elem()
}

func (i GroupPolicyAttachmentMap) ToGroupPolicyAttachmentMapOutput() GroupPolicyAttachmentMapOutput {
	return i.ToGroupPolicyAttachmentMapOutputWithContext(context.Background())
}

func (i GroupPolicyAttachmentMap) ToGroupPolicyAttachmentMapOutputWithContext(ctx context.Context) GroupPolicyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAttachmentMapOutput)
}

type GroupPolicyAttachmentOutput struct{ *pulumi.OutputState }

func (GroupPolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyAttachment)(nil)).Elem()
}

func (o GroupPolicyAttachmentOutput) ToGroupPolicyAttachmentOutput() GroupPolicyAttachmentOutput {
	return o
}

func (o GroupPolicyAttachmentOutput) ToGroupPolicyAttachmentOutputWithContext(ctx context.Context) GroupPolicyAttachmentOutput {
	return o
}

// The name of the group.
func (o GroupPolicyAttachmentOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyAttachment) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// The name of the policy.
func (o GroupPolicyAttachmentOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyAttachment) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

// Policy type.
// - Custom: Custom policy.
// - System: System policy.
func (o GroupPolicyAttachmentOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyAttachment) pulumi.StringOutput { return v.PolicyType }).(pulumi.StringOutput)
}

type GroupPolicyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GroupPolicyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPolicyAttachment)(nil)).Elem()
}

func (o GroupPolicyAttachmentArrayOutput) ToGroupPolicyAttachmentArrayOutput() GroupPolicyAttachmentArrayOutput {
	return o
}

func (o GroupPolicyAttachmentArrayOutput) ToGroupPolicyAttachmentArrayOutputWithContext(ctx context.Context) GroupPolicyAttachmentArrayOutput {
	return o
}

func (o GroupPolicyAttachmentArrayOutput) Index(i pulumi.IntInput) GroupPolicyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupPolicyAttachment {
		return vs[0].([]*GroupPolicyAttachment)[vs[1].(int)]
	}).(GroupPolicyAttachmentOutput)
}

type GroupPolicyAttachmentMapOutput struct{ *pulumi.OutputState }

func (GroupPolicyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPolicyAttachment)(nil)).Elem()
}

func (o GroupPolicyAttachmentMapOutput) ToGroupPolicyAttachmentMapOutput() GroupPolicyAttachmentMapOutput {
	return o
}

func (o GroupPolicyAttachmentMapOutput) ToGroupPolicyAttachmentMapOutputWithContext(ctx context.Context) GroupPolicyAttachmentMapOutput {
	return o
}

func (o GroupPolicyAttachmentMapOutput) MapIndex(k pulumi.StringInput) GroupPolicyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupPolicyAttachment {
		return vs[0].(map[string]*GroupPolicyAttachment)[vs[1].(string)]
	}).(GroupPolicyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAttachmentInput)(nil)).Elem(), &GroupPolicyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAttachmentArrayInput)(nil)).Elem(), GroupPolicyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAttachmentMapInput)(nil)).Elem(), GroupPolicyAttachmentMap{})
	pulumi.RegisterOutputType(GroupPolicyAttachmentOutput{})
	pulumi.RegisterOutputType(GroupPolicyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GroupPolicyAttachmentMapOutput{})
}
