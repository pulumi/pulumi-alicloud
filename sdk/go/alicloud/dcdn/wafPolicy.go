// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcdn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DCDN Waf Policy resource.
//
// For information about DCDN Waf Policy and how to use it, see [What is Waf Policy](https://www.alibabacloud.com/help/en/dynamic-route-for-cdn/latest/set-the-protection-policies#doc-api-dcdn-CreateDcdnWafPolicy).
//
// > **NOTE:** Available in v1.184.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dcdn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dcdn.NewWafPolicy(ctx, "example", &dcdn.WafPolicyArgs{
//				DefenseScene: pulumi.String("waf_group"),
//				PolicyName:   pulumi.Any(_var.Name),
//				PolicyType:   pulumi.String("custom"),
//				Status:       pulumi.String("on"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DCDN Waf Policy can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:dcdn/wafPolicy:WafPolicy example <id>
//
// ```
type WafPolicy struct {
	pulumi.CustomResourceState

	// The type of protection policy. Valid values: `wafGroup`, `customAcl`, `whitelist`, `ipBlacklist`, `regionBlock`.
	DefenseScene pulumi.StringOutput `pulumi:"defenseScene"`
	// The name of the protection policy. The name must be 1 to 64 characters in length, and can contain letters, digits,and underscores (_).
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
	// The type of the protection policy. Valid values: `default`, `custom`.
	PolicyType pulumi.StringOutput `pulumi:"policyType"`
	// The status of the resource. Valid values: `on`, `off`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewWafPolicy registers a new resource with the given unique name, arguments, and options.
func NewWafPolicy(ctx *pulumi.Context,
	name string, args *WafPolicyArgs, opts ...pulumi.ResourceOption) (*WafPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefenseScene == nil {
		return nil, errors.New("invalid value for required argument 'DefenseScene'")
	}
	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	if args.PolicyType == nil {
		return nil, errors.New("invalid value for required argument 'PolicyType'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	var resource WafPolicy
	err := ctx.RegisterResource("alicloud:dcdn/wafPolicy:WafPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWafPolicy gets an existing WafPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWafPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WafPolicyState, opts ...pulumi.ResourceOption) (*WafPolicy, error) {
	var resource WafPolicy
	err := ctx.ReadResource("alicloud:dcdn/wafPolicy:WafPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WafPolicy resources.
type wafPolicyState struct {
	// The type of protection policy. Valid values: `wafGroup`, `customAcl`, `whitelist`, `ipBlacklist`, `regionBlock`.
	DefenseScene *string `pulumi:"defenseScene"`
	// The name of the protection policy. The name must be 1 to 64 characters in length, and can contain letters, digits,and underscores (_).
	PolicyName *string `pulumi:"policyName"`
	// The type of the protection policy. Valid values: `default`, `custom`.
	PolicyType *string `pulumi:"policyType"`
	// The status of the resource. Valid values: `on`, `off`.
	Status *string `pulumi:"status"`
}

type WafPolicyState struct {
	// The type of protection policy. Valid values: `wafGroup`, `customAcl`, `whitelist`, `ipBlacklist`, `regionBlock`.
	DefenseScene pulumi.StringPtrInput
	// The name of the protection policy. The name must be 1 to 64 characters in length, and can contain letters, digits,and underscores (_).
	PolicyName pulumi.StringPtrInput
	// The type of the protection policy. Valid values: `default`, `custom`.
	PolicyType pulumi.StringPtrInput
	// The status of the resource. Valid values: `on`, `off`.
	Status pulumi.StringPtrInput
}

func (WafPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*wafPolicyState)(nil)).Elem()
}

type wafPolicyArgs struct {
	// The type of protection policy. Valid values: `wafGroup`, `customAcl`, `whitelist`, `ipBlacklist`, `regionBlock`.
	DefenseScene string `pulumi:"defenseScene"`
	// The name of the protection policy. The name must be 1 to 64 characters in length, and can contain letters, digits,and underscores (_).
	PolicyName string `pulumi:"policyName"`
	// The type of the protection policy. Valid values: `default`, `custom`.
	PolicyType string `pulumi:"policyType"`
	// The status of the resource. Valid values: `on`, `off`.
	Status string `pulumi:"status"`
}

// The set of arguments for constructing a WafPolicy resource.
type WafPolicyArgs struct {
	// The type of protection policy. Valid values: `wafGroup`, `customAcl`, `whitelist`, `ipBlacklist`, `regionBlock`.
	DefenseScene pulumi.StringInput
	// The name of the protection policy. The name must be 1 to 64 characters in length, and can contain letters, digits,and underscores (_).
	PolicyName pulumi.StringInput
	// The type of the protection policy. Valid values: `default`, `custom`.
	PolicyType pulumi.StringInput
	// The status of the resource. Valid values: `on`, `off`.
	Status pulumi.StringInput
}

func (WafPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wafPolicyArgs)(nil)).Elem()
}

type WafPolicyInput interface {
	pulumi.Input

	ToWafPolicyOutput() WafPolicyOutput
	ToWafPolicyOutputWithContext(ctx context.Context) WafPolicyOutput
}

func (*WafPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**WafPolicy)(nil)).Elem()
}

func (i *WafPolicy) ToWafPolicyOutput() WafPolicyOutput {
	return i.ToWafPolicyOutputWithContext(context.Background())
}

func (i *WafPolicy) ToWafPolicyOutputWithContext(ctx context.Context) WafPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafPolicyOutput)
}

// WafPolicyArrayInput is an input type that accepts WafPolicyArray and WafPolicyArrayOutput values.
// You can construct a concrete instance of `WafPolicyArrayInput` via:
//
//	WafPolicyArray{ WafPolicyArgs{...} }
type WafPolicyArrayInput interface {
	pulumi.Input

	ToWafPolicyArrayOutput() WafPolicyArrayOutput
	ToWafPolicyArrayOutputWithContext(context.Context) WafPolicyArrayOutput
}

type WafPolicyArray []WafPolicyInput

func (WafPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WafPolicy)(nil)).Elem()
}

func (i WafPolicyArray) ToWafPolicyArrayOutput() WafPolicyArrayOutput {
	return i.ToWafPolicyArrayOutputWithContext(context.Background())
}

func (i WafPolicyArray) ToWafPolicyArrayOutputWithContext(ctx context.Context) WafPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafPolicyArrayOutput)
}

// WafPolicyMapInput is an input type that accepts WafPolicyMap and WafPolicyMapOutput values.
// You can construct a concrete instance of `WafPolicyMapInput` via:
//
//	WafPolicyMap{ "key": WafPolicyArgs{...} }
type WafPolicyMapInput interface {
	pulumi.Input

	ToWafPolicyMapOutput() WafPolicyMapOutput
	ToWafPolicyMapOutputWithContext(context.Context) WafPolicyMapOutput
}

type WafPolicyMap map[string]WafPolicyInput

func (WafPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WafPolicy)(nil)).Elem()
}

func (i WafPolicyMap) ToWafPolicyMapOutput() WafPolicyMapOutput {
	return i.ToWafPolicyMapOutputWithContext(context.Background())
}

func (i WafPolicyMap) ToWafPolicyMapOutputWithContext(ctx context.Context) WafPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafPolicyMapOutput)
}

type WafPolicyOutput struct{ *pulumi.OutputState }

func (WafPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WafPolicy)(nil)).Elem()
}

func (o WafPolicyOutput) ToWafPolicyOutput() WafPolicyOutput {
	return o
}

func (o WafPolicyOutput) ToWafPolicyOutputWithContext(ctx context.Context) WafPolicyOutput {
	return o
}

// The type of protection policy. Valid values: `wafGroup`, `customAcl`, `whitelist`, `ipBlacklist`, `regionBlock`.
func (o WafPolicyOutput) DefenseScene() pulumi.StringOutput {
	return o.ApplyT(func(v *WafPolicy) pulumi.StringOutput { return v.DefenseScene }).(pulumi.StringOutput)
}

// The name of the protection policy. The name must be 1 to 64 characters in length, and can contain letters, digits,and underscores (_).
func (o WafPolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *WafPolicy) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

// The type of the protection policy. Valid values: `default`, `custom`.
func (o WafPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *WafPolicy) pulumi.StringOutput { return v.PolicyType }).(pulumi.StringOutput)
}

// The status of the resource. Valid values: `on`, `off`.
func (o WafPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *WafPolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type WafPolicyArrayOutput struct{ *pulumi.OutputState }

func (WafPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WafPolicy)(nil)).Elem()
}

func (o WafPolicyArrayOutput) ToWafPolicyArrayOutput() WafPolicyArrayOutput {
	return o
}

func (o WafPolicyArrayOutput) ToWafPolicyArrayOutputWithContext(ctx context.Context) WafPolicyArrayOutput {
	return o
}

func (o WafPolicyArrayOutput) Index(i pulumi.IntInput) WafPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WafPolicy {
		return vs[0].([]*WafPolicy)[vs[1].(int)]
	}).(WafPolicyOutput)
}

type WafPolicyMapOutput struct{ *pulumi.OutputState }

func (WafPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WafPolicy)(nil)).Elem()
}

func (o WafPolicyMapOutput) ToWafPolicyMapOutput() WafPolicyMapOutput {
	return o
}

func (o WafPolicyMapOutput) ToWafPolicyMapOutputWithContext(ctx context.Context) WafPolicyMapOutput {
	return o
}

func (o WafPolicyMapOutput) MapIndex(k pulumi.StringInput) WafPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WafPolicy {
		return vs[0].(map[string]*WafPolicy)[vs[1].(string)]
	}).(WafPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WafPolicyInput)(nil)).Elem(), &WafPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*WafPolicyArrayInput)(nil)).Elem(), WafPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WafPolicyMapInput)(nil)).Elem(), WafPolicyMap{})
	pulumi.RegisterOutputType(WafPolicyOutput{})
	pulumi.RegisterOutputType(WafPolicyArrayOutput{})
	pulumi.RegisterOutputType(WafPolicyMapOutput{})
}
