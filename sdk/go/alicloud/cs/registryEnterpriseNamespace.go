// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Container Registry Enterprise Edition Namespace resource.
//
// For information about Container Registry Enterprise Edition Namespace and how to use it, see [What is Namespace](https://www.alibabacloud.com/help/en/acr/developer-reference/api-cr-2018-12-01-createnamespace)
//
// > **NOTE:** Available since v1.86.0.
//
// > **NOTE:** You need to set your registry password in Container Registry Enterprise Edition console before use this resource.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cr"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			defaultRegistryEnterpriseInstance, err := cr.NewRegistryEnterpriseInstance(ctx, "default", &cr.RegistryEnterpriseInstanceArgs{
//				PaymentType:   pulumi.String("Subscription"),
//				Period:        pulumi.Int(1),
//				RenewPeriod:   pulumi.Int(0),
//				RenewalStatus: pulumi.String("ManualRenewal"),
//				InstanceType:  pulumi.String("Advanced"),
//				InstanceName:  pulumi.Sprintf("%v-%v", name, _default.Result),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cs.NewRegistryEnterpriseNamespace(ctx, "default", &cs.RegistryEnterpriseNamespaceArgs{
//				InstanceId:        defaultRegistryEnterpriseInstance.ID(),
//				Name:              pulumi.Sprintf("%v-%v", name, _default.Result),
//				AutoCreate:        pulumi.Bool(false),
//				DefaultVisibility: pulumi.String("PUBLIC"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Container Registry Enterprise Edition Namespace can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:cs/registryEnterpriseNamespace:RegistryEnterpriseNamespace example <instance_id>:<name>
// ```
type RegistryEnterpriseNamespace struct {
	pulumi.CustomResourceState

	// Specifies whether to automatically create an image repository in the namespace. Default value: `false`. Valid values: `true`, `false`.
	AutoCreate pulumi.BoolPtrOutput `pulumi:"autoCreate"`
	// The default type of the repository that is automatically created. Valid values:
	// - `PUBLIC`: A public repository.
	// - `PRIVATE`: A private repository.
	DefaultVisibility pulumi.StringOutput `pulumi:"defaultVisibility"`
	// The ID of the Container Registry Enterprise Edition instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The name of the Container Registry Enterprise Edition Name. It must be `2` to `120` characters in length, and can contain lowercase letters, digits, underscores (_), hyphens (-), and periods (.). It cannot start or end with a delimiter.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRegistryEnterpriseNamespace registers a new resource with the given unique name, arguments, and options.
func NewRegistryEnterpriseNamespace(ctx *pulumi.Context,
	name string, args *RegistryEnterpriseNamespaceArgs, opts ...pulumi.ResourceOption) (*RegistryEnterpriseNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistryEnterpriseNamespace
	err := ctx.RegisterResource("alicloud:cs/registryEnterpriseNamespace:RegistryEnterpriseNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryEnterpriseNamespace gets an existing RegistryEnterpriseNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryEnterpriseNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryEnterpriseNamespaceState, opts ...pulumi.ResourceOption) (*RegistryEnterpriseNamespace, error) {
	var resource RegistryEnterpriseNamespace
	err := ctx.ReadResource("alicloud:cs/registryEnterpriseNamespace:RegistryEnterpriseNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryEnterpriseNamespace resources.
type registryEnterpriseNamespaceState struct {
	// Specifies whether to automatically create an image repository in the namespace. Default value: `false`. Valid values: `true`, `false`.
	AutoCreate *bool `pulumi:"autoCreate"`
	// The default type of the repository that is automatically created. Valid values:
	// - `PUBLIC`: A public repository.
	// - `PRIVATE`: A private repository.
	DefaultVisibility *string `pulumi:"defaultVisibility"`
	// The ID of the Container Registry Enterprise Edition instance.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the Container Registry Enterprise Edition Name. It must be `2` to `120` characters in length, and can contain lowercase letters, digits, underscores (_), hyphens (-), and periods (.). It cannot start or end with a delimiter.
	Name *string `pulumi:"name"`
}

type RegistryEnterpriseNamespaceState struct {
	// Specifies whether to automatically create an image repository in the namespace. Default value: `false`. Valid values: `true`, `false`.
	AutoCreate pulumi.BoolPtrInput
	// The default type of the repository that is automatically created. Valid values:
	// - `PUBLIC`: A public repository.
	// - `PRIVATE`: A private repository.
	DefaultVisibility pulumi.StringPtrInput
	// The ID of the Container Registry Enterprise Edition instance.
	InstanceId pulumi.StringPtrInput
	// The name of the Container Registry Enterprise Edition Name. It must be `2` to `120` characters in length, and can contain lowercase letters, digits, underscores (_), hyphens (-), and periods (.). It cannot start or end with a delimiter.
	Name pulumi.StringPtrInput
}

func (RegistryEnterpriseNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryEnterpriseNamespaceState)(nil)).Elem()
}

type registryEnterpriseNamespaceArgs struct {
	// Specifies whether to automatically create an image repository in the namespace. Default value: `false`. Valid values: `true`, `false`.
	AutoCreate *bool `pulumi:"autoCreate"`
	// The default type of the repository that is automatically created. Valid values:
	// - `PUBLIC`: A public repository.
	// - `PRIVATE`: A private repository.
	DefaultVisibility *string `pulumi:"defaultVisibility"`
	// The ID of the Container Registry Enterprise Edition instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the Container Registry Enterprise Edition Name. It must be `2` to `120` characters in length, and can contain lowercase letters, digits, underscores (_), hyphens (-), and periods (.). It cannot start or end with a delimiter.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RegistryEnterpriseNamespace resource.
type RegistryEnterpriseNamespaceArgs struct {
	// Specifies whether to automatically create an image repository in the namespace. Default value: `false`. Valid values: `true`, `false`.
	AutoCreate pulumi.BoolPtrInput
	// The default type of the repository that is automatically created. Valid values:
	// - `PUBLIC`: A public repository.
	// - `PRIVATE`: A private repository.
	DefaultVisibility pulumi.StringPtrInput
	// The ID of the Container Registry Enterprise Edition instance.
	InstanceId pulumi.StringInput
	// The name of the Container Registry Enterprise Edition Name. It must be `2` to `120` characters in length, and can contain lowercase letters, digits, underscores (_), hyphens (-), and periods (.). It cannot start or end with a delimiter.
	Name pulumi.StringPtrInput
}

func (RegistryEnterpriseNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryEnterpriseNamespaceArgs)(nil)).Elem()
}

type RegistryEnterpriseNamespaceInput interface {
	pulumi.Input

	ToRegistryEnterpriseNamespaceOutput() RegistryEnterpriseNamespaceOutput
	ToRegistryEnterpriseNamespaceOutputWithContext(ctx context.Context) RegistryEnterpriseNamespaceOutput
}

func (*RegistryEnterpriseNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryEnterpriseNamespace)(nil)).Elem()
}

func (i *RegistryEnterpriseNamespace) ToRegistryEnterpriseNamespaceOutput() RegistryEnterpriseNamespaceOutput {
	return i.ToRegistryEnterpriseNamespaceOutputWithContext(context.Background())
}

func (i *RegistryEnterpriseNamespace) ToRegistryEnterpriseNamespaceOutputWithContext(ctx context.Context) RegistryEnterpriseNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEnterpriseNamespaceOutput)
}

// RegistryEnterpriseNamespaceArrayInput is an input type that accepts RegistryEnterpriseNamespaceArray and RegistryEnterpriseNamespaceArrayOutput values.
// You can construct a concrete instance of `RegistryEnterpriseNamespaceArrayInput` via:
//
//	RegistryEnterpriseNamespaceArray{ RegistryEnterpriseNamespaceArgs{...} }
type RegistryEnterpriseNamespaceArrayInput interface {
	pulumi.Input

	ToRegistryEnterpriseNamespaceArrayOutput() RegistryEnterpriseNamespaceArrayOutput
	ToRegistryEnterpriseNamespaceArrayOutputWithContext(context.Context) RegistryEnterpriseNamespaceArrayOutput
}

type RegistryEnterpriseNamespaceArray []RegistryEnterpriseNamespaceInput

func (RegistryEnterpriseNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryEnterpriseNamespace)(nil)).Elem()
}

func (i RegistryEnterpriseNamespaceArray) ToRegistryEnterpriseNamespaceArrayOutput() RegistryEnterpriseNamespaceArrayOutput {
	return i.ToRegistryEnterpriseNamespaceArrayOutputWithContext(context.Background())
}

func (i RegistryEnterpriseNamespaceArray) ToRegistryEnterpriseNamespaceArrayOutputWithContext(ctx context.Context) RegistryEnterpriseNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEnterpriseNamespaceArrayOutput)
}

// RegistryEnterpriseNamespaceMapInput is an input type that accepts RegistryEnterpriseNamespaceMap and RegistryEnterpriseNamespaceMapOutput values.
// You can construct a concrete instance of `RegistryEnterpriseNamespaceMapInput` via:
//
//	RegistryEnterpriseNamespaceMap{ "key": RegistryEnterpriseNamespaceArgs{...} }
type RegistryEnterpriseNamespaceMapInput interface {
	pulumi.Input

	ToRegistryEnterpriseNamespaceMapOutput() RegistryEnterpriseNamespaceMapOutput
	ToRegistryEnterpriseNamespaceMapOutputWithContext(context.Context) RegistryEnterpriseNamespaceMapOutput
}

type RegistryEnterpriseNamespaceMap map[string]RegistryEnterpriseNamespaceInput

func (RegistryEnterpriseNamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryEnterpriseNamespace)(nil)).Elem()
}

func (i RegistryEnterpriseNamespaceMap) ToRegistryEnterpriseNamespaceMapOutput() RegistryEnterpriseNamespaceMapOutput {
	return i.ToRegistryEnterpriseNamespaceMapOutputWithContext(context.Background())
}

func (i RegistryEnterpriseNamespaceMap) ToRegistryEnterpriseNamespaceMapOutputWithContext(ctx context.Context) RegistryEnterpriseNamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEnterpriseNamespaceMapOutput)
}

type RegistryEnterpriseNamespaceOutput struct{ *pulumi.OutputState }

func (RegistryEnterpriseNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryEnterpriseNamespace)(nil)).Elem()
}

func (o RegistryEnterpriseNamespaceOutput) ToRegistryEnterpriseNamespaceOutput() RegistryEnterpriseNamespaceOutput {
	return o
}

func (o RegistryEnterpriseNamespaceOutput) ToRegistryEnterpriseNamespaceOutputWithContext(ctx context.Context) RegistryEnterpriseNamespaceOutput {
	return o
}

// Specifies whether to automatically create an image repository in the namespace. Default value: `false`. Valid values: `true`, `false`.
func (o RegistryEnterpriseNamespaceOutput) AutoCreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegistryEnterpriseNamespace) pulumi.BoolPtrOutput { return v.AutoCreate }).(pulumi.BoolPtrOutput)
}

// The default type of the repository that is automatically created. Valid values:
// - `PUBLIC`: A public repository.
// - `PRIVATE`: A private repository.
func (o RegistryEnterpriseNamespaceOutput) DefaultVisibility() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryEnterpriseNamespace) pulumi.StringOutput { return v.DefaultVisibility }).(pulumi.StringOutput)
}

// The ID of the Container Registry Enterprise Edition instance.
func (o RegistryEnterpriseNamespaceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryEnterpriseNamespace) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the Container Registry Enterprise Edition Name. It must be `2` to `120` characters in length, and can contain lowercase letters, digits, underscores (_), hyphens (-), and periods (.). It cannot start or end with a delimiter.
func (o RegistryEnterpriseNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryEnterpriseNamespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type RegistryEnterpriseNamespaceArrayOutput struct{ *pulumi.OutputState }

func (RegistryEnterpriseNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryEnterpriseNamespace)(nil)).Elem()
}

func (o RegistryEnterpriseNamespaceArrayOutput) ToRegistryEnterpriseNamespaceArrayOutput() RegistryEnterpriseNamespaceArrayOutput {
	return o
}

func (o RegistryEnterpriseNamespaceArrayOutput) ToRegistryEnterpriseNamespaceArrayOutputWithContext(ctx context.Context) RegistryEnterpriseNamespaceArrayOutput {
	return o
}

func (o RegistryEnterpriseNamespaceArrayOutput) Index(i pulumi.IntInput) RegistryEnterpriseNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegistryEnterpriseNamespace {
		return vs[0].([]*RegistryEnterpriseNamespace)[vs[1].(int)]
	}).(RegistryEnterpriseNamespaceOutput)
}

type RegistryEnterpriseNamespaceMapOutput struct{ *pulumi.OutputState }

func (RegistryEnterpriseNamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryEnterpriseNamespace)(nil)).Elem()
}

func (o RegistryEnterpriseNamespaceMapOutput) ToRegistryEnterpriseNamespaceMapOutput() RegistryEnterpriseNamespaceMapOutput {
	return o
}

func (o RegistryEnterpriseNamespaceMapOutput) ToRegistryEnterpriseNamespaceMapOutputWithContext(ctx context.Context) RegistryEnterpriseNamespaceMapOutput {
	return o
}

func (o RegistryEnterpriseNamespaceMapOutput) MapIndex(k pulumi.StringInput) RegistryEnterpriseNamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegistryEnterpriseNamespace {
		return vs[0].(map[string]*RegistryEnterpriseNamespace)[vs[1].(string)]
	}).(RegistryEnterpriseNamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryEnterpriseNamespaceInput)(nil)).Elem(), &RegistryEnterpriseNamespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryEnterpriseNamespaceArrayInput)(nil)).Elem(), RegistryEnterpriseNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryEnterpriseNamespaceMapInput)(nil)).Elem(), RegistryEnterpriseNamespaceMap{})
	pulumi.RegisterOutputType(RegistryEnterpriseNamespaceOutput{})
	pulumi.RegisterOutputType(RegistryEnterpriseNamespaceArrayOutput{})
	pulumi.RegisterOutputType(RegistryEnterpriseNamespaceMapOutput{})
}
