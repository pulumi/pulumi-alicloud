// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("10.4.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "default", &vpc.SwitchArgs{
//				VswitchName: pulumi.String(name),
//				CidrBlock:   pulumi.String("10.4.0.0/24"),
//				VpcId:       defaultNetwork.ID(),
//				ZoneId:      pulumi.String(_default.Zones[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			invokeCidrsubnet, err := std.Cidrsubnet(ctx, &std.CidrsubnetArgs{
//				Input:   "10.0.0.0/8",
//				Newbits: 8,
//				Netnum:  36,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeCidrsubnet1, err := std.Cidrsubnet(ctx, &std.CidrsubnetArgs{
//				Input:   "172.16.0.0/16",
//				Newbits: 4,
//				Netnum:  7,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"IngressDashboardEnabled": "true",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			defaultManagedKubernetes, err := cs.NewManagedKubernetes(ctx, "default", &cs.ManagedKubernetesArgs{
//				NamePrefix:  pulumi.String(name),
//				ClusterSpec: pulumi.String("ack.pro.small"),
//				WorkerVswitchIds: pulumi.StringArray{
//					defaultSwitch.ID(),
//				},
//				NewNatGateway:      pulumi.Bool(false),
//				PodCidr:            pulumi.String(invokeCidrsubnet.Result),
//				ServiceCidr:        pulumi.String(invokeCidrsubnet1.Result),
//				SlbInternetEnabled: pulumi.Bool(true),
//				Addons: cs.ManagedKubernetesAddonArray{
//					&cs.ManagedKubernetesAddonArgs{
//						Name:     pulumi.String("logtail-ds"),
//						Config:   pulumi.String(json0),
//						Disabled: pulumi.Bool(false),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// data source provides the information of available addons
//			_ = cs.GetKubernetesAddonsOutput(ctx, cs.GetKubernetesAddonsOutputArgs{
//				ClusterId: defaultManagedKubernetes.ID(),
//				NameRegex: pulumi.String("logtail-ds"),
//			}, nil)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			// Manage addon resource
//			_, err = cs.NewKubernetesAddon(ctx, "logtail-ds", &cs.KubernetesAddonArgs{
//				ClusterId: defaultManagedKubernetes.ID(),
//				Name:      pulumi.String("logtail-ds"),
//				Version:   pulumi.String("v1.6.0.0-aliyun"),
//				Config:    pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// **Installing of addon**
// When a cluster is created, some system addons and those specified at the time of cluster creation will be installed, so when an addon resource is applied:
// * If the addon already exists in the cluster and its version is the same as the specified version, it will be skipped and will not be reinstalled.
// * If the addon already exists in the cluster and its version is different from the specified version, the addon will be upgraded.
// * If the addon does not exist in the cluster, it will be installed.
//
// ## Import
//
// Cluster addon can be imported by cluster id and addon name. Then write the addon.tf file according to the result of `pulumi preview`.
//
// ```sh
// $ pulumi import alicloud:cs/kubernetesAddon:KubernetesAddon my_addon <cluster_id>:<addon_name>
// ```
type KubernetesAddon struct {
	pulumi.CustomResourceState

	// Is the addon ready for upgrade.
	CanUpgrade pulumi.BoolOutput `pulumi:"canUpgrade"`
	// Whether to clean up cloud resources when deleting. Currently only works for addon `ack-virtual-node` and you must specify it when uninstall addon `ack-virtual-node`. Valid values: `true`: clean up, `false`: do not clean up.
	CleanupCloudResources pulumi.BoolPtrOutput `pulumi:"cleanupCloudResources"`
	// The id of kubernetes cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The customized configuration of addon. Your customized configuration will be merged to existed configuration stored in server. If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. You can checkout the customized configuration of the addon through datasource `cs.getKubernetesAddonMetadata`, the returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet. You can also checkout the current custom configuration through the data source `cs.getKubernetesAddons`.
	Config pulumi.StringOutput `pulumi:"config"`
	// The name of addon.
	Name pulumi.StringOutput `pulumi:"name"`
	// The version which addon can be upgraded to.
	NextVersion pulumi.StringOutput `pulumi:"nextVersion"`
	// Is it a mandatory addon to be installed.
	Required pulumi.BoolOutput `pulumi:"required"`
	// The current version of addon.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewKubernetesAddon registers a new resource with the given unique name, arguments, and options.
func NewKubernetesAddon(ctx *pulumi.Context,
	name string, args *KubernetesAddonArgs, opts ...pulumi.ResourceOption) (*KubernetesAddon, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubernetesAddon
	err := ctx.RegisterResource("alicloud:cs/kubernetesAddon:KubernetesAddon", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesAddon gets an existing KubernetesAddon resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesAddon(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesAddonState, opts ...pulumi.ResourceOption) (*KubernetesAddon, error) {
	var resource KubernetesAddon
	err := ctx.ReadResource("alicloud:cs/kubernetesAddon:KubernetesAddon", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesAddon resources.
type kubernetesAddonState struct {
	// Is the addon ready for upgrade.
	CanUpgrade *bool `pulumi:"canUpgrade"`
	// Whether to clean up cloud resources when deleting. Currently only works for addon `ack-virtual-node` and you must specify it when uninstall addon `ack-virtual-node`. Valid values: `true`: clean up, `false`: do not clean up.
	CleanupCloudResources *bool `pulumi:"cleanupCloudResources"`
	// The id of kubernetes cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The customized configuration of addon. Your customized configuration will be merged to existed configuration stored in server. If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. You can checkout the customized configuration of the addon through datasource `cs.getKubernetesAddonMetadata`, the returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet. You can also checkout the current custom configuration through the data source `cs.getKubernetesAddons`.
	Config *string `pulumi:"config"`
	// The name of addon.
	Name *string `pulumi:"name"`
	// The version which addon can be upgraded to.
	NextVersion *string `pulumi:"nextVersion"`
	// Is it a mandatory addon to be installed.
	Required *bool `pulumi:"required"`
	// The current version of addon.
	Version *string `pulumi:"version"`
}

type KubernetesAddonState struct {
	// Is the addon ready for upgrade.
	CanUpgrade pulumi.BoolPtrInput
	// Whether to clean up cloud resources when deleting. Currently only works for addon `ack-virtual-node` and you must specify it when uninstall addon `ack-virtual-node`. Valid values: `true`: clean up, `false`: do not clean up.
	CleanupCloudResources pulumi.BoolPtrInput
	// The id of kubernetes cluster.
	ClusterId pulumi.StringPtrInput
	// The customized configuration of addon. Your customized configuration will be merged to existed configuration stored in server. If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. You can checkout the customized configuration of the addon through datasource `cs.getKubernetesAddonMetadata`, the returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet. You can also checkout the current custom configuration through the data source `cs.getKubernetesAddons`.
	Config pulumi.StringPtrInput
	// The name of addon.
	Name pulumi.StringPtrInput
	// The version which addon can be upgraded to.
	NextVersion pulumi.StringPtrInput
	// Is it a mandatory addon to be installed.
	Required pulumi.BoolPtrInput
	// The current version of addon.
	Version pulumi.StringPtrInput
}

func (KubernetesAddonState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesAddonState)(nil)).Elem()
}

type kubernetesAddonArgs struct {
	// Whether to clean up cloud resources when deleting. Currently only works for addon `ack-virtual-node` and you must specify it when uninstall addon `ack-virtual-node`. Valid values: `true`: clean up, `false`: do not clean up.
	CleanupCloudResources *bool `pulumi:"cleanupCloudResources"`
	// The id of kubernetes cluster.
	ClusterId string `pulumi:"clusterId"`
	// The customized configuration of addon. Your customized configuration will be merged to existed configuration stored in server. If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. You can checkout the customized configuration of the addon through datasource `cs.getKubernetesAddonMetadata`, the returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet. You can also checkout the current custom configuration through the data source `cs.getKubernetesAddons`.
	Config *string `pulumi:"config"`
	// The name of addon.
	Name *string `pulumi:"name"`
	// The current version of addon.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a KubernetesAddon resource.
type KubernetesAddonArgs struct {
	// Whether to clean up cloud resources when deleting. Currently only works for addon `ack-virtual-node` and you must specify it when uninstall addon `ack-virtual-node`. Valid values: `true`: clean up, `false`: do not clean up.
	CleanupCloudResources pulumi.BoolPtrInput
	// The id of kubernetes cluster.
	ClusterId pulumi.StringInput
	// The customized configuration of addon. Your customized configuration will be merged to existed configuration stored in server. If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. You can checkout the customized configuration of the addon through datasource `cs.getKubernetesAddonMetadata`, the returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet. You can also checkout the current custom configuration through the data source `cs.getKubernetesAddons`.
	Config pulumi.StringPtrInput
	// The name of addon.
	Name pulumi.StringPtrInput
	// The current version of addon.
	Version pulumi.StringPtrInput
}

func (KubernetesAddonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesAddonArgs)(nil)).Elem()
}

type KubernetesAddonInput interface {
	pulumi.Input

	ToKubernetesAddonOutput() KubernetesAddonOutput
	ToKubernetesAddonOutputWithContext(ctx context.Context) KubernetesAddonOutput
}

func (*KubernetesAddon) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesAddon)(nil)).Elem()
}

func (i *KubernetesAddon) ToKubernetesAddonOutput() KubernetesAddonOutput {
	return i.ToKubernetesAddonOutputWithContext(context.Background())
}

func (i *KubernetesAddon) ToKubernetesAddonOutputWithContext(ctx context.Context) KubernetesAddonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAddonOutput)
}

// KubernetesAddonArrayInput is an input type that accepts KubernetesAddonArray and KubernetesAddonArrayOutput values.
// You can construct a concrete instance of `KubernetesAddonArrayInput` via:
//
//	KubernetesAddonArray{ KubernetesAddonArgs{...} }
type KubernetesAddonArrayInput interface {
	pulumi.Input

	ToKubernetesAddonArrayOutput() KubernetesAddonArrayOutput
	ToKubernetesAddonArrayOutputWithContext(context.Context) KubernetesAddonArrayOutput
}

type KubernetesAddonArray []KubernetesAddonInput

func (KubernetesAddonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesAddon)(nil)).Elem()
}

func (i KubernetesAddonArray) ToKubernetesAddonArrayOutput() KubernetesAddonArrayOutput {
	return i.ToKubernetesAddonArrayOutputWithContext(context.Background())
}

func (i KubernetesAddonArray) ToKubernetesAddonArrayOutputWithContext(ctx context.Context) KubernetesAddonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAddonArrayOutput)
}

// KubernetesAddonMapInput is an input type that accepts KubernetesAddonMap and KubernetesAddonMapOutput values.
// You can construct a concrete instance of `KubernetesAddonMapInput` via:
//
//	KubernetesAddonMap{ "key": KubernetesAddonArgs{...} }
type KubernetesAddonMapInput interface {
	pulumi.Input

	ToKubernetesAddonMapOutput() KubernetesAddonMapOutput
	ToKubernetesAddonMapOutputWithContext(context.Context) KubernetesAddonMapOutput
}

type KubernetesAddonMap map[string]KubernetesAddonInput

func (KubernetesAddonMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesAddon)(nil)).Elem()
}

func (i KubernetesAddonMap) ToKubernetesAddonMapOutput() KubernetesAddonMapOutput {
	return i.ToKubernetesAddonMapOutputWithContext(context.Background())
}

func (i KubernetesAddonMap) ToKubernetesAddonMapOutputWithContext(ctx context.Context) KubernetesAddonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAddonMapOutput)
}

type KubernetesAddonOutput struct{ *pulumi.OutputState }

func (KubernetesAddonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesAddon)(nil)).Elem()
}

func (o KubernetesAddonOutput) ToKubernetesAddonOutput() KubernetesAddonOutput {
	return o
}

func (o KubernetesAddonOutput) ToKubernetesAddonOutputWithContext(ctx context.Context) KubernetesAddonOutput {
	return o
}

// Is the addon ready for upgrade.
func (o KubernetesAddonOutput) CanUpgrade() pulumi.BoolOutput {
	return o.ApplyT(func(v *KubernetesAddon) pulumi.BoolOutput { return v.CanUpgrade }).(pulumi.BoolOutput)
}

// Whether to clean up cloud resources when deleting. Currently only works for addon `ack-virtual-node` and you must specify it when uninstall addon `ack-virtual-node`. Valid values: `true`: clean up, `false`: do not clean up.
func (o KubernetesAddonOutput) CleanupCloudResources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAddon) pulumi.BoolPtrOutput { return v.CleanupCloudResources }).(pulumi.BoolPtrOutput)
}

// The id of kubernetes cluster.
func (o KubernetesAddonOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesAddon) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The customized configuration of addon. Your customized configuration will be merged to existed configuration stored in server. If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. You can checkout the customized configuration of the addon through datasource `cs.getKubernetesAddonMetadata`, the returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet. You can also checkout the current custom configuration through the data source `cs.getKubernetesAddons`.
func (o KubernetesAddonOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesAddon) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// The name of addon.
func (o KubernetesAddonOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesAddon) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version which addon can be upgraded to.
func (o KubernetesAddonOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesAddon) pulumi.StringOutput { return v.NextVersion }).(pulumi.StringOutput)
}

// Is it a mandatory addon to be installed.
func (o KubernetesAddonOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v *KubernetesAddon) pulumi.BoolOutput { return v.Required }).(pulumi.BoolOutput)
}

// The current version of addon.
func (o KubernetesAddonOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesAddon) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type KubernetesAddonArrayOutput struct{ *pulumi.OutputState }

func (KubernetesAddonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesAddon)(nil)).Elem()
}

func (o KubernetesAddonArrayOutput) ToKubernetesAddonArrayOutput() KubernetesAddonArrayOutput {
	return o
}

func (o KubernetesAddonArrayOutput) ToKubernetesAddonArrayOutputWithContext(ctx context.Context) KubernetesAddonArrayOutput {
	return o
}

func (o KubernetesAddonArrayOutput) Index(i pulumi.IntInput) KubernetesAddonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubernetesAddon {
		return vs[0].([]*KubernetesAddon)[vs[1].(int)]
	}).(KubernetesAddonOutput)
}

type KubernetesAddonMapOutput struct{ *pulumi.OutputState }

func (KubernetesAddonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesAddon)(nil)).Elem()
}

func (o KubernetesAddonMapOutput) ToKubernetesAddonMapOutput() KubernetesAddonMapOutput {
	return o
}

func (o KubernetesAddonMapOutput) ToKubernetesAddonMapOutputWithContext(ctx context.Context) KubernetesAddonMapOutput {
	return o
}

func (o KubernetesAddonMapOutput) MapIndex(k pulumi.StringInput) KubernetesAddonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubernetesAddon {
		return vs[0].(map[string]*KubernetesAddon)[vs[1].(string)]
	}).(KubernetesAddonOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAddonInput)(nil)).Elem(), &KubernetesAddon{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAddonArrayInput)(nil)).Elem(), KubernetesAddonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAddonMapInput)(nil)).Elem(), KubernetesAddonMap{})
	pulumi.RegisterOutputType(KubernetesAddonOutput{})
	pulumi.RegisterOutputType(KubernetesAddonArrayOutput{})
	pulumi.RegisterOutputType(KubernetesAddonMapOutput{})
}
