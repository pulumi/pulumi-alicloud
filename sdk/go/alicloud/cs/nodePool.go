// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// The managed cluster configuration,
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		name := "tf-test"
// 		if param := cfg.Get("name"); param != "" {
// 			name = param
// 		}
// 		defaultZones, err := alicloud.GetZones(ctx, &GetZonesArgs{
// 			AvailableResourceCreation: pulumi.StringRef("VSwitch"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		defaultInstanceTypes, err := ecs.GetInstanceTypes(ctx, &ecs.GetInstanceTypesArgs{
// 			AvailabilityZone:   pulumi.StringRef(defaultZones.Zones[0].Id),
// 			CpuCoreCount:       pulumi.IntRef(2),
// 			MemorySize:         pulumi.Float64Ref(4),
// 			KubernetesNodeRole: pulumi.StringRef("Worker"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
// 			VpcName:   pulumi.String(name),
// 			CidrBlock: pulumi.String("10.1.0.0/21"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
// 			VswitchName: pulumi.String(name),
// 			VpcId:       defaultNetwork.ID(),
// 			CidrBlock:   pulumi.String("10.1.1.0/24"),
// 			ZoneId:      pulumi.String(defaultZones.Zones[0].Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ecs.NewKeyPair(ctx, "defaultKeyPair", &ecs.KeyPairArgs{
// 			KeyPairName: pulumi.String(name),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		var defaultManagedKubernetes []*cs.ManagedKubernetes
// 		for key0, _ := range 1 == true {
// 			__res, err := cs.NewManagedKubernetes(ctx, fmt.Sprintf("defaultManagedKubernetes-%v", key0), &cs.ManagedKubernetesArgs{
// 				ClusterSpec:               pulumi.String("ack.pro.small"),
// 				IsEnterpriseSecurityGroup: pulumi.Bool(true),
// 				WorkerNumber:              pulumi.Int(2),
// 				Password:                  pulumi.String("Hello1234"),
// 				PodCidr:                   pulumi.String("172.20.0.0/16"),
// 				ServiceCidr:               pulumi.String("172.21.0.0/20"),
// 				WorkerVswitchIds: pulumi.StringArray{
// 					defaultSwitch.ID(),
// 				},
// 				WorkerInstanceTypes: pulumi.StringArray{
// 					pulumi.String(defaultInstanceTypes.InstanceTypes[0].Id),
// 				},
// 			})
// 			if err != nil {
// 				return err
// 			}
// 			defaultManagedKubernetes = append(defaultManagedKubernetes, __res)
// 		}
// 		return nil
// 	})
// }
// ```
//
// Create a node pool.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// 			ClusterId: pulumi.Any(alicloud_cs_managed_kubernetes.Default[0].Id),
// 			VswitchIds: pulumi.StringArray{
// 				pulumi.Any(alicloud_vswitch.Default.Id),
// 			},
// 			InstanceTypes: pulumi.StringArray{
// 				pulumi.Any(data.Alicloud_instance_types.Default.Instance_types[0].Id),
// 			},
// 			SystemDiskCategory: pulumi.String("cloud_efficiency"),
// 			SystemDiskSize:     pulumi.Int(40),
// 			KeyName:            pulumi.Any(alicloud_key_pair.Default.Key_name),
// 			DesiredSize:        pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// The parameter `nodeCount` are deprecated from version 1.158.0ï¼Œbut it can still works. If you want to use the new parameter `desiredSize` instead, you can update it as follows. for more information of `desiredSize`, visit [Modify the expected number of nodes in a node pool](https://www.alibabacloud.com/help/en/doc-detail/160490.html#title-mpp-3jj-oo3).
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// 			ClusterId: pulumi.Any(alicloud_cs_managed_kubernetes.Default[0].Id),
// 			VswitchIds: pulumi.StringArray{
// 				pulumi.Any(alicloud_vswitch.Default.Id),
// 			},
// 			InstanceTypes: pulumi.StringArray{
// 				pulumi.Any(data.Alicloud_instance_types.Default.Instance_types[0].Id),
// 			},
// 			SystemDiskCategory: pulumi.String("cloud_efficiency"),
// 			SystemDiskSize:     pulumi.Int(40),
// 			KeyName:            pulumi.Any(alicloud_key_pair.Default.Key_name),
// 			DesiredSize:        pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Create a managed node pool. If you need to enable maintenance window, you need to set the maintenance window in `cs.ManagedKubernetes`.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// 			ClusterId: pulumi.Any(alicloud_cs_managed_kubernetes.Default[0].Id),
// 			VswitchIds: pulumi.StringArray{
// 				pulumi.Any(alicloud_vswitch.Default.Id),
// 			},
// 			InstanceTypes: pulumi.StringArray{
// 				pulumi.Any(data.Alicloud_instance_types.Default.Instance_types[0].Id),
// 			},
// 			SystemDiskCategory: pulumi.String("cloud_efficiency"),
// 			SystemDiskSize:     pulumi.Int(40),
// 			KeyName:            pulumi.Any(alicloud_key_pair.Default.Key_name),
// 			DesiredSize:        pulumi.Int(1),
// 			Management: &cs.NodePoolManagementArgs{
// 				AutoRepair:     pulumi.Bool(true),
// 				AutoUpgrade:    pulumi.Bool(true),
// 				Surge:          pulumi.Int(1),
// 				MaxUnavailable: pulumi.Int(1),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Enable automatic scaling for the node pool. `scalingConfig` is required.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// 			ClusterId: pulumi.Any(alicloud_cs_managed_kubernetes.Default[0].Id),
// 			VswitchIds: pulumi.StringArray{
// 				pulumi.Any(alicloud_vswitch.Default.Id),
// 			},
// 			InstanceTypes: pulumi.StringArray{
// 				pulumi.Any(data.Alicloud_instance_types.Default.Instance_types[0].Id),
// 			},
// 			SystemDiskCategory: pulumi.String("cloud_efficiency"),
// 			SystemDiskSize:     pulumi.Int(40),
// 			KeyName:            pulumi.Any(alicloud_key_pair.Default.Key_name),
// 			ScalingConfig: &cs.NodePoolScalingConfigArgs{
// 				MinSize: pulumi.Int(1),
// 				MaxSize: pulumi.Int(10),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Enable automatic scaling for managed node pool.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// 			ClusterId: pulumi.Any(alicloud_cs_managed_kubernetes.Default[0].Id),
// 			VswitchIds: pulumi.StringArray{
// 				pulumi.Any(alicloud_vswitch.Default.Id),
// 			},
// 			InstanceTypes: pulumi.StringArray{
// 				pulumi.Any(data.Alicloud_instance_types.Default.Instance_types[0].Id),
// 			},
// 			SystemDiskCategory: pulumi.String("cloud_efficiency"),
// 			SystemDiskSize:     pulumi.Int(40),
// 			KeyName:            pulumi.Any(alicloud_key_pair.Default.Key_name),
// 			Management: &cs.NodePoolManagementArgs{
// 				AutoRepair:     pulumi.Bool(true),
// 				AutoUpgrade:    pulumi.Bool(true),
// 				Surge:          pulumi.Int(1),
// 				MaxUnavailable: pulumi.Int(1),
// 			},
// 			ScalingConfig: &cs.NodePoolScalingConfigArgs{
// 				MinSize: pulumi.Int(1),
// 				MaxSize: pulumi.Int(10),
// 				Type:    pulumi.String("cpu"),
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			alicloud_cs_autoscaling_config.Default,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Create a `PrePaid` node pool.
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// 			ClusterId: pulumi.Any(alicloud_cs_managed_kubernetes.Default[0].Id),
// 			VswitchIds: pulumi.StringArray{
// 				pulumi.Any(alicloud_vswitch.Default.Id),
// 			},
// 			InstanceTypes: pulumi.StringArray{
// 				pulumi.Any(data.Alicloud_instance_types.Default.Instance_types[0].Id),
// 			},
// 			SystemDiskCategory:  pulumi.String("cloud_efficiency"),
// 			SystemDiskSize:      pulumi.Int(40),
// 			KeyName:             pulumi.Any(alicloud_key_pair.Default.Key_name),
// 			InstanceChargeType:  pulumi.String("PrePaid"),
// 			Period:              pulumi.Int(1),
// 			PeriodUnit:          pulumi.String("Month"),
// 			AutoRenew:           pulumi.Bool(true),
// 			AutoRenewPeriod:     pulumi.Int(1),
// 			InstallCloudMonitor: pulumi.Bool(true),
// 			ScalingConfig: &cs.NodePoolScalingConfigArgs{
// 				MinSize: pulumi.Int(1),
// 				MaxSize: pulumi.Int(10),
// 				Type:    pulumi.String("cpu"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Create a node pool with spot instance.
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// 			ClusterId: pulumi.Any(alicloud_cs_managed_kubernetes.Default[0].Id),
// 			VswitchIds: pulumi.StringArray{
// 				pulumi.Any(alicloud_vswitch.Default.Id),
// 			},
// 			InstanceTypes: pulumi.StringArray{
// 				pulumi.Any(data.Alicloud_instance_types.Default.Instance_types[0].Id),
// 			},
// 			SystemDiskCategory: pulumi.String("cloud_efficiency"),
// 			SystemDiskSize:     pulumi.Int(40),
// 			KeyName:            pulumi.Any(alicloud_key_pair.Default.Key_name),
// 			DesiredSize:        pulumi.Int(1),
// 			SpotStrategy:       pulumi.String("SpotWithPriceLimit"),
// 			SpotPriceLimits: cs.NodePoolSpotPriceLimitArray{
// 				&cs.NodePoolSpotPriceLimitArgs{
// 					InstanceType: pulumi.Any(data.Alicloud_instance_types.Default.Instance_types[0].Id),
// 					PriceLimit:   pulumi.String("0.70"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Use Spot instances to create a node pool with auto-scaling enabled
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// 			ClusterId: pulumi.Any(alicloud_cs_managed_kubernetes.Default[0].Id),
// 			VswitchIds: pulumi.StringArray{
// 				pulumi.Any(alicloud_vswitch.Default.Id),
// 			},
// 			InstanceTypes: pulumi.StringArray{
// 				pulumi.Any(data.Alicloud_instance_types.Default.Instance_types[0].Id),
// 			},
// 			SystemDiskCategory: pulumi.String("cloud_efficiency"),
// 			SystemDiskSize:     pulumi.Int(40),
// 			KeyName:            pulumi.Any(alicloud_key_pair.Default.Key_name),
// 			ScalingConfig: &cs.NodePoolScalingConfigArgs{
// 				MinSize: pulumi.Int(1),
// 				MaxSize: pulumi.Int(10),
// 				Type:    pulumi.String("spot"),
// 			},
// 			SpotStrategy: pulumi.String("SpotWithPriceLimit"),
// 			SpotPriceLimits: cs.NodePoolSpotPriceLimitArray{
// 				&cs.NodePoolSpotPriceLimitArgs{
// 					InstanceType: pulumi.Any(data.Alicloud_instance_types.Default.Instance_types[0].Id),
// 					PriceLimit:   pulumi.String("0.70"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Create a node pool with platform as Windows
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// 			ClusterId: pulumi.Any(alicloud_cs_managed_kubernetes.Default[0].Id),
// 			VswitchIds: pulumi.StringArray{
// 				pulumi.Any(alicloud_vswitch.Default.Id),
// 			},
// 			InstanceTypes: pulumi.StringArray{
// 				pulumi.Any(data.Alicloud_instance_types.Default.Instance_types[0].Id),
// 			},
// 			SystemDiskCategory: pulumi.String("cloud_efficiency"),
// 			SystemDiskSize:     pulumi.Int(40),
// 			InstanceChargeType: pulumi.String("PostPaid"),
// 			DesiredSize:        pulumi.Int(1),
// 			Password:           pulumi.String("Hello1234"),
// 			Platform:           pulumi.String("Windows"),
// 			ImageId:            pulumi.Any(window_image_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Add an existing node to the node pool
//
// In order to distinguish automatically created nodes, it is recommended that existing nodes be placed separately in a node pool for management.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// 			ClusterId: pulumi.Any(alicloud_cs_managed_kubernetes.Default[0].Id),
// 			VswitchIds: pulumi.StringArray{
// 				pulumi.Any(alicloud_vswitch.Default.Id),
// 			},
// 			InstanceTypes: pulumi.StringArray{
// 				pulumi.Any(data.Alicloud_instance_types.Default.Instance_types[0].Id),
// 			},
// 			SystemDiskCategory: pulumi.String("cloud_efficiency"),
// 			SystemDiskSize:     pulumi.Int(40),
// 			InstanceChargeType: pulumi.String("PostPaid"),
// 			Instances: pulumi.StringArray{
// 				pulumi.String("instance_id_01"),
// 				pulumi.String("instance_id_02"),
// 				pulumi.String("instance_id_03"),
// 			},
// 			FormatDisk:       pulumi.Bool(false),
// 			KeepInstanceName: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Cluster nodepool can be imported using the id, e.g. Then complete the nodepool.tf accords to the result of `terraform plan`.
//
// ```sh
//  $ pulumi import alicloud:cs/nodePool:NodePool alicloud_cs_node_pool.custom_nodepool cluster_id:nodepool_id
// ```
type NodePool struct {
	pulumi.CustomResourceState

	// Enable Node payment auto-renew, default is `false`.
	AutoRenew pulumi.BoolPtrOutput `pulumi:"autoRenew"`
	// Node payment auto-renew period, one of `1`, `2`, `3`,`6`, `12`.
	AutoRenewPeriod pulumi.IntPtrOutput `pulumi:"autoRenewPeriod"`
	// The id of kubernetes cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The data disk configurations of worker nodes, such as the disk type and disk size.
	DataDisks NodePoolDataDiskArrayOutput `pulumi:"dataDisks"`
	// The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
	DeploymentSetId pulumi.StringOutput `pulumi:"deploymentSetId"`
	// The desired size of nodes of the node pool. From version 1.158.0, `desiredSize` is not required.
	DesiredSize pulumi.IntOutput `pulumi:"desiredSize"`
	// After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
	FormatDisk pulumi.BoolOutput `pulumi:"formatDisk"`
	// Custom Image support. Must based on CentOS7 or AliyunLinux2.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// The image type, instead of `platform`. This field cannot be modified. One of `AliyunLinux`, `AliyunLinux3`, `AliyunLinux3Arm64`, `AliyunLinuxUEFI`, `CentOS`, `Windows`,`WindowsCore`,`AliyunLinux Qboot`,`ContainerOS`. If you select `Windows` or `WindowsCore`, the `passord` is required.
	ImageType pulumi.StringOutput `pulumi:"imageType"`
	// Install the cloud monitoring plug-in on the node, and you can view the monitoring information of the instance through the cloud monitoring console. Default is `true`.
	InstallCloudMonitor pulumi.BoolPtrOutput `pulumi:"installCloudMonitor"`
	// Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
	InstanceChargeType pulumi.StringPtrOutput `pulumi:"instanceChargeType"`
	// The instance type of worker node.
	InstanceTypes pulumi.StringArrayOutput `pulumi:"instanceTypes"`
	// The instance list. Add existing nodes under the same cluster VPC to the node pool.
	Instances pulumi.StringArrayOutput `pulumi:"instances"`
	// The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one.
	InternetChargeType pulumi.StringOutput `pulumi:"internetChargeType"`
	// The maximum outbound bandwidth for the public network. Unit: Mbit/s. Valid values: 0 to 100.
	InternetMaxBandwidthOut pulumi.IntOutput `pulumi:"internetMaxBandwidthOut"`
	// Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
	KeepInstanceName pulumi.BoolOutput `pulumi:"keepInstanceName"`
	// The keypair of ssh login cluster node, you have to create it first. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields. Only `keyName` is supported in the management node pool.
	KeyName pulumi.StringPtrOutput `pulumi:"keyName"`
	// An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
	KmsEncryptedPassword pulumi.StringPtrOutput `pulumi:"kmsEncryptedPassword"`
	// A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument.
	Labels NodePoolLabelArrayOutput `pulumi:"labels"`
	// Managed node pool configuration. When using a managed node pool, the node key must use `keyName`. Detailed below.
	Management NodePoolManagementOutput `pulumi:"management"`
	// The name of node pool.
	Name pulumi.StringOutput `pulumi:"name"`
	// The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
	//
	// Deprecated: Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// Each node name consists of a prefix, an IP substring, and a suffix. For example "customized,aliyun.com,5,test", if the node IP address is 192.168.0.55, the prefix is aliyun.com, IP substring length is 5, and the suffix is test, the node name will be aliyun.com00055test.
	NodeNameMode pulumi.StringOutput `pulumi:"nodeNameMode"`
	// The password of ssh login cluster node. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Node payment period. Its valid value is one of {1, 2, 3, 6, 12, 24, 36, 48, 60}.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Node payment period unit, valid value: `Month`. Default is `Month`.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// The platform. One of `AliyunLinux`, `Windows`, `CentOS`, `WindowsCore`. If you select `Windows` or `WindowsCore`, the `passord` is required. Field `platform` has been deprecated from provider version 1.145.0. New field `imageType` instead.
	//
	// Deprecated: Field 'platform' has been deprecated from provider version 1.145.0. New field 'image_type' instead
	Platform pulumi.StringOutput `pulumi:"platform"`
	// The ID of the resource group,by default these cloud resources are automatically assigned to the default resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
	RuntimeName pulumi.StringOutput `pulumi:"runtimeName"`
	// The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
	RuntimeVersion pulumi.StringOutput `pulumi:"runtimeVersion"`
	// Auto scaling node pool configuration. For more details, see `scalingConfig`. With auto-scaling is enabled, the nodes in the node pool will be labeled with `k8s.aliyun.com=true` to prevent system pods such as coredns, metrics-servers from being scheduled to elastic nodes, and to prevent node shrinkage from causing business abnormalities.
	ScalingConfig NodePoolScalingConfigPtrOutput `pulumi:"scalingConfig"`
	// (Available in 1.105.0+) Id of the Scaling Group.
	ScalingGroupId pulumi.StringOutput `pulumi:"scalingGroupId"`
	// The scaling mode. Valid values: `release`, `recycle`, default is `release`. Standard mode(release): Create and release ECS instances based on requests.Swift mode(recycle): Create, stop, and restart ECS instances based on needs. New ECS instances are only created when no stopped ECS instance is avalible. This mode further accelerates the scaling process. Apart from ECS instances that use local storage, when an ECS instance is stopped, you are only chatged for storage space.
	ScalingPolicy pulumi.StringOutput `pulumi:"scalingPolicy"`
	// The security group id for worker node. Field `securityGroupId` has been deprecated from provider version 1.145.0. New field `securityGroupIds` instead.
	//
	// Deprecated: Field 'security_group_id' has been deprecated from provider version 1.145.0. New field 'security_group_ids' instead
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// The maximum hourly price of the instance. This parameter takes effect only when `spotStrategy` is set to `SpotWithPriceLimit`. A maximum of three decimal places are allowed.
	SpotPriceLimits NodePoolSpotPriceLimitArrayOutput `pulumi:"spotPriceLimits"`
	// The preemption policy for the pay-as-you-go instance. This parameter takes effect only when `instanceChargeType` is set to `PostPaid`. Valid value `SpotWithPriceLimit`.
	SpotStrategy pulumi.StringOutput `pulumi:"spotStrategy"`
	// The system disk category of worker node. Its valid value are `cloudSsd` and `cloudEfficiency`. Default to `cloudEfficiency`.
	SystemDiskCategory pulumi.StringPtrOutput `pulumi:"systemDiskCategory"`
	// The performance of system disk, only valid for ESSD disk. You have to specify one of `PL0` `PL1` `PL2` `PL3` fields.
	SystemDiskPerformanceLevel pulumi.StringPtrOutput `pulumi:"systemDiskPerformanceLevel"`
	// The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
	SystemDiskSize pulumi.IntPtrOutput `pulumi:"systemDiskSize"`
	// A Map of tags to assign to the resource. It will be applied for ECS instances finally.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// A List of Kubernetes taints to assign to the nodes.
	Taints NodePoolTaintArrayOutput `pulumi:"taints"`
	// Set the newly added node as unschedulable. If you want to open the scheduling option, you can open it in the node list of the console. If you are using an auto-scaling node pool, the setting will not take effect. Default is `false`.
	Unschedulable pulumi.BoolPtrOutput `pulumi:"unschedulable"`
	// Windows instances support batch and PowerShell scripts. If your script file is larger than 1 KB, we recommend that you upload the script to Object Storage Service (OSS) and pull it through the internal endpoint of your OSS bucket.
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
	// The VPC of the nodes in the node pool.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The vswitches used by node pool workers.
	VswitchIds pulumi.StringArrayOutput `pulumi:"vswitchIds"`
}

// NewNodePool registers a new resource with the given unique name, arguments, and options.
func NewNodePool(ctx *pulumi.Context,
	name string, args *NodePoolArgs, opts ...pulumi.ResourceOption) (*NodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.InstanceTypes == nil {
		return nil, errors.New("invalid value for required argument 'InstanceTypes'")
	}
	if args.VswitchIds == nil {
		return nil, errors.New("invalid value for required argument 'VswitchIds'")
	}
	var resource NodePool
	err := ctx.RegisterResource("alicloud:cs/nodePool:NodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodePool gets an existing NodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodePoolState, opts ...pulumi.ResourceOption) (*NodePool, error) {
	var resource NodePool
	err := ctx.ReadResource("alicloud:cs/nodePool:NodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodePool resources.
type nodePoolState struct {
	// Enable Node payment auto-renew, default is `false`.
	AutoRenew *bool `pulumi:"autoRenew"`
	// Node payment auto-renew period, one of `1`, `2`, `3`,`6`, `12`.
	AutoRenewPeriod *int `pulumi:"autoRenewPeriod"`
	// The id of kubernetes cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The data disk configurations of worker nodes, such as the disk type and disk size.
	DataDisks []NodePoolDataDisk `pulumi:"dataDisks"`
	// The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
	DeploymentSetId *string `pulumi:"deploymentSetId"`
	// The desired size of nodes of the node pool. From version 1.158.0, `desiredSize` is not required.
	DesiredSize *int `pulumi:"desiredSize"`
	// After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
	FormatDisk *bool `pulumi:"formatDisk"`
	// Custom Image support. Must based on CentOS7 or AliyunLinux2.
	ImageId *string `pulumi:"imageId"`
	// The image type, instead of `platform`. This field cannot be modified. One of `AliyunLinux`, `AliyunLinux3`, `AliyunLinux3Arm64`, `AliyunLinuxUEFI`, `CentOS`, `Windows`,`WindowsCore`,`AliyunLinux Qboot`,`ContainerOS`. If you select `Windows` or `WindowsCore`, the `passord` is required.
	ImageType *string `pulumi:"imageType"`
	// Install the cloud monitoring plug-in on the node, and you can view the monitoring information of the instance through the cloud monitoring console. Default is `true`.
	InstallCloudMonitor *bool `pulumi:"installCloudMonitor"`
	// Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
	InstanceChargeType *string `pulumi:"instanceChargeType"`
	// The instance type of worker node.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// The instance list. Add existing nodes under the same cluster VPC to the node pool.
	Instances []string `pulumi:"instances"`
	// The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one.
	InternetChargeType *string `pulumi:"internetChargeType"`
	// The maximum outbound bandwidth for the public network. Unit: Mbit/s. Valid values: 0 to 100.
	InternetMaxBandwidthOut *int `pulumi:"internetMaxBandwidthOut"`
	// Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
	KeepInstanceName *bool `pulumi:"keepInstanceName"`
	// The keypair of ssh login cluster node, you have to create it first. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields. Only `keyName` is supported in the management node pool.
	KeyName *string `pulumi:"keyName"`
	// An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
	KmsEncryptedPassword *string `pulumi:"kmsEncryptedPassword"`
	// A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument.
	Labels []NodePoolLabel `pulumi:"labels"`
	// Managed node pool configuration. When using a managed node pool, the node key must use `keyName`. Detailed below.
	Management *NodePoolManagement `pulumi:"management"`
	// The name of node pool.
	Name *string `pulumi:"name"`
	// The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
	//
	// Deprecated: Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
	NodeCount *int `pulumi:"nodeCount"`
	// Each node name consists of a prefix, an IP substring, and a suffix. For example "customized,aliyun.com,5,test", if the node IP address is 192.168.0.55, the prefix is aliyun.com, IP substring length is 5, and the suffix is test, the node name will be aliyun.com00055test.
	NodeNameMode *string `pulumi:"nodeNameMode"`
	// The password of ssh login cluster node. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
	Password *string `pulumi:"password"`
	// Node payment period. Its valid value is one of {1, 2, 3, 6, 12, 24, 36, 48, 60}.
	Period *int `pulumi:"period"`
	// Node payment period unit, valid value: `Month`. Default is `Month`.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The platform. One of `AliyunLinux`, `Windows`, `CentOS`, `WindowsCore`. If you select `Windows` or `WindowsCore`, the `passord` is required. Field `platform` has been deprecated from provider version 1.145.0. New field `imageType` instead.
	//
	// Deprecated: Field 'platform' has been deprecated from provider version 1.145.0. New field 'image_type' instead
	Platform *string `pulumi:"platform"`
	// The ID of the resource group,by default these cloud resources are automatically assigned to the default resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
	RuntimeName *string `pulumi:"runtimeName"`
	// The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
	// Auto scaling node pool configuration. For more details, see `scalingConfig`. With auto-scaling is enabled, the nodes in the node pool will be labeled with `k8s.aliyun.com=true` to prevent system pods such as coredns, metrics-servers from being scheduled to elastic nodes, and to prevent node shrinkage from causing business abnormalities.
	ScalingConfig *NodePoolScalingConfig `pulumi:"scalingConfig"`
	// (Available in 1.105.0+) Id of the Scaling Group.
	ScalingGroupId *string `pulumi:"scalingGroupId"`
	// The scaling mode. Valid values: `release`, `recycle`, default is `release`. Standard mode(release): Create and release ECS instances based on requests.Swift mode(recycle): Create, stop, and restart ECS instances based on needs. New ECS instances are only created when no stopped ECS instance is avalible. This mode further accelerates the scaling process. Apart from ECS instances that use local storage, when an ECS instance is stopped, you are only chatged for storage space.
	ScalingPolicy *string `pulumi:"scalingPolicy"`
	// The security group id for worker node. Field `securityGroupId` has been deprecated from provider version 1.145.0. New field `securityGroupIds` instead.
	//
	// Deprecated: Field 'security_group_id' has been deprecated from provider version 1.145.0. New field 'security_group_ids' instead
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The maximum hourly price of the instance. This parameter takes effect only when `spotStrategy` is set to `SpotWithPriceLimit`. A maximum of three decimal places are allowed.
	SpotPriceLimits []NodePoolSpotPriceLimit `pulumi:"spotPriceLimits"`
	// The preemption policy for the pay-as-you-go instance. This parameter takes effect only when `instanceChargeType` is set to `PostPaid`. Valid value `SpotWithPriceLimit`.
	SpotStrategy *string `pulumi:"spotStrategy"`
	// The system disk category of worker node. Its valid value are `cloudSsd` and `cloudEfficiency`. Default to `cloudEfficiency`.
	SystemDiskCategory *string `pulumi:"systemDiskCategory"`
	// The performance of system disk, only valid for ESSD disk. You have to specify one of `PL0` `PL1` `PL2` `PL3` fields.
	SystemDiskPerformanceLevel *string `pulumi:"systemDiskPerformanceLevel"`
	// The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
	SystemDiskSize *int `pulumi:"systemDiskSize"`
	// A Map of tags to assign to the resource. It will be applied for ECS instances finally.
	Tags map[string]interface{} `pulumi:"tags"`
	// A List of Kubernetes taints to assign to the nodes.
	Taints []NodePoolTaint `pulumi:"taints"`
	// Set the newly added node as unschedulable. If you want to open the scheduling option, you can open it in the node list of the console. If you are using an auto-scaling node pool, the setting will not take effect. Default is `false`.
	Unschedulable *bool `pulumi:"unschedulable"`
	// Windows instances support batch and PowerShell scripts. If your script file is larger than 1 KB, we recommend that you upload the script to Object Storage Service (OSS) and pull it through the internal endpoint of your OSS bucket.
	UserData *string `pulumi:"userData"`
	// The VPC of the nodes in the node pool.
	VpcId *string `pulumi:"vpcId"`
	// The vswitches used by node pool workers.
	VswitchIds []string `pulumi:"vswitchIds"`
}

type NodePoolState struct {
	// Enable Node payment auto-renew, default is `false`.
	AutoRenew pulumi.BoolPtrInput
	// Node payment auto-renew period, one of `1`, `2`, `3`,`6`, `12`.
	AutoRenewPeriod pulumi.IntPtrInput
	// The id of kubernetes cluster.
	ClusterId pulumi.StringPtrInput
	// The data disk configurations of worker nodes, such as the disk type and disk size.
	DataDisks NodePoolDataDiskArrayInput
	// The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
	DeploymentSetId pulumi.StringPtrInput
	// The desired size of nodes of the node pool. From version 1.158.0, `desiredSize` is not required.
	DesiredSize pulumi.IntPtrInput
	// After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
	FormatDisk pulumi.BoolPtrInput
	// Custom Image support. Must based on CentOS7 or AliyunLinux2.
	ImageId pulumi.StringPtrInput
	// The image type, instead of `platform`. This field cannot be modified. One of `AliyunLinux`, `AliyunLinux3`, `AliyunLinux3Arm64`, `AliyunLinuxUEFI`, `CentOS`, `Windows`,`WindowsCore`,`AliyunLinux Qboot`,`ContainerOS`. If you select `Windows` or `WindowsCore`, the `passord` is required.
	ImageType pulumi.StringPtrInput
	// Install the cloud monitoring plug-in on the node, and you can view the monitoring information of the instance through the cloud monitoring console. Default is `true`.
	InstallCloudMonitor pulumi.BoolPtrInput
	// Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
	InstanceChargeType pulumi.StringPtrInput
	// The instance type of worker node.
	InstanceTypes pulumi.StringArrayInput
	// The instance list. Add existing nodes under the same cluster VPC to the node pool.
	Instances pulumi.StringArrayInput
	// The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one.
	InternetChargeType pulumi.StringPtrInput
	// The maximum outbound bandwidth for the public network. Unit: Mbit/s. Valid values: 0 to 100.
	InternetMaxBandwidthOut pulumi.IntPtrInput
	// Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
	KeepInstanceName pulumi.BoolPtrInput
	// The keypair of ssh login cluster node, you have to create it first. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields. Only `keyName` is supported in the management node pool.
	KeyName pulumi.StringPtrInput
	// An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
	KmsEncryptedPassword pulumi.StringPtrInput
	// A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument.
	Labels NodePoolLabelArrayInput
	// Managed node pool configuration. When using a managed node pool, the node key must use `keyName`. Detailed below.
	Management NodePoolManagementPtrInput
	// The name of node pool.
	Name pulumi.StringPtrInput
	// The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
	//
	// Deprecated: Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
	NodeCount pulumi.IntPtrInput
	// Each node name consists of a prefix, an IP substring, and a suffix. For example "customized,aliyun.com,5,test", if the node IP address is 192.168.0.55, the prefix is aliyun.com, IP substring length is 5, and the suffix is test, the node name will be aliyun.com00055test.
	NodeNameMode pulumi.StringPtrInput
	// The password of ssh login cluster node. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
	Password pulumi.StringPtrInput
	// Node payment period. Its valid value is one of {1, 2, 3, 6, 12, 24, 36, 48, 60}.
	Period pulumi.IntPtrInput
	// Node payment period unit, valid value: `Month`. Default is `Month`.
	PeriodUnit pulumi.StringPtrInput
	// The platform. One of `AliyunLinux`, `Windows`, `CentOS`, `WindowsCore`. If you select `Windows` or `WindowsCore`, the `passord` is required. Field `platform` has been deprecated from provider version 1.145.0. New field `imageType` instead.
	//
	// Deprecated: Field 'platform' has been deprecated from provider version 1.145.0. New field 'image_type' instead
	Platform pulumi.StringPtrInput
	// The ID of the resource group,by default these cloud resources are automatically assigned to the default resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
	RuntimeName pulumi.StringPtrInput
	// The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
	RuntimeVersion pulumi.StringPtrInput
	// Auto scaling node pool configuration. For more details, see `scalingConfig`. With auto-scaling is enabled, the nodes in the node pool will be labeled with `k8s.aliyun.com=true` to prevent system pods such as coredns, metrics-servers from being scheduled to elastic nodes, and to prevent node shrinkage from causing business abnormalities.
	ScalingConfig NodePoolScalingConfigPtrInput
	// (Available in 1.105.0+) Id of the Scaling Group.
	ScalingGroupId pulumi.StringPtrInput
	// The scaling mode. Valid values: `release`, `recycle`, default is `release`. Standard mode(release): Create and release ECS instances based on requests.Swift mode(recycle): Create, stop, and restart ECS instances based on needs. New ECS instances are only created when no stopped ECS instance is avalible. This mode further accelerates the scaling process. Apart from ECS instances that use local storage, when an ECS instance is stopped, you are only chatged for storage space.
	ScalingPolicy pulumi.StringPtrInput
	// The security group id for worker node. Field `securityGroupId` has been deprecated from provider version 1.145.0. New field `securityGroupIds` instead.
	//
	// Deprecated: Field 'security_group_id' has been deprecated from provider version 1.145.0. New field 'security_group_ids' instead
	SecurityGroupId pulumi.StringPtrInput
	// Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
	SecurityGroupIds pulumi.StringArrayInput
	// The maximum hourly price of the instance. This parameter takes effect only when `spotStrategy` is set to `SpotWithPriceLimit`. A maximum of three decimal places are allowed.
	SpotPriceLimits NodePoolSpotPriceLimitArrayInput
	// The preemption policy for the pay-as-you-go instance. This parameter takes effect only when `instanceChargeType` is set to `PostPaid`. Valid value `SpotWithPriceLimit`.
	SpotStrategy pulumi.StringPtrInput
	// The system disk category of worker node. Its valid value are `cloudSsd` and `cloudEfficiency`. Default to `cloudEfficiency`.
	SystemDiskCategory pulumi.StringPtrInput
	// The performance of system disk, only valid for ESSD disk. You have to specify one of `PL0` `PL1` `PL2` `PL3` fields.
	SystemDiskPerformanceLevel pulumi.StringPtrInput
	// The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
	SystemDiskSize pulumi.IntPtrInput
	// A Map of tags to assign to the resource. It will be applied for ECS instances finally.
	Tags pulumi.MapInput
	// A List of Kubernetes taints to assign to the nodes.
	Taints NodePoolTaintArrayInput
	// Set the newly added node as unschedulable. If you want to open the scheduling option, you can open it in the node list of the console. If you are using an auto-scaling node pool, the setting will not take effect. Default is `false`.
	Unschedulable pulumi.BoolPtrInput
	// Windows instances support batch and PowerShell scripts. If your script file is larger than 1 KB, we recommend that you upload the script to Object Storage Service (OSS) and pull it through the internal endpoint of your OSS bucket.
	UserData pulumi.StringPtrInput
	// The VPC of the nodes in the node pool.
	VpcId pulumi.StringPtrInput
	// The vswitches used by node pool workers.
	VswitchIds pulumi.StringArrayInput
}

func (NodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolState)(nil)).Elem()
}

type nodePoolArgs struct {
	// Enable Node payment auto-renew, default is `false`.
	AutoRenew *bool `pulumi:"autoRenew"`
	// Node payment auto-renew period, one of `1`, `2`, `3`,`6`, `12`.
	AutoRenewPeriod *int `pulumi:"autoRenewPeriod"`
	// The id of kubernetes cluster.
	ClusterId string `pulumi:"clusterId"`
	// The data disk configurations of worker nodes, such as the disk type and disk size.
	DataDisks []NodePoolDataDisk `pulumi:"dataDisks"`
	// The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
	DeploymentSetId *string `pulumi:"deploymentSetId"`
	// The desired size of nodes of the node pool. From version 1.158.0, `desiredSize` is not required.
	DesiredSize *int `pulumi:"desiredSize"`
	// After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
	FormatDisk *bool `pulumi:"formatDisk"`
	// Custom Image support. Must based on CentOS7 or AliyunLinux2.
	ImageId *string `pulumi:"imageId"`
	// The image type, instead of `platform`. This field cannot be modified. One of `AliyunLinux`, `AliyunLinux3`, `AliyunLinux3Arm64`, `AliyunLinuxUEFI`, `CentOS`, `Windows`,`WindowsCore`,`AliyunLinux Qboot`,`ContainerOS`. If you select `Windows` or `WindowsCore`, the `passord` is required.
	ImageType *string `pulumi:"imageType"`
	// Install the cloud monitoring plug-in on the node, and you can view the monitoring information of the instance through the cloud monitoring console. Default is `true`.
	InstallCloudMonitor *bool `pulumi:"installCloudMonitor"`
	// Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
	InstanceChargeType *string `pulumi:"instanceChargeType"`
	// The instance type of worker node.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// The instance list. Add existing nodes under the same cluster VPC to the node pool.
	Instances []string `pulumi:"instances"`
	// The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one.
	InternetChargeType *string `pulumi:"internetChargeType"`
	// The maximum outbound bandwidth for the public network. Unit: Mbit/s. Valid values: 0 to 100.
	InternetMaxBandwidthOut *int `pulumi:"internetMaxBandwidthOut"`
	// Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
	KeepInstanceName *bool `pulumi:"keepInstanceName"`
	// The keypair of ssh login cluster node, you have to create it first. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields. Only `keyName` is supported in the management node pool.
	KeyName *string `pulumi:"keyName"`
	// An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
	KmsEncryptedPassword *string `pulumi:"kmsEncryptedPassword"`
	// A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument.
	Labels []NodePoolLabel `pulumi:"labels"`
	// Managed node pool configuration. When using a managed node pool, the node key must use `keyName`. Detailed below.
	Management *NodePoolManagement `pulumi:"management"`
	// The name of node pool.
	Name *string `pulumi:"name"`
	// The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
	//
	// Deprecated: Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
	NodeCount *int `pulumi:"nodeCount"`
	// Each node name consists of a prefix, an IP substring, and a suffix. For example "customized,aliyun.com,5,test", if the node IP address is 192.168.0.55, the prefix is aliyun.com, IP substring length is 5, and the suffix is test, the node name will be aliyun.com00055test.
	NodeNameMode *string `pulumi:"nodeNameMode"`
	// The password of ssh login cluster node. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
	Password *string `pulumi:"password"`
	// Node payment period. Its valid value is one of {1, 2, 3, 6, 12, 24, 36, 48, 60}.
	Period *int `pulumi:"period"`
	// Node payment period unit, valid value: `Month`. Default is `Month`.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The platform. One of `AliyunLinux`, `Windows`, `CentOS`, `WindowsCore`. If you select `Windows` or `WindowsCore`, the `passord` is required. Field `platform` has been deprecated from provider version 1.145.0. New field `imageType` instead.
	//
	// Deprecated: Field 'platform' has been deprecated from provider version 1.145.0. New field 'image_type' instead
	Platform *string `pulumi:"platform"`
	// The ID of the resource group,by default these cloud resources are automatically assigned to the default resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
	RuntimeName *string `pulumi:"runtimeName"`
	// The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
	// Auto scaling node pool configuration. For more details, see `scalingConfig`. With auto-scaling is enabled, the nodes in the node pool will be labeled with `k8s.aliyun.com=true` to prevent system pods such as coredns, metrics-servers from being scheduled to elastic nodes, and to prevent node shrinkage from causing business abnormalities.
	ScalingConfig *NodePoolScalingConfig `pulumi:"scalingConfig"`
	// The scaling mode. Valid values: `release`, `recycle`, default is `release`. Standard mode(release): Create and release ECS instances based on requests.Swift mode(recycle): Create, stop, and restart ECS instances based on needs. New ECS instances are only created when no stopped ECS instance is avalible. This mode further accelerates the scaling process. Apart from ECS instances that use local storage, when an ECS instance is stopped, you are only chatged for storage space.
	ScalingPolicy *string `pulumi:"scalingPolicy"`
	// The security group id for worker node. Field `securityGroupId` has been deprecated from provider version 1.145.0. New field `securityGroupIds` instead.
	//
	// Deprecated: Field 'security_group_id' has been deprecated from provider version 1.145.0. New field 'security_group_ids' instead
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The maximum hourly price of the instance. This parameter takes effect only when `spotStrategy` is set to `SpotWithPriceLimit`. A maximum of three decimal places are allowed.
	SpotPriceLimits []NodePoolSpotPriceLimit `pulumi:"spotPriceLimits"`
	// The preemption policy for the pay-as-you-go instance. This parameter takes effect only when `instanceChargeType` is set to `PostPaid`. Valid value `SpotWithPriceLimit`.
	SpotStrategy *string `pulumi:"spotStrategy"`
	// The system disk category of worker node. Its valid value are `cloudSsd` and `cloudEfficiency`. Default to `cloudEfficiency`.
	SystemDiskCategory *string `pulumi:"systemDiskCategory"`
	// The performance of system disk, only valid for ESSD disk. You have to specify one of `PL0` `PL1` `PL2` `PL3` fields.
	SystemDiskPerformanceLevel *string `pulumi:"systemDiskPerformanceLevel"`
	// The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
	SystemDiskSize *int `pulumi:"systemDiskSize"`
	// A Map of tags to assign to the resource. It will be applied for ECS instances finally.
	Tags map[string]interface{} `pulumi:"tags"`
	// A List of Kubernetes taints to assign to the nodes.
	Taints []NodePoolTaint `pulumi:"taints"`
	// Set the newly added node as unschedulable. If you want to open the scheduling option, you can open it in the node list of the console. If you are using an auto-scaling node pool, the setting will not take effect. Default is `false`.
	Unschedulable *bool `pulumi:"unschedulable"`
	// Windows instances support batch and PowerShell scripts. If your script file is larger than 1 KB, we recommend that you upload the script to Object Storage Service (OSS) and pull it through the internal endpoint of your OSS bucket.
	UserData *string `pulumi:"userData"`
	// The vswitches used by node pool workers.
	VswitchIds []string `pulumi:"vswitchIds"`
}

// The set of arguments for constructing a NodePool resource.
type NodePoolArgs struct {
	// Enable Node payment auto-renew, default is `false`.
	AutoRenew pulumi.BoolPtrInput
	// Node payment auto-renew period, one of `1`, `2`, `3`,`6`, `12`.
	AutoRenewPeriod pulumi.IntPtrInput
	// The id of kubernetes cluster.
	ClusterId pulumi.StringInput
	// The data disk configurations of worker nodes, such as the disk type and disk size.
	DataDisks NodePoolDataDiskArrayInput
	// The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
	DeploymentSetId pulumi.StringPtrInput
	// The desired size of nodes of the node pool. From version 1.158.0, `desiredSize` is not required.
	DesiredSize pulumi.IntPtrInput
	// After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
	FormatDisk pulumi.BoolPtrInput
	// Custom Image support. Must based on CentOS7 or AliyunLinux2.
	ImageId pulumi.StringPtrInput
	// The image type, instead of `platform`. This field cannot be modified. One of `AliyunLinux`, `AliyunLinux3`, `AliyunLinux3Arm64`, `AliyunLinuxUEFI`, `CentOS`, `Windows`,`WindowsCore`,`AliyunLinux Qboot`,`ContainerOS`. If you select `Windows` or `WindowsCore`, the `passord` is required.
	ImageType pulumi.StringPtrInput
	// Install the cloud monitoring plug-in on the node, and you can view the monitoring information of the instance through the cloud monitoring console. Default is `true`.
	InstallCloudMonitor pulumi.BoolPtrInput
	// Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
	InstanceChargeType pulumi.StringPtrInput
	// The instance type of worker node.
	InstanceTypes pulumi.StringArrayInput
	// The instance list. Add existing nodes under the same cluster VPC to the node pool.
	Instances pulumi.StringArrayInput
	// The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one.
	InternetChargeType pulumi.StringPtrInput
	// The maximum outbound bandwidth for the public network. Unit: Mbit/s. Valid values: 0 to 100.
	InternetMaxBandwidthOut pulumi.IntPtrInput
	// Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
	KeepInstanceName pulumi.BoolPtrInput
	// The keypair of ssh login cluster node, you have to create it first. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields. Only `keyName` is supported in the management node pool.
	KeyName pulumi.StringPtrInput
	// An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
	KmsEncryptedPassword pulumi.StringPtrInput
	// A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument.
	Labels NodePoolLabelArrayInput
	// Managed node pool configuration. When using a managed node pool, the node key must use `keyName`. Detailed below.
	Management NodePoolManagementPtrInput
	// The name of node pool.
	Name pulumi.StringPtrInput
	// The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
	//
	// Deprecated: Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
	NodeCount pulumi.IntPtrInput
	// Each node name consists of a prefix, an IP substring, and a suffix. For example "customized,aliyun.com,5,test", if the node IP address is 192.168.0.55, the prefix is aliyun.com, IP substring length is 5, and the suffix is test, the node name will be aliyun.com00055test.
	NodeNameMode pulumi.StringPtrInput
	// The password of ssh login cluster node. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
	Password pulumi.StringPtrInput
	// Node payment period. Its valid value is one of {1, 2, 3, 6, 12, 24, 36, 48, 60}.
	Period pulumi.IntPtrInput
	// Node payment period unit, valid value: `Month`. Default is `Month`.
	PeriodUnit pulumi.StringPtrInput
	// The platform. One of `AliyunLinux`, `Windows`, `CentOS`, `WindowsCore`. If you select `Windows` or `WindowsCore`, the `passord` is required. Field `platform` has been deprecated from provider version 1.145.0. New field `imageType` instead.
	//
	// Deprecated: Field 'platform' has been deprecated from provider version 1.145.0. New field 'image_type' instead
	Platform pulumi.StringPtrInput
	// The ID of the resource group,by default these cloud resources are automatically assigned to the default resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
	RuntimeName pulumi.StringPtrInput
	// The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
	RuntimeVersion pulumi.StringPtrInput
	// Auto scaling node pool configuration. For more details, see `scalingConfig`. With auto-scaling is enabled, the nodes in the node pool will be labeled with `k8s.aliyun.com=true` to prevent system pods such as coredns, metrics-servers from being scheduled to elastic nodes, and to prevent node shrinkage from causing business abnormalities.
	ScalingConfig NodePoolScalingConfigPtrInput
	// The scaling mode. Valid values: `release`, `recycle`, default is `release`. Standard mode(release): Create and release ECS instances based on requests.Swift mode(recycle): Create, stop, and restart ECS instances based on needs. New ECS instances are only created when no stopped ECS instance is avalible. This mode further accelerates the scaling process. Apart from ECS instances that use local storage, when an ECS instance is stopped, you are only chatged for storage space.
	ScalingPolicy pulumi.StringPtrInput
	// The security group id for worker node. Field `securityGroupId` has been deprecated from provider version 1.145.0. New field `securityGroupIds` instead.
	//
	// Deprecated: Field 'security_group_id' has been deprecated from provider version 1.145.0. New field 'security_group_ids' instead
	SecurityGroupId pulumi.StringPtrInput
	// Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
	SecurityGroupIds pulumi.StringArrayInput
	// The maximum hourly price of the instance. This parameter takes effect only when `spotStrategy` is set to `SpotWithPriceLimit`. A maximum of three decimal places are allowed.
	SpotPriceLimits NodePoolSpotPriceLimitArrayInput
	// The preemption policy for the pay-as-you-go instance. This parameter takes effect only when `instanceChargeType` is set to `PostPaid`. Valid value `SpotWithPriceLimit`.
	SpotStrategy pulumi.StringPtrInput
	// The system disk category of worker node. Its valid value are `cloudSsd` and `cloudEfficiency`. Default to `cloudEfficiency`.
	SystemDiskCategory pulumi.StringPtrInput
	// The performance of system disk, only valid for ESSD disk. You have to specify one of `PL0` `PL1` `PL2` `PL3` fields.
	SystemDiskPerformanceLevel pulumi.StringPtrInput
	// The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
	SystemDiskSize pulumi.IntPtrInput
	// A Map of tags to assign to the resource. It will be applied for ECS instances finally.
	Tags pulumi.MapInput
	// A List of Kubernetes taints to assign to the nodes.
	Taints NodePoolTaintArrayInput
	// Set the newly added node as unschedulable. If you want to open the scheduling option, you can open it in the node list of the console. If you are using an auto-scaling node pool, the setting will not take effect. Default is `false`.
	Unschedulable pulumi.BoolPtrInput
	// Windows instances support batch and PowerShell scripts. If your script file is larger than 1 KB, we recommend that you upload the script to Object Storage Service (OSS) and pull it through the internal endpoint of your OSS bucket.
	UserData pulumi.StringPtrInput
	// The vswitches used by node pool workers.
	VswitchIds pulumi.StringArrayInput
}

func (NodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolArgs)(nil)).Elem()
}

type NodePoolInput interface {
	pulumi.Input

	ToNodePoolOutput() NodePoolOutput
	ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput
}

func (*NodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (i *NodePool) ToNodePoolOutput() NodePoolOutput {
	return i.ToNodePoolOutputWithContext(context.Background())
}

func (i *NodePool) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolOutput)
}

// NodePoolArrayInput is an input type that accepts NodePoolArray and NodePoolArrayOutput values.
// You can construct a concrete instance of `NodePoolArrayInput` via:
//
//          NodePoolArray{ NodePoolArgs{...} }
type NodePoolArrayInput interface {
	pulumi.Input

	ToNodePoolArrayOutput() NodePoolArrayOutput
	ToNodePoolArrayOutputWithContext(context.Context) NodePoolArrayOutput
}

type NodePoolArray []NodePoolInput

func (NodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (i NodePoolArray) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return i.ToNodePoolArrayOutputWithContext(context.Background())
}

func (i NodePoolArray) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolArrayOutput)
}

// NodePoolMapInput is an input type that accepts NodePoolMap and NodePoolMapOutput values.
// You can construct a concrete instance of `NodePoolMapInput` via:
//
//          NodePoolMap{ "key": NodePoolArgs{...} }
type NodePoolMapInput interface {
	pulumi.Input

	ToNodePoolMapOutput() NodePoolMapOutput
	ToNodePoolMapOutputWithContext(context.Context) NodePoolMapOutput
}

type NodePoolMap map[string]NodePoolInput

func (NodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (i NodePoolMap) ToNodePoolMapOutput() NodePoolMapOutput {
	return i.ToNodePoolMapOutputWithContext(context.Background())
}

func (i NodePoolMap) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMapOutput)
}

type NodePoolOutput struct{ *pulumi.OutputState }

func (NodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (o NodePoolOutput) ToNodePoolOutput() NodePoolOutput {
	return o
}

func (o NodePoolOutput) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return o
}

type NodePoolArrayOutput struct{ *pulumi.OutputState }

func (NodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) Index(i pulumi.IntInput) NodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].([]*NodePool)[vs[1].(int)]
	}).(NodePoolOutput)
}

type NodePoolMapOutput struct{ *pulumi.OutputState }

func (NodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (o NodePoolMapOutput) ToNodePoolMapOutput() NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) MapIndex(k pulumi.StringInput) NodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].(map[string]*NodePool)[vs[1].(string)]
	}).(NodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolInput)(nil)).Elem(), &NodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolArrayInput)(nil)).Elem(), NodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMapInput)(nil)).Elem(), NodePoolMap{})
	pulumi.RegisterOutputType(NodePoolOutput{})
	pulumi.RegisterOutputType(NodePoolArrayOutput{})
	pulumi.RegisterOutputType(NodePoolMapOutput{})
}
