// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hbase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstanceSlbConnAddr struct {
	ConnAddr     *string `pulumi:"connAddr"`
	ConnAddrPort *string `pulumi:"connAddrPort"`
	NetType      *string `pulumi:"netType"`
}

// InstanceSlbConnAddrInput is an input type that accepts InstanceSlbConnAddrArgs and InstanceSlbConnAddrOutput values.
// You can construct a concrete instance of `InstanceSlbConnAddrInput` via:
//
//	InstanceSlbConnAddrArgs{...}
type InstanceSlbConnAddrInput interface {
	pulumi.Input

	ToInstanceSlbConnAddrOutput() InstanceSlbConnAddrOutput
	ToInstanceSlbConnAddrOutputWithContext(context.Context) InstanceSlbConnAddrOutput
}

type InstanceSlbConnAddrArgs struct {
	ConnAddr     pulumi.StringPtrInput `pulumi:"connAddr"`
	ConnAddrPort pulumi.StringPtrInput `pulumi:"connAddrPort"`
	NetType      pulumi.StringPtrInput `pulumi:"netType"`
}

func (InstanceSlbConnAddrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSlbConnAddr)(nil)).Elem()
}

func (i InstanceSlbConnAddrArgs) ToInstanceSlbConnAddrOutput() InstanceSlbConnAddrOutput {
	return i.ToInstanceSlbConnAddrOutputWithContext(context.Background())
}

func (i InstanceSlbConnAddrArgs) ToInstanceSlbConnAddrOutputWithContext(ctx context.Context) InstanceSlbConnAddrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSlbConnAddrOutput)
}

// InstanceSlbConnAddrArrayInput is an input type that accepts InstanceSlbConnAddrArray and InstanceSlbConnAddrArrayOutput values.
// You can construct a concrete instance of `InstanceSlbConnAddrArrayInput` via:
//
//	InstanceSlbConnAddrArray{ InstanceSlbConnAddrArgs{...} }
type InstanceSlbConnAddrArrayInput interface {
	pulumi.Input

	ToInstanceSlbConnAddrArrayOutput() InstanceSlbConnAddrArrayOutput
	ToInstanceSlbConnAddrArrayOutputWithContext(context.Context) InstanceSlbConnAddrArrayOutput
}

type InstanceSlbConnAddrArray []InstanceSlbConnAddrInput

func (InstanceSlbConnAddrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSlbConnAddr)(nil)).Elem()
}

func (i InstanceSlbConnAddrArray) ToInstanceSlbConnAddrArrayOutput() InstanceSlbConnAddrArrayOutput {
	return i.ToInstanceSlbConnAddrArrayOutputWithContext(context.Background())
}

func (i InstanceSlbConnAddrArray) ToInstanceSlbConnAddrArrayOutputWithContext(ctx context.Context) InstanceSlbConnAddrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSlbConnAddrArrayOutput)
}

type InstanceSlbConnAddrOutput struct{ *pulumi.OutputState }

func (InstanceSlbConnAddrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSlbConnAddr)(nil)).Elem()
}

func (o InstanceSlbConnAddrOutput) ToInstanceSlbConnAddrOutput() InstanceSlbConnAddrOutput {
	return o
}

func (o InstanceSlbConnAddrOutput) ToInstanceSlbConnAddrOutputWithContext(ctx context.Context) InstanceSlbConnAddrOutput {
	return o
}

func (o InstanceSlbConnAddrOutput) ConnAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSlbConnAddr) *string { return v.ConnAddr }).(pulumi.StringPtrOutput)
}

func (o InstanceSlbConnAddrOutput) ConnAddrPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSlbConnAddr) *string { return v.ConnAddrPort }).(pulumi.StringPtrOutput)
}

func (o InstanceSlbConnAddrOutput) NetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSlbConnAddr) *string { return v.NetType }).(pulumi.StringPtrOutput)
}

type InstanceSlbConnAddrArrayOutput struct{ *pulumi.OutputState }

func (InstanceSlbConnAddrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSlbConnAddr)(nil)).Elem()
}

func (o InstanceSlbConnAddrArrayOutput) ToInstanceSlbConnAddrArrayOutput() InstanceSlbConnAddrArrayOutput {
	return o
}

func (o InstanceSlbConnAddrArrayOutput) ToInstanceSlbConnAddrArrayOutputWithContext(ctx context.Context) InstanceSlbConnAddrArrayOutput {
	return o
}

func (o InstanceSlbConnAddrArrayOutput) Index(i pulumi.IntInput) InstanceSlbConnAddrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceSlbConnAddr {
		return vs[0].([]InstanceSlbConnAddr)[vs[1].(int)]
	}).(InstanceSlbConnAddrOutput)
}

type InstanceUiProxyConnAddr struct {
	ConnAddr     *string `pulumi:"connAddr"`
	ConnAddrPort *string `pulumi:"connAddrPort"`
	NetType      *string `pulumi:"netType"`
}

// InstanceUiProxyConnAddrInput is an input type that accepts InstanceUiProxyConnAddrArgs and InstanceUiProxyConnAddrOutput values.
// You can construct a concrete instance of `InstanceUiProxyConnAddrInput` via:
//
//	InstanceUiProxyConnAddrArgs{...}
type InstanceUiProxyConnAddrInput interface {
	pulumi.Input

	ToInstanceUiProxyConnAddrOutput() InstanceUiProxyConnAddrOutput
	ToInstanceUiProxyConnAddrOutputWithContext(context.Context) InstanceUiProxyConnAddrOutput
}

type InstanceUiProxyConnAddrArgs struct {
	ConnAddr     pulumi.StringPtrInput `pulumi:"connAddr"`
	ConnAddrPort pulumi.StringPtrInput `pulumi:"connAddrPort"`
	NetType      pulumi.StringPtrInput `pulumi:"netType"`
}

func (InstanceUiProxyConnAddrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceUiProxyConnAddr)(nil)).Elem()
}

func (i InstanceUiProxyConnAddrArgs) ToInstanceUiProxyConnAddrOutput() InstanceUiProxyConnAddrOutput {
	return i.ToInstanceUiProxyConnAddrOutputWithContext(context.Background())
}

func (i InstanceUiProxyConnAddrArgs) ToInstanceUiProxyConnAddrOutputWithContext(ctx context.Context) InstanceUiProxyConnAddrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceUiProxyConnAddrOutput)
}

// InstanceUiProxyConnAddrArrayInput is an input type that accepts InstanceUiProxyConnAddrArray and InstanceUiProxyConnAddrArrayOutput values.
// You can construct a concrete instance of `InstanceUiProxyConnAddrArrayInput` via:
//
//	InstanceUiProxyConnAddrArray{ InstanceUiProxyConnAddrArgs{...} }
type InstanceUiProxyConnAddrArrayInput interface {
	pulumi.Input

	ToInstanceUiProxyConnAddrArrayOutput() InstanceUiProxyConnAddrArrayOutput
	ToInstanceUiProxyConnAddrArrayOutputWithContext(context.Context) InstanceUiProxyConnAddrArrayOutput
}

type InstanceUiProxyConnAddrArray []InstanceUiProxyConnAddrInput

func (InstanceUiProxyConnAddrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceUiProxyConnAddr)(nil)).Elem()
}

func (i InstanceUiProxyConnAddrArray) ToInstanceUiProxyConnAddrArrayOutput() InstanceUiProxyConnAddrArrayOutput {
	return i.ToInstanceUiProxyConnAddrArrayOutputWithContext(context.Background())
}

func (i InstanceUiProxyConnAddrArray) ToInstanceUiProxyConnAddrArrayOutputWithContext(ctx context.Context) InstanceUiProxyConnAddrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceUiProxyConnAddrArrayOutput)
}

type InstanceUiProxyConnAddrOutput struct{ *pulumi.OutputState }

func (InstanceUiProxyConnAddrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceUiProxyConnAddr)(nil)).Elem()
}

func (o InstanceUiProxyConnAddrOutput) ToInstanceUiProxyConnAddrOutput() InstanceUiProxyConnAddrOutput {
	return o
}

func (o InstanceUiProxyConnAddrOutput) ToInstanceUiProxyConnAddrOutputWithContext(ctx context.Context) InstanceUiProxyConnAddrOutput {
	return o
}

func (o InstanceUiProxyConnAddrOutput) ConnAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceUiProxyConnAddr) *string { return v.ConnAddr }).(pulumi.StringPtrOutput)
}

func (o InstanceUiProxyConnAddrOutput) ConnAddrPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceUiProxyConnAddr) *string { return v.ConnAddrPort }).(pulumi.StringPtrOutput)
}

func (o InstanceUiProxyConnAddrOutput) NetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceUiProxyConnAddr) *string { return v.NetType }).(pulumi.StringPtrOutput)
}

type InstanceUiProxyConnAddrArrayOutput struct{ *pulumi.OutputState }

func (InstanceUiProxyConnAddrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceUiProxyConnAddr)(nil)).Elem()
}

func (o InstanceUiProxyConnAddrArrayOutput) ToInstanceUiProxyConnAddrArrayOutput() InstanceUiProxyConnAddrArrayOutput {
	return o
}

func (o InstanceUiProxyConnAddrArrayOutput) ToInstanceUiProxyConnAddrArrayOutputWithContext(ctx context.Context) InstanceUiProxyConnAddrArrayOutput {
	return o
}

func (o InstanceUiProxyConnAddrArrayOutput) Index(i pulumi.IntInput) InstanceUiProxyConnAddrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceUiProxyConnAddr {
		return vs[0].([]InstanceUiProxyConnAddr)[vs[1].(int)]
	}).(InstanceUiProxyConnAddrOutput)
}

type InstanceZkConnAddr struct {
	ConnAddr     *string `pulumi:"connAddr"`
	ConnAddrPort *string `pulumi:"connAddrPort"`
	NetType      *string `pulumi:"netType"`
}

// InstanceZkConnAddrInput is an input type that accepts InstanceZkConnAddrArgs and InstanceZkConnAddrOutput values.
// You can construct a concrete instance of `InstanceZkConnAddrInput` via:
//
//	InstanceZkConnAddrArgs{...}
type InstanceZkConnAddrInput interface {
	pulumi.Input

	ToInstanceZkConnAddrOutput() InstanceZkConnAddrOutput
	ToInstanceZkConnAddrOutputWithContext(context.Context) InstanceZkConnAddrOutput
}

type InstanceZkConnAddrArgs struct {
	ConnAddr     pulumi.StringPtrInput `pulumi:"connAddr"`
	ConnAddrPort pulumi.StringPtrInput `pulumi:"connAddrPort"`
	NetType      pulumi.StringPtrInput `pulumi:"netType"`
}

func (InstanceZkConnAddrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceZkConnAddr)(nil)).Elem()
}

func (i InstanceZkConnAddrArgs) ToInstanceZkConnAddrOutput() InstanceZkConnAddrOutput {
	return i.ToInstanceZkConnAddrOutputWithContext(context.Background())
}

func (i InstanceZkConnAddrArgs) ToInstanceZkConnAddrOutputWithContext(ctx context.Context) InstanceZkConnAddrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceZkConnAddrOutput)
}

// InstanceZkConnAddrArrayInput is an input type that accepts InstanceZkConnAddrArray and InstanceZkConnAddrArrayOutput values.
// You can construct a concrete instance of `InstanceZkConnAddrArrayInput` via:
//
//	InstanceZkConnAddrArray{ InstanceZkConnAddrArgs{...} }
type InstanceZkConnAddrArrayInput interface {
	pulumi.Input

	ToInstanceZkConnAddrArrayOutput() InstanceZkConnAddrArrayOutput
	ToInstanceZkConnAddrArrayOutputWithContext(context.Context) InstanceZkConnAddrArrayOutput
}

type InstanceZkConnAddrArray []InstanceZkConnAddrInput

func (InstanceZkConnAddrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceZkConnAddr)(nil)).Elem()
}

func (i InstanceZkConnAddrArray) ToInstanceZkConnAddrArrayOutput() InstanceZkConnAddrArrayOutput {
	return i.ToInstanceZkConnAddrArrayOutputWithContext(context.Background())
}

func (i InstanceZkConnAddrArray) ToInstanceZkConnAddrArrayOutputWithContext(ctx context.Context) InstanceZkConnAddrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceZkConnAddrArrayOutput)
}

type InstanceZkConnAddrOutput struct{ *pulumi.OutputState }

func (InstanceZkConnAddrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceZkConnAddr)(nil)).Elem()
}

func (o InstanceZkConnAddrOutput) ToInstanceZkConnAddrOutput() InstanceZkConnAddrOutput {
	return o
}

func (o InstanceZkConnAddrOutput) ToInstanceZkConnAddrOutputWithContext(ctx context.Context) InstanceZkConnAddrOutput {
	return o
}

func (o InstanceZkConnAddrOutput) ConnAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceZkConnAddr) *string { return v.ConnAddr }).(pulumi.StringPtrOutput)
}

func (o InstanceZkConnAddrOutput) ConnAddrPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceZkConnAddr) *string { return v.ConnAddrPort }).(pulumi.StringPtrOutput)
}

func (o InstanceZkConnAddrOutput) NetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceZkConnAddr) *string { return v.NetType }).(pulumi.StringPtrOutput)
}

type InstanceZkConnAddrArrayOutput struct{ *pulumi.OutputState }

func (InstanceZkConnAddrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceZkConnAddr)(nil)).Elem()
}

func (o InstanceZkConnAddrArrayOutput) ToInstanceZkConnAddrArrayOutput() InstanceZkConnAddrArrayOutput {
	return o
}

func (o InstanceZkConnAddrArrayOutput) ToInstanceZkConnAddrArrayOutputWithContext(ctx context.Context) InstanceZkConnAddrArrayOutput {
	return o
}

func (o InstanceZkConnAddrArrayOutput) Index(i pulumi.IntInput) InstanceZkConnAddrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceZkConnAddr {
		return vs[0].([]InstanceZkConnAddr)[vs[1].(int)]
	}).(InstanceZkConnAddrOutput)
}

type GetInstanceTypesCoreInstanceType struct {
	// Name of the category, single or cluster.
	Category string `pulumi:"category"`
	// Cpu size of the instance type.
	CpuSize int `pulumi:"cpuSize"`
	// The engine name, `singlehbase`, `hbase`, `hbaseue`, `bds`.
	Engine string `pulumi:"engine"`
	// The hbase instance type of create hbase cluster instance.
	InstanceType string `pulumi:"instanceType"`
	// Max count of the core instance nodes.
	MaxCoreCount int `pulumi:"maxCoreCount"`
	// Mem size of the instance type.
	MemSize int `pulumi:"memSize"`
	// Name of the storage type.
	StorageType string `pulumi:"storageType"`
	// The engine version, singlehbase/hbase=1.1/2.0, bds=1.0.
	Version string `pulumi:"version"`
	// Name of zone id.
	Zone string `pulumi:"zone"`
}

// GetInstanceTypesCoreInstanceTypeInput is an input type that accepts GetInstanceTypesCoreInstanceTypeArgs and GetInstanceTypesCoreInstanceTypeOutput values.
// You can construct a concrete instance of `GetInstanceTypesCoreInstanceTypeInput` via:
//
//	GetInstanceTypesCoreInstanceTypeArgs{...}
type GetInstanceTypesCoreInstanceTypeInput interface {
	pulumi.Input

	ToGetInstanceTypesCoreInstanceTypeOutput() GetInstanceTypesCoreInstanceTypeOutput
	ToGetInstanceTypesCoreInstanceTypeOutputWithContext(context.Context) GetInstanceTypesCoreInstanceTypeOutput
}

type GetInstanceTypesCoreInstanceTypeArgs struct {
	// Name of the category, single or cluster.
	Category pulumi.StringInput `pulumi:"category"`
	// Cpu size of the instance type.
	CpuSize pulumi.IntInput `pulumi:"cpuSize"`
	// The engine name, `singlehbase`, `hbase`, `hbaseue`, `bds`.
	Engine pulumi.StringInput `pulumi:"engine"`
	// The hbase instance type of create hbase cluster instance.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// Max count of the core instance nodes.
	MaxCoreCount pulumi.IntInput `pulumi:"maxCoreCount"`
	// Mem size of the instance type.
	MemSize pulumi.IntInput `pulumi:"memSize"`
	// Name of the storage type.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// The engine version, singlehbase/hbase=1.1/2.0, bds=1.0.
	Version pulumi.StringInput `pulumi:"version"`
	// Name of zone id.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetInstanceTypesCoreInstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesCoreInstanceType)(nil)).Elem()
}

func (i GetInstanceTypesCoreInstanceTypeArgs) ToGetInstanceTypesCoreInstanceTypeOutput() GetInstanceTypesCoreInstanceTypeOutput {
	return i.ToGetInstanceTypesCoreInstanceTypeOutputWithContext(context.Background())
}

func (i GetInstanceTypesCoreInstanceTypeArgs) ToGetInstanceTypesCoreInstanceTypeOutputWithContext(ctx context.Context) GetInstanceTypesCoreInstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesCoreInstanceTypeOutput)
}

// GetInstanceTypesCoreInstanceTypeArrayInput is an input type that accepts GetInstanceTypesCoreInstanceTypeArray and GetInstanceTypesCoreInstanceTypeArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesCoreInstanceTypeArrayInput` via:
//
//	GetInstanceTypesCoreInstanceTypeArray{ GetInstanceTypesCoreInstanceTypeArgs{...} }
type GetInstanceTypesCoreInstanceTypeArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesCoreInstanceTypeArrayOutput() GetInstanceTypesCoreInstanceTypeArrayOutput
	ToGetInstanceTypesCoreInstanceTypeArrayOutputWithContext(context.Context) GetInstanceTypesCoreInstanceTypeArrayOutput
}

type GetInstanceTypesCoreInstanceTypeArray []GetInstanceTypesCoreInstanceTypeInput

func (GetInstanceTypesCoreInstanceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesCoreInstanceType)(nil)).Elem()
}

func (i GetInstanceTypesCoreInstanceTypeArray) ToGetInstanceTypesCoreInstanceTypeArrayOutput() GetInstanceTypesCoreInstanceTypeArrayOutput {
	return i.ToGetInstanceTypesCoreInstanceTypeArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesCoreInstanceTypeArray) ToGetInstanceTypesCoreInstanceTypeArrayOutputWithContext(ctx context.Context) GetInstanceTypesCoreInstanceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesCoreInstanceTypeArrayOutput)
}

type GetInstanceTypesCoreInstanceTypeOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesCoreInstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesCoreInstanceType)(nil)).Elem()
}

func (o GetInstanceTypesCoreInstanceTypeOutput) ToGetInstanceTypesCoreInstanceTypeOutput() GetInstanceTypesCoreInstanceTypeOutput {
	return o
}

func (o GetInstanceTypesCoreInstanceTypeOutput) ToGetInstanceTypesCoreInstanceTypeOutputWithContext(ctx context.Context) GetInstanceTypesCoreInstanceTypeOutput {
	return o
}

// Name of the category, single or cluster.
func (o GetInstanceTypesCoreInstanceTypeOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesCoreInstanceType) string { return v.Category }).(pulumi.StringOutput)
}

// Cpu size of the instance type.
func (o GetInstanceTypesCoreInstanceTypeOutput) CpuSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesCoreInstanceType) int { return v.CpuSize }).(pulumi.IntOutput)
}

// The engine name, `singlehbase`, `hbase`, `hbaseue`, `bds`.
func (o GetInstanceTypesCoreInstanceTypeOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesCoreInstanceType) string { return v.Engine }).(pulumi.StringOutput)
}

// The hbase instance type of create hbase cluster instance.
func (o GetInstanceTypesCoreInstanceTypeOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesCoreInstanceType) string { return v.InstanceType }).(pulumi.StringOutput)
}

// Max count of the core instance nodes.
func (o GetInstanceTypesCoreInstanceTypeOutput) MaxCoreCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesCoreInstanceType) int { return v.MaxCoreCount }).(pulumi.IntOutput)
}

// Mem size of the instance type.
func (o GetInstanceTypesCoreInstanceTypeOutput) MemSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesCoreInstanceType) int { return v.MemSize }).(pulumi.IntOutput)
}

// Name of the storage type.
func (o GetInstanceTypesCoreInstanceTypeOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesCoreInstanceType) string { return v.StorageType }).(pulumi.StringOutput)
}

// The engine version, singlehbase/hbase=1.1/2.0, bds=1.0.
func (o GetInstanceTypesCoreInstanceTypeOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesCoreInstanceType) string { return v.Version }).(pulumi.StringOutput)
}

// Name of zone id.
func (o GetInstanceTypesCoreInstanceTypeOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesCoreInstanceType) string { return v.Zone }).(pulumi.StringOutput)
}

type GetInstanceTypesCoreInstanceTypeArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesCoreInstanceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesCoreInstanceType)(nil)).Elem()
}

func (o GetInstanceTypesCoreInstanceTypeArrayOutput) ToGetInstanceTypesCoreInstanceTypeArrayOutput() GetInstanceTypesCoreInstanceTypeArrayOutput {
	return o
}

func (o GetInstanceTypesCoreInstanceTypeArrayOutput) ToGetInstanceTypesCoreInstanceTypeArrayOutputWithContext(ctx context.Context) GetInstanceTypesCoreInstanceTypeArrayOutput {
	return o
}

func (o GetInstanceTypesCoreInstanceTypeArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesCoreInstanceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesCoreInstanceType {
		return vs[0].([]GetInstanceTypesCoreInstanceType)[vs[1].(int)]
	}).(GetInstanceTypesCoreInstanceTypeOutput)
}

type GetInstanceTypesMasterInstanceType struct {
	// Cpu size of the instance type.
	CpuSize int `pulumi:"cpuSize"`
	// The hbase instance type of create hbase cluster instance.
	InstanceType string `pulumi:"instanceType"`
	// Mem size of the instance type.
	MemSize int `pulumi:"memSize"`
}

// GetInstanceTypesMasterInstanceTypeInput is an input type that accepts GetInstanceTypesMasterInstanceTypeArgs and GetInstanceTypesMasterInstanceTypeOutput values.
// You can construct a concrete instance of `GetInstanceTypesMasterInstanceTypeInput` via:
//
//	GetInstanceTypesMasterInstanceTypeArgs{...}
type GetInstanceTypesMasterInstanceTypeInput interface {
	pulumi.Input

	ToGetInstanceTypesMasterInstanceTypeOutput() GetInstanceTypesMasterInstanceTypeOutput
	ToGetInstanceTypesMasterInstanceTypeOutputWithContext(context.Context) GetInstanceTypesMasterInstanceTypeOutput
}

type GetInstanceTypesMasterInstanceTypeArgs struct {
	// Cpu size of the instance type.
	CpuSize pulumi.IntInput `pulumi:"cpuSize"`
	// The hbase instance type of create hbase cluster instance.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// Mem size of the instance type.
	MemSize pulumi.IntInput `pulumi:"memSize"`
}

func (GetInstanceTypesMasterInstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesMasterInstanceType)(nil)).Elem()
}

func (i GetInstanceTypesMasterInstanceTypeArgs) ToGetInstanceTypesMasterInstanceTypeOutput() GetInstanceTypesMasterInstanceTypeOutput {
	return i.ToGetInstanceTypesMasterInstanceTypeOutputWithContext(context.Background())
}

func (i GetInstanceTypesMasterInstanceTypeArgs) ToGetInstanceTypesMasterInstanceTypeOutputWithContext(ctx context.Context) GetInstanceTypesMasterInstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesMasterInstanceTypeOutput)
}

// GetInstanceTypesMasterInstanceTypeArrayInput is an input type that accepts GetInstanceTypesMasterInstanceTypeArray and GetInstanceTypesMasterInstanceTypeArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesMasterInstanceTypeArrayInput` via:
//
//	GetInstanceTypesMasterInstanceTypeArray{ GetInstanceTypesMasterInstanceTypeArgs{...} }
type GetInstanceTypesMasterInstanceTypeArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesMasterInstanceTypeArrayOutput() GetInstanceTypesMasterInstanceTypeArrayOutput
	ToGetInstanceTypesMasterInstanceTypeArrayOutputWithContext(context.Context) GetInstanceTypesMasterInstanceTypeArrayOutput
}

type GetInstanceTypesMasterInstanceTypeArray []GetInstanceTypesMasterInstanceTypeInput

func (GetInstanceTypesMasterInstanceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesMasterInstanceType)(nil)).Elem()
}

func (i GetInstanceTypesMasterInstanceTypeArray) ToGetInstanceTypesMasterInstanceTypeArrayOutput() GetInstanceTypesMasterInstanceTypeArrayOutput {
	return i.ToGetInstanceTypesMasterInstanceTypeArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesMasterInstanceTypeArray) ToGetInstanceTypesMasterInstanceTypeArrayOutputWithContext(ctx context.Context) GetInstanceTypesMasterInstanceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesMasterInstanceTypeArrayOutput)
}

type GetInstanceTypesMasterInstanceTypeOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesMasterInstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesMasterInstanceType)(nil)).Elem()
}

func (o GetInstanceTypesMasterInstanceTypeOutput) ToGetInstanceTypesMasterInstanceTypeOutput() GetInstanceTypesMasterInstanceTypeOutput {
	return o
}

func (o GetInstanceTypesMasterInstanceTypeOutput) ToGetInstanceTypesMasterInstanceTypeOutputWithContext(ctx context.Context) GetInstanceTypesMasterInstanceTypeOutput {
	return o
}

// Cpu size of the instance type.
func (o GetInstanceTypesMasterInstanceTypeOutput) CpuSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesMasterInstanceType) int { return v.CpuSize }).(pulumi.IntOutput)
}

// The hbase instance type of create hbase cluster instance.
func (o GetInstanceTypesMasterInstanceTypeOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesMasterInstanceType) string { return v.InstanceType }).(pulumi.StringOutput)
}

// Mem size of the instance type.
func (o GetInstanceTypesMasterInstanceTypeOutput) MemSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesMasterInstanceType) int { return v.MemSize }).(pulumi.IntOutput)
}

type GetInstanceTypesMasterInstanceTypeArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesMasterInstanceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesMasterInstanceType)(nil)).Elem()
}

func (o GetInstanceTypesMasterInstanceTypeArrayOutput) ToGetInstanceTypesMasterInstanceTypeArrayOutput() GetInstanceTypesMasterInstanceTypeArrayOutput {
	return o
}

func (o GetInstanceTypesMasterInstanceTypeArrayOutput) ToGetInstanceTypesMasterInstanceTypeArrayOutputWithContext(ctx context.Context) GetInstanceTypesMasterInstanceTypeArrayOutput {
	return o
}

func (o GetInstanceTypesMasterInstanceTypeArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesMasterInstanceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesMasterInstanceType {
		return vs[0].([]GetInstanceTypesMasterInstanceType)[vs[1].(int)]
	}).(GetInstanceTypesMasterInstanceTypeOutput)
}

type GetInstanceTypesType struct {
	// Cpu size of the instance type.
	CpuSize int `pulumi:"cpuSize"`
	// Mem size of the instance type.
	MemSize int `pulumi:"memSize"`
	// Name of the instance type.
	Value string `pulumi:"value"`
}

// GetInstanceTypesTypeInput is an input type that accepts GetInstanceTypesTypeArgs and GetInstanceTypesTypeOutput values.
// You can construct a concrete instance of `GetInstanceTypesTypeInput` via:
//
//	GetInstanceTypesTypeArgs{...}
type GetInstanceTypesTypeInput interface {
	pulumi.Input

	ToGetInstanceTypesTypeOutput() GetInstanceTypesTypeOutput
	ToGetInstanceTypesTypeOutputWithContext(context.Context) GetInstanceTypesTypeOutput
}

type GetInstanceTypesTypeArgs struct {
	// Cpu size of the instance type.
	CpuSize pulumi.IntInput `pulumi:"cpuSize"`
	// Mem size of the instance type.
	MemSize pulumi.IntInput `pulumi:"memSize"`
	// Name of the instance type.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstanceTypesTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesType)(nil)).Elem()
}

func (i GetInstanceTypesTypeArgs) ToGetInstanceTypesTypeOutput() GetInstanceTypesTypeOutput {
	return i.ToGetInstanceTypesTypeOutputWithContext(context.Background())
}

func (i GetInstanceTypesTypeArgs) ToGetInstanceTypesTypeOutputWithContext(ctx context.Context) GetInstanceTypesTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesTypeOutput)
}

// GetInstanceTypesTypeArrayInput is an input type that accepts GetInstanceTypesTypeArray and GetInstanceTypesTypeArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesTypeArrayInput` via:
//
//	GetInstanceTypesTypeArray{ GetInstanceTypesTypeArgs{...} }
type GetInstanceTypesTypeArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesTypeArrayOutput() GetInstanceTypesTypeArrayOutput
	ToGetInstanceTypesTypeArrayOutputWithContext(context.Context) GetInstanceTypesTypeArrayOutput
}

type GetInstanceTypesTypeArray []GetInstanceTypesTypeInput

func (GetInstanceTypesTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesType)(nil)).Elem()
}

func (i GetInstanceTypesTypeArray) ToGetInstanceTypesTypeArrayOutput() GetInstanceTypesTypeArrayOutput {
	return i.ToGetInstanceTypesTypeArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesTypeArray) ToGetInstanceTypesTypeArrayOutputWithContext(ctx context.Context) GetInstanceTypesTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesTypeArrayOutput)
}

type GetInstanceTypesTypeOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesType)(nil)).Elem()
}

func (o GetInstanceTypesTypeOutput) ToGetInstanceTypesTypeOutput() GetInstanceTypesTypeOutput {
	return o
}

func (o GetInstanceTypesTypeOutput) ToGetInstanceTypesTypeOutputWithContext(ctx context.Context) GetInstanceTypesTypeOutput {
	return o
}

// Cpu size of the instance type.
func (o GetInstanceTypesTypeOutput) CpuSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesType) int { return v.CpuSize }).(pulumi.IntOutput)
}

// Mem size of the instance type.
func (o GetInstanceTypesTypeOutput) MemSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesType) int { return v.MemSize }).(pulumi.IntOutput)
}

// Name of the instance type.
func (o GetInstanceTypesTypeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesType) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstanceTypesTypeArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesType)(nil)).Elem()
}

func (o GetInstanceTypesTypeArrayOutput) ToGetInstanceTypesTypeArrayOutput() GetInstanceTypesTypeArrayOutput {
	return o
}

func (o GetInstanceTypesTypeArrayOutput) ToGetInstanceTypesTypeArrayOutputWithContext(ctx context.Context) GetInstanceTypesTypeArrayOutput {
	return o
}

func (o GetInstanceTypesTypeArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesType {
		return vs[0].([]GetInstanceTypesType)[vs[1].(int)]
	}).(GetInstanceTypesTypeOutput)
}

type GetInstancesInstance struct {
	// The Backup Status of the instance.
	BackupStatus string `pulumi:"backupStatus"`
	// Core node disk size, unit:GB.
	CoreDiskSize int `pulumi:"coreDiskSize"`
	// Cloud_ssd or cloud_efficiency
	CoreDiskType string `pulumi:"coreDiskType"`
	// Like hbase.sn2.2xlarge, hbase.sn2.4xlarge, hbase.sn2.8xlarge and so on.
	CoreInstanceType string `pulumi:"coreInstanceType"`
	// Same with "coreInstanceQuantity"
	CoreNodeCount int `pulumi:"coreNodeCount"`
	// The created time of the instance.
	CreatedTime string `pulumi:"createdTime"`
	// The switch of delete protection.
	DeletionProtection bool `pulumi:"deletionProtection"`
	// The engine of the instance.
	Engine string `pulumi:"engine"`
	// The engineVersion of the instance.
	EngineVersion string `pulumi:"engineVersion"`
	// The expire time of the instance.
	ExpireTime string `pulumi:"expireTime"`
	// The ID of the HBase instance.
	Id string `pulumi:"id"`
	// Like hbase.sn2.2xlarge, hbase.sn2.4xlarge, hbase.sn2.8xlarge and so on.
	MasterInstanceType string `pulumi:"masterInstanceType"`
	// The node count of master
	MasterNodeCount int `pulumi:"masterNodeCount"`
	// The name of the HBase instance.
	Name string `pulumi:"name"`
	// Classic network or VPC.
	NetworkType string `pulumi:"networkType"`
	// Billing method. Value options are `PostPaid` for  Pay-As-You-Go and `PrePaid` for yearly or monthly subscription.
	PayType string `pulumi:"payType"`
	// Region ID the instance belongs to.
	RegionId string `pulumi:"regionId"`
	// Status of the instance.
	Status string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// VPC ID the instance belongs to.
	VpcId string `pulumi:"vpcId"`
	// VSwitch ID the instance belongs to.
	VswitchId string `pulumi:"vswitchId"`
	// Zone ID the instance belongs to.
	ZoneId string `pulumi:"zoneId"`
}

// GetInstancesInstanceInput is an input type that accepts GetInstancesInstanceArgs and GetInstancesInstanceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceInput` via:
//
//	GetInstancesInstanceArgs{...}
type GetInstancesInstanceInput interface {
	pulumi.Input

	ToGetInstancesInstanceOutput() GetInstancesInstanceOutput
	ToGetInstancesInstanceOutputWithContext(context.Context) GetInstancesInstanceOutput
}

type GetInstancesInstanceArgs struct {
	// The Backup Status of the instance.
	BackupStatus pulumi.StringInput `pulumi:"backupStatus"`
	// Core node disk size, unit:GB.
	CoreDiskSize pulumi.IntInput `pulumi:"coreDiskSize"`
	// Cloud_ssd or cloud_efficiency
	CoreDiskType pulumi.StringInput `pulumi:"coreDiskType"`
	// Like hbase.sn2.2xlarge, hbase.sn2.4xlarge, hbase.sn2.8xlarge and so on.
	CoreInstanceType pulumi.StringInput `pulumi:"coreInstanceType"`
	// Same with "coreInstanceQuantity"
	CoreNodeCount pulumi.IntInput `pulumi:"coreNodeCount"`
	// The created time of the instance.
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	// The switch of delete protection.
	DeletionProtection pulumi.BoolInput `pulumi:"deletionProtection"`
	// The engine of the instance.
	Engine pulumi.StringInput `pulumi:"engine"`
	// The engineVersion of the instance.
	EngineVersion pulumi.StringInput `pulumi:"engineVersion"`
	// The expire time of the instance.
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
	// The ID of the HBase instance.
	Id pulumi.StringInput `pulumi:"id"`
	// Like hbase.sn2.2xlarge, hbase.sn2.4xlarge, hbase.sn2.8xlarge and so on.
	MasterInstanceType pulumi.StringInput `pulumi:"masterInstanceType"`
	// The node count of master
	MasterNodeCount pulumi.IntInput `pulumi:"masterNodeCount"`
	// The name of the HBase instance.
	Name pulumi.StringInput `pulumi:"name"`
	// Classic network or VPC.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// Billing method. Value options are `PostPaid` for  Pay-As-You-Go and `PrePaid` for yearly or monthly subscription.
	PayType pulumi.StringInput `pulumi:"payType"`
	// Region ID the instance belongs to.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// Status of the instance.
	Status pulumi.StringInput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// VPC ID the instance belongs to.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// VSwitch ID the instance belongs to.
	VswitchId pulumi.StringInput `pulumi:"vswitchId"`
	// Zone ID the instance belongs to.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return i.ToGetInstancesInstanceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceOutput)
}

// GetInstancesInstanceArrayInput is an input type that accepts GetInstancesInstanceArray and GetInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceArrayInput` via:
//
//	GetInstancesInstanceArray{ GetInstancesInstanceArgs{...} }
type GetInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput
	ToGetInstancesInstanceArrayOutputWithContext(context.Context) GetInstancesInstanceArrayOutput
}

type GetInstancesInstanceArray []GetInstancesInstanceInput

func (GetInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return i.ToGetInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceArrayOutput)
}

type GetInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return o
}

// The Backup Status of the instance.
func (o GetInstancesInstanceOutput) BackupStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.BackupStatus }).(pulumi.StringOutput)
}

// Core node disk size, unit:GB.
func (o GetInstancesInstanceOutput) CoreDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.CoreDiskSize }).(pulumi.IntOutput)
}

// Cloud_ssd or cloud_efficiency
func (o GetInstancesInstanceOutput) CoreDiskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CoreDiskType }).(pulumi.StringOutput)
}

// Like hbase.sn2.2xlarge, hbase.sn2.4xlarge, hbase.sn2.8xlarge and so on.
func (o GetInstancesInstanceOutput) CoreInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CoreInstanceType }).(pulumi.StringOutput)
}

// Same with "coreInstanceQuantity"
func (o GetInstancesInstanceOutput) CoreNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.CoreNodeCount }).(pulumi.IntOutput)
}

// The created time of the instance.
func (o GetInstancesInstanceOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// The switch of delete protection.
func (o GetInstancesInstanceOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesInstance) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The engine of the instance.
func (o GetInstancesInstanceOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Engine }).(pulumi.StringOutput)
}

// The engineVersion of the instance.
func (o GetInstancesInstanceOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.EngineVersion }).(pulumi.StringOutput)
}

// The expire time of the instance.
func (o GetInstancesInstanceOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// The ID of the HBase instance.
func (o GetInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// Like hbase.sn2.2xlarge, hbase.sn2.4xlarge, hbase.sn2.8xlarge and so on.
func (o GetInstancesInstanceOutput) MasterInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.MasterInstanceType }).(pulumi.StringOutput)
}

// The node count of master
func (o GetInstancesInstanceOutput) MasterNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.MasterNodeCount }).(pulumi.IntOutput)
}

// The name of the HBase instance.
func (o GetInstancesInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Name }).(pulumi.StringOutput)
}

// Classic network or VPC.
func (o GetInstancesInstanceOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.NetworkType }).(pulumi.StringOutput)
}

// Billing method. Value options are `PostPaid` for  Pay-As-You-Go and `PrePaid` for yearly or monthly subscription.
func (o GetInstancesInstanceOutput) PayType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.PayType }).(pulumi.StringOutput)
}

// Region ID the instance belongs to.
func (o GetInstancesInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// Status of the instance.
func (o GetInstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o GetInstancesInstanceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetInstancesInstance) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// VPC ID the instance belongs to.
func (o GetInstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// VSwitch ID the instance belongs to.
func (o GetInstancesInstanceOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.VswitchId }).(pulumi.StringOutput)
}

// Zone ID the instance belongs to.
func (o GetInstancesInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstance {
		return vs[0].([]GetInstancesInstance)[vs[1].(int)]
	}).(GetInstancesInstanceOutput)
}

type GetZonesZone struct {
	// ID of the zone.
	Id string `pulumi:"id"`
	// A list of zone ids in which the multi zone. Removed from v1.99.0.
	MultiZoneIds []string `pulumi:"multiZoneIds"`
}

// GetZonesZoneInput is an input type that accepts GetZonesZoneArgs and GetZonesZoneOutput values.
// You can construct a concrete instance of `GetZonesZoneInput` via:
//
//	GetZonesZoneArgs{...}
type GetZonesZoneInput interface {
	pulumi.Input

	ToGetZonesZoneOutput() GetZonesZoneOutput
	ToGetZonesZoneOutputWithContext(context.Context) GetZonesZoneOutput
}

type GetZonesZoneArgs struct {
	// ID of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// A list of zone ids in which the multi zone. Removed from v1.99.0.
	MultiZoneIds pulumi.StringArrayInput `pulumi:"multiZoneIds"`
}

func (GetZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return i.ToGetZonesZoneOutputWithContext(context.Background())
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneOutput)
}

// GetZonesZoneArrayInput is an input type that accepts GetZonesZoneArray and GetZonesZoneArrayOutput values.
// You can construct a concrete instance of `GetZonesZoneArrayInput` via:
//
//	GetZonesZoneArray{ GetZonesZoneArgs{...} }
type GetZonesZoneArrayInput interface {
	pulumi.Input

	ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput
	ToGetZonesZoneArrayOutputWithContext(context.Context) GetZonesZoneArrayOutput
}

type GetZonesZoneArray []GetZonesZoneInput

func (GetZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return i.ToGetZonesZoneArrayOutputWithContext(context.Background())
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneArrayOutput)
}

type GetZonesZoneOutput struct{ *pulumi.OutputState }

func (GetZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return o
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return o
}

// ID of the zone.
func (o GetZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// A list of zone ids in which the multi zone. Removed from v1.99.0.
func (o GetZonesZoneOutput) MultiZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetZonesZone) []string { return v.MultiZoneIds }).(pulumi.StringArrayOutput)
}

type GetZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (GetZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) Index(i pulumi.IntInput) GetZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZonesZone {
		return vs[0].([]GetZonesZone)[vs[1].(int)]
	}).(GetZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSlbConnAddrInput)(nil)).Elem(), InstanceSlbConnAddrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSlbConnAddrArrayInput)(nil)).Elem(), InstanceSlbConnAddrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceUiProxyConnAddrInput)(nil)).Elem(), InstanceUiProxyConnAddrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceUiProxyConnAddrArrayInput)(nil)).Elem(), InstanceUiProxyConnAddrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceZkConnAddrInput)(nil)).Elem(), InstanceZkConnAddrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceZkConnAddrArrayInput)(nil)).Elem(), InstanceZkConnAddrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesCoreInstanceTypeInput)(nil)).Elem(), GetInstanceTypesCoreInstanceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesCoreInstanceTypeArrayInput)(nil)).Elem(), GetInstanceTypesCoreInstanceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesMasterInstanceTypeInput)(nil)).Elem(), GetInstanceTypesMasterInstanceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesMasterInstanceTypeArrayInput)(nil)).Elem(), GetInstanceTypesMasterInstanceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesTypeInput)(nil)).Elem(), GetInstanceTypesTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesTypeArrayInput)(nil)).Elem(), GetInstanceTypesTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceInput)(nil)).Elem(), GetInstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceArrayInput)(nil)).Elem(), GetInstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneInput)(nil)).Elem(), GetZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneArrayInput)(nil)).Elem(), GetZonesZoneArray{})
	pulumi.RegisterOutputType(InstanceSlbConnAddrOutput{})
	pulumi.RegisterOutputType(InstanceSlbConnAddrArrayOutput{})
	pulumi.RegisterOutputType(InstanceUiProxyConnAddrOutput{})
	pulumi.RegisterOutputType(InstanceUiProxyConnAddrArrayOutput{})
	pulumi.RegisterOutputType(InstanceZkConnAddrOutput{})
	pulumi.RegisterOutputType(InstanceZkConnAddrArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesCoreInstanceTypeOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesCoreInstanceTypeArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesMasterInstanceTypeOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesMasterInstanceTypeArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesTypeOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesTypeArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetZonesZoneOutput{})
	pulumi.RegisterOutputType(GetZonesZoneArrayOutput{})
}
