// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloud Enterprise Network (CEN) Inter Region Traffic Qos Queue resource.
//
// For information about Cloud Enterprise Network (CEN) Inter Region Traffic Qos Queue and how to use it, see [What is Inter Region Traffic Qos Queue](https://next.api.alibabacloud.com/document/Cbn/2017-09-12/CreateCenInterRegionTrafficQosQueue).
//
// > **NOTE:** Available since v1.195.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cen"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultRegion := "cn-hangzhou"
//			if param := cfg.Get("defaultRegion"); param != "" {
//				defaultRegion = param
//			}
//			peerRegion := "cn-beijing"
//			if param := cfg.Get("peerRegion"); param != "" {
//				peerRegion = param
//			}
//			_default, err := cen.NewInstance(ctx, "default", &cen.InstanceArgs{
//				CenInstanceName: pulumi.String(name),
//				ProtectionLevel: pulumi.String("REDUCED"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBandwidthPackage, err := cen.NewBandwidthPackage(ctx, "default", &cen.BandwidthPackageArgs{
//				Bandwidth:               pulumi.Int(5),
//				CenBandwidthPackageName: pulumi.String("tf_example"),
//				GeographicRegionAId:     pulumi.String("China"),
//				GeographicRegionBId:     pulumi.String("China"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBandwidthPackageAttachment, err := cen.NewBandwidthPackageAttachment(ctx, "default", &cen.BandwidthPackageAttachmentArgs{
//				InstanceId:         _default.ID(),
//				BandwidthPackageId: defaultBandwidthPackage.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouter, err := cen.NewTransitRouter(ctx, "default", &cen.TransitRouterArgs{
//				CenId:            _default.ID(),
//				SupportMulticast: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			peer, err := cen.NewTransitRouter(ctx, "peer", &cen.TransitRouterArgs{
//				CenId:            defaultTransitRouter.CenId,
//				SupportMulticast: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouterPeerAttachment, err := cen.NewTransitRouterPeerAttachment(ctx, "default", &cen.TransitRouterPeerAttachmentArgs{
//				CenId:                              _default.ID(),
//				TransitRouterId:                    defaultTransitRouter.TransitRouterId,
//				PeerTransitRouterRegionId:          pulumi.String(peerRegion),
//				PeerTransitRouterId:                peer.TransitRouterId,
//				CenBandwidthPackageId:              defaultBandwidthPackageAttachment.BandwidthPackageId,
//				Bandwidth:                          pulumi.Int(5),
//				TransitRouterAttachmentDescription: pulumi.String(name),
//				TransitRouterAttachmentName:        pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultInterRegionTrafficQosPolicy, err := cen.NewInterRegionTrafficQosPolicy(ctx, "default", &cen.InterRegionTrafficQosPolicyArgs{
//				TransitRouterId:                        defaultTransitRouter.TransitRouterId,
//				TransitRouterAttachmentId:              defaultTransitRouterPeerAttachment.TransitRouterAttachmentId,
//				InterRegionTrafficQosPolicyName:        pulumi.String(name),
//				InterRegionTrafficQosPolicyDescription: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cen.NewInterRegionTrafficQosQueue(ctx, "default", &cen.InterRegionTrafficQosQueueArgs{
//				RemainBandwidthPercent: pulumi.Int(20),
//				TrafficQosPolicyId:     defaultInterRegionTrafficQosPolicy.ID(),
//				Dscps: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//				},
//				InterRegionTrafficQosQueueDescription: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cloud Enterprise Network (CEN) Inter Region Traffic Qos Queue can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:cen/interRegionTrafficQosQueue:InterRegionTrafficQosQueue example <id>
// ```
type InterRegionTrafficQosQueue struct {
	pulumi.CustomResourceState

	// The guaranteed bandwidth value. If guaranteed by bandwidth is selected for TrafficQosPolicy, this value is valid.
	Bandwidth pulumi.StringPtrOutput `pulumi:"bandwidth"`
	// The DSCP value of the traffic packet to be matched in the current queue, ranging from 0 to 63.
	Dscps pulumi.IntArrayOutput `pulumi:"dscps"`
	// The description information of the traffic scheduling policy.
	InterRegionTrafficQosQueueDescription pulumi.StringPtrOutput `pulumi:"interRegionTrafficQosQueueDescription"`
	// The name of the traffic scheduling policy.
	InterRegionTrafficQosQueueName pulumi.StringPtrOutput `pulumi:"interRegionTrafficQosQueueName"`
	// The percentage of cross-region bandwidth that the current queue can use.
	RemainBandwidthPercent pulumi.IntPtrOutput `pulumi:"remainBandwidthPercent"`
	// The status of the traffic scheduling policy.
	Status pulumi.StringOutput `pulumi:"status"`
	// The ID of the traffic scheduling policy.
	TrafficQosPolicyId pulumi.StringOutput `pulumi:"trafficQosPolicyId"`
}

// NewInterRegionTrafficQosQueue registers a new resource with the given unique name, arguments, and options.
func NewInterRegionTrafficQosQueue(ctx *pulumi.Context,
	name string, args *InterRegionTrafficQosQueueArgs, opts ...pulumi.ResourceOption) (*InterRegionTrafficQosQueue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dscps == nil {
		return nil, errors.New("invalid value for required argument 'Dscps'")
	}
	if args.TrafficQosPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficQosPolicyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterRegionTrafficQosQueue
	err := ctx.RegisterResource("alicloud:cen/interRegionTrafficQosQueue:InterRegionTrafficQosQueue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterRegionTrafficQosQueue gets an existing InterRegionTrafficQosQueue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterRegionTrafficQosQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterRegionTrafficQosQueueState, opts ...pulumi.ResourceOption) (*InterRegionTrafficQosQueue, error) {
	var resource InterRegionTrafficQosQueue
	err := ctx.ReadResource("alicloud:cen/interRegionTrafficQosQueue:InterRegionTrafficQosQueue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterRegionTrafficQosQueue resources.
type interRegionTrafficQosQueueState struct {
	// The guaranteed bandwidth value. If guaranteed by bandwidth is selected for TrafficQosPolicy, this value is valid.
	Bandwidth *string `pulumi:"bandwidth"`
	// The DSCP value of the traffic packet to be matched in the current queue, ranging from 0 to 63.
	Dscps []int `pulumi:"dscps"`
	// The description information of the traffic scheduling policy.
	InterRegionTrafficQosQueueDescription *string `pulumi:"interRegionTrafficQosQueueDescription"`
	// The name of the traffic scheduling policy.
	InterRegionTrafficQosQueueName *string `pulumi:"interRegionTrafficQosQueueName"`
	// The percentage of cross-region bandwidth that the current queue can use.
	RemainBandwidthPercent *int `pulumi:"remainBandwidthPercent"`
	// The status of the traffic scheduling policy.
	Status *string `pulumi:"status"`
	// The ID of the traffic scheduling policy.
	TrafficQosPolicyId *string `pulumi:"trafficQosPolicyId"`
}

type InterRegionTrafficQosQueueState struct {
	// The guaranteed bandwidth value. If guaranteed by bandwidth is selected for TrafficQosPolicy, this value is valid.
	Bandwidth pulumi.StringPtrInput
	// The DSCP value of the traffic packet to be matched in the current queue, ranging from 0 to 63.
	Dscps pulumi.IntArrayInput
	// The description information of the traffic scheduling policy.
	InterRegionTrafficQosQueueDescription pulumi.StringPtrInput
	// The name of the traffic scheduling policy.
	InterRegionTrafficQosQueueName pulumi.StringPtrInput
	// The percentage of cross-region bandwidth that the current queue can use.
	RemainBandwidthPercent pulumi.IntPtrInput
	// The status of the traffic scheduling policy.
	Status pulumi.StringPtrInput
	// The ID of the traffic scheduling policy.
	TrafficQosPolicyId pulumi.StringPtrInput
}

func (InterRegionTrafficQosQueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*interRegionTrafficQosQueueState)(nil)).Elem()
}

type interRegionTrafficQosQueueArgs struct {
	// The guaranteed bandwidth value. If guaranteed by bandwidth is selected for TrafficQosPolicy, this value is valid.
	Bandwidth *string `pulumi:"bandwidth"`
	// The DSCP value of the traffic packet to be matched in the current queue, ranging from 0 to 63.
	Dscps []int `pulumi:"dscps"`
	// The description information of the traffic scheduling policy.
	InterRegionTrafficQosQueueDescription *string `pulumi:"interRegionTrafficQosQueueDescription"`
	// The name of the traffic scheduling policy.
	InterRegionTrafficQosQueueName *string `pulumi:"interRegionTrafficQosQueueName"`
	// The percentage of cross-region bandwidth that the current queue can use.
	RemainBandwidthPercent *int `pulumi:"remainBandwidthPercent"`
	// The ID of the traffic scheduling policy.
	TrafficQosPolicyId string `pulumi:"trafficQosPolicyId"`
}

// The set of arguments for constructing a InterRegionTrafficQosQueue resource.
type InterRegionTrafficQosQueueArgs struct {
	// The guaranteed bandwidth value. If guaranteed by bandwidth is selected for TrafficQosPolicy, this value is valid.
	Bandwidth pulumi.StringPtrInput
	// The DSCP value of the traffic packet to be matched in the current queue, ranging from 0 to 63.
	Dscps pulumi.IntArrayInput
	// The description information of the traffic scheduling policy.
	InterRegionTrafficQosQueueDescription pulumi.StringPtrInput
	// The name of the traffic scheduling policy.
	InterRegionTrafficQosQueueName pulumi.StringPtrInput
	// The percentage of cross-region bandwidth that the current queue can use.
	RemainBandwidthPercent pulumi.IntPtrInput
	// The ID of the traffic scheduling policy.
	TrafficQosPolicyId pulumi.StringInput
}

func (InterRegionTrafficQosQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interRegionTrafficQosQueueArgs)(nil)).Elem()
}

type InterRegionTrafficQosQueueInput interface {
	pulumi.Input

	ToInterRegionTrafficQosQueueOutput() InterRegionTrafficQosQueueOutput
	ToInterRegionTrafficQosQueueOutputWithContext(ctx context.Context) InterRegionTrafficQosQueueOutput
}

func (*InterRegionTrafficQosQueue) ElementType() reflect.Type {
	return reflect.TypeOf((**InterRegionTrafficQosQueue)(nil)).Elem()
}

func (i *InterRegionTrafficQosQueue) ToInterRegionTrafficQosQueueOutput() InterRegionTrafficQosQueueOutput {
	return i.ToInterRegionTrafficQosQueueOutputWithContext(context.Background())
}

func (i *InterRegionTrafficQosQueue) ToInterRegionTrafficQosQueueOutputWithContext(ctx context.Context) InterRegionTrafficQosQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterRegionTrafficQosQueueOutput)
}

// InterRegionTrafficQosQueueArrayInput is an input type that accepts InterRegionTrafficQosQueueArray and InterRegionTrafficQosQueueArrayOutput values.
// You can construct a concrete instance of `InterRegionTrafficQosQueueArrayInput` via:
//
//	InterRegionTrafficQosQueueArray{ InterRegionTrafficQosQueueArgs{...} }
type InterRegionTrafficQosQueueArrayInput interface {
	pulumi.Input

	ToInterRegionTrafficQosQueueArrayOutput() InterRegionTrafficQosQueueArrayOutput
	ToInterRegionTrafficQosQueueArrayOutputWithContext(context.Context) InterRegionTrafficQosQueueArrayOutput
}

type InterRegionTrafficQosQueueArray []InterRegionTrafficQosQueueInput

func (InterRegionTrafficQosQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterRegionTrafficQosQueue)(nil)).Elem()
}

func (i InterRegionTrafficQosQueueArray) ToInterRegionTrafficQosQueueArrayOutput() InterRegionTrafficQosQueueArrayOutput {
	return i.ToInterRegionTrafficQosQueueArrayOutputWithContext(context.Background())
}

func (i InterRegionTrafficQosQueueArray) ToInterRegionTrafficQosQueueArrayOutputWithContext(ctx context.Context) InterRegionTrafficQosQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterRegionTrafficQosQueueArrayOutput)
}

// InterRegionTrafficQosQueueMapInput is an input type that accepts InterRegionTrafficQosQueueMap and InterRegionTrafficQosQueueMapOutput values.
// You can construct a concrete instance of `InterRegionTrafficQosQueueMapInput` via:
//
//	InterRegionTrafficQosQueueMap{ "key": InterRegionTrafficQosQueueArgs{...} }
type InterRegionTrafficQosQueueMapInput interface {
	pulumi.Input

	ToInterRegionTrafficQosQueueMapOutput() InterRegionTrafficQosQueueMapOutput
	ToInterRegionTrafficQosQueueMapOutputWithContext(context.Context) InterRegionTrafficQosQueueMapOutput
}

type InterRegionTrafficQosQueueMap map[string]InterRegionTrafficQosQueueInput

func (InterRegionTrafficQosQueueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterRegionTrafficQosQueue)(nil)).Elem()
}

func (i InterRegionTrafficQosQueueMap) ToInterRegionTrafficQosQueueMapOutput() InterRegionTrafficQosQueueMapOutput {
	return i.ToInterRegionTrafficQosQueueMapOutputWithContext(context.Background())
}

func (i InterRegionTrafficQosQueueMap) ToInterRegionTrafficQosQueueMapOutputWithContext(ctx context.Context) InterRegionTrafficQosQueueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterRegionTrafficQosQueueMapOutput)
}

type InterRegionTrafficQosQueueOutput struct{ *pulumi.OutputState }

func (InterRegionTrafficQosQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterRegionTrafficQosQueue)(nil)).Elem()
}

func (o InterRegionTrafficQosQueueOutput) ToInterRegionTrafficQosQueueOutput() InterRegionTrafficQosQueueOutput {
	return o
}

func (o InterRegionTrafficQosQueueOutput) ToInterRegionTrafficQosQueueOutputWithContext(ctx context.Context) InterRegionTrafficQosQueueOutput {
	return o
}

// The guaranteed bandwidth value. If guaranteed by bandwidth is selected for TrafficQosPolicy, this value is valid.
func (o InterRegionTrafficQosQueueOutput) Bandwidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterRegionTrafficQosQueue) pulumi.StringPtrOutput { return v.Bandwidth }).(pulumi.StringPtrOutput)
}

// The DSCP value of the traffic packet to be matched in the current queue, ranging from 0 to 63.
func (o InterRegionTrafficQosQueueOutput) Dscps() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *InterRegionTrafficQosQueue) pulumi.IntArrayOutput { return v.Dscps }).(pulumi.IntArrayOutput)
}

// The description information of the traffic scheduling policy.
func (o InterRegionTrafficQosQueueOutput) InterRegionTrafficQosQueueDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterRegionTrafficQosQueue) pulumi.StringPtrOutput {
		return v.InterRegionTrafficQosQueueDescription
	}).(pulumi.StringPtrOutput)
}

// The name of the traffic scheduling policy.
func (o InterRegionTrafficQosQueueOutput) InterRegionTrafficQosQueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterRegionTrafficQosQueue) pulumi.StringPtrOutput { return v.InterRegionTrafficQosQueueName }).(pulumi.StringPtrOutput)
}

// The percentage of cross-region bandwidth that the current queue can use.
func (o InterRegionTrafficQosQueueOutput) RemainBandwidthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterRegionTrafficQosQueue) pulumi.IntPtrOutput { return v.RemainBandwidthPercent }).(pulumi.IntPtrOutput)
}

// The status of the traffic scheduling policy.
func (o InterRegionTrafficQosQueueOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *InterRegionTrafficQosQueue) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The ID of the traffic scheduling policy.
func (o InterRegionTrafficQosQueueOutput) TrafficQosPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *InterRegionTrafficQosQueue) pulumi.StringOutput { return v.TrafficQosPolicyId }).(pulumi.StringOutput)
}

type InterRegionTrafficQosQueueArrayOutput struct{ *pulumi.OutputState }

func (InterRegionTrafficQosQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterRegionTrafficQosQueue)(nil)).Elem()
}

func (o InterRegionTrafficQosQueueArrayOutput) ToInterRegionTrafficQosQueueArrayOutput() InterRegionTrafficQosQueueArrayOutput {
	return o
}

func (o InterRegionTrafficQosQueueArrayOutput) ToInterRegionTrafficQosQueueArrayOutputWithContext(ctx context.Context) InterRegionTrafficQosQueueArrayOutput {
	return o
}

func (o InterRegionTrafficQosQueueArrayOutput) Index(i pulumi.IntInput) InterRegionTrafficQosQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterRegionTrafficQosQueue {
		return vs[0].([]*InterRegionTrafficQosQueue)[vs[1].(int)]
	}).(InterRegionTrafficQosQueueOutput)
}

type InterRegionTrafficQosQueueMapOutput struct{ *pulumi.OutputState }

func (InterRegionTrafficQosQueueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterRegionTrafficQosQueue)(nil)).Elem()
}

func (o InterRegionTrafficQosQueueMapOutput) ToInterRegionTrafficQosQueueMapOutput() InterRegionTrafficQosQueueMapOutput {
	return o
}

func (o InterRegionTrafficQosQueueMapOutput) ToInterRegionTrafficQosQueueMapOutputWithContext(ctx context.Context) InterRegionTrafficQosQueueMapOutput {
	return o
}

func (o InterRegionTrafficQosQueueMapOutput) MapIndex(k pulumi.StringInput) InterRegionTrafficQosQueueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterRegionTrafficQosQueue {
		return vs[0].(map[string]*InterRegionTrafficQosQueue)[vs[1].(string)]
	}).(InterRegionTrafficQosQueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterRegionTrafficQosQueueInput)(nil)).Elem(), &InterRegionTrafficQosQueue{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterRegionTrafficQosQueueArrayInput)(nil)).Elem(), InterRegionTrafficQosQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterRegionTrafficQosQueueMapInput)(nil)).Elem(), InterRegionTrafficQosQueueMap{})
	pulumi.RegisterOutputType(InterRegionTrafficQosQueueOutput{})
	pulumi.RegisterOutputType(InterRegionTrafficQosQueueArrayOutput{})
	pulumi.RegisterOutputType(InterRegionTrafficQosQueueMapOutput{})
}
