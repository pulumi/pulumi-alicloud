// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GetBandwidthLimitsLimit struct {
	// The bandwidth limit configured for the interconnected regions communication.
	BandwidthLimit int `pulumi:"bandwidthLimit"`
	// ID of the CEN instance.
	InstanceId string `pulumi:"instanceId"`
	// ID of local region.
	LocalRegionId string `pulumi:"localRegionId"`
	// ID of opposite region.
	OppositeRegionId string `pulumi:"oppositeRegionId"`
	// Status of the CEN Bandwidth Limit, including "Active" and "Modifying".
	Status string `pulumi:"status"`
}

// GetBandwidthLimitsLimitInput is an input type that accepts GetBandwidthLimitsLimitArgs and GetBandwidthLimitsLimitOutput values.
// You can construct a concrete instance of `GetBandwidthLimitsLimitInput` via:
//
// 		 GetBandwidthLimitsLimitArgs{...}
//
type GetBandwidthLimitsLimitInput interface {
	pulumi.Input

	ToGetBandwidthLimitsLimitOutput() GetBandwidthLimitsLimitOutput
	ToGetBandwidthLimitsLimitOutputWithContext(context.Context) GetBandwidthLimitsLimitOutput
}

type GetBandwidthLimitsLimitArgs struct {
	// The bandwidth limit configured for the interconnected regions communication.
	BandwidthLimit pulumi.IntInput `pulumi:"bandwidthLimit"`
	// ID of the CEN instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// ID of local region.
	LocalRegionId pulumi.StringInput `pulumi:"localRegionId"`
	// ID of opposite region.
	OppositeRegionId pulumi.StringInput `pulumi:"oppositeRegionId"`
	// Status of the CEN Bandwidth Limit, including "Active" and "Modifying".
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetBandwidthLimitsLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthLimitsLimit)(nil)).Elem()
}

func (i GetBandwidthLimitsLimitArgs) ToGetBandwidthLimitsLimitOutput() GetBandwidthLimitsLimitOutput {
	return i.ToGetBandwidthLimitsLimitOutputWithContext(context.Background())
}

func (i GetBandwidthLimitsLimitArgs) ToGetBandwidthLimitsLimitOutputWithContext(ctx context.Context) GetBandwidthLimitsLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthLimitsLimitOutput)
}

// GetBandwidthLimitsLimitArrayInput is an input type that accepts GetBandwidthLimitsLimitArray and GetBandwidthLimitsLimitArrayOutput values.
// You can construct a concrete instance of `GetBandwidthLimitsLimitArrayInput` via:
//
// 		 GetBandwidthLimitsLimitArray{ GetBandwidthLimitsLimitArgs{...} }
//
type GetBandwidthLimitsLimitArrayInput interface {
	pulumi.Input

	ToGetBandwidthLimitsLimitArrayOutput() GetBandwidthLimitsLimitArrayOutput
	ToGetBandwidthLimitsLimitArrayOutputWithContext(context.Context) GetBandwidthLimitsLimitArrayOutput
}

type GetBandwidthLimitsLimitArray []GetBandwidthLimitsLimitInput

func (GetBandwidthLimitsLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthLimitsLimit)(nil)).Elem()
}

func (i GetBandwidthLimitsLimitArray) ToGetBandwidthLimitsLimitArrayOutput() GetBandwidthLimitsLimitArrayOutput {
	return i.ToGetBandwidthLimitsLimitArrayOutputWithContext(context.Background())
}

func (i GetBandwidthLimitsLimitArray) ToGetBandwidthLimitsLimitArrayOutputWithContext(ctx context.Context) GetBandwidthLimitsLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthLimitsLimitArrayOutput)
}

type GetBandwidthLimitsLimitOutput struct{ *pulumi.OutputState }

func (GetBandwidthLimitsLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthLimitsLimit)(nil)).Elem()
}

func (o GetBandwidthLimitsLimitOutput) ToGetBandwidthLimitsLimitOutput() GetBandwidthLimitsLimitOutput {
	return o
}

func (o GetBandwidthLimitsLimitOutput) ToGetBandwidthLimitsLimitOutputWithContext(ctx context.Context) GetBandwidthLimitsLimitOutput {
	return o
}

// The bandwidth limit configured for the interconnected regions communication.
func (o GetBandwidthLimitsLimitOutput) BandwidthLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetBandwidthLimitsLimit) int { return v.BandwidthLimit }).(pulumi.IntOutput)
}

// ID of the CEN instance.
func (o GetBandwidthLimitsLimitOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthLimitsLimit) string { return v.InstanceId }).(pulumi.StringOutput)
}

// ID of local region.
func (o GetBandwidthLimitsLimitOutput) LocalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthLimitsLimit) string { return v.LocalRegionId }).(pulumi.StringOutput)
}

// ID of opposite region.
func (o GetBandwidthLimitsLimitOutput) OppositeRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthLimitsLimit) string { return v.OppositeRegionId }).(pulumi.StringOutput)
}

// Status of the CEN Bandwidth Limit, including "Active" and "Modifying".
func (o GetBandwidthLimitsLimitOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthLimitsLimit) string { return v.Status }).(pulumi.StringOutput)
}

type GetBandwidthLimitsLimitArrayOutput struct{ *pulumi.OutputState }

func (GetBandwidthLimitsLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthLimitsLimit)(nil)).Elem()
}

func (o GetBandwidthLimitsLimitArrayOutput) ToGetBandwidthLimitsLimitArrayOutput() GetBandwidthLimitsLimitArrayOutput {
	return o
}

func (o GetBandwidthLimitsLimitArrayOutput) ToGetBandwidthLimitsLimitArrayOutputWithContext(ctx context.Context) GetBandwidthLimitsLimitArrayOutput {
	return o
}

func (o GetBandwidthLimitsLimitArrayOutput) Index(i pulumi.IntInput) GetBandwidthLimitsLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBandwidthLimitsLimit {
		return vs[0].([]GetBandwidthLimitsLimit)[vs[1].(int)]
	}).(GetBandwidthLimitsLimitOutput)
}

type GetBandwidthPackagesPackage struct {
	// The bandwidth in Mbps of the CEN bandwidth package.
	Bandwidth int `pulumi:"bandwidth"`
	// The billing method, including "POSTPAY" and "PREPAY".
	BandwidthPackageChargeType string `pulumi:"bandwidthPackageChargeType"`
	// Status of the CEN Bandwidth Package, including "Normal", "FinancialLocked" and "SecurityLocked".
	BusinessStatus string `pulumi:"businessStatus"`
	// Creation time of the CEN bandwidth package.
	CreationTime string `pulumi:"creationTime"`
	// Description of the CEN Bandwidth Package.
	Description string `pulumi:"description"`
	// Region ID of the interconnected regions.
	GeographicRegionAId string `pulumi:"geographicRegionAId"`
	// Region ID of the interconnected regions.
	GeographicRegionBId string `pulumi:"geographicRegionBId"`
	// ID of the CEN Bandwidth Package.
	Id string `pulumi:"id"`
	// ID of a CEN instance.
	InstanceId string `pulumi:"instanceId"`
	// Name of the CEN Bandwidth Package.
	Name string `pulumi:"name"`
	// Status of the CEN Bandwidth Package in CEN instance, including "Idle" and "InUse".
	Status string `pulumi:"status"`
}

// GetBandwidthPackagesPackageInput is an input type that accepts GetBandwidthPackagesPackageArgs and GetBandwidthPackagesPackageOutput values.
// You can construct a concrete instance of `GetBandwidthPackagesPackageInput` via:
//
// 		 GetBandwidthPackagesPackageArgs{...}
//
type GetBandwidthPackagesPackageInput interface {
	pulumi.Input

	ToGetBandwidthPackagesPackageOutput() GetBandwidthPackagesPackageOutput
	ToGetBandwidthPackagesPackageOutputWithContext(context.Context) GetBandwidthPackagesPackageOutput
}

type GetBandwidthPackagesPackageArgs struct {
	// The bandwidth in Mbps of the CEN bandwidth package.
	Bandwidth pulumi.IntInput `pulumi:"bandwidth"`
	// The billing method, including "POSTPAY" and "PREPAY".
	BandwidthPackageChargeType pulumi.StringInput `pulumi:"bandwidthPackageChargeType"`
	// Status of the CEN Bandwidth Package, including "Normal", "FinancialLocked" and "SecurityLocked".
	BusinessStatus pulumi.StringInput `pulumi:"businessStatus"`
	// Creation time of the CEN bandwidth package.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// Description of the CEN Bandwidth Package.
	Description pulumi.StringInput `pulumi:"description"`
	// Region ID of the interconnected regions.
	GeographicRegionAId pulumi.StringInput `pulumi:"geographicRegionAId"`
	// Region ID of the interconnected regions.
	GeographicRegionBId pulumi.StringInput `pulumi:"geographicRegionBId"`
	// ID of the CEN Bandwidth Package.
	Id pulumi.StringInput `pulumi:"id"`
	// ID of a CEN instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Name of the CEN Bandwidth Package.
	Name pulumi.StringInput `pulumi:"name"`
	// Status of the CEN Bandwidth Package in CEN instance, including "Idle" and "InUse".
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetBandwidthPackagesPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthPackagesPackage)(nil)).Elem()
}

func (i GetBandwidthPackagesPackageArgs) ToGetBandwidthPackagesPackageOutput() GetBandwidthPackagesPackageOutput {
	return i.ToGetBandwidthPackagesPackageOutputWithContext(context.Background())
}

func (i GetBandwidthPackagesPackageArgs) ToGetBandwidthPackagesPackageOutputWithContext(ctx context.Context) GetBandwidthPackagesPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthPackagesPackageOutput)
}

// GetBandwidthPackagesPackageArrayInput is an input type that accepts GetBandwidthPackagesPackageArray and GetBandwidthPackagesPackageArrayOutput values.
// You can construct a concrete instance of `GetBandwidthPackagesPackageArrayInput` via:
//
// 		 GetBandwidthPackagesPackageArray{ GetBandwidthPackagesPackageArgs{...} }
//
type GetBandwidthPackagesPackageArrayInput interface {
	pulumi.Input

	ToGetBandwidthPackagesPackageArrayOutput() GetBandwidthPackagesPackageArrayOutput
	ToGetBandwidthPackagesPackageArrayOutputWithContext(context.Context) GetBandwidthPackagesPackageArrayOutput
}

type GetBandwidthPackagesPackageArray []GetBandwidthPackagesPackageInput

func (GetBandwidthPackagesPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthPackagesPackage)(nil)).Elem()
}

func (i GetBandwidthPackagesPackageArray) ToGetBandwidthPackagesPackageArrayOutput() GetBandwidthPackagesPackageArrayOutput {
	return i.ToGetBandwidthPackagesPackageArrayOutputWithContext(context.Background())
}

func (i GetBandwidthPackagesPackageArray) ToGetBandwidthPackagesPackageArrayOutputWithContext(ctx context.Context) GetBandwidthPackagesPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthPackagesPackageArrayOutput)
}

type GetBandwidthPackagesPackageOutput struct{ *pulumi.OutputState }

func (GetBandwidthPackagesPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthPackagesPackage)(nil)).Elem()
}

func (o GetBandwidthPackagesPackageOutput) ToGetBandwidthPackagesPackageOutput() GetBandwidthPackagesPackageOutput {
	return o
}

func (o GetBandwidthPackagesPackageOutput) ToGetBandwidthPackagesPackageOutputWithContext(ctx context.Context) GetBandwidthPackagesPackageOutput {
	return o
}

// The bandwidth in Mbps of the CEN bandwidth package.
func (o GetBandwidthPackagesPackageOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// The billing method, including "POSTPAY" and "PREPAY".
func (o GetBandwidthPackagesPackageOutput) BandwidthPackageChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.BandwidthPackageChargeType }).(pulumi.StringOutput)
}

// Status of the CEN Bandwidth Package, including "Normal", "FinancialLocked" and "SecurityLocked".
func (o GetBandwidthPackagesPackageOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.BusinessStatus }).(pulumi.StringOutput)
}

// Creation time of the CEN bandwidth package.
func (o GetBandwidthPackagesPackageOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.CreationTime }).(pulumi.StringOutput)
}

// Description of the CEN Bandwidth Package.
func (o GetBandwidthPackagesPackageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.Description }).(pulumi.StringOutput)
}

// Region ID of the interconnected regions.
func (o GetBandwidthPackagesPackageOutput) GeographicRegionAId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.GeographicRegionAId }).(pulumi.StringOutput)
}

// Region ID of the interconnected regions.
func (o GetBandwidthPackagesPackageOutput) GeographicRegionBId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.GeographicRegionBId }).(pulumi.StringOutput)
}

// ID of the CEN Bandwidth Package.
func (o GetBandwidthPackagesPackageOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.Id }).(pulumi.StringOutput)
}

// ID of a CEN instance.
func (o GetBandwidthPackagesPackageOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Name of the CEN Bandwidth Package.
func (o GetBandwidthPackagesPackageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.Name }).(pulumi.StringOutput)
}

// Status of the CEN Bandwidth Package in CEN instance, including "Idle" and "InUse".
func (o GetBandwidthPackagesPackageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.Status }).(pulumi.StringOutput)
}

type GetBandwidthPackagesPackageArrayOutput struct{ *pulumi.OutputState }

func (GetBandwidthPackagesPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthPackagesPackage)(nil)).Elem()
}

func (o GetBandwidthPackagesPackageArrayOutput) ToGetBandwidthPackagesPackageArrayOutput() GetBandwidthPackagesPackageArrayOutput {
	return o
}

func (o GetBandwidthPackagesPackageArrayOutput) ToGetBandwidthPackagesPackageArrayOutputWithContext(ctx context.Context) GetBandwidthPackagesPackageArrayOutput {
	return o
}

func (o GetBandwidthPackagesPackageArrayOutput) Index(i pulumi.IntInput) GetBandwidthPackagesPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBandwidthPackagesPackage {
		return vs[0].([]GetBandwidthPackagesPackage)[vs[1].(int)]
	}).(GetBandwidthPackagesPackageOutput)
}

type GetFlowlogsFlowlog struct {
	// The ID of the CEN Instance.
	CenId string `pulumi:"cenId"`
	// The description of flowlog.
	Description string `pulumi:"description"`
	// ID of the CEN flow log.
	FlowLogId string `pulumi:"flowLogId"`
	// The name of flowlog.
	FlowLogName string `pulumi:"flowLogName"`
	// ID of the CEN flow log.
	Id string `pulumi:"id"`
	// The name of the log store which is in the  `projectName` SLS project.
	LogStoreName string `pulumi:"logStoreName"`
	// The name of the SLS project.
	ProjectName string `pulumi:"projectName"`
	// The status of flowlog. Valid values: ["Active", "Inactive"]. Default to "Active".
	Status string `pulumi:"status"`
}

// GetFlowlogsFlowlogInput is an input type that accepts GetFlowlogsFlowlogArgs and GetFlowlogsFlowlogOutput values.
// You can construct a concrete instance of `GetFlowlogsFlowlogInput` via:
//
// 		 GetFlowlogsFlowlogArgs{...}
//
type GetFlowlogsFlowlogInput interface {
	pulumi.Input

	ToGetFlowlogsFlowlogOutput() GetFlowlogsFlowlogOutput
	ToGetFlowlogsFlowlogOutputWithContext(context.Context) GetFlowlogsFlowlogOutput
}

type GetFlowlogsFlowlogArgs struct {
	// The ID of the CEN Instance.
	CenId pulumi.StringInput `pulumi:"cenId"`
	// The description of flowlog.
	Description pulumi.StringInput `pulumi:"description"`
	// ID of the CEN flow log.
	FlowLogId pulumi.StringInput `pulumi:"flowLogId"`
	// The name of flowlog.
	FlowLogName pulumi.StringInput `pulumi:"flowLogName"`
	// ID of the CEN flow log.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the log store which is in the  `projectName` SLS project.
	LogStoreName pulumi.StringInput `pulumi:"logStoreName"`
	// The name of the SLS project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The status of flowlog. Valid values: ["Active", "Inactive"]. Default to "Active".
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetFlowlogsFlowlogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlowlogsFlowlog)(nil)).Elem()
}

func (i GetFlowlogsFlowlogArgs) ToGetFlowlogsFlowlogOutput() GetFlowlogsFlowlogOutput {
	return i.ToGetFlowlogsFlowlogOutputWithContext(context.Background())
}

func (i GetFlowlogsFlowlogArgs) ToGetFlowlogsFlowlogOutputWithContext(ctx context.Context) GetFlowlogsFlowlogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlowlogsFlowlogOutput)
}

// GetFlowlogsFlowlogArrayInput is an input type that accepts GetFlowlogsFlowlogArray and GetFlowlogsFlowlogArrayOutput values.
// You can construct a concrete instance of `GetFlowlogsFlowlogArrayInput` via:
//
// 		 GetFlowlogsFlowlogArray{ GetFlowlogsFlowlogArgs{...} }
//
type GetFlowlogsFlowlogArrayInput interface {
	pulumi.Input

	ToGetFlowlogsFlowlogArrayOutput() GetFlowlogsFlowlogArrayOutput
	ToGetFlowlogsFlowlogArrayOutputWithContext(context.Context) GetFlowlogsFlowlogArrayOutput
}

type GetFlowlogsFlowlogArray []GetFlowlogsFlowlogInput

func (GetFlowlogsFlowlogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlowlogsFlowlog)(nil)).Elem()
}

func (i GetFlowlogsFlowlogArray) ToGetFlowlogsFlowlogArrayOutput() GetFlowlogsFlowlogArrayOutput {
	return i.ToGetFlowlogsFlowlogArrayOutputWithContext(context.Background())
}

func (i GetFlowlogsFlowlogArray) ToGetFlowlogsFlowlogArrayOutputWithContext(ctx context.Context) GetFlowlogsFlowlogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlowlogsFlowlogArrayOutput)
}

type GetFlowlogsFlowlogOutput struct{ *pulumi.OutputState }

func (GetFlowlogsFlowlogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlowlogsFlowlog)(nil)).Elem()
}

func (o GetFlowlogsFlowlogOutput) ToGetFlowlogsFlowlogOutput() GetFlowlogsFlowlogOutput {
	return o
}

func (o GetFlowlogsFlowlogOutput) ToGetFlowlogsFlowlogOutputWithContext(ctx context.Context) GetFlowlogsFlowlogOutput {
	return o
}

// The ID of the CEN Instance.
func (o GetFlowlogsFlowlogOutput) CenId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.CenId }).(pulumi.StringOutput)
}

// The description of flowlog.
func (o GetFlowlogsFlowlogOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.Description }).(pulumi.StringOutput)
}

// ID of the CEN flow log.
func (o GetFlowlogsFlowlogOutput) FlowLogId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.FlowLogId }).(pulumi.StringOutput)
}

// The name of flowlog.
func (o GetFlowlogsFlowlogOutput) FlowLogName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.FlowLogName }).(pulumi.StringOutput)
}

// ID of the CEN flow log.
func (o GetFlowlogsFlowlogOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the log store which is in the  `projectName` SLS project.
func (o GetFlowlogsFlowlogOutput) LogStoreName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.LogStoreName }).(pulumi.StringOutput)
}

// The name of the SLS project.
func (o GetFlowlogsFlowlogOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The status of flowlog. Valid values: ["Active", "Inactive"]. Default to "Active".
func (o GetFlowlogsFlowlogOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.Status }).(pulumi.StringOutput)
}

type GetFlowlogsFlowlogArrayOutput struct{ *pulumi.OutputState }

func (GetFlowlogsFlowlogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlowlogsFlowlog)(nil)).Elem()
}

func (o GetFlowlogsFlowlogArrayOutput) ToGetFlowlogsFlowlogArrayOutput() GetFlowlogsFlowlogArrayOutput {
	return o
}

func (o GetFlowlogsFlowlogArrayOutput) ToGetFlowlogsFlowlogArrayOutputWithContext(ctx context.Context) GetFlowlogsFlowlogArrayOutput {
	return o
}

func (o GetFlowlogsFlowlogArrayOutput) Index(i pulumi.IntInput) GetFlowlogsFlowlogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlowlogsFlowlog {
		return vs[0].([]GetFlowlogsFlowlog)[vs[1].(int)]
	}).(GetFlowlogsFlowlogOutput)
}

type GetInstancesInstance struct {
	// List of CEN Bandwidth Package IDs in the specified CEN instance.
	CenBandwidthPackageIds []string `pulumi:"cenBandwidthPackageIds"`
	// ID of the CEN instance.
	CenId string `pulumi:"cenId"`
	// Description of the CEN instance.
	Description string `pulumi:"description"`
	// ID of the CEN instance.
	Id string `pulumi:"id"`
	// Name of the CEN instance.
	Name string `pulumi:"name"`
	// Indicates the allowed level of CIDR block overlapping.
	ProtectionLevel string `pulumi:"protectionLevel"`
	// Status of the CEN instance, including "Creating", "Active" and "Deleting".
	Status string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
}

// GetInstancesInstanceInput is an input type that accepts GetInstancesInstanceArgs and GetInstancesInstanceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceInput` via:
//
// 		 GetInstancesInstanceArgs{...}
//
type GetInstancesInstanceInput interface {
	pulumi.Input

	ToGetInstancesInstanceOutput() GetInstancesInstanceOutput
	ToGetInstancesInstanceOutputWithContext(context.Context) GetInstancesInstanceOutput
}

type GetInstancesInstanceArgs struct {
	// List of CEN Bandwidth Package IDs in the specified CEN instance.
	CenBandwidthPackageIds pulumi.StringArrayInput `pulumi:"cenBandwidthPackageIds"`
	// ID of the CEN instance.
	CenId pulumi.StringInput `pulumi:"cenId"`
	// Description of the CEN instance.
	Description pulumi.StringInput `pulumi:"description"`
	// ID of the CEN instance.
	Id pulumi.StringInput `pulumi:"id"`
	// Name of the CEN instance.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates the allowed level of CIDR block overlapping.
	ProtectionLevel pulumi.StringInput `pulumi:"protectionLevel"`
	// Status of the CEN instance, including "Creating", "Active" and "Deleting".
	Status pulumi.StringInput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

func (GetInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return i.ToGetInstancesInstanceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceOutput)
}

// GetInstancesInstanceArrayInput is an input type that accepts GetInstancesInstanceArray and GetInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceArrayInput` via:
//
// 		 GetInstancesInstanceArray{ GetInstancesInstanceArgs{...} }
//
type GetInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput
	ToGetInstancesInstanceArrayOutputWithContext(context.Context) GetInstancesInstanceArrayOutput
}

type GetInstancesInstanceArray []GetInstancesInstanceInput

func (GetInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return i.ToGetInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceArrayOutput)
}

type GetInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return o
}

// List of CEN Bandwidth Package IDs in the specified CEN instance.
func (o GetInstancesInstanceOutput) CenBandwidthPackageIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []string { return v.CenBandwidthPackageIds }).(pulumi.StringArrayOutput)
}

// ID of the CEN instance.
func (o GetInstancesInstanceOutput) CenId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CenId }).(pulumi.StringOutput)
}

// Description of the CEN instance.
func (o GetInstancesInstanceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Description }).(pulumi.StringOutput)
}

// ID of the CEN instance.
func (o GetInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the CEN instance.
func (o GetInstancesInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates the allowed level of CIDR block overlapping.
func (o GetInstancesInstanceOutput) ProtectionLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ProtectionLevel }).(pulumi.StringOutput)
}

// Status of the CEN instance, including "Creating", "Active" and "Deleting".
func (o GetInstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o GetInstancesInstanceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetInstancesInstance) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

type GetInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstance {
		return vs[0].([]GetInstancesInstance)[vs[1].(int)]
	}).(GetInstancesInstanceOutput)
}

type GetRegionRouteEntriesEntry struct {
	// The destination CIDR block of the route entry.
	CidrBlock string `pulumi:"cidrBlock"`
	// ID of the next hop.
	NextHopId string `pulumi:"nextHopId"`
	// ID of the region where the next hop is located.
	NextHopRegionId string `pulumi:"nextHopRegionId"`
	// Type of the next hop.
	NextHopType string `pulumi:"nextHopType"`
	// Type of the route entry.
	Type string `pulumi:"type"`
}

// GetRegionRouteEntriesEntryInput is an input type that accepts GetRegionRouteEntriesEntryArgs and GetRegionRouteEntriesEntryOutput values.
// You can construct a concrete instance of `GetRegionRouteEntriesEntryInput` via:
//
// 		 GetRegionRouteEntriesEntryArgs{...}
//
type GetRegionRouteEntriesEntryInput interface {
	pulumi.Input

	ToGetRegionRouteEntriesEntryOutput() GetRegionRouteEntriesEntryOutput
	ToGetRegionRouteEntriesEntryOutputWithContext(context.Context) GetRegionRouteEntriesEntryOutput
}

type GetRegionRouteEntriesEntryArgs struct {
	// The destination CIDR block of the route entry.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// ID of the next hop.
	NextHopId pulumi.StringInput `pulumi:"nextHopId"`
	// ID of the region where the next hop is located.
	NextHopRegionId pulumi.StringInput `pulumi:"nextHopRegionId"`
	// Type of the next hop.
	NextHopType pulumi.StringInput `pulumi:"nextHopType"`
	// Type of the route entry.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetRegionRouteEntriesEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionRouteEntriesEntry)(nil)).Elem()
}

func (i GetRegionRouteEntriesEntryArgs) ToGetRegionRouteEntriesEntryOutput() GetRegionRouteEntriesEntryOutput {
	return i.ToGetRegionRouteEntriesEntryOutputWithContext(context.Background())
}

func (i GetRegionRouteEntriesEntryArgs) ToGetRegionRouteEntriesEntryOutputWithContext(ctx context.Context) GetRegionRouteEntriesEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionRouteEntriesEntryOutput)
}

// GetRegionRouteEntriesEntryArrayInput is an input type that accepts GetRegionRouteEntriesEntryArray and GetRegionRouteEntriesEntryArrayOutput values.
// You can construct a concrete instance of `GetRegionRouteEntriesEntryArrayInput` via:
//
// 		 GetRegionRouteEntriesEntryArray{ GetRegionRouteEntriesEntryArgs{...} }
//
type GetRegionRouteEntriesEntryArrayInput interface {
	pulumi.Input

	ToGetRegionRouteEntriesEntryArrayOutput() GetRegionRouteEntriesEntryArrayOutput
	ToGetRegionRouteEntriesEntryArrayOutputWithContext(context.Context) GetRegionRouteEntriesEntryArrayOutput
}

type GetRegionRouteEntriesEntryArray []GetRegionRouteEntriesEntryInput

func (GetRegionRouteEntriesEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionRouteEntriesEntry)(nil)).Elem()
}

func (i GetRegionRouteEntriesEntryArray) ToGetRegionRouteEntriesEntryArrayOutput() GetRegionRouteEntriesEntryArrayOutput {
	return i.ToGetRegionRouteEntriesEntryArrayOutputWithContext(context.Background())
}

func (i GetRegionRouteEntriesEntryArray) ToGetRegionRouteEntriesEntryArrayOutputWithContext(ctx context.Context) GetRegionRouteEntriesEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionRouteEntriesEntryArrayOutput)
}

type GetRegionRouteEntriesEntryOutput struct{ *pulumi.OutputState }

func (GetRegionRouteEntriesEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionRouteEntriesEntry)(nil)).Elem()
}

func (o GetRegionRouteEntriesEntryOutput) ToGetRegionRouteEntriesEntryOutput() GetRegionRouteEntriesEntryOutput {
	return o
}

func (o GetRegionRouteEntriesEntryOutput) ToGetRegionRouteEntriesEntryOutputWithContext(ctx context.Context) GetRegionRouteEntriesEntryOutput {
	return o
}

// The destination CIDR block of the route entry.
func (o GetRegionRouteEntriesEntryOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRouteEntriesEntry) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// ID of the next hop.
func (o GetRegionRouteEntriesEntryOutput) NextHopId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRouteEntriesEntry) string { return v.NextHopId }).(pulumi.StringOutput)
}

// ID of the region where the next hop is located.
func (o GetRegionRouteEntriesEntryOutput) NextHopRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRouteEntriesEntry) string { return v.NextHopRegionId }).(pulumi.StringOutput)
}

// Type of the next hop.
func (o GetRegionRouteEntriesEntryOutput) NextHopType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRouteEntriesEntry) string { return v.NextHopType }).(pulumi.StringOutput)
}

// Type of the route entry.
func (o GetRegionRouteEntriesEntryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRouteEntriesEntry) string { return v.Type }).(pulumi.StringOutput)
}

type GetRegionRouteEntriesEntryArrayOutput struct{ *pulumi.OutputState }

func (GetRegionRouteEntriesEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionRouteEntriesEntry)(nil)).Elem()
}

func (o GetRegionRouteEntriesEntryArrayOutput) ToGetRegionRouteEntriesEntryArrayOutput() GetRegionRouteEntriesEntryArrayOutput {
	return o
}

func (o GetRegionRouteEntriesEntryArrayOutput) ToGetRegionRouteEntriesEntryArrayOutputWithContext(ctx context.Context) GetRegionRouteEntriesEntryArrayOutput {
	return o
}

func (o GetRegionRouteEntriesEntryArrayOutput) Index(i pulumi.IntInput) GetRegionRouteEntriesEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionRouteEntriesEntry {
		return vs[0].([]GetRegionRouteEntriesEntry)[vs[1].(int)]
	}).(GetRegionRouteEntriesEntryOutput)
}

type GetRouteEntriesEntry struct {
	// The destination CIDR block of the route entry to query.
	CidrBlock string `pulumi:"cidrBlock"`
	// A list of conflicted Route Entries. Each element contains the following attributes:
	Conflicts []GetRouteEntriesEntryConflict `pulumi:"conflicts"`
	// ID of the next hop.
	NextHopId string `pulumi:"nextHopId"`
	// Type of the next hop, including "Instance", "HaVip" and "RouterInterface".
	NextHopType string `pulumi:"nextHopType"`
	// Whether to allow the route entry to be published or removed to or from CEN.
	OperationalMode bool `pulumi:"operationalMode"`
	// The publish status of the route entry in CEN, including "Published" and "NonPublished".
	PublishStatus string `pulumi:"publishStatus"`
	// ID of the route table of the VPC or VBR.
	RouteTableId string `pulumi:"routeTableId"`
	// Type of the route entry, including "System", "Custom" and "BGP".
	RouteType string `pulumi:"routeType"`
}

// GetRouteEntriesEntryInput is an input type that accepts GetRouteEntriesEntryArgs and GetRouteEntriesEntryOutput values.
// You can construct a concrete instance of `GetRouteEntriesEntryInput` via:
//
// 		 GetRouteEntriesEntryArgs{...}
//
type GetRouteEntriesEntryInput interface {
	pulumi.Input

	ToGetRouteEntriesEntryOutput() GetRouteEntriesEntryOutput
	ToGetRouteEntriesEntryOutputWithContext(context.Context) GetRouteEntriesEntryOutput
}

type GetRouteEntriesEntryArgs struct {
	// The destination CIDR block of the route entry to query.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// A list of conflicted Route Entries. Each element contains the following attributes:
	Conflicts GetRouteEntriesEntryConflictArrayInput `pulumi:"conflicts"`
	// ID of the next hop.
	NextHopId pulumi.StringInput `pulumi:"nextHopId"`
	// Type of the next hop, including "Instance", "HaVip" and "RouterInterface".
	NextHopType pulumi.StringInput `pulumi:"nextHopType"`
	// Whether to allow the route entry to be published or removed to or from CEN.
	OperationalMode pulumi.BoolInput `pulumi:"operationalMode"`
	// The publish status of the route entry in CEN, including "Published" and "NonPublished".
	PublishStatus pulumi.StringInput `pulumi:"publishStatus"`
	// ID of the route table of the VPC or VBR.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// Type of the route entry, including "System", "Custom" and "BGP".
	RouteType pulumi.StringInput `pulumi:"routeType"`
}

func (GetRouteEntriesEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteEntriesEntry)(nil)).Elem()
}

func (i GetRouteEntriesEntryArgs) ToGetRouteEntriesEntryOutput() GetRouteEntriesEntryOutput {
	return i.ToGetRouteEntriesEntryOutputWithContext(context.Background())
}

func (i GetRouteEntriesEntryArgs) ToGetRouteEntriesEntryOutputWithContext(ctx context.Context) GetRouteEntriesEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteEntriesEntryOutput)
}

// GetRouteEntriesEntryArrayInput is an input type that accepts GetRouteEntriesEntryArray and GetRouteEntriesEntryArrayOutput values.
// You can construct a concrete instance of `GetRouteEntriesEntryArrayInput` via:
//
// 		 GetRouteEntriesEntryArray{ GetRouteEntriesEntryArgs{...} }
//
type GetRouteEntriesEntryArrayInput interface {
	pulumi.Input

	ToGetRouteEntriesEntryArrayOutput() GetRouteEntriesEntryArrayOutput
	ToGetRouteEntriesEntryArrayOutputWithContext(context.Context) GetRouteEntriesEntryArrayOutput
}

type GetRouteEntriesEntryArray []GetRouteEntriesEntryInput

func (GetRouteEntriesEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteEntriesEntry)(nil)).Elem()
}

func (i GetRouteEntriesEntryArray) ToGetRouteEntriesEntryArrayOutput() GetRouteEntriesEntryArrayOutput {
	return i.ToGetRouteEntriesEntryArrayOutputWithContext(context.Background())
}

func (i GetRouteEntriesEntryArray) ToGetRouteEntriesEntryArrayOutputWithContext(ctx context.Context) GetRouteEntriesEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteEntriesEntryArrayOutput)
}

type GetRouteEntriesEntryOutput struct{ *pulumi.OutputState }

func (GetRouteEntriesEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteEntriesEntry)(nil)).Elem()
}

func (o GetRouteEntriesEntryOutput) ToGetRouteEntriesEntryOutput() GetRouteEntriesEntryOutput {
	return o
}

func (o GetRouteEntriesEntryOutput) ToGetRouteEntriesEntryOutputWithContext(ctx context.Context) GetRouteEntriesEntryOutput {
	return o
}

// The destination CIDR block of the route entry to query.
func (o GetRouteEntriesEntryOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// A list of conflicted Route Entries. Each element contains the following attributes:
func (o GetRouteEntriesEntryOutput) Conflicts() GetRouteEntriesEntryConflictArrayOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) []GetRouteEntriesEntryConflict { return v.Conflicts }).(GetRouteEntriesEntryConflictArrayOutput)
}

// ID of the next hop.
func (o GetRouteEntriesEntryOutput) NextHopId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.NextHopId }).(pulumi.StringOutput)
}

// Type of the next hop, including "Instance", "HaVip" and "RouterInterface".
func (o GetRouteEntriesEntryOutput) NextHopType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.NextHopType }).(pulumi.StringOutput)
}

// Whether to allow the route entry to be published or removed to or from CEN.
func (o GetRouteEntriesEntryOutput) OperationalMode() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) bool { return v.OperationalMode }).(pulumi.BoolOutput)
}

// The publish status of the route entry in CEN, including "Published" and "NonPublished".
func (o GetRouteEntriesEntryOutput) PublishStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.PublishStatus }).(pulumi.StringOutput)
}

// ID of the route table of the VPC or VBR.
func (o GetRouteEntriesEntryOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// Type of the route entry, including "System", "Custom" and "BGP".
func (o GetRouteEntriesEntryOutput) RouteType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.RouteType }).(pulumi.StringOutput)
}

type GetRouteEntriesEntryArrayOutput struct{ *pulumi.OutputState }

func (GetRouteEntriesEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteEntriesEntry)(nil)).Elem()
}

func (o GetRouteEntriesEntryArrayOutput) ToGetRouteEntriesEntryArrayOutput() GetRouteEntriesEntryArrayOutput {
	return o
}

func (o GetRouteEntriesEntryArrayOutput) ToGetRouteEntriesEntryArrayOutputWithContext(ctx context.Context) GetRouteEntriesEntryArrayOutput {
	return o
}

func (o GetRouteEntriesEntryArrayOutput) Index(i pulumi.IntInput) GetRouteEntriesEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteEntriesEntry {
		return vs[0].([]GetRouteEntriesEntry)[vs[1].(int)]
	}).(GetRouteEntriesEntryOutput)
}

type GetRouteEntriesEntryConflict struct {
	// The destination CIDR block of the route entry to query.
	CidrBlock string `pulumi:"cidrBlock"`
	// ID of the CEN instance.
	InstanceId string `pulumi:"instanceId"`
	// The type of the CEN child instance.
	InstanceType string `pulumi:"instanceType"`
	// ID of the region where the conflicted route entry is located.
	RegionId string `pulumi:"regionId"`
	// Reasons of exceptions.
	Status string `pulumi:"status"`
}

// GetRouteEntriesEntryConflictInput is an input type that accepts GetRouteEntriesEntryConflictArgs and GetRouteEntriesEntryConflictOutput values.
// You can construct a concrete instance of `GetRouteEntriesEntryConflictInput` via:
//
// 		 GetRouteEntriesEntryConflictArgs{...}
//
type GetRouteEntriesEntryConflictInput interface {
	pulumi.Input

	ToGetRouteEntriesEntryConflictOutput() GetRouteEntriesEntryConflictOutput
	ToGetRouteEntriesEntryConflictOutputWithContext(context.Context) GetRouteEntriesEntryConflictOutput
}

type GetRouteEntriesEntryConflictArgs struct {
	// The destination CIDR block of the route entry to query.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// ID of the CEN instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The type of the CEN child instance.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// ID of the region where the conflicted route entry is located.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// Reasons of exceptions.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetRouteEntriesEntryConflictArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteEntriesEntryConflict)(nil)).Elem()
}

func (i GetRouteEntriesEntryConflictArgs) ToGetRouteEntriesEntryConflictOutput() GetRouteEntriesEntryConflictOutput {
	return i.ToGetRouteEntriesEntryConflictOutputWithContext(context.Background())
}

func (i GetRouteEntriesEntryConflictArgs) ToGetRouteEntriesEntryConflictOutputWithContext(ctx context.Context) GetRouteEntriesEntryConflictOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteEntriesEntryConflictOutput)
}

// GetRouteEntriesEntryConflictArrayInput is an input type that accepts GetRouteEntriesEntryConflictArray and GetRouteEntriesEntryConflictArrayOutput values.
// You can construct a concrete instance of `GetRouteEntriesEntryConflictArrayInput` via:
//
// 		 GetRouteEntriesEntryConflictArray{ GetRouteEntriesEntryConflictArgs{...} }
//
type GetRouteEntriesEntryConflictArrayInput interface {
	pulumi.Input

	ToGetRouteEntriesEntryConflictArrayOutput() GetRouteEntriesEntryConflictArrayOutput
	ToGetRouteEntriesEntryConflictArrayOutputWithContext(context.Context) GetRouteEntriesEntryConflictArrayOutput
}

type GetRouteEntriesEntryConflictArray []GetRouteEntriesEntryConflictInput

func (GetRouteEntriesEntryConflictArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteEntriesEntryConflict)(nil)).Elem()
}

func (i GetRouteEntriesEntryConflictArray) ToGetRouteEntriesEntryConflictArrayOutput() GetRouteEntriesEntryConflictArrayOutput {
	return i.ToGetRouteEntriesEntryConflictArrayOutputWithContext(context.Background())
}

func (i GetRouteEntriesEntryConflictArray) ToGetRouteEntriesEntryConflictArrayOutputWithContext(ctx context.Context) GetRouteEntriesEntryConflictArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteEntriesEntryConflictArrayOutput)
}

type GetRouteEntriesEntryConflictOutput struct{ *pulumi.OutputState }

func (GetRouteEntriesEntryConflictOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteEntriesEntryConflict)(nil)).Elem()
}

func (o GetRouteEntriesEntryConflictOutput) ToGetRouteEntriesEntryConflictOutput() GetRouteEntriesEntryConflictOutput {
	return o
}

func (o GetRouteEntriesEntryConflictOutput) ToGetRouteEntriesEntryConflictOutputWithContext(ctx context.Context) GetRouteEntriesEntryConflictOutput {
	return o
}

// The destination CIDR block of the route entry to query.
func (o GetRouteEntriesEntryConflictOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntryConflict) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// ID of the CEN instance.
func (o GetRouteEntriesEntryConflictOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntryConflict) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The type of the CEN child instance.
func (o GetRouteEntriesEntryConflictOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntryConflict) string { return v.InstanceType }).(pulumi.StringOutput)
}

// ID of the region where the conflicted route entry is located.
func (o GetRouteEntriesEntryConflictOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntryConflict) string { return v.RegionId }).(pulumi.StringOutput)
}

// Reasons of exceptions.
func (o GetRouteEntriesEntryConflictOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntryConflict) string { return v.Status }).(pulumi.StringOutput)
}

type GetRouteEntriesEntryConflictArrayOutput struct{ *pulumi.OutputState }

func (GetRouteEntriesEntryConflictArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteEntriesEntryConflict)(nil)).Elem()
}

func (o GetRouteEntriesEntryConflictArrayOutput) ToGetRouteEntriesEntryConflictArrayOutput() GetRouteEntriesEntryConflictArrayOutput {
	return o
}

func (o GetRouteEntriesEntryConflictArrayOutput) ToGetRouteEntriesEntryConflictArrayOutputWithContext(ctx context.Context) GetRouteEntriesEntryConflictArrayOutput {
	return o
}

func (o GetRouteEntriesEntryConflictArrayOutput) Index(i pulumi.IntInput) GetRouteEntriesEntryConflictOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteEntriesEntryConflict {
		return vs[0].([]GetRouteEntriesEntryConflict)[vs[1].(int)]
	}).(GetRouteEntriesEntryConflictOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBandwidthLimitsLimitOutput{})
	pulumi.RegisterOutputType(GetBandwidthLimitsLimitArrayOutput{})
	pulumi.RegisterOutputType(GetBandwidthPackagesPackageOutput{})
	pulumi.RegisterOutputType(GetBandwidthPackagesPackageArrayOutput{})
	pulumi.RegisterOutputType(GetFlowlogsFlowlogOutput{})
	pulumi.RegisterOutputType(GetFlowlogsFlowlogArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetRegionRouteEntriesEntryOutput{})
	pulumi.RegisterOutputType(GetRegionRouteEntriesEntryArrayOutput{})
	pulumi.RegisterOutputType(GetRouteEntriesEntryOutput{})
	pulumi.RegisterOutputType(GetRouteEntriesEntryArrayOutput{})
	pulumi.RegisterOutputType(GetRouteEntriesEntryConflictOutput{})
	pulumi.RegisterOutputType(GetRouteEntriesEntryConflictArrayOutput{})
}
