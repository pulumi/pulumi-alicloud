// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GetBandwidthLimitsLimit struct {
	// The bandwidth limit configured for the interconnected regions communication.
	BandwidthLimit int `pulumi:"bandwidthLimit"`
	// ID of the CEN instance.
	InstanceId string `pulumi:"instanceId"`
	// ID of local region.
	LocalRegionId string `pulumi:"localRegionId"`
	// ID of opposite region.
	OppositeRegionId string `pulumi:"oppositeRegionId"`
	// Status of the CEN Bandwidth Limit, including "Active" and "Modifying".
	Status string `pulumi:"status"`
}

// GetBandwidthLimitsLimitInput is an input type that accepts GetBandwidthLimitsLimitArgs and GetBandwidthLimitsLimitOutput values.
// You can construct a concrete instance of `GetBandwidthLimitsLimitInput` via:
//
//          GetBandwidthLimitsLimitArgs{...}
type GetBandwidthLimitsLimitInput interface {
	pulumi.Input

	ToGetBandwidthLimitsLimitOutput() GetBandwidthLimitsLimitOutput
	ToGetBandwidthLimitsLimitOutputWithContext(context.Context) GetBandwidthLimitsLimitOutput
}

type GetBandwidthLimitsLimitArgs struct {
	// The bandwidth limit configured for the interconnected regions communication.
	BandwidthLimit pulumi.IntInput `pulumi:"bandwidthLimit"`
	// ID of the CEN instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// ID of local region.
	LocalRegionId pulumi.StringInput `pulumi:"localRegionId"`
	// ID of opposite region.
	OppositeRegionId pulumi.StringInput `pulumi:"oppositeRegionId"`
	// Status of the CEN Bandwidth Limit, including "Active" and "Modifying".
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetBandwidthLimitsLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthLimitsLimit)(nil)).Elem()
}

func (i GetBandwidthLimitsLimitArgs) ToGetBandwidthLimitsLimitOutput() GetBandwidthLimitsLimitOutput {
	return i.ToGetBandwidthLimitsLimitOutputWithContext(context.Background())
}

func (i GetBandwidthLimitsLimitArgs) ToGetBandwidthLimitsLimitOutputWithContext(ctx context.Context) GetBandwidthLimitsLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthLimitsLimitOutput)
}

// GetBandwidthLimitsLimitArrayInput is an input type that accepts GetBandwidthLimitsLimitArray and GetBandwidthLimitsLimitArrayOutput values.
// You can construct a concrete instance of `GetBandwidthLimitsLimitArrayInput` via:
//
//          GetBandwidthLimitsLimitArray{ GetBandwidthLimitsLimitArgs{...} }
type GetBandwidthLimitsLimitArrayInput interface {
	pulumi.Input

	ToGetBandwidthLimitsLimitArrayOutput() GetBandwidthLimitsLimitArrayOutput
	ToGetBandwidthLimitsLimitArrayOutputWithContext(context.Context) GetBandwidthLimitsLimitArrayOutput
}

type GetBandwidthLimitsLimitArray []GetBandwidthLimitsLimitInput

func (GetBandwidthLimitsLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthLimitsLimit)(nil)).Elem()
}

func (i GetBandwidthLimitsLimitArray) ToGetBandwidthLimitsLimitArrayOutput() GetBandwidthLimitsLimitArrayOutput {
	return i.ToGetBandwidthLimitsLimitArrayOutputWithContext(context.Background())
}

func (i GetBandwidthLimitsLimitArray) ToGetBandwidthLimitsLimitArrayOutputWithContext(ctx context.Context) GetBandwidthLimitsLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthLimitsLimitArrayOutput)
}

type GetBandwidthLimitsLimitOutput struct{ *pulumi.OutputState }

func (GetBandwidthLimitsLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthLimitsLimit)(nil)).Elem()
}

func (o GetBandwidthLimitsLimitOutput) ToGetBandwidthLimitsLimitOutput() GetBandwidthLimitsLimitOutput {
	return o
}

func (o GetBandwidthLimitsLimitOutput) ToGetBandwidthLimitsLimitOutputWithContext(ctx context.Context) GetBandwidthLimitsLimitOutput {
	return o
}

// The bandwidth limit configured for the interconnected regions communication.
func (o GetBandwidthLimitsLimitOutput) BandwidthLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetBandwidthLimitsLimit) int { return v.BandwidthLimit }).(pulumi.IntOutput)
}

// ID of the CEN instance.
func (o GetBandwidthLimitsLimitOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthLimitsLimit) string { return v.InstanceId }).(pulumi.StringOutput)
}

// ID of local region.
func (o GetBandwidthLimitsLimitOutput) LocalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthLimitsLimit) string { return v.LocalRegionId }).(pulumi.StringOutput)
}

// ID of opposite region.
func (o GetBandwidthLimitsLimitOutput) OppositeRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthLimitsLimit) string { return v.OppositeRegionId }).(pulumi.StringOutput)
}

// Status of the CEN Bandwidth Limit, including "Active" and "Modifying".
func (o GetBandwidthLimitsLimitOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthLimitsLimit) string { return v.Status }).(pulumi.StringOutput)
}

type GetBandwidthLimitsLimitArrayOutput struct{ *pulumi.OutputState }

func (GetBandwidthLimitsLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthLimitsLimit)(nil)).Elem()
}

func (o GetBandwidthLimitsLimitArrayOutput) ToGetBandwidthLimitsLimitArrayOutput() GetBandwidthLimitsLimitArrayOutput {
	return o
}

func (o GetBandwidthLimitsLimitArrayOutput) ToGetBandwidthLimitsLimitArrayOutputWithContext(ctx context.Context) GetBandwidthLimitsLimitArrayOutput {
	return o
}

func (o GetBandwidthLimitsLimitArrayOutput) Index(i pulumi.IntInput) GetBandwidthLimitsLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBandwidthLimitsLimit {
		return vs[0].([]GetBandwidthLimitsLimit)[vs[1].(int)]
	}).(GetBandwidthLimitsLimitOutput)
}

type GetBandwidthPackagesPackage struct {
	// The bandwidth in Mbps of the CEN bandwidth package.
	Bandwidth int `pulumi:"bandwidth"`
	// The billing method, including `POSTPAY` and `PREPAY`.
	BandwidthPackageChargeType string `pulumi:"bandwidthPackageChargeType"`
	// Status of the CEN Bandwidth Package, including `Normal`, `FinancialLocked` and `SecurityLocked`.
	BusinessStatus string `pulumi:"businessStatus"`
	// The ID of the bandwidth package.
	CenBandwidthPackageId string `pulumi:"cenBandwidthPackageId"`
	// The name of the bandwidth package.
	CenBandwidthPackageName string `pulumi:"cenBandwidthPackageName"`
	// The list of CEN instances that are associated with the bandwidth package.
	CenIds []string `pulumi:"cenIds"`
	// Description of the CEN Bandwidth Package.
	Description string `pulumi:"description"`
	ExpiredTime string `pulumi:"expiredTime"`
	// Region ID of the interconnected regions.
	GeographicRegionAId string `pulumi:"geographicRegionAId"`
	// Region ID of the interconnected regions.
	GeographicRegionBId string `pulumi:"geographicRegionBId"`
	// The area ID of the cross-area connection.
	GeographicSpanId string `pulumi:"geographicSpanId"`
	// Indicates whether renewal data is involved.
	HasReservationData string `pulumi:"hasReservationData"`
	// ID of the CEN Bandwidth Package.
	Id string `pulumi:"id"`
	// ID of a CEN instance.
	InstanceId string `pulumi:"instanceId"`
	// Indicates whether the bandwidth package is a cross-border bandwidth package.
	IsCrossBorder bool `pulumi:"isCrossBorder"`
	// Name of the CEN Bandwidth Package.
	Name string `pulumi:"name"`
	// The billing method of the bandwidth package.
	PaymentType string `pulumi:"paymentType"`
	// The expiration time of the temporary upgrade.
	ReservationActiveTime string `pulumi:"reservationActiveTime"`
	// The restored bandwidth after the temporary upgrade.
	ReservationBandwidth string `pulumi:"reservationBandwidth"`
	// The billing method after the configuration change.
	ReservationInternetChargeType string `pulumi:"reservationInternetChargeType"`
	// The type of the configuration change.
	ReservationOrderType string `pulumi:"reservationOrderType"`
	// Status of the CEN Bandwidth Package in CEN instance, Valid value: `Idle` and `InUse`.
	Status string `pulumi:"status"`
}

// GetBandwidthPackagesPackageInput is an input type that accepts GetBandwidthPackagesPackageArgs and GetBandwidthPackagesPackageOutput values.
// You can construct a concrete instance of `GetBandwidthPackagesPackageInput` via:
//
//          GetBandwidthPackagesPackageArgs{...}
type GetBandwidthPackagesPackageInput interface {
	pulumi.Input

	ToGetBandwidthPackagesPackageOutput() GetBandwidthPackagesPackageOutput
	ToGetBandwidthPackagesPackageOutputWithContext(context.Context) GetBandwidthPackagesPackageOutput
}

type GetBandwidthPackagesPackageArgs struct {
	// The bandwidth in Mbps of the CEN bandwidth package.
	Bandwidth pulumi.IntInput `pulumi:"bandwidth"`
	// The billing method, including `POSTPAY` and `PREPAY`.
	BandwidthPackageChargeType pulumi.StringInput `pulumi:"bandwidthPackageChargeType"`
	// Status of the CEN Bandwidth Package, including `Normal`, `FinancialLocked` and `SecurityLocked`.
	BusinessStatus pulumi.StringInput `pulumi:"businessStatus"`
	// The ID of the bandwidth package.
	CenBandwidthPackageId pulumi.StringInput `pulumi:"cenBandwidthPackageId"`
	// The name of the bandwidth package.
	CenBandwidthPackageName pulumi.StringInput `pulumi:"cenBandwidthPackageName"`
	// The list of CEN instances that are associated with the bandwidth package.
	CenIds pulumi.StringArrayInput `pulumi:"cenIds"`
	// Description of the CEN Bandwidth Package.
	Description pulumi.StringInput `pulumi:"description"`
	ExpiredTime pulumi.StringInput `pulumi:"expiredTime"`
	// Region ID of the interconnected regions.
	GeographicRegionAId pulumi.StringInput `pulumi:"geographicRegionAId"`
	// Region ID of the interconnected regions.
	GeographicRegionBId pulumi.StringInput `pulumi:"geographicRegionBId"`
	// The area ID of the cross-area connection.
	GeographicSpanId pulumi.StringInput `pulumi:"geographicSpanId"`
	// Indicates whether renewal data is involved.
	HasReservationData pulumi.StringInput `pulumi:"hasReservationData"`
	// ID of the CEN Bandwidth Package.
	Id pulumi.StringInput `pulumi:"id"`
	// ID of a CEN instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Indicates whether the bandwidth package is a cross-border bandwidth package.
	IsCrossBorder pulumi.BoolInput `pulumi:"isCrossBorder"`
	// Name of the CEN Bandwidth Package.
	Name pulumi.StringInput `pulumi:"name"`
	// The billing method of the bandwidth package.
	PaymentType pulumi.StringInput `pulumi:"paymentType"`
	// The expiration time of the temporary upgrade.
	ReservationActiveTime pulumi.StringInput `pulumi:"reservationActiveTime"`
	// The restored bandwidth after the temporary upgrade.
	ReservationBandwidth pulumi.StringInput `pulumi:"reservationBandwidth"`
	// The billing method after the configuration change.
	ReservationInternetChargeType pulumi.StringInput `pulumi:"reservationInternetChargeType"`
	// The type of the configuration change.
	ReservationOrderType pulumi.StringInput `pulumi:"reservationOrderType"`
	// Status of the CEN Bandwidth Package in CEN instance, Valid value: `Idle` and `InUse`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetBandwidthPackagesPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthPackagesPackage)(nil)).Elem()
}

func (i GetBandwidthPackagesPackageArgs) ToGetBandwidthPackagesPackageOutput() GetBandwidthPackagesPackageOutput {
	return i.ToGetBandwidthPackagesPackageOutputWithContext(context.Background())
}

func (i GetBandwidthPackagesPackageArgs) ToGetBandwidthPackagesPackageOutputWithContext(ctx context.Context) GetBandwidthPackagesPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthPackagesPackageOutput)
}

// GetBandwidthPackagesPackageArrayInput is an input type that accepts GetBandwidthPackagesPackageArray and GetBandwidthPackagesPackageArrayOutput values.
// You can construct a concrete instance of `GetBandwidthPackagesPackageArrayInput` via:
//
//          GetBandwidthPackagesPackageArray{ GetBandwidthPackagesPackageArgs{...} }
type GetBandwidthPackagesPackageArrayInput interface {
	pulumi.Input

	ToGetBandwidthPackagesPackageArrayOutput() GetBandwidthPackagesPackageArrayOutput
	ToGetBandwidthPackagesPackageArrayOutputWithContext(context.Context) GetBandwidthPackagesPackageArrayOutput
}

type GetBandwidthPackagesPackageArray []GetBandwidthPackagesPackageInput

func (GetBandwidthPackagesPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthPackagesPackage)(nil)).Elem()
}

func (i GetBandwidthPackagesPackageArray) ToGetBandwidthPackagesPackageArrayOutput() GetBandwidthPackagesPackageArrayOutput {
	return i.ToGetBandwidthPackagesPackageArrayOutputWithContext(context.Background())
}

func (i GetBandwidthPackagesPackageArray) ToGetBandwidthPackagesPackageArrayOutputWithContext(ctx context.Context) GetBandwidthPackagesPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthPackagesPackageArrayOutput)
}

type GetBandwidthPackagesPackageOutput struct{ *pulumi.OutputState }

func (GetBandwidthPackagesPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthPackagesPackage)(nil)).Elem()
}

func (o GetBandwidthPackagesPackageOutput) ToGetBandwidthPackagesPackageOutput() GetBandwidthPackagesPackageOutput {
	return o
}

func (o GetBandwidthPackagesPackageOutput) ToGetBandwidthPackagesPackageOutputWithContext(ctx context.Context) GetBandwidthPackagesPackageOutput {
	return o
}

// The bandwidth in Mbps of the CEN bandwidth package.
func (o GetBandwidthPackagesPackageOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// The billing method, including `POSTPAY` and `PREPAY`.
func (o GetBandwidthPackagesPackageOutput) BandwidthPackageChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.BandwidthPackageChargeType }).(pulumi.StringOutput)
}

// Status of the CEN Bandwidth Package, including `Normal`, `FinancialLocked` and `SecurityLocked`.
func (o GetBandwidthPackagesPackageOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The ID of the bandwidth package.
func (o GetBandwidthPackagesPackageOutput) CenBandwidthPackageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.CenBandwidthPackageId }).(pulumi.StringOutput)
}

// The name of the bandwidth package.
func (o GetBandwidthPackagesPackageOutput) CenBandwidthPackageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.CenBandwidthPackageName }).(pulumi.StringOutput)
}

// The list of CEN instances that are associated with the bandwidth package.
func (o GetBandwidthPackagesPackageOutput) CenIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) []string { return v.CenIds }).(pulumi.StringArrayOutput)
}

// Description of the CEN Bandwidth Package.
func (o GetBandwidthPackagesPackageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetBandwidthPackagesPackageOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

// Region ID of the interconnected regions.
func (o GetBandwidthPackagesPackageOutput) GeographicRegionAId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.GeographicRegionAId }).(pulumi.StringOutput)
}

// Region ID of the interconnected regions.
func (o GetBandwidthPackagesPackageOutput) GeographicRegionBId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.GeographicRegionBId }).(pulumi.StringOutput)
}

// The area ID of the cross-area connection.
func (o GetBandwidthPackagesPackageOutput) GeographicSpanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.GeographicSpanId }).(pulumi.StringOutput)
}

// Indicates whether renewal data is involved.
func (o GetBandwidthPackagesPackageOutput) HasReservationData() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.HasReservationData }).(pulumi.StringOutput)
}

// ID of the CEN Bandwidth Package.
func (o GetBandwidthPackagesPackageOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.Id }).(pulumi.StringOutput)
}

// ID of a CEN instance.
func (o GetBandwidthPackagesPackageOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Indicates whether the bandwidth package is a cross-border bandwidth package.
func (o GetBandwidthPackagesPackageOutput) IsCrossBorder() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) bool { return v.IsCrossBorder }).(pulumi.BoolOutput)
}

// Name of the CEN Bandwidth Package.
func (o GetBandwidthPackagesPackageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.Name }).(pulumi.StringOutput)
}

// The billing method of the bandwidth package.
func (o GetBandwidthPackagesPackageOutput) PaymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.PaymentType }).(pulumi.StringOutput)
}

// The expiration time of the temporary upgrade.
func (o GetBandwidthPackagesPackageOutput) ReservationActiveTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.ReservationActiveTime }).(pulumi.StringOutput)
}

// The restored bandwidth after the temporary upgrade.
func (o GetBandwidthPackagesPackageOutput) ReservationBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.ReservationBandwidth }).(pulumi.StringOutput)
}

// The billing method after the configuration change.
func (o GetBandwidthPackagesPackageOutput) ReservationInternetChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.ReservationInternetChargeType }).(pulumi.StringOutput)
}

// The type of the configuration change.
func (o GetBandwidthPackagesPackageOutput) ReservationOrderType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.ReservationOrderType }).(pulumi.StringOutput)
}

// Status of the CEN Bandwidth Package in CEN instance, Valid value: `Idle` and `InUse`.
func (o GetBandwidthPackagesPackageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackagesPackage) string { return v.Status }).(pulumi.StringOutput)
}

type GetBandwidthPackagesPackageArrayOutput struct{ *pulumi.OutputState }

func (GetBandwidthPackagesPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthPackagesPackage)(nil)).Elem()
}

func (o GetBandwidthPackagesPackageArrayOutput) ToGetBandwidthPackagesPackageArrayOutput() GetBandwidthPackagesPackageArrayOutput {
	return o
}

func (o GetBandwidthPackagesPackageArrayOutput) ToGetBandwidthPackagesPackageArrayOutputWithContext(ctx context.Context) GetBandwidthPackagesPackageArrayOutput {
	return o
}

func (o GetBandwidthPackagesPackageArrayOutput) Index(i pulumi.IntInput) GetBandwidthPackagesPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBandwidthPackagesPackage {
		return vs[0].([]GetBandwidthPackagesPackage)[vs[1].(int)]
	}).(GetBandwidthPackagesPackageOutput)
}

type GetFlowlogsFlowlog struct {
	// The ID of the CEN Instance.
	CenId string `pulumi:"cenId"`
	// The description of flowlog.
	Description string `pulumi:"description"`
	// ID of the CEN flow log.
	FlowLogId string `pulumi:"flowLogId"`
	// The name of flowlog.
	FlowLogName string `pulumi:"flowLogName"`
	// ID of the CEN flow log.
	Id string `pulumi:"id"`
	// The name of the log store which is in the  `projectName` SLS project.
	LogStoreName string `pulumi:"logStoreName"`
	// The name of the SLS project.
	ProjectName string `pulumi:"projectName"`
	// The status of flowlog. Valid values: ["Active", "Inactive"]. Default to "Active".
	Status string `pulumi:"status"`
}

// GetFlowlogsFlowlogInput is an input type that accepts GetFlowlogsFlowlogArgs and GetFlowlogsFlowlogOutput values.
// You can construct a concrete instance of `GetFlowlogsFlowlogInput` via:
//
//          GetFlowlogsFlowlogArgs{...}
type GetFlowlogsFlowlogInput interface {
	pulumi.Input

	ToGetFlowlogsFlowlogOutput() GetFlowlogsFlowlogOutput
	ToGetFlowlogsFlowlogOutputWithContext(context.Context) GetFlowlogsFlowlogOutput
}

type GetFlowlogsFlowlogArgs struct {
	// The ID of the CEN Instance.
	CenId pulumi.StringInput `pulumi:"cenId"`
	// The description of flowlog.
	Description pulumi.StringInput `pulumi:"description"`
	// ID of the CEN flow log.
	FlowLogId pulumi.StringInput `pulumi:"flowLogId"`
	// The name of flowlog.
	FlowLogName pulumi.StringInput `pulumi:"flowLogName"`
	// ID of the CEN flow log.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the log store which is in the  `projectName` SLS project.
	LogStoreName pulumi.StringInput `pulumi:"logStoreName"`
	// The name of the SLS project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The status of flowlog. Valid values: ["Active", "Inactive"]. Default to "Active".
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetFlowlogsFlowlogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlowlogsFlowlog)(nil)).Elem()
}

func (i GetFlowlogsFlowlogArgs) ToGetFlowlogsFlowlogOutput() GetFlowlogsFlowlogOutput {
	return i.ToGetFlowlogsFlowlogOutputWithContext(context.Background())
}

func (i GetFlowlogsFlowlogArgs) ToGetFlowlogsFlowlogOutputWithContext(ctx context.Context) GetFlowlogsFlowlogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlowlogsFlowlogOutput)
}

// GetFlowlogsFlowlogArrayInput is an input type that accepts GetFlowlogsFlowlogArray and GetFlowlogsFlowlogArrayOutput values.
// You can construct a concrete instance of `GetFlowlogsFlowlogArrayInput` via:
//
//          GetFlowlogsFlowlogArray{ GetFlowlogsFlowlogArgs{...} }
type GetFlowlogsFlowlogArrayInput interface {
	pulumi.Input

	ToGetFlowlogsFlowlogArrayOutput() GetFlowlogsFlowlogArrayOutput
	ToGetFlowlogsFlowlogArrayOutputWithContext(context.Context) GetFlowlogsFlowlogArrayOutput
}

type GetFlowlogsFlowlogArray []GetFlowlogsFlowlogInput

func (GetFlowlogsFlowlogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlowlogsFlowlog)(nil)).Elem()
}

func (i GetFlowlogsFlowlogArray) ToGetFlowlogsFlowlogArrayOutput() GetFlowlogsFlowlogArrayOutput {
	return i.ToGetFlowlogsFlowlogArrayOutputWithContext(context.Background())
}

func (i GetFlowlogsFlowlogArray) ToGetFlowlogsFlowlogArrayOutputWithContext(ctx context.Context) GetFlowlogsFlowlogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlowlogsFlowlogArrayOutput)
}

type GetFlowlogsFlowlogOutput struct{ *pulumi.OutputState }

func (GetFlowlogsFlowlogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlowlogsFlowlog)(nil)).Elem()
}

func (o GetFlowlogsFlowlogOutput) ToGetFlowlogsFlowlogOutput() GetFlowlogsFlowlogOutput {
	return o
}

func (o GetFlowlogsFlowlogOutput) ToGetFlowlogsFlowlogOutputWithContext(ctx context.Context) GetFlowlogsFlowlogOutput {
	return o
}

// The ID of the CEN Instance.
func (o GetFlowlogsFlowlogOutput) CenId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.CenId }).(pulumi.StringOutput)
}

// The description of flowlog.
func (o GetFlowlogsFlowlogOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.Description }).(pulumi.StringOutput)
}

// ID of the CEN flow log.
func (o GetFlowlogsFlowlogOutput) FlowLogId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.FlowLogId }).(pulumi.StringOutput)
}

// The name of flowlog.
func (o GetFlowlogsFlowlogOutput) FlowLogName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.FlowLogName }).(pulumi.StringOutput)
}

// ID of the CEN flow log.
func (o GetFlowlogsFlowlogOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the log store which is in the  `projectName` SLS project.
func (o GetFlowlogsFlowlogOutput) LogStoreName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.LogStoreName }).(pulumi.StringOutput)
}

// The name of the SLS project.
func (o GetFlowlogsFlowlogOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The status of flowlog. Valid values: ["Active", "Inactive"]. Default to "Active".
func (o GetFlowlogsFlowlogOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsFlowlog) string { return v.Status }).(pulumi.StringOutput)
}

type GetFlowlogsFlowlogArrayOutput struct{ *pulumi.OutputState }

func (GetFlowlogsFlowlogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlowlogsFlowlog)(nil)).Elem()
}

func (o GetFlowlogsFlowlogArrayOutput) ToGetFlowlogsFlowlogArrayOutput() GetFlowlogsFlowlogArrayOutput {
	return o
}

func (o GetFlowlogsFlowlogArrayOutput) ToGetFlowlogsFlowlogArrayOutputWithContext(ctx context.Context) GetFlowlogsFlowlogArrayOutput {
	return o
}

func (o GetFlowlogsFlowlogArrayOutput) Index(i pulumi.IntInput) GetFlowlogsFlowlogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlowlogsFlowlog {
		return vs[0].([]GetFlowlogsFlowlog)[vs[1].(int)]
	}).(GetFlowlogsFlowlogOutput)
}

type GetInstanceAttachmentsAttachment struct {
	// The time when the network is associated with the CEN instance.
	ChildInstanceAttachTime string `pulumi:"childInstanceAttachTime"`
	// The ID of the network.
	ChildInstanceId string `pulumi:"childInstanceId"`
	// The ID of the account to which the network belongs.
	ChildInstanceOwnerId int `pulumi:"childInstanceOwnerId"`
	// The region to which the network to be queried belongs.
	ChildInstanceRegionId string `pulumi:"childInstanceRegionId"`
	// The type of the associated network. Valid values: `VPC`, `VBR` and `CCN`.
	ChildInstanceType string `pulumi:"childInstanceType"`
	// The ID of the CEN Instance Attachment.
	Id string `pulumi:"id"`
	// The ID of the CEN instance.
	InstanceId string `pulumi:"instanceId"`
	// The status of the Cen Child Instance Attachment. Valid value: `Attaching`, `Attached` and `Aetaching`.
	Status string `pulumi:"status"`
}

// GetInstanceAttachmentsAttachmentInput is an input type that accepts GetInstanceAttachmentsAttachmentArgs and GetInstanceAttachmentsAttachmentOutput values.
// You can construct a concrete instance of `GetInstanceAttachmentsAttachmentInput` via:
//
//          GetInstanceAttachmentsAttachmentArgs{...}
type GetInstanceAttachmentsAttachmentInput interface {
	pulumi.Input

	ToGetInstanceAttachmentsAttachmentOutput() GetInstanceAttachmentsAttachmentOutput
	ToGetInstanceAttachmentsAttachmentOutputWithContext(context.Context) GetInstanceAttachmentsAttachmentOutput
}

type GetInstanceAttachmentsAttachmentArgs struct {
	// The time when the network is associated with the CEN instance.
	ChildInstanceAttachTime pulumi.StringInput `pulumi:"childInstanceAttachTime"`
	// The ID of the network.
	ChildInstanceId pulumi.StringInput `pulumi:"childInstanceId"`
	// The ID of the account to which the network belongs.
	ChildInstanceOwnerId pulumi.IntInput `pulumi:"childInstanceOwnerId"`
	// The region to which the network to be queried belongs.
	ChildInstanceRegionId pulumi.StringInput `pulumi:"childInstanceRegionId"`
	// The type of the associated network. Valid values: `VPC`, `VBR` and `CCN`.
	ChildInstanceType pulumi.StringInput `pulumi:"childInstanceType"`
	// The ID of the CEN Instance Attachment.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the CEN instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The status of the Cen Child Instance Attachment. Valid value: `Attaching`, `Attached` and `Aetaching`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetInstanceAttachmentsAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceAttachmentsAttachment)(nil)).Elem()
}

func (i GetInstanceAttachmentsAttachmentArgs) ToGetInstanceAttachmentsAttachmentOutput() GetInstanceAttachmentsAttachmentOutput {
	return i.ToGetInstanceAttachmentsAttachmentOutputWithContext(context.Background())
}

func (i GetInstanceAttachmentsAttachmentArgs) ToGetInstanceAttachmentsAttachmentOutputWithContext(ctx context.Context) GetInstanceAttachmentsAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceAttachmentsAttachmentOutput)
}

// GetInstanceAttachmentsAttachmentArrayInput is an input type that accepts GetInstanceAttachmentsAttachmentArray and GetInstanceAttachmentsAttachmentArrayOutput values.
// You can construct a concrete instance of `GetInstanceAttachmentsAttachmentArrayInput` via:
//
//          GetInstanceAttachmentsAttachmentArray{ GetInstanceAttachmentsAttachmentArgs{...} }
type GetInstanceAttachmentsAttachmentArrayInput interface {
	pulumi.Input

	ToGetInstanceAttachmentsAttachmentArrayOutput() GetInstanceAttachmentsAttachmentArrayOutput
	ToGetInstanceAttachmentsAttachmentArrayOutputWithContext(context.Context) GetInstanceAttachmentsAttachmentArrayOutput
}

type GetInstanceAttachmentsAttachmentArray []GetInstanceAttachmentsAttachmentInput

func (GetInstanceAttachmentsAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceAttachmentsAttachment)(nil)).Elem()
}

func (i GetInstanceAttachmentsAttachmentArray) ToGetInstanceAttachmentsAttachmentArrayOutput() GetInstanceAttachmentsAttachmentArrayOutput {
	return i.ToGetInstanceAttachmentsAttachmentArrayOutputWithContext(context.Background())
}

func (i GetInstanceAttachmentsAttachmentArray) ToGetInstanceAttachmentsAttachmentArrayOutputWithContext(ctx context.Context) GetInstanceAttachmentsAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceAttachmentsAttachmentArrayOutput)
}

type GetInstanceAttachmentsAttachmentOutput struct{ *pulumi.OutputState }

func (GetInstanceAttachmentsAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceAttachmentsAttachment)(nil)).Elem()
}

func (o GetInstanceAttachmentsAttachmentOutput) ToGetInstanceAttachmentsAttachmentOutput() GetInstanceAttachmentsAttachmentOutput {
	return o
}

func (o GetInstanceAttachmentsAttachmentOutput) ToGetInstanceAttachmentsAttachmentOutputWithContext(ctx context.Context) GetInstanceAttachmentsAttachmentOutput {
	return o
}

// The time when the network is associated with the CEN instance.
func (o GetInstanceAttachmentsAttachmentOutput) ChildInstanceAttachTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.ChildInstanceAttachTime }).(pulumi.StringOutput)
}

// The ID of the network.
func (o GetInstanceAttachmentsAttachmentOutput) ChildInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.ChildInstanceId }).(pulumi.StringOutput)
}

// The ID of the account to which the network belongs.
func (o GetInstanceAttachmentsAttachmentOutput) ChildInstanceOwnerId() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) int { return v.ChildInstanceOwnerId }).(pulumi.IntOutput)
}

// The region to which the network to be queried belongs.
func (o GetInstanceAttachmentsAttachmentOutput) ChildInstanceRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.ChildInstanceRegionId }).(pulumi.StringOutput)
}

// The type of the associated network. Valid values: `VPC`, `VBR` and `CCN`.
func (o GetInstanceAttachmentsAttachmentOutput) ChildInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.ChildInstanceType }).(pulumi.StringOutput)
}

// The ID of the CEN Instance Attachment.
func (o GetInstanceAttachmentsAttachmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the CEN instance.
func (o GetInstanceAttachmentsAttachmentOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The status of the Cen Child Instance Attachment. Valid value: `Attaching`, `Attached` and `Aetaching`.
func (o GetInstanceAttachmentsAttachmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.Status }).(pulumi.StringOutput)
}

type GetInstanceAttachmentsAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceAttachmentsAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceAttachmentsAttachment)(nil)).Elem()
}

func (o GetInstanceAttachmentsAttachmentArrayOutput) ToGetInstanceAttachmentsAttachmentArrayOutput() GetInstanceAttachmentsAttachmentArrayOutput {
	return o
}

func (o GetInstanceAttachmentsAttachmentArrayOutput) ToGetInstanceAttachmentsAttachmentArrayOutputWithContext(ctx context.Context) GetInstanceAttachmentsAttachmentArrayOutput {
	return o
}

func (o GetInstanceAttachmentsAttachmentArrayOutput) Index(i pulumi.IntInput) GetInstanceAttachmentsAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceAttachmentsAttachment {
		return vs[0].([]GetInstanceAttachmentsAttachment)[vs[1].(int)]
	}).(GetInstanceAttachmentsAttachmentOutput)
}

type GetInstancesInstance struct {
	// List of CEN Bandwidth Package IDs in the specified CEN instance.
	CenBandwidthPackageIds []string `pulumi:"cenBandwidthPackageIds"`
	// ID of the CEN instance.
	CenId string `pulumi:"cenId"`
	// Name of the CEN instance.
	CenInstanceName string `pulumi:"cenInstanceName"`
	// Description of the CEN instance.
	Description string `pulumi:"description"`
	// ID of the CEN instance.
	Id string `pulumi:"id"`
	// Name of the CEN instance.
	Name string `pulumi:"name"`
	// Indicates the allowed level of CIDR block overlapping.
	ProtectionLevel string `pulumi:"protectionLevel"`
	// The status of CEN instance. Valid value: `Active`, `Creating` and `Deleting`.
	Status string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
}

// GetInstancesInstanceInput is an input type that accepts GetInstancesInstanceArgs and GetInstancesInstanceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceInput` via:
//
//          GetInstancesInstanceArgs{...}
type GetInstancesInstanceInput interface {
	pulumi.Input

	ToGetInstancesInstanceOutput() GetInstancesInstanceOutput
	ToGetInstancesInstanceOutputWithContext(context.Context) GetInstancesInstanceOutput
}

type GetInstancesInstanceArgs struct {
	// List of CEN Bandwidth Package IDs in the specified CEN instance.
	CenBandwidthPackageIds pulumi.StringArrayInput `pulumi:"cenBandwidthPackageIds"`
	// ID of the CEN instance.
	CenId pulumi.StringInput `pulumi:"cenId"`
	// Name of the CEN instance.
	CenInstanceName pulumi.StringInput `pulumi:"cenInstanceName"`
	// Description of the CEN instance.
	Description pulumi.StringInput `pulumi:"description"`
	// ID of the CEN instance.
	Id pulumi.StringInput `pulumi:"id"`
	// Name of the CEN instance.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates the allowed level of CIDR block overlapping.
	ProtectionLevel pulumi.StringInput `pulumi:"protectionLevel"`
	// The status of CEN instance. Valid value: `Active`, `Creating` and `Deleting`.
	Status pulumi.StringInput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

func (GetInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return i.ToGetInstancesInstanceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceOutput)
}

// GetInstancesInstanceArrayInput is an input type that accepts GetInstancesInstanceArray and GetInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceArrayInput` via:
//
//          GetInstancesInstanceArray{ GetInstancesInstanceArgs{...} }
type GetInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput
	ToGetInstancesInstanceArrayOutputWithContext(context.Context) GetInstancesInstanceArrayOutput
}

type GetInstancesInstanceArray []GetInstancesInstanceInput

func (GetInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return i.ToGetInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceArrayOutput)
}

type GetInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return o
}

// List of CEN Bandwidth Package IDs in the specified CEN instance.
func (o GetInstancesInstanceOutput) CenBandwidthPackageIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []string { return v.CenBandwidthPackageIds }).(pulumi.StringArrayOutput)
}

// ID of the CEN instance.
func (o GetInstancesInstanceOutput) CenId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CenId }).(pulumi.StringOutput)
}

// Name of the CEN instance.
func (o GetInstancesInstanceOutput) CenInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CenInstanceName }).(pulumi.StringOutput)
}

// Description of the CEN instance.
func (o GetInstancesInstanceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Description }).(pulumi.StringOutput)
}

// ID of the CEN instance.
func (o GetInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the CEN instance.
func (o GetInstancesInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates the allowed level of CIDR block overlapping.
func (o GetInstancesInstanceOutput) ProtectionLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ProtectionLevel }).(pulumi.StringOutput)
}

// The status of CEN instance. Valid value: `Active`, `Creating` and `Deleting`.
func (o GetInstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o GetInstancesInstanceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetInstancesInstance) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

type GetInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstance {
		return vs[0].([]GetInstancesInstance)[vs[1].(int)]
	}).(GetInstancesInstanceOutput)
}

type GetPrivateZonesZone struct {
	// The access region. The access region is the region of the cloud resource that accesses the PrivateZone service through CEN.
	AccessRegionId string `pulumi:"accessRegionId"`
	// The ID of the CEN instance.
	CenId string `pulumi:"cenId"`
	// The service region. The service region is the target region of the PrivateZone service accessed through CEN.
	HostRegionId string `pulumi:"hostRegionId"`
	// The VPC that belongs to the service region.
	HostVpcId string `pulumi:"hostVpcId"`
	// The DNS IP addresses of the PrivateZone service.
	PrivateZoneDnsServers string `pulumi:"privateZoneDnsServers"`
	// The status of the PrivateZone service, including `Creating`, `Active` and `Deleting`.
	Status string `pulumi:"status"`
}

// GetPrivateZonesZoneInput is an input type that accepts GetPrivateZonesZoneArgs and GetPrivateZonesZoneOutput values.
// You can construct a concrete instance of `GetPrivateZonesZoneInput` via:
//
//          GetPrivateZonesZoneArgs{...}
type GetPrivateZonesZoneInput interface {
	pulumi.Input

	ToGetPrivateZonesZoneOutput() GetPrivateZonesZoneOutput
	ToGetPrivateZonesZoneOutputWithContext(context.Context) GetPrivateZonesZoneOutput
}

type GetPrivateZonesZoneArgs struct {
	// The access region. The access region is the region of the cloud resource that accesses the PrivateZone service through CEN.
	AccessRegionId pulumi.StringInput `pulumi:"accessRegionId"`
	// The ID of the CEN instance.
	CenId pulumi.StringInput `pulumi:"cenId"`
	// The service region. The service region is the target region of the PrivateZone service accessed through CEN.
	HostRegionId pulumi.StringInput `pulumi:"hostRegionId"`
	// The VPC that belongs to the service region.
	HostVpcId pulumi.StringInput `pulumi:"hostVpcId"`
	// The DNS IP addresses of the PrivateZone service.
	PrivateZoneDnsServers pulumi.StringInput `pulumi:"privateZoneDnsServers"`
	// The status of the PrivateZone service, including `Creating`, `Active` and `Deleting`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetPrivateZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateZonesZone)(nil)).Elem()
}

func (i GetPrivateZonesZoneArgs) ToGetPrivateZonesZoneOutput() GetPrivateZonesZoneOutput {
	return i.ToGetPrivateZonesZoneOutputWithContext(context.Background())
}

func (i GetPrivateZonesZoneArgs) ToGetPrivateZonesZoneOutputWithContext(ctx context.Context) GetPrivateZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateZonesZoneOutput)
}

// GetPrivateZonesZoneArrayInput is an input type that accepts GetPrivateZonesZoneArray and GetPrivateZonesZoneArrayOutput values.
// You can construct a concrete instance of `GetPrivateZonesZoneArrayInput` via:
//
//          GetPrivateZonesZoneArray{ GetPrivateZonesZoneArgs{...} }
type GetPrivateZonesZoneArrayInput interface {
	pulumi.Input

	ToGetPrivateZonesZoneArrayOutput() GetPrivateZonesZoneArrayOutput
	ToGetPrivateZonesZoneArrayOutputWithContext(context.Context) GetPrivateZonesZoneArrayOutput
}

type GetPrivateZonesZoneArray []GetPrivateZonesZoneInput

func (GetPrivateZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateZonesZone)(nil)).Elem()
}

func (i GetPrivateZonesZoneArray) ToGetPrivateZonesZoneArrayOutput() GetPrivateZonesZoneArrayOutput {
	return i.ToGetPrivateZonesZoneArrayOutputWithContext(context.Background())
}

func (i GetPrivateZonesZoneArray) ToGetPrivateZonesZoneArrayOutputWithContext(ctx context.Context) GetPrivateZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateZonesZoneArrayOutput)
}

type GetPrivateZonesZoneOutput struct{ *pulumi.OutputState }

func (GetPrivateZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateZonesZone)(nil)).Elem()
}

func (o GetPrivateZonesZoneOutput) ToGetPrivateZonesZoneOutput() GetPrivateZonesZoneOutput {
	return o
}

func (o GetPrivateZonesZoneOutput) ToGetPrivateZonesZoneOutputWithContext(ctx context.Context) GetPrivateZonesZoneOutput {
	return o
}

// The access region. The access region is the region of the cloud resource that accesses the PrivateZone service through CEN.
func (o GetPrivateZonesZoneOutput) AccessRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesZone) string { return v.AccessRegionId }).(pulumi.StringOutput)
}

// The ID of the CEN instance.
func (o GetPrivateZonesZoneOutput) CenId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesZone) string { return v.CenId }).(pulumi.StringOutput)
}

// The service region. The service region is the target region of the PrivateZone service accessed through CEN.
func (o GetPrivateZonesZoneOutput) HostRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesZone) string { return v.HostRegionId }).(pulumi.StringOutput)
}

// The VPC that belongs to the service region.
func (o GetPrivateZonesZoneOutput) HostVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesZone) string { return v.HostVpcId }).(pulumi.StringOutput)
}

// The DNS IP addresses of the PrivateZone service.
func (o GetPrivateZonesZoneOutput) PrivateZoneDnsServers() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesZone) string { return v.PrivateZoneDnsServers }).(pulumi.StringOutput)
}

// The status of the PrivateZone service, including `Creating`, `Active` and `Deleting`.
func (o GetPrivateZonesZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesZone) string { return v.Status }).(pulumi.StringOutput)
}

type GetPrivateZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateZonesZone)(nil)).Elem()
}

func (o GetPrivateZonesZoneArrayOutput) ToGetPrivateZonesZoneArrayOutput() GetPrivateZonesZoneArrayOutput {
	return o
}

func (o GetPrivateZonesZoneArrayOutput) ToGetPrivateZonesZoneArrayOutputWithContext(ctx context.Context) GetPrivateZonesZoneArrayOutput {
	return o
}

func (o GetPrivateZonesZoneArrayOutput) Index(i pulumi.IntInput) GetPrivateZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateZonesZone {
		return vs[0].([]GetPrivateZonesZone)[vs[1].(int)]
	}).(GetPrivateZonesZoneOutput)
}

type GetRegionRouteEntriesEntry struct {
	// The destination CIDR block of the route entry.
	CidrBlock string `pulumi:"cidrBlock"`
	// ID of the next hop.
	NextHopId string `pulumi:"nextHopId"`
	// ID of the region where the next hop is located.
	NextHopRegionId string `pulumi:"nextHopRegionId"`
	// Type of the next hop.
	NextHopType string `pulumi:"nextHopType"`
	// Type of the route entry.
	Type string `pulumi:"type"`
}

// GetRegionRouteEntriesEntryInput is an input type that accepts GetRegionRouteEntriesEntryArgs and GetRegionRouteEntriesEntryOutput values.
// You can construct a concrete instance of `GetRegionRouteEntriesEntryInput` via:
//
//          GetRegionRouteEntriesEntryArgs{...}
type GetRegionRouteEntriesEntryInput interface {
	pulumi.Input

	ToGetRegionRouteEntriesEntryOutput() GetRegionRouteEntriesEntryOutput
	ToGetRegionRouteEntriesEntryOutputWithContext(context.Context) GetRegionRouteEntriesEntryOutput
}

type GetRegionRouteEntriesEntryArgs struct {
	// The destination CIDR block of the route entry.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// ID of the next hop.
	NextHopId pulumi.StringInput `pulumi:"nextHopId"`
	// ID of the region where the next hop is located.
	NextHopRegionId pulumi.StringInput `pulumi:"nextHopRegionId"`
	// Type of the next hop.
	NextHopType pulumi.StringInput `pulumi:"nextHopType"`
	// Type of the route entry.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetRegionRouteEntriesEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionRouteEntriesEntry)(nil)).Elem()
}

func (i GetRegionRouteEntriesEntryArgs) ToGetRegionRouteEntriesEntryOutput() GetRegionRouteEntriesEntryOutput {
	return i.ToGetRegionRouteEntriesEntryOutputWithContext(context.Background())
}

func (i GetRegionRouteEntriesEntryArgs) ToGetRegionRouteEntriesEntryOutputWithContext(ctx context.Context) GetRegionRouteEntriesEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionRouteEntriesEntryOutput)
}

// GetRegionRouteEntriesEntryArrayInput is an input type that accepts GetRegionRouteEntriesEntryArray and GetRegionRouteEntriesEntryArrayOutput values.
// You can construct a concrete instance of `GetRegionRouteEntriesEntryArrayInput` via:
//
//          GetRegionRouteEntriesEntryArray{ GetRegionRouteEntriesEntryArgs{...} }
type GetRegionRouteEntriesEntryArrayInput interface {
	pulumi.Input

	ToGetRegionRouteEntriesEntryArrayOutput() GetRegionRouteEntriesEntryArrayOutput
	ToGetRegionRouteEntriesEntryArrayOutputWithContext(context.Context) GetRegionRouteEntriesEntryArrayOutput
}

type GetRegionRouteEntriesEntryArray []GetRegionRouteEntriesEntryInput

func (GetRegionRouteEntriesEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionRouteEntriesEntry)(nil)).Elem()
}

func (i GetRegionRouteEntriesEntryArray) ToGetRegionRouteEntriesEntryArrayOutput() GetRegionRouteEntriesEntryArrayOutput {
	return i.ToGetRegionRouteEntriesEntryArrayOutputWithContext(context.Background())
}

func (i GetRegionRouteEntriesEntryArray) ToGetRegionRouteEntriesEntryArrayOutputWithContext(ctx context.Context) GetRegionRouteEntriesEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionRouteEntriesEntryArrayOutput)
}

type GetRegionRouteEntriesEntryOutput struct{ *pulumi.OutputState }

func (GetRegionRouteEntriesEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionRouteEntriesEntry)(nil)).Elem()
}

func (o GetRegionRouteEntriesEntryOutput) ToGetRegionRouteEntriesEntryOutput() GetRegionRouteEntriesEntryOutput {
	return o
}

func (o GetRegionRouteEntriesEntryOutput) ToGetRegionRouteEntriesEntryOutputWithContext(ctx context.Context) GetRegionRouteEntriesEntryOutput {
	return o
}

// The destination CIDR block of the route entry.
func (o GetRegionRouteEntriesEntryOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRouteEntriesEntry) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// ID of the next hop.
func (o GetRegionRouteEntriesEntryOutput) NextHopId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRouteEntriesEntry) string { return v.NextHopId }).(pulumi.StringOutput)
}

// ID of the region where the next hop is located.
func (o GetRegionRouteEntriesEntryOutput) NextHopRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRouteEntriesEntry) string { return v.NextHopRegionId }).(pulumi.StringOutput)
}

// Type of the next hop.
func (o GetRegionRouteEntriesEntryOutput) NextHopType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRouteEntriesEntry) string { return v.NextHopType }).(pulumi.StringOutput)
}

// Type of the route entry.
func (o GetRegionRouteEntriesEntryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionRouteEntriesEntry) string { return v.Type }).(pulumi.StringOutput)
}

type GetRegionRouteEntriesEntryArrayOutput struct{ *pulumi.OutputState }

func (GetRegionRouteEntriesEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionRouteEntriesEntry)(nil)).Elem()
}

func (o GetRegionRouteEntriesEntryArrayOutput) ToGetRegionRouteEntriesEntryArrayOutput() GetRegionRouteEntriesEntryArrayOutput {
	return o
}

func (o GetRegionRouteEntriesEntryArrayOutput) ToGetRegionRouteEntriesEntryArrayOutputWithContext(ctx context.Context) GetRegionRouteEntriesEntryArrayOutput {
	return o
}

func (o GetRegionRouteEntriesEntryArrayOutput) Index(i pulumi.IntInput) GetRegionRouteEntriesEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionRouteEntriesEntry {
		return vs[0].([]GetRegionRouteEntriesEntry)[vs[1].(int)]
	}).(GetRegionRouteEntriesEntryOutput)
}

type GetRouteEntriesEntry struct {
	// The destination CIDR block of the route entry to query.
	CidrBlock string `pulumi:"cidrBlock"`
	// A list of conflicted Route Entries. Each element contains the following attributes:
	Conflicts []GetRouteEntriesEntryConflict `pulumi:"conflicts"`
	// ID of the next hop.
	NextHopId string `pulumi:"nextHopId"`
	// Type of the next hop, including "Instance", "HaVip" and "RouterInterface".
	NextHopType string `pulumi:"nextHopType"`
	// Whether to allow the route entry to be published or removed to or from CEN.
	OperationalMode bool `pulumi:"operationalMode"`
	// The publish status of the route entry in CEN, including "Published" and "NonPublished".
	PublishStatus string `pulumi:"publishStatus"`
	// ID of the route table of the VPC or VBR.
	RouteTableId string `pulumi:"routeTableId"`
	// Type of the route entry, including "System", "Custom" and "BGP".
	RouteType string `pulumi:"routeType"`
}

// GetRouteEntriesEntryInput is an input type that accepts GetRouteEntriesEntryArgs and GetRouteEntriesEntryOutput values.
// You can construct a concrete instance of `GetRouteEntriesEntryInput` via:
//
//          GetRouteEntriesEntryArgs{...}
type GetRouteEntriesEntryInput interface {
	pulumi.Input

	ToGetRouteEntriesEntryOutput() GetRouteEntriesEntryOutput
	ToGetRouteEntriesEntryOutputWithContext(context.Context) GetRouteEntriesEntryOutput
}

type GetRouteEntriesEntryArgs struct {
	// The destination CIDR block of the route entry to query.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// A list of conflicted Route Entries. Each element contains the following attributes:
	Conflicts GetRouteEntriesEntryConflictArrayInput `pulumi:"conflicts"`
	// ID of the next hop.
	NextHopId pulumi.StringInput `pulumi:"nextHopId"`
	// Type of the next hop, including "Instance", "HaVip" and "RouterInterface".
	NextHopType pulumi.StringInput `pulumi:"nextHopType"`
	// Whether to allow the route entry to be published or removed to or from CEN.
	OperationalMode pulumi.BoolInput `pulumi:"operationalMode"`
	// The publish status of the route entry in CEN, including "Published" and "NonPublished".
	PublishStatus pulumi.StringInput `pulumi:"publishStatus"`
	// ID of the route table of the VPC or VBR.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// Type of the route entry, including "System", "Custom" and "BGP".
	RouteType pulumi.StringInput `pulumi:"routeType"`
}

func (GetRouteEntriesEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteEntriesEntry)(nil)).Elem()
}

func (i GetRouteEntriesEntryArgs) ToGetRouteEntriesEntryOutput() GetRouteEntriesEntryOutput {
	return i.ToGetRouteEntriesEntryOutputWithContext(context.Background())
}

func (i GetRouteEntriesEntryArgs) ToGetRouteEntriesEntryOutputWithContext(ctx context.Context) GetRouteEntriesEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteEntriesEntryOutput)
}

// GetRouteEntriesEntryArrayInput is an input type that accepts GetRouteEntriesEntryArray and GetRouteEntriesEntryArrayOutput values.
// You can construct a concrete instance of `GetRouteEntriesEntryArrayInput` via:
//
//          GetRouteEntriesEntryArray{ GetRouteEntriesEntryArgs{...} }
type GetRouteEntriesEntryArrayInput interface {
	pulumi.Input

	ToGetRouteEntriesEntryArrayOutput() GetRouteEntriesEntryArrayOutput
	ToGetRouteEntriesEntryArrayOutputWithContext(context.Context) GetRouteEntriesEntryArrayOutput
}

type GetRouteEntriesEntryArray []GetRouteEntriesEntryInput

func (GetRouteEntriesEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteEntriesEntry)(nil)).Elem()
}

func (i GetRouteEntriesEntryArray) ToGetRouteEntriesEntryArrayOutput() GetRouteEntriesEntryArrayOutput {
	return i.ToGetRouteEntriesEntryArrayOutputWithContext(context.Background())
}

func (i GetRouteEntriesEntryArray) ToGetRouteEntriesEntryArrayOutputWithContext(ctx context.Context) GetRouteEntriesEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteEntriesEntryArrayOutput)
}

type GetRouteEntriesEntryOutput struct{ *pulumi.OutputState }

func (GetRouteEntriesEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteEntriesEntry)(nil)).Elem()
}

func (o GetRouteEntriesEntryOutput) ToGetRouteEntriesEntryOutput() GetRouteEntriesEntryOutput {
	return o
}

func (o GetRouteEntriesEntryOutput) ToGetRouteEntriesEntryOutputWithContext(ctx context.Context) GetRouteEntriesEntryOutput {
	return o
}

// The destination CIDR block of the route entry to query.
func (o GetRouteEntriesEntryOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// A list of conflicted Route Entries. Each element contains the following attributes:
func (o GetRouteEntriesEntryOutput) Conflicts() GetRouteEntriesEntryConflictArrayOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) []GetRouteEntriesEntryConflict { return v.Conflicts }).(GetRouteEntriesEntryConflictArrayOutput)
}

// ID of the next hop.
func (o GetRouteEntriesEntryOutput) NextHopId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.NextHopId }).(pulumi.StringOutput)
}

// Type of the next hop, including "Instance", "HaVip" and "RouterInterface".
func (o GetRouteEntriesEntryOutput) NextHopType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.NextHopType }).(pulumi.StringOutput)
}

// Whether to allow the route entry to be published or removed to or from CEN.
func (o GetRouteEntriesEntryOutput) OperationalMode() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) bool { return v.OperationalMode }).(pulumi.BoolOutput)
}

// The publish status of the route entry in CEN, including "Published" and "NonPublished".
func (o GetRouteEntriesEntryOutput) PublishStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.PublishStatus }).(pulumi.StringOutput)
}

// ID of the route table of the VPC or VBR.
func (o GetRouteEntriesEntryOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// Type of the route entry, including "System", "Custom" and "BGP".
func (o GetRouteEntriesEntryOutput) RouteType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.RouteType }).(pulumi.StringOutput)
}

type GetRouteEntriesEntryArrayOutput struct{ *pulumi.OutputState }

func (GetRouteEntriesEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteEntriesEntry)(nil)).Elem()
}

func (o GetRouteEntriesEntryArrayOutput) ToGetRouteEntriesEntryArrayOutput() GetRouteEntriesEntryArrayOutput {
	return o
}

func (o GetRouteEntriesEntryArrayOutput) ToGetRouteEntriesEntryArrayOutputWithContext(ctx context.Context) GetRouteEntriesEntryArrayOutput {
	return o
}

func (o GetRouteEntriesEntryArrayOutput) Index(i pulumi.IntInput) GetRouteEntriesEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteEntriesEntry {
		return vs[0].([]GetRouteEntriesEntry)[vs[1].(int)]
	}).(GetRouteEntriesEntryOutput)
}

type GetRouteEntriesEntryConflict struct {
	// The destination CIDR block of the route entry to query.
	CidrBlock string `pulumi:"cidrBlock"`
	// ID of the CEN instance.
	InstanceId string `pulumi:"instanceId"`
	// The type of the CEN child instance.
	InstanceType string `pulumi:"instanceType"`
	// ID of the region where the conflicted route entry is located.
	RegionId string `pulumi:"regionId"`
	// Reasons of exceptions.
	Status string `pulumi:"status"`
}

// GetRouteEntriesEntryConflictInput is an input type that accepts GetRouteEntriesEntryConflictArgs and GetRouteEntriesEntryConflictOutput values.
// You can construct a concrete instance of `GetRouteEntriesEntryConflictInput` via:
//
//          GetRouteEntriesEntryConflictArgs{...}
type GetRouteEntriesEntryConflictInput interface {
	pulumi.Input

	ToGetRouteEntriesEntryConflictOutput() GetRouteEntriesEntryConflictOutput
	ToGetRouteEntriesEntryConflictOutputWithContext(context.Context) GetRouteEntriesEntryConflictOutput
}

type GetRouteEntriesEntryConflictArgs struct {
	// The destination CIDR block of the route entry to query.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// ID of the CEN instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The type of the CEN child instance.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// ID of the region where the conflicted route entry is located.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// Reasons of exceptions.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetRouteEntriesEntryConflictArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteEntriesEntryConflict)(nil)).Elem()
}

func (i GetRouteEntriesEntryConflictArgs) ToGetRouteEntriesEntryConflictOutput() GetRouteEntriesEntryConflictOutput {
	return i.ToGetRouteEntriesEntryConflictOutputWithContext(context.Background())
}

func (i GetRouteEntriesEntryConflictArgs) ToGetRouteEntriesEntryConflictOutputWithContext(ctx context.Context) GetRouteEntriesEntryConflictOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteEntriesEntryConflictOutput)
}

// GetRouteEntriesEntryConflictArrayInput is an input type that accepts GetRouteEntriesEntryConflictArray and GetRouteEntriesEntryConflictArrayOutput values.
// You can construct a concrete instance of `GetRouteEntriesEntryConflictArrayInput` via:
//
//          GetRouteEntriesEntryConflictArray{ GetRouteEntriesEntryConflictArgs{...} }
type GetRouteEntriesEntryConflictArrayInput interface {
	pulumi.Input

	ToGetRouteEntriesEntryConflictArrayOutput() GetRouteEntriesEntryConflictArrayOutput
	ToGetRouteEntriesEntryConflictArrayOutputWithContext(context.Context) GetRouteEntriesEntryConflictArrayOutput
}

type GetRouteEntriesEntryConflictArray []GetRouteEntriesEntryConflictInput

func (GetRouteEntriesEntryConflictArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteEntriesEntryConflict)(nil)).Elem()
}

func (i GetRouteEntriesEntryConflictArray) ToGetRouteEntriesEntryConflictArrayOutput() GetRouteEntriesEntryConflictArrayOutput {
	return i.ToGetRouteEntriesEntryConflictArrayOutputWithContext(context.Background())
}

func (i GetRouteEntriesEntryConflictArray) ToGetRouteEntriesEntryConflictArrayOutputWithContext(ctx context.Context) GetRouteEntriesEntryConflictArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteEntriesEntryConflictArrayOutput)
}

type GetRouteEntriesEntryConflictOutput struct{ *pulumi.OutputState }

func (GetRouteEntriesEntryConflictOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteEntriesEntryConflict)(nil)).Elem()
}

func (o GetRouteEntriesEntryConflictOutput) ToGetRouteEntriesEntryConflictOutput() GetRouteEntriesEntryConflictOutput {
	return o
}

func (o GetRouteEntriesEntryConflictOutput) ToGetRouteEntriesEntryConflictOutputWithContext(ctx context.Context) GetRouteEntriesEntryConflictOutput {
	return o
}

// The destination CIDR block of the route entry to query.
func (o GetRouteEntriesEntryConflictOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntryConflict) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// ID of the CEN instance.
func (o GetRouteEntriesEntryConflictOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntryConflict) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The type of the CEN child instance.
func (o GetRouteEntriesEntryConflictOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntryConflict) string { return v.InstanceType }).(pulumi.StringOutput)
}

// ID of the region where the conflicted route entry is located.
func (o GetRouteEntriesEntryConflictOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntryConflict) string { return v.RegionId }).(pulumi.StringOutput)
}

// Reasons of exceptions.
func (o GetRouteEntriesEntryConflictOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntryConflict) string { return v.Status }).(pulumi.StringOutput)
}

type GetRouteEntriesEntryConflictArrayOutput struct{ *pulumi.OutputState }

func (GetRouteEntriesEntryConflictArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteEntriesEntryConflict)(nil)).Elem()
}

func (o GetRouteEntriesEntryConflictArrayOutput) ToGetRouteEntriesEntryConflictArrayOutput() GetRouteEntriesEntryConflictArrayOutput {
	return o
}

func (o GetRouteEntriesEntryConflictArrayOutput) ToGetRouteEntriesEntryConflictArrayOutputWithContext(ctx context.Context) GetRouteEntriesEntryConflictArrayOutput {
	return o
}

func (o GetRouteEntriesEntryConflictArrayOutput) Index(i pulumi.IntInput) GetRouteEntriesEntryConflictOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteEntriesEntryConflict {
		return vs[0].([]GetRouteEntriesEntryConflict)[vs[1].(int)]
	}).(GetRouteEntriesEntryConflictOutput)
}

type GetRouteMapsMap struct {
	// A match statement. It indicates the mode in which the as-path attribute is matched.
	AsPathMatchMode string `pulumi:"asPathMatchMode"`
	// The ID of the CEN instance.
	CenId string `pulumi:"cenId"`
	// The ID of the region to which the CEN instance belongs.
	CenRegionId string `pulumi:"cenRegionId"`
	// A match statement. It indicates the mode in which the prefix attribute is matched.
	CidrMatchMode string `pulumi:"cidrMatchMode"`
	// A match statement. It indicates the mode in which the community attribute is matched.
	CommunityMatchMode string `pulumi:"communityMatchMode"`
	// An action statement. It indicates the mode in which the community attribute is operated.
	CommunityOperateMode string `pulumi:"communityOperateMode"`
	// The description of the route map.
	Description string `pulumi:"description"`
	// A match statement that indicates the list of IDs of the destination instances.
	DestinationChildInstanceTypes []string `pulumi:"destinationChildInstanceTypes"`
	// A match statement that indicates the prefix list.
	DestinationCidrBlocks []string `pulumi:"destinationCidrBlocks"`
	// A match statement that indicates the list of IDs of the destination instances.
	DestinationInstanceIds []string `pulumi:"destinationInstanceIds"`
	// Indicates whether to enable the reverse match method of the DestinationInstanceIds match condition.
	DestinationInstanceIdsReverseMatch bool `pulumi:"destinationInstanceIdsReverseMatch"`
	// A match statement that indicates the list of IDs of the destination route tables.
	DestinationRouteTableIds []string `pulumi:"destinationRouteTableIds"`
	// The ID of the route map.
	Id string `pulumi:"id"`
	// The action that is performed to a route if the route meets all the match conditions.
	MapResult string `pulumi:"mapResult"`
	// A match statement that indicates the As path list.
	MatchAsns []string `pulumi:"matchAsns"`
	// A match statement that indicates the community set.
	MatchCommunitySets []string `pulumi:"matchCommunitySets"`
	// The priority of the next route map that is associated with the current route map.
	NextPriority int `pulumi:"nextPriority"`
	// An action statement that operates the community attribute.
	OperateCommunitySets []string `pulumi:"operateCommunitySets"`
	// An action statement that modifies the preference of the route.
	Preference int `pulumi:"preference"`
	// Indicates AS Path prepending when a regional gateway receives or publishes a route.
	PrependAsPaths []string `pulumi:"prependAsPaths"`
	// The priority of the route map.
	Priority int `pulumi:"priority"`
	// The ID of the route map.
	RouteMapId string `pulumi:"routeMapId"`
	// A match statement that indicates the list of route types.
	RouteTypes []string `pulumi:"routeTypes"`
	// A match statement that indicates the list of IDs of the source instances.
	SourceChildInstanceTypes []string `pulumi:"sourceChildInstanceTypes"`
	// A match statement that indicates the list of IDs of the source instances.
	SourceInstanceIds []string `pulumi:"sourceInstanceIds"`
	// Indicates whether to enable the reverse match method of the SourceInstanceIds match condition.
	SourceInstanceIdsReverseMatch bool `pulumi:"sourceInstanceIdsReverseMatch"`
	// A match statement that indicates the list of IDs of the source regions.
	SourceRegionIds []string `pulumi:"sourceRegionIds"`
	// A match statement that indicates the list of IDs of the source route tables.
	SourceRouteTableIds []string `pulumi:"sourceRouteTableIds"`
	// The status of the route map, including `Creating`, `Active` and `Deleting`.
	Status string `pulumi:"status"`
	// The direction in which the route map is applied, including `RegionIn` and `RegionOut`.
	TransmitDirection string `pulumi:"transmitDirection"`
}

// GetRouteMapsMapInput is an input type that accepts GetRouteMapsMap and GetRouteMapsMapOutput values.
// You can construct a concrete instance of `GetRouteMapsMapInput` via:
//
//          GetRouteMapsMap{ "key": GetRouteMapsArgs{...} }
type GetRouteMapsMapInput interface {
	pulumi.Input

	ToGetRouteMapsMapOutput() GetRouteMapsMapOutput
	ToGetRouteMapsMapOutputWithContext(context.Context) GetRouteMapsMapOutput
}

type GetRouteMapsMapArgs struct {
	// A match statement. It indicates the mode in which the as-path attribute is matched.
	AsPathMatchMode pulumi.StringInput `pulumi:"asPathMatchMode"`
	// The ID of the CEN instance.
	CenId pulumi.StringInput `pulumi:"cenId"`
	// The ID of the region to which the CEN instance belongs.
	CenRegionId pulumi.StringInput `pulumi:"cenRegionId"`
	// A match statement. It indicates the mode in which the prefix attribute is matched.
	CidrMatchMode pulumi.StringInput `pulumi:"cidrMatchMode"`
	// A match statement. It indicates the mode in which the community attribute is matched.
	CommunityMatchMode pulumi.StringInput `pulumi:"communityMatchMode"`
	// An action statement. It indicates the mode in which the community attribute is operated.
	CommunityOperateMode pulumi.StringInput `pulumi:"communityOperateMode"`
	// The description of the route map.
	Description pulumi.StringInput `pulumi:"description"`
	// A match statement that indicates the list of IDs of the destination instances.
	DestinationChildInstanceTypes pulumi.StringArrayInput `pulumi:"destinationChildInstanceTypes"`
	// A match statement that indicates the prefix list.
	DestinationCidrBlocks pulumi.StringArrayInput `pulumi:"destinationCidrBlocks"`
	// A match statement that indicates the list of IDs of the destination instances.
	DestinationInstanceIds pulumi.StringArrayInput `pulumi:"destinationInstanceIds"`
	// Indicates whether to enable the reverse match method of the DestinationInstanceIds match condition.
	DestinationInstanceIdsReverseMatch pulumi.BoolInput `pulumi:"destinationInstanceIdsReverseMatch"`
	// A match statement that indicates the list of IDs of the destination route tables.
	DestinationRouteTableIds pulumi.StringArrayInput `pulumi:"destinationRouteTableIds"`
	// The ID of the route map.
	Id pulumi.StringInput `pulumi:"id"`
	// The action that is performed to a route if the route meets all the match conditions.
	MapResult pulumi.StringInput `pulumi:"mapResult"`
	// A match statement that indicates the As path list.
	MatchAsns pulumi.StringArrayInput `pulumi:"matchAsns"`
	// A match statement that indicates the community set.
	MatchCommunitySets pulumi.StringArrayInput `pulumi:"matchCommunitySets"`
	// The priority of the next route map that is associated with the current route map.
	NextPriority pulumi.IntInput `pulumi:"nextPriority"`
	// An action statement that operates the community attribute.
	OperateCommunitySets pulumi.StringArrayInput `pulumi:"operateCommunitySets"`
	// An action statement that modifies the preference of the route.
	Preference pulumi.IntInput `pulumi:"preference"`
	// Indicates AS Path prepending when a regional gateway receives or publishes a route.
	PrependAsPaths pulumi.StringArrayInput `pulumi:"prependAsPaths"`
	// The priority of the route map.
	Priority pulumi.IntInput `pulumi:"priority"`
	// The ID of the route map.
	RouteMapId pulumi.StringInput `pulumi:"routeMapId"`
	// A match statement that indicates the list of route types.
	RouteTypes pulumi.StringArrayInput `pulumi:"routeTypes"`
	// A match statement that indicates the list of IDs of the source instances.
	SourceChildInstanceTypes pulumi.StringArrayInput `pulumi:"sourceChildInstanceTypes"`
	// A match statement that indicates the list of IDs of the source instances.
	SourceInstanceIds pulumi.StringArrayInput `pulumi:"sourceInstanceIds"`
	// Indicates whether to enable the reverse match method of the SourceInstanceIds match condition.
	SourceInstanceIdsReverseMatch pulumi.BoolInput `pulumi:"sourceInstanceIdsReverseMatch"`
	// A match statement that indicates the list of IDs of the source regions.
	SourceRegionIds pulumi.StringArrayInput `pulumi:"sourceRegionIds"`
	// A match statement that indicates the list of IDs of the source route tables.
	SourceRouteTableIds pulumi.StringArrayInput `pulumi:"sourceRouteTableIds"`
	// The status of the route map, including `Creating`, `Active` and `Deleting`.
	Status pulumi.StringInput `pulumi:"status"`
	// The direction in which the route map is applied, including `RegionIn` and `RegionOut`.
	TransmitDirection pulumi.StringInput `pulumi:"transmitDirection"`
}

func (GetRouteMapsMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteMapsMap)(nil)).Elem()
}

func (i GetRouteMapsMapArgs) ToGetRouteMapsMapOutput() GetRouteMapsMapOutput {
	return i.ToGetRouteMapsMapOutputWithContext(context.Background())
}

func (i GetRouteMapsMapArgs) ToGetRouteMapsMapOutputWithContext(ctx context.Context) GetRouteMapsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteMapsMapOutput)
}

// GetRouteMapsMapArrayInput is an input type that accepts GetRouteMapsMapArray and GetRouteMapsMapArrayOutput values.
// You can construct a concrete instance of `GetRouteMapsMapArrayInput` via:
//
//          GetRouteMapsMapArray{ GetRouteMapsMap{ "key": GetRouteMapsArgs{...} } }
type GetRouteMapsMapArrayInput interface {
	pulumi.Input

	ToGetRouteMapsMapArrayOutput() GetRouteMapsMapArrayOutput
	ToGetRouteMapsMapArrayOutputWithContext(context.Context) GetRouteMapsMapArrayOutput
}

type GetRouteMapsMapArray []GetRouteMapsMapInput

func (GetRouteMapsMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteMapsMap)(nil)).Elem()
}

func (i GetRouteMapsMapArray) ToGetRouteMapsMapArrayOutput() GetRouteMapsMapArrayOutput {
	return i.ToGetRouteMapsMapArrayOutputWithContext(context.Background())
}

func (i GetRouteMapsMapArray) ToGetRouteMapsMapArrayOutputWithContext(ctx context.Context) GetRouteMapsMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteMapsMapArrayOutput)
}

type GetRouteMapsMapOutput struct{ *pulumi.OutputState }

func (GetRouteMapsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteMapsMap)(nil)).Elem()
}

func (o GetRouteMapsMapOutput) ToGetRouteMapsMapOutput() GetRouteMapsMapOutput {
	return o
}

func (o GetRouteMapsMapOutput) ToGetRouteMapsMapOutputWithContext(ctx context.Context) GetRouteMapsMapOutput {
	return o
}

// A match statement. It indicates the mode in which the as-path attribute is matched.
func (o GetRouteMapsMapOutput) AsPathMatchMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapsMap) string { return v.AsPathMatchMode }).(pulumi.StringOutput)
}

// The ID of the CEN instance.
func (o GetRouteMapsMapOutput) CenId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapsMap) string { return v.CenId }).(pulumi.StringOutput)
}

// The ID of the region to which the CEN instance belongs.
func (o GetRouteMapsMapOutput) CenRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapsMap) string { return v.CenRegionId }).(pulumi.StringOutput)
}

// A match statement. It indicates the mode in which the prefix attribute is matched.
func (o GetRouteMapsMapOutput) CidrMatchMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapsMap) string { return v.CidrMatchMode }).(pulumi.StringOutput)
}

// A match statement. It indicates the mode in which the community attribute is matched.
func (o GetRouteMapsMapOutput) CommunityMatchMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapsMap) string { return v.CommunityMatchMode }).(pulumi.StringOutput)
}

// An action statement. It indicates the mode in which the community attribute is operated.
func (o GetRouteMapsMapOutput) CommunityOperateMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapsMap) string { return v.CommunityOperateMode }).(pulumi.StringOutput)
}

// The description of the route map.
func (o GetRouteMapsMapOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapsMap) string { return v.Description }).(pulumi.StringOutput)
}

// A match statement that indicates the list of IDs of the destination instances.
func (o GetRouteMapsMapOutput) DestinationChildInstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.DestinationChildInstanceTypes }).(pulumi.StringArrayOutput)
}

// A match statement that indicates the prefix list.
func (o GetRouteMapsMapOutput) DestinationCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.DestinationCidrBlocks }).(pulumi.StringArrayOutput)
}

// A match statement that indicates the list of IDs of the destination instances.
func (o GetRouteMapsMapOutput) DestinationInstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.DestinationInstanceIds }).(pulumi.StringArrayOutput)
}

// Indicates whether to enable the reverse match method of the DestinationInstanceIds match condition.
func (o GetRouteMapsMapOutput) DestinationInstanceIdsReverseMatch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapsMap) bool { return v.DestinationInstanceIdsReverseMatch }).(pulumi.BoolOutput)
}

// A match statement that indicates the list of IDs of the destination route tables.
func (o GetRouteMapsMapOutput) DestinationRouteTableIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.DestinationRouteTableIds }).(pulumi.StringArrayOutput)
}

// The ID of the route map.
func (o GetRouteMapsMapOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapsMap) string { return v.Id }).(pulumi.StringOutput)
}

// The action that is performed to a route if the route meets all the match conditions.
func (o GetRouteMapsMapOutput) MapResult() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapsMap) string { return v.MapResult }).(pulumi.StringOutput)
}

// A match statement that indicates the As path list.
func (o GetRouteMapsMapOutput) MatchAsns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.MatchAsns }).(pulumi.StringArrayOutput)
}

// A match statement that indicates the community set.
func (o GetRouteMapsMapOutput) MatchCommunitySets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.MatchCommunitySets }).(pulumi.StringArrayOutput)
}

// The priority of the next route map that is associated with the current route map.
func (o GetRouteMapsMapOutput) NextPriority() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapsMap) int { return v.NextPriority }).(pulumi.IntOutput)
}

// An action statement that operates the community attribute.
func (o GetRouteMapsMapOutput) OperateCommunitySets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.OperateCommunitySets }).(pulumi.StringArrayOutput)
}

// An action statement that modifies the preference of the route.
func (o GetRouteMapsMapOutput) Preference() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapsMap) int { return v.Preference }).(pulumi.IntOutput)
}

// Indicates AS Path prepending when a regional gateway receives or publishes a route.
func (o GetRouteMapsMapOutput) PrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.PrependAsPaths }).(pulumi.StringArrayOutput)
}

// The priority of the route map.
func (o GetRouteMapsMapOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapsMap) int { return v.Priority }).(pulumi.IntOutput)
}

// The ID of the route map.
func (o GetRouteMapsMapOutput) RouteMapId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapsMap) string { return v.RouteMapId }).(pulumi.StringOutput)
}

// A match statement that indicates the list of route types.
func (o GetRouteMapsMapOutput) RouteTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.RouteTypes }).(pulumi.StringArrayOutput)
}

// A match statement that indicates the list of IDs of the source instances.
func (o GetRouteMapsMapOutput) SourceChildInstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.SourceChildInstanceTypes }).(pulumi.StringArrayOutput)
}

// A match statement that indicates the list of IDs of the source instances.
func (o GetRouteMapsMapOutput) SourceInstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.SourceInstanceIds }).(pulumi.StringArrayOutput)
}

// Indicates whether to enable the reverse match method of the SourceInstanceIds match condition.
func (o GetRouteMapsMapOutput) SourceInstanceIdsReverseMatch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapsMap) bool { return v.SourceInstanceIdsReverseMatch }).(pulumi.BoolOutput)
}

// A match statement that indicates the list of IDs of the source regions.
func (o GetRouteMapsMapOutput) SourceRegionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.SourceRegionIds }).(pulumi.StringArrayOutput)
}

// A match statement that indicates the list of IDs of the source route tables.
func (o GetRouteMapsMapOutput) SourceRouteTableIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapsMap) []string { return v.SourceRouteTableIds }).(pulumi.StringArrayOutput)
}

// The status of the route map, including `Creating`, `Active` and `Deleting`.
func (o GetRouteMapsMapOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapsMap) string { return v.Status }).(pulumi.StringOutput)
}

// The direction in which the route map is applied, including `RegionIn` and `RegionOut`.
func (o GetRouteMapsMapOutput) TransmitDirection() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapsMap) string { return v.TransmitDirection }).(pulumi.StringOutput)
}

type GetRouteMapsMapArrayOutput struct{ *pulumi.OutputState }

func (GetRouteMapsMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteMapsMap)(nil)).Elem()
}

func (o GetRouteMapsMapArrayOutput) ToGetRouteMapsMapArrayOutput() GetRouteMapsMapArrayOutput {
	return o
}

func (o GetRouteMapsMapArrayOutput) ToGetRouteMapsMapArrayOutputWithContext(ctx context.Context) GetRouteMapsMapArrayOutput {
	return o
}

func (o GetRouteMapsMapArrayOutput) Index(i pulumi.IntInput) GetRouteMapsMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteMapsMap {
		return vs[0].([]GetRouteMapsMap)[vs[1].(int)]
	}).(GetRouteMapsMapOutput)
}

type GetRouteServicesService struct {
	// The region of the network instances that access the cloud services.
	AccessRegionId string `pulumi:"accessRegionId"`
	// -(Required, ForceNew) The ID of the CEN instance.
	CenId string `pulumi:"cenId"`
	// The IP address of the cloud service.
	Cidrs []string `pulumi:"cidrs"`
	// The description of the cloud service.
	Description string `pulumi:"description"`
	// -(Optional, ForceNew) The domain name or IP address of the cloud service.
	Host string `pulumi:"host"`
	// The region of the cloud service.
	HostRegionId string `pulumi:"hostRegionId"`
	// The VPC associated with the cloud service.
	HostVpcId string `pulumi:"hostVpcId"`
	// The ID of the route service.
	Id string `pulumi:"id"`
	// The status of the cloud service. Valid values: `Active`, `Creating` and `Deleting`.
	Status string `pulumi:"status"`
	// The update interval. Default value: 5. The value cannot be modified.
	UpdateInterval string `pulumi:"updateInterval"`
}

// GetRouteServicesServiceInput is an input type that accepts GetRouteServicesServiceArgs and GetRouteServicesServiceOutput values.
// You can construct a concrete instance of `GetRouteServicesServiceInput` via:
//
//          GetRouteServicesServiceArgs{...}
type GetRouteServicesServiceInput interface {
	pulumi.Input

	ToGetRouteServicesServiceOutput() GetRouteServicesServiceOutput
	ToGetRouteServicesServiceOutputWithContext(context.Context) GetRouteServicesServiceOutput
}

type GetRouteServicesServiceArgs struct {
	// The region of the network instances that access the cloud services.
	AccessRegionId pulumi.StringInput `pulumi:"accessRegionId"`
	// -(Required, ForceNew) The ID of the CEN instance.
	CenId pulumi.StringInput `pulumi:"cenId"`
	// The IP address of the cloud service.
	Cidrs pulumi.StringArrayInput `pulumi:"cidrs"`
	// The description of the cloud service.
	Description pulumi.StringInput `pulumi:"description"`
	// -(Optional, ForceNew) The domain name or IP address of the cloud service.
	Host pulumi.StringInput `pulumi:"host"`
	// The region of the cloud service.
	HostRegionId pulumi.StringInput `pulumi:"hostRegionId"`
	// The VPC associated with the cloud service.
	HostVpcId pulumi.StringInput `pulumi:"hostVpcId"`
	// The ID of the route service.
	Id pulumi.StringInput `pulumi:"id"`
	// The status of the cloud service. Valid values: `Active`, `Creating` and `Deleting`.
	Status pulumi.StringInput `pulumi:"status"`
	// The update interval. Default value: 5. The value cannot be modified.
	UpdateInterval pulumi.StringInput `pulumi:"updateInterval"`
}

func (GetRouteServicesServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteServicesService)(nil)).Elem()
}

func (i GetRouteServicesServiceArgs) ToGetRouteServicesServiceOutput() GetRouteServicesServiceOutput {
	return i.ToGetRouteServicesServiceOutputWithContext(context.Background())
}

func (i GetRouteServicesServiceArgs) ToGetRouteServicesServiceOutputWithContext(ctx context.Context) GetRouteServicesServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteServicesServiceOutput)
}

// GetRouteServicesServiceArrayInput is an input type that accepts GetRouteServicesServiceArray and GetRouteServicesServiceArrayOutput values.
// You can construct a concrete instance of `GetRouteServicesServiceArrayInput` via:
//
//          GetRouteServicesServiceArray{ GetRouteServicesServiceArgs{...} }
type GetRouteServicesServiceArrayInput interface {
	pulumi.Input

	ToGetRouteServicesServiceArrayOutput() GetRouteServicesServiceArrayOutput
	ToGetRouteServicesServiceArrayOutputWithContext(context.Context) GetRouteServicesServiceArrayOutput
}

type GetRouteServicesServiceArray []GetRouteServicesServiceInput

func (GetRouteServicesServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteServicesService)(nil)).Elem()
}

func (i GetRouteServicesServiceArray) ToGetRouteServicesServiceArrayOutput() GetRouteServicesServiceArrayOutput {
	return i.ToGetRouteServicesServiceArrayOutputWithContext(context.Background())
}

func (i GetRouteServicesServiceArray) ToGetRouteServicesServiceArrayOutputWithContext(ctx context.Context) GetRouteServicesServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteServicesServiceArrayOutput)
}

type GetRouteServicesServiceOutput struct{ *pulumi.OutputState }

func (GetRouteServicesServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteServicesService)(nil)).Elem()
}

func (o GetRouteServicesServiceOutput) ToGetRouteServicesServiceOutput() GetRouteServicesServiceOutput {
	return o
}

func (o GetRouteServicesServiceOutput) ToGetRouteServicesServiceOutputWithContext(ctx context.Context) GetRouteServicesServiceOutput {
	return o
}

// The region of the network instances that access the cloud services.
func (o GetRouteServicesServiceOutput) AccessRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteServicesService) string { return v.AccessRegionId }).(pulumi.StringOutput)
}

// -(Required, ForceNew) The ID of the CEN instance.
func (o GetRouteServicesServiceOutput) CenId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteServicesService) string { return v.CenId }).(pulumi.StringOutput)
}

// The IP address of the cloud service.
func (o GetRouteServicesServiceOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteServicesService) []string { return v.Cidrs }).(pulumi.StringArrayOutput)
}

// The description of the cloud service.
func (o GetRouteServicesServiceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteServicesService) string { return v.Description }).(pulumi.StringOutput)
}

// -(Optional, ForceNew) The domain name or IP address of the cloud service.
func (o GetRouteServicesServiceOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteServicesService) string { return v.Host }).(pulumi.StringOutput)
}

// The region of the cloud service.
func (o GetRouteServicesServiceOutput) HostRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteServicesService) string { return v.HostRegionId }).(pulumi.StringOutput)
}

// The VPC associated with the cloud service.
func (o GetRouteServicesServiceOutput) HostVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteServicesService) string { return v.HostVpcId }).(pulumi.StringOutput)
}

// The ID of the route service.
func (o GetRouteServicesServiceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteServicesService) string { return v.Id }).(pulumi.StringOutput)
}

// The status of the cloud service. Valid values: `Active`, `Creating` and `Deleting`.
func (o GetRouteServicesServiceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteServicesService) string { return v.Status }).(pulumi.StringOutput)
}

// The update interval. Default value: 5. The value cannot be modified.
func (o GetRouteServicesServiceOutput) UpdateInterval() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteServicesService) string { return v.UpdateInterval }).(pulumi.StringOutput)
}

type GetRouteServicesServiceArrayOutput struct{ *pulumi.OutputState }

func (GetRouteServicesServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteServicesService)(nil)).Elem()
}

func (o GetRouteServicesServiceArrayOutput) ToGetRouteServicesServiceArrayOutput() GetRouteServicesServiceArrayOutput {
	return o
}

func (o GetRouteServicesServiceArrayOutput) ToGetRouteServicesServiceArrayOutputWithContext(ctx context.Context) GetRouteServicesServiceArrayOutput {
	return o
}

func (o GetRouteServicesServiceArrayOutput) Index(i pulumi.IntInput) GetRouteServicesServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteServicesService {
		return vs[0].([]GetRouteServicesService)[vs[1].(int)]
	}).(GetRouteServicesServiceOutput)
}

type GetVbrHealthChecksCheck struct {
	// The ID of the Cloud Enterprise Network (CEN) instance.
	CenId string `pulumi:"cenId"`
	// The time interval at which probe packets are sent during the health check.
	HealthCheckInterval int `pulumi:"healthCheckInterval"`
	// The source IP address of the health check.
	HealthCheckSourceIp string `pulumi:"healthCheckSourceIp"`
	// The destination IP address of the health check.
	HealthCheckTargetIp string `pulumi:"healthCheckTargetIp"`
	// The number of probe packets that are sent during the health check.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// The ID of the CEN VBR Heath Check.
	Id string `pulumi:"id"`
	// The ID of the VBR instance.
	VbrInstanceId string `pulumi:"vbrInstanceId"`
	// The ID of the region where the VBR instance is deployed.
	VbrInstanceRegionId string `pulumi:"vbrInstanceRegionId"`
}

// GetVbrHealthChecksCheckInput is an input type that accepts GetVbrHealthChecksCheckArgs and GetVbrHealthChecksCheckOutput values.
// You can construct a concrete instance of `GetVbrHealthChecksCheckInput` via:
//
//          GetVbrHealthChecksCheckArgs{...}
type GetVbrHealthChecksCheckInput interface {
	pulumi.Input

	ToGetVbrHealthChecksCheckOutput() GetVbrHealthChecksCheckOutput
	ToGetVbrHealthChecksCheckOutputWithContext(context.Context) GetVbrHealthChecksCheckOutput
}

type GetVbrHealthChecksCheckArgs struct {
	// The ID of the Cloud Enterprise Network (CEN) instance.
	CenId pulumi.StringInput `pulumi:"cenId"`
	// The time interval at which probe packets are sent during the health check.
	HealthCheckInterval pulumi.IntInput `pulumi:"healthCheckInterval"`
	// The source IP address of the health check.
	HealthCheckSourceIp pulumi.StringInput `pulumi:"healthCheckSourceIp"`
	// The destination IP address of the health check.
	HealthCheckTargetIp pulumi.StringInput `pulumi:"healthCheckTargetIp"`
	// The number of probe packets that are sent during the health check.
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	// The ID of the CEN VBR Heath Check.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the VBR instance.
	VbrInstanceId pulumi.StringInput `pulumi:"vbrInstanceId"`
	// The ID of the region where the VBR instance is deployed.
	VbrInstanceRegionId pulumi.StringInput `pulumi:"vbrInstanceRegionId"`
}

func (GetVbrHealthChecksCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVbrHealthChecksCheck)(nil)).Elem()
}

func (i GetVbrHealthChecksCheckArgs) ToGetVbrHealthChecksCheckOutput() GetVbrHealthChecksCheckOutput {
	return i.ToGetVbrHealthChecksCheckOutputWithContext(context.Background())
}

func (i GetVbrHealthChecksCheckArgs) ToGetVbrHealthChecksCheckOutputWithContext(ctx context.Context) GetVbrHealthChecksCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVbrHealthChecksCheckOutput)
}

// GetVbrHealthChecksCheckArrayInput is an input type that accepts GetVbrHealthChecksCheckArray and GetVbrHealthChecksCheckArrayOutput values.
// You can construct a concrete instance of `GetVbrHealthChecksCheckArrayInput` via:
//
//          GetVbrHealthChecksCheckArray{ GetVbrHealthChecksCheckArgs{...} }
type GetVbrHealthChecksCheckArrayInput interface {
	pulumi.Input

	ToGetVbrHealthChecksCheckArrayOutput() GetVbrHealthChecksCheckArrayOutput
	ToGetVbrHealthChecksCheckArrayOutputWithContext(context.Context) GetVbrHealthChecksCheckArrayOutput
}

type GetVbrHealthChecksCheckArray []GetVbrHealthChecksCheckInput

func (GetVbrHealthChecksCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVbrHealthChecksCheck)(nil)).Elem()
}

func (i GetVbrHealthChecksCheckArray) ToGetVbrHealthChecksCheckArrayOutput() GetVbrHealthChecksCheckArrayOutput {
	return i.ToGetVbrHealthChecksCheckArrayOutputWithContext(context.Background())
}

func (i GetVbrHealthChecksCheckArray) ToGetVbrHealthChecksCheckArrayOutputWithContext(ctx context.Context) GetVbrHealthChecksCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVbrHealthChecksCheckArrayOutput)
}

type GetVbrHealthChecksCheckOutput struct{ *pulumi.OutputState }

func (GetVbrHealthChecksCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVbrHealthChecksCheck)(nil)).Elem()
}

func (o GetVbrHealthChecksCheckOutput) ToGetVbrHealthChecksCheckOutput() GetVbrHealthChecksCheckOutput {
	return o
}

func (o GetVbrHealthChecksCheckOutput) ToGetVbrHealthChecksCheckOutputWithContext(ctx context.Context) GetVbrHealthChecksCheckOutput {
	return o
}

// The ID of the Cloud Enterprise Network (CEN) instance.
func (o GetVbrHealthChecksCheckOutput) CenId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVbrHealthChecksCheck) string { return v.CenId }).(pulumi.StringOutput)
}

// The time interval at which probe packets are sent during the health check.
func (o GetVbrHealthChecksCheckOutput) HealthCheckInterval() pulumi.IntOutput {
	return o.ApplyT(func(v GetVbrHealthChecksCheck) int { return v.HealthCheckInterval }).(pulumi.IntOutput)
}

// The source IP address of the health check.
func (o GetVbrHealthChecksCheckOutput) HealthCheckSourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetVbrHealthChecksCheck) string { return v.HealthCheckSourceIp }).(pulumi.StringOutput)
}

// The destination IP address of the health check.
func (o GetVbrHealthChecksCheckOutput) HealthCheckTargetIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetVbrHealthChecksCheck) string { return v.HealthCheckTargetIp }).(pulumi.StringOutput)
}

// The number of probe packets that are sent during the health check.
func (o GetVbrHealthChecksCheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetVbrHealthChecksCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The ID of the CEN VBR Heath Check.
func (o GetVbrHealthChecksCheckOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVbrHealthChecksCheck) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the VBR instance.
func (o GetVbrHealthChecksCheckOutput) VbrInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVbrHealthChecksCheck) string { return v.VbrInstanceId }).(pulumi.StringOutput)
}

// The ID of the region where the VBR instance is deployed.
func (o GetVbrHealthChecksCheckOutput) VbrInstanceRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVbrHealthChecksCheck) string { return v.VbrInstanceRegionId }).(pulumi.StringOutput)
}

type GetVbrHealthChecksCheckArrayOutput struct{ *pulumi.OutputState }

func (GetVbrHealthChecksCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVbrHealthChecksCheck)(nil)).Elem()
}

func (o GetVbrHealthChecksCheckArrayOutput) ToGetVbrHealthChecksCheckArrayOutput() GetVbrHealthChecksCheckArrayOutput {
	return o
}

func (o GetVbrHealthChecksCheckArrayOutput) ToGetVbrHealthChecksCheckArrayOutputWithContext(ctx context.Context) GetVbrHealthChecksCheckArrayOutput {
	return o
}

func (o GetVbrHealthChecksCheckArrayOutput) Index(i pulumi.IntInput) GetVbrHealthChecksCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVbrHealthChecksCheck {
		return vs[0].([]GetVbrHealthChecksCheck)[vs[1].(int)]
	}).(GetVbrHealthChecksCheckOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBandwidthLimitsLimitOutput{})
	pulumi.RegisterOutputType(GetBandwidthLimitsLimitArrayOutput{})
	pulumi.RegisterOutputType(GetBandwidthPackagesPackageOutput{})
	pulumi.RegisterOutputType(GetBandwidthPackagesPackageArrayOutput{})
	pulumi.RegisterOutputType(GetFlowlogsFlowlogOutput{})
	pulumi.RegisterOutputType(GetFlowlogsFlowlogArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceAttachmentsAttachmentOutput{})
	pulumi.RegisterOutputType(GetInstanceAttachmentsAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateZonesZoneOutput{})
	pulumi.RegisterOutputType(GetPrivateZonesZoneArrayOutput{})
	pulumi.RegisterOutputType(GetRegionRouteEntriesEntryOutput{})
	pulumi.RegisterOutputType(GetRegionRouteEntriesEntryArrayOutput{})
	pulumi.RegisterOutputType(GetRouteEntriesEntryOutput{})
	pulumi.RegisterOutputType(GetRouteEntriesEntryArrayOutput{})
	pulumi.RegisterOutputType(GetRouteEntriesEntryConflictOutput{})
	pulumi.RegisterOutputType(GetRouteEntriesEntryConflictArrayOutput{})
	pulumi.RegisterOutputType(GetRouteMapsMapOutput{})
	pulumi.RegisterOutputType(GetRouteMapsMapArrayOutput{})
	pulumi.RegisterOutputType(GetRouteServicesServiceOutput{})
	pulumi.RegisterOutputType(GetRouteServicesServiceArrayOutput{})
	pulumi.RegisterOutputType(GetVbrHealthChecksCheckOutput{})
	pulumi.RegisterOutputType(GetVbrHealthChecksCheckArrayOutput{})
}
