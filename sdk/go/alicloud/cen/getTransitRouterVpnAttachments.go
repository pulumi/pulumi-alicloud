// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides Cen Transit Router Vpn Attachment available to the user.[What is Transit Router Vpn Attachment](https://next.api.alibabacloud.com/document/Cbn/2017-09-12/CreateTransitRouterVpnAttachment)
//
// > **NOTE:** Available since v1.183.0.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cen"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := alicloud.GetAccount(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			defaultInstance, err := cen.NewInstance(ctx, "default", &cen.InstanceArgs{
//				CenInstanceName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouter, err := cen.NewTransitRouter(ctx, "default", &cen.TransitRouterArgs{
//				CenId: defaultInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouterCidr, err := cen.NewTransitRouterCidr(ctx, "default", &cen.TransitRouterCidrArgs{
//				Cidr:             pulumi.String("192.168.10.0/24"),
//				TransitRouterId:  defaultTransitRouter.TransitRouterId,
//				PublishCidrRoute: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			defaultCustomerGateway, err := vpn.NewCustomerGateway(ctx, "default", &vpn.CustomerGatewayArgs{
//				IpAddress:           pulumi.String("1.1.1.8"),
//				CustomerGatewayName: pulumi.String(name),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				defaultTransitRouterCidr,
//			}))
//			if err != nil {
//				return err
//			}
//			defaultGatewayVpnAttachment, err := vpn.NewGatewayVpnAttachment(ctx, "default", &vpn.GatewayVpnAttachmentArgs{
//				NetworkType:       pulumi.String("public"),
//				LocalSubnet:       pulumi.String("0.0.0.0/0"),
//				EnableTunnelsBgp:  pulumi.Bool(false),
//				VpnAttachmentName: pulumi.String(name),
//				TunnelOptionsSpecifications: vpn.GatewayVpnAttachmentTunnelOptionsSpecificationArray{
//					&vpn.GatewayVpnAttachmentTunnelOptionsSpecificationArgs{
//						CustomerGatewayId:  defaultCustomerGateway.ID(),
//						EnableDpd:          pulumi.Bool(true),
//						EnableNatTraversal: pulumi.Bool(true),
//						TunnelIndex:        pulumi.Int(1),
//						TunnelIkeConfig: &vpn.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfigArgs{
//							RemoteId:    pulumi.String("2.2.2.2"),
//							IkeEncAlg:   pulumi.String("aes"),
//							IkeMode:     pulumi.String("main"),
//							IkeVersion:  pulumi.String("ikev1"),
//							LocalId:     pulumi.String("1.1.1.1"),
//							IkeAuthAlg:  pulumi.String("md5"),
//							IkeLifetime: pulumi.Int(86100),
//							IkePfs:      pulumi.String("group2"),
//							Psk:         pulumi.String("12345678"),
//						},
//						TunnelIpsecConfig: &vpn.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfigArgs{
//							IpsecAuthAlg:  pulumi.String("md5"),
//							IpsecEncAlg:   pulumi.String("aes"),
//							IpsecLifetime: pulumi.Int(86200),
//							IpsecPfs:      pulumi.String("group5"),
//						},
//					},
//					&vpn.GatewayVpnAttachmentTunnelOptionsSpecificationArgs{
//						EnableNatTraversal: pulumi.Bool(true),
//						TunnelIndex:        pulumi.Int(2),
//						TunnelIkeConfig: &vpn.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfigArgs{
//							LocalId:     pulumi.String("4.4.4.4"),
//							RemoteId:    pulumi.String("5.5.5.5"),
//							IkeLifetime: pulumi.Int(86400),
//							IkePfs:      pulumi.String("group5"),
//							IkeMode:     pulumi.String("main"),
//							IkeVersion:  pulumi.String("ikev2"),
//							Psk:         pulumi.String("32333442"),
//							IkeAuthAlg:  pulumi.String("md5"),
//							IkeEncAlg:   pulumi.String("aes"),
//						},
//						TunnelIpsecConfig: &vpn.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfigArgs{
//							IpsecEncAlg:   pulumi.String("aes"),
//							IpsecLifetime: pulumi.Int(86400),
//							IpsecPfs:      pulumi.String("group5"),
//							IpsecAuthAlg:  pulumi.String("sha256"),
//						},
//						CustomerGatewayId: defaultCustomerGateway.ID(),
//						EnableDpd:         pulumi.Bool(true),
//					},
//				},
//				RemoteSubnet: pulumi.String("0.0.0.0/0"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouterVpnAttachment, err := cen.NewTransitRouterVpnAttachment(ctx, "default", &cen.TransitRouterVpnAttachmentArgs{
//				AutoPublishRouteEnabled:            pulumi.Bool(false),
//				TransitRouterAttachmentDescription: pulumi.String(name),
//				TransitRouterAttachmentName:        pulumi.String(name),
//				CenId:                              defaultTransitRouter.CenId,
//				TransitRouterId:                    defaultTransitRouter.TransitRouterId,
//				VpnId:                              defaultGatewayVpnAttachment.ID(),
//				VpnOwnerId:                         pulumi.String(_default.Id),
//				ChargeType:                         pulumi.String("POSTPAY"),
//				Tags: pulumi.StringMap{
//					"Created": pulumi.String("TF"),
//					"For":     pulumi.String("VpnAttachment"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ids := pulumi.All(defaultTransitRouterVpnAttachment.ID(), defaultTransitRouterVpnAttachment.CenId, defaultTransitRouterVpnAttachment.TransitRouterId).ApplyT(func(_args []interface{}) (cen.GetTransitRouterVpnAttachmentsResult, error) {
//				id := _args[0].(string)
//				cenId := _args[1].(string)
//				transitRouterId := _args[2].(*string)
//				return cen.GetTransitRouterVpnAttachmentsResult(interface{}(cen.GetTransitRouterVpnAttachmentsOutput(ctx, cen.GetTransitRouterVpnAttachmentsOutputArgs{
//					Ids: []string{
//						id,
//					},
//					CenId:           cenId,
//					TransitRouterId: transitRouterId,
//				}, nil))), nil
//			}).(cen.GetTransitRouterVpnAttachmentsResultOutput)
//			ctx.Export("cenTransitRouterVpnAttachmentId0", ids.ApplyT(func(ids cen.GetTransitRouterVpnAttachmentsResult) (*string, error) {
//				return &ids.Attachments[0].Id, nil
//			}).(pulumi.StringPtrOutput))
//			return nil
//		})
//	}
//
// ```
func GetTransitRouterVpnAttachments(ctx *pulumi.Context, args *GetTransitRouterVpnAttachmentsArgs, opts ...pulumi.InvokeOption) (*GetTransitRouterVpnAttachmentsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTransitRouterVpnAttachmentsResult
	err := ctx.Invoke("alicloud:cen/getTransitRouterVpnAttachments:getTransitRouterVpnAttachments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTransitRouterVpnAttachments.
type GetTransitRouterVpnAttachmentsArgs struct {
	// The ID of the Cloud Enterprise Network (CEN) instance.
	CenId *string `pulumi:"cenId"`
	// A list of Transit Router Vpn Attachment IDs.
	Ids []string `pulumi:"ids"`
	// A regex string to filter results by Transit Router Vpn Attachment name.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	// The Status of Transit Router Vpn Attachment. Valid values: `Attached`, `Attaching`, `Detaching`.
	Status *string `pulumi:"status"`
	// The tag of the resource.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the VPN attachment.
	TransitRouterAttachmentId *string `pulumi:"transitRouterAttachmentId"`
	// The ID of the transit router.
	TransitRouterId *string `pulumi:"transitRouterId"`
}

// A collection of values returned by getTransitRouterVpnAttachments.
type GetTransitRouterVpnAttachmentsResult struct {
	// A list of Transit Router Vpn Attachment Entries. Each element contains the following attributes:
	Attachments []GetTransitRouterVpnAttachmentsAttachment `pulumi:"attachments"`
	// (Available since v1.245.0) The ID of the Cloud Enterprise Network (CEN) instance.
	CenId *string `pulumi:"cenId"`
	// The provider-assigned unique ID for this managed resource.
	Id        string   `pulumi:"id"`
	Ids       []string `pulumi:"ids"`
	NameRegex *string  `pulumi:"nameRegex"`
	// A list of name of Transit Router Vpn Attachments.
	Names      []string `pulumi:"names"`
	OutputFile *string  `pulumi:"outputFile"`
	// The status of the VPN connection.
	Status *string `pulumi:"status"`
	// (Available since v1.245.0) The tag of the resource.
	Tags map[string]string `pulumi:"tags"`
	// (Available since v1.245.0) The ID of the VPN attachment.
	TransitRouterAttachmentId *string `pulumi:"transitRouterAttachmentId"`
	// The ID of the transit router.
	TransitRouterId *string `pulumi:"transitRouterId"`
}

func GetTransitRouterVpnAttachmentsOutput(ctx *pulumi.Context, args GetTransitRouterVpnAttachmentsOutputArgs, opts ...pulumi.InvokeOption) GetTransitRouterVpnAttachmentsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetTransitRouterVpnAttachmentsResultOutput, error) {
			args := v.(GetTransitRouterVpnAttachmentsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("alicloud:cen/getTransitRouterVpnAttachments:getTransitRouterVpnAttachments", args, GetTransitRouterVpnAttachmentsResultOutput{}, options).(GetTransitRouterVpnAttachmentsResultOutput), nil
		}).(GetTransitRouterVpnAttachmentsResultOutput)
}

// A collection of arguments for invoking getTransitRouterVpnAttachments.
type GetTransitRouterVpnAttachmentsOutputArgs struct {
	// The ID of the Cloud Enterprise Network (CEN) instance.
	CenId pulumi.StringPtrInput `pulumi:"cenId"`
	// A list of Transit Router Vpn Attachment IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A regex string to filter results by Transit Router Vpn Attachment name.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The Status of Transit Router Vpn Attachment. Valid values: `Attached`, `Attaching`, `Detaching`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The tag of the resource.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The ID of the VPN attachment.
	TransitRouterAttachmentId pulumi.StringPtrInput `pulumi:"transitRouterAttachmentId"`
	// The ID of the transit router.
	TransitRouterId pulumi.StringPtrInput `pulumi:"transitRouterId"`
}

func (GetTransitRouterVpnAttachmentsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTransitRouterVpnAttachmentsArgs)(nil)).Elem()
}

// A collection of values returned by getTransitRouterVpnAttachments.
type GetTransitRouterVpnAttachmentsResultOutput struct{ *pulumi.OutputState }

func (GetTransitRouterVpnAttachmentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTransitRouterVpnAttachmentsResult)(nil)).Elem()
}

func (o GetTransitRouterVpnAttachmentsResultOutput) ToGetTransitRouterVpnAttachmentsResultOutput() GetTransitRouterVpnAttachmentsResultOutput {
	return o
}

func (o GetTransitRouterVpnAttachmentsResultOutput) ToGetTransitRouterVpnAttachmentsResultOutputWithContext(ctx context.Context) GetTransitRouterVpnAttachmentsResultOutput {
	return o
}

// A list of Transit Router Vpn Attachment Entries. Each element contains the following attributes:
func (o GetTransitRouterVpnAttachmentsResultOutput) Attachments() GetTransitRouterVpnAttachmentsAttachmentArrayOutput {
	return o.ApplyT(func(v GetTransitRouterVpnAttachmentsResult) []GetTransitRouterVpnAttachmentsAttachment {
		return v.Attachments
	}).(GetTransitRouterVpnAttachmentsAttachmentArrayOutput)
}

// (Available since v1.245.0) The ID of the Cloud Enterprise Network (CEN) instance.
func (o GetTransitRouterVpnAttachmentsResultOutput) CenId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTransitRouterVpnAttachmentsResult) *string { return v.CenId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetTransitRouterVpnAttachmentsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTransitRouterVpnAttachmentsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetTransitRouterVpnAttachmentsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTransitRouterVpnAttachmentsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetTransitRouterVpnAttachmentsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTransitRouterVpnAttachmentsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// A list of name of Transit Router Vpn Attachments.
func (o GetTransitRouterVpnAttachmentsResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTransitRouterVpnAttachmentsResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetTransitRouterVpnAttachmentsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTransitRouterVpnAttachmentsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The status of the VPN connection.
func (o GetTransitRouterVpnAttachmentsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTransitRouterVpnAttachmentsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// (Available since v1.245.0) The tag of the resource.
func (o GetTransitRouterVpnAttachmentsResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetTransitRouterVpnAttachmentsResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// (Available since v1.245.0) The ID of the VPN attachment.
func (o GetTransitRouterVpnAttachmentsResultOutput) TransitRouterAttachmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTransitRouterVpnAttachmentsResult) *string { return v.TransitRouterAttachmentId }).(pulumi.StringPtrOutput)
}

// The ID of the transit router.
func (o GetTransitRouterVpnAttachmentsResultOutput) TransitRouterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTransitRouterVpnAttachmentsResult) *string { return v.TransitRouterId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTransitRouterVpnAttachmentsResultOutput{})
}
