// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides CEN flow logs available to the user.
//
// > **NOTE:** Available since v1.78.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cen"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/log"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// cfg := config.New(ctx, "")
// name := "tf-example";
// if param := cfg.Get("name"); param != ""{
// name = param
// }
// defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
// Min: 10000,
// Max: 99999,
// })
// if err != nil {
// return err
// }
// defaultc5kxyC, err := cen.NewInstance(ctx, "defaultc5kxyC", &cen.InstanceArgs{
// CenInstanceName: pulumi.String(name),
// })
// if err != nil {
// return err
// }
// defaultVw2U9u, err := cen.NewTransitRouter(ctx, "defaultVw2U9u", &cen.TransitRouterArgs{
// CenId: defaultc5kxyC.ID(),
// })
// if err != nil {
// return err
// }
// defaultProject, err := log.NewProject(ctx, "default", &log.ProjectArgs{
// ProjectName: pulumi.Sprintf("%v-%v", name, defaultInteger.Result),
// Description: pulumi.String("terraform-example"),
// })
// if err != nil {
// return err
// }
// defaultStore, err := log.NewStore(ctx, "default", &log.StoreArgs{
// ProjectName: defaultProject.ProjectName,
// LogstoreName: pulumi.Sprintf("%v-%v", name, defaultInteger.Result),
// ShardCount: pulumi.Int(3),
// AutoSplit: pulumi.Bool(true),
// MaxSplitShardCount: pulumi.Int(60),
// AppendMeta: pulumi.Bool(true),
// })
// if err != nil {
// return err
// }
// defaultFlowLog, err := cen.NewFlowLog(ctx, "default", &cen.FlowLogArgs{
// ProjectName: defaultStore.ProjectName,
// FlowLogName: pulumi.Sprintf("%v-%v", name, defaultInteger.Result),
// LogFormatString: pulumi.String("${srcaddr}${dstaddr}${bytes}"),
// CenId: defaultc5kxyC.ID(),
// LogStoreName: defaultStore.LogstoreName,
// Interval: pulumi.Int(600),
// Status: pulumi.String("Active"),
// TransitRouterId: defaultVw2U9u.TransitRouterId,
// Description: pulumi.String("flowlog-resource-example-1"),
// })
// if err != nil {
// return err
// }
// _default := cen.GetFlowlogsOutput(ctx, cen.GetFlowlogsOutputArgs{
// Ids: pulumi.StringArray{
// defaultFlowLog.ID(),
// },
// }, nil);
// ctx.Export("firstCenFlowlogId", _default.ApplyT(func(_default cen.GetFlowlogsResult) (*string, error) {
// return &default.Flowlogs[0].Id, nil
// }).(pulumi.StringPtrOutput))
// return nil
// })
// }
// ```
func GetFlowlogs(ctx *pulumi.Context, args *GetFlowlogsArgs, opts ...pulumi.InvokeOption) (*GetFlowlogsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFlowlogsResult
	err := ctx.Invoke("alicloud:cen/getFlowlogs:getFlowlogs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFlowlogs.
type GetFlowlogsArgs struct {
	// The ID of Cen instance.
	CenId *string `pulumi:"cenId"`
	// The description of the flowlog.
	Description *string `pulumi:"description"`
	// The ID of FlowLog.
	FlowLogId *string `pulumi:"flowLogId"`
	// The name of the flowlog.
	FlowLogName *string `pulumi:"flowLogName"`
	// Flowlog Version.
	FlowLogVersion *string `pulumi:"flowLogVersion"`
	// A list of Flow Log IDs.
	Ids []string `pulumi:"ids"`
	// The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
	Interval *int `pulumi:"interval"`
	// The LogStore that stores the flowlog.
	LogStoreName *string `pulumi:"logStoreName"`
	// A regex string to filter results by Group Metric Rule name.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	// Current page number.
	PageNumber *int `pulumi:"pageNumber"`
	// Number of records per page.
	PageSize *int `pulumi:"pageSize"`
	// The Project that stores the flowlog.
	ProjectName *string `pulumi:"projectName"`
	// Region id
	RegionId *string `pulumi:"regionId"`
	// The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
	Status *string `pulumi:"status"`
	// Transit Router ID
	TransitRouterId *string `pulumi:"transitRouterId"`
}

// A collection of values returned by getFlowlogs.
type GetFlowlogsResult struct {
	// The ID of Cen instance.
	CenId *string `pulumi:"cenId"`
	// The description of the flowlog.
	Description *string `pulumi:"description"`
	// The ID of FlowLog.
	FlowLogId *string `pulumi:"flowLogId"`
	// The name of the flowlog.
	FlowLogName *string `pulumi:"flowLogName"`
	// (Available since v1.236.0) Flowlog Version.
	FlowLogVersion *string `pulumi:"flowLogVersion"`
	// A list of Flow Log Entries. Each element contains the following attributes:
	Flowlogs []GetFlowlogsFlowlog `pulumi:"flowlogs"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list of Flow Log IDs.
	Ids []string `pulumi:"ids"`
	// (Available since v1.236.0) The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
	Interval *int `pulumi:"interval"`
	// The LogStore that stores the flowlog.
	LogStoreName *string `pulumi:"logStoreName"`
	NameRegex    *string `pulumi:"nameRegex"`
	// A list of name of Flow Logs.
	Names      []string `pulumi:"names"`
	OutputFile *string  `pulumi:"outputFile"`
	PageNumber *int     `pulumi:"pageNumber"`
	PageSize   *int     `pulumi:"pageSize"`
	// The Project that stores the flowlog.
	ProjectName *string `pulumi:"projectName"`
	// (Available since v1.236.0) Region Id.
	RegionId *string `pulumi:"regionId"`
	// The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
	Status *string `pulumi:"status"`
	// (Available since v1.236.0) Transit Router ID.
	TransitRouterId *string `pulumi:"transitRouterId"`
}

func GetFlowlogsOutput(ctx *pulumi.Context, args GetFlowlogsOutputArgs, opts ...pulumi.InvokeOption) GetFlowlogsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetFlowlogsResultOutput, error) {
			args := v.(GetFlowlogsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("alicloud:cen/getFlowlogs:getFlowlogs", args, GetFlowlogsResultOutput{}, options).(GetFlowlogsResultOutput), nil
		}).(GetFlowlogsResultOutput)
}

// A collection of arguments for invoking getFlowlogs.
type GetFlowlogsOutputArgs struct {
	// The ID of Cen instance.
	CenId pulumi.StringPtrInput `pulumi:"cenId"`
	// The description of the flowlog.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The ID of FlowLog.
	FlowLogId pulumi.StringPtrInput `pulumi:"flowLogId"`
	// The name of the flowlog.
	FlowLogName pulumi.StringPtrInput `pulumi:"flowLogName"`
	// Flowlog Version.
	FlowLogVersion pulumi.StringPtrInput `pulumi:"flowLogVersion"`
	// A list of Flow Log IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The LogStore that stores the flowlog.
	LogStoreName pulumi.StringPtrInput `pulumi:"logStoreName"`
	// A regex string to filter results by Group Metric Rule name.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Current page number.
	PageNumber pulumi.IntPtrInput `pulumi:"pageNumber"`
	// Number of records per page.
	PageSize pulumi.IntPtrInput `pulumi:"pageSize"`
	// The Project that stores the flowlog.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// Region id
	RegionId pulumi.StringPtrInput `pulumi:"regionId"`
	// The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Transit Router ID
	TransitRouterId pulumi.StringPtrInput `pulumi:"transitRouterId"`
}

func (GetFlowlogsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlowlogsArgs)(nil)).Elem()
}

// A collection of values returned by getFlowlogs.
type GetFlowlogsResultOutput struct{ *pulumi.OutputState }

func (GetFlowlogsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlowlogsResult)(nil)).Elem()
}

func (o GetFlowlogsResultOutput) ToGetFlowlogsResultOutput() GetFlowlogsResultOutput {
	return o
}

func (o GetFlowlogsResultOutput) ToGetFlowlogsResultOutputWithContext(ctx context.Context) GetFlowlogsResultOutput {
	return o
}

// The ID of Cen instance.
func (o GetFlowlogsResultOutput) CenId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *string { return v.CenId }).(pulumi.StringPtrOutput)
}

// The description of the flowlog.
func (o GetFlowlogsResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of FlowLog.
func (o GetFlowlogsResultOutput) FlowLogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *string { return v.FlowLogId }).(pulumi.StringPtrOutput)
}

// The name of the flowlog.
func (o GetFlowlogsResultOutput) FlowLogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *string { return v.FlowLogName }).(pulumi.StringPtrOutput)
}

// (Available since v1.236.0) Flowlog Version.
func (o GetFlowlogsResultOutput) FlowLogVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *string { return v.FlowLogVersion }).(pulumi.StringPtrOutput)
}

// A list of Flow Log Entries. Each element contains the following attributes:
func (o GetFlowlogsResultOutput) Flowlogs() GetFlowlogsFlowlogArrayOutput {
	return o.ApplyT(func(v GetFlowlogsResult) []GetFlowlogsFlowlog { return v.Flowlogs }).(GetFlowlogsFlowlogArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFlowlogsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlowlogsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of Flow Log IDs.
func (o GetFlowlogsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFlowlogsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// (Available since v1.236.0) The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
func (o GetFlowlogsResultOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The LogStore that stores the flowlog.
func (o GetFlowlogsResultOutput) LogStoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *string { return v.LogStoreName }).(pulumi.StringPtrOutput)
}

func (o GetFlowlogsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// A list of name of Flow Logs.
func (o GetFlowlogsResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFlowlogsResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetFlowlogsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetFlowlogsResultOutput) PageNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *int { return v.PageNumber }).(pulumi.IntPtrOutput)
}

func (o GetFlowlogsResultOutput) PageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *int { return v.PageSize }).(pulumi.IntPtrOutput)
}

// The Project that stores the flowlog.
func (o GetFlowlogsResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// (Available since v1.236.0) Region Id.
func (o GetFlowlogsResultOutput) RegionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *string { return v.RegionId }).(pulumi.StringPtrOutput)
}

// The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
func (o GetFlowlogsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// (Available since v1.236.0) Transit Router ID.
func (o GetFlowlogsResultOutput) TransitRouterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlowlogsResult) *string { return v.TransitRouterId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFlowlogsResultOutput{})
}
