// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloud Enterprise Network (CEN) Transit Route Table Aggregation resource.
//
// For information about Cloud Enterprise Network (CEN) Transit Route Table Aggregation and how to use it, see [What is Transit Route Table Aggregation](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/api-doc-cbn-2017-09-12-api-doc-createtransitroutetableaggregation).
//
// > **NOTE:** Available in v1.202.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cen"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultInstance, err := cen.NewInstance(ctx, "defaultInstance", &cen.InstanceArgs{
//				CenInstanceName: pulumi.String("tf-example"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouter, err := cen.NewTransitRouter(ctx, "defaultTransitRouter", &cen.TransitRouterArgs{
//				CenId: defaultInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouterRouteTable, err := cen.NewTransitRouterRouteTable(ctx, "defaultTransitRouterRouteTable", &cen.TransitRouterRouteTableArgs{
//				TransitRouterId: defaultTransitRouter.TransitRouterId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cen.NewTransitRouteTableAggregation(ctx, "defaultTransitRouteTableAggregation", &cen.TransitRouteTableAggregationArgs{
//				TransitRouteTableId:                     defaultTransitRouterRouteTable.TransitRouterRouteTableId,
//				TransitRouteTableAggregationCidr:        pulumi.String("10.0.0.0/8"),
//				TransitRouteTableAggregationScope:       pulumi.String("VPC"),
//				TransitRouteTableAggregationName:        pulumi.String("tf-example-name"),
//				TransitRouteTableAggregationDescription: pulumi.String("tf-example-description"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cloud Enterprise Network (CEN) Transit Route Table Aggregation can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:cen/transitRouteTableAggregation:TransitRouteTableAggregation example <transit_route_table_id>:<transit_route_table_aggregation_cidr>
//
// ```
type TransitRouteTableAggregation struct {
	pulumi.CustomResourceState

	// The status of the Transit Route Table Aggregation.
	Status pulumi.StringOutput `pulumi:"status"`
	// The destination CIDR block of the aggregate route. CIDR blocks that start with `0` or `100.64`. Multicast CIDR blocks, including `224.0.0.1` to `239.255.255.254`.
	TransitRouteTableAggregationCidr pulumi.StringOutput `pulumi:"transitRouteTableAggregationCidr"`
	// The description of the aggregate route.
	TransitRouteTableAggregationDescription pulumi.StringPtrOutput `pulumi:"transitRouteTableAggregationDescription"`
	// The name of the aggregate route.
	TransitRouteTableAggregationName pulumi.StringPtrOutput `pulumi:"transitRouteTableAggregationName"`
	// The scope of networks that you want to advertise the aggregate route. Valid Value: `VPC`.
	TransitRouteTableAggregationScope pulumi.StringOutput `pulumi:"transitRouteTableAggregationScope"`
	// The ID of the route table of the Enterprise Edition transit router.
	TransitRouteTableId pulumi.StringOutput `pulumi:"transitRouteTableId"`
}

// NewTransitRouteTableAggregation registers a new resource with the given unique name, arguments, and options.
func NewTransitRouteTableAggregation(ctx *pulumi.Context,
	name string, args *TransitRouteTableAggregationArgs, opts ...pulumi.ResourceOption) (*TransitRouteTableAggregation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitRouteTableAggregationCidr == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouteTableAggregationCidr'")
	}
	if args.TransitRouteTableAggregationScope == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouteTableAggregationScope'")
	}
	if args.TransitRouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouteTableId'")
	}
	var resource TransitRouteTableAggregation
	err := ctx.RegisterResource("alicloud:cen/transitRouteTableAggregation:TransitRouteTableAggregation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransitRouteTableAggregation gets an existing TransitRouteTableAggregation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransitRouteTableAggregation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransitRouteTableAggregationState, opts ...pulumi.ResourceOption) (*TransitRouteTableAggregation, error) {
	var resource TransitRouteTableAggregation
	err := ctx.ReadResource("alicloud:cen/transitRouteTableAggregation:TransitRouteTableAggregation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransitRouteTableAggregation resources.
type transitRouteTableAggregationState struct {
	// The status of the Transit Route Table Aggregation.
	Status *string `pulumi:"status"`
	// The destination CIDR block of the aggregate route. CIDR blocks that start with `0` or `100.64`. Multicast CIDR blocks, including `224.0.0.1` to `239.255.255.254`.
	TransitRouteTableAggregationCidr *string `pulumi:"transitRouteTableAggregationCidr"`
	// The description of the aggregate route.
	TransitRouteTableAggregationDescription *string `pulumi:"transitRouteTableAggregationDescription"`
	// The name of the aggregate route.
	TransitRouteTableAggregationName *string `pulumi:"transitRouteTableAggregationName"`
	// The scope of networks that you want to advertise the aggregate route. Valid Value: `VPC`.
	TransitRouteTableAggregationScope *string `pulumi:"transitRouteTableAggregationScope"`
	// The ID of the route table of the Enterprise Edition transit router.
	TransitRouteTableId *string `pulumi:"transitRouteTableId"`
}

type TransitRouteTableAggregationState struct {
	// The status of the Transit Route Table Aggregation.
	Status pulumi.StringPtrInput
	// The destination CIDR block of the aggregate route. CIDR blocks that start with `0` or `100.64`. Multicast CIDR blocks, including `224.0.0.1` to `239.255.255.254`.
	TransitRouteTableAggregationCidr pulumi.StringPtrInput
	// The description of the aggregate route.
	TransitRouteTableAggregationDescription pulumi.StringPtrInput
	// The name of the aggregate route.
	TransitRouteTableAggregationName pulumi.StringPtrInput
	// The scope of networks that you want to advertise the aggregate route. Valid Value: `VPC`.
	TransitRouteTableAggregationScope pulumi.StringPtrInput
	// The ID of the route table of the Enterprise Edition transit router.
	TransitRouteTableId pulumi.StringPtrInput
}

func (TransitRouteTableAggregationState) ElementType() reflect.Type {
	return reflect.TypeOf((*transitRouteTableAggregationState)(nil)).Elem()
}

type transitRouteTableAggregationArgs struct {
	// The destination CIDR block of the aggregate route. CIDR blocks that start with `0` or `100.64`. Multicast CIDR blocks, including `224.0.0.1` to `239.255.255.254`.
	TransitRouteTableAggregationCidr string `pulumi:"transitRouteTableAggregationCidr"`
	// The description of the aggregate route.
	TransitRouteTableAggregationDescription *string `pulumi:"transitRouteTableAggregationDescription"`
	// The name of the aggregate route.
	TransitRouteTableAggregationName *string `pulumi:"transitRouteTableAggregationName"`
	// The scope of networks that you want to advertise the aggregate route. Valid Value: `VPC`.
	TransitRouteTableAggregationScope string `pulumi:"transitRouteTableAggregationScope"`
	// The ID of the route table of the Enterprise Edition transit router.
	TransitRouteTableId string `pulumi:"transitRouteTableId"`
}

// The set of arguments for constructing a TransitRouteTableAggregation resource.
type TransitRouteTableAggregationArgs struct {
	// The destination CIDR block of the aggregate route. CIDR blocks that start with `0` or `100.64`. Multicast CIDR blocks, including `224.0.0.1` to `239.255.255.254`.
	TransitRouteTableAggregationCidr pulumi.StringInput
	// The description of the aggregate route.
	TransitRouteTableAggregationDescription pulumi.StringPtrInput
	// The name of the aggregate route.
	TransitRouteTableAggregationName pulumi.StringPtrInput
	// The scope of networks that you want to advertise the aggregate route. Valid Value: `VPC`.
	TransitRouteTableAggregationScope pulumi.StringInput
	// The ID of the route table of the Enterprise Edition transit router.
	TransitRouteTableId pulumi.StringInput
}

func (TransitRouteTableAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transitRouteTableAggregationArgs)(nil)).Elem()
}

type TransitRouteTableAggregationInput interface {
	pulumi.Input

	ToTransitRouteTableAggregationOutput() TransitRouteTableAggregationOutput
	ToTransitRouteTableAggregationOutputWithContext(ctx context.Context) TransitRouteTableAggregationOutput
}

func (*TransitRouteTableAggregation) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitRouteTableAggregation)(nil)).Elem()
}

func (i *TransitRouteTableAggregation) ToTransitRouteTableAggregationOutput() TransitRouteTableAggregationOutput {
	return i.ToTransitRouteTableAggregationOutputWithContext(context.Background())
}

func (i *TransitRouteTableAggregation) ToTransitRouteTableAggregationOutputWithContext(ctx context.Context) TransitRouteTableAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouteTableAggregationOutput)
}

// TransitRouteTableAggregationArrayInput is an input type that accepts TransitRouteTableAggregationArray and TransitRouteTableAggregationArrayOutput values.
// You can construct a concrete instance of `TransitRouteTableAggregationArrayInput` via:
//
//	TransitRouteTableAggregationArray{ TransitRouteTableAggregationArgs{...} }
type TransitRouteTableAggregationArrayInput interface {
	pulumi.Input

	ToTransitRouteTableAggregationArrayOutput() TransitRouteTableAggregationArrayOutput
	ToTransitRouteTableAggregationArrayOutputWithContext(context.Context) TransitRouteTableAggregationArrayOutput
}

type TransitRouteTableAggregationArray []TransitRouteTableAggregationInput

func (TransitRouteTableAggregationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitRouteTableAggregation)(nil)).Elem()
}

func (i TransitRouteTableAggregationArray) ToTransitRouteTableAggregationArrayOutput() TransitRouteTableAggregationArrayOutput {
	return i.ToTransitRouteTableAggregationArrayOutputWithContext(context.Background())
}

func (i TransitRouteTableAggregationArray) ToTransitRouteTableAggregationArrayOutputWithContext(ctx context.Context) TransitRouteTableAggregationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouteTableAggregationArrayOutput)
}

// TransitRouteTableAggregationMapInput is an input type that accepts TransitRouteTableAggregationMap and TransitRouteTableAggregationMapOutput values.
// You can construct a concrete instance of `TransitRouteTableAggregationMapInput` via:
//
//	TransitRouteTableAggregationMap{ "key": TransitRouteTableAggregationArgs{...} }
type TransitRouteTableAggregationMapInput interface {
	pulumi.Input

	ToTransitRouteTableAggregationMapOutput() TransitRouteTableAggregationMapOutput
	ToTransitRouteTableAggregationMapOutputWithContext(context.Context) TransitRouteTableAggregationMapOutput
}

type TransitRouteTableAggregationMap map[string]TransitRouteTableAggregationInput

func (TransitRouteTableAggregationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitRouteTableAggregation)(nil)).Elem()
}

func (i TransitRouteTableAggregationMap) ToTransitRouteTableAggregationMapOutput() TransitRouteTableAggregationMapOutput {
	return i.ToTransitRouteTableAggregationMapOutputWithContext(context.Background())
}

func (i TransitRouteTableAggregationMap) ToTransitRouteTableAggregationMapOutputWithContext(ctx context.Context) TransitRouteTableAggregationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouteTableAggregationMapOutput)
}

type TransitRouteTableAggregationOutput struct{ *pulumi.OutputState }

func (TransitRouteTableAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitRouteTableAggregation)(nil)).Elem()
}

func (o TransitRouteTableAggregationOutput) ToTransitRouteTableAggregationOutput() TransitRouteTableAggregationOutput {
	return o
}

func (o TransitRouteTableAggregationOutput) ToTransitRouteTableAggregationOutputWithContext(ctx context.Context) TransitRouteTableAggregationOutput {
	return o
}

// The status of the Transit Route Table Aggregation.
func (o TransitRouteTableAggregationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The destination CIDR block of the aggregate route. CIDR blocks that start with `0` or `100.64`. Multicast CIDR blocks, including `224.0.0.1` to `239.255.255.254`.
func (o TransitRouteTableAggregationOutput) TransitRouteTableAggregationCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringOutput { return v.TransitRouteTableAggregationCidr }).(pulumi.StringOutput)
}

// The description of the aggregate route.
func (o TransitRouteTableAggregationOutput) TransitRouteTableAggregationDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringPtrOutput {
		return v.TransitRouteTableAggregationDescription
	}).(pulumi.StringPtrOutput)
}

// The name of the aggregate route.
func (o TransitRouteTableAggregationOutput) TransitRouteTableAggregationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringPtrOutput {
		return v.TransitRouteTableAggregationName
	}).(pulumi.StringPtrOutput)
}

// The scope of networks that you want to advertise the aggregate route. Valid Value: `VPC`.
func (o TransitRouteTableAggregationOutput) TransitRouteTableAggregationScope() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringOutput { return v.TransitRouteTableAggregationScope }).(pulumi.StringOutput)
}

// The ID of the route table of the Enterprise Edition transit router.
func (o TransitRouteTableAggregationOutput) TransitRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringOutput { return v.TransitRouteTableId }).(pulumi.StringOutput)
}

type TransitRouteTableAggregationArrayOutput struct{ *pulumi.OutputState }

func (TransitRouteTableAggregationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitRouteTableAggregation)(nil)).Elem()
}

func (o TransitRouteTableAggregationArrayOutput) ToTransitRouteTableAggregationArrayOutput() TransitRouteTableAggregationArrayOutput {
	return o
}

func (o TransitRouteTableAggregationArrayOutput) ToTransitRouteTableAggregationArrayOutputWithContext(ctx context.Context) TransitRouteTableAggregationArrayOutput {
	return o
}

func (o TransitRouteTableAggregationArrayOutput) Index(i pulumi.IntInput) TransitRouteTableAggregationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TransitRouteTableAggregation {
		return vs[0].([]*TransitRouteTableAggregation)[vs[1].(int)]
	}).(TransitRouteTableAggregationOutput)
}

type TransitRouteTableAggregationMapOutput struct{ *pulumi.OutputState }

func (TransitRouteTableAggregationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitRouteTableAggregation)(nil)).Elem()
}

func (o TransitRouteTableAggregationMapOutput) ToTransitRouteTableAggregationMapOutput() TransitRouteTableAggregationMapOutput {
	return o
}

func (o TransitRouteTableAggregationMapOutput) ToTransitRouteTableAggregationMapOutputWithContext(ctx context.Context) TransitRouteTableAggregationMapOutput {
	return o
}

func (o TransitRouteTableAggregationMapOutput) MapIndex(k pulumi.StringInput) TransitRouteTableAggregationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TransitRouteTableAggregation {
		return vs[0].(map[string]*TransitRouteTableAggregation)[vs[1].(string)]
	}).(TransitRouteTableAggregationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouteTableAggregationInput)(nil)).Elem(), &TransitRouteTableAggregation{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouteTableAggregationArrayInput)(nil)).Elem(), TransitRouteTableAggregationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouteTableAggregationMapInput)(nil)).Elem(), TransitRouteTableAggregationMap{})
	pulumi.RegisterOutputType(TransitRouteTableAggregationOutput{})
	pulumi.RegisterOutputType(TransitRouteTableAggregationArrayOutput{})
	pulumi.RegisterOutputType(TransitRouteTableAggregationMapOutput{})
}
