// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloud Enterprise Network (CEN) Transit Route Table Aggregation resource.
//
// For information about Cloud Enterprise Network (CEN) Transit Route Table Aggregation and how to use it, see [What is Transit Route Table Aggregation](https://next.api.alibabacloud.com/document/Cbn/2017-09-12/CreateTransitRouteTableAggregation).
//
// > **NOTE:** Available since v1.245.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cen"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := cen.NewInstance(ctx, "example", &cen.InstanceArgs{
//				CenInstanceName: pulumi.String("tf_example"),
//				Description:     pulumi.String("an example for cen"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleTransitRouter, err := cen.NewTransitRouter(ctx, "example", &cen.TransitRouterArgs{
//				TransitRouterName: pulumi.String("tf_example"),
//				CenId:             example.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleTransitRouterRouteTable, err := cen.NewTransitRouterRouteTable(ctx, "example", &cen.TransitRouterRouteTableArgs{
//				TransitRouterId: exampleTransitRouter.TransitRouterId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cen.NewTransitRouteTableAggregation(ctx, "example", &cen.TransitRouteTableAggregationArgs{
//				TransitRouteTableId:                     exampleTransitRouterRouteTable.TransitRouterRouteTableId,
//				TransitRouteTableAggregationCidr:        pulumi.String("10.0.0.0/8"),
//				TransitRouteTableAggregationScope:       pulumi.String("VPC"),
//				TransitRouteTableAggregationName:        pulumi.String("tf_example"),
//				TransitRouteTableAggregationDescription: pulumi.String("tf_example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cloud Enterprise Network (CEN) Transit Route Table Aggregation can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:cen/transitRouteTableAggregation:TransitRouteTableAggregation example <transit_route_table_id>#<transit_route_table_aggregation_cidr>
// ```
type TransitRouteTableAggregation struct {
	pulumi.CustomResourceState

	// The status of the resource
	Status pulumi.StringOutput `pulumi:"status"`
	// The destination CIDR block of the aggregate route.
	//
	// > **NOTE:**   The following CIDR blocks are not supported:
	//
	// > **NOTE:** *   CIDR blocks that start with 0 or 100.64.
	//
	// > **NOTE:** *   Multicast CIDR blocks, including 224.0.0.1 to 239.255.255.254.
	TransitRouteTableAggregationCidr pulumi.StringOutput `pulumi:"transitRouteTableAggregationCidr"`
	// The list of propagation ranges of the aggregation route.
	//
	// > **NOTE:**   You must specify at least one of the following attributes: Aggregation Scope and Aggregate Scope List. We recommend that you specify the latter. The elements in the two attributes cannot be duplicate.
	TransitRouteTableAggregationDescription pulumi.StringPtrOutput `pulumi:"transitRouteTableAggregationDescription"`
	// The name of the aggregate route.
	// The name can be empty or 1 to 128 characters in length, and cannot start with http:// or https://.
	TransitRouteTableAggregationName pulumi.StringPtrOutput `pulumi:"transitRouteTableAggregationName"`
	// The scope of networks that you want to advertise the aggregate route.
	// The valid value is `VPC`, which indicates that the aggregate route is advertised to all VPCs that have associated forwarding correlation with the Enterprise Edition transit router and have route synchronization enabled.
	TransitRouteTableAggregationScope pulumi.StringPtrOutput `pulumi:"transitRouteTableAggregationScope"`
	// Aggregation Route Scopes
	TransitRouteTableAggregationScopeLists pulumi.StringArrayOutput `pulumi:"transitRouteTableAggregationScopeLists"`
	// The list of route table IDs of the Enterprise Edition transit router.
	TransitRouteTableId pulumi.StringOutput `pulumi:"transitRouteTableId"`
}

// NewTransitRouteTableAggregation registers a new resource with the given unique name, arguments, and options.
func NewTransitRouteTableAggregation(ctx *pulumi.Context,
	name string, args *TransitRouteTableAggregationArgs, opts ...pulumi.ResourceOption) (*TransitRouteTableAggregation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitRouteTableAggregationCidr == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouteTableAggregationCidr'")
	}
	if args.TransitRouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransitRouteTableAggregation
	err := ctx.RegisterResource("alicloud:cen/transitRouteTableAggregation:TransitRouteTableAggregation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransitRouteTableAggregation gets an existing TransitRouteTableAggregation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransitRouteTableAggregation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransitRouteTableAggregationState, opts ...pulumi.ResourceOption) (*TransitRouteTableAggregation, error) {
	var resource TransitRouteTableAggregation
	err := ctx.ReadResource("alicloud:cen/transitRouteTableAggregation:TransitRouteTableAggregation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransitRouteTableAggregation resources.
type transitRouteTableAggregationState struct {
	// The status of the resource
	Status *string `pulumi:"status"`
	// The destination CIDR block of the aggregate route.
	//
	// > **NOTE:**   The following CIDR blocks are not supported:
	//
	// > **NOTE:** *   CIDR blocks that start with 0 or 100.64.
	//
	// > **NOTE:** *   Multicast CIDR blocks, including 224.0.0.1 to 239.255.255.254.
	TransitRouteTableAggregationCidr *string `pulumi:"transitRouteTableAggregationCidr"`
	// The list of propagation ranges of the aggregation route.
	//
	// > **NOTE:**   You must specify at least one of the following attributes: Aggregation Scope and Aggregate Scope List. We recommend that you specify the latter. The elements in the two attributes cannot be duplicate.
	TransitRouteTableAggregationDescription *string `pulumi:"transitRouteTableAggregationDescription"`
	// The name of the aggregate route.
	// The name can be empty or 1 to 128 characters in length, and cannot start with http:// or https://.
	TransitRouteTableAggregationName *string `pulumi:"transitRouteTableAggregationName"`
	// The scope of networks that you want to advertise the aggregate route.
	// The valid value is `VPC`, which indicates that the aggregate route is advertised to all VPCs that have associated forwarding correlation with the Enterprise Edition transit router and have route synchronization enabled.
	TransitRouteTableAggregationScope *string `pulumi:"transitRouteTableAggregationScope"`
	// Aggregation Route Scopes
	TransitRouteTableAggregationScopeLists []string `pulumi:"transitRouteTableAggregationScopeLists"`
	// The list of route table IDs of the Enterprise Edition transit router.
	TransitRouteTableId *string `pulumi:"transitRouteTableId"`
}

type TransitRouteTableAggregationState struct {
	// The status of the resource
	Status pulumi.StringPtrInput
	// The destination CIDR block of the aggregate route.
	//
	// > **NOTE:**   The following CIDR blocks are not supported:
	//
	// > **NOTE:** *   CIDR blocks that start with 0 or 100.64.
	//
	// > **NOTE:** *   Multicast CIDR blocks, including 224.0.0.1 to 239.255.255.254.
	TransitRouteTableAggregationCidr pulumi.StringPtrInput
	// The list of propagation ranges of the aggregation route.
	//
	// > **NOTE:**   You must specify at least one of the following attributes: Aggregation Scope and Aggregate Scope List. We recommend that you specify the latter. The elements in the two attributes cannot be duplicate.
	TransitRouteTableAggregationDescription pulumi.StringPtrInput
	// The name of the aggregate route.
	// The name can be empty or 1 to 128 characters in length, and cannot start with http:// or https://.
	TransitRouteTableAggregationName pulumi.StringPtrInput
	// The scope of networks that you want to advertise the aggregate route.
	// The valid value is `VPC`, which indicates that the aggregate route is advertised to all VPCs that have associated forwarding correlation with the Enterprise Edition transit router and have route synchronization enabled.
	TransitRouteTableAggregationScope pulumi.StringPtrInput
	// Aggregation Route Scopes
	TransitRouteTableAggregationScopeLists pulumi.StringArrayInput
	// The list of route table IDs of the Enterprise Edition transit router.
	TransitRouteTableId pulumi.StringPtrInput
}

func (TransitRouteTableAggregationState) ElementType() reflect.Type {
	return reflect.TypeOf((*transitRouteTableAggregationState)(nil)).Elem()
}

type transitRouteTableAggregationArgs struct {
	// The destination CIDR block of the aggregate route.
	//
	// > **NOTE:**   The following CIDR blocks are not supported:
	//
	// > **NOTE:** *   CIDR blocks that start with 0 or 100.64.
	//
	// > **NOTE:** *   Multicast CIDR blocks, including 224.0.0.1 to 239.255.255.254.
	TransitRouteTableAggregationCidr string `pulumi:"transitRouteTableAggregationCidr"`
	// The list of propagation ranges of the aggregation route.
	//
	// > **NOTE:**   You must specify at least one of the following attributes: Aggregation Scope and Aggregate Scope List. We recommend that you specify the latter. The elements in the two attributes cannot be duplicate.
	TransitRouteTableAggregationDescription *string `pulumi:"transitRouteTableAggregationDescription"`
	// The name of the aggregate route.
	// The name can be empty or 1 to 128 characters in length, and cannot start with http:// or https://.
	TransitRouteTableAggregationName *string `pulumi:"transitRouteTableAggregationName"`
	// The scope of networks that you want to advertise the aggregate route.
	// The valid value is `VPC`, which indicates that the aggregate route is advertised to all VPCs that have associated forwarding correlation with the Enterprise Edition transit router and have route synchronization enabled.
	TransitRouteTableAggregationScope *string `pulumi:"transitRouteTableAggregationScope"`
	// Aggregation Route Scopes
	TransitRouteTableAggregationScopeLists []string `pulumi:"transitRouteTableAggregationScopeLists"`
	// The list of route table IDs of the Enterprise Edition transit router.
	TransitRouteTableId string `pulumi:"transitRouteTableId"`
}

// The set of arguments for constructing a TransitRouteTableAggregation resource.
type TransitRouteTableAggregationArgs struct {
	// The destination CIDR block of the aggregate route.
	//
	// > **NOTE:**   The following CIDR blocks are not supported:
	//
	// > **NOTE:** *   CIDR blocks that start with 0 or 100.64.
	//
	// > **NOTE:** *   Multicast CIDR blocks, including 224.0.0.1 to 239.255.255.254.
	TransitRouteTableAggregationCidr pulumi.StringInput
	// The list of propagation ranges of the aggregation route.
	//
	// > **NOTE:**   You must specify at least one of the following attributes: Aggregation Scope and Aggregate Scope List. We recommend that you specify the latter. The elements in the two attributes cannot be duplicate.
	TransitRouteTableAggregationDescription pulumi.StringPtrInput
	// The name of the aggregate route.
	// The name can be empty or 1 to 128 characters in length, and cannot start with http:// or https://.
	TransitRouteTableAggregationName pulumi.StringPtrInput
	// The scope of networks that you want to advertise the aggregate route.
	// The valid value is `VPC`, which indicates that the aggregate route is advertised to all VPCs that have associated forwarding correlation with the Enterprise Edition transit router and have route synchronization enabled.
	TransitRouteTableAggregationScope pulumi.StringPtrInput
	// Aggregation Route Scopes
	TransitRouteTableAggregationScopeLists pulumi.StringArrayInput
	// The list of route table IDs of the Enterprise Edition transit router.
	TransitRouteTableId pulumi.StringInput
}

func (TransitRouteTableAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transitRouteTableAggregationArgs)(nil)).Elem()
}

type TransitRouteTableAggregationInput interface {
	pulumi.Input

	ToTransitRouteTableAggregationOutput() TransitRouteTableAggregationOutput
	ToTransitRouteTableAggregationOutputWithContext(ctx context.Context) TransitRouteTableAggregationOutput
}

func (*TransitRouteTableAggregation) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitRouteTableAggregation)(nil)).Elem()
}

func (i *TransitRouteTableAggregation) ToTransitRouteTableAggregationOutput() TransitRouteTableAggregationOutput {
	return i.ToTransitRouteTableAggregationOutputWithContext(context.Background())
}

func (i *TransitRouteTableAggregation) ToTransitRouteTableAggregationOutputWithContext(ctx context.Context) TransitRouteTableAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouteTableAggregationOutput)
}

// TransitRouteTableAggregationArrayInput is an input type that accepts TransitRouteTableAggregationArray and TransitRouteTableAggregationArrayOutput values.
// You can construct a concrete instance of `TransitRouteTableAggregationArrayInput` via:
//
//	TransitRouteTableAggregationArray{ TransitRouteTableAggregationArgs{...} }
type TransitRouteTableAggregationArrayInput interface {
	pulumi.Input

	ToTransitRouteTableAggregationArrayOutput() TransitRouteTableAggregationArrayOutput
	ToTransitRouteTableAggregationArrayOutputWithContext(context.Context) TransitRouteTableAggregationArrayOutput
}

type TransitRouteTableAggregationArray []TransitRouteTableAggregationInput

func (TransitRouteTableAggregationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitRouteTableAggregation)(nil)).Elem()
}

func (i TransitRouteTableAggregationArray) ToTransitRouteTableAggregationArrayOutput() TransitRouteTableAggregationArrayOutput {
	return i.ToTransitRouteTableAggregationArrayOutputWithContext(context.Background())
}

func (i TransitRouteTableAggregationArray) ToTransitRouteTableAggregationArrayOutputWithContext(ctx context.Context) TransitRouteTableAggregationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouteTableAggregationArrayOutput)
}

// TransitRouteTableAggregationMapInput is an input type that accepts TransitRouteTableAggregationMap and TransitRouteTableAggregationMapOutput values.
// You can construct a concrete instance of `TransitRouteTableAggregationMapInput` via:
//
//	TransitRouteTableAggregationMap{ "key": TransitRouteTableAggregationArgs{...} }
type TransitRouteTableAggregationMapInput interface {
	pulumi.Input

	ToTransitRouteTableAggregationMapOutput() TransitRouteTableAggregationMapOutput
	ToTransitRouteTableAggregationMapOutputWithContext(context.Context) TransitRouteTableAggregationMapOutput
}

type TransitRouteTableAggregationMap map[string]TransitRouteTableAggregationInput

func (TransitRouteTableAggregationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitRouteTableAggregation)(nil)).Elem()
}

func (i TransitRouteTableAggregationMap) ToTransitRouteTableAggregationMapOutput() TransitRouteTableAggregationMapOutput {
	return i.ToTransitRouteTableAggregationMapOutputWithContext(context.Background())
}

func (i TransitRouteTableAggregationMap) ToTransitRouteTableAggregationMapOutputWithContext(ctx context.Context) TransitRouteTableAggregationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouteTableAggregationMapOutput)
}

type TransitRouteTableAggregationOutput struct{ *pulumi.OutputState }

func (TransitRouteTableAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitRouteTableAggregation)(nil)).Elem()
}

func (o TransitRouteTableAggregationOutput) ToTransitRouteTableAggregationOutput() TransitRouteTableAggregationOutput {
	return o
}

func (o TransitRouteTableAggregationOutput) ToTransitRouteTableAggregationOutputWithContext(ctx context.Context) TransitRouteTableAggregationOutput {
	return o
}

// The status of the resource
func (o TransitRouteTableAggregationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The destination CIDR block of the aggregate route.
//
// > **NOTE:**   The following CIDR blocks are not supported:
//
// > **NOTE:** *   CIDR blocks that start with 0 or 100.64.
//
// > **NOTE:** *   Multicast CIDR blocks, including 224.0.0.1 to 239.255.255.254.
func (o TransitRouteTableAggregationOutput) TransitRouteTableAggregationCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringOutput { return v.TransitRouteTableAggregationCidr }).(pulumi.StringOutput)
}

// The list of propagation ranges of the aggregation route.
//
// > **NOTE:**   You must specify at least one of the following attributes: Aggregation Scope and Aggregate Scope List. We recommend that you specify the latter. The elements in the two attributes cannot be duplicate.
func (o TransitRouteTableAggregationOutput) TransitRouteTableAggregationDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringPtrOutput {
		return v.TransitRouteTableAggregationDescription
	}).(pulumi.StringPtrOutput)
}

// The name of the aggregate route.
// The name can be empty or 1 to 128 characters in length, and cannot start with http:// or https://.
func (o TransitRouteTableAggregationOutput) TransitRouteTableAggregationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringPtrOutput {
		return v.TransitRouteTableAggregationName
	}).(pulumi.StringPtrOutput)
}

// The scope of networks that you want to advertise the aggregate route.
// The valid value is `VPC`, which indicates that the aggregate route is advertised to all VPCs that have associated forwarding correlation with the Enterprise Edition transit router and have route synchronization enabled.
func (o TransitRouteTableAggregationOutput) TransitRouteTableAggregationScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringPtrOutput {
		return v.TransitRouteTableAggregationScope
	}).(pulumi.StringPtrOutput)
}

// Aggregation Route Scopes
func (o TransitRouteTableAggregationOutput) TransitRouteTableAggregationScopeLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringArrayOutput {
		return v.TransitRouteTableAggregationScopeLists
	}).(pulumi.StringArrayOutput)
}

// The list of route table IDs of the Enterprise Edition transit router.
func (o TransitRouteTableAggregationOutput) TransitRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouteTableAggregation) pulumi.StringOutput { return v.TransitRouteTableId }).(pulumi.StringOutput)
}

type TransitRouteTableAggregationArrayOutput struct{ *pulumi.OutputState }

func (TransitRouteTableAggregationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitRouteTableAggregation)(nil)).Elem()
}

func (o TransitRouteTableAggregationArrayOutput) ToTransitRouteTableAggregationArrayOutput() TransitRouteTableAggregationArrayOutput {
	return o
}

func (o TransitRouteTableAggregationArrayOutput) ToTransitRouteTableAggregationArrayOutputWithContext(ctx context.Context) TransitRouteTableAggregationArrayOutput {
	return o
}

func (o TransitRouteTableAggregationArrayOutput) Index(i pulumi.IntInput) TransitRouteTableAggregationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TransitRouteTableAggregation {
		return vs[0].([]*TransitRouteTableAggregation)[vs[1].(int)]
	}).(TransitRouteTableAggregationOutput)
}

type TransitRouteTableAggregationMapOutput struct{ *pulumi.OutputState }

func (TransitRouteTableAggregationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitRouteTableAggregation)(nil)).Elem()
}

func (o TransitRouteTableAggregationMapOutput) ToTransitRouteTableAggregationMapOutput() TransitRouteTableAggregationMapOutput {
	return o
}

func (o TransitRouteTableAggregationMapOutput) ToTransitRouteTableAggregationMapOutputWithContext(ctx context.Context) TransitRouteTableAggregationMapOutput {
	return o
}

func (o TransitRouteTableAggregationMapOutput) MapIndex(k pulumi.StringInput) TransitRouteTableAggregationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TransitRouteTableAggregation {
		return vs[0].(map[string]*TransitRouteTableAggregation)[vs[1].(string)]
	}).(TransitRouteTableAggregationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouteTableAggregationInput)(nil)).Elem(), &TransitRouteTableAggregation{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouteTableAggregationArrayInput)(nil)).Elem(), TransitRouteTableAggregationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouteTableAggregationMapInput)(nil)).Elem(), TransitRouteTableAggregationMap{})
	pulumi.RegisterOutputType(TransitRouteTableAggregationOutput{})
	pulumi.RegisterOutputType(TransitRouteTableAggregationArrayOutput{})
	pulumi.RegisterOutputType(TransitRouteTableAggregationMapOutput{})
}
