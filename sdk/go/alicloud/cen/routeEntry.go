// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a CEN route entry resource. Cloud Enterprise Network (CEN) supports publishing and withdrawing route entries of attached networks. You can publish a route entry of an attached VPC or VBR to a CEN instance, then other attached networks can learn the route if there is no route conflict. You can withdraw a published route entry when CEN does not need it any more.
//
// For information about CEN route entries publishment and how to use it, see [Manage network routes](https://www.alibabacloud.com/help/doc-detail/86980.htm).
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/cen"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/ecs"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/providers"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := providers.Newalicloud(ctx, "hz", &providers.alicloudArgs{
// 			Region: pulumi.String("cn-hangzhou"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		cfg := config.New(ctx, "")
// 		name := "tf-testAccCenRouteEntryConfig"
// 		if param := cfg.Get("name"); param != "" {
// 			name = param
// 		}
// 		opt0 := "cloud_efficiency"
// 		opt1 := "VSwitch"
// 		defaultZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
// 			AvailableDiskCategory:     &opt0,
// 			AvailableResourceCreation: &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt2 := defaultZones.Zones[0].Id
// 		opt3 := 1
// 		opt4 := 2
// 		defaultInstanceTypes, err := ecs.GetInstanceTypes(ctx, &ecs.GetInstanceTypesArgs{
// 			AvailabilityZone: &opt2,
// 			CpuCoreCount:     &opt3,
// 			MemorySize:       &opt4,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt5 := "^ubuntu_18.*64"
// 		opt6 := true
// 		opt7 := "system"
// 		defaultImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
// 			NameRegex:  &opt5,
// 			MostRecent: &opt6,
// 			Owners:     &opt7,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		vpc, err := vpc.NewNetwork(ctx, "vpc", &vpc.NetworkArgs{
// 			CidrBlock: pulumi.String("172.16.0.0/12"),
// 		}, pulumi.Provider(alicloud.Hz))
// 		if err != nil {
// 			return err
// 		}
// 		defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
// 			VpcId:            vpc.ID(),
// 			CidrBlock:        pulumi.String("172.16.0.0/21"),
// 			AvailabilityZone: pulumi.String(defaultZones.Zones[0].Id),
// 		}, pulumi.Provider(alicloud.Hz))
// 		if err != nil {
// 			return err
// 		}
// 		defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "defaultSecurityGroup", &ecs.SecurityGroupArgs{
// 			Description: pulumi.String("foo"),
// 			VpcId:       vpc.ID(),
// 		}, pulumi.Provider(alicloud.Hz))
// 		if err != nil {
// 			return err
// 		}
// 		defaultInstance, err := ecs.NewInstance(ctx, "defaultInstance", &ecs.InstanceArgs{
// 			VswitchId:               defaultSwitch.ID(),
// 			ImageId:                 pulumi.String(defaultImages.Images[0].Id),
// 			InstanceType:            pulumi.String(defaultInstanceTypes.InstanceTypes[0].Id),
// 			SystemDiskCategory:      pulumi.String("cloud_efficiency"),
// 			InternetChargeType:      pulumi.String("PayByTraffic"),
// 			InternetMaxBandwidthOut: pulumi.Int(5),
// 			SecurityGroups: pulumi.StringArray{
// 				defaultSecurityGroup.ID(),
// 			},
// 			InstanceName: pulumi.String(name),
// 		}, pulumi.Provider(alicloud.Hz))
// 		if err != nil {
// 			return err
// 		}
// 		cen, err := cen.NewInstance(ctx, "cen", nil)
// 		if err != nil {
// 			return err
// 		}
// 		attach, err := cen.NewInstanceAttachment(ctx, "attach", &cen.InstanceAttachmentArgs{
// 			InstanceId:            cen.ID(),
// 			ChildInstanceId:       vpc.ID(),
// 			ChildInstanceType:     pulumi.String("VPC"),
// 			ChildInstanceRegionId: pulumi.String("cn-hangzhou"),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			defaultSwitch,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		route, err := vpc.NewRouteEntry(ctx, "route", &vpc.RouteEntryArgs{
// 			RouteTableId:         vpc.RouteTableId,
// 			DestinationCidrblock: pulumi.String("11.0.0.0/16"),
// 			NexthopType:          pulumi.String("Instance"),
// 			NexthopId:            defaultInstance.ID(),
// 		}, pulumi.Provider(alicloud.Hz))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = cen.NewRouteEntry(ctx, "foo", &cen.RouteEntryArgs{
// 			InstanceId:   cen.ID(),
// 			RouteTableId: vpc.RouteTableId,
// 			CidrBlock:    route.DestinationCidrblock,
// 		}, pulumi.Provider(alicloud.Hz), pulumi.DependsOn([]pulumi.Resource{
// 			attach,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type RouteEntry struct {
	pulumi.CustomResourceState

	// The destination CIDR block of the route entry to publish.
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// The ID of the CEN.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The route table of the attached VBR or VPC.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
}

// NewRouteEntry registers a new resource with the given unique name, arguments, and options.
func NewRouteEntry(ctx *pulumi.Context,
	name string, args *RouteEntryArgs, opts ...pulumi.ResourceOption) (*RouteEntry, error) {
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.RouteTableId == nil {
		return nil, errors.New("missing required argument 'RouteTableId'")
	}
	if args == nil {
		args = &RouteEntryArgs{}
	}
	var resource RouteEntry
	err := ctx.RegisterResource("alicloud:cen/routeEntry:RouteEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteEntry gets an existing RouteEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteEntryState, opts ...pulumi.ResourceOption) (*RouteEntry, error) {
	var resource RouteEntry
	err := ctx.ReadResource("alicloud:cen/routeEntry:RouteEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteEntry resources.
type routeEntryState struct {
	// The destination CIDR block of the route entry to publish.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The ID of the CEN.
	InstanceId *string `pulumi:"instanceId"`
	// The route table of the attached VBR or VPC.
	RouteTableId *string `pulumi:"routeTableId"`
}

type RouteEntryState struct {
	// The destination CIDR block of the route entry to publish.
	CidrBlock pulumi.StringPtrInput
	// The ID of the CEN.
	InstanceId pulumi.StringPtrInput
	// The route table of the attached VBR or VPC.
	RouteTableId pulumi.StringPtrInput
}

func (RouteEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeEntryState)(nil)).Elem()
}

type routeEntryArgs struct {
	// The destination CIDR block of the route entry to publish.
	CidrBlock string `pulumi:"cidrBlock"`
	// The ID of the CEN.
	InstanceId string `pulumi:"instanceId"`
	// The route table of the attached VBR or VPC.
	RouteTableId string `pulumi:"routeTableId"`
}

// The set of arguments for constructing a RouteEntry resource.
type RouteEntryArgs struct {
	// The destination CIDR block of the route entry to publish.
	CidrBlock pulumi.StringInput
	// The ID of the CEN.
	InstanceId pulumi.StringInput
	// The route table of the attached VBR or VPC.
	RouteTableId pulumi.StringInput
}

func (RouteEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeEntryArgs)(nil)).Elem()
}
