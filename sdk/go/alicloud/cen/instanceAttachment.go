// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a CEN child instance attachment resource that associate the network(VPC, CCN, VBR) with the CEN instance.
//
// ->**NOTE:** Available in 1.42.0+
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cen"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		name := "tf-testAccCenInstanceAttachmentBasic"
// 		if param := cfg.Get("name"); param != "" {
// 			name = param
// 		}
// 		cen, err := cen.NewInstance(ctx, "cen", &cen.InstanceArgs{
// 			Description: pulumi.String("terraform01"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		vpc, err := vpc.NewNetwork(ctx, "vpc", &vpc.NetworkArgs{
// 			CidrBlock: pulumi.String("192.168.0.0/16"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = cen.NewInstanceAttachment(ctx, "foo", &cen.InstanceAttachmentArgs{
// 			InstanceId:            cen.ID(),
// 			ChildInstanceId:       vpc.ID(),
// 			ChildInstanceType:     pulumi.String("VPC"),
// 			ChildInstanceRegionId: pulumi.String("cn-beijing"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// CEN instance can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:cen/instanceAttachment:InstanceAttachment example cen-m7i7pjmkon********:vpc-2ze2w07mcy9nz********:VPC:cn-beijing
// ```
type InstanceAttachment struct {
	pulumi.CustomResourceState

	// The account ID to which the CEN instance belongs.
	CenOwnerId pulumi.IntPtrOutput `pulumi:"cenOwnerId"`
	// The ID of the child instance to attach.
	ChildInstanceId pulumi.StringOutput `pulumi:"childInstanceId"`
	// The uid of the child instance. Only used when attach a child instance of other account.
	ChildInstanceOwnerId pulumi.IntOutput `pulumi:"childInstanceOwnerId"`
	// The region ID of the child instance to attach.
	ChildInstanceRegionId pulumi.StringOutput `pulumi:"childInstanceRegionId"`
	// The type of the associated network. Valid values: `VPC`, `VBR` and `CCN`.
	ChildInstanceType pulumi.StringOutput `pulumi:"childInstanceType"`
	// The ID of the CEN.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The associating status of the network.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewInstanceAttachment registers a new resource with the given unique name, arguments, and options.
func NewInstanceAttachment(ctx *pulumi.Context,
	name string, args *InstanceAttachmentArgs, opts ...pulumi.ResourceOption) (*InstanceAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChildInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'ChildInstanceId'")
	}
	if args.ChildInstanceRegionId == nil {
		return nil, errors.New("invalid value for required argument 'ChildInstanceRegionId'")
	}
	if args.ChildInstanceType == nil {
		return nil, errors.New("invalid value for required argument 'ChildInstanceType'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource InstanceAttachment
	err := ctx.RegisterResource("alicloud:cen/instanceAttachment:InstanceAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceAttachment gets an existing InstanceAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceAttachmentState, opts ...pulumi.ResourceOption) (*InstanceAttachment, error) {
	var resource InstanceAttachment
	err := ctx.ReadResource("alicloud:cen/instanceAttachment:InstanceAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceAttachment resources.
type instanceAttachmentState struct {
	// The account ID to which the CEN instance belongs.
	CenOwnerId *int `pulumi:"cenOwnerId"`
	// The ID of the child instance to attach.
	ChildInstanceId *string `pulumi:"childInstanceId"`
	// The uid of the child instance. Only used when attach a child instance of other account.
	ChildInstanceOwnerId *int `pulumi:"childInstanceOwnerId"`
	// The region ID of the child instance to attach.
	ChildInstanceRegionId *string `pulumi:"childInstanceRegionId"`
	// The type of the associated network. Valid values: `VPC`, `VBR` and `CCN`.
	ChildInstanceType *string `pulumi:"childInstanceType"`
	// The ID of the CEN.
	InstanceId *string `pulumi:"instanceId"`
	// The associating status of the network.
	Status *string `pulumi:"status"`
}

type InstanceAttachmentState struct {
	// The account ID to which the CEN instance belongs.
	CenOwnerId pulumi.IntPtrInput
	// The ID of the child instance to attach.
	ChildInstanceId pulumi.StringPtrInput
	// The uid of the child instance. Only used when attach a child instance of other account.
	ChildInstanceOwnerId pulumi.IntPtrInput
	// The region ID of the child instance to attach.
	ChildInstanceRegionId pulumi.StringPtrInput
	// The type of the associated network. Valid values: `VPC`, `VBR` and `CCN`.
	ChildInstanceType pulumi.StringPtrInput
	// The ID of the CEN.
	InstanceId pulumi.StringPtrInput
	// The associating status of the network.
	Status pulumi.StringPtrInput
}

func (InstanceAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceAttachmentState)(nil)).Elem()
}

type instanceAttachmentArgs struct {
	// The account ID to which the CEN instance belongs.
	CenOwnerId *int `pulumi:"cenOwnerId"`
	// The ID of the child instance to attach.
	ChildInstanceId string `pulumi:"childInstanceId"`
	// The uid of the child instance. Only used when attach a child instance of other account.
	ChildInstanceOwnerId *int `pulumi:"childInstanceOwnerId"`
	// The region ID of the child instance to attach.
	ChildInstanceRegionId string `pulumi:"childInstanceRegionId"`
	// The type of the associated network. Valid values: `VPC`, `VBR` and `CCN`.
	ChildInstanceType string `pulumi:"childInstanceType"`
	// The ID of the CEN.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a InstanceAttachment resource.
type InstanceAttachmentArgs struct {
	// The account ID to which the CEN instance belongs.
	CenOwnerId pulumi.IntPtrInput
	// The ID of the child instance to attach.
	ChildInstanceId pulumi.StringInput
	// The uid of the child instance. Only used when attach a child instance of other account.
	ChildInstanceOwnerId pulumi.IntPtrInput
	// The region ID of the child instance to attach.
	ChildInstanceRegionId pulumi.StringInput
	// The type of the associated network. Valid values: `VPC`, `VBR` and `CCN`.
	ChildInstanceType pulumi.StringInput
	// The ID of the CEN.
	InstanceId pulumi.StringInput
}

func (InstanceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceAttachmentArgs)(nil)).Elem()
}

type InstanceAttachmentInput interface {
	pulumi.Input

	ToInstanceAttachmentOutput() InstanceAttachmentOutput
	ToInstanceAttachmentOutputWithContext(ctx context.Context) InstanceAttachmentOutput
}

func (*InstanceAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAttachment)(nil)).Elem()
}

func (i *InstanceAttachment) ToInstanceAttachmentOutput() InstanceAttachmentOutput {
	return i.ToInstanceAttachmentOutputWithContext(context.Background())
}

func (i *InstanceAttachment) ToInstanceAttachmentOutputWithContext(ctx context.Context) InstanceAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAttachmentOutput)
}

// InstanceAttachmentArrayInput is an input type that accepts InstanceAttachmentArray and InstanceAttachmentArrayOutput values.
// You can construct a concrete instance of `InstanceAttachmentArrayInput` via:
//
//          InstanceAttachmentArray{ InstanceAttachmentArgs{...} }
type InstanceAttachmentArrayInput interface {
	pulumi.Input

	ToInstanceAttachmentArrayOutput() InstanceAttachmentArrayOutput
	ToInstanceAttachmentArrayOutputWithContext(context.Context) InstanceAttachmentArrayOutput
}

type InstanceAttachmentArray []InstanceAttachmentInput

func (InstanceAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceAttachment)(nil)).Elem()
}

func (i InstanceAttachmentArray) ToInstanceAttachmentArrayOutput() InstanceAttachmentArrayOutput {
	return i.ToInstanceAttachmentArrayOutputWithContext(context.Background())
}

func (i InstanceAttachmentArray) ToInstanceAttachmentArrayOutputWithContext(ctx context.Context) InstanceAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAttachmentArrayOutput)
}

// InstanceAttachmentMapInput is an input type that accepts InstanceAttachmentMap and InstanceAttachmentMapOutput values.
// You can construct a concrete instance of `InstanceAttachmentMapInput` via:
//
//          InstanceAttachmentMap{ "key": InstanceAttachmentArgs{...} }
type InstanceAttachmentMapInput interface {
	pulumi.Input

	ToInstanceAttachmentMapOutput() InstanceAttachmentMapOutput
	ToInstanceAttachmentMapOutputWithContext(context.Context) InstanceAttachmentMapOutput
}

type InstanceAttachmentMap map[string]InstanceAttachmentInput

func (InstanceAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceAttachment)(nil)).Elem()
}

func (i InstanceAttachmentMap) ToInstanceAttachmentMapOutput() InstanceAttachmentMapOutput {
	return i.ToInstanceAttachmentMapOutputWithContext(context.Background())
}

func (i InstanceAttachmentMap) ToInstanceAttachmentMapOutputWithContext(ctx context.Context) InstanceAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAttachmentMapOutput)
}

type InstanceAttachmentOutput struct{ *pulumi.OutputState }

func (InstanceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAttachment)(nil)).Elem()
}

func (o InstanceAttachmentOutput) ToInstanceAttachmentOutput() InstanceAttachmentOutput {
	return o
}

func (o InstanceAttachmentOutput) ToInstanceAttachmentOutputWithContext(ctx context.Context) InstanceAttachmentOutput {
	return o
}

type InstanceAttachmentArrayOutput struct{ *pulumi.OutputState }

func (InstanceAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceAttachment)(nil)).Elem()
}

func (o InstanceAttachmentArrayOutput) ToInstanceAttachmentArrayOutput() InstanceAttachmentArrayOutput {
	return o
}

func (o InstanceAttachmentArrayOutput) ToInstanceAttachmentArrayOutputWithContext(ctx context.Context) InstanceAttachmentArrayOutput {
	return o
}

func (o InstanceAttachmentArrayOutput) Index(i pulumi.IntInput) InstanceAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceAttachment {
		return vs[0].([]*InstanceAttachment)[vs[1].(int)]
	}).(InstanceAttachmentOutput)
}

type InstanceAttachmentMapOutput struct{ *pulumi.OutputState }

func (InstanceAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceAttachment)(nil)).Elem()
}

func (o InstanceAttachmentMapOutput) ToInstanceAttachmentMapOutput() InstanceAttachmentMapOutput {
	return o
}

func (o InstanceAttachmentMapOutput) ToInstanceAttachmentMapOutputWithContext(ctx context.Context) InstanceAttachmentMapOutput {
	return o
}

func (o InstanceAttachmentMapOutput) MapIndex(k pulumi.StringInput) InstanceAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceAttachment {
		return vs[0].(map[string]*InstanceAttachment)[vs[1].(string)]
	}).(InstanceAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAttachmentInput)(nil)).Elem(), &InstanceAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAttachmentArrayInput)(nil)).Elem(), InstanceAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAttachmentMapInput)(nil)).Elem(), InstanceAttachmentMap{})
	pulumi.RegisterOutputType(InstanceAttachmentOutput{})
	pulumi.RegisterOutputType(InstanceAttachmentArrayOutput{})
	pulumi.RegisterOutputType(InstanceAttachmentMapOutput{})
}
