// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a CEN bandwidth package attachment resource. The resource can be used to bind a bandwidth package to a specified CEN instance.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cen"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cen, err := cen.NewInstance(ctx, "cen", &cen.InstanceArgs{
//				Description: pulumi.String("tf-testAccCenBandwidthPackageAttachmentDescription"),
//			})
//			if err != nil {
//				return err
//			}
//			bwp, err := cen.NewBandwidthPackage(ctx, "bwp", &cen.BandwidthPackageArgs{
//				Bandwidth: pulumi.Int(20),
//				GeographicRegionIds: pulumi.StringArray{
//					pulumi.String("China"),
//					pulumi.String("Asia-Pacific"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cen.NewBandwidthPackageAttachment(ctx, "foo", &cen.BandwidthPackageAttachmentArgs{
//				InstanceId:         cen.ID(),
//				BandwidthPackageId: bwp.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CEN bandwidth package attachment resource can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:cen/bandwidthPackageAttachment:BandwidthPackageAttachment example bwp-abc123456
//
// ```
type BandwidthPackageAttachment struct {
	pulumi.CustomResourceState

	// The ID of the bandwidth package.
	BandwidthPackageId pulumi.StringOutput `pulumi:"bandwidthPackageId"`
	// The ID of the CEN.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewBandwidthPackageAttachment registers a new resource with the given unique name, arguments, and options.
func NewBandwidthPackageAttachment(ctx *pulumi.Context,
	name string, args *BandwidthPackageAttachmentArgs, opts ...pulumi.ResourceOption) (*BandwidthPackageAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BandwidthPackageId == nil {
		return nil, errors.New("invalid value for required argument 'BandwidthPackageId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource BandwidthPackageAttachment
	err := ctx.RegisterResource("alicloud:cen/bandwidthPackageAttachment:BandwidthPackageAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBandwidthPackageAttachment gets an existing BandwidthPackageAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBandwidthPackageAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BandwidthPackageAttachmentState, opts ...pulumi.ResourceOption) (*BandwidthPackageAttachment, error) {
	var resource BandwidthPackageAttachment
	err := ctx.ReadResource("alicloud:cen/bandwidthPackageAttachment:BandwidthPackageAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BandwidthPackageAttachment resources.
type bandwidthPackageAttachmentState struct {
	// The ID of the bandwidth package.
	BandwidthPackageId *string `pulumi:"bandwidthPackageId"`
	// The ID of the CEN.
	InstanceId *string `pulumi:"instanceId"`
}

type BandwidthPackageAttachmentState struct {
	// The ID of the bandwidth package.
	BandwidthPackageId pulumi.StringPtrInput
	// The ID of the CEN.
	InstanceId pulumi.StringPtrInput
}

func (BandwidthPackageAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthPackageAttachmentState)(nil)).Elem()
}

type bandwidthPackageAttachmentArgs struct {
	// The ID of the bandwidth package.
	BandwidthPackageId string `pulumi:"bandwidthPackageId"`
	// The ID of the CEN.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a BandwidthPackageAttachment resource.
type BandwidthPackageAttachmentArgs struct {
	// The ID of the bandwidth package.
	BandwidthPackageId pulumi.StringInput
	// The ID of the CEN.
	InstanceId pulumi.StringInput
}

func (BandwidthPackageAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthPackageAttachmentArgs)(nil)).Elem()
}

type BandwidthPackageAttachmentInput interface {
	pulumi.Input

	ToBandwidthPackageAttachmentOutput() BandwidthPackageAttachmentOutput
	ToBandwidthPackageAttachmentOutputWithContext(ctx context.Context) BandwidthPackageAttachmentOutput
}

func (*BandwidthPackageAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**BandwidthPackageAttachment)(nil)).Elem()
}

func (i *BandwidthPackageAttachment) ToBandwidthPackageAttachmentOutput() BandwidthPackageAttachmentOutput {
	return i.ToBandwidthPackageAttachmentOutputWithContext(context.Background())
}

func (i *BandwidthPackageAttachment) ToBandwidthPackageAttachmentOutputWithContext(ctx context.Context) BandwidthPackageAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageAttachmentOutput)
}

// BandwidthPackageAttachmentArrayInput is an input type that accepts BandwidthPackageAttachmentArray and BandwidthPackageAttachmentArrayOutput values.
// You can construct a concrete instance of `BandwidthPackageAttachmentArrayInput` via:
//
//	BandwidthPackageAttachmentArray{ BandwidthPackageAttachmentArgs{...} }
type BandwidthPackageAttachmentArrayInput interface {
	pulumi.Input

	ToBandwidthPackageAttachmentArrayOutput() BandwidthPackageAttachmentArrayOutput
	ToBandwidthPackageAttachmentArrayOutputWithContext(context.Context) BandwidthPackageAttachmentArrayOutput
}

type BandwidthPackageAttachmentArray []BandwidthPackageAttachmentInput

func (BandwidthPackageAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BandwidthPackageAttachment)(nil)).Elem()
}

func (i BandwidthPackageAttachmentArray) ToBandwidthPackageAttachmentArrayOutput() BandwidthPackageAttachmentArrayOutput {
	return i.ToBandwidthPackageAttachmentArrayOutputWithContext(context.Background())
}

func (i BandwidthPackageAttachmentArray) ToBandwidthPackageAttachmentArrayOutputWithContext(ctx context.Context) BandwidthPackageAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageAttachmentArrayOutput)
}

// BandwidthPackageAttachmentMapInput is an input type that accepts BandwidthPackageAttachmentMap and BandwidthPackageAttachmentMapOutput values.
// You can construct a concrete instance of `BandwidthPackageAttachmentMapInput` via:
//
//	BandwidthPackageAttachmentMap{ "key": BandwidthPackageAttachmentArgs{...} }
type BandwidthPackageAttachmentMapInput interface {
	pulumi.Input

	ToBandwidthPackageAttachmentMapOutput() BandwidthPackageAttachmentMapOutput
	ToBandwidthPackageAttachmentMapOutputWithContext(context.Context) BandwidthPackageAttachmentMapOutput
}

type BandwidthPackageAttachmentMap map[string]BandwidthPackageAttachmentInput

func (BandwidthPackageAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BandwidthPackageAttachment)(nil)).Elem()
}

func (i BandwidthPackageAttachmentMap) ToBandwidthPackageAttachmentMapOutput() BandwidthPackageAttachmentMapOutput {
	return i.ToBandwidthPackageAttachmentMapOutputWithContext(context.Background())
}

func (i BandwidthPackageAttachmentMap) ToBandwidthPackageAttachmentMapOutputWithContext(ctx context.Context) BandwidthPackageAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageAttachmentMapOutput)
}

type BandwidthPackageAttachmentOutput struct{ *pulumi.OutputState }

func (BandwidthPackageAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BandwidthPackageAttachment)(nil)).Elem()
}

func (o BandwidthPackageAttachmentOutput) ToBandwidthPackageAttachmentOutput() BandwidthPackageAttachmentOutput {
	return o
}

func (o BandwidthPackageAttachmentOutput) ToBandwidthPackageAttachmentOutputWithContext(ctx context.Context) BandwidthPackageAttachmentOutput {
	return o
}

// The ID of the bandwidth package.
func (o BandwidthPackageAttachmentOutput) BandwidthPackageId() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPackageAttachment) pulumi.StringOutput { return v.BandwidthPackageId }).(pulumi.StringOutput)
}

// The ID of the CEN.
func (o BandwidthPackageAttachmentOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPackageAttachment) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type BandwidthPackageAttachmentArrayOutput struct{ *pulumi.OutputState }

func (BandwidthPackageAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BandwidthPackageAttachment)(nil)).Elem()
}

func (o BandwidthPackageAttachmentArrayOutput) ToBandwidthPackageAttachmentArrayOutput() BandwidthPackageAttachmentArrayOutput {
	return o
}

func (o BandwidthPackageAttachmentArrayOutput) ToBandwidthPackageAttachmentArrayOutputWithContext(ctx context.Context) BandwidthPackageAttachmentArrayOutput {
	return o
}

func (o BandwidthPackageAttachmentArrayOutput) Index(i pulumi.IntInput) BandwidthPackageAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BandwidthPackageAttachment {
		return vs[0].([]*BandwidthPackageAttachment)[vs[1].(int)]
	}).(BandwidthPackageAttachmentOutput)
}

type BandwidthPackageAttachmentMapOutput struct{ *pulumi.OutputState }

func (BandwidthPackageAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BandwidthPackageAttachment)(nil)).Elem()
}

func (o BandwidthPackageAttachmentMapOutput) ToBandwidthPackageAttachmentMapOutput() BandwidthPackageAttachmentMapOutput {
	return o
}

func (o BandwidthPackageAttachmentMapOutput) ToBandwidthPackageAttachmentMapOutputWithContext(ctx context.Context) BandwidthPackageAttachmentMapOutput {
	return o
}

func (o BandwidthPackageAttachmentMapOutput) MapIndex(k pulumi.StringInput) BandwidthPackageAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BandwidthPackageAttachment {
		return vs[0].(map[string]*BandwidthPackageAttachment)[vs[1].(string)]
	}).(BandwidthPackageAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageAttachmentInput)(nil)).Elem(), &BandwidthPackageAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageAttachmentArrayInput)(nil)).Elem(), BandwidthPackageAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageAttachmentMapInput)(nil)).Elem(), BandwidthPackageAttachmentMap{})
	pulumi.RegisterOutputType(BandwidthPackageAttachmentOutput{})
	pulumi.RegisterOutputType(BandwidthPackageAttachmentArrayOutput{})
	pulumi.RegisterOutputType(BandwidthPackageAttachmentMapOutput{})
}
