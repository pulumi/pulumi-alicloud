// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloud Enterprise Network (CEN) Transit Router Vpn Attachment resource.
//
// For information about Cloud Enterprise Network (CEN) Transit Router Vpn Attachment and how to use it, see [What is Transit Router Vpn Attachment](https://help.aliyun.com/document_detail/443993.html).
//
// > **NOTE:** Available in v1.183.0+.
//
// ## Example Usage
// ### Basic Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cen"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultTransitRouterAvailableResources, err := cen.GetTransitRouterAvailableResources(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultInstance, err := cen.NewInstance(ctx, "defaultInstance", &cen.InstanceArgs{
//				CenInstanceName: pulumi.String("tf-example"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouter, err := cen.NewTransitRouter(ctx, "defaultTransitRouter", &cen.TransitRouterArgs{
//				CenId:                    defaultInstance.ID(),
//				TransitRouterDescription: pulumi.String("tf-example-description"),
//				TransitRouterName:        pulumi.String("tf-example-name"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultCustomerGateway, err := vpn.NewCustomerGateway(ctx, "defaultCustomerGateway", &vpn.CustomerGatewayArgs{
//				IpAddress:   pulumi.String("42.104.22.210"),
//				Asn:         pulumi.String("45014"),
//				Description: pulumi.String("testAccVpnConnectionDesc"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultGatewayVpnAttachment, err := vpn.NewGatewayVpnAttachment(ctx, "defaultGatewayVpnAttachment", &vpn.GatewayVpnAttachmentArgs{
//				CustomerGatewayId: defaultCustomerGateway.ID(),
//				NetworkType:       pulumi.String("public"),
//				LocalSubnet:       pulumi.String("0.0.0.0/0"),
//				RemoteSubnet:      pulumi.String("0.0.0.0/0"),
//				EffectImmediately: pulumi.Bool(false),
//				IkeConfig: &vpn.GatewayVpnAttachmentIkeConfigArgs{
//					IkeAuthAlg:  pulumi.String("md5"),
//					IkeEncAlg:   pulumi.String("des"),
//					IkeVersion:  pulumi.String("ikev2"),
//					IkeMode:     pulumi.String("main"),
//					IkeLifetime: pulumi.Int(86400),
//					Psk:         pulumi.String("tf-testvpn2"),
//					IkePfs:      pulumi.String("group1"),
//					RemoteId:    pulumi.String("testbob2"),
//					LocalId:     pulumi.String("testalice2"),
//				},
//				IpsecConfig: &vpn.GatewayVpnAttachmentIpsecConfigArgs{
//					IpsecPfs:      pulumi.String("group5"),
//					IpsecEncAlg:   pulumi.String("des"),
//					IpsecAuthAlg:  pulumi.String("md5"),
//					IpsecLifetime: pulumi.Int(86400),
//				},
//				BgpConfig: &vpn.GatewayVpnAttachmentBgpConfigArgs{
//					Enable:     pulumi.Bool(true),
//					LocalAsn:   pulumi.Int(45014),
//					TunnelCidr: pulumi.String("169.254.11.0/30"),
//					LocalBgpIp: pulumi.String("169.254.11.1"),
//				},
//				HealthCheckConfig: &vpn.GatewayVpnAttachmentHealthCheckConfigArgs{
//					Enable:   pulumi.Bool(true),
//					Sip:      pulumi.String("192.168.1.1"),
//					Dip:      pulumi.String("10.0.0.1"),
//					Interval: pulumi.Int(10),
//					Retry:    pulumi.Int(10),
//					Policy:   pulumi.String("revoke_route"),
//				},
//				EnableDpd:          pulumi.Bool(true),
//				EnableNatTraversal: pulumi.Bool(true),
//				VpnAttachmentName:  pulumi.String("tf-example-name"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cen.NewTransitRouterVpnAttachment(ctx, "defaultTransitRouterVpnAttachment", &cen.TransitRouterVpnAttachmentArgs{
//				AutoPublishRouteEnabled:            pulumi.Bool(false),
//				TransitRouterAttachmentDescription: pulumi.String("tf-example-description"),
//				TransitRouterAttachmentName:        pulumi.String("tf-example-name"),
//				CenId:                              defaultTransitRouter.CenId,
//				TransitRouterId:                    defaultTransitRouter.TransitRouterId,
//				VpnId:                              defaultGatewayVpnAttachment.ID(),
//				Zones: cen.TransitRouterVpnAttachmentZoneArray{
//					&cen.TransitRouterVpnAttachmentZoneArgs{
//						ZoneId: *pulumi.String(defaultTransitRouterAvailableResources.Resources[0].MasterZones[0]),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example Create a Transit Router Vpn Attachment with Transit Router Cidr
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cen"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultTransitRouterAvailableResources, err := cen.GetTransitRouterAvailableResources(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultInstance, err := cen.NewInstance(ctx, "defaultInstance", &cen.InstanceArgs{
//				CenInstanceName: pulumi.String("tf-example"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouter, err := cen.NewTransitRouter(ctx, "defaultTransitRouter", &cen.TransitRouterArgs{
//				CenId: defaultInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouterCidr, err := cen.NewTransitRouterCidr(ctx, "defaultTransitRouterCidr", &cen.TransitRouterCidrArgs{
//				TransitRouterId:       defaultTransitRouter.TransitRouterId,
//				Cidr:                  pulumi.String("192.168.0.0/16"),
//				TransitRouterCidrName: pulumi.String("tf-example-name"),
//				Description:           pulumi.String("tf-example-description"),
//				PublishCidrRoute:      pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			defaultCustomerGateway, err := vpn.NewCustomerGateway(ctx, "defaultCustomerGateway", &vpn.CustomerGatewayArgs{
//				IpAddress: pulumi.String("42.104.22.210"),
//				Asn:       pulumi.String("45014"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultGatewayVpnAttachment, err := vpn.NewGatewayVpnAttachment(ctx, "defaultGatewayVpnAttachment", &vpn.GatewayVpnAttachmentArgs{
//				CustomerGatewayId: defaultCustomerGateway.ID(),
//				NetworkType:       pulumi.String("public"),
//				LocalSubnet:       pulumi.String("0.0.0.0/0"),
//				RemoteSubnet:      pulumi.String("0.0.0.0/0"),
//				EffectImmediately: pulumi.Bool(false),
//				IkeConfig: &vpn.GatewayVpnAttachmentIkeConfigArgs{
//					IkeAuthAlg:  pulumi.String("md5"),
//					IkeEncAlg:   pulumi.String("des"),
//					IkeVersion:  pulumi.String("ikev2"),
//					IkeMode:     pulumi.String("main"),
//					IkeLifetime: pulumi.Int(86400),
//					Psk:         pulumi.String("tf-testvpn2"),
//					IkePfs:      pulumi.String("group1"),
//					RemoteId:    pulumi.String("testbob2"),
//					LocalId:     pulumi.String("testalice2"),
//				},
//				IpsecConfig: &vpn.GatewayVpnAttachmentIpsecConfigArgs{
//					IpsecPfs:      pulumi.String("group5"),
//					IpsecEncAlg:   pulumi.String("des"),
//					IpsecAuthAlg:  pulumi.String("md5"),
//					IpsecLifetime: pulumi.Int(86400),
//				},
//				BgpConfig: &vpn.GatewayVpnAttachmentBgpConfigArgs{
//					Enable:     pulumi.Bool(true),
//					LocalAsn:   pulumi.Int(45014),
//					TunnelCidr: pulumi.String("169.254.11.0/30"),
//					LocalBgpIp: pulumi.String("169.254.11.1"),
//				},
//				HealthCheckConfig: &vpn.GatewayVpnAttachmentHealthCheckConfigArgs{
//					Enable:   pulumi.Bool(true),
//					Sip:      pulumi.String("192.168.1.1"),
//					Dip:      pulumi.String("10.0.0.1"),
//					Interval: pulumi.Int(10),
//					Retry:    pulumi.Int(10),
//					Policy:   pulumi.String("revoke_route"),
//				},
//				EnableDpd:          pulumi.Bool(true),
//				EnableNatTraversal: pulumi.Bool(true),
//				VpnAttachmentName:  pulumi.String("tf-example-name"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cen.NewTransitRouterVpnAttachment(ctx, "defaultTransitRouterVpnAttachment", &cen.TransitRouterVpnAttachmentArgs{
//				AutoPublishRouteEnabled:            pulumi.Bool(false),
//				TransitRouterAttachmentDescription: pulumi.String("tf-example-description"),
//				TransitRouterAttachmentName:        pulumi.String("tf-example-name"),
//				CenId:                              defaultTransitRouter.CenId,
//				TransitRouterId:                    defaultTransitRouterCidr.TransitRouterId,
//				VpnId:                              defaultGatewayVpnAttachment.ID(),
//				Zones: cen.TransitRouterVpnAttachmentZoneArray{
//					&cen.TransitRouterVpnAttachmentZoneArgs{
//						ZoneId: *pulumi.String(defaultTransitRouterAvailableResources.Resources[0].MasterZones[0]),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cloud Enterprise Network (CEN) Transit Router Vpn Attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:cen/transitRouterVpnAttachment:TransitRouterVpnAttachment example <id>
//
// ```
type TransitRouterVpnAttachment struct {
	pulumi.CustomResourceState

	// Whether to allow the forwarding router instance to automatically publish routing entries to IPsec connections.
	AutoPublishRouteEnabled pulumi.BoolOutput `pulumi:"autoPublishRouteEnabled"`
	// The id of the cen.
	CenId pulumi.StringPtrOutput `pulumi:"cenId"`
	// The associating status of the network.
	Status pulumi.StringOutput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// The description of the VPN connection. The description can contain `2` to `256` characters. The description must start with English letters, but cannot start with `http://` or `https://`.
	TransitRouterAttachmentDescription pulumi.StringPtrOutput `pulumi:"transitRouterAttachmentDescription"`
	// The name of the VPN connection. The name must be `2` to `128` characters in length, and can contain digits, underscores (_), and hyphens (-). It must start with a letter.
	TransitRouterAttachmentName pulumi.StringPtrOutput `pulumi:"transitRouterAttachmentName"`
	// The ID of the forwarding router instance.
	TransitRouterId pulumi.StringOutput `pulumi:"transitRouterId"`
	// The id of the vpn.
	VpnId pulumi.StringOutput `pulumi:"vpnId"`
	// The owner id of vpn. **NOTE:** You must set `vpnOwnerId`, if you want to connect the transit router to an IPsec-VPN connection that belongs to another Alibaba Cloud account.
	VpnOwnerId pulumi.StringOutput `pulumi:"vpnOwnerId"`
	// The list of zone mapping. See the following `Block zone`.
	Zones TransitRouterVpnAttachmentZoneArrayOutput `pulumi:"zones"`
}

// NewTransitRouterVpnAttachment registers a new resource with the given unique name, arguments, and options.
func NewTransitRouterVpnAttachment(ctx *pulumi.Context,
	name string, args *TransitRouterVpnAttachmentArgs, opts ...pulumi.ResourceOption) (*TransitRouterVpnAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitRouterId == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouterId'")
	}
	if args.VpnId == nil {
		return nil, errors.New("invalid value for required argument 'VpnId'")
	}
	if args.Zones == nil {
		return nil, errors.New("invalid value for required argument 'Zones'")
	}
	var resource TransitRouterVpnAttachment
	err := ctx.RegisterResource("alicloud:cen/transitRouterVpnAttachment:TransitRouterVpnAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransitRouterVpnAttachment gets an existing TransitRouterVpnAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransitRouterVpnAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransitRouterVpnAttachmentState, opts ...pulumi.ResourceOption) (*TransitRouterVpnAttachment, error) {
	var resource TransitRouterVpnAttachment
	err := ctx.ReadResource("alicloud:cen/transitRouterVpnAttachment:TransitRouterVpnAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransitRouterVpnAttachment resources.
type transitRouterVpnAttachmentState struct {
	// Whether to allow the forwarding router instance to automatically publish routing entries to IPsec connections.
	AutoPublishRouteEnabled *bool `pulumi:"autoPublishRouteEnabled"`
	// The id of the cen.
	CenId *string `pulumi:"cenId"`
	// The associating status of the network.
	Status *string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The description of the VPN connection. The description can contain `2` to `256` characters. The description must start with English letters, but cannot start with `http://` or `https://`.
	TransitRouterAttachmentDescription *string `pulumi:"transitRouterAttachmentDescription"`
	// The name of the VPN connection. The name must be `2` to `128` characters in length, and can contain digits, underscores (_), and hyphens (-). It must start with a letter.
	TransitRouterAttachmentName *string `pulumi:"transitRouterAttachmentName"`
	// The ID of the forwarding router instance.
	TransitRouterId *string `pulumi:"transitRouterId"`
	// The id of the vpn.
	VpnId *string `pulumi:"vpnId"`
	// The owner id of vpn. **NOTE:** You must set `vpnOwnerId`, if you want to connect the transit router to an IPsec-VPN connection that belongs to another Alibaba Cloud account.
	VpnOwnerId *string `pulumi:"vpnOwnerId"`
	// The list of zone mapping. See the following `Block zone`.
	Zones []TransitRouterVpnAttachmentZone `pulumi:"zones"`
}

type TransitRouterVpnAttachmentState struct {
	// Whether to allow the forwarding router instance to automatically publish routing entries to IPsec connections.
	AutoPublishRouteEnabled pulumi.BoolPtrInput
	// The id of the cen.
	CenId pulumi.StringPtrInput
	// The associating status of the network.
	Status pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
	// The description of the VPN connection. The description can contain `2` to `256` characters. The description must start with English letters, but cannot start with `http://` or `https://`.
	TransitRouterAttachmentDescription pulumi.StringPtrInput
	// The name of the VPN connection. The name must be `2` to `128` characters in length, and can contain digits, underscores (_), and hyphens (-). It must start with a letter.
	TransitRouterAttachmentName pulumi.StringPtrInput
	// The ID of the forwarding router instance.
	TransitRouterId pulumi.StringPtrInput
	// The id of the vpn.
	VpnId pulumi.StringPtrInput
	// The owner id of vpn. **NOTE:** You must set `vpnOwnerId`, if you want to connect the transit router to an IPsec-VPN connection that belongs to another Alibaba Cloud account.
	VpnOwnerId pulumi.StringPtrInput
	// The list of zone mapping. See the following `Block zone`.
	Zones TransitRouterVpnAttachmentZoneArrayInput
}

func (TransitRouterVpnAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*transitRouterVpnAttachmentState)(nil)).Elem()
}

type transitRouterVpnAttachmentArgs struct {
	// Whether to allow the forwarding router instance to automatically publish routing entries to IPsec connections.
	AutoPublishRouteEnabled *bool `pulumi:"autoPublishRouteEnabled"`
	// The id of the cen.
	CenId *string `pulumi:"cenId"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The description of the VPN connection. The description can contain `2` to `256` characters. The description must start with English letters, but cannot start with `http://` or `https://`.
	TransitRouterAttachmentDescription *string `pulumi:"transitRouterAttachmentDescription"`
	// The name of the VPN connection. The name must be `2` to `128` characters in length, and can contain digits, underscores (_), and hyphens (-). It must start with a letter.
	TransitRouterAttachmentName *string `pulumi:"transitRouterAttachmentName"`
	// The ID of the forwarding router instance.
	TransitRouterId string `pulumi:"transitRouterId"`
	// The id of the vpn.
	VpnId string `pulumi:"vpnId"`
	// The owner id of vpn. **NOTE:** You must set `vpnOwnerId`, if you want to connect the transit router to an IPsec-VPN connection that belongs to another Alibaba Cloud account.
	VpnOwnerId *string `pulumi:"vpnOwnerId"`
	// The list of zone mapping. See the following `Block zone`.
	Zones []TransitRouterVpnAttachmentZone `pulumi:"zones"`
}

// The set of arguments for constructing a TransitRouterVpnAttachment resource.
type TransitRouterVpnAttachmentArgs struct {
	// Whether to allow the forwarding router instance to automatically publish routing entries to IPsec connections.
	AutoPublishRouteEnabled pulumi.BoolPtrInput
	// The id of the cen.
	CenId pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
	// The description of the VPN connection. The description can contain `2` to `256` characters. The description must start with English letters, but cannot start with `http://` or `https://`.
	TransitRouterAttachmentDescription pulumi.StringPtrInput
	// The name of the VPN connection. The name must be `2` to `128` characters in length, and can contain digits, underscores (_), and hyphens (-). It must start with a letter.
	TransitRouterAttachmentName pulumi.StringPtrInput
	// The ID of the forwarding router instance.
	TransitRouterId pulumi.StringInput
	// The id of the vpn.
	VpnId pulumi.StringInput
	// The owner id of vpn. **NOTE:** You must set `vpnOwnerId`, if you want to connect the transit router to an IPsec-VPN connection that belongs to another Alibaba Cloud account.
	VpnOwnerId pulumi.StringPtrInput
	// The list of zone mapping. See the following `Block zone`.
	Zones TransitRouterVpnAttachmentZoneArrayInput
}

func (TransitRouterVpnAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transitRouterVpnAttachmentArgs)(nil)).Elem()
}

type TransitRouterVpnAttachmentInput interface {
	pulumi.Input

	ToTransitRouterVpnAttachmentOutput() TransitRouterVpnAttachmentOutput
	ToTransitRouterVpnAttachmentOutputWithContext(ctx context.Context) TransitRouterVpnAttachmentOutput
}

func (*TransitRouterVpnAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitRouterVpnAttachment)(nil)).Elem()
}

func (i *TransitRouterVpnAttachment) ToTransitRouterVpnAttachmentOutput() TransitRouterVpnAttachmentOutput {
	return i.ToTransitRouterVpnAttachmentOutputWithContext(context.Background())
}

func (i *TransitRouterVpnAttachment) ToTransitRouterVpnAttachmentOutputWithContext(ctx context.Context) TransitRouterVpnAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouterVpnAttachmentOutput)
}

// TransitRouterVpnAttachmentArrayInput is an input type that accepts TransitRouterVpnAttachmentArray and TransitRouterVpnAttachmentArrayOutput values.
// You can construct a concrete instance of `TransitRouterVpnAttachmentArrayInput` via:
//
//	TransitRouterVpnAttachmentArray{ TransitRouterVpnAttachmentArgs{...} }
type TransitRouterVpnAttachmentArrayInput interface {
	pulumi.Input

	ToTransitRouterVpnAttachmentArrayOutput() TransitRouterVpnAttachmentArrayOutput
	ToTransitRouterVpnAttachmentArrayOutputWithContext(context.Context) TransitRouterVpnAttachmentArrayOutput
}

type TransitRouterVpnAttachmentArray []TransitRouterVpnAttachmentInput

func (TransitRouterVpnAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitRouterVpnAttachment)(nil)).Elem()
}

func (i TransitRouterVpnAttachmentArray) ToTransitRouterVpnAttachmentArrayOutput() TransitRouterVpnAttachmentArrayOutput {
	return i.ToTransitRouterVpnAttachmentArrayOutputWithContext(context.Background())
}

func (i TransitRouterVpnAttachmentArray) ToTransitRouterVpnAttachmentArrayOutputWithContext(ctx context.Context) TransitRouterVpnAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouterVpnAttachmentArrayOutput)
}

// TransitRouterVpnAttachmentMapInput is an input type that accepts TransitRouterVpnAttachmentMap and TransitRouterVpnAttachmentMapOutput values.
// You can construct a concrete instance of `TransitRouterVpnAttachmentMapInput` via:
//
//	TransitRouterVpnAttachmentMap{ "key": TransitRouterVpnAttachmentArgs{...} }
type TransitRouterVpnAttachmentMapInput interface {
	pulumi.Input

	ToTransitRouterVpnAttachmentMapOutput() TransitRouterVpnAttachmentMapOutput
	ToTransitRouterVpnAttachmentMapOutputWithContext(context.Context) TransitRouterVpnAttachmentMapOutput
}

type TransitRouterVpnAttachmentMap map[string]TransitRouterVpnAttachmentInput

func (TransitRouterVpnAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitRouterVpnAttachment)(nil)).Elem()
}

func (i TransitRouterVpnAttachmentMap) ToTransitRouterVpnAttachmentMapOutput() TransitRouterVpnAttachmentMapOutput {
	return i.ToTransitRouterVpnAttachmentMapOutputWithContext(context.Background())
}

func (i TransitRouterVpnAttachmentMap) ToTransitRouterVpnAttachmentMapOutputWithContext(ctx context.Context) TransitRouterVpnAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouterVpnAttachmentMapOutput)
}

type TransitRouterVpnAttachmentOutput struct{ *pulumi.OutputState }

func (TransitRouterVpnAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitRouterVpnAttachment)(nil)).Elem()
}

func (o TransitRouterVpnAttachmentOutput) ToTransitRouterVpnAttachmentOutput() TransitRouterVpnAttachmentOutput {
	return o
}

func (o TransitRouterVpnAttachmentOutput) ToTransitRouterVpnAttachmentOutputWithContext(ctx context.Context) TransitRouterVpnAttachmentOutput {
	return o
}

// Whether to allow the forwarding router instance to automatically publish routing entries to IPsec connections.
func (o TransitRouterVpnAttachmentOutput) AutoPublishRouteEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *TransitRouterVpnAttachment) pulumi.BoolOutput { return v.AutoPublishRouteEnabled }).(pulumi.BoolOutput)
}

// The id of the cen.
func (o TransitRouterVpnAttachmentOutput) CenId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitRouterVpnAttachment) pulumi.StringPtrOutput { return v.CenId }).(pulumi.StringPtrOutput)
}

// The associating status of the network.
func (o TransitRouterVpnAttachmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterVpnAttachment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o TransitRouterVpnAttachmentOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *TransitRouterVpnAttachment) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// The description of the VPN connection. The description can contain `2` to `256` characters. The description must start with English letters, but cannot start with `http://` or `https://`.
func (o TransitRouterVpnAttachmentOutput) TransitRouterAttachmentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitRouterVpnAttachment) pulumi.StringPtrOutput {
		return v.TransitRouterAttachmentDescription
	}).(pulumi.StringPtrOutput)
}

// The name of the VPN connection. The name must be `2` to `128` characters in length, and can contain digits, underscores (_), and hyphens (-). It must start with a letter.
func (o TransitRouterVpnAttachmentOutput) TransitRouterAttachmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitRouterVpnAttachment) pulumi.StringPtrOutput { return v.TransitRouterAttachmentName }).(pulumi.StringPtrOutput)
}

// The ID of the forwarding router instance.
func (o TransitRouterVpnAttachmentOutput) TransitRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterVpnAttachment) pulumi.StringOutput { return v.TransitRouterId }).(pulumi.StringOutput)
}

// The id of the vpn.
func (o TransitRouterVpnAttachmentOutput) VpnId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterVpnAttachment) pulumi.StringOutput { return v.VpnId }).(pulumi.StringOutput)
}

// The owner id of vpn. **NOTE:** You must set `vpnOwnerId`, if you want to connect the transit router to an IPsec-VPN connection that belongs to another Alibaba Cloud account.
func (o TransitRouterVpnAttachmentOutput) VpnOwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterVpnAttachment) pulumi.StringOutput { return v.VpnOwnerId }).(pulumi.StringOutput)
}

// The list of zone mapping. See the following `Block zone`.
func (o TransitRouterVpnAttachmentOutput) Zones() TransitRouterVpnAttachmentZoneArrayOutput {
	return o.ApplyT(func(v *TransitRouterVpnAttachment) TransitRouterVpnAttachmentZoneArrayOutput { return v.Zones }).(TransitRouterVpnAttachmentZoneArrayOutput)
}

type TransitRouterVpnAttachmentArrayOutput struct{ *pulumi.OutputState }

func (TransitRouterVpnAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitRouterVpnAttachment)(nil)).Elem()
}

func (o TransitRouterVpnAttachmentArrayOutput) ToTransitRouterVpnAttachmentArrayOutput() TransitRouterVpnAttachmentArrayOutput {
	return o
}

func (o TransitRouterVpnAttachmentArrayOutput) ToTransitRouterVpnAttachmentArrayOutputWithContext(ctx context.Context) TransitRouterVpnAttachmentArrayOutput {
	return o
}

func (o TransitRouterVpnAttachmentArrayOutput) Index(i pulumi.IntInput) TransitRouterVpnAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TransitRouterVpnAttachment {
		return vs[0].([]*TransitRouterVpnAttachment)[vs[1].(int)]
	}).(TransitRouterVpnAttachmentOutput)
}

type TransitRouterVpnAttachmentMapOutput struct{ *pulumi.OutputState }

func (TransitRouterVpnAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitRouterVpnAttachment)(nil)).Elem()
}

func (o TransitRouterVpnAttachmentMapOutput) ToTransitRouterVpnAttachmentMapOutput() TransitRouterVpnAttachmentMapOutput {
	return o
}

func (o TransitRouterVpnAttachmentMapOutput) ToTransitRouterVpnAttachmentMapOutputWithContext(ctx context.Context) TransitRouterVpnAttachmentMapOutput {
	return o
}

func (o TransitRouterVpnAttachmentMapOutput) MapIndex(k pulumi.StringInput) TransitRouterVpnAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TransitRouterVpnAttachment {
		return vs[0].(map[string]*TransitRouterVpnAttachment)[vs[1].(string)]
	}).(TransitRouterVpnAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouterVpnAttachmentInput)(nil)).Elem(), &TransitRouterVpnAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouterVpnAttachmentArrayInput)(nil)).Elem(), TransitRouterVpnAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouterVpnAttachmentMapInput)(nil)).Elem(), TransitRouterVpnAttachmentMap{})
	pulumi.RegisterOutputType(TransitRouterVpnAttachmentOutput{})
	pulumi.RegisterOutputType(TransitRouterVpnAttachmentArrayOutput{})
	pulumi.RegisterOutputType(TransitRouterVpnAttachmentMapOutput{})
}
