// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package schedulerx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Schedulerx Job resource.
//
// For information about Schedulerx Job and how to use it, see [What is Job](https://www.alibabacloud.com/help/en/schedulerx/schedulerx-serverless/developer-reference/api-schedulerx2-2019-04-30-createjob).
//
// > **NOTE:** Available since v1.240.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/schedulerx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			createNameSpace, err := schedulerx.NewNamespace(ctx, "CreateNameSpace", &schedulerx.NamespaceArgs{
//				NamespaceName: pulumi.String(name),
//				Description:   pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal([]interface{}{
//				map[string]interface{}{
//					"userName":  "name1",
//					"userPhone": "89756******",
//				},
//				map[string]interface{}{
//					"userName": "name2",
//					"ding":     "http://www.example.com",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"sendChannel": "sms,ding",
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			_default, err := schedulerx.NewAppGroup(ctx, "default", &schedulerx.AppGroupArgs{
//				MaxJobs:             pulumi.Int(100),
//				MonitorContactsJson: pulumi.String(json0),
//				DeleteJobs:          pulumi.Bool(false),
//				AppType:             pulumi.Int(1),
//				NamespaceSource:     pulumi.String("schedulerx"),
//				GroupId:             pulumi.String("example-appgroup-pop-autoexample"),
//				NamespaceName:       pulumi.String("default"),
//				Description:         pulumi.String(name),
//				MonitorConfigJson:   pulumi.String(json1),
//				AppVersion:          pulumi.String("1"),
//				AppName:             pulumi.String("example-appgroup-pop-autoexample"),
//				Namespace:           createNameSpace.NamespaceUid,
//				EnableLog:           pulumi.Bool(false),
//				ScheduleBusyWorkers: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = schedulerx.NewJob(ctx, "default", &schedulerx.JobArgs{
//				Timezone:       pulumi.String("GTM+7"),
//				Status:         pulumi.String("Enable"),
//				MaxAttempt:     pulumi.Int(0),
//				Description:    pulumi.String(name),
//				Parameters:     pulumi.String("hello word"),
//				JobName:        pulumi.String(name),
//				MaxConcurrency: pulumi.String("1"),
//				TimeConfig: &schedulerx.JobTimeConfigArgs{
//					DataOffset:     pulumi.Int(1),
//					TimeExpression: pulumi.String("100000"),
//					TimeType:       pulumi.Int(3),
//					Calendar:       pulumi.String("workday"),
//				},
//				MapTaskXattrs: &schedulerx.JobMapTaskXattrsArgs{
//					TaskMaxAttempt:      pulumi.Int(1),
//					TaskAttemptInterval: pulumi.Int(1),
//					ConsumerSize:        pulumi.Int(5),
//					QueueSize:           pulumi.Int(10000),
//					DispatcherSize:      pulumi.Int(5),
//					PageSize:            pulumi.Int(100),
//				},
//				Namespace: createNameSpace.NamespaceUid,
//				GroupId:   _default.GroupId,
//				JobType:   pulumi.String("java"),
//				JobMonitorInfo: &schedulerx.JobJobMonitorInfoArgs{
//					ContactInfos: schedulerx.JobJobMonitorInfoContactInfoArray{
//						&schedulerx.JobJobMonitorInfoContactInfoArgs{
//							UserPhone: pulumi.String("12345678910"),
//							UserName:  pulumi.String("tangtao-1"),
//							Ding:      pulumi.String("https://alidocs.dingtalk.com"),
//							UserMail:  pulumi.String("12345678@xx.com"),
//						},
//						&schedulerx.JobJobMonitorInfoContactInfoArgs{
//							UserPhone: pulumi.String("12345678910"),
//							UserName:  pulumi.String("tangtao-2"),
//							Ding:      pulumi.String("https://alidocs.dingtalk.com1"),
//							UserMail:  pulumi.String("123456789@xx.com"),
//						},
//					},
//					MonitorConfig: &schedulerx.JobJobMonitorInfoMonitorConfigArgs{
//						Timeout:           pulumi.Int(7200),
//						SendChannel:       pulumi.String("sms"),
//						TimeoutKillEnable: pulumi.Bool(true),
//						TimeoutEnable:     pulumi.Bool(true),
//						FailEnable:        pulumi.Bool(true),
//						MissWorkerEnable:  pulumi.Bool(true),
//					},
//				},
//				ClassName:       pulumi.String("com.aliyun.schedulerx.example.processor.SimpleJob"),
//				NamespaceSource: pulumi.String("schedulerx"),
//				AttemptInterval: pulumi.Int(30),
//				FailTimes:       pulumi.Int(1),
//				ExecuteMode:     pulumi.String("batch"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Schedulerx Job can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:schedulerx/job:Job example <namespace>:<group_id>:<job_id>
// ```
type Job struct {
	pulumi.CustomResourceState

	// Error retry interval, unit s, default value 30.
	AttemptInterval pulumi.IntPtrOutput `pulumi:"attemptInterval"`
	// Full path of the task interface class.
	//
	// This field is available only when your task is of the Java task type.
	ClassName pulumi.StringPtrOutput `pulumi:"className"`
	// The script code of the python, shell, and go task types.
	Content pulumi.StringPtrOutput `pulumi:"content"`
	// Task description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Task execution mode, the possible results are as follows:
	ExecuteMode pulumi.StringOutput `pulumi:"executeMode"`
	// Number of consecutive failed alarms
	FailTimes pulumi.IntPtrOutput `pulumi:"failTimes"`
	// The application ID, which is obtained from the **application management** page of the console.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// JobId
	JobId pulumi.IntOutput `pulumi:"jobId"`
	// Task monitoring information See `jobMonitorInfo` below.
	JobMonitorInfo JobJobMonitorInfoPtrOutput `pulumi:"jobMonitorInfo"`
	// JobName
	JobName pulumi.StringOutput `pulumi:"jobName"`
	// Job Type
	JobType pulumi.StringOutput `pulumi:"jobType"`
	// Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
	MapTaskXattrs JobMapTaskXattrsPtrOutput `pulumi:"mapTaskXattrs"`
	// The maximum number of error retries, which is set based on business requirements. The default value is 0.
	MaxAttempt pulumi.IntPtrOutput `pulumi:"maxAttempt"`
	// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
	MaxConcurrency pulumi.StringPtrOutput `pulumi:"maxConcurrency"`
	// Namespace, which is obtained on the `Namespace` page of the console.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Special third parties are required.
	NamespaceSource pulumi.StringPtrOutput `pulumi:"namespaceSource"`
	// User-defined parameters, which can be obtained at runtime.
	Parameters pulumi.StringPtrOutput `pulumi:"parameters"`
	// Task status. The values are as follows:
	Status pulumi.StringOutput `pulumi:"status"`
	// Success Notification Switch
	SuccessNoticeEnable pulumi.BoolPtrOutput `pulumi:"successNoticeEnable"`
	// Advanced configuration of parallel grid tasks, push model or pull model
	TaskDispatchMode pulumi.StringPtrOutput `pulumi:"taskDispatchMode"`
	// K8s task type custom task template
	Template pulumi.StringPtrOutput `pulumi:"template"`
	// Time configuration information See `timeConfig` below.
	TimeConfig JobTimeConfigOutput `pulumi:"timeConfig"`
	// Time Zone
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
	// Task Extension Field
	XAttrs pulumi.StringOutput `pulumi:"xAttrs"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExecuteMode == nil {
		return nil, errors.New("invalid value for required argument 'ExecuteMode'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.JobName == nil {
		return nil, errors.New("invalid value for required argument 'JobName'")
	}
	if args.JobType == nil {
		return nil, errors.New("invalid value for required argument 'JobType'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.TimeConfig == nil {
		return nil, errors.New("invalid value for required argument 'TimeConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Job
	err := ctx.RegisterResource("alicloud:schedulerx/job:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("alicloud:schedulerx/job:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
	// Error retry interval, unit s, default value 30.
	AttemptInterval *int `pulumi:"attemptInterval"`
	// Full path of the task interface class.
	//
	// This field is available only when your task is of the Java task type.
	ClassName *string `pulumi:"className"`
	// The script code of the python, shell, and go task types.
	Content *string `pulumi:"content"`
	// Task description.
	Description *string `pulumi:"description"`
	// Task execution mode, the possible results are as follows:
	ExecuteMode *string `pulumi:"executeMode"`
	// Number of consecutive failed alarms
	FailTimes *int `pulumi:"failTimes"`
	// The application ID, which is obtained from the **application management** page of the console.
	GroupId *string `pulumi:"groupId"`
	// JobId
	JobId *int `pulumi:"jobId"`
	// Task monitoring information See `jobMonitorInfo` below.
	JobMonitorInfo *JobJobMonitorInfo `pulumi:"jobMonitorInfo"`
	// JobName
	JobName *string `pulumi:"jobName"`
	// Job Type
	JobType *string `pulumi:"jobType"`
	// Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
	MapTaskXattrs *JobMapTaskXattrs `pulumi:"mapTaskXattrs"`
	// The maximum number of error retries, which is set based on business requirements. The default value is 0.
	MaxAttempt *int `pulumi:"maxAttempt"`
	// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
	MaxConcurrency *string `pulumi:"maxConcurrency"`
	// Namespace, which is obtained on the `Namespace` page of the console.
	Namespace *string `pulumi:"namespace"`
	// Special third parties are required.
	NamespaceSource *string `pulumi:"namespaceSource"`
	// User-defined parameters, which can be obtained at runtime.
	Parameters *string `pulumi:"parameters"`
	// Task status. The values are as follows:
	Status *string `pulumi:"status"`
	// Success Notification Switch
	SuccessNoticeEnable *bool `pulumi:"successNoticeEnable"`
	// Advanced configuration of parallel grid tasks, push model or pull model
	TaskDispatchMode *string `pulumi:"taskDispatchMode"`
	// K8s task type custom task template
	Template *string `pulumi:"template"`
	// Time configuration information See `timeConfig` below.
	TimeConfig *JobTimeConfig `pulumi:"timeConfig"`
	// Time Zone
	Timezone *string `pulumi:"timezone"`
	// Task Extension Field
	XAttrs *string `pulumi:"xAttrs"`
}

type JobState struct {
	// Error retry interval, unit s, default value 30.
	AttemptInterval pulumi.IntPtrInput
	// Full path of the task interface class.
	//
	// This field is available only when your task is of the Java task type.
	ClassName pulumi.StringPtrInput
	// The script code of the python, shell, and go task types.
	Content pulumi.StringPtrInput
	// Task description.
	Description pulumi.StringPtrInput
	// Task execution mode, the possible results are as follows:
	ExecuteMode pulumi.StringPtrInput
	// Number of consecutive failed alarms
	FailTimes pulumi.IntPtrInput
	// The application ID, which is obtained from the **application management** page of the console.
	GroupId pulumi.StringPtrInput
	// JobId
	JobId pulumi.IntPtrInput
	// Task monitoring information See `jobMonitorInfo` below.
	JobMonitorInfo JobJobMonitorInfoPtrInput
	// JobName
	JobName pulumi.StringPtrInput
	// Job Type
	JobType pulumi.StringPtrInput
	// Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
	MapTaskXattrs JobMapTaskXattrsPtrInput
	// The maximum number of error retries, which is set based on business requirements. The default value is 0.
	MaxAttempt pulumi.IntPtrInput
	// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
	MaxConcurrency pulumi.StringPtrInput
	// Namespace, which is obtained on the `Namespace` page of the console.
	Namespace pulumi.StringPtrInput
	// Special third parties are required.
	NamespaceSource pulumi.StringPtrInput
	// User-defined parameters, which can be obtained at runtime.
	Parameters pulumi.StringPtrInput
	// Task status. The values are as follows:
	Status pulumi.StringPtrInput
	// Success Notification Switch
	SuccessNoticeEnable pulumi.BoolPtrInput
	// Advanced configuration of parallel grid tasks, push model or pull model
	TaskDispatchMode pulumi.StringPtrInput
	// K8s task type custom task template
	Template pulumi.StringPtrInput
	// Time configuration information See `timeConfig` below.
	TimeConfig JobTimeConfigPtrInput
	// Time Zone
	Timezone pulumi.StringPtrInput
	// Task Extension Field
	XAttrs pulumi.StringPtrInput
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// Error retry interval, unit s, default value 30.
	AttemptInterval *int `pulumi:"attemptInterval"`
	// Full path of the task interface class.
	//
	// This field is available only when your task is of the Java task type.
	ClassName *string `pulumi:"className"`
	// The script code of the python, shell, and go task types.
	Content *string `pulumi:"content"`
	// Task description.
	Description *string `pulumi:"description"`
	// Task execution mode, the possible results are as follows:
	ExecuteMode string `pulumi:"executeMode"`
	// Number of consecutive failed alarms
	FailTimes *int `pulumi:"failTimes"`
	// The application ID, which is obtained from the **application management** page of the console.
	GroupId string `pulumi:"groupId"`
	// Task monitoring information See `jobMonitorInfo` below.
	JobMonitorInfo *JobJobMonitorInfo `pulumi:"jobMonitorInfo"`
	// JobName
	JobName string `pulumi:"jobName"`
	// Job Type
	JobType string `pulumi:"jobType"`
	// Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
	MapTaskXattrs *JobMapTaskXattrs `pulumi:"mapTaskXattrs"`
	// The maximum number of error retries, which is set based on business requirements. The default value is 0.
	MaxAttempt *int `pulumi:"maxAttempt"`
	// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
	MaxConcurrency *string `pulumi:"maxConcurrency"`
	// Namespace, which is obtained on the `Namespace` page of the console.
	Namespace string `pulumi:"namespace"`
	// Special third parties are required.
	NamespaceSource *string `pulumi:"namespaceSource"`
	// User-defined parameters, which can be obtained at runtime.
	Parameters *string `pulumi:"parameters"`
	// Task status. The values are as follows:
	Status *string `pulumi:"status"`
	// Success Notification Switch
	SuccessNoticeEnable *bool `pulumi:"successNoticeEnable"`
	// Advanced configuration of parallel grid tasks, push model or pull model
	TaskDispatchMode *string `pulumi:"taskDispatchMode"`
	// K8s task type custom task template
	Template *string `pulumi:"template"`
	// Time configuration information See `timeConfig` below.
	TimeConfig JobTimeConfig `pulumi:"timeConfig"`
	// Time Zone
	Timezone *string `pulumi:"timezone"`
	// Task Extension Field
	XAttrs *string `pulumi:"xAttrs"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// Error retry interval, unit s, default value 30.
	AttemptInterval pulumi.IntPtrInput
	// Full path of the task interface class.
	//
	// This field is available only when your task is of the Java task type.
	ClassName pulumi.StringPtrInput
	// The script code of the python, shell, and go task types.
	Content pulumi.StringPtrInput
	// Task description.
	Description pulumi.StringPtrInput
	// Task execution mode, the possible results are as follows:
	ExecuteMode pulumi.StringInput
	// Number of consecutive failed alarms
	FailTimes pulumi.IntPtrInput
	// The application ID, which is obtained from the **application management** page of the console.
	GroupId pulumi.StringInput
	// Task monitoring information See `jobMonitorInfo` below.
	JobMonitorInfo JobJobMonitorInfoPtrInput
	// JobName
	JobName pulumi.StringInput
	// Job Type
	JobType pulumi.StringInput
	// Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
	MapTaskXattrs JobMapTaskXattrsPtrInput
	// The maximum number of error retries, which is set based on business requirements. The default value is 0.
	MaxAttempt pulumi.IntPtrInput
	// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
	MaxConcurrency pulumi.StringPtrInput
	// Namespace, which is obtained on the `Namespace` page of the console.
	Namespace pulumi.StringInput
	// Special third parties are required.
	NamespaceSource pulumi.StringPtrInput
	// User-defined parameters, which can be obtained at runtime.
	Parameters pulumi.StringPtrInput
	// Task status. The values are as follows:
	Status pulumi.StringPtrInput
	// Success Notification Switch
	SuccessNoticeEnable pulumi.BoolPtrInput
	// Advanced configuration of parallel grid tasks, push model or pull model
	TaskDispatchMode pulumi.StringPtrInput
	// K8s task type custom task template
	Template pulumi.StringPtrInput
	// Time configuration information See `timeConfig` below.
	TimeConfig JobTimeConfigInput
	// Time Zone
	Timezone pulumi.StringPtrInput
	// Task Extension Field
	XAttrs pulumi.StringPtrInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//	JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

// JobMapInput is an input type that accepts JobMap and JobMapOutput values.
// You can construct a concrete instance of `JobMapInput` via:
//
//	JobMap{ "key": JobArgs{...} }
type JobMapInput interface {
	pulumi.Input

	ToJobMapOutput() JobMapOutput
	ToJobMapOutputWithContext(context.Context) JobMapOutput
}

type JobMap map[string]JobInput

func (JobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (i JobMap) ToJobMapOutput() JobMapOutput {
	return i.ToJobMapOutputWithContext(context.Background())
}

func (i JobMap) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMapOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

// Error retry interval, unit s, default value 30.
func (o JobOutput) AttemptInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.IntPtrOutput { return v.AttemptInterval }).(pulumi.IntPtrOutput)
}

// Full path of the task interface class.
//
// This field is available only when your task is of the Java task type.
func (o JobOutput) ClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.ClassName }).(pulumi.StringPtrOutput)
}

// The script code of the python, shell, and go task types.
func (o JobOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

// Task description.
func (o JobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Task execution mode, the possible results are as follows:
func (o JobOutput) ExecuteMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.ExecuteMode }).(pulumi.StringOutput)
}

// Number of consecutive failed alarms
func (o JobOutput) FailTimes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.IntPtrOutput { return v.FailTimes }).(pulumi.IntPtrOutput)
}

// The application ID, which is obtained from the **application management** page of the console.
func (o JobOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// JobId
func (o JobOutput) JobId() pulumi.IntOutput {
	return o.ApplyT(func(v *Job) pulumi.IntOutput { return v.JobId }).(pulumi.IntOutput)
}

// Task monitoring information See `jobMonitorInfo` below.
func (o JobOutput) JobMonitorInfo() JobJobMonitorInfoPtrOutput {
	return o.ApplyT(func(v *Job) JobJobMonitorInfoPtrOutput { return v.JobMonitorInfo }).(JobJobMonitorInfoPtrOutput)
}

// JobName
func (o JobOutput) JobName() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.JobName }).(pulumi.StringOutput)
}

// Job Type
func (o JobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.JobType }).(pulumi.StringOutput)
}

// Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
func (o JobOutput) MapTaskXattrs() JobMapTaskXattrsPtrOutput {
	return o.ApplyT(func(v *Job) JobMapTaskXattrsPtrOutput { return v.MapTaskXattrs }).(JobMapTaskXattrsPtrOutput)
}

// The maximum number of error retries, which is set based on business requirements. The default value is 0.
func (o JobOutput) MaxAttempt() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.IntPtrOutput { return v.MaxAttempt }).(pulumi.IntPtrOutput)
}

// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
func (o JobOutput) MaxConcurrency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.MaxConcurrency }).(pulumi.StringPtrOutput)
}

// Namespace, which is obtained on the `Namespace` page of the console.
func (o JobOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Special third parties are required.
func (o JobOutput) NamespaceSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.NamespaceSource }).(pulumi.StringPtrOutput)
}

// User-defined parameters, which can be obtained at runtime.
func (o JobOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Parameters }).(pulumi.StringPtrOutput)
}

// Task status. The values are as follows:
func (o JobOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Success Notification Switch
func (o JobOutput) SuccessNoticeEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolPtrOutput { return v.SuccessNoticeEnable }).(pulumi.BoolPtrOutput)
}

// Advanced configuration of parallel grid tasks, push model or pull model
func (o JobOutput) TaskDispatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.TaskDispatchMode }).(pulumi.StringPtrOutput)
}

// K8s task type custom task template
func (o JobOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Template }).(pulumi.StringPtrOutput)
}

// Time configuration information See `timeConfig` below.
func (o JobOutput) TimeConfig() JobTimeConfigOutput {
	return o.ApplyT(func(v *Job) JobTimeConfigOutput { return v.TimeConfig }).(JobTimeConfigOutput)
}

// Time Zone
func (o JobOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// Task Extension Field
func (o JobOutput) XAttrs() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.XAttrs }).(pulumi.StringOutput)
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Job {
		return vs[0].([]*Job)[vs[1].(int)]
	}).(JobOutput)
}

type JobMapOutput struct{ *pulumi.OutputState }

func (JobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (o JobMapOutput) ToJobMapOutput() JobMapOutput {
	return o
}

func (o JobMapOutput) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return o
}

func (o JobMapOutput) MapIndex(k pulumi.StringInput) JobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Job {
		return vs[0].(map[string]*Job)[vs[1].(string)]
	}).(JobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), &Job{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobArrayInput)(nil)).Elem(), JobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMapInput)(nil)).Elem(), JobMap{})
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(JobMapOutput{})
}
