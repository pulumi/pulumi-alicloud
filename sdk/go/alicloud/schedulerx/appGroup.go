// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package schedulerx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Schedulerx App Group resource.
//
// For information about Schedulerx App Group and how to use it, see [What is App Group](https://www.alibabacloud.com/help/en/).
//
// > **NOTE:** Available since v1.240.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/schedulerx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			createNameSpace, err := schedulerx.NewNamespace(ctx, "CreateNameSpace", &schedulerx.NamespaceArgs{
//				NamespaceName: pulumi.String(name),
//				Description:   pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal([]interface{}{
//				map[string]interface{}{
//					"userName":  "name1",
//					"userPhone": "89756******",
//				},
//				map[string]interface{}{
//					"userName": "name2",
//					"ding":     "http://www.example.com",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"sendChannel": "sms,ding",
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			_, err = schedulerx.NewAppGroup(ctx, "default", &schedulerx.AppGroupArgs{
//				MaxJobs:             pulumi.Int(100),
//				MonitorContactsJson: pulumi.String(json0),
//				DeleteJobs:          pulumi.Bool(false),
//				AppType:             pulumi.Int(1),
//				NamespaceSource:     pulumi.String("schedulerx"),
//				GroupId:             pulumi.String("example-appgroup-pop-autoexample"),
//				NamespaceName:       pulumi.String("default"),
//				Description:         pulumi.String(name),
//				MonitorConfigJson:   pulumi.String(json1),
//				AppVersion:          pulumi.String("1"),
//				AppName:             pulumi.String("example-appgroup-pop-autoexample"),
//				Namespace:           createNameSpace.NamespaceUid,
//				EnableLog:           pulumi.Bool(false),
//				ScheduleBusyWorkers: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Schedulerx App Group can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:schedulerx/appGroup:AppGroup example <namespace>:<group_id>
// ```
type AppGroup struct {
	pulumi.CustomResourceState

	// Application Name
	AppName pulumi.StringOutput `pulumi:"appName"`
	// Application type.
	// - 1, general application.
	// - 2, k8s application.
	AppType pulumi.IntPtrOutput `pulumi:"appType"`
	// Application Version, 1: Basic Edition, 2: Professional Edition
	AppVersion pulumi.StringPtrOutput `pulumi:"appVersion"`
	// Whether to delete the task in the application Group. The values are as follows:
	DeleteJobs pulumi.BoolPtrOutput `pulumi:"deleteJobs"`
	// Application Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether to enable the log.
	// - true: On
	// - false: Close
	EnableLog pulumi.BoolPtrOutput `pulumi:"enableLog"`
	// Application ID
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
	MaxConcurrency pulumi.IntPtrOutput `pulumi:"maxConcurrency"`
	// Application Grouping Configurable Maximum Number of Tasks
	MaxJobs pulumi.IntPtrOutput `pulumi:"maxJobs"`
	// Alarm configuration JSON field. For more information about this field, see **Request Parameters * *.
	MonitorConfigJson pulumi.StringPtrOutput `pulumi:"monitorConfigJson"`
	// Alarm contact JSON format.
	MonitorContactsJson pulumi.StringPtrOutput `pulumi:"monitorContactsJson"`
	// The namespace ID, which is obtained on the namespace page of the console.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// The namespace name.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// Not supported for the time being, no need to fill in.
	NamespaceSource pulumi.StringPtrOutput `pulumi:"namespaceSource"`
	// Whether to schedule a busy machine.
	ScheduleBusyWorkers pulumi.BoolPtrOutput `pulumi:"scheduleBusyWorkers"`
}

// NewAppGroup registers a new resource with the given unique name, arguments, and options.
func NewAppGroup(ctx *pulumi.Context,
	name string, args *AppGroupArgs, opts ...pulumi.ResourceOption) (*AppGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppGroup
	err := ctx.RegisterResource("alicloud:schedulerx/appGroup:AppGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppGroup gets an existing AppGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppGroupState, opts ...pulumi.ResourceOption) (*AppGroup, error) {
	var resource AppGroup
	err := ctx.ReadResource("alicloud:schedulerx/appGroup:AppGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppGroup resources.
type appGroupState struct {
	// Application Name
	AppName *string `pulumi:"appName"`
	// Application type.
	// - 1, general application.
	// - 2, k8s application.
	AppType *int `pulumi:"appType"`
	// Application Version, 1: Basic Edition, 2: Professional Edition
	AppVersion *string `pulumi:"appVersion"`
	// Whether to delete the task in the application Group. The values are as follows:
	DeleteJobs *bool `pulumi:"deleteJobs"`
	// Application Description
	Description *string `pulumi:"description"`
	// Whether to enable the log.
	// - true: On
	// - false: Close
	EnableLog *bool `pulumi:"enableLog"`
	// Application ID
	GroupId *string `pulumi:"groupId"`
	// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
	MaxConcurrency *int `pulumi:"maxConcurrency"`
	// Application Grouping Configurable Maximum Number of Tasks
	MaxJobs *int `pulumi:"maxJobs"`
	// Alarm configuration JSON field. For more information about this field, see **Request Parameters * *.
	MonitorConfigJson *string `pulumi:"monitorConfigJson"`
	// Alarm contact JSON format.
	MonitorContactsJson *string `pulumi:"monitorContactsJson"`
	// The namespace ID, which is obtained on the namespace page of the console.
	Namespace *string `pulumi:"namespace"`
	// The namespace name.
	NamespaceName *string `pulumi:"namespaceName"`
	// Not supported for the time being, no need to fill in.
	NamespaceSource *string `pulumi:"namespaceSource"`
	// Whether to schedule a busy machine.
	ScheduleBusyWorkers *bool `pulumi:"scheduleBusyWorkers"`
}

type AppGroupState struct {
	// Application Name
	AppName pulumi.StringPtrInput
	// Application type.
	// - 1, general application.
	// - 2, k8s application.
	AppType pulumi.IntPtrInput
	// Application Version, 1: Basic Edition, 2: Professional Edition
	AppVersion pulumi.StringPtrInput
	// Whether to delete the task in the application Group. The values are as follows:
	DeleteJobs pulumi.BoolPtrInput
	// Application Description
	Description pulumi.StringPtrInput
	// Whether to enable the log.
	// - true: On
	// - false: Close
	EnableLog pulumi.BoolPtrInput
	// Application ID
	GroupId pulumi.StringPtrInput
	// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
	MaxConcurrency pulumi.IntPtrInput
	// Application Grouping Configurable Maximum Number of Tasks
	MaxJobs pulumi.IntPtrInput
	// Alarm configuration JSON field. For more information about this field, see **Request Parameters * *.
	MonitorConfigJson pulumi.StringPtrInput
	// Alarm contact JSON format.
	MonitorContactsJson pulumi.StringPtrInput
	// The namespace ID, which is obtained on the namespace page of the console.
	Namespace pulumi.StringPtrInput
	// The namespace name.
	NamespaceName pulumi.StringPtrInput
	// Not supported for the time being, no need to fill in.
	NamespaceSource pulumi.StringPtrInput
	// Whether to schedule a busy machine.
	ScheduleBusyWorkers pulumi.BoolPtrInput
}

func (AppGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*appGroupState)(nil)).Elem()
}

type appGroupArgs struct {
	// Application Name
	AppName string `pulumi:"appName"`
	// Application type.
	// - 1, general application.
	// - 2, k8s application.
	AppType *int `pulumi:"appType"`
	// Application Version, 1: Basic Edition, 2: Professional Edition
	AppVersion *string `pulumi:"appVersion"`
	// Whether to delete the task in the application Group. The values are as follows:
	DeleteJobs *bool `pulumi:"deleteJobs"`
	// Application Description
	Description *string `pulumi:"description"`
	// Whether to enable the log.
	// - true: On
	// - false: Close
	EnableLog *bool `pulumi:"enableLog"`
	// Application ID
	GroupId string `pulumi:"groupId"`
	// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
	MaxConcurrency *int `pulumi:"maxConcurrency"`
	// Application Grouping Configurable Maximum Number of Tasks
	MaxJobs *int `pulumi:"maxJobs"`
	// Alarm configuration JSON field. For more information about this field, see **Request Parameters * *.
	MonitorConfigJson *string `pulumi:"monitorConfigJson"`
	// Alarm contact JSON format.
	MonitorContactsJson *string `pulumi:"monitorContactsJson"`
	// The namespace ID, which is obtained on the namespace page of the console.
	Namespace string `pulumi:"namespace"`
	// The namespace name.
	NamespaceName string `pulumi:"namespaceName"`
	// Not supported for the time being, no need to fill in.
	NamespaceSource *string `pulumi:"namespaceSource"`
	// Whether to schedule a busy machine.
	ScheduleBusyWorkers *bool `pulumi:"scheduleBusyWorkers"`
}

// The set of arguments for constructing a AppGroup resource.
type AppGroupArgs struct {
	// Application Name
	AppName pulumi.StringInput
	// Application type.
	// - 1, general application.
	// - 2, k8s application.
	AppType pulumi.IntPtrInput
	// Application Version, 1: Basic Edition, 2: Professional Edition
	AppVersion pulumi.StringPtrInput
	// Whether to delete the task in the application Group. The values are as follows:
	DeleteJobs pulumi.BoolPtrInput
	// Application Description
	Description pulumi.StringPtrInput
	// Whether to enable the log.
	// - true: On
	// - false: Close
	EnableLog pulumi.BoolPtrInput
	// Application ID
	GroupId pulumi.StringInput
	// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
	MaxConcurrency pulumi.IntPtrInput
	// Application Grouping Configurable Maximum Number of Tasks
	MaxJobs pulumi.IntPtrInput
	// Alarm configuration JSON field. For more information about this field, see **Request Parameters * *.
	MonitorConfigJson pulumi.StringPtrInput
	// Alarm contact JSON format.
	MonitorContactsJson pulumi.StringPtrInput
	// The namespace ID, which is obtained on the namespace page of the console.
	Namespace pulumi.StringInput
	// The namespace name.
	NamespaceName pulumi.StringInput
	// Not supported for the time being, no need to fill in.
	NamespaceSource pulumi.StringPtrInput
	// Whether to schedule a busy machine.
	ScheduleBusyWorkers pulumi.BoolPtrInput
}

func (AppGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appGroupArgs)(nil)).Elem()
}

type AppGroupInput interface {
	pulumi.Input

	ToAppGroupOutput() AppGroupOutput
	ToAppGroupOutputWithContext(ctx context.Context) AppGroupOutput
}

func (*AppGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AppGroup)(nil)).Elem()
}

func (i *AppGroup) ToAppGroupOutput() AppGroupOutput {
	return i.ToAppGroupOutputWithContext(context.Background())
}

func (i *AppGroup) ToAppGroupOutputWithContext(ctx context.Context) AppGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppGroupOutput)
}

// AppGroupArrayInput is an input type that accepts AppGroupArray and AppGroupArrayOutput values.
// You can construct a concrete instance of `AppGroupArrayInput` via:
//
//	AppGroupArray{ AppGroupArgs{...} }
type AppGroupArrayInput interface {
	pulumi.Input

	ToAppGroupArrayOutput() AppGroupArrayOutput
	ToAppGroupArrayOutputWithContext(context.Context) AppGroupArrayOutput
}

type AppGroupArray []AppGroupInput

func (AppGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppGroup)(nil)).Elem()
}

func (i AppGroupArray) ToAppGroupArrayOutput() AppGroupArrayOutput {
	return i.ToAppGroupArrayOutputWithContext(context.Background())
}

func (i AppGroupArray) ToAppGroupArrayOutputWithContext(ctx context.Context) AppGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppGroupArrayOutput)
}

// AppGroupMapInput is an input type that accepts AppGroupMap and AppGroupMapOutput values.
// You can construct a concrete instance of `AppGroupMapInput` via:
//
//	AppGroupMap{ "key": AppGroupArgs{...} }
type AppGroupMapInput interface {
	pulumi.Input

	ToAppGroupMapOutput() AppGroupMapOutput
	ToAppGroupMapOutputWithContext(context.Context) AppGroupMapOutput
}

type AppGroupMap map[string]AppGroupInput

func (AppGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppGroup)(nil)).Elem()
}

func (i AppGroupMap) ToAppGroupMapOutput() AppGroupMapOutput {
	return i.ToAppGroupMapOutputWithContext(context.Background())
}

func (i AppGroupMap) ToAppGroupMapOutputWithContext(ctx context.Context) AppGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppGroupMapOutput)
}

type AppGroupOutput struct{ *pulumi.OutputState }

func (AppGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppGroup)(nil)).Elem()
}

func (o AppGroupOutput) ToAppGroupOutput() AppGroupOutput {
	return o
}

func (o AppGroupOutput) ToAppGroupOutputWithContext(ctx context.Context) AppGroupOutput {
	return o
}

// Application Name
func (o AppGroupOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// Application type.
// - 1, general application.
// - 2, k8s application.
func (o AppGroupOutput) AppType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.IntPtrOutput { return v.AppType }).(pulumi.IntPtrOutput)
}

// Application Version, 1: Basic Edition, 2: Professional Edition
func (o AppGroupOutput) AppVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringPtrOutput { return v.AppVersion }).(pulumi.StringPtrOutput)
}

// Whether to delete the task in the application Group. The values are as follows:
func (o AppGroupOutput) DeleteJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.BoolPtrOutput { return v.DeleteJobs }).(pulumi.BoolPtrOutput)
}

// Application Description
func (o AppGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to enable the log.
// - true: On
// - false: Close
func (o AppGroupOutput) EnableLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.BoolPtrOutput { return v.EnableLog }).(pulumi.BoolPtrOutput)
}

// Application ID
func (o AppGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
func (o AppGroupOutput) MaxConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.IntPtrOutput { return v.MaxConcurrency }).(pulumi.IntPtrOutput)
}

// Application Grouping Configurable Maximum Number of Tasks
func (o AppGroupOutput) MaxJobs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.IntPtrOutput { return v.MaxJobs }).(pulumi.IntPtrOutput)
}

// Alarm configuration JSON field. For more information about this field, see **Request Parameters * *.
func (o AppGroupOutput) MonitorConfigJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringPtrOutput { return v.MonitorConfigJson }).(pulumi.StringPtrOutput)
}

// Alarm contact JSON format.
func (o AppGroupOutput) MonitorContactsJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringPtrOutput { return v.MonitorContactsJson }).(pulumi.StringPtrOutput)
}

// The namespace ID, which is obtained on the namespace page of the console.
func (o AppGroupOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// The namespace name.
func (o AppGroupOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// Not supported for the time being, no need to fill in.
func (o AppGroupOutput) NamespaceSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.StringPtrOutput { return v.NamespaceSource }).(pulumi.StringPtrOutput)
}

// Whether to schedule a busy machine.
func (o AppGroupOutput) ScheduleBusyWorkers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppGroup) pulumi.BoolPtrOutput { return v.ScheduleBusyWorkers }).(pulumi.BoolPtrOutput)
}

type AppGroupArrayOutput struct{ *pulumi.OutputState }

func (AppGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppGroup)(nil)).Elem()
}

func (o AppGroupArrayOutput) ToAppGroupArrayOutput() AppGroupArrayOutput {
	return o
}

func (o AppGroupArrayOutput) ToAppGroupArrayOutputWithContext(ctx context.Context) AppGroupArrayOutput {
	return o
}

func (o AppGroupArrayOutput) Index(i pulumi.IntInput) AppGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppGroup {
		return vs[0].([]*AppGroup)[vs[1].(int)]
	}).(AppGroupOutput)
}

type AppGroupMapOutput struct{ *pulumi.OutputState }

func (AppGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppGroup)(nil)).Elem()
}

func (o AppGroupMapOutput) ToAppGroupMapOutput() AppGroupMapOutput {
	return o
}

func (o AppGroupMapOutput) ToAppGroupMapOutputWithContext(ctx context.Context) AppGroupMapOutput {
	return o
}

func (o AppGroupMapOutput) MapIndex(k pulumi.StringInput) AppGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppGroup {
		return vs[0].(map[string]*AppGroup)[vs[1].(string)]
	}).(AppGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppGroupInput)(nil)).Elem(), &AppGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppGroupArrayInput)(nil)).Elem(), AppGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppGroupMapInput)(nil)).Elem(), AppGroupMap{})
	pulumi.RegisterOutputType(AppGroupOutput{})
	pulumi.RegisterOutputType(AppGroupArrayOutput{})
	pulumi.RegisterOutputType(AppGroupMapOutput{})
}
