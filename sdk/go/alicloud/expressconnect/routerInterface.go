// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package expressconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/expressconnect"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
//				VpcName:   pulumi.Any(_var.Name),
//				CidrBlock: pulumi.String("10.1.0.0/21"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = expressconnect.NewRouterInterface(ctx, "defaultRouterInterface", &expressconnect.RouterInterfaceArgs{
//				Description:         pulumi.Any(_var.Name),
//				OppositeRegionId:    pulumi.String("cn-hangzhou"),
//				RouterId:            defaultNetwork.RouterId,
//				Role:                pulumi.String("InitiatingSide"),
//				RouterType:          pulumi.String("VRouter"),
//				PaymentType:         pulumi.String("PayAsYouGo"),
//				RouterInterfaceName: pulumi.Any(_var.Name),
//				Spec:                pulumi.String("Mini.2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Express Connect Router Interface can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:expressconnect/routerInterface:RouterInterface example <id>
//
// ```
type RouterInterface struct {
	pulumi.CustomResourceState

	// The access point ID to which the VBR belongs.
	AccessPointId pulumi.StringPtrOutput `pulumi:"accessPointId"`
	// Whether to pay automatically, value:-**false** (default): automatic payment is not enabled. After generating an order, you need to complete the payment at the order center.-**true**: Enable automatic payment to automatically pay for orders.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	AutoPay pulumi.BoolPtrOutput `pulumi:"autoPay"`
	// The bandwidth of the resource.
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// The businessStatus of the resource. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
	BusinessStatus pulumi.StringOutput `pulumi:"businessStatus"`
	// The connected time of the resource.
	ConnectedTime pulumi.StringOutput `pulumi:"connectedTime"`
	// The creation time of the resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The cross border of the resource.
	CrossBorder pulumi.BoolOutput `pulumi:"crossBorder"`
	// Whether to delete the health check IP address configured on the router interface. Value:-**true**: deletes the health check IP address.-**false** (default): does not delete the health check IP address.
	DeleteHealthCheckIp pulumi.BoolPtrOutput `pulumi:"deleteHealthCheckIp"`
	// The description of the router interface. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The end time of the resource.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// The has reservation data of the resource.
	HasReservationData pulumi.StringOutput `pulumi:"hasReservationData"`
	// The health check rate. Unit: seconds. The recommended value is 2. This indicates the interval between successive probe messages sent during the specified health check.
	HcRate pulumi.IntPtrOutput `pulumi:"hcRate"`
	// The health check thresholds. Unit: pcs. The recommended value is 8. This indicates the number of probe messages to be sent during the specified health check.
	HcThreshold pulumi.StringPtrOutput `pulumi:"hcThreshold"`
	// The health check source IP address, must be an unused IP within the local VPC.
	HealthCheckSourceIp pulumi.StringPtrOutput `pulumi:"healthCheckSourceIp"`
	// The IP address for health screening purposes.
	HealthCheckTargetIp pulumi.StringPtrOutput `pulumi:"healthCheckTargetIp"`
	// The Access point ID to which the other end belongs.
	OppositeAccessPointId pulumi.StringPtrOutput `pulumi:"oppositeAccessPointId"`
	// The opposite bandwidth of the router on the other side.
	OppositeBandwidth pulumi.IntOutput `pulumi:"oppositeBandwidth"`
	// The opposite interface business status of the router on the other side. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
	OppositeInterfaceBusinessStatus pulumi.StringOutput `pulumi:"oppositeInterfaceBusinessStatus"`
	// The Interface ID of the router at the other end.
	OppositeInterfaceId pulumi.StringPtrOutput `pulumi:"oppositeInterfaceId"`
	// The AliCloud account ID of the owner of the router interface on the other end.
	OppositeInterfaceOwnerId pulumi.StringPtrOutput `pulumi:"oppositeInterfaceOwnerId"`
	// The opposite interface spec of the router on the other side. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
	OppositeInterfaceSpec pulumi.StringOutput `pulumi:"oppositeInterfaceSpec"`
	// The opposite interface status of the router on the other side. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
	OppositeInterfaceStatus pulumi.StringOutput `pulumi:"oppositeInterfaceStatus"`
	// The geographical ID of the location of the receiving end of the connection.
	OppositeRegionId pulumi.StringOutput `pulumi:"oppositeRegionId"`
	// The id of the router at the other end.
	OppositeRouterId pulumi.StringPtrOutput `pulumi:"oppositeRouterId"`
	// The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
	OppositeRouterType pulumi.StringOutput `pulumi:"oppositeRouterType"`
	// The opposite vpc instance id of the router on the other side.
	OppositeVpcInstanceId pulumi.StringOutput `pulumi:"oppositeVpcInstanceId"`
	// The payment methods for router interfaces. Valid Values: `PayAsYouGo`, `Subscription`.
	PaymentType pulumi.StringPtrOutput `pulumi:"paymentType"`
	// Purchase duration, value:-When you choose to pay on a monthly basis, the value range is **1 to 9 * *.-When you choose to pay per year, the value range is **1 to 3 * *.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// The billing cycle of the prepaid fee. Valid values:-**Month** (default): monthly payment.-**Year**: Pay per Year.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	PricingCycle pulumi.StringPtrOutput `pulumi:"pricingCycle"`
	// The reservation active time of the resource.
	ReservationActiveTime pulumi.StringOutput `pulumi:"reservationActiveTime"`
	// The reservation bandwidth of the resource.
	ReservationBandwidth pulumi.StringOutput `pulumi:"reservationBandwidth"`
	// The reservation internet charge type of the resource.
	ReservationInternetChargeType pulumi.StringOutput `pulumi:"reservationInternetChargeType"`
	// The reservation order type of the resource.
	ReservationOrderType pulumi.StringOutput `pulumi:"reservationOrderType"`
	// The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
	Role pulumi.StringOutput `pulumi:"role"`
	// The router id associated with the router interface.
	RouterId pulumi.StringOutput `pulumi:"routerId"`
	// The first ID of the resource.
	RouterInterfaceId pulumi.StringOutput `pulumi:"routerInterfaceId"`
	// The name of the resource.
	RouterInterfaceName pulumi.StringPtrOutput `pulumi:"routerInterfaceName"`
	// The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
	RouterType pulumi.StringOutput `pulumi:"routerType"`
	// The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
	Spec pulumi.StringOutput `pulumi:"spec"`
	// The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
	Status pulumi.StringOutput `pulumi:"status"`
	// The vpc instance id of the resource.
	VpcInstanceId pulumi.StringOutput `pulumi:"vpcInstanceId"`
}

// NewRouterInterface registers a new resource with the given unique name, arguments, and options.
func NewRouterInterface(ctx *pulumi.Context,
	name string, args *RouterInterfaceArgs, opts ...pulumi.ResourceOption) (*RouterInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OppositeRegionId == nil {
		return nil, errors.New("invalid value for required argument 'OppositeRegionId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.RouterId == nil {
		return nil, errors.New("invalid value for required argument 'RouterId'")
	}
	if args.RouterType == nil {
		return nil, errors.New("invalid value for required argument 'RouterType'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	var resource RouterInterface
	err := ctx.RegisterResource("alicloud:expressconnect/routerInterface:RouterInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterInterface gets an existing RouterInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterInterfaceState, opts ...pulumi.ResourceOption) (*RouterInterface, error) {
	var resource RouterInterface
	err := ctx.ReadResource("alicloud:expressconnect/routerInterface:RouterInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterInterface resources.
type routerInterfaceState struct {
	// The access point ID to which the VBR belongs.
	AccessPointId *string `pulumi:"accessPointId"`
	// Whether to pay automatically, value:-**false** (default): automatic payment is not enabled. After generating an order, you need to complete the payment at the order center.-**true**: Enable automatic payment to automatically pay for orders.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	AutoPay *bool `pulumi:"autoPay"`
	// The bandwidth of the resource.
	Bandwidth *int `pulumi:"bandwidth"`
	// The businessStatus of the resource. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
	BusinessStatus *string `pulumi:"businessStatus"`
	// The connected time of the resource.
	ConnectedTime *string `pulumi:"connectedTime"`
	// The creation time of the resource.
	CreateTime *string `pulumi:"createTime"`
	// The cross border of the resource.
	CrossBorder *bool `pulumi:"crossBorder"`
	// Whether to delete the health check IP address configured on the router interface. Value:-**true**: deletes the health check IP address.-**false** (default): does not delete the health check IP address.
	DeleteHealthCheckIp *bool `pulumi:"deleteHealthCheckIp"`
	// The description of the router interface. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description *string `pulumi:"description"`
	// The end time of the resource.
	EndTime *string `pulumi:"endTime"`
	// The has reservation data of the resource.
	HasReservationData *string `pulumi:"hasReservationData"`
	// The health check rate. Unit: seconds. The recommended value is 2. This indicates the interval between successive probe messages sent during the specified health check.
	HcRate *int `pulumi:"hcRate"`
	// The health check thresholds. Unit: pcs. The recommended value is 8. This indicates the number of probe messages to be sent during the specified health check.
	HcThreshold *string `pulumi:"hcThreshold"`
	// The health check source IP address, must be an unused IP within the local VPC.
	HealthCheckSourceIp *string `pulumi:"healthCheckSourceIp"`
	// The IP address for health screening purposes.
	HealthCheckTargetIp *string `pulumi:"healthCheckTargetIp"`
	// The Access point ID to which the other end belongs.
	OppositeAccessPointId *string `pulumi:"oppositeAccessPointId"`
	// The opposite bandwidth of the router on the other side.
	OppositeBandwidth *int `pulumi:"oppositeBandwidth"`
	// The opposite interface business status of the router on the other side. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
	OppositeInterfaceBusinessStatus *string `pulumi:"oppositeInterfaceBusinessStatus"`
	// The Interface ID of the router at the other end.
	OppositeInterfaceId *string `pulumi:"oppositeInterfaceId"`
	// The AliCloud account ID of the owner of the router interface on the other end.
	OppositeInterfaceOwnerId *string `pulumi:"oppositeInterfaceOwnerId"`
	// The opposite interface spec of the router on the other side. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
	OppositeInterfaceSpec *string `pulumi:"oppositeInterfaceSpec"`
	// The opposite interface status of the router on the other side. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
	OppositeInterfaceStatus *string `pulumi:"oppositeInterfaceStatus"`
	// The geographical ID of the location of the receiving end of the connection.
	OppositeRegionId *string `pulumi:"oppositeRegionId"`
	// The id of the router at the other end.
	OppositeRouterId *string `pulumi:"oppositeRouterId"`
	// The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
	OppositeRouterType *string `pulumi:"oppositeRouterType"`
	// The opposite vpc instance id of the router on the other side.
	OppositeVpcInstanceId *string `pulumi:"oppositeVpcInstanceId"`
	// The payment methods for router interfaces. Valid Values: `PayAsYouGo`, `Subscription`.
	PaymentType *string `pulumi:"paymentType"`
	// Purchase duration, value:-When you choose to pay on a monthly basis, the value range is **1 to 9 * *.-When you choose to pay per year, the value range is **1 to 3 * *.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	Period *int `pulumi:"period"`
	// The billing cycle of the prepaid fee. Valid values:-**Month** (default): monthly payment.-**Year**: Pay per Year.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	PricingCycle *string `pulumi:"pricingCycle"`
	// The reservation active time of the resource.
	ReservationActiveTime *string `pulumi:"reservationActiveTime"`
	// The reservation bandwidth of the resource.
	ReservationBandwidth *string `pulumi:"reservationBandwidth"`
	// The reservation internet charge type of the resource.
	ReservationInternetChargeType *string `pulumi:"reservationInternetChargeType"`
	// The reservation order type of the resource.
	ReservationOrderType *string `pulumi:"reservationOrderType"`
	// The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
	Role *string `pulumi:"role"`
	// The router id associated with the router interface.
	RouterId *string `pulumi:"routerId"`
	// The first ID of the resource.
	RouterInterfaceId *string `pulumi:"routerInterfaceId"`
	// The name of the resource.
	RouterInterfaceName *string `pulumi:"routerInterfaceName"`
	// The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
	RouterType *string `pulumi:"routerType"`
	// The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
	Spec *string `pulumi:"spec"`
	// The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
	Status *string `pulumi:"status"`
	// The vpc instance id of the resource.
	VpcInstanceId *string `pulumi:"vpcInstanceId"`
}

type RouterInterfaceState struct {
	// The access point ID to which the VBR belongs.
	AccessPointId pulumi.StringPtrInput
	// Whether to pay automatically, value:-**false** (default): automatic payment is not enabled. After generating an order, you need to complete the payment at the order center.-**true**: Enable automatic payment to automatically pay for orders.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	AutoPay pulumi.BoolPtrInput
	// The bandwidth of the resource.
	Bandwidth pulumi.IntPtrInput
	// The businessStatus of the resource. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
	BusinessStatus pulumi.StringPtrInput
	// The connected time of the resource.
	ConnectedTime pulumi.StringPtrInput
	// The creation time of the resource.
	CreateTime pulumi.StringPtrInput
	// The cross border of the resource.
	CrossBorder pulumi.BoolPtrInput
	// Whether to delete the health check IP address configured on the router interface. Value:-**true**: deletes the health check IP address.-**false** (default): does not delete the health check IP address.
	DeleteHealthCheckIp pulumi.BoolPtrInput
	// The description of the router interface. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description pulumi.StringPtrInput
	// The end time of the resource.
	EndTime pulumi.StringPtrInput
	// The has reservation data of the resource.
	HasReservationData pulumi.StringPtrInput
	// The health check rate. Unit: seconds. The recommended value is 2. This indicates the interval between successive probe messages sent during the specified health check.
	HcRate pulumi.IntPtrInput
	// The health check thresholds. Unit: pcs. The recommended value is 8. This indicates the number of probe messages to be sent during the specified health check.
	HcThreshold pulumi.StringPtrInput
	// The health check source IP address, must be an unused IP within the local VPC.
	HealthCheckSourceIp pulumi.StringPtrInput
	// The IP address for health screening purposes.
	HealthCheckTargetIp pulumi.StringPtrInput
	// The Access point ID to which the other end belongs.
	OppositeAccessPointId pulumi.StringPtrInput
	// The opposite bandwidth of the router on the other side.
	OppositeBandwidth pulumi.IntPtrInput
	// The opposite interface business status of the router on the other side. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
	OppositeInterfaceBusinessStatus pulumi.StringPtrInput
	// The Interface ID of the router at the other end.
	OppositeInterfaceId pulumi.StringPtrInput
	// The AliCloud account ID of the owner of the router interface on the other end.
	OppositeInterfaceOwnerId pulumi.StringPtrInput
	// The opposite interface spec of the router on the other side. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
	OppositeInterfaceSpec pulumi.StringPtrInput
	// The opposite interface status of the router on the other side. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
	OppositeInterfaceStatus pulumi.StringPtrInput
	// The geographical ID of the location of the receiving end of the connection.
	OppositeRegionId pulumi.StringPtrInput
	// The id of the router at the other end.
	OppositeRouterId pulumi.StringPtrInput
	// The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
	OppositeRouterType pulumi.StringPtrInput
	// The opposite vpc instance id of the router on the other side.
	OppositeVpcInstanceId pulumi.StringPtrInput
	// The payment methods for router interfaces. Valid Values: `PayAsYouGo`, `Subscription`.
	PaymentType pulumi.StringPtrInput
	// Purchase duration, value:-When you choose to pay on a monthly basis, the value range is **1 to 9 * *.-When you choose to pay per year, the value range is **1 to 3 * *.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	Period pulumi.IntPtrInput
	// The billing cycle of the prepaid fee. Valid values:-**Month** (default): monthly payment.-**Year**: Pay per Year.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	PricingCycle pulumi.StringPtrInput
	// The reservation active time of the resource.
	ReservationActiveTime pulumi.StringPtrInput
	// The reservation bandwidth of the resource.
	ReservationBandwidth pulumi.StringPtrInput
	// The reservation internet charge type of the resource.
	ReservationInternetChargeType pulumi.StringPtrInput
	// The reservation order type of the resource.
	ReservationOrderType pulumi.StringPtrInput
	// The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
	Role pulumi.StringPtrInput
	// The router id associated with the router interface.
	RouterId pulumi.StringPtrInput
	// The first ID of the resource.
	RouterInterfaceId pulumi.StringPtrInput
	// The name of the resource.
	RouterInterfaceName pulumi.StringPtrInput
	// The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
	RouterType pulumi.StringPtrInput
	// The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
	Spec pulumi.StringPtrInput
	// The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
	Status pulumi.StringPtrInput
	// The vpc instance id of the resource.
	VpcInstanceId pulumi.StringPtrInput
}

func (RouterInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerInterfaceState)(nil)).Elem()
}

type routerInterfaceArgs struct {
	// The access point ID to which the VBR belongs.
	AccessPointId *string `pulumi:"accessPointId"`
	// Whether to pay automatically, value:-**false** (default): automatic payment is not enabled. After generating an order, you need to complete the payment at the order center.-**true**: Enable automatic payment to automatically pay for orders.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	AutoPay *bool `pulumi:"autoPay"`
	// Whether to delete the health check IP address configured on the router interface. Value:-**true**: deletes the health check IP address.-**false** (default): does not delete the health check IP address.
	DeleteHealthCheckIp *bool `pulumi:"deleteHealthCheckIp"`
	// The description of the router interface. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description *string `pulumi:"description"`
	// The health check rate. Unit: seconds. The recommended value is 2. This indicates the interval between successive probe messages sent during the specified health check.
	HcRate *int `pulumi:"hcRate"`
	// The health check thresholds. Unit: pcs. The recommended value is 8. This indicates the number of probe messages to be sent during the specified health check.
	HcThreshold *string `pulumi:"hcThreshold"`
	// The health check source IP address, must be an unused IP within the local VPC.
	HealthCheckSourceIp *string `pulumi:"healthCheckSourceIp"`
	// The IP address for health screening purposes.
	HealthCheckTargetIp *string `pulumi:"healthCheckTargetIp"`
	// The Access point ID to which the other end belongs.
	OppositeAccessPointId *string `pulumi:"oppositeAccessPointId"`
	// The Interface ID of the router at the other end.
	OppositeInterfaceId *string `pulumi:"oppositeInterfaceId"`
	// The AliCloud account ID of the owner of the router interface on the other end.
	OppositeInterfaceOwnerId *string `pulumi:"oppositeInterfaceOwnerId"`
	// The geographical ID of the location of the receiving end of the connection.
	OppositeRegionId string `pulumi:"oppositeRegionId"`
	// The id of the router at the other end.
	OppositeRouterId *string `pulumi:"oppositeRouterId"`
	// The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
	OppositeRouterType *string `pulumi:"oppositeRouterType"`
	// The payment methods for router interfaces. Valid Values: `PayAsYouGo`, `Subscription`.
	PaymentType *string `pulumi:"paymentType"`
	// Purchase duration, value:-When you choose to pay on a monthly basis, the value range is **1 to 9 * *.-When you choose to pay per year, the value range is **1 to 3 * *.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	Period *int `pulumi:"period"`
	// The billing cycle of the prepaid fee. Valid values:-**Month** (default): monthly payment.-**Year**: Pay per Year.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	PricingCycle *string `pulumi:"pricingCycle"`
	// The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
	Role string `pulumi:"role"`
	// The router id associated with the router interface.
	RouterId string `pulumi:"routerId"`
	// The first ID of the resource.
	RouterInterfaceId *string `pulumi:"routerInterfaceId"`
	// The name of the resource.
	RouterInterfaceName *string `pulumi:"routerInterfaceName"`
	// The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
	RouterType string `pulumi:"routerType"`
	// The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
	Spec string `pulumi:"spec"`
	// The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a RouterInterface resource.
type RouterInterfaceArgs struct {
	// The access point ID to which the VBR belongs.
	AccessPointId pulumi.StringPtrInput
	// Whether to pay automatically, value:-**false** (default): automatic payment is not enabled. After generating an order, you need to complete the payment at the order center.-**true**: Enable automatic payment to automatically pay for orders.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	AutoPay pulumi.BoolPtrInput
	// Whether to delete the health check IP address configured on the router interface. Value:-**true**: deletes the health check IP address.-**false** (default): does not delete the health check IP address.
	DeleteHealthCheckIp pulumi.BoolPtrInput
	// The description of the router interface. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description pulumi.StringPtrInput
	// The health check rate. Unit: seconds. The recommended value is 2. This indicates the interval between successive probe messages sent during the specified health check.
	HcRate pulumi.IntPtrInput
	// The health check thresholds. Unit: pcs. The recommended value is 8. This indicates the number of probe messages to be sent during the specified health check.
	HcThreshold pulumi.StringPtrInput
	// The health check source IP address, must be an unused IP within the local VPC.
	HealthCheckSourceIp pulumi.StringPtrInput
	// The IP address for health screening purposes.
	HealthCheckTargetIp pulumi.StringPtrInput
	// The Access point ID to which the other end belongs.
	OppositeAccessPointId pulumi.StringPtrInput
	// The Interface ID of the router at the other end.
	OppositeInterfaceId pulumi.StringPtrInput
	// The AliCloud account ID of the owner of the router interface on the other end.
	OppositeInterfaceOwnerId pulumi.StringPtrInput
	// The geographical ID of the location of the receiving end of the connection.
	OppositeRegionId pulumi.StringInput
	// The id of the router at the other end.
	OppositeRouterId pulumi.StringPtrInput
	// The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
	OppositeRouterType pulumi.StringPtrInput
	// The payment methods for router interfaces. Valid Values: `PayAsYouGo`, `Subscription`.
	PaymentType pulumi.StringPtrInput
	// Purchase duration, value:-When you choose to pay on a monthly basis, the value range is **1 to 9 * *.-When you choose to pay per year, the value range is **1 to 3 * *.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	Period pulumi.IntPtrInput
	// The billing cycle of the prepaid fee. Valid values:-**Month** (default): monthly payment.-**Year**: Pay per Year.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
	PricingCycle pulumi.StringPtrInput
	// The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
	Role pulumi.StringInput
	// The router id associated with the router interface.
	RouterId pulumi.StringInput
	// The first ID of the resource.
	RouterInterfaceId pulumi.StringPtrInput
	// The name of the resource.
	RouterInterfaceName pulumi.StringPtrInput
	// The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
	RouterType pulumi.StringInput
	// The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
	Spec pulumi.StringInput
	// The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
	Status pulumi.StringPtrInput
}

func (RouterInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerInterfaceArgs)(nil)).Elem()
}

type RouterInterfaceInput interface {
	pulumi.Input

	ToRouterInterfaceOutput() RouterInterfaceOutput
	ToRouterInterfaceOutputWithContext(ctx context.Context) RouterInterfaceOutput
}

func (*RouterInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterInterface)(nil)).Elem()
}

func (i *RouterInterface) ToRouterInterfaceOutput() RouterInterfaceOutput {
	return i.ToRouterInterfaceOutputWithContext(context.Background())
}

func (i *RouterInterface) ToRouterInterfaceOutputWithContext(ctx context.Context) RouterInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterInterfaceOutput)
}

// RouterInterfaceArrayInput is an input type that accepts RouterInterfaceArray and RouterInterfaceArrayOutput values.
// You can construct a concrete instance of `RouterInterfaceArrayInput` via:
//
//	RouterInterfaceArray{ RouterInterfaceArgs{...} }
type RouterInterfaceArrayInput interface {
	pulumi.Input

	ToRouterInterfaceArrayOutput() RouterInterfaceArrayOutput
	ToRouterInterfaceArrayOutputWithContext(context.Context) RouterInterfaceArrayOutput
}

type RouterInterfaceArray []RouterInterfaceInput

func (RouterInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterInterface)(nil)).Elem()
}

func (i RouterInterfaceArray) ToRouterInterfaceArrayOutput() RouterInterfaceArrayOutput {
	return i.ToRouterInterfaceArrayOutputWithContext(context.Background())
}

func (i RouterInterfaceArray) ToRouterInterfaceArrayOutputWithContext(ctx context.Context) RouterInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterInterfaceArrayOutput)
}

// RouterInterfaceMapInput is an input type that accepts RouterInterfaceMap and RouterInterfaceMapOutput values.
// You can construct a concrete instance of `RouterInterfaceMapInput` via:
//
//	RouterInterfaceMap{ "key": RouterInterfaceArgs{...} }
type RouterInterfaceMapInput interface {
	pulumi.Input

	ToRouterInterfaceMapOutput() RouterInterfaceMapOutput
	ToRouterInterfaceMapOutputWithContext(context.Context) RouterInterfaceMapOutput
}

type RouterInterfaceMap map[string]RouterInterfaceInput

func (RouterInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterInterface)(nil)).Elem()
}

func (i RouterInterfaceMap) ToRouterInterfaceMapOutput() RouterInterfaceMapOutput {
	return i.ToRouterInterfaceMapOutputWithContext(context.Background())
}

func (i RouterInterfaceMap) ToRouterInterfaceMapOutputWithContext(ctx context.Context) RouterInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterInterfaceMapOutput)
}

type RouterInterfaceOutput struct{ *pulumi.OutputState }

func (RouterInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterInterface)(nil)).Elem()
}

func (o RouterInterfaceOutput) ToRouterInterfaceOutput() RouterInterfaceOutput {
	return o
}

func (o RouterInterfaceOutput) ToRouterInterfaceOutputWithContext(ctx context.Context) RouterInterfaceOutput {
	return o
}

// The access point ID to which the VBR belongs.
func (o RouterInterfaceOutput) AccessPointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringPtrOutput { return v.AccessPointId }).(pulumi.StringPtrOutput)
}

// Whether to pay automatically, value:-**false** (default): automatic payment is not enabled. After generating an order, you need to complete the payment at the order center.-**true**: Enable automatic payment to automatically pay for orders.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
func (o RouterInterfaceOutput) AutoPay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.BoolPtrOutput { return v.AutoPay }).(pulumi.BoolPtrOutput)
}

// The bandwidth of the resource.
func (o RouterInterfaceOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// The businessStatus of the resource. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
func (o RouterInterfaceOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The connected time of the resource.
func (o RouterInterfaceOutput) ConnectedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.ConnectedTime }).(pulumi.StringOutput)
}

// The creation time of the resource.
func (o RouterInterfaceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The cross border of the resource.
func (o RouterInterfaceOutput) CrossBorder() pulumi.BoolOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.BoolOutput { return v.CrossBorder }).(pulumi.BoolOutput)
}

// Whether to delete the health check IP address configured on the router interface. Value:-**true**: deletes the health check IP address.-**false** (default): does not delete the health check IP address.
func (o RouterInterfaceOutput) DeleteHealthCheckIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.BoolPtrOutput { return v.DeleteHealthCheckIp }).(pulumi.BoolPtrOutput)
}

// The description of the router interface. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
func (o RouterInterfaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The end time of the resource.
func (o RouterInterfaceOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// The has reservation data of the resource.
func (o RouterInterfaceOutput) HasReservationData() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.HasReservationData }).(pulumi.StringOutput)
}

// The health check rate. Unit: seconds. The recommended value is 2. This indicates the interval between successive probe messages sent during the specified health check.
func (o RouterInterfaceOutput) HcRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.IntPtrOutput { return v.HcRate }).(pulumi.IntPtrOutput)
}

// The health check thresholds. Unit: pcs. The recommended value is 8. This indicates the number of probe messages to be sent during the specified health check.
func (o RouterInterfaceOutput) HcThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringPtrOutput { return v.HcThreshold }).(pulumi.StringPtrOutput)
}

// The health check source IP address, must be an unused IP within the local VPC.
func (o RouterInterfaceOutput) HealthCheckSourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringPtrOutput { return v.HealthCheckSourceIp }).(pulumi.StringPtrOutput)
}

// The IP address for health screening purposes.
func (o RouterInterfaceOutput) HealthCheckTargetIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringPtrOutput { return v.HealthCheckTargetIp }).(pulumi.StringPtrOutput)
}

// The Access point ID to which the other end belongs.
func (o RouterInterfaceOutput) OppositeAccessPointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringPtrOutput { return v.OppositeAccessPointId }).(pulumi.StringPtrOutput)
}

// The opposite bandwidth of the router on the other side.
func (o RouterInterfaceOutput) OppositeBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.IntOutput { return v.OppositeBandwidth }).(pulumi.IntOutput)
}

// The opposite interface business status of the router on the other side. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
func (o RouterInterfaceOutput) OppositeInterfaceBusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.OppositeInterfaceBusinessStatus }).(pulumi.StringOutput)
}

// The Interface ID of the router at the other end.
func (o RouterInterfaceOutput) OppositeInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringPtrOutput { return v.OppositeInterfaceId }).(pulumi.StringPtrOutput)
}

// The AliCloud account ID of the owner of the router interface on the other end.
func (o RouterInterfaceOutput) OppositeInterfaceOwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringPtrOutput { return v.OppositeInterfaceOwnerId }).(pulumi.StringPtrOutput)
}

// The opposite interface spec of the router on the other side. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
func (o RouterInterfaceOutput) OppositeInterfaceSpec() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.OppositeInterfaceSpec }).(pulumi.StringOutput)
}

// The opposite interface status of the router on the other side. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
func (o RouterInterfaceOutput) OppositeInterfaceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.OppositeInterfaceStatus }).(pulumi.StringOutput)
}

// The geographical ID of the location of the receiving end of the connection.
func (o RouterInterfaceOutput) OppositeRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.OppositeRegionId }).(pulumi.StringOutput)
}

// The id of the router at the other end.
func (o RouterInterfaceOutput) OppositeRouterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringPtrOutput { return v.OppositeRouterId }).(pulumi.StringPtrOutput)
}

// The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
func (o RouterInterfaceOutput) OppositeRouterType() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.OppositeRouterType }).(pulumi.StringOutput)
}

// The opposite vpc instance id of the router on the other side.
func (o RouterInterfaceOutput) OppositeVpcInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.OppositeVpcInstanceId }).(pulumi.StringOutput)
}

// The payment methods for router interfaces. Valid Values: `PayAsYouGo`, `Subscription`.
func (o RouterInterfaceOutput) PaymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringPtrOutput { return v.PaymentType }).(pulumi.StringPtrOutput)
}

// Purchase duration, value:-When you choose to pay on a monthly basis, the value range is **1 to 9 * *.-When you choose to pay per year, the value range is **1 to 3 * *.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
func (o RouterInterfaceOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// The billing cycle of the prepaid fee. Valid values:-**Month** (default): monthly payment.-**Year**: Pay per Year.> **InstanceChargeType** is required when the value of the parameter is **PrePaid.
func (o RouterInterfaceOutput) PricingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringPtrOutput { return v.PricingCycle }).(pulumi.StringPtrOutput)
}

// The reservation active time of the resource.
func (o RouterInterfaceOutput) ReservationActiveTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.ReservationActiveTime }).(pulumi.StringOutput)
}

// The reservation bandwidth of the resource.
func (o RouterInterfaceOutput) ReservationBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.ReservationBandwidth }).(pulumi.StringOutput)
}

// The reservation internet charge type of the resource.
func (o RouterInterfaceOutput) ReservationInternetChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.ReservationInternetChargeType }).(pulumi.StringOutput)
}

// The reservation order type of the resource.
func (o RouterInterfaceOutput) ReservationOrderType() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.ReservationOrderType }).(pulumi.StringOutput)
}

// The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
func (o RouterInterfaceOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The router id associated with the router interface.
func (o RouterInterfaceOutput) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.RouterId }).(pulumi.StringOutput)
}

// The first ID of the resource.
func (o RouterInterfaceOutput) RouterInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.RouterInterfaceId }).(pulumi.StringOutput)
}

// The name of the resource.
func (o RouterInterfaceOutput) RouterInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringPtrOutput { return v.RouterInterfaceName }).(pulumi.StringPtrOutput)
}

// The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
func (o RouterInterfaceOutput) RouterType() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.RouterType }).(pulumi.StringOutput)
}

// The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
func (o RouterInterfaceOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.Spec }).(pulumi.StringOutput)
}

// The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
func (o RouterInterfaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The vpc instance id of the resource.
func (o RouterInterfaceOutput) VpcInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterInterface) pulumi.StringOutput { return v.VpcInstanceId }).(pulumi.StringOutput)
}

type RouterInterfaceArrayOutput struct{ *pulumi.OutputState }

func (RouterInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterInterface)(nil)).Elem()
}

func (o RouterInterfaceArrayOutput) ToRouterInterfaceArrayOutput() RouterInterfaceArrayOutput {
	return o
}

func (o RouterInterfaceArrayOutput) ToRouterInterfaceArrayOutputWithContext(ctx context.Context) RouterInterfaceArrayOutput {
	return o
}

func (o RouterInterfaceArrayOutput) Index(i pulumi.IntInput) RouterInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterInterface {
		return vs[0].([]*RouterInterface)[vs[1].(int)]
	}).(RouterInterfaceOutput)
}

type RouterInterfaceMapOutput struct{ *pulumi.OutputState }

func (RouterInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterInterface)(nil)).Elem()
}

func (o RouterInterfaceMapOutput) ToRouterInterfaceMapOutput() RouterInterfaceMapOutput {
	return o
}

func (o RouterInterfaceMapOutput) ToRouterInterfaceMapOutputWithContext(ctx context.Context) RouterInterfaceMapOutput {
	return o
}

func (o RouterInterfaceMapOutput) MapIndex(k pulumi.StringInput) RouterInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterInterface {
		return vs[0].(map[string]*RouterInterface)[vs[1].(string)]
	}).(RouterInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterInterfaceInput)(nil)).Elem(), &RouterInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterInterfaceArrayInput)(nil)).Elem(), RouterInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterInterfaceMapInput)(nil)).Elem(), RouterInterfaceMap{})
	pulumi.RegisterOutputType(RouterInterfaceOutput{})
	pulumi.RegisterOutputType(RouterInterfaceArrayOutput{})
	pulumi.RegisterOutputType(RouterInterfaceMapOutput{})
}
