// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package expressconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Express Connect Physical Connection resource.
//
// For information about Express Connect Physical Connection and how to use it, see [What is Physical Connection](https://www.alibabacloud.com/help/en/express-connect/developer-reference/api-vpc-2016-04-28-createphysicalconnection-efficiency-channels).
//
// > **NOTE:** Available since v1.132.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/expressconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := expressconnect.NewPhysicalConnection(ctx, "domestic", &expressconnect.PhysicalConnectionArgs{
//				AccessPointId:          pulumi.String("ap-cn-hangzhou-yh-B"),
//				LineOperator:           pulumi.String("CT"),
//				PeerLocation:           pulumi.String("example_value"),
//				PhysicalConnectionName: pulumi.String("example_value"),
//				Type:                   pulumi.String("VPC"),
//				Description:            pulumi.String("my domestic connection"),
//				PortType:               pulumi.String("1000Base-LX"),
//				Bandwidth:              pulumi.String("100"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = expressconnect.NewPhysicalConnection(ctx, "international", &expressconnect.PhysicalConnectionArgs{
//				AccessPointId:          pulumi.String("ap-sg-singpore-A"),
//				LineOperator:           pulumi.String("Other"),
//				PeerLocation:           pulumi.String("example_value"),
//				PhysicalConnectionName: pulumi.String("example_value"),
//				Type:                   pulumi.String("VPC"),
//				Description:            pulumi.String("my domestic connection"),
//				PortType:               pulumi.String("1000Base-LX"),
//				Bandwidth:              pulumi.String("100"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Express Connect Physical Connection can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:expressconnect/physicalConnection:PhysicalConnection example <id>
// ```
type PhysicalConnection struct {
	pulumi.CustomResourceState

	// The access point ID of the Express Connect circuit.
	AccessPointId pulumi.StringOutput `pulumi:"accessPointId"`
	// The maximum bandwidth of the hosted connection.
	Bandwidth pulumi.StringOutput `pulumi:"bandwidth"`
	// The circuit code of the Express Connect circuit.
	CircuitCode pulumi.StringPtrOutput `pulumi:"circuitCode"`
	// The description of the Express Connect circuit.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The connectivity provider of the Express Connect circuit. Valid values:
	// - `CT`: China Telecom.
	// - `CU`: China Unicom.
	// - `CM`: China Mobile.
	// - `CO`: Other connectivity providers in the Chinese mainland.
	// - `Equinix`: Equinix.
	// - `Other`: Other connectivity providers outside the Chinese mainland.
	LineOperator pulumi.StringOutput `pulumi:"lineOperator"`
	// The ID of the order that is placed. **Note:** `orderId` takes effect only if `status` is set to `Enabled`.
	OrderId pulumi.StringOutput `pulumi:"orderId"`
	// The geographical location of the data center.
	PeerLocation pulumi.StringOutput `pulumi:"peerLocation"`
	// The subscription duration. Valid values:
	// - If `pricingCycle` is set to `Month`. Valid values: `1` to `9`.
	// - If `pricingCycle` is set to `Year`. Valid values: `1` to `5`.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// The name of the Express Connect circuit.
	PhysicalConnectionName pulumi.StringPtrOutput `pulumi:"physicalConnectionName"`
	// The port type of the Express Connect circuit. Valid values:
	// - `100Base-T`: 100 Mbit/s copper Ethernet port.
	// - `1000Base-T`: 1000 Mbit/s copper Ethernet port.
	// - `1000Base-LX`: 1000 Mbit/s single-mode optical port (10 km).
	// - `10GBase-T`: 10000 Mbit/s copper Ethernet port.
	// - `10GBase-LR`: 10000 Mbit/s single-mode optical port (10 km).
	// - `40GBase-LR`: 40000 Mbit/s single-mode optical port.
	// - `100GBase-LR`: 100000 Mbit/s single-mode optical port.
	// > **NOTE:** From version 1.185.0, `portType` can be set to `40GBase-LR`, `100GBase-LR`. From version 1.230.1, `portType` cannot be modified.
	PortType pulumi.StringPtrOutput `pulumi:"portType"`
	// The billing cycle of the subscription. Default value: `Month`. Valid values: `Month`, `Year`.
	// > **NOTE:** `period` and `pricingCycle` are valid only when `status` is set to `Enabled`.
	PricingCycle pulumi.StringPtrOutput `pulumi:"pricingCycle"`
	// The ID of the redundant Express Connect circuit. **NOTE:** From version 1.230.1, `redundantPhysicalConnectionId` cannot be modified.
	RedundantPhysicalConnectionId pulumi.StringPtrOutput `pulumi:"redundantPhysicalConnectionId"`
	// The status of the Express Connect circuit. Valid values: `Confirmed`, `Enabled`, `Canceled`, `Terminated`. **NOTE:** From version 1.230.1, `status` can be set to `Confirmed`. If you want to set `status` to `Enabled`, `period` must be set.
	Status pulumi.StringOutput `pulumi:"status"`
	// The type of Express Connect circuit. Default value: `VPC`. Valid values: `VPC`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPhysicalConnection registers a new resource with the given unique name, arguments, and options.
func NewPhysicalConnection(ctx *pulumi.Context,
	name string, args *PhysicalConnectionArgs, opts ...pulumi.ResourceOption) (*PhysicalConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessPointId == nil {
		return nil, errors.New("invalid value for required argument 'AccessPointId'")
	}
	if args.LineOperator == nil {
		return nil, errors.New("invalid value for required argument 'LineOperator'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PhysicalConnection
	err := ctx.RegisterResource("alicloud:expressconnect/physicalConnection:PhysicalConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPhysicalConnection gets an existing PhysicalConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPhysicalConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PhysicalConnectionState, opts ...pulumi.ResourceOption) (*PhysicalConnection, error) {
	var resource PhysicalConnection
	err := ctx.ReadResource("alicloud:expressconnect/physicalConnection:PhysicalConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PhysicalConnection resources.
type physicalConnectionState struct {
	// The access point ID of the Express Connect circuit.
	AccessPointId *string `pulumi:"accessPointId"`
	// The maximum bandwidth of the hosted connection.
	Bandwidth *string `pulumi:"bandwidth"`
	// The circuit code of the Express Connect circuit.
	CircuitCode *string `pulumi:"circuitCode"`
	// The description of the Express Connect circuit.
	Description *string `pulumi:"description"`
	// The connectivity provider of the Express Connect circuit. Valid values:
	// - `CT`: China Telecom.
	// - `CU`: China Unicom.
	// - `CM`: China Mobile.
	// - `CO`: Other connectivity providers in the Chinese mainland.
	// - `Equinix`: Equinix.
	// - `Other`: Other connectivity providers outside the Chinese mainland.
	LineOperator *string `pulumi:"lineOperator"`
	// The ID of the order that is placed. **Note:** `orderId` takes effect only if `status` is set to `Enabled`.
	OrderId *string `pulumi:"orderId"`
	// The geographical location of the data center.
	PeerLocation *string `pulumi:"peerLocation"`
	// The subscription duration. Valid values:
	// - If `pricingCycle` is set to `Month`. Valid values: `1` to `9`.
	// - If `pricingCycle` is set to `Year`. Valid values: `1` to `5`.
	Period *int `pulumi:"period"`
	// The name of the Express Connect circuit.
	PhysicalConnectionName *string `pulumi:"physicalConnectionName"`
	// The port type of the Express Connect circuit. Valid values:
	// - `100Base-T`: 100 Mbit/s copper Ethernet port.
	// - `1000Base-T`: 1000 Mbit/s copper Ethernet port.
	// - `1000Base-LX`: 1000 Mbit/s single-mode optical port (10 km).
	// - `10GBase-T`: 10000 Mbit/s copper Ethernet port.
	// - `10GBase-LR`: 10000 Mbit/s single-mode optical port (10 km).
	// - `40GBase-LR`: 40000 Mbit/s single-mode optical port.
	// - `100GBase-LR`: 100000 Mbit/s single-mode optical port.
	// > **NOTE:** From version 1.185.0, `portType` can be set to `40GBase-LR`, `100GBase-LR`. From version 1.230.1, `portType` cannot be modified.
	PortType *string `pulumi:"portType"`
	// The billing cycle of the subscription. Default value: `Month`. Valid values: `Month`, `Year`.
	// > **NOTE:** `period` and `pricingCycle` are valid only when `status` is set to `Enabled`.
	PricingCycle *string `pulumi:"pricingCycle"`
	// The ID of the redundant Express Connect circuit. **NOTE:** From version 1.230.1, `redundantPhysicalConnectionId` cannot be modified.
	RedundantPhysicalConnectionId *string `pulumi:"redundantPhysicalConnectionId"`
	// The status of the Express Connect circuit. Valid values: `Confirmed`, `Enabled`, `Canceled`, `Terminated`. **NOTE:** From version 1.230.1, `status` can be set to `Confirmed`. If you want to set `status` to `Enabled`, `period` must be set.
	Status *string `pulumi:"status"`
	// The type of Express Connect circuit. Default value: `VPC`. Valid values: `VPC`.
	Type *string `pulumi:"type"`
}

type PhysicalConnectionState struct {
	// The access point ID of the Express Connect circuit.
	AccessPointId pulumi.StringPtrInput
	// The maximum bandwidth of the hosted connection.
	Bandwidth pulumi.StringPtrInput
	// The circuit code of the Express Connect circuit.
	CircuitCode pulumi.StringPtrInput
	// The description of the Express Connect circuit.
	Description pulumi.StringPtrInput
	// The connectivity provider of the Express Connect circuit. Valid values:
	// - `CT`: China Telecom.
	// - `CU`: China Unicom.
	// - `CM`: China Mobile.
	// - `CO`: Other connectivity providers in the Chinese mainland.
	// - `Equinix`: Equinix.
	// - `Other`: Other connectivity providers outside the Chinese mainland.
	LineOperator pulumi.StringPtrInput
	// The ID of the order that is placed. **Note:** `orderId` takes effect only if `status` is set to `Enabled`.
	OrderId pulumi.StringPtrInput
	// The geographical location of the data center.
	PeerLocation pulumi.StringPtrInput
	// The subscription duration. Valid values:
	// - If `pricingCycle` is set to `Month`. Valid values: `1` to `9`.
	// - If `pricingCycle` is set to `Year`. Valid values: `1` to `5`.
	Period pulumi.IntPtrInput
	// The name of the Express Connect circuit.
	PhysicalConnectionName pulumi.StringPtrInput
	// The port type of the Express Connect circuit. Valid values:
	// - `100Base-T`: 100 Mbit/s copper Ethernet port.
	// - `1000Base-T`: 1000 Mbit/s copper Ethernet port.
	// - `1000Base-LX`: 1000 Mbit/s single-mode optical port (10 km).
	// - `10GBase-T`: 10000 Mbit/s copper Ethernet port.
	// - `10GBase-LR`: 10000 Mbit/s single-mode optical port (10 km).
	// - `40GBase-LR`: 40000 Mbit/s single-mode optical port.
	// - `100GBase-LR`: 100000 Mbit/s single-mode optical port.
	// > **NOTE:** From version 1.185.0, `portType` can be set to `40GBase-LR`, `100GBase-LR`. From version 1.230.1, `portType` cannot be modified.
	PortType pulumi.StringPtrInput
	// The billing cycle of the subscription. Default value: `Month`. Valid values: `Month`, `Year`.
	// > **NOTE:** `period` and `pricingCycle` are valid only when `status` is set to `Enabled`.
	PricingCycle pulumi.StringPtrInput
	// The ID of the redundant Express Connect circuit. **NOTE:** From version 1.230.1, `redundantPhysicalConnectionId` cannot be modified.
	RedundantPhysicalConnectionId pulumi.StringPtrInput
	// The status of the Express Connect circuit. Valid values: `Confirmed`, `Enabled`, `Canceled`, `Terminated`. **NOTE:** From version 1.230.1, `status` can be set to `Confirmed`. If you want to set `status` to `Enabled`, `period` must be set.
	Status pulumi.StringPtrInput
	// The type of Express Connect circuit. Default value: `VPC`. Valid values: `VPC`.
	Type pulumi.StringPtrInput
}

func (PhysicalConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*physicalConnectionState)(nil)).Elem()
}

type physicalConnectionArgs struct {
	// The access point ID of the Express Connect circuit.
	AccessPointId string `pulumi:"accessPointId"`
	// The maximum bandwidth of the hosted connection.
	Bandwidth *string `pulumi:"bandwidth"`
	// The circuit code of the Express Connect circuit.
	CircuitCode *string `pulumi:"circuitCode"`
	// The description of the Express Connect circuit.
	Description *string `pulumi:"description"`
	// The connectivity provider of the Express Connect circuit. Valid values:
	// - `CT`: China Telecom.
	// - `CU`: China Unicom.
	// - `CM`: China Mobile.
	// - `CO`: Other connectivity providers in the Chinese mainland.
	// - `Equinix`: Equinix.
	// - `Other`: Other connectivity providers outside the Chinese mainland.
	LineOperator string `pulumi:"lineOperator"`
	// The geographical location of the data center.
	PeerLocation *string `pulumi:"peerLocation"`
	// The subscription duration. Valid values:
	// - If `pricingCycle` is set to `Month`. Valid values: `1` to `9`.
	// - If `pricingCycle` is set to `Year`. Valid values: `1` to `5`.
	Period *int `pulumi:"period"`
	// The name of the Express Connect circuit.
	PhysicalConnectionName *string `pulumi:"physicalConnectionName"`
	// The port type of the Express Connect circuit. Valid values:
	// - `100Base-T`: 100 Mbit/s copper Ethernet port.
	// - `1000Base-T`: 1000 Mbit/s copper Ethernet port.
	// - `1000Base-LX`: 1000 Mbit/s single-mode optical port (10 km).
	// - `10GBase-T`: 10000 Mbit/s copper Ethernet port.
	// - `10GBase-LR`: 10000 Mbit/s single-mode optical port (10 km).
	// - `40GBase-LR`: 40000 Mbit/s single-mode optical port.
	// - `100GBase-LR`: 100000 Mbit/s single-mode optical port.
	// > **NOTE:** From version 1.185.0, `portType` can be set to `40GBase-LR`, `100GBase-LR`. From version 1.230.1, `portType` cannot be modified.
	PortType *string `pulumi:"portType"`
	// The billing cycle of the subscription. Default value: `Month`. Valid values: `Month`, `Year`.
	// > **NOTE:** `period` and `pricingCycle` are valid only when `status` is set to `Enabled`.
	PricingCycle *string `pulumi:"pricingCycle"`
	// The ID of the redundant Express Connect circuit. **NOTE:** From version 1.230.1, `redundantPhysicalConnectionId` cannot be modified.
	RedundantPhysicalConnectionId *string `pulumi:"redundantPhysicalConnectionId"`
	// The status of the Express Connect circuit. Valid values: `Confirmed`, `Enabled`, `Canceled`, `Terminated`. **NOTE:** From version 1.230.1, `status` can be set to `Confirmed`. If you want to set `status` to `Enabled`, `period` must be set.
	Status *string `pulumi:"status"`
	// The type of Express Connect circuit. Default value: `VPC`. Valid values: `VPC`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a PhysicalConnection resource.
type PhysicalConnectionArgs struct {
	// The access point ID of the Express Connect circuit.
	AccessPointId pulumi.StringInput
	// The maximum bandwidth of the hosted connection.
	Bandwidth pulumi.StringPtrInput
	// The circuit code of the Express Connect circuit.
	CircuitCode pulumi.StringPtrInput
	// The description of the Express Connect circuit.
	Description pulumi.StringPtrInput
	// The connectivity provider of the Express Connect circuit. Valid values:
	// - `CT`: China Telecom.
	// - `CU`: China Unicom.
	// - `CM`: China Mobile.
	// - `CO`: Other connectivity providers in the Chinese mainland.
	// - `Equinix`: Equinix.
	// - `Other`: Other connectivity providers outside the Chinese mainland.
	LineOperator pulumi.StringInput
	// The geographical location of the data center.
	PeerLocation pulumi.StringPtrInput
	// The subscription duration. Valid values:
	// - If `pricingCycle` is set to `Month`. Valid values: `1` to `9`.
	// - If `pricingCycle` is set to `Year`. Valid values: `1` to `5`.
	Period pulumi.IntPtrInput
	// The name of the Express Connect circuit.
	PhysicalConnectionName pulumi.StringPtrInput
	// The port type of the Express Connect circuit. Valid values:
	// - `100Base-T`: 100 Mbit/s copper Ethernet port.
	// - `1000Base-T`: 1000 Mbit/s copper Ethernet port.
	// - `1000Base-LX`: 1000 Mbit/s single-mode optical port (10 km).
	// - `10GBase-T`: 10000 Mbit/s copper Ethernet port.
	// - `10GBase-LR`: 10000 Mbit/s single-mode optical port (10 km).
	// - `40GBase-LR`: 40000 Mbit/s single-mode optical port.
	// - `100GBase-LR`: 100000 Mbit/s single-mode optical port.
	// > **NOTE:** From version 1.185.0, `portType` can be set to `40GBase-LR`, `100GBase-LR`. From version 1.230.1, `portType` cannot be modified.
	PortType pulumi.StringPtrInput
	// The billing cycle of the subscription. Default value: `Month`. Valid values: `Month`, `Year`.
	// > **NOTE:** `period` and `pricingCycle` are valid only when `status` is set to `Enabled`.
	PricingCycle pulumi.StringPtrInput
	// The ID of the redundant Express Connect circuit. **NOTE:** From version 1.230.1, `redundantPhysicalConnectionId` cannot be modified.
	RedundantPhysicalConnectionId pulumi.StringPtrInput
	// The status of the Express Connect circuit. Valid values: `Confirmed`, `Enabled`, `Canceled`, `Terminated`. **NOTE:** From version 1.230.1, `status` can be set to `Confirmed`. If you want to set `status` to `Enabled`, `period` must be set.
	Status pulumi.StringPtrInput
	// The type of Express Connect circuit. Default value: `VPC`. Valid values: `VPC`.
	Type pulumi.StringPtrInput
}

func (PhysicalConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*physicalConnectionArgs)(nil)).Elem()
}

type PhysicalConnectionInput interface {
	pulumi.Input

	ToPhysicalConnectionOutput() PhysicalConnectionOutput
	ToPhysicalConnectionOutputWithContext(ctx context.Context) PhysicalConnectionOutput
}

func (*PhysicalConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**PhysicalConnection)(nil)).Elem()
}

func (i *PhysicalConnection) ToPhysicalConnectionOutput() PhysicalConnectionOutput {
	return i.ToPhysicalConnectionOutputWithContext(context.Background())
}

func (i *PhysicalConnection) ToPhysicalConnectionOutputWithContext(ctx context.Context) PhysicalConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhysicalConnectionOutput)
}

// PhysicalConnectionArrayInput is an input type that accepts PhysicalConnectionArray and PhysicalConnectionArrayOutput values.
// You can construct a concrete instance of `PhysicalConnectionArrayInput` via:
//
//	PhysicalConnectionArray{ PhysicalConnectionArgs{...} }
type PhysicalConnectionArrayInput interface {
	pulumi.Input

	ToPhysicalConnectionArrayOutput() PhysicalConnectionArrayOutput
	ToPhysicalConnectionArrayOutputWithContext(context.Context) PhysicalConnectionArrayOutput
}

type PhysicalConnectionArray []PhysicalConnectionInput

func (PhysicalConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PhysicalConnection)(nil)).Elem()
}

func (i PhysicalConnectionArray) ToPhysicalConnectionArrayOutput() PhysicalConnectionArrayOutput {
	return i.ToPhysicalConnectionArrayOutputWithContext(context.Background())
}

func (i PhysicalConnectionArray) ToPhysicalConnectionArrayOutputWithContext(ctx context.Context) PhysicalConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhysicalConnectionArrayOutput)
}

// PhysicalConnectionMapInput is an input type that accepts PhysicalConnectionMap and PhysicalConnectionMapOutput values.
// You can construct a concrete instance of `PhysicalConnectionMapInput` via:
//
//	PhysicalConnectionMap{ "key": PhysicalConnectionArgs{...} }
type PhysicalConnectionMapInput interface {
	pulumi.Input

	ToPhysicalConnectionMapOutput() PhysicalConnectionMapOutput
	ToPhysicalConnectionMapOutputWithContext(context.Context) PhysicalConnectionMapOutput
}

type PhysicalConnectionMap map[string]PhysicalConnectionInput

func (PhysicalConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PhysicalConnection)(nil)).Elem()
}

func (i PhysicalConnectionMap) ToPhysicalConnectionMapOutput() PhysicalConnectionMapOutput {
	return i.ToPhysicalConnectionMapOutputWithContext(context.Background())
}

func (i PhysicalConnectionMap) ToPhysicalConnectionMapOutputWithContext(ctx context.Context) PhysicalConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhysicalConnectionMapOutput)
}

type PhysicalConnectionOutput struct{ *pulumi.OutputState }

func (PhysicalConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PhysicalConnection)(nil)).Elem()
}

func (o PhysicalConnectionOutput) ToPhysicalConnectionOutput() PhysicalConnectionOutput {
	return o
}

func (o PhysicalConnectionOutput) ToPhysicalConnectionOutputWithContext(ctx context.Context) PhysicalConnectionOutput {
	return o
}

// The access point ID of the Express Connect circuit.
func (o PhysicalConnectionOutput) AccessPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringOutput { return v.AccessPointId }).(pulumi.StringOutput)
}

// The maximum bandwidth of the hosted connection.
func (o PhysicalConnectionOutput) Bandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringOutput { return v.Bandwidth }).(pulumi.StringOutput)
}

// The circuit code of the Express Connect circuit.
func (o PhysicalConnectionOutput) CircuitCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringPtrOutput { return v.CircuitCode }).(pulumi.StringPtrOutput)
}

// The description of the Express Connect circuit.
func (o PhysicalConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The connectivity provider of the Express Connect circuit. Valid values:
// - `CT`: China Telecom.
// - `CU`: China Unicom.
// - `CM`: China Mobile.
// - `CO`: Other connectivity providers in the Chinese mainland.
// - `Equinix`: Equinix.
// - `Other`: Other connectivity providers outside the Chinese mainland.
func (o PhysicalConnectionOutput) LineOperator() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringOutput { return v.LineOperator }).(pulumi.StringOutput)
}

// The ID of the order that is placed. **Note:** `orderId` takes effect only if `status` is set to `Enabled`.
func (o PhysicalConnectionOutput) OrderId() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringOutput { return v.OrderId }).(pulumi.StringOutput)
}

// The geographical location of the data center.
func (o PhysicalConnectionOutput) PeerLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringOutput { return v.PeerLocation }).(pulumi.StringOutput)
}

// The subscription duration. Valid values:
// - If `pricingCycle` is set to `Month`. Valid values: `1` to `9`.
// - If `pricingCycle` is set to `Year`. Valid values: `1` to `5`.
func (o PhysicalConnectionOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// The name of the Express Connect circuit.
func (o PhysicalConnectionOutput) PhysicalConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringPtrOutput { return v.PhysicalConnectionName }).(pulumi.StringPtrOutput)
}

// The port type of the Express Connect circuit. Valid values:
// - `100Base-T`: 100 Mbit/s copper Ethernet port.
// - `1000Base-T`: 1000 Mbit/s copper Ethernet port.
// - `1000Base-LX`: 1000 Mbit/s single-mode optical port (10 km).
// - `10GBase-T`: 10000 Mbit/s copper Ethernet port.
// - `10GBase-LR`: 10000 Mbit/s single-mode optical port (10 km).
// - `40GBase-LR`: 40000 Mbit/s single-mode optical port.
// - `100GBase-LR`: 100000 Mbit/s single-mode optical port.
// > **NOTE:** From version 1.185.0, `portType` can be set to `40GBase-LR`, `100GBase-LR`. From version 1.230.1, `portType` cannot be modified.
func (o PhysicalConnectionOutput) PortType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringPtrOutput { return v.PortType }).(pulumi.StringPtrOutput)
}

// The billing cycle of the subscription. Default value: `Month`. Valid values: `Month`, `Year`.
// > **NOTE:** `period` and `pricingCycle` are valid only when `status` is set to `Enabled`.
func (o PhysicalConnectionOutput) PricingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringPtrOutput { return v.PricingCycle }).(pulumi.StringPtrOutput)
}

// The ID of the redundant Express Connect circuit. **NOTE:** From version 1.230.1, `redundantPhysicalConnectionId` cannot be modified.
func (o PhysicalConnectionOutput) RedundantPhysicalConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringPtrOutput { return v.RedundantPhysicalConnectionId }).(pulumi.StringPtrOutput)
}

// The status of the Express Connect circuit. Valid values: `Confirmed`, `Enabled`, `Canceled`, `Terminated`. **NOTE:** From version 1.230.1, `status` can be set to `Confirmed`. If you want to set `status` to `Enabled`, `period` must be set.
func (o PhysicalConnectionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The type of Express Connect circuit. Default value: `VPC`. Valid values: `VPC`.
func (o PhysicalConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type PhysicalConnectionArrayOutput struct{ *pulumi.OutputState }

func (PhysicalConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PhysicalConnection)(nil)).Elem()
}

func (o PhysicalConnectionArrayOutput) ToPhysicalConnectionArrayOutput() PhysicalConnectionArrayOutput {
	return o
}

func (o PhysicalConnectionArrayOutput) ToPhysicalConnectionArrayOutputWithContext(ctx context.Context) PhysicalConnectionArrayOutput {
	return o
}

func (o PhysicalConnectionArrayOutput) Index(i pulumi.IntInput) PhysicalConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PhysicalConnection {
		return vs[0].([]*PhysicalConnection)[vs[1].(int)]
	}).(PhysicalConnectionOutput)
}

type PhysicalConnectionMapOutput struct{ *pulumi.OutputState }

func (PhysicalConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PhysicalConnection)(nil)).Elem()
}

func (o PhysicalConnectionMapOutput) ToPhysicalConnectionMapOutput() PhysicalConnectionMapOutput {
	return o
}

func (o PhysicalConnectionMapOutput) ToPhysicalConnectionMapOutputWithContext(ctx context.Context) PhysicalConnectionMapOutput {
	return o
}

func (o PhysicalConnectionMapOutput) MapIndex(k pulumi.StringInput) PhysicalConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PhysicalConnection {
		return vs[0].(map[string]*PhysicalConnection)[vs[1].(string)]
	}).(PhysicalConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PhysicalConnectionInput)(nil)).Elem(), &PhysicalConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhysicalConnectionArrayInput)(nil)).Elem(), PhysicalConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhysicalConnectionMapInput)(nil)).Elem(), PhysicalConnectionMap{})
	pulumi.RegisterOutputType(PhysicalConnectionOutput{})
	pulumi.RegisterOutputType(PhysicalConnectionArrayOutput{})
	pulumi.RegisterOutputType(PhysicalConnectionMapOutput{})
}
