// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package expressconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Express Connect Virtual Physical Connection resource.
//
// For information about Express Connect Virtual Physical Connection and how to use it, see [What is Virtual Physical Connection](https://www.alibabacloud.com/help/en/express-connect/latest/createvirtualphysicalconnection#doc-api-Vpc-CreateVirtualPhysicalConnection).
//
// > **NOTE:** Available in v1.196.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/expressconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultPhysicalConnections, err := expressconnect.GetPhysicalConnections(ctx, &expressconnect.GetPhysicalConnectionsArgs{
//				NameRegex: pulumi.StringRef("^preserved-NODELETING"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = expressconnect.NewVirtualPhysicalConnection(ctx, "defaultVirtualPhysicalConnection", &expressconnect.VirtualPhysicalConnectionArgs{
//				VirtualPhysicalConnectionName: pulumi.String("amp_resource_test"),
//				Description:                   pulumi.String("amp_resource_test"),
//				OrderMode:                     pulumi.String("PayByPhysicalConnectionOwner"),
//				ParentPhysicalConnectionId:    *pulumi.String(defaultPhysicalConnections.Ids[0]),
//				Spec:                          pulumi.String("50M"),
//				VlanId:                        pulumi.Int(789),
//				VpconnAliUid:                  pulumi.String("1234567890"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Express Connect Virtual Physical Connection can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:expressconnect/virtualPhysicalConnection:VirtualPhysicalConnection example <id>
//
// ```
type VirtualPhysicalConnection struct {
	pulumi.CustomResourceState

	// The ID of the access point of the physical connection.
	AccessPointId pulumi.StringOutput `pulumi:"accessPointId"`
	// The physical location where the physical connection access device is located.
	AdLocation pulumi.StringOutput `pulumi:"adLocation"`
	// The bandwidth of the physical connection. Unit: Mbps.
	Bandwidth pulumi.StringOutput `pulumi:"bandwidth"`
	// The commercial status of the physical line. Value:-**Normal**: activated.-**Financialized**: Arrears locked.-**SecurityLocked**: locked for security reasons.
	BusinessStatus pulumi.StringOutput `pulumi:"businessStatus"`
	// The circuit code provided by the operator for the physical connection.
	CircuitCode pulumi.StringOutput `pulumi:"circuitCode"`
	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the physical connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies whether to precheck the API request. Valid values: `true` and `false`.
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// The opening time of the physical connection.
	EnabledTime pulumi.StringOutput `pulumi:"enabledTime"`
	// The expiration time of the shared line.Time is expressed according to ISO8601 standard and UTC time is used. The format is: YYYY-MM-DDThh:mm:ssZ.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// The estimated bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
	ExpectSpec pulumi.StringPtrOutput `pulumi:"expectSpec"`
	// Operators that provide access to physical lines. Value:-**CT**: China Telecom.-**CU**: China Unicom.-**CM**: China Mobile.-**CO**: China Other.-**Equinix**:Equinix.-**Other**: Other abroad.
	LineOperator pulumi.StringOutput `pulumi:"lineOperator"`
	// The state of LOA. Value:-**Applying**:LOA application.-**Accept**:LOA application passed.-**Available**:LOA is Available.-**Rejected**:LOA application Rejected.-**Completing**: The dedicated line is under construction.-**Complete**: The construction of the dedicated line is completed.-**Deleted**:LOA has been Deleted.
	LoaStatus pulumi.StringOutput `pulumi:"loaStatus"`
	// The payment method of shared dedicated line. Value:
	// - **PayByPhysicalConnectionOwner**: indicates that the owner of the physical line associated with the shared line pays.
	// - **PayByVirtualPhysicalConnectionOwner**: indicates that the owner of the shared line pays.
	OrderMode pulumi.StringOutput `pulumi:"orderMode"`
	// The ID of the Alibaba Cloud account (primary account) to which the physical connection belongs.
	ParentPhysicalConnectionAliUid pulumi.StringOutput `pulumi:"parentPhysicalConnectionAliUid"`
	// The ID of the instance of the physical connection.
	ParentPhysicalConnectionId pulumi.StringOutput `pulumi:"parentPhysicalConnectionId"`
	// The geographic location of the local data center.
	PeerLocation pulumi.StringOutput `pulumi:"peerLocation"`
	// The port number of the physical connection device.
	PortNumber pulumi.StringOutput `pulumi:"portNumber"`
	// Physical connection port type. Value:-**100Base-T**: 100 megabytes port.-**1000Base-T**: Gigabit port.-**1000Base-LX**: Gigabit single mode optical port (10km).-**10GBase-T**: 10 Gigabit port.-**10GBase-LR**: 10 Gigabit single mode optical port (10km).-**40GBase-LR**: 40 megabytes single-mode optical port.-**100GBase-LR**: 100,000 megabytes single-mode optical port.
	PortType pulumi.StringOutput `pulumi:"portType"`
	// The ID of the redundant physical connection.
	RedundantPhysicalConnectionId pulumi.StringOutput `pulumi:"redundantPhysicalConnectionId"`
	// The resource group id.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
	Spec pulumi.StringOutput `pulumi:"spec"`
	// The status of the resource
	Status pulumi.StringOutput `pulumi:"status"`
	// The name of the physical connection.
	VirtualPhysicalConnectionName pulumi.StringPtrOutput `pulumi:"virtualPhysicalConnectionName"`
	// The business status of the shared line. Value:-**Confirmed**: The shared line has been Confirmed to receive.-**UnConfirmed**: The shared line has not been confirmed to be received.-**Deleted**: The shared line has been Deleted.
	VirtualPhysicalConnectionStatus pulumi.StringOutput `pulumi:"virtualPhysicalConnectionStatus"`
	// The VLAN ID of the shared leased line. Valid values: `0` to `2999`.
	VlanId pulumi.IntOutput `pulumi:"vlanId"`
	// The ID of the Alibaba Cloud account (primary account) of the owner of the shared line.
	VpconnAliUid pulumi.StringOutput `pulumi:"vpconnAliUid"`
}

// NewVirtualPhysicalConnection registers a new resource with the given unique name, arguments, and options.
func NewVirtualPhysicalConnection(ctx *pulumi.Context,
	name string, args *VirtualPhysicalConnectionArgs, opts ...pulumi.ResourceOption) (*VirtualPhysicalConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrderMode == nil {
		return nil, errors.New("invalid value for required argument 'OrderMode'")
	}
	if args.ParentPhysicalConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ParentPhysicalConnectionId'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	if args.VlanId == nil {
		return nil, errors.New("invalid value for required argument 'VlanId'")
	}
	if args.VpconnAliUid == nil {
		return nil, errors.New("invalid value for required argument 'VpconnAliUid'")
	}
	var resource VirtualPhysicalConnection
	err := ctx.RegisterResource("alicloud:expressconnect/virtualPhysicalConnection:VirtualPhysicalConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualPhysicalConnection gets an existing VirtualPhysicalConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualPhysicalConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualPhysicalConnectionState, opts ...pulumi.ResourceOption) (*VirtualPhysicalConnection, error) {
	var resource VirtualPhysicalConnection
	err := ctx.ReadResource("alicloud:expressconnect/virtualPhysicalConnection:VirtualPhysicalConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualPhysicalConnection resources.
type virtualPhysicalConnectionState struct {
	// The ID of the access point of the physical connection.
	AccessPointId *string `pulumi:"accessPointId"`
	// The physical location where the physical connection access device is located.
	AdLocation *string `pulumi:"adLocation"`
	// The bandwidth of the physical connection. Unit: Mbps.
	Bandwidth *string `pulumi:"bandwidth"`
	// The commercial status of the physical line. Value:-**Normal**: activated.-**Financialized**: Arrears locked.-**SecurityLocked**: locked for security reasons.
	BusinessStatus *string `pulumi:"businessStatus"`
	// The circuit code provided by the operator for the physical connection.
	CircuitCode *string `pulumi:"circuitCode"`
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// The description of the physical connection.
	Description *string `pulumi:"description"`
	// Specifies whether to precheck the API request. Valid values: `true` and `false`.
	DryRun *bool `pulumi:"dryRun"`
	// The opening time of the physical connection.
	EnabledTime *string `pulumi:"enabledTime"`
	// The expiration time of the shared line.Time is expressed according to ISO8601 standard and UTC time is used. The format is: YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `pulumi:"endTime"`
	// The estimated bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
	ExpectSpec *string `pulumi:"expectSpec"`
	// Operators that provide access to physical lines. Value:-**CT**: China Telecom.-**CU**: China Unicom.-**CM**: China Mobile.-**CO**: China Other.-**Equinix**:Equinix.-**Other**: Other abroad.
	LineOperator *string `pulumi:"lineOperator"`
	// The state of LOA. Value:-**Applying**:LOA application.-**Accept**:LOA application passed.-**Available**:LOA is Available.-**Rejected**:LOA application Rejected.-**Completing**: The dedicated line is under construction.-**Complete**: The construction of the dedicated line is completed.-**Deleted**:LOA has been Deleted.
	LoaStatus *string `pulumi:"loaStatus"`
	// The payment method of shared dedicated line. Value:
	// - **PayByPhysicalConnectionOwner**: indicates that the owner of the physical line associated with the shared line pays.
	// - **PayByVirtualPhysicalConnectionOwner**: indicates that the owner of the shared line pays.
	OrderMode *string `pulumi:"orderMode"`
	// The ID of the Alibaba Cloud account (primary account) to which the physical connection belongs.
	ParentPhysicalConnectionAliUid *string `pulumi:"parentPhysicalConnectionAliUid"`
	// The ID of the instance of the physical connection.
	ParentPhysicalConnectionId *string `pulumi:"parentPhysicalConnectionId"`
	// The geographic location of the local data center.
	PeerLocation *string `pulumi:"peerLocation"`
	// The port number of the physical connection device.
	PortNumber *string `pulumi:"portNumber"`
	// Physical connection port type. Value:-**100Base-T**: 100 megabytes port.-**1000Base-T**: Gigabit port.-**1000Base-LX**: Gigabit single mode optical port (10km).-**10GBase-T**: 10 Gigabit port.-**10GBase-LR**: 10 Gigabit single mode optical port (10km).-**40GBase-LR**: 40 megabytes single-mode optical port.-**100GBase-LR**: 100,000 megabytes single-mode optical port.
	PortType *string `pulumi:"portType"`
	// The ID of the redundant physical connection.
	RedundantPhysicalConnectionId *string `pulumi:"redundantPhysicalConnectionId"`
	// The resource group id.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
	Spec *string `pulumi:"spec"`
	// The status of the resource
	Status *string `pulumi:"status"`
	// The name of the physical connection.
	VirtualPhysicalConnectionName *string `pulumi:"virtualPhysicalConnectionName"`
	// The business status of the shared line. Value:-**Confirmed**: The shared line has been Confirmed to receive.-**UnConfirmed**: The shared line has not been confirmed to be received.-**Deleted**: The shared line has been Deleted.
	VirtualPhysicalConnectionStatus *string `pulumi:"virtualPhysicalConnectionStatus"`
	// The VLAN ID of the shared leased line. Valid values: `0` to `2999`.
	VlanId *int `pulumi:"vlanId"`
	// The ID of the Alibaba Cloud account (primary account) of the owner of the shared line.
	VpconnAliUid *string `pulumi:"vpconnAliUid"`
}

type VirtualPhysicalConnectionState struct {
	// The ID of the access point of the physical connection.
	AccessPointId pulumi.StringPtrInput
	// The physical location where the physical connection access device is located.
	AdLocation pulumi.StringPtrInput
	// The bandwidth of the physical connection. Unit: Mbps.
	Bandwidth pulumi.StringPtrInput
	// The commercial status of the physical line. Value:-**Normal**: activated.-**Financialized**: Arrears locked.-**SecurityLocked**: locked for security reasons.
	BusinessStatus pulumi.StringPtrInput
	// The circuit code provided by the operator for the physical connection.
	CircuitCode pulumi.StringPtrInput
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// The description of the physical connection.
	Description pulumi.StringPtrInput
	// Specifies whether to precheck the API request. Valid values: `true` and `false`.
	DryRun pulumi.BoolPtrInput
	// The opening time of the physical connection.
	EnabledTime pulumi.StringPtrInput
	// The expiration time of the shared line.Time is expressed according to ISO8601 standard and UTC time is used. The format is: YYYY-MM-DDThh:mm:ssZ.
	EndTime pulumi.StringPtrInput
	// The estimated bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
	ExpectSpec pulumi.StringPtrInput
	// Operators that provide access to physical lines. Value:-**CT**: China Telecom.-**CU**: China Unicom.-**CM**: China Mobile.-**CO**: China Other.-**Equinix**:Equinix.-**Other**: Other abroad.
	LineOperator pulumi.StringPtrInput
	// The state of LOA. Value:-**Applying**:LOA application.-**Accept**:LOA application passed.-**Available**:LOA is Available.-**Rejected**:LOA application Rejected.-**Completing**: The dedicated line is under construction.-**Complete**: The construction of the dedicated line is completed.-**Deleted**:LOA has been Deleted.
	LoaStatus pulumi.StringPtrInput
	// The payment method of shared dedicated line. Value:
	// - **PayByPhysicalConnectionOwner**: indicates that the owner of the physical line associated with the shared line pays.
	// - **PayByVirtualPhysicalConnectionOwner**: indicates that the owner of the shared line pays.
	OrderMode pulumi.StringPtrInput
	// The ID of the Alibaba Cloud account (primary account) to which the physical connection belongs.
	ParentPhysicalConnectionAliUid pulumi.StringPtrInput
	// The ID of the instance of the physical connection.
	ParentPhysicalConnectionId pulumi.StringPtrInput
	// The geographic location of the local data center.
	PeerLocation pulumi.StringPtrInput
	// The port number of the physical connection device.
	PortNumber pulumi.StringPtrInput
	// Physical connection port type. Value:-**100Base-T**: 100 megabytes port.-**1000Base-T**: Gigabit port.-**1000Base-LX**: Gigabit single mode optical port (10km).-**10GBase-T**: 10 Gigabit port.-**10GBase-LR**: 10 Gigabit single mode optical port (10km).-**40GBase-LR**: 40 megabytes single-mode optical port.-**100GBase-LR**: 100,000 megabytes single-mode optical port.
	PortType pulumi.StringPtrInput
	// The ID of the redundant physical connection.
	RedundantPhysicalConnectionId pulumi.StringPtrInput
	// The resource group id.
	ResourceGroupId pulumi.StringPtrInput
	// The bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
	Spec pulumi.StringPtrInput
	// The status of the resource
	Status pulumi.StringPtrInput
	// The name of the physical connection.
	VirtualPhysicalConnectionName pulumi.StringPtrInput
	// The business status of the shared line. Value:-**Confirmed**: The shared line has been Confirmed to receive.-**UnConfirmed**: The shared line has not been confirmed to be received.-**Deleted**: The shared line has been Deleted.
	VirtualPhysicalConnectionStatus pulumi.StringPtrInput
	// The VLAN ID of the shared leased line. Valid values: `0` to `2999`.
	VlanId pulumi.IntPtrInput
	// The ID of the Alibaba Cloud account (primary account) of the owner of the shared line.
	VpconnAliUid pulumi.StringPtrInput
}

func (VirtualPhysicalConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualPhysicalConnectionState)(nil)).Elem()
}

type virtualPhysicalConnectionArgs struct {
	// The description of the physical connection.
	Description *string `pulumi:"description"`
	// Specifies whether to precheck the API request. Valid values: `true` and `false`.
	DryRun *bool `pulumi:"dryRun"`
	// The estimated bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
	ExpectSpec *string `pulumi:"expectSpec"`
	// The payment method of shared dedicated line. Value:
	// - **PayByPhysicalConnectionOwner**: indicates that the owner of the physical line associated with the shared line pays.
	// - **PayByVirtualPhysicalConnectionOwner**: indicates that the owner of the shared line pays.
	OrderMode string `pulumi:"orderMode"`
	// The ID of the instance of the physical connection.
	ParentPhysicalConnectionId string `pulumi:"parentPhysicalConnectionId"`
	// The resource group id.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
	Spec string `pulumi:"spec"`
	// The name of the physical connection.
	VirtualPhysicalConnectionName *string `pulumi:"virtualPhysicalConnectionName"`
	// The VLAN ID of the shared leased line. Valid values: `0` to `2999`.
	VlanId int `pulumi:"vlanId"`
	// The ID of the Alibaba Cloud account (primary account) of the owner of the shared line.
	VpconnAliUid string `pulumi:"vpconnAliUid"`
}

// The set of arguments for constructing a VirtualPhysicalConnection resource.
type VirtualPhysicalConnectionArgs struct {
	// The description of the physical connection.
	Description pulumi.StringPtrInput
	// Specifies whether to precheck the API request. Valid values: `true` and `false`.
	DryRun pulumi.BoolPtrInput
	// The estimated bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
	ExpectSpec pulumi.StringPtrInput
	// The payment method of shared dedicated line. Value:
	// - **PayByPhysicalConnectionOwner**: indicates that the owner of the physical line associated with the shared line pays.
	// - **PayByVirtualPhysicalConnectionOwner**: indicates that the owner of the shared line pays.
	OrderMode pulumi.StringInput
	// The ID of the instance of the physical connection.
	ParentPhysicalConnectionId pulumi.StringInput
	// The resource group id.
	ResourceGroupId pulumi.StringPtrInput
	// The bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
	Spec pulumi.StringInput
	// The name of the physical connection.
	VirtualPhysicalConnectionName pulumi.StringPtrInput
	// The VLAN ID of the shared leased line. Valid values: `0` to `2999`.
	VlanId pulumi.IntInput
	// The ID of the Alibaba Cloud account (primary account) of the owner of the shared line.
	VpconnAliUid pulumi.StringInput
}

func (VirtualPhysicalConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualPhysicalConnectionArgs)(nil)).Elem()
}

type VirtualPhysicalConnectionInput interface {
	pulumi.Input

	ToVirtualPhysicalConnectionOutput() VirtualPhysicalConnectionOutput
	ToVirtualPhysicalConnectionOutputWithContext(ctx context.Context) VirtualPhysicalConnectionOutput
}

func (*VirtualPhysicalConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualPhysicalConnection)(nil)).Elem()
}

func (i *VirtualPhysicalConnection) ToVirtualPhysicalConnectionOutput() VirtualPhysicalConnectionOutput {
	return i.ToVirtualPhysicalConnectionOutputWithContext(context.Background())
}

func (i *VirtualPhysicalConnection) ToVirtualPhysicalConnectionOutputWithContext(ctx context.Context) VirtualPhysicalConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualPhysicalConnectionOutput)
}

// VirtualPhysicalConnectionArrayInput is an input type that accepts VirtualPhysicalConnectionArray and VirtualPhysicalConnectionArrayOutput values.
// You can construct a concrete instance of `VirtualPhysicalConnectionArrayInput` via:
//
//	VirtualPhysicalConnectionArray{ VirtualPhysicalConnectionArgs{...} }
type VirtualPhysicalConnectionArrayInput interface {
	pulumi.Input

	ToVirtualPhysicalConnectionArrayOutput() VirtualPhysicalConnectionArrayOutput
	ToVirtualPhysicalConnectionArrayOutputWithContext(context.Context) VirtualPhysicalConnectionArrayOutput
}

type VirtualPhysicalConnectionArray []VirtualPhysicalConnectionInput

func (VirtualPhysicalConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualPhysicalConnection)(nil)).Elem()
}

func (i VirtualPhysicalConnectionArray) ToVirtualPhysicalConnectionArrayOutput() VirtualPhysicalConnectionArrayOutput {
	return i.ToVirtualPhysicalConnectionArrayOutputWithContext(context.Background())
}

func (i VirtualPhysicalConnectionArray) ToVirtualPhysicalConnectionArrayOutputWithContext(ctx context.Context) VirtualPhysicalConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualPhysicalConnectionArrayOutput)
}

// VirtualPhysicalConnectionMapInput is an input type that accepts VirtualPhysicalConnectionMap and VirtualPhysicalConnectionMapOutput values.
// You can construct a concrete instance of `VirtualPhysicalConnectionMapInput` via:
//
//	VirtualPhysicalConnectionMap{ "key": VirtualPhysicalConnectionArgs{...} }
type VirtualPhysicalConnectionMapInput interface {
	pulumi.Input

	ToVirtualPhysicalConnectionMapOutput() VirtualPhysicalConnectionMapOutput
	ToVirtualPhysicalConnectionMapOutputWithContext(context.Context) VirtualPhysicalConnectionMapOutput
}

type VirtualPhysicalConnectionMap map[string]VirtualPhysicalConnectionInput

func (VirtualPhysicalConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualPhysicalConnection)(nil)).Elem()
}

func (i VirtualPhysicalConnectionMap) ToVirtualPhysicalConnectionMapOutput() VirtualPhysicalConnectionMapOutput {
	return i.ToVirtualPhysicalConnectionMapOutputWithContext(context.Background())
}

func (i VirtualPhysicalConnectionMap) ToVirtualPhysicalConnectionMapOutputWithContext(ctx context.Context) VirtualPhysicalConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualPhysicalConnectionMapOutput)
}

type VirtualPhysicalConnectionOutput struct{ *pulumi.OutputState }

func (VirtualPhysicalConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualPhysicalConnection)(nil)).Elem()
}

func (o VirtualPhysicalConnectionOutput) ToVirtualPhysicalConnectionOutput() VirtualPhysicalConnectionOutput {
	return o
}

func (o VirtualPhysicalConnectionOutput) ToVirtualPhysicalConnectionOutputWithContext(ctx context.Context) VirtualPhysicalConnectionOutput {
	return o
}

// The ID of the access point of the physical connection.
func (o VirtualPhysicalConnectionOutput) AccessPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.AccessPointId }).(pulumi.StringOutput)
}

// The physical location where the physical connection access device is located.
func (o VirtualPhysicalConnectionOutput) AdLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.AdLocation }).(pulumi.StringOutput)
}

// The bandwidth of the physical connection. Unit: Mbps.
func (o VirtualPhysicalConnectionOutput) Bandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.Bandwidth }).(pulumi.StringOutput)
}

// The commercial status of the physical line. Value:-**Normal**: activated.-**Financialized**: Arrears locked.-**SecurityLocked**: locked for security reasons.
func (o VirtualPhysicalConnectionOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The circuit code provided by the operator for the physical connection.
func (o VirtualPhysicalConnectionOutput) CircuitCode() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.CircuitCode }).(pulumi.StringOutput)
}

// The creation time of the resource
func (o VirtualPhysicalConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the physical connection.
func (o VirtualPhysicalConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether to precheck the API request. Valid values: `true` and `false`.
func (o VirtualPhysicalConnectionOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// The opening time of the physical connection.
func (o VirtualPhysicalConnectionOutput) EnabledTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.EnabledTime }).(pulumi.StringOutput)
}

// The expiration time of the shared line.Time is expressed according to ISO8601 standard and UTC time is used. The format is: YYYY-MM-DDThh:mm:ssZ.
func (o VirtualPhysicalConnectionOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// The estimated bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
func (o VirtualPhysicalConnectionOutput) ExpectSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringPtrOutput { return v.ExpectSpec }).(pulumi.StringPtrOutput)
}

// Operators that provide access to physical lines. Value:-**CT**: China Telecom.-**CU**: China Unicom.-**CM**: China Mobile.-**CO**: China Other.-**Equinix**:Equinix.-**Other**: Other abroad.
func (o VirtualPhysicalConnectionOutput) LineOperator() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.LineOperator }).(pulumi.StringOutput)
}

// The state of LOA. Value:-**Applying**:LOA application.-**Accept**:LOA application passed.-**Available**:LOA is Available.-**Rejected**:LOA application Rejected.-**Completing**: The dedicated line is under construction.-**Complete**: The construction of the dedicated line is completed.-**Deleted**:LOA has been Deleted.
func (o VirtualPhysicalConnectionOutput) LoaStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.LoaStatus }).(pulumi.StringOutput)
}

// The payment method of shared dedicated line. Value:
// - **PayByPhysicalConnectionOwner**: indicates that the owner of the physical line associated with the shared line pays.
// - **PayByVirtualPhysicalConnectionOwner**: indicates that the owner of the shared line pays.
func (o VirtualPhysicalConnectionOutput) OrderMode() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.OrderMode }).(pulumi.StringOutput)
}

// The ID of the Alibaba Cloud account (primary account) to which the physical connection belongs.
func (o VirtualPhysicalConnectionOutput) ParentPhysicalConnectionAliUid() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.ParentPhysicalConnectionAliUid }).(pulumi.StringOutput)
}

// The ID of the instance of the physical connection.
func (o VirtualPhysicalConnectionOutput) ParentPhysicalConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.ParentPhysicalConnectionId }).(pulumi.StringOutput)
}

// The geographic location of the local data center.
func (o VirtualPhysicalConnectionOutput) PeerLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.PeerLocation }).(pulumi.StringOutput)
}

// The port number of the physical connection device.
func (o VirtualPhysicalConnectionOutput) PortNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.PortNumber }).(pulumi.StringOutput)
}

// Physical connection port type. Value:-**100Base-T**: 100 megabytes port.-**1000Base-T**: Gigabit port.-**1000Base-LX**: Gigabit single mode optical port (10km).-**10GBase-T**: 10 Gigabit port.-**10GBase-LR**: 10 Gigabit single mode optical port (10km).-**40GBase-LR**: 40 megabytes single-mode optical port.-**100GBase-LR**: 100,000 megabytes single-mode optical port.
func (o VirtualPhysicalConnectionOutput) PortType() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.PortType }).(pulumi.StringOutput)
}

// The ID of the redundant physical connection.
func (o VirtualPhysicalConnectionOutput) RedundantPhysicalConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.RedundantPhysicalConnectionId }).(pulumi.StringOutput)
}

// The resource group id.
func (o VirtualPhysicalConnectionOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
func (o VirtualPhysicalConnectionOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.Spec }).(pulumi.StringOutput)
}

// The status of the resource
func (o VirtualPhysicalConnectionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The name of the physical connection.
func (o VirtualPhysicalConnectionOutput) VirtualPhysicalConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringPtrOutput { return v.VirtualPhysicalConnectionName }).(pulumi.StringPtrOutput)
}

// The business status of the shared line. Value:-**Confirmed**: The shared line has been Confirmed to receive.-**UnConfirmed**: The shared line has not been confirmed to be received.-**Deleted**: The shared line has been Deleted.
func (o VirtualPhysicalConnectionOutput) VirtualPhysicalConnectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.VirtualPhysicalConnectionStatus }).(pulumi.StringOutput)
}

// The VLAN ID of the shared leased line. Valid values: `0` to `2999`.
func (o VirtualPhysicalConnectionOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.IntOutput { return v.VlanId }).(pulumi.IntOutput)
}

// The ID of the Alibaba Cloud account (primary account) of the owner of the shared line.
func (o VirtualPhysicalConnectionOutput) VpconnAliUid() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualPhysicalConnection) pulumi.StringOutput { return v.VpconnAliUid }).(pulumi.StringOutput)
}

type VirtualPhysicalConnectionArrayOutput struct{ *pulumi.OutputState }

func (VirtualPhysicalConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualPhysicalConnection)(nil)).Elem()
}

func (o VirtualPhysicalConnectionArrayOutput) ToVirtualPhysicalConnectionArrayOutput() VirtualPhysicalConnectionArrayOutput {
	return o
}

func (o VirtualPhysicalConnectionArrayOutput) ToVirtualPhysicalConnectionArrayOutputWithContext(ctx context.Context) VirtualPhysicalConnectionArrayOutput {
	return o
}

func (o VirtualPhysicalConnectionArrayOutput) Index(i pulumi.IntInput) VirtualPhysicalConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualPhysicalConnection {
		return vs[0].([]*VirtualPhysicalConnection)[vs[1].(int)]
	}).(VirtualPhysicalConnectionOutput)
}

type VirtualPhysicalConnectionMapOutput struct{ *pulumi.OutputState }

func (VirtualPhysicalConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualPhysicalConnection)(nil)).Elem()
}

func (o VirtualPhysicalConnectionMapOutput) ToVirtualPhysicalConnectionMapOutput() VirtualPhysicalConnectionMapOutput {
	return o
}

func (o VirtualPhysicalConnectionMapOutput) ToVirtualPhysicalConnectionMapOutputWithContext(ctx context.Context) VirtualPhysicalConnectionMapOutput {
	return o
}

func (o VirtualPhysicalConnectionMapOutput) MapIndex(k pulumi.StringInput) VirtualPhysicalConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualPhysicalConnection {
		return vs[0].(map[string]*VirtualPhysicalConnection)[vs[1].(string)]
	}).(VirtualPhysicalConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualPhysicalConnectionInput)(nil)).Elem(), &VirtualPhysicalConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualPhysicalConnectionArrayInput)(nil)).Elem(), VirtualPhysicalConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualPhysicalConnectionMapInput)(nil)).Elem(), VirtualPhysicalConnectionMap{})
	pulumi.RegisterOutputType(VirtualPhysicalConnectionOutput{})
	pulumi.RegisterOutputType(VirtualPhysicalConnectionArrayOutput{})
	pulumi.RegisterOutputType(VirtualPhysicalConnectionMapOutput{})
}
