// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package expressconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Express Connect Router Express Connect Router Tr Association resource. Leased line gateway and TR binding relationship object.
//
// For information about Express Connect Router Express Connect Router Tr Association and how to use it, see [What is Express Connect Router Tr Association](https://next.api.alibabacloud.com/api/ExpressConnectRouter/2023-09-01/CreateExpressConnectRouterAssociation).
//
// > **NOTE:** Available since v1.224.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cen"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/expressconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			alowprefix1 := "10.0.0.0/24"
//			if param := cfg.Get("alowprefix1"); param != "" {
//				alowprefix1 = param
//			}
//			allowprefix2 := "10.0.1.0/24"
//			if param := cfg.Get("allowprefix2"); param != "" {
//				allowprefix2 = param
//			}
//			allowprefix3 := "10.0.2.0/24"
//			if param := cfg.Get("allowprefix3"); param != "" {
//				allowprefix3 = param
//			}
//			allowprefix4 := "10.0.3.0/24"
//			if param := cfg.Get("allowprefix4"); param != "" {
//				allowprefix4 = param
//			}
//			asn := "4200001003"
//			if param := cfg.Get("asn"); param != "" {
//				asn = param
//			}
//			defaultpX0KlC, err := expressconnect.NewRouterExpressConnectRouter(ctx, "defaultpX0KlC", &expressconnect.RouterExpressConnectRouterArgs{
//				AlibabaSideAsn: pulumi.String(asn),
//			})
//			if err != nil {
//				return err
//			}
//			default418DC9, err := cen.NewInstance(ctx, "default418DC9", &cen.InstanceArgs{
//				CenInstanceName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultRYcjsc, err := cen.NewTransitRouter(ctx, "defaultRYcjsc", &cen.TransitRouterArgs{
//				CenId: default418DC9.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			current, err := alicloud.GetAccount(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = expressconnect.NewRouterTrAssociation(ctx, "default", &expressconnect.RouterTrAssociationArgs{
//				EcrId:                defaultpX0KlC.ID(),
//				CenId:                default418DC9.ID(),
//				TransitRouterOwnerId: pulumi.String(current.Id),
//				AllowedPrefixes: pulumi.StringArray{
//					pulumi.String(alowprefix1),
//					pulumi.String(allowprefix3),
//					pulumi.String(allowprefix2),
//				},
//				TransitRouterId:     defaultRYcjsc.TransitRouterId,
//				AssociationRegionId: pulumi.String("cn-hangzhou"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Express Connect Router Express Connect Router Tr Association can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:expressconnect/routerTrAssociation:RouterTrAssociation example <ecr_id>:<association_id>:<transit_router_id>
// ```
type RouterTrAssociation struct {
	pulumi.CustomResourceState

	// List of allowed route prefixes.
	AllowedPrefixes pulumi.StringArrayOutput `pulumi:"allowedPrefixes"`
	// The first ID of the resource.
	AssociationId pulumi.StringOutput `pulumi:"associationId"`
	// The region to which the VPC or TR belongs.
	AssociationRegionId pulumi.StringOutput `pulumi:"associationRegionId"`
	// The ID of the CEN instance.
	CenId pulumi.StringPtrOutput `pulumi:"cenId"`
	// The creation time of the resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The ID of the leased line gateway instance.
	EcrId pulumi.StringOutput `pulumi:"ecrId"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
	// The ID of the forwarding router instance.
	TransitRouterId pulumi.StringOutput `pulumi:"transitRouterId"`
	// The ID of the Alibaba Cloud account to which the forwarding router belongs.
	TransitRouterOwnerId pulumi.IntPtrOutput `pulumi:"transitRouterOwnerId"`
}

// NewRouterTrAssociation registers a new resource with the given unique name, arguments, and options.
func NewRouterTrAssociation(ctx *pulumi.Context,
	name string, args *RouterTrAssociationArgs, opts ...pulumi.ResourceOption) (*RouterTrAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssociationRegionId == nil {
		return nil, errors.New("invalid value for required argument 'AssociationRegionId'")
	}
	if args.EcrId == nil {
		return nil, errors.New("invalid value for required argument 'EcrId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterTrAssociation
	err := ctx.RegisterResource("alicloud:expressconnect/routerTrAssociation:RouterTrAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterTrAssociation gets an existing RouterTrAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterTrAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterTrAssociationState, opts ...pulumi.ResourceOption) (*RouterTrAssociation, error) {
	var resource RouterTrAssociation
	err := ctx.ReadResource("alicloud:expressconnect/routerTrAssociation:RouterTrAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterTrAssociation resources.
type routerTrAssociationState struct {
	// List of allowed route prefixes.
	AllowedPrefixes []string `pulumi:"allowedPrefixes"`
	// The first ID of the resource.
	AssociationId *string `pulumi:"associationId"`
	// The region to which the VPC or TR belongs.
	AssociationRegionId *string `pulumi:"associationRegionId"`
	// The ID of the CEN instance.
	CenId *string `pulumi:"cenId"`
	// The creation time of the resource.
	CreateTime *string `pulumi:"createTime"`
	// The ID of the leased line gateway instance.
	EcrId *string `pulumi:"ecrId"`
	// The status of the resource.
	Status *string `pulumi:"status"`
	// The ID of the forwarding router instance.
	TransitRouterId *string `pulumi:"transitRouterId"`
	// The ID of the Alibaba Cloud account to which the forwarding router belongs.
	TransitRouterOwnerId *int `pulumi:"transitRouterOwnerId"`
}

type RouterTrAssociationState struct {
	// List of allowed route prefixes.
	AllowedPrefixes pulumi.StringArrayInput
	// The first ID of the resource.
	AssociationId pulumi.StringPtrInput
	// The region to which the VPC or TR belongs.
	AssociationRegionId pulumi.StringPtrInput
	// The ID of the CEN instance.
	CenId pulumi.StringPtrInput
	// The creation time of the resource.
	CreateTime pulumi.StringPtrInput
	// The ID of the leased line gateway instance.
	EcrId pulumi.StringPtrInput
	// The status of the resource.
	Status pulumi.StringPtrInput
	// The ID of the forwarding router instance.
	TransitRouterId pulumi.StringPtrInput
	// The ID of the Alibaba Cloud account to which the forwarding router belongs.
	TransitRouterOwnerId pulumi.IntPtrInput
}

func (RouterTrAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerTrAssociationState)(nil)).Elem()
}

type routerTrAssociationArgs struct {
	// List of allowed route prefixes.
	AllowedPrefixes []string `pulumi:"allowedPrefixes"`
	// The region to which the VPC or TR belongs.
	AssociationRegionId string `pulumi:"associationRegionId"`
	// The ID of the CEN instance.
	CenId *string `pulumi:"cenId"`
	// The ID of the leased line gateway instance.
	EcrId string `pulumi:"ecrId"`
	// The ID of the forwarding router instance.
	TransitRouterId *string `pulumi:"transitRouterId"`
	// The ID of the Alibaba Cloud account to which the forwarding router belongs.
	TransitRouterOwnerId *int `pulumi:"transitRouterOwnerId"`
}

// The set of arguments for constructing a RouterTrAssociation resource.
type RouterTrAssociationArgs struct {
	// List of allowed route prefixes.
	AllowedPrefixes pulumi.StringArrayInput
	// The region to which the VPC or TR belongs.
	AssociationRegionId pulumi.StringInput
	// The ID of the CEN instance.
	CenId pulumi.StringPtrInput
	// The ID of the leased line gateway instance.
	EcrId pulumi.StringInput
	// The ID of the forwarding router instance.
	TransitRouterId pulumi.StringPtrInput
	// The ID of the Alibaba Cloud account to which the forwarding router belongs.
	TransitRouterOwnerId pulumi.IntPtrInput
}

func (RouterTrAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerTrAssociationArgs)(nil)).Elem()
}

type RouterTrAssociationInput interface {
	pulumi.Input

	ToRouterTrAssociationOutput() RouterTrAssociationOutput
	ToRouterTrAssociationOutputWithContext(ctx context.Context) RouterTrAssociationOutput
}

func (*RouterTrAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterTrAssociation)(nil)).Elem()
}

func (i *RouterTrAssociation) ToRouterTrAssociationOutput() RouterTrAssociationOutput {
	return i.ToRouterTrAssociationOutputWithContext(context.Background())
}

func (i *RouterTrAssociation) ToRouterTrAssociationOutputWithContext(ctx context.Context) RouterTrAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterTrAssociationOutput)
}

// RouterTrAssociationArrayInput is an input type that accepts RouterTrAssociationArray and RouterTrAssociationArrayOutput values.
// You can construct a concrete instance of `RouterTrAssociationArrayInput` via:
//
//	RouterTrAssociationArray{ RouterTrAssociationArgs{...} }
type RouterTrAssociationArrayInput interface {
	pulumi.Input

	ToRouterTrAssociationArrayOutput() RouterTrAssociationArrayOutput
	ToRouterTrAssociationArrayOutputWithContext(context.Context) RouterTrAssociationArrayOutput
}

type RouterTrAssociationArray []RouterTrAssociationInput

func (RouterTrAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterTrAssociation)(nil)).Elem()
}

func (i RouterTrAssociationArray) ToRouterTrAssociationArrayOutput() RouterTrAssociationArrayOutput {
	return i.ToRouterTrAssociationArrayOutputWithContext(context.Background())
}

func (i RouterTrAssociationArray) ToRouterTrAssociationArrayOutputWithContext(ctx context.Context) RouterTrAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterTrAssociationArrayOutput)
}

// RouterTrAssociationMapInput is an input type that accepts RouterTrAssociationMap and RouterTrAssociationMapOutput values.
// You can construct a concrete instance of `RouterTrAssociationMapInput` via:
//
//	RouterTrAssociationMap{ "key": RouterTrAssociationArgs{...} }
type RouterTrAssociationMapInput interface {
	pulumi.Input

	ToRouterTrAssociationMapOutput() RouterTrAssociationMapOutput
	ToRouterTrAssociationMapOutputWithContext(context.Context) RouterTrAssociationMapOutput
}

type RouterTrAssociationMap map[string]RouterTrAssociationInput

func (RouterTrAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterTrAssociation)(nil)).Elem()
}

func (i RouterTrAssociationMap) ToRouterTrAssociationMapOutput() RouterTrAssociationMapOutput {
	return i.ToRouterTrAssociationMapOutputWithContext(context.Background())
}

func (i RouterTrAssociationMap) ToRouterTrAssociationMapOutputWithContext(ctx context.Context) RouterTrAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterTrAssociationMapOutput)
}

type RouterTrAssociationOutput struct{ *pulumi.OutputState }

func (RouterTrAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterTrAssociation)(nil)).Elem()
}

func (o RouterTrAssociationOutput) ToRouterTrAssociationOutput() RouterTrAssociationOutput {
	return o
}

func (o RouterTrAssociationOutput) ToRouterTrAssociationOutputWithContext(ctx context.Context) RouterTrAssociationOutput {
	return o
}

// List of allowed route prefixes.
func (o RouterTrAssociationOutput) AllowedPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouterTrAssociation) pulumi.StringArrayOutput { return v.AllowedPrefixes }).(pulumi.StringArrayOutput)
}

// The first ID of the resource.
func (o RouterTrAssociationOutput) AssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterTrAssociation) pulumi.StringOutput { return v.AssociationId }).(pulumi.StringOutput)
}

// The region to which the VPC or TR belongs.
func (o RouterTrAssociationOutput) AssociationRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterTrAssociation) pulumi.StringOutput { return v.AssociationRegionId }).(pulumi.StringOutput)
}

// The ID of the CEN instance.
func (o RouterTrAssociationOutput) CenId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterTrAssociation) pulumi.StringPtrOutput { return v.CenId }).(pulumi.StringPtrOutput)
}

// The creation time of the resource.
func (o RouterTrAssociationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterTrAssociation) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of the leased line gateway instance.
func (o RouterTrAssociationOutput) EcrId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterTrAssociation) pulumi.StringOutput { return v.EcrId }).(pulumi.StringOutput)
}

// The status of the resource.
func (o RouterTrAssociationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterTrAssociation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The ID of the forwarding router instance.
func (o RouterTrAssociationOutput) TransitRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterTrAssociation) pulumi.StringOutput { return v.TransitRouterId }).(pulumi.StringOutput)
}

// The ID of the Alibaba Cloud account to which the forwarding router belongs.
func (o RouterTrAssociationOutput) TransitRouterOwnerId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterTrAssociation) pulumi.IntPtrOutput { return v.TransitRouterOwnerId }).(pulumi.IntPtrOutput)
}

type RouterTrAssociationArrayOutput struct{ *pulumi.OutputState }

func (RouterTrAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterTrAssociation)(nil)).Elem()
}

func (o RouterTrAssociationArrayOutput) ToRouterTrAssociationArrayOutput() RouterTrAssociationArrayOutput {
	return o
}

func (o RouterTrAssociationArrayOutput) ToRouterTrAssociationArrayOutputWithContext(ctx context.Context) RouterTrAssociationArrayOutput {
	return o
}

func (o RouterTrAssociationArrayOutput) Index(i pulumi.IntInput) RouterTrAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterTrAssociation {
		return vs[0].([]*RouterTrAssociation)[vs[1].(int)]
	}).(RouterTrAssociationOutput)
}

type RouterTrAssociationMapOutput struct{ *pulumi.OutputState }

func (RouterTrAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterTrAssociation)(nil)).Elem()
}

func (o RouterTrAssociationMapOutput) ToRouterTrAssociationMapOutput() RouterTrAssociationMapOutput {
	return o
}

func (o RouterTrAssociationMapOutput) ToRouterTrAssociationMapOutputWithContext(ctx context.Context) RouterTrAssociationMapOutput {
	return o
}

func (o RouterTrAssociationMapOutput) MapIndex(k pulumi.StringInput) RouterTrAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterTrAssociation {
		return vs[0].(map[string]*RouterTrAssociation)[vs[1].(string)]
	}).(RouterTrAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterTrAssociationInput)(nil)).Elem(), &RouterTrAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterTrAssociationArrayInput)(nil)).Elem(), RouterTrAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterTrAssociationMapInput)(nil)).Elem(), RouterTrAssociationMap{})
	pulumi.RegisterOutputType(RouterTrAssociationOutput{})
	pulumi.RegisterOutputType(RouterTrAssociationArrayOutput{})
	pulumi.RegisterOutputType(RouterTrAssociationMapOutput{})
}
