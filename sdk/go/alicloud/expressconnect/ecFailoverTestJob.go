// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package expressconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Express Connect Ec Failover Test Job resource. Express Connect Failover Test Job.
//
// For information about Express Connect Ec Failover Test Job and how to use it, see [What is Ec Failover Test Job](https://www.alibabacloud.com/help/zh/express-connect/developer-reference/api-vpc-2016-04-28-createfailovertestjob-efficiency-channels).
//
// > **NOTE:** Available since v1.215.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/expressconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultPhysicalConnections, err := expressconnect.GetPhysicalConnections(ctx, &expressconnect.GetPhysicalConnectionsArgs{
//				NameRegex: pulumi.StringRef("preserved-NODELETING"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = expressconnect.NewEcFailoverTestJob(ctx, "defaultEcFailoverTestJob", &expressconnect.EcFailoverTestJobArgs{
//				Description: pulumi.String(name),
//				JobType:     pulumi.String("StartNow"),
//				ResourceIds: pulumi.StringArray{
//					*pulumi.String(defaultPhysicalConnections.Ids[0]),
//					*pulumi.String(defaultPhysicalConnections.Ids[1]),
//					*pulumi.String(defaultPhysicalConnections.Ids[2]),
//				},
//				JobDuration:           pulumi.Int(1),
//				ResourceType:          pulumi.String("PHYSICALCONNECTION"),
//				EcFailoverTestJobName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Express Connect Ec Failover Test Job can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:expressconnect/ecFailoverTestJob:EcFailoverTestJob example <id>
//
// ```
type EcFailoverTestJob struct {
	pulumi.CustomResourceState

	// Job description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Job name.
	EcFailoverTestJobName pulumi.StringPtrOutput `pulumi:"ecFailoverTestJobName"`
	// Job duration.
	JobDuration pulumi.IntOutput `pulumi:"jobDuration"`
	// Job type.
	JobType pulumi.StringOutput `pulumi:"jobType"`
	// Resource id list.
	ResourceIds pulumi.StringArrayOutput `pulumi:"resourceIds"`
	// Resource type.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewEcFailoverTestJob registers a new resource with the given unique name, arguments, and options.
func NewEcFailoverTestJob(ctx *pulumi.Context,
	name string, args *EcFailoverTestJobArgs, opts ...pulumi.ResourceOption) (*EcFailoverTestJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobDuration == nil {
		return nil, errors.New("invalid value for required argument 'JobDuration'")
	}
	if args.JobType == nil {
		return nil, errors.New("invalid value for required argument 'JobType'")
	}
	if args.ResourceIds == nil {
		return nil, errors.New("invalid value for required argument 'ResourceIds'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EcFailoverTestJob
	err := ctx.RegisterResource("alicloud:expressconnect/ecFailoverTestJob:EcFailoverTestJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcFailoverTestJob gets an existing EcFailoverTestJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcFailoverTestJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcFailoverTestJobState, opts ...pulumi.ResourceOption) (*EcFailoverTestJob, error) {
	var resource EcFailoverTestJob
	err := ctx.ReadResource("alicloud:expressconnect/ecFailoverTestJob:EcFailoverTestJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EcFailoverTestJob resources.
type ecFailoverTestJobState struct {
	// Job description.
	Description *string `pulumi:"description"`
	// Job name.
	EcFailoverTestJobName *string `pulumi:"ecFailoverTestJobName"`
	// Job duration.
	JobDuration *int `pulumi:"jobDuration"`
	// Job type.
	JobType *string `pulumi:"jobType"`
	// Resource id list.
	ResourceIds []string `pulumi:"resourceIds"`
	// Resource type.
	ResourceType *string `pulumi:"resourceType"`
	// The status of the resource.
	Status *string `pulumi:"status"`
}

type EcFailoverTestJobState struct {
	// Job description.
	Description pulumi.StringPtrInput
	// Job name.
	EcFailoverTestJobName pulumi.StringPtrInput
	// Job duration.
	JobDuration pulumi.IntPtrInput
	// Job type.
	JobType pulumi.StringPtrInput
	// Resource id list.
	ResourceIds pulumi.StringArrayInput
	// Resource type.
	ResourceType pulumi.StringPtrInput
	// The status of the resource.
	Status pulumi.StringPtrInput
}

func (EcFailoverTestJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecFailoverTestJobState)(nil)).Elem()
}

type ecFailoverTestJobArgs struct {
	// Job description.
	Description *string `pulumi:"description"`
	// Job name.
	EcFailoverTestJobName *string `pulumi:"ecFailoverTestJobName"`
	// Job duration.
	JobDuration int `pulumi:"jobDuration"`
	// Job type.
	JobType string `pulumi:"jobType"`
	// Resource id list.
	ResourceIds []string `pulumi:"resourceIds"`
	// Resource type.
	ResourceType string `pulumi:"resourceType"`
	// The status of the resource.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a EcFailoverTestJob resource.
type EcFailoverTestJobArgs struct {
	// Job description.
	Description pulumi.StringPtrInput
	// Job name.
	EcFailoverTestJobName pulumi.StringPtrInput
	// Job duration.
	JobDuration pulumi.IntInput
	// Job type.
	JobType pulumi.StringInput
	// Resource id list.
	ResourceIds pulumi.StringArrayInput
	// Resource type.
	ResourceType pulumi.StringInput
	// The status of the resource.
	Status pulumi.StringPtrInput
}

func (EcFailoverTestJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecFailoverTestJobArgs)(nil)).Elem()
}

type EcFailoverTestJobInput interface {
	pulumi.Input

	ToEcFailoverTestJobOutput() EcFailoverTestJobOutput
	ToEcFailoverTestJobOutputWithContext(ctx context.Context) EcFailoverTestJobOutput
}

func (*EcFailoverTestJob) ElementType() reflect.Type {
	return reflect.TypeOf((**EcFailoverTestJob)(nil)).Elem()
}

func (i *EcFailoverTestJob) ToEcFailoverTestJobOutput() EcFailoverTestJobOutput {
	return i.ToEcFailoverTestJobOutputWithContext(context.Background())
}

func (i *EcFailoverTestJob) ToEcFailoverTestJobOutputWithContext(ctx context.Context) EcFailoverTestJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcFailoverTestJobOutput)
}

// EcFailoverTestJobArrayInput is an input type that accepts EcFailoverTestJobArray and EcFailoverTestJobArrayOutput values.
// You can construct a concrete instance of `EcFailoverTestJobArrayInput` via:
//
//	EcFailoverTestJobArray{ EcFailoverTestJobArgs{...} }
type EcFailoverTestJobArrayInput interface {
	pulumi.Input

	ToEcFailoverTestJobArrayOutput() EcFailoverTestJobArrayOutput
	ToEcFailoverTestJobArrayOutputWithContext(context.Context) EcFailoverTestJobArrayOutput
}

type EcFailoverTestJobArray []EcFailoverTestJobInput

func (EcFailoverTestJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcFailoverTestJob)(nil)).Elem()
}

func (i EcFailoverTestJobArray) ToEcFailoverTestJobArrayOutput() EcFailoverTestJobArrayOutput {
	return i.ToEcFailoverTestJobArrayOutputWithContext(context.Background())
}

func (i EcFailoverTestJobArray) ToEcFailoverTestJobArrayOutputWithContext(ctx context.Context) EcFailoverTestJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcFailoverTestJobArrayOutput)
}

// EcFailoverTestJobMapInput is an input type that accepts EcFailoverTestJobMap and EcFailoverTestJobMapOutput values.
// You can construct a concrete instance of `EcFailoverTestJobMapInput` via:
//
//	EcFailoverTestJobMap{ "key": EcFailoverTestJobArgs{...} }
type EcFailoverTestJobMapInput interface {
	pulumi.Input

	ToEcFailoverTestJobMapOutput() EcFailoverTestJobMapOutput
	ToEcFailoverTestJobMapOutputWithContext(context.Context) EcFailoverTestJobMapOutput
}

type EcFailoverTestJobMap map[string]EcFailoverTestJobInput

func (EcFailoverTestJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcFailoverTestJob)(nil)).Elem()
}

func (i EcFailoverTestJobMap) ToEcFailoverTestJobMapOutput() EcFailoverTestJobMapOutput {
	return i.ToEcFailoverTestJobMapOutputWithContext(context.Background())
}

func (i EcFailoverTestJobMap) ToEcFailoverTestJobMapOutputWithContext(ctx context.Context) EcFailoverTestJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcFailoverTestJobMapOutput)
}

type EcFailoverTestJobOutput struct{ *pulumi.OutputState }

func (EcFailoverTestJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcFailoverTestJob)(nil)).Elem()
}

func (o EcFailoverTestJobOutput) ToEcFailoverTestJobOutput() EcFailoverTestJobOutput {
	return o
}

func (o EcFailoverTestJobOutput) ToEcFailoverTestJobOutputWithContext(ctx context.Context) EcFailoverTestJobOutput {
	return o
}

// Job description.
func (o EcFailoverTestJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcFailoverTestJob) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Job name.
func (o EcFailoverTestJobOutput) EcFailoverTestJobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcFailoverTestJob) pulumi.StringPtrOutput { return v.EcFailoverTestJobName }).(pulumi.StringPtrOutput)
}

// Job duration.
func (o EcFailoverTestJobOutput) JobDuration() pulumi.IntOutput {
	return o.ApplyT(func(v *EcFailoverTestJob) pulumi.IntOutput { return v.JobDuration }).(pulumi.IntOutput)
}

// Job type.
func (o EcFailoverTestJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v *EcFailoverTestJob) pulumi.StringOutput { return v.JobType }).(pulumi.StringOutput)
}

// Resource id list.
func (o EcFailoverTestJobOutput) ResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EcFailoverTestJob) pulumi.StringArrayOutput { return v.ResourceIds }).(pulumi.StringArrayOutput)
}

// Resource type.
func (o EcFailoverTestJobOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *EcFailoverTestJob) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// The status of the resource.
func (o EcFailoverTestJobOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EcFailoverTestJob) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type EcFailoverTestJobArrayOutput struct{ *pulumi.OutputState }

func (EcFailoverTestJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcFailoverTestJob)(nil)).Elem()
}

func (o EcFailoverTestJobArrayOutput) ToEcFailoverTestJobArrayOutput() EcFailoverTestJobArrayOutput {
	return o
}

func (o EcFailoverTestJobArrayOutput) ToEcFailoverTestJobArrayOutputWithContext(ctx context.Context) EcFailoverTestJobArrayOutput {
	return o
}

func (o EcFailoverTestJobArrayOutput) Index(i pulumi.IntInput) EcFailoverTestJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcFailoverTestJob {
		return vs[0].([]*EcFailoverTestJob)[vs[1].(int)]
	}).(EcFailoverTestJobOutput)
}

type EcFailoverTestJobMapOutput struct{ *pulumi.OutputState }

func (EcFailoverTestJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcFailoverTestJob)(nil)).Elem()
}

func (o EcFailoverTestJobMapOutput) ToEcFailoverTestJobMapOutput() EcFailoverTestJobMapOutput {
	return o
}

func (o EcFailoverTestJobMapOutput) ToEcFailoverTestJobMapOutputWithContext(ctx context.Context) EcFailoverTestJobMapOutput {
	return o
}

func (o EcFailoverTestJobMapOutput) MapIndex(k pulumi.StringInput) EcFailoverTestJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcFailoverTestJob {
		return vs[0].(map[string]*EcFailoverTestJob)[vs[1].(string)]
	}).(EcFailoverTestJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcFailoverTestJobInput)(nil)).Elem(), &EcFailoverTestJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcFailoverTestJobArrayInput)(nil)).Elem(), EcFailoverTestJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcFailoverTestJobMapInput)(nil)).Elem(), EcFailoverTestJobMap{})
	pulumi.RegisterOutputType(EcFailoverTestJobOutput{})
	pulumi.RegisterOutputType(EcFailoverTestJobArrayOutput{})
	pulumi.RegisterOutputType(EcFailoverTestJobMapOutput{})
}
