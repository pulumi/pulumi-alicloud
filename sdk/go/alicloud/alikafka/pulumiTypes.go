// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alikafka

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type InstanceConfluentConfig struct {
	// The number of CPU cores of Connect.
	ConnectCu *int `pulumi:"connectCu"`
	// The number of replicas of Connect.
	ConnectReplica *int `pulumi:"connectReplica"`
	// The number of CPU cores of Control Center.
	ControlCenterCu *int `pulumi:"controlCenterCu"`
	// The number of replicas of Control Center.
	ControlCenterReplica *int `pulumi:"controlCenterReplica"`
	// The disk capacity of Control Center.
	ControlCenterStorage *int `pulumi:"controlCenterStorage"`
	// The number of CPU cores of the Kafka broker.
	KafkaCu *int `pulumi:"kafkaCu"`
	// The number of replicas of the Kafka broker.
	KafkaReplica *int `pulumi:"kafkaReplica"`
	// The number of CPU cores of Kafka Rest Proxy.
	KafkaRestProxyCu *int `pulumi:"kafkaRestProxyCu"`
	// The number of replicas of Kafka Rest Proxy.
	KafkaRestProxyReplica *int `pulumi:"kafkaRestProxyReplica"`
	// The disk capacity of the Kafka broker.
	KafkaStorage *int `pulumi:"kafkaStorage"`
	// The number of CPU cores of ksqlDB.
	KsqlCu *int `pulumi:"ksqlCu"`
	// The number of replicas of ksqlDB.
	KsqlReplica *int `pulumi:"ksqlReplica"`
	// The disk capacity of ksqlDB.
	KsqlStorage *int `pulumi:"ksqlStorage"`
	// The number of CPU cores of Schema Registry.
	SchemaRegistryCu *int `pulumi:"schemaRegistryCu"`
	// The number of replicas of Schema Registry.
	SchemaRegistryReplica *int `pulumi:"schemaRegistryReplica"`
	// The number of CPU cores of ZooKeeper.
	ZookeeperCu *int `pulumi:"zookeeperCu"`
	// The number of replicas of ZooKeeper.
	ZookeeperReplica *int `pulumi:"zookeeperReplica"`
	// The disk capacity of ZooKeeper.
	ZookeeperStorage *int `pulumi:"zookeeperStorage"`
}

// InstanceConfluentConfigInput is an input type that accepts InstanceConfluentConfigArgs and InstanceConfluentConfigOutput values.
// You can construct a concrete instance of `InstanceConfluentConfigInput` via:
//
//	InstanceConfluentConfigArgs{...}
type InstanceConfluentConfigInput interface {
	pulumi.Input

	ToInstanceConfluentConfigOutput() InstanceConfluentConfigOutput
	ToInstanceConfluentConfigOutputWithContext(context.Context) InstanceConfluentConfigOutput
}

type InstanceConfluentConfigArgs struct {
	// The number of CPU cores of Connect.
	ConnectCu pulumi.IntPtrInput `pulumi:"connectCu"`
	// The number of replicas of Connect.
	ConnectReplica pulumi.IntPtrInput `pulumi:"connectReplica"`
	// The number of CPU cores of Control Center.
	ControlCenterCu pulumi.IntPtrInput `pulumi:"controlCenterCu"`
	// The number of replicas of Control Center.
	ControlCenterReplica pulumi.IntPtrInput `pulumi:"controlCenterReplica"`
	// The disk capacity of Control Center.
	ControlCenterStorage pulumi.IntPtrInput `pulumi:"controlCenterStorage"`
	// The number of CPU cores of the Kafka broker.
	KafkaCu pulumi.IntPtrInput `pulumi:"kafkaCu"`
	// The number of replicas of the Kafka broker.
	KafkaReplica pulumi.IntPtrInput `pulumi:"kafkaReplica"`
	// The number of CPU cores of Kafka Rest Proxy.
	KafkaRestProxyCu pulumi.IntPtrInput `pulumi:"kafkaRestProxyCu"`
	// The number of replicas of Kafka Rest Proxy.
	KafkaRestProxyReplica pulumi.IntPtrInput `pulumi:"kafkaRestProxyReplica"`
	// The disk capacity of the Kafka broker.
	KafkaStorage pulumi.IntPtrInput `pulumi:"kafkaStorage"`
	// The number of CPU cores of ksqlDB.
	KsqlCu pulumi.IntPtrInput `pulumi:"ksqlCu"`
	// The number of replicas of ksqlDB.
	KsqlReplica pulumi.IntPtrInput `pulumi:"ksqlReplica"`
	// The disk capacity of ksqlDB.
	KsqlStorage pulumi.IntPtrInput `pulumi:"ksqlStorage"`
	// The number of CPU cores of Schema Registry.
	SchemaRegistryCu pulumi.IntPtrInput `pulumi:"schemaRegistryCu"`
	// The number of replicas of Schema Registry.
	SchemaRegistryReplica pulumi.IntPtrInput `pulumi:"schemaRegistryReplica"`
	// The number of CPU cores of ZooKeeper.
	ZookeeperCu pulumi.IntPtrInput `pulumi:"zookeeperCu"`
	// The number of replicas of ZooKeeper.
	ZookeeperReplica pulumi.IntPtrInput `pulumi:"zookeeperReplica"`
	// The disk capacity of ZooKeeper.
	ZookeeperStorage pulumi.IntPtrInput `pulumi:"zookeeperStorage"`
}

func (InstanceConfluentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfluentConfig)(nil)).Elem()
}

func (i InstanceConfluentConfigArgs) ToInstanceConfluentConfigOutput() InstanceConfluentConfigOutput {
	return i.ToInstanceConfluentConfigOutputWithContext(context.Background())
}

func (i InstanceConfluentConfigArgs) ToInstanceConfluentConfigOutputWithContext(ctx context.Context) InstanceConfluentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfluentConfigOutput)
}

func (i InstanceConfluentConfigArgs) ToInstanceConfluentConfigPtrOutput() InstanceConfluentConfigPtrOutput {
	return i.ToInstanceConfluentConfigPtrOutputWithContext(context.Background())
}

func (i InstanceConfluentConfigArgs) ToInstanceConfluentConfigPtrOutputWithContext(ctx context.Context) InstanceConfluentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfluentConfigOutput).ToInstanceConfluentConfigPtrOutputWithContext(ctx)
}

// InstanceConfluentConfigPtrInput is an input type that accepts InstanceConfluentConfigArgs, InstanceConfluentConfigPtr and InstanceConfluentConfigPtrOutput values.
// You can construct a concrete instance of `InstanceConfluentConfigPtrInput` via:
//
//	        InstanceConfluentConfigArgs{...}
//
//	or:
//
//	        nil
type InstanceConfluentConfigPtrInput interface {
	pulumi.Input

	ToInstanceConfluentConfigPtrOutput() InstanceConfluentConfigPtrOutput
	ToInstanceConfluentConfigPtrOutputWithContext(context.Context) InstanceConfluentConfigPtrOutput
}

type instanceConfluentConfigPtrType InstanceConfluentConfigArgs

func InstanceConfluentConfigPtr(v *InstanceConfluentConfigArgs) InstanceConfluentConfigPtrInput {
	return (*instanceConfluentConfigPtrType)(v)
}

func (*instanceConfluentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfluentConfig)(nil)).Elem()
}

func (i *instanceConfluentConfigPtrType) ToInstanceConfluentConfigPtrOutput() InstanceConfluentConfigPtrOutput {
	return i.ToInstanceConfluentConfigPtrOutputWithContext(context.Background())
}

func (i *instanceConfluentConfigPtrType) ToInstanceConfluentConfigPtrOutputWithContext(ctx context.Context) InstanceConfluentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfluentConfigPtrOutput)
}

type InstanceConfluentConfigOutput struct{ *pulumi.OutputState }

func (InstanceConfluentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfluentConfig)(nil)).Elem()
}

func (o InstanceConfluentConfigOutput) ToInstanceConfluentConfigOutput() InstanceConfluentConfigOutput {
	return o
}

func (o InstanceConfluentConfigOutput) ToInstanceConfluentConfigOutputWithContext(ctx context.Context) InstanceConfluentConfigOutput {
	return o
}

func (o InstanceConfluentConfigOutput) ToInstanceConfluentConfigPtrOutput() InstanceConfluentConfigPtrOutput {
	return o.ToInstanceConfluentConfigPtrOutputWithContext(context.Background())
}

func (o InstanceConfluentConfigOutput) ToInstanceConfluentConfigPtrOutputWithContext(ctx context.Context) InstanceConfluentConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceConfluentConfig) *InstanceConfluentConfig {
		return &v
	}).(InstanceConfluentConfigPtrOutput)
}

// The number of CPU cores of Connect.
func (o InstanceConfluentConfigOutput) ConnectCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.ConnectCu }).(pulumi.IntPtrOutput)
}

// The number of replicas of Connect.
func (o InstanceConfluentConfigOutput) ConnectReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.ConnectReplica }).(pulumi.IntPtrOutput)
}

// The number of CPU cores of Control Center.
func (o InstanceConfluentConfigOutput) ControlCenterCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.ControlCenterCu }).(pulumi.IntPtrOutput)
}

// The number of replicas of Control Center.
func (o InstanceConfluentConfigOutput) ControlCenterReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.ControlCenterReplica }).(pulumi.IntPtrOutput)
}

// The disk capacity of Control Center.
func (o InstanceConfluentConfigOutput) ControlCenterStorage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.ControlCenterStorage }).(pulumi.IntPtrOutput)
}

// The number of CPU cores of the Kafka broker.
func (o InstanceConfluentConfigOutput) KafkaCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.KafkaCu }).(pulumi.IntPtrOutput)
}

// The number of replicas of the Kafka broker.
func (o InstanceConfluentConfigOutput) KafkaReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.KafkaReplica }).(pulumi.IntPtrOutput)
}

// The number of CPU cores of Kafka Rest Proxy.
func (o InstanceConfluentConfigOutput) KafkaRestProxyCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.KafkaRestProxyCu }).(pulumi.IntPtrOutput)
}

// The number of replicas of Kafka Rest Proxy.
func (o InstanceConfluentConfigOutput) KafkaRestProxyReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.KafkaRestProxyReplica }).(pulumi.IntPtrOutput)
}

// The disk capacity of the Kafka broker.
func (o InstanceConfluentConfigOutput) KafkaStorage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.KafkaStorage }).(pulumi.IntPtrOutput)
}

// The number of CPU cores of ksqlDB.
func (o InstanceConfluentConfigOutput) KsqlCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.KsqlCu }).(pulumi.IntPtrOutput)
}

// The number of replicas of ksqlDB.
func (o InstanceConfluentConfigOutput) KsqlReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.KsqlReplica }).(pulumi.IntPtrOutput)
}

// The disk capacity of ksqlDB.
func (o InstanceConfluentConfigOutput) KsqlStorage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.KsqlStorage }).(pulumi.IntPtrOutput)
}

// The number of CPU cores of Schema Registry.
func (o InstanceConfluentConfigOutput) SchemaRegistryCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.SchemaRegistryCu }).(pulumi.IntPtrOutput)
}

// The number of replicas of Schema Registry.
func (o InstanceConfluentConfigOutput) SchemaRegistryReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.SchemaRegistryReplica }).(pulumi.IntPtrOutput)
}

// The number of CPU cores of ZooKeeper.
func (o InstanceConfluentConfigOutput) ZookeeperCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.ZookeeperCu }).(pulumi.IntPtrOutput)
}

// The number of replicas of ZooKeeper.
func (o InstanceConfluentConfigOutput) ZookeeperReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.ZookeeperReplica }).(pulumi.IntPtrOutput)
}

// The disk capacity of ZooKeeper.
func (o InstanceConfluentConfigOutput) ZookeeperStorage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfluentConfig) *int { return v.ZookeeperStorage }).(pulumi.IntPtrOutput)
}

type InstanceConfluentConfigPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfluentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfluentConfig)(nil)).Elem()
}

func (o InstanceConfluentConfigPtrOutput) ToInstanceConfluentConfigPtrOutput() InstanceConfluentConfigPtrOutput {
	return o
}

func (o InstanceConfluentConfigPtrOutput) ToInstanceConfluentConfigPtrOutputWithContext(ctx context.Context) InstanceConfluentConfigPtrOutput {
	return o
}

func (o InstanceConfluentConfigPtrOutput) Elem() InstanceConfluentConfigOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) InstanceConfluentConfig {
		if v != nil {
			return *v
		}
		var ret InstanceConfluentConfig
		return ret
	}).(InstanceConfluentConfigOutput)
}

// The number of CPU cores of Connect.
func (o InstanceConfluentConfigPtrOutput) ConnectCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.ConnectCu
	}).(pulumi.IntPtrOutput)
}

// The number of replicas of Connect.
func (o InstanceConfluentConfigPtrOutput) ConnectReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.ConnectReplica
	}).(pulumi.IntPtrOutput)
}

// The number of CPU cores of Control Center.
func (o InstanceConfluentConfigPtrOutput) ControlCenterCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.ControlCenterCu
	}).(pulumi.IntPtrOutput)
}

// The number of replicas of Control Center.
func (o InstanceConfluentConfigPtrOutput) ControlCenterReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.ControlCenterReplica
	}).(pulumi.IntPtrOutput)
}

// The disk capacity of Control Center.
func (o InstanceConfluentConfigPtrOutput) ControlCenterStorage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.ControlCenterStorage
	}).(pulumi.IntPtrOutput)
}

// The number of CPU cores of the Kafka broker.
func (o InstanceConfluentConfigPtrOutput) KafkaCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.KafkaCu
	}).(pulumi.IntPtrOutput)
}

// The number of replicas of the Kafka broker.
func (o InstanceConfluentConfigPtrOutput) KafkaReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.KafkaReplica
	}).(pulumi.IntPtrOutput)
}

// The number of CPU cores of Kafka Rest Proxy.
func (o InstanceConfluentConfigPtrOutput) KafkaRestProxyCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.KafkaRestProxyCu
	}).(pulumi.IntPtrOutput)
}

// The number of replicas of Kafka Rest Proxy.
func (o InstanceConfluentConfigPtrOutput) KafkaRestProxyReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.KafkaRestProxyReplica
	}).(pulumi.IntPtrOutput)
}

// The disk capacity of the Kafka broker.
func (o InstanceConfluentConfigPtrOutput) KafkaStorage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.KafkaStorage
	}).(pulumi.IntPtrOutput)
}

// The number of CPU cores of ksqlDB.
func (o InstanceConfluentConfigPtrOutput) KsqlCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.KsqlCu
	}).(pulumi.IntPtrOutput)
}

// The number of replicas of ksqlDB.
func (o InstanceConfluentConfigPtrOutput) KsqlReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.KsqlReplica
	}).(pulumi.IntPtrOutput)
}

// The disk capacity of ksqlDB.
func (o InstanceConfluentConfigPtrOutput) KsqlStorage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.KsqlStorage
	}).(pulumi.IntPtrOutput)
}

// The number of CPU cores of Schema Registry.
func (o InstanceConfluentConfigPtrOutput) SchemaRegistryCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.SchemaRegistryCu
	}).(pulumi.IntPtrOutput)
}

// The number of replicas of Schema Registry.
func (o InstanceConfluentConfigPtrOutput) SchemaRegistryReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.SchemaRegistryReplica
	}).(pulumi.IntPtrOutput)
}

// The number of CPU cores of ZooKeeper.
func (o InstanceConfluentConfigPtrOutput) ZookeeperCu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.ZookeeperCu
	}).(pulumi.IntPtrOutput)
}

// The number of replicas of ZooKeeper.
func (o InstanceConfluentConfigPtrOutput) ZookeeperReplica() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.ZookeeperReplica
	}).(pulumi.IntPtrOutput)
}

// The disk capacity of ZooKeeper.
func (o InstanceConfluentConfigPtrOutput) ZookeeperStorage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceConfluentConfig) *int {
		if v == nil {
			return nil
		}
		return v.ZookeeperStorage
	}).(pulumi.IntPtrOutput)
}

type InstanceServerlessConfig struct {
	// The reserved capacity for publishing messages.
	ReservedPublishCapacity *int `pulumi:"reservedPublishCapacity"`
	// The reserved capacity for subscribing to message.
	ReservedSubscribeCapacity *int `pulumi:"reservedSubscribeCapacity"`
}

// InstanceServerlessConfigInput is an input type that accepts InstanceServerlessConfigArgs and InstanceServerlessConfigOutput values.
// You can construct a concrete instance of `InstanceServerlessConfigInput` via:
//
//	InstanceServerlessConfigArgs{...}
type InstanceServerlessConfigInput interface {
	pulumi.Input

	ToInstanceServerlessConfigOutput() InstanceServerlessConfigOutput
	ToInstanceServerlessConfigOutputWithContext(context.Context) InstanceServerlessConfigOutput
}

type InstanceServerlessConfigArgs struct {
	// The reserved capacity for publishing messages.
	ReservedPublishCapacity pulumi.IntPtrInput `pulumi:"reservedPublishCapacity"`
	// The reserved capacity for subscribing to message.
	ReservedSubscribeCapacity pulumi.IntPtrInput `pulumi:"reservedSubscribeCapacity"`
}

func (InstanceServerlessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceServerlessConfig)(nil)).Elem()
}

func (i InstanceServerlessConfigArgs) ToInstanceServerlessConfigOutput() InstanceServerlessConfigOutput {
	return i.ToInstanceServerlessConfigOutputWithContext(context.Background())
}

func (i InstanceServerlessConfigArgs) ToInstanceServerlessConfigOutputWithContext(ctx context.Context) InstanceServerlessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServerlessConfigOutput)
}

func (i InstanceServerlessConfigArgs) ToInstanceServerlessConfigPtrOutput() InstanceServerlessConfigPtrOutput {
	return i.ToInstanceServerlessConfigPtrOutputWithContext(context.Background())
}

func (i InstanceServerlessConfigArgs) ToInstanceServerlessConfigPtrOutputWithContext(ctx context.Context) InstanceServerlessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServerlessConfigOutput).ToInstanceServerlessConfigPtrOutputWithContext(ctx)
}

// InstanceServerlessConfigPtrInput is an input type that accepts InstanceServerlessConfigArgs, InstanceServerlessConfigPtr and InstanceServerlessConfigPtrOutput values.
// You can construct a concrete instance of `InstanceServerlessConfigPtrInput` via:
//
//	        InstanceServerlessConfigArgs{...}
//
//	or:
//
//	        nil
type InstanceServerlessConfigPtrInput interface {
	pulumi.Input

	ToInstanceServerlessConfigPtrOutput() InstanceServerlessConfigPtrOutput
	ToInstanceServerlessConfigPtrOutputWithContext(context.Context) InstanceServerlessConfigPtrOutput
}

type instanceServerlessConfigPtrType InstanceServerlessConfigArgs

func InstanceServerlessConfigPtr(v *InstanceServerlessConfigArgs) InstanceServerlessConfigPtrInput {
	return (*instanceServerlessConfigPtrType)(v)
}

func (*instanceServerlessConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceServerlessConfig)(nil)).Elem()
}

func (i *instanceServerlessConfigPtrType) ToInstanceServerlessConfigPtrOutput() InstanceServerlessConfigPtrOutput {
	return i.ToInstanceServerlessConfigPtrOutputWithContext(context.Background())
}

func (i *instanceServerlessConfigPtrType) ToInstanceServerlessConfigPtrOutputWithContext(ctx context.Context) InstanceServerlessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServerlessConfigPtrOutput)
}

type InstanceServerlessConfigOutput struct{ *pulumi.OutputState }

func (InstanceServerlessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceServerlessConfig)(nil)).Elem()
}

func (o InstanceServerlessConfigOutput) ToInstanceServerlessConfigOutput() InstanceServerlessConfigOutput {
	return o
}

func (o InstanceServerlessConfigOutput) ToInstanceServerlessConfigOutputWithContext(ctx context.Context) InstanceServerlessConfigOutput {
	return o
}

func (o InstanceServerlessConfigOutput) ToInstanceServerlessConfigPtrOutput() InstanceServerlessConfigPtrOutput {
	return o.ToInstanceServerlessConfigPtrOutputWithContext(context.Background())
}

func (o InstanceServerlessConfigOutput) ToInstanceServerlessConfigPtrOutputWithContext(ctx context.Context) InstanceServerlessConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceServerlessConfig) *InstanceServerlessConfig {
		return &v
	}).(InstanceServerlessConfigPtrOutput)
}

// The reserved capacity for publishing messages.
func (o InstanceServerlessConfigOutput) ReservedPublishCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceServerlessConfig) *int { return v.ReservedPublishCapacity }).(pulumi.IntPtrOutput)
}

// The reserved capacity for subscribing to message.
func (o InstanceServerlessConfigOutput) ReservedSubscribeCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceServerlessConfig) *int { return v.ReservedSubscribeCapacity }).(pulumi.IntPtrOutput)
}

type InstanceServerlessConfigPtrOutput struct{ *pulumi.OutputState }

func (InstanceServerlessConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceServerlessConfig)(nil)).Elem()
}

func (o InstanceServerlessConfigPtrOutput) ToInstanceServerlessConfigPtrOutput() InstanceServerlessConfigPtrOutput {
	return o
}

func (o InstanceServerlessConfigPtrOutput) ToInstanceServerlessConfigPtrOutputWithContext(ctx context.Context) InstanceServerlessConfigPtrOutput {
	return o
}

func (o InstanceServerlessConfigPtrOutput) Elem() InstanceServerlessConfigOutput {
	return o.ApplyT(func(v *InstanceServerlessConfig) InstanceServerlessConfig {
		if v != nil {
			return *v
		}
		var ret InstanceServerlessConfig
		return ret
	}).(InstanceServerlessConfigOutput)
}

// The reserved capacity for publishing messages.
func (o InstanceServerlessConfigPtrOutput) ReservedPublishCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceServerlessConfig) *int {
		if v == nil {
			return nil
		}
		return v.ReservedPublishCapacity
	}).(pulumi.IntPtrOutput)
}

// The reserved capacity for subscribing to message.
func (o InstanceServerlessConfigPtrOutput) ReservedSubscribeCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceServerlessConfig) *int {
		if v == nil {
			return nil
		}
		return v.ReservedSubscribeCapacity
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfluentConfigInput)(nil)).Elem(), InstanceConfluentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfluentConfigPtrInput)(nil)).Elem(), InstanceConfluentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceServerlessConfigInput)(nil)).Elem(), InstanceServerlessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceServerlessConfigPtrInput)(nil)).Elem(), InstanceServerlessConfigArgs{})
	pulumi.RegisterOutputType(InstanceConfluentConfigOutput{})
	pulumi.RegisterOutputType(InstanceConfluentConfigPtrOutput{})
	pulumi.RegisterOutputType(InstanceServerlessConfigOutput{})
	pulumi.RegisterOutputType(InstanceServerlessConfigPtrOutput{})
}
