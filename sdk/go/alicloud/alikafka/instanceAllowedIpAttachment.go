// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alikafka

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a AliKafka Instance Allowed Ip Attachment resource.
//
// For information about Ali Kafka Instance Allowed Ip Attachment and how to use it, see [What is Instance Allowed Ip Attachment](https://www.alibabacloud.com/help/en/doc-detail/68151.html).
//
// > **NOTE:** Available in v1.163.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/alikafka"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tftest"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultNetworks, err := vpc.GetNetworks(ctx, &vpc.GetNetworksArgs{
//				NameRegex: pulumi.StringRef("^default-NODELETING"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSwitches, err := vpc.GetSwitches(ctx, &vpc.GetSwitchesArgs{
//				VpcId: pulumi.StringRef(defaultNetworks.Ids[0]),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "defaultSecurityGroup", &ecs.SecurityGroupArgs{
//				VpcId: *pulumi.String(defaultNetworks.Ids[0]),
//			})
//			if err != nil {
//				return err
//			}
//			defaultInstance, err := alikafka.NewInstance(ctx, "defaultInstance", &alikafka.InstanceArgs{
//				PartitionNum:  pulumi.Int(50),
//				DiskType:      pulumi.Int(1),
//				DiskSize:      pulumi.Int(500),
//				DeployType:    pulumi.Int(5),
//				IoMax:         pulumi.Int(20),
//				VswitchId:     *pulumi.String(defaultSwitches.Ids[0]),
//				SecurityGroup: defaultSecurityGroup.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = alikafka.NewInstanceAllowedIpAttachment(ctx, "defaultInstanceAllowedIpAttachment", &alikafka.InstanceAllowedIpAttachmentArgs{
//				AllowedIp:   pulumi.String("114.237.9.78/32"),
//				AllowedType: pulumi.String("vpc"),
//				InstanceId:  defaultInstance.ID(),
//				PortRange:   pulumi.String("9092/9092"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AliKafka Instance Allowed Ip Attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:alikafka/instanceAllowedIpAttachment:InstanceAllowedIpAttachment example <instance_id>:<allowed_type>:<port_range>:<allowed_ip>
//
// ```
type InstanceAllowedIpAttachment struct {
	pulumi.CustomResourceState

	// The allowed ip. It can be a CIDR block.
	AllowedIp pulumi.StringOutput `pulumi:"allowedIp"`
	// The type of whitelist. Valid Value: `vpc`, `internet`. **NOTE:** From version 1.179.0, `allowedType` can be set to `internet`.
	AllowedType pulumi.StringOutput `pulumi:"allowedType"`
	// The ID of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The Port range.  Valid Value: `9092/9092`, `9093/9093`. **NOTE:** From version 1.179.0, `portRange` can be set to `9093/9093`.
	// - `9092/9092`: port range for a VPC whitelist.
	// - `9093/9093`: port range for an Internet whitelist.
	PortRange pulumi.StringOutput `pulumi:"portRange"`
}

// NewInstanceAllowedIpAttachment registers a new resource with the given unique name, arguments, and options.
func NewInstanceAllowedIpAttachment(ctx *pulumi.Context,
	name string, args *InstanceAllowedIpAttachmentArgs, opts ...pulumi.ResourceOption) (*InstanceAllowedIpAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedIp == nil {
		return nil, errors.New("invalid value for required argument 'AllowedIp'")
	}
	if args.AllowedType == nil {
		return nil, errors.New("invalid value for required argument 'AllowedType'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.PortRange == nil {
		return nil, errors.New("invalid value for required argument 'PortRange'")
	}
	var resource InstanceAllowedIpAttachment
	err := ctx.RegisterResource("alicloud:alikafka/instanceAllowedIpAttachment:InstanceAllowedIpAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceAllowedIpAttachment gets an existing InstanceAllowedIpAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceAllowedIpAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceAllowedIpAttachmentState, opts ...pulumi.ResourceOption) (*InstanceAllowedIpAttachment, error) {
	var resource InstanceAllowedIpAttachment
	err := ctx.ReadResource("alicloud:alikafka/instanceAllowedIpAttachment:InstanceAllowedIpAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceAllowedIpAttachment resources.
type instanceAllowedIpAttachmentState struct {
	// The allowed ip. It can be a CIDR block.
	AllowedIp *string `pulumi:"allowedIp"`
	// The type of whitelist. Valid Value: `vpc`, `internet`. **NOTE:** From version 1.179.0, `allowedType` can be set to `internet`.
	AllowedType *string `pulumi:"allowedType"`
	// The ID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// The Port range.  Valid Value: `9092/9092`, `9093/9093`. **NOTE:** From version 1.179.0, `portRange` can be set to `9093/9093`.
	// - `9092/9092`: port range for a VPC whitelist.
	// - `9093/9093`: port range for an Internet whitelist.
	PortRange *string `pulumi:"portRange"`
}

type InstanceAllowedIpAttachmentState struct {
	// The allowed ip. It can be a CIDR block.
	AllowedIp pulumi.StringPtrInput
	// The type of whitelist. Valid Value: `vpc`, `internet`. **NOTE:** From version 1.179.0, `allowedType` can be set to `internet`.
	AllowedType pulumi.StringPtrInput
	// The ID of the instance.
	InstanceId pulumi.StringPtrInput
	// The Port range.  Valid Value: `9092/9092`, `9093/9093`. **NOTE:** From version 1.179.0, `portRange` can be set to `9093/9093`.
	// - `9092/9092`: port range for a VPC whitelist.
	// - `9093/9093`: port range for an Internet whitelist.
	PortRange pulumi.StringPtrInput
}

func (InstanceAllowedIpAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceAllowedIpAttachmentState)(nil)).Elem()
}

type instanceAllowedIpAttachmentArgs struct {
	// The allowed ip. It can be a CIDR block.
	AllowedIp string `pulumi:"allowedIp"`
	// The type of whitelist. Valid Value: `vpc`, `internet`. **NOTE:** From version 1.179.0, `allowedType` can be set to `internet`.
	AllowedType string `pulumi:"allowedType"`
	// The ID of the instance.
	InstanceId string `pulumi:"instanceId"`
	// The Port range.  Valid Value: `9092/9092`, `9093/9093`. **NOTE:** From version 1.179.0, `portRange` can be set to `9093/9093`.
	// - `9092/9092`: port range for a VPC whitelist.
	// - `9093/9093`: port range for an Internet whitelist.
	PortRange string `pulumi:"portRange"`
}

// The set of arguments for constructing a InstanceAllowedIpAttachment resource.
type InstanceAllowedIpAttachmentArgs struct {
	// The allowed ip. It can be a CIDR block.
	AllowedIp pulumi.StringInput
	// The type of whitelist. Valid Value: `vpc`, `internet`. **NOTE:** From version 1.179.0, `allowedType` can be set to `internet`.
	AllowedType pulumi.StringInput
	// The ID of the instance.
	InstanceId pulumi.StringInput
	// The Port range.  Valid Value: `9092/9092`, `9093/9093`. **NOTE:** From version 1.179.0, `portRange` can be set to `9093/9093`.
	// - `9092/9092`: port range for a VPC whitelist.
	// - `9093/9093`: port range for an Internet whitelist.
	PortRange pulumi.StringInput
}

func (InstanceAllowedIpAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceAllowedIpAttachmentArgs)(nil)).Elem()
}

type InstanceAllowedIpAttachmentInput interface {
	pulumi.Input

	ToInstanceAllowedIpAttachmentOutput() InstanceAllowedIpAttachmentOutput
	ToInstanceAllowedIpAttachmentOutputWithContext(ctx context.Context) InstanceAllowedIpAttachmentOutput
}

func (*InstanceAllowedIpAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAllowedIpAttachment)(nil)).Elem()
}

func (i *InstanceAllowedIpAttachment) ToInstanceAllowedIpAttachmentOutput() InstanceAllowedIpAttachmentOutput {
	return i.ToInstanceAllowedIpAttachmentOutputWithContext(context.Background())
}

func (i *InstanceAllowedIpAttachment) ToInstanceAllowedIpAttachmentOutputWithContext(ctx context.Context) InstanceAllowedIpAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAllowedIpAttachmentOutput)
}

// InstanceAllowedIpAttachmentArrayInput is an input type that accepts InstanceAllowedIpAttachmentArray and InstanceAllowedIpAttachmentArrayOutput values.
// You can construct a concrete instance of `InstanceAllowedIpAttachmentArrayInput` via:
//
//	InstanceAllowedIpAttachmentArray{ InstanceAllowedIpAttachmentArgs{...} }
type InstanceAllowedIpAttachmentArrayInput interface {
	pulumi.Input

	ToInstanceAllowedIpAttachmentArrayOutput() InstanceAllowedIpAttachmentArrayOutput
	ToInstanceAllowedIpAttachmentArrayOutputWithContext(context.Context) InstanceAllowedIpAttachmentArrayOutput
}

type InstanceAllowedIpAttachmentArray []InstanceAllowedIpAttachmentInput

func (InstanceAllowedIpAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceAllowedIpAttachment)(nil)).Elem()
}

func (i InstanceAllowedIpAttachmentArray) ToInstanceAllowedIpAttachmentArrayOutput() InstanceAllowedIpAttachmentArrayOutput {
	return i.ToInstanceAllowedIpAttachmentArrayOutputWithContext(context.Background())
}

func (i InstanceAllowedIpAttachmentArray) ToInstanceAllowedIpAttachmentArrayOutputWithContext(ctx context.Context) InstanceAllowedIpAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAllowedIpAttachmentArrayOutput)
}

// InstanceAllowedIpAttachmentMapInput is an input type that accepts InstanceAllowedIpAttachmentMap and InstanceAllowedIpAttachmentMapOutput values.
// You can construct a concrete instance of `InstanceAllowedIpAttachmentMapInput` via:
//
//	InstanceAllowedIpAttachmentMap{ "key": InstanceAllowedIpAttachmentArgs{...} }
type InstanceAllowedIpAttachmentMapInput interface {
	pulumi.Input

	ToInstanceAllowedIpAttachmentMapOutput() InstanceAllowedIpAttachmentMapOutput
	ToInstanceAllowedIpAttachmentMapOutputWithContext(context.Context) InstanceAllowedIpAttachmentMapOutput
}

type InstanceAllowedIpAttachmentMap map[string]InstanceAllowedIpAttachmentInput

func (InstanceAllowedIpAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceAllowedIpAttachment)(nil)).Elem()
}

func (i InstanceAllowedIpAttachmentMap) ToInstanceAllowedIpAttachmentMapOutput() InstanceAllowedIpAttachmentMapOutput {
	return i.ToInstanceAllowedIpAttachmentMapOutputWithContext(context.Background())
}

func (i InstanceAllowedIpAttachmentMap) ToInstanceAllowedIpAttachmentMapOutputWithContext(ctx context.Context) InstanceAllowedIpAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAllowedIpAttachmentMapOutput)
}

type InstanceAllowedIpAttachmentOutput struct{ *pulumi.OutputState }

func (InstanceAllowedIpAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAllowedIpAttachment)(nil)).Elem()
}

func (o InstanceAllowedIpAttachmentOutput) ToInstanceAllowedIpAttachmentOutput() InstanceAllowedIpAttachmentOutput {
	return o
}

func (o InstanceAllowedIpAttachmentOutput) ToInstanceAllowedIpAttachmentOutputWithContext(ctx context.Context) InstanceAllowedIpAttachmentOutput {
	return o
}

// The allowed ip. It can be a CIDR block.
func (o InstanceAllowedIpAttachmentOutput) AllowedIp() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceAllowedIpAttachment) pulumi.StringOutput { return v.AllowedIp }).(pulumi.StringOutput)
}

// The type of whitelist. Valid Value: `vpc`, `internet`. **NOTE:** From version 1.179.0, `allowedType` can be set to `internet`.
func (o InstanceAllowedIpAttachmentOutput) AllowedType() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceAllowedIpAttachment) pulumi.StringOutput { return v.AllowedType }).(pulumi.StringOutput)
}

// The ID of the instance.
func (o InstanceAllowedIpAttachmentOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceAllowedIpAttachment) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The Port range.  Valid Value: `9092/9092`, `9093/9093`. **NOTE:** From version 1.179.0, `portRange` can be set to `9093/9093`.
// - `9092/9092`: port range for a VPC whitelist.
// - `9093/9093`: port range for an Internet whitelist.
func (o InstanceAllowedIpAttachmentOutput) PortRange() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceAllowedIpAttachment) pulumi.StringOutput { return v.PortRange }).(pulumi.StringOutput)
}

type InstanceAllowedIpAttachmentArrayOutput struct{ *pulumi.OutputState }

func (InstanceAllowedIpAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceAllowedIpAttachment)(nil)).Elem()
}

func (o InstanceAllowedIpAttachmentArrayOutput) ToInstanceAllowedIpAttachmentArrayOutput() InstanceAllowedIpAttachmentArrayOutput {
	return o
}

func (o InstanceAllowedIpAttachmentArrayOutput) ToInstanceAllowedIpAttachmentArrayOutputWithContext(ctx context.Context) InstanceAllowedIpAttachmentArrayOutput {
	return o
}

func (o InstanceAllowedIpAttachmentArrayOutput) Index(i pulumi.IntInput) InstanceAllowedIpAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceAllowedIpAttachment {
		return vs[0].([]*InstanceAllowedIpAttachment)[vs[1].(int)]
	}).(InstanceAllowedIpAttachmentOutput)
}

type InstanceAllowedIpAttachmentMapOutput struct{ *pulumi.OutputState }

func (InstanceAllowedIpAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceAllowedIpAttachment)(nil)).Elem()
}

func (o InstanceAllowedIpAttachmentMapOutput) ToInstanceAllowedIpAttachmentMapOutput() InstanceAllowedIpAttachmentMapOutput {
	return o
}

func (o InstanceAllowedIpAttachmentMapOutput) ToInstanceAllowedIpAttachmentMapOutputWithContext(ctx context.Context) InstanceAllowedIpAttachmentMapOutput {
	return o
}

func (o InstanceAllowedIpAttachmentMapOutput) MapIndex(k pulumi.StringInput) InstanceAllowedIpAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceAllowedIpAttachment {
		return vs[0].(map[string]*InstanceAllowedIpAttachment)[vs[1].(string)]
	}).(InstanceAllowedIpAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAllowedIpAttachmentInput)(nil)).Elem(), &InstanceAllowedIpAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAllowedIpAttachmentArrayInput)(nil)).Elem(), InstanceAllowedIpAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAllowedIpAttachmentMapInput)(nil)).Elem(), InstanceAllowedIpAttachmentMap{})
	pulumi.RegisterOutputType(InstanceAllowedIpAttachmentOutput{})
	pulumi.RegisterOutputType(InstanceAllowedIpAttachmentArrayOutput{})
	pulumi.RegisterOutputType(InstanceAllowedIpAttachmentMapOutput{})
}
