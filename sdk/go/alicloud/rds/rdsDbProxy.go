// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information about RDS database exclusive agent and its usage, see [Dedicated proxy (read/write splitting).](https://www.alibabacloud.com/help/en/apsaradb-for-rds/latest/dedicated-proxy).
// > **NOTE:** Available in 1.193.0+.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/rds"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			creation := "Rds"
//			if param := cfg.Get("creation"); param != "" {
//				creation = param
//			}
//			name := "dbInstancevpc"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef(creation),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
//				VpcId:       defaultNetwork.ID(),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				ZoneId:      *pulumi.String(defaultZones.Zones[0].Id),
//				VswitchName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultInstance, err := rds.NewInstance(ctx, "defaultInstance", &rds.InstanceArgs{
//				Engine:                pulumi.String("MySQL"),
//				EngineVersion:         pulumi.String("5.7"),
//				InstanceType:          pulumi.String("rds.mysql.c1.large"),
//				InstanceStorage:       pulumi.Int(20),
//				InstanceChargeType:    pulumi.String("Postpaid"),
//				InstanceName:          pulumi.String(name),
//				VswitchId:             defaultSwitch.ID(),
//				DbInstanceStorageType: pulumi.String("local_ssd"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultReadOnlyInstance, err := rds.NewReadOnlyInstance(ctx, "defaultReadOnlyInstance", &rds.ReadOnlyInstanceArgs{
//				MasterDbInstanceId: defaultInstance.ID(),
//				ZoneId:             defaultInstance.ZoneId,
//				EngineVersion:      defaultInstance.EngineVersion,
//				InstanceType:       pulumi.String("rds.mysql.s3.large"),
//				InstanceStorage:    pulumi.Int(20),
//				InstanceName:       pulumi.String(fmt.Sprintf("%vro", name)),
//				VswitchId:          defaultSwitch.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rds.NewRdsDbProxy(ctx, "defaultRdsDbProxy", &rds.RdsDbProxyArgs{
//				InstanceId:                       defaultInstance.ID(),
//				InstanceNetworkType:              pulumi.String("VPC"),
//				VpcId:                            defaultInstance.VpcId,
//				VswitchId:                        defaultInstance.VswitchId,
//				DbProxyInstanceNum:               pulumi.Int(2),
//				DbProxyConnectionPrefix:          pulumi.String("ttest001"),
//				DbProxyConnectStringPort:         pulumi.Int(3306),
//				DbProxyEndpointReadWriteMode:     pulumi.String("ReadWrite"),
//				ReadOnlyInstanceMaxDelayTime:     pulumi.Int(90),
//				DbProxyFeatures:                  pulumi.String("TransactionReadSqlRouteOptimizeStatus:1;ConnectionPersist:1;ReadWriteSpliting:1"),
//				ReadOnlyInstanceDistributionType: pulumi.String("Custom"),
//				ReadOnlyInstanceWeights: rds.RdsDbProxyReadOnlyInstanceWeightArray{
//					&rds.RdsDbProxyReadOnlyInstanceWeightArgs{
//						InstanceId: defaultInstance.ID(),
//						Weight:     pulumi.String("100"),
//					},
//					&rds.RdsDbProxyReadOnlyInstanceWeightArgs{
//						InstanceId: defaultReadOnlyInstance.ID(),
//						Weight:     pulumi.String("500"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// > **NOTE:** Resource `rds.RdsDbProxy` should be created after `rds.ReadOnlyInstance`, so the `dependsOn` statement is necessary.
// ## Block readOnlyInstanceWeight
//
// The readOnlyInstanceWeight mapping supports the following:
//
// * `instanceId` - (Required) The Id of the instance and its read-only instances that can run database.
// * `weight` - (Required) Weight of instances that can run the database and their read-only instances. Read weights increase in increments of 100, and the maximum read weight is 10000.
//
// ## Import
//
// RDS database proxy feature can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:rds/rdsDbProxy:RdsDbProxy example abc12345678
//
// ```
type RdsDbProxy struct {
	pulumi.CustomResourceState

	// The port number that is associated with the proxy endpoint.
	DbProxyConnectStringPort pulumi.IntOutput `pulumi:"dbProxyConnectStringPort"`
	// The new prefix of the proxy endpoint. Enter a prefix.
	DbProxyConnectionPrefix pulumi.StringOutput `pulumi:"dbProxyConnectionPrefix"`
	// Connection instance string.
	DbProxyConnectionString pulumi.StringOutput `pulumi:"dbProxyConnectionString"`
	// Remarks of agent terminal.
	DbProxyEndpointAliases pulumi.StringOutput `pulumi:"dbProxyEndpointAliases"`
	// Proxy connection address ID.
	DbProxyEndpointId pulumi.StringOutput `pulumi:"dbProxyEndpointId"`
	// The read and write attributes of the proxy terminal. Valid values:
	// - ReadWrite: The proxy terminal connects to the primary instance and can receive both read and write requests.
	// - ReadOnly: The proxy terminal does not connect to the primary instance and can receive only read requests. This is the default value.
	DbProxyEndpointReadWriteMode pulumi.StringOutput `pulumi:"dbProxyEndpointReadWriteMode"`
	// The features that you want to enable for the proxy endpoint. If you specify more than one feature, separate the features with semicolons (;). Format: Feature 1:Status;Feature 2:Status;.... Do not add a semicolon (;) at the end of the last value. Valid feature values:
	// - ReadWriteSpliting: read/write splitting.
	// - ConnectionPersist: connection pooling.
	// - TransactionReadSqlRouteOptimizeStatus: transaction splitting.
	//   Valid status values:
	// - 1: enabled.
	// - 0: disabled.
	DbProxyFeatures pulumi.StringOutput `pulumi:"dbProxyFeatures"`
	// The number of proxy instances that are enabled. Valid values: 1 to 60.
	DbProxyInstanceNum pulumi.IntOutput `pulumi:"dbProxyInstanceNum"`
	// The SSL configuration setting that you want to apply on the instance. Valid values:
	// - Close: disables SSL encryption.
	// - Open: enables SSL encryption or modifies the endpoint that requires SSL encryption.
	// - Update: updates the validity period of the SSL certificate.
	DbProxySslEnabled pulumi.StringOutput `pulumi:"dbProxySslEnabled"`
	// The point in time at which you want to apply the new database proxy settings. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	EffectiveSpecificTime pulumi.StringOutput `pulumi:"effectiveSpecificTime"`
	// When modifying the number of proxy instances,The time when you want to apply the new database proxy settings.Valid values:
	// - Immediate: ApsaraDB RDS immediately applies the new settings.
	// - MaintainTime: ApsaraDB RDS applies the new settings during the maintenance window that you specified. For more information, see Modify the maintenance window.
	// - SpecificTime: ApsaraDB RDS applies the new settings at a specified point in time.
	EffectiveTime pulumi.StringOutput `pulumi:"effectiveTime"`
	// The Id of instance that can run database.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The network type of the instance. Set the value to VPC.
	InstanceNetworkType pulumi.StringOutput `pulumi:"instanceNetworkType"`
	// Network type of proxy connection address.
	NetType pulumi.StringOutput `pulumi:"netType"`
	// The policy that is used to allocate read weights. Valid values:
	// - Standard: ApsaraDB RDS automatically allocates read weights to the instance and its read-only instances based on the specifications of the instances.
	// - Custom: You must manually allocate read weights to the instance and its read-only instances.
	ReadOnlyInstanceDistributionType pulumi.StringOutput `pulumi:"readOnlyInstanceDistributionType"`
	// The maximum latency threshold that is allowed for read/write splitting. If the latency on a read-only instance exceeds the threshold that you specified, ApsaraDB RDS no longer forwards read requests to the read-only instance. If you do not specify this parameter, the default value of this parameter is retained. Unit: seconds. Valid values: 0 to 3600.
	ReadOnlyInstanceMaxDelayTime pulumi.IntOutput `pulumi:"readOnlyInstanceMaxDelayTime"`
	// A list of the read weights of the instance and its read-only instances.  It contains two sub-fields(instance_id and weight). Read weights increase in increments of 100, and the maximum read weight is 10000.
	ReadOnlyInstanceWeights RdsDbProxyReadOnlyInstanceWeightArrayOutput `pulumi:"readOnlyInstanceWeights"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The time when the certificate expires.
	SslExpiredTime pulumi.StringOutput `pulumi:"sslExpiredTime"`
	// The point in time at which you want to upgrade the database proxy version of the instance. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	SwitchTime pulumi.StringPtrOutput `pulumi:"switchTime"`
	// The time when you want to upgrade the database proxy version of the instance. Valid values:
	// - MaintainTime: ApsaraDB RDS performs the upgrade during the maintenance window that you specified. This is the default value. For more information, see Modify the maintenance window.
	// - Immediate: ApsaraDB RDS immediately performs the upgrade.
	// - SpecificTime: ApsaraDB RDS performs the upgrade at a specified point in time.
	UpgradeTime pulumi.StringPtrOutput `pulumi:"upgradeTime"`
	// The ID of the virtual private cloud (VPC) to which the instance belongs.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The ID of the vSwitch that is associated with the specified VPC.
	VswitchId pulumi.StringOutput `pulumi:"vswitchId"`
}

// NewRdsDbProxy registers a new resource with the given unique name, arguments, and options.
func NewRdsDbProxy(ctx *pulumi.Context,
	name string, args *RdsDbProxyArgs, opts ...pulumi.ResourceOption) (*RdsDbProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbProxyInstanceNum == nil {
		return nil, errors.New("invalid value for required argument 'DbProxyInstanceNum'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.InstanceNetworkType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceNetworkType'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.VswitchId == nil {
		return nil, errors.New("invalid value for required argument 'VswitchId'")
	}
	var resource RdsDbProxy
	err := ctx.RegisterResource("alicloud:rds/rdsDbProxy:RdsDbProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsDbProxy gets an existing RdsDbProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsDbProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsDbProxyState, opts ...pulumi.ResourceOption) (*RdsDbProxy, error) {
	var resource RdsDbProxy
	err := ctx.ReadResource("alicloud:rds/rdsDbProxy:RdsDbProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsDbProxy resources.
type rdsDbProxyState struct {
	// The port number that is associated with the proxy endpoint.
	DbProxyConnectStringPort *int `pulumi:"dbProxyConnectStringPort"`
	// The new prefix of the proxy endpoint. Enter a prefix.
	DbProxyConnectionPrefix *string `pulumi:"dbProxyConnectionPrefix"`
	// Connection instance string.
	DbProxyConnectionString *string `pulumi:"dbProxyConnectionString"`
	// Remarks of agent terminal.
	DbProxyEndpointAliases *string `pulumi:"dbProxyEndpointAliases"`
	// Proxy connection address ID.
	DbProxyEndpointId *string `pulumi:"dbProxyEndpointId"`
	// The read and write attributes of the proxy terminal. Valid values:
	// - ReadWrite: The proxy terminal connects to the primary instance and can receive both read and write requests.
	// - ReadOnly: The proxy terminal does not connect to the primary instance and can receive only read requests. This is the default value.
	DbProxyEndpointReadWriteMode *string `pulumi:"dbProxyEndpointReadWriteMode"`
	// The features that you want to enable for the proxy endpoint. If you specify more than one feature, separate the features with semicolons (;). Format: Feature 1:Status;Feature 2:Status;.... Do not add a semicolon (;) at the end of the last value. Valid feature values:
	// - ReadWriteSpliting: read/write splitting.
	// - ConnectionPersist: connection pooling.
	// - TransactionReadSqlRouteOptimizeStatus: transaction splitting.
	//   Valid status values:
	// - 1: enabled.
	// - 0: disabled.
	DbProxyFeatures *string `pulumi:"dbProxyFeatures"`
	// The number of proxy instances that are enabled. Valid values: 1 to 60.
	DbProxyInstanceNum *int `pulumi:"dbProxyInstanceNum"`
	// The SSL configuration setting that you want to apply on the instance. Valid values:
	// - Close: disables SSL encryption.
	// - Open: enables SSL encryption or modifies the endpoint that requires SSL encryption.
	// - Update: updates the validity period of the SSL certificate.
	DbProxySslEnabled *string `pulumi:"dbProxySslEnabled"`
	// The point in time at which you want to apply the new database proxy settings. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	EffectiveSpecificTime *string `pulumi:"effectiveSpecificTime"`
	// When modifying the number of proxy instances,The time when you want to apply the new database proxy settings.Valid values:
	// - Immediate: ApsaraDB RDS immediately applies the new settings.
	// - MaintainTime: ApsaraDB RDS applies the new settings during the maintenance window that you specified. For more information, see Modify the maintenance window.
	// - SpecificTime: ApsaraDB RDS applies the new settings at a specified point in time.
	EffectiveTime *string `pulumi:"effectiveTime"`
	// The Id of instance that can run database.
	InstanceId *string `pulumi:"instanceId"`
	// The network type of the instance. Set the value to VPC.
	InstanceNetworkType *string `pulumi:"instanceNetworkType"`
	// Network type of proxy connection address.
	NetType *string `pulumi:"netType"`
	// The policy that is used to allocate read weights. Valid values:
	// - Standard: ApsaraDB RDS automatically allocates read weights to the instance and its read-only instances based on the specifications of the instances.
	// - Custom: You must manually allocate read weights to the instance and its read-only instances.
	ReadOnlyInstanceDistributionType *string `pulumi:"readOnlyInstanceDistributionType"`
	// The maximum latency threshold that is allowed for read/write splitting. If the latency on a read-only instance exceeds the threshold that you specified, ApsaraDB RDS no longer forwards read requests to the read-only instance. If you do not specify this parameter, the default value of this parameter is retained. Unit: seconds. Valid values: 0 to 3600.
	ReadOnlyInstanceMaxDelayTime *int `pulumi:"readOnlyInstanceMaxDelayTime"`
	// A list of the read weights of the instance and its read-only instances.  It contains two sub-fields(instance_id and weight). Read weights increase in increments of 100, and the maximum read weight is 10000.
	ReadOnlyInstanceWeights []RdsDbProxyReadOnlyInstanceWeight `pulumi:"readOnlyInstanceWeights"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The time when the certificate expires.
	SslExpiredTime *string `pulumi:"sslExpiredTime"`
	// The point in time at which you want to upgrade the database proxy version of the instance. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	SwitchTime *string `pulumi:"switchTime"`
	// The time when you want to upgrade the database proxy version of the instance. Valid values:
	// - MaintainTime: ApsaraDB RDS performs the upgrade during the maintenance window that you specified. This is the default value. For more information, see Modify the maintenance window.
	// - Immediate: ApsaraDB RDS immediately performs the upgrade.
	// - SpecificTime: ApsaraDB RDS performs the upgrade at a specified point in time.
	UpgradeTime *string `pulumi:"upgradeTime"`
	// The ID of the virtual private cloud (VPC) to which the instance belongs.
	VpcId *string `pulumi:"vpcId"`
	// The ID of the vSwitch that is associated with the specified VPC.
	VswitchId *string `pulumi:"vswitchId"`
}

type RdsDbProxyState struct {
	// The port number that is associated with the proxy endpoint.
	DbProxyConnectStringPort pulumi.IntPtrInput
	// The new prefix of the proxy endpoint. Enter a prefix.
	DbProxyConnectionPrefix pulumi.StringPtrInput
	// Connection instance string.
	DbProxyConnectionString pulumi.StringPtrInput
	// Remarks of agent terminal.
	DbProxyEndpointAliases pulumi.StringPtrInput
	// Proxy connection address ID.
	DbProxyEndpointId pulumi.StringPtrInput
	// The read and write attributes of the proxy terminal. Valid values:
	// - ReadWrite: The proxy terminal connects to the primary instance and can receive both read and write requests.
	// - ReadOnly: The proxy terminal does not connect to the primary instance and can receive only read requests. This is the default value.
	DbProxyEndpointReadWriteMode pulumi.StringPtrInput
	// The features that you want to enable for the proxy endpoint. If you specify more than one feature, separate the features with semicolons (;). Format: Feature 1:Status;Feature 2:Status;.... Do not add a semicolon (;) at the end of the last value. Valid feature values:
	// - ReadWriteSpliting: read/write splitting.
	// - ConnectionPersist: connection pooling.
	// - TransactionReadSqlRouteOptimizeStatus: transaction splitting.
	//   Valid status values:
	// - 1: enabled.
	// - 0: disabled.
	DbProxyFeatures pulumi.StringPtrInput
	// The number of proxy instances that are enabled. Valid values: 1 to 60.
	DbProxyInstanceNum pulumi.IntPtrInput
	// The SSL configuration setting that you want to apply on the instance. Valid values:
	// - Close: disables SSL encryption.
	// - Open: enables SSL encryption or modifies the endpoint that requires SSL encryption.
	// - Update: updates the validity period of the SSL certificate.
	DbProxySslEnabled pulumi.StringPtrInput
	// The point in time at which you want to apply the new database proxy settings. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	EffectiveSpecificTime pulumi.StringPtrInput
	// When modifying the number of proxy instances,The time when you want to apply the new database proxy settings.Valid values:
	// - Immediate: ApsaraDB RDS immediately applies the new settings.
	// - MaintainTime: ApsaraDB RDS applies the new settings during the maintenance window that you specified. For more information, see Modify the maintenance window.
	// - SpecificTime: ApsaraDB RDS applies the new settings at a specified point in time.
	EffectiveTime pulumi.StringPtrInput
	// The Id of instance that can run database.
	InstanceId pulumi.StringPtrInput
	// The network type of the instance. Set the value to VPC.
	InstanceNetworkType pulumi.StringPtrInput
	// Network type of proxy connection address.
	NetType pulumi.StringPtrInput
	// The policy that is used to allocate read weights. Valid values:
	// - Standard: ApsaraDB RDS automatically allocates read weights to the instance and its read-only instances based on the specifications of the instances.
	// - Custom: You must manually allocate read weights to the instance and its read-only instances.
	ReadOnlyInstanceDistributionType pulumi.StringPtrInput
	// The maximum latency threshold that is allowed for read/write splitting. If the latency on a read-only instance exceeds the threshold that you specified, ApsaraDB RDS no longer forwards read requests to the read-only instance. If you do not specify this parameter, the default value of this parameter is retained. Unit: seconds. Valid values: 0 to 3600.
	ReadOnlyInstanceMaxDelayTime pulumi.IntPtrInput
	// A list of the read weights of the instance and its read-only instances.  It contains two sub-fields(instance_id and weight). Read weights increase in increments of 100, and the maximum read weight is 10000.
	ReadOnlyInstanceWeights RdsDbProxyReadOnlyInstanceWeightArrayInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The time when the certificate expires.
	SslExpiredTime pulumi.StringPtrInput
	// The point in time at which you want to upgrade the database proxy version of the instance. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	SwitchTime pulumi.StringPtrInput
	// The time when you want to upgrade the database proxy version of the instance. Valid values:
	// - MaintainTime: ApsaraDB RDS performs the upgrade during the maintenance window that you specified. This is the default value. For more information, see Modify the maintenance window.
	// - Immediate: ApsaraDB RDS immediately performs the upgrade.
	// - SpecificTime: ApsaraDB RDS performs the upgrade at a specified point in time.
	UpgradeTime pulumi.StringPtrInput
	// The ID of the virtual private cloud (VPC) to which the instance belongs.
	VpcId pulumi.StringPtrInput
	// The ID of the vSwitch that is associated with the specified VPC.
	VswitchId pulumi.StringPtrInput
}

func (RdsDbProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsDbProxyState)(nil)).Elem()
}

type rdsDbProxyArgs struct {
	// The port number that is associated with the proxy endpoint.
	DbProxyConnectStringPort *int `pulumi:"dbProxyConnectStringPort"`
	// The new prefix of the proxy endpoint. Enter a prefix.
	DbProxyConnectionPrefix *string `pulumi:"dbProxyConnectionPrefix"`
	// The read and write attributes of the proxy terminal. Valid values:
	// - ReadWrite: The proxy terminal connects to the primary instance and can receive both read and write requests.
	// - ReadOnly: The proxy terminal does not connect to the primary instance and can receive only read requests. This is the default value.
	DbProxyEndpointReadWriteMode *string `pulumi:"dbProxyEndpointReadWriteMode"`
	// The features that you want to enable for the proxy endpoint. If you specify more than one feature, separate the features with semicolons (;). Format: Feature 1:Status;Feature 2:Status;.... Do not add a semicolon (;) at the end of the last value. Valid feature values:
	// - ReadWriteSpliting: read/write splitting.
	// - ConnectionPersist: connection pooling.
	// - TransactionReadSqlRouteOptimizeStatus: transaction splitting.
	//   Valid status values:
	// - 1: enabled.
	// - 0: disabled.
	DbProxyFeatures *string `pulumi:"dbProxyFeatures"`
	// The number of proxy instances that are enabled. Valid values: 1 to 60.
	DbProxyInstanceNum int `pulumi:"dbProxyInstanceNum"`
	// The SSL configuration setting that you want to apply on the instance. Valid values:
	// - Close: disables SSL encryption.
	// - Open: enables SSL encryption or modifies the endpoint that requires SSL encryption.
	// - Update: updates the validity period of the SSL certificate.
	DbProxySslEnabled *string `pulumi:"dbProxySslEnabled"`
	// The point in time at which you want to apply the new database proxy settings. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	EffectiveSpecificTime *string `pulumi:"effectiveSpecificTime"`
	// When modifying the number of proxy instances,The time when you want to apply the new database proxy settings.Valid values:
	// - Immediate: ApsaraDB RDS immediately applies the new settings.
	// - MaintainTime: ApsaraDB RDS applies the new settings during the maintenance window that you specified. For more information, see Modify the maintenance window.
	// - SpecificTime: ApsaraDB RDS applies the new settings at a specified point in time.
	EffectiveTime *string `pulumi:"effectiveTime"`
	// The Id of instance that can run database.
	InstanceId string `pulumi:"instanceId"`
	// The network type of the instance. Set the value to VPC.
	InstanceNetworkType string `pulumi:"instanceNetworkType"`
	// The policy that is used to allocate read weights. Valid values:
	// - Standard: ApsaraDB RDS automatically allocates read weights to the instance and its read-only instances based on the specifications of the instances.
	// - Custom: You must manually allocate read weights to the instance and its read-only instances.
	ReadOnlyInstanceDistributionType *string `pulumi:"readOnlyInstanceDistributionType"`
	// The maximum latency threshold that is allowed for read/write splitting. If the latency on a read-only instance exceeds the threshold that you specified, ApsaraDB RDS no longer forwards read requests to the read-only instance. If you do not specify this parameter, the default value of this parameter is retained. Unit: seconds. Valid values: 0 to 3600.
	ReadOnlyInstanceMaxDelayTime *int `pulumi:"readOnlyInstanceMaxDelayTime"`
	// A list of the read weights of the instance and its read-only instances.  It contains two sub-fields(instance_id and weight). Read weights increase in increments of 100, and the maximum read weight is 10000.
	ReadOnlyInstanceWeights []RdsDbProxyReadOnlyInstanceWeight `pulumi:"readOnlyInstanceWeights"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The point in time at which you want to upgrade the database proxy version of the instance. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	SwitchTime *string `pulumi:"switchTime"`
	// The time when you want to upgrade the database proxy version of the instance. Valid values:
	// - MaintainTime: ApsaraDB RDS performs the upgrade during the maintenance window that you specified. This is the default value. For more information, see Modify the maintenance window.
	// - Immediate: ApsaraDB RDS immediately performs the upgrade.
	// - SpecificTime: ApsaraDB RDS performs the upgrade at a specified point in time.
	UpgradeTime *string `pulumi:"upgradeTime"`
	// The ID of the virtual private cloud (VPC) to which the instance belongs.
	VpcId string `pulumi:"vpcId"`
	// The ID of the vSwitch that is associated with the specified VPC.
	VswitchId string `pulumi:"vswitchId"`
}

// The set of arguments for constructing a RdsDbProxy resource.
type RdsDbProxyArgs struct {
	// The port number that is associated with the proxy endpoint.
	DbProxyConnectStringPort pulumi.IntPtrInput
	// The new prefix of the proxy endpoint. Enter a prefix.
	DbProxyConnectionPrefix pulumi.StringPtrInput
	// The read and write attributes of the proxy terminal. Valid values:
	// - ReadWrite: The proxy terminal connects to the primary instance and can receive both read and write requests.
	// - ReadOnly: The proxy terminal does not connect to the primary instance and can receive only read requests. This is the default value.
	DbProxyEndpointReadWriteMode pulumi.StringPtrInput
	// The features that you want to enable for the proxy endpoint. If you specify more than one feature, separate the features with semicolons (;). Format: Feature 1:Status;Feature 2:Status;.... Do not add a semicolon (;) at the end of the last value. Valid feature values:
	// - ReadWriteSpliting: read/write splitting.
	// - ConnectionPersist: connection pooling.
	// - TransactionReadSqlRouteOptimizeStatus: transaction splitting.
	//   Valid status values:
	// - 1: enabled.
	// - 0: disabled.
	DbProxyFeatures pulumi.StringPtrInput
	// The number of proxy instances that are enabled. Valid values: 1 to 60.
	DbProxyInstanceNum pulumi.IntInput
	// The SSL configuration setting that you want to apply on the instance. Valid values:
	// - Close: disables SSL encryption.
	// - Open: enables SSL encryption or modifies the endpoint that requires SSL encryption.
	// - Update: updates the validity period of the SSL certificate.
	DbProxySslEnabled pulumi.StringPtrInput
	// The point in time at which you want to apply the new database proxy settings. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	EffectiveSpecificTime pulumi.StringPtrInput
	// When modifying the number of proxy instances,The time when you want to apply the new database proxy settings.Valid values:
	// - Immediate: ApsaraDB RDS immediately applies the new settings.
	// - MaintainTime: ApsaraDB RDS applies the new settings during the maintenance window that you specified. For more information, see Modify the maintenance window.
	// - SpecificTime: ApsaraDB RDS applies the new settings at a specified point in time.
	EffectiveTime pulumi.StringPtrInput
	// The Id of instance that can run database.
	InstanceId pulumi.StringInput
	// The network type of the instance. Set the value to VPC.
	InstanceNetworkType pulumi.StringInput
	// The policy that is used to allocate read weights. Valid values:
	// - Standard: ApsaraDB RDS automatically allocates read weights to the instance and its read-only instances based on the specifications of the instances.
	// - Custom: You must manually allocate read weights to the instance and its read-only instances.
	ReadOnlyInstanceDistributionType pulumi.StringPtrInput
	// The maximum latency threshold that is allowed for read/write splitting. If the latency on a read-only instance exceeds the threshold that you specified, ApsaraDB RDS no longer forwards read requests to the read-only instance. If you do not specify this parameter, the default value of this parameter is retained. Unit: seconds. Valid values: 0 to 3600.
	ReadOnlyInstanceMaxDelayTime pulumi.IntPtrInput
	// A list of the read weights of the instance and its read-only instances.  It contains two sub-fields(instance_id and weight). Read weights increase in increments of 100, and the maximum read weight is 10000.
	ReadOnlyInstanceWeights RdsDbProxyReadOnlyInstanceWeightArrayInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The point in time at which you want to upgrade the database proxy version of the instance. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	SwitchTime pulumi.StringPtrInput
	// The time when you want to upgrade the database proxy version of the instance. Valid values:
	// - MaintainTime: ApsaraDB RDS performs the upgrade during the maintenance window that you specified. This is the default value. For more information, see Modify the maintenance window.
	// - Immediate: ApsaraDB RDS immediately performs the upgrade.
	// - SpecificTime: ApsaraDB RDS performs the upgrade at a specified point in time.
	UpgradeTime pulumi.StringPtrInput
	// The ID of the virtual private cloud (VPC) to which the instance belongs.
	VpcId pulumi.StringInput
	// The ID of the vSwitch that is associated with the specified VPC.
	VswitchId pulumi.StringInput
}

func (RdsDbProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsDbProxyArgs)(nil)).Elem()
}

type RdsDbProxyInput interface {
	pulumi.Input

	ToRdsDbProxyOutput() RdsDbProxyOutput
	ToRdsDbProxyOutputWithContext(ctx context.Context) RdsDbProxyOutput
}

func (*RdsDbProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsDbProxy)(nil)).Elem()
}

func (i *RdsDbProxy) ToRdsDbProxyOutput() RdsDbProxyOutput {
	return i.ToRdsDbProxyOutputWithContext(context.Background())
}

func (i *RdsDbProxy) ToRdsDbProxyOutputWithContext(ctx context.Context) RdsDbProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsDbProxyOutput)
}

// RdsDbProxyArrayInput is an input type that accepts RdsDbProxyArray and RdsDbProxyArrayOutput values.
// You can construct a concrete instance of `RdsDbProxyArrayInput` via:
//
//	RdsDbProxyArray{ RdsDbProxyArgs{...} }
type RdsDbProxyArrayInput interface {
	pulumi.Input

	ToRdsDbProxyArrayOutput() RdsDbProxyArrayOutput
	ToRdsDbProxyArrayOutputWithContext(context.Context) RdsDbProxyArrayOutput
}

type RdsDbProxyArray []RdsDbProxyInput

func (RdsDbProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsDbProxy)(nil)).Elem()
}

func (i RdsDbProxyArray) ToRdsDbProxyArrayOutput() RdsDbProxyArrayOutput {
	return i.ToRdsDbProxyArrayOutputWithContext(context.Background())
}

func (i RdsDbProxyArray) ToRdsDbProxyArrayOutputWithContext(ctx context.Context) RdsDbProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsDbProxyArrayOutput)
}

// RdsDbProxyMapInput is an input type that accepts RdsDbProxyMap and RdsDbProxyMapOutput values.
// You can construct a concrete instance of `RdsDbProxyMapInput` via:
//
//	RdsDbProxyMap{ "key": RdsDbProxyArgs{...} }
type RdsDbProxyMapInput interface {
	pulumi.Input

	ToRdsDbProxyMapOutput() RdsDbProxyMapOutput
	ToRdsDbProxyMapOutputWithContext(context.Context) RdsDbProxyMapOutput
}

type RdsDbProxyMap map[string]RdsDbProxyInput

func (RdsDbProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsDbProxy)(nil)).Elem()
}

func (i RdsDbProxyMap) ToRdsDbProxyMapOutput() RdsDbProxyMapOutput {
	return i.ToRdsDbProxyMapOutputWithContext(context.Background())
}

func (i RdsDbProxyMap) ToRdsDbProxyMapOutputWithContext(ctx context.Context) RdsDbProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsDbProxyMapOutput)
}

type RdsDbProxyOutput struct{ *pulumi.OutputState }

func (RdsDbProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsDbProxy)(nil)).Elem()
}

func (o RdsDbProxyOutput) ToRdsDbProxyOutput() RdsDbProxyOutput {
	return o
}

func (o RdsDbProxyOutput) ToRdsDbProxyOutputWithContext(ctx context.Context) RdsDbProxyOutput {
	return o
}

// The port number that is associated with the proxy endpoint.
func (o RdsDbProxyOutput) DbProxyConnectStringPort() pulumi.IntOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.IntOutput { return v.DbProxyConnectStringPort }).(pulumi.IntOutput)
}

// The new prefix of the proxy endpoint. Enter a prefix.
func (o RdsDbProxyOutput) DbProxyConnectionPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.DbProxyConnectionPrefix }).(pulumi.StringOutput)
}

// Connection instance string.
func (o RdsDbProxyOutput) DbProxyConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.DbProxyConnectionString }).(pulumi.StringOutput)
}

// Remarks of agent terminal.
func (o RdsDbProxyOutput) DbProxyEndpointAliases() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.DbProxyEndpointAliases }).(pulumi.StringOutput)
}

// Proxy connection address ID.
func (o RdsDbProxyOutput) DbProxyEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.DbProxyEndpointId }).(pulumi.StringOutput)
}

// The read and write attributes of the proxy terminal. Valid values:
// - ReadWrite: The proxy terminal connects to the primary instance and can receive both read and write requests.
// - ReadOnly: The proxy terminal does not connect to the primary instance and can receive only read requests. This is the default value.
func (o RdsDbProxyOutput) DbProxyEndpointReadWriteMode() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.DbProxyEndpointReadWriteMode }).(pulumi.StringOutput)
}

// The features that you want to enable for the proxy endpoint. If you specify more than one feature, separate the features with semicolons (;). Format: Feature 1:Status;Feature 2:Status;.... Do not add a semicolon (;) at the end of the last value. Valid feature values:
//   - ReadWriteSpliting: read/write splitting.
//   - ConnectionPersist: connection pooling.
//   - TransactionReadSqlRouteOptimizeStatus: transaction splitting.
//     Valid status values:
//   - 1: enabled.
//   - 0: disabled.
func (o RdsDbProxyOutput) DbProxyFeatures() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.DbProxyFeatures }).(pulumi.StringOutput)
}

// The number of proxy instances that are enabled. Valid values: 1 to 60.
func (o RdsDbProxyOutput) DbProxyInstanceNum() pulumi.IntOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.IntOutput { return v.DbProxyInstanceNum }).(pulumi.IntOutput)
}

// The SSL configuration setting that you want to apply on the instance. Valid values:
// - Close: disables SSL encryption.
// - Open: enables SSL encryption or modifies the endpoint that requires SSL encryption.
// - Update: updates the validity period of the SSL certificate.
func (o RdsDbProxyOutput) DbProxySslEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.DbProxySslEnabled }).(pulumi.StringOutput)
}

// The point in time at which you want to apply the new database proxy settings. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
func (o RdsDbProxyOutput) EffectiveSpecificTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.EffectiveSpecificTime }).(pulumi.StringOutput)
}

// When modifying the number of proxy instances,The time when you want to apply the new database proxy settings.Valid values:
// - Immediate: ApsaraDB RDS immediately applies the new settings.
// - MaintainTime: ApsaraDB RDS applies the new settings during the maintenance window that you specified. For more information, see Modify the maintenance window.
// - SpecificTime: ApsaraDB RDS applies the new settings at a specified point in time.
func (o RdsDbProxyOutput) EffectiveTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.EffectiveTime }).(pulumi.StringOutput)
}

// The Id of instance that can run database.
func (o RdsDbProxyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The network type of the instance. Set the value to VPC.
func (o RdsDbProxyOutput) InstanceNetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.InstanceNetworkType }).(pulumi.StringOutput)
}

// Network type of proxy connection address.
func (o RdsDbProxyOutput) NetType() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.NetType }).(pulumi.StringOutput)
}

// The policy that is used to allocate read weights. Valid values:
// - Standard: ApsaraDB RDS automatically allocates read weights to the instance and its read-only instances based on the specifications of the instances.
// - Custom: You must manually allocate read weights to the instance and its read-only instances.
func (o RdsDbProxyOutput) ReadOnlyInstanceDistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.ReadOnlyInstanceDistributionType }).(pulumi.StringOutput)
}

// The maximum latency threshold that is allowed for read/write splitting. If the latency on a read-only instance exceeds the threshold that you specified, ApsaraDB RDS no longer forwards read requests to the read-only instance. If you do not specify this parameter, the default value of this parameter is retained. Unit: seconds. Valid values: 0 to 3600.
func (o RdsDbProxyOutput) ReadOnlyInstanceMaxDelayTime() pulumi.IntOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.IntOutput { return v.ReadOnlyInstanceMaxDelayTime }).(pulumi.IntOutput)
}

// A list of the read weights of the instance and its read-only instances.  It contains two sub-fields(instance_id and weight). Read weights increase in increments of 100, and the maximum read weight is 10000.
func (o RdsDbProxyOutput) ReadOnlyInstanceWeights() RdsDbProxyReadOnlyInstanceWeightArrayOutput {
	return o.ApplyT(func(v *RdsDbProxy) RdsDbProxyReadOnlyInstanceWeightArrayOutput { return v.ReadOnlyInstanceWeights }).(RdsDbProxyReadOnlyInstanceWeightArrayOutput)
}

// The ID of the resource group.
func (o RdsDbProxyOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The time when the certificate expires.
func (o RdsDbProxyOutput) SslExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.SslExpiredTime }).(pulumi.StringOutput)
}

// The point in time at which you want to upgrade the database proxy version of the instance. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
func (o RdsDbProxyOutput) SwitchTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringPtrOutput { return v.SwitchTime }).(pulumi.StringPtrOutput)
}

// The time when you want to upgrade the database proxy version of the instance. Valid values:
// - MaintainTime: ApsaraDB RDS performs the upgrade during the maintenance window that you specified. This is the default value. For more information, see Modify the maintenance window.
// - Immediate: ApsaraDB RDS immediately performs the upgrade.
// - SpecificTime: ApsaraDB RDS performs the upgrade at a specified point in time.
func (o RdsDbProxyOutput) UpgradeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringPtrOutput { return v.UpgradeTime }).(pulumi.StringPtrOutput)
}

// The ID of the virtual private cloud (VPC) to which the instance belongs.
func (o RdsDbProxyOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The ID of the vSwitch that is associated with the specified VPC.
func (o RdsDbProxyOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsDbProxy) pulumi.StringOutput { return v.VswitchId }).(pulumi.StringOutput)
}

type RdsDbProxyArrayOutput struct{ *pulumi.OutputState }

func (RdsDbProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsDbProxy)(nil)).Elem()
}

func (o RdsDbProxyArrayOutput) ToRdsDbProxyArrayOutput() RdsDbProxyArrayOutput {
	return o
}

func (o RdsDbProxyArrayOutput) ToRdsDbProxyArrayOutputWithContext(ctx context.Context) RdsDbProxyArrayOutput {
	return o
}

func (o RdsDbProxyArrayOutput) Index(i pulumi.IntInput) RdsDbProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsDbProxy {
		return vs[0].([]*RdsDbProxy)[vs[1].(int)]
	}).(RdsDbProxyOutput)
}

type RdsDbProxyMapOutput struct{ *pulumi.OutputState }

func (RdsDbProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsDbProxy)(nil)).Elem()
}

func (o RdsDbProxyMapOutput) ToRdsDbProxyMapOutput() RdsDbProxyMapOutput {
	return o
}

func (o RdsDbProxyMapOutput) ToRdsDbProxyMapOutputWithContext(ctx context.Context) RdsDbProxyMapOutput {
	return o
}

func (o RdsDbProxyMapOutput) MapIndex(k pulumi.StringInput) RdsDbProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsDbProxy {
		return vs[0].(map[string]*RdsDbProxy)[vs[1].(string)]
	}).(RdsDbProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsDbProxyInput)(nil)).Elem(), &RdsDbProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsDbProxyArrayInput)(nil)).Elem(), RdsDbProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsDbProxyMapInput)(nil)).Elem(), RdsDbProxyMap{})
	pulumi.RegisterOutputType(RdsDbProxyOutput{})
	pulumi.RegisterOutputType(RdsDbProxyArrayOutput{})
	pulumi.RegisterOutputType(RdsDbProxyMapOutput{})
}
