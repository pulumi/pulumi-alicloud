// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aligreen

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Aligreen Audit Callback resource.
//
// Callback notification after detection is completed.
//
// For information about Aligreen Audit Callback and how to use it, see [What is Audit Callback](https://next.api.alibabacloud.com/document/Green/2017-08-23/CreateAuditCallback).
//
// > **NOTE:** Available since v1.228.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/aligreen"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := aligreen.NewAuditCallback(ctx, "default", &aligreen.AuditCallbackArgs{
//				CryptType:         pulumi.String("SM3"),
//				AuditCallbackName: pulumi.String(name),
//				Url:               pulumi.String("https://www.aliyun.com/"),
//				CallbackTypes: pulumi.StringArray{
//					pulumi.String("aliyunAudit"),
//					pulumi.String("selfAduit"),
//					pulumi.String("example"),
//				},
//				CallbackSuggestions: pulumi.StringArray{
//					pulumi.String("block"),
//					pulumi.String("review"),
//					pulumi.String("pass"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Aligreen Audit Callback can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:aligreen/auditCallback:AuditCallback example <id>
// ```
type AuditCallback struct {
	pulumi.CustomResourceState

	// The AuditCallback name defined by the customer. It can contain no more than 20 characters in Chinese, English, underscore (_), and digits.
	AuditCallbackName pulumi.StringOutput `pulumi:"auditCallbackName"`
	// List of audit results supported by message notification. Value: block: confirmed violation, review: Suspected violation, review: normal.
	CallbackSuggestions pulumi.StringArrayOutput `pulumi:"callbackSuggestions"`
	// A list of Callback types. Value: machineScan: Machine audit result notification, selfAudit: self-service audit notification.
	CallbackTypes pulumi.StringArrayOutput `pulumi:"callbackTypes"`
	// The encryption algorithm is used to verify that the callback request is sent by the content security service to your business service. The value is SHA256:SHA256 encryption algorithm and SM3: SM3 encryption algorithm.
	CryptType pulumi.StringOutput `pulumi:"cryptType"`
	// The detection result will be called back to the url.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewAuditCallback registers a new resource with the given unique name, arguments, and options.
func NewAuditCallback(ctx *pulumi.Context,
	name string, args *AuditCallbackArgs, opts ...pulumi.ResourceOption) (*AuditCallback, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuditCallbackName == nil {
		return nil, errors.New("invalid value for required argument 'AuditCallbackName'")
	}
	if args.CallbackSuggestions == nil {
		return nil, errors.New("invalid value for required argument 'CallbackSuggestions'")
	}
	if args.CallbackTypes == nil {
		return nil, errors.New("invalid value for required argument 'CallbackTypes'")
	}
	if args.CryptType == nil {
		return nil, errors.New("invalid value for required argument 'CryptType'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuditCallback
	err := ctx.RegisterResource("alicloud:aligreen/auditCallback:AuditCallback", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuditCallback gets an existing AuditCallback resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuditCallback(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuditCallbackState, opts ...pulumi.ResourceOption) (*AuditCallback, error) {
	var resource AuditCallback
	err := ctx.ReadResource("alicloud:aligreen/auditCallback:AuditCallback", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuditCallback resources.
type auditCallbackState struct {
	// The AuditCallback name defined by the customer. It can contain no more than 20 characters in Chinese, English, underscore (_), and digits.
	AuditCallbackName *string `pulumi:"auditCallbackName"`
	// List of audit results supported by message notification. Value: block: confirmed violation, review: Suspected violation, review: normal.
	CallbackSuggestions []string `pulumi:"callbackSuggestions"`
	// A list of Callback types. Value: machineScan: Machine audit result notification, selfAudit: self-service audit notification.
	CallbackTypes []string `pulumi:"callbackTypes"`
	// The encryption algorithm is used to verify that the callback request is sent by the content security service to your business service. The value is SHA256:SHA256 encryption algorithm and SM3: SM3 encryption algorithm.
	CryptType *string `pulumi:"cryptType"`
	// The detection result will be called back to the url.
	Url *string `pulumi:"url"`
}

type AuditCallbackState struct {
	// The AuditCallback name defined by the customer. It can contain no more than 20 characters in Chinese, English, underscore (_), and digits.
	AuditCallbackName pulumi.StringPtrInput
	// List of audit results supported by message notification. Value: block: confirmed violation, review: Suspected violation, review: normal.
	CallbackSuggestions pulumi.StringArrayInput
	// A list of Callback types. Value: machineScan: Machine audit result notification, selfAudit: self-service audit notification.
	CallbackTypes pulumi.StringArrayInput
	// The encryption algorithm is used to verify that the callback request is sent by the content security service to your business service. The value is SHA256:SHA256 encryption algorithm and SM3: SM3 encryption algorithm.
	CryptType pulumi.StringPtrInput
	// The detection result will be called back to the url.
	Url pulumi.StringPtrInput
}

func (AuditCallbackState) ElementType() reflect.Type {
	return reflect.TypeOf((*auditCallbackState)(nil)).Elem()
}

type auditCallbackArgs struct {
	// The AuditCallback name defined by the customer. It can contain no more than 20 characters in Chinese, English, underscore (_), and digits.
	AuditCallbackName string `pulumi:"auditCallbackName"`
	// List of audit results supported by message notification. Value: block: confirmed violation, review: Suspected violation, review: normal.
	CallbackSuggestions []string `pulumi:"callbackSuggestions"`
	// A list of Callback types. Value: machineScan: Machine audit result notification, selfAudit: self-service audit notification.
	CallbackTypes []string `pulumi:"callbackTypes"`
	// The encryption algorithm is used to verify that the callback request is sent by the content security service to your business service. The value is SHA256:SHA256 encryption algorithm and SM3: SM3 encryption algorithm.
	CryptType string `pulumi:"cryptType"`
	// The detection result will be called back to the url.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a AuditCallback resource.
type AuditCallbackArgs struct {
	// The AuditCallback name defined by the customer. It can contain no more than 20 characters in Chinese, English, underscore (_), and digits.
	AuditCallbackName pulumi.StringInput
	// List of audit results supported by message notification. Value: block: confirmed violation, review: Suspected violation, review: normal.
	CallbackSuggestions pulumi.StringArrayInput
	// A list of Callback types. Value: machineScan: Machine audit result notification, selfAudit: self-service audit notification.
	CallbackTypes pulumi.StringArrayInput
	// The encryption algorithm is used to verify that the callback request is sent by the content security service to your business service. The value is SHA256:SHA256 encryption algorithm and SM3: SM3 encryption algorithm.
	CryptType pulumi.StringInput
	// The detection result will be called back to the url.
	Url pulumi.StringInput
}

func (AuditCallbackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*auditCallbackArgs)(nil)).Elem()
}

type AuditCallbackInput interface {
	pulumi.Input

	ToAuditCallbackOutput() AuditCallbackOutput
	ToAuditCallbackOutputWithContext(ctx context.Context) AuditCallbackOutput
}

func (*AuditCallback) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditCallback)(nil)).Elem()
}

func (i *AuditCallback) ToAuditCallbackOutput() AuditCallbackOutput {
	return i.ToAuditCallbackOutputWithContext(context.Background())
}

func (i *AuditCallback) ToAuditCallbackOutputWithContext(ctx context.Context) AuditCallbackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditCallbackOutput)
}

// AuditCallbackArrayInput is an input type that accepts AuditCallbackArray and AuditCallbackArrayOutput values.
// You can construct a concrete instance of `AuditCallbackArrayInput` via:
//
//	AuditCallbackArray{ AuditCallbackArgs{...} }
type AuditCallbackArrayInput interface {
	pulumi.Input

	ToAuditCallbackArrayOutput() AuditCallbackArrayOutput
	ToAuditCallbackArrayOutputWithContext(context.Context) AuditCallbackArrayOutput
}

type AuditCallbackArray []AuditCallbackInput

func (AuditCallbackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuditCallback)(nil)).Elem()
}

func (i AuditCallbackArray) ToAuditCallbackArrayOutput() AuditCallbackArrayOutput {
	return i.ToAuditCallbackArrayOutputWithContext(context.Background())
}

func (i AuditCallbackArray) ToAuditCallbackArrayOutputWithContext(ctx context.Context) AuditCallbackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditCallbackArrayOutput)
}

// AuditCallbackMapInput is an input type that accepts AuditCallbackMap and AuditCallbackMapOutput values.
// You can construct a concrete instance of `AuditCallbackMapInput` via:
//
//	AuditCallbackMap{ "key": AuditCallbackArgs{...} }
type AuditCallbackMapInput interface {
	pulumi.Input

	ToAuditCallbackMapOutput() AuditCallbackMapOutput
	ToAuditCallbackMapOutputWithContext(context.Context) AuditCallbackMapOutput
}

type AuditCallbackMap map[string]AuditCallbackInput

func (AuditCallbackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuditCallback)(nil)).Elem()
}

func (i AuditCallbackMap) ToAuditCallbackMapOutput() AuditCallbackMapOutput {
	return i.ToAuditCallbackMapOutputWithContext(context.Background())
}

func (i AuditCallbackMap) ToAuditCallbackMapOutputWithContext(ctx context.Context) AuditCallbackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditCallbackMapOutput)
}

type AuditCallbackOutput struct{ *pulumi.OutputState }

func (AuditCallbackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditCallback)(nil)).Elem()
}

func (o AuditCallbackOutput) ToAuditCallbackOutput() AuditCallbackOutput {
	return o
}

func (o AuditCallbackOutput) ToAuditCallbackOutputWithContext(ctx context.Context) AuditCallbackOutput {
	return o
}

// The AuditCallback name defined by the customer. It can contain no more than 20 characters in Chinese, English, underscore (_), and digits.
func (o AuditCallbackOutput) AuditCallbackName() pulumi.StringOutput {
	return o.ApplyT(func(v *AuditCallback) pulumi.StringOutput { return v.AuditCallbackName }).(pulumi.StringOutput)
}

// List of audit results supported by message notification. Value: block: confirmed violation, review: Suspected violation, review: normal.
func (o AuditCallbackOutput) CallbackSuggestions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuditCallback) pulumi.StringArrayOutput { return v.CallbackSuggestions }).(pulumi.StringArrayOutput)
}

// A list of Callback types. Value: machineScan: Machine audit result notification, selfAudit: self-service audit notification.
func (o AuditCallbackOutput) CallbackTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuditCallback) pulumi.StringArrayOutput { return v.CallbackTypes }).(pulumi.StringArrayOutput)
}

// The encryption algorithm is used to verify that the callback request is sent by the content security service to your business service. The value is SHA256:SHA256 encryption algorithm and SM3: SM3 encryption algorithm.
func (o AuditCallbackOutput) CryptType() pulumi.StringOutput {
	return o.ApplyT(func(v *AuditCallback) pulumi.StringOutput { return v.CryptType }).(pulumi.StringOutput)
}

// The detection result will be called back to the url.
func (o AuditCallbackOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *AuditCallback) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type AuditCallbackArrayOutput struct{ *pulumi.OutputState }

func (AuditCallbackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuditCallback)(nil)).Elem()
}

func (o AuditCallbackArrayOutput) ToAuditCallbackArrayOutput() AuditCallbackArrayOutput {
	return o
}

func (o AuditCallbackArrayOutput) ToAuditCallbackArrayOutputWithContext(ctx context.Context) AuditCallbackArrayOutput {
	return o
}

func (o AuditCallbackArrayOutput) Index(i pulumi.IntInput) AuditCallbackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuditCallback {
		return vs[0].([]*AuditCallback)[vs[1].(int)]
	}).(AuditCallbackOutput)
}

type AuditCallbackMapOutput struct{ *pulumi.OutputState }

func (AuditCallbackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuditCallback)(nil)).Elem()
}

func (o AuditCallbackMapOutput) ToAuditCallbackMapOutput() AuditCallbackMapOutput {
	return o
}

func (o AuditCallbackMapOutput) ToAuditCallbackMapOutputWithContext(ctx context.Context) AuditCallbackMapOutput {
	return o
}

func (o AuditCallbackMapOutput) MapIndex(k pulumi.StringInput) AuditCallbackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuditCallback {
		return vs[0].(map[string]*AuditCallback)[vs[1].(string)]
	}).(AuditCallbackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditCallbackInput)(nil)).Elem(), &AuditCallback{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditCallbackArrayInput)(nil)).Elem(), AuditCallbackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditCallbackMapInput)(nil)).Elem(), AuditCallbackMap{})
	pulumi.RegisterOutputType(AuditCallbackOutput{})
	pulumi.RegisterOutputType(AuditCallbackArrayOutput{})
	pulumi.RegisterOutputType(AuditCallbackMapOutput{})
}
