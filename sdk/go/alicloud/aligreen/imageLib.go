// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aligreen

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Aligreen Image Lib resource.
//
// Image library for image detection.
//
// For information about Aligreen Image Lib and how to use it, see [What is Image Lib](https://next.api.alibabacloud.com/document/Green/2017-08-23/CreateImageLib).
//
// > **NOTE:** Available since v1.228.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/aligreen"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultUalunB, err := aligreen.NewBizType(ctx, "defaultUalunB", &aligreen.BizTypeArgs{
//				BizTypeName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aligreen.NewImageLib(ctx, "default", &aligreen.ImageLibArgs{
//				Category:     pulumi.String("BLACK"),
//				Enable:       pulumi.Bool(true),
//				Scene:        pulumi.String("PORN"),
//				ImageLibName: pulumi.String(name),
//				BizTypes: pulumi.StringArray{
//					defaultUalunB.BizTypeName,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Aligreen Image Lib can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:aligreen/imageLib:ImageLib example <id>
// ```
type ImageLib struct {
	pulumi.CustomResourceState

	// List of business scenarios. For example: ["bizTypeA", "bizTypeB", "bizTypeC"]
	BizTypes pulumi.StringArrayOutput `pulumi:"bizTypes"`
	// The category of the image library. Valid values: BLACK: a blacklist, WHITE: a whitelist, REVIEW: a review list
	Category pulumi.StringOutput `pulumi:"category"`
	// Specifies whether to enable the image library. Valid values: true: Enable the image library. This is the default value. false: Disable the image library.
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// The name of the image library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
	ImageLibName pulumi.StringOutput `pulumi:"imageLibName"`
	// The moderation scenario to which the custom image library applies. Valid values: PORN: pornography detection, AD: ad detection, ILLEGAL: terrorist content detection
	Scene pulumi.StringOutput `pulumi:"scene"`
}

// NewImageLib registers a new resource with the given unique name, arguments, and options.
func NewImageLib(ctx *pulumi.Context,
	name string, args *ImageLibArgs, opts ...pulumi.ResourceOption) (*ImageLib, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Category == nil {
		return nil, errors.New("invalid value for required argument 'Category'")
	}
	if args.ImageLibName == nil {
		return nil, errors.New("invalid value for required argument 'ImageLibName'")
	}
	if args.Scene == nil {
		return nil, errors.New("invalid value for required argument 'Scene'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageLib
	err := ctx.RegisterResource("alicloud:aligreen/imageLib:ImageLib", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageLib gets an existing ImageLib resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageLib(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageLibState, opts ...pulumi.ResourceOption) (*ImageLib, error) {
	var resource ImageLib
	err := ctx.ReadResource("alicloud:aligreen/imageLib:ImageLib", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageLib resources.
type imageLibState struct {
	// List of business scenarios. For example: ["bizTypeA", "bizTypeB", "bizTypeC"]
	BizTypes []string `pulumi:"bizTypes"`
	// The category of the image library. Valid values: BLACK: a blacklist, WHITE: a whitelist, REVIEW: a review list
	Category *string `pulumi:"category"`
	// Specifies whether to enable the image library. Valid values: true: Enable the image library. This is the default value. false: Disable the image library.
	Enable *bool `pulumi:"enable"`
	// The name of the image library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
	ImageLibName *string `pulumi:"imageLibName"`
	// The moderation scenario to which the custom image library applies. Valid values: PORN: pornography detection, AD: ad detection, ILLEGAL: terrorist content detection
	Scene *string `pulumi:"scene"`
}

type ImageLibState struct {
	// List of business scenarios. For example: ["bizTypeA", "bizTypeB", "bizTypeC"]
	BizTypes pulumi.StringArrayInput
	// The category of the image library. Valid values: BLACK: a blacklist, WHITE: a whitelist, REVIEW: a review list
	Category pulumi.StringPtrInput
	// Specifies whether to enable the image library. Valid values: true: Enable the image library. This is the default value. false: Disable the image library.
	Enable pulumi.BoolPtrInput
	// The name of the image library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
	ImageLibName pulumi.StringPtrInput
	// The moderation scenario to which the custom image library applies. Valid values: PORN: pornography detection, AD: ad detection, ILLEGAL: terrorist content detection
	Scene pulumi.StringPtrInput
}

func (ImageLibState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageLibState)(nil)).Elem()
}

type imageLibArgs struct {
	// List of business scenarios. For example: ["bizTypeA", "bizTypeB", "bizTypeC"]
	BizTypes []string `pulumi:"bizTypes"`
	// The category of the image library. Valid values: BLACK: a blacklist, WHITE: a whitelist, REVIEW: a review list
	Category string `pulumi:"category"`
	// Specifies whether to enable the image library. Valid values: true: Enable the image library. This is the default value. false: Disable the image library.
	Enable *bool `pulumi:"enable"`
	// The name of the image library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
	ImageLibName string `pulumi:"imageLibName"`
	// The moderation scenario to which the custom image library applies. Valid values: PORN: pornography detection, AD: ad detection, ILLEGAL: terrorist content detection
	Scene string `pulumi:"scene"`
}

// The set of arguments for constructing a ImageLib resource.
type ImageLibArgs struct {
	// List of business scenarios. For example: ["bizTypeA", "bizTypeB", "bizTypeC"]
	BizTypes pulumi.StringArrayInput
	// The category of the image library. Valid values: BLACK: a blacklist, WHITE: a whitelist, REVIEW: a review list
	Category pulumi.StringInput
	// Specifies whether to enable the image library. Valid values: true: Enable the image library. This is the default value. false: Disable the image library.
	Enable pulumi.BoolPtrInput
	// The name of the image library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
	ImageLibName pulumi.StringInput
	// The moderation scenario to which the custom image library applies. Valid values: PORN: pornography detection, AD: ad detection, ILLEGAL: terrorist content detection
	Scene pulumi.StringInput
}

func (ImageLibArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageLibArgs)(nil)).Elem()
}

type ImageLibInput interface {
	pulumi.Input

	ToImageLibOutput() ImageLibOutput
	ToImageLibOutputWithContext(ctx context.Context) ImageLibOutput
}

func (*ImageLib) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageLib)(nil)).Elem()
}

func (i *ImageLib) ToImageLibOutput() ImageLibOutput {
	return i.ToImageLibOutputWithContext(context.Background())
}

func (i *ImageLib) ToImageLibOutputWithContext(ctx context.Context) ImageLibOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageLibOutput)
}

// ImageLibArrayInput is an input type that accepts ImageLibArray and ImageLibArrayOutput values.
// You can construct a concrete instance of `ImageLibArrayInput` via:
//
//	ImageLibArray{ ImageLibArgs{...} }
type ImageLibArrayInput interface {
	pulumi.Input

	ToImageLibArrayOutput() ImageLibArrayOutput
	ToImageLibArrayOutputWithContext(context.Context) ImageLibArrayOutput
}

type ImageLibArray []ImageLibInput

func (ImageLibArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageLib)(nil)).Elem()
}

func (i ImageLibArray) ToImageLibArrayOutput() ImageLibArrayOutput {
	return i.ToImageLibArrayOutputWithContext(context.Background())
}

func (i ImageLibArray) ToImageLibArrayOutputWithContext(ctx context.Context) ImageLibArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageLibArrayOutput)
}

// ImageLibMapInput is an input type that accepts ImageLibMap and ImageLibMapOutput values.
// You can construct a concrete instance of `ImageLibMapInput` via:
//
//	ImageLibMap{ "key": ImageLibArgs{...} }
type ImageLibMapInput interface {
	pulumi.Input

	ToImageLibMapOutput() ImageLibMapOutput
	ToImageLibMapOutputWithContext(context.Context) ImageLibMapOutput
}

type ImageLibMap map[string]ImageLibInput

func (ImageLibMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageLib)(nil)).Elem()
}

func (i ImageLibMap) ToImageLibMapOutput() ImageLibMapOutput {
	return i.ToImageLibMapOutputWithContext(context.Background())
}

func (i ImageLibMap) ToImageLibMapOutputWithContext(ctx context.Context) ImageLibMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageLibMapOutput)
}

type ImageLibOutput struct{ *pulumi.OutputState }

func (ImageLibOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageLib)(nil)).Elem()
}

func (o ImageLibOutput) ToImageLibOutput() ImageLibOutput {
	return o
}

func (o ImageLibOutput) ToImageLibOutputWithContext(ctx context.Context) ImageLibOutput {
	return o
}

// List of business scenarios. For example: ["bizTypeA", "bizTypeB", "bizTypeC"]
func (o ImageLibOutput) BizTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageLib) pulumi.StringArrayOutput { return v.BizTypes }).(pulumi.StringArrayOutput)
}

// The category of the image library. Valid values: BLACK: a blacklist, WHITE: a whitelist, REVIEW: a review list
func (o ImageLibOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageLib) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// Specifies whether to enable the image library. Valid values: true: Enable the image library. This is the default value. false: Disable the image library.
func (o ImageLibOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ImageLib) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

// The name of the image library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
func (o ImageLibOutput) ImageLibName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageLib) pulumi.StringOutput { return v.ImageLibName }).(pulumi.StringOutput)
}

// The moderation scenario to which the custom image library applies. Valid values: PORN: pornography detection, AD: ad detection, ILLEGAL: terrorist content detection
func (o ImageLibOutput) Scene() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageLib) pulumi.StringOutput { return v.Scene }).(pulumi.StringOutput)
}

type ImageLibArrayOutput struct{ *pulumi.OutputState }

func (ImageLibArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageLib)(nil)).Elem()
}

func (o ImageLibArrayOutput) ToImageLibArrayOutput() ImageLibArrayOutput {
	return o
}

func (o ImageLibArrayOutput) ToImageLibArrayOutputWithContext(ctx context.Context) ImageLibArrayOutput {
	return o
}

func (o ImageLibArrayOutput) Index(i pulumi.IntInput) ImageLibOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageLib {
		return vs[0].([]*ImageLib)[vs[1].(int)]
	}).(ImageLibOutput)
}

type ImageLibMapOutput struct{ *pulumi.OutputState }

func (ImageLibMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageLib)(nil)).Elem()
}

func (o ImageLibMapOutput) ToImageLibMapOutput() ImageLibMapOutput {
	return o
}

func (o ImageLibMapOutput) ToImageLibMapOutputWithContext(ctx context.Context) ImageLibMapOutput {
	return o
}

func (o ImageLibMapOutput) MapIndex(k pulumi.StringInput) ImageLibOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageLib {
		return vs[0].(map[string]*ImageLib)[vs[1].(string)]
	}).(ImageLibOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageLibInput)(nil)).Elem(), &ImageLib{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageLibArrayInput)(nil)).Elem(), ImageLibArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageLibMapInput)(nil)).Elem(), ImageLibMap{})
	pulumi.RegisterOutputType(ImageLibOutput{})
	pulumi.RegisterOutputType(ImageLibArrayOutput{})
	pulumi.RegisterOutputType(ImageLibMapOutput{})
}
