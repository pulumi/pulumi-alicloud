// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aligreen

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Aligreen Keyword Lib resource.
//
// Keyword library for text detection.
//
// For information about Aligreen Keyword Lib and how to use it, see [What is Keyword Lib](https://www.alibabacloud.com/help/en/).
//
// > **NOTE:** Available since v1.228.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/aligreen"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aligreen.NewBizType(ctx, "defaultMn8sVK", &aligreen.BizTypeArgs{
//				BizTypeName:  pulumi.Sprintf("%v%v", name, _default.Result),
//				CiteTemplate: pulumi.Bool(true),
//				IndustryInfo: pulumi.String("社交-注册信息-昵称"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aligreen.NewKeywordLib(ctx, "default", &aligreen.KeywordLibArgs{
//				Category:       pulumi.String("BLACK"),
//				ResourceType:   pulumi.String("TEXT"),
//				LibType:        pulumi.String("textKeyword"),
//				KeywordLibName: pulumi.String(name),
//				MatchMode:      pulumi.String("fuzzy"),
//				Language:       pulumi.String("cn"),
//				BizTypes: pulumi.StringArray{
//					pulumi.String("example_007"),
//				},
//				Lang:   pulumi.String("cn"),
//				Enable: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Aligreen Keyword Lib can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:aligreen/keywordLib:KeywordLib example <id>
// ```
type KeywordLib struct {
	pulumi.CustomResourceState

	// The business scenario. Example:["bizTypeA","bizTypeB"]
	BizTypes pulumi.StringArrayOutput `pulumi:"bizTypes"`
	// The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
	Category pulumi.StringOutput `pulumi:"category"`
	// Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
	KeywordLibName pulumi.StringOutput `pulumi:"keywordLibName"`
	// Language.
	Lang pulumi.StringPtrOutput `pulumi:"lang"`
	// Language used by the text Library
	Language pulumi.StringOutput `pulumi:"language"`
	// The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
	LibType pulumi.StringOutput `pulumi:"libType"`
	// The matching method. Valid values:fuzzy: fuzzy match precise: exact match
	MatchMode pulumi.StringOutput `pulumi:"matchMode"`
	// The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
}

// NewKeywordLib registers a new resource with the given unique name, arguments, and options.
func NewKeywordLib(ctx *pulumi.Context,
	name string, args *KeywordLibArgs, opts ...pulumi.ResourceOption) (*KeywordLib, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeywordLibName == nil {
		return nil, errors.New("invalid value for required argument 'KeywordLibName'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeywordLib
	err := ctx.RegisterResource("alicloud:aligreen/keywordLib:KeywordLib", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeywordLib gets an existing KeywordLib resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeywordLib(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeywordLibState, opts ...pulumi.ResourceOption) (*KeywordLib, error) {
	var resource KeywordLib
	err := ctx.ReadResource("alicloud:aligreen/keywordLib:KeywordLib", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeywordLib resources.
type keywordLibState struct {
	// The business scenario. Example:["bizTypeA","bizTypeB"]
	BizTypes []string `pulumi:"bizTypes"`
	// The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
	Category *string `pulumi:"category"`
	// Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
	Enable *bool `pulumi:"enable"`
	// The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
	KeywordLibName *string `pulumi:"keywordLibName"`
	// Language.
	Lang *string `pulumi:"lang"`
	// Language used by the text Library
	Language *string `pulumi:"language"`
	// The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
	LibType *string `pulumi:"libType"`
	// The matching method. Valid values:fuzzy: fuzzy match precise: exact match
	MatchMode *string `pulumi:"matchMode"`
	// The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
	ResourceType *string `pulumi:"resourceType"`
}

type KeywordLibState struct {
	// The business scenario. Example:["bizTypeA","bizTypeB"]
	BizTypes pulumi.StringArrayInput
	// The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
	Category pulumi.StringPtrInput
	// Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
	Enable pulumi.BoolPtrInput
	// The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
	KeywordLibName pulumi.StringPtrInput
	// Language.
	Lang pulumi.StringPtrInput
	// Language used by the text Library
	Language pulumi.StringPtrInput
	// The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
	LibType pulumi.StringPtrInput
	// The matching method. Valid values:fuzzy: fuzzy match precise: exact match
	MatchMode pulumi.StringPtrInput
	// The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
	ResourceType pulumi.StringPtrInput
}

func (KeywordLibState) ElementType() reflect.Type {
	return reflect.TypeOf((*keywordLibState)(nil)).Elem()
}

type keywordLibArgs struct {
	// The business scenario. Example:["bizTypeA","bizTypeB"]
	BizTypes []string `pulumi:"bizTypes"`
	// The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
	Category *string `pulumi:"category"`
	// Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
	Enable *bool `pulumi:"enable"`
	// The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
	KeywordLibName string `pulumi:"keywordLibName"`
	// Language.
	Lang *string `pulumi:"lang"`
	// Language used by the text Library
	Language *string `pulumi:"language"`
	// The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
	LibType *string `pulumi:"libType"`
	// The matching method. Valid values:fuzzy: fuzzy match precise: exact match
	MatchMode *string `pulumi:"matchMode"`
	// The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
	ResourceType string `pulumi:"resourceType"`
}

// The set of arguments for constructing a KeywordLib resource.
type KeywordLibArgs struct {
	// The business scenario. Example:["bizTypeA","bizTypeB"]
	BizTypes pulumi.StringArrayInput
	// The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
	Category pulumi.StringPtrInput
	// Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
	Enable pulumi.BoolPtrInput
	// The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
	KeywordLibName pulumi.StringInput
	// Language.
	Lang pulumi.StringPtrInput
	// Language used by the text Library
	Language pulumi.StringPtrInput
	// The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
	LibType pulumi.StringPtrInput
	// The matching method. Valid values:fuzzy: fuzzy match precise: exact match
	MatchMode pulumi.StringPtrInput
	// The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
	ResourceType pulumi.StringInput
}

func (KeywordLibArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keywordLibArgs)(nil)).Elem()
}

type KeywordLibInput interface {
	pulumi.Input

	ToKeywordLibOutput() KeywordLibOutput
	ToKeywordLibOutputWithContext(ctx context.Context) KeywordLibOutput
}

func (*KeywordLib) ElementType() reflect.Type {
	return reflect.TypeOf((**KeywordLib)(nil)).Elem()
}

func (i *KeywordLib) ToKeywordLibOutput() KeywordLibOutput {
	return i.ToKeywordLibOutputWithContext(context.Background())
}

func (i *KeywordLib) ToKeywordLibOutputWithContext(ctx context.Context) KeywordLibOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeywordLibOutput)
}

// KeywordLibArrayInput is an input type that accepts KeywordLibArray and KeywordLibArrayOutput values.
// You can construct a concrete instance of `KeywordLibArrayInput` via:
//
//	KeywordLibArray{ KeywordLibArgs{...} }
type KeywordLibArrayInput interface {
	pulumi.Input

	ToKeywordLibArrayOutput() KeywordLibArrayOutput
	ToKeywordLibArrayOutputWithContext(context.Context) KeywordLibArrayOutput
}

type KeywordLibArray []KeywordLibInput

func (KeywordLibArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeywordLib)(nil)).Elem()
}

func (i KeywordLibArray) ToKeywordLibArrayOutput() KeywordLibArrayOutput {
	return i.ToKeywordLibArrayOutputWithContext(context.Background())
}

func (i KeywordLibArray) ToKeywordLibArrayOutputWithContext(ctx context.Context) KeywordLibArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeywordLibArrayOutput)
}

// KeywordLibMapInput is an input type that accepts KeywordLibMap and KeywordLibMapOutput values.
// You can construct a concrete instance of `KeywordLibMapInput` via:
//
//	KeywordLibMap{ "key": KeywordLibArgs{...} }
type KeywordLibMapInput interface {
	pulumi.Input

	ToKeywordLibMapOutput() KeywordLibMapOutput
	ToKeywordLibMapOutputWithContext(context.Context) KeywordLibMapOutput
}

type KeywordLibMap map[string]KeywordLibInput

func (KeywordLibMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeywordLib)(nil)).Elem()
}

func (i KeywordLibMap) ToKeywordLibMapOutput() KeywordLibMapOutput {
	return i.ToKeywordLibMapOutputWithContext(context.Background())
}

func (i KeywordLibMap) ToKeywordLibMapOutputWithContext(ctx context.Context) KeywordLibMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeywordLibMapOutput)
}

type KeywordLibOutput struct{ *pulumi.OutputState }

func (KeywordLibOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeywordLib)(nil)).Elem()
}

func (o KeywordLibOutput) ToKeywordLibOutput() KeywordLibOutput {
	return o
}

func (o KeywordLibOutput) ToKeywordLibOutputWithContext(ctx context.Context) KeywordLibOutput {
	return o
}

// The business scenario. Example:["bizTypeA","bizTypeB"]
func (o KeywordLibOutput) BizTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KeywordLib) pulumi.StringArrayOutput { return v.BizTypes }).(pulumi.StringArrayOutput)
}

// The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
func (o KeywordLibOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *KeywordLib) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
func (o KeywordLibOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *KeywordLib) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

// The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
func (o KeywordLibOutput) KeywordLibName() pulumi.StringOutput {
	return o.ApplyT(func(v *KeywordLib) pulumi.StringOutput { return v.KeywordLibName }).(pulumi.StringOutput)
}

// Language.
func (o KeywordLibOutput) Lang() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeywordLib) pulumi.StringPtrOutput { return v.Lang }).(pulumi.StringPtrOutput)
}

// Language used by the text Library
func (o KeywordLibOutput) Language() pulumi.StringOutput {
	return o.ApplyT(func(v *KeywordLib) pulumi.StringOutput { return v.Language }).(pulumi.StringOutput)
}

// The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
func (o KeywordLibOutput) LibType() pulumi.StringOutput {
	return o.ApplyT(func(v *KeywordLib) pulumi.StringOutput { return v.LibType }).(pulumi.StringOutput)
}

// The matching method. Valid values:fuzzy: fuzzy match precise: exact match
func (o KeywordLibOutput) MatchMode() pulumi.StringOutput {
	return o.ApplyT(func(v *KeywordLib) pulumi.StringOutput { return v.MatchMode }).(pulumi.StringOutput)
}

// The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
func (o KeywordLibOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *KeywordLib) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

type KeywordLibArrayOutput struct{ *pulumi.OutputState }

func (KeywordLibArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeywordLib)(nil)).Elem()
}

func (o KeywordLibArrayOutput) ToKeywordLibArrayOutput() KeywordLibArrayOutput {
	return o
}

func (o KeywordLibArrayOutput) ToKeywordLibArrayOutputWithContext(ctx context.Context) KeywordLibArrayOutput {
	return o
}

func (o KeywordLibArrayOutput) Index(i pulumi.IntInput) KeywordLibOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeywordLib {
		return vs[0].([]*KeywordLib)[vs[1].(int)]
	}).(KeywordLibOutput)
}

type KeywordLibMapOutput struct{ *pulumi.OutputState }

func (KeywordLibMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeywordLib)(nil)).Elem()
}

func (o KeywordLibMapOutput) ToKeywordLibMapOutput() KeywordLibMapOutput {
	return o
}

func (o KeywordLibMapOutput) ToKeywordLibMapOutputWithContext(ctx context.Context) KeywordLibMapOutput {
	return o
}

func (o KeywordLibMapOutput) MapIndex(k pulumi.StringInput) KeywordLibOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeywordLib {
		return vs[0].(map[string]*KeywordLib)[vs[1].(string)]
	}).(KeywordLibOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeywordLibInput)(nil)).Elem(), &KeywordLib{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeywordLibArrayInput)(nil)).Elem(), KeywordLibArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeywordLibMapInput)(nil)).Elem(), KeywordLibMap{})
	pulumi.RegisterOutputType(KeywordLibOutput{})
	pulumi.RegisterOutputType(KeywordLibArrayOutput{})
	pulumi.RegisterOutputType(KeywordLibMapOutput{})
}
