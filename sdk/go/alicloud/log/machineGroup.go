// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package log

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Log machine group can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:log/machineGroup:MachineGroup example tf-log:tf-machine-group
// ```
type MachineGroup struct {
	pulumi.CustomResourceState

	// The specific machine identification, which can be an IP address or user-defined identity.
	IdentifyLists pulumi.StringArrayOutput `pulumi:"identifyLists"`
	// The machine identification type, including IP and user-defined identity. Valid values are "ip" and "userdefined". Default to "ip".
	IdentifyType pulumi.StringPtrOutput `pulumi:"identifyType"`
	// The machine group name, which is unique in the same project.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project name to the machine group belongs.
	Project pulumi.StringOutput `pulumi:"project"`
	// The topic of a machine group.
	Topic pulumi.StringPtrOutput `pulumi:"topic"`
}

// NewMachineGroup registers a new resource with the given unique name, arguments, and options.
func NewMachineGroup(ctx *pulumi.Context,
	name string, args *MachineGroupArgs, opts ...pulumi.ResourceOption) (*MachineGroup, error) {
	if args == nil || args.IdentifyLists == nil {
		return nil, errors.New("missing required argument 'IdentifyLists'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil {
		args = &MachineGroupArgs{}
	}
	var resource MachineGroup
	err := ctx.RegisterResource("alicloud:log/machineGroup:MachineGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachineGroup gets an existing MachineGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachineGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineGroupState, opts ...pulumi.ResourceOption) (*MachineGroup, error) {
	var resource MachineGroup
	err := ctx.ReadResource("alicloud:log/machineGroup:MachineGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MachineGroup resources.
type machineGroupState struct {
	// The specific machine identification, which can be an IP address or user-defined identity.
	IdentifyLists []string `pulumi:"identifyLists"`
	// The machine identification type, including IP and user-defined identity. Valid values are "ip" and "userdefined". Default to "ip".
	IdentifyType *string `pulumi:"identifyType"`
	// The machine group name, which is unique in the same project.
	Name *string `pulumi:"name"`
	// The project name to the machine group belongs.
	Project *string `pulumi:"project"`
	// The topic of a machine group.
	Topic *string `pulumi:"topic"`
}

type MachineGroupState struct {
	// The specific machine identification, which can be an IP address or user-defined identity.
	IdentifyLists pulumi.StringArrayInput
	// The machine identification type, including IP and user-defined identity. Valid values are "ip" and "userdefined". Default to "ip".
	IdentifyType pulumi.StringPtrInput
	// The machine group name, which is unique in the same project.
	Name pulumi.StringPtrInput
	// The project name to the machine group belongs.
	Project pulumi.StringPtrInput
	// The topic of a machine group.
	Topic pulumi.StringPtrInput
}

func (MachineGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineGroupState)(nil)).Elem()
}

type machineGroupArgs struct {
	// The specific machine identification, which can be an IP address or user-defined identity.
	IdentifyLists []string `pulumi:"identifyLists"`
	// The machine identification type, including IP and user-defined identity. Valid values are "ip" and "userdefined". Default to "ip".
	IdentifyType *string `pulumi:"identifyType"`
	// The machine group name, which is unique in the same project.
	Name *string `pulumi:"name"`
	// The project name to the machine group belongs.
	Project string `pulumi:"project"`
	// The topic of a machine group.
	Topic *string `pulumi:"topic"`
}

// The set of arguments for constructing a MachineGroup resource.
type MachineGroupArgs struct {
	// The specific machine identification, which can be an IP address or user-defined identity.
	IdentifyLists pulumi.StringArrayInput
	// The machine identification type, including IP and user-defined identity. Valid values are "ip" and "userdefined". Default to "ip".
	IdentifyType pulumi.StringPtrInput
	// The machine group name, which is unique in the same project.
	Name pulumi.StringPtrInput
	// The project name to the machine group belongs.
	Project pulumi.StringInput
	// The topic of a machine group.
	Topic pulumi.StringPtrInput
}

func (MachineGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineGroupArgs)(nil)).Elem()
}

type MachineGroupInput interface {
	pulumi.Input

	ToMachineGroupOutput() MachineGroupOutput
	ToMachineGroupOutputWithContext(ctx context.Context) MachineGroupOutput
}

func (MachineGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineGroup)(nil)).Elem()
}

func (i MachineGroup) ToMachineGroupOutput() MachineGroupOutput {
	return i.ToMachineGroupOutputWithContext(context.Background())
}

func (i MachineGroup) ToMachineGroupOutputWithContext(ctx context.Context) MachineGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineGroupOutput)
}

type MachineGroupOutput struct {
	*pulumi.OutputState
}

func (MachineGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineGroupOutput)(nil)).Elem()
}

func (o MachineGroupOutput) ToMachineGroupOutput() MachineGroupOutput {
	return o
}

func (o MachineGroupOutput) ToMachineGroupOutputWithContext(ctx context.Context) MachineGroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MachineGroupOutput{})
}
