// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package log

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Log service data delivery management, this service provides the function of delivering data in logstore to oss product storage.
// [Refer to details](https://www.alibabacloud.com/help/en/doc-detail/43724.htm).
//
// > **NOTE:** Available in 1.121.0+
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/log"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleProject, err := log.NewProject(ctx, "exampleProject", &log.ProjectArgs{
// 			Description: pulumi.String("created by terraform"),
// 			Tags: pulumi.StringMap{
// 				"test": pulumi.String("test"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = log.NewStore(ctx, "exampleStore", &log.StoreArgs{
// 			Project:            exampleProject.Name,
// 			RetentionPeriod:    pulumi.Int(3650),
// 			ShardCount:         pulumi.Int(3),
// 			AutoSplit:          pulumi.Bool(true),
// 			MaxSplitShardCount: pulumi.Int(60),
// 			AppendMeta:         pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = log.NewOssShipper(ctx, "exampleOssShipper", &log.OssShipperArgs{
// 			ProjectName:    exampleProject.Name,
// 			LogstoreName:   pulumi.Any(alicloud_log_logstore.Example.Name),
// 			ShipperName:    pulumi.String("oss_shipper_name"),
// 			OssBucket:      pulumi.String("test_bucket"),
// 			OssPrefix:      pulumi.String("/root"),
// 			BufferInterval: pulumi.Int(300),
// 			BufferSize:     pulumi.Int(250),
// 			CompressType:   pulumi.String("none"),
// 			PathFormat:     pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v", "%", "Y/", "%", "m/", "%", "d/", "%", "H/", "%", "M")),
// 			Format:         pulumi.String("json"),
// 			JsonEnableTag:  pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Log oss shipper can be imported using the id or name, e.g.
//
// ```sh
//  $ pulumi import alicloud:log/ossShipper:OssShipper example tf-log-project:tf-log-logstore:tf-log-shipper
// ```
type OssShipper struct {
	pulumi.CustomResourceState

	// How often is it delivered every interval.
	BufferInterval pulumi.IntOutput `pulumi:"bufferInterval"`
	// Automatically control the creation interval of delivery tasks and set the upper limit of an OSS object size (calculated in uncompressed), unit: `MB`.
	BufferSize pulumi.IntOutput `pulumi:"bufferSize"`
	// OSS data storage compression method, support: none, snappy. Among them, none means that the original data is not compressed, and snappy means that the data is compressed using the snappy algorithm, which can reduce the storage space usage of the `OSS Bucket`.
	CompressType            pulumi.StringPtrOutput   `pulumi:"compressType"`
	CsvConfigColumns        pulumi.StringArrayOutput `pulumi:"csvConfigColumns"`
	CsvConfigDelimiter      pulumi.StringPtrOutput   `pulumi:"csvConfigDelimiter"`
	CsvConfigHeader         pulumi.BoolPtrOutput     `pulumi:"csvConfigHeader"`
	CsvConfigLinefeed       pulumi.StringPtrOutput   `pulumi:"csvConfigLinefeed"`
	CsvConfigNullidentifier pulumi.StringPtrOutput   `pulumi:"csvConfigNullidentifier"`
	CsvConfigQuote          pulumi.StringPtrOutput   `pulumi:"csvConfigQuote"`
	// Storage format, only supports three types: `json`, `parquet`, `csv`.
	// **According to the different format, please select the following parameters**
	// - format = `json`
	//   `jsonEnableTag` - (Optional) Whether to deliver the label.
	// - format = `csv`
	//   `csvConfigDelimiter` - (Optional) Separator configuration in csv configuration format.
	//   `csvConfigColumns` - (Optional) Field configuration in csv configuration format.
	//   `csvConfigNullidentifier` - (Optional) Invalid field content.
	//   `csvConfigQuote` - (Optional) Escape character under csv configuration.
	//   `csvConfigHeader` - (Optional) Indicates whether to write the field name to the CSV file, the default value is `false`.
	//   `csvConfigLinefeed` - (Optional) Separator in csv configuration.
	// - format = `parquet`
	//   `parquetConfig` - (Optional) Configure to use parquet storage format.
	//   `name` - (Required) The name of the key.
	//   `type` - (Required) Type of configuration name.
	Format        pulumi.StringOutput  `pulumi:"format"`
	JsonEnableTag pulumi.BoolPtrOutput `pulumi:"jsonEnableTag"`
	// The name of the log logstore.
	LogstoreName pulumi.StringOutput `pulumi:"logstoreName"`
	// The name of the oss bucket.
	OssBucket pulumi.StringOutput `pulumi:"ossBucket"`
	// The data synchronized from Log Service to OSS will be stored in this directory of Bucket.
	OssPrefix      pulumi.StringPtrOutput             `pulumi:"ossPrefix"`
	ParquetConfigs OssShipperParquetConfigArrayOutput `pulumi:"parquetConfigs"`
	// The OSS Bucket directory is dynamically generated according to the creation time of the shipper task, it cannot start with a forward slash `/`, the default value is `%Y/%m/%d/%H/%M`.
	PathFormat pulumi.StringOutput `pulumi:"pathFormat"`
	// The name of the log project. It is the only in one Alicloud account.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// Used for access control, the OSS Bucket owner creates the role mark, such as `acs:ram::13234:role/logrole`
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
	// Delivery configuration name, it can only contain lowercase letters, numbers, dashes `-` and underscores `_`. It must start and end with lowercase letters or numbers, and the name must be 2 to 128 characters long.
	ShipperName pulumi.StringOutput `pulumi:"shipperName"`
}

// NewOssShipper registers a new resource with the given unique name, arguments, and options.
func NewOssShipper(ctx *pulumi.Context,
	name string, args *OssShipperArgs, opts ...pulumi.ResourceOption) (*OssShipper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BufferInterval == nil {
		return nil, errors.New("invalid value for required argument 'BufferInterval'")
	}
	if args.BufferSize == nil {
		return nil, errors.New("invalid value for required argument 'BufferSize'")
	}
	if args.Format == nil {
		return nil, errors.New("invalid value for required argument 'Format'")
	}
	if args.LogstoreName == nil {
		return nil, errors.New("invalid value for required argument 'LogstoreName'")
	}
	if args.OssBucket == nil {
		return nil, errors.New("invalid value for required argument 'OssBucket'")
	}
	if args.PathFormat == nil {
		return nil, errors.New("invalid value for required argument 'PathFormat'")
	}
	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.ShipperName == nil {
		return nil, errors.New("invalid value for required argument 'ShipperName'")
	}
	var resource OssShipper
	err := ctx.RegisterResource("alicloud:log/ossShipper:OssShipper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOssShipper gets an existing OssShipper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOssShipper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OssShipperState, opts ...pulumi.ResourceOption) (*OssShipper, error) {
	var resource OssShipper
	err := ctx.ReadResource("alicloud:log/ossShipper:OssShipper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OssShipper resources.
type ossShipperState struct {
	// How often is it delivered every interval.
	BufferInterval *int `pulumi:"bufferInterval"`
	// Automatically control the creation interval of delivery tasks and set the upper limit of an OSS object size (calculated in uncompressed), unit: `MB`.
	BufferSize *int `pulumi:"bufferSize"`
	// OSS data storage compression method, support: none, snappy. Among them, none means that the original data is not compressed, and snappy means that the data is compressed using the snappy algorithm, which can reduce the storage space usage of the `OSS Bucket`.
	CompressType            *string  `pulumi:"compressType"`
	CsvConfigColumns        []string `pulumi:"csvConfigColumns"`
	CsvConfigDelimiter      *string  `pulumi:"csvConfigDelimiter"`
	CsvConfigHeader         *bool    `pulumi:"csvConfigHeader"`
	CsvConfigLinefeed       *string  `pulumi:"csvConfigLinefeed"`
	CsvConfigNullidentifier *string  `pulumi:"csvConfigNullidentifier"`
	CsvConfigQuote          *string  `pulumi:"csvConfigQuote"`
	// Storage format, only supports three types: `json`, `parquet`, `csv`.
	// **According to the different format, please select the following parameters**
	// - format = `json`
	//   `jsonEnableTag` - (Optional) Whether to deliver the label.
	// - format = `csv`
	//   `csvConfigDelimiter` - (Optional) Separator configuration in csv configuration format.
	//   `csvConfigColumns` - (Optional) Field configuration in csv configuration format.
	//   `csvConfigNullidentifier` - (Optional) Invalid field content.
	//   `csvConfigQuote` - (Optional) Escape character under csv configuration.
	//   `csvConfigHeader` - (Optional) Indicates whether to write the field name to the CSV file, the default value is `false`.
	//   `csvConfigLinefeed` - (Optional) Separator in csv configuration.
	// - format = `parquet`
	//   `parquetConfig` - (Optional) Configure to use parquet storage format.
	//   `name` - (Required) The name of the key.
	//   `type` - (Required) Type of configuration name.
	Format        *string `pulumi:"format"`
	JsonEnableTag *bool   `pulumi:"jsonEnableTag"`
	// The name of the log logstore.
	LogstoreName *string `pulumi:"logstoreName"`
	// The name of the oss bucket.
	OssBucket *string `pulumi:"ossBucket"`
	// The data synchronized from Log Service to OSS will be stored in this directory of Bucket.
	OssPrefix      *string                   `pulumi:"ossPrefix"`
	ParquetConfigs []OssShipperParquetConfig `pulumi:"parquetConfigs"`
	// The OSS Bucket directory is dynamically generated according to the creation time of the shipper task, it cannot start with a forward slash `/`, the default value is `%Y/%m/%d/%H/%M`.
	PathFormat *string `pulumi:"pathFormat"`
	// The name of the log project. It is the only in one Alicloud account.
	ProjectName *string `pulumi:"projectName"`
	// Used for access control, the OSS Bucket owner creates the role mark, such as `acs:ram::13234:role/logrole`
	RoleArn *string `pulumi:"roleArn"`
	// Delivery configuration name, it can only contain lowercase letters, numbers, dashes `-` and underscores `_`. It must start and end with lowercase letters or numbers, and the name must be 2 to 128 characters long.
	ShipperName *string `pulumi:"shipperName"`
}

type OssShipperState struct {
	// How often is it delivered every interval.
	BufferInterval pulumi.IntPtrInput
	// Automatically control the creation interval of delivery tasks and set the upper limit of an OSS object size (calculated in uncompressed), unit: `MB`.
	BufferSize pulumi.IntPtrInput
	// OSS data storage compression method, support: none, snappy. Among them, none means that the original data is not compressed, and snappy means that the data is compressed using the snappy algorithm, which can reduce the storage space usage of the `OSS Bucket`.
	CompressType            pulumi.StringPtrInput
	CsvConfigColumns        pulumi.StringArrayInput
	CsvConfigDelimiter      pulumi.StringPtrInput
	CsvConfigHeader         pulumi.BoolPtrInput
	CsvConfigLinefeed       pulumi.StringPtrInput
	CsvConfigNullidentifier pulumi.StringPtrInput
	CsvConfigQuote          pulumi.StringPtrInput
	// Storage format, only supports three types: `json`, `parquet`, `csv`.
	// **According to the different format, please select the following parameters**
	// - format = `json`
	//   `jsonEnableTag` - (Optional) Whether to deliver the label.
	// - format = `csv`
	//   `csvConfigDelimiter` - (Optional) Separator configuration in csv configuration format.
	//   `csvConfigColumns` - (Optional) Field configuration in csv configuration format.
	//   `csvConfigNullidentifier` - (Optional) Invalid field content.
	//   `csvConfigQuote` - (Optional) Escape character under csv configuration.
	//   `csvConfigHeader` - (Optional) Indicates whether to write the field name to the CSV file, the default value is `false`.
	//   `csvConfigLinefeed` - (Optional) Separator in csv configuration.
	// - format = `parquet`
	//   `parquetConfig` - (Optional) Configure to use parquet storage format.
	//   `name` - (Required) The name of the key.
	//   `type` - (Required) Type of configuration name.
	Format        pulumi.StringPtrInput
	JsonEnableTag pulumi.BoolPtrInput
	// The name of the log logstore.
	LogstoreName pulumi.StringPtrInput
	// The name of the oss bucket.
	OssBucket pulumi.StringPtrInput
	// The data synchronized from Log Service to OSS will be stored in this directory of Bucket.
	OssPrefix      pulumi.StringPtrInput
	ParquetConfigs OssShipperParquetConfigArrayInput
	// The OSS Bucket directory is dynamically generated according to the creation time of the shipper task, it cannot start with a forward slash `/`, the default value is `%Y/%m/%d/%H/%M`.
	PathFormat pulumi.StringPtrInput
	// The name of the log project. It is the only in one Alicloud account.
	ProjectName pulumi.StringPtrInput
	// Used for access control, the OSS Bucket owner creates the role mark, such as `acs:ram::13234:role/logrole`
	RoleArn pulumi.StringPtrInput
	// Delivery configuration name, it can only contain lowercase letters, numbers, dashes `-` and underscores `_`. It must start and end with lowercase letters or numbers, and the name must be 2 to 128 characters long.
	ShipperName pulumi.StringPtrInput
}

func (OssShipperState) ElementType() reflect.Type {
	return reflect.TypeOf((*ossShipperState)(nil)).Elem()
}

type ossShipperArgs struct {
	// How often is it delivered every interval.
	BufferInterval int `pulumi:"bufferInterval"`
	// Automatically control the creation interval of delivery tasks and set the upper limit of an OSS object size (calculated in uncompressed), unit: `MB`.
	BufferSize int `pulumi:"bufferSize"`
	// OSS data storage compression method, support: none, snappy. Among them, none means that the original data is not compressed, and snappy means that the data is compressed using the snappy algorithm, which can reduce the storage space usage of the `OSS Bucket`.
	CompressType            *string  `pulumi:"compressType"`
	CsvConfigColumns        []string `pulumi:"csvConfigColumns"`
	CsvConfigDelimiter      *string  `pulumi:"csvConfigDelimiter"`
	CsvConfigHeader         *bool    `pulumi:"csvConfigHeader"`
	CsvConfigLinefeed       *string  `pulumi:"csvConfigLinefeed"`
	CsvConfigNullidentifier *string  `pulumi:"csvConfigNullidentifier"`
	CsvConfigQuote          *string  `pulumi:"csvConfigQuote"`
	// Storage format, only supports three types: `json`, `parquet`, `csv`.
	// **According to the different format, please select the following parameters**
	// - format = `json`
	//   `jsonEnableTag` - (Optional) Whether to deliver the label.
	// - format = `csv`
	//   `csvConfigDelimiter` - (Optional) Separator configuration in csv configuration format.
	//   `csvConfigColumns` - (Optional) Field configuration in csv configuration format.
	//   `csvConfigNullidentifier` - (Optional) Invalid field content.
	//   `csvConfigQuote` - (Optional) Escape character under csv configuration.
	//   `csvConfigHeader` - (Optional) Indicates whether to write the field name to the CSV file, the default value is `false`.
	//   `csvConfigLinefeed` - (Optional) Separator in csv configuration.
	// - format = `parquet`
	//   `parquetConfig` - (Optional) Configure to use parquet storage format.
	//   `name` - (Required) The name of the key.
	//   `type` - (Required) Type of configuration name.
	Format        string `pulumi:"format"`
	JsonEnableTag *bool  `pulumi:"jsonEnableTag"`
	// The name of the log logstore.
	LogstoreName string `pulumi:"logstoreName"`
	// The name of the oss bucket.
	OssBucket string `pulumi:"ossBucket"`
	// The data synchronized from Log Service to OSS will be stored in this directory of Bucket.
	OssPrefix      *string                   `pulumi:"ossPrefix"`
	ParquetConfigs []OssShipperParquetConfig `pulumi:"parquetConfigs"`
	// The OSS Bucket directory is dynamically generated according to the creation time of the shipper task, it cannot start with a forward slash `/`, the default value is `%Y/%m/%d/%H/%M`.
	PathFormat string `pulumi:"pathFormat"`
	// The name of the log project. It is the only in one Alicloud account.
	ProjectName string `pulumi:"projectName"`
	// Used for access control, the OSS Bucket owner creates the role mark, such as `acs:ram::13234:role/logrole`
	RoleArn *string `pulumi:"roleArn"`
	// Delivery configuration name, it can only contain lowercase letters, numbers, dashes `-` and underscores `_`. It must start and end with lowercase letters or numbers, and the name must be 2 to 128 characters long.
	ShipperName string `pulumi:"shipperName"`
}

// The set of arguments for constructing a OssShipper resource.
type OssShipperArgs struct {
	// How often is it delivered every interval.
	BufferInterval pulumi.IntInput
	// Automatically control the creation interval of delivery tasks and set the upper limit of an OSS object size (calculated in uncompressed), unit: `MB`.
	BufferSize pulumi.IntInput
	// OSS data storage compression method, support: none, snappy. Among them, none means that the original data is not compressed, and snappy means that the data is compressed using the snappy algorithm, which can reduce the storage space usage of the `OSS Bucket`.
	CompressType            pulumi.StringPtrInput
	CsvConfigColumns        pulumi.StringArrayInput
	CsvConfigDelimiter      pulumi.StringPtrInput
	CsvConfigHeader         pulumi.BoolPtrInput
	CsvConfigLinefeed       pulumi.StringPtrInput
	CsvConfigNullidentifier pulumi.StringPtrInput
	CsvConfigQuote          pulumi.StringPtrInput
	// Storage format, only supports three types: `json`, `parquet`, `csv`.
	// **According to the different format, please select the following parameters**
	// - format = `json`
	//   `jsonEnableTag` - (Optional) Whether to deliver the label.
	// - format = `csv`
	//   `csvConfigDelimiter` - (Optional) Separator configuration in csv configuration format.
	//   `csvConfigColumns` - (Optional) Field configuration in csv configuration format.
	//   `csvConfigNullidentifier` - (Optional) Invalid field content.
	//   `csvConfigQuote` - (Optional) Escape character under csv configuration.
	//   `csvConfigHeader` - (Optional) Indicates whether to write the field name to the CSV file, the default value is `false`.
	//   `csvConfigLinefeed` - (Optional) Separator in csv configuration.
	// - format = `parquet`
	//   `parquetConfig` - (Optional) Configure to use parquet storage format.
	//   `name` - (Required) The name of the key.
	//   `type` - (Required) Type of configuration name.
	Format        pulumi.StringInput
	JsonEnableTag pulumi.BoolPtrInput
	// The name of the log logstore.
	LogstoreName pulumi.StringInput
	// The name of the oss bucket.
	OssBucket pulumi.StringInput
	// The data synchronized from Log Service to OSS will be stored in this directory of Bucket.
	OssPrefix      pulumi.StringPtrInput
	ParquetConfigs OssShipperParquetConfigArrayInput
	// The OSS Bucket directory is dynamically generated according to the creation time of the shipper task, it cannot start with a forward slash `/`, the default value is `%Y/%m/%d/%H/%M`.
	PathFormat pulumi.StringInput
	// The name of the log project. It is the only in one Alicloud account.
	ProjectName pulumi.StringInput
	// Used for access control, the OSS Bucket owner creates the role mark, such as `acs:ram::13234:role/logrole`
	RoleArn pulumi.StringPtrInput
	// Delivery configuration name, it can only contain lowercase letters, numbers, dashes `-` and underscores `_`. It must start and end with lowercase letters or numbers, and the name must be 2 to 128 characters long.
	ShipperName pulumi.StringInput
}

func (OssShipperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ossShipperArgs)(nil)).Elem()
}

type OssShipperInput interface {
	pulumi.Input

	ToOssShipperOutput() OssShipperOutput
	ToOssShipperOutputWithContext(ctx context.Context) OssShipperOutput
}

func (*OssShipper) ElementType() reflect.Type {
	return reflect.TypeOf((*OssShipper)(nil))
}

func (i *OssShipper) ToOssShipperOutput() OssShipperOutput {
	return i.ToOssShipperOutputWithContext(context.Background())
}

func (i *OssShipper) ToOssShipperOutputWithContext(ctx context.Context) OssShipperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OssShipperOutput)
}

func (i *OssShipper) ToOssShipperPtrOutput() OssShipperPtrOutput {
	return i.ToOssShipperPtrOutputWithContext(context.Background())
}

func (i *OssShipper) ToOssShipperPtrOutputWithContext(ctx context.Context) OssShipperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OssShipperPtrOutput)
}

type OssShipperPtrInput interface {
	pulumi.Input

	ToOssShipperPtrOutput() OssShipperPtrOutput
	ToOssShipperPtrOutputWithContext(ctx context.Context) OssShipperPtrOutput
}

type ossShipperPtrType OssShipperArgs

func (*ossShipperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OssShipper)(nil))
}

func (i *ossShipperPtrType) ToOssShipperPtrOutput() OssShipperPtrOutput {
	return i.ToOssShipperPtrOutputWithContext(context.Background())
}

func (i *ossShipperPtrType) ToOssShipperPtrOutputWithContext(ctx context.Context) OssShipperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OssShipperPtrOutput)
}

// OssShipperArrayInput is an input type that accepts OssShipperArray and OssShipperArrayOutput values.
// You can construct a concrete instance of `OssShipperArrayInput` via:
//
//          OssShipperArray{ OssShipperArgs{...} }
type OssShipperArrayInput interface {
	pulumi.Input

	ToOssShipperArrayOutput() OssShipperArrayOutput
	ToOssShipperArrayOutputWithContext(context.Context) OssShipperArrayOutput
}

type OssShipperArray []OssShipperInput

func (OssShipperArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*OssShipper)(nil))
}

func (i OssShipperArray) ToOssShipperArrayOutput() OssShipperArrayOutput {
	return i.ToOssShipperArrayOutputWithContext(context.Background())
}

func (i OssShipperArray) ToOssShipperArrayOutputWithContext(ctx context.Context) OssShipperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OssShipperArrayOutput)
}

// OssShipperMapInput is an input type that accepts OssShipperMap and OssShipperMapOutput values.
// You can construct a concrete instance of `OssShipperMapInput` via:
//
//          OssShipperMap{ "key": OssShipperArgs{...} }
type OssShipperMapInput interface {
	pulumi.Input

	ToOssShipperMapOutput() OssShipperMapOutput
	ToOssShipperMapOutputWithContext(context.Context) OssShipperMapOutput
}

type OssShipperMap map[string]OssShipperInput

func (OssShipperMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*OssShipper)(nil))
}

func (i OssShipperMap) ToOssShipperMapOutput() OssShipperMapOutput {
	return i.ToOssShipperMapOutputWithContext(context.Background())
}

func (i OssShipperMap) ToOssShipperMapOutputWithContext(ctx context.Context) OssShipperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OssShipperMapOutput)
}

type OssShipperOutput struct {
	*pulumi.OutputState
}

func (OssShipperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OssShipper)(nil))
}

func (o OssShipperOutput) ToOssShipperOutput() OssShipperOutput {
	return o
}

func (o OssShipperOutput) ToOssShipperOutputWithContext(ctx context.Context) OssShipperOutput {
	return o
}

func (o OssShipperOutput) ToOssShipperPtrOutput() OssShipperPtrOutput {
	return o.ToOssShipperPtrOutputWithContext(context.Background())
}

func (o OssShipperOutput) ToOssShipperPtrOutputWithContext(ctx context.Context) OssShipperPtrOutput {
	return o.ApplyT(func(v OssShipper) *OssShipper {
		return &v
	}).(OssShipperPtrOutput)
}

type OssShipperPtrOutput struct {
	*pulumi.OutputState
}

func (OssShipperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OssShipper)(nil))
}

func (o OssShipperPtrOutput) ToOssShipperPtrOutput() OssShipperPtrOutput {
	return o
}

func (o OssShipperPtrOutput) ToOssShipperPtrOutputWithContext(ctx context.Context) OssShipperPtrOutput {
	return o
}

type OssShipperArrayOutput struct{ *pulumi.OutputState }

func (OssShipperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OssShipper)(nil))
}

func (o OssShipperArrayOutput) ToOssShipperArrayOutput() OssShipperArrayOutput {
	return o
}

func (o OssShipperArrayOutput) ToOssShipperArrayOutputWithContext(ctx context.Context) OssShipperArrayOutput {
	return o
}

func (o OssShipperArrayOutput) Index(i pulumi.IntInput) OssShipperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OssShipper {
		return vs[0].([]OssShipper)[vs[1].(int)]
	}).(OssShipperOutput)
}

type OssShipperMapOutput struct{ *pulumi.OutputState }

func (OssShipperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OssShipper)(nil))
}

func (o OssShipperMapOutput) ToOssShipperMapOutput() OssShipperMapOutput {
	return o
}

func (o OssShipperMapOutput) ToOssShipperMapOutputWithContext(ctx context.Context) OssShipperMapOutput {
	return o
}

func (o OssShipperMapOutput) MapIndex(k pulumi.StringInput) OssShipperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OssShipper {
		return vs[0].(map[string]OssShipper)[vs[1].(string)]
	}).(OssShipperOutput)
}

func init() {
	pulumi.RegisterOutputType(OssShipperOutput{})
	pulumi.RegisterOutputType(OssShipperPtrOutput{})
	pulumi.RegisterOutputType(OssShipperArrayOutput{})
	pulumi.RegisterOutputType(OssShipperMapOutput{})
}
