// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package log

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The dashboard is a real-time data analysis platform provided by the log service. You can display frequently used query and analysis statements in the form of charts and save statistical charts to the dashboard.
// [Refer to details](https://www.alibabacloud.com/help/doc-detail/102530.htm).
//
// > **NOTE:** Available in 1.86.0
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/log"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := log.NewProject(ctx, "defaultProject", &log.ProjectArgs{
// 			Description: pulumi.String("tf unit test"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = log.NewStore(ctx, "defaultStore", &log.StoreArgs{
// 			Project:         pulumi.String("tf-project"),
// 			RetentionPeriod: pulumi.Int(3000),
// 			ShardCount:      pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = log.NewDashboard(ctx, "example", &log.DashboardArgs{
// 			CharList:      pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "  [\n", "    {\n", "      \"title\":\"new_title\",\n", "      \"type\":\"map\",\n", "      \"search\":{\n", "        \"logstore\":\"tf-logstore\",\n", "        \"topic\":\"new_topic\",\n", "        \"query\":\"* | SELECT COUNT(name) as ct_name, COUNT(product) as ct_product, name,product GROUP BY name,product\",\n", "        \"start\":\"-86400s\",\n", "        \"end\":\"now\"\n", "      },\n", "      \"display\":{\n", "        \"xAxis\":[\n", "          \"ct_name\"\n", "        ],\n", "        \"yAxis\":[\n", "          \"ct_product\"\n", "        ],\n", "        \"xPos\":0,\n", "        \"yPos\":0,\n", "        \"width\":10,\n", "        \"height\":12,\n", "        \"displayName\":\"xixihaha911\"\n", "      }\n", "    }\n", "  ]\n", "\n")),
// 			DashboardName: pulumi.String("tf-dashboard"),
// 			ProjectName:   pulumi.String("tf-project"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Log Dashboard can be imported using the id or name, e.g.
//
// ```sh
//  $ pulumi import alicloud:log/dashboard:Dashboard example tf-project:tf-logstore:tf-dashboard
// ```
type Dashboard struct {
	pulumi.CustomResourceState

	// Configuration of charts in the dashboard.
	CharList pulumi.StringOutput `pulumi:"charList"`
	// The name of the Log Dashboard.
	DashboardName pulumi.StringOutput `pulumi:"dashboardName"`
	// Dashboard alias.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The name of the log project. It is the only in one Alicloud account.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil || args.CharList == nil {
		return nil, errors.New("missing required argument 'CharList'")
	}
	if args == nil || args.DashboardName == nil {
		return nil, errors.New("missing required argument 'DashboardName'")
	}
	if args == nil || args.ProjectName == nil {
		return nil, errors.New("missing required argument 'ProjectName'")
	}
	if args == nil {
		args = &DashboardArgs{}
	}
	var resource Dashboard
	err := ctx.RegisterResource("alicloud:log/dashboard:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("alicloud:log/dashboard:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
	// Configuration of charts in the dashboard.
	CharList *string `pulumi:"charList"`
	// The name of the Log Dashboard.
	DashboardName *string `pulumi:"dashboardName"`
	// Dashboard alias.
	DisplayName *string `pulumi:"displayName"`
	// The name of the log project. It is the only in one Alicloud account.
	ProjectName *string `pulumi:"projectName"`
}

type DashboardState struct {
	// Configuration of charts in the dashboard.
	CharList pulumi.StringPtrInput
	// The name of the Log Dashboard.
	DashboardName pulumi.StringPtrInput
	// Dashboard alias.
	DisplayName pulumi.StringPtrInput
	// The name of the log project. It is the only in one Alicloud account.
	ProjectName pulumi.StringPtrInput
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	// Configuration of charts in the dashboard.
	CharList string `pulumi:"charList"`
	// The name of the Log Dashboard.
	DashboardName string `pulumi:"dashboardName"`
	// Dashboard alias.
	DisplayName *string `pulumi:"displayName"`
	// The name of the log project. It is the only in one Alicloud account.
	ProjectName string `pulumi:"projectName"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// Configuration of charts in the dashboard.
	CharList pulumi.StringInput
	// The name of the Log Dashboard.
	DashboardName pulumi.StringInput
	// Dashboard alias.
	DisplayName pulumi.StringPtrInput
	// The name of the log project. It is the only in one Alicloud account.
	ProjectName pulumi.StringInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((*Dashboard)(nil)).Elem()
}

func (i Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

type DashboardOutput struct {
	*pulumi.OutputState
}

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardOutput)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DashboardOutput{})
}
