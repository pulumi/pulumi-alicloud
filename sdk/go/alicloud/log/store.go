// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package log

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Log store can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:log/store:Store example tf-log:tf-log-store
// ```
type Store struct {
	pulumi.CustomResourceState

	// Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to true.
	AppendMeta pulumi.BoolPtrOutput `pulumi:"appendMeta"`
	// Determines whether to automatically split a shard. Default to true.
	AutoSplit pulumi.BoolPtrOutput `pulumi:"autoSplit"`
	// Determines whether to enable Web Tracking. Default false.
	EnableWebTracking pulumi.BoolPtrOutput `pulumi:"enableWebTracking"`
	// The maximum number of shards for automatic split, which is in the range of 1 to 64. You must specify this parameter when autoSplit is true.
	MaxSplitShardCount pulumi.IntPtrOutput `pulumi:"maxSplitShardCount"`
	// The log store, which is unique in the same project.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project name to the log store belongs.
	Project pulumi.StringOutput `pulumi:"project"`
	// The data retention time (in days). Valid values: [1-3650]. Default to 30. Log store data will be stored permanently when the value is "3650".
	RetentionPeriod pulumi.IntPtrOutput `pulumi:"retentionPeriod"`
	// The number of shards in this log store. Default to 2. You can modify it by "Split" or "Merge" operations. [Refer to details](https://www.alibabacloud.com/help/doc-detail/28976.htm)
	ShardCount pulumi.IntPtrOutput   `pulumi:"shardCount"`
	Shards     StoreShardArrayOutput `pulumi:"shards"`
}

// NewStore registers a new resource with the given unique name, arguments, and options.
func NewStore(ctx *pulumi.Context,
	name string, args *StoreArgs, opts ...pulumi.ResourceOption) (*Store, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil {
		args = &StoreArgs{}
	}
	var resource Store
	err := ctx.RegisterResource("alicloud:log/store:Store", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStore gets an existing Store resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StoreState, opts ...pulumi.ResourceOption) (*Store, error) {
	var resource Store
	err := ctx.ReadResource("alicloud:log/store:Store", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Store resources.
type storeState struct {
	// Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to true.
	AppendMeta *bool `pulumi:"appendMeta"`
	// Determines whether to automatically split a shard. Default to true.
	AutoSplit *bool `pulumi:"autoSplit"`
	// Determines whether to enable Web Tracking. Default false.
	EnableWebTracking *bool `pulumi:"enableWebTracking"`
	// The maximum number of shards for automatic split, which is in the range of 1 to 64. You must specify this parameter when autoSplit is true.
	MaxSplitShardCount *int `pulumi:"maxSplitShardCount"`
	// The log store, which is unique in the same project.
	Name *string `pulumi:"name"`
	// The project name to the log store belongs.
	Project *string `pulumi:"project"`
	// The data retention time (in days). Valid values: [1-3650]. Default to 30. Log store data will be stored permanently when the value is "3650".
	RetentionPeriod *int `pulumi:"retentionPeriod"`
	// The number of shards in this log store. Default to 2. You can modify it by "Split" or "Merge" operations. [Refer to details](https://www.alibabacloud.com/help/doc-detail/28976.htm)
	ShardCount *int         `pulumi:"shardCount"`
	Shards     []StoreShard `pulumi:"shards"`
}

type StoreState struct {
	// Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to true.
	AppendMeta pulumi.BoolPtrInput
	// Determines whether to automatically split a shard. Default to true.
	AutoSplit pulumi.BoolPtrInput
	// Determines whether to enable Web Tracking. Default false.
	EnableWebTracking pulumi.BoolPtrInput
	// The maximum number of shards for automatic split, which is in the range of 1 to 64. You must specify this parameter when autoSplit is true.
	MaxSplitShardCount pulumi.IntPtrInput
	// The log store, which is unique in the same project.
	Name pulumi.StringPtrInput
	// The project name to the log store belongs.
	Project pulumi.StringPtrInput
	// The data retention time (in days). Valid values: [1-3650]. Default to 30. Log store data will be stored permanently when the value is "3650".
	RetentionPeriod pulumi.IntPtrInput
	// The number of shards in this log store. Default to 2. You can modify it by "Split" or "Merge" operations. [Refer to details](https://www.alibabacloud.com/help/doc-detail/28976.htm)
	ShardCount pulumi.IntPtrInput
	Shards     StoreShardArrayInput
}

func (StoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*storeState)(nil)).Elem()
}

type storeArgs struct {
	// Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to true.
	AppendMeta *bool `pulumi:"appendMeta"`
	// Determines whether to automatically split a shard. Default to true.
	AutoSplit *bool `pulumi:"autoSplit"`
	// Determines whether to enable Web Tracking. Default false.
	EnableWebTracking *bool `pulumi:"enableWebTracking"`
	// The maximum number of shards for automatic split, which is in the range of 1 to 64. You must specify this parameter when autoSplit is true.
	MaxSplitShardCount *int `pulumi:"maxSplitShardCount"`
	// The log store, which is unique in the same project.
	Name *string `pulumi:"name"`
	// The project name to the log store belongs.
	Project string `pulumi:"project"`
	// The data retention time (in days). Valid values: [1-3650]. Default to 30. Log store data will be stored permanently when the value is "3650".
	RetentionPeriod *int `pulumi:"retentionPeriod"`
	// The number of shards in this log store. Default to 2. You can modify it by "Split" or "Merge" operations. [Refer to details](https://www.alibabacloud.com/help/doc-detail/28976.htm)
	ShardCount *int `pulumi:"shardCount"`
}

// The set of arguments for constructing a Store resource.
type StoreArgs struct {
	// Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to true.
	AppendMeta pulumi.BoolPtrInput
	// Determines whether to automatically split a shard. Default to true.
	AutoSplit pulumi.BoolPtrInput
	// Determines whether to enable Web Tracking. Default false.
	EnableWebTracking pulumi.BoolPtrInput
	// The maximum number of shards for automatic split, which is in the range of 1 to 64. You must specify this parameter when autoSplit is true.
	MaxSplitShardCount pulumi.IntPtrInput
	// The log store, which is unique in the same project.
	Name pulumi.StringPtrInput
	// The project name to the log store belongs.
	Project pulumi.StringInput
	// The data retention time (in days). Valid values: [1-3650]. Default to 30. Log store data will be stored permanently when the value is "3650".
	RetentionPeriod pulumi.IntPtrInput
	// The number of shards in this log store. Default to 2. You can modify it by "Split" or "Merge" operations. [Refer to details](https://www.alibabacloud.com/help/doc-detail/28976.htm)
	ShardCount pulumi.IntPtrInput
}

func (StoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storeArgs)(nil)).Elem()
}

type StoreInput interface {
	pulumi.Input

	ToStoreOutput() StoreOutput
	ToStoreOutputWithContext(ctx context.Context) StoreOutput
}

func (Store) ElementType() reflect.Type {
	return reflect.TypeOf((*Store)(nil)).Elem()
}

func (i Store) ToStoreOutput() StoreOutput {
	return i.ToStoreOutputWithContext(context.Background())
}

func (i Store) ToStoreOutputWithContext(ctx context.Context) StoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreOutput)
}

type StoreOutput struct {
	*pulumi.OutputState
}

func (StoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreOutput)(nil)).Elem()
}

func (o StoreOutput) ToStoreOutput() StoreOutput {
	return o
}

func (o StoreOutput) ToStoreOutputWithContext(ctx context.Context) StoreOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StoreOutput{})
}
