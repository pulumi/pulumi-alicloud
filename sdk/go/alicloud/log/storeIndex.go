// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package log

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Log store index can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:log/storeIndex:StoreIndex example tf-log:tf-log-store
// ```
type StoreIndex struct {
	pulumi.CustomResourceState

	// List configurations of field search index. Valid item as follows:
	FieldSearches StoreIndexFieldSearchArrayOutput `pulumi:"fieldSearches"`
	// The configuration of full text index. Valid item as follows:
	FullText StoreIndexFullTextPtrOutput `pulumi:"fullText"`
	// The log store name to the query index belongs.
	Logstore pulumi.StringOutput `pulumi:"logstore"`
	// The project name to the log store belongs.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewStoreIndex registers a new resource with the given unique name, arguments, and options.
func NewStoreIndex(ctx *pulumi.Context,
	name string, args *StoreIndexArgs, opts ...pulumi.ResourceOption) (*StoreIndex, error) {
	if args == nil || args.Logstore == nil {
		return nil, errors.New("missing required argument 'Logstore'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil {
		args = &StoreIndexArgs{}
	}
	var resource StoreIndex
	err := ctx.RegisterResource("alicloud:log/storeIndex:StoreIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStoreIndex gets an existing StoreIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStoreIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StoreIndexState, opts ...pulumi.ResourceOption) (*StoreIndex, error) {
	var resource StoreIndex
	err := ctx.ReadResource("alicloud:log/storeIndex:StoreIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StoreIndex resources.
type storeIndexState struct {
	// List configurations of field search index. Valid item as follows:
	FieldSearches []StoreIndexFieldSearch `pulumi:"fieldSearches"`
	// The configuration of full text index. Valid item as follows:
	FullText *StoreIndexFullText `pulumi:"fullText"`
	// The log store name to the query index belongs.
	Logstore *string `pulumi:"logstore"`
	// The project name to the log store belongs.
	Project *string `pulumi:"project"`
}

type StoreIndexState struct {
	// List configurations of field search index. Valid item as follows:
	FieldSearches StoreIndexFieldSearchArrayInput
	// The configuration of full text index. Valid item as follows:
	FullText StoreIndexFullTextPtrInput
	// The log store name to the query index belongs.
	Logstore pulumi.StringPtrInput
	// The project name to the log store belongs.
	Project pulumi.StringPtrInput
}

func (StoreIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*storeIndexState)(nil)).Elem()
}

type storeIndexArgs struct {
	// List configurations of field search index. Valid item as follows:
	FieldSearches []StoreIndexFieldSearch `pulumi:"fieldSearches"`
	// The configuration of full text index. Valid item as follows:
	FullText *StoreIndexFullText `pulumi:"fullText"`
	// The log store name to the query index belongs.
	Logstore string `pulumi:"logstore"`
	// The project name to the log store belongs.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a StoreIndex resource.
type StoreIndexArgs struct {
	// List configurations of field search index. Valid item as follows:
	FieldSearches StoreIndexFieldSearchArrayInput
	// The configuration of full text index. Valid item as follows:
	FullText StoreIndexFullTextPtrInput
	// The log store name to the query index belongs.
	Logstore pulumi.StringInput
	// The project name to the log store belongs.
	Project pulumi.StringInput
}

func (StoreIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storeIndexArgs)(nil)).Elem()
}

type StoreIndexInput interface {
	pulumi.Input

	ToStoreIndexOutput() StoreIndexOutput
	ToStoreIndexOutputWithContext(ctx context.Context) StoreIndexOutput
}

func (StoreIndex) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreIndex)(nil)).Elem()
}

func (i StoreIndex) ToStoreIndexOutput() StoreIndexOutput {
	return i.ToStoreIndexOutputWithContext(context.Background())
}

func (i StoreIndex) ToStoreIndexOutputWithContext(ctx context.Context) StoreIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreIndexOutput)
}

type StoreIndexOutput struct {
	*pulumi.OutputState
}

func (StoreIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreIndexOutput)(nil)).Elem()
}

func (o StoreIndexOutput) ToStoreIndexOutput() StoreIndexOutput {
	return o
}

func (o StoreIndexOutput) ToStoreIndexOutputWithContext(ctx context.Context) StoreIndexOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StoreIndexOutput{})
}
