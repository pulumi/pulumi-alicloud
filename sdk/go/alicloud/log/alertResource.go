// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package log

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Using this resource can init SLS Alert resources automatically.
//
// For information about SLS Alert and how to use it, see [SLS Alert Overview](https://www.alibabacloud.com/help/en/doc-detail/209202.html)
//
// > **NOTE:** Available since v1.219.0.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/log"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := log.NewAlertResource(ctx, "example_user", &log.AlertResourceArgs{
//				Type: pulumi.String("user"),
//				Lang: pulumi.String("cn"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Log alert resource can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:log/alertResource:AlertResource example alert_resource:project:tf-project
// ```
type AlertResource struct {
	pulumi.CustomResourceState

	// The lang of alert center resource when type is user.
	Lang pulumi.StringPtrOutput `pulumi:"lang"`
	// The project of alert resource when type is project.
	Project pulumi.StringPtrOutput `pulumi:"project"`
	// The type of alert resources, must be user or project, 'user' for init aliyuncloud account's alert center resource, including project named sls-alert-{uid}-{region} and some dashboards; 'project' for init project's alert resource, including logstore named internal-alert-history and alert dashboard.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAlertResource registers a new resource with the given unique name, arguments, and options.
func NewAlertResource(ctx *pulumi.Context,
	name string, args *AlertResourceArgs, opts ...pulumi.ResourceOption) (*AlertResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AlertResource
	err := ctx.RegisterResource("alicloud:log/alertResource:AlertResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertResource gets an existing AlertResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertResourceState, opts ...pulumi.ResourceOption) (*AlertResource, error) {
	var resource AlertResource
	err := ctx.ReadResource("alicloud:log/alertResource:AlertResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertResource resources.
type alertResourceState struct {
	// The lang of alert center resource when type is user.
	Lang *string `pulumi:"lang"`
	// The project of alert resource when type is project.
	Project *string `pulumi:"project"`
	// The type of alert resources, must be user or project, 'user' for init aliyuncloud account's alert center resource, including project named sls-alert-{uid}-{region} and some dashboards; 'project' for init project's alert resource, including logstore named internal-alert-history and alert dashboard.
	Type *string `pulumi:"type"`
}

type AlertResourceState struct {
	// The lang of alert center resource when type is user.
	Lang pulumi.StringPtrInput
	// The project of alert resource when type is project.
	Project pulumi.StringPtrInput
	// The type of alert resources, must be user or project, 'user' for init aliyuncloud account's alert center resource, including project named sls-alert-{uid}-{region} and some dashboards; 'project' for init project's alert resource, including logstore named internal-alert-history and alert dashboard.
	Type pulumi.StringPtrInput
}

func (AlertResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertResourceState)(nil)).Elem()
}

type alertResourceArgs struct {
	// The lang of alert center resource when type is user.
	Lang *string `pulumi:"lang"`
	// The project of alert resource when type is project.
	Project *string `pulumi:"project"`
	// The type of alert resources, must be user or project, 'user' for init aliyuncloud account's alert center resource, including project named sls-alert-{uid}-{region} and some dashboards; 'project' for init project's alert resource, including logstore named internal-alert-history and alert dashboard.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a AlertResource resource.
type AlertResourceArgs struct {
	// The lang of alert center resource when type is user.
	Lang pulumi.StringPtrInput
	// The project of alert resource when type is project.
	Project pulumi.StringPtrInput
	// The type of alert resources, must be user or project, 'user' for init aliyuncloud account's alert center resource, including project named sls-alert-{uid}-{region} and some dashboards; 'project' for init project's alert resource, including logstore named internal-alert-history and alert dashboard.
	Type pulumi.StringInput
}

func (AlertResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertResourceArgs)(nil)).Elem()
}

type AlertResourceInput interface {
	pulumi.Input

	ToAlertResourceOutput() AlertResourceOutput
	ToAlertResourceOutputWithContext(ctx context.Context) AlertResourceOutput
}

func (*AlertResource) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertResource)(nil)).Elem()
}

func (i *AlertResource) ToAlertResourceOutput() AlertResourceOutput {
	return i.ToAlertResourceOutputWithContext(context.Background())
}

func (i *AlertResource) ToAlertResourceOutputWithContext(ctx context.Context) AlertResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertResourceOutput)
}

// AlertResourceArrayInput is an input type that accepts AlertResourceArray and AlertResourceArrayOutput values.
// You can construct a concrete instance of `AlertResourceArrayInput` via:
//
//	AlertResourceArray{ AlertResourceArgs{...} }
type AlertResourceArrayInput interface {
	pulumi.Input

	ToAlertResourceArrayOutput() AlertResourceArrayOutput
	ToAlertResourceArrayOutputWithContext(context.Context) AlertResourceArrayOutput
}

type AlertResourceArray []AlertResourceInput

func (AlertResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertResource)(nil)).Elem()
}

func (i AlertResourceArray) ToAlertResourceArrayOutput() AlertResourceArrayOutput {
	return i.ToAlertResourceArrayOutputWithContext(context.Background())
}

func (i AlertResourceArray) ToAlertResourceArrayOutputWithContext(ctx context.Context) AlertResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertResourceArrayOutput)
}

// AlertResourceMapInput is an input type that accepts AlertResourceMap and AlertResourceMapOutput values.
// You can construct a concrete instance of `AlertResourceMapInput` via:
//
//	AlertResourceMap{ "key": AlertResourceArgs{...} }
type AlertResourceMapInput interface {
	pulumi.Input

	ToAlertResourceMapOutput() AlertResourceMapOutput
	ToAlertResourceMapOutputWithContext(context.Context) AlertResourceMapOutput
}

type AlertResourceMap map[string]AlertResourceInput

func (AlertResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertResource)(nil)).Elem()
}

func (i AlertResourceMap) ToAlertResourceMapOutput() AlertResourceMapOutput {
	return i.ToAlertResourceMapOutputWithContext(context.Background())
}

func (i AlertResourceMap) ToAlertResourceMapOutputWithContext(ctx context.Context) AlertResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertResourceMapOutput)
}

type AlertResourceOutput struct{ *pulumi.OutputState }

func (AlertResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertResource)(nil)).Elem()
}

func (o AlertResourceOutput) ToAlertResourceOutput() AlertResourceOutput {
	return o
}

func (o AlertResourceOutput) ToAlertResourceOutputWithContext(ctx context.Context) AlertResourceOutput {
	return o
}

// The lang of alert center resource when type is user.
func (o AlertResourceOutput) Lang() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertResource) pulumi.StringPtrOutput { return v.Lang }).(pulumi.StringPtrOutput)
}

// The project of alert resource when type is project.
func (o AlertResourceOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertResource) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

// The type of alert resources, must be user or project, 'user' for init aliyuncloud account's alert center resource, including project named sls-alert-{uid}-{region} and some dashboards; 'project' for init project's alert resource, including logstore named internal-alert-history and alert dashboard.
func (o AlertResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertResource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type AlertResourceArrayOutput struct{ *pulumi.OutputState }

func (AlertResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertResource)(nil)).Elem()
}

func (o AlertResourceArrayOutput) ToAlertResourceArrayOutput() AlertResourceArrayOutput {
	return o
}

func (o AlertResourceArrayOutput) ToAlertResourceArrayOutputWithContext(ctx context.Context) AlertResourceArrayOutput {
	return o
}

func (o AlertResourceArrayOutput) Index(i pulumi.IntInput) AlertResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlertResource {
		return vs[0].([]*AlertResource)[vs[1].(int)]
	}).(AlertResourceOutput)
}

type AlertResourceMapOutput struct{ *pulumi.OutputState }

func (AlertResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertResource)(nil)).Elem()
}

func (o AlertResourceMapOutput) ToAlertResourceMapOutput() AlertResourceMapOutput {
	return o
}

func (o AlertResourceMapOutput) ToAlertResourceMapOutputWithContext(ctx context.Context) AlertResourceMapOutput {
	return o
}

func (o AlertResourceMapOutput) MapIndex(k pulumi.StringInput) AlertResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlertResource {
		return vs[0].(map[string]*AlertResource)[vs[1].(string)]
	}).(AlertResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertResourceInput)(nil)).Elem(), &AlertResource{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertResourceArrayInput)(nil)).Elem(), AlertResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertResourceMapInput)(nil)).Elem(), AlertResourceMap{})
	pulumi.RegisterOutputType(AlertResourceOutput{})
	pulumi.RegisterOutputType(AlertResourceArrayOutput{})
	pulumi.RegisterOutputType(AlertResourceMapOutput{})
}
