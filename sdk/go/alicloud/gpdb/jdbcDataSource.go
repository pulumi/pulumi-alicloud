// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gpdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a GPDB Jdbc Data Source resource.
//
// For information about GPDB Jdbc Data Source and how to use it, see [What is Jdbc Data Source](https://www.alibabacloud.com/help/en/analyticdb/analyticdb-for-postgresql/developer-reference/api-gpdb-2016-05-03-createjdbcdatasource).
//
// > **NOTE:** Available since v1.230.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/gpdb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetNetworks, err := vpc.GetNetworks(ctx, &vpc.GetNetworksArgs{
//				NameRegex: pulumi.StringRef("^default-NODELETING$"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetSwitches, err := vpc.GetSwitches(ctx, &vpc.GetSwitchesArgs{
//				VpcId:  pulumi.StringRef(defaultGetNetworks.Ids[0]),
//				ZoneId: pulumi.StringRef("cn-beijing-h"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaulttuqTmM, err := gpdb.NewInstance(ctx, "defaulttuqTmM", &gpdb.InstanceArgs{
//				InstanceSpec:        pulumi.String("2C8G"),
//				Description:         pulumi.String(name),
//				SegNodeNum:          pulumi.Int(2),
//				SegStorageType:      pulumi.String("cloud_essd"),
//				InstanceNetworkType: pulumi.String("VPC"),
//				PaymentType:         pulumi.String("PayAsYouGo"),
//				SslEnabled:          pulumi.Int(0),
//				EngineVersion:       pulumi.String("6.0"),
//				ZoneId:              pulumi.String("cn-beijing-h"),
//				VswitchId:           pulumi.String(defaultGetSwitches.Ids[0]),
//				StorageSize:         pulumi.Int(50),
//				MasterCu:            pulumi.Int(4),
//				VpcId:               pulumi.String(defaultGetNetworks.Ids[0]),
//				DbInstanceMode:      pulumi.String("StorageElastic"),
//				Engine:              pulumi.String("gpdb"),
//				DbInstanceCategory:  pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gpdb.NewAccount(ctx, "defaultsk1eaS", &gpdb.AccountArgs{
//				AccountDescription: pulumi.String("example_001"),
//				DbInstanceId:       defaulttuqTmM.ID(),
//				AccountName:        pulumi.String("example_001"),
//				AccountPassword:    pulumi.String("example_001"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultRXkfKL, err := gpdb.NewExternalDataService(ctx, "defaultRXkfKL", &gpdb.ExternalDataServiceArgs{
//				ServiceName:        pulumi.String(name),
//				DbInstanceId:       defaulttuqTmM.ID(),
//				ServiceDescription: pulumi.String("myexample"),
//				ServiceSpec:        pulumi.String("8"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gpdb.NewJdbcDataSource(ctx, "default", &gpdb.JdbcDataSourceArgs{
//				JdbcConnectionString:  pulumi.String("jdbc:mysql://rm-2ze327yr44c61183c.mysql.rds.aliyuncs.com:3306/example_001"),
//				DataSourceDescription: pulumi.String("myexample"),
//				DbInstanceId:          defaulttuqTmM.ID(),
//				JdbcPassword:          pulumi.String("example_001"),
//				DataSourceName:        defaultRXkfKL.ServiceName,
//				DataSourceType:        pulumi.String("mysql"),
//				JdbcUserName:          pulumi.String("example_001"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GPDB Jdbc Data Source can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:gpdb/jdbcDataSource:JdbcDataSource example <db_instance_id>:<data_source_id>
// ```
type JdbcDataSource struct {
	pulumi.CustomResourceState

	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Data Source Description
	DataSourceDescription pulumi.StringPtrOutput `pulumi:"dataSourceDescription"`
	// The data source ID.
	DataSourceId pulumi.StringOutput `pulumi:"dataSourceId"`
	// Data Source Name
	DataSourceName pulumi.StringPtrOutput `pulumi:"dataSourceName"`
	// Data Source Type
	DataSourceType pulumi.StringPtrOutput `pulumi:"dataSourceType"`
	// The instance ID.
	DbInstanceId pulumi.StringOutput `pulumi:"dbInstanceId"`
	// The JDBC connection string.
	JdbcConnectionString pulumi.StringPtrOutput `pulumi:"jdbcConnectionString"`
	// The password of the database account.
	JdbcPassword pulumi.StringPtrOutput `pulumi:"jdbcPassword"`
	// The name of the database account.
	JdbcUserName pulumi.StringOutput `pulumi:"jdbcUserName"`
	// Data Source Status
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewJdbcDataSource registers a new resource with the given unique name, arguments, and options.
func NewJdbcDataSource(ctx *pulumi.Context,
	name string, args *JdbcDataSourceArgs, opts ...pulumi.ResourceOption) (*JdbcDataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceId'")
	}
	if args.JdbcUserName == nil {
		return nil, errors.New("invalid value for required argument 'JdbcUserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JdbcDataSource
	err := ctx.RegisterResource("alicloud:gpdb/jdbcDataSource:JdbcDataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJdbcDataSource gets an existing JdbcDataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJdbcDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JdbcDataSourceState, opts ...pulumi.ResourceOption) (*JdbcDataSource, error) {
	var resource JdbcDataSource
	err := ctx.ReadResource("alicloud:gpdb/jdbcDataSource:JdbcDataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JdbcDataSource resources.
type jdbcDataSourceState struct {
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// Data Source Description
	DataSourceDescription *string `pulumi:"dataSourceDescription"`
	// The data source ID.
	DataSourceId *string `pulumi:"dataSourceId"`
	// Data Source Name
	DataSourceName *string `pulumi:"dataSourceName"`
	// Data Source Type
	DataSourceType *string `pulumi:"dataSourceType"`
	// The instance ID.
	DbInstanceId *string `pulumi:"dbInstanceId"`
	// The JDBC connection string.
	JdbcConnectionString *string `pulumi:"jdbcConnectionString"`
	// The password of the database account.
	JdbcPassword *string `pulumi:"jdbcPassword"`
	// The name of the database account.
	JdbcUserName *string `pulumi:"jdbcUserName"`
	// Data Source Status
	Status *string `pulumi:"status"`
}

type JdbcDataSourceState struct {
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// Data Source Description
	DataSourceDescription pulumi.StringPtrInput
	// The data source ID.
	DataSourceId pulumi.StringPtrInput
	// Data Source Name
	DataSourceName pulumi.StringPtrInput
	// Data Source Type
	DataSourceType pulumi.StringPtrInput
	// The instance ID.
	DbInstanceId pulumi.StringPtrInput
	// The JDBC connection string.
	JdbcConnectionString pulumi.StringPtrInput
	// The password of the database account.
	JdbcPassword pulumi.StringPtrInput
	// The name of the database account.
	JdbcUserName pulumi.StringPtrInput
	// Data Source Status
	Status pulumi.StringPtrInput
}

func (JdbcDataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*jdbcDataSourceState)(nil)).Elem()
}

type jdbcDataSourceArgs struct {
	// Data Source Description
	DataSourceDescription *string `pulumi:"dataSourceDescription"`
	// Data Source Name
	DataSourceName *string `pulumi:"dataSourceName"`
	// Data Source Type
	DataSourceType *string `pulumi:"dataSourceType"`
	// The instance ID.
	DbInstanceId string `pulumi:"dbInstanceId"`
	// The JDBC connection string.
	JdbcConnectionString *string `pulumi:"jdbcConnectionString"`
	// The password of the database account.
	JdbcPassword *string `pulumi:"jdbcPassword"`
	// The name of the database account.
	JdbcUserName string `pulumi:"jdbcUserName"`
}

// The set of arguments for constructing a JdbcDataSource resource.
type JdbcDataSourceArgs struct {
	// Data Source Description
	DataSourceDescription pulumi.StringPtrInput
	// Data Source Name
	DataSourceName pulumi.StringPtrInput
	// Data Source Type
	DataSourceType pulumi.StringPtrInput
	// The instance ID.
	DbInstanceId pulumi.StringInput
	// The JDBC connection string.
	JdbcConnectionString pulumi.StringPtrInput
	// The password of the database account.
	JdbcPassword pulumi.StringPtrInput
	// The name of the database account.
	JdbcUserName pulumi.StringInput
}

func (JdbcDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jdbcDataSourceArgs)(nil)).Elem()
}

type JdbcDataSourceInput interface {
	pulumi.Input

	ToJdbcDataSourceOutput() JdbcDataSourceOutput
	ToJdbcDataSourceOutputWithContext(ctx context.Context) JdbcDataSourceOutput
}

func (*JdbcDataSource) ElementType() reflect.Type {
	return reflect.TypeOf((**JdbcDataSource)(nil)).Elem()
}

func (i *JdbcDataSource) ToJdbcDataSourceOutput() JdbcDataSourceOutput {
	return i.ToJdbcDataSourceOutputWithContext(context.Background())
}

func (i *JdbcDataSource) ToJdbcDataSourceOutputWithContext(ctx context.Context) JdbcDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JdbcDataSourceOutput)
}

// JdbcDataSourceArrayInput is an input type that accepts JdbcDataSourceArray and JdbcDataSourceArrayOutput values.
// You can construct a concrete instance of `JdbcDataSourceArrayInput` via:
//
//	JdbcDataSourceArray{ JdbcDataSourceArgs{...} }
type JdbcDataSourceArrayInput interface {
	pulumi.Input

	ToJdbcDataSourceArrayOutput() JdbcDataSourceArrayOutput
	ToJdbcDataSourceArrayOutputWithContext(context.Context) JdbcDataSourceArrayOutput
}

type JdbcDataSourceArray []JdbcDataSourceInput

func (JdbcDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JdbcDataSource)(nil)).Elem()
}

func (i JdbcDataSourceArray) ToJdbcDataSourceArrayOutput() JdbcDataSourceArrayOutput {
	return i.ToJdbcDataSourceArrayOutputWithContext(context.Background())
}

func (i JdbcDataSourceArray) ToJdbcDataSourceArrayOutputWithContext(ctx context.Context) JdbcDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JdbcDataSourceArrayOutput)
}

// JdbcDataSourceMapInput is an input type that accepts JdbcDataSourceMap and JdbcDataSourceMapOutput values.
// You can construct a concrete instance of `JdbcDataSourceMapInput` via:
//
//	JdbcDataSourceMap{ "key": JdbcDataSourceArgs{...} }
type JdbcDataSourceMapInput interface {
	pulumi.Input

	ToJdbcDataSourceMapOutput() JdbcDataSourceMapOutput
	ToJdbcDataSourceMapOutputWithContext(context.Context) JdbcDataSourceMapOutput
}

type JdbcDataSourceMap map[string]JdbcDataSourceInput

func (JdbcDataSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JdbcDataSource)(nil)).Elem()
}

func (i JdbcDataSourceMap) ToJdbcDataSourceMapOutput() JdbcDataSourceMapOutput {
	return i.ToJdbcDataSourceMapOutputWithContext(context.Background())
}

func (i JdbcDataSourceMap) ToJdbcDataSourceMapOutputWithContext(ctx context.Context) JdbcDataSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JdbcDataSourceMapOutput)
}

type JdbcDataSourceOutput struct{ *pulumi.OutputState }

func (JdbcDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JdbcDataSource)(nil)).Elem()
}

func (o JdbcDataSourceOutput) ToJdbcDataSourceOutput() JdbcDataSourceOutput {
	return o
}

func (o JdbcDataSourceOutput) ToJdbcDataSourceOutputWithContext(ctx context.Context) JdbcDataSourceOutput {
	return o
}

// The creation time of the resource
func (o JdbcDataSourceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *JdbcDataSource) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Data Source Description
func (o JdbcDataSourceOutput) DataSourceDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JdbcDataSource) pulumi.StringPtrOutput { return v.DataSourceDescription }).(pulumi.StringPtrOutput)
}

// The data source ID.
func (o JdbcDataSourceOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *JdbcDataSource) pulumi.StringOutput { return v.DataSourceId }).(pulumi.StringOutput)
}

// Data Source Name
func (o JdbcDataSourceOutput) DataSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JdbcDataSource) pulumi.StringPtrOutput { return v.DataSourceName }).(pulumi.StringPtrOutput)
}

// Data Source Type
func (o JdbcDataSourceOutput) DataSourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JdbcDataSource) pulumi.StringPtrOutput { return v.DataSourceType }).(pulumi.StringPtrOutput)
}

// The instance ID.
func (o JdbcDataSourceOutput) DbInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *JdbcDataSource) pulumi.StringOutput { return v.DbInstanceId }).(pulumi.StringOutput)
}

// The JDBC connection string.
func (o JdbcDataSourceOutput) JdbcConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JdbcDataSource) pulumi.StringPtrOutput { return v.JdbcConnectionString }).(pulumi.StringPtrOutput)
}

// The password of the database account.
func (o JdbcDataSourceOutput) JdbcPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JdbcDataSource) pulumi.StringPtrOutput { return v.JdbcPassword }).(pulumi.StringPtrOutput)
}

// The name of the database account.
func (o JdbcDataSourceOutput) JdbcUserName() pulumi.StringOutput {
	return o.ApplyT(func(v *JdbcDataSource) pulumi.StringOutput { return v.JdbcUserName }).(pulumi.StringOutput)
}

// Data Source Status
func (o JdbcDataSourceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *JdbcDataSource) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type JdbcDataSourceArrayOutput struct{ *pulumi.OutputState }

func (JdbcDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JdbcDataSource)(nil)).Elem()
}

func (o JdbcDataSourceArrayOutput) ToJdbcDataSourceArrayOutput() JdbcDataSourceArrayOutput {
	return o
}

func (o JdbcDataSourceArrayOutput) ToJdbcDataSourceArrayOutputWithContext(ctx context.Context) JdbcDataSourceArrayOutput {
	return o
}

func (o JdbcDataSourceArrayOutput) Index(i pulumi.IntInput) JdbcDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JdbcDataSource {
		return vs[0].([]*JdbcDataSource)[vs[1].(int)]
	}).(JdbcDataSourceOutput)
}

type JdbcDataSourceMapOutput struct{ *pulumi.OutputState }

func (JdbcDataSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JdbcDataSource)(nil)).Elem()
}

func (o JdbcDataSourceMapOutput) ToJdbcDataSourceMapOutput() JdbcDataSourceMapOutput {
	return o
}

func (o JdbcDataSourceMapOutput) ToJdbcDataSourceMapOutputWithContext(ctx context.Context) JdbcDataSourceMapOutput {
	return o
}

func (o JdbcDataSourceMapOutput) MapIndex(k pulumi.StringInput) JdbcDataSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JdbcDataSource {
		return vs[0].(map[string]*JdbcDataSource)[vs[1].(string)]
	}).(JdbcDataSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JdbcDataSourceInput)(nil)).Elem(), &JdbcDataSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*JdbcDataSourceArrayInput)(nil)).Elem(), JdbcDataSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JdbcDataSourceMapInput)(nil)).Elem(), JdbcDataSourceMap{})
	pulumi.RegisterOutputType(JdbcDataSourceOutput{})
	pulumi.RegisterOutputType(JdbcDataSourceArrayOutput{})
	pulumi.RegisterOutputType(JdbcDataSourceMapOutput{})
}
