// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gpdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a GPDB Database resource.
//
// For information about GPDB Database and how to use it, see [What is Database](https://www.alibabacloud.com/help/en/).
//
// > **NOTE:** Available since v1.232.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/gpdb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			default35OkxY, err := vpc.NewNetwork(ctx, "default35OkxY", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("192.168.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultl8haQ3, err := vpc.NewSwitch(ctx, "defaultl8haQ3", &vpc.SwitchArgs{
//				VpcId:     default35OkxY.ID(),
//				ZoneId:    pulumi.String("cn-beijing-h"),
//				CidrBlock: pulumi.String("192.168.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTC08a9, err := gpdb.NewInstance(ctx, "defaultTC08a9", &gpdb.InstanceArgs{
//				InstanceSpec:        pulumi.String("2C8G"),
//				SegNodeNum:          pulumi.Int(2),
//				SegStorageType:      pulumi.String("cloud_essd"),
//				InstanceNetworkType: pulumi.String("VPC"),
//				DbInstanceCategory:  pulumi.String("Basic"),
//				PaymentType:         pulumi.String("PayAsYouGo"),
//				SslEnabled:          pulumi.Int(0),
//				EngineVersion:       pulumi.String("6.0"),
//				Engine:              pulumi.String("gpdb"),
//				ZoneId:              pulumi.String("cn-beijing-h"),
//				VswitchId:           defaultl8haQ3.ID(),
//				StorageSize:         pulumi.Int(50),
//				MasterCu:            pulumi.Int(4),
//				VpcId:               default35OkxY.ID(),
//				DbInstanceMode:      pulumi.String("StorageElastic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gpdb.NewDatabase(ctx, "default", &gpdb.DatabaseArgs{
//				CharacterSetName: pulumi.String("UTF8"),
//				Owner:            pulumi.String("adbpgadmin"),
//				Description:      pulumi.String("go-to-the-docks-for-french-fries"),
//				DatabaseName:     pulumi.String("seagull"),
//				Collate:          pulumi.String("en_US.utf8"),
//				Ctype:            pulumi.String("en_US.utf8"),
//				DbInstanceId:     defaultTC08a9.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GPDB Database can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:gpdb/database:Database example <db_instance_id>:<database_name>
// ```
type Database struct {
	pulumi.CustomResourceState

	// Character set, default value is UTF8
	CharacterSetName pulumi.StringPtrOutput `pulumi:"characterSetName"`
	// Database locale parameters, specifying string comparison/collation
	Collate pulumi.StringPtrOutput `pulumi:"collate"`
	// Database locale parameters, specifying character classification/case conversion rules
	Ctype pulumi.StringPtrOutput `pulumi:"ctype"`
	// Database Name
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Instance ID
	DbInstanceId pulumi.StringOutput `pulumi:"dbInstanceId"`
	// Database Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Data Sheet owner
	Owner pulumi.StringOutput `pulumi:"owner"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.DbInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceId'")
	}
	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Database
	err := ctx.RegisterResource("alicloud:gpdb/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("alicloud:gpdb/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// Character set, default value is UTF8
	CharacterSetName *string `pulumi:"characterSetName"`
	// Database locale parameters, specifying string comparison/collation
	Collate *string `pulumi:"collate"`
	// Database locale parameters, specifying character classification/case conversion rules
	Ctype *string `pulumi:"ctype"`
	// Database Name
	DatabaseName *string `pulumi:"databaseName"`
	// Instance ID
	DbInstanceId *string `pulumi:"dbInstanceId"`
	// Database Description
	Description *string `pulumi:"description"`
	// Data Sheet owner
	Owner *string `pulumi:"owner"`
}

type DatabaseState struct {
	// Character set, default value is UTF8
	CharacterSetName pulumi.StringPtrInput
	// Database locale parameters, specifying string comparison/collation
	Collate pulumi.StringPtrInput
	// Database locale parameters, specifying character classification/case conversion rules
	Ctype pulumi.StringPtrInput
	// Database Name
	DatabaseName pulumi.StringPtrInput
	// Instance ID
	DbInstanceId pulumi.StringPtrInput
	// Database Description
	Description pulumi.StringPtrInput
	// Data Sheet owner
	Owner pulumi.StringPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// Character set, default value is UTF8
	CharacterSetName *string `pulumi:"characterSetName"`
	// Database locale parameters, specifying string comparison/collation
	Collate *string `pulumi:"collate"`
	// Database locale parameters, specifying character classification/case conversion rules
	Ctype *string `pulumi:"ctype"`
	// Database Name
	DatabaseName string `pulumi:"databaseName"`
	// Instance ID
	DbInstanceId string `pulumi:"dbInstanceId"`
	// Database Description
	Description *string `pulumi:"description"`
	// Data Sheet owner
	Owner string `pulumi:"owner"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// Character set, default value is UTF8
	CharacterSetName pulumi.StringPtrInput
	// Database locale parameters, specifying string comparison/collation
	Collate pulumi.StringPtrInput
	// Database locale parameters, specifying character classification/case conversion rules
	Ctype pulumi.StringPtrInput
	// Database Name
	DatabaseName pulumi.StringInput
	// Instance ID
	DbInstanceId pulumi.StringInput
	// Database Description
	Description pulumi.StringPtrInput
	// Data Sheet owner
	Owner pulumi.StringInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//	DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//	DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

// Character set, default value is UTF8
func (o DatabaseOutput) CharacterSetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.CharacterSetName }).(pulumi.StringPtrOutput)
}

// Database locale parameters, specifying string comparison/collation
func (o DatabaseOutput) Collate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.Collate }).(pulumi.StringPtrOutput)
}

// Database locale parameters, specifying character classification/case conversion rules
func (o DatabaseOutput) Ctype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.Ctype }).(pulumi.StringPtrOutput)
}

// Database Name
func (o DatabaseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// Instance ID
func (o DatabaseOutput) DbInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DbInstanceId }).(pulumi.StringOutput)
}

// Database Description
func (o DatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Data Sheet owner
func (o DatabaseOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Database {
		return vs[0].([]*Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Database {
		return vs[0].(map[string]*Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseArrayInput)(nil)).Elem(), DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMapInput)(nil)).Elem(), DatabaseMap{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}
