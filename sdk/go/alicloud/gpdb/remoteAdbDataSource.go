// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gpdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a GPDB Remote ADB Data Source resource.
//
// RemoteADBDataSource is the data external table call method between greenplums, which will be used for data external table access between ADB-PG.
//
// For information about GPDB Remote ADB Data Source and how to use it, see [What is Remote ADB Data Source](https://www.alibabacloud.com/help/en/analyticdb/analyticdb-for-postgresql/developer-reference/api-gpdb-2016-05-03-createremoteadbdatasource).
//
// > **NOTE:** Available since v1.227.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/gpdb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			default4Mf0nY, err := vpc.NewNetwork(ctx, "default4Mf0nY", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("192.168.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultwSAVpf, err := vpc.NewSwitch(ctx, "defaultwSAVpf", &vpc.SwitchArgs{
//				VpcId:     default4Mf0nY.ID(),
//				ZoneId:    pulumi.String("cn-beijing-h"),
//				CidrBlock: pulumi.String("192.168.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultEtEzMF, err := gpdb.NewInstance(ctx, "defaultEtEzMF", &gpdb.InstanceArgs{
//				InstanceSpec:        pulumi.String("2C8G"),
//				Description:         pulumi.String(name),
//				SegNodeNum:          pulumi.Int(2),
//				SegStorageType:      pulumi.String("cloud_essd"),
//				InstanceNetworkType: pulumi.String("VPC"),
//				DbInstanceCategory:  pulumi.String("Basic"),
//				PaymentType:         pulumi.String("PayAsYouGo"),
//				SslEnabled:          pulumi.Int(0),
//				EngineVersion:       pulumi.String("6.0"),
//				ZoneId:              pulumi.String("cn-beijing-h"),
//				VswitchId:           defaultwSAVpf.ID(),
//				StorageSize:         pulumi.Int(50),
//				MasterCu:            pulumi.Int(4),
//				VpcId:               default4Mf0nY.ID(),
//				DbInstanceMode:      pulumi.String("StorageElastic"),
//				Engine:              pulumi.String("gpdb"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultEY7t9t, err := gpdb.NewInstance(ctx, "defaultEY7t9t", &gpdb.InstanceArgs{
//				InstanceSpec:        pulumi.String("2C8G"),
//				Description:         pulumi.String(name),
//				SegNodeNum:          pulumi.Int(2),
//				SegStorageType:      pulumi.String("cloud_essd"),
//				InstanceNetworkType: pulumi.String("VPC"),
//				DbInstanceCategory:  pulumi.String("Basic"),
//				PaymentType:         pulumi.String("PayAsYouGo"),
//				SslEnabled:          pulumi.Int(0),
//				EngineVersion:       pulumi.String("6.0"),
//				ZoneId:              pulumi.String("cn-beijing-h"),
//				VswitchId:           defaultwSAVpf.ID(),
//				StorageSize:         pulumi.Int(50),
//				MasterCu:            pulumi.Int(4),
//				VpcId:               default4Mf0nY.ID(),
//				DbInstanceMode:      pulumi.String("StorageElastic"),
//				Engine:              pulumi.String("gpdb"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gpdb.NewAccount(ctx, "default26qpEo", &gpdb.AccountArgs{
//				AccountDescription: pulumi.String("example_001"),
//				DbInstanceId:       defaultEtEzMF.ID(),
//				AccountName:        pulumi.String("example_001"),
//				AccountPassword:    pulumi.String("example_001"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultwXePof, err := gpdb.NewAccount(ctx, "defaultwXePof", &gpdb.AccountArgs{
//				AccountDescription: pulumi.String("example_001"),
//				DbInstanceId:       defaultEY7t9t.ID(),
//				AccountName:        pulumi.String("example_001"),
//				AccountPassword:    pulumi.String("example_001"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gpdb.NewRemoteAdbDataSource(ctx, "default", &gpdb.RemoteAdbDataSourceArgs{
//				RemoteDatabase:      pulumi.String("example_001"),
//				ManagerUserName:     pulumi.String("example_001"),
//				UserName:            pulumi.String("example_001"),
//				RemoteDbInstanceId:  defaultwXePof.DbInstanceId,
//				LocalDatabase:       pulumi.String("example_001"),
//				DataSourceName:      pulumi.String("myexample"),
//				UserPassword:        pulumi.String("example_001"),
//				ManagerUserPassword: pulumi.String("example_001"),
//				LocalDbInstanceId:   defaultEtEzMF.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GPDB Remote ADB Data Source can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:gpdb/remoteAdbDataSource:RemoteAdbDataSource example <local_db_instance_id>:<remote_adb_data_source_id>
// ```
type RemoteAdbDataSource struct {
	pulumi.CustomResourceState

	// Data Source Name
	DataSourceName pulumi.StringPtrOutput `pulumi:"dataSourceName"`
	// The database of the local instance which connection data.
	LocalDatabase pulumi.StringOutput `pulumi:"localDatabase"`
	// The instanceId of the local instance which connection data.
	LocalDbInstanceId pulumi.StringOutput `pulumi:"localDbInstanceId"`
	// The Management user name of the local instance.
	ManagerUserName pulumi.StringOutput `pulumi:"managerUserName"`
	// Password of the Manager user of the local instance
	ManagerUserPassword pulumi.StringOutput `pulumi:"managerUserPassword"`
	// The first ID of the resource
	RemoteAdbDataSourceId pulumi.IntOutput `pulumi:"remoteAdbDataSourceId"`
	// The database of the remote instance which provide data.
	RemoteDatabase pulumi.StringOutput `pulumi:"remoteDatabase"`
	// The instanceId of the remote instance which provide data.
	RemoteDbInstanceId pulumi.StringOutput `pulumi:"remoteDbInstanceId"`
	// The status of the resource
	Status pulumi.StringOutput `pulumi:"status"`
	// The user name used to connect to the remote instance
	UserName pulumi.StringOutput `pulumi:"userName"`
	// The user password used to connect to the remote instance
	UserPassword pulumi.StringOutput `pulumi:"userPassword"`
}

// NewRemoteAdbDataSource registers a new resource with the given unique name, arguments, and options.
func NewRemoteAdbDataSource(ctx *pulumi.Context,
	name string, args *RemoteAdbDataSourceArgs, opts ...pulumi.ResourceOption) (*RemoteAdbDataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocalDatabase == nil {
		return nil, errors.New("invalid value for required argument 'LocalDatabase'")
	}
	if args.LocalDbInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'LocalDbInstanceId'")
	}
	if args.ManagerUserName == nil {
		return nil, errors.New("invalid value for required argument 'ManagerUserName'")
	}
	if args.ManagerUserPassword == nil {
		return nil, errors.New("invalid value for required argument 'ManagerUserPassword'")
	}
	if args.RemoteDatabase == nil {
		return nil, errors.New("invalid value for required argument 'RemoteDatabase'")
	}
	if args.RemoteDbInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'RemoteDbInstanceId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.UserPassword == nil {
		return nil, errors.New("invalid value for required argument 'UserPassword'")
	}
	if args.ManagerUserPassword != nil {
		args.ManagerUserPassword = pulumi.ToSecret(args.ManagerUserPassword).(pulumi.StringInput)
	}
	if args.UserPassword != nil {
		args.UserPassword = pulumi.ToSecret(args.UserPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"managerUserPassword",
		"userPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RemoteAdbDataSource
	err := ctx.RegisterResource("alicloud:gpdb/remoteAdbDataSource:RemoteAdbDataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRemoteAdbDataSource gets an existing RemoteAdbDataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRemoteAdbDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RemoteAdbDataSourceState, opts ...pulumi.ResourceOption) (*RemoteAdbDataSource, error) {
	var resource RemoteAdbDataSource
	err := ctx.ReadResource("alicloud:gpdb/remoteAdbDataSource:RemoteAdbDataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RemoteAdbDataSource resources.
type remoteAdbDataSourceState struct {
	// Data Source Name
	DataSourceName *string `pulumi:"dataSourceName"`
	// The database of the local instance which connection data.
	LocalDatabase *string `pulumi:"localDatabase"`
	// The instanceId of the local instance which connection data.
	LocalDbInstanceId *string `pulumi:"localDbInstanceId"`
	// The Management user name of the local instance.
	ManagerUserName *string `pulumi:"managerUserName"`
	// Password of the Manager user of the local instance
	ManagerUserPassword *string `pulumi:"managerUserPassword"`
	// The first ID of the resource
	RemoteAdbDataSourceId *int `pulumi:"remoteAdbDataSourceId"`
	// The database of the remote instance which provide data.
	RemoteDatabase *string `pulumi:"remoteDatabase"`
	// The instanceId of the remote instance which provide data.
	RemoteDbInstanceId *string `pulumi:"remoteDbInstanceId"`
	// The status of the resource
	Status *string `pulumi:"status"`
	// The user name used to connect to the remote instance
	UserName *string `pulumi:"userName"`
	// The user password used to connect to the remote instance
	UserPassword *string `pulumi:"userPassword"`
}

type RemoteAdbDataSourceState struct {
	// Data Source Name
	DataSourceName pulumi.StringPtrInput
	// The database of the local instance which connection data.
	LocalDatabase pulumi.StringPtrInput
	// The instanceId of the local instance which connection data.
	LocalDbInstanceId pulumi.StringPtrInput
	// The Management user name of the local instance.
	ManagerUserName pulumi.StringPtrInput
	// Password of the Manager user of the local instance
	ManagerUserPassword pulumi.StringPtrInput
	// The first ID of the resource
	RemoteAdbDataSourceId pulumi.IntPtrInput
	// The database of the remote instance which provide data.
	RemoteDatabase pulumi.StringPtrInput
	// The instanceId of the remote instance which provide data.
	RemoteDbInstanceId pulumi.StringPtrInput
	// The status of the resource
	Status pulumi.StringPtrInput
	// The user name used to connect to the remote instance
	UserName pulumi.StringPtrInput
	// The user password used to connect to the remote instance
	UserPassword pulumi.StringPtrInput
}

func (RemoteAdbDataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteAdbDataSourceState)(nil)).Elem()
}

type remoteAdbDataSourceArgs struct {
	// Data Source Name
	DataSourceName *string `pulumi:"dataSourceName"`
	// The database of the local instance which connection data.
	LocalDatabase string `pulumi:"localDatabase"`
	// The instanceId of the local instance which connection data.
	LocalDbInstanceId string `pulumi:"localDbInstanceId"`
	// The Management user name of the local instance.
	ManagerUserName string `pulumi:"managerUserName"`
	// Password of the Manager user of the local instance
	ManagerUserPassword string `pulumi:"managerUserPassword"`
	// The database of the remote instance which provide data.
	RemoteDatabase string `pulumi:"remoteDatabase"`
	// The instanceId of the remote instance which provide data.
	RemoteDbInstanceId string `pulumi:"remoteDbInstanceId"`
	// The user name used to connect to the remote instance
	UserName string `pulumi:"userName"`
	// The user password used to connect to the remote instance
	UserPassword string `pulumi:"userPassword"`
}

// The set of arguments for constructing a RemoteAdbDataSource resource.
type RemoteAdbDataSourceArgs struct {
	// Data Source Name
	DataSourceName pulumi.StringPtrInput
	// The database of the local instance which connection data.
	LocalDatabase pulumi.StringInput
	// The instanceId of the local instance which connection data.
	LocalDbInstanceId pulumi.StringInput
	// The Management user name of the local instance.
	ManagerUserName pulumi.StringInput
	// Password of the Manager user of the local instance
	ManagerUserPassword pulumi.StringInput
	// The database of the remote instance which provide data.
	RemoteDatabase pulumi.StringInput
	// The instanceId of the remote instance which provide data.
	RemoteDbInstanceId pulumi.StringInput
	// The user name used to connect to the remote instance
	UserName pulumi.StringInput
	// The user password used to connect to the remote instance
	UserPassword pulumi.StringInput
}

func (RemoteAdbDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteAdbDataSourceArgs)(nil)).Elem()
}

type RemoteAdbDataSourceInput interface {
	pulumi.Input

	ToRemoteAdbDataSourceOutput() RemoteAdbDataSourceOutput
	ToRemoteAdbDataSourceOutputWithContext(ctx context.Context) RemoteAdbDataSourceOutput
}

func (*RemoteAdbDataSource) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteAdbDataSource)(nil)).Elem()
}

func (i *RemoteAdbDataSource) ToRemoteAdbDataSourceOutput() RemoteAdbDataSourceOutput {
	return i.ToRemoteAdbDataSourceOutputWithContext(context.Background())
}

func (i *RemoteAdbDataSource) ToRemoteAdbDataSourceOutputWithContext(ctx context.Context) RemoteAdbDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteAdbDataSourceOutput)
}

// RemoteAdbDataSourceArrayInput is an input type that accepts RemoteAdbDataSourceArray and RemoteAdbDataSourceArrayOutput values.
// You can construct a concrete instance of `RemoteAdbDataSourceArrayInput` via:
//
//	RemoteAdbDataSourceArray{ RemoteAdbDataSourceArgs{...} }
type RemoteAdbDataSourceArrayInput interface {
	pulumi.Input

	ToRemoteAdbDataSourceArrayOutput() RemoteAdbDataSourceArrayOutput
	ToRemoteAdbDataSourceArrayOutputWithContext(context.Context) RemoteAdbDataSourceArrayOutput
}

type RemoteAdbDataSourceArray []RemoteAdbDataSourceInput

func (RemoteAdbDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteAdbDataSource)(nil)).Elem()
}

func (i RemoteAdbDataSourceArray) ToRemoteAdbDataSourceArrayOutput() RemoteAdbDataSourceArrayOutput {
	return i.ToRemoteAdbDataSourceArrayOutputWithContext(context.Background())
}

func (i RemoteAdbDataSourceArray) ToRemoteAdbDataSourceArrayOutputWithContext(ctx context.Context) RemoteAdbDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteAdbDataSourceArrayOutput)
}

// RemoteAdbDataSourceMapInput is an input type that accepts RemoteAdbDataSourceMap and RemoteAdbDataSourceMapOutput values.
// You can construct a concrete instance of `RemoteAdbDataSourceMapInput` via:
//
//	RemoteAdbDataSourceMap{ "key": RemoteAdbDataSourceArgs{...} }
type RemoteAdbDataSourceMapInput interface {
	pulumi.Input

	ToRemoteAdbDataSourceMapOutput() RemoteAdbDataSourceMapOutput
	ToRemoteAdbDataSourceMapOutputWithContext(context.Context) RemoteAdbDataSourceMapOutput
}

type RemoteAdbDataSourceMap map[string]RemoteAdbDataSourceInput

func (RemoteAdbDataSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteAdbDataSource)(nil)).Elem()
}

func (i RemoteAdbDataSourceMap) ToRemoteAdbDataSourceMapOutput() RemoteAdbDataSourceMapOutput {
	return i.ToRemoteAdbDataSourceMapOutputWithContext(context.Background())
}

func (i RemoteAdbDataSourceMap) ToRemoteAdbDataSourceMapOutputWithContext(ctx context.Context) RemoteAdbDataSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteAdbDataSourceMapOutput)
}

type RemoteAdbDataSourceOutput struct{ *pulumi.OutputState }

func (RemoteAdbDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteAdbDataSource)(nil)).Elem()
}

func (o RemoteAdbDataSourceOutput) ToRemoteAdbDataSourceOutput() RemoteAdbDataSourceOutput {
	return o
}

func (o RemoteAdbDataSourceOutput) ToRemoteAdbDataSourceOutputWithContext(ctx context.Context) RemoteAdbDataSourceOutput {
	return o
}

// Data Source Name
func (o RemoteAdbDataSourceOutput) DataSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteAdbDataSource) pulumi.StringPtrOutput { return v.DataSourceName }).(pulumi.StringPtrOutput)
}

// The database of the local instance which connection data.
func (o RemoteAdbDataSourceOutput) LocalDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteAdbDataSource) pulumi.StringOutput { return v.LocalDatabase }).(pulumi.StringOutput)
}

// The instanceId of the local instance which connection data.
func (o RemoteAdbDataSourceOutput) LocalDbInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteAdbDataSource) pulumi.StringOutput { return v.LocalDbInstanceId }).(pulumi.StringOutput)
}

// The Management user name of the local instance.
func (o RemoteAdbDataSourceOutput) ManagerUserName() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteAdbDataSource) pulumi.StringOutput { return v.ManagerUserName }).(pulumi.StringOutput)
}

// Password of the Manager user of the local instance
func (o RemoteAdbDataSourceOutput) ManagerUserPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteAdbDataSource) pulumi.StringOutput { return v.ManagerUserPassword }).(pulumi.StringOutput)
}

// The first ID of the resource
func (o RemoteAdbDataSourceOutput) RemoteAdbDataSourceId() pulumi.IntOutput {
	return o.ApplyT(func(v *RemoteAdbDataSource) pulumi.IntOutput { return v.RemoteAdbDataSourceId }).(pulumi.IntOutput)
}

// The database of the remote instance which provide data.
func (o RemoteAdbDataSourceOutput) RemoteDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteAdbDataSource) pulumi.StringOutput { return v.RemoteDatabase }).(pulumi.StringOutput)
}

// The instanceId of the remote instance which provide data.
func (o RemoteAdbDataSourceOutput) RemoteDbInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteAdbDataSource) pulumi.StringOutput { return v.RemoteDbInstanceId }).(pulumi.StringOutput)
}

// The status of the resource
func (o RemoteAdbDataSourceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteAdbDataSource) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The user name used to connect to the remote instance
func (o RemoteAdbDataSourceOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteAdbDataSource) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// The user password used to connect to the remote instance
func (o RemoteAdbDataSourceOutput) UserPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteAdbDataSource) pulumi.StringOutput { return v.UserPassword }).(pulumi.StringOutput)
}

type RemoteAdbDataSourceArrayOutput struct{ *pulumi.OutputState }

func (RemoteAdbDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteAdbDataSource)(nil)).Elem()
}

func (o RemoteAdbDataSourceArrayOutput) ToRemoteAdbDataSourceArrayOutput() RemoteAdbDataSourceArrayOutput {
	return o
}

func (o RemoteAdbDataSourceArrayOutput) ToRemoteAdbDataSourceArrayOutputWithContext(ctx context.Context) RemoteAdbDataSourceArrayOutput {
	return o
}

func (o RemoteAdbDataSourceArrayOutput) Index(i pulumi.IntInput) RemoteAdbDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RemoteAdbDataSource {
		return vs[0].([]*RemoteAdbDataSource)[vs[1].(int)]
	}).(RemoteAdbDataSourceOutput)
}

type RemoteAdbDataSourceMapOutput struct{ *pulumi.OutputState }

func (RemoteAdbDataSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteAdbDataSource)(nil)).Elem()
}

func (o RemoteAdbDataSourceMapOutput) ToRemoteAdbDataSourceMapOutput() RemoteAdbDataSourceMapOutput {
	return o
}

func (o RemoteAdbDataSourceMapOutput) ToRemoteAdbDataSourceMapOutputWithContext(ctx context.Context) RemoteAdbDataSourceMapOutput {
	return o
}

func (o RemoteAdbDataSourceMapOutput) MapIndex(k pulumi.StringInput) RemoteAdbDataSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RemoteAdbDataSource {
		return vs[0].(map[string]*RemoteAdbDataSource)[vs[1].(string)]
	}).(RemoteAdbDataSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteAdbDataSourceInput)(nil)).Elem(), &RemoteAdbDataSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteAdbDataSourceArrayInput)(nil)).Elem(), RemoteAdbDataSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteAdbDataSourceMapInput)(nil)).Elem(), RemoteAdbDataSourceMap{})
	pulumi.RegisterOutputType(RemoteAdbDataSourceOutput{})
	pulumi.RegisterOutputType(RemoteAdbDataSourceArrayOutput{})
	pulumi.RegisterOutputType(RemoteAdbDataSourceMapOutput{})
}
