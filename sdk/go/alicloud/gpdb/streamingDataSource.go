// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gpdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a GPDB Streaming Data Source resource.
//
// Real-time data source.
//
// For information about GPDB Streaming Data Source and how to use it, see [What is Streaming Data Source](https://www.alibabacloud.com/help/en/analyticdb/analyticdb-for-postgresql/developer-reference/api-gpdb-2016-05-03-createstreamingdatasource).
//
// > **NOTE:** Available since v1.227.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/gpdb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			kafka_config_modify := `{
//	    "brokers": "alikafka-post-cn-g4t3t4eod004-1-vpc.alikafka.aliyuncs.com:9092,alikafka-post-cn-g4t3t4eod004-2-vpc.alikafka.aliyuncs.com:9092,alikafka-post-cn-g4t3t4eod004-3-vpc.alikafka.aliyuncs.com:9092",
//	    "delimiter": "#",
//	    "format": "delimited",
//	    "topic": "ziyuan_example"
//	}
//
// `
//
//			if param := cfg.Get("kafka-config-modify"); param != "" {
//				kafka_config_modify = param
//			}
//			kafka_config := `{
//	    "brokers": "alikafka-post-cn-g4t3t4eod004-1-vpc.alikafka.aliyuncs.com:9092,alikafka-post-cn-g4t3t4eod004-2-vpc.alikafka.aliyuncs.com:9092,alikafka-post-cn-g4t3t4eod004-3-vpc.alikafka.aliyuncs.com:9092",
//	    "delimiter": "|",
//	    "format": "delimited",
//	    "topic": "ziyuan_example"
//	}
//
// `
//
//			if param := cfg.Get("kafka-config"); param != "" {
//				kafka_config = param
//			}
//			_, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultDfkYOR, err := vpc.NewNetwork(ctx, "defaultDfkYOR", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("192.168.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			default59ZqyD, err := vpc.NewSwitch(ctx, "default59ZqyD", &vpc.SwitchArgs{
//				VpcId:     defaultDfkYOR.ID(),
//				ZoneId:    pulumi.String("cn-beijing-h"),
//				CidrBlock: pulumi.String("192.168.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			default7mX6ld, err := gpdb.NewInstance(ctx, "default7mX6ld", &gpdb.InstanceArgs{
//				InstanceSpec:        pulumi.String("2C8G"),
//				Description:         pulumi.String(name),
//				SegNodeNum:          pulumi.Int(2),
//				SegStorageType:      pulumi.String("cloud_essd"),
//				InstanceNetworkType: pulumi.String("VPC"),
//				DbInstanceCategory:  pulumi.String("Basic"),
//				PaymentType:         pulumi.String("PayAsYouGo"),
//				SslEnabled:          pulumi.Int(0),
//				EngineVersion:       pulumi.String("6.0"),
//				ZoneId:              pulumi.String("cn-beijing-h"),
//				VswitchId:           default59ZqyD.ID(),
//				StorageSize:         pulumi.Int(50),
//				MasterCu:            pulumi.Int(4),
//				VpcId:               defaultDfkYOR.ID(),
//				DbInstanceMode:      pulumi.String("StorageElastic"),
//				Engine:              pulumi.String("gpdb"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultwruvdv, err := gpdb.NewStreamingDataService(ctx, "defaultwruvdv", &gpdb.StreamingDataServiceArgs{
//				ServiceName:        pulumi.String("example"),
//				DbInstanceId:       default7mX6ld.ID(),
//				ServiceDescription: pulumi.String("example"),
//				ServiceSpec:        pulumi.String("8"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gpdb.NewStreamingDataSource(ctx, "default", &gpdb.StreamingDataSourceArgs{
//				DbInstanceId:          default7mX6ld.ID(),
//				DataSourceName:        pulumi.String("example-kafka3"),
//				DataSourceConfig:      pulumi.String(kafka_config),
//				DataSourceType:        pulumi.String("kafka"),
//				DataSourceDescription: pulumi.String("example-kafka"),
//				ServiceId:             defaultwruvdv.ServiceId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GPDB Streaming Data Source can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:gpdb/streamingDataSource:StreamingDataSource example <db_instance_id>:<data_source_id>
// ```
type StreamingDataSource struct {
	pulumi.CustomResourceState

	// Creation time
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The configurations of the data source.
	DataSourceConfig pulumi.StringOutput `pulumi:"dataSourceConfig"`
	// The description of the data source.
	DataSourceDescription pulumi.StringPtrOutput `pulumi:"dataSourceDescription"`
	// The data source ID.
	DataSourceId pulumi.StringOutput `pulumi:"dataSourceId"`
	// Data Source Name
	DataSourceName pulumi.StringOutput `pulumi:"dataSourceName"`
	// Data Source Type
	DataSourceType pulumi.StringOutput `pulumi:"dataSourceType"`
	// The instance ID.
	//
	// > **NOTE:**   You can call the [DescribeDBInstances](https://www.alibabacloud.com/help/en/doc-detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	DbInstanceId pulumi.StringOutput `pulumi:"dbInstanceId"`
	// The real-time data service ID.
	ServiceId pulumi.IntOutput `pulumi:"serviceId"`
	// Service Status:
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewStreamingDataSource registers a new resource with the given unique name, arguments, and options.
func NewStreamingDataSource(ctx *pulumi.Context,
	name string, args *StreamingDataSourceArgs, opts ...pulumi.ResourceOption) (*StreamingDataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSourceConfig == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceConfig'")
	}
	if args.DataSourceName == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceName'")
	}
	if args.DataSourceType == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceType'")
	}
	if args.DbInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceId'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamingDataSource
	err := ctx.RegisterResource("alicloud:gpdb/streamingDataSource:StreamingDataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamingDataSource gets an existing StreamingDataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamingDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamingDataSourceState, opts ...pulumi.ResourceOption) (*StreamingDataSource, error) {
	var resource StreamingDataSource
	err := ctx.ReadResource("alicloud:gpdb/streamingDataSource:StreamingDataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamingDataSource resources.
type streamingDataSourceState struct {
	// Creation time
	CreateTime *string `pulumi:"createTime"`
	// The configurations of the data source.
	DataSourceConfig *string `pulumi:"dataSourceConfig"`
	// The description of the data source.
	DataSourceDescription *string `pulumi:"dataSourceDescription"`
	// The data source ID.
	DataSourceId *string `pulumi:"dataSourceId"`
	// Data Source Name
	DataSourceName *string `pulumi:"dataSourceName"`
	// Data Source Type
	DataSourceType *string `pulumi:"dataSourceType"`
	// The instance ID.
	//
	// > **NOTE:**   You can call the [DescribeDBInstances](https://www.alibabacloud.com/help/en/doc-detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	DbInstanceId *string `pulumi:"dbInstanceId"`
	// The real-time data service ID.
	ServiceId *int `pulumi:"serviceId"`
	// Service Status:
	Status *string `pulumi:"status"`
}

type StreamingDataSourceState struct {
	// Creation time
	CreateTime pulumi.StringPtrInput
	// The configurations of the data source.
	DataSourceConfig pulumi.StringPtrInput
	// The description of the data source.
	DataSourceDescription pulumi.StringPtrInput
	// The data source ID.
	DataSourceId pulumi.StringPtrInput
	// Data Source Name
	DataSourceName pulumi.StringPtrInput
	// Data Source Type
	DataSourceType pulumi.StringPtrInput
	// The instance ID.
	//
	// > **NOTE:**   You can call the [DescribeDBInstances](https://www.alibabacloud.com/help/en/doc-detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	DbInstanceId pulumi.StringPtrInput
	// The real-time data service ID.
	ServiceId pulumi.IntPtrInput
	// Service Status:
	Status pulumi.StringPtrInput
}

func (StreamingDataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingDataSourceState)(nil)).Elem()
}

type streamingDataSourceArgs struct {
	// The configurations of the data source.
	DataSourceConfig string `pulumi:"dataSourceConfig"`
	// The description of the data source.
	DataSourceDescription *string `pulumi:"dataSourceDescription"`
	// Data Source Name
	DataSourceName string `pulumi:"dataSourceName"`
	// Data Source Type
	DataSourceType string `pulumi:"dataSourceType"`
	// The instance ID.
	//
	// > **NOTE:**   You can call the [DescribeDBInstances](https://www.alibabacloud.com/help/en/doc-detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	DbInstanceId string `pulumi:"dbInstanceId"`
	// The real-time data service ID.
	ServiceId int `pulumi:"serviceId"`
}

// The set of arguments for constructing a StreamingDataSource resource.
type StreamingDataSourceArgs struct {
	// The configurations of the data source.
	DataSourceConfig pulumi.StringInput
	// The description of the data source.
	DataSourceDescription pulumi.StringPtrInput
	// Data Source Name
	DataSourceName pulumi.StringInput
	// Data Source Type
	DataSourceType pulumi.StringInput
	// The instance ID.
	//
	// > **NOTE:**   You can call the [DescribeDBInstances](https://www.alibabacloud.com/help/en/doc-detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	DbInstanceId pulumi.StringInput
	// The real-time data service ID.
	ServiceId pulumi.IntInput
}

func (StreamingDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingDataSourceArgs)(nil)).Elem()
}

type StreamingDataSourceInput interface {
	pulumi.Input

	ToStreamingDataSourceOutput() StreamingDataSourceOutput
	ToStreamingDataSourceOutputWithContext(ctx context.Context) StreamingDataSourceOutput
}

func (*StreamingDataSource) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingDataSource)(nil)).Elem()
}

func (i *StreamingDataSource) ToStreamingDataSourceOutput() StreamingDataSourceOutput {
	return i.ToStreamingDataSourceOutputWithContext(context.Background())
}

func (i *StreamingDataSource) ToStreamingDataSourceOutputWithContext(ctx context.Context) StreamingDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingDataSourceOutput)
}

// StreamingDataSourceArrayInput is an input type that accepts StreamingDataSourceArray and StreamingDataSourceArrayOutput values.
// You can construct a concrete instance of `StreamingDataSourceArrayInput` via:
//
//	StreamingDataSourceArray{ StreamingDataSourceArgs{...} }
type StreamingDataSourceArrayInput interface {
	pulumi.Input

	ToStreamingDataSourceArrayOutput() StreamingDataSourceArrayOutput
	ToStreamingDataSourceArrayOutputWithContext(context.Context) StreamingDataSourceArrayOutput
}

type StreamingDataSourceArray []StreamingDataSourceInput

func (StreamingDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamingDataSource)(nil)).Elem()
}

func (i StreamingDataSourceArray) ToStreamingDataSourceArrayOutput() StreamingDataSourceArrayOutput {
	return i.ToStreamingDataSourceArrayOutputWithContext(context.Background())
}

func (i StreamingDataSourceArray) ToStreamingDataSourceArrayOutputWithContext(ctx context.Context) StreamingDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingDataSourceArrayOutput)
}

// StreamingDataSourceMapInput is an input type that accepts StreamingDataSourceMap and StreamingDataSourceMapOutput values.
// You can construct a concrete instance of `StreamingDataSourceMapInput` via:
//
//	StreamingDataSourceMap{ "key": StreamingDataSourceArgs{...} }
type StreamingDataSourceMapInput interface {
	pulumi.Input

	ToStreamingDataSourceMapOutput() StreamingDataSourceMapOutput
	ToStreamingDataSourceMapOutputWithContext(context.Context) StreamingDataSourceMapOutput
}

type StreamingDataSourceMap map[string]StreamingDataSourceInput

func (StreamingDataSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamingDataSource)(nil)).Elem()
}

func (i StreamingDataSourceMap) ToStreamingDataSourceMapOutput() StreamingDataSourceMapOutput {
	return i.ToStreamingDataSourceMapOutputWithContext(context.Background())
}

func (i StreamingDataSourceMap) ToStreamingDataSourceMapOutputWithContext(ctx context.Context) StreamingDataSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingDataSourceMapOutput)
}

type StreamingDataSourceOutput struct{ *pulumi.OutputState }

func (StreamingDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingDataSource)(nil)).Elem()
}

func (o StreamingDataSourceOutput) ToStreamingDataSourceOutput() StreamingDataSourceOutput {
	return o
}

func (o StreamingDataSourceOutput) ToStreamingDataSourceOutputWithContext(ctx context.Context) StreamingDataSourceOutput {
	return o
}

// Creation time
func (o StreamingDataSourceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingDataSource) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The configurations of the data source.
func (o StreamingDataSourceOutput) DataSourceConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingDataSource) pulumi.StringOutput { return v.DataSourceConfig }).(pulumi.StringOutput)
}

// The description of the data source.
func (o StreamingDataSourceOutput) DataSourceDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingDataSource) pulumi.StringPtrOutput { return v.DataSourceDescription }).(pulumi.StringPtrOutput)
}

// The data source ID.
func (o StreamingDataSourceOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingDataSource) pulumi.StringOutput { return v.DataSourceId }).(pulumi.StringOutput)
}

// Data Source Name
func (o StreamingDataSourceOutput) DataSourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingDataSource) pulumi.StringOutput { return v.DataSourceName }).(pulumi.StringOutput)
}

// Data Source Type
func (o StreamingDataSourceOutput) DataSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingDataSource) pulumi.StringOutput { return v.DataSourceType }).(pulumi.StringOutput)
}

// The instance ID.
//
// > **NOTE:**   You can call the [DescribeDBInstances](https://www.alibabacloud.com/help/en/doc-detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
func (o StreamingDataSourceOutput) DbInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingDataSource) pulumi.StringOutput { return v.DbInstanceId }).(pulumi.StringOutput)
}

// The real-time data service ID.
func (o StreamingDataSourceOutput) ServiceId() pulumi.IntOutput {
	return o.ApplyT(func(v *StreamingDataSource) pulumi.IntOutput { return v.ServiceId }).(pulumi.IntOutput)
}

// Service Status:
func (o StreamingDataSourceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingDataSource) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type StreamingDataSourceArrayOutput struct{ *pulumi.OutputState }

func (StreamingDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamingDataSource)(nil)).Elem()
}

func (o StreamingDataSourceArrayOutput) ToStreamingDataSourceArrayOutput() StreamingDataSourceArrayOutput {
	return o
}

func (o StreamingDataSourceArrayOutput) ToStreamingDataSourceArrayOutputWithContext(ctx context.Context) StreamingDataSourceArrayOutput {
	return o
}

func (o StreamingDataSourceArrayOutput) Index(i pulumi.IntInput) StreamingDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamingDataSource {
		return vs[0].([]*StreamingDataSource)[vs[1].(int)]
	}).(StreamingDataSourceOutput)
}

type StreamingDataSourceMapOutput struct{ *pulumi.OutputState }

func (StreamingDataSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamingDataSource)(nil)).Elem()
}

func (o StreamingDataSourceMapOutput) ToStreamingDataSourceMapOutput() StreamingDataSourceMapOutput {
	return o
}

func (o StreamingDataSourceMapOutput) ToStreamingDataSourceMapOutputWithContext(ctx context.Context) StreamingDataSourceMapOutput {
	return o
}

func (o StreamingDataSourceMapOutput) MapIndex(k pulumi.StringInput) StreamingDataSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamingDataSource {
		return vs[0].(map[string]*StreamingDataSource)[vs[1].(string)]
	}).(StreamingDataSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingDataSourceInput)(nil)).Elem(), &StreamingDataSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingDataSourceArrayInput)(nil)).Elem(), StreamingDataSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingDataSourceMapInput)(nil)).Elem(), StreamingDataSourceMap{})
	pulumi.RegisterOutputType(StreamingDataSourceOutput{})
	pulumi.RegisterOutputType(StreamingDataSourceArrayOutput{})
	pulumi.RegisterOutputType(StreamingDataSourceMapOutput{})
}
