// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Application Load Balancer (ALB) Server Group resource.
//
// For information about Application Load Balancer (ALB) Server Group and how to use it, see [What is Server Group](https://www.alibabacloud.com/help/en/slb/application-load-balancer/developer-reference/api-alb-2020-06-16-createservergroup).
//
// > **NOTE:** Available since v1.131.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/alb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			example, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGetZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("Instance"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGetInstanceTypes, err := ecs.GetInstanceTypes(ctx, &ecs.GetInstanceTypesArgs{
//				AvailabilityZone: pulumi.StringRef(exampleGetZones.Zones[0].Id),
//				CpuCoreCount:     pulumi.IntRef(1),
//				MemorySize:       pulumi.Float64Ref(2),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGetImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
//				NameRegex: pulumi.StringRef("^ubuntu_18.*64"),
//				Owners:    pulumi.StringRef("system"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleNetwork, err := vpc.NewNetwork(ctx, "example", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("10.4.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSwitch, err := vpc.NewSwitch(ctx, "example", &vpc.SwitchArgs{
//				VswitchName: pulumi.String(name),
//				CidrBlock:   pulumi.String("10.4.0.0/16"),
//				VpcId:       exampleNetwork.ID(),
//				ZoneId:      pulumi.String(exampleGetZones.Zones[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSecurityGroup, err := ecs.NewSecurityGroup(ctx, "example", &ecs.SecurityGroupArgs{
//				Name:        pulumi.String(name),
//				Description: pulumi.String(name),
//				VpcId:       exampleNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleInstance, err := ecs.NewInstance(ctx, "example", &ecs.InstanceArgs{
//				AvailabilityZone: pulumi.String(exampleGetZones.Zones[0].Id),
//				InstanceName:     pulumi.String(name),
//				ImageId:          pulumi.String(exampleGetImages.Images[0].Id),
//				InstanceType:     pulumi.String(exampleGetInstanceTypes.InstanceTypes[0].Id),
//				SecurityGroups: pulumi.StringArray{
//					exampleSecurityGroup.ID(),
//				},
//				VswitchId: exampleSwitch.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = alb.NewServerGroup(ctx, "example", &alb.ServerGroupArgs{
//				Protocol:        pulumi.String("HTTP"),
//				VpcId:           exampleNetwork.ID(),
//				ServerGroupName: pulumi.String(name),
//				ResourceGroupId: pulumi.String(example.Groups[0].Id),
//				StickySessionConfig: &alb.ServerGroupStickySessionConfigArgs{
//					StickySessionEnabled: pulumi.Bool(true),
//					Cookie:               pulumi.String("tf-example"),
//					StickySessionType:    pulumi.String("Server"),
//				},
//				HealthCheckConfig: &alb.ServerGroupHealthCheckConfigArgs{
//					HealthCheckConnectPort: pulumi.Int(46325),
//					HealthCheckEnabled:     pulumi.Bool(true),
//					HealthCheckHost:        pulumi.String("tf-example.com"),
//					HealthCheckCodes: pulumi.StringArray{
//						pulumi.String("http_2xx"),
//						pulumi.String("http_3xx"),
//						pulumi.String("http_4xx"),
//					},
//					HealthCheckHttpVersion: pulumi.String("HTTP1.1"),
//					HealthCheckInterval:    pulumi.Int(2),
//					HealthCheckMethod:      pulumi.String("HEAD"),
//					HealthCheckPath:        pulumi.String("/tf-example"),
//					HealthCheckProtocol:    pulumi.String("HTTP"),
//					HealthCheckTimeout:     pulumi.Int(5),
//					HealthyThreshold:       pulumi.Int(3),
//					UnhealthyThreshold:     pulumi.Int(3),
//				},
//				Servers: alb.ServerGroupServerArray{
//					&alb.ServerGroupServerArgs{
//						Description: pulumi.String(name),
//						Port:        pulumi.Int(80),
//						ServerId:    exampleInstance.ID(),
//						ServerIp:    exampleInstance.PrivateIp,
//						ServerType:  pulumi.String("Ecs"),
//						Weight:      pulumi.Int(10),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"Created": pulumi.String("TF"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Application Load Balancer (ALB) Server Group can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:alb/serverGroup:ServerGroup example <id>
// ```
type ServerGroup struct {
	pulumi.CustomResourceState

	// Elegant interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig ServerGroupConnectionDrainConfigOutput `pulumi:"connectionDrainConfig"`
	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Indicates whether cross-zone load balancing is enabled for the server group. Valid values:
	CrossZoneEnabled pulumi.BoolOutput `pulumi:"crossZoneEnabled"`
	// Whether to PreCheck only this request. Value:
	// true: Send a check request,
	// false (default): Send a normal request.
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// The configuration of health checks See `healthCheckConfig` below.
	HealthCheckConfig ServerGroupHealthCheckConfigOutput `pulumi:"healthCheckConfig"`
	// The ID of the resource group to which you want to transfer the cloud resource.
	//
	// > **NOTE:**   You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is resource management?](https://www.alibabacloud.com/help/en/doc-detail/94475.html)
	HealthCheckTemplateId pulumi.StringPtrOutput `pulumi:"healthCheckTemplateId"`
	// Enable Ipv6
	Ipv6Enabled pulumi.BoolPtrOutput `pulumi:"ipv6Enabled"`
	// The backend protocol. Valid values:
	//
	// *   `HTTP`: allows you to associate an HTTPS, HTTP, or QUIC listener with the server group. This is the default value.
	//
	// *   `HTTPS`: allows you to associate HTTPS listeners with backend servers.
	//
	// *   `gRPC`: allows you to associate an HTTPS or QUIC listener with the server group.
	//
	// > **NOTE:**   You do not need to specify a backend protocol if you set `ServerGroupType` to `Fc`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Elegant interrupt configuration.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The scheduling algorithm. Valid values:
	//
	// *   `Wrr` (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
	//
	// *   `Wlc`: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
	//
	// *   `Sch`: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.
	//
	// > **NOTE:**  This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
	Scheduler pulumi.StringOutput `pulumi:"scheduler"`
	// The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
	ServerGroupName pulumi.StringOutput `pulumi:"serverGroupName"`
	// The type of server group. Valid values:
	//
	// - `Instance` (default): allows you to add servers by specifying `Ecs`, `Eni`, or `Eci`.
	// - `Ip`: allows you to add servers by specifying IP addresses.
	// - `Fc`: allows you to add servers by specifying functions of Function Compute.
	ServerGroupType pulumi.StringOutput `pulumi:"serverGroupType"`
	// List of servers. See `servers` below.
	Servers ServerGroupServerArrayOutput `pulumi:"servers"`
	// Only applicable to the ALB Ingress scenario, indicating the K8s Service name corresponding to the server group.
	ServiceName pulumi.StringPtrOutput `pulumi:"serviceName"`
	// Slow start configuration. See `slowStartConfig` below.
	SlowStartConfig ServerGroupSlowStartConfigOutput `pulumi:"slowStartConfig"`
	// The status of the resource
	Status pulumi.StringOutput `pulumi:"status"`
	// The configuration of health checks See `stickySessionConfig` below.
	StickySessionConfig ServerGroupStickySessionConfigPtrOutput `pulumi:"stickySessionConfig"`
	// The creation time of the resource
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Url consistency hash parameter configuration See `uchConfig` below.
	UchConfig ServerGroupUchConfigPtrOutput `pulumi:"uchConfig"`
	// Specifies whether to enable persistent TCP connections.
	UpstreamKeepaliveEnabled pulumi.BoolPtrOutput `pulumi:"upstreamKeepaliveEnabled"`
	// The ID of the virtual private cloud (VPC). You can add only servers that are deployed in the specified VPC to the server group.
	//
	// > **NOTE:**   This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
}

// NewServerGroup registers a new resource with the given unique name, arguments, and options.
func NewServerGroup(ctx *pulumi.Context,
	name string, args *ServerGroupArgs, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HealthCheckConfig == nil {
		return nil, errors.New("invalid value for required argument 'HealthCheckConfig'")
	}
	if args.ServerGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ServerGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerGroup
	err := ctx.RegisterResource("alicloud:alb/serverGroup:ServerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerGroup gets an existing ServerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerGroupState, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	var resource ServerGroup
	err := ctx.ReadResource("alicloud:alb/serverGroup:ServerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerGroup resources.
type serverGroupState struct {
	// Elegant interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig *ServerGroupConnectionDrainConfig `pulumi:"connectionDrainConfig"`
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// Indicates whether cross-zone load balancing is enabled for the server group. Valid values:
	CrossZoneEnabled *bool `pulumi:"crossZoneEnabled"`
	// Whether to PreCheck only this request. Value:
	// true: Send a check request,
	// false (default): Send a normal request.
	DryRun *bool `pulumi:"dryRun"`
	// The configuration of health checks See `healthCheckConfig` below.
	HealthCheckConfig *ServerGroupHealthCheckConfig `pulumi:"healthCheckConfig"`
	// The ID of the resource group to which you want to transfer the cloud resource.
	//
	// > **NOTE:**   You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is resource management?](https://www.alibabacloud.com/help/en/doc-detail/94475.html)
	HealthCheckTemplateId *string `pulumi:"healthCheckTemplateId"`
	// Enable Ipv6
	Ipv6Enabled *bool `pulumi:"ipv6Enabled"`
	// The backend protocol. Valid values:
	//
	// *   `HTTP`: allows you to associate an HTTPS, HTTP, or QUIC listener with the server group. This is the default value.
	//
	// *   `HTTPS`: allows you to associate HTTPS listeners with backend servers.
	//
	// *   `gRPC`: allows you to associate an HTTPS or QUIC listener with the server group.
	//
	// > **NOTE:**   You do not need to specify a backend protocol if you set `ServerGroupType` to `Fc`.
	Protocol *string `pulumi:"protocol"`
	// Elegant interrupt configuration.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The scheduling algorithm. Valid values:
	//
	// *   `Wrr` (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
	//
	// *   `Wlc`: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
	//
	// *   `Sch`: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.
	//
	// > **NOTE:**  This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
	Scheduler *string `pulumi:"scheduler"`
	// The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
	ServerGroupName *string `pulumi:"serverGroupName"`
	// The type of server group. Valid values:
	//
	// - `Instance` (default): allows you to add servers by specifying `Ecs`, `Eni`, or `Eci`.
	// - `Ip`: allows you to add servers by specifying IP addresses.
	// - `Fc`: allows you to add servers by specifying functions of Function Compute.
	ServerGroupType *string `pulumi:"serverGroupType"`
	// List of servers. See `servers` below.
	Servers []ServerGroupServer `pulumi:"servers"`
	// Only applicable to the ALB Ingress scenario, indicating the K8s Service name corresponding to the server group.
	ServiceName *string `pulumi:"serviceName"`
	// Slow start configuration. See `slowStartConfig` below.
	SlowStartConfig *ServerGroupSlowStartConfig `pulumi:"slowStartConfig"`
	// The status of the resource
	Status *string `pulumi:"status"`
	// The configuration of health checks See `stickySessionConfig` below.
	StickySessionConfig *ServerGroupStickySessionConfig `pulumi:"stickySessionConfig"`
	// The creation time of the resource
	Tags map[string]string `pulumi:"tags"`
	// Url consistency hash parameter configuration See `uchConfig` below.
	UchConfig *ServerGroupUchConfig `pulumi:"uchConfig"`
	// Specifies whether to enable persistent TCP connections.
	UpstreamKeepaliveEnabled *bool `pulumi:"upstreamKeepaliveEnabled"`
	// The ID of the virtual private cloud (VPC). You can add only servers that are deployed in the specified VPC to the server group.
	//
	// > **NOTE:**   This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
	VpcId *string `pulumi:"vpcId"`
}

type ServerGroupState struct {
	// Elegant interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig ServerGroupConnectionDrainConfigPtrInput
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// Indicates whether cross-zone load balancing is enabled for the server group. Valid values:
	CrossZoneEnabled pulumi.BoolPtrInput
	// Whether to PreCheck only this request. Value:
	// true: Send a check request,
	// false (default): Send a normal request.
	DryRun pulumi.BoolPtrInput
	// The configuration of health checks See `healthCheckConfig` below.
	HealthCheckConfig ServerGroupHealthCheckConfigPtrInput
	// The ID of the resource group to which you want to transfer the cloud resource.
	//
	// > **NOTE:**   You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is resource management?](https://www.alibabacloud.com/help/en/doc-detail/94475.html)
	HealthCheckTemplateId pulumi.StringPtrInput
	// Enable Ipv6
	Ipv6Enabled pulumi.BoolPtrInput
	// The backend protocol. Valid values:
	//
	// *   `HTTP`: allows you to associate an HTTPS, HTTP, or QUIC listener with the server group. This is the default value.
	//
	// *   `HTTPS`: allows you to associate HTTPS listeners with backend servers.
	//
	// *   `gRPC`: allows you to associate an HTTPS or QUIC listener with the server group.
	//
	// > **NOTE:**   You do not need to specify a backend protocol if you set `ServerGroupType` to `Fc`.
	Protocol pulumi.StringPtrInput
	// Elegant interrupt configuration.
	ResourceGroupId pulumi.StringPtrInput
	// The scheduling algorithm. Valid values:
	//
	// *   `Wrr` (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
	//
	// *   `Wlc`: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
	//
	// *   `Sch`: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.
	//
	// > **NOTE:**  This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
	Scheduler pulumi.StringPtrInput
	// The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
	ServerGroupName pulumi.StringPtrInput
	// The type of server group. Valid values:
	//
	// - `Instance` (default): allows you to add servers by specifying `Ecs`, `Eni`, or `Eci`.
	// - `Ip`: allows you to add servers by specifying IP addresses.
	// - `Fc`: allows you to add servers by specifying functions of Function Compute.
	ServerGroupType pulumi.StringPtrInput
	// List of servers. See `servers` below.
	Servers ServerGroupServerArrayInput
	// Only applicable to the ALB Ingress scenario, indicating the K8s Service name corresponding to the server group.
	ServiceName pulumi.StringPtrInput
	// Slow start configuration. See `slowStartConfig` below.
	SlowStartConfig ServerGroupSlowStartConfigPtrInput
	// The status of the resource
	Status pulumi.StringPtrInput
	// The configuration of health checks See `stickySessionConfig` below.
	StickySessionConfig ServerGroupStickySessionConfigPtrInput
	// The creation time of the resource
	Tags pulumi.StringMapInput
	// Url consistency hash parameter configuration See `uchConfig` below.
	UchConfig ServerGroupUchConfigPtrInput
	// Specifies whether to enable persistent TCP connections.
	UpstreamKeepaliveEnabled pulumi.BoolPtrInput
	// The ID of the virtual private cloud (VPC). You can add only servers that are deployed in the specified VPC to the server group.
	//
	// > **NOTE:**   This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
	VpcId pulumi.StringPtrInput
}

func (ServerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupState)(nil)).Elem()
}

type serverGroupArgs struct {
	// Elegant interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig *ServerGroupConnectionDrainConfig `pulumi:"connectionDrainConfig"`
	// Indicates whether cross-zone load balancing is enabled for the server group. Valid values:
	CrossZoneEnabled *bool `pulumi:"crossZoneEnabled"`
	// Whether to PreCheck only this request. Value:
	// true: Send a check request,
	// false (default): Send a normal request.
	DryRun *bool `pulumi:"dryRun"`
	// The configuration of health checks See `healthCheckConfig` below.
	HealthCheckConfig ServerGroupHealthCheckConfig `pulumi:"healthCheckConfig"`
	// The ID of the resource group to which you want to transfer the cloud resource.
	//
	// > **NOTE:**   You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is resource management?](https://www.alibabacloud.com/help/en/doc-detail/94475.html)
	HealthCheckTemplateId *string `pulumi:"healthCheckTemplateId"`
	// Enable Ipv6
	Ipv6Enabled *bool `pulumi:"ipv6Enabled"`
	// The backend protocol. Valid values:
	//
	// *   `HTTP`: allows you to associate an HTTPS, HTTP, or QUIC listener with the server group. This is the default value.
	//
	// *   `HTTPS`: allows you to associate HTTPS listeners with backend servers.
	//
	// *   `gRPC`: allows you to associate an HTTPS or QUIC listener with the server group.
	//
	// > **NOTE:**   You do not need to specify a backend protocol if you set `ServerGroupType` to `Fc`.
	Protocol *string `pulumi:"protocol"`
	// Elegant interrupt configuration.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The scheduling algorithm. Valid values:
	//
	// *   `Wrr` (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
	//
	// *   `Wlc`: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
	//
	// *   `Sch`: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.
	//
	// > **NOTE:**  This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
	Scheduler *string `pulumi:"scheduler"`
	// The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
	ServerGroupName string `pulumi:"serverGroupName"`
	// The type of server group. Valid values:
	//
	// - `Instance` (default): allows you to add servers by specifying `Ecs`, `Eni`, or `Eci`.
	// - `Ip`: allows you to add servers by specifying IP addresses.
	// - `Fc`: allows you to add servers by specifying functions of Function Compute.
	ServerGroupType *string `pulumi:"serverGroupType"`
	// List of servers. See `servers` below.
	Servers []ServerGroupServer `pulumi:"servers"`
	// Only applicable to the ALB Ingress scenario, indicating the K8s Service name corresponding to the server group.
	ServiceName *string `pulumi:"serviceName"`
	// Slow start configuration. See `slowStartConfig` below.
	SlowStartConfig *ServerGroupSlowStartConfig `pulumi:"slowStartConfig"`
	// The configuration of health checks See `stickySessionConfig` below.
	StickySessionConfig *ServerGroupStickySessionConfig `pulumi:"stickySessionConfig"`
	// The creation time of the resource
	Tags map[string]string `pulumi:"tags"`
	// Url consistency hash parameter configuration See `uchConfig` below.
	UchConfig *ServerGroupUchConfig `pulumi:"uchConfig"`
	// Specifies whether to enable persistent TCP connections.
	UpstreamKeepaliveEnabled *bool `pulumi:"upstreamKeepaliveEnabled"`
	// The ID of the virtual private cloud (VPC). You can add only servers that are deployed in the specified VPC to the server group.
	//
	// > **NOTE:**   This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a ServerGroup resource.
type ServerGroupArgs struct {
	// Elegant interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig ServerGroupConnectionDrainConfigPtrInput
	// Indicates whether cross-zone load balancing is enabled for the server group. Valid values:
	CrossZoneEnabled pulumi.BoolPtrInput
	// Whether to PreCheck only this request. Value:
	// true: Send a check request,
	// false (default): Send a normal request.
	DryRun pulumi.BoolPtrInput
	// The configuration of health checks See `healthCheckConfig` below.
	HealthCheckConfig ServerGroupHealthCheckConfigInput
	// The ID of the resource group to which you want to transfer the cloud resource.
	//
	// > **NOTE:**   You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is resource management?](https://www.alibabacloud.com/help/en/doc-detail/94475.html)
	HealthCheckTemplateId pulumi.StringPtrInput
	// Enable Ipv6
	Ipv6Enabled pulumi.BoolPtrInput
	// The backend protocol. Valid values:
	//
	// *   `HTTP`: allows you to associate an HTTPS, HTTP, or QUIC listener with the server group. This is the default value.
	//
	// *   `HTTPS`: allows you to associate HTTPS listeners with backend servers.
	//
	// *   `gRPC`: allows you to associate an HTTPS or QUIC listener with the server group.
	//
	// > **NOTE:**   You do not need to specify a backend protocol if you set `ServerGroupType` to `Fc`.
	Protocol pulumi.StringPtrInput
	// Elegant interrupt configuration.
	ResourceGroupId pulumi.StringPtrInput
	// The scheduling algorithm. Valid values:
	//
	// *   `Wrr` (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
	//
	// *   `Wlc`: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
	//
	// *   `Sch`: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.
	//
	// > **NOTE:**  This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
	Scheduler pulumi.StringPtrInput
	// The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
	ServerGroupName pulumi.StringInput
	// The type of server group. Valid values:
	//
	// - `Instance` (default): allows you to add servers by specifying `Ecs`, `Eni`, or `Eci`.
	// - `Ip`: allows you to add servers by specifying IP addresses.
	// - `Fc`: allows you to add servers by specifying functions of Function Compute.
	ServerGroupType pulumi.StringPtrInput
	// List of servers. See `servers` below.
	Servers ServerGroupServerArrayInput
	// Only applicable to the ALB Ingress scenario, indicating the K8s Service name corresponding to the server group.
	ServiceName pulumi.StringPtrInput
	// Slow start configuration. See `slowStartConfig` below.
	SlowStartConfig ServerGroupSlowStartConfigPtrInput
	// The configuration of health checks See `stickySessionConfig` below.
	StickySessionConfig ServerGroupStickySessionConfigPtrInput
	// The creation time of the resource
	Tags pulumi.StringMapInput
	// Url consistency hash parameter configuration See `uchConfig` below.
	UchConfig ServerGroupUchConfigPtrInput
	// Specifies whether to enable persistent TCP connections.
	UpstreamKeepaliveEnabled pulumi.BoolPtrInput
	// The ID of the virtual private cloud (VPC). You can add only servers that are deployed in the specified VPC to the server group.
	//
	// > **NOTE:**   This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
	VpcId pulumi.StringPtrInput
}

func (ServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupArgs)(nil)).Elem()
}

type ServerGroupInput interface {
	pulumi.Input

	ToServerGroupOutput() ServerGroupOutput
	ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput
}

func (*ServerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (i *ServerGroup) ToServerGroupOutput() ServerGroupOutput {
	return i.ToServerGroupOutputWithContext(context.Background())
}

func (i *ServerGroup) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupOutput)
}

// ServerGroupArrayInput is an input type that accepts ServerGroupArray and ServerGroupArrayOutput values.
// You can construct a concrete instance of `ServerGroupArrayInput` via:
//
//	ServerGroupArray{ ServerGroupArgs{...} }
type ServerGroupArrayInput interface {
	pulumi.Input

	ToServerGroupArrayOutput() ServerGroupArrayOutput
	ToServerGroupArrayOutputWithContext(context.Context) ServerGroupArrayOutput
}

type ServerGroupArray []ServerGroupInput

func (ServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroup)(nil)).Elem()
}

func (i ServerGroupArray) ToServerGroupArrayOutput() ServerGroupArrayOutput {
	return i.ToServerGroupArrayOutputWithContext(context.Background())
}

func (i ServerGroupArray) ToServerGroupArrayOutputWithContext(ctx context.Context) ServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupArrayOutput)
}

// ServerGroupMapInput is an input type that accepts ServerGroupMap and ServerGroupMapOutput values.
// You can construct a concrete instance of `ServerGroupMapInput` via:
//
//	ServerGroupMap{ "key": ServerGroupArgs{...} }
type ServerGroupMapInput interface {
	pulumi.Input

	ToServerGroupMapOutput() ServerGroupMapOutput
	ToServerGroupMapOutputWithContext(context.Context) ServerGroupMapOutput
}

type ServerGroupMap map[string]ServerGroupInput

func (ServerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroup)(nil)).Elem()
}

func (i ServerGroupMap) ToServerGroupMapOutput() ServerGroupMapOutput {
	return i.ToServerGroupMapOutputWithContext(context.Background())
}

func (i ServerGroupMap) ToServerGroupMapOutputWithContext(ctx context.Context) ServerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupMapOutput)
}

type ServerGroupOutput struct{ *pulumi.OutputState }

func (ServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (o ServerGroupOutput) ToServerGroupOutput() ServerGroupOutput {
	return o
}

func (o ServerGroupOutput) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return o
}

// Elegant interrupt configuration. See `connectionDrainConfig` below.
func (o ServerGroupOutput) ConnectionDrainConfig() ServerGroupConnectionDrainConfigOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupConnectionDrainConfigOutput { return v.ConnectionDrainConfig }).(ServerGroupConnectionDrainConfigOutput)
}

// The creation time of the resource
func (o ServerGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Indicates whether cross-zone load balancing is enabled for the server group. Valid values:
func (o ServerGroupOutput) CrossZoneEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.BoolOutput { return v.CrossZoneEnabled }).(pulumi.BoolOutput)
}

// Whether to PreCheck only this request. Value:
// true: Send a check request,
// false (default): Send a normal request.
func (o ServerGroupOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// The configuration of health checks See `healthCheckConfig` below.
func (o ServerGroupOutput) HealthCheckConfig() ServerGroupHealthCheckConfigOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupHealthCheckConfigOutput { return v.HealthCheckConfig }).(ServerGroupHealthCheckConfigOutput)
}

// The ID of the resource group to which you want to transfer the cloud resource.
//
// > **NOTE:**   You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is resource management?](https://www.alibabacloud.com/help/en/doc-detail/94475.html)
func (o ServerGroupOutput) HealthCheckTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringPtrOutput { return v.HealthCheckTemplateId }).(pulumi.StringPtrOutput)
}

// Enable Ipv6
func (o ServerGroupOutput) Ipv6Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.BoolPtrOutput { return v.Ipv6Enabled }).(pulumi.BoolPtrOutput)
}

// The backend protocol. Valid values:
//
// *   `HTTP`: allows you to associate an HTTPS, HTTP, or QUIC listener with the server group. This is the default value.
//
// *   `HTTPS`: allows you to associate HTTPS listeners with backend servers.
//
// *   `gRPC`: allows you to associate an HTTPS or QUIC listener with the server group.
//
// > **NOTE:**   You do not need to specify a backend protocol if you set `ServerGroupType` to `Fc`.
func (o ServerGroupOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Elegant interrupt configuration.
func (o ServerGroupOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The scheduling algorithm. Valid values:
//
// *   `Wrr` (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
//
// *   `Wlc`: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
//
// *   `Sch`: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.
//
// > **NOTE:**  This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
func (o ServerGroupOutput) Scheduler() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Scheduler }).(pulumi.StringOutput)
}

// The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
func (o ServerGroupOutput) ServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ServerGroupName }).(pulumi.StringOutput)
}

// The type of server group. Valid values:
//
// - `Instance` (default): allows you to add servers by specifying `Ecs`, `Eni`, or `Eci`.
// - `Ip`: allows you to add servers by specifying IP addresses.
// - `Fc`: allows you to add servers by specifying functions of Function Compute.
func (o ServerGroupOutput) ServerGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ServerGroupType }).(pulumi.StringOutput)
}

// List of servers. See `servers` below.
func (o ServerGroupOutput) Servers() ServerGroupServerArrayOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupServerArrayOutput { return v.Servers }).(ServerGroupServerArrayOutput)
}

// Only applicable to the ALB Ingress scenario, indicating the K8s Service name corresponding to the server group.
func (o ServerGroupOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringPtrOutput { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Slow start configuration. See `slowStartConfig` below.
func (o ServerGroupOutput) SlowStartConfig() ServerGroupSlowStartConfigOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupSlowStartConfigOutput { return v.SlowStartConfig }).(ServerGroupSlowStartConfigOutput)
}

// The status of the resource
func (o ServerGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The configuration of health checks See `stickySessionConfig` below.
func (o ServerGroupOutput) StickySessionConfig() ServerGroupStickySessionConfigPtrOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupStickySessionConfigPtrOutput { return v.StickySessionConfig }).(ServerGroupStickySessionConfigPtrOutput)
}

// The creation time of the resource
func (o ServerGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Url consistency hash parameter configuration See `uchConfig` below.
func (o ServerGroupOutput) UchConfig() ServerGroupUchConfigPtrOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupUchConfigPtrOutput { return v.UchConfig }).(ServerGroupUchConfigPtrOutput)
}

// Specifies whether to enable persistent TCP connections.
func (o ServerGroupOutput) UpstreamKeepaliveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.BoolPtrOutput { return v.UpstreamKeepaliveEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the virtual private cloud (VPC). You can add only servers that are deployed in the specified VPC to the server group.
//
// > **NOTE:**   This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
func (o ServerGroupOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

type ServerGroupArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroup)(nil)).Elem()
}

func (o ServerGroupArrayOutput) ToServerGroupArrayOutput() ServerGroupArrayOutput {
	return o
}

func (o ServerGroupArrayOutput) ToServerGroupArrayOutputWithContext(ctx context.Context) ServerGroupArrayOutput {
	return o
}

func (o ServerGroupArrayOutput) Index(i pulumi.IntInput) ServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerGroup {
		return vs[0].([]*ServerGroup)[vs[1].(int)]
	}).(ServerGroupOutput)
}

type ServerGroupMapOutput struct{ *pulumi.OutputState }

func (ServerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroup)(nil)).Elem()
}

func (o ServerGroupMapOutput) ToServerGroupMapOutput() ServerGroupMapOutput {
	return o
}

func (o ServerGroupMapOutput) ToServerGroupMapOutputWithContext(ctx context.Context) ServerGroupMapOutput {
	return o
}

func (o ServerGroupMapOutput) MapIndex(k pulumi.StringInput) ServerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerGroup {
		return vs[0].(map[string]*ServerGroup)[vs[1].(string)]
	}).(ServerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupInput)(nil)).Elem(), &ServerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupArrayInput)(nil)).Elem(), ServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupMapInput)(nil)).Elem(), ServerGroupMap{})
	pulumi.RegisterOutputType(ServerGroupOutput{})
	pulumi.RegisterOutputType(ServerGroupArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupMapOutput{})
}
