// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the Alb Rules of the current Alibaba Cloud user.
//
// > **NOTE:** Available since v1.133.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/alb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := alb.GetZones(ctx, &alb.GetZonesArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetResourceGroups, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("10.4.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat, err := std.Format(ctx, &std.FormatArgs{
//				Input: "10.4.%d.0/24",
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFormat1, err := std.Format(ctx, &std.FormatArgs{
//				Input: fmt.Sprintf("%v%v", name, "_%d"),
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var defaultSwitch []*vpc.Switch
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := vpc.NewSwitch(ctx, fmt.Sprintf("default-%v", key0), &vpc.SwitchArgs{
//					VpcId:       defaultNetwork.ID(),
//					CidrBlock:   pulumi.String(invokeFormat.Result),
//					ZoneId:      _default.Zones[val0].Id,
//					VswitchName: pulumi.String(invokeFormat1.Result),
//				})
//				if err != nil {
//					return err
//				}
//				defaultSwitch = append(defaultSwitch, __res)
//			}
//			defaultLoadBalancer, err := alb.NewLoadBalancer(ctx, "default", &alb.LoadBalancerArgs{
//				VpcId:                defaultNetwork.ID(),
//				AddressType:          pulumi.String("Internet"),
//				AddressAllocatedMode: pulumi.String("Fixed"),
//				LoadBalancerName:     pulumi.String(name),
//				LoadBalancerEdition:  pulumi.String("Standard"),
//				ResourceGroupId:      pulumi.String(defaultGetResourceGroups.Groups[0].Id),
//				LoadBalancerBillingConfig: &alb.LoadBalancerLoadBalancerBillingConfigArgs{
//					PayType: pulumi.String("PayAsYouGo"),
//				},
//				Tags: pulumi.StringMap{
//					"Created": pulumi.String("TF"),
//				},
//				ZoneMappings: alb.LoadBalancerZoneMappingArray{
//					&alb.LoadBalancerZoneMappingArgs{
//						VswitchId: defaultSwitch[0].ID(),
//						ZoneId:    pulumi.String(_default.Zones[0].Id),
//					},
//					&alb.LoadBalancerZoneMappingArgs{
//						VswitchId: defaultSwitch[1].ID(),
//						ZoneId:    pulumi.String(_default.Zones[1].Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultServerGroup, err := alb.NewServerGroup(ctx, "default", &alb.ServerGroupArgs{
//				Protocol:        pulumi.String("HTTP"),
//				VpcId:           defaultNetwork.ID(),
//				ServerGroupName: pulumi.String(name),
//				ResourceGroupId: pulumi.String(defaultGetResourceGroups.Groups[0].Id),
//				HealthCheckConfig: &alb.ServerGroupHealthCheckConfigArgs{
//					HealthCheckEnabled: pulumi.Bool(false),
//				},
//				StickySessionConfig: &alb.ServerGroupStickySessionConfigArgs{
//					StickySessionEnabled: pulumi.Bool(false),
//				},
//				Tags: pulumi.StringMap{
//					"Created": pulumi.String("TF"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultListener, err := alb.NewListener(ctx, "default", &alb.ListenerArgs{
//				LoadBalancerId:      defaultLoadBalancer.ID(),
//				ListenerProtocol:    pulumi.String("HTTP"),
//				ListenerPort:        pulumi.Int(80),
//				ListenerDescription: pulumi.String(name),
//				DefaultActions: alb.ListenerDefaultActionArray{
//					&alb.ListenerDefaultActionArgs{
//						Type: pulumi.String("ForwardGroup"),
//						ForwardGroupConfig: &alb.ListenerDefaultActionForwardGroupConfigArgs{
//							ServerGroupTuples: alb.ListenerDefaultActionForwardGroupConfigServerGroupTupleArray{
//								&alb.ListenerDefaultActionForwardGroupConfigServerGroupTupleArgs{
//									ServerGroupId: defaultServerGroup.ID(),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultRule, err := alb.NewRule(ctx, "default", &alb.RuleArgs{
//				RuleName:   pulumi.String(name),
//				ListenerId: defaultListener.ID(),
//				Priority:   pulumi.Int(555),
//				RuleConditions: alb.RuleRuleConditionArray{
//					&alb.RuleRuleConditionArgs{
//						CookieConfig: &alb.RuleRuleConditionCookieConfigArgs{
//							Values: alb.RuleRuleConditionCookieConfigValueArray{
//								&alb.RuleRuleConditionCookieConfigValueArgs{
//									Key:   pulumi.String("created"),
//									Value: pulumi.String("tf"),
//								},
//							},
//						},
//						Type: pulumi.String("Cookie"),
//					},
//				},
//				RuleActions: alb.RuleRuleActionArray{
//					&alb.RuleRuleActionArgs{
//						ForwardGroupConfig: &alb.RuleRuleActionForwardGroupConfigArgs{
//							ServerGroupTuples: alb.RuleRuleActionForwardGroupConfigServerGroupTupleArray{
//								&alb.RuleRuleActionForwardGroupConfigServerGroupTupleArgs{
//									ServerGroupId: defaultServerGroup.ID(),
//								},
//							},
//						},
//						Order: pulumi.Int(9),
//						Type:  pulumi.String("ForwardGroup"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ids := alb.GetRulesOutput(ctx, alb.GetRulesOutputArgs{
//				Ids: pulumi.StringArray{
//					defaultRule.ID(),
//				},
//			}, nil)
//			ctx.Export("albRuleId", ids.ApplyT(func(ids alb.GetRulesResult) (*string, error) {
//				return &ids.Rules[0].Id, nil
//			}).(pulumi.StringPtrOutput))
//			return nil
//		})
//	}
//
// ```
func GetRules(ctx *pulumi.Context, args *GetRulesArgs, opts ...pulumi.InvokeOption) (*GetRulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRulesResult
	err := ctx.Invoke("alicloud:alb/getRules:getRules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRules.
type GetRulesArgs struct {
	// A list of Rule IDs.
	Ids []string `pulumi:"ids"`
	// The listener ids.
	ListenerIds []string `pulumi:"listenerIds"`
	// The load balancer ids.
	LoadBalancerIds []string `pulumi:"loadBalancerIds"`
	// A regex string to filter results by Rule name.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	// The rule ids.
	RuleIds []string `pulumi:"ruleIds"`
	// The status of the forwarding rule. Valid values: `Provisioning`, `Configuring`, `Available`.
	Status *string `pulumi:"status"`
}

// A collection of values returned by getRules.
type GetRulesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id              string   `pulumi:"id"`
	Ids             []string `pulumi:"ids"`
	ListenerIds     []string `pulumi:"listenerIds"`
	LoadBalancerIds []string `pulumi:"loadBalancerIds"`
	NameRegex       *string  `pulumi:"nameRegex"`
	// A list of Rule names.
	Names      []string `pulumi:"names"`
	OutputFile *string  `pulumi:"outputFile"`
	RuleIds    []string `pulumi:"ruleIds"`
	// A list of Alb Rules. Each element contains the following attributes:
	Rules []GetRulesRule `pulumi:"rules"`
	// The status of the forwarding rule.
	Status *string `pulumi:"status"`
}

func GetRulesOutput(ctx *pulumi.Context, args GetRulesOutputArgs, opts ...pulumi.InvokeOption) GetRulesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRulesResultOutput, error) {
			args := v.(GetRulesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("alicloud:alb/getRules:getRules", args, GetRulesResultOutput{}, options).(GetRulesResultOutput), nil
		}).(GetRulesResultOutput)
}

// A collection of arguments for invoking getRules.
type GetRulesOutputArgs struct {
	// A list of Rule IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The listener ids.
	ListenerIds pulumi.StringArrayInput `pulumi:"listenerIds"`
	// The load balancer ids.
	LoadBalancerIds pulumi.StringArrayInput `pulumi:"loadBalancerIds"`
	// A regex string to filter results by Rule name.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The rule ids.
	RuleIds pulumi.StringArrayInput `pulumi:"ruleIds"`
	// The status of the forwarding rule. Valid values: `Provisioning`, `Configuring`, `Available`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetRulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRulesArgs)(nil)).Elem()
}

// A collection of values returned by getRules.
type GetRulesResultOutput struct{ *pulumi.OutputState }

func (GetRulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRulesResult)(nil)).Elem()
}

func (o GetRulesResultOutput) ToGetRulesResultOutput() GetRulesResultOutput {
	return o
}

func (o GetRulesResultOutput) ToGetRulesResultOutputWithContext(ctx context.Context) GetRulesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetRulesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRulesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRulesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRulesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetRulesResultOutput) ListenerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRulesResult) []string { return v.ListenerIds }).(pulumi.StringArrayOutput)
}

func (o GetRulesResultOutput) LoadBalancerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRulesResult) []string { return v.LoadBalancerIds }).(pulumi.StringArrayOutput)
}

func (o GetRulesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRulesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// A list of Rule names.
func (o GetRulesResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRulesResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetRulesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRulesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetRulesResultOutput) RuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRulesResult) []string { return v.RuleIds }).(pulumi.StringArrayOutput)
}

// A list of Alb Rules. Each element contains the following attributes:
func (o GetRulesResultOutput) Rules() GetRulesRuleArrayOutput {
	return o.ApplyT(func(v GetRulesResult) []GetRulesRule { return v.Rules }).(GetRulesRuleArrayOutput)
}

// The status of the forwarding rule.
func (o GetRulesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRulesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRulesResultOutput{})
}
