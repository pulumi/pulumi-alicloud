// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Application Load Balancer (ALB) A Script resource.
//
// For information about Application Load Balancer (ALB) A Script and how to use it, see [What is A Script](https://www.alibabacloud.com/help/en/slb/application-load-balancer/developer-reference/api-alb-2020-06-16-createascripts).
//
// > **NOTE:** Available since v1.195.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/alb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := alb.GetZones(ctx, &alb.GetZonesArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetResourceGroups, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("10.4.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat, err := std.Format(ctx, &std.FormatArgs{
//				Input: "10.4.%d.0/24",
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFormat1, err := std.Format(ctx, &std.FormatArgs{
//				Input: fmt.Sprintf("%v%v", name, "_%d"),
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var defaultSwitch []*vpc.Switch
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := vpc.NewSwitch(ctx, fmt.Sprintf("default-%v", key0), &vpc.SwitchArgs{
//					VpcId:       defaultNetwork.ID(),
//					CidrBlock:   pulumi.String(invokeFormat.Result),
//					ZoneId:      _default.Zones[val0].Id,
//					VswitchName: pulumi.String(invokeFormat1.Result),
//				})
//				if err != nil {
//					return err
//				}
//				defaultSwitch = append(defaultSwitch, __res)
//			}
//			defaultLoadBalancer, err := alb.NewLoadBalancer(ctx, "default", &alb.LoadBalancerArgs{
//				VpcId:                defaultNetwork.ID(),
//				AddressType:          pulumi.String("Internet"),
//				AddressAllocatedMode: pulumi.String("Fixed"),
//				LoadBalancerName:     pulumi.String(name),
//				LoadBalancerEdition:  pulumi.String("Standard"),
//				ResourceGroupId:      pulumi.String(defaultGetResourceGroups.Groups[0].Id),
//				LoadBalancerBillingConfig: &alb.LoadBalancerLoadBalancerBillingConfigArgs{
//					PayType: pulumi.String("PayAsYouGo"),
//				},
//				Tags: pulumi.StringMap{
//					"Created": pulumi.String("TF"),
//				},
//				ZoneMappings: alb.LoadBalancerZoneMappingArray{
//					&alb.LoadBalancerZoneMappingArgs{
//						VswitchId: defaultSwitch[0].ID(),
//						ZoneId:    pulumi.String(_default.Zones[0].Id),
//					},
//					&alb.LoadBalancerZoneMappingArgs{
//						VswitchId: defaultSwitch[1].ID(),
//						ZoneId:    pulumi.String(_default.Zones[1].Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultServerGroup, err := alb.NewServerGroup(ctx, "default", &alb.ServerGroupArgs{
//				Protocol:        pulumi.String("HTTP"),
//				VpcId:           defaultNetwork.ID(),
//				ServerGroupName: pulumi.String(name),
//				ResourceGroupId: pulumi.String(defaultGetResourceGroups.Groups[0].Id),
//				HealthCheckConfig: &alb.ServerGroupHealthCheckConfigArgs{
//					HealthCheckEnabled: pulumi.Bool(false),
//				},
//				StickySessionConfig: &alb.ServerGroupStickySessionConfigArgs{
//					StickySessionEnabled: pulumi.Bool(false),
//				},
//				Tags: pulumi.StringMap{
//					"Created": pulumi.String("TF"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultListener, err := alb.NewListener(ctx, "default", &alb.ListenerArgs{
//				LoadBalancerId:      defaultLoadBalancer.ID(),
//				ListenerProtocol:    pulumi.String("HTTP"),
//				ListenerPort:        pulumi.Int(8081),
//				ListenerDescription: pulumi.String(name),
//				DefaultActions: alb.ListenerDefaultActionArray{
//					&alb.ListenerDefaultActionArgs{
//						Type: pulumi.String("ForwardGroup"),
//						ForwardGroupConfig: &alb.ListenerDefaultActionForwardGroupConfigArgs{
//							ServerGroupTuples: alb.ListenerDefaultActionForwardGroupConfigServerGroupTupleArray{
//								&alb.ListenerDefaultActionForwardGroupConfigServerGroupTupleArgs{
//									ServerGroupId: defaultServerGroup.ID(),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = alb.NewAScript(ctx, "default", &alb.AScriptArgs{
//				ScriptContent: pulumi.String("time()"),
//				Position:      pulumi.String("RequestHead"),
//				AscriptName:   pulumi.String(name),
//				Enabled:       pulumi.Bool(true),
//				ListenerId:    defaultListener.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Application Load Balancer (ALB) A Script can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:alb/aScript:AScript example <id>
// ```
type AScript struct {
	pulumi.CustomResourceState

	// AScript name.
	AscriptName pulumi.StringOutput `pulumi:"ascriptName"`
	// Whether to PreCheck only this request
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// Whether AScript is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Whether extension parameters are enabled. When ExtAttributeEnabled is true, ExtAttributes must be set.
	ExtAttributeEnabled pulumi.BoolPtrOutput `pulumi:"extAttributeEnabled"`
	// Expand the list of attributes. When ExtAttributeEnabled is true, ExtAttributes must be set. See `extAttributes` below.
	ExtAttributes AScriptExtAttributeArrayOutput `pulumi:"extAttributes"`
	// Listener ID of script attribution
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// Script execution location.
	Position pulumi.StringOutput `pulumi:"position"`
	// AScript script content.
	ScriptContent pulumi.StringOutput `pulumi:"scriptContent"`
	// Script status
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewAScript registers a new resource with the given unique name, arguments, and options.
func NewAScript(ctx *pulumi.Context,
	name string, args *AScriptArgs, opts ...pulumi.ResourceOption) (*AScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AscriptName == nil {
		return nil, errors.New("invalid value for required argument 'AscriptName'")
	}
	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	if args.Position == nil {
		return nil, errors.New("invalid value for required argument 'Position'")
	}
	if args.ScriptContent == nil {
		return nil, errors.New("invalid value for required argument 'ScriptContent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AScript
	err := ctx.RegisterResource("alicloud:alb/aScript:AScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAScript gets an existing AScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AScriptState, opts ...pulumi.ResourceOption) (*AScript, error) {
	var resource AScript
	err := ctx.ReadResource("alicloud:alb/aScript:AScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AScript resources.
type ascriptState struct {
	// AScript name.
	AscriptName *string `pulumi:"ascriptName"`
	// Whether to PreCheck only this request
	DryRun *bool `pulumi:"dryRun"`
	// Whether AScript is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Whether extension parameters are enabled. When ExtAttributeEnabled is true, ExtAttributes must be set.
	ExtAttributeEnabled *bool `pulumi:"extAttributeEnabled"`
	// Expand the list of attributes. When ExtAttributeEnabled is true, ExtAttributes must be set. See `extAttributes` below.
	ExtAttributes []AScriptExtAttribute `pulumi:"extAttributes"`
	// Listener ID of script attribution
	ListenerId *string `pulumi:"listenerId"`
	// Script execution location.
	Position *string `pulumi:"position"`
	// AScript script content.
	ScriptContent *string `pulumi:"scriptContent"`
	// Script status
	Status *string `pulumi:"status"`
}

type AScriptState struct {
	// AScript name.
	AscriptName pulumi.StringPtrInput
	// Whether to PreCheck only this request
	DryRun pulumi.BoolPtrInput
	// Whether AScript is enabled.
	Enabled pulumi.BoolPtrInput
	// Whether extension parameters are enabled. When ExtAttributeEnabled is true, ExtAttributes must be set.
	ExtAttributeEnabled pulumi.BoolPtrInput
	// Expand the list of attributes. When ExtAttributeEnabled is true, ExtAttributes must be set. See `extAttributes` below.
	ExtAttributes AScriptExtAttributeArrayInput
	// Listener ID of script attribution
	ListenerId pulumi.StringPtrInput
	// Script execution location.
	Position pulumi.StringPtrInput
	// AScript script content.
	ScriptContent pulumi.StringPtrInput
	// Script status
	Status pulumi.StringPtrInput
}

func (AScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*ascriptState)(nil)).Elem()
}

type ascriptArgs struct {
	// AScript name.
	AscriptName string `pulumi:"ascriptName"`
	// Whether to PreCheck only this request
	DryRun *bool `pulumi:"dryRun"`
	// Whether AScript is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Whether extension parameters are enabled. When ExtAttributeEnabled is true, ExtAttributes must be set.
	ExtAttributeEnabled *bool `pulumi:"extAttributeEnabled"`
	// Expand the list of attributes. When ExtAttributeEnabled is true, ExtAttributes must be set. See `extAttributes` below.
	ExtAttributes []AScriptExtAttribute `pulumi:"extAttributes"`
	// Listener ID of script attribution
	ListenerId string `pulumi:"listenerId"`
	// Script execution location.
	Position string `pulumi:"position"`
	// AScript script content.
	ScriptContent string `pulumi:"scriptContent"`
}

// The set of arguments for constructing a AScript resource.
type AScriptArgs struct {
	// AScript name.
	AscriptName pulumi.StringInput
	// Whether to PreCheck only this request
	DryRun pulumi.BoolPtrInput
	// Whether AScript is enabled.
	Enabled pulumi.BoolPtrInput
	// Whether extension parameters are enabled. When ExtAttributeEnabled is true, ExtAttributes must be set.
	ExtAttributeEnabled pulumi.BoolPtrInput
	// Expand the list of attributes. When ExtAttributeEnabled is true, ExtAttributes must be set. See `extAttributes` below.
	ExtAttributes AScriptExtAttributeArrayInput
	// Listener ID of script attribution
	ListenerId pulumi.StringInput
	// Script execution location.
	Position pulumi.StringInput
	// AScript script content.
	ScriptContent pulumi.StringInput
}

func (AScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ascriptArgs)(nil)).Elem()
}

type AScriptInput interface {
	pulumi.Input

	ToAScriptOutput() AScriptOutput
	ToAScriptOutputWithContext(ctx context.Context) AScriptOutput
}

func (*AScript) ElementType() reflect.Type {
	return reflect.TypeOf((**AScript)(nil)).Elem()
}

func (i *AScript) ToAScriptOutput() AScriptOutput {
	return i.ToAScriptOutputWithContext(context.Background())
}

func (i *AScript) ToAScriptOutputWithContext(ctx context.Context) AScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AScriptOutput)
}

// AScriptArrayInput is an input type that accepts AScriptArray and AScriptArrayOutput values.
// You can construct a concrete instance of `AScriptArrayInput` via:
//
//	AScriptArray{ AScriptArgs{...} }
type AScriptArrayInput interface {
	pulumi.Input

	ToAScriptArrayOutput() AScriptArrayOutput
	ToAScriptArrayOutputWithContext(context.Context) AScriptArrayOutput
}

type AScriptArray []AScriptInput

func (AScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AScript)(nil)).Elem()
}

func (i AScriptArray) ToAScriptArrayOutput() AScriptArrayOutput {
	return i.ToAScriptArrayOutputWithContext(context.Background())
}

func (i AScriptArray) ToAScriptArrayOutputWithContext(ctx context.Context) AScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AScriptArrayOutput)
}

// AScriptMapInput is an input type that accepts AScriptMap and AScriptMapOutput values.
// You can construct a concrete instance of `AScriptMapInput` via:
//
//	AScriptMap{ "key": AScriptArgs{...} }
type AScriptMapInput interface {
	pulumi.Input

	ToAScriptMapOutput() AScriptMapOutput
	ToAScriptMapOutputWithContext(context.Context) AScriptMapOutput
}

type AScriptMap map[string]AScriptInput

func (AScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AScript)(nil)).Elem()
}

func (i AScriptMap) ToAScriptMapOutput() AScriptMapOutput {
	return i.ToAScriptMapOutputWithContext(context.Background())
}

func (i AScriptMap) ToAScriptMapOutputWithContext(ctx context.Context) AScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AScriptMapOutput)
}

type AScriptOutput struct{ *pulumi.OutputState }

func (AScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AScript)(nil)).Elem()
}

func (o AScriptOutput) ToAScriptOutput() AScriptOutput {
	return o
}

func (o AScriptOutput) ToAScriptOutputWithContext(ctx context.Context) AScriptOutput {
	return o
}

// AScript name.
func (o AScriptOutput) AscriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *AScript) pulumi.StringOutput { return v.AscriptName }).(pulumi.StringOutput)
}

// Whether to PreCheck only this request
func (o AScriptOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AScript) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// Whether AScript is enabled.
func (o AScriptOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AScript) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Whether extension parameters are enabled. When ExtAttributeEnabled is true, ExtAttributes must be set.
func (o AScriptOutput) ExtAttributeEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AScript) pulumi.BoolPtrOutput { return v.ExtAttributeEnabled }).(pulumi.BoolPtrOutput)
}

// Expand the list of attributes. When ExtAttributeEnabled is true, ExtAttributes must be set. See `extAttributes` below.
func (o AScriptOutput) ExtAttributes() AScriptExtAttributeArrayOutput {
	return o.ApplyT(func(v *AScript) AScriptExtAttributeArrayOutput { return v.ExtAttributes }).(AScriptExtAttributeArrayOutput)
}

// Listener ID of script attribution
func (o AScriptOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *AScript) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// Script execution location.
func (o AScriptOutput) Position() pulumi.StringOutput {
	return o.ApplyT(func(v *AScript) pulumi.StringOutput { return v.Position }).(pulumi.StringOutput)
}

// AScript script content.
func (o AScriptOutput) ScriptContent() pulumi.StringOutput {
	return o.ApplyT(func(v *AScript) pulumi.StringOutput { return v.ScriptContent }).(pulumi.StringOutput)
}

// Script status
func (o AScriptOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AScript) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type AScriptArrayOutput struct{ *pulumi.OutputState }

func (AScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AScript)(nil)).Elem()
}

func (o AScriptArrayOutput) ToAScriptArrayOutput() AScriptArrayOutput {
	return o
}

func (o AScriptArrayOutput) ToAScriptArrayOutputWithContext(ctx context.Context) AScriptArrayOutput {
	return o
}

func (o AScriptArrayOutput) Index(i pulumi.IntInput) AScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AScript {
		return vs[0].([]*AScript)[vs[1].(int)]
	}).(AScriptOutput)
}

type AScriptMapOutput struct{ *pulumi.OutputState }

func (AScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AScript)(nil)).Elem()
}

func (o AScriptMapOutput) ToAScriptMapOutput() AScriptMapOutput {
	return o
}

func (o AScriptMapOutput) ToAScriptMapOutputWithContext(ctx context.Context) AScriptMapOutput {
	return o
}

func (o AScriptMapOutput) MapIndex(k pulumi.StringInput) AScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AScript {
		return vs[0].(map[string]*AScript)[vs[1].(string)]
	}).(AScriptOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AScriptInput)(nil)).Elem(), &AScript{})
	pulumi.RegisterInputType(reflect.TypeOf((*AScriptArrayInput)(nil)).Elem(), AScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AScriptMapInput)(nil)).Elem(), AScriptMap{})
	pulumi.RegisterOutputType(AScriptOutput{})
	pulumi.RegisterOutputType(AScriptArrayOutput{})
	pulumi.RegisterOutputType(AScriptMapOutput{})
}
