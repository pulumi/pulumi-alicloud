// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides Alb Ascript available to the user.
//
// > **NOTE:** Available in 1.195.0+
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// "github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/alb"
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// _default, err := alb.GetAscripts(ctx, &alb.GetAscriptsArgs{
// Ids: interface{}{
// alicloud_alb_ascript.Default.Id,
// },
// NameRegex: pulumi.StringRef(alicloud_alb_ascript.Default.Name),
// AscriptName: pulumi.StringRef("test"),
// ListenerId: pulumi.StringRef(_var.ListenerId),
// }, nil);
// if err != nil {
// return err
// }
// ctx.Export("alicloudAlbAscriptExampleId", _default.Ascripts[0].Id)
// return nil
// })
// }
// ```
func GetAscripts(ctx *pulumi.Context, args *GetAscriptsArgs, opts ...pulumi.InvokeOption) (*GetAscriptsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAscriptsResult
	err := ctx.Invoke("alicloud:alb/getAscripts:getAscripts", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAscripts.
type GetAscriptsArgs struct {
	// Script name.
	AscriptName   *string `pulumi:"ascriptName"`
	EnableDetails *bool   `pulumi:"enableDetails"`
	// A list of AScript IDs.
	Ids []string `pulumi:"ids"`
	// Listener ID of script attribution
	ListenerId *string `pulumi:"listenerId"`
	// A regex string to filter results by Group Metric Rule name.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getAscripts.
type GetAscriptsResult struct {
	// Script name.
	AscriptName *string `pulumi:"ascriptName"`
	// A list of AScript Entries. Each element contains the following attributes:
	Ascripts      []GetAscriptsAscript `pulumi:"ascripts"`
	EnableDetails *bool                `pulumi:"enableDetails"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list of AScript IDs.
	Ids []string `pulumi:"ids"`
	// Listener ID of script attribution.
	ListenerId *string `pulumi:"listenerId"`
	NameRegex  *string `pulumi:"nameRegex"`
	// A list of name of AScripts.
	Names      []string `pulumi:"names"`
	OutputFile *string  `pulumi:"outputFile"`
}

func GetAscriptsOutput(ctx *pulumi.Context, args GetAscriptsOutputArgs, opts ...pulumi.InvokeOption) GetAscriptsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAscriptsResult, error) {
			args := v.(GetAscriptsArgs)
			r, err := GetAscripts(ctx, &args, opts...)
			var s GetAscriptsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAscriptsResultOutput)
}

// A collection of arguments for invoking getAscripts.
type GetAscriptsOutputArgs struct {
	// Script name.
	AscriptName   pulumi.StringPtrInput `pulumi:"ascriptName"`
	EnableDetails pulumi.BoolPtrInput   `pulumi:"enableDetails"`
	// A list of AScript IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// Listener ID of script attribution
	ListenerId pulumi.StringPtrInput `pulumi:"listenerId"`
	// A regex string to filter results by Group Metric Rule name.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetAscriptsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAscriptsArgs)(nil)).Elem()
}

// A collection of values returned by getAscripts.
type GetAscriptsResultOutput struct{ *pulumi.OutputState }

func (GetAscriptsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAscriptsResult)(nil)).Elem()
}

func (o GetAscriptsResultOutput) ToGetAscriptsResultOutput() GetAscriptsResultOutput {
	return o
}

func (o GetAscriptsResultOutput) ToGetAscriptsResultOutputWithContext(ctx context.Context) GetAscriptsResultOutput {
	return o
}

// Script name.
func (o GetAscriptsResultOutput) AscriptName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAscriptsResult) *string { return v.AscriptName }).(pulumi.StringPtrOutput)
}

// A list of AScript Entries. Each element contains the following attributes:
func (o GetAscriptsResultOutput) Ascripts() GetAscriptsAscriptArrayOutput {
	return o.ApplyT(func(v GetAscriptsResult) []GetAscriptsAscript { return v.Ascripts }).(GetAscriptsAscriptArrayOutput)
}

func (o GetAscriptsResultOutput) EnableDetails() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAscriptsResult) *bool { return v.EnableDetails }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAscriptsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAscriptsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of AScript IDs.
func (o GetAscriptsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAscriptsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// Listener ID of script attribution.
func (o GetAscriptsResultOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAscriptsResult) *string { return v.ListenerId }).(pulumi.StringPtrOutput)
}

func (o GetAscriptsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAscriptsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// A list of name of AScripts.
func (o GetAscriptsResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAscriptsResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetAscriptsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAscriptsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAscriptsResultOutput{})
}
