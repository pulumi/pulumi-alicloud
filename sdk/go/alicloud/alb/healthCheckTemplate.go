// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Application Load Balancer (ALB) Health Check Template resource.
//
// For information about Application Load Balancer (ALB) Health Check Template and how to use it, see [What is Health Check Template](https://www.alibabacloud.com/help/doc-detail/214343.htm).
//
// > **NOTE:** Available in v1.134.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/alb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := alb.NewHealthCheckTemplate(ctx, "example", &alb.HealthCheckTemplateArgs{
//				HealthCheckTemplateName: pulumi.String("example_name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Application Load Balancer (ALB) Health Check Template can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:alb/healthCheckTemplate:HealthCheckTemplate example <id>
//
// ```
type HealthCheckTemplate struct {
	pulumi.CustomResourceState

	// Whether to precheck the API request.
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// The HTTP status code that indicates a successful health check. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckCodes pulumi.StringArrayOutput `pulumi:"healthCheckCodes"`
	// The number of the port that is used for health checks.  Valid values: `0` to `65535`.  Default value: `0`. This default value indicates that the backend server is used for health checks.
	HealthCheckConnectPort pulumi.IntOutput `pulumi:"healthCheckConnectPort"`
	// The domain name that is used for health checks. Default value:  `$SERVER_IP`. The domain name must be 1 to 80 characters in length.  **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckHost pulumi.StringOutput `pulumi:"healthCheckHost"`
	// The version of the HTTP protocol.  Valid values: `HTTP1.0` and `HTTP1.1`.  Default value: `HTTP1.1`. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckHttpVersion pulumi.StringOutput `pulumi:"healthCheckHttpVersion"`
	// The time interval between two consecutive health checks.  Valid values: `1` to `50`. Unit: seconds.  Default value: `2`.
	HealthCheckInterval pulumi.IntOutput `pulumi:"healthCheckInterval"`
	// The health check method.  Valid values: GET and HEAD.  Default value: HEAD. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckMethod pulumi.StringOutput `pulumi:"healthCheckMethod"`
	// The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/). **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckPath pulumi.StringOutput `pulumi:"healthCheckPath"`
	// The protocol that is used for health checks.  Valid values: `HTTP` and `TCP`.  Default value: `HTTP`.
	HealthCheckProtocol pulumi.StringOutput `pulumi:"healthCheckProtocol"`
	// The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	HealthCheckTemplateName pulumi.StringOutput `pulumi:"healthCheckTemplateName"`
	// The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: `1` to `300`. Unit: seconds.  Default value: `5`.
	HealthCheckTimeout pulumi.IntOutput `pulumi:"healthCheckTimeout"`
	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).  Valid values: `2` to `10`.  Default value: `3`. Unit: seconds.
	HealthyThreshold pulumi.IntOutput `pulumi:"healthyThreshold"`
	// The number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail). Valid values: `2` to `10`.  Default value: `3`. Unit: seconds.
	UnhealthyThreshold pulumi.IntOutput `pulumi:"unhealthyThreshold"`
}

// NewHealthCheckTemplate registers a new resource with the given unique name, arguments, and options.
func NewHealthCheckTemplate(ctx *pulumi.Context,
	name string, args *HealthCheckTemplateArgs, opts ...pulumi.ResourceOption) (*HealthCheckTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HealthCheckTemplateName == nil {
		return nil, errors.New("invalid value for required argument 'HealthCheckTemplateName'")
	}
	var resource HealthCheckTemplate
	err := ctx.RegisterResource("alicloud:alb/healthCheckTemplate:HealthCheckTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthCheckTemplate gets an existing HealthCheckTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthCheckTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthCheckTemplateState, opts ...pulumi.ResourceOption) (*HealthCheckTemplate, error) {
	var resource HealthCheckTemplate
	err := ctx.ReadResource("alicloud:alb/healthCheckTemplate:HealthCheckTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthCheckTemplate resources.
type healthCheckTemplateState struct {
	// Whether to precheck the API request.
	DryRun *bool `pulumi:"dryRun"`
	// The HTTP status code that indicates a successful health check. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckCodes []string `pulumi:"healthCheckCodes"`
	// The number of the port that is used for health checks.  Valid values: `0` to `65535`.  Default value: `0`. This default value indicates that the backend server is used for health checks.
	HealthCheckConnectPort *int `pulumi:"healthCheckConnectPort"`
	// The domain name that is used for health checks. Default value:  `$SERVER_IP`. The domain name must be 1 to 80 characters in length.  **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckHost *string `pulumi:"healthCheckHost"`
	// The version of the HTTP protocol.  Valid values: `HTTP1.0` and `HTTP1.1`.  Default value: `HTTP1.1`. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckHttpVersion *string `pulumi:"healthCheckHttpVersion"`
	// The time interval between two consecutive health checks.  Valid values: `1` to `50`. Unit: seconds.  Default value: `2`.
	HealthCheckInterval *int `pulumi:"healthCheckInterval"`
	// The health check method.  Valid values: GET and HEAD.  Default value: HEAD. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckMethod *string `pulumi:"healthCheckMethod"`
	// The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/). **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// The protocol that is used for health checks.  Valid values: `HTTP` and `TCP`.  Default value: `HTTP`.
	HealthCheckProtocol *string `pulumi:"healthCheckProtocol"`
	// The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	HealthCheckTemplateName *string `pulumi:"healthCheckTemplateName"`
	// The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: `1` to `300`. Unit: seconds.  Default value: `5`.
	HealthCheckTimeout *int `pulumi:"healthCheckTimeout"`
	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).  Valid values: `2` to `10`.  Default value: `3`. Unit: seconds.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail). Valid values: `2` to `10`.  Default value: `3`. Unit: seconds.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

type HealthCheckTemplateState struct {
	// Whether to precheck the API request.
	DryRun pulumi.BoolPtrInput
	// The HTTP status code that indicates a successful health check. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckCodes pulumi.StringArrayInput
	// The number of the port that is used for health checks.  Valid values: `0` to `65535`.  Default value: `0`. This default value indicates that the backend server is used for health checks.
	HealthCheckConnectPort pulumi.IntPtrInput
	// The domain name that is used for health checks. Default value:  `$SERVER_IP`. The domain name must be 1 to 80 characters in length.  **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckHost pulumi.StringPtrInput
	// The version of the HTTP protocol.  Valid values: `HTTP1.0` and `HTTP1.1`.  Default value: `HTTP1.1`. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckHttpVersion pulumi.StringPtrInput
	// The time interval between two consecutive health checks.  Valid values: `1` to `50`. Unit: seconds.  Default value: `2`.
	HealthCheckInterval pulumi.IntPtrInput
	// The health check method.  Valid values: GET and HEAD.  Default value: HEAD. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckMethod pulumi.StringPtrInput
	// The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/). **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckPath pulumi.StringPtrInput
	// The protocol that is used for health checks.  Valid values: `HTTP` and `TCP`.  Default value: `HTTP`.
	HealthCheckProtocol pulumi.StringPtrInput
	// The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	HealthCheckTemplateName pulumi.StringPtrInput
	// The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: `1` to `300`. Unit: seconds.  Default value: `5`.
	HealthCheckTimeout pulumi.IntPtrInput
	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).  Valid values: `2` to `10`.  Default value: `3`. Unit: seconds.
	HealthyThreshold pulumi.IntPtrInput
	// The number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail). Valid values: `2` to `10`.  Default value: `3`. Unit: seconds.
	UnhealthyThreshold pulumi.IntPtrInput
}

func (HealthCheckTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthCheckTemplateState)(nil)).Elem()
}

type healthCheckTemplateArgs struct {
	// Whether to precheck the API request.
	DryRun *bool `pulumi:"dryRun"`
	// The HTTP status code that indicates a successful health check. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckCodes []string `pulumi:"healthCheckCodes"`
	// The number of the port that is used for health checks.  Valid values: `0` to `65535`.  Default value: `0`. This default value indicates that the backend server is used for health checks.
	HealthCheckConnectPort *int `pulumi:"healthCheckConnectPort"`
	// The domain name that is used for health checks. Default value:  `$SERVER_IP`. The domain name must be 1 to 80 characters in length.  **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckHost *string `pulumi:"healthCheckHost"`
	// The version of the HTTP protocol.  Valid values: `HTTP1.0` and `HTTP1.1`.  Default value: `HTTP1.1`. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckHttpVersion *string `pulumi:"healthCheckHttpVersion"`
	// The time interval between two consecutive health checks.  Valid values: `1` to `50`. Unit: seconds.  Default value: `2`.
	HealthCheckInterval *int `pulumi:"healthCheckInterval"`
	// The health check method.  Valid values: GET and HEAD.  Default value: HEAD. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckMethod *string `pulumi:"healthCheckMethod"`
	// The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/). **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// The protocol that is used for health checks.  Valid values: `HTTP` and `TCP`.  Default value: `HTTP`.
	HealthCheckProtocol *string `pulumi:"healthCheckProtocol"`
	// The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	HealthCheckTemplateName string `pulumi:"healthCheckTemplateName"`
	// The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: `1` to `300`. Unit: seconds.  Default value: `5`.
	HealthCheckTimeout *int `pulumi:"healthCheckTimeout"`
	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).  Valid values: `2` to `10`.  Default value: `3`. Unit: seconds.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail). Valid values: `2` to `10`.  Default value: `3`. Unit: seconds.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

// The set of arguments for constructing a HealthCheckTemplate resource.
type HealthCheckTemplateArgs struct {
	// Whether to precheck the API request.
	DryRun pulumi.BoolPtrInput
	// The HTTP status code that indicates a successful health check. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckCodes pulumi.StringArrayInput
	// The number of the port that is used for health checks.  Valid values: `0` to `65535`.  Default value: `0`. This default value indicates that the backend server is used for health checks.
	HealthCheckConnectPort pulumi.IntPtrInput
	// The domain name that is used for health checks. Default value:  `$SERVER_IP`. The domain name must be 1 to 80 characters in length.  **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckHost pulumi.StringPtrInput
	// The version of the HTTP protocol.  Valid values: `HTTP1.0` and `HTTP1.1`.  Default value: `HTTP1.1`. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckHttpVersion pulumi.StringPtrInput
	// The time interval between two consecutive health checks.  Valid values: `1` to `50`. Unit: seconds.  Default value: `2`.
	HealthCheckInterval pulumi.IntPtrInput
	// The health check method.  Valid values: GET and HEAD.  Default value: HEAD. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckMethod pulumi.StringPtrInput
	// The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/). **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
	HealthCheckPath pulumi.StringPtrInput
	// The protocol that is used for health checks.  Valid values: `HTTP` and `TCP`.  Default value: `HTTP`.
	HealthCheckProtocol pulumi.StringPtrInput
	// The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	HealthCheckTemplateName pulumi.StringInput
	// The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: `1` to `300`. Unit: seconds.  Default value: `5`.
	HealthCheckTimeout pulumi.IntPtrInput
	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).  Valid values: `2` to `10`.  Default value: `3`. Unit: seconds.
	HealthyThreshold pulumi.IntPtrInput
	// The number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail). Valid values: `2` to `10`.  Default value: `3`. Unit: seconds.
	UnhealthyThreshold pulumi.IntPtrInput
}

func (HealthCheckTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthCheckTemplateArgs)(nil)).Elem()
}

type HealthCheckTemplateInput interface {
	pulumi.Input

	ToHealthCheckTemplateOutput() HealthCheckTemplateOutput
	ToHealthCheckTemplateOutputWithContext(ctx context.Context) HealthCheckTemplateOutput
}

func (*HealthCheckTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckTemplate)(nil)).Elem()
}

func (i *HealthCheckTemplate) ToHealthCheckTemplateOutput() HealthCheckTemplateOutput {
	return i.ToHealthCheckTemplateOutputWithContext(context.Background())
}

func (i *HealthCheckTemplate) ToHealthCheckTemplateOutputWithContext(ctx context.Context) HealthCheckTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckTemplateOutput)
}

// HealthCheckTemplateArrayInput is an input type that accepts HealthCheckTemplateArray and HealthCheckTemplateArrayOutput values.
// You can construct a concrete instance of `HealthCheckTemplateArrayInput` via:
//
//	HealthCheckTemplateArray{ HealthCheckTemplateArgs{...} }
type HealthCheckTemplateArrayInput interface {
	pulumi.Input

	ToHealthCheckTemplateArrayOutput() HealthCheckTemplateArrayOutput
	ToHealthCheckTemplateArrayOutputWithContext(context.Context) HealthCheckTemplateArrayOutput
}

type HealthCheckTemplateArray []HealthCheckTemplateInput

func (HealthCheckTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HealthCheckTemplate)(nil)).Elem()
}

func (i HealthCheckTemplateArray) ToHealthCheckTemplateArrayOutput() HealthCheckTemplateArrayOutput {
	return i.ToHealthCheckTemplateArrayOutputWithContext(context.Background())
}

func (i HealthCheckTemplateArray) ToHealthCheckTemplateArrayOutputWithContext(ctx context.Context) HealthCheckTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckTemplateArrayOutput)
}

// HealthCheckTemplateMapInput is an input type that accepts HealthCheckTemplateMap and HealthCheckTemplateMapOutput values.
// You can construct a concrete instance of `HealthCheckTemplateMapInput` via:
//
//	HealthCheckTemplateMap{ "key": HealthCheckTemplateArgs{...} }
type HealthCheckTemplateMapInput interface {
	pulumi.Input

	ToHealthCheckTemplateMapOutput() HealthCheckTemplateMapOutput
	ToHealthCheckTemplateMapOutputWithContext(context.Context) HealthCheckTemplateMapOutput
}

type HealthCheckTemplateMap map[string]HealthCheckTemplateInput

func (HealthCheckTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HealthCheckTemplate)(nil)).Elem()
}

func (i HealthCheckTemplateMap) ToHealthCheckTemplateMapOutput() HealthCheckTemplateMapOutput {
	return i.ToHealthCheckTemplateMapOutputWithContext(context.Background())
}

func (i HealthCheckTemplateMap) ToHealthCheckTemplateMapOutputWithContext(ctx context.Context) HealthCheckTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckTemplateMapOutput)
}

type HealthCheckTemplateOutput struct{ *pulumi.OutputState }

func (HealthCheckTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckTemplate)(nil)).Elem()
}

func (o HealthCheckTemplateOutput) ToHealthCheckTemplateOutput() HealthCheckTemplateOutput {
	return o
}

func (o HealthCheckTemplateOutput) ToHealthCheckTemplateOutputWithContext(ctx context.Context) HealthCheckTemplateOutput {
	return o
}

// Whether to precheck the API request.
func (o HealthCheckTemplateOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// The HTTP status code that indicates a successful health check. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
func (o HealthCheckTemplateOutput) HealthCheckCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringArrayOutput { return v.HealthCheckCodes }).(pulumi.StringArrayOutput)
}

// The number of the port that is used for health checks.  Valid values: `0` to `65535`.  Default value: `0`. This default value indicates that the backend server is used for health checks.
func (o HealthCheckTemplateOutput) HealthCheckConnectPort() pulumi.IntOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.IntOutput { return v.HealthCheckConnectPort }).(pulumi.IntOutput)
}

// The domain name that is used for health checks. Default value:  `$SERVER_IP`. The domain name must be 1 to 80 characters in length.  **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
func (o HealthCheckTemplateOutput) HealthCheckHost() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.HealthCheckHost }).(pulumi.StringOutput)
}

// The version of the HTTP protocol.  Valid values: `HTTP1.0` and `HTTP1.1`.  Default value: `HTTP1.1`. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
func (o HealthCheckTemplateOutput) HealthCheckHttpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.HealthCheckHttpVersion }).(pulumi.StringOutput)
}

// The time interval between two consecutive health checks.  Valid values: `1` to `50`. Unit: seconds.  Default value: `2`.
func (o HealthCheckTemplateOutput) HealthCheckInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.IntOutput { return v.HealthCheckInterval }).(pulumi.IntOutput)
}

// The health check method.  Valid values: GET and HEAD.  Default value: HEAD. **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
func (o HealthCheckTemplateOutput) HealthCheckMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.HealthCheckMethod }).(pulumi.StringOutput)
}

// The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/). **NOTE:** The attribute `HealthCheckProtocol` is valid when the attribute is  `HTTP` .
func (o HealthCheckTemplateOutput) HealthCheckPath() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.HealthCheckPath }).(pulumi.StringOutput)
}

// The protocol that is used for health checks.  Valid values: `HTTP` and `TCP`.  Default value: `HTTP`.
func (o HealthCheckTemplateOutput) HealthCheckProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.HealthCheckProtocol }).(pulumi.StringOutput)
}

// The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
func (o HealthCheckTemplateOutput) HealthCheckTemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.HealthCheckTemplateName }).(pulumi.StringOutput)
}

// The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: `1` to `300`. Unit: seconds.  Default value: `5`.
func (o HealthCheckTemplateOutput) HealthCheckTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.IntOutput { return v.HealthCheckTimeout }).(pulumi.IntOutput)
}

// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).  Valid values: `2` to `10`.  Default value: `3`. Unit: seconds.
func (o HealthCheckTemplateOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.IntOutput { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail). Valid values: `2` to `10`.  Default value: `3`. Unit: seconds.
func (o HealthCheckTemplateOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.IntOutput { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type HealthCheckTemplateArrayOutput struct{ *pulumi.OutputState }

func (HealthCheckTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HealthCheckTemplate)(nil)).Elem()
}

func (o HealthCheckTemplateArrayOutput) ToHealthCheckTemplateArrayOutput() HealthCheckTemplateArrayOutput {
	return o
}

func (o HealthCheckTemplateArrayOutput) ToHealthCheckTemplateArrayOutputWithContext(ctx context.Context) HealthCheckTemplateArrayOutput {
	return o
}

func (o HealthCheckTemplateArrayOutput) Index(i pulumi.IntInput) HealthCheckTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HealthCheckTemplate {
		return vs[0].([]*HealthCheckTemplate)[vs[1].(int)]
	}).(HealthCheckTemplateOutput)
}

type HealthCheckTemplateMapOutput struct{ *pulumi.OutputState }

func (HealthCheckTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HealthCheckTemplate)(nil)).Elem()
}

func (o HealthCheckTemplateMapOutput) ToHealthCheckTemplateMapOutput() HealthCheckTemplateMapOutput {
	return o
}

func (o HealthCheckTemplateMapOutput) ToHealthCheckTemplateMapOutputWithContext(ctx context.Context) HealthCheckTemplateMapOutput {
	return o
}

func (o HealthCheckTemplateMapOutput) MapIndex(k pulumi.StringInput) HealthCheckTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HealthCheckTemplate {
		return vs[0].(map[string]*HealthCheckTemplate)[vs[1].(string)]
	}).(HealthCheckTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HealthCheckTemplateInput)(nil)).Elem(), &HealthCheckTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthCheckTemplateArrayInput)(nil)).Elem(), HealthCheckTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthCheckTemplateMapInput)(nil)).Elem(), HealthCheckTemplateMap{})
	pulumi.RegisterOutputType(HealthCheckTemplateOutput{})
	pulumi.RegisterOutputType(HealthCheckTemplateArrayOutput{})
	pulumi.RegisterOutputType(HealthCheckTemplateMapOutput{})
}
