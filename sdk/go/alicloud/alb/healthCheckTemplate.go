// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Application Load Balancer (ALB) Health Check Template resource.
//
// Health check template.
//
// For information about Application Load Balancer (ALB) Health Check Template and how to use it, see [What is Health Check Template](https://www.alibabacloud.com/help/en/slb/application-load-balancer/developer-reference/api-alb-2020-06-16-createhealthchecktemplate).
//
// > **NOTE:** Available since v1.134.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/alb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := alb.NewHealthCheckTemplate(ctx, "example", &alb.HealthCheckTemplateArgs{
//				HealthCheckTemplateName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Application Load Balancer (ALB) Health Check Template can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:alb/healthCheckTemplate:HealthCheckTemplate example <id>
// ```
type HealthCheckTemplate struct {
	pulumi.CustomResourceState

	// Whether to PreCheck only this request, value:
	// true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
	// false (default): Sends a normal request, returns the http2xx status code after the check, and directly performs the operation.
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
	HealthCheckCodes pulumi.StringArrayOutput `pulumi:"healthCheckCodes"`
	// The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
	HealthCheckConnectPort pulumi.IntOutput `pulumi:"healthCheckConnectPort"`
	// The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
	HealthCheckHost pulumi.StringOutput `pulumi:"healthCheckHost"`
	// The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
	HealthCheckHttpVersion pulumi.StringOutput `pulumi:"healthCheckHttpVersion"`
	// The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
	HealthCheckInterval pulumi.IntOutput `pulumi:"healthCheckInterval"`
	// The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
	HealthCheckMethod pulumi.StringOutput `pulumi:"healthCheckMethod"`
	// The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/).
	HealthCheckPath pulumi.StringOutput `pulumi:"healthCheckPath"`
	// The protocol used for the health check. Value:
	// HTTP (default): Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy.
	// HTTPS: Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
	// TCP: Sends a SYN handshake packet to check whether the server port is alive.
	// gRPC: Check whether the server application is healthy by sending a POST or GET request.
	HealthCheckProtocol pulumi.StringOutput `pulumi:"healthCheckProtocol"`
	// The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	HealthCheckTemplateName pulumi.StringOutput `pulumi:"healthCheckTemplateName"`
	// The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
	HealthCheckTimeout pulumi.IntOutput `pulumi:"healthCheckTimeout"`
	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
	HealthyThreshold pulumi.IntOutput `pulumi:"healthyThreshold"`
	// The ID of the resource group
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The tag of the resource
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
	UnhealthyThreshold pulumi.IntOutput `pulumi:"unhealthyThreshold"`
}

// NewHealthCheckTemplate registers a new resource with the given unique name, arguments, and options.
func NewHealthCheckTemplate(ctx *pulumi.Context,
	name string, args *HealthCheckTemplateArgs, opts ...pulumi.ResourceOption) (*HealthCheckTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HealthCheckTemplateName == nil {
		return nil, errors.New("invalid value for required argument 'HealthCheckTemplateName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HealthCheckTemplate
	err := ctx.RegisterResource("alicloud:alb/healthCheckTemplate:HealthCheckTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthCheckTemplate gets an existing HealthCheckTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthCheckTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthCheckTemplateState, opts ...pulumi.ResourceOption) (*HealthCheckTemplate, error) {
	var resource HealthCheckTemplate
	err := ctx.ReadResource("alicloud:alb/healthCheckTemplate:HealthCheckTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthCheckTemplate resources.
type healthCheckTemplateState struct {
	// Whether to PreCheck only this request, value:
	// true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
	// false (default): Sends a normal request, returns the http2xx status code after the check, and directly performs the operation.
	DryRun *bool `pulumi:"dryRun"`
	// The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
	HealthCheckCodes []string `pulumi:"healthCheckCodes"`
	// The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
	HealthCheckConnectPort *int `pulumi:"healthCheckConnectPort"`
	// The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
	HealthCheckHost *string `pulumi:"healthCheckHost"`
	// The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
	HealthCheckHttpVersion *string `pulumi:"healthCheckHttpVersion"`
	// The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
	HealthCheckInterval *int `pulumi:"healthCheckInterval"`
	// The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
	HealthCheckMethod *string `pulumi:"healthCheckMethod"`
	// The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/).
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// The protocol used for the health check. Value:
	// HTTP (default): Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy.
	// HTTPS: Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
	// TCP: Sends a SYN handshake packet to check whether the server port is alive.
	// gRPC: Check whether the server application is healthy by sending a POST or GET request.
	HealthCheckProtocol *string `pulumi:"healthCheckProtocol"`
	// The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	HealthCheckTemplateName *string `pulumi:"healthCheckTemplateName"`
	// The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
	HealthCheckTimeout *int `pulumi:"healthCheckTimeout"`
	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The ID of the resource group
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The tag of the resource
	Tags map[string]string `pulumi:"tags"`
	// Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

type HealthCheckTemplateState struct {
	// Whether to PreCheck only this request, value:
	// true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
	// false (default): Sends a normal request, returns the http2xx status code after the check, and directly performs the operation.
	DryRun pulumi.BoolPtrInput
	// The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
	HealthCheckCodes pulumi.StringArrayInput
	// The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
	HealthCheckConnectPort pulumi.IntPtrInput
	// The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
	HealthCheckHost pulumi.StringPtrInput
	// The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
	HealthCheckHttpVersion pulumi.StringPtrInput
	// The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
	HealthCheckInterval pulumi.IntPtrInput
	// The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
	HealthCheckMethod pulumi.StringPtrInput
	// The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/).
	HealthCheckPath pulumi.StringPtrInput
	// The protocol used for the health check. Value:
	// HTTP (default): Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy.
	// HTTPS: Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
	// TCP: Sends a SYN handshake packet to check whether the server port is alive.
	// gRPC: Check whether the server application is healthy by sending a POST or GET request.
	HealthCheckProtocol pulumi.StringPtrInput
	// The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	HealthCheckTemplateName pulumi.StringPtrInput
	// The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
	HealthCheckTimeout pulumi.IntPtrInput
	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
	HealthyThreshold pulumi.IntPtrInput
	// The ID of the resource group
	ResourceGroupId pulumi.StringPtrInput
	// The tag of the resource
	Tags pulumi.StringMapInput
	// Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
	UnhealthyThreshold pulumi.IntPtrInput
}

func (HealthCheckTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthCheckTemplateState)(nil)).Elem()
}

type healthCheckTemplateArgs struct {
	// Whether to PreCheck only this request, value:
	// true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
	// false (default): Sends a normal request, returns the http2xx status code after the check, and directly performs the operation.
	DryRun *bool `pulumi:"dryRun"`
	// The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
	HealthCheckCodes []string `pulumi:"healthCheckCodes"`
	// The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
	HealthCheckConnectPort *int `pulumi:"healthCheckConnectPort"`
	// The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
	HealthCheckHost *string `pulumi:"healthCheckHost"`
	// The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
	HealthCheckHttpVersion *string `pulumi:"healthCheckHttpVersion"`
	// The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
	HealthCheckInterval *int `pulumi:"healthCheckInterval"`
	// The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
	HealthCheckMethod *string `pulumi:"healthCheckMethod"`
	// The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/).
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// The protocol used for the health check. Value:
	// HTTP (default): Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy.
	// HTTPS: Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
	// TCP: Sends a SYN handshake packet to check whether the server port is alive.
	// gRPC: Check whether the server application is healthy by sending a POST or GET request.
	HealthCheckProtocol *string `pulumi:"healthCheckProtocol"`
	// The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	HealthCheckTemplateName string `pulumi:"healthCheckTemplateName"`
	// The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
	HealthCheckTimeout *int `pulumi:"healthCheckTimeout"`
	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The ID of the resource group
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The tag of the resource
	Tags map[string]string `pulumi:"tags"`
	// Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

// The set of arguments for constructing a HealthCheckTemplate resource.
type HealthCheckTemplateArgs struct {
	// Whether to PreCheck only this request, value:
	// true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
	// false (default): Sends a normal request, returns the http2xx status code after the check, and directly performs the operation.
	DryRun pulumi.BoolPtrInput
	// The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
	HealthCheckCodes pulumi.StringArrayInput
	// The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
	HealthCheckConnectPort pulumi.IntPtrInput
	// The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
	HealthCheckHost pulumi.StringPtrInput
	// The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
	HealthCheckHttpVersion pulumi.StringPtrInput
	// The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
	HealthCheckInterval pulumi.IntPtrInput
	// The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
	HealthCheckMethod pulumi.StringPtrInput
	// The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/).
	HealthCheckPath pulumi.StringPtrInput
	// The protocol used for the health check. Value:
	// HTTP (default): Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy.
	// HTTPS: Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
	// TCP: Sends a SYN handshake packet to check whether the server port is alive.
	// gRPC: Check whether the server application is healthy by sending a POST or GET request.
	HealthCheckProtocol pulumi.StringPtrInput
	// The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	HealthCheckTemplateName pulumi.StringInput
	// The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
	HealthCheckTimeout pulumi.IntPtrInput
	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
	HealthyThreshold pulumi.IntPtrInput
	// The ID of the resource group
	ResourceGroupId pulumi.StringPtrInput
	// The tag of the resource
	Tags pulumi.StringMapInput
	// Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
	UnhealthyThreshold pulumi.IntPtrInput
}

func (HealthCheckTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthCheckTemplateArgs)(nil)).Elem()
}

type HealthCheckTemplateInput interface {
	pulumi.Input

	ToHealthCheckTemplateOutput() HealthCheckTemplateOutput
	ToHealthCheckTemplateOutputWithContext(ctx context.Context) HealthCheckTemplateOutput
}

func (*HealthCheckTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckTemplate)(nil)).Elem()
}

func (i *HealthCheckTemplate) ToHealthCheckTemplateOutput() HealthCheckTemplateOutput {
	return i.ToHealthCheckTemplateOutputWithContext(context.Background())
}

func (i *HealthCheckTemplate) ToHealthCheckTemplateOutputWithContext(ctx context.Context) HealthCheckTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckTemplateOutput)
}

// HealthCheckTemplateArrayInput is an input type that accepts HealthCheckTemplateArray and HealthCheckTemplateArrayOutput values.
// You can construct a concrete instance of `HealthCheckTemplateArrayInput` via:
//
//	HealthCheckTemplateArray{ HealthCheckTemplateArgs{...} }
type HealthCheckTemplateArrayInput interface {
	pulumi.Input

	ToHealthCheckTemplateArrayOutput() HealthCheckTemplateArrayOutput
	ToHealthCheckTemplateArrayOutputWithContext(context.Context) HealthCheckTemplateArrayOutput
}

type HealthCheckTemplateArray []HealthCheckTemplateInput

func (HealthCheckTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HealthCheckTemplate)(nil)).Elem()
}

func (i HealthCheckTemplateArray) ToHealthCheckTemplateArrayOutput() HealthCheckTemplateArrayOutput {
	return i.ToHealthCheckTemplateArrayOutputWithContext(context.Background())
}

func (i HealthCheckTemplateArray) ToHealthCheckTemplateArrayOutputWithContext(ctx context.Context) HealthCheckTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckTemplateArrayOutput)
}

// HealthCheckTemplateMapInput is an input type that accepts HealthCheckTemplateMap and HealthCheckTemplateMapOutput values.
// You can construct a concrete instance of `HealthCheckTemplateMapInput` via:
//
//	HealthCheckTemplateMap{ "key": HealthCheckTemplateArgs{...} }
type HealthCheckTemplateMapInput interface {
	pulumi.Input

	ToHealthCheckTemplateMapOutput() HealthCheckTemplateMapOutput
	ToHealthCheckTemplateMapOutputWithContext(context.Context) HealthCheckTemplateMapOutput
}

type HealthCheckTemplateMap map[string]HealthCheckTemplateInput

func (HealthCheckTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HealthCheckTemplate)(nil)).Elem()
}

func (i HealthCheckTemplateMap) ToHealthCheckTemplateMapOutput() HealthCheckTemplateMapOutput {
	return i.ToHealthCheckTemplateMapOutputWithContext(context.Background())
}

func (i HealthCheckTemplateMap) ToHealthCheckTemplateMapOutputWithContext(ctx context.Context) HealthCheckTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckTemplateMapOutput)
}

type HealthCheckTemplateOutput struct{ *pulumi.OutputState }

func (HealthCheckTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckTemplate)(nil)).Elem()
}

func (o HealthCheckTemplateOutput) ToHealthCheckTemplateOutput() HealthCheckTemplateOutput {
	return o
}

func (o HealthCheckTemplateOutput) ToHealthCheckTemplateOutputWithContext(ctx context.Context) HealthCheckTemplateOutput {
	return o
}

// Whether to PreCheck only this request, value:
// true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
// false (default): Sends a normal request, returns the http2xx status code after the check, and directly performs the operation.
func (o HealthCheckTemplateOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
func (o HealthCheckTemplateOutput) HealthCheckCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringArrayOutput { return v.HealthCheckCodes }).(pulumi.StringArrayOutput)
}

// The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
func (o HealthCheckTemplateOutput) HealthCheckConnectPort() pulumi.IntOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.IntOutput { return v.HealthCheckConnectPort }).(pulumi.IntOutput)
}

// The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
func (o HealthCheckTemplateOutput) HealthCheckHost() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.HealthCheckHost }).(pulumi.StringOutput)
}

// The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
func (o HealthCheckTemplateOutput) HealthCheckHttpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.HealthCheckHttpVersion }).(pulumi.StringOutput)
}

// The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
func (o HealthCheckTemplateOutput) HealthCheckInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.IntOutput { return v.HealthCheckInterval }).(pulumi.IntOutput)
}

// The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
func (o HealthCheckTemplateOutput) HealthCheckMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.HealthCheckMethod }).(pulumi.StringOutput)
}

// The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/).
func (o HealthCheckTemplateOutput) HealthCheckPath() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.HealthCheckPath }).(pulumi.StringOutput)
}

// The protocol used for the health check. Value:
// HTTP (default): Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy.
// HTTPS: Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
// TCP: Sends a SYN handshake packet to check whether the server port is alive.
// gRPC: Check whether the server application is healthy by sending a POST or GET request.
func (o HealthCheckTemplateOutput) HealthCheckProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.HealthCheckProtocol }).(pulumi.StringOutput)
}

// The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
func (o HealthCheckTemplateOutput) HealthCheckTemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.HealthCheckTemplateName }).(pulumi.StringOutput)
}

// The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
func (o HealthCheckTemplateOutput) HealthCheckTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.IntOutput { return v.HealthCheckTimeout }).(pulumi.IntOutput)
}

// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
func (o HealthCheckTemplateOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.IntOutput { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The ID of the resource group
func (o HealthCheckTemplateOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The tag of the resource
func (o HealthCheckTemplateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
func (o HealthCheckTemplateOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *HealthCheckTemplate) pulumi.IntOutput { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type HealthCheckTemplateArrayOutput struct{ *pulumi.OutputState }

func (HealthCheckTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HealthCheckTemplate)(nil)).Elem()
}

func (o HealthCheckTemplateArrayOutput) ToHealthCheckTemplateArrayOutput() HealthCheckTemplateArrayOutput {
	return o
}

func (o HealthCheckTemplateArrayOutput) ToHealthCheckTemplateArrayOutputWithContext(ctx context.Context) HealthCheckTemplateArrayOutput {
	return o
}

func (o HealthCheckTemplateArrayOutput) Index(i pulumi.IntInput) HealthCheckTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HealthCheckTemplate {
		return vs[0].([]*HealthCheckTemplate)[vs[1].(int)]
	}).(HealthCheckTemplateOutput)
}

type HealthCheckTemplateMapOutput struct{ *pulumi.OutputState }

func (HealthCheckTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HealthCheckTemplate)(nil)).Elem()
}

func (o HealthCheckTemplateMapOutput) ToHealthCheckTemplateMapOutput() HealthCheckTemplateMapOutput {
	return o
}

func (o HealthCheckTemplateMapOutput) ToHealthCheckTemplateMapOutputWithContext(ctx context.Context) HealthCheckTemplateMapOutput {
	return o
}

func (o HealthCheckTemplateMapOutput) MapIndex(k pulumi.StringInput) HealthCheckTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HealthCheckTemplate {
		return vs[0].(map[string]*HealthCheckTemplate)[vs[1].(string)]
	}).(HealthCheckTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HealthCheckTemplateInput)(nil)).Elem(), &HealthCheckTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthCheckTemplateArrayInput)(nil)).Elem(), HealthCheckTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthCheckTemplateMapInput)(nil)).Elem(), HealthCheckTemplateMap{})
	pulumi.RegisterOutputType(HealthCheckTemplateOutput{})
	pulumi.RegisterOutputType(HealthCheckTemplateArrayOutput{})
	pulumi.RegisterOutputType(HealthCheckTemplateMapOutput{})
}
