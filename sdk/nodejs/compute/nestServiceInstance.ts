// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Compute Nest Service Instance resource.
 *
 * For information about Compute Nest Service Instance and how to use it, see [What is Service Instance](https://www.alibabacloud.com/help/zh/compute-nest/developer-reference/api-computenest-2021-06-01-createserviceinstance).
 *
 * > **NOTE:** Available since v1.205.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tfexample";
 * const _default = alicloud.resourcemanager.getResourceGroups({});
 * const defaultGetZones = alicloud.getZones({
 *     availableDiskCategory: "cloud_efficiency",
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultGetInstanceTypes = defaultGetZones.then(defaultGetZones => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: defaultGetZones.zones?.[0]?.id,
 *     instanceTypeFamily: "ecs.sn1ne",
 * }));
 * const defaultGetImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_[0-9]+_[0-9]+_x64*",
 *     owners: "system",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.0.0.0/8",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     cidrBlock: "10.1.0.0/16",
 *     vpcId: defaultNetwork.id,
 *     zoneId: defaultGetZones.then(defaultGetZones => defaultGetZones.zones?.[0]?.id),
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {vpcId: defaultNetwork.id});
 * const defaultInstance = new alicloud.ecs.Instance("default", {
 *     imageId: defaultGetImages.then(defaultGetImages => defaultGetImages.images?.[0]?.id),
 *     instanceType: defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.id),
 *     securityGroups: [defaultSecurityGroup].map(__item => __item.id),
 *     internetChargeType: "PayByTraffic",
 *     internetMaxBandwidthOut: 10,
 *     availabilityZone: defaultGetZones.then(defaultGetZones => defaultGetZones.zones?.[0]?.id),
 *     instanceChargeType: "PostPaid",
 *     systemDiskCategory: "cloud_efficiency",
 *     vswitchId: defaultSwitch.id,
 * });
 * const defaultNestServiceInstance = new alicloud.compute.NestServiceInstance("default", {
 *     serviceId: "service-dd475e6e468348799f0f",
 *     serviceVersion: "1",
 *     serviceInstanceName: name,
 *     resourceGroupId: _default.then(_default => _default.groups?.[0]?.id),
 *     paymentType: "Permanent",
 *     operationMetadata: {
 *         operationStartTime: "1681281179000",
 *         operationEndTime: "1681367579000",
 *         resources: pulumi.interpolate`    {
 *       "Type": "ResourceIds",
 *       "RegionId": "cn-hangzhou",
 *       "ResourceIds": {
 *       "ALIYUN::ECS::INSTANCE": [
 *         "${defaultInstance.id}"
 *         ]
 *       } 
 *     }
 * `,
 *     },
 *     tags: {
 *         Created: "TF",
 *         For: "ServiceInstance",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Compute Nest Service Instance can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:compute/nestServiceInstance:NestServiceInstance example <id>
 * ```
 */
export class NestServiceInstance extends pulumi.CustomResource {
    /**
     * Get an existing NestServiceInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NestServiceInstanceState, opts?: pulumi.CustomResourceOptions): NestServiceInstance {
        return new NestServiceInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:compute/nestServiceInstance:NestServiceInstance';

    /**
     * Returns true if the given object is an instance of NestServiceInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NestServiceInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NestServiceInstance.__pulumiType;
    }

    /**
     * The order information of cloud market. See `commodity` below.
     */
    declare public readonly commodity: pulumi.Output<outputs.compute.NestServiceInstanceCommodity | undefined>;
    /**
     * Whether the service instance has the O&M function. Default value: `false`. Valid values:
     */
    declare public readonly enableInstanceOps: pulumi.Output<boolean>;
    /**
     * Whether Prometheus monitoring is enabled. Default value: `false`. Valid values:
     */
    declare public readonly enableUserPrometheus: pulumi.Output<boolean>;
    /**
     * The configuration of O&M. See `operationMetadata` below.
     */
    declare public readonly operationMetadata: pulumi.Output<outputs.compute.NestServiceInstanceOperationMetadata>;
    /**
     * The parameters entered by the deployment service instance.
     */
    declare public readonly parameters: pulumi.Output<string | undefined>;
    /**
     * The type of payment. Valid values: `Permanent`, `Subscription`, `PayAsYouGo`, `CustomFixTime`.
     */
    declare public readonly paymentType: pulumi.Output<string>;
    /**
     * The ID of the resource group.
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * The ID of the service.
     */
    declare public readonly serviceId: pulumi.Output<string>;
    /**
     * The name of the Service Instance.
     */
    declare public readonly serviceInstanceName: pulumi.Output<string>;
    /**
     * The version of the service.
     */
    declare public readonly serviceVersion: pulumi.Output<string>;
    /**
     * The name of the specification.
     */
    declare public readonly specificationName: pulumi.Output<string | undefined>;
    /**
     * The status of the Service Instance.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the template.
     */
    declare public readonly templateName: pulumi.Output<string>;

    /**
     * Create a NestServiceInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NestServiceInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NestServiceInstanceArgs | NestServiceInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NestServiceInstanceState | undefined;
            resourceInputs["commodity"] = state?.commodity;
            resourceInputs["enableInstanceOps"] = state?.enableInstanceOps;
            resourceInputs["enableUserPrometheus"] = state?.enableUserPrometheus;
            resourceInputs["operationMetadata"] = state?.operationMetadata;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["paymentType"] = state?.paymentType;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["serviceId"] = state?.serviceId;
            resourceInputs["serviceInstanceName"] = state?.serviceInstanceName;
            resourceInputs["serviceVersion"] = state?.serviceVersion;
            resourceInputs["specificationName"] = state?.specificationName;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["templateName"] = state?.templateName;
        } else {
            const args = argsOrState as NestServiceInstanceArgs | undefined;
            if (args?.serviceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            if (args?.serviceVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceVersion'");
            }
            resourceInputs["commodity"] = args?.commodity;
            resourceInputs["enableInstanceOps"] = args?.enableInstanceOps;
            resourceInputs["enableUserPrometheus"] = args?.enableUserPrometheus;
            resourceInputs["operationMetadata"] = args?.operationMetadata;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["paymentType"] = args?.paymentType;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["serviceId"] = args?.serviceId;
            resourceInputs["serviceInstanceName"] = args?.serviceInstanceName;
            resourceInputs["serviceVersion"] = args?.serviceVersion;
            resourceInputs["specificationName"] = args?.specificationName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["templateName"] = args?.templateName;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NestServiceInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NestServiceInstance resources.
 */
export interface NestServiceInstanceState {
    /**
     * The order information of cloud market. See `commodity` below.
     */
    commodity?: pulumi.Input<inputs.compute.NestServiceInstanceCommodity>;
    /**
     * Whether the service instance has the O&M function. Default value: `false`. Valid values:
     */
    enableInstanceOps?: pulumi.Input<boolean>;
    /**
     * Whether Prometheus monitoring is enabled. Default value: `false`. Valid values:
     */
    enableUserPrometheus?: pulumi.Input<boolean>;
    /**
     * The configuration of O&M. See `operationMetadata` below.
     */
    operationMetadata?: pulumi.Input<inputs.compute.NestServiceInstanceOperationMetadata>;
    /**
     * The parameters entered by the deployment service instance.
     */
    parameters?: pulumi.Input<string>;
    /**
     * The type of payment. Valid values: `Permanent`, `Subscription`, `PayAsYouGo`, `CustomFixTime`.
     */
    paymentType?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The ID of the service.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * The name of the Service Instance.
     */
    serviceInstanceName?: pulumi.Input<string>;
    /**
     * The version of the service.
     */
    serviceVersion?: pulumi.Input<string>;
    /**
     * The name of the specification.
     */
    specificationName?: pulumi.Input<string>;
    /**
     * The status of the Service Instance.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the template.
     */
    templateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NestServiceInstance resource.
 */
export interface NestServiceInstanceArgs {
    /**
     * The order information of cloud market. See `commodity` below.
     */
    commodity?: pulumi.Input<inputs.compute.NestServiceInstanceCommodity>;
    /**
     * Whether the service instance has the O&M function. Default value: `false`. Valid values:
     */
    enableInstanceOps?: pulumi.Input<boolean>;
    /**
     * Whether Prometheus monitoring is enabled. Default value: `false`. Valid values:
     */
    enableUserPrometheus?: pulumi.Input<boolean>;
    /**
     * The configuration of O&M. See `operationMetadata` below.
     */
    operationMetadata?: pulumi.Input<inputs.compute.NestServiceInstanceOperationMetadata>;
    /**
     * The parameters entered by the deployment service instance.
     */
    parameters?: pulumi.Input<string>;
    /**
     * The type of payment. Valid values: `Permanent`, `Subscription`, `PayAsYouGo`, `CustomFixTime`.
     */
    paymentType?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The ID of the service.
     */
    serviceId: pulumi.Input<string>;
    /**
     * The name of the Service Instance.
     */
    serviceInstanceName?: pulumi.Input<string>;
    /**
     * The version of the service.
     */
    serviceVersion: pulumi.Input<string>;
    /**
     * The name of the specification.
     */
    specificationName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the template.
     */
    templateName?: pulumi.Input<string>;
}
