// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Classic Load Balancer (SLB) Load Balancer Listener resource.
 *
 * For information about Classic Load Balancer (SLB) and how to use it, see [What is Classic Load Balancer](https://www.alibabacloud.com/help/doc-detail/27539.htm).
 *
 * For information about listener and how to use it, please see the following:
 *
 * * [Configure a HTTP Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27592.htm).
 * * [Configure a HTTPS Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27593.htm).
 * * [Configure a TCP Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27594.htm).
 * * [Configure a UDP Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27595.htm).
 *
 * > **NOTE:** Available since v1.0.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const listener = new alicloud.slb.ApplicationLoadBalancer("listener", {
 *     loadBalancerName: `${name}-${_default.result}`,
 *     internetChargeType: "PayByTraffic",
 *     addressType: "internet",
 *     instanceChargeType: "PayByCLCU",
 * });
 * const listenerAcl = new alicloud.slb.Acl("listener", {
 *     name: `${name}-${_default.result}`,
 *     ipVersion: "ipv4",
 * });
 * const listenerListener = new alicloud.slb.Listener("listener", {
 *     loadBalancerId: listener.id,
 *     backendPort: 80,
 *     frontendPort: 80,
 *     protocol: "http",
 *     bandwidth: 10,
 *     stickySession: "on",
 *     stickySessionType: "insert",
 *     cookieTimeout: 86400,
 *     cookie: "tfslblistenercookie",
 *     healthCheck: "on",
 *     healthCheckDomain: "ali.com",
 *     healthCheckUri: "/cons",
 *     healthCheckConnectPort: 20,
 *     healthyThreshold: 8,
 *     unhealthyThreshold: 8,
 *     healthCheckTimeout: 8,
 *     healthCheckInterval: 5,
 *     healthCheckHttpCode: "http_2xx,http_3xx",
 *     xForwardedFor: {
 *         retriveSlbIp: true,
 *         retriveSlbId: true,
 *     },
 *     aclStatus: "on",
 *     aclType: "white",
 *     aclIds: [listenerAcl.id],
 *     requestTimeout: 80,
 *     idleTimeout: 30,
 * });
 * const first = new alicloud.slb.AclEntryAttachment("first", {
 *     aclId: listenerAcl.id,
 *     entry: "10.10.10.0/24",
 *     comment: "first",
 * });
 * const second = new alicloud.slb.AclEntryAttachment("second", {
 *     aclId: listenerAcl.id,
 *     entry: "168.10.10.0/24",
 *     comment: "second",
 * });
 * ```
 *
 * ## Import
 *
 * Classic Load Balancer (SLB) Load Balancer Listener can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:slb/listener:Listener example <load_balancer_id>:<protocol>:<frontend_port>
 * ```
 *
 * ```sh
 * $ pulumi import alicloud:slb/listener:Listener example <load_balancer_id>:<frontend_port>
 * ```
 */
export class Listener extends pulumi.CustomResource {
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerState, opts?: pulumi.CustomResourceOptions): Listener {
        return new Listener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:slb/listener:Listener';

    /**
     * Returns true if the given object is an instance of Listener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Listener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listener.__pulumiType;
    }

    /**
     * @deprecated Field `aclId` has been deprecated from provider version 1.249.0. New field `aclIds` instead.
     */
    public readonly aclId!: pulumi.Output<string>;
    public readonly aclIds!: pulumi.Output<string[]>;
    public readonly aclStatus!: pulumi.Output<string | undefined>;
    public readonly aclType!: pulumi.Output<string | undefined>;
    public readonly backendPort!: pulumi.Output<number | undefined>;
    public readonly bandwidth!: pulumi.Output<number>;
    public readonly caCertificateId!: pulumi.Output<string | undefined>;
    public readonly cookie!: pulumi.Output<string | undefined>;
    public readonly cookieTimeout!: pulumi.Output<number | undefined>;
    public readonly deleteProtectionValidation!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enableHttp2!: pulumi.Output<string | undefined>;
    public readonly establishedTimeout!: pulumi.Output<number | undefined>;
    public readonly forwardPort!: pulumi.Output<number | undefined>;
    public readonly frontendPort!: pulumi.Output<number>;
    public readonly gzip!: pulumi.Output<boolean | undefined>;
    public readonly healthCheck!: pulumi.Output<string | undefined>;
    public readonly healthCheckConnectPort!: pulumi.Output<number>;
    public readonly healthCheckDomain!: pulumi.Output<string | undefined>;
    public readonly healthCheckHttpCode!: pulumi.Output<string>;
    public readonly healthCheckInterval!: pulumi.Output<number | undefined>;
    public readonly healthCheckMethod!: pulumi.Output<string>;
    public readonly healthCheckTimeout!: pulumi.Output<number | undefined>;
    public readonly healthCheckType!: pulumi.Output<string | undefined>;
    public readonly healthCheckUri!: pulumi.Output<string | undefined>;
    public readonly healthyThreshold!: pulumi.Output<number | undefined>;
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    public readonly listenerForward!: pulumi.Output<string>;
    public readonly loadBalancerId!: pulumi.Output<string>;
    public readonly masterSlaveServerGroupId!: pulumi.Output<string | undefined>;
    public readonly persistenceTimeout!: pulumi.Output<number | undefined>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly proxyProtocolV2Enabled!: pulumi.Output<boolean>;
    public readonly requestTimeout!: pulumi.Output<number | undefined>;
    public readonly scheduler!: pulumi.Output<string | undefined>;
    public readonly serverCertificateId!: pulumi.Output<string>;
    public readonly serverGroupId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
     */
    public readonly sslCertificateId!: pulumi.Output<string>;
    public readonly stickySession!: pulumi.Output<string | undefined>;
    public readonly stickySessionType!: pulumi.Output<string | undefined>;
    public readonly tlsCipherPolicy!: pulumi.Output<string | undefined>;
    public readonly unhealthyThreshold!: pulumi.Output<number | undefined>;
    /**
     * Whether to set additional HTTP Header field "X-Forwarded-For".
     */
    public readonly xForwardedFor!: pulumi.Output<outputs.slb.ListenerXForwardedFor>;

    /**
     * Create a Listener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerArgs | ListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerState | undefined;
            resourceInputs["aclId"] = state ? state.aclId : undefined;
            resourceInputs["aclIds"] = state ? state.aclIds : undefined;
            resourceInputs["aclStatus"] = state ? state.aclStatus : undefined;
            resourceInputs["aclType"] = state ? state.aclType : undefined;
            resourceInputs["backendPort"] = state ? state.backendPort : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["caCertificateId"] = state ? state.caCertificateId : undefined;
            resourceInputs["cookie"] = state ? state.cookie : undefined;
            resourceInputs["cookieTimeout"] = state ? state.cookieTimeout : undefined;
            resourceInputs["deleteProtectionValidation"] = state ? state.deleteProtectionValidation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableHttp2"] = state ? state.enableHttp2 : undefined;
            resourceInputs["establishedTimeout"] = state ? state.establishedTimeout : undefined;
            resourceInputs["forwardPort"] = state ? state.forwardPort : undefined;
            resourceInputs["frontendPort"] = state ? state.frontendPort : undefined;
            resourceInputs["gzip"] = state ? state.gzip : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["healthCheckConnectPort"] = state ? state.healthCheckConnectPort : undefined;
            resourceInputs["healthCheckDomain"] = state ? state.healthCheckDomain : undefined;
            resourceInputs["healthCheckHttpCode"] = state ? state.healthCheckHttpCode : undefined;
            resourceInputs["healthCheckInterval"] = state ? state.healthCheckInterval : undefined;
            resourceInputs["healthCheckMethod"] = state ? state.healthCheckMethod : undefined;
            resourceInputs["healthCheckTimeout"] = state ? state.healthCheckTimeout : undefined;
            resourceInputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            resourceInputs["healthCheckUri"] = state ? state.healthCheckUri : undefined;
            resourceInputs["healthyThreshold"] = state ? state.healthyThreshold : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["listenerForward"] = state ? state.listenerForward : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["masterSlaveServerGroupId"] = state ? state.masterSlaveServerGroupId : undefined;
            resourceInputs["persistenceTimeout"] = state ? state.persistenceTimeout : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["proxyProtocolV2Enabled"] = state ? state.proxyProtocolV2Enabled : undefined;
            resourceInputs["requestTimeout"] = state ? state.requestTimeout : undefined;
            resourceInputs["scheduler"] = state ? state.scheduler : undefined;
            resourceInputs["serverCertificateId"] = state ? state.serverCertificateId : undefined;
            resourceInputs["serverGroupId"] = state ? state.serverGroupId : undefined;
            resourceInputs["sslCertificateId"] = state ? state.sslCertificateId : undefined;
            resourceInputs["stickySession"] = state ? state.stickySession : undefined;
            resourceInputs["stickySessionType"] = state ? state.stickySessionType : undefined;
            resourceInputs["tlsCipherPolicy"] = state ? state.tlsCipherPolicy : undefined;
            resourceInputs["unhealthyThreshold"] = state ? state.unhealthyThreshold : undefined;
            resourceInputs["xForwardedFor"] = state ? state.xForwardedFor : undefined;
        } else {
            const args = argsOrState as ListenerArgs | undefined;
            if ((!args || args.frontendPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendPort'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["aclId"] = args ? args.aclId : undefined;
            resourceInputs["aclIds"] = args ? args.aclIds : undefined;
            resourceInputs["aclStatus"] = args ? args.aclStatus : undefined;
            resourceInputs["aclType"] = args ? args.aclType : undefined;
            resourceInputs["backendPort"] = args ? args.backendPort : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["caCertificateId"] = args ? args.caCertificateId : undefined;
            resourceInputs["cookie"] = args ? args.cookie : undefined;
            resourceInputs["cookieTimeout"] = args ? args.cookieTimeout : undefined;
            resourceInputs["deleteProtectionValidation"] = args ? args.deleteProtectionValidation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableHttp2"] = args ? args.enableHttp2 : undefined;
            resourceInputs["establishedTimeout"] = args ? args.establishedTimeout : undefined;
            resourceInputs["forwardPort"] = args ? args.forwardPort : undefined;
            resourceInputs["frontendPort"] = args ? args.frontendPort : undefined;
            resourceInputs["gzip"] = args ? args.gzip : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["healthCheckConnectPort"] = args ? args.healthCheckConnectPort : undefined;
            resourceInputs["healthCheckDomain"] = args ? args.healthCheckDomain : undefined;
            resourceInputs["healthCheckHttpCode"] = args ? args.healthCheckHttpCode : undefined;
            resourceInputs["healthCheckInterval"] = args ? args.healthCheckInterval : undefined;
            resourceInputs["healthCheckMethod"] = args ? args.healthCheckMethod : undefined;
            resourceInputs["healthCheckTimeout"] = args ? args.healthCheckTimeout : undefined;
            resourceInputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            resourceInputs["healthCheckUri"] = args ? args.healthCheckUri : undefined;
            resourceInputs["healthyThreshold"] = args ? args.healthyThreshold : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["listenerForward"] = args ? args.listenerForward : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["masterSlaveServerGroupId"] = args ? args.masterSlaveServerGroupId : undefined;
            resourceInputs["persistenceTimeout"] = args ? args.persistenceTimeout : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["proxyProtocolV2Enabled"] = args ? args.proxyProtocolV2Enabled : undefined;
            resourceInputs["requestTimeout"] = args ? args.requestTimeout : undefined;
            resourceInputs["scheduler"] = args ? args.scheduler : undefined;
            resourceInputs["serverCertificateId"] = args ? args.serverCertificateId : undefined;
            resourceInputs["serverGroupId"] = args ? args.serverGroupId : undefined;
            resourceInputs["sslCertificateId"] = args ? args.sslCertificateId : undefined;
            resourceInputs["stickySession"] = args ? args.stickySession : undefined;
            resourceInputs["stickySessionType"] = args ? args.stickySessionType : undefined;
            resourceInputs["tlsCipherPolicy"] = args ? args.tlsCipherPolicy : undefined;
            resourceInputs["unhealthyThreshold"] = args ? args.unhealthyThreshold : undefined;
            resourceInputs["xForwardedFor"] = args ? args.xForwardedFor : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Listener.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Listener resources.
 */
export interface ListenerState {
    /**
     * @deprecated Field `aclId` has been deprecated from provider version 1.249.0. New field `aclIds` instead.
     */
    aclId?: pulumi.Input<string>;
    aclIds?: pulumi.Input<pulumi.Input<string>[]>;
    aclStatus?: pulumi.Input<string>;
    aclType?: pulumi.Input<string>;
    backendPort?: pulumi.Input<number>;
    bandwidth?: pulumi.Input<number>;
    caCertificateId?: pulumi.Input<string>;
    cookie?: pulumi.Input<string>;
    cookieTimeout?: pulumi.Input<number>;
    deleteProtectionValidation?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    enableHttp2?: pulumi.Input<string>;
    establishedTimeout?: pulumi.Input<number>;
    forwardPort?: pulumi.Input<number>;
    frontendPort?: pulumi.Input<number>;
    gzip?: pulumi.Input<boolean>;
    healthCheck?: pulumi.Input<string>;
    healthCheckConnectPort?: pulumi.Input<number>;
    healthCheckDomain?: pulumi.Input<string>;
    healthCheckHttpCode?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckMethod?: pulumi.Input<string>;
    healthCheckTimeout?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    healthCheckUri?: pulumi.Input<string>;
    healthyThreshold?: pulumi.Input<number>;
    idleTimeout?: pulumi.Input<number>;
    listenerForward?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<string>;
    masterSlaveServerGroupId?: pulumi.Input<string>;
    persistenceTimeout?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    proxyProtocolV2Enabled?: pulumi.Input<boolean>;
    requestTimeout?: pulumi.Input<number>;
    scheduler?: pulumi.Input<string>;
    serverCertificateId?: pulumi.Input<string>;
    serverGroupId?: pulumi.Input<string>;
    /**
     * @deprecated Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
     */
    sslCertificateId?: pulumi.Input<string>;
    stickySession?: pulumi.Input<string>;
    stickySessionType?: pulumi.Input<string>;
    tlsCipherPolicy?: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
    /**
     * Whether to set additional HTTP Header field "X-Forwarded-For".
     */
    xForwardedFor?: pulumi.Input<inputs.slb.ListenerXForwardedFor>;
}

/**
 * The set of arguments for constructing a Listener resource.
 */
export interface ListenerArgs {
    /**
     * @deprecated Field `aclId` has been deprecated from provider version 1.249.0. New field `aclIds` instead.
     */
    aclId?: pulumi.Input<string>;
    aclIds?: pulumi.Input<pulumi.Input<string>[]>;
    aclStatus?: pulumi.Input<string>;
    aclType?: pulumi.Input<string>;
    backendPort?: pulumi.Input<number>;
    bandwidth?: pulumi.Input<number>;
    caCertificateId?: pulumi.Input<string>;
    cookie?: pulumi.Input<string>;
    cookieTimeout?: pulumi.Input<number>;
    deleteProtectionValidation?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    enableHttp2?: pulumi.Input<string>;
    establishedTimeout?: pulumi.Input<number>;
    forwardPort?: pulumi.Input<number>;
    frontendPort: pulumi.Input<number>;
    gzip?: pulumi.Input<boolean>;
    healthCheck?: pulumi.Input<string>;
    healthCheckConnectPort?: pulumi.Input<number>;
    healthCheckDomain?: pulumi.Input<string>;
    healthCheckHttpCode?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckMethod?: pulumi.Input<string>;
    healthCheckTimeout?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    healthCheckUri?: pulumi.Input<string>;
    healthyThreshold?: pulumi.Input<number>;
    idleTimeout?: pulumi.Input<number>;
    listenerForward?: pulumi.Input<string>;
    loadBalancerId: pulumi.Input<string>;
    masterSlaveServerGroupId?: pulumi.Input<string>;
    persistenceTimeout?: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    proxyProtocolV2Enabled?: pulumi.Input<boolean>;
    requestTimeout?: pulumi.Input<number>;
    scheduler?: pulumi.Input<string>;
    serverCertificateId?: pulumi.Input<string>;
    serverGroupId?: pulumi.Input<string>;
    /**
     * @deprecated Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
     */
    sslCertificateId?: pulumi.Input<string>;
    stickySession?: pulumi.Input<string>;
    stickySessionType?: pulumi.Input<string>;
    tlsCipherPolicy?: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
    /**
     * Whether to set additional HTTP Header field "X-Forwarded-For".
     */
    xForwardedFor?: pulumi.Input<inputs.slb.ListenerXForwardedFor>;
}
