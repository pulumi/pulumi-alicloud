// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Classic Load Balancer (SLB) Load Balancer Listener resource.
 *
 * For information about Classic Load Balancer (SLB) and how to use it, see [What is Classic Load Balancer](https://www.alibabacloud.com/help/doc-detail/27539.htm).
 *
 * For information about listener and how to use it, please see the following:
 *
 * * [Configure a HTTP Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27592.htm).
 * * [Configure a HTTPS Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27593.htm).
 * * [Configure a TCP Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27594.htm).
 * * [Configure a UDP Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27595.htm).
 *
 * > **NOTE:** Available since v1.0.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = new random.RandomInteger("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const listenerApplicationLoadBalancer = new alicloud.slb.ApplicationLoadBalancer("listenerApplicationLoadBalancer", {
 *     loadBalancerName: pulumi.interpolate`${name}-${_default.result}`,
 *     internetChargeType: "PayByTraffic",
 *     addressType: "internet",
 *     instanceChargeType: "PayByCLCU",
 * });
 * const listenerAcl = new alicloud.slb.Acl("listenerAcl", {ipVersion: "ipv4"});
 * const listenerListener = new alicloud.slb.Listener("listenerListener", {
 *     loadBalancerId: listenerApplicationLoadBalancer.id,
 *     backendPort: 80,
 *     frontendPort: 80,
 *     protocol: "http",
 *     bandwidth: 10,
 *     stickySession: "on",
 *     stickySessionType: "insert",
 *     cookieTimeout: 86400,
 *     cookie: "tfslblistenercookie",
 *     healthCheck: "on",
 *     healthCheckDomain: "ali.com",
 *     healthCheckUri: "/cons",
 *     healthCheckConnectPort: 20,
 *     healthyThreshold: 8,
 *     unhealthyThreshold: 8,
 *     healthCheckTimeout: 8,
 *     healthCheckInterval: 5,
 *     healthCheckHttpCode: "http_2xx,http_3xx",
 *     xForwardedFor: {
 *         retriveSlbIp: true,
 *         retriveSlbId: true,
 *     },
 *     aclStatus: "on",
 *     aclType: "white",
 *     aclId: listenerAcl.id,
 *     requestTimeout: 80,
 *     idleTimeout: 30,
 * });
 * const first = new alicloud.slb.AclEntryAttachment("first", {
 *     aclId: listenerAcl.id,
 *     entry: "10.10.10.0/24",
 *     comment: "first",
 * });
 * const second = new alicloud.slb.AclEntryAttachment("second", {
 *     aclId: listenerAcl.id,
 *     entry: "168.10.10.0/24",
 *     comment: "second",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Classic Load Balancer (SLB) Load Balancer Listener can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:slb/listener:Listener example <load_balancer_id>:<protocol>:<frontend_port>
 * ```
 *
 * ```sh
 * $ pulumi import alicloud:slb/listener:Listener example <load_balancer_id>:<frontend_port>
 * ```
 */
export class Listener extends pulumi.CustomResource {
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerState, opts?: pulumi.CustomResourceOptions): Listener {
        return new Listener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:slb/listener:Listener';

    /**
     * Returns true if the given object is an instance of Listener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Listener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listener.__pulumiType;
    }

    /**
     * The ID of the network ACL that is associated with the listener. **NOTE:** If `aclStatus` is set to `on`, `aclId` is required. Otherwise, it will be ignored.
     */
    public readonly aclId!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable access control. Default value: `off`. Valid values: `on`, `off`.
     */
    public readonly aclStatus!: pulumi.Output<string | undefined>;
    /**
     * The type of the network ACL. Valid values: `black`, `white`. **NOTE:** If `aclStatus` is set to `on`, `aclType` is required. Otherwise, it will be ignored.
     */
    public readonly aclType!: pulumi.Output<string | undefined>;
    /**
     * The backend port that is used by the CLB instance. Valid values: `1` to `65535`. **NOTE:** If `serverGroupId` is not set, `backendPort` is required.
     */
    public readonly backendPort!: pulumi.Output<number | undefined>;
    /**
     * The maximum bandwidth of the listener. Unit: Mbit/s. Valid values:
     * - `-1`: If you set `bandwidth` to `-1`, the bandwidth of the listener is unlimited.
     */
    public readonly bandwidth!: pulumi.Output<number>;
    /**
     * The ID of the certification authority (CA) certificate.
     */
    public readonly caCertificateId!: pulumi.Output<string | undefined>;
    /**
     * The cookie that is configured on the server. The `cookie` must be `1` to `200` characters in length and can contain only ASCII characters and digits. It cannot contain commas (,), semicolons (;), or space characters. It cannot start with a dollar sign ($). **NOTE:** If `stickySession` is set to `on`, and `stickySessionType` is set to `server`, `cookie` is required. Otherwise, it will be ignored.
     */
    public readonly cookie!: pulumi.Output<string | undefined>;
    /**
     * The timeout period of a cookie. Unit: seconds. Valid values: `1` to `86400`. **NOTE:** If `stickySession` is set to `on`, and `stickySessionType` is set to `insert`, `cookieTimeout` is required. Otherwise, it will be ignored.
     */
    public readonly cookieTimeout!: pulumi.Output<number | undefined>;
    /**
     * Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default value: `false`.
     */
    public readonly deleteProtectionValidation!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the listener. The name must be 1 to 256 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), and underscores (_).
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable HTTP/2. Default value: `on`. Valid values: `on`, `off`.
     */
    public readonly enableHttp2!: pulumi.Output<string | undefined>;
    /**
     * The timeout period of a connection. Unit: seconds. Default value: `900`. Valid values: `10` to `900`.
     */
    public readonly establishedTimeout!: pulumi.Output<number | undefined>;
    /**
     * The listening port that is used to redirect HTTP requests to HTTPS.
     */
    public readonly forwardPort!: pulumi.Output<number | undefined>;
    /**
     * The frontend port that is used by the CLB instance. Valid values: `1` to `65535`.
     */
    public readonly frontendPort!: pulumi.Output<number>;
    /**
     * Specifies whether to enable GZIP compression to compress specific types of files. Default value: `true`. Valid values: `true`, `false`.
     */
    public readonly gzip!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether to enable the health check feature. Default value: `on`. Valid values: `on`, `off`. **NOTE:** `TCP` and `UDP` listener's HealthCheck is always on, so it will be ignored when launching `TCP` or `UDP` listener.
     */
    public readonly healthCheck!: pulumi.Output<string | undefined>;
    /**
     * The backend port that is used for health checks. Valid values: `0` to `65535`. **NOTE:** `healthCheckConnectPort` takes effect only if `healthCheck` is set to `on`.
     */
    public readonly healthCheckConnectPort!: pulumi.Output<number>;
    /**
     * The domain name that is used for health checks. **NOTE:** `healthCheckDomain` takes effect only if `healthCheck` is set to `on`.
     */
    public readonly healthCheckDomain!: pulumi.Output<string | undefined>;
    /**
     * The HTTP status code for a successful health check. Separate multiple HTTP status codes with commas (`,`). Default value: `http2xx`. Valid values: `http2xx`, `http3xx`, `http4xx` and `http5xx`. **NOTE:** `healthCheckHttpCode` takes effect only if `healthCheck` is set to `on`.
     */
    public readonly healthCheckHttpCode!: pulumi.Output<string>;
    /**
     * The interval between two consecutive health checks. Unit: seconds. Default value: `2`. Valid values: `1` to `50`. **NOTE:** `healthCheckInterval` takes effect only if `healthCheck` is set to `on`.
     */
    public readonly healthCheckInterval!: pulumi.Output<number | undefined>;
    /**
     * The health check method used in HTTP health checks. Valid values: `head`, `get`. **NOTE:** `healthCheckMethod` takes effect only if `healthCheck` is set to `on`.
     */
    public readonly healthCheckMethod!: pulumi.Output<string>;
    /**
     * The timeout period of a health check response. Unit: seconds. Default value: `5`. Valid values: `1` to `300`. **NOTE:** If `healthCheckTimeout` < `healthCheckInterval`, `healthCheckTimeout` will be replaced by `healthCheckInterval`. `healthCheckTimeout` takes effect only if `healthCheck` is set to `on`.
     */
    public readonly healthCheckTimeout!: pulumi.Output<number | undefined>;
    /**
     * The type of health checks. Default value: `tcp`. Valid values: `tcp`, `http`.
     */
    public readonly healthCheckType!: pulumi.Output<string | undefined>;
    /**
     * The URI that is used for health checks. The `healthCheckUri` must be `1` to `80` characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%!)(MISSING), question marks (?), number signs (#), and ampersands (&). The URI must start with a forward slash (/) but cannot be a single forward slash (/).
     * **NOTE:** `healthCheckUri` takes effect only if `healthCheck` is set to `on`.
     */
    public readonly healthCheckUri!: pulumi.Output<string | undefined>;
    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: `3`. Valid values: `2` to `10`. **NOTE:** `healthyThreshold` takes effect only if `healthCheck` is set to `on`.
     */
    public readonly healthyThreshold!: pulumi.Output<number | undefined>;
    /**
     * The timeout period of an idle connection. Unit: seconds. Default value: `15`. Valid values: `1` to `60`.
     */
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    /**
     * @deprecated Field 'lb_port' has been removed since 1.211.0.
     */
    public readonly lbPort!: pulumi.Output<number | undefined>;
    /**
     * @deprecated Field 'lb_protocol' has been removed since 1.211.0.
     */
    public readonly lbProtocol!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable HTTP-to-HTTPS redirection. Default value: `off`. Valid values: `on`, `off`.
     */
    public readonly listenerForward!: pulumi.Output<string>;
    /**
     * The Load Balancer ID which is used to launch a new listener.
     */
    public readonly loadBalancerId!: pulumi.Output<string>;
    /**
     * The ID of the primary/secondary server group. **NOTE:** You cannot set both `serverGroupId` and `masterSlaveServerGroupId`.
     */
    public readonly masterSlaveServerGroupId!: pulumi.Output<string | undefined>;
    /**
     * The timeout period of session persistence. Unit: seconds. Default value: `0`. Valid values: `0` to `3600`.
     */
    public readonly persistenceTimeout!: pulumi.Output<number | undefined>;
    /**
     * The protocol to listen on. Valid values: `http`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers. Default value: `false`. Valid values: `true`, `false`.
     */
    public readonly proxyProtocolV2Enabled!: pulumi.Output<boolean>;
    /**
     * The timeout period of a request. Unit: seconds. Default value: `60`. Valid values: `1` to `180`.
     */
    public readonly requestTimeout!: pulumi.Output<number | undefined>;
    /**
     * The scheduling algorithm. Default value: `wrr`. Valid values:
     */
    public readonly scheduler!: pulumi.Output<string | undefined>;
    /**
     * The ID of the server certificate. **NOTE:** `serverCertificateId` is also required when the value of the `sslCertificateId` is Empty.
     */
    public readonly serverCertificateId!: pulumi.Output<string>;
    /**
     * The ID of the vServer group. It's the ID of resource `alicloud.slb.ServerGroup`.
     */
    public readonly serverGroupId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the server certificate. **NOTE:** Field `sslCertificateId` has been deprecated from provider version 1.59.0. New field `serverCertificateId` instead.
     *
     * @deprecated Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
     */
    public readonly sslCertificateId!: pulumi.Output<string>;
    /**
     * Specifies whether to enable session persistence. Default value: `off`. Valid values: `on`, `off`.
     */
    public readonly stickySession!: pulumi.Output<string | undefined>;
    /**
     * The method that is used to handle a cookie. Valid values: `insert`, `server`. **NOTE:** If `stickySession` is set to `on`, `stickySessionType` is required. Otherwise, it will be ignored.
     */
    public readonly stickySessionType!: pulumi.Output<string | undefined>;
    /**
     * The Transport Layer Security (TLS) security policy. Default value: `tlsCipherPolicy10`. Valid values: `tlsCipherPolicy10`, `tlsCipherPolicy11`, `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`.
     */
    public readonly tlsCipherPolicy!: pulumi.Output<string | undefined>;
    /**
     * The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: `3`. Valid values: `2` to `10`. **NOTE:** `unhealthyThreshold` takes effect only if `healthCheck` is set to `on`.
     */
    public readonly unhealthyThreshold!: pulumi.Output<number | undefined>;
    /**
     * Whether to set additional HTTP Header field "X-Forwarded-For". See `xForwardedFor` below.
     */
    public readonly xForwardedFor!: pulumi.Output<outputs.slb.ListenerXForwardedFor>;

    /**
     * Create a Listener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerArgs | ListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerState | undefined;
            resourceInputs["aclId"] = state ? state.aclId : undefined;
            resourceInputs["aclStatus"] = state ? state.aclStatus : undefined;
            resourceInputs["aclType"] = state ? state.aclType : undefined;
            resourceInputs["backendPort"] = state ? state.backendPort : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["caCertificateId"] = state ? state.caCertificateId : undefined;
            resourceInputs["cookie"] = state ? state.cookie : undefined;
            resourceInputs["cookieTimeout"] = state ? state.cookieTimeout : undefined;
            resourceInputs["deleteProtectionValidation"] = state ? state.deleteProtectionValidation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableHttp2"] = state ? state.enableHttp2 : undefined;
            resourceInputs["establishedTimeout"] = state ? state.establishedTimeout : undefined;
            resourceInputs["forwardPort"] = state ? state.forwardPort : undefined;
            resourceInputs["frontendPort"] = state ? state.frontendPort : undefined;
            resourceInputs["gzip"] = state ? state.gzip : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["healthCheckConnectPort"] = state ? state.healthCheckConnectPort : undefined;
            resourceInputs["healthCheckDomain"] = state ? state.healthCheckDomain : undefined;
            resourceInputs["healthCheckHttpCode"] = state ? state.healthCheckHttpCode : undefined;
            resourceInputs["healthCheckInterval"] = state ? state.healthCheckInterval : undefined;
            resourceInputs["healthCheckMethod"] = state ? state.healthCheckMethod : undefined;
            resourceInputs["healthCheckTimeout"] = state ? state.healthCheckTimeout : undefined;
            resourceInputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            resourceInputs["healthCheckUri"] = state ? state.healthCheckUri : undefined;
            resourceInputs["healthyThreshold"] = state ? state.healthyThreshold : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["lbPort"] = state ? state.lbPort : undefined;
            resourceInputs["lbProtocol"] = state ? state.lbProtocol : undefined;
            resourceInputs["listenerForward"] = state ? state.listenerForward : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["masterSlaveServerGroupId"] = state ? state.masterSlaveServerGroupId : undefined;
            resourceInputs["persistenceTimeout"] = state ? state.persistenceTimeout : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["proxyProtocolV2Enabled"] = state ? state.proxyProtocolV2Enabled : undefined;
            resourceInputs["requestTimeout"] = state ? state.requestTimeout : undefined;
            resourceInputs["scheduler"] = state ? state.scheduler : undefined;
            resourceInputs["serverCertificateId"] = state ? state.serverCertificateId : undefined;
            resourceInputs["serverGroupId"] = state ? state.serverGroupId : undefined;
            resourceInputs["sslCertificateId"] = state ? state.sslCertificateId : undefined;
            resourceInputs["stickySession"] = state ? state.stickySession : undefined;
            resourceInputs["stickySessionType"] = state ? state.stickySessionType : undefined;
            resourceInputs["tlsCipherPolicy"] = state ? state.tlsCipherPolicy : undefined;
            resourceInputs["unhealthyThreshold"] = state ? state.unhealthyThreshold : undefined;
            resourceInputs["xForwardedFor"] = state ? state.xForwardedFor : undefined;
        } else {
            const args = argsOrState as ListenerArgs | undefined;
            if ((!args || args.frontendPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendPort'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["aclId"] = args ? args.aclId : undefined;
            resourceInputs["aclStatus"] = args ? args.aclStatus : undefined;
            resourceInputs["aclType"] = args ? args.aclType : undefined;
            resourceInputs["backendPort"] = args ? args.backendPort : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["caCertificateId"] = args ? args.caCertificateId : undefined;
            resourceInputs["cookie"] = args ? args.cookie : undefined;
            resourceInputs["cookieTimeout"] = args ? args.cookieTimeout : undefined;
            resourceInputs["deleteProtectionValidation"] = args ? args.deleteProtectionValidation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableHttp2"] = args ? args.enableHttp2 : undefined;
            resourceInputs["establishedTimeout"] = args ? args.establishedTimeout : undefined;
            resourceInputs["forwardPort"] = args ? args.forwardPort : undefined;
            resourceInputs["frontendPort"] = args ? args.frontendPort : undefined;
            resourceInputs["gzip"] = args ? args.gzip : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["healthCheckConnectPort"] = args ? args.healthCheckConnectPort : undefined;
            resourceInputs["healthCheckDomain"] = args ? args.healthCheckDomain : undefined;
            resourceInputs["healthCheckHttpCode"] = args ? args.healthCheckHttpCode : undefined;
            resourceInputs["healthCheckInterval"] = args ? args.healthCheckInterval : undefined;
            resourceInputs["healthCheckMethod"] = args ? args.healthCheckMethod : undefined;
            resourceInputs["healthCheckTimeout"] = args ? args.healthCheckTimeout : undefined;
            resourceInputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            resourceInputs["healthCheckUri"] = args ? args.healthCheckUri : undefined;
            resourceInputs["healthyThreshold"] = args ? args.healthyThreshold : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["lbPort"] = args ? args.lbPort : undefined;
            resourceInputs["lbProtocol"] = args ? args.lbProtocol : undefined;
            resourceInputs["listenerForward"] = args ? args.listenerForward : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["masterSlaveServerGroupId"] = args ? args.masterSlaveServerGroupId : undefined;
            resourceInputs["persistenceTimeout"] = args ? args.persistenceTimeout : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["proxyProtocolV2Enabled"] = args ? args.proxyProtocolV2Enabled : undefined;
            resourceInputs["requestTimeout"] = args ? args.requestTimeout : undefined;
            resourceInputs["scheduler"] = args ? args.scheduler : undefined;
            resourceInputs["serverCertificateId"] = args ? args.serverCertificateId : undefined;
            resourceInputs["serverGroupId"] = args ? args.serverGroupId : undefined;
            resourceInputs["sslCertificateId"] = args ? args.sslCertificateId : undefined;
            resourceInputs["stickySession"] = args ? args.stickySession : undefined;
            resourceInputs["stickySessionType"] = args ? args.stickySessionType : undefined;
            resourceInputs["tlsCipherPolicy"] = args ? args.tlsCipherPolicy : undefined;
            resourceInputs["unhealthyThreshold"] = args ? args.unhealthyThreshold : undefined;
            resourceInputs["xForwardedFor"] = args ? args.xForwardedFor : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Listener.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Listener resources.
 */
export interface ListenerState {
    /**
     * The ID of the network ACL that is associated with the listener. **NOTE:** If `aclStatus` is set to `on`, `aclId` is required. Otherwise, it will be ignored.
     */
    aclId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable access control. Default value: `off`. Valid values: `on`, `off`.
     */
    aclStatus?: pulumi.Input<string>;
    /**
     * The type of the network ACL. Valid values: `black`, `white`. **NOTE:** If `aclStatus` is set to `on`, `aclType` is required. Otherwise, it will be ignored.
     */
    aclType?: pulumi.Input<string>;
    /**
     * The backend port that is used by the CLB instance. Valid values: `1` to `65535`. **NOTE:** If `serverGroupId` is not set, `backendPort` is required.
     */
    backendPort?: pulumi.Input<number>;
    /**
     * The maximum bandwidth of the listener. Unit: Mbit/s. Valid values:
     * - `-1`: If you set `bandwidth` to `-1`, the bandwidth of the listener is unlimited.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * The ID of the certification authority (CA) certificate.
     */
    caCertificateId?: pulumi.Input<string>;
    /**
     * The cookie that is configured on the server. The `cookie` must be `1` to `200` characters in length and can contain only ASCII characters and digits. It cannot contain commas (,), semicolons (;), or space characters. It cannot start with a dollar sign ($). **NOTE:** If `stickySession` is set to `on`, and `stickySessionType` is set to `server`, `cookie` is required. Otherwise, it will be ignored.
     */
    cookie?: pulumi.Input<string>;
    /**
     * The timeout period of a cookie. Unit: seconds. Valid values: `1` to `86400`. **NOTE:** If `stickySession` is set to `on`, and `stickySessionType` is set to `insert`, `cookieTimeout` is required. Otherwise, it will be ignored.
     */
    cookieTimeout?: pulumi.Input<number>;
    /**
     * Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default value: `false`.
     */
    deleteProtectionValidation?: pulumi.Input<boolean>;
    /**
     * The name of the listener. The name must be 1 to 256 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), and underscores (_).
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to enable HTTP/2. Default value: `on`. Valid values: `on`, `off`.
     */
    enableHttp2?: pulumi.Input<string>;
    /**
     * The timeout period of a connection. Unit: seconds. Default value: `900`. Valid values: `10` to `900`.
     */
    establishedTimeout?: pulumi.Input<number>;
    /**
     * The listening port that is used to redirect HTTP requests to HTTPS.
     */
    forwardPort?: pulumi.Input<number>;
    /**
     * The frontend port that is used by the CLB instance. Valid values: `1` to `65535`.
     */
    frontendPort?: pulumi.Input<number>;
    /**
     * Specifies whether to enable GZIP compression to compress specific types of files. Default value: `true`. Valid values: `true`, `false`.
     */
    gzip?: pulumi.Input<boolean>;
    /**
     * Specifies whether to enable the health check feature. Default value: `on`. Valid values: `on`, `off`. **NOTE:** `TCP` and `UDP` listener's HealthCheck is always on, so it will be ignored when launching `TCP` or `UDP` listener.
     */
    healthCheck?: pulumi.Input<string>;
    /**
     * The backend port that is used for health checks. Valid values: `0` to `65535`. **NOTE:** `healthCheckConnectPort` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckConnectPort?: pulumi.Input<number>;
    /**
     * The domain name that is used for health checks. **NOTE:** `healthCheckDomain` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckDomain?: pulumi.Input<string>;
    /**
     * The HTTP status code for a successful health check. Separate multiple HTTP status codes with commas (`,`). Default value: `http2xx`. Valid values: `http2xx`, `http3xx`, `http4xx` and `http5xx`. **NOTE:** `healthCheckHttpCode` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckHttpCode?: pulumi.Input<string>;
    /**
     * The interval between two consecutive health checks. Unit: seconds. Default value: `2`. Valid values: `1` to `50`. **NOTE:** `healthCheckInterval` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckInterval?: pulumi.Input<number>;
    /**
     * The health check method used in HTTP health checks. Valid values: `head`, `get`. **NOTE:** `healthCheckMethod` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckMethod?: pulumi.Input<string>;
    /**
     * The timeout period of a health check response. Unit: seconds. Default value: `5`. Valid values: `1` to `300`. **NOTE:** If `healthCheckTimeout` < `healthCheckInterval`, `healthCheckTimeout` will be replaced by `healthCheckInterval`. `healthCheckTimeout` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckTimeout?: pulumi.Input<number>;
    /**
     * The type of health checks. Default value: `tcp`. Valid values: `tcp`, `http`.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * The URI that is used for health checks. The `healthCheckUri` must be `1` to `80` characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%!)(MISSING), question marks (?), number signs (#), and ampersands (&). The URI must start with a forward slash (/) but cannot be a single forward slash (/).
     * **NOTE:** `healthCheckUri` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckUri?: pulumi.Input<string>;
    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: `3`. Valid values: `2` to `10`. **NOTE:** `healthyThreshold` takes effect only if `healthCheck` is set to `on`.
     */
    healthyThreshold?: pulumi.Input<number>;
    /**
     * The timeout period of an idle connection. Unit: seconds. Default value: `15`. Valid values: `1` to `60`.
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * @deprecated Field 'lb_port' has been removed since 1.211.0.
     */
    lbPort?: pulumi.Input<number>;
    /**
     * @deprecated Field 'lb_protocol' has been removed since 1.211.0.
     */
    lbProtocol?: pulumi.Input<string>;
    /**
     * Specifies whether to enable HTTP-to-HTTPS redirection. Default value: `off`. Valid values: `on`, `off`.
     */
    listenerForward?: pulumi.Input<string>;
    /**
     * The Load Balancer ID which is used to launch a new listener.
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * The ID of the primary/secondary server group. **NOTE:** You cannot set both `serverGroupId` and `masterSlaveServerGroupId`.
     */
    masterSlaveServerGroupId?: pulumi.Input<string>;
    /**
     * The timeout period of session persistence. Unit: seconds. Default value: `0`. Valid values: `0` to `3600`.
     */
    persistenceTimeout?: pulumi.Input<number>;
    /**
     * The protocol to listen on. Valid values: `http`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers. Default value: `false`. Valid values: `true`, `false`.
     */
    proxyProtocolV2Enabled?: pulumi.Input<boolean>;
    /**
     * The timeout period of a request. Unit: seconds. Default value: `60`. Valid values: `1` to `180`.
     */
    requestTimeout?: pulumi.Input<number>;
    /**
     * The scheduling algorithm. Default value: `wrr`. Valid values:
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The ID of the server certificate. **NOTE:** `serverCertificateId` is also required when the value of the `sslCertificateId` is Empty.
     */
    serverCertificateId?: pulumi.Input<string>;
    /**
     * The ID of the vServer group. It's the ID of resource `alicloud.slb.ServerGroup`.
     */
    serverGroupId?: pulumi.Input<string>;
    /**
     * The ID of the server certificate. **NOTE:** Field `sslCertificateId` has been deprecated from provider version 1.59.0. New field `serverCertificateId` instead.
     *
     * @deprecated Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
     */
    sslCertificateId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable session persistence. Default value: `off`. Valid values: `on`, `off`.
     */
    stickySession?: pulumi.Input<string>;
    /**
     * The method that is used to handle a cookie. Valid values: `insert`, `server`. **NOTE:** If `stickySession` is set to `on`, `stickySessionType` is required. Otherwise, it will be ignored.
     */
    stickySessionType?: pulumi.Input<string>;
    /**
     * The Transport Layer Security (TLS) security policy. Default value: `tlsCipherPolicy10`. Valid values: `tlsCipherPolicy10`, `tlsCipherPolicy11`, `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`.
     */
    tlsCipherPolicy?: pulumi.Input<string>;
    /**
     * The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: `3`. Valid values: `2` to `10`. **NOTE:** `unhealthyThreshold` takes effect only if `healthCheck` is set to `on`.
     */
    unhealthyThreshold?: pulumi.Input<number>;
    /**
     * Whether to set additional HTTP Header field "X-Forwarded-For". See `xForwardedFor` below.
     */
    xForwardedFor?: pulumi.Input<inputs.slb.ListenerXForwardedFor>;
}

/**
 * The set of arguments for constructing a Listener resource.
 */
export interface ListenerArgs {
    /**
     * The ID of the network ACL that is associated with the listener. **NOTE:** If `aclStatus` is set to `on`, `aclId` is required. Otherwise, it will be ignored.
     */
    aclId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable access control. Default value: `off`. Valid values: `on`, `off`.
     */
    aclStatus?: pulumi.Input<string>;
    /**
     * The type of the network ACL. Valid values: `black`, `white`. **NOTE:** If `aclStatus` is set to `on`, `aclType` is required. Otherwise, it will be ignored.
     */
    aclType?: pulumi.Input<string>;
    /**
     * The backend port that is used by the CLB instance. Valid values: `1` to `65535`. **NOTE:** If `serverGroupId` is not set, `backendPort` is required.
     */
    backendPort?: pulumi.Input<number>;
    /**
     * The maximum bandwidth of the listener. Unit: Mbit/s. Valid values:
     * - `-1`: If you set `bandwidth` to `-1`, the bandwidth of the listener is unlimited.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * The ID of the certification authority (CA) certificate.
     */
    caCertificateId?: pulumi.Input<string>;
    /**
     * The cookie that is configured on the server. The `cookie` must be `1` to `200` characters in length and can contain only ASCII characters and digits. It cannot contain commas (,), semicolons (;), or space characters. It cannot start with a dollar sign ($). **NOTE:** If `stickySession` is set to `on`, and `stickySessionType` is set to `server`, `cookie` is required. Otherwise, it will be ignored.
     */
    cookie?: pulumi.Input<string>;
    /**
     * The timeout period of a cookie. Unit: seconds. Valid values: `1` to `86400`. **NOTE:** If `stickySession` is set to `on`, and `stickySessionType` is set to `insert`, `cookieTimeout` is required. Otherwise, it will be ignored.
     */
    cookieTimeout?: pulumi.Input<number>;
    /**
     * Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default value: `false`.
     */
    deleteProtectionValidation?: pulumi.Input<boolean>;
    /**
     * The name of the listener. The name must be 1 to 256 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), and underscores (_).
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to enable HTTP/2. Default value: `on`. Valid values: `on`, `off`.
     */
    enableHttp2?: pulumi.Input<string>;
    /**
     * The timeout period of a connection. Unit: seconds. Default value: `900`. Valid values: `10` to `900`.
     */
    establishedTimeout?: pulumi.Input<number>;
    /**
     * The listening port that is used to redirect HTTP requests to HTTPS.
     */
    forwardPort?: pulumi.Input<number>;
    /**
     * The frontend port that is used by the CLB instance. Valid values: `1` to `65535`.
     */
    frontendPort: pulumi.Input<number>;
    /**
     * Specifies whether to enable GZIP compression to compress specific types of files. Default value: `true`. Valid values: `true`, `false`.
     */
    gzip?: pulumi.Input<boolean>;
    /**
     * Specifies whether to enable the health check feature. Default value: `on`. Valid values: `on`, `off`. **NOTE:** `TCP` and `UDP` listener's HealthCheck is always on, so it will be ignored when launching `TCP` or `UDP` listener.
     */
    healthCheck?: pulumi.Input<string>;
    /**
     * The backend port that is used for health checks. Valid values: `0` to `65535`. **NOTE:** `healthCheckConnectPort` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckConnectPort?: pulumi.Input<number>;
    /**
     * The domain name that is used for health checks. **NOTE:** `healthCheckDomain` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckDomain?: pulumi.Input<string>;
    /**
     * The HTTP status code for a successful health check. Separate multiple HTTP status codes with commas (`,`). Default value: `http2xx`. Valid values: `http2xx`, `http3xx`, `http4xx` and `http5xx`. **NOTE:** `healthCheckHttpCode` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckHttpCode?: pulumi.Input<string>;
    /**
     * The interval between two consecutive health checks. Unit: seconds. Default value: `2`. Valid values: `1` to `50`. **NOTE:** `healthCheckInterval` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckInterval?: pulumi.Input<number>;
    /**
     * The health check method used in HTTP health checks. Valid values: `head`, `get`. **NOTE:** `healthCheckMethod` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckMethod?: pulumi.Input<string>;
    /**
     * The timeout period of a health check response. Unit: seconds. Default value: `5`. Valid values: `1` to `300`. **NOTE:** If `healthCheckTimeout` < `healthCheckInterval`, `healthCheckTimeout` will be replaced by `healthCheckInterval`. `healthCheckTimeout` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckTimeout?: pulumi.Input<number>;
    /**
     * The type of health checks. Default value: `tcp`. Valid values: `tcp`, `http`.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * The URI that is used for health checks. The `healthCheckUri` must be `1` to `80` characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%!)(MISSING), question marks (?), number signs (#), and ampersands (&). The URI must start with a forward slash (/) but cannot be a single forward slash (/).
     * **NOTE:** `healthCheckUri` takes effect only if `healthCheck` is set to `on`.
     */
    healthCheckUri?: pulumi.Input<string>;
    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: `3`. Valid values: `2` to `10`. **NOTE:** `healthyThreshold` takes effect only if `healthCheck` is set to `on`.
     */
    healthyThreshold?: pulumi.Input<number>;
    /**
     * The timeout period of an idle connection. Unit: seconds. Default value: `15`. Valid values: `1` to `60`.
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * @deprecated Field 'lb_port' has been removed since 1.211.0.
     */
    lbPort?: pulumi.Input<number>;
    /**
     * @deprecated Field 'lb_protocol' has been removed since 1.211.0.
     */
    lbProtocol?: pulumi.Input<string>;
    /**
     * Specifies whether to enable HTTP-to-HTTPS redirection. Default value: `off`. Valid values: `on`, `off`.
     */
    listenerForward?: pulumi.Input<string>;
    /**
     * The Load Balancer ID which is used to launch a new listener.
     */
    loadBalancerId: pulumi.Input<string>;
    /**
     * The ID of the primary/secondary server group. **NOTE:** You cannot set both `serverGroupId` and `masterSlaveServerGroupId`.
     */
    masterSlaveServerGroupId?: pulumi.Input<string>;
    /**
     * The timeout period of session persistence. Unit: seconds. Default value: `0`. Valid values: `0` to `3600`.
     */
    persistenceTimeout?: pulumi.Input<number>;
    /**
     * The protocol to listen on. Valid values: `http`.
     */
    protocol: pulumi.Input<string>;
    /**
     * Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers. Default value: `false`. Valid values: `true`, `false`.
     */
    proxyProtocolV2Enabled?: pulumi.Input<boolean>;
    /**
     * The timeout period of a request. Unit: seconds. Default value: `60`. Valid values: `1` to `180`.
     */
    requestTimeout?: pulumi.Input<number>;
    /**
     * The scheduling algorithm. Default value: `wrr`. Valid values:
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The ID of the server certificate. **NOTE:** `serverCertificateId` is also required when the value of the `sslCertificateId` is Empty.
     */
    serverCertificateId?: pulumi.Input<string>;
    /**
     * The ID of the vServer group. It's the ID of resource `alicloud.slb.ServerGroup`.
     */
    serverGroupId?: pulumi.Input<string>;
    /**
     * The ID of the server certificate. **NOTE:** Field `sslCertificateId` has been deprecated from provider version 1.59.0. New field `serverCertificateId` instead.
     *
     * @deprecated Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
     */
    sslCertificateId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable session persistence. Default value: `off`. Valid values: `on`, `off`.
     */
    stickySession?: pulumi.Input<string>;
    /**
     * The method that is used to handle a cookie. Valid values: `insert`, `server`. **NOTE:** If `stickySession` is set to `on`, `stickySessionType` is required. Otherwise, it will be ignored.
     */
    stickySessionType?: pulumi.Input<string>;
    /**
     * The Transport Layer Security (TLS) security policy. Default value: `tlsCipherPolicy10`. Valid values: `tlsCipherPolicy10`, `tlsCipherPolicy11`, `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`.
     */
    tlsCipherPolicy?: pulumi.Input<string>;
    /**
     * The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: `3`. Valid values: `2` to `10`. **NOTE:** `unhealthyThreshold` takes effect only if `healthCheck` is set to `on`.
     */
    unhealthyThreshold?: pulumi.Input<number>;
    /**
     * Whether to set additional HTTP Header field "X-Forwarded-For". See `xForwardedFor` below.
     */
    xForwardedFor?: pulumi.Input<inputs.slb.ListenerXForwardedFor>;
}
