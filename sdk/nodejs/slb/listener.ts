// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Classic Load Balancer (SLB) Load Balancer Listener resource.
 *
 * For information about Classic Load Balancer (SLB) and how to use it, see [What is Classic Load Balancer](https://www.alibabacloud.com/help/doc-detail/27539.htm).
 *
 * For information about listener and how to use it, please see the following:
 *
 * * [Configure a HTTP Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27592.htm).
 * * [Configure a HTTPS Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27593.htm).
 * * [Configure a TCP Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27594.htm).
 * * [Configure a UDP Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27595.htm).
 *
 * > **NOTE:** Available since v1.0.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const listener = new alicloud.slb.ApplicationLoadBalancer("listener", {
 *     loadBalancerName: `${name}-${_default.result}`,
 *     internetChargeType: "PayByTraffic",
 *     addressType: "internet",
 *     instanceChargeType: "PayByCLCU",
 * });
 * const listenerAcl = new alicloud.slb.Acl("listener", {
 *     name: `${name}-${_default.result}`,
 *     ipVersion: "ipv4",
 * });
 * const listenerListener = new alicloud.slb.Listener("listener", {
 *     loadBalancerId: listener.id,
 *     backendPort: 80,
 *     frontendPort: 80,
 *     protocol: "http",
 *     bandwidth: 10,
 *     stickySession: "on",
 *     stickySessionType: "insert",
 *     cookieTimeout: 86400,
 *     cookie: "tfslblistenercookie",
 *     healthCheck: "on",
 *     healthCheckDomain: "ali.com",
 *     healthCheckUri: "/cons",
 *     healthCheckConnectPort: 20,
 *     healthyThreshold: 8,
 *     unhealthyThreshold: 8,
 *     healthCheckTimeout: 8,
 *     healthCheckInterval: 5,
 *     healthCheckHttpCode: "http_2xx,http_3xx",
 *     xForwardedFor: {
 *         retriveSlbIp: true,
 *         retriveSlbId: true,
 *     },
 *     aclStatus: "on",
 *     aclType: "white",
 *     aclIds: [listenerAcl.id],
 *     requestTimeout: 80,
 *     idleTimeout: 30,
 * });
 * const first = new alicloud.slb.AclEntryAttachment("first", {
 *     aclId: listenerAcl.id,
 *     entry: "10.10.10.0/24",
 *     comment: "first",
 * });
 * const second = new alicloud.slb.AclEntryAttachment("second", {
 *     aclId: listenerAcl.id,
 *     entry: "168.10.10.0/24",
 *     comment: "second",
 * });
 * ```
 *
 * ## Import
 *
 * Classic Load Balancer (SLB) Load Balancer Listener can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:slb/listener:Listener example <load_balancer_id>:<protocol>:<frontend_port>
 * ```
 *
 * ```sh
 * $ pulumi import alicloud:slb/listener:Listener example <load_balancer_id>:<frontend_port>
 * ```
 */
export class Listener extends pulumi.CustomResource {
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerState, opts?: pulumi.CustomResourceOptions): Listener {
        return new Listener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:slb/listener:Listener';

    /**
     * Returns true if the given object is an instance of Listener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Listener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listener.__pulumiType;
    }

    /**
     * @deprecated Field `aclId` has been deprecated from provider version 1.249.0. New field `aclIds` instead.
     */
    declare public readonly aclId: pulumi.Output<string>;
    declare public readonly aclIds: pulumi.Output<string[]>;
    declare public readonly aclStatus: pulumi.Output<string | undefined>;
    declare public readonly aclType: pulumi.Output<string | undefined>;
    declare public readonly backendPort: pulumi.Output<number | undefined>;
    declare public readonly bandwidth: pulumi.Output<number>;
    declare public readonly caCertificateId: pulumi.Output<string | undefined>;
    declare public readonly cookie: pulumi.Output<string | undefined>;
    declare public readonly cookieTimeout: pulumi.Output<number | undefined>;
    declare public readonly deleteProtectionValidation: pulumi.Output<boolean | undefined>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly enableHttp2: pulumi.Output<string | undefined>;
    declare public readonly establishedTimeout: pulumi.Output<number | undefined>;
    declare public readonly forwardPort: pulumi.Output<number | undefined>;
    declare public readonly frontendPort: pulumi.Output<number>;
    declare public readonly gzip: pulumi.Output<boolean | undefined>;
    declare public readonly healthCheck: pulumi.Output<string | undefined>;
    declare public readonly healthCheckConnectPort: pulumi.Output<number>;
    declare public readonly healthCheckDomain: pulumi.Output<string | undefined>;
    declare public readonly healthCheckHttpCode: pulumi.Output<string>;
    declare public readonly healthCheckInterval: pulumi.Output<number | undefined>;
    declare public readonly healthCheckMethod: pulumi.Output<string>;
    declare public readonly healthCheckTimeout: pulumi.Output<number | undefined>;
    declare public readonly healthCheckType: pulumi.Output<string | undefined>;
    declare public readonly healthCheckUri: pulumi.Output<string | undefined>;
    declare public readonly healthyThreshold: pulumi.Output<number | undefined>;
    declare public readonly idleTimeout: pulumi.Output<number | undefined>;
    declare public readonly listenerForward: pulumi.Output<string>;
    declare public readonly loadBalancerId: pulumi.Output<string>;
    declare public readonly masterSlaveServerGroupId: pulumi.Output<string | undefined>;
    declare public readonly persistenceTimeout: pulumi.Output<number | undefined>;
    declare public readonly protocol: pulumi.Output<string>;
    declare public readonly proxyProtocolV2Enabled: pulumi.Output<boolean>;
    declare public readonly requestTimeout: pulumi.Output<number | undefined>;
    declare public readonly scheduler: pulumi.Output<string | undefined>;
    declare public readonly serverCertificateId: pulumi.Output<string>;
    declare public readonly serverGroupId: pulumi.Output<string | undefined>;
    /**
     * @deprecated Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
     */
    declare public readonly sslCertificateId: pulumi.Output<string>;
    declare public readonly stickySession: pulumi.Output<string | undefined>;
    declare public readonly stickySessionType: pulumi.Output<string | undefined>;
    declare public readonly tlsCipherPolicy: pulumi.Output<string | undefined>;
    declare public readonly unhealthyThreshold: pulumi.Output<number | undefined>;
    /**
     * Whether to set additional HTTP Header field "X-Forwarded-For".
     */
    declare public readonly xForwardedFor: pulumi.Output<outputs.slb.ListenerXForwardedFor>;

    /**
     * Create a Listener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerArgs | ListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerState | undefined;
            resourceInputs["aclId"] = state?.aclId;
            resourceInputs["aclIds"] = state?.aclIds;
            resourceInputs["aclStatus"] = state?.aclStatus;
            resourceInputs["aclType"] = state?.aclType;
            resourceInputs["backendPort"] = state?.backendPort;
            resourceInputs["bandwidth"] = state?.bandwidth;
            resourceInputs["caCertificateId"] = state?.caCertificateId;
            resourceInputs["cookie"] = state?.cookie;
            resourceInputs["cookieTimeout"] = state?.cookieTimeout;
            resourceInputs["deleteProtectionValidation"] = state?.deleteProtectionValidation;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableHttp2"] = state?.enableHttp2;
            resourceInputs["establishedTimeout"] = state?.establishedTimeout;
            resourceInputs["forwardPort"] = state?.forwardPort;
            resourceInputs["frontendPort"] = state?.frontendPort;
            resourceInputs["gzip"] = state?.gzip;
            resourceInputs["healthCheck"] = state?.healthCheck;
            resourceInputs["healthCheckConnectPort"] = state?.healthCheckConnectPort;
            resourceInputs["healthCheckDomain"] = state?.healthCheckDomain;
            resourceInputs["healthCheckHttpCode"] = state?.healthCheckHttpCode;
            resourceInputs["healthCheckInterval"] = state?.healthCheckInterval;
            resourceInputs["healthCheckMethod"] = state?.healthCheckMethod;
            resourceInputs["healthCheckTimeout"] = state?.healthCheckTimeout;
            resourceInputs["healthCheckType"] = state?.healthCheckType;
            resourceInputs["healthCheckUri"] = state?.healthCheckUri;
            resourceInputs["healthyThreshold"] = state?.healthyThreshold;
            resourceInputs["idleTimeout"] = state?.idleTimeout;
            resourceInputs["listenerForward"] = state?.listenerForward;
            resourceInputs["loadBalancerId"] = state?.loadBalancerId;
            resourceInputs["masterSlaveServerGroupId"] = state?.masterSlaveServerGroupId;
            resourceInputs["persistenceTimeout"] = state?.persistenceTimeout;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["proxyProtocolV2Enabled"] = state?.proxyProtocolV2Enabled;
            resourceInputs["requestTimeout"] = state?.requestTimeout;
            resourceInputs["scheduler"] = state?.scheduler;
            resourceInputs["serverCertificateId"] = state?.serverCertificateId;
            resourceInputs["serverGroupId"] = state?.serverGroupId;
            resourceInputs["sslCertificateId"] = state?.sslCertificateId;
            resourceInputs["stickySession"] = state?.stickySession;
            resourceInputs["stickySessionType"] = state?.stickySessionType;
            resourceInputs["tlsCipherPolicy"] = state?.tlsCipherPolicy;
            resourceInputs["unhealthyThreshold"] = state?.unhealthyThreshold;
            resourceInputs["xForwardedFor"] = state?.xForwardedFor;
        } else {
            const args = argsOrState as ListenerArgs | undefined;
            if (args?.frontendPort === undefined && !opts.urn) {
                throw new Error("Missing required property 'frontendPort'");
            }
            if (args?.loadBalancerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["aclId"] = args?.aclId;
            resourceInputs["aclIds"] = args?.aclIds;
            resourceInputs["aclStatus"] = args?.aclStatus;
            resourceInputs["aclType"] = args?.aclType;
            resourceInputs["backendPort"] = args?.backendPort;
            resourceInputs["bandwidth"] = args?.bandwidth;
            resourceInputs["caCertificateId"] = args?.caCertificateId;
            resourceInputs["cookie"] = args?.cookie;
            resourceInputs["cookieTimeout"] = args?.cookieTimeout;
            resourceInputs["deleteProtectionValidation"] = args?.deleteProtectionValidation;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableHttp2"] = args?.enableHttp2;
            resourceInputs["establishedTimeout"] = args?.establishedTimeout;
            resourceInputs["forwardPort"] = args?.forwardPort;
            resourceInputs["frontendPort"] = args?.frontendPort;
            resourceInputs["gzip"] = args?.gzip;
            resourceInputs["healthCheck"] = args?.healthCheck;
            resourceInputs["healthCheckConnectPort"] = args?.healthCheckConnectPort;
            resourceInputs["healthCheckDomain"] = args?.healthCheckDomain;
            resourceInputs["healthCheckHttpCode"] = args?.healthCheckHttpCode;
            resourceInputs["healthCheckInterval"] = args?.healthCheckInterval;
            resourceInputs["healthCheckMethod"] = args?.healthCheckMethod;
            resourceInputs["healthCheckTimeout"] = args?.healthCheckTimeout;
            resourceInputs["healthCheckType"] = args?.healthCheckType;
            resourceInputs["healthCheckUri"] = args?.healthCheckUri;
            resourceInputs["healthyThreshold"] = args?.healthyThreshold;
            resourceInputs["idleTimeout"] = args?.idleTimeout;
            resourceInputs["listenerForward"] = args?.listenerForward;
            resourceInputs["loadBalancerId"] = args?.loadBalancerId;
            resourceInputs["masterSlaveServerGroupId"] = args?.masterSlaveServerGroupId;
            resourceInputs["persistenceTimeout"] = args?.persistenceTimeout;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["proxyProtocolV2Enabled"] = args?.proxyProtocolV2Enabled;
            resourceInputs["requestTimeout"] = args?.requestTimeout;
            resourceInputs["scheduler"] = args?.scheduler;
            resourceInputs["serverCertificateId"] = args?.serverCertificateId;
            resourceInputs["serverGroupId"] = args?.serverGroupId;
            resourceInputs["sslCertificateId"] = args?.sslCertificateId;
            resourceInputs["stickySession"] = args?.stickySession;
            resourceInputs["stickySessionType"] = args?.stickySessionType;
            resourceInputs["tlsCipherPolicy"] = args?.tlsCipherPolicy;
            resourceInputs["unhealthyThreshold"] = args?.unhealthyThreshold;
            resourceInputs["xForwardedFor"] = args?.xForwardedFor;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Listener.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Listener resources.
 */
export interface ListenerState {
    /**
     * @deprecated Field `aclId` has been deprecated from provider version 1.249.0. New field `aclIds` instead.
     */
    aclId?: pulumi.Input<string>;
    aclIds?: pulumi.Input<pulumi.Input<string>[]>;
    aclStatus?: pulumi.Input<string>;
    aclType?: pulumi.Input<string>;
    backendPort?: pulumi.Input<number>;
    bandwidth?: pulumi.Input<number>;
    caCertificateId?: pulumi.Input<string>;
    cookie?: pulumi.Input<string>;
    cookieTimeout?: pulumi.Input<number>;
    deleteProtectionValidation?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    enableHttp2?: pulumi.Input<string>;
    establishedTimeout?: pulumi.Input<number>;
    forwardPort?: pulumi.Input<number>;
    frontendPort?: pulumi.Input<number>;
    gzip?: pulumi.Input<boolean>;
    healthCheck?: pulumi.Input<string>;
    healthCheckConnectPort?: pulumi.Input<number>;
    healthCheckDomain?: pulumi.Input<string>;
    healthCheckHttpCode?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckMethod?: pulumi.Input<string>;
    healthCheckTimeout?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    healthCheckUri?: pulumi.Input<string>;
    healthyThreshold?: pulumi.Input<number>;
    idleTimeout?: pulumi.Input<number>;
    listenerForward?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<string>;
    masterSlaveServerGroupId?: pulumi.Input<string>;
    persistenceTimeout?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    proxyProtocolV2Enabled?: pulumi.Input<boolean>;
    requestTimeout?: pulumi.Input<number>;
    scheduler?: pulumi.Input<string>;
    serverCertificateId?: pulumi.Input<string>;
    serverGroupId?: pulumi.Input<string>;
    /**
     * @deprecated Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
     */
    sslCertificateId?: pulumi.Input<string>;
    stickySession?: pulumi.Input<string>;
    stickySessionType?: pulumi.Input<string>;
    tlsCipherPolicy?: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
    /**
     * Whether to set additional HTTP Header field "X-Forwarded-For".
     */
    xForwardedFor?: pulumi.Input<inputs.slb.ListenerXForwardedFor>;
}

/**
 * The set of arguments for constructing a Listener resource.
 */
export interface ListenerArgs {
    /**
     * @deprecated Field `aclId` has been deprecated from provider version 1.249.0. New field `aclIds` instead.
     */
    aclId?: pulumi.Input<string>;
    aclIds?: pulumi.Input<pulumi.Input<string>[]>;
    aclStatus?: pulumi.Input<string>;
    aclType?: pulumi.Input<string>;
    backendPort?: pulumi.Input<number>;
    bandwidth?: pulumi.Input<number>;
    caCertificateId?: pulumi.Input<string>;
    cookie?: pulumi.Input<string>;
    cookieTimeout?: pulumi.Input<number>;
    deleteProtectionValidation?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    enableHttp2?: pulumi.Input<string>;
    establishedTimeout?: pulumi.Input<number>;
    forwardPort?: pulumi.Input<number>;
    frontendPort: pulumi.Input<number>;
    gzip?: pulumi.Input<boolean>;
    healthCheck?: pulumi.Input<string>;
    healthCheckConnectPort?: pulumi.Input<number>;
    healthCheckDomain?: pulumi.Input<string>;
    healthCheckHttpCode?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckMethod?: pulumi.Input<string>;
    healthCheckTimeout?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    healthCheckUri?: pulumi.Input<string>;
    healthyThreshold?: pulumi.Input<number>;
    idleTimeout?: pulumi.Input<number>;
    listenerForward?: pulumi.Input<string>;
    loadBalancerId: pulumi.Input<string>;
    masterSlaveServerGroupId?: pulumi.Input<string>;
    persistenceTimeout?: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    proxyProtocolV2Enabled?: pulumi.Input<boolean>;
    requestTimeout?: pulumi.Input<number>;
    scheduler?: pulumi.Input<string>;
    serverCertificateId?: pulumi.Input<string>;
    serverGroupId?: pulumi.Input<string>;
    /**
     * @deprecated Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
     */
    sslCertificateId?: pulumi.Input<string>;
    stickySession?: pulumi.Input<string>;
    stickySessionType?: pulumi.Input<string>;
    tlsCipherPolicy?: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
    /**
     * Whether to set additional HTTP Header field "X-Forwarded-For".
     */
    xForwardedFor?: pulumi.Input<inputs.slb.ListenerXForwardedFor>;
}
