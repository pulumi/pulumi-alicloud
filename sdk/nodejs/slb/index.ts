// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { AclEntryAttachmentArgs, AclEntryAttachmentState } from "./aclEntryAttachment";
export type AclEntryAttachment = import("./aclEntryAttachment").AclEntryAttachment;
export const AclEntryAttachment: typeof import("./aclEntryAttachment").AclEntryAttachment = null as any;
utilities.lazyLoad(exports, ["AclEntryAttachment"], () => require("./aclEntryAttachment"));

export { ApplicationLoadBalancerArgs, ApplicationLoadBalancerState } from "./applicationLoadBalancer";
export type ApplicationLoadBalancer = import("./applicationLoadBalancer").ApplicationLoadBalancer;
export const ApplicationLoadBalancer: typeof import("./applicationLoadBalancer").ApplicationLoadBalancer = null as any;
utilities.lazyLoad(exports, ["ApplicationLoadBalancer"], () => require("./applicationLoadBalancer"));

export { AttachmentArgs, AttachmentState } from "./attachment";
export type Attachment = import("./attachment").Attachment;
export const Attachment: typeof import("./attachment").Attachment = null as any;
utilities.lazyLoad(exports, ["Attachment"], () => require("./attachment"));

export { BackendServerArgs, BackendServerState } from "./backendServer";
export type BackendServer = import("./backendServer").BackendServer;
export const BackendServer: typeof import("./backendServer").BackendServer = null as any;
utilities.lazyLoad(exports, ["BackendServer"], () => require("./backendServer"));

export { CaCertificateArgs, CaCertificateState } from "./caCertificate";
export type CaCertificate = import("./caCertificate").CaCertificate;
export const CaCertificate: typeof import("./caCertificate").CaCertificate = null as any;
utilities.lazyLoad(exports, ["CaCertificate"], () => require("./caCertificate"));

export { DomainExtensionArgs, DomainExtensionState } from "./domainExtension";
export type DomainExtension = import("./domainExtension").DomainExtension;
export const DomainExtension: typeof import("./domainExtension").DomainExtension = null as any;
utilities.lazyLoad(exports, ["DomainExtension"], () => require("./domainExtension"));

export { GetAclsArgs, GetAclsResult, GetAclsOutputArgs } from "./getAcls";
export const getAcls: typeof import("./getAcls").getAcls = null as any;
export const getAclsOutput: typeof import("./getAcls").getAclsOutput = null as any;
utilities.lazyLoad(exports, ["getAcls","getAclsOutput"], () => require("./getAcls"));

export { GetApplicationLoadBalancersArgs, GetApplicationLoadBalancersResult, GetApplicationLoadBalancersOutputArgs } from "./getApplicationLoadBalancers";
export const getApplicationLoadBalancers: typeof import("./getApplicationLoadBalancers").getApplicationLoadBalancers = null as any;
export const getApplicationLoadBalancersOutput: typeof import("./getApplicationLoadBalancers").getApplicationLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationLoadBalancers","getApplicationLoadBalancersOutput"], () => require("./getApplicationLoadBalancers"));

export { GetAttachmentsArgs, GetAttachmentsResult, GetAttachmentsOutputArgs } from "./getAttachments";
export const getAttachments: typeof import("./getAttachments").getAttachments = null as any;
export const getAttachmentsOutput: typeof import("./getAttachments").getAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getAttachments","getAttachmentsOutput"], () => require("./getAttachments"));

export { GetBackendServersArgs, GetBackendServersResult, GetBackendServersOutputArgs } from "./getBackendServers";
export const getBackendServers: typeof import("./getBackendServers").getBackendServers = null as any;
export const getBackendServersOutput: typeof import("./getBackendServers").getBackendServersOutput = null as any;
utilities.lazyLoad(exports, ["getBackendServers","getBackendServersOutput"], () => require("./getBackendServers"));

export { GetCaCertificatesArgs, GetCaCertificatesResult, GetCaCertificatesOutputArgs } from "./getCaCertificates";
export const getCaCertificates: typeof import("./getCaCertificates").getCaCertificates = null as any;
export const getCaCertificatesOutput: typeof import("./getCaCertificates").getCaCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getCaCertificates","getCaCertificatesOutput"], () => require("./getCaCertificates"));

export { GetDomainExtensionsArgs, GetDomainExtensionsResult, GetDomainExtensionsOutputArgs } from "./getDomainExtensions";
export const getDomainExtensions: typeof import("./getDomainExtensions").getDomainExtensions = null as any;
export const getDomainExtensionsOutput: typeof import("./getDomainExtensions").getDomainExtensionsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainExtensions","getDomainExtensionsOutput"], () => require("./getDomainExtensions"));

export { GetListenersArgs, GetListenersResult, GetListenersOutputArgs } from "./getListeners";
export const getListeners: typeof import("./getListeners").getListeners = null as any;
export const getListenersOutput: typeof import("./getListeners").getListenersOutput = null as any;
utilities.lazyLoad(exports, ["getListeners","getListenersOutput"], () => require("./getListeners"));

export { GetLoadBalancersArgs, GetLoadBalancersResult, GetLoadBalancersOutputArgs } from "./getLoadBalancers";
export const getLoadBalancers: typeof import("./getLoadBalancers").getLoadBalancers = null as any;
export const getLoadBalancersOutput: typeof import("./getLoadBalancers").getLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancers","getLoadBalancersOutput"], () => require("./getLoadBalancers"));

export { GetMasterSlaveServerGroupsArgs, GetMasterSlaveServerGroupsResult, GetMasterSlaveServerGroupsOutputArgs } from "./getMasterSlaveServerGroups";
export const getMasterSlaveServerGroups: typeof import("./getMasterSlaveServerGroups").getMasterSlaveServerGroups = null as any;
export const getMasterSlaveServerGroupsOutput: typeof import("./getMasterSlaveServerGroups").getMasterSlaveServerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getMasterSlaveServerGroups","getMasterSlaveServerGroupsOutput"], () => require("./getMasterSlaveServerGroups"));

export { GetRulesArgs, GetRulesResult, GetRulesOutputArgs } from "./getRules";
export const getRules: typeof import("./getRules").getRules = null as any;
export const getRulesOutput: typeof import("./getRules").getRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRules","getRulesOutput"], () => require("./getRules"));

export { GetServerCertificatesArgs, GetServerCertificatesResult, GetServerCertificatesOutputArgs } from "./getServerCertificates";
export const getServerCertificates: typeof import("./getServerCertificates").getServerCertificates = null as any;
export const getServerCertificatesOutput: typeof import("./getServerCertificates").getServerCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getServerCertificates","getServerCertificatesOutput"], () => require("./getServerCertificates"));

export { GetServerGroupsArgs, GetServerGroupsResult, GetServerGroupsOutputArgs } from "./getServerGroups";
export const getServerGroups: typeof import("./getServerGroups").getServerGroups = null as any;
export const getServerGroupsOutput: typeof import("./getServerGroups").getServerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getServerGroups","getServerGroupsOutput"], () => require("./getServerGroups"));

export { GetTlsCipherPoliciesArgs, GetTlsCipherPoliciesResult, GetTlsCipherPoliciesOutputArgs } from "./getTlsCipherPolicies";
export const getTlsCipherPolicies: typeof import("./getTlsCipherPolicies").getTlsCipherPolicies = null as any;
export const getTlsCipherPoliciesOutput: typeof import("./getTlsCipherPolicies").getTlsCipherPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getTlsCipherPolicies","getTlsCipherPoliciesOutput"], () => require("./getTlsCipherPolicies"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { ListenerArgs, ListenerState } from "./listener";
export type Listener = import("./listener").Listener;
export const Listener: typeof import("./listener").Listener = null as any;
utilities.lazyLoad(exports, ["Listener"], () => require("./listener"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { MasterSlaveServerGroupArgs, MasterSlaveServerGroupState } from "./masterSlaveServerGroup";
export type MasterSlaveServerGroup = import("./masterSlaveServerGroup").MasterSlaveServerGroup;
export const MasterSlaveServerGroup: typeof import("./masterSlaveServerGroup").MasterSlaveServerGroup = null as any;
utilities.lazyLoad(exports, ["MasterSlaveServerGroup"], () => require("./masterSlaveServerGroup"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { ServerCertificateArgs, ServerCertificateState } from "./serverCertificate";
export type ServerCertificate = import("./serverCertificate").ServerCertificate;
export const ServerCertificate: typeof import("./serverCertificate").ServerCertificate = null as any;
utilities.lazyLoad(exports, ["ServerCertificate"], () => require("./serverCertificate"));

export { ServerGroupArgs, ServerGroupState } from "./serverGroup";
export type ServerGroup = import("./serverGroup").ServerGroup;
export const ServerGroup: typeof import("./serverGroup").ServerGroup = null as any;
utilities.lazyLoad(exports, ["ServerGroup"], () => require("./serverGroup"));

export { ServerGroupServerAttachmentArgs, ServerGroupServerAttachmentState } from "./serverGroupServerAttachment";
export type ServerGroupServerAttachment = import("./serverGroupServerAttachment").ServerGroupServerAttachment;
export const ServerGroupServerAttachment: typeof import("./serverGroupServerAttachment").ServerGroupServerAttachment = null as any;
utilities.lazyLoad(exports, ["ServerGroupServerAttachment"], () => require("./serverGroupServerAttachment"));

export { TlsCipherPolicyArgs, TlsCipherPolicyState } from "./tlsCipherPolicy";
export type TlsCipherPolicy = import("./tlsCipherPolicy").TlsCipherPolicy;
export const TlsCipherPolicy: typeof import("./tlsCipherPolicy").TlsCipherPolicy = null as any;
utilities.lazyLoad(exports, ["TlsCipherPolicy"], () => require("./tlsCipherPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:slb/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "alicloud:slb/aclEntryAttachment:AclEntryAttachment":
                return new AclEntryAttachment(name, <any>undefined, { urn })
            case "alicloud:slb/applicationLoadBalancer:ApplicationLoadBalancer":
                return new ApplicationLoadBalancer(name, <any>undefined, { urn })
            case "alicloud:slb/attachment:Attachment":
                return new Attachment(name, <any>undefined, { urn })
            case "alicloud:slb/backendServer:BackendServer":
                return new BackendServer(name, <any>undefined, { urn })
            case "alicloud:slb/caCertificate:CaCertificate":
                return new CaCertificate(name, <any>undefined, { urn })
            case "alicloud:slb/domainExtension:DomainExtension":
                return new DomainExtension(name, <any>undefined, { urn })
            case "alicloud:slb/listener:Listener":
                return new Listener(name, <any>undefined, { urn })
            case "alicloud:slb/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "alicloud:slb/masterSlaveServerGroup:MasterSlaveServerGroup":
                return new MasterSlaveServerGroup(name, <any>undefined, { urn })
            case "alicloud:slb/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "alicloud:slb/serverCertificate:ServerCertificate":
                return new ServerCertificate(name, <any>undefined, { urn })
            case "alicloud:slb/serverGroup:ServerGroup":
                return new ServerGroup(name, <any>undefined, { urn })
            case "alicloud:slb/serverGroupServerAttachment:ServerGroupServerAttachment":
                return new ServerGroupServerAttachment(name, <any>undefined, { urn })
            case "alicloud:slb/tlsCipherPolicy:TlsCipherPolicy":
                return new TlsCipherPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "slb/acl", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/aclEntryAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/applicationLoadBalancer", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/attachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/backendServer", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/caCertificate", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/domainExtension", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/listener", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/loadBalancer", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/masterSlaveServerGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/rule", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/serverCertificate", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/serverGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/serverGroupServerAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "slb/tlsCipherPolicy", _module)
