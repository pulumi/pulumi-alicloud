// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ChangeSetArgs, ChangeSetState } from "./changeSet";
export type ChangeSet = import("./changeSet").ChangeSet;
export const ChangeSet: typeof import("./changeSet").ChangeSet = null as any;
utilities.lazyLoad(exports, ["ChangeSet"], () => require("./changeSet"));

export { GetChangeSetsArgs, GetChangeSetsResult, GetChangeSetsOutputArgs } from "./getChangeSets";
export const getChangeSets: typeof import("./getChangeSets").getChangeSets = null as any;
export const getChangeSetsOutput: typeof import("./getChangeSets").getChangeSetsOutput = null as any;
utilities.lazyLoad(exports, ["getChangeSets","getChangeSetsOutput"], () => require("./getChangeSets"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetStackGroupsArgs, GetStackGroupsResult, GetStackGroupsOutputArgs } from "./getStackGroups";
export const getStackGroups: typeof import("./getStackGroups").getStackGroups = null as any;
export const getStackGroupsOutput: typeof import("./getStackGroups").getStackGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getStackGroups","getStackGroupsOutput"], () => require("./getStackGroups"));

export { GetStackInstancesArgs, GetStackInstancesResult, GetStackInstancesOutputArgs } from "./getStackInstances";
export const getStackInstances: typeof import("./getStackInstances").getStackInstances = null as any;
export const getStackInstancesOutput: typeof import("./getStackInstances").getStackInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getStackInstances","getStackInstancesOutput"], () => require("./getStackInstances"));

export { GetStacksArgs, GetStacksResult, GetStacksOutputArgs } from "./getStacks";
export const getStacks: typeof import("./getStacks").getStacks = null as any;
export const getStacksOutput: typeof import("./getStacks").getStacksOutput = null as any;
utilities.lazyLoad(exports, ["getStacks","getStacksOutput"], () => require("./getStacks"));

export { GetTemplateScratchesArgs, GetTemplateScratchesResult, GetTemplateScratchesOutputArgs } from "./getTemplateScratches";
export const getTemplateScratches: typeof import("./getTemplateScratches").getTemplateScratches = null as any;
export const getTemplateScratchesOutput: typeof import("./getTemplateScratches").getTemplateScratchesOutput = null as any;
utilities.lazyLoad(exports, ["getTemplateScratches","getTemplateScratchesOutput"], () => require("./getTemplateScratches"));

export { GetTemplatesArgs, GetTemplatesResult, GetTemplatesOutputArgs } from "./getTemplates";
export const getTemplates: typeof import("./getTemplates").getTemplates = null as any;
export const getTemplatesOutput: typeof import("./getTemplates").getTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getTemplates","getTemplatesOutput"], () => require("./getTemplates"));

export { StackArgs, StackState } from "./stack";
export type Stack = import("./stack").Stack;
export const Stack: typeof import("./stack").Stack = null as any;
utilities.lazyLoad(exports, ["Stack"], () => require("./stack"));

export { StackGroupArgs, StackGroupState } from "./stackGroup";
export type StackGroup = import("./stackGroup").StackGroup;
export const StackGroup: typeof import("./stackGroup").StackGroup = null as any;
utilities.lazyLoad(exports, ["StackGroup"], () => require("./stackGroup"));

export { StackInstanceArgs, StackInstanceState } from "./stackInstance";
export type StackInstance = import("./stackInstance").StackInstance;
export const StackInstance: typeof import("./stackInstance").StackInstance = null as any;
utilities.lazyLoad(exports, ["StackInstance"], () => require("./stackInstance"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));

export { TemplateScratchArgs, TemplateScratchState } from "./templateScratch";
export type TemplateScratch = import("./templateScratch").TemplateScratch;
export const TemplateScratch: typeof import("./templateScratch").TemplateScratch = null as any;
utilities.lazyLoad(exports, ["TemplateScratch"], () => require("./templateScratch"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:ros/changeSet:ChangeSet":
                return new ChangeSet(name, <any>undefined, { urn })
            case "alicloud:ros/stack:Stack":
                return new Stack(name, <any>undefined, { urn })
            case "alicloud:ros/stackGroup:StackGroup":
                return new StackGroup(name, <any>undefined, { urn })
            case "alicloud:ros/stackInstance:StackInstance":
                return new StackInstance(name, <any>undefined, { urn })
            case "alicloud:ros/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "alicloud:ros/templateScratch:TemplateScratch":
                return new TemplateScratch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "ros/changeSet", _module)
pulumi.runtime.registerResourceModule("alicloud", "ros/stack", _module)
pulumi.runtime.registerResourceModule("alicloud", "ros/stackGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "ros/stackInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "ros/template", _module)
pulumi.runtime.registerResourceModule("alicloud", "ros/templateScratch", _module)
