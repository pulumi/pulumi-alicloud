// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApiArgs, ApiState } from "./api";
export type Api = import("./api").Api;
export const Api: typeof import("./api").Api = null as any;
utilities.lazyLoad(exports, ["Api"], () => require("./api"));

export { AppArgs, AppState } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { AppAttachmentArgs, AppAttachmentState } from "./appAttachment";
export type AppAttachment = import("./appAttachment").AppAttachment;
export const AppAttachment: typeof import("./appAttachment").AppAttachment = null as any;
utilities.lazyLoad(exports, ["AppAttachment"], () => require("./appAttachment"));

export { BackendArgs, BackendState } from "./backend";
export type Backend = import("./backend").Backend;
export const Backend: typeof import("./backend").Backend = null as any;
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));

export { GetApisArgs, GetApisResult, GetApisOutputArgs } from "./getApis";
export const getApis: typeof import("./getApis").getApis = null as any;
export const getApisOutput: typeof import("./getApis").getApisOutput = null as any;
utilities.lazyLoad(exports, ["getApis","getApisOutput"], () => require("./getApis"));

export { GetAppsArgs, GetAppsResult, GetAppsOutputArgs } from "./getApps";
export const getApps: typeof import("./getApps").getApps = null as any;
export const getAppsOutput: typeof import("./getApps").getAppsOutput = null as any;
utilities.lazyLoad(exports, ["getApps","getAppsOutput"], () => require("./getApps"));

export { GetBackendsArgs, GetBackendsResult, GetBackendsOutputArgs } from "./getBackends";
export const getBackends: typeof import("./getBackends").getBackends = null as any;
export const getBackendsOutput: typeof import("./getBackends").getBackendsOutput = null as any;
utilities.lazyLoad(exports, ["getBackends","getBackendsOutput"], () => require("./getBackends"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetLogConfigsArgs, GetLogConfigsResult, GetLogConfigsOutputArgs } from "./getLogConfigs";
export const getLogConfigs: typeof import("./getLogConfigs").getLogConfigs = null as any;
export const getLogConfigsOutput: typeof import("./getLogConfigs").getLogConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getLogConfigs","getLogConfigsOutput"], () => require("./getLogConfigs"));

export { GetModelsArgs, GetModelsResult, GetModelsOutputArgs } from "./getModels";
export const getModels: typeof import("./getModels").getModels = null as any;
export const getModelsOutput: typeof import("./getModels").getModelsOutput = null as any;
utilities.lazyLoad(exports, ["getModels","getModelsOutput"], () => require("./getModels"));

export { GetPluginsArgs, GetPluginsResult, GetPluginsOutputArgs } from "./getPlugins";
export const getPlugins: typeof import("./getPlugins").getPlugins = null as any;
export const getPluginsOutput: typeof import("./getPlugins").getPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getPlugins","getPluginsOutput"], () => require("./getPlugins"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { LogConfigArgs, LogConfigState } from "./logConfig";
export type LogConfig = import("./logConfig").LogConfig;
export const LogConfig: typeof import("./logConfig").LogConfig = null as any;
utilities.lazyLoad(exports, ["LogConfig"], () => require("./logConfig"));

export { ModelArgs, ModelState } from "./model";
export type Model = import("./model").Model;
export const Model: typeof import("./model").Model = null as any;
utilities.lazyLoad(exports, ["Model"], () => require("./model"));

export { PluginArgs, PluginState } from "./plugin";
export type Plugin = import("./plugin").Plugin;
export const Plugin: typeof import("./plugin").Plugin = null as any;
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));

export { VpcAccessArgs, VpcAccessState } from "./vpcAccess";
export type VpcAccess = import("./vpcAccess").VpcAccess;
export const VpcAccess: typeof import("./vpcAccess").VpcAccess = null as any;
utilities.lazyLoad(exports, ["VpcAccess"], () => require("./vpcAccess"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:apigateway/api:Api":
                return new Api(name, <any>undefined, { urn })
            case "alicloud:apigateway/app:App":
                return new App(name, <any>undefined, { urn })
            case "alicloud:apigateway/appAttachment:AppAttachment":
                return new AppAttachment(name, <any>undefined, { urn })
            case "alicloud:apigateway/backend:Backend":
                return new Backend(name, <any>undefined, { urn })
            case "alicloud:apigateway/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "alicloud:apigateway/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "alicloud:apigateway/logConfig:LogConfig":
                return new LogConfig(name, <any>undefined, { urn })
            case "alicloud:apigateway/model:Model":
                return new Model(name, <any>undefined, { urn })
            case "alicloud:apigateway/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "alicloud:apigateway/vpcAccess:VpcAccess":
                return new VpcAccess(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "apigateway/api", _module)
pulumi.runtime.registerResourceModule("alicloud", "apigateway/app", _module)
pulumi.runtime.registerResourceModule("alicloud", "apigateway/appAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "apigateway/backend", _module)
pulumi.runtime.registerResourceModule("alicloud", "apigateway/group", _module)
pulumi.runtime.registerResourceModule("alicloud", "apigateway/instance", _module)
pulumi.runtime.registerResourceModule("alicloud", "apigateway/logConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "apigateway/model", _module)
pulumi.runtime.registerResourceModule("alicloud", "apigateway/plugin", _module)
pulumi.runtime.registerResourceModule("alicloud", "apigateway/vpcAccess", _module)
