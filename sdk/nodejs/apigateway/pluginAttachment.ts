// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * Basic Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform_example";
 * const example = new alicloud.apigateway.Group("example", {
 *     name: name,
 *     description: name,
 * });
 * const exampleApi = new alicloud.apigateway.Api("example", {
 *     groupId: example.id,
 *     name: name,
 *     description: name,
 *     authType: "APP",
 *     forceNonceCheck: false,
 *     requestConfig: {
 *         protocol: "HTTP",
 *         method: "GET",
 *         path: "/example/path",
 *         mode: "MAPPING",
 *     },
 *     serviceType: "HTTP",
 *     httpServiceConfig: {
 *         address: "http://apigateway-backend.alicloudapi.com:8080",
 *         method: "GET",
 *         path: "/web/cloudapi",
 *         timeout: 12,
 *         aoneName: "cloudapi-openapi",
 *     },
 *     requestParameters: [{
 *         name: "example",
 *         type: "STRING",
 *         required: "OPTIONAL",
 *         "in": "QUERY",
 *         inService: "QUERY",
 *         nameService: "exampleservice",
 *     }],
 *     stageNames: [
 *         "RELEASE",
 *         "TEST",
 *     ],
 * });
 * const examplePlugin = new alicloud.apigateway.Plugin("example", {
 *     description: "tf_example",
 *     pluginName: "tf_example",
 *     pluginData: JSON.stringify({
 *         allowOrigins: "api.foo.com",
 *         allowMethods: "GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH",
 *         allowHeaders: "Authorization,Accept,Accept-Ranges,Cache-Control,Range,Date,Content-Type,Content-Length,Content-MD5,User-Agent,X-Ca-Signature,X-Ca-Signature-Headers,X-Ca-Signature-Method,X-Ca-Key,X-Ca-Timestamp,X-Ca-Nonce,X-Ca-Stage,X-Ca-Request-Mode,x-ca-deviceid",
 *         exposeHeaders: "Content-MD5,Server,Date,Latency,X-Ca-Request-Id,X-Ca-Error-Code,X-Ca-Error-Message",
 *         maxAge: 172800,
 *         allowCredentials: true,
 *     }),
 *     pluginType: "cors",
 * });
 * const examplePluginAttachment = new alicloud.apigateway.PluginAttachment("example", {
 *     apiId: exampleApi.apiId,
 *     groupId: example.id,
 *     pluginId: examplePlugin.id,
 *     stageName: "RELEASE",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class PluginAttachment extends pulumi.CustomResource {
    /**
     * Get an existing PluginAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PluginAttachmentState, opts?: pulumi.CustomResourceOptions): PluginAttachment {
        return new PluginAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:apigateway/pluginAttachment:PluginAttachment';

    /**
     * Returns true if the given object is an instance of PluginAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PluginAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PluginAttachment.__pulumiType;
    }

    /**
     * The apiId that plugin attaches to.
     */
    public readonly apiId!: pulumi.Output<string>;
    /**
     * The group that the api belongs to.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * The plugin that attaches to the api.
     */
    public readonly pluginId!: pulumi.Output<string>;
    /**
     * Stage that the plugin attaches to.
     */
    public readonly stageName!: pulumi.Output<string>;

    /**
     * Create a PluginAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PluginAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PluginAttachmentArgs | PluginAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PluginAttachmentState | undefined;
            resourceInputs["apiId"] = state ? state.apiId : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["pluginId"] = state ? state.pluginId : undefined;
            resourceInputs["stageName"] = state ? state.stageName : undefined;
        } else {
            const args = argsOrState as PluginAttachmentArgs | undefined;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.pluginId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pluginId'");
            }
            if ((!args || args.stageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stageName'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["pluginId"] = args ? args.pluginId : undefined;
            resourceInputs["stageName"] = args ? args.stageName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PluginAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PluginAttachment resources.
 */
export interface PluginAttachmentState {
    /**
     * The apiId that plugin attaches to.
     */
    apiId?: pulumi.Input<string>;
    /**
     * The group that the api belongs to.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The plugin that attaches to the api.
     */
    pluginId?: pulumi.Input<string>;
    /**
     * Stage that the plugin attaches to.
     */
    stageName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PluginAttachment resource.
 */
export interface PluginAttachmentArgs {
    /**
     * The apiId that plugin attaches to.
     */
    apiId: pulumi.Input<string>;
    /**
     * The group that the api belongs to.
     */
    groupId: pulumi.Input<string>;
    /**
     * The plugin that attaches to the api.
     */
    pluginId: pulumi.Input<string>;
    /**
     * Stage that the plugin attaches to.
     */
    stageName: pulumi.Input<string>;
}
