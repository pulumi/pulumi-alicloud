// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DedicatedBlockStorageClusterArgs, DedicatedBlockStorageClusterState } from "./dedicatedBlockStorageCluster";
export type DedicatedBlockStorageCluster = import("./dedicatedBlockStorageCluster").DedicatedBlockStorageCluster;
export const DedicatedBlockStorageCluster: typeof import("./dedicatedBlockStorageCluster").DedicatedBlockStorageCluster = null as any;
utilities.lazyLoad(exports, ["DedicatedBlockStorageCluster"], () => require("./dedicatedBlockStorageCluster"));

export { DiskReplicaGroupArgs, DiskReplicaGroupState } from "./diskReplicaGroup";
export type DiskReplicaGroup = import("./diskReplicaGroup").DiskReplicaGroup;
export const DiskReplicaGroup: typeof import("./diskReplicaGroup").DiskReplicaGroup = null as any;
utilities.lazyLoad(exports, ["DiskReplicaGroup"], () => require("./diskReplicaGroup"));

export { DiskReplicaPairArgs, DiskReplicaPairState } from "./diskReplicaPair";
export type DiskReplicaPair = import("./diskReplicaPair").DiskReplicaPair;
export const DiskReplicaPair: typeof import("./diskReplicaPair").DiskReplicaPair = null as any;
utilities.lazyLoad(exports, ["DiskReplicaPair"], () => require("./diskReplicaPair"));

export { EnterpriseSnapshotPolicyArgs, EnterpriseSnapshotPolicyState } from "./enterpriseSnapshotPolicy";
export type EnterpriseSnapshotPolicy = import("./enterpriseSnapshotPolicy").EnterpriseSnapshotPolicy;
export const EnterpriseSnapshotPolicy: typeof import("./enterpriseSnapshotPolicy").EnterpriseSnapshotPolicy = null as any;
utilities.lazyLoad(exports, ["EnterpriseSnapshotPolicy"], () => require("./enterpriseSnapshotPolicy"));

export { EnterpriseSnapshotPolicyAttachmentArgs, EnterpriseSnapshotPolicyAttachmentState } from "./enterpriseSnapshotPolicyAttachment";
export type EnterpriseSnapshotPolicyAttachment = import("./enterpriseSnapshotPolicyAttachment").EnterpriseSnapshotPolicyAttachment;
export const EnterpriseSnapshotPolicyAttachment: typeof import("./enterpriseSnapshotPolicyAttachment").EnterpriseSnapshotPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["EnterpriseSnapshotPolicyAttachment"], () => require("./enterpriseSnapshotPolicyAttachment"));

export { GetDedicatedBlockStorageClustersArgs, GetDedicatedBlockStorageClustersResult, GetDedicatedBlockStorageClustersOutputArgs } from "./getDedicatedBlockStorageClusters";
export const getDedicatedBlockStorageClusters: typeof import("./getDedicatedBlockStorageClusters").getDedicatedBlockStorageClusters = null as any;
export const getDedicatedBlockStorageClustersOutput: typeof import("./getDedicatedBlockStorageClusters").getDedicatedBlockStorageClustersOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedBlockStorageClusters","getDedicatedBlockStorageClustersOutput"], () => require("./getDedicatedBlockStorageClusters"));

export { GetDiskReplicaGroupsArgs, GetDiskReplicaGroupsResult, GetDiskReplicaGroupsOutputArgs } from "./getDiskReplicaGroups";
export const getDiskReplicaGroups: typeof import("./getDiskReplicaGroups").getDiskReplicaGroups = null as any;
export const getDiskReplicaGroupsOutput: typeof import("./getDiskReplicaGroups").getDiskReplicaGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDiskReplicaGroups","getDiskReplicaGroupsOutput"], () => require("./getDiskReplicaGroups"));

export { GetDiskReplicaPairsArgs, GetDiskReplicaPairsResult, GetDiskReplicaPairsOutputArgs } from "./getDiskReplicaPairs";
export const getDiskReplicaPairs: typeof import("./getDiskReplicaPairs").getDiskReplicaPairs = null as any;
export const getDiskReplicaPairsOutput: typeof import("./getDiskReplicaPairs").getDiskReplicaPairsOutput = null as any;
utilities.lazyLoad(exports, ["getDiskReplicaPairs","getDiskReplicaPairsOutput"], () => require("./getDiskReplicaPairs"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { ReplicaGroupDrillArgs, ReplicaGroupDrillState } from "./replicaGroupDrill";
export type ReplicaGroupDrill = import("./replicaGroupDrill").ReplicaGroupDrill;
export const ReplicaGroupDrill: typeof import("./replicaGroupDrill").ReplicaGroupDrill = null as any;
utilities.lazyLoad(exports, ["ReplicaGroupDrill"], () => require("./replicaGroupDrill"));

export { ReplicaPairDrillArgs, ReplicaPairDrillState } from "./replicaPairDrill";
export type ReplicaPairDrill = import("./replicaPairDrill").ReplicaPairDrill;
export const ReplicaPairDrill: typeof import("./replicaPairDrill").ReplicaPairDrill = null as any;
utilities.lazyLoad(exports, ["ReplicaPairDrill"], () => require("./replicaPairDrill"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:ebs/dedicatedBlockStorageCluster:DedicatedBlockStorageCluster":
                return new DedicatedBlockStorageCluster(name, <any>undefined, { urn })
            case "alicloud:ebs/diskReplicaGroup:DiskReplicaGroup":
                return new DiskReplicaGroup(name, <any>undefined, { urn })
            case "alicloud:ebs/diskReplicaPair:DiskReplicaPair":
                return new DiskReplicaPair(name, <any>undefined, { urn })
            case "alicloud:ebs/enterpriseSnapshotPolicy:EnterpriseSnapshotPolicy":
                return new EnterpriseSnapshotPolicy(name, <any>undefined, { urn })
            case "alicloud:ebs/enterpriseSnapshotPolicyAttachment:EnterpriseSnapshotPolicyAttachment":
                return new EnterpriseSnapshotPolicyAttachment(name, <any>undefined, { urn })
            case "alicloud:ebs/replicaGroupDrill:ReplicaGroupDrill":
                return new ReplicaGroupDrill(name, <any>undefined, { urn })
            case "alicloud:ebs/replicaPairDrill:ReplicaPairDrill":
                return new ReplicaPairDrill(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "ebs/dedicatedBlockStorageCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "ebs/diskReplicaGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "ebs/diskReplicaPair", _module)
pulumi.runtime.registerResourceModule("alicloud", "ebs/enterpriseSnapshotPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "ebs/enterpriseSnapshotPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "ebs/replicaGroupDrill", _module)
pulumi.runtime.registerResourceModule("alicloud", "ebs/replicaPairDrill", _module)
