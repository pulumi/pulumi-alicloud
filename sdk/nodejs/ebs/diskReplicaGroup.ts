// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a EBS Disk Replica Group resource.
 *
 * For information about EBS Disk Replica Group and how to use it, see [What is Disk Replica Group](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/creatediskreplicagroup).
 *
 * > **NOTE:** Available since v1.187.0.
 *
 * ## Import
 *
 * EBS Disk Replica Group can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:ebs/diskReplicaGroup:DiskReplicaGroup example <id>
 * ```
 */
export class DiskReplicaGroup extends pulumi.CustomResource {
    /**
     * Get an existing DiskReplicaGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiskReplicaGroupState, opts?: pulumi.CustomResourceOptions): DiskReplicaGroup {
        return new DiskReplicaGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ebs/diskReplicaGroup:DiskReplicaGroup';

    /**
     * Returns true if the given object is an instance of DiskReplicaGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiskReplicaGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiskReplicaGroup.__pulumiType;
    }

    /**
     * The description of the consistent replication group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the region to which the disaster recovery site belongs.
     */
    public readonly destinationRegionId!: pulumi.Output<string>;
    /**
     * The ID of the zone to which the disaster recovery site belongs.
     */
    public readonly destinationZoneId!: pulumi.Output<string>;
    /**
     * Consistent replication group name.
     */
    public readonly groupName!: pulumi.Output<string | undefined>;
    /**
     * The recovery point objective (RPO) of the replication pair-consistent group. Unit: seconds.
     */
    public readonly rpo!: pulumi.Output<number>;
    /**
     * The ID of the region to which the production site belongs.
     */
    public readonly sourceRegionId!: pulumi.Output<string>;
    /**
     * The ID of the zone to which the production site belongs.
     */
    public readonly sourceZoneId!: pulumi.Output<string>;
    /**
     * The status of the consistent replication group.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a DiskReplicaGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiskReplicaGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiskReplicaGroupArgs | DiskReplicaGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiskReplicaGroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationRegionId"] = state ? state.destinationRegionId : undefined;
            resourceInputs["destinationZoneId"] = state ? state.destinationZoneId : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["rpo"] = state ? state.rpo : undefined;
            resourceInputs["sourceRegionId"] = state ? state.sourceRegionId : undefined;
            resourceInputs["sourceZoneId"] = state ? state.sourceZoneId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as DiskReplicaGroupArgs | undefined;
            if ((!args || args.destinationRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationRegionId'");
            }
            if ((!args || args.destinationZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationZoneId'");
            }
            if ((!args || args.sourceRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRegionId'");
            }
            if ((!args || args.sourceZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceZoneId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationRegionId"] = args ? args.destinationRegionId : undefined;
            resourceInputs["destinationZoneId"] = args ? args.destinationZoneId : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["rpo"] = args ? args.rpo : undefined;
            resourceInputs["sourceRegionId"] = args ? args.sourceRegionId : undefined;
            resourceInputs["sourceZoneId"] = args ? args.sourceZoneId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiskReplicaGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DiskReplicaGroup resources.
 */
export interface DiskReplicaGroupState {
    /**
     * The description of the consistent replication group.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the region to which the disaster recovery site belongs.
     */
    destinationRegionId?: pulumi.Input<string>;
    /**
     * The ID of the zone to which the disaster recovery site belongs.
     */
    destinationZoneId?: pulumi.Input<string>;
    /**
     * Consistent replication group name.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The recovery point objective (RPO) of the replication pair-consistent group. Unit: seconds.
     */
    rpo?: pulumi.Input<number>;
    /**
     * The ID of the region to which the production site belongs.
     */
    sourceRegionId?: pulumi.Input<string>;
    /**
     * The ID of the zone to which the production site belongs.
     */
    sourceZoneId?: pulumi.Input<string>;
    /**
     * The status of the consistent replication group.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DiskReplicaGroup resource.
 */
export interface DiskReplicaGroupArgs {
    /**
     * The description of the consistent replication group.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the region to which the disaster recovery site belongs.
     */
    destinationRegionId: pulumi.Input<string>;
    /**
     * The ID of the zone to which the disaster recovery site belongs.
     */
    destinationZoneId: pulumi.Input<string>;
    /**
     * Consistent replication group name.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The recovery point objective (RPO) of the replication pair-consistent group. Unit: seconds.
     */
    rpo?: pulumi.Input<number>;
    /**
     * The ID of the region to which the production site belongs.
     */
    sourceRegionId: pulumi.Input<string>;
    /**
     * The ID of the zone to which the production site belongs.
     */
    sourceZoneId: pulumi.Input<string>;
}
