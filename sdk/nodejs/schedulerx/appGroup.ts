// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Schedulerx App Group resource.
 *
 * For information about Schedulerx App Group and how to use it, see [What is App Group](https://www.alibabacloud.com/help/en/schedulerx/schedulerx-serverless/developer-reference/api-schedulerx2-2019-04-30-createappgroup).
 *
 * > **NOTE:** Available since v1.240.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const createNameSpace = new alicloud.schedulerx.Namespace("CreateNameSpace", {
 *     namespaceName: name,
 *     description: name,
 * });
 * const _default = new alicloud.schedulerx.AppGroup("default", {
 *     maxJobs: 100,
 *     monitorContactsJson: JSON.stringify([
 *         {
 *             userName: "name1",
 *             userPhone: "89756******",
 *         },
 *         {
 *             userName: "name2",
 *             ding: "http://www.example.com",
 *         },
 *     ]),
 *     deleteJobs: false,
 *     appType: 1,
 *     namespaceSource: "schedulerx",
 *     groupId: "example-appgroup-pop-autoexample",
 *     namespaceName: "default",
 *     description: name,
 *     monitorConfigJson: JSON.stringify({
 *         sendChannel: "sms,ding",
 *     }),
 *     appVersion: "1",
 *     appName: "example-appgroup-pop-autoexample",
 *     namespace: createNameSpace.namespaceUid,
 *     enableLog: false,
 *     scheduleBusyWorkers: false,
 * });
 * ```
 *
 * ## Import
 *
 * Schedulerx App Group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:schedulerx/appGroup:AppGroup example <namespace>:<group_id>
 * ```
 */
export class AppGroup extends pulumi.CustomResource {
    /**
     * Get an existing AppGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppGroupState, opts?: pulumi.CustomResourceOptions): AppGroup {
        return new AppGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:schedulerx/appGroup:AppGroup';

    /**
     * Returns true if the given object is an instance of AppGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppGroup.__pulumiType;
    }

    /**
     * Application Name
     */
    declare public readonly appName: pulumi.Output<string>;
    /**
     * Application type.
     * - 1, general application.
     * - 2, k8s application.
     */
    declare public readonly appType: pulumi.Output<number | undefined>;
    /**
     * Application Version, 1: Basic Edition, 2: Professional Edition
     */
    declare public readonly appVersion: pulumi.Output<string | undefined>;
    /**
     * Whether to delete the task in the application Group. The values are as follows:
     */
    declare public readonly deleteJobs: pulumi.Output<boolean | undefined>;
    /**
     * Application Description
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Whether to enable the log.
     * - true: On
     * - false: Close
     */
    declare public readonly enableLog: pulumi.Output<boolean | undefined>;
    /**
     * Application ID
     */
    declare public readonly groupId: pulumi.Output<string>;
    /**
     * The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
     */
    declare public readonly maxConcurrency: pulumi.Output<number | undefined>;
    /**
     * Application Grouping Configurable Maximum Number of Tasks
     */
    declare public readonly maxJobs: pulumi.Output<number | undefined>;
    /**
     * Alarm configuration JSON field. For more information about this field, see **Request Parameters * *.
     */
    declare public readonly monitorConfigJson: pulumi.Output<string | undefined>;
    /**
     * Alarm contact JSON format.
     */
    declare public readonly monitorContactsJson: pulumi.Output<string | undefined>;
    /**
     * The namespace ID, which is obtained on the namespace page of the console.
     */
    declare public readonly namespace: pulumi.Output<string>;
    /**
     * The namespace name.
     */
    declare public readonly namespaceName: pulumi.Output<string>;
    /**
     * Not supported for the time being, no need to fill in.
     */
    declare public readonly namespaceSource: pulumi.Output<string | undefined>;
    /**
     * Whether to schedule a busy machine.
     */
    declare public readonly scheduleBusyWorkers: pulumi.Output<boolean | undefined>;

    /**
     * Create a AppGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppGroupArgs | AppGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppGroupState | undefined;
            resourceInputs["appName"] = state?.appName;
            resourceInputs["appType"] = state?.appType;
            resourceInputs["appVersion"] = state?.appVersion;
            resourceInputs["deleteJobs"] = state?.deleteJobs;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableLog"] = state?.enableLog;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["maxConcurrency"] = state?.maxConcurrency;
            resourceInputs["maxJobs"] = state?.maxJobs;
            resourceInputs["monitorConfigJson"] = state?.monitorConfigJson;
            resourceInputs["monitorContactsJson"] = state?.monitorContactsJson;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["namespaceName"] = state?.namespaceName;
            resourceInputs["namespaceSource"] = state?.namespaceSource;
            resourceInputs["scheduleBusyWorkers"] = state?.scheduleBusyWorkers;
        } else {
            const args = argsOrState as AppGroupArgs | undefined;
            if (args?.appName === undefined && !opts.urn) {
                throw new Error("Missing required property 'appName'");
            }
            if (args?.groupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if (args?.namespace === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if (args?.namespaceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            resourceInputs["appName"] = args?.appName;
            resourceInputs["appType"] = args?.appType;
            resourceInputs["appVersion"] = args?.appVersion;
            resourceInputs["deleteJobs"] = args?.deleteJobs;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableLog"] = args?.enableLog;
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["maxConcurrency"] = args?.maxConcurrency;
            resourceInputs["maxJobs"] = args?.maxJobs;
            resourceInputs["monitorConfigJson"] = args?.monitorConfigJson;
            resourceInputs["monitorContactsJson"] = args?.monitorContactsJson;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["namespaceName"] = args?.namespaceName;
            resourceInputs["namespaceSource"] = args?.namespaceSource;
            resourceInputs["scheduleBusyWorkers"] = args?.scheduleBusyWorkers;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppGroup resources.
 */
export interface AppGroupState {
    /**
     * Application Name
     */
    appName?: pulumi.Input<string>;
    /**
     * Application type.
     * - 1, general application.
     * - 2, k8s application.
     */
    appType?: pulumi.Input<number>;
    /**
     * Application Version, 1: Basic Edition, 2: Professional Edition
     */
    appVersion?: pulumi.Input<string>;
    /**
     * Whether to delete the task in the application Group. The values are as follows:
     */
    deleteJobs?: pulumi.Input<boolean>;
    /**
     * Application Description
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable the log.
     * - true: On
     * - false: Close
     */
    enableLog?: pulumi.Input<boolean>;
    /**
     * Application ID
     */
    groupId?: pulumi.Input<string>;
    /**
     * The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
     */
    maxConcurrency?: pulumi.Input<number>;
    /**
     * Application Grouping Configurable Maximum Number of Tasks
     */
    maxJobs?: pulumi.Input<number>;
    /**
     * Alarm configuration JSON field. For more information about this field, see **Request Parameters * *.
     */
    monitorConfigJson?: pulumi.Input<string>;
    /**
     * Alarm contact JSON format.
     */
    monitorContactsJson?: pulumi.Input<string>;
    /**
     * The namespace ID, which is obtained on the namespace page of the console.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The namespace name.
     */
    namespaceName?: pulumi.Input<string>;
    /**
     * Not supported for the time being, no need to fill in.
     */
    namespaceSource?: pulumi.Input<string>;
    /**
     * Whether to schedule a busy machine.
     */
    scheduleBusyWorkers?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AppGroup resource.
 */
export interface AppGroupArgs {
    /**
     * Application Name
     */
    appName: pulumi.Input<string>;
    /**
     * Application type.
     * - 1, general application.
     * - 2, k8s application.
     */
    appType?: pulumi.Input<number>;
    /**
     * Application Version, 1: Basic Edition, 2: Professional Edition
     */
    appVersion?: pulumi.Input<string>;
    /**
     * Whether to delete the task in the application Group. The values are as follows:
     */
    deleteJobs?: pulumi.Input<boolean>;
    /**
     * Application Description
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable the log.
     * - true: On
     * - false: Close
     */
    enableLog?: pulumi.Input<boolean>;
    /**
     * Application ID
     */
    groupId: pulumi.Input<string>;
    /**
     * The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
     */
    maxConcurrency?: pulumi.Input<number>;
    /**
     * Application Grouping Configurable Maximum Number of Tasks
     */
    maxJobs?: pulumi.Input<number>;
    /**
     * Alarm configuration JSON field. For more information about this field, see **Request Parameters * *.
     */
    monitorConfigJson?: pulumi.Input<string>;
    /**
     * Alarm contact JSON format.
     */
    monitorContactsJson?: pulumi.Input<string>;
    /**
     * The namespace ID, which is obtained on the namespace page of the console.
     */
    namespace: pulumi.Input<string>;
    /**
     * The namespace name.
     */
    namespaceName: pulumi.Input<string>;
    /**
     * Not supported for the time being, no need to fill in.
     */
    namespaceSource?: pulumi.Input<string>;
    /**
     * Whether to schedule a busy machine.
     */
    scheduleBusyWorkers?: pulumi.Input<boolean>;
}
