// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Schedulerx Job resource.
 *
 * For information about Schedulerx Job and how to use it, see [What is Job](https://www.alibabacloud.com/help/en/).
 *
 * > **NOTE:** Available since v1.240.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const createNameSpace = new alicloud.schedulerx.Namespace("CreateNameSpace", {
 *     namespaceName: name,
 *     description: name,
 * });
 * const _default = new alicloud.schedulerx.AppGroup("default", {
 *     maxJobs: 100,
 *     monitorContactsJson: JSON.stringify([
 *         {
 *             userName: "name1",
 *             userPhone: "89756******",
 *         },
 *         {
 *             userName: "name2",
 *             ding: "http://www.example.com",
 *         },
 *     ]),
 *     deleteJobs: false,
 *     appType: 1,
 *     namespaceSource: "schedulerx",
 *     groupId: "example-appgroup-pop-autoexample",
 *     namespaceName: "default",
 *     description: name,
 *     monitorConfigJson: JSON.stringify({
 *         sendChannel: "sms,ding",
 *     }),
 *     appVersion: "1",
 *     appName: "example-appgroup-pop-autoexample",
 *     namespace: createNameSpace.namespaceUid,
 *     enableLog: false,
 *     scheduleBusyWorkers: false,
 * });
 * const defaultJob = new alicloud.schedulerx.Job("default", {
 *     timezone: "GTM+7",
 *     status: "Enable",
 *     maxAttempt: 0,
 *     description: name,
 *     parameters: "hello word",
 *     jobName: name,
 *     maxConcurrency: "1",
 *     timeConfig: {
 *         dataOffset: 1,
 *         timeExpression: "100000",
 *         timeType: 3,
 *         calendar: "workday",
 *     },
 *     mapTaskXattrs: {
 *         taskMaxAttempt: 1,
 *         taskAttemptInterval: 1,
 *         consumerSize: 5,
 *         queueSize: 10000,
 *         dispatcherSize: 5,
 *         pageSize: 100,
 *     },
 *     namespace: createNameSpace.namespaceUid,
 *     groupId: _default.groupId,
 *     jobType: "java",
 *     jobMonitorInfo: {
 *         contactInfos: [
 *             {
 *                 userPhone: "12345678910",
 *                 userName: "tangtao-1",
 *                 ding: "https://alidocs.dingtalk.com",
 *                 userMail: "12345678@xx.com",
 *             },
 *             {
 *                 userPhone: "12345678910",
 *                 userName: "tangtao-2",
 *                 ding: "https://alidocs.dingtalk.com1",
 *                 userMail: "123456789@xx.com",
 *             },
 *         ],
 *         monitorConfig: {
 *             timeout: 7200,
 *             sendChannel: "sms",
 *             timeoutKillEnable: true,
 *             timeoutEnable: true,
 *             failEnable: true,
 *             missWorkerEnable: true,
 *         },
 *     },
 *     className: "com.aliyun.schedulerx.example.processor.SimpleJob",
 *     namespaceSource: "schedulerx",
 *     attemptInterval: 30,
 *     failTimes: 1,
 *     executeMode: "batch",
 * });
 * ```
 *
 * ## Import
 *
 * Schedulerx Job can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:schedulerx/job:Job example <namespace>:<group_id>:<job_id>
 * ```
 */
export class Job extends pulumi.CustomResource {
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobState, opts?: pulumi.CustomResourceOptions): Job {
        return new Job(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:schedulerx/job:Job';

    /**
     * Returns true if the given object is an instance of Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Job {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Job.__pulumiType;
    }

    /**
     * Error retry interval, unit s, default value 30.
     */
    public readonly attemptInterval!: pulumi.Output<number | undefined>;
    /**
     * Full path of the task interface class.
     *
     * This field is available only when your task is of the Java task type.
     */
    public readonly className!: pulumi.Output<string | undefined>;
    /**
     * The script code of the python, shell, and go task types.
     */
    public readonly content!: pulumi.Output<string | undefined>;
    /**
     * Task description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Task execution mode, the possible results are as follows:
     */
    public readonly executeMode!: pulumi.Output<string>;
    /**
     * Number of consecutive failed alarms
     */
    public readonly failTimes!: pulumi.Output<number | undefined>;
    /**
     * The application ID, which is obtained from the **application management** page of the console.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * JobId
     */
    public /*out*/ readonly jobId!: pulumi.Output<number>;
    /**
     * Task monitoring information See `jobMonitorInfo` below.
     */
    public readonly jobMonitorInfo!: pulumi.Output<outputs.schedulerx.JobJobMonitorInfo | undefined>;
    /**
     * JobName
     */
    public readonly jobName!: pulumi.Output<string>;
    /**
     * Job Type
     */
    public readonly jobType!: pulumi.Output<string>;
    /**
     * Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
     */
    public readonly mapTaskXattrs!: pulumi.Output<outputs.schedulerx.JobMapTaskXattrs | undefined>;
    /**
     * The maximum number of error retries, which is set based on business requirements. The default value is 0.
     */
    public readonly maxAttempt!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
     */
    public readonly maxConcurrency!: pulumi.Output<string | undefined>;
    /**
     * Namespace, which is obtained on the `Namespace` page of the console.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Special third parties are required.
     */
    public readonly namespaceSource!: pulumi.Output<string | undefined>;
    /**
     * User-defined parameters, which can be obtained at runtime.
     */
    public readonly parameters!: pulumi.Output<string | undefined>;
    /**
     * Task status. The values are as follows:
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Success Notification Switch
     */
    public readonly successNoticeEnable!: pulumi.Output<boolean | undefined>;
    /**
     * Advanced configuration of parallel grid tasks, push model or pull model
     */
    public readonly taskDispatchMode!: pulumi.Output<string | undefined>;
    /**
     * K8s task type custom task template
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * Time configuration information See `timeConfig` below.
     */
    public readonly timeConfig!: pulumi.Output<outputs.schedulerx.JobTimeConfig>;
    /**
     * Time Zone
     */
    public readonly timezone!: pulumi.Output<string | undefined>;
    /**
     * Task Extension Field
     */
    public readonly xAttrs!: pulumi.Output<string>;

    /**
     * Create a Job resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobArgs | JobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JobState | undefined;
            resourceInputs["attemptInterval"] = state ? state.attemptInterval : undefined;
            resourceInputs["className"] = state ? state.className : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["executeMode"] = state ? state.executeMode : undefined;
            resourceInputs["failTimes"] = state ? state.failTimes : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["jobId"] = state ? state.jobId : undefined;
            resourceInputs["jobMonitorInfo"] = state ? state.jobMonitorInfo : undefined;
            resourceInputs["jobName"] = state ? state.jobName : undefined;
            resourceInputs["jobType"] = state ? state.jobType : undefined;
            resourceInputs["mapTaskXattrs"] = state ? state.mapTaskXattrs : undefined;
            resourceInputs["maxAttempt"] = state ? state.maxAttempt : undefined;
            resourceInputs["maxConcurrency"] = state ? state.maxConcurrency : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["namespaceSource"] = state ? state.namespaceSource : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["successNoticeEnable"] = state ? state.successNoticeEnable : undefined;
            resourceInputs["taskDispatchMode"] = state ? state.taskDispatchMode : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["timeConfig"] = state ? state.timeConfig : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["xAttrs"] = state ? state.xAttrs : undefined;
        } else {
            const args = argsOrState as JobArgs | undefined;
            if ((!args || args.executeMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executeMode'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.jobName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobName'");
            }
            if ((!args || args.jobType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobType'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.timeConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeConfig'");
            }
            resourceInputs["attemptInterval"] = args ? args.attemptInterval : undefined;
            resourceInputs["className"] = args ? args.className : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executeMode"] = args ? args.executeMode : undefined;
            resourceInputs["failTimes"] = args ? args.failTimes : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["jobMonitorInfo"] = args ? args.jobMonitorInfo : undefined;
            resourceInputs["jobName"] = args ? args.jobName : undefined;
            resourceInputs["jobType"] = args ? args.jobType : undefined;
            resourceInputs["mapTaskXattrs"] = args ? args.mapTaskXattrs : undefined;
            resourceInputs["maxAttempt"] = args ? args.maxAttempt : undefined;
            resourceInputs["maxConcurrency"] = args ? args.maxConcurrency : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["namespaceSource"] = args ? args.namespaceSource : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["successNoticeEnable"] = args ? args.successNoticeEnable : undefined;
            resourceInputs["taskDispatchMode"] = args ? args.taskDispatchMode : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["timeConfig"] = args ? args.timeConfig : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["xAttrs"] = args ? args.xAttrs : undefined;
            resourceInputs["jobId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Job.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Job resources.
 */
export interface JobState {
    /**
     * Error retry interval, unit s, default value 30.
     */
    attemptInterval?: pulumi.Input<number>;
    /**
     * Full path of the task interface class.
     *
     * This field is available only when your task is of the Java task type.
     */
    className?: pulumi.Input<string>;
    /**
     * The script code of the python, shell, and go task types.
     */
    content?: pulumi.Input<string>;
    /**
     * Task description.
     */
    description?: pulumi.Input<string>;
    /**
     * Task execution mode, the possible results are as follows:
     */
    executeMode?: pulumi.Input<string>;
    /**
     * Number of consecutive failed alarms
     */
    failTimes?: pulumi.Input<number>;
    /**
     * The application ID, which is obtained from the **application management** page of the console.
     */
    groupId?: pulumi.Input<string>;
    /**
     * JobId
     */
    jobId?: pulumi.Input<number>;
    /**
     * Task monitoring information See `jobMonitorInfo` below.
     */
    jobMonitorInfo?: pulumi.Input<inputs.schedulerx.JobJobMonitorInfo>;
    /**
     * JobName
     */
    jobName?: pulumi.Input<string>;
    /**
     * Job Type
     */
    jobType?: pulumi.Input<string>;
    /**
     * Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
     */
    mapTaskXattrs?: pulumi.Input<inputs.schedulerx.JobMapTaskXattrs>;
    /**
     * The maximum number of error retries, which is set based on business requirements. The default value is 0.
     */
    maxAttempt?: pulumi.Input<number>;
    /**
     * The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
     */
    maxConcurrency?: pulumi.Input<string>;
    /**
     * Namespace, which is obtained on the `Namespace` page of the console.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Special third parties are required.
     */
    namespaceSource?: pulumi.Input<string>;
    /**
     * User-defined parameters, which can be obtained at runtime.
     */
    parameters?: pulumi.Input<string>;
    /**
     * Task status. The values are as follows:
     */
    status?: pulumi.Input<string>;
    /**
     * Success Notification Switch
     */
    successNoticeEnable?: pulumi.Input<boolean>;
    /**
     * Advanced configuration of parallel grid tasks, push model or pull model
     */
    taskDispatchMode?: pulumi.Input<string>;
    /**
     * K8s task type custom task template
     */
    template?: pulumi.Input<string>;
    /**
     * Time configuration information See `timeConfig` below.
     */
    timeConfig?: pulumi.Input<inputs.schedulerx.JobTimeConfig>;
    /**
     * Time Zone
     */
    timezone?: pulumi.Input<string>;
    /**
     * Task Extension Field
     */
    xAttrs?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Job resource.
 */
export interface JobArgs {
    /**
     * Error retry interval, unit s, default value 30.
     */
    attemptInterval?: pulumi.Input<number>;
    /**
     * Full path of the task interface class.
     *
     * This field is available only when your task is of the Java task type.
     */
    className?: pulumi.Input<string>;
    /**
     * The script code of the python, shell, and go task types.
     */
    content?: pulumi.Input<string>;
    /**
     * Task description.
     */
    description?: pulumi.Input<string>;
    /**
     * Task execution mode, the possible results are as follows:
     */
    executeMode: pulumi.Input<string>;
    /**
     * Number of consecutive failed alarms
     */
    failTimes?: pulumi.Input<number>;
    /**
     * The application ID, which is obtained from the **application management** page of the console.
     */
    groupId: pulumi.Input<string>;
    /**
     * Task monitoring information See `jobMonitorInfo` below.
     */
    jobMonitorInfo?: pulumi.Input<inputs.schedulerx.JobJobMonitorInfo>;
    /**
     * JobName
     */
    jobName: pulumi.Input<string>;
    /**
     * Job Type
     */
    jobType: pulumi.Input<string>;
    /**
     * Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `mapTaskXattrs` below.
     */
    mapTaskXattrs?: pulumi.Input<inputs.schedulerx.JobMapTaskXattrs>;
    /**
     * The maximum number of error retries, which is set based on business requirements. The default value is 0.
     */
    maxAttempt?: pulumi.Input<number>;
    /**
     * The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
     */
    maxConcurrency?: pulumi.Input<string>;
    /**
     * Namespace, which is obtained on the `Namespace` page of the console.
     */
    namespace: pulumi.Input<string>;
    /**
     * Special third parties are required.
     */
    namespaceSource?: pulumi.Input<string>;
    /**
     * User-defined parameters, which can be obtained at runtime.
     */
    parameters?: pulumi.Input<string>;
    /**
     * Task status. The values are as follows:
     */
    status?: pulumi.Input<string>;
    /**
     * Success Notification Switch
     */
    successNoticeEnable?: pulumi.Input<boolean>;
    /**
     * Advanced configuration of parallel grid tasks, push model or pull model
     */
    taskDispatchMode?: pulumi.Input<string>;
    /**
     * K8s task type custom task template
     */
    template?: pulumi.Input<string>;
    /**
     * Time configuration information See `timeConfig` below.
     */
    timeConfig: pulumi.Input<inputs.schedulerx.JobTimeConfig>;
    /**
     * Time Zone
     */
    timezone?: pulumi.Input<string>;
    /**
     * Task Extension Field
     */
    xAttrs?: pulumi.Input<string>;
}
