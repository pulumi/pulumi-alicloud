// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a SSL Certificates Certificate resource.
 *
 * For information about SSL Certificates Certificate and how to use it, see [What is Certificate](https://www.alibabacloud.com/help/product/28533.html).
 *
 * > **NOTE:** Available in v1.129.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * from "fs";
 *
 * const example = new alicloud.cas.ServiceCertificate("example", {
 *     certificateName: "test",
 *     cert: fs.readFileSync(`${path.module}/test.crt`),
 *     key: fs.readFileSync(`${path.module}/test.key`),
 * });
 * ```
 *
 * ## Import
 *
 * SSL Certificates Certificate can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cas/serviceCertificate:ServiceCertificate example <id>
 * ```
 */
export class ServiceCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ServiceCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceCertificateState, opts?: pulumi.CustomResourceOptions): ServiceCertificate {
        return new ServiceCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cas/serviceCertificate:ServiceCertificate';

    /**
     * Returns true if the given object is an instance of ServiceCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceCertificate.__pulumiType;
    }

    /**
     * Cert of the Certificate in which the Certificate will add.
     */
    public readonly cert!: pulumi.Output<string>;
    /**
     * Name of the Certificate. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix .sh and .tel are not supported.
     */
    public readonly certificateName!: pulumi.Output<string>;
    /**
     * Key of the Certificate in which the Certificate will add.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The lang.
     */
    public readonly lang!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Field 'name' has been deprecated from provider version 1.129.0 and it will be remove in the future version. Please use the new attribute 'certificate_name' instead.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a ServiceCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceCertificateArgs | ServiceCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceCertificateState | undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["certificateName"] = state ? state.certificateName : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["lang"] = state ? state.lang : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as ServiceCertificateArgs | undefined;
            if ((!args || args.cert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cert'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["certificateName"] = args ? args.certificateName : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["lang"] = args ? args.lang : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceCertificate resources.
 */
export interface ServiceCertificateState {
    /**
     * Cert of the Certificate in which the Certificate will add.
     */
    cert?: pulumi.Input<string>;
    /**
     * Name of the Certificate. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix .sh and .tel are not supported.
     */
    certificateName?: pulumi.Input<string>;
    /**
     * Key of the Certificate in which the Certificate will add.
     */
    key?: pulumi.Input<string>;
    /**
     * The lang.
     */
    lang?: pulumi.Input<string>;
    /**
     * @deprecated Field 'name' has been deprecated from provider version 1.129.0 and it will be remove in the future version. Please use the new attribute 'certificate_name' instead.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceCertificate resource.
 */
export interface ServiceCertificateArgs {
    /**
     * Cert of the Certificate in which the Certificate will add.
     */
    cert: pulumi.Input<string>;
    /**
     * Name of the Certificate. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix .sh and .tel are not supported.
     */
    certificateName?: pulumi.Input<string>;
    /**
     * Key of the Certificate in which the Certificate will add.
     */
    key: pulumi.Input<string>;
    /**
     * The lang.
     */
    lang?: pulumi.Input<string>;
    /**
     * @deprecated Field 'name' has been deprecated from provider version 1.129.0 and it will be remove in the future version. Please use the new attribute 'certificate_name' instead.
     */
    name?: pulumi.Input<string>;
}
