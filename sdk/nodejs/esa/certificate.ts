// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ESA Certificate resource.
 *
 * For information about ESA Certificate and how to use it, see [What is Certificate](https://next.api.alibabacloud.com/document/ESA/2024-09-10/SetCertificate).
 *
 * > **NOTE:** Available since v1.244.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = alicloud.esa.getSites({
 *     planSubscribeType: "enterpriseplan",
 *     siteName: "gositecdn.cn",
 * });
 * const defaultCertificate = new alicloud.esa.Certificate("default", {
 *     createdType: "free",
 *     domains: "101.gositecdn.cn",
 *     siteId: _default.then(_default => _default.sites?.[0]?.id),
 *     type: "lets_encrypt",
 * });
 * ```
 *
 * ## Import
 *
 * ESA Certificate can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:esa/certificate:Certificate example <site_id>:<cert_id>
 * ```
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:esa/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Cloud certificate ID.
     */
    declare public readonly casId: pulumi.Output<string | undefined>;
    /**
     * The certificate Id.
     */
    declare public readonly certId: pulumi.Output<string>;
    /**
     * The certificate name.
     */
    declare public readonly certName: pulumi.Output<string>;
    /**
     * Certificate content.
     */
    declare public readonly certificate: pulumi.Output<string>;
    /**
     * Creation time.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The certificate type.
     * - cas (Certificate Center Certificate)
     * - upload (custom upload certificate)
     * - free( Free certificate).
     */
    declare public readonly createdType: pulumi.Output<string>;
    /**
     * A list of domain names. Multiple domain names are separated by commas.
     */
    declare public readonly domains: pulumi.Output<string | undefined>;
    /**
     * The certificate private key.
     */
    declare public readonly privateKey: pulumi.Output<string | undefined>;
    /**
     * Geographical information.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The site ID, which can be obtained by calling the ListSites interface.
     */
    declare public readonly siteId: pulumi.Output<number>;
    /**
     * Certificate status.(within 30 days).- issued.- applying.- application failed.- canceled.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Certificate type. Possible values: lets_encrypt: Let's Encrypt certificate;
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["casId"] = state?.casId;
            resourceInputs["certId"] = state?.certId;
            resourceInputs["certName"] = state?.certName;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["createdType"] = state?.createdType;
            resourceInputs["domains"] = state?.domains;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["region"] = state?.region;
            resourceInputs["siteId"] = state?.siteId;
            resourceInputs["status"] = state?.status;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if (args?.createdType === undefined && !opts.urn) {
                throw new Error("Missing required property 'createdType'");
            }
            if (args?.siteId === undefined && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["casId"] = args?.casId;
            resourceInputs["certId"] = args?.certId;
            resourceInputs["certName"] = args?.certName;
            resourceInputs["certificate"] = args?.certificate;
            resourceInputs["createdType"] = args?.createdType;
            resourceInputs["domains"] = args?.domains;
            resourceInputs["privateKey"] = args?.privateKey;
            resourceInputs["region"] = args?.region;
            resourceInputs["siteId"] = args?.siteId;
            resourceInputs["type"] = args?.type;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * Cloud certificate ID.
     */
    casId?: pulumi.Input<string>;
    /**
     * The certificate Id.
     */
    certId?: pulumi.Input<string>;
    /**
     * The certificate name.
     */
    certName?: pulumi.Input<string>;
    /**
     * Certificate content.
     */
    certificate?: pulumi.Input<string>;
    /**
     * Creation time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The certificate type.
     * - cas (Certificate Center Certificate)
     * - upload (custom upload certificate)
     * - free( Free certificate).
     */
    createdType?: pulumi.Input<string>;
    /**
     * A list of domain names. Multiple domain names are separated by commas.
     */
    domains?: pulumi.Input<string>;
    /**
     * The certificate private key.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Geographical information.
     */
    region?: pulumi.Input<string>;
    /**
     * The site ID, which can be obtained by calling the ListSites interface.
     */
    siteId?: pulumi.Input<number>;
    /**
     * Certificate status.(within 30 days).- issued.- applying.- application failed.- canceled.
     */
    status?: pulumi.Input<string>;
    /**
     * Certificate type. Possible values: lets_encrypt: Let's Encrypt certificate;
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Cloud certificate ID.
     */
    casId?: pulumi.Input<string>;
    /**
     * The certificate Id.
     */
    certId?: pulumi.Input<string>;
    /**
     * The certificate name.
     */
    certName?: pulumi.Input<string>;
    /**
     * Certificate content.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The certificate type.
     * - cas (Certificate Center Certificate)
     * - upload (custom upload certificate)
     * - free( Free certificate).
     */
    createdType: pulumi.Input<string>;
    /**
     * A list of domain names. Multiple domain names are separated by commas.
     */
    domains?: pulumi.Input<string>;
    /**
     * The certificate private key.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Geographical information.
     */
    region?: pulumi.Input<string>;
    /**
     * The site ID, which can be obtained by calling the ListSites interface.
     */
    siteId: pulumi.Input<number>;
    /**
     * Certificate type. Possible values: lets_encrypt: Let's Encrypt certificate;
     */
    type?: pulumi.Input<string>;
}
