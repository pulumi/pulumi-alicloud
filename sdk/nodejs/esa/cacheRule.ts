// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ESA Cache Rule resource.
 *
 * For information about ESA Cache Rule and how to use it, see [What is Cache Rule](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateCacheRule).
 *
 * > **NOTE:** Available since v1.244.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = alicloud.esa.getSites({
 *     planSubscribeType: "enterpriseplan",
 * });
 * const defaultCacheRule = new alicloud.esa.CacheRule("default", {
 *     userDeviceType: "off",
 *     browserCacheMode: "no_cache",
 *     userLanguage: "off",
 *     checkPresenceHeader: "headername",
 *     includeCookie: "cookie_exapmle",
 *     edgeCacheMode: "follow_origin",
 *     additionalCacheablePorts: "2053",
 *     ruleName: "rule_example",
 *     edgeStatusCodeCacheTtl: "300",
 *     browserCacheTtl: "300",
 *     queryString: "example",
 *     userGeo: "off",
 *     sortQueryStringForCache: "off",
 *     checkPresenceCookie: "cookiename",
 *     cacheReserveEligibility: "bypass_cache_reserve",
 *     queryStringMode: "ignore_all",
 *     rule: "http.host eq \"video.example.com\"",
 *     cacheDeceptionArmor: "off",
 *     siteId: _default.then(_default => _default.sites?.[0]?.id),
 *     bypassCache: "cache_all",
 *     edgeCacheTtl: "300",
 *     ruleEnable: "off",
 *     siteVersion: 0,
 *     includeHeader: "example",
 *     serveStale: "off",
 * });
 * ```
 *
 * ## Import
 *
 * ESA Cache Rule can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:esa/cacheRule:CacheRule example <site_id>:<cache_rule_id>
 * ```
 */
export class CacheRule extends pulumi.CustomResource {
    /**
     * Get an existing CacheRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CacheRuleState, opts?: pulumi.CustomResourceOptions): CacheRule {
        return new CacheRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:esa/cacheRule:CacheRule';

    /**
     * Returns true if the given object is an instance of CacheRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CacheRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CacheRule.__pulumiType;
    }

    /**
     * Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
     */
    public readonly additionalCacheablePorts!: pulumi.Output<string | undefined>;
    /**
     * Browser cache mode. value:
     */
    public readonly browserCacheMode!: pulumi.Output<string | undefined>;
    /**
     * The browser cache expiration time, in seconds.
     */
    public readonly browserCacheTtl!: pulumi.Output<string | undefined>;
    /**
     * Set the cache bypass mode. value:
     */
    public readonly bypassCache!: pulumi.Output<string | undefined>;
    /**
     * Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
     */
    public readonly cacheDeceptionArmor!: pulumi.Output<string | undefined>;
    /**
     * Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
     */
    public readonly cacheReserveEligibility!: pulumi.Output<string | undefined>;
    /**
     * The configured ConfigId. You can call the ListCacheRules operation to obtain the ConfigId.
     */
    public /*out*/ readonly cacheRuleId!: pulumi.Output<number>;
    /**
     * When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
     */
    public readonly checkPresenceCookie!: pulumi.Output<string | undefined>;
    /**
     * When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
     */
    public readonly checkPresenceHeader!: pulumi.Output<string | undefined>;
    /**
     * Node cache mode. value:
     */
    public readonly edgeCacheMode!: pulumi.Output<string | undefined>;
    /**
     * The node cache expiration time, in seconds.
     */
    public readonly edgeCacheTtl!: pulumi.Output<string | undefined>;
    /**
     * Status code cache expiration time, in seconds.
     */
    public readonly edgeStatusCodeCacheTtl!: pulumi.Output<string | undefined>;
    /**
     * When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
     */
    public readonly includeCookie!: pulumi.Output<string | undefined>;
    /**
     * When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
     */
    public readonly includeHeader!: pulumi.Output<string | undefined>;
    /**
     * The query string to be retained or deleted. You can enter multiple values separated by spaces.
     */
    public readonly queryString!: pulumi.Output<string | undefined>;
    /**
     * The processing mode for the query string when the cache key is generated. value:
     */
    public readonly queryStringMode!: pulumi.Output<string | undefined>;
    /**
     * The rule content.
     */
    public readonly rule!: pulumi.Output<string | undefined>;
    /**
     * Rule switch. value:
     */
    public readonly ruleEnable!: pulumi.Output<string | undefined>;
    /**
     * Rule name, you can find out the rule whose rule name is the passed field.
     */
    public readonly ruleName!: pulumi.Output<string | undefined>;
    /**
     * Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
     */
    public readonly serveStale!: pulumi.Output<string | undefined>;
    /**
     * The site ID, which can be obtained by calling the ListSites API.
     */
    public readonly siteId!: pulumi.Output<number>;
    /**
     * Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
     */
    public readonly siteVersion!: pulumi.Output<number | undefined>;
    /**
     * Query string sorting, which is disabled by default. value:
     */
    public readonly sortQueryStringForCache!: pulumi.Output<string | undefined>;
    /**
     * When generating the cache key, add the client device type. value:
     */
    public readonly userDeviceType!: pulumi.Output<string | undefined>;
    /**
     * When generating the cache key, add the client geographic location. value:
     */
    public readonly userGeo!: pulumi.Output<string | undefined>;
    /**
     * When generating the cache key, add the client language type. value:
     */
    public readonly userLanguage!: pulumi.Output<string | undefined>;

    /**
     * Create a CacheRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CacheRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CacheRuleArgs | CacheRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CacheRuleState | undefined;
            resourceInputs["additionalCacheablePorts"] = state ? state.additionalCacheablePorts : undefined;
            resourceInputs["browserCacheMode"] = state ? state.browserCacheMode : undefined;
            resourceInputs["browserCacheTtl"] = state ? state.browserCacheTtl : undefined;
            resourceInputs["bypassCache"] = state ? state.bypassCache : undefined;
            resourceInputs["cacheDeceptionArmor"] = state ? state.cacheDeceptionArmor : undefined;
            resourceInputs["cacheReserveEligibility"] = state ? state.cacheReserveEligibility : undefined;
            resourceInputs["cacheRuleId"] = state ? state.cacheRuleId : undefined;
            resourceInputs["checkPresenceCookie"] = state ? state.checkPresenceCookie : undefined;
            resourceInputs["checkPresenceHeader"] = state ? state.checkPresenceHeader : undefined;
            resourceInputs["edgeCacheMode"] = state ? state.edgeCacheMode : undefined;
            resourceInputs["edgeCacheTtl"] = state ? state.edgeCacheTtl : undefined;
            resourceInputs["edgeStatusCodeCacheTtl"] = state ? state.edgeStatusCodeCacheTtl : undefined;
            resourceInputs["includeCookie"] = state ? state.includeCookie : undefined;
            resourceInputs["includeHeader"] = state ? state.includeHeader : undefined;
            resourceInputs["queryString"] = state ? state.queryString : undefined;
            resourceInputs["queryStringMode"] = state ? state.queryStringMode : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["ruleEnable"] = state ? state.ruleEnable : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["serveStale"] = state ? state.serveStale : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["siteVersion"] = state ? state.siteVersion : undefined;
            resourceInputs["sortQueryStringForCache"] = state ? state.sortQueryStringForCache : undefined;
            resourceInputs["userDeviceType"] = state ? state.userDeviceType : undefined;
            resourceInputs["userGeo"] = state ? state.userGeo : undefined;
            resourceInputs["userLanguage"] = state ? state.userLanguage : undefined;
        } else {
            const args = argsOrState as CacheRuleArgs | undefined;
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["additionalCacheablePorts"] = args ? args.additionalCacheablePorts : undefined;
            resourceInputs["browserCacheMode"] = args ? args.browserCacheMode : undefined;
            resourceInputs["browserCacheTtl"] = args ? args.browserCacheTtl : undefined;
            resourceInputs["bypassCache"] = args ? args.bypassCache : undefined;
            resourceInputs["cacheDeceptionArmor"] = args ? args.cacheDeceptionArmor : undefined;
            resourceInputs["cacheReserveEligibility"] = args ? args.cacheReserveEligibility : undefined;
            resourceInputs["checkPresenceCookie"] = args ? args.checkPresenceCookie : undefined;
            resourceInputs["checkPresenceHeader"] = args ? args.checkPresenceHeader : undefined;
            resourceInputs["edgeCacheMode"] = args ? args.edgeCacheMode : undefined;
            resourceInputs["edgeCacheTtl"] = args ? args.edgeCacheTtl : undefined;
            resourceInputs["edgeStatusCodeCacheTtl"] = args ? args.edgeStatusCodeCacheTtl : undefined;
            resourceInputs["includeCookie"] = args ? args.includeCookie : undefined;
            resourceInputs["includeHeader"] = args ? args.includeHeader : undefined;
            resourceInputs["queryString"] = args ? args.queryString : undefined;
            resourceInputs["queryStringMode"] = args ? args.queryStringMode : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["ruleEnable"] = args ? args.ruleEnable : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["serveStale"] = args ? args.serveStale : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["siteVersion"] = args ? args.siteVersion : undefined;
            resourceInputs["sortQueryStringForCache"] = args ? args.sortQueryStringForCache : undefined;
            resourceInputs["userDeviceType"] = args ? args.userDeviceType : undefined;
            resourceInputs["userGeo"] = args ? args.userGeo : undefined;
            resourceInputs["userLanguage"] = args ? args.userLanguage : undefined;
            resourceInputs["cacheRuleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CacheRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CacheRule resources.
 */
export interface CacheRuleState {
    /**
     * Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
     */
    additionalCacheablePorts?: pulumi.Input<string>;
    /**
     * Browser cache mode. value:
     */
    browserCacheMode?: pulumi.Input<string>;
    /**
     * The browser cache expiration time, in seconds.
     */
    browserCacheTtl?: pulumi.Input<string>;
    /**
     * Set the cache bypass mode. value:
     */
    bypassCache?: pulumi.Input<string>;
    /**
     * Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
     */
    cacheDeceptionArmor?: pulumi.Input<string>;
    /**
     * Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
     */
    cacheReserveEligibility?: pulumi.Input<string>;
    /**
     * The configured ConfigId. You can call the ListCacheRules operation to obtain the ConfigId.
     */
    cacheRuleId?: pulumi.Input<number>;
    /**
     * When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
     */
    checkPresenceCookie?: pulumi.Input<string>;
    /**
     * When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
     */
    checkPresenceHeader?: pulumi.Input<string>;
    /**
     * Node cache mode. value:
     */
    edgeCacheMode?: pulumi.Input<string>;
    /**
     * The node cache expiration time, in seconds.
     */
    edgeCacheTtl?: pulumi.Input<string>;
    /**
     * Status code cache expiration time, in seconds.
     */
    edgeStatusCodeCacheTtl?: pulumi.Input<string>;
    /**
     * When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
     */
    includeCookie?: pulumi.Input<string>;
    /**
     * When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
     */
    includeHeader?: pulumi.Input<string>;
    /**
     * The query string to be retained or deleted. You can enter multiple values separated by spaces.
     */
    queryString?: pulumi.Input<string>;
    /**
     * The processing mode for the query string when the cache key is generated. value:
     */
    queryStringMode?: pulumi.Input<string>;
    /**
     * The rule content.
     */
    rule?: pulumi.Input<string>;
    /**
     * Rule switch. value:
     */
    ruleEnable?: pulumi.Input<string>;
    /**
     * Rule name, you can find out the rule whose rule name is the passed field.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
     */
    serveStale?: pulumi.Input<string>;
    /**
     * The site ID, which can be obtained by calling the ListSites API.
     */
    siteId?: pulumi.Input<number>;
    /**
     * Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
     */
    siteVersion?: pulumi.Input<number>;
    /**
     * Query string sorting, which is disabled by default. value:
     */
    sortQueryStringForCache?: pulumi.Input<string>;
    /**
     * When generating the cache key, add the client device type. value:
     */
    userDeviceType?: pulumi.Input<string>;
    /**
     * When generating the cache key, add the client geographic location. value:
     */
    userGeo?: pulumi.Input<string>;
    /**
     * When generating the cache key, add the client language type. value:
     */
    userLanguage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CacheRule resource.
 */
export interface CacheRuleArgs {
    /**
     * Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
     */
    additionalCacheablePorts?: pulumi.Input<string>;
    /**
     * Browser cache mode. value:
     */
    browserCacheMode?: pulumi.Input<string>;
    /**
     * The browser cache expiration time, in seconds.
     */
    browserCacheTtl?: pulumi.Input<string>;
    /**
     * Set the cache bypass mode. value:
     */
    bypassCache?: pulumi.Input<string>;
    /**
     * Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
     */
    cacheDeceptionArmor?: pulumi.Input<string>;
    /**
     * Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
     */
    cacheReserveEligibility?: pulumi.Input<string>;
    /**
     * When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
     */
    checkPresenceCookie?: pulumi.Input<string>;
    /**
     * When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
     */
    checkPresenceHeader?: pulumi.Input<string>;
    /**
     * Node cache mode. value:
     */
    edgeCacheMode?: pulumi.Input<string>;
    /**
     * The node cache expiration time, in seconds.
     */
    edgeCacheTtl?: pulumi.Input<string>;
    /**
     * Status code cache expiration time, in seconds.
     */
    edgeStatusCodeCacheTtl?: pulumi.Input<string>;
    /**
     * When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
     */
    includeCookie?: pulumi.Input<string>;
    /**
     * When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
     */
    includeHeader?: pulumi.Input<string>;
    /**
     * The query string to be retained or deleted. You can enter multiple values separated by spaces.
     */
    queryString?: pulumi.Input<string>;
    /**
     * The processing mode for the query string when the cache key is generated. value:
     */
    queryStringMode?: pulumi.Input<string>;
    /**
     * The rule content.
     */
    rule?: pulumi.Input<string>;
    /**
     * Rule switch. value:
     */
    ruleEnable?: pulumi.Input<string>;
    /**
     * Rule name, you can find out the rule whose rule name is the passed field.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
     */
    serveStale?: pulumi.Input<string>;
    /**
     * The site ID, which can be obtained by calling the ListSites API.
     */
    siteId: pulumi.Input<number>;
    /**
     * Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
     */
    siteVersion?: pulumi.Input<number>;
    /**
     * Query string sorting, which is disabled by default. value:
     */
    sortQueryStringForCache?: pulumi.Input<string>;
    /**
     * When generating the cache key, add the client device type. value:
     */
    userDeviceType?: pulumi.Input<string>;
    /**
     * When generating the cache key, add the client geographic location. value:
     */
    userGeo?: pulumi.Input<string>;
    /**
     * When generating the cache key, add the client language type. value:
     */
    userLanguage?: pulumi.Input<string>;
}
