// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CacheReserveInstanceArgs, CacheReserveInstanceState } from "./cacheReserveInstance";
export type CacheReserveInstance = import("./cacheReserveInstance").CacheReserveInstance;
export const CacheReserveInstance: typeof import("./cacheReserveInstance").CacheReserveInstance = null as any;
utilities.lazyLoad(exports, ["CacheReserveInstance"], () => require("./cacheReserveInstance"));

export { CacheRuleArgs, CacheRuleState } from "./cacheRule";
export type CacheRule = import("./cacheRule").CacheRule;
export const CacheRule: typeof import("./cacheRule").CacheRule = null as any;
utilities.lazyLoad(exports, ["CacheRule"], () => require("./cacheRule"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { ClientCaCertificateArgs, ClientCaCertificateState } from "./clientCaCertificate";
export type ClientCaCertificate = import("./clientCaCertificate").ClientCaCertificate;
export const ClientCaCertificate: typeof import("./clientCaCertificate").ClientCaCertificate = null as any;
utilities.lazyLoad(exports, ["ClientCaCertificate"], () => require("./clientCaCertificate"));

export { ClientCertificateArgs, ClientCertificateState } from "./clientCertificate";
export type ClientCertificate = import("./clientCertificate").ClientCertificate;
export const ClientCertificate: typeof import("./clientCertificate").ClientCertificate = null as any;
utilities.lazyLoad(exports, ["ClientCertificate"], () => require("./clientCertificate"));

export { CompressionRuleArgs, CompressionRuleState } from "./compressionRule";
export type CompressionRule = import("./compressionRule").CompressionRule;
export const CompressionRule: typeof import("./compressionRule").CompressionRule = null as any;
utilities.lazyLoad(exports, ["CompressionRule"], () => require("./compressionRule"));

export { EdgeContainerAppArgs, EdgeContainerAppState } from "./edgeContainerApp";
export type EdgeContainerApp = import("./edgeContainerApp").EdgeContainerApp;
export const EdgeContainerApp: typeof import("./edgeContainerApp").EdgeContainerApp = null as any;
utilities.lazyLoad(exports, ["EdgeContainerApp"], () => require("./edgeContainerApp"));

export { EdgeContainerAppRecordArgs, EdgeContainerAppRecordState } from "./edgeContainerAppRecord";
export type EdgeContainerAppRecord = import("./edgeContainerAppRecord").EdgeContainerAppRecord;
export const EdgeContainerAppRecord: typeof import("./edgeContainerAppRecord").EdgeContainerAppRecord = null as any;
utilities.lazyLoad(exports, ["EdgeContainerAppRecord"], () => require("./edgeContainerAppRecord"));

export { GetSitesArgs, GetSitesResult, GetSitesOutputArgs } from "./getSites";
export const getSites: typeof import("./getSites").getSites = null as any;
export const getSitesOutput: typeof import("./getSites").getSitesOutput = null as any;
utilities.lazyLoad(exports, ["getSites","getSitesOutput"], () => require("./getSites"));

export { HttpRequestHeaderModificationRuleArgs, HttpRequestHeaderModificationRuleState } from "./httpRequestHeaderModificationRule";
export type HttpRequestHeaderModificationRule = import("./httpRequestHeaderModificationRule").HttpRequestHeaderModificationRule;
export const HttpRequestHeaderModificationRule: typeof import("./httpRequestHeaderModificationRule").HttpRequestHeaderModificationRule = null as any;
utilities.lazyLoad(exports, ["HttpRequestHeaderModificationRule"], () => require("./httpRequestHeaderModificationRule"));

export { HttpResponseHeaderModificationRuleArgs, HttpResponseHeaderModificationRuleState } from "./httpResponseHeaderModificationRule";
export type HttpResponseHeaderModificationRule = import("./httpResponseHeaderModificationRule").HttpResponseHeaderModificationRule;
export const HttpResponseHeaderModificationRule: typeof import("./httpResponseHeaderModificationRule").HttpResponseHeaderModificationRule = null as any;
utilities.lazyLoad(exports, ["HttpResponseHeaderModificationRule"], () => require("./httpResponseHeaderModificationRule"));

export { HttpsApplicationConfigurationArgs, HttpsApplicationConfigurationState } from "./httpsApplicationConfiguration";
export type HttpsApplicationConfiguration = import("./httpsApplicationConfiguration").HttpsApplicationConfiguration;
export const HttpsApplicationConfiguration: typeof import("./httpsApplicationConfiguration").HttpsApplicationConfiguration = null as any;
utilities.lazyLoad(exports, ["HttpsApplicationConfiguration"], () => require("./httpsApplicationConfiguration"));

export { HttpsBasicConfigurationArgs, HttpsBasicConfigurationState } from "./httpsBasicConfiguration";
export type HttpsBasicConfiguration = import("./httpsBasicConfiguration").HttpsBasicConfiguration;
export const HttpsBasicConfiguration: typeof import("./httpsBasicConfiguration").HttpsBasicConfiguration = null as any;
utilities.lazyLoad(exports, ["HttpsBasicConfiguration"], () => require("./httpsBasicConfiguration"));

export { ImageTransformArgs, ImageTransformState } from "./imageTransform";
export type ImageTransform = import("./imageTransform").ImageTransform;
export const ImageTransform: typeof import("./imageTransform").ImageTransform = null as any;
utilities.lazyLoad(exports, ["ImageTransform"], () => require("./imageTransform"));

export { KvNamespaceArgs, KvNamespaceState } from "./kvNamespace";
export type KvNamespace = import("./kvNamespace").KvNamespace;
export const KvNamespace: typeof import("./kvNamespace").KvNamespace = null as any;
utilities.lazyLoad(exports, ["KvNamespace"], () => require("./kvNamespace"));

export { ListArgs, ListState } from "./list";
export type List = import("./list").List;
export const List: typeof import("./list").List = null as any;
utilities.lazyLoad(exports, ["List"], () => require("./list"));

export { NetworkOptimizationArgs, NetworkOptimizationState } from "./networkOptimization";
export type NetworkOptimization = import("./networkOptimization").NetworkOptimization;
export const NetworkOptimization: typeof import("./networkOptimization").NetworkOptimization = null as any;
utilities.lazyLoad(exports, ["NetworkOptimization"], () => require("./networkOptimization"));

export { OriginPoolArgs, OriginPoolState } from "./originPool";
export type OriginPool = import("./originPool").OriginPool;
export const OriginPool: typeof import("./originPool").OriginPool = null as any;
utilities.lazyLoad(exports, ["OriginPool"], () => require("./originPool"));

export { OriginRuleArgs, OriginRuleState } from "./originRule";
export type OriginRule = import("./originRule").OriginRule;
export const OriginRule: typeof import("./originRule").OriginRule = null as any;
utilities.lazyLoad(exports, ["OriginRule"], () => require("./originRule"));

export { PageArgs, PageState } from "./page";
export type Page = import("./page").Page;
export const Page: typeof import("./page").Page = null as any;
utilities.lazyLoad(exports, ["Page"], () => require("./page"));

export { RatePlanInstanceArgs, RatePlanInstanceState } from "./ratePlanInstance";
export type RatePlanInstance = import("./ratePlanInstance").RatePlanInstance;
export const RatePlanInstance: typeof import("./ratePlanInstance").RatePlanInstance = null as any;
utilities.lazyLoad(exports, ["RatePlanInstance"], () => require("./ratePlanInstance"));

export { RecordArgs, RecordState } from "./record";
export type Record = import("./record").Record;
export const Record: typeof import("./record").Record = null as any;
utilities.lazyLoad(exports, ["Record"], () => require("./record"));

export { RedirectRuleArgs, RedirectRuleState } from "./redirectRule";
export type RedirectRule = import("./redirectRule").RedirectRule;
export const RedirectRule: typeof import("./redirectRule").RedirectRule = null as any;
utilities.lazyLoad(exports, ["RedirectRule"], () => require("./redirectRule"));

export { RewriteUrlRuleArgs, RewriteUrlRuleState } from "./rewriteUrlRule";
export type RewriteUrlRule = import("./rewriteUrlRule").RewriteUrlRule;
export const RewriteUrlRule: typeof import("./rewriteUrlRule").RewriteUrlRule = null as any;
utilities.lazyLoad(exports, ["RewriteUrlRule"], () => require("./rewriteUrlRule"));

export { SiteArgs, SiteState } from "./site";
export type Site = import("./site").Site;
export const Site: typeof import("./site").Site = null as any;
utilities.lazyLoad(exports, ["Site"], () => require("./site"));

export { SiteDeliveryTaskArgs, SiteDeliveryTaskState } from "./siteDeliveryTask";
export type SiteDeliveryTask = import("./siteDeliveryTask").SiteDeliveryTask;
export const SiteDeliveryTask: typeof import("./siteDeliveryTask").SiteDeliveryTask = null as any;
utilities.lazyLoad(exports, ["SiteDeliveryTask"], () => require("./siteDeliveryTask"));

export { WaitingRoomArgs, WaitingRoomState } from "./waitingRoom";
export type WaitingRoom = import("./waitingRoom").WaitingRoom;
export const WaitingRoom: typeof import("./waitingRoom").WaitingRoom = null as any;
utilities.lazyLoad(exports, ["WaitingRoom"], () => require("./waitingRoom"));

export { WaitingRoomEventArgs, WaitingRoomEventState } from "./waitingRoomEvent";
export type WaitingRoomEvent = import("./waitingRoomEvent").WaitingRoomEvent;
export const WaitingRoomEvent: typeof import("./waitingRoomEvent").WaitingRoomEvent = null as any;
utilities.lazyLoad(exports, ["WaitingRoomEvent"], () => require("./waitingRoomEvent"));

export { WaitingRoomRuleArgs, WaitingRoomRuleState } from "./waitingRoomRule";
export type WaitingRoomRule = import("./waitingRoomRule").WaitingRoomRule;
export const WaitingRoomRule: typeof import("./waitingRoomRule").WaitingRoomRule = null as any;
utilities.lazyLoad(exports, ["WaitingRoomRule"], () => require("./waitingRoomRule"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:esa/cacheReserveInstance:CacheReserveInstance":
                return new CacheReserveInstance(name, <any>undefined, { urn })
            case "alicloud:esa/cacheRule:CacheRule":
                return new CacheRule(name, <any>undefined, { urn })
            case "alicloud:esa/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "alicloud:esa/clientCaCertificate:ClientCaCertificate":
                return new ClientCaCertificate(name, <any>undefined, { urn })
            case "alicloud:esa/clientCertificate:ClientCertificate":
                return new ClientCertificate(name, <any>undefined, { urn })
            case "alicloud:esa/compressionRule:CompressionRule":
                return new CompressionRule(name, <any>undefined, { urn })
            case "alicloud:esa/edgeContainerApp:EdgeContainerApp":
                return new EdgeContainerApp(name, <any>undefined, { urn })
            case "alicloud:esa/edgeContainerAppRecord:EdgeContainerAppRecord":
                return new EdgeContainerAppRecord(name, <any>undefined, { urn })
            case "alicloud:esa/httpRequestHeaderModificationRule:HttpRequestHeaderModificationRule":
                return new HttpRequestHeaderModificationRule(name, <any>undefined, { urn })
            case "alicloud:esa/httpResponseHeaderModificationRule:HttpResponseHeaderModificationRule":
                return new HttpResponseHeaderModificationRule(name, <any>undefined, { urn })
            case "alicloud:esa/httpsApplicationConfiguration:HttpsApplicationConfiguration":
                return new HttpsApplicationConfiguration(name, <any>undefined, { urn })
            case "alicloud:esa/httpsBasicConfiguration:HttpsBasicConfiguration":
                return new HttpsBasicConfiguration(name, <any>undefined, { urn })
            case "alicloud:esa/imageTransform:ImageTransform":
                return new ImageTransform(name, <any>undefined, { urn })
            case "alicloud:esa/kvNamespace:KvNamespace":
                return new KvNamespace(name, <any>undefined, { urn })
            case "alicloud:esa/list:List":
                return new List(name, <any>undefined, { urn })
            case "alicloud:esa/networkOptimization:NetworkOptimization":
                return new NetworkOptimization(name, <any>undefined, { urn })
            case "alicloud:esa/originPool:OriginPool":
                return new OriginPool(name, <any>undefined, { urn })
            case "alicloud:esa/originRule:OriginRule":
                return new OriginRule(name, <any>undefined, { urn })
            case "alicloud:esa/page:Page":
                return new Page(name, <any>undefined, { urn })
            case "alicloud:esa/ratePlanInstance:RatePlanInstance":
                return new RatePlanInstance(name, <any>undefined, { urn })
            case "alicloud:esa/record:Record":
                return new Record(name, <any>undefined, { urn })
            case "alicloud:esa/redirectRule:RedirectRule":
                return new RedirectRule(name, <any>undefined, { urn })
            case "alicloud:esa/rewriteUrlRule:RewriteUrlRule":
                return new RewriteUrlRule(name, <any>undefined, { urn })
            case "alicloud:esa/site:Site":
                return new Site(name, <any>undefined, { urn })
            case "alicloud:esa/siteDeliveryTask:SiteDeliveryTask":
                return new SiteDeliveryTask(name, <any>undefined, { urn })
            case "alicloud:esa/waitingRoom:WaitingRoom":
                return new WaitingRoom(name, <any>undefined, { urn })
            case "alicloud:esa/waitingRoomEvent:WaitingRoomEvent":
                return new WaitingRoomEvent(name, <any>undefined, { urn })
            case "alicloud:esa/waitingRoomRule:WaitingRoomRule":
                return new WaitingRoomRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "esa/cacheReserveInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/cacheRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/certificate", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/clientCaCertificate", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/clientCertificate", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/compressionRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/edgeContainerApp", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/edgeContainerAppRecord", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/httpRequestHeaderModificationRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/httpResponseHeaderModificationRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/httpsApplicationConfiguration", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/httpsBasicConfiguration", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/imageTransform", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/kvNamespace", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/list", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/networkOptimization", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/originPool", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/originRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/page", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/ratePlanInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/record", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/redirectRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/rewriteUrlRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/site", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/siteDeliveryTask", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/waitingRoom", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/waitingRoomEvent", _module)
pulumi.runtime.registerResourceModule("alicloud", "esa/waitingRoomRule", _module)
