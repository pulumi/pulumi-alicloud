// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ESA Video Processing resource.
 *
 * For information about ESA Video Processing and how to use it, see [What is Video Processing](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateVideoProcessing).
 *
 * > **NOTE:** Available since v1.251.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.esa.getSites({
 *     planSubscribeType: "enterpriseplan",
 * });
 * const defaultSite = new alicloud.esa.Site("default", {
 *     siteName: "chenxin0116.site",
 *     instanceId: _default.then(_default => _default.sites?.[0]?.instanceId),
 *     coverage: "overseas",
 *     accessType: "NS",
 * });
 * const defaultVideoProcessing = new alicloud.esa.VideoProcessing("default", {
 *     videoSeekEnable: "on",
 *     ruleEnable: "on",
 *     mp4SeekEnd: "end",
 *     flvSeekStart: "start",
 *     rule: "(http.host eq \"video.example.com\")",
 *     flvVideoSeekMode: "by_byte",
 *     mp4SeekStart: "start",
 *     flvSeekEnd: "end",
 *     siteId: defaultSite.id,
 *     sequence: 1,
 *     siteVersion: 0,
 *     ruleName: "example",
 * });
 * ```
 *
 * ## Import
 *
 * ESA Video Processing can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:esa/videoProcessing:VideoProcessing example <site_id>:<config_id>
 * ```
 */
export class VideoProcessing extends pulumi.CustomResource {
    /**
     * Get an existing VideoProcessing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VideoProcessingState, opts?: pulumi.CustomResourceOptions): VideoProcessing {
        return new VideoProcessing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:esa/videoProcessing:VideoProcessing';

    /**
     * Returns true if the given object is an instance of VideoProcessing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VideoProcessing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VideoProcessing.__pulumiType;
    }

    /**
     * Config Id
     */
    public /*out*/ readonly configId!: pulumi.Output<number>;
    /**
     * Custom FLV end parameters.
     */
    public readonly flvSeekEnd!: pulumi.Output<string | undefined>;
    /**
     * Custom FLV start parameters.
     */
    public readonly flvSeekStart!: pulumi.Output<string | undefined>;
    /**
     * FLV drag mode. Value range:
     */
    public readonly flvVideoSeekMode!: pulumi.Output<string | undefined>;
    /**
     * Custom mp4 end parameters.
     */
    public readonly mp4SeekEnd!: pulumi.Output<string | undefined>;
    /**
     * Custom mp4 start parameters.
     */
    public readonly mp4SeekStart!: pulumi.Output<string | undefined>;
    /**
     * Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\")
     */
    public readonly rule!: pulumi.Output<string | undefined>;
    /**
     * Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     */
    public readonly ruleEnable!: pulumi.Output<string | undefined>;
    /**
     * Rule name. When adding global configuration, this parameter does not need to be set.
     */
    public readonly ruleName!: pulumi.Output<string | undefined>;
    /**
     * Order of rule execution. The smaller the value, the higher the priority for execution.
     */
    public readonly sequence!: pulumi.Output<number | undefined>;
    /**
     * The site ID, which can be obtained by calling the ListSites API.
     */
    public readonly siteId!: pulumi.Output<number>;
    /**
     * The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
     */
    public readonly siteVersion!: pulumi.Output<number | undefined>;
    /**
     * Drag and drop the play function switch. Value range:
     */
    public readonly videoSeekEnable!: pulumi.Output<string | undefined>;

    /**
     * Create a VideoProcessing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VideoProcessingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VideoProcessingArgs | VideoProcessingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VideoProcessingState | undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["flvSeekEnd"] = state ? state.flvSeekEnd : undefined;
            resourceInputs["flvSeekStart"] = state ? state.flvSeekStart : undefined;
            resourceInputs["flvVideoSeekMode"] = state ? state.flvVideoSeekMode : undefined;
            resourceInputs["mp4SeekEnd"] = state ? state.mp4SeekEnd : undefined;
            resourceInputs["mp4SeekStart"] = state ? state.mp4SeekStart : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["ruleEnable"] = state ? state.ruleEnable : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["sequence"] = state ? state.sequence : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["siteVersion"] = state ? state.siteVersion : undefined;
            resourceInputs["videoSeekEnable"] = state ? state.videoSeekEnable : undefined;
        } else {
            const args = argsOrState as VideoProcessingArgs | undefined;
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["flvSeekEnd"] = args ? args.flvSeekEnd : undefined;
            resourceInputs["flvSeekStart"] = args ? args.flvSeekStart : undefined;
            resourceInputs["flvVideoSeekMode"] = args ? args.flvVideoSeekMode : undefined;
            resourceInputs["mp4SeekEnd"] = args ? args.mp4SeekEnd : undefined;
            resourceInputs["mp4SeekStart"] = args ? args.mp4SeekStart : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["ruleEnable"] = args ? args.ruleEnable : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["sequence"] = args ? args.sequence : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["siteVersion"] = args ? args.siteVersion : undefined;
            resourceInputs["videoSeekEnable"] = args ? args.videoSeekEnable : undefined;
            resourceInputs["configId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VideoProcessing.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VideoProcessing resources.
 */
export interface VideoProcessingState {
    /**
     * Config Id
     */
    configId?: pulumi.Input<number>;
    /**
     * Custom FLV end parameters.
     */
    flvSeekEnd?: pulumi.Input<string>;
    /**
     * Custom FLV start parameters.
     */
    flvSeekStart?: pulumi.Input<string>;
    /**
     * FLV drag mode. Value range:
     */
    flvVideoSeekMode?: pulumi.Input<string>;
    /**
     * Custom mp4 end parameters.
     */
    mp4SeekEnd?: pulumi.Input<string>;
    /**
     * Custom mp4 start parameters.
     */
    mp4SeekStart?: pulumi.Input<string>;
    /**
     * Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\")
     */
    rule?: pulumi.Input<string>;
    /**
     * Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     */
    ruleEnable?: pulumi.Input<string>;
    /**
     * Rule name. When adding global configuration, this parameter does not need to be set.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * Order of rule execution. The smaller the value, the higher the priority for execution.
     */
    sequence?: pulumi.Input<number>;
    /**
     * The site ID, which can be obtained by calling the ListSites API.
     */
    siteId?: pulumi.Input<number>;
    /**
     * The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
     */
    siteVersion?: pulumi.Input<number>;
    /**
     * Drag and drop the play function switch. Value range:
     */
    videoSeekEnable?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VideoProcessing resource.
 */
export interface VideoProcessingArgs {
    /**
     * Custom FLV end parameters.
     */
    flvSeekEnd?: pulumi.Input<string>;
    /**
     * Custom FLV start parameters.
     */
    flvSeekStart?: pulumi.Input<string>;
    /**
     * FLV drag mode. Value range:
     */
    flvVideoSeekMode?: pulumi.Input<string>;
    /**
     * Custom mp4 end parameters.
     */
    mp4SeekEnd?: pulumi.Input<string>;
    /**
     * Custom mp4 start parameters.
     */
    mp4SeekStart?: pulumi.Input<string>;
    /**
     * Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\")
     */
    rule?: pulumi.Input<string>;
    /**
     * Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     */
    ruleEnable?: pulumi.Input<string>;
    /**
     * Rule name. When adding global configuration, this parameter does not need to be set.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * Order of rule execution. The smaller the value, the higher the priority for execution.
     */
    sequence?: pulumi.Input<number>;
    /**
     * The site ID, which can be obtained by calling the ListSites API.
     */
    siteId: pulumi.Input<number>;
    /**
     * The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
     */
    siteVersion?: pulumi.Input<number>;
    /**
     * Drag and drop the play function switch. Value range:
     */
    videoSeekEnable?: pulumi.Input<string>;
}
