// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ESA Image Transform resource.
 *
 * For information about ESA Image Transform and how to use it, see [What is Image Transform](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateImageTransform).
 *
 * > **NOTE:** Available since v1.244.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = alicloud.esa.getSites({
 *     planSubscribeType: "enterpriseplan",
 * });
 * const defaultSite = new alicloud.esa.Site("default", {
 *     siteName: "imagetransform.tf.com",
 *     instanceId: _default.then(_default => _default.sites?.[0]?.instanceId),
 *     coverage: "domestic",
 *     accessType: "NS",
 * });
 * const defaultImageTransform = new alicloud.esa.ImageTransform("default", {
 *     rule: "http.host eq \"video.example.com\"",
 *     siteVersion: 0,
 *     ruleName: "rule_example",
 *     siteId: defaultSite.id,
 *     ruleEnable: "off",
 *     enable: "off",
 * });
 * ```
 *
 * ## Import
 *
 * ESA Image Transform can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:esa/imageTransform:ImageTransform example <site_id>:<config_id>
 * ```
 */
export class ImageTransform extends pulumi.CustomResource {
    /**
     * Get an existing ImageTransform resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageTransformState, opts?: pulumi.CustomResourceOptions): ImageTransform {
        return new ImageTransform(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:esa/imageTransform:ImageTransform';

    /**
     * Returns true if the given object is an instance of ImageTransform.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageTransform {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageTransform.__pulumiType;
    }

    /**
     * Config Id
     */
    public /*out*/ readonly configId!: pulumi.Output<number>;
    /**
     * Indicates whether the image transformations feature is enabled. Valid values:
     */
    public readonly enable!: pulumi.Output<string | undefined>;
    /**
     * The rule content, which is a policy or conditional expression.
     */
    public readonly rule!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the rule is enabled. Valid values:
     */
    public readonly ruleEnable!: pulumi.Output<string | undefined>;
    /**
     * Rule name, you can find out the rule whose rule name is the passed field.
     */
    public readonly ruleName!: pulumi.Output<string | undefined>;
    /**
     * The site ID, which can be obtained by calling the ListSites API.
     */
    public readonly siteId!: pulumi.Output<number>;
    /**
     * The version number of the website.
     */
    public readonly siteVersion!: pulumi.Output<number | undefined>;

    /**
     * Create a ImageTransform resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageTransformArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageTransformArgs | ImageTransformState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageTransformState | undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["ruleEnable"] = state ? state.ruleEnable : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["siteVersion"] = state ? state.siteVersion : undefined;
        } else {
            const args = argsOrState as ImageTransformArgs | undefined;
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["ruleEnable"] = args ? args.ruleEnable : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["siteVersion"] = args ? args.siteVersion : undefined;
            resourceInputs["configId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageTransform.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImageTransform resources.
 */
export interface ImageTransformState {
    /**
     * Config Id
     */
    configId?: pulumi.Input<number>;
    /**
     * Indicates whether the image transformations feature is enabled. Valid values:
     */
    enable?: pulumi.Input<string>;
    /**
     * The rule content, which is a policy or conditional expression.
     */
    rule?: pulumi.Input<string>;
    /**
     * Indicates whether the rule is enabled. Valid values:
     */
    ruleEnable?: pulumi.Input<string>;
    /**
     * Rule name, you can find out the rule whose rule name is the passed field.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * The site ID, which can be obtained by calling the ListSites API.
     */
    siteId?: pulumi.Input<number>;
    /**
     * The version number of the website.
     */
    siteVersion?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ImageTransform resource.
 */
export interface ImageTransformArgs {
    /**
     * Indicates whether the image transformations feature is enabled. Valid values:
     */
    enable?: pulumi.Input<string>;
    /**
     * The rule content, which is a policy or conditional expression.
     */
    rule?: pulumi.Input<string>;
    /**
     * Indicates whether the rule is enabled. Valid values:
     */
    ruleEnable?: pulumi.Input<string>;
    /**
     * Rule name, you can find out the rule whose rule name is the passed field.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * The site ID, which can be obtained by calling the ListSites API.
     */
    siteId: pulumi.Input<number>;
    /**
     * The version number of the website.
     */
    siteVersion?: pulumi.Input<number>;
}
