// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ESA Scheduled Preload Execution resource.
 *
 * For information about ESA Scheduled Preload Execution and how to use it, see [What is Scheduled Preload Execution](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateScheduledPreloadExecutions).
 *
 * > **NOTE:** Available since v1.248.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = alicloud.esa.getSites({
 *     planSubscribeType: "enterpriseplan",
 * });
 * const defaultSite = new alicloud.esa.Site("default", {
 *     siteName: "terraform.cn",
 *     instanceId: _default.then(_default => _default.sites?.[0]?.instanceId),
 *     coverage: "overseas",
 *     accessType: "NS",
 * });
 * const defaultScheduledPreloadJob = new alicloud.esa.ScheduledPreloadJob("default", {
 *     insertWay: "textBox",
 *     siteId: defaultSite.id,
 *     scheduledPreloadJobName: "example_scheduledpreloadexecution_job",
 *     urlList: "http://example.gositecdn.cn/example/example.txt",
 * });
 * const defaultScheduledPreloadExecution = new alicloud.esa.ScheduledPreloadExecution("default", {
 *     sliceLen: 5,
 *     endTime: "2024-06-04T10:02:09.000+08:00",
 *     startTime: "2024-06-04T00:00:00.000+08:00",
 *     scheduledPreloadJobId: defaultScheduledPreloadJob.scheduledPreloadJobId,
 *     interval: 30,
 * });
 * ```
 *
 * ## Import
 *
 * ESA Scheduled Preload Execution can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:esa/scheduledPreloadExecution:ScheduledPreloadExecution example <scheduled_preload_job_id>:<scheduled_preload_execution_id>
 * ```
 */
export class ScheduledPreloadExecution extends pulumi.CustomResource {
    /**
     * Get an existing ScheduledPreloadExecution resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduledPreloadExecutionState, opts?: pulumi.CustomResourceOptions): ScheduledPreloadExecution {
        return new ScheduledPreloadExecution(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:esa/scheduledPreloadExecution:ScheduledPreloadExecution';

    /**
     * Returns true if the given object is an instance of ScheduledPreloadExecution.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScheduledPreloadExecution {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduledPreloadExecution.__pulumiType;
    }

    /**
     * The end time of the prefetch plan.
     */
    public readonly endTime!: pulumi.Output<string | undefined>;
    /**
     * The time interval between each batch execution. Unit: seconds.
     */
    public readonly interval!: pulumi.Output<number>;
    /**
     * The ID of the prefetch plan.
     */
    public /*out*/ readonly scheduledPreloadExecutionId!: pulumi.Output<string>;
    /**
     * The ID of the prefetch task.
     */
    public readonly scheduledPreloadJobId!: pulumi.Output<string>;
    /**
     * The number of URLs prefetched in each batch.
     */
    public readonly sliceLen!: pulumi.Output<number>;
    /**
     * The start time of the prefetch plan.
     */
    public readonly startTime!: pulumi.Output<string | undefined>;
    /**
     * The status of the prefetch plan, including the following statuses.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a ScheduledPreloadExecution resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduledPreloadExecutionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduledPreloadExecutionArgs | ScheduledPreloadExecutionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduledPreloadExecutionState | undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["scheduledPreloadExecutionId"] = state ? state.scheduledPreloadExecutionId : undefined;
            resourceInputs["scheduledPreloadJobId"] = state ? state.scheduledPreloadJobId : undefined;
            resourceInputs["sliceLen"] = state ? state.sliceLen : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ScheduledPreloadExecutionArgs | undefined;
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.scheduledPreloadJobId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduledPreloadJobId'");
            }
            if ((!args || args.sliceLen === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sliceLen'");
            }
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["scheduledPreloadJobId"] = args ? args.scheduledPreloadJobId : undefined;
            resourceInputs["sliceLen"] = args ? args.sliceLen : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["scheduledPreloadExecutionId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScheduledPreloadExecution.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScheduledPreloadExecution resources.
 */
export interface ScheduledPreloadExecutionState {
    /**
     * The end time of the prefetch plan.
     */
    endTime?: pulumi.Input<string>;
    /**
     * The time interval between each batch execution. Unit: seconds.
     */
    interval?: pulumi.Input<number>;
    /**
     * The ID of the prefetch plan.
     */
    scheduledPreloadExecutionId?: pulumi.Input<string>;
    /**
     * The ID of the prefetch task.
     */
    scheduledPreloadJobId?: pulumi.Input<string>;
    /**
     * The number of URLs prefetched in each batch.
     */
    sliceLen?: pulumi.Input<number>;
    /**
     * The start time of the prefetch plan.
     */
    startTime?: pulumi.Input<string>;
    /**
     * The status of the prefetch plan, including the following statuses.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScheduledPreloadExecution resource.
 */
export interface ScheduledPreloadExecutionArgs {
    /**
     * The end time of the prefetch plan.
     */
    endTime?: pulumi.Input<string>;
    /**
     * The time interval between each batch execution. Unit: seconds.
     */
    interval: pulumi.Input<number>;
    /**
     * The ID of the prefetch task.
     */
    scheduledPreloadJobId: pulumi.Input<string>;
    /**
     * The number of URLs prefetched in each batch.
     */
    sliceLen: pulumi.Input<number>;
    /**
     * The start time of the prefetch plan.
     */
    startTime?: pulumi.Input<string>;
}
