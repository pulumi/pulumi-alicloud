// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ESA Routine Route resource.
 *
 * For information about ESA Routine Route and how to use it, see [What is Routine Route](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateRoutineRoute).
 *
 * > **NOTE:** Available since v1.251.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.esa.getSites({
 *     planSubscribeType: "enterpriseplan",
 * });
 * const defaultSite = new alicloud.esa.Site("default", {
 *     siteName: "chenxin0116.site",
 *     instanceId: _default.then(_default => _default.sites?.[0]?.instanceId),
 *     coverage: "overseas",
 *     accessType: "NS",
 * });
 * const defaultRoutine = new alicloud.esa.Routine("default", {
 *     description: "example-routine2",
 *     name: "example-routine2",
 * });
 * const defaultRoutineRoute = new alicloud.esa.RoutineRoute("default", {
 *     routeEnable: "on",
 *     rule: "(http.host eq \"video.example1.com\")",
 *     sequence: 1,
 *     routineName: defaultRoutine.name,
 *     siteId: defaultSite.id,
 *     bypass: "off",
 *     routeName: "example_routine",
 * });
 * ```
 *
 * ## Import
 *
 * ESA Routine Route can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:esa/routineRoute:RoutineRoute example <site_id>:<routine_name>:<config_id>
 * ```
 */
export class RoutineRoute extends pulumi.CustomResource {
    /**
     * Get an existing RoutineRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoutineRouteState, opts?: pulumi.CustomResourceOptions): RoutineRoute {
        return new RoutineRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:esa/routineRoute:RoutineRoute';

    /**
     * Returns true if the given object is an instance of RoutineRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoutineRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoutineRoute.__pulumiType;
    }

    /**
     * Bypass mode. Value range:
     * - on: Open
     * - off: off
     */
    declare public readonly bypass: pulumi.Output<string | undefined>;
    /**
     * Config Id
     */
    declare public /*out*/ readonly configId: pulumi.Output<number>;
    /**
     * Routing switch. Value range:
     * - on: Open
     * - off: off
     */
    declare public readonly routeEnable: pulumi.Output<string | undefined>;
    /**
     * The route name.
     */
    declare public readonly routeName: pulumi.Output<string | undefined>;
    /**
     * The edge function Routine name.
     */
    declare public readonly routineName: pulumi.Output<string>;
    /**
     * The rule content.
     */
    declare public readonly rule: pulumi.Output<string | undefined>;
    /**
     * Rule execution order.
     */
    declare public readonly sequence: pulumi.Output<number | undefined>;
    /**
     * Site Id
     */
    declare public readonly siteId: pulumi.Output<number>;

    /**
     * Create a RoutineRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoutineRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoutineRouteArgs | RoutineRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoutineRouteState | undefined;
            resourceInputs["bypass"] = state?.bypass;
            resourceInputs["configId"] = state?.configId;
            resourceInputs["routeEnable"] = state?.routeEnable;
            resourceInputs["routeName"] = state?.routeName;
            resourceInputs["routineName"] = state?.routineName;
            resourceInputs["rule"] = state?.rule;
            resourceInputs["sequence"] = state?.sequence;
            resourceInputs["siteId"] = state?.siteId;
        } else {
            const args = argsOrState as RoutineRouteArgs | undefined;
            if (args?.routineName === undefined && !opts.urn) {
                throw new Error("Missing required property 'routineName'");
            }
            if (args?.siteId === undefined && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["bypass"] = args?.bypass;
            resourceInputs["routeEnable"] = args?.routeEnable;
            resourceInputs["routeName"] = args?.routeName;
            resourceInputs["routineName"] = args?.routineName;
            resourceInputs["rule"] = args?.rule;
            resourceInputs["sequence"] = args?.sequence;
            resourceInputs["siteId"] = args?.siteId;
            resourceInputs["configId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoutineRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RoutineRoute resources.
 */
export interface RoutineRouteState {
    /**
     * Bypass mode. Value range:
     * - on: Open
     * - off: off
     */
    bypass?: pulumi.Input<string>;
    /**
     * Config Id
     */
    configId?: pulumi.Input<number>;
    /**
     * Routing switch. Value range:
     * - on: Open
     * - off: off
     */
    routeEnable?: pulumi.Input<string>;
    /**
     * The route name.
     */
    routeName?: pulumi.Input<string>;
    /**
     * The edge function Routine name.
     */
    routineName?: pulumi.Input<string>;
    /**
     * The rule content.
     */
    rule?: pulumi.Input<string>;
    /**
     * Rule execution order.
     */
    sequence?: pulumi.Input<number>;
    /**
     * Site Id
     */
    siteId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RoutineRoute resource.
 */
export interface RoutineRouteArgs {
    /**
     * Bypass mode. Value range:
     * - on: Open
     * - off: off
     */
    bypass?: pulumi.Input<string>;
    /**
     * Routing switch. Value range:
     * - on: Open
     * - off: off
     */
    routeEnable?: pulumi.Input<string>;
    /**
     * The route name.
     */
    routeName?: pulumi.Input<string>;
    /**
     * The edge function Routine name.
     */
    routineName: pulumi.Input<string>;
    /**
     * The rule content.
     */
    rule?: pulumi.Input<string>;
    /**
     * Rule execution order.
     */
    sequence?: pulumi.Input<number>;
    /**
     * Site Id
     */
    siteId: pulumi.Input<number>;
}
