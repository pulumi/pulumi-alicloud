// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ESA Scheduled Preload Job resource.
 *
 * For information about ESA Scheduled Preload Job and how to use it, see [What is Scheduled Preload Job](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateScheduledPreloadJob).
 *
 * > **NOTE:** Available since v1.248.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = alicloud.esa.getSites({
 *     planSubscribeType: "enterpriseplan",
 * });
 * const defaultSite = new alicloud.esa.Site("default", {
 *     siteName: "terraform.cn",
 *     instanceId: _default.then(_default => _default.sites?.[0]?.instanceId),
 *     coverage: "overseas",
 *     accessType: "NS",
 * });
 * const defaultScheduledPreloadJob = new alicloud.esa.ScheduledPreloadJob("default", {
 *     insertWay: "textBox",
 *     siteId: defaultSite.id,
 *     scheduledPreloadJobName: "example_scheduledpreloadexecution_job",
 *     urlList: "http://example.gositecdn.cn/example/example.txt",
 * });
 * ```
 *
 * ## Import
 *
 * ESA Scheduled Preload Job can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:esa/scheduledPreloadJob:ScheduledPreloadJob example <site_id>:<scheduled_preload_job_id>
 * ```
 */
export class ScheduledPreloadJob extends pulumi.CustomResource {
    /**
     * Get an existing ScheduledPreloadJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduledPreloadJobState, opts?: pulumi.CustomResourceOptions): ScheduledPreloadJob {
        return new ScheduledPreloadJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:esa/scheduledPreloadJob:ScheduledPreloadJob';

    /**
     * Returns true if the given object is an instance of ScheduledPreloadJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScheduledPreloadJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduledPreloadJob.__pulumiType;
    }

    /**
     * The time when the task was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The method to submit the URLs to be prefetched.
     */
    public readonly insertWay!: pulumi.Output<string>;
    /**
     * Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
     */
    public readonly ossUrl!: pulumi.Output<string | undefined>;
    /**
     * The ID of the prefetch task.
     */
    public /*out*/ readonly scheduledPreloadJobId!: pulumi.Output<string>;
    /**
     * The task name.
     */
    public readonly scheduledPreloadJobName!: pulumi.Output<string>;
    /**
     * The site ID.
     */
    public readonly siteId!: pulumi.Output<number>;
    /**
     * A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
     */
    public readonly urlList!: pulumi.Output<string | undefined>;

    /**
     * Create a ScheduledPreloadJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduledPreloadJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduledPreloadJobArgs | ScheduledPreloadJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduledPreloadJobState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["insertWay"] = state ? state.insertWay : undefined;
            resourceInputs["ossUrl"] = state ? state.ossUrl : undefined;
            resourceInputs["scheduledPreloadJobId"] = state ? state.scheduledPreloadJobId : undefined;
            resourceInputs["scheduledPreloadJobName"] = state ? state.scheduledPreloadJobName : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["urlList"] = state ? state.urlList : undefined;
        } else {
            const args = argsOrState as ScheduledPreloadJobArgs | undefined;
            if ((!args || args.insertWay === undefined) && !opts.urn) {
                throw new Error("Missing required property 'insertWay'");
            }
            if ((!args || args.scheduledPreloadJobName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduledPreloadJobName'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["insertWay"] = args ? args.insertWay : undefined;
            resourceInputs["ossUrl"] = args ? args.ossUrl : undefined;
            resourceInputs["scheduledPreloadJobName"] = args ? args.scheduledPreloadJobName : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["urlList"] = args ? args.urlList : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["scheduledPreloadJobId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScheduledPreloadJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScheduledPreloadJob resources.
 */
export interface ScheduledPreloadJobState {
    /**
     * The time when the task was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The method to submit the URLs to be prefetched.
     */
    insertWay?: pulumi.Input<string>;
    /**
     * Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
     */
    ossUrl?: pulumi.Input<string>;
    /**
     * The ID of the prefetch task.
     */
    scheduledPreloadJobId?: pulumi.Input<string>;
    /**
     * The task name.
     */
    scheduledPreloadJobName?: pulumi.Input<string>;
    /**
     * The site ID.
     */
    siteId?: pulumi.Input<number>;
    /**
     * A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
     */
    urlList?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScheduledPreloadJob resource.
 */
export interface ScheduledPreloadJobArgs {
    /**
     * The method to submit the URLs to be prefetched.
     */
    insertWay: pulumi.Input<string>;
    /**
     * Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
     */
    ossUrl?: pulumi.Input<string>;
    /**
     * The task name.
     */
    scheduledPreloadJobName: pulumi.Input<string>;
    /**
     * The site ID.
     */
    siteId: pulumi.Input<number>;
    /**
     * A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
     */
    urlList?: pulumi.Input<string>;
}
