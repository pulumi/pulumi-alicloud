// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a ESA Load Balancer resource.
 *
 * For information about ESA Load Balancer and how to use it, see [What is Load Balancer](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateLoadBalancer).
 *
 * > **NOTE:** Available since v1.262.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.esa.getSites({
 *     planSubscribeType: "enterpriseplan",
 * });
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const resourceSiteOriginPool = new alicloud.esa.Site("resource_Site_OriginPool", {
 *     siteName: `${name}${defaultInteger.result}.com`,
 *     instanceId: _default.then(_default => _default.sites?.[0]?.instanceId),
 *     coverage: "overseas",
 *     accessType: "NS",
 * });
 * const resourceOriginPoolLoadBalancer11 = new alicloud.esa.OriginPool("resource_OriginPool_LoadBalancer_1_1", {
 *     origins: [{
 *         type: "ip_domain",
 *         address: "www.example.com",
 *         header: "{\"Host\":[\"www.example.com\"]}",
 *         enabled: true,
 *         weight: 30,
 *         name: "origin1",
 *     }],
 *     siteId: resourceSiteOriginPool.id,
 *     originPoolName: "originpool1",
 *     enabled: true,
 * });
 * const defaultLoadBalancer = new alicloud.esa.LoadBalancer("default", {
 *     loadBalancerName: "lb.exampleloadbalancer.top",
 *     fallbackPool: resourceOriginPoolLoadBalancer11.originPoolId,
 *     siteId: resourceSiteOriginPool.id,
 *     description: name,
 *     defaultPools: [resourceOriginPoolLoadBalancer11.originPoolId],
 *     steeringPolicy: "geo",
 *     monitor: {
 *         type: "ICMP Ping",
 *         timeout: 5,
 *         monitoringRegion: "ChineseMainland",
 *         consecutiveUp: 3,
 *         consecutiveDown: 5,
 *         interval: 60,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ESA Load Balancer can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:esa/loadBalancer:LoadBalancer example <site_id>:<load_balancer_id>
 * ```
 */
export class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState, opts?: pulumi.CustomResourceOptions): LoadBalancer {
        return new LoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:esa/loadBalancer:LoadBalancer';

    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }

    /**
     * Cross-pool origin configuration. See `adaptiveRouting` below.
     */
    declare public readonly adaptiveRouting: pulumi.Output<outputs.esa.LoadBalancerAdaptiveRouting>;
    /**
     * List of default pool IDs.
     */
    declare public readonly defaultPools: pulumi.Output<number[]>;
    /**
     * The detailed description of the load balancer for easy management and identification.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Whether the load balancer is enabled.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
     */
    declare public readonly fallbackPool: pulumi.Output<number>;
    /**
     * The unique identifier ID of the load balancer.
     */
    declare public /*out*/ readonly loadBalancerId: pulumi.Output<number>;
    /**
     * The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
     */
    declare public readonly loadBalancerName: pulumi.Output<string>;
    /**
     * Monitor configuration for health check. See `monitor` below.
     */
    declare public readonly monitor: pulumi.Output<outputs.esa.LoadBalancerMonitor>;
    /**
     * Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
     */
    declare public readonly randomSteering: pulumi.Output<outputs.esa.LoadBalancerRandomSteering | undefined>;
    /**
     * Address pools corresponding to primary regions.
     */
    declare public readonly regionPools: pulumi.Output<string | undefined>;
    /**
     * Rule configuration list, used to define behavior under specific conditions. See `rules` below.
     */
    declare public readonly rules: pulumi.Output<outputs.esa.LoadBalancerRule[] | undefined>;
    /**
     * Session persistence. Valid values:
     */
    declare public readonly sessionAffinity: pulumi.Output<string | undefined>;
    /**
     * The site ID.
     */
    declare public readonly siteId: pulumi.Output<number>;
    /**
     * The status of the load balancer.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Load balancing policy.
     */
    declare public readonly steeringPolicy: pulumi.Output<string>;
    /**
     * Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
     */
    declare public readonly subRegionPools: pulumi.Output<string | undefined>;
    /**
     * TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
     */
    declare public readonly ttl: pulumi.Output<number>;

    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerArgs | LoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerState | undefined;
            resourceInputs["adaptiveRouting"] = state?.adaptiveRouting;
            resourceInputs["defaultPools"] = state?.defaultPools;
            resourceInputs["description"] = state?.description;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["fallbackPool"] = state?.fallbackPool;
            resourceInputs["loadBalancerId"] = state?.loadBalancerId;
            resourceInputs["loadBalancerName"] = state?.loadBalancerName;
            resourceInputs["monitor"] = state?.monitor;
            resourceInputs["randomSteering"] = state?.randomSteering;
            resourceInputs["regionPools"] = state?.regionPools;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["sessionAffinity"] = state?.sessionAffinity;
            resourceInputs["siteId"] = state?.siteId;
            resourceInputs["status"] = state?.status;
            resourceInputs["steeringPolicy"] = state?.steeringPolicy;
            resourceInputs["subRegionPools"] = state?.subRegionPools;
            resourceInputs["ttl"] = state?.ttl;
        } else {
            const args = argsOrState as LoadBalancerArgs | undefined;
            if (args?.defaultPools === undefined && !opts.urn) {
                throw new Error("Missing required property 'defaultPools'");
            }
            if (args?.fallbackPool === undefined && !opts.urn) {
                throw new Error("Missing required property 'fallbackPool'");
            }
            if (args?.loadBalancerName === undefined && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerName'");
            }
            if (args?.monitor === undefined && !opts.urn) {
                throw new Error("Missing required property 'monitor'");
            }
            if (args?.siteId === undefined && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if (args?.steeringPolicy === undefined && !opts.urn) {
                throw new Error("Missing required property 'steeringPolicy'");
            }
            resourceInputs["adaptiveRouting"] = args?.adaptiveRouting;
            resourceInputs["defaultPools"] = args?.defaultPools;
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["fallbackPool"] = args?.fallbackPool;
            resourceInputs["loadBalancerName"] = args?.loadBalancerName;
            resourceInputs["monitor"] = args?.monitor;
            resourceInputs["randomSteering"] = args?.randomSteering;
            resourceInputs["regionPools"] = args?.regionPools;
            resourceInputs["rules"] = args?.rules;
            resourceInputs["sessionAffinity"] = args?.sessionAffinity;
            resourceInputs["siteId"] = args?.siteId;
            resourceInputs["steeringPolicy"] = args?.steeringPolicy;
            resourceInputs["subRegionPools"] = args?.subRegionPools;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["loadBalancerId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    /**
     * Cross-pool origin configuration. See `adaptiveRouting` below.
     */
    adaptiveRouting?: pulumi.Input<inputs.esa.LoadBalancerAdaptiveRouting>;
    /**
     * List of default pool IDs.
     */
    defaultPools?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The detailed description of the load balancer for easy management and identification.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the load balancer is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
     */
    fallbackPool?: pulumi.Input<number>;
    /**
     * The unique identifier ID of the load balancer.
     */
    loadBalancerId?: pulumi.Input<number>;
    /**
     * The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
     */
    loadBalancerName?: pulumi.Input<string>;
    /**
     * Monitor configuration for health check. See `monitor` below.
     */
    monitor?: pulumi.Input<inputs.esa.LoadBalancerMonitor>;
    /**
     * Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
     */
    randomSteering?: pulumi.Input<inputs.esa.LoadBalancerRandomSteering>;
    /**
     * Address pools corresponding to primary regions.
     */
    regionPools?: pulumi.Input<string>;
    /**
     * Rule configuration list, used to define behavior under specific conditions. See `rules` below.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.esa.LoadBalancerRule>[]>;
    /**
     * Session persistence. Valid values:
     */
    sessionAffinity?: pulumi.Input<string>;
    /**
     * The site ID.
     */
    siteId?: pulumi.Input<number>;
    /**
     * The status of the load balancer.
     */
    status?: pulumi.Input<string>;
    /**
     * Load balancing policy.
     */
    steeringPolicy?: pulumi.Input<string>;
    /**
     * Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
     */
    subRegionPools?: pulumi.Input<string>;
    /**
     * TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    /**
     * Cross-pool origin configuration. See `adaptiveRouting` below.
     */
    adaptiveRouting?: pulumi.Input<inputs.esa.LoadBalancerAdaptiveRouting>;
    /**
     * List of default pool IDs.
     */
    defaultPools: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The detailed description of the load balancer for easy management and identification.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the load balancer is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
     */
    fallbackPool: pulumi.Input<number>;
    /**
     * The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
     */
    loadBalancerName: pulumi.Input<string>;
    /**
     * Monitor configuration for health check. See `monitor` below.
     */
    monitor: pulumi.Input<inputs.esa.LoadBalancerMonitor>;
    /**
     * Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
     */
    randomSteering?: pulumi.Input<inputs.esa.LoadBalancerRandomSteering>;
    /**
     * Address pools corresponding to primary regions.
     */
    regionPools?: pulumi.Input<string>;
    /**
     * Rule configuration list, used to define behavior under specific conditions. See `rules` below.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.esa.LoadBalancerRule>[]>;
    /**
     * Session persistence. Valid values:
     */
    sessionAffinity?: pulumi.Input<string>;
    /**
     * The site ID.
     */
    siteId: pulumi.Input<number>;
    /**
     * Load balancing policy.
     */
    steeringPolicy: pulumi.Input<string>;
    /**
     * Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
     */
    subRegionPools?: pulumi.Input<string>;
    /**
     * TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
     */
    ttl?: pulumi.Input<number>;
}
