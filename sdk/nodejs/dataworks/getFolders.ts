// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the Data Works Folders of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available in v1.131.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.dataworks.Folder("default", {
 *     projectId: "xxxx",
 *     folderPath: "Business Flow/tfTestAcc/folderDi",
 * });
 * const ids = pulumi.all([_default.folderId, _default.projectId]).apply(([folderId, projectId]) => alicloud.dataworks.getFoldersOutput({
 *     ids: [folderId],
 *     projectId: projectId,
 *     parentFolderPath: "Business Flow/tfTestAcc/folderDi",
 * }));
 * export const dataWorksFolderId1 = ids.apply(ids => ids.folders?[0]?.id);
 * ```
 */
export function getFolders(args: GetFoldersArgs, opts?: pulumi.InvokeOptions): Promise<GetFoldersResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("alicloud:dataworks/getFolders:getFolders", {
        "ids": args.ids,
        "outputFile": args.outputFile,
        "parentFolderPath": args.parentFolderPath,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFolders.
 */
export interface GetFoldersArgs {
    /**
     * A list of Folder IDs.
     */
    ids?: string[];
    outputFile?: string;
    /**
     * The parent folder path.
     */
    parentFolderPath: string;
    /**
     * The ID of the project.
     */
    projectId: string;
}

/**
 * A collection of values returned by getFolders.
 */
export interface GetFoldersResult {
    readonly folders: outputs.dataworks.GetFoldersFolder[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly outputFile?: string;
    readonly parentFolderPath: string;
    readonly projectId: string;
}

export function getFoldersOutput(args: GetFoldersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFoldersResult> {
    return pulumi.output(args).apply(a => getFolders(a, opts))
}

/**
 * A collection of arguments for invoking getFolders.
 */
export interface GetFoldersOutputArgs {
    /**
     * A list of Folder IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    outputFile?: pulumi.Input<string>;
    /**
     * The parent folder path.
     */
    parentFolderPath: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId: pulumi.Input<string>;
}
