// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a DFS Vsc Mount Point resource. VSC mount point.
 *
 * For information about DFS Vsc Mount Point and how to use it, see [What is Vsc Mount Point](https://www.alibabacloud.com/help/en/aibaba-cloud-storage-services/latest/apsara-file-storage-for-hdfs).
 *
 * > **NOTE:** Available since v1.218.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const default = alicloud.dfs.getZones({});
 * const zoneId = _default.then(_default => _default.zones?.[0]?.zoneId);
 * const storageType = _default.then(_default => _default.zones?.[0]?.options?.[0]?.storageType);
 * const defaultFileSystem = new alicloud.dfs.FileSystem("default", {
 *     protocolType: "HDFS",
 *     description: name,
 *     fileSystemName: `${name}-${defaultInteger.result}`,
 *     spaceCapacity: 1024,
 *     throughputMode: "Provisioned",
 *     provisionedThroughputInMiBps: 512,
 *     storageType: storageType,
 *     zoneId: zoneId,
 * });
 * ```
 *
 * ## Import
 *
 * DFS Vsc Mount Point can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:dfs/vscMountPoint:VscMountPoint example <file_system_id>:<mount_point_id>
 * ```
 */
export class VscMountPoint extends pulumi.CustomResource {
    /**
     * Get an existing VscMountPoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VscMountPointState, opts?: pulumi.CustomResourceOptions): VscMountPoint {
        return new VscMountPoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:dfs/vscMountPoint:VscMountPoint';

    /**
     * Returns true if the given object is an instance of VscMountPoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VscMountPoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VscMountPoint.__pulumiType;
    }

    /**
     * Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
     */
    public readonly aliasPrefix!: pulumi.Output<string | undefined>;
    /**
     * The description of the Mount point.  The length is 0 to 100 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the HDFS file system resource associated with the VSC mount point.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * The collection of ECS instances on which the HDFS file system is mounted.
     */
    public /*out*/ readonly instances!: pulumi.Output<outputs.dfs.VscMountPointInstance[]>;
    /**
     * VSC mount point ID, which is the unique identifier of the vsc mount point and is used to access the associated HDFS file system.
     */
    public /*out*/ readonly mountPointId!: pulumi.Output<string>;

    /**
     * Create a VscMountPoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VscMountPointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VscMountPointArgs | VscMountPointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VscMountPointState | undefined;
            resourceInputs["aliasPrefix"] = state ? state.aliasPrefix : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["mountPointId"] = state ? state.mountPointId : undefined;
        } else {
            const args = argsOrState as VscMountPointArgs | undefined;
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            resourceInputs["aliasPrefix"] = args ? args.aliasPrefix : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["instances"] = undefined /*out*/;
            resourceInputs["mountPointId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VscMountPoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VscMountPoint resources.
 */
export interface VscMountPointState {
    /**
     * Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
     */
    aliasPrefix?: pulumi.Input<string>;
    /**
     * The description of the Mount point.  The length is 0 to 100 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the HDFS file system resource associated with the VSC mount point.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * The collection of ECS instances on which the HDFS file system is mounted.
     */
    instances?: pulumi.Input<pulumi.Input<inputs.dfs.VscMountPointInstance>[]>;
    /**
     * VSC mount point ID, which is the unique identifier of the vsc mount point and is used to access the associated HDFS file system.
     */
    mountPointId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VscMountPoint resource.
 */
export interface VscMountPointArgs {
    /**
     * Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
     */
    aliasPrefix?: pulumi.Input<string>;
    /**
     * The description of the Mount point.  The length is 0 to 100 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the HDFS file system resource associated with the VSC mount point.
     */
    fileSystemId: pulumi.Input<string>;
}
