// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Apsara File Storage for HDFS (DFS) File System resource.
 *
 * For information about Apsara File Storage for HDFS (DFS) File System and how to use it, see [What is File System](https://www.alibabacloud.com/help/en/aibaba-cloud-storage-services/latest/apsara-file-storage-for-hdfs).
 *
 * > **NOTE:** Available since v1.140.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = new alicloud.dfs.FileSystem("default", {
 *     storageType: "PERFORMANCE",
 *     zoneId: "cn-hangzhou-b",
 *     protocolType: "PANGU",
 *     description: name,
 *     fileSystemName: name,
 *     throughputMode: "Provisioned",
 *     spaceCapacity: 1024,
 *     provisionedThroughputInMiBps: 512,
 * });
 * ```
 *
 * ## Import
 *
 * Apsara File Storage for HDFS (DFS) File System can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:dfs/fileSystem:FileSystem example <id>
 * ```
 */
export class FileSystem extends pulumi.CustomResource {
    /**
     * Get an existing FileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileSystemState, opts?: pulumi.CustomResourceOptions): FileSystem {
        return new FileSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:dfs/fileSystem:FileSystem';

    /**
     * Returns true if the given object is an instance of FileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileSystem.__pulumiType;
    }

    /**
     * The creation time of the file system instance.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Redundancy mode of the file system. Value:
     * - LRS (default): Local redundancy.
     * - ZRS: Same-City redundancy. When ZRS is selected, zoneId is a string consisting of multiple zones that are expected to be redundant in the same city, for example,  'zoneId1,zoneId2 '.
     */
    public readonly dataRedundancyType!: pulumi.Output<string | undefined>;
    /**
     * Dedicated cluster id, which is used to support scenarios such as group cloud migration.
     */
    public readonly dedicatedClusterId!: pulumi.Output<string | undefined>;
    /**
     * The description of the file system resource. No more than 32 characters in length.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The file system name. The naming rules are as follows: The length is 6~64 characters. Globally unique and cannot be an empty string. English letters are supported and can contain numbers, underscores (_), and dashes (-).
     */
    public readonly fileSystemName!: pulumi.Output<string>;
    /**
     * Save set sequence number, the user selects the content of the specified sequence number in the Save set.
     */
    public readonly partitionNumber!: pulumi.Output<number | undefined>;
    /**
     * The protocol type. Value: `HDFS`, `PANGU`.
     */
    public readonly protocolType!: pulumi.Output<string>;
    /**
     * Provisioned throughput. This parameter is required when ThroughputMode is set to Provisioned. Unit: MB/s Value range: 1~5120.
     */
    public readonly provisionedThroughputInMiBps!: pulumi.Output<number | undefined>;
    /**
     * (Available since v1.242.0) The region ID of the File System.
     */
    public /*out*/ readonly regionId!: pulumi.Output<string>;
    /**
     * File system capacity.  When the actual amount of data stored reaches the capacity of the file system, data cannot be written.  Unit: GiB.
     */
    public readonly spaceCapacity!: pulumi.Output<number>;
    /**
     * Save set identity, used to select a user-specified save set.
     */
    public readonly storageSetName!: pulumi.Output<string | undefined>;
    /**
     * The storage media type. Value: STANDARD (default): STANDARD PERFORMANCE: PERFORMANCE type.
     */
    public readonly storageType!: pulumi.Output<string>;
    /**
     * The throughput mode. Value: Standard (default): Standard throughput Provisioned: preset throughput.
     */
    public readonly throughputMode!: pulumi.Output<string>;
    /**
     * Zone Id, which is used to create file system resources to the specified zone.
     */
    public readonly zoneId!: pulumi.Output<string | undefined>;

    /**
     * Create a FileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileSystemArgs | FileSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileSystemState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dataRedundancyType"] = state ? state.dataRedundancyType : undefined;
            resourceInputs["dedicatedClusterId"] = state ? state.dedicatedClusterId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fileSystemName"] = state ? state.fileSystemName : undefined;
            resourceInputs["partitionNumber"] = state ? state.partitionNumber : undefined;
            resourceInputs["protocolType"] = state ? state.protocolType : undefined;
            resourceInputs["provisionedThroughputInMiBps"] = state ? state.provisionedThroughputInMiBps : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["spaceCapacity"] = state ? state.spaceCapacity : undefined;
            resourceInputs["storageSetName"] = state ? state.storageSetName : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["throughputMode"] = state ? state.throughputMode : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as FileSystemArgs | undefined;
            if ((!args || args.fileSystemName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemName'");
            }
            if ((!args || args.protocolType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolType'");
            }
            if ((!args || args.spaceCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spaceCapacity'");
            }
            if ((!args || args.storageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            resourceInputs["dataRedundancyType"] = args ? args.dataRedundancyType : undefined;
            resourceInputs["dedicatedClusterId"] = args ? args.dedicatedClusterId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fileSystemName"] = args ? args.fileSystemName : undefined;
            resourceInputs["partitionNumber"] = args ? args.partitionNumber : undefined;
            resourceInputs["protocolType"] = args ? args.protocolType : undefined;
            resourceInputs["provisionedThroughputInMiBps"] = args ? args.provisionedThroughputInMiBps : undefined;
            resourceInputs["spaceCapacity"] = args ? args.spaceCapacity : undefined;
            resourceInputs["storageSetName"] = args ? args.storageSetName : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["throughputMode"] = args ? args.throughputMode : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["regionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileSystem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FileSystem resources.
 */
export interface FileSystemState {
    /**
     * The creation time of the file system instance.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Redundancy mode of the file system. Value:
     * - LRS (default): Local redundancy.
     * - ZRS: Same-City redundancy. When ZRS is selected, zoneId is a string consisting of multiple zones that are expected to be redundant in the same city, for example,  'zoneId1,zoneId2 '.
     */
    dataRedundancyType?: pulumi.Input<string>;
    /**
     * Dedicated cluster id, which is used to support scenarios such as group cloud migration.
     */
    dedicatedClusterId?: pulumi.Input<string>;
    /**
     * The description of the file system resource. No more than 32 characters in length.
     */
    description?: pulumi.Input<string>;
    /**
     * The file system name. The naming rules are as follows: The length is 6~64 characters. Globally unique and cannot be an empty string. English letters are supported and can contain numbers, underscores (_), and dashes (-).
     */
    fileSystemName?: pulumi.Input<string>;
    /**
     * Save set sequence number, the user selects the content of the specified sequence number in the Save set.
     */
    partitionNumber?: pulumi.Input<number>;
    /**
     * The protocol type. Value: `HDFS`, `PANGU`.
     */
    protocolType?: pulumi.Input<string>;
    /**
     * Provisioned throughput. This parameter is required when ThroughputMode is set to Provisioned. Unit: MB/s Value range: 1~5120.
     */
    provisionedThroughputInMiBps?: pulumi.Input<number>;
    /**
     * (Available since v1.242.0) The region ID of the File System.
     */
    regionId?: pulumi.Input<string>;
    /**
     * File system capacity.  When the actual amount of data stored reaches the capacity of the file system, data cannot be written.  Unit: GiB.
     */
    spaceCapacity?: pulumi.Input<number>;
    /**
     * Save set identity, used to select a user-specified save set.
     */
    storageSetName?: pulumi.Input<string>;
    /**
     * The storage media type. Value: STANDARD (default): STANDARD PERFORMANCE: PERFORMANCE type.
     */
    storageType?: pulumi.Input<string>;
    /**
     * The throughput mode. Value: Standard (default): Standard throughput Provisioned: preset throughput.
     */
    throughputMode?: pulumi.Input<string>;
    /**
     * Zone Id, which is used to create file system resources to the specified zone.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FileSystem resource.
 */
export interface FileSystemArgs {
    /**
     * Redundancy mode of the file system. Value:
     * - LRS (default): Local redundancy.
     * - ZRS: Same-City redundancy. When ZRS is selected, zoneId is a string consisting of multiple zones that are expected to be redundant in the same city, for example,  'zoneId1,zoneId2 '.
     */
    dataRedundancyType?: pulumi.Input<string>;
    /**
     * Dedicated cluster id, which is used to support scenarios such as group cloud migration.
     */
    dedicatedClusterId?: pulumi.Input<string>;
    /**
     * The description of the file system resource. No more than 32 characters in length.
     */
    description?: pulumi.Input<string>;
    /**
     * The file system name. The naming rules are as follows: The length is 6~64 characters. Globally unique and cannot be an empty string. English letters are supported and can contain numbers, underscores (_), and dashes (-).
     */
    fileSystemName: pulumi.Input<string>;
    /**
     * Save set sequence number, the user selects the content of the specified sequence number in the Save set.
     */
    partitionNumber?: pulumi.Input<number>;
    /**
     * The protocol type. Value: `HDFS`, `PANGU`.
     */
    protocolType: pulumi.Input<string>;
    /**
     * Provisioned throughput. This parameter is required when ThroughputMode is set to Provisioned. Unit: MB/s Value range: 1~5120.
     */
    provisionedThroughputInMiBps?: pulumi.Input<number>;
    /**
     * File system capacity.  When the actual amount of data stored reaches the capacity of the file system, data cannot be written.  Unit: GiB.
     */
    spaceCapacity: pulumi.Input<number>;
    /**
     * Save set identity, used to select a user-specified save set.
     */
    storageSetName?: pulumi.Input<string>;
    /**
     * The storage media type. Value: STANDARD (default): STANDARD PERFORMANCE: PERFORMANCE type.
     */
    storageType: pulumi.Input<string>;
    /**
     * The throughput mode. Value: Standard (default): Standard throughput Provisioned: preset throughput.
     */
    throughputMode?: pulumi.Input<string>;
    /**
     * Zone Id, which is used to create file system resources to the specified zone.
     */
    zoneId?: pulumi.Input<string>;
}
