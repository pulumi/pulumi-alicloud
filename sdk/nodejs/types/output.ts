// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";

export interface GetRegionsRegion {
    /**
     * ID of the region.
     */
    id: string;
    /**
     * Name of the region in the local language.
     */
    localName: string;
    regionId: string;
}

export interface GetZonesZone {
    /**
     * Set of supported disk categories.
     */
    availableDiskCategories: string[];
    /**
     * Allowed instance types.
     */
    availableInstanceTypes: string[];
    /**
     * Filter the results by a specific resource type.
     * Valid values: `Instance`, `Disk`, `VSwitch`, `Rds`, `KVStore`, `FunctionCompute`, `Elasticsearch`, `Slb`.
     */
    availableResourceCreations: string[];
    /**
     * ID of the zone.
     */
    id: string;
    /**
     * Name of the zone in the local language.
     */
    localName: string;
    /**
     * A list of zone ids in which the multi zone.
     */
    multiZoneIds: string[];
    /**
     * A list of slb slave zone ids in which the slb master zone.
     */
    slbSlaveZoneIds: string[];
}

export namespace actiontrail {
    export interface GetInstancesInstance {
        /**
         * The create time of the instance.
         */
        createTime: string;
        /**
         * The deploy type of the instance. 0: sharing instance, 1: vpc instance, 2: vpc instance(support ip mapping), 3: eip instance, 4: eip/vpc instance, 5: vpc instance.
         */
        deployType: number;
        /**
         * The disk size of the instance.
         */
        diskSize: number;
        /**
         * The disk type of the instance. 0: efficient cloud disk , 1: SSD.
         */
        diskType: number;
        /**
         * The peak bandwidth of the instance.
         */
        eipMax: number;
        /**
         * ID of the instance.
         */
        id: string;
        /**
         * The peak value of io of the instance.
         */
        ioMax: number;
        /**
         * Name of the instance.
         */
        name: string;
        /**
         * The paid type of the instance.
         */
        paidType: string;
        /**
         * The current status of the instance. -1: unknown status, 0: wait deploy, 1: initializing, 2: preparing, 3 starting, 5: in service, 7: wait upgrade, 8: upgrading, 10: released, 15: freeze, 101: deploy error, 102: upgrade error. 
         */
        serviceStatus: number;
        /**
         * The spec type of the instance.
         */
        specType: string;
        /**
         * The max num of topic can be create of the instance.
         */
        topicQuota: number;
        /**
         * The ID of attaching VPC to instance.
         */
        vpcId: string;
        /**
         * The ID of attaching vswitch to instance.
         */
        vswitchId: string;
        /**
         * The ID of attaching zone to instance.
         */
        zoneId: string;
    }

    export interface GetSaslAclsAcl {
        /**
         * The operation type of the sasl acl.
         */
        aclOperationType: string;
        /**
         * Get results for the specified resource name. 
         */
        aclResourceName: string;
        /**
         * The resource pattern type of the sasl acl.
         */
        aclResourcePatternType: string;
        /**
         * Get results for the specified resource type. 
         */
        aclResourceType: string;
        /**
         * The host of the sasl acl.
         */
        host: string;
        /**
         * Get results for the specified username. 
         */
        username: string;
    }

    export interface GetSaslUsersUser {
        /**
         * The password of the user.
         */
        password: string;
        /**
         * The username of the user.
         */
        username: string;
    }

    export interface GetTopicsTopic {
        /**
         * whether the current topic is kafka compact topic or not.
         */
        compactTopic: boolean;
        /**
         * Time of creation.
         */
        createTime: string;
        /**
         * whether the current topic is kafka local topic or not.
         */
        localTopic: boolean;
        /**
         * Partition number of the topic.
         */
        partitionNum: number;
        /**
         * Remark of the topic.
         */
        remark: string;
        /**
         * The current status code of the topic. There are three values to describe the topic status: 0 stands for the topic is in service, 1 stands for freezing and 2 stands for pause. 
         */
        status: number;
        /**
         * The name of the topic.
         */
        topic: string;
    }

    export interface GetTrailsActiontrail {
        /**
         * Indicates whether the event is a read or a write event.
         */
        eventRw: string;
        /**
         * The name of the trail.
         */
        name: string;
        /**
         * The name of the specified OSS bucket.
         */
        ossBucketName: string;
        /**
         * The prefix of the specified OSS bucket name.
         */
        ossKeyPrefix: string;
        /**
         * The role in ActionTrail.
         */
        roleName: string;
        /**
         * The unique ARN of the Log Service project.
         */
        slsProjectArn: string;
        /**
         * The unique ARN of the Log Service role.
         */
        slsWriteRoleArn: string;
    }
}

export namespace adb {
    export interface GetClustersCluster {
        /**
         * Billing method. Value options: `PostPaid` for Pay-As-You-Go and `PrePaid` for subscription.
         */
        chargeType: string;
        /**
         * The CreateTime of the ADB cluster.
         */
        createTime: string;
        /**
         * The DBNodeClass of the ADB cluster.
         */
        dbNodeClass: string;
        /**
         * The DBNodeCount of the ADB cluster.
         */
        dbNodeCount: number;
        /**
         * The DBNodeStorage of the ADB cluster.
         */
        dbNodeStorage: number;
        /**
         * The description of the ADB cluster.
         */
        description: string;
        /**
         * Expiration time. Pay-As-You-Go clusters never expire.
         */
        expireTime: string;
        /**
         * The expired of the ADB cluster.
         */
        expired: string;
        /**
         * The ID of the ADB cluster.
         */
        id: string;
        /**
         * The LockMode of the ADB cluster.
         */
        lockMode: string;
        /**
         * The DBClusterNetworkType of the ADB cluster.
         */
        networkType: string;
        /**
         * Region ID the cluster belongs to.
         */
        regionId: string;
        /**
         * Status of the cluster.
         */
        status: string;
        /**
         * ID of the VPC the cluster belongs to.
         */
        vpcId: string;
        /**
         * The ZoneId of the ADB cluster.
         */
        zoneId: string;
    }

    export interface GetZonesZone {
        /**
         * ID of the zone.
         */
        id: string;
        /**
         * A list of zone ids in which the multi zone.
         */
        multiZoneIds: string[];
    }
}

export namespace apigateway {
    export interface ApiConstantParameter {
        /**
         * The description of Constant parameter.
         */
        description?: string;
        /**
         * System parameter location; values: 'HEAD' and 'QUERY'.
         */
        in: string;
        /**
         * System parameter name which supports values including in [system parameter list](https://www.alibabacloud.com/help/doc-detail/43677.html)
         */
        name: string;
        /**
         * Constant parameter value.
         */
        value: string;
    }

    export interface ApiFcServiceConfig {
        /**
         * RAM role arn attached to the Function Compute service. This governs both who / what can invoke your Function, as well as what resources our Function has access to. See [User Permissions](https://www.alibabacloud.com/help/doc-detail/52885.htm) for more details.
         */
        arnRole?: string;
        /**
         * The function name of function compute service.
         */
        functionName: string;
        /**
         * The region that the function compute service belongs to.
         */
        region: string;
        /**
         * The service name of function compute service.
         */
        serviceName: string;
        /**
         * Backend service time-out time; unit: millisecond.
         */
        timeout: number;
    }

    export interface ApiHttpServiceConfig {
        /**
         * The address of backend service.
         */
        address: string;
        aoneName?: string;
        /**
         * The http method of backend service.
         */
        method: string;
        /**
         * The path of backend service.
         */
        path: string;
        /**
         * Backend service time-out time; unit: millisecond.
         */
        timeout: number;
    }

    export interface ApiHttpVpcServiceConfig {
        aoneName?: string;
        /**
         * The http method of backend service.
         */
        method: string;
        /**
         * System parameter name which supports values including in [system parameter list](https://www.alibabacloud.com/help/doc-detail/43677.html)
         */
        name: string;
        /**
         * The path of backend service.
         */
        path: string;
        /**
         * Backend service time-out time; unit: millisecond.
         */
        timeout: number;
    }

    export interface ApiMockServiceConfig {
        aoneName?: string;
        /**
         * The result of the mock service.
         */
        result: string;
    }

    export interface ApiRequestConfig {
        /**
         * The body format of the api, which support the values of 'STREAM' and 'FORM'
         */
        bodyFormat?: string;
        /**
         * The http method of backend service.
         */
        method: string;
        /**
         * The mode of the parameters between request parameters and service parameters, which support the values of 'MAPPING' and 'PASSTHROUGH'
         */
        mode: string;
        /**
         * The path of backend service.
         */
        path: string;
        /**
         * The protocol of api which supports values of 'HTTP','HTTPS' or 'HTTP,HTTPS'
         */
        protocol: string;
    }

    export interface ApiRequestParameter {
        /**
         * The default value of the parameter.
         */
        defaultValue?: string;
        /**
         * The description of Constant parameter.
         */
        description?: string;
        /**
         * System parameter location; values: 'HEAD' and 'QUERY'.
         */
        in: string;
        /**
         * Backend service's parameter location; values: BODY, HEAD, QUERY, and PATH.
         */
        inService: string;
        /**
         * System parameter name which supports values including in [system parameter list](https://www.alibabacloud.com/help/doc-detail/43677.html)
         */
        name: string;
        /**
         * Backend service's parameter name.
         */
        nameService: string;
        /**
         * Parameter required or not; values: REQUIRED and OPTIONAL.
         */
        required: string;
        /**
         * Parameter type which supports values of 'STRING','INT','BOOLEAN','LONG',"FLOAT" and "DOUBLE"
         */
        type: string;
    }

    export interface ApiSystemParameter {
        /**
         * System parameter location; values: 'HEAD' and 'QUERY'.
         */
        in: string;
        /**
         * System parameter name which supports values including in [system parameter list](https://www.alibabacloud.com/help/doc-detail/43677.html)
         */
        name: string;
        /**
         * Backend service's parameter name.
         */
        nameService: string;
    }

    export interface GetApisApi {
        /**
         * API description.
         */
        description: string;
        /**
         * ID of the specified group.
         */
        groupId: string;
        /**
         * The group name that the apis belong to.
         */
        groupName: string;
        /**
         * API ID, which is generated by the system and globally unique.
         */
        id: string;
        /**
         * API name.
         */
        name: string;
        /**
         * The ID of the region where the API is located.
         */
        regionId: string;
    }

    export interface GetAppsApp {
        /**
         * App code.
         */
        appCode: string;
        /**
         * Creation time (Greenwich mean time).
         */
        createdTime: string;
        /**
         * App description.
         */
        description: string;
        /**
         * App ID, which is generated by the system and globally unique.
         */
        id: number;
        /**
         * Last modification time (Greenwich mean time).
         */
        modifiedTime: string;
        /**
         * App name.
         */
        name: string;
    }

    export interface GetGroupsGroup {
        /**
         * Billing status.
         * - NORMAL: The API group is normal.
         * - LOCKED: Locked due to outstanding payment.
         */
        billingStatus: string;
        /**
         * Creation time (Greenwich mean time).
         */
        createdTime: string;
        /**
         * API group description.
         */
        description: string;
        /**
         * API group ID, which is generated by the system and globally unique.
         */
        id: string;
        /**
         * Locking in invalid state.
         * - NORMAL: The API group is normal.
         * - LOCKED: Locked due to illegality.
         */
        illegalStatus: string;
        /**
         * Last modification time (Greenwich mean time).
         */
        modifiedTime: string;
        /**
         * API group name.
         */
        name: string;
        /**
         * The ID of the region where the API group is located.
         */
        regionId: string;
        /**
         * Second-level domain name automatically assigned to the API group.
         */
        subDomain: string;
        /**
         * Upper QPS limit of the API group; default value: 500, which can be increased by submitting an application.
         */
        trafficLimit: number;
    }
}

export namespace cas {
    export interface GetCertificatesCertificate {
        /**
         * The cert is buy from aliyun or not.
         */
        buyInAliyun: boolean;
        /**
         * The cert's city.
         */
        city: string;
        /**
         * The cert's common name.
         */
        common: string;
        /**
         * The cert's country.
         */
        country: string;
        /**
         * The cert's not valid after time.
         */
        endDate: string;
        /**
         * The cert is expired or not.
         */
        expired: boolean;
        /**
         * The cert's finger.
         */
        fingerPrint: string;
        /**
         * The cert's id.
         */
        id: number;
        /**
         * The cert's .
         */
        issuer: string;
        /**
         * The cert's name.
         */
        name: string;
        /**
         * The cert's organization.
         */
        orgName: string;
        /**
         * The cert's province.
         */
        province: string;
        /**
         * The cert's subject alternative name.
         */
        sans: string;
        /**
         * The cert's not valid before time.
         */
        startDate: string;
    }
}

export namespace cdn {
    export interface DomainAuthConfig {
        /**
         * Auth type of the auth config. Valid values are  `noAuth`, `typeA`, `typeB` and `typeC`. Default value is `noAuth`.
         */
        authType?: string;
        /**
         * Master authentication key of the auth config. This parameter can have a string of 6 to 32 characters and must contain only alphanumeric characters.
         */
        masterKey: string;
        /**
         * Slave authentication key of the auth config. This parameter can have a string of 6 to 32 characters and must contain only alphanumeric characters.
         */
        slaveKey: string;
        /**
         * Authentication cache time of the auth config. Default value is `1800`. It's value is valid only when the `authType` is `typeB` or `typeC`.
         */
        timeout?: number;
    }

    export interface DomainCacheConfig {
        /**
         * Cache content of the cache config. It's value is a path string when the `cacheType` is `path`. When the `cacheType` is `suffix`, it's value is a string which contains multiple file suffixes separated by commas.
         */
        cacheContent: string;
        cacheId: string;
        /**
         * Cache type of the cache config. Valid values are `suffix` and `path`.
         */
        cacheType: string;
        /**
         * Cache time of the cache config.
         */
        ttl: number;
        /**
         * Weight of the cache config. This parameter's value is between 1 and 99. Default value is `1`. The higher the value, the higher the priority.
         */
        weight?: number;
    }

    export interface DomainCertificateConfig {
        /**
         * The SSL private key. This is required if `serverCertificateStatus` is `on`
         */
        privateKey?: string;
        /**
         * The SSL server certificate string. This is required if `serverCertificateStatus` is `on`
         */
        serverCertificate?: string;
        /**
         * This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
         */
        serverCertificateStatus?: string;
    }

    export interface DomainConfigFunctionArg {
        /**
         * The name of arg.
         */
        argName: string;
        /**
         * The value of arg.
         */
        argValue: string;
    }

    export interface DomainHttpHeaderConfig {
        headerId: string;
        /**
         * Header key of the http header. Valid values are `Content-Type`, `Cache-Control`, `Content-Disposition`, `Content-Language`，`Expires`, `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods` and `Access-Control-Max-Age`.
         */
        headerKey: string;
        /**
         * Header value of the http header.
         */
        headerValue: string;
    }

    export interface DomainNewCertificateConfig {
        /**
         * The SSL certificate name.
         */
        certName?: string;
        /**
         * The SSL certificate type, can be "upload", "cas" and "free".
         */
        certType?: string;
        /**
         * Set `1` to ignore the repeated verification for certificate name, and cover the information of the origin certificate (with the same name). Set `0` to work the verification.
         */
        forceSet?: string;
        /**
         * The SSL private key. This is required if `serverCertificateStatus` is `on`
         */
        privateKey?: string;
        /**
         * The SSL server certificate string. This is required if `serverCertificateStatus` is `on`
         */
        serverCertificate?: string;
        /**
         * This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
         */
        serverCertificateStatus?: string;
    }

    export interface DomainNewSources {
        /**
         * The adress of source. Valid values can be ip or doaminName. Each item's `content` can not be repeated.
         */
        content: string;
        /**
         * The port of source. Valid values are `443` and `80`. Default value is `80`.
         */
        port?: number;
        /**
         * Priority of the source. Valid values are `0` and `100`. Default value is `20`.
         */
        priority?: number;
        /**
         * The type of the source. Valid values are `ipaddr`, `domain` and `oss`.
         */
        type: string;
        /**
         * Weight of the source. Valid values are from `0` to `100`. Default value is `10`, but if type is `ipaddr`, the value can only be `10`. 
         */
        weight?: number;
    }

    export interface DomainPage404Config {
        /**
         * Custom page url of the error page. It must be the full path under the accelerated domain name. It's value must be `http://promotion.alicdn.com/help/oss/error.html` when `pageType` value is `charity` and It can not be set when `pageType` value is `default`.
         */
        customPageUrl?: string;
        errorCode: string;
        /**
         * Page type of the error page. Valid values are `default`, `charity`, `other`. Default value is `default`.
         */
        pageType?: string;
    }

    export interface DomainParameterFilterConfig {
        /**
         * This parameter indicates whether or not the `parameterFilterConfig` is enable. Valid values are `on` and `off`. Default value is `off`.  
         */
        enable?: string;
        /**
         * Reserved parameters of `parameterFilterConfig`. It's a list of string and consists of at most 10 items.
         */
        hashKeyArgs: string[];
    }

    export interface DomainReferConfig {
        /**
         * This parameter indicates whether or not to allow empty refer access. Valid values are `on` and `off`. Default value is `on`.
         */
        allowEmpty?: string;
        /**
         * A list of domain names of the refer config.
         */
        referLists: string[];
        /**
         * Refer type of the refer config. Valid values are `block` and `allow`. Default value is `block`.
         */
        referType?: string;
    }
}

export namespace cen {
    export interface GetBandwidthLimitsLimit {
        /**
         * The bandwidth limit configured for the interconnected regions communication.
         */
        bandwidthLimit: number;
        /**
         * ID of the CEN instance.
         */
        instanceId: string;
        /**
         * ID of local region.
         */
        localRegionId: string;
        /**
         * ID of opposite region.
         */
        oppositeRegionId: string;
        /**
         * Status of the CEN Bandwidth Limit, including "Active" and "Modifying".
         */
        status: string;
    }

    export interface GetBandwidthPackagesPackage {
        /**
         * The bandwidth in Mbps of the CEN bandwidth package.
         */
        bandwidth: number;
        /**
         * The billing method, including "POSTPAY" and "PREPAY".
         */
        bandwidthPackageChargeType: string;
        /**
         * Status of the CEN Bandwidth Package, including "Normal", "FinancialLocked" and "SecurityLocked".
         */
        businessStatus: string;
        /**
         * Creation time of the CEN bandwidth package.
         */
        creationTime: string;
        /**
         * Description of the CEN Bandwidth Package.
         */
        description: string;
        /**
         * Region ID of the interconnected regions.
         */
        geographicRegionAId: string;
        /**
         * Region ID of the interconnected regions.
         */
        geographicRegionBId: string;
        /**
         * ID of the CEN Bandwidth Package.
         */
        id: string;
        /**
         * ID of a CEN instance.
         */
        instanceId: string;
        /**
         * Name of the CEN Bandwidth Package.
         */
        name: string;
        /**
         * Status of the CEN Bandwidth Package in CEN instance, including "Idle" and "InUse".
         */
        status: string;
    }

    export interface GetFlowlogsFlowlog {
        /**
         * The ID of the CEN Instance.
         */
        cenId: string;
        /**
         * The description of flowlog.
         */
        description: string;
        /**
         * ID of the CEN flow log.
         */
        flowLogId: string;
        /**
         * The name of flowlog.
         */
        flowLogName: string;
        /**
         * ID of the CEN flow log.
         */
        id: string;
        /**
         * The name of the log store which is in the  `projectName` SLS project.
         */
        logStoreName: string;
        /**
         * The name of the SLS project.
         */
        projectName: string;
        /**
         * The status of flowlog. Valid values: ["Active", "Inactive"]. Default to "Active".
         */
        status: string;
    }

    export interface GetInstancesInstance {
        /**
         * List of CEN Bandwidth Package IDs in the specified CEN instance.
         */
        cenBandwidthPackageIds: string[];
        /**
         * ID of the CEN instance.
         */
        cenId: string;
        /**
         * Description of the CEN instance.
         */
        description: string;
        /**
         * ID of the CEN instance.
         */
        id: string;
        /**
         * Name of the CEN instance.
         */
        name: string;
        /**
         * Indicates the allowed level of CIDR block overlapping.
         */
        protectionLevel: string;
        /**
         * Status of the CEN instance, including "Creating", "Active" and "Deleting".
         */
        status: string;
        /**
         * A mapping of tags to assign to the resource.
         */
        tags: {[key: string]: any};
    }

    export interface GetRegionRouteEntriesEntry {
        /**
         * The destination CIDR block of the route entry.
         */
        cidrBlock: string;
        /**
         * ID of the next hop.
         */
        nextHopId: string;
        /**
         * ID of the region where the next hop is located.
         */
        nextHopRegionId: string;
        /**
         * Type of the next hop.
         */
        nextHopType: string;
        /**
         * Type of the route entry.
         */
        type: string;
    }

    export interface GetRouteEntriesEntry {
        /**
         * The destination CIDR block of the route entry to query.
         */
        cidrBlock: string;
        /**
         * A list of conflicted Route Entries. Each element contains the following attributes:
         */
        conflicts: outputs.cen.GetRouteEntriesEntryConflict[];
        /**
         * ID of the next hop.
         */
        nextHopId: string;
        /**
         * Type of the next hop, including "Instance", "HaVip" and "RouterInterface".
         */
        nextHopType: string;
        /**
         * Whether to allow the route entry to be published or removed to or from CEN.
         */
        operationalMode: boolean;
        /**
         * The publish status of the route entry in CEN, including "Published" and "NonPublished".
         */
        publishStatus: string;
        /**
         * ID of the route table of the VPC or VBR.
         */
        routeTableId: string;
        /**
         * Type of the route entry, including "System", "Custom" and "BGP".
         */
        routeType: string;
    }

    export interface GetRouteEntriesEntryConflict {
        /**
         * The destination CIDR block of the route entry to query.
         */
        cidrBlock: string;
        /**
         * ID of the CEN instance.
         */
        instanceId: string;
        /**
         * The type of the CEN child instance.
         */
        instanceType: string;
        /**
         * ID of the region where the conflicted route entry is located.
         */
        regionId: string;
        /**
         * Reasons of exceptions.
         */
        status: string;
    }
}

export namespace cloudconnect {
    export interface GetNetworksNetwork {
        /**
         * CidrBlock of the CCN instance.
         */
        cidrBlock: string;
        description: string;
        /**
         * ID of the CCN instance.
         */
        id: string;
        /**
         * IsDefault of the CCN instance.
         */
        isDefault: boolean;
        /**
         * Name of the CCN instance.
         */
        name: string;
    }
}

export namespace cms {
    export interface SiteMonitorIspCity {
        city: string;
        isp: string;
    }
}

export namespace cr {
    export interface GetNamespacesNamespace {
        /**
         * Boolean, when it set to true, repositories are automatically created when pushing new images. If it set to false, you create repository for images before pushing.
         */
        autoCreate: boolean;
        /**
         * `PUBLIC` or `PRIVATE`, default repository visibility in this namespace.
         */
        defaultVisibility: string;
        /**
         * Name of Container Registry namespace.
         */
        name: string;
    }

    export interface GetReposRepo {
        /**
         * The repository domain list.
         */
        domainList: outputs.cr.GetReposRepoDomainList;
        /**
         * Name of container registry namespace.
         */
        name: string;
        /**
         * Name of container registry namespace where the repositories are located in.
         */
        namespace: string;
        /**
         * `PUBLIC` or `PRIVATE`, repository's visibility.
         */
        repoType: string;
        /**
         * The repository general information.
         */
        summary: string;
        /**
         * A list of image tags belong to this repository. Each contains several attributes, see `Block Tag`.
         */
        tags: outputs.cr.GetReposRepoTag[];
    }

    export interface GetReposRepoDomainList {
        /**
         * Domain of internal endpoint, only in some regions.
         */
        internal: string;
        /**
         * Domain of public endpoint.
         */
        public: string;
        /**
         * Domain of vpc endpoint.
         */
        vpc: string;
    }

    export interface GetReposRepoTag {
        /**
         * Digest of this image.
         */
        digest: string;
        /**
         * Create time of this image, unix time in nanoseconds.
         */
        imageCreate: number;
        /**
         * Id of this image.
         */
        imageId: string;
        /**
         * Status of this image, in bytes.
         */
        imageSize: number;
        /**
         * Last update time of this image, unix time in nanoseconds.
         */
        imageUpdate: number;
        /**
         * Status of this image.
         */
        status: string;
        /**
         * Tag of this image.
         */
        tag: string;
    }

    export interface RepoDomainList {
        /**
         * Domain of internal endpoint, only in some regions.
         */
        internal: string;
        /**
         * Domain of public endpoint.
         */
        public: string;
        /**
         * Domain of vpc endpoint.
         */
        vpc: string;
    }
}

export namespace cs {
    export interface ApplicationService {
        /**
         * ID of the service.
         */
        id: string;
        /**
         * The application name. It should be 1-64 characters long, and can contain numbers, English letters and hyphens, but cannot start with hyphens.
         */
        name: string;
        /**
         * The current status of service.
         */
        status: string;
        /**
         * The application deploying version. Each updating, it must be different with current. Default to "1.0"
         */
        version: string;
    }

    export interface ClusterNode {
        eip: string;
        id: string;
        name: string;
        privateIp: string;
        status: string;
    }

    export interface GetKubernetesClustersCluster {
        /**
         * The ID of availability zone.
         */
        availabilityZone: string;
        clusterNetworkType: string;
        /**
         * Map of kubernetes cluster connection information. It contains several attributes to `Block Connections`.
         */
        connections: outputs.cs.GetKubernetesClustersClusterConnections;
        /**
         * ID of the node.
         */
        id: string;
        /**
         * The ID of node image.
         */
        imageId: string;
        /**
         * The keypair of ssh login cluster node, you have to create it first.
         */
        keyName: string;
        /**
         * A list of one element containing information about the associated log store. It contains the following attributes:
         */
        logConfigs: outputs.cs.GetKubernetesClustersClusterLogConfig[];
        masterAutoRenew: boolean;
        masterAutoRenewPeriod: number;
        /**
         * The system disk category of master node.
         */
        masterDiskCategory: string;
        /**
         * The system disk size of master node.
         */
        masterDiskSize: number;
        masterInstanceChargeType: string;
        /**
         * The instance type of master node.
         */
        masterInstanceTypes: string[];
        /**
         * List of cluster master nodes. It contains several attributes to `Block Nodes`.
         */
        masterNodes: outputs.cs.GetKubernetesClustersClusterMasterNode[];
        masterPeriod: number;
        masterPeriodUnit: string;
        /**
         * Node name.
         */
        name: string;
        /**
         * The ID of nat gateway used to launch kubernetes cluster.
         */
        natGatewayId: string;
        /**
         * The network mask used on pods for each node.
         */
        nodeCidrMask: number;
        podCidr: string;
        /**
         * The ID of security group where the current cluster worker node is located.
         */
        securityGroupId: string;
        serviceCidr: string;
        /**
         * Whether internet load balancer for API Server is created
         */
        slbInternetEnabled: boolean;
        /**
         * The ID of VPC where the current cluster is located.
         */
        vpcId: string;
        /**
         * The ID of VSwitches where the current cluster is located.
         */
        vswitchIds: string[];
        workerAutoRenew: boolean;
        workerAutoRenewPeriod: number;
        /**
         * The data disk size of worker node.
         */
        workerDataDiskCategory: string;
        /**
         * The data disk category of worker node.
         */
        workerDataDiskSize: number;
        /**
         * The system disk category of worker node.
         */
        workerDiskCategory: string;
        /**
         * The system disk size of worker node.
         */
        workerDiskSize: number;
        workerInstanceChargeType: string;
        /**
         * The instance type of worker node.
         */
        workerInstanceTypes: string[];
        /**
         * List of cluster worker nodes. It contains several attributes to `Block Nodes`.
         */
        workerNodes: outputs.cs.GetKubernetesClustersClusterWorkerNode[];
        /**
         * The ECS instance node number in the current container cluster.
         */
        workerNumbers: number[];
        workerPeriod: number;
        workerPeriodUnit: string;
    }

    export interface GetKubernetesClustersClusterConnections {
        /**
         * API Server Internet endpoint.
         */
        apiServerInternet: string;
        /**
         * API Server Intranet endpoint.
         */
        apiServerIntranet: string;
        /**
         * Master node SSH IP address.
         */
        masterPublicIp: string;
        /**
         * Service Access Domain.
         */
        serviceDomain: string;
    }

    export interface GetKubernetesClustersClusterLogConfig {
        /**
         * Log Service project name.
         */
        project: string;
        /**
         * Type of collecting logs.
         */
        type: string;
    }

    export interface GetKubernetesClustersClusterMasterNode {
        /**
         * ID of the node.
         */
        id: string;
        /**
         * Node name.
         */
        name: string;
        /**
         * The private IP address of node.
         */
        privateIp: string;
    }

    export interface GetKubernetesClustersClusterWorkerNode {
        /**
         * ID of the node.
         */
        id: string;
        /**
         * Node name.
         */
        name: string;
        /**
         * The private IP address of node.
         */
        privateIp: string;
    }

    export interface GetManagedKubernetesClustersCluster {
        /**
         * The ID of availability zone.
         */
        availabilityZone: string;
        /**
         * Map of kubernetes cluster connection information. It contains several attributes to `Block Connections`.
         */
        connections: outputs.cs.GetManagedKubernetesClustersClusterConnections;
        /**
         * ID of the node.
         */
        id: string;
        /**
         * Node name.
         */
        name: string;
        /**
         * The ID of nat gateway used to launch kubernetes cluster.
         */
        natGatewayId: string;
        /**
         * The ID of security group where the current cluster worker node is located.
         */
        securityGroupId: string;
        /**
         * The ID of VPC where the current cluster is located.
         */
        vpcId: string;
        /**
         * List of cluster worker nodes. It contains several attributes to `Block Nodes`.
         */
        workerNodes: outputs.cs.GetManagedKubernetesClustersClusterWorkerNode[];
    }

    export interface GetManagedKubernetesClustersClusterConnections {
        /**
         * API Server Internet endpoint.
         */
        apiServerInternet: string;
        /**
         * API Server Intranet endpoint.
         */
        apiServerIntranet: string;
        /**
         * Master node SSH IP address.
         */
        masterPublicIp: string;
        /**
         * Service Access Domain.
         */
        serviceDomain: string;
    }

    export interface GetManagedKubernetesClustersClusterWorkerNode {
        /**
         * ID of the node.
         */
        id: string;
        /**
         * Node name.
         */
        name: string;
        /**
         * The private IP address of node.
         */
        privateIp: string;
    }

    export interface GetServerlessKubernetesClustersCluster {
        /**
         * Map of serverless cluster connection information. It contains several attributes to `Block Connections`.
         */
        connections: outputs.cs.GetServerlessKubernetesClustersClusterConnections;
        /**
         * Whether the cluster support delete protection.  
         */
        deletionProtection: boolean;
        endpointPublicAccessEnabled: boolean;
        /**
         * The ID of the container cluster.
         */
        id: string;
        /**
         * The name of the container cluster.
         */
        name: string;
        /**
         * The ID of nat gateway used to launch kubernetes cluster.
         */
        natGatewayId: string;
        /**
         * The ID of security group where the current cluster  is located.
         */
        securityGroupId: string;
        tags: {[key: string]: any};
        /**
         * The ID of VPC where the current cluster is located.
         */
        vpcId: string;
        /**
         * The ID of VSwitch where the current cluster is located.
         */
        vswitchId: string;
    }

    export interface GetServerlessKubernetesClustersClusterConnections {
        /**
         * API Server Internet endpoint.
         */
        apiServerInternet: string;
        /**
         * API Server Intranet endpoint.
         */
        apiServerIntranet: string;
        /**
         * Master node SSH IP address.
         */
        masterPublicIp: string;
    }

    export interface KubernetesAddon {
        config?: string;
        /**
         * The kubernetes cluster's name. It is unique in one Alicloud account.
         */
        name?: string;
    }

    export interface KubernetesAutoscalerNodepool {
        id?: string;
        labels?: string;
        taints?: string;
    }

    export interface KubernetesConnections {
        /**
         * API Server Internet endpoint.
         */
        apiServerInternet: string;
        /**
         * API Server Intranet endpoint.
         */
        apiServerIntranet: string;
        /**
         * Master node SSH IP address.
         */
        masterPublicIp: string;
        /**
         * Service Access Domain.
         */
        serviceDomain: string;
    }

    export interface KubernetesMasterNode {
        /**
         * ID of the node.
         */
        id: string;
        /**
         * The kubernetes cluster's name. It is unique in one Alicloud account.
         */
        name: string;
        /**
         * The private IP address of node.
         */
        privateIp: string;
    }

    export interface KubernetesWorkerNode {
        /**
         * ID of the node.
         */
        id: string;
        /**
         * The kubernetes cluster's name. It is unique in one Alicloud account.
         */
        name: string;
        /**
         * The private IP address of node.
         */
        privateIp: string;
    }

    export interface ManagedKubernetesAddon {
        config?: string;
        disabled?: string;
        /**
         * The kubernetes cluster's name. It is unique in one Alicloud account.
         */
        name?: string;
    }

    export interface ManagedKubernetesConnections {
        /**
         * API Server Internet endpoint.
         */
        apiServerInternet: string;
        /**
         * API Server Intranet endpoint.
         */
        apiServerIntranet: string;
        masterPublicIp: string;
        /**
         * Service Access Domain.
         */
        serviceDomain: string;
    }

    export interface ManagedKubernetesWorkerNode {
        /**
         * ID of the node.
         */
        id: string;
        /**
         * The kubernetes cluster's name. It is unique in one Alicloud account.
         */
        name: string;
        /**
         * The private IP address of node.
         */
        privateIp: string;
    }

    export interface SwarmNode {
        /**
         * The Elastic IP address of node.
         */
        eip: string;
        /**
         * ID of the node.
         */
        id: string;
        /**
         * The container cluster's name. It is the only in one Alicloud account.
         */
        name: string;
        /**
         * The private IP address of node.
         */
        privateIp: string;
        /**
         * The node current status. It is different with instance status.
         */
        status: string;
    }
}

export namespace ddos {
    export interface GetDdosBgpInstancesInstance {
        /**
         * The instance's elastic defend bandwidth.
         */
        bandwidth: number;
        /**
         * The instance's base defend bandwidth.
         */
        baseBandwidth: number;
        /**
         * The instance's id.
         */
        id: string;
        /**
         * The instance's count of ip config.
         */
        ipCount: number;
        /**
         * The instance's IP version.
         */
        ipType: string;
        /**
         * The instance's remark.
         */
        name: string;
        /**
         * A region of instance.
         */
        region: string;
        /**
         * The instance's type.
         */
        type: string;
    }

    export interface GetDdosCooInstancesInstance {
        /**
         * The instance's elastic defend bandwidth.
         */
        bandwidth: number;
        /**
         * The instance's base defend bandwidth.
         */
        baseBandwidth: number;
        /**
         * The instance's count of domain retransmission config.
         */
        domainCount: number;
        /**
         * The instance's id.
         */
        id: string;
        /**
         * The instance's remark.
         */
        name: string;
        /**
         * The instance's count of port retransmission config.
         */
        portCount: number;
        /**
         * The instance's business bandwidth.
         */
        serviceBandwidth: number;
    }
}

export namespace dds {
    export interface GetMongoInstancesInstance {
        availabilityZone: string;
        chargeType: string;
        creationTime: string;
        engine: string;
        engineVersion: string;
        expirationTime: string;
        id: string;
        instanceClass: string;
        instanceType: string;
        lockMode: string;
        mongos: outputs.dds.GetMongoInstancesInstanceMongo[];
        name: string;
        networkType: string;
        regionId: string;
        replication: string;
        shards: outputs.dds.GetMongoInstancesInstanceShard[];
        status: string;
        storage: number;
        tags: {[key: string]: any};
    }

    export interface GetMongoInstancesInstanceMongo {
        class: string;
        description: string;
        nodeId: string;
    }

    export interface GetMongoInstancesInstanceShard {
        class: string;
        description: string;
        nodeId: string;
        storage: number;
    }
}

export namespace dns {
    export interface GetDomainGroupsGroup {
        groupId: string;
        groupName: string;
    }

    export interface GetDomainRecordsRecord {
        domainName: string;
        hostRecord: string;
        line: string;
        locked: boolean;
        priority: number;
        recordId: string;
        status: string;
        ttl: number;
        type: string;
        value: string;
    }

    export interface GetDomainsDomain {
        /**
         * Specifies whether the domain is from Alibaba Cloud or not.
         */
        aliDomain: boolean;
        /**
         * DNS list of the domain in the analysis system.
         */
        dnsServers: string[];
        /**
         * ID of the domain.
         */
        domainId: string;
        /**
         * Name of the domain.
         */
        domainName: string;
        /**
         * Id of group that contains the domain.
         */
        groupId: string;
        /**
         * Name of group that contains the domain.
         */
        groupName: string;
        /**
         * Cloud analysis product ID.
         */
        instanceId: string;
        /**
         * Punycode of the Chinese domain.
         */
        punyCode: string;
        /**
         * Cloud analysis version code.
         * * `ids` (Optional, Available in 1.53.0+) - A list of domain IDs.
         */
        versionCode: string;
    }

    export interface GetGroupsGroup {
        /**
         * Id of the group.
         */
        groupId: string;
        /**
         * Name of the group.
         */
        groupName: string;
    }

    export interface GetRecordsRecord {
        /**
         * The domain name associated to the records.
         */
        domainName: string;
        /**
         * Host record of the domain.
         */
        hostRecord: string;
        /**
         * ISP line. Valid items are `default`, `telecom`, `unicom`, `mobile`, `oversea`, `edu`, `drpeng`, `btvn`, .etc. For checking all resolution lines enumeration please visit [Alibaba Cloud DNS doc](https://www.alibabacloud.com/help/doc-detail/34339.htm) 
         */
        line: string;
        /**
         * Indicates whether the record is locked.
         */
        locked: boolean;
        /**
         * Priority of the `MX` record.
         */
        priority: number;
        /**
         * ID of the record.
         */
        recordId: string;
        /**
         * Record status. Valid items are `ENABLE` and `DISABLE`.
         */
        status: string;
        /**
         * TTL of the record.
         */
        ttl: number;
        /**
         * Record type. Valid items are `A`, `NS`, `MX`, `TXT`, `CNAME`, `SRV`, `AAAA`, `REDIRECT_URL`, `FORWORD_URL` .
         */
        type: string;
        /**
         * Host record value of the domain.
         */
        value: string;
    }

    export interface GetResolutionLinesLine {
        lineCode: string;
        /**
         * Line display name.
         */
        lineDisplayName: string;
        /**
         * Line name.
         */
        lineName: string;
    }
}

export namespace drds {
    export interface GetInstancesInstance {
        /**
         * Creation time of the instance.
         */
        createTime: number;
        /**
         * The DRDS instance description.
         */
        description: string;
        /**
         * The ID of the DRDS instance.
         */
        id: string;
        /**
         * `Classic` for public classic network or `VPC` for private network.
         */
        networkType: string;
        /**
         * Status of the instance.
         */
        status: string;
        /**
         * The DRDS Instance type.
         */
        type: string;
        /**
         * The DRDS Instance version.
         */
        version: number;
        /**
         * Zone ID the instance belongs to.
         */
        zoneId: string;
    }
}

export namespace ecs {
    export interface GetDisksDisk {
        /**
         * Disk attachment time.
         */
        attachedTime: string;
        /**
         * Availability zone of the disk.
         */
        availabilityZone: string;
        /**
         * Disk category. Possible values: `cloud` (basic cloud disk), `cloudEfficiency` (ultra cloud disk), `ephemeralSsd` (local SSD cloud disk), `cloudSsd` (SSD cloud disk), and `cloudEssd` (ESSD cloud disk).
         */
        category: string;
        /**
         * Disk creation time.
         */
        creationTime: string;
        /**
         * Disk description.
         */
        description: string;
        /**
         * Disk detachment time.
         */
        detachedTime: string;
        /**
         * Indicate whether the disk is encrypted or not. Possible values: `on` and `off`.
         */
        encrypted: string;
        /**
         * Disk expiration time.
         */
        expirationTime: string;
        /**
         * ID of the disk.
         */
        id: string;
        /**
         * ID of the image from which the disk is created. It is null unless the disk is created using an image.
         */
        imageId: string;
        /**
         * Filter the results by the specified ECS instance ID.
         */
        instanceId: string;
        /**
         * Disk name.
         */
        name: string;
        /**
         * Region ID the disk belongs to.
         */
        regionId: string;
        /**
         * The Id of resource group which the disk belongs.
         */
        resourceGroupId: string;
        /**
         * Disk size in GiB.
         */
        size: number;
        /**
         * Snapshot used to create the disk. It is null if no snapshot is used to create the disk.
         */
        snapshotId: string;
        /**
         * Current status. Possible values: `In_use`, `Available`, `Attaching`, `Detaching`, `Creating` and `ReIniting`.
         */
        status: string;
        /**
         * A map of tags assigned to the disks. It must be in the format:
         * ```
         * data "alicloud.ecs.getDisks" "disksDs" {
         * tags = {
         * tagKey1 = "tagValue1",
         * tagKey2 = "tagValue2"
         * }
         * }
         * ```
         */
        tags?: {[key: string]: any};
        /**
         * Disk type. Possible values: `system` and `data`.
         */
        type: string;
    }

    export interface GetEipsEip {
        /**
         * EIP internet max bandwidth in Mbps.
         */
        bandwidth: string;
        /**
         * Time of creation.
         */
        creationTime: string;
        /**
         * ID of the EIP.
         */
        id: string;
        /**
         * The ID of the instance that is being bound.
         */
        instanceId: string;
        /**
         * The instance type of that the EIP is bound.
         */
        instanceType: string;
        /**
         * EIP internet charge type.
         */
        internetChargeType: string;
        /**
         * Public IP Address of the the EIP.
         */
        ipAddress: string;
        /**
         * EIP status. Possible values are: `Associating`, `Unassociating`, `InUse` and `Available`.
         */
        status: string;
    }

    export interface GetImagesImage {
        /**
         * Platform type of the image system: i386 or x86_64.
         */
        architecture: string;
        /**
         * Time of creation.
         */
        creationTime: string;
        /**
         * Description of the image.
         */
        description: string;
        /**
         * Description of the system with disks and snapshots under the image.
         */
        diskDeviceMappings: outputs.ecs.GetImagesImageDiskDeviceMapping[];
        /**
         * ID of the image.
         */
        id: string;
        imageId: string;
        /**
         * Alias of the image owner.
         */
        imageOwnerAlias: string;
        /**
         * Version of the image.
         */
        imageVersion: string;
        isCopied: boolean;
        isSelfShared: string;
        /**
         * Whether the user has subscribed to the terms of service for the image product corresponding to the ProductCode.
         */
        isSubscribed: boolean;
        isSupportIoOptimized: boolean;
        name: string;
        /**
         * Display Chinese name of the OS.
         */
        osName: string;
        /**
         * Display English name of the OS.
         */
        osNameEn: string;
        osType: string;
        platform: string;
        /**
         * Product code of the image on the image market.
         */
        productCode: string;
        /**
         * Progress of image creation, presented in percentages.
         */
        progress: string;
        /**
         * Size of the created disk.
         */
        size: number;
        state: string;
        /**
         * Status of the image. Possible values: `UnAvailable`, `Available`, `Creating` and `CreateFailed`.
         */
        status: string;
        tags?: {[key: string]: any};
        usage: string;
    }

    export interface GetImagesImageDiskDeviceMapping {
        /**
         * Device information of the created disk: such as /dev/xvdb.
         */
        device: string;
        /**
         * Size of the created disk.
         */
        size: string;
        /**
         * Snapshot ID.
         */
        snapshotId: string;
    }

    export interface GetInstanceTypeFamiliesFamily {
        /**
         * The generation of the instance type family, Valid values: `ecs-1`, `ecs-2`, `ecs-3` and `ecs-4`. For more information, see [Instance type families](https://www.alibabacloud.com/help/doc-detail/25378.htm). 
         */
        generation: string;
        /**
         * ID of the instance type family.
         */
        id: string;
        /**
         * A list of Zone to launch the instance.
         */
        zoneIds: string[];
    }

    export interface GetInstanceTypesInstanceType {
        /**
         * List of availability zones that support the instance type.
         */
        availabilityZones: string[];
        /**
         * The burstable instance attribution:
         */
        burstableInstance: outputs.ecs.GetInstanceTypesInstanceTypeBurstableInstance;
        /**
         * Filter the results to a specific number of cpu cores.
         */
        cpuCoreCount: number;
        /**
         * Filter the result whose network interface number is no more than `eniAmount`.
         */
        eniAmount: number;
        /**
         * The instance type family.
         */
        family: string;
        /**
         * The GPU attribution of an instance type:
         */
        gpu: outputs.ecs.GetInstanceTypesInstanceTypeGpu;
        /**
         * ID of the instance type.
         */
        id: string;
        /**
         * Local storage of an instance type:
         */
        localStorage: outputs.ecs.GetInstanceTypesInstanceTypeLocalStorage;
        /**
         * Filter the results to a specific memory size in GB.
         */
        memorySize: number;
        price: string;
    }

    export interface GetInstanceTypesInstanceTypeBurstableInstance {
        /**
         * The compute performance benchmark CPU credit of a burstable instance.
         */
        baselineCredit: string;
        /**
         * The initial CPU credit of a burstable instance.
         */
        initialCredit: string;
    }

    export interface GetInstanceTypesInstanceTypeGpu {
        /**
         * The number of local storage devices that an instance has been attached to.
         */
        amount: string;
        /**
         * The category of local storage that an instance has been attached to.
         */
        category: string;
    }

    export interface GetInstanceTypesInstanceTypeLocalStorage {
        /**
         * The number of local storage devices that an instance has been attached to.
         */
        amount: string;
        /**
         * The capacity of a local storage in GB.
         */
        capacity: string;
        /**
         * The category of local storage that an instance has been attached to.
         */
        category: string;
    }

    export interface GetInstancesInstance {
        /**
         * Availability zone where instances are located.
         */
        availabilityZone: string;
        /**
         * Instance creation time.
         */
        creationTime: string;
        /**
         * Instance description.
         */
        description: string;
        /**
         * Description of the attached disks.
         */
        diskDeviceMappings: outputs.ecs.GetInstancesInstanceDiskDeviceMapping[];
        /**
         * EIP address the VPC instance is using.
         */
        eip: string;
        /**
         * ID of the instance.
         */
        id: string;
        /**
         * The image ID of some ECS instance used.
         */
        imageId: string;
        /**
         * Instance charge type.
         */
        instanceChargeType: string;
        /**
         * Instance type.
         */
        instanceType: string;
        /**
         * Instance network charge type.
         */
        internetChargeType: string;
        /**
         * Max output bandwidth for internet.
         */
        internetMaxBandwidthOut: number;
        /**
         * Key pair the instance is using.
         */
        keyName: string;
        /**
         * Instance name.
         */
        name: string;
        /**
         * Instance private IP address.
         */
        privateIp: string;
        /**
         * Instance public IP address.
         */
        publicIp: string;
        /**
         * The RAM role name which the instance attaches.
         */
        ramRoleName: string;
        /**
         * Region ID the instance belongs to.
         */
        regionId: string;
        /**
         * The Id of resource group which the instance belongs.
         */
        resourceGroupId: string;
        /**
         * List of security group IDs the instance belongs to.
         */
        securityGroups: string[];
        /**
         * Spot strategy the instance is using.
         */
        spotStrategy: string;
        /**
         * Instance status. Valid values: "Creating", "Starting", "Running", "Stopping" and "Stopped". If undefined, all statuses are considered.
         */
        status: string;
        /**
         * A map of tags assigned to the ECS instances. It must be in the format:
         * ```
         * data "alicloud.ecs.getInstances" "taggedInstances" {
         * tags = {
         * tagKey1 = "tagValue1",
         * tagKey2 = "tagValue2"
         * }
         * }
         * ```
         */
        tags?: {[key: string]: any};
        /**
         * ID of the VPC linked to the instances.
         */
        vpcId: string;
        /**
         * ID of the VSwitch linked to the instances.
         */
        vswitchId: string;
    }

    export interface GetInstancesInstanceDiskDeviceMapping {
        /**
         * Cloud disk category.
         */
        category: string;
        /**
         * Device information of the created disk: such as /dev/xvdb.
         */
        device: string;
        /**
         * Size of the created disk.
         */
        size: number;
        /**
         * Cloud disk type: system disk or data disk.
         */
        type: string;
    }

    export interface GetKeyPairsKeyPair {
        /**
         * A finger print used to retrieve specified key pair.
         */
        fingerPrint: string;
        /**
         * ID of the key pair.
         */
        id: string;
        /**
         * A list of ECS instances that has been bound this key pair.
         */
        instances: outputs.ecs.GetKeyPairsKeyPairInstance[];
        /**
         * Name of the key pair.
         */
        keyName: string;
        /**
         * The Id of resource group which the key pair belongs.
         */
        resourceGroupId: string;
        /**
         * A mapping of tags to assign to the resource.
         */
        tags?: {[key: string]: any};
    }

    export interface GetKeyPairsKeyPairInstance {
        /**
         * The ID of the availability zone where the ECS instance is located.
         */
        availabilityZone: string;
        description: string;
        imageId: string;
        /**
         * The ID of the ECS instance.
         */
        instanceId: string;
        /**
         * The name of the ECS instance.
         */
        instanceName: string;
        instanceType: string;
        /**
         * Name of the key pair.
         */
        keyName: string;
        /**
         * The private IP address of the ECS instance.
         */
        privateIp: string;
        /**
         * The public IP address or EIP of the ECS instance.
         */
        publicIp: string;
        regionId: string;
        status: string;
        /**
         * The ID of the VSwitch attached to the ECS instance.
         */
        vswitchId: string;
    }

    export interface GetNetworkInterfacesInterface {
        /**
         * Creation time of the ENI.
         */
        creationTime: string;
        /**
         * Description of the ENI.
         */
        description: string;
        /**
         * ID of the ENI.
         */
        id: string;
        /**
         * ID of the instance that the ENI is attached to.
         */
        instanceId: string;
        /**
         * MAC address of the ENI.
         */
        mac: string;
        /**
         * Name of the ENI.
         */
        name: string;
        /**
         * Primary private IP of the ENI.
         */
        privateIp: string;
        /**
         * A list of secondary private IP address that is assigned to the ENI.
         */
        privateIps: string[];
        /**
         * Public IP of the ENI.
         */
        publicIp: string;
        /**
         * The Id of resource group.
         */
        resourceGroupId: string;
        /**
         * A list of security group that the ENI belongs to.
         */
        securityGroups: string[];
        /**
         * Current status of the ENI.
         */
        status: string;
        /**
         * A map of tags assigned to the ENI.
         */
        tags?: {[key: string]: any};
        /**
         * ID of the VPC that the ENI belongs to.
         */
        vpcId: string;
        /**
         * ID of the VSwitch that the ENI is linked to.
         */
        vswitchId: string;
        /**
         * ID of the availability zone that the ENI belongs to.
         */
        zoneId: string;
    }

    export interface GetSecurityGroupRulesRule {
        /**
         * The description of the rule.
         */
        description: string;
        /**
         * Target IP address segment for egress authorization.
         */
        destCidrIp: string;
        destGroupId: string;
        /**
         * Alibaba Cloud account of the target security group.
         */
        destGroupOwnerAccount: string;
        /**
         * Authorization direction. Valid values are: `ingress` or `egress`.
         */
        direction: string;
        /**
         * The IP protocol. Valid values are: `tcp`, `udp`, `icmp`, `gre` and `all`.
         */
        ipProtocol: string;
        /**
         * Refers to the network type. Can be either `internet` or `intranet`. The default value is `internet`.
         */
        nicType: string;
        /**
         * Authorization policy. Can be either `accept` or `drop`. The default value is `accept`.
         */
        policy: string;
        /**
         * The range of port numbers.
         */
        portRange: string;
        /**
         * Rule priority.
         */
        priority: number;
        /**
         * Source IP address segment for ingress authorization.
         */
        sourceCidrIp: string;
        sourceGroupId: string;
        /**
         * Alibaba Cloud account of the source security group.
         */
        sourceGroupOwnerAccount: string;
    }

    export interface GetSecurityGroupsGroup {
        /**
         * Creation time of the security group.
         */
        creationTime: string;
        /**
         * The description of the security group.
         */
        description: string;
        /**
         * The ID of the security group.
         */
        id: string;
        /**
         * Whether to allow inner network access.
         */
        innerAccess: boolean;
        /**
         * The name of the security group.
         */
        name: string;
        /**
         * The Id of resource group which the securityGroup belongs.
         */
        resourceGroupId: string;
        /**
         * The type of the security group.
         */
        securityGroupType: string;
        /**
         * A map of tags assigned to the ECS instances. It must be in the format:
         * ```
         * data "alicloud.ecs.getSecurityGroups" "taggedSecurityGroups" {
         * tags = {
         * tagKey1 = "tagValue1",
         * tagKey2 = "tagValue2"
         * }
         * }
         * ```
         */
        tags?: {[key: string]: any};
        /**
         * Used to retrieve security groups that belong to the specified VPC ID.
         */
        vpcId: string;
    }

    export interface GetSnapshotsSnapshot {
        /**
         * Creation time. Time of creation. It is represented according to ISO8601, and UTC time is used. Format: YYYY-MM-DDThh:mmZ.
         */
        creationTime: string;
        /**
         * Description of the snapshot.
         */
        description: string;
        /**
         * Whether the snapshot is encrypted or not.
         */
        encrypted: boolean;
        /**
         * ID of the snapshot.
         */
        id: string;
        /**
         * Name of the snapshot.
         */
        name: string;
        /**
         * Product code on the image market place.
         */
        productCode: string;
        /**
         * Progress of snapshot creation, presented in percentage.
         */
        progress: string;
        /**
         * The remaining time of a snapshot creation task, in seconds.
         */
        remainTime: number;
        /**
         * The number of days that an automatic snapshot retains in the console for your instance.
         */
        retentionDays: number;
        /**
         * Source disk ID, which is retained after the source disk of the snapshot is deleted.
         */
        sourceDiskId: string;
        /**
         * Size of the source disk, measured in GB.
         */
        sourceDiskSize: string;
        /**
         * Source disk attribute. Value range:
         * * System
         * * Data
         */
        sourceDiskType: string;
        /**
         * The snapshot status. Value range:
         * * progressing
         * * accomplished
         * * failed
         */
        status: string;
        /**
         * Whether the snapshots are used to create resources or not. Value range:
         * * image
         * * disk
         * * imageDisk
         * * none
         */
        usage: string;
    }

    export interface ImageDiskDeviceMapping {
        /**
         * Specifies the name of a disk in the combined custom image. Value range: /dev/xvda to /dev/xvdz.
         */
        device: string;
        /**
         * Specifies the type of a disk in the combined custom image. If you specify this parameter, you can use a data disk snapshot as the data source of a system disk for creating an image. If it is not specified, the disk type is determined by the corresponding snapshot. Valid values: `system`, `data`,
         */
        diskType: string;
        /**
         * Specifies the size of a disk in the combined custom image, in GiB. Value range: 5 to 2000.
         */
        size: number;
        /**
         * Specifies a snapshot that is used to create a combined custom image.
         */
        snapshotId: string;
    }

    export interface ImageImportDiskDeviceMapping {
        /**
         * Specifies the type of a disk in the combined custom image. If you specify this parameter, you can use a data disk snapshot as the data source of a system disk for creating an image. If it is not specified, the disk type is determined by the corresponding snapshot. Valid values: `system`, `data`,
         */
        device: string;
        /**
         * Resolution size. You must ensure that the system disk space ≥ file system space. Ranges: When n = 1, the system disk: 5 ~ 500GiB, When n = 2 ~ 17, that is, data disk: 5 ~ 1000GiB, When temporary is introduced, the system automatically detects the size, which is subject to the detection result.
         */
        diskImageSize?: number;
        /**
         * Image format. Value range: When the `RAW`, `VHD`, `qcow2` is imported into the image, the system automatically detects the image format, whichever comes first.
         */
        format: string;
        /**
         * Save the exported OSS bucket.
         */
        ossBucket?: string;
        ossObject?: string;
    }

    export interface InstanceDataDisk {
        /**
         * The ID of the automatic snapshot policy applied to the system disk.
         */
        autoSnapshotPolicyId?: string;
        /**
         * The category of the disk:
         * - `cloud`: The general cloud disk.
         * - `cloudEfficiency`: The efficiency cloud disk.
         * - `cloudSsd`: The SSD cloud disk.
         * - `cloudEssd`: The ESSD cloud disk.
         * - `ephemeralSsd`: The local SSD disk.
         * Default to `cloudEfficiency`.
         * * `encrypted` -(Optional, Bool, ForceNew) Encrypted the data in this disk.
         */
        category?: string;
        /**
         * Delete this data disk when the instance is destroyed. It only works on cloud, cloud_efficiency, cloud_essd, cloudSsd disk. If the category of this data disk was ephemeral_ssd, please don't set this param.
         */
        deleteWithInstance?: boolean;
        /**
         * The description of the data disk.
         */
        description?: string;
        encrypted?: boolean;
        /**
         * The name of the data disk.
         */
        name?: string;
        /**
         * The size of the data disk.
         * - cloud：[5, 2000]
         * - cloud_efficiency：[20, 32768]
         * - cloud_ssd：[20, 32768]
         * - cloud_essd：[20, 32768]
         * - ephemeral_ssd: [5, 800]
         */
        size: number;
        /**
         * The snapshot ID used to initialize the data disk. If the size specified by snapshot is greater that the size of the disk, use the size specified by snapshot as the size of the data disk.
         */
        snapshotId?: string;
    }

    export interface LaunchTemplateDataDisk {
        /**
         * The category of the disk:
         * - cloud: Basic cloud disk.
         * - cloud_efficiency: Ultra cloud disk.
         * - cloud_ssd: SSD cloud Disks.
         * - ephemeral_ssd: local SSD Disks
         * - cloud_essd: ESSD cloud Disks.
         */
        category?: string;
        /**
         * Delete this data disk when the instance is destroyed. It only works on cloud, cloud_efficiency, cloudSsd and cloudEssd disk. If the category of this data disk was ephemeral_ssd, please don't set this param.
         */
        deleteWithInstance?: boolean;
        /**
         * The description of the data disk.
         */
        description?: string;
        encrypted?: boolean;
        /**
         * The name of the data disk.
         */
        name?: string;
        /**
         * The size of the data disk.
         * - cloud：[5, 2000]
         * - cloud_efficiency：[20, 32768]
         * - cloud_ssd：[20, 32768]
         * - cloud_essd：[20, 32768]
         * - ephemeral_ssd: [5, 800]
         */
        size?: number;
        /**
         * The snapshot ID used to initialize the data disk. If the size specified by snapshot is greater that the size of the disk, use the size specified by snapshot as the size of the data disk.
         */
        snapshotId?: string;
    }

    export interface LaunchTemplateNetworkInterfaces {
        /**
         * The description of the data disk.
         */
        description?: string;
        /**
         * The name of the data disk.
         */
        name?: string;
        /**
         * The primary private IP address of the ENI.
         */
        primaryIp?: string;
        /**
         * The security group ID must be one in the same VPC.
         */
        securityGroupId?: string;
        /**
         * The VSwitch ID for ENI. The instance must be in the same zone of the same VPC network as the ENI, but they may belong to different VSwitches.
         */
        vswitchId?: string;
    }
}

export namespace elasticsearch {
    export interface GetInstancesInstance {
        createdAt: string;
        dataNodeAmount: number;
        dataNodeDiskSize: number;
        dataNodeDiskType: string;
        dataNodeSpec: string;
        description: string;
        id: string;
        instanceChargeType: string;
        status: string;
        tags: {[key: string]: any};
        updatedAt: string;
        version: string;
        vswitchId: string;
    }

    export interface GetZonesZone {
        /**
         * ID of the zone.
         */
        id: string;
        /**
         * A list of zone ids in which the multi zone.
         */
        multiZoneIds: string[];
    }
}

export namespace emr {
    export interface ClusterBootstrapAction {
        /**
         * bootstrap action args, e.g. "--a=b".
         */
        arg?: string;
        /**
         * bootstrap action name.
         */
        name?: string;
        /**
         * bootstrap action path, e.g. "oss://bucket/path".
         */
        path?: string;
    }

    export interface ClusterHostGroup {
        /**
         * Auto renew for prepaid, true of false. Default is false.
         */
        autoRenew?: boolean;
        /**
         * Charge Type for this group of hosts: PostPaid or PrePaid. If this is not specified, charge type will follow global chargeType value.
         */
        chargeType?: string;
        /**
         * Data disk capacity.
         */
        diskCapacity?: string;
        /**
         * Data disk count.
         */
        diskCount?: string;
        /**
         * Data disk type. Supported value: cloud,cloud_efficiency,cloud_ssd,local_disk,cloud_essd.
         */
        diskType?: string;
        gpuDriver?: string;
        /**
         * host group name.
         */
        hostGroupName?: string;
        /**
         * host group type, supported value: MASTER, CORE or TASK, supported 'GATEWAY' available in 1.61.0+.
         */
        hostGroupType?: string;
        /**
         * Instance list for cluster scale down. This value follows the json format, e.g. ["instanceId1","instanceId2"]. escape character for " is \".
         */
        instanceList?: string;
        /**
         * Host Ecs instance type.
         */
        instanceType?: string;
        /**
         * Host number in this group.
         */
        nodeCount?: string;
        /**
         * If charge type is PrePaid, this should be specified, unit is month. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36.
         */
        period?: number;
        /**
         * System disk capacity.
         */
        sysDiskCapacity?: string;
        /**
         * System disk type. Supported value: cloud,cloud_efficiency,cloud_ssd,cloud_essd.
         */
        sysDiskType?: string;
    }

    export interface GetDiskTypesType {
        /**
         * The maximum value of the data disk to supported the specific instance type
         */
        max: number;
        /**
         * The mininum value of the data disk to supported the specific instance type
         */
        min: number;
        /**
         * The value of the data disk or system disk
         */
        value: string;
    }

    export interface GetInstanceTypesType {
        /**
         * The ID of the instance type.
         */
        id: string;
        /**
         * Local capacity of the applied ecs instance for emr cluster. Unit: GB.
         */
        localStorageCapacity: number;
        /**
         * The supported resources of specific zoneId.
         */
        zoneId: string;
    }

    export interface GetMainVersionsMainVersion {
        /**
         * A list of cluster types the emr cluster supported. Possible values: `HADOOP`, `ZOOKEEPER`, `KAFKA`, `DRUID`.
         */
        clusterTypes: string[];
        /**
         * The version of the emr cluster instance. Possible values: `EMR-4.0.0`, `EMR-3.23.0`, `EMR-3.22.0`.
         */
        emrVersion: string;
        /**
         * The image id of the emr cluster instance.
         */
        imageId: string;
    }
}

export namespace ess {
    export interface GetAlarmsAlarm {
        /**
         * The list of actions to execute when this alarm transition into an ALARM state. Each action is specified as ess scaling rule ari.
         */
        alarmActions: string[];
        /**
         * Defines the application group id defined by CMS which is assigned when you upload custom metric to CMS, only available for custom metirc.
         */
        cloudMonitorGroupId: number;
        /**
         * The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. 
         */
        comparisonOperator: string;
        /**
         * The description for the alarm.
         */
        description: string;
        /**
         * The dimension map for the alarm's associated metric. 
         */
        dimensions: {[key: string]: any};
        /**
         * Whether to enable specific ess alarm.
         */
        enable: boolean;
        /**
         * The number of times that needs to satisfies comparison condition before transition into ALARM state. 
         */
        evaluationCount: number;
        /**
         * The id of alarm.
         */
        id: string;
        /**
         * The name for the alarm's associated metric. See Block_metricNames_and_dimensions below for details.
         */
        metricName: string;
        /**
         * The type for the alarm's associated metric. Supported value: system, custom. "system" means the metric data is collected by Aliyun Cloud Monitor Service(CMS), "custom" means the metric data is upload to CMS by users. Defaults to system.
         */
        metricType: string;
        /**
         * The name for ess alarm.
         */
        name: string;
        /**
         * The period in seconds over which the specified statistic is applied.
         */
        period: number;
        /**
         * Scaling group id the alarms belong to.
         */
        scalingGroupId: string;
        /**
         * The state of alarm task. 
         */
        state: string;
        /**
         * The statistic to apply to the alarm's associated metric. 
         */
        statistics: string;
        /**
         * The value against which the specified statistics is compared.
         */
        threshold: string;
    }

    export interface GetLifecycleHooksHook {
        /**
         * Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses. 
         */
        defaultResult: string;
        /**
         * Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the defaultResult parameter.
         */
        heartbeatTimeout: number;
        /**
         * ID of the lifecycle hook.
         */
        id: string;
        /**
         * Type of Scaling activity attached to lifecycle hook.
         */
        lifecycleTransition: string;
        /**
         * Name of the lifecycle hook.
         */
        name: string;
        /**
         * The Arn of notification target.
         */
        notificationArn: string;
        /**
         * Additional information that you want to include when Auto Scaling sends a message to the notification target.
         */
        notificationMetadata: string;
        /**
         * Scaling group id the lifecycle hooks belong to.
         */
        scalingGroupId: string;
    }

    export interface GetNotificationsNotification {
        /**
         * ID of the notification.
         */
        id: string;
        /**
         * The Alibaba Cloud Resource Name (ARN) for the notification object. 
         */
        notificationArn: string;
        /**
         * The notification types of Auto Scaling events and resource changes.
         */
        notificationTypes: string[];
        /**
         * Scaling group id the notifications belong to.
         */
        scalingGroupId: string;
    }

    export interface GetScalingConfigurationsConfiguration {
        /**
         * Creation time of the scaling configuration.
         */
        creationTime: string;
        /**
         * Data disks of the scaling configuration.
         */
        dataDisks: outputs.ess.GetScalingConfigurationsConfigurationDataDisk[];
        /**
         * ID of the scaling rule.
         */
        id: string;
        /**
         * Image ID of the scaling configuration.
         */
        imageId: string;
        /**
         * Instance type of the scaling configuration.
         */
        instanceType: string;
        /**
         * Internet charge type of the scaling configuration.
         */
        internetChargeType: string;
        /**
         * Internet max bandwidth in of the scaling configuration.
         */
        internetMaxBandwidthIn: number;
        /**
         * Internet max bandwidth of the scaling configuration.
         */
        internetMaxBandwidthOut: number;
        /**
         * Lifecycle state of the scaling configuration.
         */
        lifecycleState: string;
        /**
         * Name of the scaling configuration.
         */
        name: string;
        /**
         * Scaling group id the scaling configurations belong to.
         */
        scalingGroupId: string;
        /**
         * Security group ID of the scaling configuration.
         */
        securityGroupId: string;
        /**
         * System disk category of the scaling configuration.
         */
        systemDiskCategory: string;
        /**
         * System disk size of the scaling configuration.
         */
        systemDiskSize: number;
    }

    export interface GetScalingConfigurationsConfigurationDataDisk {
        /**
         * Category of data disk.
         */
        category?: string;
        /**
         * Delete_with_instance attribute of data disk.
         */
        deleteWithInstance?: boolean;
        /**
         * Device attribute of data disk.
         */
        device?: string;
        /**
         * Size of data disk.
         */
        size?: number;
        /**
         * Size of data disk.
         */
        snapshotId?: string;
    }

    export interface GetScalingGroupsGroup {
        /**
         * Number of active instances in scaling group.
         */
        activeCapacity: number;
        activeScalingConfiguration: string;
        /**
         * Default cooldown time of scaling group.
         */
        cooldownTime: number;
        /**
         * Creation time of scaling group.
         */
        creationTime: string;
        /**
         * Db instances id which the ECS instance attached to.
         */
        dbInstanceIds: string[];
        /**
         * ID of the scaling group.
         */
        id: string;
        /**
         * Active launch template ID for scaling group.
         */
        launchTemplateId: string;
        /**
         * Version of active launch template.
         */
        launchTemplateVersion: string;
        /**
         * Lifecycle state of scaling group.
         */
        lifecycleState: string;
        /**
         * Slb instances id which the ECS instance attached to.
         */
        loadBalancerIds: string[];
        /**
         * The maximum number of ECS instances.
         */
        maxSize: number;
        /**
         * The minimum number of ECS instances.
         */
        minSize: number;
        /**
         * Name of the scaling group.
         * * `activeScalingConfiguration` -Active scaling configuration for scaling group.
         */
        name: string;
        /**
         * Number of pending instances in scaling group.
         */
        pendingCapacity: number;
        /**
         * Region ID the scaling group belongs to.
         */
        regionId: string;
        /**
         * Removal policy used to select the ECS instance to remove from the scaling group.
         */
        removalPolicies: string[];
        /**
         * Number of removing instances in scaling group.
         */
        removingCapacity: number;
        /**
         * Number of instances in scaling group.
         */
        totalCapacity: number;
        /**
         * Vswitches id in which the ECS instance launched.
         */
        vswitchIds: string[];
    }

    export interface GetScalingRulesRule {
        /**
         * Adjustment type of the scaling rule.
         */
        adjustmentType: string;
        /**
         * Adjustment value of the scaling rule.
         */
        adjustmentValue: number;
        /**
         * Cooldown time of the scaling rule.
         */
        cooldown: number;
        /**
         * ID of the scaling rule.
         */
        id: string;
        /**
         * Min adjustment magnitude of scaling rule.
         */
        minAdjustmentMagnitude: number;
        /**
         * Name of the scaling rule.
         */
        name: string;
        /**
         * Scaling group id the scaling rules belong to.
         */
        scalingGroupId: string;
        /**
         * Ari of scaling rule.
         */
        scalingRuleAri: string;
        /**
         * Type of scaling rule.
         */
        type: string;
    }

    export interface GetScheduledTasksTask {
        /**
         * Description of the scheduled task.
         */
        description: string;
        /**
         * ID of the scheduled task id.
         */
        id: string;
        /**
         * The time period during which a failed scheduled task is retried.
         */
        launchExpirationTime: number;
        /**
         * The time at which the scheduled task is triggered.
         */
        launchTime: string;
        maxValue: number;
        minValue: number;
        /**
         * Name of the scheduled task name.
         */
        name: string;
        /**
         * Specifies the end time after which the scheduled task is no longer repeated.
         */
        recurrenceEndTime: string;
        /**
         * Specifies the recurrence type of the scheduled task. 
         */
        recurrenceType: string;
        /**
         * Specifies how often a scheduled task recurs. 
         */
        recurrenceValue: string;
        /**
         * The operation to be performed when a scheduled task is triggered.
         */
        scheduledAction: string;
        taskEnabled: boolean;
    }

    export interface ScalingConfigurationDataDisk {
        category?: string;
        deleteWithInstance?: boolean;
        device?: string;
        size?: number;
        snapshotId?: string;
    }

    export interface ScalingGroupVServerGroupsVserverGroup {
        loadbalancerId: string;
        vserverAttributes: outputs.ess.ScalingGroupVServerGroupsVserverGroupVserverAttribute[];
    }

    export interface ScalingGroupVServerGroupsVserverGroupVserverAttribute {
        port: number;
        vserverGroupId: string;
        weight: number;
    }

    export interface ScalingRuleStepAdjustment {
        metricIntervalLowerBound?: string;
        metricIntervalUpperBound?: string;
        scalingAdjustment?: number;
    }
}

export namespace fc {
    export interface GetFunctionsFunction {
        /**
         * Checksum (crc64) of the function code.
         */
        codeChecksum: string;
        /**
         * Function code size in bytes.
         */
        codeSize: number;
        /**
         * Function creation time.
         */
        creationTime: string;
        /**
         * Function description.
         */
        description: string;
        /**
         * A map that defines environment variables for the function.
         */
        environmentVariables: {[key: string]: any};
        /**
         * Function [entry point](https://www.alibabacloud.com/help/doc-detail/62213.htm) in the code.
         */
        handler: string;
        /**
         * Function ID.
         */
        id: string;
        /**
         * Function last modification time.
         */
        lastModificationTime: string;
        /**
         * Amount of memory in MB the function can use at runtime.
         */
        memorySize: number;
        /**
         * Function name.
         */
        name: string;
        /**
         * Function runtime. The list of possible values is [available here](https://www.alibabacloud.com/help/doc-detail/52077.htm).
         */
        runtime: string;
        /**
         * Maximum amount of time the function can run in seconds.
         */
        timeout: number;
    }

    export interface GetServicesService {
        /**
         * FC service creation time.
         */
        creationTime: string;
        /**
         * FC service description.
         */
        description: string;
        /**
         * FC service ID.
         */
        id: string;
        /**
         * Indicate whether the service can access to internet or not.
         */
        internetAccess: boolean;
        /**
         * FC service last modification time.
         */
        lastModificationTime: string;
        /**
         * A list of one element containing information about the associated log store. It contains the following attributes:
         */
        logConfig: outputs.fc.GetServicesServiceLogConfig;
        /**
         * FC service name.
         */
        name: string;
        /**
         * FC service role ARN.
         */
        role: string;
        /**
         * A list of one element containing information about accessible VPC resources. It contains the following attributes:
         */
        vpcConfig: outputs.fc.GetServicesServiceVpcConfig;
    }

    export interface GetServicesServiceLogConfig {
        /**
         * Log Service store name.
         */
        logstore: string;
        /**
         * Log Service project name.
         */
        project: string;
    }

    export interface GetServicesServiceVpcConfig {
        /**
         * Associated security group ID.
         */
        securityGroupId: string;
        /**
         * Associated VPC ID.
         */
        vpcId: string;
        /**
         * Associated VSwitch IDs.
         */
        vswitchIds: string[];
    }

    export interface GetTriggersTrigger {
        /**
         * JSON-encoded trigger configuration. See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
         */
        config: string;
        /**
         * FC trigger creation time.
         */
        creationTime: string;
        /**
         * FC trigger ID.
         */
        id: string;
        /**
         * RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
         */
        invocationRole: string;
        /**
         * FC trigger last modification time.
         */
        lastModificationTime: string;
        /**
         * FC trigger name.
         */
        name: string;
        /**
         * Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
         */
        sourceArn: string;
        /**
         * Type of the trigger. Valid values: `oss`, `log`, `timer`, `http` and `mnsTopic`.
         */
        type: string;
    }

    export interface GetZonesZone {
        /**
         * ID of the zone.
         */
        id: string;
    }

    export interface ServiceLogConfig {
        /**
         * The log store name of Logs service.
         */
        logstore: string;
        /**
         * The project name of Logs service.
         */
        project: string;
    }

    export interface ServiceVpcConfig {
        /**
         * A security group ID associated with the FC service.
         */
        securityGroupId: string;
        vpcId: string;
        /**
         * A list of vswitch IDs associated with the FC service.
         */
        vswitchIds: string[];
    }
}

export namespace gpdb {
    export interface GetInstancesInstance {
        /**
         * Instance availability zone.
         */
        availabilityZone: string;
        /**
         * Billing method. Value options are `PostPaid` for  Pay-As-You-Go and `PrePaid` for yearly or monthly subscription.
         */
        chargeType: string;
        /**
         * The time when you create an instance. The format is YYYY-MM-DDThh:mm:ssZ, such as 2011-05-30T12:11:4Z.
         */
        creationTime: string;
        /**
         * The description of an instance.
         */
        description: string;
        /**
         * Database engine type. Supported option is `gpdb`.
         */
        engine: string;
        /**
         * Database engine version.
         */
        engineVersion: string;
        /**
         * The instance id.
         */
        id: string;
        /**
         * The group type.
         */
        instanceClass: string;
        /**
         * The number of groups.
         */
        instanceGroupCount: string;
        instanceNetworkType: string;
        /**
         * Region ID the instance belongs to.
         */
        regionId: string;
        /**
         * Status of the instance.
         */
        status: string;
    }

    export interface GetZonesZone {
        /**
         * ID of the zone.
         */
        id: string;
        /**
         * A list of zone ids in which the multi zone.
         */
        multiZoneIds: string[];
    }
}

export namespace kms {
    export interface GetAliasesAlias {
        /**
         * The unique identifier of the alias.
         */
        aliasName: string;
        /**
         * ID of the alias. The value is same as KMS alias_name.
         */
        id: string;
        /**
         * ID of the key.
         */
        keyId: string;
    }

    export interface GetKeysKey {
        /**
         * The Alibaba Cloud Resource Name (ARN) of the key.
         */
        arn: string;
        /**
         * Creation date of key.
         */
        creationDate: string;
        /**
         * The owner of the key.
         */
        creator: string;
        /**
         * Deletion date of key.
         */
        deleteDate: string;
        /**
         * Description of the key.
         */
        description: string;
        /**
         * ID of the key.
         */
        id: string;
        /**
         * Filter the results by status of the KMS keys. Valid values: `Enabled`, `Disabled`, `PendingDeletion`.
         */
        status: string;
    }
}

export namespace kvstore {
    export interface GetInstanceClassesClass {
        /**
         * KVStore available instance class.
         */
        instanceClass: string;
        price: string;
    }

    export interface GetInstanceEnginesInstanceEngine {
        /**
         * Database type. Options are `Redis`, `Memcache`. Default to `Redis`.
         */
        engine: string;
        /**
         * Database version required by the user. Value options of Redis can refer to the latest docs [detail info](https://www.alibabacloud.com/help/doc-detail/60873.htm) `EngineVersion`. Value of Memcache should be empty.
         */
        engineVersion: string;
        /**
         * The Zone to launch the KVStore instance.
         */
        zoneId: string;
    }

    export interface GetInstancesInstance {
        /**
         * Availability zone.
         */
        availabilityZone: string;
        /**
         * Instance bandwidth limit. Unit: Mbit/s.
         */
        bandwidth: number;
        /**
         * Capacity of the applied ApsaraDB for Redis instance. Unit: MB.
         */
        capacity: number;
        /**
         * Billing method. Value options: `PostPaid` for  Pay-As-You-Go and `PrePaid` for subscription.
         */
        chargeType: string;
        connectionDomain: string;
        /**
         * Instance connection quantity limit. Unit: count.
         */
        connections: number;
        /**
         * Creation time of the instance.
         */
        createTime: string;
        /**
         * Expiration time. Pay-As-You-Go instances are never expire.
         */
        expireTime: string;
        /**
         * The ID of the RKV instance.
         */
        id: string;
        instanceClass: string;
        /**
         * Database type. Options are `Memcache`, and `Redis`. If no value is specified, all types are returned.
         */
        instanceType: string;
        /**
         * The name of the RKV instance.
         */
        name: string;
        /**
         * Connection port of the instance.
         */
        port: number;
        /**
         * Private IP address of the instance.
         */
        privateIp: string;
        /**
         * Region ID the instance belongs to.
         */
        regionId: string;
        /**
         * Status of the instance.
         * * `instanceClass`- (Optional) Type of the applied ApsaraDB for Redis instance.
         * For more information, see [Instance type table](https://www.alibabacloud.com/help/doc-detail/61135.htm).
         */
        status: string;
        userName: string;
        /**
         * Used to retrieve instances belong to specified VPC.
         */
        vpcId: string;
        /**
         * Used to retrieve instances belong to specified `vswitch` resources.
         */
        vswitchId: string;
    }

    export interface GetZonesZone {
        /**
         * ID of the zone.
         */
        id: string;
        /**
         * A list of zone ids in which the multi zone.
         */
        multiZoneIds: string[];
    }

    export interface InstanceParameter {
        name: string;
        value: string;
    }
}

export namespace log {
    export interface AlertNotificationList {
        /**
         * Notice content of alarm.
         */
        content: string;
        /**
         * Email address list.   
         */
        emailLists?: string[];
        /**
         * SMS sending mobile number.
         */
        mobileLists?: string[];
        /**
         * Request address.
         */
        serviceUri?: string;
        /**
         * Notification type. support Email, SMS, DingTalk.
         */
        type: string;
    }

    export interface AlertQueryList {
        /**
         * chart title
         */
        chartTitle: string;
        /**
         * end time. example: 20s.
         */
        end: string;
        /**
         * Query logstore
         */
        logstore: string;
        /**
         * query corresponding to chart. example: * AND aliyun.
         */
        query: string;
        /**
         * begin time. example: -60s.
         */
        start: string;
        /**
         * default Custom. No need to configure this parameter.
         */
        timeSpanType?: string;
    }

    export interface StoreIndexFieldSearch {
        /**
         * The alias of one field.
         */
        alias?: string;
        /**
         * Whether the case sensitive for the field. Default to false. It is valid when "type" is "text" or "json".
         */
        caseSensitive?: boolean;
        /**
         * Whether to enable field analytics. Default to true.
         */
        enableAnalytics?: boolean;
        /**
         * Whether includes the chinese for the field. Default to false. It is valid when "type" is "text" or "json".
         */
        includeChinese?: boolean;
        /**
         * Use nested index when type is json
         */
        jsonKeys?: outputs.log.StoreIndexFieldSearchJsonKey[];
        /**
         * When using the jsonKeys field, this field is required.
         */
        name: string;
        /**
         * The string of several split words, like "\r", "#". It is valid when "type" is "text" or "json".
         */
        token?: string;
        /**
         * The type of one field. Valid values: ["long", "text", "double"]. Default to "long"
         */
        type?: string;
    }

    export interface StoreIndexFieldSearchJsonKey {
        /**
         * The alias of one field.
         */
        alias?: string;
        /**
         * Whether to enable statistics. default to true.
         */
        docValue?: boolean;
        /**
         * When using the jsonKeys field, this field is required.
         */
        name: string;
        /**
         * The type of one field. Valid values: ["long", "text", "double"]. Default to "long"
         */
        type?: string;
    }

    export interface StoreIndexFullText {
        /**
         * Whether the case sensitive for the field. Default to false. It is valid when "type" is "text" or "json".
         */
        caseSensitive?: boolean;
        /**
         * Whether includes the chinese for the field. Default to false. It is valid when "type" is "text" or "json".
         */
        includeChinese?: boolean;
        /**
         * The string of several split words, like "\r", "#". It is valid when "type" is "text" or "json".
         */
        token?: string;
    }

    export interface StoreShard {
        beginKey: string;
        endKey: string;
        /**
         * The ID of the log project. It formats of `<project>:<name>`.
         */
        id: number;
        status: string;
    }
}

export namespace marketplace {
    export interface GetProductProduct {
        /**
         * The code of the product.
         */
        code: string;
        /**
         * The description of the product.
         */
        description: string;
        /**
         * The name of the product.
         */
        name: string;
        /**
         * A list of one element containing sku attributes of an object. Each element contains the following attributes:
         */
        skuses: outputs.marketplace.GetProductProductSkus[];
    }

    export interface GetProductProductSkus {
        /**
         * The list of custom ECS images, Each element contains the following attributes:
         */
        images: outputs.marketplace.GetProductProductSkusImage[];
        /**
         * The list of package version details of this product sku, Each element contains the following attributes:
         */
        packageVersions: outputs.marketplace.GetProductProductSkusPackageVersion[];
        /**
         * The sku code of this product sku.
         */
        skuCode: string;
        /**
         * The sku name of this product sku.
         */
        skuName: string;
    }

    export interface GetProductProductSkusImage {
        /**
         * The Ecs image id.
         */
        imageId: string;
        /**
         * The Ecs image display name.
         */
        imageName: string;
        /**
         * The Ecs image region.
         */
        regionId: string;
    }

    export interface GetProductProductSkusPackageVersion {
        /**
         * The package name of this product sku package.
         */
        packageName: string;
        /**
         * The package version of this product sku package. Currently, the API products can return package_version, but others can not for ensure.
         */
        packageVersion: string;
    }

    export interface GetProductsProduct {
        /**
         * The Category ID of products. For more information, see [DescribeProducts](https://help.aliyun.com/document_detail/89834.htm). 
         */
        categoryId: number;
        /**
         * The code of the product.
         */
        code: string;
        /**
         * The delivery date of the product.
         */
        deliveryDate: string;
        /**
         * The delivery way of the product.
         */
        deliveryWay: string;
        /**
         * The image URL of the product.
         */
        imageUrl: string;
        /**
         * The name of the product.
         */
        name: string;
        /**
         * The operation system of the product.
         */
        operationSystem: string;
        /**
         * The rating information of the product.
         */
        score: string;
        /**
         * The short description of the product.
         */
        shortDescription: string;
        /**
         * The suggested price of the product.
         */
        suggestedPrice: string;
        /**
         * The supplier id of the product.
         */
        supplierId: number;
        /**
         * The supplier name of the product.
         */
        supplierName: string;
        /**
         * The tags of the product.
         */
        tags: string;
        /**
         * The detail page URL of the product.
         */
        targetUrl: string;
        /**
         * The warranty date of the product.
         */
        warrantyDate: string;
    }
}

export namespace mns {
    export interface GetQueuesQueue {
        /**
         * This attribute defines the length of time, in seconds, after which every message sent to the queue is dequeued.
         */
        delaySeconds: number;
        /**
         * The id of the queue, The value is set to `name`.
         */
        id: string;
        /**
         * This indicates the maximum length, in bytes, of any message body sent to the queue.
         */
        maximumMessageSize: number;
        /**
         * Messages are deleted from the queue after a specified length of time, whether they have been activated or not. This attribute defines the viability period, in seconds, for every message in the queue.
         */
        messageRetentionPeriod: number;
        /**
         * The name of the queue
         */
        name: string;
        /**
         * Long polling is measured in seconds. When this attribute is set to 0, long polling is disabled. When it is not set to 0, long polling is enabled and message dequeue requests will be processed only when valid messages are received or when long polling times out.
         */
        pollingWaitSeconds: number;
        /**
         * Dequeued messages change from active (visible) status to inactive (invisible) status. This attribute defines the length of time, in seconds, that messages remain invisible. Messages return to active status after the set period.
         */
        visibilityTimeouts: number;
    }

    export interface GetTopicSubscriptionsSubscription {
        /**
         * Describe the terminal address of the message received in this subscription.
         * * `filterTag`- A string to filter resulting messages of the topic by their message tag.
         */
        endpoint: string;
        filterTag: string;
        /**
         * The ID of the topic subscription. The value is set to `name`.
         */
        id: string;
        /**
         * The name of the subscription.
         * * `topicName`- The topic which The subscription belongs to was named with the name.
         */
        name: string;
        /**
         * The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users.
         */
        notifyContentFormat: string;
        /**
         * The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails.
         */
        notifyStrategy: string;
        /**
         * Two topics on a single account in the same region cannot have the same name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 256 characters.
         */
        topicName: string;
    }

    export interface GetTopicsTopic {
        /**
         * The id of the topic. The value is set to `name`.
         */
        id: string;
        /**
         * Whether to enable logging.
         */
        loggingEnabled: boolean;
        /**
         * This indicates the maximum length, in bytes, of any message body sent to the topic.
         */
        maximumMessageSize: number;
        /**
         * The name of the topic.
         */
        name: string;
    }
}

export namespace mongodb {
    export interface GetInstancesInstance {
        /**
         * Instance availability zone.
         */
        availabilityZone: string;
        /**
         * Billing method. Value options are `PostPaid` for  Pay-As-You-Go and `PrePaid` for yearly or monthly subscription.
         */
        chargeType: string;
        /**
         * Creation time of the instance in RFC3339 format.
         */
        creationTime: string;
        /**
         * Database engine type. Supported option is `MongoDB`.
         */
        engine: string;
        /**
         * Database engine version.
         */
        engineVersion: string;
        /**
         * Expiration time in RFC3339 format. Pay-As-You-Go instances are never expire.
         */
        expirationTime: string;
        /**
         * The ID of the MongoDB instance.
         */
        id: string;
        /**
         * Sizing of the instance to be queried.
         */
        instanceClass: string;
        /**
         * Type of the instance to be queried. If it is set to `sharding`, the sharded cluster instances are listed. If it is set to `replicate`, replica set instances are listed. Default value `replicate`.
         */
        instanceType: string;
        /**
         * Lock status of the instance.
         */
        lockMode: string;
        /**
         * Array composed of Mongos.
         */
        mongos: outputs.mongodb.GetInstancesInstanceMongo[];
        /**
         * The name of the MongoDB instance.
         */
        name: string;
        /**
         * Classic network or VPC.
         */
        networkType: string;
        /**
         * Region ID the instance belongs to.
         */
        regionId: string;
        /**
         * Replication factor corresponds to number of nodes. Optional values are `1` for single node and `3` for three nodes replica set.
         */
        replication: string;
        /**
         * Array composed of shards.
         */
        shards: outputs.mongodb.GetInstancesInstanceShard[];
        /**
         * Status of the instance.
         */
        status: string;
        /**
         * Shard disk.
         */
        storage: number;
        /**
         * A mapping of tags to assign to the resource.
         */
        tags: {[key: string]: any};
    }

    export interface GetInstancesInstanceMongo {
        /**
         * Shard instance specification.
         */
        class: string;
        /**
         * Shard instance description.
         */
        description: string;
        /**
         * Shard instance ID.
         */
        nodeId: string;
    }

    export interface GetInstancesInstanceShard {
        /**
         * Shard instance specification.
         */
        class: string;
        /**
         * Shard instance description.
         */
        description: string;
        /**
         * Shard instance ID.
         */
        nodeId: string;
        /**
         * Shard disk.
         */
        storage: number;
    }

    export interface GetZonesZone {
        /**
         * ID of the zone.
         */
        id: string;
        /**
         * A list of zone ids in which the multi zone.
         */
        multiZoneIds: string[];
    }

    export interface ShardingInstanceMongoList {
        /**
         * Mongo node connection string
         */
        connectString: string;
        nodeClass: string;
        /**
         * The ID of the shard-node.
         */
        nodeId: string;
        /**
         * Mongo node port
         * * `shardList`
         */
        port: number;
    }

    export interface ShardingInstanceShardList {
        nodeClass: string;
        /**
         * The ID of the shard-node.
         */
        nodeId: string;
        /**
         * 
         * - Custom storage space; value range: [10, 1,000]
         * - 10-GB increments. Unit: GB.
         */
        nodeStorage: number;
    }
}

export namespace nas {
    export interface GetAccessGroupsGroup {
        /**
         * Filter results by a specific Description.
         */
        description: string;
        /**
         * AccessGroupName of the AccessGroup.
         */
        id: string;
        /**
         * MountTargetCount block of the AccessGroup
         */
        mountTargetCount: number;
        /**
         * RuleCount of the AccessGroup.
         */
        ruleCount: number;
        /**
         * Filter results by a specific AccessGroupType.
         */
        type: string;
    }

    export interface GetAccessRulesRule {
        /**
         * AccessRuleId of the AccessRule.
         */
        accessRuleId: string;
        /**
         * Priority of the AccessRule.
         */
        priority: number;
        /**
         * Filter results by a specific RWAccess. 
         */
        rwAccess: string;
        /**
         * Filter results by a specific SourceCidrIp. 
         */
        sourceCidrIp: string;
        /**
         * Filter results by a specific UserAccess. 
         */
        userAccess: string;
    }

    export interface GetFileSystemsSystem {
        /**
         * Time of creation.
         */
        createTime: string;
        /**
         * Destription of the FileSystem.
         */
        description: string;
        /**
         * ID of the FileSystem.
         */
        id: string;
        /**
         * MeteredSize of the FileSystem.
         */
        meteredSize: number;
        /**
         * Filter results by a specific ProtocolType. 
         */
        protocolType: string;
        /**
         * ID of the region where the FileSystem is located.
         */
        regionId: string;
        /**
         * Filter results by a specific StorageType. 
         */
        storageType: string;
    }

    export interface GetMountTargetsTarget {
        /**
         * Filter results by a specific AccessGroupName.
         */
        accessGroupName: string;
        /**
         * ID of the MountTargetDomain.
         */
        id: string;
        /**
         * Filter results by a specific MountTargetDomain.
         */
        mountTargetDomain: string;
        /**
         * Filter results by a specific NetworkType.
         */
        type: string;
        /**
         * Filter results by a specific VpcId.
         */
        vpcId: string;
        /**
         * Filter results by a specific VSwitchId.
         */
        vswitchId: string;
    }
}

export namespace oss {
    export interface BucketCorsRule {
        /**
         * Specifies which headers are allowed.
         */
        allowedHeaders?: string[];
        /**
         * Specifies which methods are allowed. Can be GET, PUT, POST, DELETE or HEAD.
         */
        allowedMethods: string[];
        /**
         * Specifies which origins are allowed.
         */
        allowedOrigins: string[];
        /**
         * Specifies expose header in the response.
         */
        exposeHeaders?: string[];
        /**
         * Specifies time in seconds that browser can cache the response for a preflight request.
         */
        maxAgeSeconds?: number;
    }

    export interface BucketLifecycleRule {
        /**
         * Specifies lifecycle rule status.
         */
        enabled: boolean;
        /**
         * Specifies a period in the object's expire (documented below).
         */
        expirations?: outputs.oss.BucketLifecycleRuleExpiration[];
        /**
         * Unique identifier for the rule. If omitted, OSS bucket will assign a unique name.
         */
        id: string;
        /**
         * Object key prefix identifying one or more objects to which the rule applies.
         */
        prefix: string;
        /**
         * Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle. (documented below).
         */
        transitions?: outputs.oss.BucketLifecycleRuleTransition[];
    }

    export interface BucketLifecycleRuleExpiration {
        /**
         * Specifies the date after which you want the corresponding action to take effect. The value obeys ISO8601 format like `2017-03-09`.
         */
        date?: string;
        /**
         * Specifies the number of days after object creation when the specific rule action takes effect.
         */
        days?: number;
    }

    export interface BucketLifecycleRuleTransition {
        /**
         * Specifies the time before which the rules take effect. The date must conform to the ISO8601 format and always be UTC 00:00. For example: 2002-10-11T00:00:00.000Z indicates that objects updated before 2002-10-11T00:00:00.000Z are deleted or converted to another storage class, and objects updated after this time (including this time) are not deleted or converted.
         */
        createdBeforeDate?: string;
        /**
         * Specifies the number of days after object creation when the specific rule action takes effect.
         */
        days?: number;
        /**
         * Specifies the storage class that objects that conform to the rule are converted into. The storage class of the objects in a bucket of the IA storage class can be converted into Archive but cannot be converted into Standard. Values: `IA`, `Archive`. 
         */
        storageClass?: string;
    }

    export interface BucketLogging {
        /**
         * The name of the bucket that will receive the log objects.
         */
        targetBucket: string;
        /**
         * To specify a key prefix for log objects.
         */
        targetPrefix?: string;
    }

    export interface BucketRefererConfig {
        /**
         * Allows referer to be empty. Defaults false.
         */
        allowEmpty: boolean;
        /**
         * The list of referer.
         */
        referers: string[];
    }

    export interface BucketServerSideEncryptionRule {
        /**
         * The server-side encryption algorithm to use. Possible values: `AES256` and `KMS`.
         */
        sseAlgorithm: string;
    }

    export interface BucketVersioning {
        /**
         * Specifies the versioning state of a bucket. Valid values: `Enabled` and `Suspended`.
         */
        status: string;
    }

    export interface BucketWebsite {
        /**
         * An absolute path to the document to return in case of a 4XX error.
         */
        errorDocument?: string;
        /**
         * Alicloud OSS returns this index document when requests are made to the root domain or any of the subfolders.
         */
        indexDocument: string;
    }

    export interface GetBucketObjectsObject {
        /**
         * Object access control list. Possible values: `default`, `private`, `public-read` and `public-read-write`.
         */
        acl: string;
        /**
         * Caching behavior along the request/reply chain. Read [RFC2616 Cache-Control](https://www.ietf.org/rfc/rfc2616.txt) for further details.
         */
        cacheControl: string;
        /**
         * Presentational information for the object. Read [RFC2616 Content-Disposition](https://www.ietf.org/rfc/rfc2616.txt) for further details.
         */
        contentDisposition: string;
        /**
         * Content encodings that have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [RFC2616 Content-Encoding](https://www.ietf.org/rfc/rfc2616.txt) for further details.
         */
        contentEncoding: string;
        /**
         * Size of the object in bytes.
         */
        contentLength: string;
        /**
         * MD5 value of the content. Read [MD5](https://www.alibabacloud.com/help/doc-detail/31978.htm) for computing method.
         */
        contentMd5: string;
        /**
         * Standard MIME type describing the format of the object data, e.g. "application/octet-stream".
         */
        contentType: string;
        /**
         * ETag generated for the object (MD5 sum of the object content).
         */
        etag: string;
        /**
         * Expiration date for the the request/response. Read [RFC2616 Expires](https://www.ietf.org/rfc/rfc2616.txt) for further details.
         */
        expires: string;
        /**
         * Object key.
         */
        key: string;
        /**
         * Last modification time of the object.
         */
        lastModificationTime: string;
        /**
         * Server-side encryption of the object in OSS. It can be empty or `AES256`.
         */
        serverSideEncryption: string;
        /**
         * If present, specifies the ID of the Key Management Service(KMS) master encryption key that was used for the object.
         */
        sseKmsKeyId: string;
        /**
         * Object storage type. Possible values: `Standard`, `IA` and `Archive`.
         */
        storageClass: string;
    }

    export interface GetBucketsBucket {
        /**
         * Bucket access control list. Possible values: `private`, `public-read` and `public-read-write`.
         */
        acl: string;
        /**
         * A list of CORS rule configurations. Each element contains the following attributes:
         */
        corsRules: outputs.oss.GetBucketsBucketCorsRule[];
        /**
         * Bucket creation date.
         */
        creationDate: string;
        /**
         * Internet domain name for accessing the bucket from outside.
         */
        extranetEndpoint: string;
        /**
         * Intranet domain name for accessing the bucket from an ECS instance in the same region.
         */
        intranetEndpoint: string;
        /**
         * A list CORS of lifecycle configurations. When Lifecycle is enabled, OSS automatically deletes the objects or transitions the objects (to another storage class) corresponding the lifecycle rules on a regular basis. Each element contains the following attributes:
         */
        lifecycleRules: outputs.oss.GetBucketsBucketLifecycleRule[];
        /**
         * Region of the data center where the bucket is located.
         */
        location: string;
        /**
         * A list of one element containing configuration parameters used for storing access log information. It contains the following attributes:
         */
        logging: outputs.oss.GetBucketsBucketLogging;
        /**
         * Bucket name.
         */
        name: string;
        /**
         * Bucket owner.
         */
        owner: string;
        policy?: string;
        /**
         * A list of one element containing referer configuration. It contains the following attributes:
         */
        refererConfig: outputs.oss.GetBucketsBucketRefererConfig;
        /**
         * A configuration of default encryption for a bucket. It contains the following attributes:
         */
        serverSideEncryptionRule: outputs.oss.GetBucketsBucketServerSideEncryptionRule;
        /**
         * Object storage type. Possible values: `Standard`, `IA` and `Archive`.
         */
        storageClass: string;
        /**
         * A mapping of tags.
         */
        tags: {[key: string]: any};
        /**
         * If present , the versioning state has been set on the bucket. It contains the following attribute.
         */
        versioning: outputs.oss.GetBucketsBucketVersioning;
        /**
         * A list of one element containing configuration parameters used when the bucket is used as a website. It contains the following attributes:
         */
        website: outputs.oss.GetBucketsBucketWebsite;
    }

    export interface GetBucketsBucketCorsRule {
        /**
         * Control whether the headers specified by Access-Control-Request-Headers in the OPTIONS prefetch command are allowed. Each header specified by Access-Control-Request-Headers must match a value in AllowedHeader. Each rule allows up to one wildcard “*” .
         */
        allowedHeaders: string[];
        /**
         * Specify the allowed methods for cross-domain requests. Possible values: `GET`, `PUT`, `DELETE`, `POST` and `HEAD`.
         */
        allowedMethods: string[];
        /**
         * The origins allowed for cross-domain requests. Multiple elements can be used to specify multiple allowed origins. Each rule allows up to one wildcard "\*". If "\*" is specified, cross-domain requests of all origins are allowed.
         */
        allowedOrigins: string[];
        /**
         * Specify the response headers allowing users to access from an application (for example, a Javascript XMLHttpRequest object). The wildcard "\*" is not allowed.
         */
        exposeHeaders: string[];
        /**
         * Specify the cache time for the returned result of a browser prefetch (OPTIONS) request to a specific resource.
         */
        maxAgeSeconds: number;
    }

    export interface GetBucketsBucketLifecycleRule {
        /**
         * Indicate whether the rule is enabled or not.
         */
        enabled: boolean;
        /**
         * A list of one element containing expiration attributes of an object. It contains the following attributes:
         */
        expiration: outputs.oss.GetBucketsBucketLifecycleRuleExpiration;
        /**
         * Unique ID of the rule.
         */
        id: string;
        /**
         * Prefix applicable to a rule. Only those objects with a matching prefix can be affected by the rule.
         */
        prefix: string;
    }

    export interface GetBucketsBucketLifecycleRuleExpiration {
        /**
         * Date after which the rule to take effect. The format is like 2017-03-09.
         */
        date?: string;
        /**
         * Indicate the number of days after the last object update until the rules take effect.
         */
        days?: number;
    }

    export interface GetBucketsBucketLogging {
        /**
         * Bucket for storing access logs.
         */
        targetBucket: string;
        /**
         * Prefix of the saved access log file paths.
         */
        targetPrefix: string;
    }

    export interface GetBucketsBucketRefererConfig {
        /**
         * Indicate whether the access request referer field can be empty.
         */
        allowEmpty: boolean;
        /**
         * Referer access whitelist.
         */
        referers: string[];
    }

    export interface GetBucketsBucketServerSideEncryptionRule {
        /**
         * The server-side encryption algorithm to use.
         */
        sseAlgorithm: string;
    }

    export interface GetBucketsBucketVersioning {
        /**
         * A bucket versioning state. Possible values:`Enabled` and `Suspended`.
         */
        status: string;
    }

    export interface GetBucketsBucketWebsite {
        /**
         * Key of the HTML document containing the error page.
         */
        errorDocument: string;
        /**
         * Key of the HTML document containing the home page.
         */
        indexDocument: string;
    }

    export interface GetInstanceAttachmentsAttachment {
        /**
         * The domain of the instance attachment.
         */
        domain: string;
        /**
         * The access endpoint of the instance attachment.
         */
        endpoint: string;
        /**
         * The resource ID, the value is same as "instanceName".
         */
        id: string;
        /**
         * The name of OTS instance.
         */
        instanceName: string;
        /**
         * The region of the instance attachment.
         */
        region: string;
        /**
         * The ID of attaching VPC to instance.
         */
        vpcId: string;
        /**
         * The name of attaching VPC to instance.
         */
        vpcName: string;
    }

    export interface GetInstancesInstance {
        /**
         * The cluster type of the instance. Possible values: `SSD`, `HYBRID`.
         */
        clusterType: string;
        /**
         * The create time of the instance.
         */
        createTime: string;
        /**
         * The description of the instance.
         */
        description: string;
        /**
         * The instance quota which indicating the maximum number of tables.
         */
        entityQuota: number;
        /**
         * ID of the instance.
         */
        id: string;
        /**
         * Instance name.
         */
        name: string;
        /**
         * The network type of the instance. Possible values: `NORMAL`, `VPC`, `VPC_CONSOLE`.
         */
        network: string;
        /**
         * The maximum adjustable read capacity unit of the instance.
         */
        readCapacity: number;
        /**
         * Instance status. Possible values: `Running`, `Disabled`, `Deleting`.
         */
        status: string;
        /**
         * A map of tags assigned to the instance. It must be in the format:
         * ```
         * data "alicloud.oss.getInstances" "instancesDs" {
         * tags = {
         * tagKey1 = "tagValue1",
         * tagKey2 = "tagValue2"
         * }
         * }
         * ```
         */
        tags: {[key: string]: any};
        /**
         * The user id of the instance.
         */
        userId: string;
        /**
         * The maximum adjustable write capacity unit of the instance.
         */
        writeCapacity: number;
    }

    export interface GetTablesTable {
        /**
         * ID of the table. The value is `<instance_name>:<table_name>`.
         */
        id: string;
        /**
         * The name of OTS instance.
         */
        instanceName: string;
        /**
         * The maximum number of versions stored in this table.
         */
        maxVersion: number;
        /**
         * The property of `TableMeta` which indicates the structure information of a table.
         */
        primaryKeys: outputs.oss.GetTablesTablePrimaryKey[];
        /**
         * The table name of the OTS which could not be changed.
         */
        tableName: string;
        /**
         * The retention time of data stored in this table.
         */
        timeToLive: number;
    }

    export interface GetTablesTablePrimaryKey {
        name: string;
        type: string;
    }
}

export namespace ots {
    export interface TablePrimaryKey {
        /**
         * Name for primary key.
         */
        name: string;
        /**
         * Type for primary key. Only `Integer`, `String` or `Binary` is allowed.
         */
        type: string;
    }
}

export namespace polardb {
    export interface ClusterParameter {
        name: string;
        value: string;
    }

    export interface GetAccountsAccount {
        /**
         * Account description.
         */
        accountDescription: string;
        /**
         * Account lock state, Valid values are `Lock`, `UnLock`.
         */
        accountLockState: string;
        /**
         * Account name.
         */
        accountName: string;
        /**
         * Cluster address type.`Cluster`: the default address of the Cluster.`Primary`: Primary address.`Custom`: Custom cluster addresses.
         */
        accountStatus: string;
        /**
         * Account type, Valid values are `Normal`, `Super`.
         */
        accountType: string;
        /**
         * A list of database privilege. Each element contains the following attributes.
         */
        databasePrivileges: outputs.polardb.GetAccountsAccountDatabasePrivilege[];
    }

    export interface GetAccountsAccountDatabasePrivilege {
        /**
         * Account privilege of database
         */
        accountPrivilege: string;
        /**
         * The account owned database name 
         */
        dbName: string;
    }

    export interface GetClustersCluster {
        /**
         * Billing method. Value options: `PostPaid` for Pay-As-You-Go and `PrePaid` for subscription.
         */
        chargeType: string;
        /**
         * The createTime of the db_nodes.
         */
        createTime: string;
        /**
         * The dbNodeClass of the db_nodes.
         */
        dbNodeClass: string;
        /**
         * The DBNodeNumber of the PolarDB cluster.
         */
        dbNodeNumber: number;
        /**
         * The DBNodes of the PolarDB cluster.
         */
        dbNodes: outputs.polardb.GetClustersClusterDbNode[];
        /**
         * Database type. Options are `MySQL`, `Oracle` and `PostgreSQL`. If no value is specified, all types are returned.
         */
        dbType: string;
        /**
         * The DBVersion of the PolarDB cluster.
         */
        dbVersion: string;
        /**
         * The DeleteLock of the PolarDB cluster.
         */
        deleteLock: number;
        /**
         * The description of the PolarDB cluster.
         */
        description: string;
        /**
         * Database type. Options are `MySQL`, `Oracle` and `PostgreSQL`. If no value is specified, all types are returned.
         */
        engine: string;
        /**
         * Expiration time. Pay-As-You-Go clusters never expire.
         */
        expireTime: string;
        /**
         * The expired of the PolarDB cluster.
         */
        expired: string;
        /**
         * The ID of the PolarDB cluster.
         */
        id: string;
        /**
         * The LockMode of the PolarDB cluster.
         */
        lockMode: string;
        /**
         * The DBClusterNetworkType of the PolarDB cluster.
         */
        networkType: string;
        /**
         * The regionId of the db_nodes.
         */
        regionId: string;
        /**
         * status of the cluster.
         */
        status: string;
        /**
         * The StorageUsed of the PolarDB cluster.
         */
        storageUsed: number;
        /**
         * ID of the VPC the cluster belongs to.
         */
        vpcId: string;
        /**
         * The zoneId of the db_nodes.
         */
        zoneId: string;
    }

    export interface GetClustersClusterDbNode {
        /**
         * The createTime of the db_nodes.
         */
        createTime: string;
        /**
         * The dbNodeClass of the db_nodes.
         */
        dbNodeClass: string;
        /**
         * The dbNodeId of the db_nodes.
         */
        dbNodeId: string;
        /**
         * The dbNodeRole of the db_nodes.
         */
        dbNodeRole: string;
        /**
         * The dbNodeStatus of the db_nodes.
         */
        dbNodeStatus: string;
        /**
         * The maxConnections of the db_nodes.
         */
        maxConnections: number;
        /**
         * The maxIops of the db_nodes.
         */
        maxIops: number;
        /**
         * The regionId of the db_nodes.
         */
        regionId: string;
        /**
         * The zoneId of the db_nodes.
         */
        zoneId: string;
    }

    export interface GetDatabasesDatabase {
        /**
         * A list of accounts of database. Each element contains the following attributes.
         */
        accounts: outputs.polardb.GetDatabasesDatabaseAccount[];
        /**
         * The character set name of database.
         */
        characterSetName: string;
        /**
         * Database description.
         */
        dbDescription: string;
        /**
         * Database name.
         */
        dbName: string;
        /**
         * The status of database.
         */
        dbStatus: string;
        /**
         * The engine of database.
         */
        engine: string;
    }

    export interface GetDatabasesDatabaseAccount {
        /**
         * Account name.
         */
        accountName: string;
        /**
         * Account status.
         */
        accountStatus: string;
        /**
         * The privilege status of account.
         */
        privilegeStatus: string;
    }

    export interface GetEndpointsEndpoint {
        /**
         * A list of endpoint addresses. Each element contains the following attributes.
         */
        addressItems: outputs.polardb.GetEndpointsEndpointAddressItem[];
        /**
         * Whether the new node is automatically added to the default cluster address.Options are `Enable` and `Disable`.
         */
        autoAddNewNodes: string;
        /**
         * endpoint of the cluster.
         */
        dbEndpointId: string;
        /**
         * The Endpoint configuration. `ConsistLevel`: session consistency level, value:`0`: final consistency,`1`: session consistency;`LoadBalanceStrategy`: load balancing strategy. Based on the automatic scheduling of load, the value is: `load`.
         */
        endpointConfig: string;
        /**
         * Cluster address type.`Cluster`: the default address of the Cluster.`Primary`: Primary address.`Custom`: Custom cluster addresses.
         */
        endpointType: string;
        /**
         * A list of nodes that connect to the address configuration.
         */
        nodes: string;
        /**
         * Read-write mode:`ReadWrite`: readable and writable (automatic read-write separation).`ReadOnly`: ReadOnly.
         */
        readWriteMode: string;
    }

    export interface GetEndpointsEndpointAddressItem {
        /**
         * Connection instance string.
         */
        connectionString: string;
        /**
         * The ip address of connection string.
         */
        ipAddress: string;
        /**
         * IP network type:`Public` or `Private`.
         */
        netType: string;
        /**
         * Intranet connection port.
         */
        port: string;
        /**
         * ID of the VPC the instance belongs to.
         */
        vpcId: string;
        /**
         * ID of the VSwitch the cluster belongs to.
         */
        vswitchId: string;
    }

    export interface GetZonesZone {
        /**
         * ID of the zone.
         */
        id: string;
        /**
         * A list of zone ids in which the multi zone.
         */
        multiZoneIds: string[];
    }
}

export namespace pvtz {
    export interface GetZoneRecordsRecord {
        /**
         * ID of the Private Zone Record.
         */
        id: number;
        /**
         * Priority of the Private Zone Record.
         */
        priority: number;
        /**
         * Resource record of the Private Zone Record.
         */
        resourceRecord: string;
        status: string;
        /**
         * Ttl of the Private Zone Record.
         */
        ttl: number;
        /**
         * Type of the Private Zone Record.
         */
        type: string;
        /**
         * Value of the Private Zone Record.
         */
        value: string;
    }

    export interface GetZonesZone {
        /**
         * List of the VPCs is bound to the Private Zone.
         */
        bindVpcs: outputs.pvtz.GetZonesZoneBindVpc[];
        /**
         * Time of creation of the Private Zone.
         */
        creationTime: string;
        /**
         * ID of the Private Zone.
         */
        id: string;
        /**
         * Whether the Private Zone is ptr
         */
        isPtr: boolean;
        /**
         * Name of the Private Zone.
         */
        name: string;
        /**
         * Count of the Private Zone Record.
         */
        recordCount: number;
        /**
         * Remark of the Private Zone.
         */
        remark: string;
        /**
         * Time of update of the Private Zone.
         */
        updateTime: string;
    }

    export interface GetZonesZoneBindVpc {
        regionId: string;
        vpcId: string;
        vpcName: string;
    }

    export interface ZoneAttachmentVpc {
        /**
         * The region of the vpc. If not set, the current region will instead of.
         */
        regionId: string;
        /**
         * The Id of the vpc.
         */
        vpcId: string;
    }
}

export namespace ram {
    export interface GetGroupsGroup {
        /**
         * Comments of the group.
         */
        comments: string;
        /**
         * Name of the group.
         */
        name: string;
    }

    export interface GetPoliciesPolicy {
        /**
         * Attachment count of the policy.
         */
        attachmentCount: number;
        /**
         * Creation date of the policy.
         */
        createDate: string;
        /**
         * Default version of the policy.
         */
        defaultVersion: string;
        /**
         * Description of the policy.
         */
        description: string;
        /**
         * Policy document of the policy.
         */
        document: string;
        /**
         * Name of the policy.
         */
        name: string;
        /**
         * Filter results by a specific policy type. Valid values are `Custom` and `System`.
         */
        type: string;
        /**
         * Update date of the policy.
         */
        updateDate: string;
    }

    export interface GetRolesRole {
        /**
         * Resource descriptor of the role.
         */
        arn: string;
        /**
         * Authorization strategy of the role. This parameter is deprecated and replaced by `document`.
         */
        assumeRolePolicyDocument: string;
        /**
         * Creation date of the role.
         */
        createDate: string;
        /**
         * Description of the role.
         */
        description: string;
        /**
         * Authorization strategy of the role.
         */
        document: string;
        /**
         * Id of the role.
         */
        id: string;
        /**
         * Name of the role.
         */
        name: string;
        /**
         * Update date of the role.
         */
        updateDate: string;
    }

    export interface GetUsersUser {
        /**
         * Creation date of the user.
         */
        createDate: string;
        /**
         * The original id is user name, but it is user id in 1.37.0+.
         */
        id: string;
        /**
         * Name of the user.
         */
        name: string;
    }

    export interface PolicyStatement {
        /**
         * (It has been deprecated from version 1.49.0, and use field 'document' to replace.) List of operations for the `resource`. The format of each item in this list is `${service}:${action_name}`, such as `oss:ListBuckets` and `ecs:Describe*`. The `${service}` can be `ecs`, `oss`, `ots` and so on, the `${action_name}` refers to the name of an api interface which related to the `${service}`.
         */
        actions: string[];
        /**
         * (It has been deprecated from version 1.49.0, and use field 'document' to replace.) This parameter indicates whether or not the `action` is allowed. Valid values are `Allow` and `Deny`.
         */
        effect: string;
        /**
         * (It has been deprecated from version 1.49.0, and use field 'document' to replace.) List of specific objects which will be authorized. The format of each item in this list is `acs:${service}:${region}:${account_id}:${relative_id}`, such as `acs:ecs:*:*:instance/inst-002` and `acs:oss:*:1234567890000:mybucket`. The `${service}` can be `ecs`, `oss`, `ots` and so on, the `${region}` is the region info which can use `*` replace when it is not supplied, the `${account_id}` refers to someone's Alicloud account id or you can use `*` to replace, the `${relative_id}` is the resource description section which related to the `${service}`.
         */
        resources: string[];
    }
}

export namespace rds {
    export interface GetInstanceClassesInstanceClass {
        /**
         * DB Instance available class.
         */
        instanceClass: string;
        price: string;
        /**
         * DB Instance available storage range.
         */
        storageRange: outputs.rds.GetInstanceClassesInstanceClassStorageRange;
        /**
         * A list of Zone to launch the DB instance.
         */
        zoneIds: outputs.rds.GetInstanceClassesInstanceClassZoneId[];
    }

    export interface GetInstanceClassesInstanceClassStorageRange {
        /**
         * DB Instance available storage max value.
         */
        max: string;
        /**
         * DB Instance available storage min value.
         */
        min: string;
        /**
         * DB Instance available storage increase step.
         */
        step: string;
    }

    export interface GetInstanceClassesInstanceClassZoneId {
        /**
         * The Zone to launch the DB instance
         */
        id: string;
        /**
         * A list of sub zone ids which in the id - e.g If `id` is `cn-beijing-MAZ5(a,b)`, `subZoneIds` will be `["cn-beijing-a", "cn-beijing-b"]`.
         */
        subZoneIds: string[];
    }

    export interface GetInstanceEnginesInstanceEngine {
        /**
         * DB Instance category.
         */
        category: string;
        /**
         * Database type. Options are `MySQL`, `SQLServer`, `PostgreSQL` and `PPAS`. If no value is specified, all types are returned.
         */
        engine: string;
        /**
         * Database version required by the user. Value options can refer to the latest docs [detail info](https://www.alibabacloud.com/help/doc-detail/26228.htm) `EngineVersion`.
         */
        engineVersion: string;
        /**
         * A list of Zone to launch the DB instance.
         */
        zoneIds: outputs.rds.GetInstanceEnginesInstanceEngineZoneId[];
    }

    export interface GetInstanceEnginesInstanceEngineZoneId {
        /**
         * The Zone to launch the DB instance
         */
        id: string;
        /**
         * A list of sub zone ids which in the id - e.g If `id` is `cn-beijing-MAZ5(a,b)`, `subZoneIds` will be `["cn-beijing-a", "cn-beijing-b"]`.
         */
        subZoneIds: string[];
    }

    export interface GetInstancesInstance {
        /**
         * Availability zone.
         */
        availabilityZone: string;
        /**
         * Billing method. Value options: `Postpaid` for Pay-As-You-Go and `Prepaid` for subscription.
         */
        chargeType: string;
        /**
         * `Standard` for standard access mode and `Safe` for high security access mode.
         */
        connectionMode: string;
        /**
         * (Available in 1.70.3+) RDS database connection string.
         */
        connectionString: string;
        /**
         * Creation time of the instance.
         */
        createTime: string;
        /**
         * (Available in 1.70.3+) The storage type of the instance.
         */
        dbInstanceStorageType: string;
        /**
         * `Primary` for primary instance, `Readonly` for read-only instance, `Guard` for disaster recovery instance, and `Temp` for temporary instance.
         */
        dbType: string;
        /**
         * Database type. Options are `MySQL`, `SQLServer`, `PostgreSQL` and `PPAS`. If no value is specified, all types are returned.
         */
        engine: string;
        /**
         * Database version.
         */
        engineVersion: string;
        /**
         * Expiration time. Pay-As-You-Go instances never expire.
         */
        expireTime: string;
        /**
         * If a disaster recovery instance is attached to the current instance, the ID of the disaster recovery instance applies.
         */
        guardInstanceId: string;
        /**
         * The ID of the RDS instance.
         */
        id: string;
        /**
         * (Available in 1.70.3+) User-defined DB instance storage space.
         */
        instanceStorage: number;
        /**
         * Sizing of the RDS instance.
         */
        instanceType: string;
        /**
         * ID of the primary instance. If this parameter is not returned, the current instance is a primary instance.
         */
        masterInstanceId: string;
        /**
         * The name of the RDS instance.
         */
        name: string;
        /**
         * `Internet` for public network or `Intranet` for private network.
         */
        netType: string;
        /**
         * (Available in 1.70.3+) RDS database connection port.
         */
        port: string;
        /**
         * A list of IDs of read-only instances attached to the primary instance.
         */
        readonlyInstanceIds: string[];
        /**
         * Region ID the instance belongs to.
         */
        regionId: string;
        /**
         * Status of the instance.
         */
        status: string;
        /**
         * If a temporary instance is attached to the current instance, the ID of the temporary instance applies.
         */
        tempInstanceId: string;
        /**
         * Used to retrieve instances belong to specified VPC.
         */
        vpcId: string;
        /**
         * Used to retrieve instances belong to specified `vswitch` resources.
         */
        vswitchId: string;
    }

    export interface GetZonesZone {
        /**
         * ID of the zone.
         */
        id: string;
        /**
         * A list of zone ids in which the multi zone.
         */
        multiZoneIds: string[];
    }

    export interface InstanceParameter {
        name: string;
        value: string;
    }

    export interface ReadOnlyInstanceParameter {
        name: string;
        value: string;
    }
}

export namespace rocketmq {
    export interface GetGroupsGroup {
        /**
         * The name of the group.
         */
        id: string;
        /**
         * Indicates whether namespaces are available. Read [Fields in SubscribeInfoDo](https://www.alibabacloud.com/help/doc-detail/29619.html) for further details.
         */
        independentNaming: boolean;
        /**
         * The ID of the group owner, which is the Alibaba Cloud UID.
         */
        owner: string;
        /**
         * Remark of the group.
         */
        remark: string;
    }

    export interface GetInstancesInstance {
        /**
         * ID of the instance.
         */
        id: string;
        /**
         * ID of the instance.
         */
        instanceId: string;
        /**
         * Name of the instance.
         */
        instanceName: string;
        /**
         * The status of the instance. Read [Fields in InstanceVO](https://www.alibabacloud.com/help/doc-detail/106351.html) for further details.
         */
        instanceStatus: number;
        /**
         * The type of the instance. Read [Fields in InstanceVO](https://www.alibabacloud.com/help/doc-detail/106351.html) for further details.
         */
        instanceType: number;
        /**
         * The automatic release time of an Enterprise Platinum Edition instance.
         */
        releaseTime: number;
    }

    export interface GetTopicsTopic {
        /**
         * Time of creation.
         */
        createTime: string;
        /**
         * Indicates whether namespaces are available. Read [Fields in PublishInfoDo](https://www.alibabacloud.com/help/doc-detail/29590.html) for further details.
         */
        independentNaming: boolean;
        /**
         * The type of the message. Read [Fields in PublishInfoDo](https://www.alibabacloud.com/help/doc-detail/29590.html) for further details.
         */
        messageType: number;
        /**
         * The ID of the topic owner, which is the Alibaba Cloud UID.
         */
        owner: string;
        /**
         * The relation ID. Read [Fields in PublishInfoDo](https://www.alibabacloud.com/help/doc-detail/29590.html) for further details.
         */
        relation: number;
        /**
         * The name of the relation, for example, owner, publishable, subscribable, and publishable and subscribable.
         */
        relationName: string;
        /**
         * Remark of the topic.
         */
        remark: string;
        /**
         * The name of the topic.
         */
        topic: string;
    }
}

export namespace sag {
    export interface GetAclsAcl {
        /**
         * The ID of the ACL. For example "acl-xxx".
         */
        id: string;
        /**
         * The name of the Acl.
         */
        name: string;
    }
}

export namespace slb {
    export interface AclEntryList {
        comment?: string;
        entry: string;
    }

    export interface BackendServerBackendServer {
        serverId: string;
        type?: string;
        weight: number;
    }

    export interface GetAclsAcl {
        /**
         * A list of entry (IP addresses or CIDR blocks).  Each entry contains two sub-fields as `Entry Block` follows.
         */
        entryLists: outputs.slb.GetAclsAclEntryList[];
        /**
         * Acl ID.
         */
        id: string;
        ipVersion: string;
        /**
         * Acl name.
         */
        name: string;
        /**
         * A list of listener are attached by the acl.  Each listener contains four sub-fields as `Listener Block` follows.
         */
        relatedListeners: outputs.slb.GetAclsAclRelatedListener[];
        /**
         * The Id of resource group which acl belongs.
         */
        resourceGroupId: string;
        /**
         * A mapping of tags to assign to the resource.
         */
        tags?: {[key: string]: any};
    }

    export interface GetAclsAclEntryList {
        comment: string;
        entry: string;
    }

    export interface GetAclsAclRelatedListener {
        aclType: string;
        frontendPort: number;
        loadBalancerId: string;
        protocol: string;
    }

    export interface GetAttachmentsSlbAttachment {
        /**
         * ID of the attached ECS instance.
         */
        instanceId: string;
        /**
         * Weight associated to the ECS instance.
         */
        weight: number;
    }

    export interface GetBackendServersBackendServer {
        /**
         * backend server ID.
         */
        id: string;
        /**
         * Type of the backend server.
         */
        serverType: string;
        /**
         * Weight associated to the ECS instance.
         */
        weight: number;
    }

    export interface GetCaCertificatesCertificate {
        /**
         * CA certificate common name.
         */
        commonName: string;
        /**
         * CA certificate created time.
         */
        createdTime: string;
        /**
         * CA certificate created timestamp.
         */
        createdTimestamp: number;
        /**
         * CA certificate expired time.
         */
        expiredTime: string;
        /**
         * CA certificate expired timestamp.
         */
        expiredTimestamp: number;
        /**
         * CA certificate fingerprint.
         */
        fingerprint: string;
        /**
         * CA certificate ID.
         */
        id: string;
        /**
         * CA certificate name.
         */
        name: string;
        /**
         * The region Id of CA certificate.
         */
        regionId: string;
        /**
         * The Id of resource group which ca certificates belongs.
         */
        resourceGroupId: string;
        /**
         * A mapping of tags to assign to the resource.
         */
        tags?: {[key: string]: any};
    }

    export interface GetDomainExtensionsExtension {
        /**
         * The domain name.
         */
        domain: string;
        /**
         * The ID of the domain extension.
         */
        id: string;
        /**
         * The ID of the certificate used by the domain name.
         */
        serverCertificateId: string;
    }

    export interface GetListenersSlbListener {
        /**
         * Port opened on the backend server to receive requests.
         */
        backendPort: number;
        /**
         * Peak bandwidth. If the value is set to -1, the listener is not limited by bandwidth.
         */
        bandwidth: number;
        /**
         * ID of the CA certificate (only required when two-way authentication is used). Only available when the protocol is `https`.
         */
        caCertificateId: string;
        /**
         * Cookie configured by the backend server. Only available when the stickySessionType is `server`.
         */
        cookie: string;
        /**
         * Cookie timeout in seconds. Only available when the stickySessionType is `insert`.
         */
        cookieTimeout: number;
        /**
         * The description of slb listener.
         */
        description: string;
        /**
         * Whether to enable https listener support http2 or not. Valid values are `on` and `off`. Default to `on`.
         */
        enableHttp2: string;
        /**
         * Connection timeout in seconds for the Layer 4 TCP listener. Only available when the protocol is `tcp`.
         */
        establishedTimeout: number;
        /**
         * Filter listeners by the specified frontend port.
         */
        frontendPort: number;
        /**
         * Indicate whether Gzip compression is enabled or not. Possible values are `on` and `off`. Only available when the protocol is `http` or `https`.
         */
        gzip: string;
        /**
         * Indicate whether health check is enabled of not. Possible values are `on` and `off`.
         */
        healthCheck: string;
        /**
         * Port used for health check.
         */
        healthCheckConnectPort: number;
        /**
         * Amount of time in seconds to wait for the response for a health check.
         */
        healthCheckConnectTimeout: number;
        /**
         * Domain name used for health check. The SLB sends HTTP head requests to the backend server, the domain is useful when the backend server verifies the host field in the requests. Only available when the protocol is `http`, `https` or `tcp` (in this case healthCheckType must be `http`).
         */
        healthCheckDomain: string;
        /**
         * HTTP status codes indicating that the health check is normal. It can contain several comma-separated values such as "http_2xx,http_3xx". Only available when the protocol is `http`, `https` or `tcp` (in this case healthCheckType must be `http`).
         */
        healthCheckHttpCode: string;
        /**
         * Time interval between two consecutive health checks.
         */
        healthCheckInterval: number;
        /**
         * Amount of time in seconds to wait for the response from a health check. If an ECS instance sends no response within the specified timeout period, the health check fails. Only available when the protocol is `http` or `https`.
         */
        healthCheckTimeout: number;
        /**
         * Health check method. Possible values are `tcp` and `http`. Only available when the protocol is `tcp`.
         */
        healthCheckType: string;
        /**
         * URI used for health check. Only available when the protocol is `http`, `https` or `tcp` (in this case healthCheckType must be `http`).
         */
        healthCheckUri: string;
        /**
         * Number of consecutive successes of health check performed on the same ECS instance (from failure to success).
         */
        healthyThreshold: number;
        /**
         * Timeout of http or https listener established connection idle timeout. Valid value range: [1-60] in seconds. Default to 15.
         */
        idleTimeout: number;
        /**
         * ID of the active/standby server group.
         */
        masterSlaveServerGroupId: string;
        /**
         * Timeout value of the TCP connection in seconds. If the value is 0, the session persistence function is disabled. Only available when the protocol is `tcp`.
         */
        persistenceTimeout: number;
        /**
         * Filter listeners by the specified protocol. Valid values: `http`, `https`, `tcp` and `udp`.
         */
        protocol: string;
        /**
         * Timeout of http or https listener request (which does not get response from backend) timeout. Valid value range: [1-180] in seconds. Default to 60.
         */
        requestTimeout: number;
        /**
         * Algorithm used to distribute traffic. Possible values: `wrr` (weighted round robin), `wlc` (weighted least connection) and `rr` (round robin).
         */
        scheduler: string;
        /**
         * Security status. Only available when the protocol is `https`.
         */
        securityStatus: string;
        serverCertificateId: string;
        /**
         * ID of the linked VServer group.
         */
        serverGroupId: string;
        /**
         * ID of the server certificate. Only available when the protocol is `https`.
         */
        sslCertificateId: string;
        /**
         * Listener status.
         */
        status: string;
        /**
         * Indicate whether session persistence is enabled or not. If enabled, all session requests from the same client are sent to the same backend server. Possible values are `on` and `off`. Only available when the protocol is `http` or `https`.
         */
        stickySession: string;
        /**
         * Method used to handle the cookie. Possible values are `insert` (cookie added to the response) and `server` (cookie set by the backend server). Only available when the protocol is `http` or `https` and stickySession is `on`.
         */
        stickySessionType: string;
        /**
         * Https listener TLS cipher policy. Valid values are `tlsCipherPolicy10`, `tlsCipherPolicy11`, `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`. Default to `tlsCipherPolicy10`.
         */
        tlsCipherPolicy: string;
        /**
         * Number of consecutive failures of health check performed on the same ECS instance (from success to failure).
         */
        unhealthyThreshold: number;
        /**
         * Indicate whether the HTTP header field "X-Forwarded-For" is added or not; it allows the backend server to know about the user's IP address. Possible values are `on` and `off`. Only available when the protocol is `http` or `https`.
         */
        xForwardedFor: string;
        /**
         * Indicate whether the HTTP header field "X-Forwarded-For_SLBID" is added or not; it allows the backend server to know about the SLB ID. Possible values are `on` and `off`. Only available when the protocol is `http` or `https`.
         */
        xForwardedForSlbId: string;
        /**
         * Indicate whether the HTTP header field "X-Forwarded-For_SLBIP" is added or not; it allows the backend server to know about the SLB IP address. Possible values are `on` and `off`. Only available when the protocol is `http` or `https`.
         */
        xForwardedForSlbIp: string;
        /**
         * Indicate whether the HTTP header field "X-Forwarded-For_proto" is added or not; it allows the backend server to know about the user's protocol. Possible values are `on` and `off`. Only available when the protocol is `http` or `https`.
         */
        xForwardedForSlbProto: string;
    }

    export interface GetLoadBalancersSlb {
        /**
         * Service address of the SLBs.
         */
        address: string;
        /**
         * SLB creation time.
         */
        creationTime: string;
        /**
         * ID of the SLB.
         */
        id: string;
        /**
         * SLB addressType: internet if `true`, intranet if `false`. Must be `false` when `networkType` is `vpc`.
         */
        internet: boolean;
        /**
         * Master availability zone of the SLBs.
         */
        masterAvailabilityZone: string;
        /**
         * SLB name.
         */
        name: string;
        /**
         * Network type of the SLBs. Valid values: `vpc` and `classic`.
         */
        networkType: string;
        /**
         * Region ID the SLB belongs to.
         */
        regionId: string;
        /**
         * Slave availability zone of the SLBs.
         */
        slaveAvailabilityZone: string;
        /**
         * SLB current status. Possible values: `inactive`, `active` and `locked`.
         */
        status: string;
        /**
         * A map of tags assigned to the SLB instances. The `tags` can have a maximum of 5 tag. It must be in the format:
         * ```
         * data "alicloud.slb.getLoadBalancers" "taggedInstances" {
         * tags = {
         * tagKey1 = "tagValue1",
         * tagKey2 = "tagValue2"
         * }
         * }
         * ```
         */
        tags: {[key: string]: any};
        /**
         * ID of the VPC linked to the SLBs.
         */
        vpcId: string;
        /**
         * ID of the VSwitch linked to the SLBs.
         */
        vswitchId: string;
    }

    export interface GetMasterSlaveServerGroupsGroup {
        /**
         * master slave server group ID.
         */
        id: string;
        /**
         * master slave server group name.
         */
        name: string;
        /**
         * ECS instances associated to the group. Each element contains the following attributes:
         */
        servers: outputs.slb.GetMasterSlaveServerGroupsGroupServer[];
    }

    export interface GetMasterSlaveServerGroupsGroupServer {
        /**
         * ID of the attached ECS instance.
         */
        instanceId: string;
        /**
         * The port used by the master slave server group.
         */
        port: number;
        /**
         * The server type of the attached ECS instance.
         */
        serverType: string;
        /**
         * Weight associated to the ECS instance.
         */
        weight: number;
    }

    export interface GetRulesSlbRule {
        /**
         * Domain name in the HTTP request where the rule applies (e.g. "*.aliyun.com").
         */
        domain: string;
        /**
         * Rule ID.
         */
        id: string;
        /**
         * Rule name.
         */
        name: string;
        /**
         * ID of the linked VServer group.
         */
        serverGroupId: string;
        /**
         * Path in the HTTP request where the rule applies (e.g. "/image").
         */
        url: string;
    }

    export interface GetServerCertificatesCertificate {
        /**
         * Id of server certificate issued by alibaba cloud.
         * * `alicloudCertificateName`- Name of server certificate issued by alibaba cloud.
         * * `isAlicloudCertificate`- Is server certificate issued by alibaba cloud or not.
         */
        alicloudCertificateId: string;
        alicloudCertificateName: string;
        /**
         * Server certificate common name.
         */
        commonName: string;
        /**
         * Server certificate created time.
         */
        createdTime: string;
        /**
         * Server certificate created timestamp.
         */
        createdTimestamp: number;
        /**
         * Server certificate expired time.
         */
        expiredTime: string;
        /**
         * Server certificate expired timestamp.
         */
        expiredTimestamp: number;
        /**
         * Server certificate fingerprint.
         */
        fingerprint: string;
        /**
         * Server certificate ID.
         */
        id: string;
        isAlicloudCertificate: boolean;
        /**
         * Server certificate name.
         */
        name: string;
        /**
         * The Id of resource group which the slb server certificates belongs.
         */
        resourceGroupId?: string;
        /**
         * Server certificate subject alternative name list.
         */
        subjectAlternativeNames: string[];
        /**
         * A mapping of tags to assign to the resource.
         */
        tags?: {[key: string]: any};
    }

    export interface GetServerGroupsSlbServerGroup {
        /**
         * VServer group ID.
         */
        id: string;
        /**
         * VServer group name.
         */
        name: string;
        /**
         * ECS instances associated to the group. Each element contains the following attributes:
         */
        servers: outputs.slb.GetServerGroupsSlbServerGroupServer[];
    }

    export interface GetServerGroupsSlbServerGroupServer {
        /**
         * ID of the attached ECS instance.
         */
        instanceId: string;
        /**
         * Weight associated to the ECS instance.
         */
        weight: number;
    }

    export interface GetZonesZone {
        /**
         * ID of the zone.
         */
        id: string;
        /**
         * A list of slb slave zone ids in which the slb master zone.
         */
        slbSlaveZoneIds: string[];
    }

    export interface ListenerXForwardedFor {
        retriveClientIp: boolean;
        /**
         * Whether to use the XForwardedFor header to obtain the ID of the SLB instance. Default to false.
         */
        retriveSlbId?: boolean;
        /**
         * Whether to use the XForwardedFor_SLBIP header to obtain the public IP address of the SLB instance. Default to false.
         */
        retriveSlbIp?: boolean;
        /**
         * Whether to use the XForwardedFor_proto header to obtain the protocol used by the listener. Default to false.
         */
        retriveSlbProto?: boolean;
    }

    export interface MasterSlaveServerGroupServer {
        port: number;
        serverId: string;
        serverType?: string;
        type?: string;
        weight?: number;
    }

    export interface ServerGroupServer {
        port: number;
        serverIds: string[];
        type?: string;
        weight?: number;
    }
}

export namespace vpc {
    export interface GetCommonBandwidthPackagesPackage {
        /**
         * The peak bandwidth of the Internet Shared Bandwidth instance.
         */
        bandwidth: string;
        /**
         * The business status of the Common Bandwidth Package instance.
         */
        businessStatus: string;
        /**
         * Time of creation.
         */
        creationTime: string;
        /**
         * The description of the Common Bandwidth Package instance.
         */
        description: string;
        /**
         * ID of the Common Bandwidth Package.
         */
        id: string;
        /**
         * ISP of the Common Bandwidth Package.
         */
        isp: string;
        /**
         * Name of the Common Bandwidth Package.
         */
        name: string;
        /**
         * Public ip addresses that in the Common Bandwidth Pakcage.
         */
        publicIpAddresses: outputs.vpc.GetCommonBandwidthPackagesPackagePublicIpAddress[];
        /**
         * The Id of resource group which the common bandwidth package belongs.
         */
        resourceGroupId?: string;
        /**
         * Status of the Common Bandwidth Package.
         */
        status: string;
    }

    export interface GetCommonBandwidthPackagesPackagePublicIpAddress {
        allocationId: string;
        ipAddress: string;
    }

    export interface GetForwardEntriesEntry {
        /**
         * The public IP address.
         */
        externalIp: string;
        /**
         * The public port.
         */
        externalPort: string;
        /**
         * The ID of the Forward Entry.
         */
        id: string;
        /**
         * The private IP address.
         */
        internalIp: string;
        /**
         * The private port.
         */
        internalPort: string;
        /**
         * The protocol type.
         */
        ipProtocol: string;
        /**
         * The forward entry name.
         */
        name: string;
        /**
         * The status of the Forward Entry.
         */
        status: string;
    }

    export interface GetNatGatewaysGateway {
        /**
         * Time of creation.
         */
        creationTime: string;
        /**
         * The description of the NAT gateway.
         */
        description: string;
        /**
         * The forward table id. 
         */
        forwardTableId: string;
        /**
         * The ID of the NAT gateway.
         */
        id: string;
        /**
         * Name of the NAT gateway.
         */
        name: string;
        /**
         * The snat table id.
         */
        snatTableId: string;
        /**
         * The specification of the NAT gateway.
         */
        spec: string;
        /**
         * The status of the NAT gateway.
         */
        status: string;
        /**
         * The ID of the VPC.
         */
        vpcId: string;
    }

    export interface GetNetworksVpc {
        /**
         * Filter results by a specific CIDR block. For example: "172.16.0.0/12".
         */
        cidrBlock: string;
        /**
         * Time of creation.
         */
        creationTime: string;
        /**
         * Description of the VPC
         */
        description: string;
        /**
         * ID of the VPC.
         */
        id: string;
        /**
         * Indicate whether the VPC is the default one in the specified region.
         */
        isDefault: boolean;
        /**
         * ID of the region where the VPC is located.
         */
        regionId: string;
        /**
         * Route table ID of the VRouter.
         */
        routeTableId: string;
        /**
         * Filter results by a specific status. Valid value are `Pending` and `Available`.
         */
        status: string;
        /**
         * A mapping of tags to assign to the resource.
         */
        tags: {[key: string]: any};
        /**
         * Name of the VPC.
         */
        vpcName: string;
        /**
         * ID of the VRouter.
         */
        vrouterId: string;
        /**
         * List of VSwitch IDs in the specified VPC
         */
        vswitchIds: string[];
    }

    export interface GetRouteEntriesEntry {
        /**
         * The destination CIDR block of the route entry.
         */
        cidrBlock: string;
        /**
         * The instance ID of the next hop.
         */
        instanceId: string;
        /**
         * The type of the next hop.
         */
        nextHopType: string;
        /**
         * The ID of the router table to which the route entry belongs.
         */
        routeTableId: string;
        /**
         * The status of the route entry.
         */
        status: string;
        /**
         * The type of the route entry.
         */
        type: string;
    }

    export interface GetRouteTablesTable {
        /**
         * Time of creation.
         */
        creationTime: string;
        /**
         * The description of the route table instance.
         */
        description: string;
        /**
         * ID of the Route Table.
         */
        id: string;
        /**
         * Name of the route table.
         */
        name: string;
        /**
         * The type of route table.
         */
        routeTableType: string;
        /**
         * Router Id of the route table.
         */
        routerId: string;
    }

    export interface GetRouterInterfacesInterface {
        /**
         * ID of the access point used by the VBR.
         */
        accessPointId: string;
        /**
         * Router interface creation time.
         */
        creationTime: string;
        /**
         * Router interface description.
         */
        description: string;
        /**
         * Source IP address used to perform health check on the physical connection.
         */
        healthCheckSourceIp: string;
        /**
         * Destination IP address used to perform health check on the physical connection.
         */
        healthCheckTargetIp: string;
        /**
         * Router interface ID.
         */
        id: string;
        /**
         * Router interface name.
         */
        name: string;
        /**
         * ID of the peer router interface.
         */
        oppositeInterfaceId: string;
        /**
         * Account ID of the owner of the peer router interface.
         */
        oppositeInterfaceOwnerId: string;
        /**
         * Peer router region ID.
         */
        oppositeRegionId: string;
        /**
         * Peer router ID.
         */
        oppositeRouterId: string;
        /**
         * Router type in the peer region. Possible values: `VRouter` and `VBR`.
         */
        oppositeRouterType: string;
        /**
         * Role of the router interface. Valid values are `InitiatingSide` (connection initiator) and 
         * `AcceptingSide` (connection receiver). The value of this parameter must be `InitiatingSide` if the `routerType` is set to `VBR`.
         */
        role: string;
        /**
         * ID of the VRouter located in the local region.
         */
        routerId: string;
        /**
         * Router type in the local region. Valid values are `VRouter` and `VBR` (physical connection).
         */
        routerType: string;
        /**
         * Specification of the link, such as `Small.1` (10Mb), `Middle.1` (100Mb), `Large.2` (2Gb), ...etc.
         */
        specification: string;
        /**
         * Expected status. Valid values are `Active`, `Inactive` and `Idle`.
         */
        status: string;
        /**
         * ID of the VPC that owns the router in the local region.
         */
        vpcId: string;
    }

    export interface GetSnatEntriesEntry {
        /**
         * The ID of the Snat Entry.
         */
        id: string;
        /**
         * The public IP of the Snat Entry.
         */
        snatIp: string;
        /**
         * The source CIDR block of the Snat Entry.
         */
        sourceCidr: string;
        /**
         * The status of the Snat Entry.
         */
        status: string;
    }

    export interface GetSslVpnClientCertsCert {
        /**
         * The time of creation.
         */
        createTime: string;
        /**
         * The expiration time of the client certificate.
         */
        endTime: number;
        /**
         * ID of the SSL-VPN client certificate.
         */
        id: string;
        /**
         * The name of the SSL-VPN client certificate.
         */
        name: string;
        /**
         * Use the SSL-VPN server ID as the search key.
         */
        sslVpnServerId: string;
        /**
         * The status of the client certificate. valid value:expiring-soon, normal, expired.
         */
        status: string;
    }

    export interface GetSslVpnServersServer {
        /**
         * The encryption algorithm used.
         */
        cipher: string;
        /**
         * The IP address pool of the client.
         */
        clientIpPool: string;
        /**
         * Whether to compress.
         */
        compress: boolean;
        /**
         * The number of current connections.
         */
        connections: number;
        /**
         * The time of creation.
         */
        createTime: string;
        /**
         * The ID of the SSL-VPN server.
         */
        id: string;
        /**
         * The public IP.
         */
        internetIp: string;
        /**
         * The local subnet of the VPN connection.
         */
        localSubnet: string;
        /**
         * The maximum number of connections.
         */
        maxConnections: number;
        /**
         * The name of the SSL-VPN server.
         */
        name: string;
        /**
         * The port used by the SSL-VPN server.
         */
        port: number;
        /**
         * The protocol used by the SSL-VPN server.
         */
        proto: string;
        /**
         * Use the VPN gateway ID as the search key.
         */
        vpnGatewayId: string;
    }

    export interface GetSwitchesVswitch {
        /**
         * Filter results by a specific CIDR block. For example: "172.16.0.0/12".
         */
        cidrBlock: string;
        /**
         * Time of creation.
         */
        creationTime: string;
        /**
         * Description of the VSwitch.
         */
        description: string;
        /**
         * ID of the VSwitch.
         */
        id: string;
        /**
         * List of ECS instance IDs in the specified VSwitch.
         */
        instanceIds: string[];
        /**
         * Indicate whether the VSwitch is created by the system.
         */
        isDefault: boolean;
        /**
         * Name of the VSwitch.
         */
        name: string;
        /**
         * ID of the VPC that owns the VSwitch.
         */
        vpcId: string;
        /**
         * The availability zone of the VSwitch.
         */
        zoneId: string;
    }

    export interface NatGatewayBandwidthPackage {
        bandwidth: number;
        ipCount: number;
        publicIpAddresses: string;
        zone: string;
    }

    export interface NetworkAclAttachmentResource {
        /**
         * The resource id that the network acl will associate with.
         */
        resourceId: string;
        /**
         * The resource id that the network acl will associate with. Only support `VSwitch` now.
         */
        resourceType: string;
    }

    export interface NetworkAclEntriesEgress {
        /**
         * The description of the egress entry.
         */
        description?: string;
        /**
         * The destination ip of the egress entry.
         */
        destinationCidrIp?: string;
        /**
         * The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
         */
        entryType?: string;
        /**
         * The name of the egress entry.
         */
        name?: string;
        /**
         * The policy of the egress entry. It must be `accept` or `drop`.
         */
        policy?: string;
        /**
         * The port of the egress entry.
         */
        port?: string;
        /**
         * The protocol of the egress entry.
         */
        protocol?: string;
    }

    export interface NetworkAclEntriesIngress {
        /**
         * The description of the egress entry.
         */
        description?: string;
        /**
         * The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
         */
        entryType?: string;
        /**
         * The name of the egress entry.
         */
        name?: string;
        /**
         * The policy of the egress entry. It must be `accept` or `drop`.
         */
        policy?: string;
        /**
         * The port of the egress entry.
         */
        port?: string;
        /**
         * The protocol of the egress entry.
         */
        protocol?: string;
        /**
         * The source ip of the ingress entry.
         */
        sourceCidrIp?: string;
    }
}

export namespace vpn {
    export interface ConnectionIkeConfig {
        /**
         * The authentication algorithm of phase-one negotiation. Valid value: md5 | sha1 | sha256 | sha384 | sha512 |. Default value: sha1
         */
        ikeAuthAlg?: string;
        /**
         * The encryption algorithm of phase-one negotiation. Valid value: aes | aes192 | aes256 | des | 3des. Default Valid value: aes
         */
        ikeEncAlg?: string;
        /**
         * The SA lifecycle as the result of phase-one negotiation. The valid value of n is [0, 86400], the unit is second and the default value is 86400.
         */
        ikeLifetime?: number;
        /**
         * The identification of the VPN gateway.
         */
        ikeLocalId?: string;
        /**
         * The negotiation mode of IKE V1. Valid value: main (main mode) | aggressive (aggressive mode). Default value: main
         */
        ikeMode?: string;
        /**
         * The Diffie-Hellman key exchange algorithm used by phase-one negotiation. Valid value: group1 | group2 | group5 | group14 | group24. Default value: group2
         */
        ikePfs?: string;
        /**
         * The identification of the customer gateway.
         */
        ikeRemoteId?: string;
        /**
         * The version of the IKE protocol. Valid value: ikev1 | ikev2. Default value: ikev1
         */
        ikeVersion?: string;
        /**
         * Used for authentication between the IPsec VPN gateway and the customer gateway.
         */
        psk?: string;
    }

    export interface ConnectionIpsecConfig {
        /**
         * The authentication algorithm of phase-two negotiation. Valid value: md5 | sha1 | sha256 | sha384 | sha512 |. Default value: sha1
         */
        ipsecAuthAlg?: string;
        /**
         * The encryption algorithm of phase-two negotiation. Valid value: aes | aes192 | aes256 | des | 3des. Default value: aes
         */
        ipsecEncAlg?: string;
        /**
         * The SA lifecycle as the result of phase-two negotiation. The valid value is [0, 86400], the unit is second and the default value is 86400.
         */
        ipsecLifetime?: number;
        /**
         * The Diffie-Hellman key exchange algorithm used by phase-two negotiation. Valid value: group1 | group2 | group5 | group14 | group24| disabled. Default value: group2
         */
        ipsecPfs?: string;
    }

    export interface GetConnectionsConnection {
        createTime: string;
        /**
         * Use the VPN customer gateway ID as the search key.
         */
        customerGatewayId: string;
        effectImmediately: boolean;
        /**
         * ID of the VPN connection.
         */
        id: string;
        /**
         * The configurations of phase-one negotiation.
         */
        ikeConfigs?: outputs.vpn.GetConnectionsConnectionIkeConfig[];
        /**
         * The configurations of phase-two negotiation.
         */
        ipsecConfigs?: outputs.vpn.GetConnectionsConnectionIpsecConfig[];
        /**
         * The local subnet of the VPN connection.
         */
        localSubnet: string;
        /**
         * The name of the VPN connection.
         */
        name: string;
        /**
         * The remote subnet of the VPN connection.
         */
        remoteSubnet: string;
        /**
         * The status of the VPN connection, valid value:ike_sa_not_established, ike_sa_established, ipsec_sa_not_established, ipsec_sa_established.
         */
        status: string;
        /**
         * Use the VPN gateway ID as the search key.
         */
        vpnGatewayId: string;
    }

    export interface GetConnectionsConnectionIkeConfig {
        /**
         * The authentication algorithm of phase-one negotiation. 
         */
        ikeAuthAlg?: string;
        /**
         * The encryption algorithm of phase-one negotiation. 
         */
        ikeEncAlg?: string;
        /**
         * The SA lifecycle as the result of phase-one negotiation. 
         */
        ikeLifetime?: number;
        /**
         * The identification of the VPN gateway.
         */
        ikeLocalId?: string;
        /**
         * The negotiation mode of IKE phase-one. 
         */
        ikeMode?: string;
        /**
         * The Diffie-Hellman key exchange algorithm used by phase-one negotiation. 
         */
        ikePfs?: string;
        /**
         * The identification of the customer gateway.
         */
        ikeRemoteId?: string;
        /**
         * The version of the IKE protocol. 
         */
        ikeVersion?: string;
        /**
         * Used for authentication between the IPsec VPN gateway and the customer gateway.
         */
        psk?: string;
    }

    export interface GetConnectionsConnectionIpsecConfig {
        /**
         * The authentication algorithm of phase-two negotiation. 
         */
        ipsecAuthAlg?: string;
        /**
         * The encryption algorithm of phase-two negotiation. 
         */
        ipsecEncAlg?: string;
        /**
         * The SA lifecycle as the result of phase-two negotiation. 
         */
        ipsecLifetime?: number;
        /**
         * The Diffie-Hellman key exchange algorithm used by phase-two negotiation. 
         */
        ipsecPfs?: string;
    }

    export interface GetCustomerGatewaysGateway {
        /**
         * The creation time of the VPN customer gateway.
         */
        createTime: string;
        /**
         * The description of the VPN customer gateway.
         */
        description: string;
        /**
         * ID of the VPN customer gateway .
         */
        id: string;
        /**
         * The ip address of the VPN customer gateway.
         */
        ipAddress: string;
        /**
         * The name of the VPN customer gateway.
         */
        name: string;
    }

    export interface GetGatewaysGateway {
        /**
         * Limit search to specific business status - valid value is "Normal", "FinancialLocked".
         */
        businessStatus: string;
        /**
         * The creation time of the VPN gateway.
         */
        createTime: string;
        /**
         * The description of the VPN
         */
        description: string;
        /**
         * Whether the ipsec function is enabled.
         */
        enableIpsec: string;
        /**
         * Whether the ssl function is enabled.
         */
        enableSsl: string;
        /**
         * The expiration time of the VPN gateway.
         */
        endTime: string;
        /**
         * ID of the VPN.
         */
        id: string;
        /**
         * The charge type of the VPN gateway.
         */
        instanceChargeType: string;
        /**
         * The internet ip of the VPN.
         */
        internetIp: string;
        /**
         * The name of the VPN.
         */
        name: string;
        /**
         * The Specification of the VPN
         */
        specification: string;
        /**
         * Total count of ssl vpn connections.
         */
        sslConnections: number;
        /**
         * Limit search to specific status - valid value is "Init", "Provisioning", "Active", "Updating", "Deleting".
         */
        status: string;
        /**
         * Use the VPC ID as the search key.
         */
        vpcId: string;
    }
}

export namespace yundun {
    export interface GetBastionHostInstancesInstance {
        /**
         * The instance's remark.
         */
        description: string;
        /**
         * The instance's id.
         */
        id: string;
        /**
         * The instance's status.
         */
        instanceStatus: string;
        licenseCode: string;
        /**
         * The instance's private domain name.
         */
        privateDomain: string;
        /**
         * The instance's public domain name.
         */
        publicDomain: string;
        /**
         * The instance's public network access configuration.
         */
        publicNetworkAccess: boolean;
        /**
         * The instance's security group configuration.
         */
        securityGroupIds: string[];
        /**
         * A map of tags assigned to the bastionhost instance. It must be in the format:
         * ```
         * data "alicloud.yundun.getBastionHostInstances" "instance" {
         * tags = {
         * tagKey1 = "tagValue1"
         * }
         * }
         * ```
         */
        tags?: {[key: string]: any};
        /**
         * The instance's vSwitch ID.
         */
        userVswitchId: string;
    }

    export interface GetDBAuditInstanceInstance {
        description: string;
        id: string;
        instanceStatus: string;
        licenseCode: string;
        privateDomain: string;
        publicDomain: string;
        publicNetworkAccess: boolean;
        tags?: {[key: string]: any};
        userVswitchId: string;
    }
}
