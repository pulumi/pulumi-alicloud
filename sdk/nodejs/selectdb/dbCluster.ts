// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a SelectDB DBCluster resource.
 *
 * For information about SelectDB DBCluster and how to use it, see [What is DBCluster](https://www.alibabacloud.com/help/zh/selectdb/latest/api-selectdb-2023-05-22-createdbcluster).
 *
 * > **NOTE:** Available since v1.229.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform_example";
 * const defaultGetNetworks = alicloud.vpc.getNetworks({
 *     nameRegex: "^default-NODELETING$",
 * });
 * const defaultGetSwitches = Promise.all([defaultGetNetworks, _default]).then(([defaultGetNetworks, _default]) => alicloud.vpc.getSwitches({
 *     vpcId: defaultGetNetworks.ids?.[0],
 *     zoneId: _default.zones?.[0]?.id,
 * }));
 * const defaultDbInstance = new alicloud.selectdb.DbInstance("default", {
 *     dbInstanceClass: "selectdb.xlarge",
 *     dbInstanceDescription: name,
 *     cacheSize: 200,
 *     paymentType: "PayAsYouGo",
 *     engineMinorVersion: "3.0.12",
 *     vpcId: defaultGetSwitches.then(defaultGetSwitches => defaultGetSwitches.vswitches?.[0]?.vpcId),
 *     zoneId: defaultGetSwitches.then(defaultGetSwitches => defaultGetSwitches.vswitches?.[0]?.zoneId),
 *     vswitchId: defaultGetSwitches.then(defaultGetSwitches => defaultGetSwitches.vswitches?.[0]?.id),
 * });
 * const defaultDbCluster = new alicloud.selectdb.DbCluster("default", {
 *     dbInstanceId: defaultDbInstance.id,
 *     dbClusterDescription: name,
 *     dbClusterClass: "selectdb.2xlarge",
 *     cacheSize: 400,
 *     paymentType: "PayAsYouGo",
 * });
 * ```
 *
 * ## Import
 *
 * SelectDB DBCluster can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:selectdb/dbCluster:DbCluster example <db_instance_id>:<db_cluster_id>
 * ```
 */
export class DbCluster extends pulumi.CustomResource {
    /**
     * Get an existing DbCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbClusterState, opts?: pulumi.CustomResourceOptions): DbCluster {
        return new DbCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:selectdb/dbCluster:DbCluster';

    /**
     * Returns true if the given object is an instance of DbCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbCluster.__pulumiType;
    }

    /**
     * The desired cache size on creating cluster. The number should be divided by 100.
     */
    declare public readonly cacheSize: pulumi.Output<number>;
    /**
     * The cpu resource amount of DBCluster. Depends on `dbClusterClass`.
     */
    declare public /*out*/ readonly cpu: pulumi.Output<number>;
    /**
     * The time when DBCluster is created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The DBCluster class. dbClusterClass has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     */
    declare public readonly dbClusterClass: pulumi.Output<string>;
    /**
     * The DBCluster description.
     */
    declare public readonly dbClusterDescription: pulumi.Output<string>;
    /**
     * The id of the cluster.
     */
    declare public /*out*/ readonly dbClusterId: pulumi.Output<string>;
    /**
     * The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
     */
    declare public readonly dbInstanceId: pulumi.Output<string>;
    /**
     * The modified parameter in DBCluster. See `desiredParams` below.
     */
    declare public readonly desiredParams: pulumi.Output<outputs.selectdb.DbClusterDesiredParam[] | undefined>;
    /**
     * The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
     */
    declare public readonly desiredStatus: pulumi.Output<string | undefined>;
    /**
     * The engine of DBCluster. Always `selectdb`.
     */
    declare public /*out*/ readonly engine: pulumi.Output<string>;
    /**
     * The version of DBCluster.
     */
    declare public /*out*/ readonly engineVersion: pulumi.Output<string>;
    /**
     * The memory resource amount of DBCluster. Depends on `dbClusterClass`.
     */
    declare public /*out*/ readonly memory: pulumi.Output<number>;
    /**
     * The details about parameter changelogs in DBCluster returned.
     */
    declare public /*out*/ readonly paramChangeLogs: pulumi.Output<outputs.selectdb.DbClusterParamChangeLog[]>;
    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     */
    declare public readonly paymentType: pulumi.Output<string>;
    /**
     * The ID of region for the cluster.
     */
    declare public /*out*/ readonly regionId: pulumi.Output<string>;
    /**
     * The current status of the resource.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The ID of the VPC for the cluster.
     */
    declare public /*out*/ readonly vpcId: pulumi.Output<string>;
    /**
     * The ID of zone for the cluster.
     */
    declare public /*out*/ readonly zoneId: pulumi.Output<string>;

    /**
     * Create a DbCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbClusterArgs | DbClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbClusterState | undefined;
            resourceInputs["cacheSize"] = state?.cacheSize;
            resourceInputs["cpu"] = state?.cpu;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["dbClusterClass"] = state?.dbClusterClass;
            resourceInputs["dbClusterDescription"] = state?.dbClusterDescription;
            resourceInputs["dbClusterId"] = state?.dbClusterId;
            resourceInputs["dbInstanceId"] = state?.dbInstanceId;
            resourceInputs["desiredParams"] = state?.desiredParams;
            resourceInputs["desiredStatus"] = state?.desiredStatus;
            resourceInputs["engine"] = state?.engine;
            resourceInputs["engineVersion"] = state?.engineVersion;
            resourceInputs["memory"] = state?.memory;
            resourceInputs["paramChangeLogs"] = state?.paramChangeLogs;
            resourceInputs["paymentType"] = state?.paymentType;
            resourceInputs["regionId"] = state?.regionId;
            resourceInputs["status"] = state?.status;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as DbClusterArgs | undefined;
            if (args?.cacheSize === undefined && !opts.urn) {
                throw new Error("Missing required property 'cacheSize'");
            }
            if (args?.dbClusterClass === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbClusterClass'");
            }
            if (args?.dbClusterDescription === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbClusterDescription'");
            }
            if (args?.dbInstanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceId'");
            }
            if (args?.paymentType === undefined && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            resourceInputs["cacheSize"] = args?.cacheSize;
            resourceInputs["dbClusterClass"] = args?.dbClusterClass;
            resourceInputs["dbClusterDescription"] = args?.dbClusterDescription;
            resourceInputs["dbInstanceId"] = args?.dbInstanceId;
            resourceInputs["desiredParams"] = args?.desiredParams;
            resourceInputs["desiredStatus"] = args?.desiredStatus;
            resourceInputs["paymentType"] = args?.paymentType;
            resourceInputs["cpu"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dbClusterId"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["memory"] = undefined /*out*/;
            resourceInputs["paramChangeLogs"] = undefined /*out*/;
            resourceInputs["regionId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
            resourceInputs["zoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DbCluster resources.
 */
export interface DbClusterState {
    /**
     * The desired cache size on creating cluster. The number should be divided by 100.
     */
    cacheSize?: pulumi.Input<number>;
    /**
     * The cpu resource amount of DBCluster. Depends on `dbClusterClass`.
     */
    cpu?: pulumi.Input<number>;
    /**
     * The time when DBCluster is created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The DBCluster class. dbClusterClass has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     */
    dbClusterClass?: pulumi.Input<string>;
    /**
     * The DBCluster description.
     */
    dbClusterDescription?: pulumi.Input<string>;
    /**
     * The id of the cluster.
     */
    dbClusterId?: pulumi.Input<string>;
    /**
     * The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
     */
    dbInstanceId?: pulumi.Input<string>;
    /**
     * The modified parameter in DBCluster. See `desiredParams` below.
     */
    desiredParams?: pulumi.Input<pulumi.Input<inputs.selectdb.DbClusterDesiredParam>[]>;
    /**
     * The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
     */
    desiredStatus?: pulumi.Input<string>;
    /**
     * The engine of DBCluster. Always `selectdb`.
     */
    engine?: pulumi.Input<string>;
    /**
     * The version of DBCluster.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The memory resource amount of DBCluster. Depends on `dbClusterClass`.
     */
    memory?: pulumi.Input<number>;
    /**
     * The details about parameter changelogs in DBCluster returned.
     */
    paramChangeLogs?: pulumi.Input<pulumi.Input<inputs.selectdb.DbClusterParamChangeLog>[]>;
    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     */
    paymentType?: pulumi.Input<string>;
    /**
     * The ID of region for the cluster.
     */
    regionId?: pulumi.Input<string>;
    /**
     * The current status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of the VPC for the cluster.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The ID of zone for the cluster.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbCluster resource.
 */
export interface DbClusterArgs {
    /**
     * The desired cache size on creating cluster. The number should be divided by 100.
     */
    cacheSize: pulumi.Input<number>;
    /**
     * The DBCluster class. dbClusterClass has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     */
    dbClusterClass: pulumi.Input<string>;
    /**
     * The DBCluster description.
     */
    dbClusterDescription: pulumi.Input<string>;
    /**
     * The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
     */
    dbInstanceId: pulumi.Input<string>;
    /**
     * The modified parameter in DBCluster. See `desiredParams` below.
     */
    desiredParams?: pulumi.Input<pulumi.Input<inputs.selectdb.DbClusterDesiredParam>[]>;
    /**
     * The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
     */
    desiredStatus?: pulumi.Input<string>;
    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     */
    paymentType: pulumi.Input<string>;
}
