// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a DTS Migration Job resource.
 *
 * For information about DTS Migration Job and how to use it, see [What is Migration Job](https://www.alibabacloud.com/help/en/doc-detail/208399.html).
 *
 * > **NOTE:** Available since v1.157.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const example = alicloud.getRegions({
 *     current: true,
 * });
 * const exampleGetZones = alicloud.rds.getZones({
 *     engine: "MySQL",
 *     engineVersion: "8.0",
 *     instanceChargeType: "PostPaid",
 *     category: "Basic",
 *     dbInstanceStorageType: "cloud_essd",
 * });
 * const exampleGetInstanceClasses = exampleGetZones.then(exampleGetZones => alicloud.rds.getInstanceClasses({
 *     zoneId: exampleGetZones.zones?.[0]?.id,
 *     engine: "MySQL",
 *     engineVersion: "8.0",
 *     instanceChargeType: "PostPaid",
 *     category: "Basic",
 *     dbInstanceStorageType: "cloud_essd",
 * }));
 * const exampleNetwork = new alicloud.vpc.Network("example", {
 *     vpcName: name,
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const exampleSwitch = new alicloud.vpc.Switch("example", {
 *     vpcId: exampleNetwork.id,
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: exampleGetZones.then(exampleGetZones => exampleGetZones.zones?.[0]?.id),
 *     vswitchName: name,
 * });
 * const exampleSecurityGroup = new alicloud.ecs.SecurityGroup("example", {
 *     name: name,
 *     vpcId: exampleNetwork.id,
 * });
 * const exampleInstance: alicloud.rds.Instance[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleInstance.push(new alicloud.rds.Instance(`example-${range.value}`, {
 *         engine: "MySQL",
 *         engineVersion: "8.0",
 *         instanceType: exampleGetInstanceClasses.then(exampleGetInstanceClasses => exampleGetInstanceClasses.instanceClasses?.[0]?.instanceClass),
 *         instanceStorage: exampleGetInstanceClasses.then(exampleGetInstanceClasses => exampleGetInstanceClasses.instanceClasses?.[0]?.storageRange?.min),
 *         instanceChargeType: "Postpaid",
 *         instanceName: std.format({
 *             input: `${name}_%d`,
 *             args: [range.value + 1],
 *         }).then(invoke => invoke.result),
 *         vswitchId: exampleSwitch.id,
 *         monitoringPeriod: 60,
 *         dbInstanceStorageType: "cloud_essd",
 *         securityGroupIds: [exampleSecurityGroup.id],
 *     }));
 * }
 * const exampleRdsAccount: alicloud.rds.RdsAccount[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleRdsAccount.push(new alicloud.rds.RdsAccount(`example-${range.value}`, {
 *         dbInstanceId: exampleInstance[range.value].id,
 *         accountName: std.format({
 *             input: "example_name_%d",
 *             args: [range.value + 1],
 *         }).then(invoke => invoke.result),
 *         accountPassword: std.format({
 *             input: "example_password_%d",
 *             args: [range.value + 1],
 *         }).then(invoke => invoke.result),
 *     }));
 * }
 * const exampleDatabase: alicloud.rds.Database[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleDatabase.push(new alicloud.rds.Database(`example-${range.value}`, {
 *         instanceId: exampleInstance[range.value].id,
 *         name: std.format({
 *             input: `${name}_%d`,
 *             args: [range.value + 1],
 *         }).then(invoke => invoke.result),
 *     }));
 * }
 * const exampleAccountPrivilege: alicloud.rds.AccountPrivilege[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleAccountPrivilege.push(new alicloud.rds.AccountPrivilege(`example-${range.value}`, {
 *         instanceId: exampleInstance[range.value].id,
 *         accountName: exampleRdsAccount[range.value].name,
 *         privilege: "ReadWrite",
 *         dbNames: [exampleDatabase[range.value].name],
 *     }));
 * }
 * const exampleMigrationInstance = new alicloud.dts.MigrationInstance("example", {
 *     paymentType: "PayAsYouGo",
 *     sourceEndpointEngineName: "MySQL",
 *     sourceEndpointRegion: example.then(example => example.regions?.[0]?.id),
 *     destinationEndpointEngineName: "MySQL",
 *     destinationEndpointRegion: example.then(example => example.regions?.[0]?.id),
 *     instanceClass: "small",
 *     syncArchitecture: "oneway",
 * });
 * const exampleMigrationJob = new alicloud.dts.MigrationJob("example", {
 *     dtsInstanceId: exampleMigrationInstance.id,
 *     dtsJobName: name,
 *     sourceEndpointInstanceType: "RDS",
 *     sourceEndpointInstanceId: exampleAccountPrivilege[0].instanceId,
 *     sourceEndpointEngineName: "MySQL",
 *     sourceEndpointRegion: example.then(example => example.regions?.[0]?.id),
 *     sourceEndpointUserName: exampleRdsAccount[0].accountName,
 *     sourceEndpointPassword: exampleRdsAccount[0].accountPassword,
 *     destinationEndpointInstanceType: "RDS",
 *     destinationEndpointInstanceId: exampleAccountPrivilege[1].instanceId,
 *     destinationEndpointEngineName: "MySQL",
 *     destinationEndpointRegion: example.then(example => example.regions?.[0]?.id),
 *     destinationEndpointUserName: exampleRdsAccount[1].accountName,
 *     destinationEndpointPassword: exampleRdsAccount[1].accountPassword,
 *     dbList: pulumi.jsonStringify(pulumi.all([exampleDatabase[0].name, exampleDatabase[1].name]).apply(([exampleDatabaseName, exampleDatabaseName1]) => {
 *         [exampleDatabaseName]: {
 *             name: exampleDatabaseName1,
 *             all: true,
 *         },
 *     })),
 *     structureInitialization: true,
 *     dataInitialization: true,
 *     dataSynchronization: true,
 * });
 * ```
 *
 * ## Notice
 *
 * 1. The expiration time cannot be changed after the work of the annual and monthly subscription suspended;
 * 2. After the pay-as-you-go type job suspended, your job configuration fee will still be charged;
 * 3. If the task suspended for more than 6 hours, the task will not start successfully.
 * 4. Suspending the task will only stop writing to the target library, but will still continue to obtain the incremental log of the source, so that the task can be quickly resumed after the suspension is canceled. Therefore, some resources of the source library, such as bandwidth resources, will continue to be occupied during the period.
 * 5. Charges will continue during the task suspension period. If you need to stop charging, please release the instance
 * 6. When a DTS instance suspended for more than 7 days, the instance cannot be resumed, and the status will change from suspended to failed.
 *
 * ## Import
 *
 * DTS Migration Job can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:dts/migrationJob:MigrationJob example <id>
 * ```
 */
export class MigrationJob extends pulumi.CustomResource {
    /**
     * Get an existing MigrationJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MigrationJobState, opts?: pulumi.CustomResourceOptions): MigrationJob {
        return new MigrationJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:dts/migrationJob:MigrationJob';

    /**
     * Returns true if the given object is an instance of MigrationJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MigrationJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MigrationJob.__pulumiType;
    }

    /**
     * Start time in Unix timestamp format.
     */
    declare public readonly checkpoint: pulumi.Output<string>;
    /**
     * Whether to execute DTS supports schema migration.
     */
    declare public readonly dataInitialization: pulumi.Output<boolean>;
    /**
     * Whether to perform incremental data migration.
     */
    declare public readonly dataSynchronization: pulumi.Output<boolean>;
    /**
     * Migration object, in the format of JSON strings. For detailed definition instructions, please refer to [the description of migration, migration or subscription objects](https://help.aliyun.com/document_detail/209545.html).
     */
    declare public readonly dbList: pulumi.Output<string>;
    /**
     * The name of migrate the database.
     */
    declare public readonly destinationEndpointDatabaseName: pulumi.Output<string | undefined>;
    /**
     * The type of destination database. Valid values: `ADS`, `ADB30`, `AS400`, `DATAHUB`, `DB2`, `GREENPLUM`, `KAFKA`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `PostgreSQL`.
     */
    declare public readonly destinationEndpointEngineName: pulumi.Output<string>;
    /**
     * The ID of destination instance.
     */
    declare public readonly destinationEndpointInstanceId: pulumi.Output<string | undefined>;
    /**
     * The type of destination instance. Valid values: `ADS`, `CEN`, `DATAHUB`, `DG`, `ECS`, `EXPRESS`, `GREENPLUM`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
     */
    declare public readonly destinationEndpointInstanceType: pulumi.Output<string>;
    /**
     * The ip of source endpoint.
     */
    declare public readonly destinationEndpointIp: pulumi.Output<string | undefined>;
    /**
     * The SID of Oracle database.
     */
    declare public readonly destinationEndpointOracleSid: pulumi.Output<string | undefined>;
    /**
     * The password of database account.
     */
    declare public readonly destinationEndpointPassword: pulumi.Output<string | undefined>;
    /**
     * The port of source endpoint.
     */
    declare public readonly destinationEndpointPort: pulumi.Output<string | undefined>;
    /**
     * The region of destination instance.
     */
    declare public readonly destinationEndpointRegion: pulumi.Output<string | undefined>;
    /**
     * The username of database account.
     */
    declare public readonly destinationEndpointUserName: pulumi.Output<string | undefined>;
    /**
     * The Migration instance ID. The ID of `alicloud.dts.MigrationInstance`.
     */
    declare public readonly dtsInstanceId: pulumi.Output<string>;
    /**
     * The name of migration job.
     */
    declare public readonly dtsJobName: pulumi.Output<string>;
    /**
     * The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
     */
    declare public readonly instanceClass: pulumi.Output<string>;
    /**
     * The name of migrate the database.
     */
    declare public readonly sourceEndpointDatabaseName: pulumi.Output<string | undefined>;
    /**
     * The type of source database. Valid values: `AS400`, `DB2`, `DMSPOLARDB`, `HBASE`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `POSTGRESQL`, `TERADATA`.
     */
    declare public readonly sourceEndpointEngineName: pulumi.Output<string>;
    /**
     * The ID of source instance.
     */
    declare public readonly sourceEndpointInstanceId: pulumi.Output<string | undefined>;
    /**
     * The type of source instance. Valid values: `CEN`, `DG`, `DISTRIBUTED_DMSLOGICDB`, `ECS`, `EXPRESS`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
     */
    declare public readonly sourceEndpointInstanceType: pulumi.Output<string>;
    /**
     * The ip of source endpoint.
     */
    declare public readonly sourceEndpointIp: pulumi.Output<string | undefined>;
    /**
     * The SID of Oracle database.
     */
    declare public readonly sourceEndpointOracleSid: pulumi.Output<string | undefined>;
    /**
     * The Alibaba Cloud account ID to which the source instance belongs.
     */
    declare public readonly sourceEndpointOwnerId: pulumi.Output<string | undefined>;
    /**
     * The password of database account.
     */
    declare public readonly sourceEndpointPassword: pulumi.Output<string | undefined>;
    /**
     * The port of source endpoint.
     */
    declare public readonly sourceEndpointPort: pulumi.Output<string | undefined>;
    /**
     * The region of source instance.
     */
    declare public readonly sourceEndpointRegion: pulumi.Output<string | undefined>;
    /**
     * The name of the role configured for the cloud account to which the source instance belongs.
     */
    declare public readonly sourceEndpointRole: pulumi.Output<string | undefined>;
    /**
     * The username of database account.
     */
    declare public readonly sourceEndpointUserName: pulumi.Output<string | undefined>;
    /**
     * The status of the resource. Valid values: `Migrating`, `Suspending`. You can suspend the task by specifying `Suspending` and start the task by specifying `Migrating`.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * Whether to perform a database table structure to migrate.
     */
    declare public readonly structureInitialization: pulumi.Output<boolean>;

    /**
     * Create a MigrationJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MigrationJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MigrationJobArgs | MigrationJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MigrationJobState | undefined;
            resourceInputs["checkpoint"] = state?.checkpoint;
            resourceInputs["dataInitialization"] = state?.dataInitialization;
            resourceInputs["dataSynchronization"] = state?.dataSynchronization;
            resourceInputs["dbList"] = state?.dbList;
            resourceInputs["destinationEndpointDatabaseName"] = state?.destinationEndpointDatabaseName;
            resourceInputs["destinationEndpointEngineName"] = state?.destinationEndpointEngineName;
            resourceInputs["destinationEndpointInstanceId"] = state?.destinationEndpointInstanceId;
            resourceInputs["destinationEndpointInstanceType"] = state?.destinationEndpointInstanceType;
            resourceInputs["destinationEndpointIp"] = state?.destinationEndpointIp;
            resourceInputs["destinationEndpointOracleSid"] = state?.destinationEndpointOracleSid;
            resourceInputs["destinationEndpointPassword"] = state?.destinationEndpointPassword;
            resourceInputs["destinationEndpointPort"] = state?.destinationEndpointPort;
            resourceInputs["destinationEndpointRegion"] = state?.destinationEndpointRegion;
            resourceInputs["destinationEndpointUserName"] = state?.destinationEndpointUserName;
            resourceInputs["dtsInstanceId"] = state?.dtsInstanceId;
            resourceInputs["dtsJobName"] = state?.dtsJobName;
            resourceInputs["instanceClass"] = state?.instanceClass;
            resourceInputs["sourceEndpointDatabaseName"] = state?.sourceEndpointDatabaseName;
            resourceInputs["sourceEndpointEngineName"] = state?.sourceEndpointEngineName;
            resourceInputs["sourceEndpointInstanceId"] = state?.sourceEndpointInstanceId;
            resourceInputs["sourceEndpointInstanceType"] = state?.sourceEndpointInstanceType;
            resourceInputs["sourceEndpointIp"] = state?.sourceEndpointIp;
            resourceInputs["sourceEndpointOracleSid"] = state?.sourceEndpointOracleSid;
            resourceInputs["sourceEndpointOwnerId"] = state?.sourceEndpointOwnerId;
            resourceInputs["sourceEndpointPassword"] = state?.sourceEndpointPassword;
            resourceInputs["sourceEndpointPort"] = state?.sourceEndpointPort;
            resourceInputs["sourceEndpointRegion"] = state?.sourceEndpointRegion;
            resourceInputs["sourceEndpointRole"] = state?.sourceEndpointRole;
            resourceInputs["sourceEndpointUserName"] = state?.sourceEndpointUserName;
            resourceInputs["status"] = state?.status;
            resourceInputs["structureInitialization"] = state?.structureInitialization;
        } else {
            const args = argsOrState as MigrationJobArgs | undefined;
            if (args?.dataInitialization === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataInitialization'");
            }
            if (args?.dataSynchronization === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataSynchronization'");
            }
            if (args?.dbList === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbList'");
            }
            if (args?.destinationEndpointEngineName === undefined && !opts.urn) {
                throw new Error("Missing required property 'destinationEndpointEngineName'");
            }
            if (args?.destinationEndpointInstanceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'destinationEndpointInstanceType'");
            }
            if (args?.dtsInstanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dtsInstanceId'");
            }
            if (args?.sourceEndpointEngineName === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceEndpointEngineName'");
            }
            if (args?.sourceEndpointInstanceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceEndpointInstanceType'");
            }
            if (args?.structureInitialization === undefined && !opts.urn) {
                throw new Error("Missing required property 'structureInitialization'");
            }
            resourceInputs["checkpoint"] = args?.checkpoint;
            resourceInputs["dataInitialization"] = args?.dataInitialization;
            resourceInputs["dataSynchronization"] = args?.dataSynchronization;
            resourceInputs["dbList"] = args?.dbList;
            resourceInputs["destinationEndpointDatabaseName"] = args?.destinationEndpointDatabaseName;
            resourceInputs["destinationEndpointEngineName"] = args?.destinationEndpointEngineName;
            resourceInputs["destinationEndpointInstanceId"] = args?.destinationEndpointInstanceId;
            resourceInputs["destinationEndpointInstanceType"] = args?.destinationEndpointInstanceType;
            resourceInputs["destinationEndpointIp"] = args?.destinationEndpointIp;
            resourceInputs["destinationEndpointOracleSid"] = args?.destinationEndpointOracleSid;
            resourceInputs["destinationEndpointPassword"] = args?.destinationEndpointPassword;
            resourceInputs["destinationEndpointPort"] = args?.destinationEndpointPort;
            resourceInputs["destinationEndpointRegion"] = args?.destinationEndpointRegion;
            resourceInputs["destinationEndpointUserName"] = args?.destinationEndpointUserName;
            resourceInputs["dtsInstanceId"] = args?.dtsInstanceId;
            resourceInputs["dtsJobName"] = args?.dtsJobName;
            resourceInputs["instanceClass"] = args?.instanceClass;
            resourceInputs["sourceEndpointDatabaseName"] = args?.sourceEndpointDatabaseName;
            resourceInputs["sourceEndpointEngineName"] = args?.sourceEndpointEngineName;
            resourceInputs["sourceEndpointInstanceId"] = args?.sourceEndpointInstanceId;
            resourceInputs["sourceEndpointInstanceType"] = args?.sourceEndpointInstanceType;
            resourceInputs["sourceEndpointIp"] = args?.sourceEndpointIp;
            resourceInputs["sourceEndpointOracleSid"] = args?.sourceEndpointOracleSid;
            resourceInputs["sourceEndpointOwnerId"] = args?.sourceEndpointOwnerId;
            resourceInputs["sourceEndpointPassword"] = args?.sourceEndpointPassword;
            resourceInputs["sourceEndpointPort"] = args?.sourceEndpointPort;
            resourceInputs["sourceEndpointRegion"] = args?.sourceEndpointRegion;
            resourceInputs["sourceEndpointRole"] = args?.sourceEndpointRole;
            resourceInputs["sourceEndpointUserName"] = args?.sourceEndpointUserName;
            resourceInputs["status"] = args?.status;
            resourceInputs["structureInitialization"] = args?.structureInitialization;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MigrationJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MigrationJob resources.
 */
export interface MigrationJobState {
    /**
     * Start time in Unix timestamp format.
     */
    checkpoint?: pulumi.Input<string>;
    /**
     * Whether to execute DTS supports schema migration.
     */
    dataInitialization?: pulumi.Input<boolean>;
    /**
     * Whether to perform incremental data migration.
     */
    dataSynchronization?: pulumi.Input<boolean>;
    /**
     * Migration object, in the format of JSON strings. For detailed definition instructions, please refer to [the description of migration, migration or subscription objects](https://help.aliyun.com/document_detail/209545.html).
     */
    dbList?: pulumi.Input<string>;
    /**
     * The name of migrate the database.
     */
    destinationEndpointDatabaseName?: pulumi.Input<string>;
    /**
     * The type of destination database. Valid values: `ADS`, `ADB30`, `AS400`, `DATAHUB`, `DB2`, `GREENPLUM`, `KAFKA`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `PostgreSQL`.
     */
    destinationEndpointEngineName?: pulumi.Input<string>;
    /**
     * The ID of destination instance.
     */
    destinationEndpointInstanceId?: pulumi.Input<string>;
    /**
     * The type of destination instance. Valid values: `ADS`, `CEN`, `DATAHUB`, `DG`, `ECS`, `EXPRESS`, `GREENPLUM`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
     */
    destinationEndpointInstanceType?: pulumi.Input<string>;
    /**
     * The ip of source endpoint.
     */
    destinationEndpointIp?: pulumi.Input<string>;
    /**
     * The SID of Oracle database.
     */
    destinationEndpointOracleSid?: pulumi.Input<string>;
    /**
     * The password of database account.
     */
    destinationEndpointPassword?: pulumi.Input<string>;
    /**
     * The port of source endpoint.
     */
    destinationEndpointPort?: pulumi.Input<string>;
    /**
     * The region of destination instance.
     */
    destinationEndpointRegion?: pulumi.Input<string>;
    /**
     * The username of database account.
     */
    destinationEndpointUserName?: pulumi.Input<string>;
    /**
     * The Migration instance ID. The ID of `alicloud.dts.MigrationInstance`.
     */
    dtsInstanceId?: pulumi.Input<string>;
    /**
     * The name of migration job.
     */
    dtsJobName?: pulumi.Input<string>;
    /**
     * The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
     */
    instanceClass?: pulumi.Input<string>;
    /**
     * The name of migrate the database.
     */
    sourceEndpointDatabaseName?: pulumi.Input<string>;
    /**
     * The type of source database. Valid values: `AS400`, `DB2`, `DMSPOLARDB`, `HBASE`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `POSTGRESQL`, `TERADATA`.
     */
    sourceEndpointEngineName?: pulumi.Input<string>;
    /**
     * The ID of source instance.
     */
    sourceEndpointInstanceId?: pulumi.Input<string>;
    /**
     * The type of source instance. Valid values: `CEN`, `DG`, `DISTRIBUTED_DMSLOGICDB`, `ECS`, `EXPRESS`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
     */
    sourceEndpointInstanceType?: pulumi.Input<string>;
    /**
     * The ip of source endpoint.
     */
    sourceEndpointIp?: pulumi.Input<string>;
    /**
     * The SID of Oracle database.
     */
    sourceEndpointOracleSid?: pulumi.Input<string>;
    /**
     * The Alibaba Cloud account ID to which the source instance belongs.
     */
    sourceEndpointOwnerId?: pulumi.Input<string>;
    /**
     * The password of database account.
     */
    sourceEndpointPassword?: pulumi.Input<string>;
    /**
     * The port of source endpoint.
     */
    sourceEndpointPort?: pulumi.Input<string>;
    /**
     * The region of source instance.
     */
    sourceEndpointRegion?: pulumi.Input<string>;
    /**
     * The name of the role configured for the cloud account to which the source instance belongs.
     */
    sourceEndpointRole?: pulumi.Input<string>;
    /**
     * The username of database account.
     */
    sourceEndpointUserName?: pulumi.Input<string>;
    /**
     * The status of the resource. Valid values: `Migrating`, `Suspending`. You can suspend the task by specifying `Suspending` and start the task by specifying `Migrating`.
     */
    status?: pulumi.Input<string>;
    /**
     * Whether to perform a database table structure to migrate.
     */
    structureInitialization?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MigrationJob resource.
 */
export interface MigrationJobArgs {
    /**
     * Start time in Unix timestamp format.
     */
    checkpoint?: pulumi.Input<string>;
    /**
     * Whether to execute DTS supports schema migration.
     */
    dataInitialization: pulumi.Input<boolean>;
    /**
     * Whether to perform incremental data migration.
     */
    dataSynchronization: pulumi.Input<boolean>;
    /**
     * Migration object, in the format of JSON strings. For detailed definition instructions, please refer to [the description of migration, migration or subscription objects](https://help.aliyun.com/document_detail/209545.html).
     */
    dbList: pulumi.Input<string>;
    /**
     * The name of migrate the database.
     */
    destinationEndpointDatabaseName?: pulumi.Input<string>;
    /**
     * The type of destination database. Valid values: `ADS`, `ADB30`, `AS400`, `DATAHUB`, `DB2`, `GREENPLUM`, `KAFKA`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `PostgreSQL`.
     */
    destinationEndpointEngineName: pulumi.Input<string>;
    /**
     * The ID of destination instance.
     */
    destinationEndpointInstanceId?: pulumi.Input<string>;
    /**
     * The type of destination instance. Valid values: `ADS`, `CEN`, `DATAHUB`, `DG`, `ECS`, `EXPRESS`, `GREENPLUM`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
     */
    destinationEndpointInstanceType: pulumi.Input<string>;
    /**
     * The ip of source endpoint.
     */
    destinationEndpointIp?: pulumi.Input<string>;
    /**
     * The SID of Oracle database.
     */
    destinationEndpointOracleSid?: pulumi.Input<string>;
    /**
     * The password of database account.
     */
    destinationEndpointPassword?: pulumi.Input<string>;
    /**
     * The port of source endpoint.
     */
    destinationEndpointPort?: pulumi.Input<string>;
    /**
     * The region of destination instance.
     */
    destinationEndpointRegion?: pulumi.Input<string>;
    /**
     * The username of database account.
     */
    destinationEndpointUserName?: pulumi.Input<string>;
    /**
     * The Migration instance ID. The ID of `alicloud.dts.MigrationInstance`.
     */
    dtsInstanceId: pulumi.Input<string>;
    /**
     * The name of migration job.
     */
    dtsJobName?: pulumi.Input<string>;
    /**
     * The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
     */
    instanceClass?: pulumi.Input<string>;
    /**
     * The name of migrate the database.
     */
    sourceEndpointDatabaseName?: pulumi.Input<string>;
    /**
     * The type of source database. Valid values: `AS400`, `DB2`, `DMSPOLARDB`, `HBASE`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `POSTGRESQL`, `TERADATA`.
     */
    sourceEndpointEngineName: pulumi.Input<string>;
    /**
     * The ID of source instance.
     */
    sourceEndpointInstanceId?: pulumi.Input<string>;
    /**
     * The type of source instance. Valid values: `CEN`, `DG`, `DISTRIBUTED_DMSLOGICDB`, `ECS`, `EXPRESS`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
     */
    sourceEndpointInstanceType: pulumi.Input<string>;
    /**
     * The ip of source endpoint.
     */
    sourceEndpointIp?: pulumi.Input<string>;
    /**
     * The SID of Oracle database.
     */
    sourceEndpointOracleSid?: pulumi.Input<string>;
    /**
     * The Alibaba Cloud account ID to which the source instance belongs.
     */
    sourceEndpointOwnerId?: pulumi.Input<string>;
    /**
     * The password of database account.
     */
    sourceEndpointPassword?: pulumi.Input<string>;
    /**
     * The port of source endpoint.
     */
    sourceEndpointPort?: pulumi.Input<string>;
    /**
     * The region of source instance.
     */
    sourceEndpointRegion?: pulumi.Input<string>;
    /**
     * The name of the role configured for the cloud account to which the source instance belongs.
     */
    sourceEndpointRole?: pulumi.Input<string>;
    /**
     * The username of database account.
     */
    sourceEndpointUserName?: pulumi.Input<string>;
    /**
     * The status of the resource. Valid values: `Migrating`, `Suspending`. You can suspend the task by specifying `Suspending` and start the task by specifying `Migrating`.
     */
    status?: pulumi.Input<string>;
    /**
     * Whether to perform a database table structure to migrate.
     */
    structureInitialization: pulumi.Input<boolean>;
}
