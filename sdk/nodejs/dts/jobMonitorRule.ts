// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a DTS Job Monitor Rule resource.
 *
 * For information about DTS Job Monitor Rule and how to use it, see [What is Job Monitor Rule](https://www.alibabacloud.com/help/en/dts/developer-reference/api-createjobmonitorrule).
 *
 * > **NOTE:** Available since v1.134.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const example = alicloud.getRegions({
 *     current: true,
 * });
 * const exampleGetZones = alicloud.rds.getZones({
 *     engine: "MySQL",
 *     engineVersion: "8.0",
 *     instanceChargeType: "PostPaid",
 *     category: "Basic",
 *     dbInstanceStorageType: "cloud_essd",
 * });
 * const exampleGetInstanceClasses = exampleGetZones.then(exampleGetZones => alicloud.rds.getInstanceClasses({
 *     zoneId: exampleGetZones.zones?.[0]?.id,
 *     engine: "MySQL",
 *     engineVersion: "8.0",
 *     instanceChargeType: "PostPaid",
 *     category: "Basic",
 *     dbInstanceStorageType: "cloud_essd",
 * }));
 * const exampleNetwork = new alicloud.vpc.Network("example", {
 *     vpcName: name,
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const exampleSwitch = new alicloud.vpc.Switch("example", {
 *     vpcId: exampleNetwork.id,
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: exampleGetZones.then(exampleGetZones => exampleGetZones.zones?.[0]?.id),
 *     vswitchName: name,
 * });
 * const exampleSecurityGroup = new alicloud.ecs.SecurityGroup("example", {
 *     name: name,
 *     vpcId: exampleNetwork.id,
 * });
 * const exampleInstance: alicloud.rds.Instance[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleInstance.push(new alicloud.rds.Instance(`example-${range.value}`, {
 *         engine: "MySQL",
 *         engineVersion: "8.0",
 *         instanceType: exampleGetInstanceClasses.then(exampleGetInstanceClasses => exampleGetInstanceClasses.instanceClasses?.[0]?.instanceClass),
 *         instanceStorage: exampleGetInstanceClasses.then(exampleGetInstanceClasses => exampleGetInstanceClasses.instanceClasses?.[0]?.storageRange?.min),
 *         instanceChargeType: "Postpaid",
 *         instanceName: std.format({
 *             input: `${name}_%d`,
 *             args: [range.value + 1],
 *         }).then(invoke => invoke.result),
 *         vswitchId: exampleSwitch.id,
 *         monitoringPeriod: 60,
 *         dbInstanceStorageType: "cloud_essd",
 *         securityGroupIds: [exampleSecurityGroup.id],
 *     }));
 * }
 * const exampleRdsAccount: alicloud.rds.RdsAccount[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleRdsAccount.push(new alicloud.rds.RdsAccount(`example-${range.value}`, {
 *         dbInstanceId: exampleInstance[range.value].id,
 *         accountName: std.format({
 *             input: "example_name_%d",
 *             args: [range.value + 1],
 *         }).then(invoke => invoke.result),
 *         accountPassword: std.format({
 *             input: "example_password_%d",
 *             args: [range.value + 1],
 *         }).then(invoke => invoke.result),
 *     }));
 * }
 * const exampleDatabase: alicloud.rds.Database[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleDatabase.push(new alicloud.rds.Database(`example-${range.value}`, {
 *         instanceId: exampleInstance[range.value].id,
 *         name: std.format({
 *             input: `${name}_%d`,
 *             args: [range.value + 1],
 *         }).then(invoke => invoke.result),
 *     }));
 * }
 * const exampleAccountPrivilege: alicloud.rds.AccountPrivilege[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleAccountPrivilege.push(new alicloud.rds.AccountPrivilege(`example-${range.value}`, {
 *         instanceId: exampleInstance[range.value].id,
 *         accountName: exampleRdsAccount[range.value].name,
 *         privilege: "ReadWrite",
 *         dbNames: [exampleDatabase[range.value].name],
 *     }));
 * }
 * const exampleMigrationInstance = new alicloud.dts.MigrationInstance("example", {
 *     paymentType: "PayAsYouGo",
 *     sourceEndpointEngineName: "MySQL",
 *     sourceEndpointRegion: example.then(example => example.regions?.[0]?.id),
 *     destinationEndpointEngineName: "MySQL",
 *     destinationEndpointRegion: example.then(example => example.regions?.[0]?.id),
 *     instanceClass: "small",
 *     syncArchitecture: "oneway",
 * });
 * const exampleMigrationJob = new alicloud.dts.MigrationJob("example", {
 *     dtsInstanceId: exampleMigrationInstance.id,
 *     dtsJobName: name,
 *     sourceEndpointInstanceType: "RDS",
 *     sourceEndpointInstanceId: exampleAccountPrivilege[0].instanceId,
 *     sourceEndpointEngineName: "MySQL",
 *     sourceEndpointRegion: example.then(example => example.regions?.[0]?.id),
 *     sourceEndpointUserName: exampleRdsAccount[0].accountName,
 *     sourceEndpointPassword: exampleRdsAccount[0].accountPassword,
 *     destinationEndpointInstanceType: "RDS",
 *     destinationEndpointInstanceId: exampleAccountPrivilege[1].instanceId,
 *     destinationEndpointEngineName: "MySQL",
 *     destinationEndpointRegion: example.then(example => example.regions?.[0]?.id),
 *     destinationEndpointUserName: exampleRdsAccount[1].accountName,
 *     destinationEndpointPassword: exampleRdsAccount[1].accountPassword,
 *     dbList: pulumi.jsonStringify(pulumi.all([exampleDatabase[0].name, exampleDatabase[1].name]).apply(([exampleDatabaseName, exampleDatabaseName1]) => {
 *         [exampleDatabaseName]: {
 *             name: exampleDatabaseName1,
 *             all: true,
 *         },
 *     })),
 *     structureInitialization: true,
 *     dataInitialization: true,
 *     dataSynchronization: true,
 *     status: "Migrating",
 * });
 * const exampleJobMonitorRule = new alicloud.dts.JobMonitorRule("example", {
 *     dtsJobId: exampleMigrationJob.id,
 *     type: "delay",
 * });
 * ```
 *
 * ## Import
 *
 * DTS Job Monitor Rule can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:dts/jobMonitorRule:JobMonitorRule example <dts_job_id>
 * ```
 */
export class JobMonitorRule extends pulumi.CustomResource {
    /**
     * Get an existing JobMonitorRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobMonitorRuleState, opts?: pulumi.CustomResourceOptions): JobMonitorRule {
        return new JobMonitorRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:dts/jobMonitorRule:JobMonitorRule';

    /**
     * Returns true if the given object is an instance of JobMonitorRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JobMonitorRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JobMonitorRule.__pulumiType;
    }

    /**
     * Trigger delay alarm threshold, which is measured in seconds.
     */
    public readonly delayRuleTime!: pulumi.Output<string>;
    /**
     * Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
     */
    public readonly dtsJobId!: pulumi.Output<string>;
    /**
     * The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
     */
    public readonly phone!: pulumi.Output<string | undefined>;
    /**
     * Whether to enable monitoring rules, valid values: `Y`, `N`.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a JobMonitorRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobMonitorRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobMonitorRuleArgs | JobMonitorRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JobMonitorRuleState | undefined;
            resourceInputs["delayRuleTime"] = state ? state.delayRuleTime : undefined;
            resourceInputs["dtsJobId"] = state ? state.dtsJobId : undefined;
            resourceInputs["phone"] = state ? state.phone : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as JobMonitorRuleArgs | undefined;
            if ((!args || args.dtsJobId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dtsJobId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["delayRuleTime"] = args ? args.delayRuleTime : undefined;
            resourceInputs["dtsJobId"] = args ? args.dtsJobId : undefined;
            resourceInputs["phone"] = args ? args.phone : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JobMonitorRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering JobMonitorRule resources.
 */
export interface JobMonitorRuleState {
    /**
     * Trigger delay alarm threshold, which is measured in seconds.
     */
    delayRuleTime?: pulumi.Input<string>;
    /**
     * Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
     */
    dtsJobId?: pulumi.Input<string>;
    /**
     * The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
     */
    phone?: pulumi.Input<string>;
    /**
     * Whether to enable monitoring rules, valid values: `Y`, `N`.
     */
    state?: pulumi.Input<string>;
    /**
     * Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JobMonitorRule resource.
 */
export interface JobMonitorRuleArgs {
    /**
     * Trigger delay alarm threshold, which is measured in seconds.
     */
    delayRuleTime?: pulumi.Input<string>;
    /**
     * Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
     */
    dtsJobId: pulumi.Input<string>;
    /**
     * The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
     */
    phone?: pulumi.Input<string>;
    /**
     * Whether to enable monitoring rules, valid values: `Y`, `N`.
     */
    state?: pulumi.Input<string>;
    /**
     * Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
     */
    type: pulumi.Input<string>;
}
