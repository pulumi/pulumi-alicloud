// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a DTS Consumer Channel resource.
 *
 * For information about DTS Consumer Channel and how to use it, see [What is Consumer Channel](https://www.alibabacloud.com/help/en/doc-detail/264593.htm).
 *
 * > **NOTE:** Available in v1.146.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tftestdts";
 * const creation = config.get("creation") || "Rds";
 * const defaultZones = alicloud.getZones({
 *     availableResourceCreation: creation,
 * });
 * const defaultNetworks = alicloud.vpc.getNetworks({
 *     nameRegex: "default-NODELETING",
 * });
 * const defaultSwitches = Promise.all([defaultNetworks, defaultZones]).then(([defaultNetworks, defaultZones]) => alicloud.vpc.getSwitches({
 *     vpcId: defaultNetworks.ids?[0],
 *     zoneId: defaultZones.zones?[0]?.id,
 * }));
 * const instance = new alicloud.rds.Instance("instance", {
 *     engine: "MySQL",
 *     engineVersion: "5.6",
 *     instanceType: "rds.mysql.s1.small",
 *     instanceStorage: 10,
 *     vswitchId: defaultSwitches.then(defaultSwitches => defaultSwitches.ids?[0]),
 *     instanceName: name,
 * });
 * const db: alicloud.rds.Database[];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     db.push(new alicloud.rds.Database(`db-${range.value}`, {
 *         instanceId: instance.id,
 *         description: "from terraform",
 *     }));
 * }
 * const account = new alicloud.rds.Account("account", {
 *     dbInstanceId: instance.id,
 *     accountName: "tftestprivilege",
 *     accountPassword: "Test12345",
 *     accountDescription: "from terraform",
 * });
 * const privilege = new alicloud.rds.AccountPrivilege("privilege", {
 *     instanceId: instance.id,
 *     accountName: account.name,
 *     privilege: "ReadWrite",
 *     dbNames: db.map(__item => __item.name),
 * });
 * const defaultSubscriptionJob = new alicloud.dts.SubscriptionJob("defaultSubscriptionJob", {
 *     dtsJobName: name,
 *     paymentType: "PayAsYouGo",
 *     sourceEndpointEngineName: "MySQL",
 *     sourceEndpointRegion: "cn-hangzhou",
 *     sourceEndpointInstanceType: "RDS",
 *     sourceEndpointInstanceId: instance.id,
 *     sourceEndpointDatabaseName: "tfaccountpri_0",
 *     sourceEndpointUserName: "tftestprivilege",
 *     sourceEndpointPassword: "Test12345",
 *     subscriptionInstanceNetworkType: "vpc",
 *     dbList: "        {\"dtstestdata\": {\"name\": \"tfaccountpri_0\", \"all\": true}}\n",
 *     subscriptionInstanceVpcId: defaultNetworks.then(defaultNetworks => defaultNetworks.ids?[0]),
 *     subscriptionInstanceVswitchId: defaultSwitches.then(defaultSwitches => defaultSwitches.ids?[0]),
 *     status: "Normal",
 * });
 * const defaultConsumerChannel = new alicloud.dts.ConsumerChannel("defaultConsumerChannel", {
 *     dtsInstanceId: defaultSubscriptionJob.dtsInstanceId,
 *     consumerGroupName: name,
 *     consumerGroupUserName: name,
 *     consumerGroupPassword: "tftestAcc123",
 * });
 * ```
 *
 * ## Import
 *
 * DTS Consumer Channel can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:dts/consumerChannel:ConsumerChannel example <dts_instance_id>:<consumer_group_id>
 * ```
 */
export class ConsumerChannel extends pulumi.CustomResource {
    /**
     * Get an existing ConsumerChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsumerChannelState, opts?: pulumi.CustomResourceOptions): ConsumerChannel {
        return new ConsumerChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:dts/consumerChannel:ConsumerChannel';

    /**
     * Returns true if the given object is an instance of ConsumerChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsumerChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsumerChannel.__pulumiType;
    }

    /**
     * The ID of the consumer group.
     */
    public /*out*/ readonly consumerGroupId!: pulumi.Output<string>;
    /**
     * The name of the consumer group.
     */
    public readonly consumerGroupName!: pulumi.Output<string>;
    /**
     * The password of the consumer group account. The length of the `consumerGroupPassword` is limited to `8` to `32` characters. It can contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
     */
    public readonly consumerGroupPassword!: pulumi.Output<string>;
    /**
     * The username of the consumer group. The length of the `consumerGroupUserName` is limited to `1` to `16` characters. It can contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (_).
     */
    public readonly consumerGroupUserName!: pulumi.Output<string>;
    /**
     * The ID of the subscription instance.
     */
    public readonly dtsInstanceId!: pulumi.Output<string>;

    /**
     * Create a ConsumerChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsumerChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsumerChannelArgs | ConsumerChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConsumerChannelState | undefined;
            resourceInputs["consumerGroupId"] = state ? state.consumerGroupId : undefined;
            resourceInputs["consumerGroupName"] = state ? state.consumerGroupName : undefined;
            resourceInputs["consumerGroupPassword"] = state ? state.consumerGroupPassword : undefined;
            resourceInputs["consumerGroupUserName"] = state ? state.consumerGroupUserName : undefined;
            resourceInputs["dtsInstanceId"] = state ? state.dtsInstanceId : undefined;
        } else {
            const args = argsOrState as ConsumerChannelArgs | undefined;
            if ((!args || args.consumerGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerGroupName'");
            }
            if ((!args || args.consumerGroupPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerGroupPassword'");
            }
            if ((!args || args.consumerGroupUserName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerGroupUserName'");
            }
            if ((!args || args.dtsInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dtsInstanceId'");
            }
            resourceInputs["consumerGroupName"] = args ? args.consumerGroupName : undefined;
            resourceInputs["consumerGroupPassword"] = args ? args.consumerGroupPassword : undefined;
            resourceInputs["consumerGroupUserName"] = args ? args.consumerGroupUserName : undefined;
            resourceInputs["dtsInstanceId"] = args ? args.dtsInstanceId : undefined;
            resourceInputs["consumerGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConsumerChannel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConsumerChannel resources.
 */
export interface ConsumerChannelState {
    /**
     * The ID of the consumer group.
     */
    consumerGroupId?: pulumi.Input<string>;
    /**
     * The name of the consumer group.
     */
    consumerGroupName?: pulumi.Input<string>;
    /**
     * The password of the consumer group account. The length of the `consumerGroupPassword` is limited to `8` to `32` characters. It can contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
     */
    consumerGroupPassword?: pulumi.Input<string>;
    /**
     * The username of the consumer group. The length of the `consumerGroupUserName` is limited to `1` to `16` characters. It can contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (_).
     */
    consumerGroupUserName?: pulumi.Input<string>;
    /**
     * The ID of the subscription instance.
     */
    dtsInstanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConsumerChannel resource.
 */
export interface ConsumerChannelArgs {
    /**
     * The name of the consumer group.
     */
    consumerGroupName: pulumi.Input<string>;
    /**
     * The password of the consumer group account. The length of the `consumerGroupPassword` is limited to `8` to `32` characters. It can contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
     */
    consumerGroupPassword: pulumi.Input<string>;
    /**
     * The username of the consumer group. The length of the `consumerGroupUserName` is limited to `1` to `16` characters. It can contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (_).
     */
    consumerGroupUserName: pulumi.Input<string>;
    /**
     * The ID of the subscription instance.
     */
    dtsInstanceId: pulumi.Input<string>;
}
