// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Aligreen Keyword Lib resource.
 *
 * Keyword library for text detection.
 *
 * For information about Aligreen Keyword Lib and how to use it, see [What is Keyword Lib](https://next.api.alibabacloud.com/document/Green/2017-08-23/CreateKeywordLib).
 *
 * > **NOTE:** Available since v1.228.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultMn8sVK = new alicloud.aligreen.BizType("defaultMn8sVK", {
 *     bizTypeName: `${name}${_default.result}`,
 *     citeTemplate: true,
 *     industryInfo: "社交-注册信息-昵称",
 * });
 * const defaultKeywordLib = new alicloud.aligreen.KeywordLib("default", {
 *     category: "BLACK",
 *     resourceType: "TEXT",
 *     libType: "textKeyword",
 *     keywordLibName: name,
 *     matchMode: "fuzzy",
 *     language: "cn",
 *     bizTypes: ["example_007"],
 *     lang: "cn",
 *     enable: true,
 * });
 * ```
 *
 * ## Import
 *
 * Aligreen Keyword Lib can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:aligreen/keywordLib:KeywordLib example <id>
 * ```
 */
export class KeywordLib extends pulumi.CustomResource {
    /**
     * Get an existing KeywordLib resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeywordLibState, opts?: pulumi.CustomResourceOptions): KeywordLib {
        return new KeywordLib(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:aligreen/keywordLib:KeywordLib';

    /**
     * Returns true if the given object is an instance of KeywordLib.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeywordLib {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeywordLib.__pulumiType;
    }

    /**
     * The business scenario. Example:["bizTypeA","bizTypeB"]
     */
    declare public readonly bizTypes: pulumi.Output<string[] | undefined>;
    /**
     * The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
     */
    declare public readonly category: pulumi.Output<string>;
    /**
     * Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
     */
    declare public readonly enable: pulumi.Output<boolean>;
    /**
     * The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
     */
    declare public readonly keywordLibName: pulumi.Output<string>;
    /**
     * Language.
     */
    declare public readonly lang: pulumi.Output<string | undefined>;
    /**
     * Language used by the text Library
     */
    declare public readonly language: pulumi.Output<string>;
    /**
     * The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
     */
    declare public readonly libType: pulumi.Output<string>;
    /**
     * The matching method. Valid values:fuzzy: fuzzy match precise: exact match
     */
    declare public readonly matchMode: pulumi.Output<string>;
    /**
     * The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
     */
    declare public readonly resourceType: pulumi.Output<string>;

    /**
     * Create a KeywordLib resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeywordLibArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeywordLibArgs | KeywordLibState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeywordLibState | undefined;
            resourceInputs["bizTypes"] = state?.bizTypes;
            resourceInputs["category"] = state?.category;
            resourceInputs["enable"] = state?.enable;
            resourceInputs["keywordLibName"] = state?.keywordLibName;
            resourceInputs["lang"] = state?.lang;
            resourceInputs["language"] = state?.language;
            resourceInputs["libType"] = state?.libType;
            resourceInputs["matchMode"] = state?.matchMode;
            resourceInputs["resourceType"] = state?.resourceType;
        } else {
            const args = argsOrState as KeywordLibArgs | undefined;
            if (args?.keywordLibName === undefined && !opts.urn) {
                throw new Error("Missing required property 'keywordLibName'");
            }
            if (args?.resourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["bizTypes"] = args?.bizTypes;
            resourceInputs["category"] = args?.category;
            resourceInputs["enable"] = args?.enable;
            resourceInputs["keywordLibName"] = args?.keywordLibName;
            resourceInputs["lang"] = args?.lang;
            resourceInputs["language"] = args?.language;
            resourceInputs["libType"] = args?.libType;
            resourceInputs["matchMode"] = args?.matchMode;
            resourceInputs["resourceType"] = args?.resourceType;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeywordLib.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeywordLib resources.
 */
export interface KeywordLibState {
    /**
     * The business scenario. Example:["bizTypeA","bizTypeB"]
     */
    bizTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
     */
    category?: pulumi.Input<string>;
    /**
     * Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
     */
    keywordLibName?: pulumi.Input<string>;
    /**
     * Language.
     */
    lang?: pulumi.Input<string>;
    /**
     * Language used by the text Library
     */
    language?: pulumi.Input<string>;
    /**
     * The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
     */
    libType?: pulumi.Input<string>;
    /**
     * The matching method. Valid values:fuzzy: fuzzy match precise: exact match
     */
    matchMode?: pulumi.Input<string>;
    /**
     * The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
     */
    resourceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeywordLib resource.
 */
export interface KeywordLibArgs {
    /**
     * The business scenario. Example:["bizTypeA","bizTypeB"]
     */
    bizTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
     */
    category?: pulumi.Input<string>;
    /**
     * Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
     */
    keywordLibName: pulumi.Input<string>;
    /**
     * Language.
     */
    lang?: pulumi.Input<string>;
    /**
     * Language used by the text Library
     */
    language?: pulumi.Input<string>;
    /**
     * The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
     */
    libType?: pulumi.Input<string>;
    /**
     * The matching method. Valid values:fuzzy: fuzzy match precise: exact match
     */
    matchMode?: pulumi.Input<string>;
    /**
     * The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
     */
    resourceType: pulumi.Input<string>;
}
