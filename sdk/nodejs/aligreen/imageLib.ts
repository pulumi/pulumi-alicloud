// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Aligreen Image Lib resource.
 *
 * Image library for image detection.
 *
 * For information about Aligreen Image Lib and how to use it, see [What is Image Lib](https://next.api.alibabacloud.com/document/Green/2017-08-23/CreateImageLib).
 *
 * > **NOTE:** Available since v1.228.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform";
 * const defaultUalunB = new alicloud.aligreen.BizType("defaultUalunB", {bizTypeName: name});
 * const _default = new alicloud.aligreen.ImageLib("default", {
 *     category: "BLACK",
 *     enable: true,
 *     scene: "PORN",
 *     imageLibName: name,
 *     bizTypes: [defaultUalunB.bizTypeName],
 * });
 * ```
 *
 * ## Import
 *
 * Aligreen Image Lib can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:aligreen/imageLib:ImageLib example <id>
 * ```
 */
export class ImageLib extends pulumi.CustomResource {
    /**
     * Get an existing ImageLib resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageLibState, opts?: pulumi.CustomResourceOptions): ImageLib {
        return new ImageLib(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:aligreen/imageLib:ImageLib';

    /**
     * Returns true if the given object is an instance of ImageLib.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageLib {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageLib.__pulumiType;
    }

    /**
     * List of business scenarios. For example: ["bizTypeA", "bizTypeB", "bizTypeC"]
     */
    declare public readonly bizTypes: pulumi.Output<string[] | undefined>;
    /**
     * The category of the image library. Valid values: BLACK: a blacklist, WHITE: a whitelist, REVIEW: a review list
     */
    declare public readonly category: pulumi.Output<string>;
    /**
     * Specifies whether to enable the image library. Valid values: true: Enable the image library. This is the default value. false: Disable the image library.
     */
    declare public readonly enable: pulumi.Output<boolean>;
    /**
     * The name of the image library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
     */
    declare public readonly imageLibName: pulumi.Output<string>;
    /**
     * The moderation scenario to which the custom image library applies. Valid values: PORN: pornography detection, AD: ad detection, ILLEGAL: terrorist content detection
     */
    declare public readonly scene: pulumi.Output<string>;

    /**
     * Create a ImageLib resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageLibArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageLibArgs | ImageLibState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageLibState | undefined;
            resourceInputs["bizTypes"] = state?.bizTypes;
            resourceInputs["category"] = state?.category;
            resourceInputs["enable"] = state?.enable;
            resourceInputs["imageLibName"] = state?.imageLibName;
            resourceInputs["scene"] = state?.scene;
        } else {
            const args = argsOrState as ImageLibArgs | undefined;
            if (args?.category === undefined && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if (args?.imageLibName === undefined && !opts.urn) {
                throw new Error("Missing required property 'imageLibName'");
            }
            if (args?.scene === undefined && !opts.urn) {
                throw new Error("Missing required property 'scene'");
            }
            resourceInputs["bizTypes"] = args?.bizTypes;
            resourceInputs["category"] = args?.category;
            resourceInputs["enable"] = args?.enable;
            resourceInputs["imageLibName"] = args?.imageLibName;
            resourceInputs["scene"] = args?.scene;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageLib.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImageLib resources.
 */
export interface ImageLibState {
    /**
     * List of business scenarios. For example: ["bizTypeA", "bizTypeB", "bizTypeC"]
     */
    bizTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The category of the image library. Valid values: BLACK: a blacklist, WHITE: a whitelist, REVIEW: a review list
     */
    category?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the image library. Valid values: true: Enable the image library. This is the default value. false: Disable the image library.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * The name of the image library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
     */
    imageLibName?: pulumi.Input<string>;
    /**
     * The moderation scenario to which the custom image library applies. Valid values: PORN: pornography detection, AD: ad detection, ILLEGAL: terrorist content detection
     */
    scene?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImageLib resource.
 */
export interface ImageLibArgs {
    /**
     * List of business scenarios. For example: ["bizTypeA", "bizTypeB", "bizTypeC"]
     */
    bizTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The category of the image library. Valid values: BLACK: a blacklist, WHITE: a whitelist, REVIEW: a review list
     */
    category: pulumi.Input<string>;
    /**
     * Specifies whether to enable the image library. Valid values: true: Enable the image library. This is the default value. false: Disable the image library.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * The name of the image library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
     */
    imageLibName: pulumi.Input<string>;
    /**
     * The moderation scenario to which the custom image library applies. Valid values: PORN: pornography detection, AD: ad detection, ILLEGAL: terrorist content detection
     */
    scene: pulumi.Input<string>;
}
