// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * Aligreen Oss Stock Task can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:aligreen/ossStockTask:OssStockTask example <id>
 * ```
 */
export class OssStockTask extends pulumi.CustomResource {
    /**
     * Get an existing OssStockTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OssStockTaskState, opts?: pulumi.CustomResourceOptions): OssStockTask {
        return new OssStockTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:aligreen/ossStockTask:OssStockTask';

    /**
     * Returns true if the given object is an instance of OssStockTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OssStockTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OssStockTask.__pulumiType;
    }

    /**
     * Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
     */
    declare public readonly audioAntispamFreezeConfig: pulumi.Output<string | undefined>;
    /**
     * Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     */
    declare public readonly audioAutoFreezeOpened: pulumi.Output<boolean | undefined>;
    /**
     * Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
     */
    declare public readonly audioMaxSize: pulumi.Output<number | undefined>;
    /**
     * oss stock scan task detect audio. true: scan audio, false: do not scan audio
     */
    declare public readonly audioOpened: pulumi.Output<boolean | undefined>;
    /**
     * The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
     */
    declare public readonly audioScanLimit: pulumi.Output<number | undefined>;
    /**
     * The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
     */
    declare public readonly audioScenes: pulumi.Output<string | undefined>;
    /**
     * Automatic freeze type. Value: acl: modify permissions, copy: Move files
     */
    declare public readonly autoFreezeType: pulumi.Output<string | undefined>;
    /**
     * Business scenarios used by the oss stock scan task
     */
    declare public readonly bizType: pulumi.Output<string | undefined>;
    /**
     * The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
     */
    declare public readonly buckets: pulumi.Output<string | undefined>;
    /**
     * The ID of the primary key of the notification message bound to the oss stock scan task.
     */
    declare public readonly callbackId: pulumi.Output<number | undefined>;
    /**
     * The end time of the file upload time range indicates the scanning of files uploaded before this time point.
     */
    declare public readonly endDate: pulumi.Output<string | undefined>;
    /**
     * Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
     */
    declare public readonly imageAdFreezeConfig: pulumi.Output<string | undefined>;
    /**
     * Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
     */
    declare public readonly imageAutoFreezeOpened: pulumi.Output<boolean | undefined>;
    /**
     * Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
     */
    declare public readonly imageLiveFreezeConfig: pulumi.Output<string | undefined>;
    /**
     * oss stock scan task detect images. true: scan images, false: do not scan images
     */
    declare public readonly imageOpened: pulumi.Output<boolean | undefined>;
    /**
     * Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
     */
    declare public readonly imagePornFreezeConfig: pulumi.Output<string | undefined>;
    /**
     * The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
     */
    declare public readonly imageScanLimit: pulumi.Output<number | undefined>;
    /**
     * The image moderation scenario included in the oss stock scan task.Valid values:
     * porn: pornography detection
     * terrorism: terrorist content detection
     * ad: ad violation detection
     * live: undesirable scene detection
     */
    declare public readonly imageScenes: pulumi.Output<string[] | undefined>;
    /**
     * The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
     */
    declare public readonly imageTerrorismFreezeConfig: pulumi.Output<string | undefined>;
    /**
     * Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
     */
    declare public readonly scanImageNoFileType: pulumi.Output<boolean | undefined>;
    /**
     * The start time of the file upload time range represents the files uploaded after scanning this time point.
     */
    declare public readonly startDate: pulumi.Output<string | undefined>;
    /**
     * The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
     */
    declare public readonly videoAdFreezeConfig: pulumi.Output<string | undefined>;
    /**
     * Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     */
    declare public readonly videoAutoFreezeOpened: pulumi.Output<boolean | undefined>;
    /**
     * Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
     */
    declare public readonly videoFrameInterval: pulumi.Output<number | undefined>;
    /**
     * Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
     */
    declare public readonly videoLiveFreezeConfig: pulumi.Output<string | undefined>;
    /**
     * A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
     */
    declare public readonly videoMaxFrames: pulumi.Output<number | undefined>;
    /**
     * Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
     */
    declare public readonly videoMaxSize: pulumi.Output<number | undefined>;
    /**
     * oss stock scan task detect video. true: scan video, false: do not scan video
     */
    declare public readonly videoOpened: pulumi.Output<boolean | undefined>;
    /**
     * Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
     */
    declare public readonly videoPornFreezeConfig: pulumi.Output<string | undefined>;
    /**
     * The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
     */
    declare public readonly videoScanLimit: pulumi.Output<number | undefined>;
    /**
     * The video detection scenarios included in the oss stock scan task.
     * porn: pornography detection
     * terrorism: terrorist content detection
     * ad: ad violation detection
     * live: undesirable scene detection
     * antispam: Video voice antispam
     */
    declare public readonly videoScenes: pulumi.Output<string | undefined>;
    /**
     * The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
     */
    declare public readonly videoTerrorismFreezeConfig: pulumi.Output<string | undefined>;
    /**
     * Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
     */
    declare public readonly videoVoiceAntispamFreezeConfig: pulumi.Output<string | undefined>;

    /**
     * Create a OssStockTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OssStockTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OssStockTaskArgs | OssStockTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OssStockTaskState | undefined;
            resourceInputs["audioAntispamFreezeConfig"] = state?.audioAntispamFreezeConfig;
            resourceInputs["audioAutoFreezeOpened"] = state?.audioAutoFreezeOpened;
            resourceInputs["audioMaxSize"] = state?.audioMaxSize;
            resourceInputs["audioOpened"] = state?.audioOpened;
            resourceInputs["audioScanLimit"] = state?.audioScanLimit;
            resourceInputs["audioScenes"] = state?.audioScenes;
            resourceInputs["autoFreezeType"] = state?.autoFreezeType;
            resourceInputs["bizType"] = state?.bizType;
            resourceInputs["buckets"] = state?.buckets;
            resourceInputs["callbackId"] = state?.callbackId;
            resourceInputs["endDate"] = state?.endDate;
            resourceInputs["imageAdFreezeConfig"] = state?.imageAdFreezeConfig;
            resourceInputs["imageAutoFreezeOpened"] = state?.imageAutoFreezeOpened;
            resourceInputs["imageLiveFreezeConfig"] = state?.imageLiveFreezeConfig;
            resourceInputs["imageOpened"] = state?.imageOpened;
            resourceInputs["imagePornFreezeConfig"] = state?.imagePornFreezeConfig;
            resourceInputs["imageScanLimit"] = state?.imageScanLimit;
            resourceInputs["imageScenes"] = state?.imageScenes;
            resourceInputs["imageTerrorismFreezeConfig"] = state?.imageTerrorismFreezeConfig;
            resourceInputs["scanImageNoFileType"] = state?.scanImageNoFileType;
            resourceInputs["startDate"] = state?.startDate;
            resourceInputs["videoAdFreezeConfig"] = state?.videoAdFreezeConfig;
            resourceInputs["videoAutoFreezeOpened"] = state?.videoAutoFreezeOpened;
            resourceInputs["videoFrameInterval"] = state?.videoFrameInterval;
            resourceInputs["videoLiveFreezeConfig"] = state?.videoLiveFreezeConfig;
            resourceInputs["videoMaxFrames"] = state?.videoMaxFrames;
            resourceInputs["videoMaxSize"] = state?.videoMaxSize;
            resourceInputs["videoOpened"] = state?.videoOpened;
            resourceInputs["videoPornFreezeConfig"] = state?.videoPornFreezeConfig;
            resourceInputs["videoScanLimit"] = state?.videoScanLimit;
            resourceInputs["videoScenes"] = state?.videoScenes;
            resourceInputs["videoTerrorismFreezeConfig"] = state?.videoTerrorismFreezeConfig;
            resourceInputs["videoVoiceAntispamFreezeConfig"] = state?.videoVoiceAntispamFreezeConfig;
        } else {
            const args = argsOrState as OssStockTaskArgs | undefined;
            resourceInputs["audioAntispamFreezeConfig"] = args?.audioAntispamFreezeConfig;
            resourceInputs["audioAutoFreezeOpened"] = args?.audioAutoFreezeOpened;
            resourceInputs["audioMaxSize"] = args?.audioMaxSize;
            resourceInputs["audioOpened"] = args?.audioOpened;
            resourceInputs["audioScanLimit"] = args?.audioScanLimit;
            resourceInputs["audioScenes"] = args?.audioScenes;
            resourceInputs["autoFreezeType"] = args?.autoFreezeType;
            resourceInputs["bizType"] = args?.bizType;
            resourceInputs["buckets"] = args?.buckets;
            resourceInputs["callbackId"] = args?.callbackId;
            resourceInputs["endDate"] = args?.endDate;
            resourceInputs["imageAdFreezeConfig"] = args?.imageAdFreezeConfig;
            resourceInputs["imageAutoFreezeOpened"] = args?.imageAutoFreezeOpened;
            resourceInputs["imageLiveFreezeConfig"] = args?.imageLiveFreezeConfig;
            resourceInputs["imageOpened"] = args?.imageOpened;
            resourceInputs["imagePornFreezeConfig"] = args?.imagePornFreezeConfig;
            resourceInputs["imageScanLimit"] = args?.imageScanLimit;
            resourceInputs["imageScenes"] = args?.imageScenes;
            resourceInputs["imageTerrorismFreezeConfig"] = args?.imageTerrorismFreezeConfig;
            resourceInputs["scanImageNoFileType"] = args?.scanImageNoFileType;
            resourceInputs["startDate"] = args?.startDate;
            resourceInputs["videoAdFreezeConfig"] = args?.videoAdFreezeConfig;
            resourceInputs["videoAutoFreezeOpened"] = args?.videoAutoFreezeOpened;
            resourceInputs["videoFrameInterval"] = args?.videoFrameInterval;
            resourceInputs["videoLiveFreezeConfig"] = args?.videoLiveFreezeConfig;
            resourceInputs["videoMaxFrames"] = args?.videoMaxFrames;
            resourceInputs["videoMaxSize"] = args?.videoMaxSize;
            resourceInputs["videoOpened"] = args?.videoOpened;
            resourceInputs["videoPornFreezeConfig"] = args?.videoPornFreezeConfig;
            resourceInputs["videoScanLimit"] = args?.videoScanLimit;
            resourceInputs["videoScenes"] = args?.videoScenes;
            resourceInputs["videoTerrorismFreezeConfig"] = args?.videoTerrorismFreezeConfig;
            resourceInputs["videoVoiceAntispamFreezeConfig"] = args?.videoVoiceAntispamFreezeConfig;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OssStockTask.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OssStockTask resources.
 */
export interface OssStockTaskState {
    /**
     * Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
     */
    audioAntispamFreezeConfig?: pulumi.Input<string>;
    /**
     * Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     */
    audioAutoFreezeOpened?: pulumi.Input<boolean>;
    /**
     * Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
     */
    audioMaxSize?: pulumi.Input<number>;
    /**
     * oss stock scan task detect audio. true: scan audio, false: do not scan audio
     */
    audioOpened?: pulumi.Input<boolean>;
    /**
     * The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
     */
    audioScanLimit?: pulumi.Input<number>;
    /**
     * The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
     */
    audioScenes?: pulumi.Input<string>;
    /**
     * Automatic freeze type. Value: acl: modify permissions, copy: Move files
     */
    autoFreezeType?: pulumi.Input<string>;
    /**
     * Business scenarios used by the oss stock scan task
     */
    bizType?: pulumi.Input<string>;
    /**
     * The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
     */
    buckets?: pulumi.Input<string>;
    /**
     * The ID of the primary key of the notification message bound to the oss stock scan task.
     */
    callbackId?: pulumi.Input<number>;
    /**
     * The end time of the file upload time range indicates the scanning of files uploaded before this time point.
     */
    endDate?: pulumi.Input<string>;
    /**
     * Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
     */
    imageAdFreezeConfig?: pulumi.Input<string>;
    /**
     * Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
     */
    imageAutoFreezeOpened?: pulumi.Input<boolean>;
    /**
     * Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
     */
    imageLiveFreezeConfig?: pulumi.Input<string>;
    /**
     * oss stock scan task detect images. true: scan images, false: do not scan images
     */
    imageOpened?: pulumi.Input<boolean>;
    /**
     * Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
     */
    imagePornFreezeConfig?: pulumi.Input<string>;
    /**
     * The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
     */
    imageScanLimit?: pulumi.Input<number>;
    /**
     * The image moderation scenario included in the oss stock scan task.Valid values:
     * porn: pornography detection
     * terrorism: terrorist content detection
     * ad: ad violation detection
     * live: undesirable scene detection
     */
    imageScenes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
     */
    imageTerrorismFreezeConfig?: pulumi.Input<string>;
    /**
     * Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
     */
    scanImageNoFileType?: pulumi.Input<boolean>;
    /**
     * The start time of the file upload time range represents the files uploaded after scanning this time point.
     */
    startDate?: pulumi.Input<string>;
    /**
     * The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
     */
    videoAdFreezeConfig?: pulumi.Input<string>;
    /**
     * Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     */
    videoAutoFreezeOpened?: pulumi.Input<boolean>;
    /**
     * Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
     */
    videoFrameInterval?: pulumi.Input<number>;
    /**
     * Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
     */
    videoLiveFreezeConfig?: pulumi.Input<string>;
    /**
     * A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
     */
    videoMaxFrames?: pulumi.Input<number>;
    /**
     * Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
     */
    videoMaxSize?: pulumi.Input<number>;
    /**
     * oss stock scan task detect video. true: scan video, false: do not scan video
     */
    videoOpened?: pulumi.Input<boolean>;
    /**
     * Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
     */
    videoPornFreezeConfig?: pulumi.Input<string>;
    /**
     * The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
     */
    videoScanLimit?: pulumi.Input<number>;
    /**
     * The video detection scenarios included in the oss stock scan task.
     * porn: pornography detection
     * terrorism: terrorist content detection
     * ad: ad violation detection
     * live: undesirable scene detection
     * antispam: Video voice antispam
     */
    videoScenes?: pulumi.Input<string>;
    /**
     * The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
     */
    videoTerrorismFreezeConfig?: pulumi.Input<string>;
    /**
     * Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
     */
    videoVoiceAntispamFreezeConfig?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OssStockTask resource.
 */
export interface OssStockTaskArgs {
    /**
     * Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
     */
    audioAntispamFreezeConfig?: pulumi.Input<string>;
    /**
     * Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     */
    audioAutoFreezeOpened?: pulumi.Input<boolean>;
    /**
     * Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
     */
    audioMaxSize?: pulumi.Input<number>;
    /**
     * oss stock scan task detect audio. true: scan audio, false: do not scan audio
     */
    audioOpened?: pulumi.Input<boolean>;
    /**
     * The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
     */
    audioScanLimit?: pulumi.Input<number>;
    /**
     * The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
     */
    audioScenes?: pulumi.Input<string>;
    /**
     * Automatic freeze type. Value: acl: modify permissions, copy: Move files
     */
    autoFreezeType?: pulumi.Input<string>;
    /**
     * Business scenarios used by the oss stock scan task
     */
    bizType?: pulumi.Input<string>;
    /**
     * The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
     */
    buckets?: pulumi.Input<string>;
    /**
     * The ID of the primary key of the notification message bound to the oss stock scan task.
     */
    callbackId?: pulumi.Input<number>;
    /**
     * The end time of the file upload time range indicates the scanning of files uploaded before this time point.
     */
    endDate?: pulumi.Input<string>;
    /**
     * Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
     */
    imageAdFreezeConfig?: pulumi.Input<string>;
    /**
     * Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
     */
    imageAutoFreezeOpened?: pulumi.Input<boolean>;
    /**
     * Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
     */
    imageLiveFreezeConfig?: pulumi.Input<string>;
    /**
     * oss stock scan task detect images. true: scan images, false: do not scan images
     */
    imageOpened?: pulumi.Input<boolean>;
    /**
     * Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
     */
    imagePornFreezeConfig?: pulumi.Input<string>;
    /**
     * The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
     */
    imageScanLimit?: pulumi.Input<number>;
    /**
     * The image moderation scenario included in the oss stock scan task.Valid values:
     * porn: pornography detection
     * terrorism: terrorist content detection
     * ad: ad violation detection
     * live: undesirable scene detection
     */
    imageScenes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
     */
    imageTerrorismFreezeConfig?: pulumi.Input<string>;
    /**
     * Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
     */
    scanImageNoFileType?: pulumi.Input<boolean>;
    /**
     * The start time of the file upload time range represents the files uploaded after scanning this time point.
     */
    startDate?: pulumi.Input<string>;
    /**
     * The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
     */
    videoAdFreezeConfig?: pulumi.Input<string>;
    /**
     * Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
     */
    videoAutoFreezeOpened?: pulumi.Input<boolean>;
    /**
     * Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
     */
    videoFrameInterval?: pulumi.Input<number>;
    /**
     * Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
     */
    videoLiveFreezeConfig?: pulumi.Input<string>;
    /**
     * A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
     */
    videoMaxFrames?: pulumi.Input<number>;
    /**
     * Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
     */
    videoMaxSize?: pulumi.Input<number>;
    /**
     * oss stock scan task detect video. true: scan video, false: do not scan video
     */
    videoOpened?: pulumi.Input<boolean>;
    /**
     * Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
     */
    videoPornFreezeConfig?: pulumi.Input<string>;
    /**
     * The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
     */
    videoScanLimit?: pulumi.Input<number>;
    /**
     * The video detection scenarios included in the oss stock scan task.
     * porn: pornography detection
     * terrorism: terrorist content detection
     * ad: ad violation detection
     * live: undesirable scene detection
     * antispam: Video voice antispam
     */
    videoScenes?: pulumi.Input<string>;
    /**
     * The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
     */
    videoTerrorismFreezeConfig?: pulumi.Input<string>;
    /**
     * Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
     */
    videoVoiceAntispamFreezeConfig?: pulumi.Input<string>;
}
