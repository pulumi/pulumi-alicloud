// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Create an EDAS k8s application.For information about EDAS K8s Application and how to use it, see [What is EDAS K8s Application](https://www.alibabacloud.com/help/en/edas/developer-reference/api-edas-2017-08-01-insertk8sapplication).
 *
 * > **NOTE:** Available since v1.105.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultGetImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_18.*64",
 *     mostRecent: true,
 *     owners: "system",
 * });
 * const defaultGetInstanceTypes = _default.then(_default => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: _default.zones?.[0]?.id,
 *     cpuCoreCount: 4,
 *     memorySize: 8,
 *     kubernetesNodeRole: "Worker",
 * }));
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 * });
 * const defaultManagedKubernetes = new alicloud.cs.ManagedKubernetes("default", {
 *     namePrefix: name,
 *     clusterSpec: "ack.pro.small",
 *     workerVswitchIds: [defaultSwitch.id],
 *     newNatGateway: true,
 *     podCidr: std.cidrsubnet({
 *         input: "10.0.0.0/8",
 *         newbits: 8,
 *         netnum: 36,
 *     }).then(invoke => invoke.result),
 *     serviceCidr: std.cidrsubnet({
 *         input: "172.16.0.0/16",
 *         newbits: 4,
 *         netnum: 7,
 *     }).then(invoke => invoke.result),
 *     slbInternetEnabled: true,
 * });
 * const defaultNodePool = new alicloud.cs.NodePool("default", {
 *     name: name,
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [defaultSwitch.id],
 *     instanceTypes: [defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     desiredSize: "2",
 * });
 * const defaultK8sCluster = new alicloud.edas.K8sCluster("default", {csClusterId: defaultNodePool.clusterId});
 * const defaultK8sApplication = new alicloud.edas.K8sApplication("default", {
 *     applicationName: name,
 *     clusterId: defaultK8sCluster.id,
 *     packageType: "FatJar",
 *     packageUrl: "http://edas-bj.oss-cn-beijing.aliyuncs.com/prod/demo/SPRING_CLOUD_PROVIDER.jar",
 *     jdk: "Open JDK 8",
 *     replicas: 2,
 *     readiness: "{\"failureThreshold\": 3,\"initialDelaySeconds\": 5,\"successThreshold\": 1,\"timeoutSeconds\": 1,\"tcpSocket\":{\"port\":18081}}",
 *     liveness: "{\"failureThreshold\": 3,\"initialDelaySeconds\": 5,\"successThreshold\": 1,\"timeoutSeconds\": 1,\"tcpSocket\":{\"port\":18081}}",
 *     applicationDescriotion: name,
 * });
 * ```
 *
 * ## Import
 *
 * EDAS k8s application can be imported as below, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:edas/k8sApplication:K8sApplication new_k8s_application application_id
 * ```
 */
export class K8sApplication extends pulumi.CustomResource {
    /**
     * Get an existing K8sApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sApplicationState, opts?: pulumi.CustomResourceOptions): K8sApplication {
        return new K8sApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:edas/k8sApplication:K8sApplication';

    /**
     * Returns true if the given object is an instance of K8sApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8sApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8sApplication.__pulumiType;
    }

    /**
     * The description of the application
     */
    declare public readonly applicationDescriotion: pulumi.Output<string | undefined>;
    /**
     * The name of the application you want to create. Must start with character,supports numbers, letters and dashes (-), supports up to 36 characters
     */
    declare public readonly applicationName: pulumi.Output<string>;
    /**
     * The ID of the alicloud container service kubernetes cluster that you want to import to. You can call the ListCluster operation to query.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * The set command, if set, will replace the startup command in the mirror when the mirror is started.
     */
    declare public readonly command: pulumi.Output<string | undefined>;
    /**
     * Used in combination with the command, the parameter of the command is a JsonArray string in the format: `[{"argument":"-c"},{"argument":"test"}]`. Among them, -c and test are two parameters that need to be set.
     */
    declare public readonly commandArgs: pulumi.Output<string[] | undefined>;
    /**
     * EDAS-Container version that the deployed package depends on. Image does not support this parameter.
     */
    declare public readonly edasContainerVersion: pulumi.Output<string | undefined>;
    /**
     * Deployment environment variables, the format must conform to the JSON object array, such as: `{"name":"x","value":"y"},{"name":"x2","value":"y2"}`, If you want to cancel the configuration, you need to set an empty JSON array "" to indicate no configuration.
     */
    declare public readonly envs: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Mirror address. When the packageType is set to 'Image', this parameter item is required.
     */
    declare public readonly imageUrl: pulumi.Output<string | undefined>;
    /**
     * Public network SLB ID. If not configured, EDAS will automatically purchase a new SLB for the user.
     * It has been deprecated, and new resource 'alicloud_edas_k8s_slb_attachment' replaces it.
     *
     * @deprecated Field 'internet_slb_id' has been deprecated, New Resource 'alicloud_edas_k8s_slb_attachment' replaces it
     */
    declare public readonly internetSlbId: pulumi.Output<string | undefined>;
    /**
     * The public network SLB front-end port, range 1~65535. It has been deprecated and new resource 'alicloud_edas_k8s_slb_attachment' replaces it.
     *
     * @deprecated Field 'internet_slb_port' has been deprecated, New Resource 'alicloud_edas_k8s_slb_attachment' replaces it
     */
    declare public readonly internetSlbPort: pulumi.Output<number | undefined>;
    /**
     * The public network SLB protocol supports TCP, HTTP and HTTPS protocols. It has been deprecated, and new resource 'alicloud_edas_k8s_slb_attachment' replaces it.
     *
     * @deprecated Field 'internet_slb_protocol' has been deprecated, New Resource 'alicloud_edas_k8s_slb_attachment' replaces it
     */
    declare public readonly internetSlbProtocol: pulumi.Output<string | undefined>;
    /**
     * The private SLB back-end port, is also the service port of the application, ranging from 1 to 65535.
     * It has been deprecated, and new resource 'alicloud_edas_k8s_slb_attachment' replaces it.
     *
     * @deprecated Field 'internet_target_port' has been deprecated, New Resource 'alicloud_edas_k8s_slb_attachment' replaces it
     */
    declare public readonly internetTargetPort: pulumi.Output<number | undefined>;
    /**
     * The JDK version that the deployed package depends on. The optional parameter values are Open JDK 7 and Open JDK 8. Image does not support this parameter.
     */
    declare public readonly jdk: pulumi.Output<string | undefined>;
    /**
     * The CPU quota of the application instance during application operation. Unit: Number of millcores, set to 0 means unlimited, similar to request_cpu.
     */
    declare public readonly limitMCpu: pulumi.Output<number | undefined>;
    /**
     * The memory limit of the application instance during application operation, unit: M.
     */
    declare public readonly limitMem: pulumi.Output<number | undefined>;
    /**
     * Container survival status monitoring, format such as: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1,"tcpSocket":{"host":"", "port":8080} }`.
     */
    declare public readonly liveness: pulumi.Output<string | undefined>;
    /**
     * The configuration of the host file mounted to the container. For example: `[{"type":"","nodePath":"/localfiles","mountPath":"/app/files"},{"type":"Directory","nodePath":"/mnt", "mountPath":"/app/storage"}]`. Among them, nodePath is the host path; mountPath is the path in the container; type is the mount type.
     */
    declare public readonly localVolume: pulumi.Output<string | undefined>;
    /**
     * The ID corresponding to the EDAS namespace, the non-default namespace must be filled in.
     */
    declare public readonly logicalRegionId: pulumi.Output<string | undefined>;
    /**
     * Mount configuration description, as a serialized JSON. For example: `[{"nasPath": "/k8s","mountPath": "/mnt"},{"nasPath": "/files","mountPath": "/app/files"}]`. Among them, nasPath refers to the file storage path; mountPath refers to the path mounted in the container.
     */
    declare public readonly mountDescs: pulumi.Output<string | undefined>;
    /**
     * The namespace of the K8s cluster, it will determine which K8s namespace your application is deployed in. The default is 'default'.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * The ID of the mounted NAS must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field exists, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
     */
    declare public readonly nasId: pulumi.Output<string | undefined>;
    /**
     * Application package type. Optional parameter values include: FatJar, WAR and Image.
     */
    declare public readonly packageType: pulumi.Output<string | undefined>;
    /**
     * The url of the package to deploy.Applications deployed through FatJar or WAR packages need to configure it.
     */
    declare public readonly packageUrl: pulumi.Output<string | undefined>;
    /**
     * The version number of the deployment package. WAR and FatJar types are required. Please customize its meaning.
     */
    declare public readonly packageVersion: pulumi.Output<string>;
    /**
     * Execute script after startup
     */
    declare public readonly postStart: pulumi.Output<string | undefined>;
    /**
     * Execute script before stopping
     */
    declare public readonly preStop: pulumi.Output<string | undefined>;
    /**
     * Container service status check. If the check fails, the traffic passing through K8s Service will not be transferred to the container. The format is: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1, "httpGet": {"path": "/consumer","port": 8080,"scheme": "HTTP","httpHeaders": [{"name": "test","value": "testvalue"} ]}}`.
     */
    declare public readonly readiness: pulumi.Output<string | undefined>;
    /**
     * Number of application instances.
     */
    declare public readonly replicas: pulumi.Output<number | undefined>;
    /**
     * When the application is created, the CPU quota of the application instance, unit: number of millcores, similar to request_cpu
     */
    declare public readonly requestsMCpu: pulumi.Output<number | undefined>;
    /**
     * When the application is created, the memory limit of the application instance, unit: M. When set to 0, it means unlimited.
     */
    declare public readonly requestsMem: pulumi.Output<number | undefined>;
    /**
     * The Tomcat version that the deployment package depends on. Applicable to Spring Cloud and Dubbo applications deployed through WAR packages. Image does not support this parameter.
     */
    declare public readonly webContainer: pulumi.Output<string | undefined>;

    /**
     * Create a K8sApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8sApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sApplicationArgs | K8sApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sApplicationState | undefined;
            resourceInputs["applicationDescriotion"] = state?.applicationDescriotion;
            resourceInputs["applicationName"] = state?.applicationName;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["command"] = state?.command;
            resourceInputs["commandArgs"] = state?.commandArgs;
            resourceInputs["edasContainerVersion"] = state?.edasContainerVersion;
            resourceInputs["envs"] = state?.envs;
            resourceInputs["imageUrl"] = state?.imageUrl;
            resourceInputs["internetSlbId"] = state?.internetSlbId;
            resourceInputs["internetSlbPort"] = state?.internetSlbPort;
            resourceInputs["internetSlbProtocol"] = state?.internetSlbProtocol;
            resourceInputs["internetTargetPort"] = state?.internetTargetPort;
            resourceInputs["jdk"] = state?.jdk;
            resourceInputs["limitMCpu"] = state?.limitMCpu;
            resourceInputs["limitMem"] = state?.limitMem;
            resourceInputs["liveness"] = state?.liveness;
            resourceInputs["localVolume"] = state?.localVolume;
            resourceInputs["logicalRegionId"] = state?.logicalRegionId;
            resourceInputs["mountDescs"] = state?.mountDescs;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["nasId"] = state?.nasId;
            resourceInputs["packageType"] = state?.packageType;
            resourceInputs["packageUrl"] = state?.packageUrl;
            resourceInputs["packageVersion"] = state?.packageVersion;
            resourceInputs["postStart"] = state?.postStart;
            resourceInputs["preStop"] = state?.preStop;
            resourceInputs["readiness"] = state?.readiness;
            resourceInputs["replicas"] = state?.replicas;
            resourceInputs["requestsMCpu"] = state?.requestsMCpu;
            resourceInputs["requestsMem"] = state?.requestsMem;
            resourceInputs["webContainer"] = state?.webContainer;
        } else {
            const args = argsOrState as K8sApplicationArgs | undefined;
            if (args?.applicationName === undefined && !opts.urn) {
                throw new Error("Missing required property 'applicationName'");
            }
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["applicationDescriotion"] = args?.applicationDescriotion;
            resourceInputs["applicationName"] = args?.applicationName;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["command"] = args?.command;
            resourceInputs["commandArgs"] = args?.commandArgs;
            resourceInputs["edasContainerVersion"] = args?.edasContainerVersion;
            resourceInputs["envs"] = args?.envs;
            resourceInputs["imageUrl"] = args?.imageUrl;
            resourceInputs["internetSlbId"] = args?.internetSlbId;
            resourceInputs["internetSlbPort"] = args?.internetSlbPort;
            resourceInputs["internetSlbProtocol"] = args?.internetSlbProtocol;
            resourceInputs["internetTargetPort"] = args?.internetTargetPort;
            resourceInputs["jdk"] = args?.jdk;
            resourceInputs["limitMCpu"] = args?.limitMCpu;
            resourceInputs["limitMem"] = args?.limitMem;
            resourceInputs["liveness"] = args?.liveness;
            resourceInputs["localVolume"] = args?.localVolume;
            resourceInputs["logicalRegionId"] = args?.logicalRegionId;
            resourceInputs["mountDescs"] = args?.mountDescs;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["nasId"] = args?.nasId;
            resourceInputs["packageType"] = args?.packageType;
            resourceInputs["packageUrl"] = args?.packageUrl;
            resourceInputs["packageVersion"] = args?.packageVersion;
            resourceInputs["postStart"] = args?.postStart;
            resourceInputs["preStop"] = args?.preStop;
            resourceInputs["readiness"] = args?.readiness;
            resourceInputs["replicas"] = args?.replicas;
            resourceInputs["requestsMCpu"] = args?.requestsMCpu;
            resourceInputs["requestsMem"] = args?.requestsMem;
            resourceInputs["webContainer"] = args?.webContainer;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8sApplication.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering K8sApplication resources.
 */
export interface K8sApplicationState {
    /**
     * The description of the application
     */
    applicationDescriotion?: pulumi.Input<string>;
    /**
     * The name of the application you want to create. Must start with character,supports numbers, letters and dashes (-), supports up to 36 characters
     */
    applicationName?: pulumi.Input<string>;
    /**
     * The ID of the alicloud container service kubernetes cluster that you want to import to. You can call the ListCluster operation to query.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The set command, if set, will replace the startup command in the mirror when the mirror is started.
     */
    command?: pulumi.Input<string>;
    /**
     * Used in combination with the command, the parameter of the command is a JsonArray string in the format: `[{"argument":"-c"},{"argument":"test"}]`. Among them, -c and test are two parameters that need to be set.
     */
    commandArgs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * EDAS-Container version that the deployed package depends on. Image does not support this parameter.
     */
    edasContainerVersion?: pulumi.Input<string>;
    /**
     * Deployment environment variables, the format must conform to the JSON object array, such as: `{"name":"x","value":"y"},{"name":"x2","value":"y2"}`, If you want to cancel the configuration, you need to set an empty JSON array "" to indicate no configuration.
     */
    envs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Mirror address. When the packageType is set to 'Image', this parameter item is required.
     */
    imageUrl?: pulumi.Input<string>;
    /**
     * Public network SLB ID. If not configured, EDAS will automatically purchase a new SLB for the user.
     * It has been deprecated, and new resource 'alicloud_edas_k8s_slb_attachment' replaces it.
     *
     * @deprecated Field 'internet_slb_id' has been deprecated, New Resource 'alicloud_edas_k8s_slb_attachment' replaces it
     */
    internetSlbId?: pulumi.Input<string>;
    /**
     * The public network SLB front-end port, range 1~65535. It has been deprecated and new resource 'alicloud_edas_k8s_slb_attachment' replaces it.
     *
     * @deprecated Field 'internet_slb_port' has been deprecated, New Resource 'alicloud_edas_k8s_slb_attachment' replaces it
     */
    internetSlbPort?: pulumi.Input<number>;
    /**
     * The public network SLB protocol supports TCP, HTTP and HTTPS protocols. It has been deprecated, and new resource 'alicloud_edas_k8s_slb_attachment' replaces it.
     *
     * @deprecated Field 'internet_slb_protocol' has been deprecated, New Resource 'alicloud_edas_k8s_slb_attachment' replaces it
     */
    internetSlbProtocol?: pulumi.Input<string>;
    /**
     * The private SLB back-end port, is also the service port of the application, ranging from 1 to 65535.
     * It has been deprecated, and new resource 'alicloud_edas_k8s_slb_attachment' replaces it.
     *
     * @deprecated Field 'internet_target_port' has been deprecated, New Resource 'alicloud_edas_k8s_slb_attachment' replaces it
     */
    internetTargetPort?: pulumi.Input<number>;
    /**
     * The JDK version that the deployed package depends on. The optional parameter values are Open JDK 7 and Open JDK 8. Image does not support this parameter.
     */
    jdk?: pulumi.Input<string>;
    /**
     * The CPU quota of the application instance during application operation. Unit: Number of millcores, set to 0 means unlimited, similar to request_cpu.
     */
    limitMCpu?: pulumi.Input<number>;
    /**
     * The memory limit of the application instance during application operation, unit: M.
     */
    limitMem?: pulumi.Input<number>;
    /**
     * Container survival status monitoring, format such as: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1,"tcpSocket":{"host":"", "port":8080} }`.
     */
    liveness?: pulumi.Input<string>;
    /**
     * The configuration of the host file mounted to the container. For example: `[{"type":"","nodePath":"/localfiles","mountPath":"/app/files"},{"type":"Directory","nodePath":"/mnt", "mountPath":"/app/storage"}]`. Among them, nodePath is the host path; mountPath is the path in the container; type is the mount type.
     */
    localVolume?: pulumi.Input<string>;
    /**
     * The ID corresponding to the EDAS namespace, the non-default namespace must be filled in.
     */
    logicalRegionId?: pulumi.Input<string>;
    /**
     * Mount configuration description, as a serialized JSON. For example: `[{"nasPath": "/k8s","mountPath": "/mnt"},{"nasPath": "/files","mountPath": "/app/files"}]`. Among them, nasPath refers to the file storage path; mountPath refers to the path mounted in the container.
     */
    mountDescs?: pulumi.Input<string>;
    /**
     * The namespace of the K8s cluster, it will determine which K8s namespace your application is deployed in. The default is 'default'.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The ID of the mounted NAS must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field exists, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
     */
    nasId?: pulumi.Input<string>;
    /**
     * Application package type. Optional parameter values include: FatJar, WAR and Image.
     */
    packageType?: pulumi.Input<string>;
    /**
     * The url of the package to deploy.Applications deployed through FatJar or WAR packages need to configure it.
     */
    packageUrl?: pulumi.Input<string>;
    /**
     * The version number of the deployment package. WAR and FatJar types are required. Please customize its meaning.
     */
    packageVersion?: pulumi.Input<string>;
    /**
     * Execute script after startup
     */
    postStart?: pulumi.Input<string>;
    /**
     * Execute script before stopping
     */
    preStop?: pulumi.Input<string>;
    /**
     * Container service status check. If the check fails, the traffic passing through K8s Service will not be transferred to the container. The format is: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1, "httpGet": {"path": "/consumer","port": 8080,"scheme": "HTTP","httpHeaders": [{"name": "test","value": "testvalue"} ]}}`.
     */
    readiness?: pulumi.Input<string>;
    /**
     * Number of application instances.
     */
    replicas?: pulumi.Input<number>;
    /**
     * When the application is created, the CPU quota of the application instance, unit: number of millcores, similar to request_cpu
     */
    requestsMCpu?: pulumi.Input<number>;
    /**
     * When the application is created, the memory limit of the application instance, unit: M. When set to 0, it means unlimited.
     */
    requestsMem?: pulumi.Input<number>;
    /**
     * The Tomcat version that the deployment package depends on. Applicable to Spring Cloud and Dubbo applications deployed through WAR packages. Image does not support this parameter.
     */
    webContainer?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a K8sApplication resource.
 */
export interface K8sApplicationArgs {
    /**
     * The description of the application
     */
    applicationDescriotion?: pulumi.Input<string>;
    /**
     * The name of the application you want to create. Must start with character,supports numbers, letters and dashes (-), supports up to 36 characters
     */
    applicationName: pulumi.Input<string>;
    /**
     * The ID of the alicloud container service kubernetes cluster that you want to import to. You can call the ListCluster operation to query.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The set command, if set, will replace the startup command in the mirror when the mirror is started.
     */
    command?: pulumi.Input<string>;
    /**
     * Used in combination with the command, the parameter of the command is a JsonArray string in the format: `[{"argument":"-c"},{"argument":"test"}]`. Among them, -c and test are two parameters that need to be set.
     */
    commandArgs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * EDAS-Container version that the deployed package depends on. Image does not support this parameter.
     */
    edasContainerVersion?: pulumi.Input<string>;
    /**
     * Deployment environment variables, the format must conform to the JSON object array, such as: `{"name":"x","value":"y"},{"name":"x2","value":"y2"}`, If you want to cancel the configuration, you need to set an empty JSON array "" to indicate no configuration.
     */
    envs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Mirror address. When the packageType is set to 'Image', this parameter item is required.
     */
    imageUrl?: pulumi.Input<string>;
    /**
     * Public network SLB ID. If not configured, EDAS will automatically purchase a new SLB for the user.
     * It has been deprecated, and new resource 'alicloud_edas_k8s_slb_attachment' replaces it.
     *
     * @deprecated Field 'internet_slb_id' has been deprecated, New Resource 'alicloud_edas_k8s_slb_attachment' replaces it
     */
    internetSlbId?: pulumi.Input<string>;
    /**
     * The public network SLB front-end port, range 1~65535. It has been deprecated and new resource 'alicloud_edas_k8s_slb_attachment' replaces it.
     *
     * @deprecated Field 'internet_slb_port' has been deprecated, New Resource 'alicloud_edas_k8s_slb_attachment' replaces it
     */
    internetSlbPort?: pulumi.Input<number>;
    /**
     * The public network SLB protocol supports TCP, HTTP and HTTPS protocols. It has been deprecated, and new resource 'alicloud_edas_k8s_slb_attachment' replaces it.
     *
     * @deprecated Field 'internet_slb_protocol' has been deprecated, New Resource 'alicloud_edas_k8s_slb_attachment' replaces it
     */
    internetSlbProtocol?: pulumi.Input<string>;
    /**
     * The private SLB back-end port, is also the service port of the application, ranging from 1 to 65535.
     * It has been deprecated, and new resource 'alicloud_edas_k8s_slb_attachment' replaces it.
     *
     * @deprecated Field 'internet_target_port' has been deprecated, New Resource 'alicloud_edas_k8s_slb_attachment' replaces it
     */
    internetTargetPort?: pulumi.Input<number>;
    /**
     * The JDK version that the deployed package depends on. The optional parameter values are Open JDK 7 and Open JDK 8. Image does not support this parameter.
     */
    jdk?: pulumi.Input<string>;
    /**
     * The CPU quota of the application instance during application operation. Unit: Number of millcores, set to 0 means unlimited, similar to request_cpu.
     */
    limitMCpu?: pulumi.Input<number>;
    /**
     * The memory limit of the application instance during application operation, unit: M.
     */
    limitMem?: pulumi.Input<number>;
    /**
     * Container survival status monitoring, format such as: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1,"tcpSocket":{"host":"", "port":8080} }`.
     */
    liveness?: pulumi.Input<string>;
    /**
     * The configuration of the host file mounted to the container. For example: `[{"type":"","nodePath":"/localfiles","mountPath":"/app/files"},{"type":"Directory","nodePath":"/mnt", "mountPath":"/app/storage"}]`. Among them, nodePath is the host path; mountPath is the path in the container; type is the mount type.
     */
    localVolume?: pulumi.Input<string>;
    /**
     * The ID corresponding to the EDAS namespace, the non-default namespace must be filled in.
     */
    logicalRegionId?: pulumi.Input<string>;
    /**
     * Mount configuration description, as a serialized JSON. For example: `[{"nasPath": "/k8s","mountPath": "/mnt"},{"nasPath": "/files","mountPath": "/app/files"}]`. Among them, nasPath refers to the file storage path; mountPath refers to the path mounted in the container.
     */
    mountDescs?: pulumi.Input<string>;
    /**
     * The namespace of the K8s cluster, it will determine which K8s namespace your application is deployed in. The default is 'default'.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The ID of the mounted NAS must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field exists, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
     */
    nasId?: pulumi.Input<string>;
    /**
     * Application package type. Optional parameter values include: FatJar, WAR and Image.
     */
    packageType?: pulumi.Input<string>;
    /**
     * The url of the package to deploy.Applications deployed through FatJar or WAR packages need to configure it.
     */
    packageUrl?: pulumi.Input<string>;
    /**
     * The version number of the deployment package. WAR and FatJar types are required. Please customize its meaning.
     */
    packageVersion?: pulumi.Input<string>;
    /**
     * Execute script after startup
     */
    postStart?: pulumi.Input<string>;
    /**
     * Execute script before stopping
     */
    preStop?: pulumi.Input<string>;
    /**
     * Container service status check. If the check fails, the traffic passing through K8s Service will not be transferred to the container. The format is: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1, "httpGet": {"path": "/consumer","port": 8080,"scheme": "HTTP","httpHeaders": [{"name": "test","value": "testvalue"} ]}}`.
     */
    readiness?: pulumi.Input<string>;
    /**
     * Number of application instances.
     */
    replicas?: pulumi.Input<number>;
    /**
     * When the application is created, the CPU quota of the application instance, unit: number of millcores, similar to request_cpu
     */
    requestsMCpu?: pulumi.Input<number>;
    /**
     * When the application is created, the memory limit of the application instance, unit: M. When set to 0, it means unlimited.
     */
    requestsMem?: pulumi.Input<number>;
    /**
     * The Tomcat version that the deployment package depends on. Applicable to Spring Cloud and Dubbo applications deployed through WAR packages. Image does not support this parameter.
     */
    webContainer?: pulumi.Input<string>;
}
