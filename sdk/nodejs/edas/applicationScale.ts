// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This operation is provided to scale out an EDAS application.
 *
 * > **NOTE:** Available in 1.82.0+
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.edas.ApplicationScale("default", {
 *     appId: _var.app_id,
 *     deployGroup: _var.deploy_group,
 *     ecuInfos: _var.ecu_info,
 *     forceStatus: _var.force_status,
 * });
 * ```
 */
export class ApplicationScale extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationScale resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationScaleState, opts?: pulumi.CustomResourceOptions): ApplicationScale {
        return new ApplicationScale(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:edas/applicationScale:ApplicationScale';

    /**
     * Returns true if the given object is an instance of ApplicationScale.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationScale {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationScale.__pulumiType;
    }

    /**
     * The ID of the application that you want to deploy.
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * The ID of the instance group to which you want to add ECS instances to scale out the application.
     */
    public readonly deployGroup!: pulumi.Output<string>;
    /**
     * The ecc information of the resource supplied above. The value is formulated as `<ecc1,ecc2>`.
     */
    public /*out*/ readonly eccInfo!: pulumi.Output<string>;
    /**
     * The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
     */
    public readonly ecuInfos!: pulumi.Output<string[]>;
    /**
     * This parameter specifies whether to forcibly remove an ECS instance where the application is deployed. It is set as true only after the ECS instance expires. In normal cases, this parameter do not need to be specified.
     */
    public readonly forceStatus!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ApplicationScale resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationScaleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationScaleArgs | ApplicationScaleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationScaleState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["deployGroup"] = state ? state.deployGroup : undefined;
            resourceInputs["eccInfo"] = state ? state.eccInfo : undefined;
            resourceInputs["ecuInfos"] = state ? state.ecuInfos : undefined;
            resourceInputs["forceStatus"] = state ? state.forceStatus : undefined;
        } else {
            const args = argsOrState as ApplicationScaleArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.deployGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deployGroup'");
            }
            if ((!args || args.ecuInfos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ecuInfos'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["deployGroup"] = args ? args.deployGroup : undefined;
            resourceInputs["ecuInfos"] = args ? args.ecuInfos : undefined;
            resourceInputs["forceStatus"] = args ? args.forceStatus : undefined;
            resourceInputs["eccInfo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationScale.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationScale resources.
 */
export interface ApplicationScaleState {
    /**
     * The ID of the application that you want to deploy.
     */
    appId?: pulumi.Input<string>;
    /**
     * The ID of the instance group to which you want to add ECS instances to scale out the application.
     */
    deployGroup?: pulumi.Input<string>;
    /**
     * The ecc information of the resource supplied above. The value is formulated as `<ecc1,ecc2>`.
     */
    eccInfo?: pulumi.Input<string>;
    /**
     * The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
     */
    ecuInfos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This parameter specifies whether to forcibly remove an ECS instance where the application is deployed. It is set as true only after the ECS instance expires. In normal cases, this parameter do not need to be specified.
     */
    forceStatus?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ApplicationScale resource.
 */
export interface ApplicationScaleArgs {
    /**
     * The ID of the application that you want to deploy.
     */
    appId: pulumi.Input<string>;
    /**
     * The ID of the instance group to which you want to add ECS instances to scale out the application.
     */
    deployGroup: pulumi.Input<string>;
    /**
     * The IDs of the Elastic Compute Unit (ECU) where you want to deploy the application. Type: List.
     */
    ecuInfos: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This parameter specifies whether to forcibly remove an ECS instance where the application is deployed. It is set as true only after the ECS instance expires. In normal cases, this parameter do not need to be specified.
     */
    forceStatus?: pulumi.Input<boolean>;
}
