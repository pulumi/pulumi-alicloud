// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Binds SLBs to an EDAS k8s application.
 *
 * For information about EDAS k8s slb attachment and how to use it, see [What is k8s slb attachment](https://www.alibabacloud.com/help/en/enterprise-distributed-application-service/latest/bindk8sslb).
 *
 * > **NOTE:** Available since v1.194.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultGetImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_18.*64",
 *     mostRecent: true,
 *     owners: "system",
 * });
 * const defaultGetInstanceTypes = _default.then(_default => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: _default.zones?.[0]?.id,
 *     cpuCoreCount: 4,
 *     memorySize: 8,
 *     kubernetesNodeRole: "Worker",
 * }));
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 * });
 * const defaultManagedKubernetes = new alicloud.cs.ManagedKubernetes("default", {
 *     namePrefix: name,
 *     clusterSpec: "ack.pro.small",
 *     workerVswitchIds: [defaultSwitch.id],
 *     newNatGateway: true,
 *     podCidr: std.cidrsubnet({
 *         input: "10.0.0.0/8",
 *         newbits: 8,
 *         netnum: 36,
 *     }).then(invoke => invoke.result),
 *     serviceCidr: std.cidrsubnet({
 *         input: "172.16.0.0/16",
 *         newbits: 4,
 *         netnum: 7,
 *     }).then(invoke => invoke.result),
 *     slbInternetEnabled: true,
 * });
 * const defaultNodePool = new alicloud.cs.NodePool("default", {
 *     name: name,
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [defaultSwitch.id],
 *     instanceTypes: [defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     desiredSize: "2",
 * });
 * const defaultK8sCluster = new alicloud.edas.K8sCluster("default", {csClusterId: defaultNodePool.clusterId});
 * const defaultK8sApplication = new alicloud.edas.K8sApplication("default", {
 *     applicationName: name,
 *     clusterId: defaultK8sCluster.id,
 *     packageType: "FatJar",
 *     packageUrl: "http://edas-bj.oss-cn-beijing.aliyuncs.com/prod/demo/SPRING_CLOUD_PROVIDER.jar",
 *     jdk: "Open JDK 8",
 *     replicas: 2,
 *     readiness: "{\"failureThreshold\": 3,\"initialDelaySeconds\": 5,\"successThreshold\": 1,\"timeoutSeconds\": 1,\"tcpSocket\":{\"port\":18081}}",
 *     liveness: "{\"failureThreshold\": 3,\"initialDelaySeconds\": 5,\"successThreshold\": 1,\"timeoutSeconds\": 1,\"tcpSocket\":{\"port\":18081}}",
 *     applicationDescriotion: name,
 * });
 * const defaultK8sSlbAttachment = new alicloud.edas.K8sSlbAttachment("default", {
 *     appId: defaultK8sApplication.id,
 *     slbConfigs: [{
 *         type: "internet",
 *         scheduler: "rr",
 *         portMappings: [{
 *             loadbalancerProtocol: "TCP",
 *             servicePort: {
 *                 port: 80,
 *                 protocol: "TCP",
 *                 targetPort: 8080,
 *             },
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Slb information of EDAS k8s application can be imported using the ID of an EDAS k8s application. e.g.
 *
 * ```sh
 * $ pulumi import alicloud:edas/k8sSlbAttachment:K8sSlbAttachment example <EDAS k8s app id>
 * ```
 */
export class K8sSlbAttachment extends pulumi.CustomResource {
    /**
     * Get an existing K8sSlbAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sSlbAttachmentState, opts?: pulumi.CustomResourceOptions): K8sSlbAttachment {
        return new K8sSlbAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:edas/k8sSlbAttachment:K8sSlbAttachment';

    /**
     * Returns true if the given object is an instance of K8sSlbAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8sSlbAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8sSlbAttachment.__pulumiType;
    }

    /**
     * The ID of the EDAS k8s application to which you want to bind SLB instances.
     */
    declare public readonly appId: pulumi.Output<string>;
    /**
     * The configurations of SLB attachment, which is supported for multiple configurations. See `slbConfigs` below.
     */
    declare public readonly slbConfigs: pulumi.Output<outputs.edas.K8sSlbAttachmentSlbConfig[]>;

    /**
     * Create a K8sSlbAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8sSlbAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sSlbAttachmentArgs | K8sSlbAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sSlbAttachmentState | undefined;
            resourceInputs["appId"] = state?.appId;
            resourceInputs["slbConfigs"] = state?.slbConfigs;
        } else {
            const args = argsOrState as K8sSlbAttachmentArgs | undefined;
            if (args?.appId === undefined && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            resourceInputs["appId"] = args?.appId;
            resourceInputs["slbConfigs"] = args?.slbConfigs;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8sSlbAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering K8sSlbAttachment resources.
 */
export interface K8sSlbAttachmentState {
    /**
     * The ID of the EDAS k8s application to which you want to bind SLB instances.
     */
    appId?: pulumi.Input<string>;
    /**
     * The configurations of SLB attachment, which is supported for multiple configurations. See `slbConfigs` below.
     */
    slbConfigs?: pulumi.Input<pulumi.Input<inputs.edas.K8sSlbAttachmentSlbConfig>[]>;
}

/**
 * The set of arguments for constructing a K8sSlbAttachment resource.
 */
export interface K8sSlbAttachmentArgs {
    /**
     * The ID of the EDAS k8s application to which you want to bind SLB instances.
     */
    appId: pulumi.Input<string>;
    /**
     * The configurations of SLB attachment, which is supported for multiple configurations. See `slbConfigs` below.
     */
    slbConfigs?: pulumi.Input<pulumi.Input<inputs.edas.K8sSlbAttachmentSlbConfig>[]>;
}
