// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a PolarDB account privilege resource and used to grant several database some access privilege. A database can be granted by multiple account.
 *
 * > **NOTE:** Available in v1.67.0+.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = alicloud.polardb.getNodeClasses({
 *     dbType: "MySQL",
 *     dbVersion: "8.0",
 *     payType: "PostPaid",
 *     category: "Normal",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: "terraform-example",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: _default.then(_default => _default.classes?.[0]?.zoneId),
 *     vswitchName: "terraform-example",
 * });
 * const defaultCluster = new alicloud.polardb.Cluster("default", {
 *     dbType: "MySQL",
 *     dbVersion: "8.0",
 *     dbNodeClass: _default.then(_default => _default.classes?.[0]?.supportedEngines?.[0]?.availableResources?.[0]?.dbNodeClass),
 *     payType: "PostPaid",
 *     vswitchId: defaultSwitch.id,
 *     description: "terraform-example",
 * });
 * const defaultAccount = new alicloud.polardb.Account("default", {
 *     dbClusterId: defaultCluster.id,
 *     accountName: "terraform_example",
 *     accountPassword: "Example1234",
 *     accountDescription: "terraform-example",
 * });
 * const defaultDatabase = new alicloud.polardb.Database("default", {
 *     dbClusterId: defaultCluster.id,
 *     dbName: "terraform-example",
 * });
 * const defaultAccountPrivilege = new alicloud.polardb.AccountPrivilege("default", {
 *     dbClusterId: defaultCluster.id,
 *     accountName: defaultAccount.accountName,
 *     accountPrivilege: "ReadOnly",
 *     dbNames: [defaultDatabase.dbName],
 * });
 * ```
 *
 * ## Import
 *
 * PolarDB account privilege can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:polardb/accountPrivilege:AccountPrivilege example "pc-12345:tf_account:ReadOnly"
 * ```
 */
export class AccountPrivilege extends pulumi.CustomResource {
    /**
     * Get an existing AccountPrivilege resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountPrivilegeState, opts?: pulumi.CustomResourceOptions): AccountPrivilege {
        return new AccountPrivilege(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:polardb/accountPrivilege:AccountPrivilege';

    /**
     * Returns true if the given object is an instance of AccountPrivilege.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountPrivilege {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountPrivilege.__pulumiType;
    }

    /**
     * A specified account name.
     */
    declare public readonly accountName: pulumi.Output<string>;
    /**
     * The privilege of one account access database. Valid values: ["ReadOnly", "ReadWrite"], ["DMLOnly", "DDLOnly"] added since version v1.101.0. Default to "ReadOnly".
     */
    declare public readonly accountPrivilege: pulumi.Output<string | undefined>;
    /**
     * The Id of cluster in which account belongs.
     */
    declare public readonly dbClusterId: pulumi.Output<string>;
    /**
     * List of specified database name.
     */
    declare public readonly dbNames: pulumi.Output<string[]>;

    /**
     * Create a AccountPrivilege resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountPrivilegeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountPrivilegeArgs | AccountPrivilegeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountPrivilegeState | undefined;
            resourceInputs["accountName"] = state?.accountName;
            resourceInputs["accountPrivilege"] = state?.accountPrivilege;
            resourceInputs["dbClusterId"] = state?.dbClusterId;
            resourceInputs["dbNames"] = state?.dbNames;
        } else {
            const args = argsOrState as AccountPrivilegeArgs | undefined;
            if (args?.accountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if (args?.dbClusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbClusterId'");
            }
            if (args?.dbNames === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbNames'");
            }
            resourceInputs["accountName"] = args?.accountName;
            resourceInputs["accountPrivilege"] = args?.accountPrivilege;
            resourceInputs["dbClusterId"] = args?.dbClusterId;
            resourceInputs["dbNames"] = args?.dbNames;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountPrivilege.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountPrivilege resources.
 */
export interface AccountPrivilegeState {
    /**
     * A specified account name.
     */
    accountName?: pulumi.Input<string>;
    /**
     * The privilege of one account access database. Valid values: ["ReadOnly", "ReadWrite"], ["DMLOnly", "DDLOnly"] added since version v1.101.0. Default to "ReadOnly".
     */
    accountPrivilege?: pulumi.Input<string>;
    /**
     * The Id of cluster in which account belongs.
     */
    dbClusterId?: pulumi.Input<string>;
    /**
     * List of specified database name.
     */
    dbNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AccountPrivilege resource.
 */
export interface AccountPrivilegeArgs {
    /**
     * A specified account name.
     */
    accountName: pulumi.Input<string>;
    /**
     * The privilege of one account access database. Valid values: ["ReadOnly", "ReadWrite"], ["DMLOnly", "DDLOnly"] added since version v1.101.0. Default to "ReadOnly".
     */
    accountPrivilege?: pulumi.Input<string>;
    /**
     * The Id of cluster in which account belongs.
     */
    dbClusterId: pulumi.Input<string>;
    /**
     * List of specified database name.
     */
    dbNames: pulumi.Input<pulumi.Input<string>[]>;
}
