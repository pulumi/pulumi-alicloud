// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a RAM Policy resource.
 *
 * For information about RAM Policy and how to use it, see [What is Policy](https://www.alibabacloud.com/help/en/ram/developer-reference/api-ram-2015-05-01-createpolicy).
 *
 * > **NOTE:** Available since v1.0.0.
 *
 * > **NOTE:** When you want to destroy this resource forcefully(means remove all the relationships associated with it automatically and then destroy it) without set `force`  with `true` at beginning, you need add `force = true` to configuration file and run `pulumi preview`, then you can delete resource forcefully.
 *
 * > **NOTE:** Each strategy can have a maximum of five versions. When the number of versions reaches five, the oldest version is not automatically deleted by default. You need to explicitly set `rotateStrategy = DeleteOldestNonDefaultVersionWhenLimitExceeded` to automatically delete the oldest version.
 *
 * > **NOTE:** If the policy has multiple versions, all non-default versions will be deleted first when deleting policy.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * // Create a new RAM Policy.
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const policy = new alicloud.ram.Policy("policy", {
 *     policyName: `tf-example-${_default.result}`,
 *     policyDocument: `  {
 *     \\"Statement\\": [
 *       {
 *         \\"Action\\": [
 *           \\"oss:ListObjects\\",
 *           \\"oss:GetObject\\"
 *         ],
 *         \\"Effect\\": \\"Allow\\",
 *         \\"Resource\\": [
 *           \\"acs:oss:*:*:mybucket\\",
 *           \\"acs:oss:*:*:mybucket/*\\"
 *         ]
 *       }
 *     ],
 *       \\"Version\\": \\"1\\"
 *   }
 * `,
 *     description: "this is a policy test",
 * });
 * ```
 *
 * ## Import
 *
 * RAM Policy can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ram/policy:Policy example <id>
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ram/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Number of attachments of the policy.
     */
    declare public /*out*/ readonly attachmentCount: pulumi.Output<number>;
    /**
     * (Available since v1.246.0) The create time of the policy.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The default version ID of the policy.
     */
    declare public /*out*/ readonly defaultVersion: pulumi.Output<string>;
    /**
     * The description of the policy. It can be 1 to 1024 characters in length.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Field `document` has been deprecated from provider version 1.114.0. New field `policyDocument` instead.
     *
     * @deprecated Field 'document' has been deprecated from provider version 1.114.0. New field 'policy_document' instead.
     */
    declare public readonly document: pulumi.Output<string>;
    /**
     * Specifies whether to force delete the Policy. Default value: `false`. Valid values:
     */
    declare public readonly force: pulumi.Output<boolean | undefined>;
    /**
     * Field `name` has been deprecated from provider version 1.114.0. New field `policyName` instead.
     *
     * @deprecated Field 'name' has been deprecated from provider version 1.114.0. New field 'policy_name' instead.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The content of the policy. The maximum length is 6144 bytes.
     */
    declare public readonly policyDocument: pulumi.Output<string>;
    /**
     * The policy name. It can be 1 to 128 characters in length and can contain English letters, digits, and dashes (-).
     */
    declare public readonly policyName: pulumi.Output<string>;
    /**
     * The automatic rotation mechanism of policy versions can delete historical policy versions. The default value is None. Valid values:
     * - `None`: Turn off the rotation mechanism.
     * - `DeleteOldestNonDefaultVersionWhenLimitExceeded`: When the number of permission policy versions exceeds the limit, the oldest and inactive version is deleted.
     */
    declare public readonly rotateStrategy: pulumi.Output<string | undefined>;
    /**
     * Field `statement` has been deprecated from provider version 1.49.0. New field `document` instead. See `statement` below.
     *
     * @deprecated Field 'statement' has been deprecated from version 1.49.0, and use field 'document' to replace. 
     */
    declare public readonly statements: pulumi.Output<outputs.ram.PolicyStatement[]>;
    /**
     * The list of tags on the policy.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the policy.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * Field `version` has been deprecated from provider version 1.49.0. New field `document` instead.
     *
     * @deprecated Field 'version' has been deprecated from version 1.49.0, and use field 'document' to replace. 
     */
    declare public readonly version: pulumi.Output<string | undefined>;
    /**
     * The ID of the default policy version.
     */
    declare public /*out*/ readonly versionId: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["attachmentCount"] = state?.attachmentCount;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["defaultVersion"] = state?.defaultVersion;
            resourceInputs["description"] = state?.description;
            resourceInputs["document"] = state?.document;
            resourceInputs["force"] = state?.force;
            resourceInputs["name"] = state?.name;
            resourceInputs["policyDocument"] = state?.policyDocument;
            resourceInputs["policyName"] = state?.policyName;
            resourceInputs["rotateStrategy"] = state?.rotateStrategy;
            resourceInputs["statements"] = state?.statements;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
            resourceInputs["version"] = state?.version;
            resourceInputs["versionId"] = state?.versionId;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["document"] = args?.document;
            resourceInputs["force"] = args?.force;
            resourceInputs["name"] = args?.name;
            resourceInputs["policyDocument"] = args?.policyDocument;
            resourceInputs["policyName"] = args?.policyName;
            resourceInputs["rotateStrategy"] = args?.rotateStrategy;
            resourceInputs["statements"] = args?.statements;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["version"] = args?.version;
            resourceInputs["attachmentCount"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["defaultVersion"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Number of attachments of the policy.
     */
    attachmentCount?: pulumi.Input<number>;
    /**
     * (Available since v1.246.0) The create time of the policy.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The default version ID of the policy.
     */
    defaultVersion?: pulumi.Input<string>;
    /**
     * The description of the policy. It can be 1 to 1024 characters in length.
     */
    description?: pulumi.Input<string>;
    /**
     * Field `document` has been deprecated from provider version 1.114.0. New field `policyDocument` instead.
     *
     * @deprecated Field 'document' has been deprecated from provider version 1.114.0. New field 'policy_document' instead.
     */
    document?: pulumi.Input<string>;
    /**
     * Specifies whether to force delete the Policy. Default value: `false`. Valid values:
     */
    force?: pulumi.Input<boolean>;
    /**
     * Field `name` has been deprecated from provider version 1.114.0. New field `policyName` instead.
     *
     * @deprecated Field 'name' has been deprecated from provider version 1.114.0. New field 'policy_name' instead.
     */
    name?: pulumi.Input<string>;
    /**
     * The content of the policy. The maximum length is 6144 bytes.
     */
    policyDocument?: pulumi.Input<string>;
    /**
     * The policy name. It can be 1 to 128 characters in length and can contain English letters, digits, and dashes (-).
     */
    policyName?: pulumi.Input<string>;
    /**
     * The automatic rotation mechanism of policy versions can delete historical policy versions. The default value is None. Valid values:
     * - `None`: Turn off the rotation mechanism.
     * - `DeleteOldestNonDefaultVersionWhenLimitExceeded`: When the number of permission policy versions exceeds the limit, the oldest and inactive version is deleted.
     */
    rotateStrategy?: pulumi.Input<string>;
    /**
     * Field `statement` has been deprecated from provider version 1.49.0. New field `document` instead. See `statement` below.
     *
     * @deprecated Field 'statement' has been deprecated from version 1.49.0, and use field 'document' to replace. 
     */
    statements?: pulumi.Input<pulumi.Input<inputs.ram.PolicyStatement>[]>;
    /**
     * The list of tags on the policy.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of the policy.
     */
    type?: pulumi.Input<string>;
    /**
     * Field `version` has been deprecated from provider version 1.49.0. New field `document` instead.
     *
     * @deprecated Field 'version' has been deprecated from version 1.49.0, and use field 'document' to replace. 
     */
    version?: pulumi.Input<string>;
    /**
     * The ID of the default policy version.
     */
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * The description of the policy. It can be 1 to 1024 characters in length.
     */
    description?: pulumi.Input<string>;
    /**
     * Field `document` has been deprecated from provider version 1.114.0. New field `policyDocument` instead.
     *
     * @deprecated Field 'document' has been deprecated from provider version 1.114.0. New field 'policy_document' instead.
     */
    document?: pulumi.Input<string>;
    /**
     * Specifies whether to force delete the Policy. Default value: `false`. Valid values:
     */
    force?: pulumi.Input<boolean>;
    /**
     * Field `name` has been deprecated from provider version 1.114.0. New field `policyName` instead.
     *
     * @deprecated Field 'name' has been deprecated from provider version 1.114.0. New field 'policy_name' instead.
     */
    name?: pulumi.Input<string>;
    /**
     * The content of the policy. The maximum length is 6144 bytes.
     */
    policyDocument?: pulumi.Input<string>;
    /**
     * The policy name. It can be 1 to 128 characters in length and can contain English letters, digits, and dashes (-).
     */
    policyName?: pulumi.Input<string>;
    /**
     * The automatic rotation mechanism of policy versions can delete historical policy versions. The default value is None. Valid values:
     * - `None`: Turn off the rotation mechanism.
     * - `DeleteOldestNonDefaultVersionWhenLimitExceeded`: When the number of permission policy versions exceeds the limit, the oldest and inactive version is deleted.
     */
    rotateStrategy?: pulumi.Input<string>;
    /**
     * Field `statement` has been deprecated from provider version 1.49.0. New field `document` instead. See `statement` below.
     *
     * @deprecated Field 'statement' has been deprecated from version 1.49.0, and use field 'document' to replace. 
     */
    statements?: pulumi.Input<pulumi.Input<inputs.ram.PolicyStatement>[]>;
    /**
     * The list of tags on the policy.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Field `version` has been deprecated from provider version 1.49.0. New field `document` instead.
     *
     * @deprecated Field 'version' has been deprecated from version 1.49.0, and use field 'document' to replace. 
     */
    version?: pulumi.Input<string>;
}
