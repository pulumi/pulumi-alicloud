// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * RAM Security Preference can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ram/securityPreference:SecurityPreference example 
 * ```
 */
export class SecurityPreference extends pulumi.CustomResource {
    /**
     * Get an existing SecurityPreference resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityPreferenceState, opts?: pulumi.CustomResourceOptions): SecurityPreference {
        return new SecurityPreference(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ram/securityPreference:SecurityPreference';

    /**
     * Returns true if the given object is an instance of SecurityPreference.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityPreference {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityPreference.__pulumiType;
    }

    /**
     * Whether to allow RAM users to manage their own passwords. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     */
    declare public readonly allowUserToChangePassword: pulumi.Output<boolean>;
    /**
     * Whether to allow RAM users to log on using a passkey. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     */
    declare public readonly allowUserToLoginWithPasskey: pulumi.Output<boolean>;
    /**
     * Whether to allow RAM users to manage their own access keys. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     */
    declare public readonly allowUserToManageAccessKeys: pulumi.Output<boolean>;
    /**
     * Whether to allow RAM users to manage multi-factor authentication devices. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     */
    declare public readonly allowUserToManageMfaDevices: pulumi.Output<boolean>;
    /**
     * Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     */
    declare public readonly allowUserToManagePersonalDingTalk: pulumi.Output<boolean>;
    /**
     * Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     */
    declare public readonly enableSaveMfaTicket: pulumi.Output<boolean>;
    /**
     * Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead. 
     * Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
     */
    declare public readonly enforceMfaForLogin: pulumi.Output<boolean>;
    /**
     * The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
     * - If the mask is specified, RAM users can only log on from the specified IP address.
     * - If you do not specify any mask, the login console function will apply to the entire network.
     *
     * When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
     *
     * Configure a maximum of 40 logon masks, with a total length of 512 characters.
     */
    declare public readonly loginNetworkMasks: pulumi.Output<string | undefined>;
    /**
     * The validity period of the logon session of RAM users.
     * Valid values: 1 to 24. Unit: hours.
     * Default value: 6.
     */
    declare public readonly loginSessionDuration: pulumi.Output<number>;
    /**
     * MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
     * - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
     * - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
     * - adaptive: Used only during abnormal login.
     */
    declare public readonly mfaOperationForLogin: pulumi.Output<string>;
    /**
     * Whether MFA is verified twice during abnormal logon. Value:
     * - autonomous (default): Skip, do not force binding.
     * - enforceVerify: Force binding validation.
     */
    declare public readonly operationForRiskLogin: pulumi.Output<string>;
    /**
     * Means of multi-factor authentication. Value:
     * - sms: secure phone.
     * - email: Secure mailbox.
     *
     * The following arguments will be discarded. Please use new fields as soon as possible:
     */
    declare public readonly verificationTypes: pulumi.Output<string[] | undefined>;

    /**
     * Create a SecurityPreference resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecurityPreferenceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityPreferenceArgs | SecurityPreferenceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityPreferenceState | undefined;
            resourceInputs["allowUserToChangePassword"] = state?.allowUserToChangePassword;
            resourceInputs["allowUserToLoginWithPasskey"] = state?.allowUserToLoginWithPasskey;
            resourceInputs["allowUserToManageAccessKeys"] = state?.allowUserToManageAccessKeys;
            resourceInputs["allowUserToManageMfaDevices"] = state?.allowUserToManageMfaDevices;
            resourceInputs["allowUserToManagePersonalDingTalk"] = state?.allowUserToManagePersonalDingTalk;
            resourceInputs["enableSaveMfaTicket"] = state?.enableSaveMfaTicket;
            resourceInputs["enforceMfaForLogin"] = state?.enforceMfaForLogin;
            resourceInputs["loginNetworkMasks"] = state?.loginNetworkMasks;
            resourceInputs["loginSessionDuration"] = state?.loginSessionDuration;
            resourceInputs["mfaOperationForLogin"] = state?.mfaOperationForLogin;
            resourceInputs["operationForRiskLogin"] = state?.operationForRiskLogin;
            resourceInputs["verificationTypes"] = state?.verificationTypes;
        } else {
            const args = argsOrState as SecurityPreferenceArgs | undefined;
            resourceInputs["allowUserToChangePassword"] = args?.allowUserToChangePassword;
            resourceInputs["allowUserToLoginWithPasskey"] = args?.allowUserToLoginWithPasskey;
            resourceInputs["allowUserToManageAccessKeys"] = args?.allowUserToManageAccessKeys;
            resourceInputs["allowUserToManageMfaDevices"] = args?.allowUserToManageMfaDevices;
            resourceInputs["allowUserToManagePersonalDingTalk"] = args?.allowUserToManagePersonalDingTalk;
            resourceInputs["enableSaveMfaTicket"] = args?.enableSaveMfaTicket;
            resourceInputs["enforceMfaForLogin"] = args?.enforceMfaForLogin;
            resourceInputs["loginNetworkMasks"] = args?.loginNetworkMasks;
            resourceInputs["loginSessionDuration"] = args?.loginSessionDuration;
            resourceInputs["mfaOperationForLogin"] = args?.mfaOperationForLogin;
            resourceInputs["operationForRiskLogin"] = args?.operationForRiskLogin;
            resourceInputs["verificationTypes"] = args?.verificationTypes;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityPreference.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityPreference resources.
 */
export interface SecurityPreferenceState {
    /**
     * Whether to allow RAM users to manage their own passwords. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     */
    allowUserToChangePassword?: pulumi.Input<boolean>;
    /**
     * Whether to allow RAM users to log on using a passkey. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     */
    allowUserToLoginWithPasskey?: pulumi.Input<boolean>;
    /**
     * Whether to allow RAM users to manage their own access keys. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     */
    allowUserToManageAccessKeys?: pulumi.Input<boolean>;
    /**
     * Whether to allow RAM users to manage multi-factor authentication devices. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     */
    allowUserToManageMfaDevices?: pulumi.Input<boolean>;
    /**
     * Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     */
    allowUserToManagePersonalDingTalk?: pulumi.Input<boolean>;
    /**
     * Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     */
    enableSaveMfaTicket?: pulumi.Input<boolean>;
    /**
     * Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead. 
     * Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
     */
    enforceMfaForLogin?: pulumi.Input<boolean>;
    /**
     * The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
     * - If the mask is specified, RAM users can only log on from the specified IP address.
     * - If you do not specify any mask, the login console function will apply to the entire network.
     *
     * When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
     *
     * Configure a maximum of 40 logon masks, with a total length of 512 characters.
     */
    loginNetworkMasks?: pulumi.Input<string>;
    /**
     * The validity period of the logon session of RAM users.
     * Valid values: 1 to 24. Unit: hours.
     * Default value: 6.
     */
    loginSessionDuration?: pulumi.Input<number>;
    /**
     * MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
     * - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
     * - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
     * - adaptive: Used only during abnormal login.
     */
    mfaOperationForLogin?: pulumi.Input<string>;
    /**
     * Whether MFA is verified twice during abnormal logon. Value:
     * - autonomous (default): Skip, do not force binding.
     * - enforceVerify: Force binding validation.
     */
    operationForRiskLogin?: pulumi.Input<string>;
    /**
     * Means of multi-factor authentication. Value:
     * - sms: secure phone.
     * - email: Secure mailbox.
     *
     * The following arguments will be discarded. Please use new fields as soon as possible:
     */
    verificationTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SecurityPreference resource.
 */
export interface SecurityPreferenceArgs {
    /**
     * Whether to allow RAM users to manage their own passwords. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     */
    allowUserToChangePassword?: pulumi.Input<boolean>;
    /**
     * Whether to allow RAM users to log on using a passkey. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     */
    allowUserToLoginWithPasskey?: pulumi.Input<boolean>;
    /**
     * Whether to allow RAM users to manage their own access keys. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     */
    allowUserToManageAccessKeys?: pulumi.Input<boolean>;
    /**
     * Whether to allow RAM users to manage multi-factor authentication devices. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     */
    allowUserToManageMfaDevices?: pulumi.Input<boolean>;
    /**
     * Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     */
    allowUserToManagePersonalDingTalk?: pulumi.Input<boolean>;
    /**
     * Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     */
    enableSaveMfaTicket?: pulumi.Input<boolean>;
    /**
     * Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead. 
     * Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
     */
    enforceMfaForLogin?: pulumi.Input<boolean>;
    /**
     * The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
     * - If the mask is specified, RAM users can only log on from the specified IP address.
     * - If you do not specify any mask, the login console function will apply to the entire network.
     *
     * When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
     *
     * Configure a maximum of 40 logon masks, with a total length of 512 characters.
     */
    loginNetworkMasks?: pulumi.Input<string>;
    /**
     * The validity period of the logon session of RAM users.
     * Valid values: 1 to 24. Unit: hours.
     * Default value: 6.
     */
    loginSessionDuration?: pulumi.Input<number>;
    /**
     * MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
     * - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
     * - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
     * - adaptive: Used only during abnormal login.
     */
    mfaOperationForLogin?: pulumi.Input<string>;
    /**
     * Whether MFA is verified twice during abnormal logon. Value:
     * - autonomous (default): Skip, do not force binding.
     * - enforceVerify: Force binding validation.
     */
    operationForRiskLogin?: pulumi.Input<string>;
    /**
     * Means of multi-factor authentication. Value:
     * - sms: secure phone.
     * - email: Secure mailbox.
     *
     * The following arguments will be discarded. Please use new fields as soon as possible:
     */
    verificationTypes?: pulumi.Input<pulumi.Input<string>[]>;
}
