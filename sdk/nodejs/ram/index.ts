// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessKeyArgs, AccessKeyState } from "./accessKey";
export type AccessKey = import("./accessKey").AccessKey;
export const AccessKey: typeof import("./accessKey").AccessKey = null as any;
utilities.lazyLoad(exports, ["AccessKey"], () => require("./accessKey"));

export { AccountAliasArgs, AccountAliasState } from "./accountAlias";
export type AccountAlias = import("./accountAlias").AccountAlias;
export const AccountAlias: typeof import("./accountAlias").AccountAlias = null as any;
utilities.lazyLoad(exports, ["AccountAlias"], () => require("./accountAlias"));

export { AccountPasswordPolicyArgs, AccountPasswordPolicyState } from "./accountPasswordPolicy";
export type AccountPasswordPolicy = import("./accountPasswordPolicy").AccountPasswordPolicy;
export const AccountPasswordPolicy: typeof import("./accountPasswordPolicy").AccountPasswordPolicy = null as any;
utilities.lazyLoad(exports, ["AccountPasswordPolicy"], () => require("./accountPasswordPolicy"));

export { AliasArgs, AliasState } from "./alias";
export type Alias = import("./alias").Alias;
export const Alias: typeof import("./alias").Alias = null as any;
utilities.lazyLoad(exports, ["Alias"], () => require("./alias"));

export { GetAccountAliasArgs, GetAccountAliasResult, GetAccountAliasOutputArgs } from "./getAccountAlias";
export const getAccountAlias: typeof import("./getAccountAlias").getAccountAlias = null as any;
export const getAccountAliasOutput: typeof import("./getAccountAlias").getAccountAliasOutput = null as any;
utilities.lazyLoad(exports, ["getAccountAlias","getAccountAliasOutput"], () => require("./getAccountAlias"));

export { GetAccountAliasesArgs, GetAccountAliasesResult, GetAccountAliasesOutputArgs } from "./getAccountAliases";
export const getAccountAliases: typeof import("./getAccountAliases").getAccountAliases = null as any;
export const getAccountAliasesOutput: typeof import("./getAccountAliases").getAccountAliasesOutput = null as any;
utilities.lazyLoad(exports, ["getAccountAliases","getAccountAliasesOutput"], () => require("./getAccountAliases"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetPoliciesArgs, GetPoliciesResult, GetPoliciesOutputArgs } from "./getPolicies";
export const getPolicies: typeof import("./getPolicies").getPolicies = null as any;
export const getPoliciesOutput: typeof import("./getPolicies").getPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getPolicies","getPoliciesOutput"], () => require("./getPolicies"));

export { GetPolicyDocumentArgs, GetPolicyDocumentResult, GetPolicyDocumentOutputArgs } from "./getPolicyDocument";
export const getPolicyDocument: typeof import("./getPolicyDocument").getPolicyDocument = null as any;
export const getPolicyDocumentOutput: typeof import("./getPolicyDocument").getPolicyDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyDocument","getPolicyDocumentOutput"], () => require("./getPolicyDocument"));

export { GetRolePolicyAttachmentsArgs, GetRolePolicyAttachmentsResult, GetRolePolicyAttachmentsOutputArgs } from "./getRolePolicyAttachments";
export const getRolePolicyAttachments: typeof import("./getRolePolicyAttachments").getRolePolicyAttachments = null as any;
export const getRolePolicyAttachmentsOutput: typeof import("./getRolePolicyAttachments").getRolePolicyAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getRolePolicyAttachments","getRolePolicyAttachmentsOutput"], () => require("./getRolePolicyAttachments"));

export { GetRolesArgs, GetRolesResult, GetRolesOutputArgs } from "./getRoles";
export const getRoles: typeof import("./getRoles").getRoles = null as any;
export const getRolesOutput: typeof import("./getRoles").getRolesOutput = null as any;
utilities.lazyLoad(exports, ["getRoles","getRolesOutput"], () => require("./getRoles"));

export { GetSamlProvidersArgs, GetSamlProvidersResult, GetSamlProvidersOutputArgs } from "./getSamlProviders";
export const getSamlProviders: typeof import("./getSamlProviders").getSamlProviders = null as any;
export const getSamlProvidersOutput: typeof import("./getSamlProviders").getSamlProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getSamlProviders","getSamlProvidersOutput"], () => require("./getSamlProviders"));

export { GetSystemPolicysArgs, GetSystemPolicysResult, GetSystemPolicysOutputArgs } from "./getSystemPolicys";
export const getSystemPolicys: typeof import("./getSystemPolicys").getSystemPolicys = null as any;
export const getSystemPolicysOutput: typeof import("./getSystemPolicys").getSystemPolicysOutput = null as any;
utilities.lazyLoad(exports, ["getSystemPolicys","getSystemPolicysOutput"], () => require("./getSystemPolicys"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMembershipArgs, GroupMembershipState } from "./groupMembership";
export type GroupMembership = import("./groupMembership").GroupMembership;
export const GroupMembership: typeof import("./groupMembership").GroupMembership = null as any;
utilities.lazyLoad(exports, ["GroupMembership"], () => require("./groupMembership"));

export { GroupPolicyAttachmentArgs, GroupPolicyAttachmentState } from "./groupPolicyAttachment";
export type GroupPolicyAttachment = import("./groupPolicyAttachment").GroupPolicyAttachment;
export const GroupPolicyAttachment: typeof import("./groupPolicyAttachment").GroupPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["GroupPolicyAttachment"], () => require("./groupPolicyAttachment"));

export { LoginProfileArgs, LoginProfileState } from "./loginProfile";
export type LoginProfile = import("./loginProfile").LoginProfile;
export const LoginProfile: typeof import("./loginProfile").LoginProfile = null as any;
utilities.lazyLoad(exports, ["LoginProfile"], () => require("./loginProfile"));

export { PasswordPolicyArgs, PasswordPolicyState } from "./passwordPolicy";
export type PasswordPolicy = import("./passwordPolicy").PasswordPolicy;
export const PasswordPolicy: typeof import("./passwordPolicy").PasswordPolicy = null as any;
utilities.lazyLoad(exports, ["PasswordPolicy"], () => require("./passwordPolicy"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RoleAttachmentArgs, RoleAttachmentState } from "./roleAttachment";
export type RoleAttachment = import("./roleAttachment").RoleAttachment;
export const RoleAttachment: typeof import("./roleAttachment").RoleAttachment = null as any;
utilities.lazyLoad(exports, ["RoleAttachment"], () => require("./roleAttachment"));

export { RolePolicyAttachmentArgs, RolePolicyAttachmentState } from "./rolePolicyAttachment";
export type RolePolicyAttachment = import("./rolePolicyAttachment").RolePolicyAttachment;
export const RolePolicyAttachment: typeof import("./rolePolicyAttachment").RolePolicyAttachment = null as any;
utilities.lazyLoad(exports, ["RolePolicyAttachment"], () => require("./rolePolicyAttachment"));

export { SamlProviderArgs, SamlProviderState } from "./samlProvider";
export type SamlProvider = import("./samlProvider").SamlProvider;
export const SamlProvider: typeof import("./samlProvider").SamlProvider = null as any;
utilities.lazyLoad(exports, ["SamlProvider"], () => require("./samlProvider"));

export { SecurityPreferenceArgs, SecurityPreferenceState } from "./securityPreference";
export type SecurityPreference = import("./securityPreference").SecurityPreference;
export const SecurityPreference: typeof import("./securityPreference").SecurityPreference = null as any;
utilities.lazyLoad(exports, ["SecurityPreference"], () => require("./securityPreference"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupAttachmentArgs, UserGroupAttachmentState } from "./userGroupAttachment";
export type UserGroupAttachment = import("./userGroupAttachment").UserGroupAttachment;
export const UserGroupAttachment: typeof import("./userGroupAttachment").UserGroupAttachment = null as any;
utilities.lazyLoad(exports, ["UserGroupAttachment"], () => require("./userGroupAttachment"));

export { UserPolicyAttachmentArgs, UserPolicyAttachmentState } from "./userPolicyAttachment";
export type UserPolicyAttachment = import("./userPolicyAttachment").UserPolicyAttachment;
export const UserPolicyAttachment: typeof import("./userPolicyAttachment").UserPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["UserPolicyAttachment"], () => require("./userPolicyAttachment"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:ram/accessKey:AccessKey":
                return new AccessKey(name, <any>undefined, { urn })
            case "alicloud:ram/accountAlias:AccountAlias":
                return new AccountAlias(name, <any>undefined, { urn })
            case "alicloud:ram/accountPasswordPolicy:AccountPasswordPolicy":
                return new AccountPasswordPolicy(name, <any>undefined, { urn })
            case "alicloud:ram/alias:Alias":
                return new Alias(name, <any>undefined, { urn })
            case "alicloud:ram/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "alicloud:ram/groupMembership:GroupMembership":
                return new GroupMembership(name, <any>undefined, { urn })
            case "alicloud:ram/groupPolicyAttachment:GroupPolicyAttachment":
                return new GroupPolicyAttachment(name, <any>undefined, { urn })
            case "alicloud:ram/loginProfile:LoginProfile":
                return new LoginProfile(name, <any>undefined, { urn })
            case "alicloud:ram/passwordPolicy:PasswordPolicy":
                return new PasswordPolicy(name, <any>undefined, { urn })
            case "alicloud:ram/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "alicloud:ram/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "alicloud:ram/roleAttachment:RoleAttachment":
                return new RoleAttachment(name, <any>undefined, { urn })
            case "alicloud:ram/rolePolicyAttachment:RolePolicyAttachment":
                return new RolePolicyAttachment(name, <any>undefined, { urn })
            case "alicloud:ram/samlProvider:SamlProvider":
                return new SamlProvider(name, <any>undefined, { urn })
            case "alicloud:ram/securityPreference:SecurityPreference":
                return new SecurityPreference(name, <any>undefined, { urn })
            case "alicloud:ram/user:User":
                return new User(name, <any>undefined, { urn })
            case "alicloud:ram/userGroupAttachment:UserGroupAttachment":
                return new UserGroupAttachment(name, <any>undefined, { urn })
            case "alicloud:ram/userPolicyAttachment:UserPolicyAttachment":
                return new UserPolicyAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "ram/accessKey", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/accountAlias", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/accountPasswordPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/alias", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/group", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/groupMembership", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/groupPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/loginProfile", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/passwordPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/policy", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/role", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/roleAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/rolePolicyAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/samlProvider", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/securityPreference", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/user", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/userGroupAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "ram/userPolicyAttachment", _module)
