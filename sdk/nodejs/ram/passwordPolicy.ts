// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * RAM Password Policy can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ram/passwordPolicy:PasswordPolicy example <id>.
 * ```
 */
export class PasswordPolicy extends pulumi.CustomResource {
    /**
     * Get an existing PasswordPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PasswordPolicyState, opts?: pulumi.CustomResourceOptions): PasswordPolicy {
        return new PasswordPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ram/passwordPolicy:PasswordPolicy';

    /**
     * Returns true if the given object is an instance of PasswordPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PasswordPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PasswordPolicy.__pulumiType;
    }

    /**
     * Whether to restrict logon after the password expires. Value:
     * - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
     * - false (default): After the password expires, the RAM user can change the password and log on normally.
     */
    declare public readonly hardExpiry: pulumi.Output<boolean | undefined>;
    /**
     * Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
     * Value range: 0~32.
     * Default value: 0, which means that the password retry constraint is not enabled.
     */
    declare public readonly maxLoginAttemps: pulumi.Output<number | undefined>;
    /**
     * Password validity period.
     * Value range: 0~1095. Unit: days.
     * Default value: 0, which means never expires.
     */
    declare public readonly maxPasswordAge: pulumi.Output<number | undefined>;
    /**
     * The minimum number of unique characters in the password.
     * Valid values: 0 to 8.
     * The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
     */
    declare public readonly minimumPasswordDifferentCharacter: pulumi.Output<number | undefined>;
    /**
     * The minimum number of characters in the password.
     * Valid values: 8 to 32. Default value: 8.
     */
    declare public readonly minimumPasswordLength: pulumi.Output<number>;
    /**
     * Whether the user name is not allowed in the password. Value:
     * - true: The password cannot contain the user name.
     * - false (default): The user name can be included in the password.
     */
    declare public readonly passwordNotContainUserName: pulumi.Output<boolean | undefined>;
    /**
     * Historical password check policy.
     * Do not use the previous N Passwords. The value range of N is 0 to 24.
     * Default value: 0, indicating that the historical password check policy is not enabled.
     */
    declare public readonly passwordReusePrevention: pulumi.Output<number | undefined>;
    /**
     * Specifies whether the password must contain lowercase letters. Valid values:
     * - true
     * - false (default)
     */
    declare public readonly requireLowercaseCharacters: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether the password must contain digits. Valid values:
     * - true
     * - false (default)
     */
    declare public readonly requireNumbers: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether the password must contain special characters. Valid values:
     * - true
     * - false (default)
     */
    declare public readonly requireSymbols: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether the password must contain uppercase letters. Valid values:
     * - true
     * - false (default)
     */
    declare public readonly requireUppercaseCharacters: pulumi.Output<boolean | undefined>;

    /**
     * Create a PasswordPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PasswordPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PasswordPolicyArgs | PasswordPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PasswordPolicyState | undefined;
            resourceInputs["hardExpiry"] = state?.hardExpiry;
            resourceInputs["maxLoginAttemps"] = state?.maxLoginAttemps;
            resourceInputs["maxPasswordAge"] = state?.maxPasswordAge;
            resourceInputs["minimumPasswordDifferentCharacter"] = state?.minimumPasswordDifferentCharacter;
            resourceInputs["minimumPasswordLength"] = state?.minimumPasswordLength;
            resourceInputs["passwordNotContainUserName"] = state?.passwordNotContainUserName;
            resourceInputs["passwordReusePrevention"] = state?.passwordReusePrevention;
            resourceInputs["requireLowercaseCharacters"] = state?.requireLowercaseCharacters;
            resourceInputs["requireNumbers"] = state?.requireNumbers;
            resourceInputs["requireSymbols"] = state?.requireSymbols;
            resourceInputs["requireUppercaseCharacters"] = state?.requireUppercaseCharacters;
        } else {
            const args = argsOrState as PasswordPolicyArgs | undefined;
            resourceInputs["hardExpiry"] = args?.hardExpiry;
            resourceInputs["maxLoginAttemps"] = args?.maxLoginAttemps;
            resourceInputs["maxPasswordAge"] = args?.maxPasswordAge;
            resourceInputs["minimumPasswordDifferentCharacter"] = args?.minimumPasswordDifferentCharacter;
            resourceInputs["minimumPasswordLength"] = args?.minimumPasswordLength;
            resourceInputs["passwordNotContainUserName"] = args?.passwordNotContainUserName;
            resourceInputs["passwordReusePrevention"] = args?.passwordReusePrevention;
            resourceInputs["requireLowercaseCharacters"] = args?.requireLowercaseCharacters;
            resourceInputs["requireNumbers"] = args?.requireNumbers;
            resourceInputs["requireSymbols"] = args?.requireSymbols;
            resourceInputs["requireUppercaseCharacters"] = args?.requireUppercaseCharacters;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PasswordPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PasswordPolicy resources.
 */
export interface PasswordPolicyState {
    /**
     * Whether to restrict logon after the password expires. Value:
     * - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
     * - false (default): After the password expires, the RAM user can change the password and log on normally.
     */
    hardExpiry?: pulumi.Input<boolean>;
    /**
     * Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
     * Value range: 0~32.
     * Default value: 0, which means that the password retry constraint is not enabled.
     */
    maxLoginAttemps?: pulumi.Input<number>;
    /**
     * Password validity period.
     * Value range: 0~1095. Unit: days.
     * Default value: 0, which means never expires.
     */
    maxPasswordAge?: pulumi.Input<number>;
    /**
     * The minimum number of unique characters in the password.
     * Valid values: 0 to 8.
     * The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
     */
    minimumPasswordDifferentCharacter?: pulumi.Input<number>;
    /**
     * The minimum number of characters in the password.
     * Valid values: 8 to 32. Default value: 8.
     */
    minimumPasswordLength?: pulumi.Input<number>;
    /**
     * Whether the user name is not allowed in the password. Value:
     * - true: The password cannot contain the user name.
     * - false (default): The user name can be included in the password.
     */
    passwordNotContainUserName?: pulumi.Input<boolean>;
    /**
     * Historical password check policy.
     * Do not use the previous N Passwords. The value range of N is 0 to 24.
     * Default value: 0, indicating that the historical password check policy is not enabled.
     */
    passwordReusePrevention?: pulumi.Input<number>;
    /**
     * Specifies whether the password must contain lowercase letters. Valid values:
     * - true
     * - false (default)
     */
    requireLowercaseCharacters?: pulumi.Input<boolean>;
    /**
     * Specifies whether the password must contain digits. Valid values:
     * - true
     * - false (default)
     */
    requireNumbers?: pulumi.Input<boolean>;
    /**
     * Specifies whether the password must contain special characters. Valid values:
     * - true
     * - false (default)
     */
    requireSymbols?: pulumi.Input<boolean>;
    /**
     * Specifies whether the password must contain uppercase letters. Valid values:
     * - true
     * - false (default)
     */
    requireUppercaseCharacters?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PasswordPolicy resource.
 */
export interface PasswordPolicyArgs {
    /**
     * Whether to restrict logon after the password expires. Value:
     * - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
     * - false (default): After the password expires, the RAM user can change the password and log on normally.
     */
    hardExpiry?: pulumi.Input<boolean>;
    /**
     * Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
     * Value range: 0~32.
     * Default value: 0, which means that the password retry constraint is not enabled.
     */
    maxLoginAttemps?: pulumi.Input<number>;
    /**
     * Password validity period.
     * Value range: 0~1095. Unit: days.
     * Default value: 0, which means never expires.
     */
    maxPasswordAge?: pulumi.Input<number>;
    /**
     * The minimum number of unique characters in the password.
     * Valid values: 0 to 8.
     * The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
     */
    minimumPasswordDifferentCharacter?: pulumi.Input<number>;
    /**
     * The minimum number of characters in the password.
     * Valid values: 8 to 32. Default value: 8.
     */
    minimumPasswordLength?: pulumi.Input<number>;
    /**
     * Whether the user name is not allowed in the password. Value:
     * - true: The password cannot contain the user name.
     * - false (default): The user name can be included in the password.
     */
    passwordNotContainUserName?: pulumi.Input<boolean>;
    /**
     * Historical password check policy.
     * Do not use the previous N Passwords. The value range of N is 0 to 24.
     * Default value: 0, indicating that the historical password check policy is not enabled.
     */
    passwordReusePrevention?: pulumi.Input<number>;
    /**
     * Specifies whether the password must contain lowercase letters. Valid values:
     * - true
     * - false (default)
     */
    requireLowercaseCharacters?: pulumi.Input<boolean>;
    /**
     * Specifies whether the password must contain digits. Valid values:
     * - true
     * - false (default)
     */
    requireNumbers?: pulumi.Input<boolean>;
    /**
     * Specifies whether the password must contain special characters. Valid values:
     * - true
     * - false (default)
     */
    requireSymbols?: pulumi.Input<boolean>;
    /**
     * Specifies whether the password must contain uppercase letters. Valid values:
     * - true
     * - false (default)
     */
    requireUppercaseCharacters?: pulumi.Input<boolean>;
}
