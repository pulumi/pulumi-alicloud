// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a FCV3 Alias resource.
 *
 * Alias for functions.
 *
 * For information about FCV3 Alias and how to use it, see [What is Alias](https://www.alibabacloud.com/help/en/functioncompute/developer-reference/api-fc-2023-03-30-createalias).
 *
 * > **NOTE:** Available since v1.228.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const functionName = config.get("functionName") || "flask-3xdg";
 * const _default = new alicloud.fc.V3Alias("default", {
 *     versionId: "1",
 *     functionName: functionName,
 *     description: "create alias",
 *     aliasName: name,
 *     additionalVersionWeight: {
 *         "2": 0.5,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * FCV3 Alias can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:fc/v3Alias:V3Alias example <function_name>:<alias_name>
 * ```
 */
export class V3Alias extends pulumi.CustomResource {
    /**
     * Get an existing V3Alias resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V3AliasState, opts?: pulumi.CustomResourceOptions): V3Alias {
        return new V3Alias(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:fc/v3Alias:V3Alias';

    /**
     * Returns true if the given object is an instance of V3Alias.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V3Alias {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V3Alias.__pulumiType;
    }

    /**
     * Grayscale version
     */
    public readonly additionalVersionWeight!: pulumi.Output<{[key: string]: number} | undefined>;
    /**
     * Function Alias
     */
    public readonly aliasName!: pulumi.Output<string>;
    /**
     * The creation time of the resource
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Function Name
     */
    public readonly functionName!: pulumi.Output<string>;
    /**
     * The version that the alias points
     */
    public readonly versionId!: pulumi.Output<string | undefined>;

    /**
     * Create a V3Alias resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V3AliasArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V3AliasArgs | V3AliasState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V3AliasState | undefined;
            resourceInputs["additionalVersionWeight"] = state ? state.additionalVersionWeight : undefined;
            resourceInputs["aliasName"] = state ? state.aliasName : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as V3AliasArgs | undefined;
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            resourceInputs["additionalVersionWeight"] = args ? args.additionalVersionWeight : undefined;
            resourceInputs["aliasName"] = args ? args.aliasName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["versionId"] = args ? args.versionId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(V3Alias.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering V3Alias resources.
 */
export interface V3AliasState {
    /**
     * Grayscale version
     */
    additionalVersionWeight?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * Function Alias
     */
    aliasName?: pulumi.Input<string>;
    /**
     * The creation time of the resource
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Function Name
     */
    functionName?: pulumi.Input<string>;
    /**
     * The version that the alias points
     */
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a V3Alias resource.
 */
export interface V3AliasArgs {
    /**
     * Grayscale version
     */
    additionalVersionWeight?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * Function Alias
     */
    aliasName?: pulumi.Input<string>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Function Name
     */
    functionName: pulumi.Input<string>;
    /**
     * The version that the alias points
     */
    versionId?: pulumi.Input<string>;
}
