// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a FCV3 Async Invoke Config resource.
 *
 * Function Asynchronous Configuration.
 *
 * For information about FCV3 Async Invoke Config and how to use it, see [What is Async Invoke Config](https://www.alibabacloud.com/help/en/functioncompute/developer-reference/api-fc-2023-03-30-getasyncinvokeconfig).
 *
 * > **NOTE:** Available since v1.228.0.
 *
 * ## Import
 *
 * FCV3 Async Invoke Config can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:fc/v3AsyncInvokeConfig:V3AsyncInvokeConfig example <id>
 * ```
 */
export class V3AsyncInvokeConfig extends pulumi.CustomResource {
    /**
     * Get an existing V3AsyncInvokeConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V3AsyncInvokeConfigState, opts?: pulumi.CustomResourceOptions): V3AsyncInvokeConfig {
        return new V3AsyncInvokeConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:fc/v3AsyncInvokeConfig:V3AsyncInvokeConfig';

    /**
     * Returns true if the given object is an instance of V3AsyncInvokeConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V3AsyncInvokeConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V3AsyncInvokeConfig.__pulumiType;
    }

    /**
     * Whether to enable an asynchronous task
     */
    public readonly asyncTask!: pulumi.Output<boolean | undefined>;
    /**
     * The creation time of the resource
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Target Configuration See `destinationConfig` below.
     */
    public readonly destinationConfig!: pulumi.Output<outputs.fc.V3AsyncInvokeConfigDestinationConfig | undefined>;
    /**
     * (Available since v1.234.0) Function resource identification
     */
    public /*out*/ readonly functionArn!: pulumi.Output<string>;
    /**
     * Function Name
     */
    public readonly functionName!: pulumi.Output<string>;
    /**
     * (Available since v1.234.0) Last modification time
     */
    public /*out*/ readonly lastModifiedTime!: pulumi.Output<string>;
    /**
     * Event maximum survival time
     */
    public readonly maxAsyncEventAgeInSeconds!: pulumi.Output<number | undefined>;
    /**
     * Number of Asynchronous call retries
     */
    public readonly maxAsyncRetryAttempts!: pulumi.Output<number | undefined>;
    /**
     * Function version or alias
     */
    public readonly qualifier!: pulumi.Output<string | undefined>;

    /**
     * Create a V3AsyncInvokeConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V3AsyncInvokeConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V3AsyncInvokeConfigArgs | V3AsyncInvokeConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V3AsyncInvokeConfigState | undefined;
            resourceInputs["asyncTask"] = state ? state.asyncTask : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["destinationConfig"] = state ? state.destinationConfig : undefined;
            resourceInputs["functionArn"] = state ? state.functionArn : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["lastModifiedTime"] = state ? state.lastModifiedTime : undefined;
            resourceInputs["maxAsyncEventAgeInSeconds"] = state ? state.maxAsyncEventAgeInSeconds : undefined;
            resourceInputs["maxAsyncRetryAttempts"] = state ? state.maxAsyncRetryAttempts : undefined;
            resourceInputs["qualifier"] = state ? state.qualifier : undefined;
        } else {
            const args = argsOrState as V3AsyncInvokeConfigArgs | undefined;
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            resourceInputs["asyncTask"] = args ? args.asyncTask : undefined;
            resourceInputs["destinationConfig"] = args ? args.destinationConfig : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["maxAsyncEventAgeInSeconds"] = args ? args.maxAsyncEventAgeInSeconds : undefined;
            resourceInputs["maxAsyncRetryAttempts"] = args ? args.maxAsyncRetryAttempts : undefined;
            resourceInputs["qualifier"] = args ? args.qualifier : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["functionArn"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(V3AsyncInvokeConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering V3AsyncInvokeConfig resources.
 */
export interface V3AsyncInvokeConfigState {
    /**
     * Whether to enable an asynchronous task
     */
    asyncTask?: pulumi.Input<boolean>;
    /**
     * The creation time of the resource
     */
    createTime?: pulumi.Input<string>;
    /**
     * Target Configuration See `destinationConfig` below.
     */
    destinationConfig?: pulumi.Input<inputs.fc.V3AsyncInvokeConfigDestinationConfig>;
    /**
     * (Available since v1.234.0) Function resource identification
     */
    functionArn?: pulumi.Input<string>;
    /**
     * Function Name
     */
    functionName?: pulumi.Input<string>;
    /**
     * (Available since v1.234.0) Last modification time
     */
    lastModifiedTime?: pulumi.Input<string>;
    /**
     * Event maximum survival time
     */
    maxAsyncEventAgeInSeconds?: pulumi.Input<number>;
    /**
     * Number of Asynchronous call retries
     */
    maxAsyncRetryAttempts?: pulumi.Input<number>;
    /**
     * Function version or alias
     */
    qualifier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a V3AsyncInvokeConfig resource.
 */
export interface V3AsyncInvokeConfigArgs {
    /**
     * Whether to enable an asynchronous task
     */
    asyncTask?: pulumi.Input<boolean>;
    /**
     * Target Configuration See `destinationConfig` below.
     */
    destinationConfig?: pulumi.Input<inputs.fc.V3AsyncInvokeConfigDestinationConfig>;
    /**
     * Function Name
     */
    functionName: pulumi.Input<string>;
    /**
     * Event maximum survival time
     */
    maxAsyncEventAgeInSeconds?: pulumi.Input<number>;
    /**
     * Number of Asynchronous call retries
     */
    maxAsyncRetryAttempts?: pulumi.Input<number>;
    /**
     * Function version or alias
     */
    qualifier?: pulumi.Input<string>;
}
