// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AliasArgs, AliasState } from "./alias";
export type Alias = import("./alias").Alias;
export const Alias: typeof import("./alias").Alias = null as any;
utilities.lazyLoad(exports, ["Alias"], () => require("./alias"));

export { CustomDomainArgs, CustomDomainState } from "./customDomain";
export type CustomDomain = import("./customDomain").CustomDomain;
export const CustomDomain: typeof import("./customDomain").CustomDomain = null as any;
utilities.lazyLoad(exports, ["CustomDomain"], () => require("./customDomain"));

export { FunctionArgs, FunctionState } from "./function";
export type Function = import("./function").Function;
export const Function: typeof import("./function").Function = null as any;
utilities.lazyLoad(exports, ["Function"], () => require("./function"));

export { FunctionAsyncInvokeConfigArgs, FunctionAsyncInvokeConfigState } from "./functionAsyncInvokeConfig";
export type FunctionAsyncInvokeConfig = import("./functionAsyncInvokeConfig").FunctionAsyncInvokeConfig;
export const FunctionAsyncInvokeConfig: typeof import("./functionAsyncInvokeConfig").FunctionAsyncInvokeConfig = null as any;
utilities.lazyLoad(exports, ["FunctionAsyncInvokeConfig"], () => require("./functionAsyncInvokeConfig"));

export { GetCustomDomainsArgs, GetCustomDomainsResult, GetCustomDomainsOutputArgs } from "./getCustomDomains";
export const getCustomDomains: typeof import("./getCustomDomains").getCustomDomains = null as any;
export const getCustomDomainsOutput: typeof import("./getCustomDomains").getCustomDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getCustomDomains","getCustomDomainsOutput"], () => require("./getCustomDomains"));

export { GetFunctionsArgs, GetFunctionsResult, GetFunctionsOutputArgs } from "./getFunctions";
export const getFunctions: typeof import("./getFunctions").getFunctions = null as any;
export const getFunctionsOutput: typeof import("./getFunctions").getFunctionsOutput = null as any;
utilities.lazyLoad(exports, ["getFunctions","getFunctionsOutput"], () => require("./getFunctions"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetServicesArgs, GetServicesResult, GetServicesOutputArgs } from "./getServices";
export const getServices: typeof import("./getServices").getServices = null as any;
export const getServicesOutput: typeof import("./getServices").getServicesOutput = null as any;
utilities.lazyLoad(exports, ["getServices","getServicesOutput"], () => require("./getServices"));

export { GetTriggersArgs, GetTriggersResult, GetTriggersOutputArgs } from "./getTriggers";
export const getTriggers: typeof import("./getTriggers").getTriggers = null as any;
export const getTriggersOutput: typeof import("./getTriggers").getTriggersOutput = null as any;
utilities.lazyLoad(exports, ["getTriggers","getTriggersOutput"], () => require("./getTriggers"));

export { GetV3TriggersArgs, GetV3TriggersResult, GetV3TriggersOutputArgs } from "./getV3Triggers";
export const getV3Triggers: typeof import("./getV3Triggers").getV3Triggers = null as any;
export const getV3TriggersOutput: typeof import("./getV3Triggers").getV3TriggersOutput = null as any;
utilities.lazyLoad(exports, ["getV3Triggers","getV3TriggersOutput"], () => require("./getV3Triggers"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { LayerVersionArgs, LayerVersionState } from "./layerVersion";
export type LayerVersion = import("./layerVersion").LayerVersion;
export const LayerVersion: typeof import("./layerVersion").LayerVersion = null as any;
utilities.lazyLoad(exports, ["LayerVersion"], () => require("./layerVersion"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { TriggerArgs, TriggerState } from "./trigger";
export type Trigger = import("./trigger").Trigger;
export const Trigger: typeof import("./trigger").Trigger = null as any;
utilities.lazyLoad(exports, ["Trigger"], () => require("./trigger"));

export { V2FunctionArgs, V2FunctionState } from "./v2function";
export type V2Function = import("./v2function").V2Function;
export const V2Function: typeof import("./v2function").V2Function = null as any;
utilities.lazyLoad(exports, ["V2Function"], () => require("./v2function"));

export { V3AliasArgs, V3AliasState } from "./v3alias";
export type V3Alias = import("./v3alias").V3Alias;
export const V3Alias: typeof import("./v3alias").V3Alias = null as any;
utilities.lazyLoad(exports, ["V3Alias"], () => require("./v3alias"));

export { V3AsyncInvokeConfigArgs, V3AsyncInvokeConfigState } from "./v3asyncInvokeConfig";
export type V3AsyncInvokeConfig = import("./v3asyncInvokeConfig").V3AsyncInvokeConfig;
export const V3AsyncInvokeConfig: typeof import("./v3asyncInvokeConfig").V3AsyncInvokeConfig = null as any;
utilities.lazyLoad(exports, ["V3AsyncInvokeConfig"], () => require("./v3asyncInvokeConfig"));

export { V3ConcurrencyConfigArgs, V3ConcurrencyConfigState } from "./v3concurrencyConfig";
export type V3ConcurrencyConfig = import("./v3concurrencyConfig").V3ConcurrencyConfig;
export const V3ConcurrencyConfig: typeof import("./v3concurrencyConfig").V3ConcurrencyConfig = null as any;
utilities.lazyLoad(exports, ["V3ConcurrencyConfig"], () => require("./v3concurrencyConfig"));

export { V3CustomDomainArgs, V3CustomDomainState } from "./v3customDomain";
export type V3CustomDomain = import("./v3customDomain").V3CustomDomain;
export const V3CustomDomain: typeof import("./v3customDomain").V3CustomDomain = null as any;
utilities.lazyLoad(exports, ["V3CustomDomain"], () => require("./v3customDomain"));

export { V3FunctionArgs, V3FunctionState } from "./v3function";
export type V3Function = import("./v3function").V3Function;
export const V3Function: typeof import("./v3function").V3Function = null as any;
utilities.lazyLoad(exports, ["V3Function"], () => require("./v3function"));

export { V3FunctionVersionArgs, V3FunctionVersionState } from "./v3functionVersion";
export type V3FunctionVersion = import("./v3functionVersion").V3FunctionVersion;
export const V3FunctionVersion: typeof import("./v3functionVersion").V3FunctionVersion = null as any;
utilities.lazyLoad(exports, ["V3FunctionVersion"], () => require("./v3functionVersion"));

export { V3LayerVersionArgs, V3LayerVersionState } from "./v3layerVersion";
export type V3LayerVersion = import("./v3layerVersion").V3LayerVersion;
export const V3LayerVersion: typeof import("./v3layerVersion").V3LayerVersion = null as any;
utilities.lazyLoad(exports, ["V3LayerVersion"], () => require("./v3layerVersion"));

export { V3ProvisionConfigArgs, V3ProvisionConfigState } from "./v3provisionConfig";
export type V3ProvisionConfig = import("./v3provisionConfig").V3ProvisionConfig;
export const V3ProvisionConfig: typeof import("./v3provisionConfig").V3ProvisionConfig = null as any;
utilities.lazyLoad(exports, ["V3ProvisionConfig"], () => require("./v3provisionConfig"));

export { V3TriggerArgs, V3TriggerState } from "./v3trigger";
export type V3Trigger = import("./v3trigger").V3Trigger;
export const V3Trigger: typeof import("./v3trigger").V3Trigger = null as any;
utilities.lazyLoad(exports, ["V3Trigger"], () => require("./v3trigger"));

export { V3VpcBindingArgs, V3VpcBindingState } from "./v3vpcBinding";
export type V3VpcBinding = import("./v3vpcBinding").V3VpcBinding;
export const V3VpcBinding: typeof import("./v3vpcBinding").V3VpcBinding = null as any;
utilities.lazyLoad(exports, ["V3VpcBinding"], () => require("./v3vpcBinding"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:fc/alias:Alias":
                return new Alias(name, <any>undefined, { urn })
            case "alicloud:fc/customDomain:CustomDomain":
                return new CustomDomain(name, <any>undefined, { urn })
            case "alicloud:fc/function:Function":
                return new Function(name, <any>undefined, { urn })
            case "alicloud:fc/functionAsyncInvokeConfig:FunctionAsyncInvokeConfig":
                return new FunctionAsyncInvokeConfig(name, <any>undefined, { urn })
            case "alicloud:fc/layerVersion:LayerVersion":
                return new LayerVersion(name, <any>undefined, { urn })
            case "alicloud:fc/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "alicloud:fc/trigger:Trigger":
                return new Trigger(name, <any>undefined, { urn })
            case "alicloud:fc/v2Function:V2Function":
                return new V2Function(name, <any>undefined, { urn })
            case "alicloud:fc/v3Alias:V3Alias":
                return new V3Alias(name, <any>undefined, { urn })
            case "alicloud:fc/v3AsyncInvokeConfig:V3AsyncInvokeConfig":
                return new V3AsyncInvokeConfig(name, <any>undefined, { urn })
            case "alicloud:fc/v3ConcurrencyConfig:V3ConcurrencyConfig":
                return new V3ConcurrencyConfig(name, <any>undefined, { urn })
            case "alicloud:fc/v3CustomDomain:V3CustomDomain":
                return new V3CustomDomain(name, <any>undefined, { urn })
            case "alicloud:fc/v3Function:V3Function":
                return new V3Function(name, <any>undefined, { urn })
            case "alicloud:fc/v3FunctionVersion:V3FunctionVersion":
                return new V3FunctionVersion(name, <any>undefined, { urn })
            case "alicloud:fc/v3LayerVersion:V3LayerVersion":
                return new V3LayerVersion(name, <any>undefined, { urn })
            case "alicloud:fc/v3ProvisionConfig:V3ProvisionConfig":
                return new V3ProvisionConfig(name, <any>undefined, { urn })
            case "alicloud:fc/v3Trigger:V3Trigger":
                return new V3Trigger(name, <any>undefined, { urn })
            case "alicloud:fc/v3VpcBinding:V3VpcBinding":
                return new V3VpcBinding(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "fc/alias", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/customDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/function", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/functionAsyncInvokeConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/layerVersion", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/service", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/trigger", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/v2Function", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/v3Alias", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/v3AsyncInvokeConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/v3ConcurrencyConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/v3CustomDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/v3Function", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/v3FunctionVersion", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/v3LayerVersion", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/v3ProvisionConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/v3Trigger", _module)
pulumi.runtime.registerResourceModule("alicloud", "fc/v3VpcBinding", _module)
