// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a FCV3 Custom Domain resource.
 *
 * Custom Domain names allow users to access FC functions through custom domain names, providing convenience for building Web services using function compute.
 * You can bind a custom domain name to Function Compute and set different paths to different functions of different services.
 *
 * For information about FCV3 Custom Domain and how to use it, see [What is Custom Domain](https://www.alibabacloud.com/help/en/functioncompute/developer-reference/api-fc-2023-03-30-getcustomdomain).
 *
 * > **NOTE:** This content is a technical preview, and should not be relied on in a production environment.
 *
 * > **NOTE:** Available since v1.228.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "flask-6ew9.fcv3.1511928242963727.cn-shanghai.fc.devsapp.net";
 * const functionName1 = config.get("functionName1") || "terraform-custom-domain-t1";
 * const authConfig = config.get("authConfig") || `{
 *     "jwks": {
 *         "keys": [
 *             {
 *                 "p": "8AdUVeldoE4LueFuzEF_C8tvJ7NhlkzS58Gz9KJTPXPr5DADSUVLWJCr5OdFE79q513SneT0UhGo-JfQ1lNMoNv5-YZ1AxIo9fZUEPIe-KyX9ttaglpzCAUE3TeKdm5J-_HZQzBPKbyUwJHAILNgB2-4IBZZwK7LAfbmfi9TmFM",
 *                 "kty": "RSA",
 *                 "q": "x8m5ydXwC8AAp9I-hOnUAx6yQJz1Nx-jXPCfn--XdHpJuNcuwRQsuUCSRQs_h3SoCI3qZZdzswQnPrtHFxgUJtQFuMj-QZpyMnebDb81rmczl2KPVUtaVDVagJEF6U9Ov3PfrLhvHUEv5u7p6s4Z6maBUaByfFlhEVPv4_ao8Us",
 *                 "d": "bjIQAKD2e65gwJ38_Sqq_EmLFuMMey3gjDv1bSCHFH8fyONJTq-utrZfvspz6EegRwW2mSHW9kq87hRwIBW9y7ED5N4KG5gHDjyh57BRE0SKv0Dz1igtKLyp-nl8-aHc1DbONwr1d7tZfFt255TxIN8cPTakXOp2Av_ztql_JotVUGK8eHmXNJFlvq5tc180sKWMHNSNsCUhQgcB1TWb_gwcqxdsIWPsLZI491XKeTGQ98J7z5h6R1cTC97lfJZ0vNtJahd2jHd3WfTUDj5-untMKyZpYYak2Vr8xtFz8H6Q5Rsz8uX_7gtEqYH2CMjPdbXcebrnD1igRSJMYiP0lQ",
 *                 "e": "AQAB",
 *                 "use": "sig",
 *                 "qi": "MTCCRu8AcvvjbHms7V_sDFO7wX0YNyvOJAAbuTmHvQbJ0NDeDta-f-hi8cjkMk7Fpk2hej158E5gDyO62UG99wHZSbmHT34MvIdmhQ5mnbL-5KK9rxde0nayO1ebGepD_GJThPAg9iskzeWpCg5X2etNo2bHoG_ZLQGXj2BQ1VM",
 *                 "dp": "J4_ttKNcTTnP8PlZO81n1VfYoGCOqylKceyZbq76rVxX-yp2wDLtslFWI8qCtjiMtEnglynPo19JzH-pakocjT70us4Qp0rs-W16ebiOpko8WfHZvzaNUzsQjC3FYrPW-fHo74wc4DI3Cm57jmhCYbdmT9OfQ4UL7Oz3HMFMNAU",
 *                 "alg": "RS256",
 *                 "dq": "H4-VgvYB-sk1EU3cRIDv1iJWRHDHKBMeaoM0pD5kLalX1hRgNW4rdoRl1vRk79AU720D11Kqm2APlxBctaA_JrcdxEg0KkbsvV45p11KbKeu9b5DKFVECsN27ZJ7XZUCuqnibtWf7_4pRBD_8PDoFShmS2_ORiiUdflNjzSbEas",
 *                 "n": "u1LWgoomekdOMfB1lEe96OHehd4XRNCbZRm96RqwOYTTc28Sc_U5wKV2umDzolfoI682ct2BNnRRahYgZPhbOCzHYM6i8sRXjz9Ghx3QHw9zrYACtArwQxrTFiejbfzDPGdPrMQg7T8wjtLtkSyDmCzeXpbIdwmxuLyt_ahLfHelr94kEksMDa42V4Fi5bMW4cCLjlEKzBEHGmFdT8UbLPCvpgsM84JK63e5ifdeI9NdadbC8ZMiR--dFCujT7AgRRyMzxgdn2l-nZJ2ZaYzbLUtAW5_U2kfRVkDNa8d1g__2V5zjU6nfLJ1S2MoXMgRgDPeHpEehZVu2kNaSFvDUQ"
 *             }
 *         ]
 *     },
 *     "tokenLookup": "header:auth",
 *     "claimPassBy": "header:name:name"
 * }
 * `;
 * const certificate = config.get("certificate") || `-----BEGIN CERTIFICATE-----
 * MIIDRjCCAq+gAwIBAgIJAJn3ox4K13PoMA0GCSqGSIb3DQEBBQUAMHYxCzAJBgNV
 * BAYTAkNOMQswCQYDVQQIEwJCSjELMAkGA1UEBxMCQkoxDDAKBgNVBAoTA0FMSTEP
 * MA0GA1UECxMGQUxJWVVOMQ0wCwYDVQQDEwR0ZXN0MR8wHQYJKoZIhvcNAQkBFhB0
 * ZXN0QGhvdG1haWwuY29tMB4XDTE0MTEyNDA2MDQyNVoXDTI0MTEyMTA2MDQyNVow
 * djELMAkGA1UEBhMCQ04xCzAJBgNVBAgTAkJKMQswCQYDVQQHEwJCSjEMMAoGA1UE
 * ChMDQUxJMQ8wDQYDVQQLEwZBTElZVU4xDTALBgNVBAMTBHRlc3QxHzAdBgkqhkiG
 * 9w0BCQEWEHRlc3RAaG90bWFpbC5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ
 * AoGBAM7SS3e9+Nj0HKAsRuIDNSsS3UK6b+62YQb2uuhKrp1HMrOx61WSDR2qkAnB
 * coG00Uz38EE+9DLYNUVQBK7aSgLP5M1Ak4wr4GqGyCgjejzzh3DshUzLCCy2rook
 * KOyRTlPX+Q5l7rE1fcSNzgepcae5i2sE1XXXzLRIDIvQxcspAgMBAAGjgdswgdgw
 * HQYDVR0OBBYEFBdy+OuMsvbkV7R14f0OyoLoh2z4MIGoBgNVHSMEgaAwgZ2AFBdy
 * +OuMsvbkV7R14f0OyoLoh2z4oXqkeDB2MQswCQYDVQQGEwJDTjELMAkGA1UECBMC
 * QkoxCzAJBgNVBAcTAkJKMQwwCgYDVQQKEwNBTEkxDzANBgNVBAsTBkFMSVlVTjEN
 * MAsGA1UEAxMEdGVzdDEfMB0GCSqGSIb3DQEJARYQdGVzdEBob3RtYWlsLmNvbYIJ
 * AJn3ox4K13PoMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADgYEAY7KOsnyT
 * cQzfhiiG7ASjiPakw5wXoycHt5GCvLG5htp2TKVzgv9QTliA3gtfv6oV4zRZx7X1
 * Ofi6hVgErtHaXJheuPVeW6eAW8mHBoEfvDAfU3y9waYrtUevSl07643bzKL6v+Qd
 * DUBTxOAvSYfXTtI90EAxEG/bJJyOm5LqoiA=
 * -----END CERTIFICATE-----
 * `;
 * const privateKey = config.get("privateKey") || `-----BEGIN RSA PRIVATE KEY-----
 * MIICXAIBAAKBgQDO0kt3vfjY9BygLEbiAzUrEt1Cum/utmEG9rroSq6dRzKzsetV
 * kg0dqpAJwXKBtNFM9/BBPvQy2DVFUASu2koCz+TNQJOMK+BqhsgoI3o884dw7IVM
 * ywgstq6KJCjskU5T1/kOZe6xNX3Ejc4HqXGnuYtrBNV118y0SAyL0MXLKQIDAQAB
 * AoGAfe3NxbsGKhN42o4bGsKZPQDfeCHMxayGp5bTd10BtQIE/ST4BcJH+ihAS7Bd
 * 6FwQlKzivNd4GP1MckemklCXfsVckdL94e8ZbJl23GdWul3v8V+KndJHqv5zVJmP
 * hwWoKimwIBTb2s0ctVryr2f18N4hhyFw1yGp0VxclGHkjgECQQD9CvllsnOwHpP4
 * MdrDHbdb29QrobKyKW8pPcDd+sth+kP6Y8MnCVuAKXCKj5FeIsgVtfluPOsZjPzz
 * 71QQWS1dAkEA0T0KXO8gaBQwJhIoo/w6hy5JGZnrNSpOPp5xvJuMAafs2eyvmhJm
 * Ev9SN/Pf2VYa1z6FEnBaLOVD6hf6YQIsPQJAX/CZPoW6dzwgvimo1/GcY6eleiWE
 * qygqjWhsh71e/3bz7yuEAnj5yE3t7Zshcp+dXR3xxGo0eSuLfLFxHgGxwQJAAxf8
 * 9DzQ5NkPkTCJi0sqbl8/03IUKTgT6hcbpWdDXa7m8J3wRr3o5nUB+TPQ5nzAbthM
 * zWX931YQeACcwhxvHQJBAN5mTzzJD4w4Ma6YTaNHyXakdYfyAWrOkPIWZxfhMfXe
 * DrlNdiysTI4Dd1dLeErVpjsckAaOW/JDG5PCSwkaMxk=
 * -----END RSA PRIVATE KEY-----
 * `;
 * const _default = new alicloud.fc.V3CustomDomain("default", {
 *     customDomainName: "flask-6ew9.fcv3.1511928242963727.cn-shanghai.fc.devsapp.net",
 *     routeConfig: {
 *         routes: [
 *             {
 *                 functionName: functionName1,
 *                 rewriteConfig: {
 *                     regexRules: [
 *                         {
 *                             match: "/api/*",
 *                             replacement: "$1",
 *                         },
 *                         {
 *                             match: "/api1/*",
 *                             replacement: "$1",
 *                         },
 *                         {
 *                             match: "/api2/*",
 *                             replacement: "$1",
 *                         },
 *                     ],
 *                     wildcardRules: [
 *                         {
 *                             match: "^/api1/.+?/(.*)",
 *                             replacement: "/api/v1/$1",
 *                         },
 *                         {
 *                             match: "^/api2/.+?/(.*)",
 *                             replacement: "/api/v2/$1",
 *                         },
 *                         {
 *                             match: "^/api2/.+?/(.*)",
 *                             replacement: "/api/v3/$1",
 *                         },
 *                     ],
 *                     equalRules: [
 *                         {
 *                             match: "/old",
 *                             replacement: "/new",
 *                         },
 *                         {
 *                             replacement: "/new1",
 *                             match: "/old1",
 *                         },
 *                         {
 *                             match: "/old2",
 *                             replacement: "/new2",
 *                         },
 *                     ],
 *                 },
 *                 methods: [
 *                     "GET",
 *                     "POST",
 *                     "DELETE",
 *                     "HEAD",
 *                 ],
 *                 path: "/a",
 *                 qualifier: "LATEST",
 *             },
 *             {
 *                 functionName: functionName1,
 *                 methods: ["GET"],
 *                 path: "/b",
 *                 qualifier: "LATEST",
 *             },
 *             {
 *                 functionName: functionName1,
 *                 methods: ["POST"],
 *                 path: "/c",
 *                 qualifier: "1",
 *             },
 *         ],
 *     },
 *     authConfig: {
 *         authType: "jwt",
 *         authInfo: authConfig,
 *     },
 *     protocol: "HTTP,HTTPS",
 *     certConfig: {
 *         certName: "cert-name",
 *         certificate: certificate,
 *         privateKey: privateKey,
 *     },
 *     tlsConfig: {
 *         cipherSuites: [
 *             "TLS_RSA_WITH_AES_128_CBC_SHA",
 *             "TLS_RSA_WITH_AES_256_CBC_SHA",
 *             "TLS_RSA_WITH_AES_128_GCM_SHA256",
 *             "TLS_RSA_WITH_AES_256_GCM_SHA384",
 *         ],
 *         maxVersion: "TLSv1.3",
 *         minVersion: "TLSv1.0",
 *     },
 *     wafConfig: {
 *         enableWaf: false,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * FCV3 Custom Domain can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:fc/v3CustomDomain:V3CustomDomain example <id>
 * ```
 */
export class V3CustomDomain extends pulumi.CustomResource {
    /**
     * Get an existing V3CustomDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V3CustomDomainState, opts?: pulumi.CustomResourceOptions): V3CustomDomain {
        return new V3CustomDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:fc/v3CustomDomain:V3CustomDomain';

    /**
     * Returns true if the given object is an instance of V3CustomDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V3CustomDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V3CustomDomain.__pulumiType;
    }

    /**
     * Permission authentication configuration See `authConfig` below.
     */
    public readonly authConfig!: pulumi.Output<outputs.fc.V3CustomDomainAuthConfig | undefined>;
    /**
     * HTTPS certificate information See `certConfig` below.
     */
    public readonly certConfig!: pulumi.Output<outputs.fc.V3CustomDomainCertConfig | undefined>;
    /**
     * The creation time of the resource
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public readonly customDomainName!: pulumi.Output<string>;
    /**
     * The protocol type supported by the domain name. HTTP: only HTTP protocol is supported. HTTPS: only HTTPS is supported. HTTP,HTTPS: Supports HTTP and HTTPS protocols.
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Route matching rule configuration See `routeConfig` below.
     */
    public readonly routeConfig!: pulumi.Output<outputs.fc.V3CustomDomainRouteConfig | undefined>;
    /**
     * TLS configuration information See `tlsConfig` below.
     */
    public readonly tlsConfig!: pulumi.Output<outputs.fc.V3CustomDomainTlsConfig | undefined>;
    /**
     * Web application firewall configuration information See `wafConfig` below.
     */
    public readonly wafConfig!: pulumi.Output<outputs.fc.V3CustomDomainWafConfig | undefined>;

    /**
     * Create a V3CustomDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: V3CustomDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V3CustomDomainArgs | V3CustomDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V3CustomDomainState | undefined;
            resourceInputs["authConfig"] = state ? state.authConfig : undefined;
            resourceInputs["certConfig"] = state ? state.certConfig : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["customDomainName"] = state ? state.customDomainName : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["routeConfig"] = state ? state.routeConfig : undefined;
            resourceInputs["tlsConfig"] = state ? state.tlsConfig : undefined;
            resourceInputs["wafConfig"] = state ? state.wafConfig : undefined;
        } else {
            const args = argsOrState as V3CustomDomainArgs | undefined;
            resourceInputs["authConfig"] = args ? args.authConfig : undefined;
            resourceInputs["certConfig"] = args ? args.certConfig : undefined;
            resourceInputs["customDomainName"] = args ? args.customDomainName : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["routeConfig"] = args ? args.routeConfig : undefined;
            resourceInputs["tlsConfig"] = args ? args.tlsConfig : undefined;
            resourceInputs["wafConfig"] = args ? args.wafConfig : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(V3CustomDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering V3CustomDomain resources.
 */
export interface V3CustomDomainState {
    /**
     * Permission authentication configuration See `authConfig` below.
     */
    authConfig?: pulumi.Input<inputs.fc.V3CustomDomainAuthConfig>;
    /**
     * HTTPS certificate information See `certConfig` below.
     */
    certConfig?: pulumi.Input<inputs.fc.V3CustomDomainCertConfig>;
    /**
     * The creation time of the resource
     */
    createTime?: pulumi.Input<string>;
    /**
     * The name of the resource
     */
    customDomainName?: pulumi.Input<string>;
    /**
     * The protocol type supported by the domain name. HTTP: only HTTP protocol is supported. HTTPS: only HTTPS is supported. HTTP,HTTPS: Supports HTTP and HTTPS protocols.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Route matching rule configuration See `routeConfig` below.
     */
    routeConfig?: pulumi.Input<inputs.fc.V3CustomDomainRouteConfig>;
    /**
     * TLS configuration information See `tlsConfig` below.
     */
    tlsConfig?: pulumi.Input<inputs.fc.V3CustomDomainTlsConfig>;
    /**
     * Web application firewall configuration information See `wafConfig` below.
     */
    wafConfig?: pulumi.Input<inputs.fc.V3CustomDomainWafConfig>;
}

/**
 * The set of arguments for constructing a V3CustomDomain resource.
 */
export interface V3CustomDomainArgs {
    /**
     * Permission authentication configuration See `authConfig` below.
     */
    authConfig?: pulumi.Input<inputs.fc.V3CustomDomainAuthConfig>;
    /**
     * HTTPS certificate information See `certConfig` below.
     */
    certConfig?: pulumi.Input<inputs.fc.V3CustomDomainCertConfig>;
    /**
     * The name of the resource
     */
    customDomainName?: pulumi.Input<string>;
    /**
     * The protocol type supported by the domain name. HTTP: only HTTP protocol is supported. HTTPS: only HTTPS is supported. HTTP,HTTPS: Supports HTTP and HTTPS protocols.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Route matching rule configuration See `routeConfig` below.
     */
    routeConfig?: pulumi.Input<inputs.fc.V3CustomDomainRouteConfig>;
    /**
     * TLS configuration information See `tlsConfig` below.
     */
    tlsConfig?: pulumi.Input<inputs.fc.V3CustomDomainTlsConfig>;
    /**
     * Web application firewall configuration information See `wafConfig` below.
     */
    wafConfig?: pulumi.Input<inputs.fc.V3CustomDomainWafConfig>;
}
