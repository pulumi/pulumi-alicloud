// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an asynchronous invocation configuration for a FC Function or Alias.\
 *  For the detailed information, please refer to the [developer guide](https://www.alibabacloud.com/help/en/fc/developer-reference/api-fc-open-2021-04-06-putfunctionasyncinvokeconfig).
 *
 * > **NOTE:** Available since v1.100.0.
 *
 * ## Example Usage
 *
 * ### Destination Configuration
 *
 * > **NOTE** Ensure the FC Function RAM Role has necessary permissions for the destination, such as `mns:SendMessage`, `mns:PublishMessage` or `fc:InvokeFunction`, otherwise the API will return a generic error.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const _default = alicloud.getAccount({});
 * const defaultGetRegions = alicloud.getRegions({
 *     current: true,
 * });
 * const defaultInteger = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const defaultRole = new alicloud.ram.Role("default", {
 *     name: `examplerole${defaultInteger.result}`,
 *     document: `\\t{
 * \\t\\t\\"Statement\\": [
 * \\t\\t  {
 * \\t\\t\\t\\"Action\\": \\"sts:AssumeRole\\",
 * \\t\\t\\t\\"Effect\\": \\"Allow\\",
 * \\t\\t\\t\\"Principal\\": {
 * \\t\\t\\t  \\"Service\\": [
 * \\t\\t\\t\\t\\"fc.aliyuncs.com\\"
 * \\t\\t\\t  ]
 * \\t\\t\\t}
 * \\t\\t  }
 * \\t\\t],
 * \\t\\t\\"Version\\": \\"1\\"
 * \\t}
 * `,
 *     description: "this is a example",
 *     force: true,
 * });
 * const defaultPolicy = new alicloud.ram.Policy("default", {
 *     policyName: `examplepolicy${defaultInteger.result}`,
 *     policyDocument: `\\t{
 * \\t\\t\\"Version\\": \\"1\\",
 * \\t\\t\\"Statement\\": [
 * \\t\\t  {
 * \\t\\t\\t\\"Action\\": \\"mns:*\\",
 * \\t\\t\\t\\"Resource\\": \\"*\\",
 * \\t\\t\\t\\"Effect\\": \\"Allow\\"
 * \\t\\t  }
 * \\t\\t]
 * \\t  }
 * `,
 * });
 * const defaultRolePolicyAttachment = new alicloud.ram.RolePolicyAttachment("default", {
 *     roleName: defaultRole.name,
 *     policyName: defaultPolicy.policyName,
 *     policyType: "Custom",
 * });
 * const defaultService = new alicloud.fc.Service("default", {
 *     name: `example-value-${defaultInteger.result}`,
 *     description: "example-value",
 *     role: defaultRole.arn,
 *     internetAccess: false,
 * });
 * const defaultBucket = new alicloud.oss.Bucket("default", {bucket: `terraform-example-${defaultInteger.result}`});
 * // If you upload the function by OSS Bucket, you need to specify path can't upload by content.
 * const defaultBucketObject = new alicloud.oss.BucketObject("default", {
 *     bucket: defaultBucket.id,
 *     key: "index.py",
 *     content: `import logging 
 * def handler(event, context): 
 * logger = logging.getLogger() 
 * logger.info('hello world') 
 * return 'hello world'`,
 * });
 * const defaultFunction = new alicloud.fc.Function("default", {
 *     service: defaultService.name,
 *     name: `terraform-example-${defaultInteger.result}`,
 *     description: "example",
 *     ossBucket: defaultBucket.id,
 *     ossKey: defaultBucketObject.key,
 *     memorySize: 512,
 *     runtime: "python3.10",
 *     handler: "hello.handler",
 * });
 * const defaultQueue = new alicloud.mns.Queue("default", {name: `terraform-example-${defaultInteger.result}`});
 * const defaultTopic = new alicloud.mns.Topic("default", {name: `terraform-example-${defaultInteger.result}`});
 * const defaultFunctionAsyncInvokeConfig = new alicloud.fc.FunctionAsyncInvokeConfig("default", {
 *     serviceName: defaultService.name,
 *     functionName: defaultFunction.name,
 *     destinationConfig: {
 *         onFailure: {
 *             destination: pulumi.all([defaultGetRegions, _default, defaultQueue.name]).apply(([defaultGetRegions, _default, name]) => `acs:mns:${defaultGetRegions.regions?.[0]?.id}:${_default.id}:/queues/${name}/messages`),
 *         },
 *         onSuccess: {
 *             destination: pulumi.all([defaultGetRegions, _default, defaultTopic.name]).apply(([defaultGetRegions, _default, name]) => `acs:mns:${defaultGetRegions.regions?.[0]?.id}:${_default.id}:/topics/${name}/messages`),
 *         },
 *     },
 *     maximumEventAgeInSeconds: 60,
 *     maximumRetryAttempts: 0,
 *     statefulInvocation: true,
 *     qualifier: "LATEST",
 * });
 * ```
 *
 * ## Import
 *
 * Function Compute Function Async Invoke Configs can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:fc/functionAsyncInvokeConfig:FunctionAsyncInvokeConfig example my_function
 * ```
 */
export class FunctionAsyncInvokeConfig extends pulumi.CustomResource {
    /**
     * Get an existing FunctionAsyncInvokeConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionAsyncInvokeConfigState, opts?: pulumi.CustomResourceOptions): FunctionAsyncInvokeConfig {
        return new FunctionAsyncInvokeConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:fc/functionAsyncInvokeConfig:FunctionAsyncInvokeConfig';

    /**
     * Returns true if the given object is an instance of FunctionAsyncInvokeConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionAsyncInvokeConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionAsyncInvokeConfig.__pulumiType;
    }

    /**
     * The date this resource was created.
     */
    declare public /*out*/ readonly createdTime: pulumi.Output<string>;
    /**
     * Configuration block with destination configuration. See `destinationConfig` below.
     */
    declare public readonly destinationConfig: pulumi.Output<outputs.fc.FunctionAsyncInvokeConfigDestinationConfig | undefined>;
    /**
     * Name of the Function Compute Function.
     */
    declare public readonly functionName: pulumi.Output<string>;
    /**
     * The date this resource was last modified.
     */
    declare public /*out*/ readonly lastModifiedTime: pulumi.Output<string>;
    /**
     * Maximum age of a request that Function Compute sends to a function for processing in seconds. Valid values between 1 and 2592000 (between 60 and 21600 before v1.167.0).
     */
    declare public readonly maximumEventAgeInSeconds: pulumi.Output<number | undefined>;
    /**
     * Maximum number of times to retry when the function returns an error. Valid values between 0 and 8 (between 0 and 2 before v1.167.0). Defaults to 2.
     */
    declare public readonly maximumRetryAttempts: pulumi.Output<number | undefined>;
    /**
     * Function Compute Function published version, `LATEST`, or Function Compute Alias name. The default value is `LATEST`.
     */
    declare public readonly qualifier: pulumi.Output<string | undefined>;
    /**
     * Name of the Function Compute Function, omitting any version or alias qualifier.
     */
    declare public readonly serviceName: pulumi.Output<string>;
    /**
     * Function Compute async job configuration(also known as Task Mode). valid values true or false, default `false`
     */
    declare public readonly statefulInvocation: pulumi.Output<boolean | undefined>;

    /**
     * Create a FunctionAsyncInvokeConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionAsyncInvokeConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionAsyncInvokeConfigArgs | FunctionAsyncInvokeConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionAsyncInvokeConfigState | undefined;
            resourceInputs["createdTime"] = state?.createdTime;
            resourceInputs["destinationConfig"] = state?.destinationConfig;
            resourceInputs["functionName"] = state?.functionName;
            resourceInputs["lastModifiedTime"] = state?.lastModifiedTime;
            resourceInputs["maximumEventAgeInSeconds"] = state?.maximumEventAgeInSeconds;
            resourceInputs["maximumRetryAttempts"] = state?.maximumRetryAttempts;
            resourceInputs["qualifier"] = state?.qualifier;
            resourceInputs["serviceName"] = state?.serviceName;
            resourceInputs["statefulInvocation"] = state?.statefulInvocation;
        } else {
            const args = argsOrState as FunctionAsyncInvokeConfigArgs | undefined;
            if (args?.functionName === undefined && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            if (args?.serviceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["destinationConfig"] = args?.destinationConfig;
            resourceInputs["functionName"] = args?.functionName;
            resourceInputs["maximumEventAgeInSeconds"] = args?.maximumEventAgeInSeconds;
            resourceInputs["maximumRetryAttempts"] = args?.maximumRetryAttempts;
            resourceInputs["qualifier"] = args?.qualifier;
            resourceInputs["serviceName"] = args?.serviceName;
            resourceInputs["statefulInvocation"] = args?.statefulInvocation;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FunctionAsyncInvokeConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FunctionAsyncInvokeConfig resources.
 */
export interface FunctionAsyncInvokeConfigState {
    /**
     * The date this resource was created.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * Configuration block with destination configuration. See `destinationConfig` below.
     */
    destinationConfig?: pulumi.Input<inputs.fc.FunctionAsyncInvokeConfigDestinationConfig>;
    /**
     * Name of the Function Compute Function.
     */
    functionName?: pulumi.Input<string>;
    /**
     * The date this resource was last modified.
     */
    lastModifiedTime?: pulumi.Input<string>;
    /**
     * Maximum age of a request that Function Compute sends to a function for processing in seconds. Valid values between 1 and 2592000 (between 60 and 21600 before v1.167.0).
     */
    maximumEventAgeInSeconds?: pulumi.Input<number>;
    /**
     * Maximum number of times to retry when the function returns an error. Valid values between 0 and 8 (between 0 and 2 before v1.167.0). Defaults to 2.
     */
    maximumRetryAttempts?: pulumi.Input<number>;
    /**
     * Function Compute Function published version, `LATEST`, or Function Compute Alias name. The default value is `LATEST`.
     */
    qualifier?: pulumi.Input<string>;
    /**
     * Name of the Function Compute Function, omitting any version or alias qualifier.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Function Compute async job configuration(also known as Task Mode). valid values true or false, default `false`
     */
    statefulInvocation?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a FunctionAsyncInvokeConfig resource.
 */
export interface FunctionAsyncInvokeConfigArgs {
    /**
     * Configuration block with destination configuration. See `destinationConfig` below.
     */
    destinationConfig?: pulumi.Input<inputs.fc.FunctionAsyncInvokeConfigDestinationConfig>;
    /**
     * Name of the Function Compute Function.
     */
    functionName: pulumi.Input<string>;
    /**
     * Maximum age of a request that Function Compute sends to a function for processing in seconds. Valid values between 1 and 2592000 (between 60 and 21600 before v1.167.0).
     */
    maximumEventAgeInSeconds?: pulumi.Input<number>;
    /**
     * Maximum number of times to retry when the function returns an error. Valid values between 0 and 8 (between 0 and 2 before v1.167.0). Defaults to 2.
     */
    maximumRetryAttempts?: pulumi.Input<number>;
    /**
     * Function Compute Function published version, `LATEST`, or Function Compute Alias name. The default value is `LATEST`.
     */
    qualifier?: pulumi.Input<string>;
    /**
     * Name of the Function Compute Function, omitting any version or alias qualifier.
     */
    serviceName: pulumi.Input<string>;
    /**
     * Function Compute async job configuration(also known as Task Mode). valid values true or false, default `false`
     */
    statefulInvocation?: pulumi.Input<boolean>;
}
