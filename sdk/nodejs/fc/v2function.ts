// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class V2Function extends pulumi.CustomResource {
    /**
     * Get an existing V2Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V2FunctionState, opts?: pulumi.CustomResourceOptions): V2Function {
        return new V2Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:fc/v2Function:V2Function';

    /**
     * Returns true if the given object is an instance of V2Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V2Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V2Function.__pulumiType;
    }

    public readonly caPort!: pulumi.Output<number>;
    public readonly code!: pulumi.Output<outputs.fc.V2FunctionCode | undefined>;
    public readonly codeChecksum!: pulumi.Output<string>;
    public readonly cpu!: pulumi.Output<number | undefined>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly customContainerConfig!: pulumi.Output<outputs.fc.V2FunctionCustomContainerConfig | undefined>;
    public readonly customDns!: pulumi.Output<outputs.fc.V2FunctionCustomDns | undefined>;
    public readonly customHealthCheckConfig!: pulumi.Output<outputs.fc.V2FunctionCustomHealthCheckConfig | undefined>;
    public readonly customRuntimeConfig!: pulumi.Output<outputs.fc.V2FunctionCustomRuntimeConfig | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly diskSize!: pulumi.Output<number | undefined>;
    public readonly environmentVariables!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly functionName!: pulumi.Output<string>;
    public readonly gpuMemorySize!: pulumi.Output<number | undefined>;
    public readonly handler!: pulumi.Output<string>;
    public readonly initializationTimeout!: pulumi.Output<number>;
    public readonly initializer!: pulumi.Output<string | undefined>;
    public readonly instanceConcurrency!: pulumi.Output<number>;
    public readonly instanceLifecycleConfig!: pulumi.Output<outputs.fc.V2FunctionInstanceLifecycleConfig | undefined>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly layers!: pulumi.Output<string[] | undefined>;
    public readonly memorySize!: pulumi.Output<number>;
    public readonly runtime!: pulumi.Output<string>;
    public readonly serviceName!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<number>;

    /**
     * Create a V2Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V2FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V2FunctionArgs | V2FunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V2FunctionState | undefined;
            resourceInputs["caPort"] = state ? state.caPort : undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["codeChecksum"] = state ? state.codeChecksum : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["customContainerConfig"] = state ? state.customContainerConfig : undefined;
            resourceInputs["customDns"] = state ? state.customDns : undefined;
            resourceInputs["customHealthCheckConfig"] = state ? state.customHealthCheckConfig : undefined;
            resourceInputs["customRuntimeConfig"] = state ? state.customRuntimeConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["gpuMemorySize"] = state ? state.gpuMemorySize : undefined;
            resourceInputs["handler"] = state ? state.handler : undefined;
            resourceInputs["initializationTimeout"] = state ? state.initializationTimeout : undefined;
            resourceInputs["initializer"] = state ? state.initializer : undefined;
            resourceInputs["instanceConcurrency"] = state ? state.instanceConcurrency : undefined;
            resourceInputs["instanceLifecycleConfig"] = state ? state.instanceLifecycleConfig : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["layers"] = state ? state.layers : undefined;
            resourceInputs["memorySize"] = state ? state.memorySize : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as V2FunctionArgs | undefined;
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            if ((!args || args.handler === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handler'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["caPort"] = args ? args.caPort : undefined;
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["codeChecksum"] = args ? args.codeChecksum : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["customContainerConfig"] = args ? args.customContainerConfig : undefined;
            resourceInputs["customDns"] = args ? args.customDns : undefined;
            resourceInputs["customHealthCheckConfig"] = args ? args.customHealthCheckConfig : undefined;
            resourceInputs["customRuntimeConfig"] = args ? args.customRuntimeConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["gpuMemorySize"] = args ? args.gpuMemorySize : undefined;
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["initializationTimeout"] = args ? args.initializationTimeout : undefined;
            resourceInputs["initializer"] = args ? args.initializer : undefined;
            resourceInputs["instanceConcurrency"] = args ? args.instanceConcurrency : undefined;
            resourceInputs["instanceLifecycleConfig"] = args ? args.instanceLifecycleConfig : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["layers"] = args ? args.layers : undefined;
            resourceInputs["memorySize"] = args ? args.memorySize : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(V2Function.__pulumiType, name, resourceInputs, opts);
    }
}

export interface V2FunctionState {
    caPort?: pulumi.Input<number>;
    code?: pulumi.Input<inputs.fc.V2FunctionCode>;
    codeChecksum?: pulumi.Input<string>;
    cpu?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    customContainerConfig?: pulumi.Input<inputs.fc.V2FunctionCustomContainerConfig>;
    customDns?: pulumi.Input<inputs.fc.V2FunctionCustomDns>;
    customHealthCheckConfig?: pulumi.Input<inputs.fc.V2FunctionCustomHealthCheckConfig>;
    customRuntimeConfig?: pulumi.Input<inputs.fc.V2FunctionCustomRuntimeConfig>;
    description?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    functionName?: pulumi.Input<string>;
    gpuMemorySize?: pulumi.Input<number>;
    handler?: pulumi.Input<string>;
    initializationTimeout?: pulumi.Input<number>;
    initializer?: pulumi.Input<string>;
    instanceConcurrency?: pulumi.Input<number>;
    instanceLifecycleConfig?: pulumi.Input<inputs.fc.V2FunctionInstanceLifecycleConfig>;
    instanceType?: pulumi.Input<string>;
    layers?: pulumi.Input<pulumi.Input<string>[]>;
    memorySize?: pulumi.Input<number>;
    runtime?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a V2Function resource.
 */
export interface V2FunctionArgs {
    caPort?: pulumi.Input<number>;
    code?: pulumi.Input<inputs.fc.V2FunctionCode>;
    codeChecksum?: pulumi.Input<string>;
    cpu?: pulumi.Input<number>;
    customContainerConfig?: pulumi.Input<inputs.fc.V2FunctionCustomContainerConfig>;
    customDns?: pulumi.Input<inputs.fc.V2FunctionCustomDns>;
    customHealthCheckConfig?: pulumi.Input<inputs.fc.V2FunctionCustomHealthCheckConfig>;
    customRuntimeConfig?: pulumi.Input<inputs.fc.V2FunctionCustomRuntimeConfig>;
    description?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    functionName: pulumi.Input<string>;
    gpuMemorySize?: pulumi.Input<number>;
    handler: pulumi.Input<string>;
    initializationTimeout?: pulumi.Input<number>;
    initializer?: pulumi.Input<string>;
    instanceConcurrency?: pulumi.Input<number>;
    instanceLifecycleConfig?: pulumi.Input<inputs.fc.V2FunctionInstanceLifecycleConfig>;
    instanceType?: pulumi.Input<string>;
    layers?: pulumi.Input<pulumi.Input<string>[]>;
    memorySize?: pulumi.Input<number>;
    runtime: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
}
