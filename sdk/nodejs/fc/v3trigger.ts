// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a FCV3 Trigger resource.
 *
 * A trigger is a way of triggering the execution of a function. In the event-driven computing model, the event source is the producer of the event, the function is the handler of the event, and the trigger provides a centralized and unified way to manage different event sources. In the event source, when the event occurs, if the rules defined by the trigger are met,.
 *
 * For information about FCV3 Trigger and how to use it, see [What is Trigger](https://www.alibabacloud.com/help/en/functioncompute/api-fc-2023-03-30-createtrigger).
 *
 * > **NOTE:** Available since v1.228.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const functionName = config.get("functionName") || "TerraformTriggerResourceAPI";
 * const triggerName = config.get("triggerName") || "TerraformTrigger_CDN";
 * const _function = new alicloud.fc.V3Function("function", {
 *     memorySize: 512,
 *     cpu: 0.5,
 *     handler: "index.Handler",
 *     code: {
 *         zipFile: "UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAaW5kZXgucHmEkEFKxEAQRfd9ig9ZTCJOooIwDMwNXLqXnnQlaalUhU5lRj2KZ/FOXkESGR114bJ/P/7jV4b1xRq1hijtFpM1682cuNgPmgysbRulPT0fRxXnMtwrSPyeCdYRokSLnuMLJTTkbUqEvDMbxm1VdcRD6Tk+T1LW2ldB66knsYdA5iNX17ebm6tN2VnPhcswMPmREPuBacb+CiapLarAj9gT6/H97dVlCNScY3mtYvRkxdZlwDKDEnanPWVLdrdkeXEGlFEazVdfPVHaVeHc3N15CUwppwOJXeK7HshAB8NuOU7J6sP4SRXuH/EvbUfMiqMmDqv5M5FNSfAj/wgAAP//UEsHCPl//NYAAQAArwEAAFBLAQIUABQACAAIAAAAAAD5f/zWAAEAAK8BAAAIAAAAAAAAAAAAAAAAAAAAAABpbmRleC5weVBLBQYAAAAAAQABADYAAAA2AQAAAAA=",
 *     },
 *     functionName: name,
 *     runtime: "python3.9",
 *     diskSize: 512,
 *     logConfig: {
 *         logBeginRule: "None",
 *     },
 * });
 * const current = alicloud.getAccount({});
 * const _default = new alicloud.fc.V3Trigger("default", {
 *     triggerType: "cdn_events",
 *     triggerName: name,
 *     description: "create",
 *     qualifier: "LATEST",
 *     triggerConfig: JSON.stringify({
 *         eventName: "CachedObjectsPushed",
 *         eventVersion: "1.0.0",
 *         notes: "example",
 *         filter: {
 *             domain: ["example.com"],
 *         },
 *     }),
 *     sourceArn: current.then(current => `acs:cdn:*:${current.id}`),
 *     invocationRole: current.then(current => `acs:ram::${current.id}:role/aliyuncdneventnotificationrole`),
 *     functionName: _function.functionName,
 * });
 * ```
 *
 * ## Import
 *
 * FCV3 Trigger can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:fc/v3Trigger:V3Trigger example <function_name>:<trigger_name>
 * ```
 */
export class V3Trigger extends pulumi.CustomResource {
    /**
     * Get an existing V3Trigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V3TriggerState, opts?: pulumi.CustomResourceOptions): V3Trigger {
        return new V3Trigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:fc/v3Trigger:V3Trigger';

    /**
     * Returns true if the given object is an instance of V3Trigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V3Trigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V3Trigger.__pulumiType;
    }

    /**
     * Creation time
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the trigger
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Function Name
     */
    public readonly functionName!: pulumi.Output<string>;
    /**
     * (Available since v1.234.0) HTTP trigger information
     */
    public /*out*/ readonly httpTrigger!: pulumi.Output<outputs.fc.V3TriggerHttpTrigger>;
    /**
     * The role required by the event source (such as OSS) to call the function.
     */
    public readonly invocationRole!: pulumi.Output<string | undefined>;
    /**
     * (Available since v1.234.0) The last modified time of the trigger
     */
    public /*out*/ readonly lastModifiedTime!: pulumi.Output<string>;
    /**
     * The version or alias of the function
     */
    public readonly qualifier!: pulumi.Output<string>;
    /**
     * Trigger Event source ARN
     */
    public readonly sourceArn!: pulumi.Output<string | undefined>;
    /**
     * The state of the trigger
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * (Available since v1.234.0) Resource identity of the function
     */
    public /*out*/ readonly targetArn!: pulumi.Output<string>;
    /**
     * Trigger configuration. The configuration varies for different types of triggers.
     */
    public readonly triggerConfig!: pulumi.Output<string | undefined>;
    /**
     * (Available since v1.234.0) Trigger ID
     */
    public /*out*/ readonly triggerId!: pulumi.Output<string>;
    /**
     * Trigger Name
     */
    public readonly triggerName!: pulumi.Output<string>;
    /**
     * The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
     */
    public readonly triggerType!: pulumi.Output<string>;

    /**
     * Create a V3Trigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V3TriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V3TriggerArgs | V3TriggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V3TriggerState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["httpTrigger"] = state ? state.httpTrigger : undefined;
            resourceInputs["invocationRole"] = state ? state.invocationRole : undefined;
            resourceInputs["lastModifiedTime"] = state ? state.lastModifiedTime : undefined;
            resourceInputs["qualifier"] = state ? state.qualifier : undefined;
            resourceInputs["sourceArn"] = state ? state.sourceArn : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targetArn"] = state ? state.targetArn : undefined;
            resourceInputs["triggerConfig"] = state ? state.triggerConfig : undefined;
            resourceInputs["triggerId"] = state ? state.triggerId : undefined;
            resourceInputs["triggerName"] = state ? state.triggerName : undefined;
            resourceInputs["triggerType"] = state ? state.triggerType : undefined;
        } else {
            const args = argsOrState as V3TriggerArgs | undefined;
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            if ((!args || args.qualifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'qualifier'");
            }
            if ((!args || args.triggerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["invocationRole"] = args ? args.invocationRole : undefined;
            resourceInputs["qualifier"] = args ? args.qualifier : undefined;
            resourceInputs["sourceArn"] = args ? args.sourceArn : undefined;
            resourceInputs["triggerConfig"] = args ? args.triggerConfig : undefined;
            resourceInputs["triggerName"] = args ? args.triggerName : undefined;
            resourceInputs["triggerType"] = args ? args.triggerType : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["httpTrigger"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["targetArn"] = undefined /*out*/;
            resourceInputs["triggerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(V3Trigger.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering V3Trigger resources.
 */
export interface V3TriggerState {
    /**
     * Creation time
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the trigger
     */
    description?: pulumi.Input<string>;
    /**
     * Function Name
     */
    functionName?: pulumi.Input<string>;
    /**
     * (Available since v1.234.0) HTTP trigger information
     */
    httpTrigger?: pulumi.Input<inputs.fc.V3TriggerHttpTrigger>;
    /**
     * The role required by the event source (such as OSS) to call the function.
     */
    invocationRole?: pulumi.Input<string>;
    /**
     * (Available since v1.234.0) The last modified time of the trigger
     */
    lastModifiedTime?: pulumi.Input<string>;
    /**
     * The version or alias of the function
     */
    qualifier?: pulumi.Input<string>;
    /**
     * Trigger Event source ARN
     */
    sourceArn?: pulumi.Input<string>;
    /**
     * The state of the trigger
     */
    status?: pulumi.Input<string>;
    /**
     * (Available since v1.234.0) Resource identity of the function
     */
    targetArn?: pulumi.Input<string>;
    /**
     * Trigger configuration. The configuration varies for different types of triggers.
     */
    triggerConfig?: pulumi.Input<string>;
    /**
     * (Available since v1.234.0) Trigger ID
     */
    triggerId?: pulumi.Input<string>;
    /**
     * Trigger Name
     */
    triggerName?: pulumi.Input<string>;
    /**
     * The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
     */
    triggerType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a V3Trigger resource.
 */
export interface V3TriggerArgs {
    /**
     * Description of the trigger
     */
    description?: pulumi.Input<string>;
    /**
     * Function Name
     */
    functionName: pulumi.Input<string>;
    /**
     * The role required by the event source (such as OSS) to call the function.
     */
    invocationRole?: pulumi.Input<string>;
    /**
     * The version or alias of the function
     */
    qualifier: pulumi.Input<string>;
    /**
     * Trigger Event source ARN
     */
    sourceArn?: pulumi.Input<string>;
    /**
     * Trigger configuration. The configuration varies for different types of triggers.
     */
    triggerConfig?: pulumi.Input<string>;
    /**
     * Trigger Name
     */
    triggerName?: pulumi.Input<string>;
    /**
     * The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
     */
    triggerType: pulumi.Input<string>;
}
