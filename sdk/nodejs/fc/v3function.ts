// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Function Compute Service V3 (FCV3) Function resource.
 *
 * The resource scheduling and running of Function Compute is based on functions. The FC function consists of function code and function configuration.
 *
 * For information about Function Compute Service V3 (FCV3) Function and how to use it, see [What is Function](https://www.alibabacloud.com/help/en/functioncompute/developer-reference/api-fc-2023-03-30-getfunction).
 *
 * > **NOTE:** Available since v1.228.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new random.index.Uuid("default", {});
 * const defaultBucket = new alicloud.oss.Bucket("default", {bucket: `${name}-${_default.result}`});
 * const defaultBucketObject = new alicloud.oss.BucketObject("default", {
 *     bucket: defaultBucket.bucket,
 *     key: "FCV3Py39.zip",
 *     content: "print('hello')",
 * });
 * const defaultV3Function = new alicloud.fc.V3Function("default", {
 *     description: "Create",
 *     memorySize: 512,
 *     layers: ["acs:fc:cn-shanghai:official:layers/Python39-Aliyun-SDK/versions/3"],
 *     timeout: 3,
 *     runtime: "custom.debian10",
 *     handler: "index.handler",
 *     diskSize: 512,
 *     customRuntimeConfig: {
 *         commands: [
 *             "python",
 *             "-c",
 *             "example",
 *         ],
 *         args: [
 *             "app.py",
 *             "xx",
 *             "x",
 *         ],
 *         port: 9000,
 *         healthCheckConfig: {
 *             httpGetUrl: "/ready",
 *             initialDelaySeconds: 1,
 *             periodSeconds: 10,
 *             successThreshold: 1,
 *             timeoutSeconds: 1,
 *             failureThreshold: 3,
 *         },
 *     },
 *     logConfig: {
 *         logBeginRule: "None",
 *     },
 *     code: {
 *         ossBucketName: defaultBucket.bucket,
 *         ossObjectName: defaultBucketObject.key,
 *         checksum: "4270285996107335518",
 *     },
 *     instanceLifecycleConfig: {
 *         initializer: {
 *             timeout: 1,
 *             handler: "index.init",
 *         },
 *         preStop: {
 *             timeout: 1,
 *             handler: "index.stop",
 *         },
 *     },
 *     cpu: 0.5,
 *     instanceConcurrency: 2,
 *     functionName: `${name}-${_default.result}`,
 *     environmentVariables: {
 *         EnvKey: "EnvVal",
 *     },
 *     internetAccess: true,
 * });
 * ```
 *
 * ## Import
 *
 * Function Compute Service V3 (FCV3) Function can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:fc/v3Function:V3Function example <id>
 * ```
 */
export class V3Function extends pulumi.CustomResource {
    /**
     * Get an existing V3Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V3FunctionState, opts?: pulumi.CustomResourceOptions): V3Function {
        return new V3Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:fc/v3Function:V3Function';

    /**
     * Returns true if the given object is an instance of V3Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V3Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V3Function.__pulumiType;
    }

    /**
     * Function code ZIP package. code and customContainerConfig. See `code` below.
     */
    declare public readonly code: pulumi.Output<outputs.fc.V3FunctionCode | undefined>;
    /**
     * The code package size of the function returned by the system, in byte Example : 1024
     */
    declare public /*out*/ readonly codeSize: pulumi.Output<number>;
    /**
     * The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
     */
    declare public readonly cpu: pulumi.Output<number>;
    /**
     * The creation time of the function.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
     */
    declare public readonly customContainerConfig: pulumi.Output<outputs.fc.V3FunctionCustomContainerConfig | undefined>;
    /**
     * Function custom DNS configuration See `customDns` below.
     */
    declare public readonly customDns: pulumi.Output<outputs.fc.V3FunctionCustomDns | undefined>;
    /**
     * Customize the runtime configuration. See `customRuntimeConfig` below.
     */
    declare public readonly customRuntimeConfig: pulumi.Output<outputs.fc.V3FunctionCustomRuntimeConfig | undefined>;
    /**
     * The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
     */
    declare public readonly diskSize: pulumi.Output<number>;
    /**
     * The environment variable set for the function, you can get the value of the environment variable in the function.
     */
    declare public readonly environmentVariables: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ARN of function
     */
    declare public /*out*/ readonly functionArn: pulumi.Output<string>;
    /**
     * The first ID of the resource
     */
    declare public /*out*/ readonly functionId: pulumi.Output<string>;
    /**
     * The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
     */
    declare public readonly functionName: pulumi.Output<string>;
    /**
     * Function GPU configuration. See `gpuConfig` below.
     */
    declare public readonly gpuConfig: pulumi.Output<outputs.fc.V3FunctionGpuConfig | undefined>;
    /**
     * Function Handler: the call entry for the function compute system to run your function.
     */
    declare public readonly handler: pulumi.Output<string>;
    /**
     * Maximum instance concurrency.
     */
    declare public readonly instanceConcurrency: pulumi.Output<number>;
    /**
     * Instance isolation mode
     */
    declare public readonly instanceIsolationMode: pulumi.Output<string | undefined>;
    /**
     * Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
     */
    declare public readonly instanceLifecycleConfig: pulumi.Output<outputs.fc.V3FunctionInstanceLifecycleConfig | undefined>;
    /**
     * Allow function to access public network
     */
    declare public readonly internetAccess: pulumi.Output<boolean>;
    /**
     * Invocation Restriction Detail See `invocationRestriction` below.
     */
    declare public readonly invocationRestriction: pulumi.Output<outputs.fc.V3FunctionInvocationRestriction | undefined>;
    /**
     * Last time the function was Updated
     */
    declare public /*out*/ readonly lastModifiedTime: pulumi.Output<string>;
    /**
     * The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
     */
    declare public /*out*/ readonly lastUpdateStatus: pulumi.Output<string>;
    /**
     * The reason that caused the last function to update the Operation State to the current value
     */
    declare public /*out*/ readonly lastUpdateStatusReason: pulumi.Output<string>;
    /**
     * Status code of the reason that caused the last function update operation status to the current value
     */
    declare public /*out*/ readonly lastUpdateStatusReasonCode: pulumi.Output<string>;
    /**
     * The list of layers.
     */
    declare public readonly layers: pulumi.Output<string[] | undefined>;
    /**
     * The logs generated by the function are written to the configured Logstore. See `logConfig` below.
     */
    declare public readonly logConfig: pulumi.Output<outputs.fc.V3FunctionLogConfig | undefined>;
    /**
     * The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
     */
    declare public readonly memorySize: pulumi.Output<number>;
    /**
     * NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
     */
    declare public readonly nasConfig: pulumi.Output<outputs.fc.V3FunctionNasConfig>;
    /**
     * OSS mount configuration See `ossMountConfig` below.
     */
    declare public readonly ossMountConfig: pulumi.Output<outputs.fc.V3FunctionOssMountConfig>;
    /**
     * Resource Group ID.
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
     */
    declare public readonly role: pulumi.Output<string | undefined>;
    /**
     * Function runtime type.
     */
    declare public readonly runtime: pulumi.Output<string>;
    /**
     * The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
     */
    declare public readonly sessionAffinity: pulumi.Output<string | undefined>;
    /**
     * When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
     */
    declare public readonly sessionAffinityConfig: pulumi.Output<string | undefined>;
    /**
     * Function Status
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The reason why the function is in the current state
     */
    declare public /*out*/ readonly stateReason: pulumi.Output<string>;
    /**
     * The status code of the reason the function is in the current state.
     */
    declare public /*out*/ readonly stateReasonCode: pulumi.Output<string>;
    /**
     * The tag of the resource
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The maximum running time of the function, in seconds.
     */
    declare public readonly timeout: pulumi.Output<number>;
    /**
     * Tracing configuration
     */
    declare public /*out*/ readonly tracingConfig: pulumi.Output<outputs.fc.V3FunctionTracingConfig>;
    /**
     * VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
     */
    declare public readonly vpcConfig: pulumi.Output<outputs.fc.V3FunctionVpcConfig>;

    /**
     * Create a V3Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V3FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V3FunctionArgs | V3FunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V3FunctionState | undefined;
            resourceInputs["code"] = state?.code;
            resourceInputs["codeSize"] = state?.codeSize;
            resourceInputs["cpu"] = state?.cpu;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["customContainerConfig"] = state?.customContainerConfig;
            resourceInputs["customDns"] = state?.customDns;
            resourceInputs["customRuntimeConfig"] = state?.customRuntimeConfig;
            resourceInputs["description"] = state?.description;
            resourceInputs["diskSize"] = state?.diskSize;
            resourceInputs["environmentVariables"] = state?.environmentVariables;
            resourceInputs["functionArn"] = state?.functionArn;
            resourceInputs["functionId"] = state?.functionId;
            resourceInputs["functionName"] = state?.functionName;
            resourceInputs["gpuConfig"] = state?.gpuConfig;
            resourceInputs["handler"] = state?.handler;
            resourceInputs["instanceConcurrency"] = state?.instanceConcurrency;
            resourceInputs["instanceIsolationMode"] = state?.instanceIsolationMode;
            resourceInputs["instanceLifecycleConfig"] = state?.instanceLifecycleConfig;
            resourceInputs["internetAccess"] = state?.internetAccess;
            resourceInputs["invocationRestriction"] = state?.invocationRestriction;
            resourceInputs["lastModifiedTime"] = state?.lastModifiedTime;
            resourceInputs["lastUpdateStatus"] = state?.lastUpdateStatus;
            resourceInputs["lastUpdateStatusReason"] = state?.lastUpdateStatusReason;
            resourceInputs["lastUpdateStatusReasonCode"] = state?.lastUpdateStatusReasonCode;
            resourceInputs["layers"] = state?.layers;
            resourceInputs["logConfig"] = state?.logConfig;
            resourceInputs["memorySize"] = state?.memorySize;
            resourceInputs["nasConfig"] = state?.nasConfig;
            resourceInputs["ossMountConfig"] = state?.ossMountConfig;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["role"] = state?.role;
            resourceInputs["runtime"] = state?.runtime;
            resourceInputs["sessionAffinity"] = state?.sessionAffinity;
            resourceInputs["sessionAffinityConfig"] = state?.sessionAffinityConfig;
            resourceInputs["state"] = state?.state;
            resourceInputs["stateReason"] = state?.stateReason;
            resourceInputs["stateReasonCode"] = state?.stateReasonCode;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["timeout"] = state?.timeout;
            resourceInputs["tracingConfig"] = state?.tracingConfig;
            resourceInputs["vpcConfig"] = state?.vpcConfig;
        } else {
            const args = argsOrState as V3FunctionArgs | undefined;
            if (args?.handler === undefined && !opts.urn) {
                throw new Error("Missing required property 'handler'");
            }
            if (args?.runtime === undefined && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            resourceInputs["code"] = args?.code;
            resourceInputs["cpu"] = args?.cpu;
            resourceInputs["customContainerConfig"] = args?.customContainerConfig;
            resourceInputs["customDns"] = args?.customDns;
            resourceInputs["customRuntimeConfig"] = args?.customRuntimeConfig;
            resourceInputs["description"] = args?.description;
            resourceInputs["diskSize"] = args?.diskSize;
            resourceInputs["environmentVariables"] = args?.environmentVariables;
            resourceInputs["functionName"] = args?.functionName;
            resourceInputs["gpuConfig"] = args?.gpuConfig;
            resourceInputs["handler"] = args?.handler;
            resourceInputs["instanceConcurrency"] = args?.instanceConcurrency;
            resourceInputs["instanceIsolationMode"] = args?.instanceIsolationMode;
            resourceInputs["instanceLifecycleConfig"] = args?.instanceLifecycleConfig;
            resourceInputs["internetAccess"] = args?.internetAccess;
            resourceInputs["invocationRestriction"] = args?.invocationRestriction;
            resourceInputs["layers"] = args?.layers;
            resourceInputs["logConfig"] = args?.logConfig;
            resourceInputs["memorySize"] = args?.memorySize;
            resourceInputs["nasConfig"] = args?.nasConfig;
            resourceInputs["ossMountConfig"] = args?.ossMountConfig;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["role"] = args?.role;
            resourceInputs["runtime"] = args?.runtime;
            resourceInputs["sessionAffinity"] = args?.sessionAffinity;
            resourceInputs["sessionAffinityConfig"] = args?.sessionAffinityConfig;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeout"] = args?.timeout;
            resourceInputs["vpcConfig"] = args?.vpcConfig;
            resourceInputs["codeSize"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["functionArn"] = undefined /*out*/;
            resourceInputs["functionId"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
            resourceInputs["lastUpdateStatus"] = undefined /*out*/;
            resourceInputs["lastUpdateStatusReason"] = undefined /*out*/;
            resourceInputs["lastUpdateStatusReasonCode"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["stateReasonCode"] = undefined /*out*/;
            resourceInputs["tracingConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(V3Function.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering V3Function resources.
 */
export interface V3FunctionState {
    /**
     * Function code ZIP package. code and customContainerConfig. See `code` below.
     */
    code?: pulumi.Input<inputs.fc.V3FunctionCode>;
    /**
     * The code package size of the function returned by the system, in byte Example : 1024
     */
    codeSize?: pulumi.Input<number>;
    /**
     * The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
     */
    cpu?: pulumi.Input<number>;
    /**
     * The creation time of the function.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
     */
    customContainerConfig?: pulumi.Input<inputs.fc.V3FunctionCustomContainerConfig>;
    /**
     * Function custom DNS configuration See `customDns` below.
     */
    customDns?: pulumi.Input<inputs.fc.V3FunctionCustomDns>;
    /**
     * Customize the runtime configuration. See `customRuntimeConfig` below.
     */
    customRuntimeConfig?: pulumi.Input<inputs.fc.V3FunctionCustomRuntimeConfig>;
    /**
     * The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
     */
    description?: pulumi.Input<string>;
    /**
     * The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
     */
    diskSize?: pulumi.Input<number>;
    /**
     * The environment variable set for the function, you can get the value of the environment variable in the function.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ARN of function
     */
    functionArn?: pulumi.Input<string>;
    /**
     * The first ID of the resource
     */
    functionId?: pulumi.Input<string>;
    /**
     * The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
     */
    functionName?: pulumi.Input<string>;
    /**
     * Function GPU configuration. See `gpuConfig` below.
     */
    gpuConfig?: pulumi.Input<inputs.fc.V3FunctionGpuConfig>;
    /**
     * Function Handler: the call entry for the function compute system to run your function.
     */
    handler?: pulumi.Input<string>;
    /**
     * Maximum instance concurrency.
     */
    instanceConcurrency?: pulumi.Input<number>;
    /**
     * Instance isolation mode
     */
    instanceIsolationMode?: pulumi.Input<string>;
    /**
     * Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
     */
    instanceLifecycleConfig?: pulumi.Input<inputs.fc.V3FunctionInstanceLifecycleConfig>;
    /**
     * Allow function to access public network
     */
    internetAccess?: pulumi.Input<boolean>;
    /**
     * Invocation Restriction Detail See `invocationRestriction` below.
     */
    invocationRestriction?: pulumi.Input<inputs.fc.V3FunctionInvocationRestriction>;
    /**
     * Last time the function was Updated
     */
    lastModifiedTime?: pulumi.Input<string>;
    /**
     * The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
     */
    lastUpdateStatus?: pulumi.Input<string>;
    /**
     * The reason that caused the last function to update the Operation State to the current value
     */
    lastUpdateStatusReason?: pulumi.Input<string>;
    /**
     * Status code of the reason that caused the last function update operation status to the current value
     */
    lastUpdateStatusReasonCode?: pulumi.Input<string>;
    /**
     * The list of layers.
     */
    layers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The logs generated by the function are written to the configured Logstore. See `logConfig` below.
     */
    logConfig?: pulumi.Input<inputs.fc.V3FunctionLogConfig>;
    /**
     * The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
     */
    memorySize?: pulumi.Input<number>;
    /**
     * NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
     */
    nasConfig?: pulumi.Input<inputs.fc.V3FunctionNasConfig>;
    /**
     * OSS mount configuration See `ossMountConfig` below.
     */
    ossMountConfig?: pulumi.Input<inputs.fc.V3FunctionOssMountConfig>;
    /**
     * Resource Group ID.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
     */
    role?: pulumi.Input<string>;
    /**
     * Function runtime type.
     */
    runtime?: pulumi.Input<string>;
    /**
     * The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
     */
    sessionAffinity?: pulumi.Input<string>;
    /**
     * When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
     */
    sessionAffinityConfig?: pulumi.Input<string>;
    /**
     * Function Status
     */
    state?: pulumi.Input<string>;
    /**
     * The reason why the function is in the current state
     */
    stateReason?: pulumi.Input<string>;
    /**
     * The status code of the reason the function is in the current state.
     */
    stateReasonCode?: pulumi.Input<string>;
    /**
     * The tag of the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The maximum running time of the function, in seconds.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Tracing configuration
     */
    tracingConfig?: pulumi.Input<inputs.fc.V3FunctionTracingConfig>;
    /**
     * VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
     */
    vpcConfig?: pulumi.Input<inputs.fc.V3FunctionVpcConfig>;
}

/**
 * The set of arguments for constructing a V3Function resource.
 */
export interface V3FunctionArgs {
    /**
     * Function code ZIP package. code and customContainerConfig. See `code` below.
     */
    code?: pulumi.Input<inputs.fc.V3FunctionCode>;
    /**
     * The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
     */
    cpu?: pulumi.Input<number>;
    /**
     * The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
     */
    customContainerConfig?: pulumi.Input<inputs.fc.V3FunctionCustomContainerConfig>;
    /**
     * Function custom DNS configuration See `customDns` below.
     */
    customDns?: pulumi.Input<inputs.fc.V3FunctionCustomDns>;
    /**
     * Customize the runtime configuration. See `customRuntimeConfig` below.
     */
    customRuntimeConfig?: pulumi.Input<inputs.fc.V3FunctionCustomRuntimeConfig>;
    /**
     * The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
     */
    description?: pulumi.Input<string>;
    /**
     * The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
     */
    diskSize?: pulumi.Input<number>;
    /**
     * The environment variable set for the function, you can get the value of the environment variable in the function.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
     */
    functionName?: pulumi.Input<string>;
    /**
     * Function GPU configuration. See `gpuConfig` below.
     */
    gpuConfig?: pulumi.Input<inputs.fc.V3FunctionGpuConfig>;
    /**
     * Function Handler: the call entry for the function compute system to run your function.
     */
    handler: pulumi.Input<string>;
    /**
     * Maximum instance concurrency.
     */
    instanceConcurrency?: pulumi.Input<number>;
    /**
     * Instance isolation mode
     */
    instanceIsolationMode?: pulumi.Input<string>;
    /**
     * Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
     */
    instanceLifecycleConfig?: pulumi.Input<inputs.fc.V3FunctionInstanceLifecycleConfig>;
    /**
     * Allow function to access public network
     */
    internetAccess?: pulumi.Input<boolean>;
    /**
     * Invocation Restriction Detail See `invocationRestriction` below.
     */
    invocationRestriction?: pulumi.Input<inputs.fc.V3FunctionInvocationRestriction>;
    /**
     * The list of layers.
     */
    layers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The logs generated by the function are written to the configured Logstore. See `logConfig` below.
     */
    logConfig?: pulumi.Input<inputs.fc.V3FunctionLogConfig>;
    /**
     * The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
     */
    memorySize?: pulumi.Input<number>;
    /**
     * NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
     */
    nasConfig?: pulumi.Input<inputs.fc.V3FunctionNasConfig>;
    /**
     * OSS mount configuration See `ossMountConfig` below.
     */
    ossMountConfig?: pulumi.Input<inputs.fc.V3FunctionOssMountConfig>;
    /**
     * Resource Group ID.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
     */
    role?: pulumi.Input<string>;
    /**
     * Function runtime type.
     */
    runtime: pulumi.Input<string>;
    /**
     * The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
     */
    sessionAffinity?: pulumi.Input<string>;
    /**
     * When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
     */
    sessionAffinityConfig?: pulumi.Input<string>;
    /**
     * The tag of the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The maximum running time of the function, in seconds.
     */
    timeout?: pulumi.Input<number>;
    /**
     * VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
     */
    vpcConfig?: pulumi.Input<inputs.fc.V3FunctionVpcConfig>;
}
