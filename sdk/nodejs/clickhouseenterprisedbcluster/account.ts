// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Click House Enterprise Db Cluster Account resource.
 *
 * Clickhouse enterprise instance account.
 *
 * For information about Click House Enterprise Db Cluster Account and how to use it, see [What is Enterprise Db Cluster Account](https://next.api.alibabacloud.com/document/clickhouse/2023-05-22/CreateAccount).
 *
 * > **NOTE:** Available since v1.247.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const regionId = config.get("regionId") || "cn-beijing";
 * const vswIpRangeI = config.get("vswIpRangeI") || "172.16.1.0/24";
 * const vpcIpRange = config.get("vpcIpRange") || "172.16.0.0/12";
 * const zoneIdI = config.get("zoneIdI") || "cn-beijing-i";
 * const defaultktKLuM = new alicloud.vpc.Network("defaultktKLuM", {cidrBlock: vpcIpRange});
 * const defaultTQWN3k = new alicloud.vpc.Switch("defaultTQWN3k", {
 *     vpcId: defaultktKLuM.id,
 *     zoneId: zoneIdI,
 *     cidrBlock: vswIpRangeI,
 * });
 * const defaultWrovOd = new alicloud.clickhouseenterprisedbcluster.ClickHouseEnterpriseDbCluster("defaultWrovOd", {
 *     zoneId: zoneIdI,
 *     vpcId: defaultktKLuM.id,
 *     scaleMin: "8",
 *     scaleMax: "16",
 *     vswitchId: defaultTQWN3k.id,
 * });
 * const _default = new alicloud.clickhouseenterprisedbcluster.Account("default", {
 *     account: "abc",
 *     description: "example_desc",
 *     dbInstanceId: defaultWrovOd.id,
 *     accountType: "NormalAccount",
 *     password: "abc123456!",
 *     dmlAuthSetting: {
 *         dmlAuthority: 0,
 *         ddlAuthority: true,
 *         allowDictionaries: ["*"],
 *         allowDatabases: ["*"],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Click House Enterprise Db Cluster Account can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:clickhouseenterprisedbcluster/account:Account example <db_instance_id>:<account>
 * ```
 */
export class Account extends pulumi.CustomResource {
    /**
     * Get an existing Account resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountState, opts?: pulumi.CustomResourceOptions): Account {
        return new Account(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:clickhouseenterprisedbcluster/account:Account';

    /**
     * Returns true if the given object is an instance of Account.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Account {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Account.__pulumiType;
    }

    /**
     * The name of the database account.
     */
    declare public readonly account: pulumi.Output<string>;
    /**
     * The type of the database account. Valid values:
     * - `NormalAccount`: Normal account number.
     * - `SuperAccount`: The privileged account.
     */
    declare public readonly accountType: pulumi.Output<string>;
    /**
     * The cluster ID.
     */
    declare public readonly dbInstanceId: pulumi.Output<string>;
    /**
     * Note information.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Authorization information. See `dmlAuthSetting` below.
     */
    declare public readonly dmlAuthSetting: pulumi.Output<outputs.clickhouseenterprisedbcluster.AccountDmlAuthSetting | undefined>;
    /**
     * Database account password. Set the following rules.
     * - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
     * - Oh-! @#$%^& *()_+-= is a special character.
     * - Length is 8~32 characters.
     */
    declare public readonly password: pulumi.Output<string>;

    /**
     * Create a Account resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountArgs | AccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountState | undefined;
            resourceInputs["account"] = state?.account;
            resourceInputs["accountType"] = state?.accountType;
            resourceInputs["dbInstanceId"] = state?.dbInstanceId;
            resourceInputs["description"] = state?.description;
            resourceInputs["dmlAuthSetting"] = state?.dmlAuthSetting;
            resourceInputs["password"] = state?.password;
        } else {
            const args = argsOrState as AccountArgs | undefined;
            if (args?.account === undefined && !opts.urn) {
                throw new Error("Missing required property 'account'");
            }
            if (args?.accountType === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountType'");
            }
            if (args?.dbInstanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceId'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["account"] = args?.account;
            resourceInputs["accountType"] = args?.accountType;
            resourceInputs["dbInstanceId"] = args?.dbInstanceId;
            resourceInputs["description"] = args?.description;
            resourceInputs["dmlAuthSetting"] = args?.dmlAuthSetting;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Account.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Account resources.
 */
export interface AccountState {
    /**
     * The name of the database account.
     */
    account?: pulumi.Input<string>;
    /**
     * The type of the database account. Valid values:
     * - `NormalAccount`: Normal account number.
     * - `SuperAccount`: The privileged account.
     */
    accountType?: pulumi.Input<string>;
    /**
     * The cluster ID.
     */
    dbInstanceId?: pulumi.Input<string>;
    /**
     * Note information.
     */
    description?: pulumi.Input<string>;
    /**
     * Authorization information. See `dmlAuthSetting` below.
     */
    dmlAuthSetting?: pulumi.Input<inputs.clickhouseenterprisedbcluster.AccountDmlAuthSetting>;
    /**
     * Database account password. Set the following rules.
     * - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
     * - Oh-! @#$%^& *()_+-= is a special character.
     * - Length is 8~32 characters.
     */
    password?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Account resource.
 */
export interface AccountArgs {
    /**
     * The name of the database account.
     */
    account: pulumi.Input<string>;
    /**
     * The type of the database account. Valid values:
     * - `NormalAccount`: Normal account number.
     * - `SuperAccount`: The privileged account.
     */
    accountType: pulumi.Input<string>;
    /**
     * The cluster ID.
     */
    dbInstanceId: pulumi.Input<string>;
    /**
     * Note information.
     */
    description?: pulumi.Input<string>;
    /**
     * Authorization information. See `dmlAuthSetting` below.
     */
    dmlAuthSetting?: pulumi.Input<inputs.clickhouseenterprisedbcluster.AccountDmlAuthSetting>;
    /**
     * Database account password. Set the following rules.
     * - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
     * - Oh-! @#$%^& *()_+-= is a special character.
     * - Length is 8~32 characters.
     */
    password: pulumi.Input<string>;
}
