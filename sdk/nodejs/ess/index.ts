// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AlarmArgs, AlarmState } from "./alarm";
export type Alarm = import("./alarm").Alarm;
export const Alarm: typeof import("./alarm").Alarm = null as any;
utilities.lazyLoad(exports, ["Alarm"], () => require("./alarm"));

export { AlbServerGroupAttachmentArgs, AlbServerGroupAttachmentState } from "./albServerGroupAttachment";
export type AlbServerGroupAttachment = import("./albServerGroupAttachment").AlbServerGroupAttachment;
export const AlbServerGroupAttachment: typeof import("./albServerGroupAttachment").AlbServerGroupAttachment = null as any;
utilities.lazyLoad(exports, ["AlbServerGroupAttachment"], () => require("./albServerGroupAttachment"));

export { AttachmentArgs, AttachmentState } from "./attachment";
export type Attachment = import("./attachment").Attachment;
export const Attachment: typeof import("./attachment").Attachment = null as any;
utilities.lazyLoad(exports, ["Attachment"], () => require("./attachment"));

export { EciScalingConfigurationArgs, EciScalingConfigurationState } from "./eciScalingConfiguration";
export type EciScalingConfiguration = import("./eciScalingConfiguration").EciScalingConfiguration;
export const EciScalingConfiguration: typeof import("./eciScalingConfiguration").EciScalingConfiguration = null as any;
utilities.lazyLoad(exports, ["EciScalingConfiguration"], () => require("./eciScalingConfiguration"));

export { GetAlarmsArgs, GetAlarmsResult, GetAlarmsOutputArgs } from "./getAlarms";
export const getAlarms: typeof import("./getAlarms").getAlarms = null as any;
export const getAlarmsOutput: typeof import("./getAlarms").getAlarmsOutput = null as any;
utilities.lazyLoad(exports, ["getAlarms","getAlarmsOutput"], () => require("./getAlarms"));

export { GetLifecycleHooksArgs, GetLifecycleHooksResult, GetLifecycleHooksOutputArgs } from "./getLifecycleHooks";
export const getLifecycleHooks: typeof import("./getLifecycleHooks").getLifecycleHooks = null as any;
export const getLifecycleHooksOutput: typeof import("./getLifecycleHooks").getLifecycleHooksOutput = null as any;
utilities.lazyLoad(exports, ["getLifecycleHooks","getLifecycleHooksOutput"], () => require("./getLifecycleHooks"));

export { GetNotificationsArgs, GetNotificationsResult, GetNotificationsOutputArgs } from "./getNotifications";
export const getNotifications: typeof import("./getNotifications").getNotifications = null as any;
export const getNotificationsOutput: typeof import("./getNotifications").getNotificationsOutput = null as any;
utilities.lazyLoad(exports, ["getNotifications","getNotificationsOutput"], () => require("./getNotifications"));

export { GetScalingConfigurationsArgs, GetScalingConfigurationsResult, GetScalingConfigurationsOutputArgs } from "./getScalingConfigurations";
export const getScalingConfigurations: typeof import("./getScalingConfigurations").getScalingConfigurations = null as any;
export const getScalingConfigurationsOutput: typeof import("./getScalingConfigurations").getScalingConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getScalingConfigurations","getScalingConfigurationsOutput"], () => require("./getScalingConfigurations"));

export { GetScalingGroupsArgs, GetScalingGroupsResult, GetScalingGroupsOutputArgs } from "./getScalingGroups";
export const getScalingGroups: typeof import("./getScalingGroups").getScalingGroups = null as any;
export const getScalingGroupsOutput: typeof import("./getScalingGroups").getScalingGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getScalingGroups","getScalingGroupsOutput"], () => require("./getScalingGroups"));

export { GetScalingRulesArgs, GetScalingRulesResult, GetScalingRulesOutputArgs } from "./getScalingRules";
export const getScalingRules: typeof import("./getScalingRules").getScalingRules = null as any;
export const getScalingRulesOutput: typeof import("./getScalingRules").getScalingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getScalingRules","getScalingRulesOutput"], () => require("./getScalingRules"));

export { GetScheduledTasksArgs, GetScheduledTasksResult, GetScheduledTasksOutputArgs } from "./getScheduledTasks";
export const getScheduledTasks: typeof import("./getScheduledTasks").getScheduledTasks = null as any;
export const getScheduledTasksOutput: typeof import("./getScheduledTasks").getScheduledTasksOutput = null as any;
utilities.lazyLoad(exports, ["getScheduledTasks","getScheduledTasksOutput"], () => require("./getScheduledTasks"));

export { LifecycleHookArgs, LifecycleHookState } from "./lifecycleHook";
export type LifecycleHook = import("./lifecycleHook").LifecycleHook;
export const LifecycleHook: typeof import("./lifecycleHook").LifecycleHook = null as any;
utilities.lazyLoad(exports, ["LifecycleHook"], () => require("./lifecycleHook"));

export { NotificationArgs, NotificationState } from "./notification";
export type Notification = import("./notification").Notification;
export const Notification: typeof import("./notification").Notification = null as any;
utilities.lazyLoad(exports, ["Notification"], () => require("./notification"));

export { ScalingConfigurationArgs, ScalingConfigurationState } from "./scalingConfiguration";
export type ScalingConfiguration = import("./scalingConfiguration").ScalingConfiguration;
export const ScalingConfiguration: typeof import("./scalingConfiguration").ScalingConfiguration = null as any;
utilities.lazyLoad(exports, ["ScalingConfiguration"], () => require("./scalingConfiguration"));

export { ScalingGroupArgs, ScalingGroupState } from "./scalingGroup";
export type ScalingGroup = import("./scalingGroup").ScalingGroup;
export const ScalingGroup: typeof import("./scalingGroup").ScalingGroup = null as any;
utilities.lazyLoad(exports, ["ScalingGroup"], () => require("./scalingGroup"));

export { ScalingGroupVServerGroupsArgs, ScalingGroupVServerGroupsState } from "./scalingGroupVServerGroups";
export type ScalingGroupVServerGroups = import("./scalingGroupVServerGroups").ScalingGroupVServerGroups;
export const ScalingGroupVServerGroups: typeof import("./scalingGroupVServerGroups").ScalingGroupVServerGroups = null as any;
utilities.lazyLoad(exports, ["ScalingGroupVServerGroups"], () => require("./scalingGroupVServerGroups"));

export { ScalingRuleArgs, ScalingRuleState } from "./scalingRule";
export type ScalingRule = import("./scalingRule").ScalingRule;
export const ScalingRule: typeof import("./scalingRule").ScalingRule = null as any;
utilities.lazyLoad(exports, ["ScalingRule"], () => require("./scalingRule"));

export { ScheduleArgs, ScheduleState } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));

export { ScheduledTaskArgs, ScheduledTaskState } from "./scheduledTask";
export type ScheduledTask = import("./scheduledTask").ScheduledTask;
export const ScheduledTask: typeof import("./scheduledTask").ScheduledTask = null as any;
utilities.lazyLoad(exports, ["ScheduledTask"], () => require("./scheduledTask"));

export { ServerGroupAttachmentArgs, ServerGroupAttachmentState } from "./serverGroupAttachment";
export type ServerGroupAttachment = import("./serverGroupAttachment").ServerGroupAttachment;
export const ServerGroupAttachment: typeof import("./serverGroupAttachment").ServerGroupAttachment = null as any;
utilities.lazyLoad(exports, ["ServerGroupAttachment"], () => require("./serverGroupAttachment"));

export { SuspendProcessArgs, SuspendProcessState } from "./suspendProcess";
export type SuspendProcess = import("./suspendProcess").SuspendProcess;
export const SuspendProcess: typeof import("./suspendProcess").SuspendProcess = null as any;
utilities.lazyLoad(exports, ["SuspendProcess"], () => require("./suspendProcess"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:ess/alarm:Alarm":
                return new Alarm(name, <any>undefined, { urn })
            case "alicloud:ess/albServerGroupAttachment:AlbServerGroupAttachment":
                return new AlbServerGroupAttachment(name, <any>undefined, { urn })
            case "alicloud:ess/attachment:Attachment":
                return new Attachment(name, <any>undefined, { urn })
            case "alicloud:ess/eciScalingConfiguration:EciScalingConfiguration":
                return new EciScalingConfiguration(name, <any>undefined, { urn })
            case "alicloud:ess/lifecycleHook:LifecycleHook":
                return new LifecycleHook(name, <any>undefined, { urn })
            case "alicloud:ess/notification:Notification":
                return new Notification(name, <any>undefined, { urn })
            case "alicloud:ess/scalingConfiguration:ScalingConfiguration":
                return new ScalingConfiguration(name, <any>undefined, { urn })
            case "alicloud:ess/scalingGroup:ScalingGroup":
                return new ScalingGroup(name, <any>undefined, { urn })
            case "alicloud:ess/scalingGroupVServerGroups:ScalingGroupVServerGroups":
                return new ScalingGroupVServerGroups(name, <any>undefined, { urn })
            case "alicloud:ess/scalingRule:ScalingRule":
                return new ScalingRule(name, <any>undefined, { urn })
            case "alicloud:ess/schedule:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            case "alicloud:ess/scheduledTask:ScheduledTask":
                return new ScheduledTask(name, <any>undefined, { urn })
            case "alicloud:ess/serverGroupAttachment:ServerGroupAttachment":
                return new ServerGroupAttachment(name, <any>undefined, { urn })
            case "alicloud:ess/suspendProcess:SuspendProcess":
                return new SuspendProcess(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "ess/alarm", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/albServerGroupAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/attachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/eciScalingConfiguration", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/lifecycleHook", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/notification", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/scalingConfiguration", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/scalingGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/scalingGroupVServerGroups", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/scalingRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/schedule", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/scheduledTask", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/serverGroupAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "ess/suspendProcess", _module)
