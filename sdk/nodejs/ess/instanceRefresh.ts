// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * ESS instance refresh can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ess/instanceRefresh:InstanceRefresh example ir-abc123456
 * ```
 */
export class InstanceRefresh extends pulumi.CustomResource {
    /**
     * Get an existing InstanceRefresh resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceRefreshState, opts?: pulumi.CustomResourceOptions): InstanceRefresh {
        return new InstanceRefresh(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ess/instanceRefresh:InstanceRefresh';

    /**
     * Returns true if the given object is an instance of InstanceRefresh.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceRefresh {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceRefresh.__pulumiType;
    }

    /**
     * The duration of the pause when the task reaches a checkpoint. Unit: minutes.
     */
    declare public readonly checkpointPauseTime: pulumi.Output<number>;
    /**
     * The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `checkpoints` below for details.
     */
    declare public readonly checkpoints: pulumi.Output<outputs.ess.InstanceRefreshCheckpoint[] | undefined>;
    /**
     * The list of containers in the instance. See `desiredConfigurationContainers` below for details.
     */
    declare public readonly desiredConfigurationContainers: pulumi.Output<outputs.ess.InstanceRefreshDesiredConfigurationContainer[] | undefined>;
    /**
     * The ID of the image file. This is the image resource used for automatic instance creation.
     */
    declare public readonly desiredConfigurationImageId: pulumi.Output<string | undefined>;
    /**
     * The ID of the launch template. The scaling group uses this template to obtain launch configuration information.
     */
    declare public readonly desiredConfigurationLaunchTemplateId: pulumi.Output<string | undefined>;
    /**
     * The instance type information in the launch template overrides. See `desiredConfigurationLaunchTemplateOverrides` below for details.
     */
    declare public readonly desiredConfigurationLaunchTemplateOverrides: pulumi.Output<outputs.ess.InstanceRefreshDesiredConfigurationLaunchTemplateOverride[] | undefined>;
    /**
     * The version of the launch template.
     */
    declare public readonly desiredConfigurationLaunchTemplateVersion: pulumi.Output<string | undefined>;
    /**
     * The percentage by which the number of instances in the scaling group can exceed the group's capacity during the instance refresh.
     */
    declare public readonly maxHealthyPercentage: pulumi.Output<number>;
    /**
     * The percentage of instances that must be healthy in the scaling group during the instance refresh. The value is a percentage of the scaling group's capacity.
     */
    declare public readonly minHealthyPercentage: pulumi.Output<number>;
    /**
     * The ID of the scaling group.
     */
    declare public readonly scalingGroupId: pulumi.Output<string>;
    /**
     * Indicates whether to skip instances that match the desired configuration.
     */
    declare public readonly skipMatching: pulumi.Output<boolean>;
    /**
     * The current status of the instance refresh task. Possible values:
     * - Pending: The instance refresh task is created and waiting to be scheduled.
     * - InProgress: The instance refresh task is in progress.
     * - Paused: The instance refresh task is paused.
     * - CheckpointPause: The task is paused because it has reached a checkpoint (Checkpoint.Percentage).
     * - Failed: The instance refresh task failed.
     * - Successful: The instance refresh task was successful.
     * - Cancelling: The instance refresh task is being canceled.
     * - RollbackInProgress: The instance refresh task is being rolled back.
     * - RollbackSuccessful: The instance refresh task was rolled back successfully. Set RollbackSuccessful to rollback the instance refresh task.
     * - RollbackFailed: The rollback of the instance refresh task failed.
     * - Cancelled:  The instance refresh task is canceled. Set Cancelled to cancel the instance refresh task.
     */
    declare public readonly status: pulumi.Output<string>;

    /**
     * Create a InstanceRefresh resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceRefreshArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceRefreshArgs | InstanceRefreshState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceRefreshState | undefined;
            resourceInputs["checkpointPauseTime"] = state?.checkpointPauseTime;
            resourceInputs["checkpoints"] = state?.checkpoints;
            resourceInputs["desiredConfigurationContainers"] = state?.desiredConfigurationContainers;
            resourceInputs["desiredConfigurationImageId"] = state?.desiredConfigurationImageId;
            resourceInputs["desiredConfigurationLaunchTemplateId"] = state?.desiredConfigurationLaunchTemplateId;
            resourceInputs["desiredConfigurationLaunchTemplateOverrides"] = state?.desiredConfigurationLaunchTemplateOverrides;
            resourceInputs["desiredConfigurationLaunchTemplateVersion"] = state?.desiredConfigurationLaunchTemplateVersion;
            resourceInputs["maxHealthyPercentage"] = state?.maxHealthyPercentage;
            resourceInputs["minHealthyPercentage"] = state?.minHealthyPercentage;
            resourceInputs["scalingGroupId"] = state?.scalingGroupId;
            resourceInputs["skipMatching"] = state?.skipMatching;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as InstanceRefreshArgs | undefined;
            if (args?.scalingGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'scalingGroupId'");
            }
            resourceInputs["checkpointPauseTime"] = args?.checkpointPauseTime;
            resourceInputs["checkpoints"] = args?.checkpoints;
            resourceInputs["desiredConfigurationContainers"] = args?.desiredConfigurationContainers;
            resourceInputs["desiredConfigurationImageId"] = args?.desiredConfigurationImageId;
            resourceInputs["desiredConfigurationLaunchTemplateId"] = args?.desiredConfigurationLaunchTemplateId;
            resourceInputs["desiredConfigurationLaunchTemplateOverrides"] = args?.desiredConfigurationLaunchTemplateOverrides;
            resourceInputs["desiredConfigurationLaunchTemplateVersion"] = args?.desiredConfigurationLaunchTemplateVersion;
            resourceInputs["maxHealthyPercentage"] = args?.maxHealthyPercentage;
            resourceInputs["minHealthyPercentage"] = args?.minHealthyPercentage;
            resourceInputs["scalingGroupId"] = args?.scalingGroupId;
            resourceInputs["skipMatching"] = args?.skipMatching;
            resourceInputs["status"] = args?.status;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceRefresh.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceRefresh resources.
 */
export interface InstanceRefreshState {
    /**
     * The duration of the pause when the task reaches a checkpoint. Unit: minutes.
     */
    checkpointPauseTime?: pulumi.Input<number>;
    /**
     * The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `checkpoints` below for details.
     */
    checkpoints?: pulumi.Input<pulumi.Input<inputs.ess.InstanceRefreshCheckpoint>[]>;
    /**
     * The list of containers in the instance. See `desiredConfigurationContainers` below for details.
     */
    desiredConfigurationContainers?: pulumi.Input<pulumi.Input<inputs.ess.InstanceRefreshDesiredConfigurationContainer>[]>;
    /**
     * The ID of the image file. This is the image resource used for automatic instance creation.
     */
    desiredConfigurationImageId?: pulumi.Input<string>;
    /**
     * The ID of the launch template. The scaling group uses this template to obtain launch configuration information.
     */
    desiredConfigurationLaunchTemplateId?: pulumi.Input<string>;
    /**
     * The instance type information in the launch template overrides. See `desiredConfigurationLaunchTemplateOverrides` below for details.
     */
    desiredConfigurationLaunchTemplateOverrides?: pulumi.Input<pulumi.Input<inputs.ess.InstanceRefreshDesiredConfigurationLaunchTemplateOverride>[]>;
    /**
     * The version of the launch template.
     */
    desiredConfigurationLaunchTemplateVersion?: pulumi.Input<string>;
    /**
     * The percentage by which the number of instances in the scaling group can exceed the group's capacity during the instance refresh.
     */
    maxHealthyPercentage?: pulumi.Input<number>;
    /**
     * The percentage of instances that must be healthy in the scaling group during the instance refresh. The value is a percentage of the scaling group's capacity.
     */
    minHealthyPercentage?: pulumi.Input<number>;
    /**
     * The ID of the scaling group.
     */
    scalingGroupId?: pulumi.Input<string>;
    /**
     * Indicates whether to skip instances that match the desired configuration.
     */
    skipMatching?: pulumi.Input<boolean>;
    /**
     * The current status of the instance refresh task. Possible values:
     * - Pending: The instance refresh task is created and waiting to be scheduled.
     * - InProgress: The instance refresh task is in progress.
     * - Paused: The instance refresh task is paused.
     * - CheckpointPause: The task is paused because it has reached a checkpoint (Checkpoint.Percentage).
     * - Failed: The instance refresh task failed.
     * - Successful: The instance refresh task was successful.
     * - Cancelling: The instance refresh task is being canceled.
     * - RollbackInProgress: The instance refresh task is being rolled back.
     * - RollbackSuccessful: The instance refresh task was rolled back successfully. Set RollbackSuccessful to rollback the instance refresh task.
     * - RollbackFailed: The rollback of the instance refresh task failed.
     * - Cancelled:  The instance refresh task is canceled. Set Cancelled to cancel the instance refresh task.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceRefresh resource.
 */
export interface InstanceRefreshArgs {
    /**
     * The duration of the pause when the task reaches a checkpoint. Unit: minutes.
     */
    checkpointPauseTime?: pulumi.Input<number>;
    /**
     * The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `checkpoints` below for details.
     */
    checkpoints?: pulumi.Input<pulumi.Input<inputs.ess.InstanceRefreshCheckpoint>[]>;
    /**
     * The list of containers in the instance. See `desiredConfigurationContainers` below for details.
     */
    desiredConfigurationContainers?: pulumi.Input<pulumi.Input<inputs.ess.InstanceRefreshDesiredConfigurationContainer>[]>;
    /**
     * The ID of the image file. This is the image resource used for automatic instance creation.
     */
    desiredConfigurationImageId?: pulumi.Input<string>;
    /**
     * The ID of the launch template. The scaling group uses this template to obtain launch configuration information.
     */
    desiredConfigurationLaunchTemplateId?: pulumi.Input<string>;
    /**
     * The instance type information in the launch template overrides. See `desiredConfigurationLaunchTemplateOverrides` below for details.
     */
    desiredConfigurationLaunchTemplateOverrides?: pulumi.Input<pulumi.Input<inputs.ess.InstanceRefreshDesiredConfigurationLaunchTemplateOverride>[]>;
    /**
     * The version of the launch template.
     */
    desiredConfigurationLaunchTemplateVersion?: pulumi.Input<string>;
    /**
     * The percentage by which the number of instances in the scaling group can exceed the group's capacity during the instance refresh.
     */
    maxHealthyPercentage?: pulumi.Input<number>;
    /**
     * The percentage of instances that must be healthy in the scaling group during the instance refresh. The value is a percentage of the scaling group's capacity.
     */
    minHealthyPercentage?: pulumi.Input<number>;
    /**
     * The ID of the scaling group.
     */
    scalingGroupId: pulumi.Input<string>;
    /**
     * Indicates whether to skip instances that match the desired configuration.
     */
    skipMatching?: pulumi.Input<boolean>;
    /**
     * The current status of the instance refresh task. Possible values:
     * - Pending: The instance refresh task is created and waiting to be scheduled.
     * - InProgress: The instance refresh task is in progress.
     * - Paused: The instance refresh task is paused.
     * - CheckpointPause: The task is paused because it has reached a checkpoint (Checkpoint.Percentage).
     * - Failed: The instance refresh task failed.
     * - Successful: The instance refresh task was successful.
     * - Cancelling: The instance refresh task is being canceled.
     * - RollbackInProgress: The instance refresh task is being rolled back.
     * - RollbackSuccessful: The instance refresh task was rolled back successfully. Set RollbackSuccessful to rollback the instance refresh task.
     * - RollbackFailed: The rollback of the instance refresh task failed.
     * - Cancelled:  The instance refresh task is canceled. Set Cancelled to cancel the instance refresh task.
     */
    status?: pulumi.Input<string>;
}
