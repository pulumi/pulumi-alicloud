// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a ESS scaling rule resource.
 *
 * For information about ess scaling rule, see [CreateScalingRule](https://www.alibabacloud.com/help/en/auto-scaling/latest/createscalingrule).
 *
 * > **NOTE:** Available since v1.39.0.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const myName = `${name}-${defaultInteger.result}`;
 * const _default = alicloud.getZones({
 *     availableDiskCategory: "cloud_efficiency",
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultGetInstanceTypes = _default.then(_default => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: _default.zones?.[0]?.id,
 *     cpuCoreCount: 2,
 *     memorySize: 4,
 * }));
 * const defaultGetImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_18.*64",
 *     mostRecent: true,
 *     owners: "system",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: myName,
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 *     vswitchName: myName,
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {
 *     securityGroupName: myName,
 *     vpcId: defaultNetwork.id,
 * });
 * const defaultSecurityGroupRule = new alicloud.ecs.SecurityGroupRule("default", {
 *     type: "ingress",
 *     ipProtocol: "tcp",
 *     nicType: "intranet",
 *     policy: "accept",
 *     portRange: "22/22",
 *     priority: 1,
 *     securityGroupId: defaultSecurityGroup.id,
 *     cidrIp: "172.16.0.0/24",
 * });
 * const defaultScalingGroup = new alicloud.ess.ScalingGroup("default", {
 *     minSize: 1,
 *     maxSize: 1,
 *     scalingGroupName: myName,
 *     vswitchIds: [defaultSwitch.id],
 *     removalPolicies: [
 *         "OldestInstance",
 *         "NewestInstance",
 *     ],
 * });
 * const defaultScalingConfiguration = new alicloud.ess.ScalingConfiguration("default", {
 *     scalingGroupId: defaultScalingGroup.id,
 *     imageId: defaultGetImages.then(defaultGetImages => defaultGetImages.images?.[0]?.id),
 *     instanceType: defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.id),
 *     securityGroupId: defaultSecurityGroup.id,
 *     forceDelete: true,
 * });
 * const defaultScalingRule = new alicloud.ess.ScalingRule("default", {
 *     scalingGroupId: defaultScalingGroup.id,
 *     adjustmentType: "TotalCapacity",
 *     adjustmentValue: 1,
 * });
 * ```
 *
 * ## Module Support
 *
 * You can use to the existing autoscaling-rule module
 * to create different type rules, alarm task and scheduled task one-click.
 *
 * ## Import
 *
 * ESS scaling rule can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ess/scalingRule:ScalingRule example abc123456
 * ```
 */
export class ScalingRule extends pulumi.CustomResource {
    /**
     * Get an existing ScalingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScalingRuleState, opts?: pulumi.CustomResourceOptions): ScalingRule {
        return new ScalingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ess/scalingRule:ScalingRule';

    /**
     * Returns true if the given object is an instance of ScalingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScalingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScalingRule.__pulumiType;
    }

    /**
     * Adjustment mode of a scaling rule. Optional values:
     * - QuantityChangeInCapacity: It is used to increase or decrease a specified number of ECS instances.
     * - PercentChangeInCapacity: It is used to increase or decrease a specified proportion of ECS instances.
     * - TotalCapacity: It is used to adjust the quantity of ECS instances in the current scaling group to a specified value.
     */
    declare public readonly adjustmentType: pulumi.Output<string | undefined>;
    /**
     * The number of ECS instances to be adjusted in the scaling rule. This parameter is required and applicable only to simple scaling rules. The number of ECS instances to be adjusted in a single scaling activity cannot exceed 500. Value range:
     * - QuantityChangeInCapacity：(0, 500] U (-500, 0]
     * - PercentChangeInCapacity：[0, 10000] U [-100, 0]
     * - TotalCapacity：[0, 1000]
     */
    declare public readonly adjustmentValue: pulumi.Output<number | undefined>;
    /**
     * AlarmDimension for StepScalingRule. See `alarmDimension` below.
     */
    declare public readonly alarmDimension: pulumi.Output<outputs.ess.ScalingRuleAlarmDimension | undefined>;
    /**
     * The unique identifier of the scaling rule.
     */
    declare public /*out*/ readonly ari: pulumi.Output<string>;
    /**
     * The cooldown time of the scaling rule. This parameter is applicable only to simple scaling rules. Value range: [0, 86,400], in seconds. The default value is empty，if not set, the return value will be 0, which is the default value of integer.
     */
    declare public readonly cooldown: pulumi.Output<number | undefined>;
    /**
     * Indicates whether scale in by the target tracking policy is disabled. Default to false.
     */
    declare public readonly disableScaleIn: pulumi.Output<boolean | undefined>;
    /**
     * The estimated time, in seconds, until a newly launched instance will contribute CloudMonitor metrics. Default to 300.
     */
    declare public readonly estimatedInstanceWarmup: pulumi.Output<number>;
    /**
     * The Hybrid Cloud Monitoring metrics. See `hybridMetrics` below.
     */
    declare public readonly hybridMetrics: pulumi.Output<outputs.ess.ScalingRuleHybridMetric[] | undefined>;
    /**
     * The ID of the Hybrid Cloud Monitoring metric repository.
     */
    declare public readonly hybridMonitorNamespace: pulumi.Output<string | undefined>;
    /**
     * The maximum number of ECS instances that can be added to the scaling group. If you specify InitialMaxSize, you must also specify PredictiveValueBehavior.
     */
    declare public readonly initialMaxSize: pulumi.Output<number>;
    /**
     * A CloudMonitor metric name.
     */
    declare public readonly metricName: pulumi.Output<string | undefined>;
    /**
     * The type of the metric. Valid values: system, custom, hybrid.
     */
    declare public readonly metricType: pulumi.Output<string>;
    /**
     * The minimum number of instances that must be scaled. This parameter takes effect if you set ScalingRuleType to SimpleScalingRule or StepScalingRule, and AdjustmentType to PercentChangeInCapacity.
     */
    declare public readonly minAdjustmentMagnitude: pulumi.Output<number | undefined>;
    /**
     * The mode of the predictive scaling rule. Valid values: PredictAndScale, PredictOnly.
     */
    declare public readonly predictiveScalingMode: pulumi.Output<string>;
    /**
     * The amount of buffer time before the prediction task runs. By default, all prediction tasks that are automatically created by a predictive scaling rule run on the hour. You can specify a buffer time to run prediction tasks and prepare resources in advance. Valid values: 0 to 60. Unit: minutes.
     */
    declare public readonly predictiveTaskBufferTime: pulumi.Output<number>;
    /**
     * The action on the predicted maximum value. Valid values: MaxOverridePredictiveValue, PredictiveValueOverrideMax, PredictiveValueOverrideMaxWithBuffer.
     */
    declare public readonly predictiveValueBehavior: pulumi.Output<string>;
    /**
     * The ratio based on which the predicted value is increased if you set PredictiveValueBehavior to PredictiveValueOverrideMaxWithBuffer. If the predicted value increased by this ratio is greater than the initial maximum capacity, the increased value is used as the maximum value for prediction tasks. Valid values: 0 to 100.
     */
    declare public readonly predictiveValueBuffer: pulumi.Output<number>;
    /**
     * The number of consecutive times that the event-triggered task created for scale-ins must meet the threshold conditions before an alert is triggered. After a target tracking scaling rule is created, an event-triggered task is automatically created and associated with the target tracking scaling rule.
     */
    declare public readonly scaleInEvaluationCount: pulumi.Output<number>;
    /**
     * The number of consecutive times that the event-triggered task created for scale-outs must meet the threshold conditions before an alert is triggered. After a target tracking scaling rule is created, an event-triggered task is automatically created and associated with the target tracking scaling rule.
     */
    declare public readonly scaleOutEvaluationCount: pulumi.Output<number>;
    /**
     * ID of the scaling group of a scaling rule.
     */
    declare public readonly scalingGroupId: pulumi.Output<string>;
    /**
     * Name shown for the scaling rule, which must contain 2-64 characters (English or Chinese), starting with numbers, English letters or Chinese characters, and can contain number, underscores `_`, hypens `-`, and decimal point `.`. If this parameter value is not specified, the default value is scaling rule id.
     */
    declare public readonly scalingRuleName: pulumi.Output<string>;
    /**
     * The scaling rule type, either "SimpleScalingRule", "TargetTrackingScalingRule", "StepScalingRule", "PredictiveScalingRule". Default to "SimpleScalingRule".
     */
    declare public readonly scalingRuleType: pulumi.Output<string | undefined>;
    /**
     * Steps for StepScalingRule. See `stepAdjustment` below.
     */
    declare public readonly stepAdjustments: pulumi.Output<outputs.ess.ScalingRuleStepAdjustment[] | undefined>;
    /**
     * The target value for the metric.
     */
    declare public readonly targetValue: pulumi.Output<number | undefined>;

    /**
     * Create a ScalingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScalingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScalingRuleArgs | ScalingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScalingRuleState | undefined;
            resourceInputs["adjustmentType"] = state?.adjustmentType;
            resourceInputs["adjustmentValue"] = state?.adjustmentValue;
            resourceInputs["alarmDimension"] = state?.alarmDimension;
            resourceInputs["ari"] = state?.ari;
            resourceInputs["cooldown"] = state?.cooldown;
            resourceInputs["disableScaleIn"] = state?.disableScaleIn;
            resourceInputs["estimatedInstanceWarmup"] = state?.estimatedInstanceWarmup;
            resourceInputs["hybridMetrics"] = state?.hybridMetrics;
            resourceInputs["hybridMonitorNamespace"] = state?.hybridMonitorNamespace;
            resourceInputs["initialMaxSize"] = state?.initialMaxSize;
            resourceInputs["metricName"] = state?.metricName;
            resourceInputs["metricType"] = state?.metricType;
            resourceInputs["minAdjustmentMagnitude"] = state?.minAdjustmentMagnitude;
            resourceInputs["predictiveScalingMode"] = state?.predictiveScalingMode;
            resourceInputs["predictiveTaskBufferTime"] = state?.predictiveTaskBufferTime;
            resourceInputs["predictiveValueBehavior"] = state?.predictiveValueBehavior;
            resourceInputs["predictiveValueBuffer"] = state?.predictiveValueBuffer;
            resourceInputs["scaleInEvaluationCount"] = state?.scaleInEvaluationCount;
            resourceInputs["scaleOutEvaluationCount"] = state?.scaleOutEvaluationCount;
            resourceInputs["scalingGroupId"] = state?.scalingGroupId;
            resourceInputs["scalingRuleName"] = state?.scalingRuleName;
            resourceInputs["scalingRuleType"] = state?.scalingRuleType;
            resourceInputs["stepAdjustments"] = state?.stepAdjustments;
            resourceInputs["targetValue"] = state?.targetValue;
        } else {
            const args = argsOrState as ScalingRuleArgs | undefined;
            if (args?.scalingGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'scalingGroupId'");
            }
            resourceInputs["adjustmentType"] = args?.adjustmentType;
            resourceInputs["adjustmentValue"] = args?.adjustmentValue;
            resourceInputs["alarmDimension"] = args?.alarmDimension;
            resourceInputs["cooldown"] = args?.cooldown;
            resourceInputs["disableScaleIn"] = args?.disableScaleIn;
            resourceInputs["estimatedInstanceWarmup"] = args?.estimatedInstanceWarmup;
            resourceInputs["hybridMetrics"] = args?.hybridMetrics;
            resourceInputs["hybridMonitorNamespace"] = args?.hybridMonitorNamespace;
            resourceInputs["initialMaxSize"] = args?.initialMaxSize;
            resourceInputs["metricName"] = args?.metricName;
            resourceInputs["metricType"] = args?.metricType;
            resourceInputs["minAdjustmentMagnitude"] = args?.minAdjustmentMagnitude;
            resourceInputs["predictiveScalingMode"] = args?.predictiveScalingMode;
            resourceInputs["predictiveTaskBufferTime"] = args?.predictiveTaskBufferTime;
            resourceInputs["predictiveValueBehavior"] = args?.predictiveValueBehavior;
            resourceInputs["predictiveValueBuffer"] = args?.predictiveValueBuffer;
            resourceInputs["scaleInEvaluationCount"] = args?.scaleInEvaluationCount;
            resourceInputs["scaleOutEvaluationCount"] = args?.scaleOutEvaluationCount;
            resourceInputs["scalingGroupId"] = args?.scalingGroupId;
            resourceInputs["scalingRuleName"] = args?.scalingRuleName;
            resourceInputs["scalingRuleType"] = args?.scalingRuleType;
            resourceInputs["stepAdjustments"] = args?.stepAdjustments;
            resourceInputs["targetValue"] = args?.targetValue;
            resourceInputs["ari"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScalingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScalingRule resources.
 */
export interface ScalingRuleState {
    /**
     * Adjustment mode of a scaling rule. Optional values:
     * - QuantityChangeInCapacity: It is used to increase or decrease a specified number of ECS instances.
     * - PercentChangeInCapacity: It is used to increase or decrease a specified proportion of ECS instances.
     * - TotalCapacity: It is used to adjust the quantity of ECS instances in the current scaling group to a specified value.
     */
    adjustmentType?: pulumi.Input<string>;
    /**
     * The number of ECS instances to be adjusted in the scaling rule. This parameter is required and applicable only to simple scaling rules. The number of ECS instances to be adjusted in a single scaling activity cannot exceed 500. Value range:
     * - QuantityChangeInCapacity：(0, 500] U (-500, 0]
     * - PercentChangeInCapacity：[0, 10000] U [-100, 0]
     * - TotalCapacity：[0, 1000]
     */
    adjustmentValue?: pulumi.Input<number>;
    /**
     * AlarmDimension for StepScalingRule. See `alarmDimension` below.
     */
    alarmDimension?: pulumi.Input<inputs.ess.ScalingRuleAlarmDimension>;
    /**
     * The unique identifier of the scaling rule.
     */
    ari?: pulumi.Input<string>;
    /**
     * The cooldown time of the scaling rule. This parameter is applicable only to simple scaling rules. Value range: [0, 86,400], in seconds. The default value is empty，if not set, the return value will be 0, which is the default value of integer.
     */
    cooldown?: pulumi.Input<number>;
    /**
     * Indicates whether scale in by the target tracking policy is disabled. Default to false.
     */
    disableScaleIn?: pulumi.Input<boolean>;
    /**
     * The estimated time, in seconds, until a newly launched instance will contribute CloudMonitor metrics. Default to 300.
     */
    estimatedInstanceWarmup?: pulumi.Input<number>;
    /**
     * The Hybrid Cloud Monitoring metrics. See `hybridMetrics` below.
     */
    hybridMetrics?: pulumi.Input<pulumi.Input<inputs.ess.ScalingRuleHybridMetric>[]>;
    /**
     * The ID of the Hybrid Cloud Monitoring metric repository.
     */
    hybridMonitorNamespace?: pulumi.Input<string>;
    /**
     * The maximum number of ECS instances that can be added to the scaling group. If you specify InitialMaxSize, you must also specify PredictiveValueBehavior.
     */
    initialMaxSize?: pulumi.Input<number>;
    /**
     * A CloudMonitor metric name.
     */
    metricName?: pulumi.Input<string>;
    /**
     * The type of the metric. Valid values: system, custom, hybrid.
     */
    metricType?: pulumi.Input<string>;
    /**
     * The minimum number of instances that must be scaled. This parameter takes effect if you set ScalingRuleType to SimpleScalingRule or StepScalingRule, and AdjustmentType to PercentChangeInCapacity.
     */
    minAdjustmentMagnitude?: pulumi.Input<number>;
    /**
     * The mode of the predictive scaling rule. Valid values: PredictAndScale, PredictOnly.
     */
    predictiveScalingMode?: pulumi.Input<string>;
    /**
     * The amount of buffer time before the prediction task runs. By default, all prediction tasks that are automatically created by a predictive scaling rule run on the hour. You can specify a buffer time to run prediction tasks and prepare resources in advance. Valid values: 0 to 60. Unit: minutes.
     */
    predictiveTaskBufferTime?: pulumi.Input<number>;
    /**
     * The action on the predicted maximum value. Valid values: MaxOverridePredictiveValue, PredictiveValueOverrideMax, PredictiveValueOverrideMaxWithBuffer.
     */
    predictiveValueBehavior?: pulumi.Input<string>;
    /**
     * The ratio based on which the predicted value is increased if you set PredictiveValueBehavior to PredictiveValueOverrideMaxWithBuffer. If the predicted value increased by this ratio is greater than the initial maximum capacity, the increased value is used as the maximum value for prediction tasks. Valid values: 0 to 100.
     */
    predictiveValueBuffer?: pulumi.Input<number>;
    /**
     * The number of consecutive times that the event-triggered task created for scale-ins must meet the threshold conditions before an alert is triggered. After a target tracking scaling rule is created, an event-triggered task is automatically created and associated with the target tracking scaling rule.
     */
    scaleInEvaluationCount?: pulumi.Input<number>;
    /**
     * The number of consecutive times that the event-triggered task created for scale-outs must meet the threshold conditions before an alert is triggered. After a target tracking scaling rule is created, an event-triggered task is automatically created and associated with the target tracking scaling rule.
     */
    scaleOutEvaluationCount?: pulumi.Input<number>;
    /**
     * ID of the scaling group of a scaling rule.
     */
    scalingGroupId?: pulumi.Input<string>;
    /**
     * Name shown for the scaling rule, which must contain 2-64 characters (English or Chinese), starting with numbers, English letters or Chinese characters, and can contain number, underscores `_`, hypens `-`, and decimal point `.`. If this parameter value is not specified, the default value is scaling rule id.
     */
    scalingRuleName?: pulumi.Input<string>;
    /**
     * The scaling rule type, either "SimpleScalingRule", "TargetTrackingScalingRule", "StepScalingRule", "PredictiveScalingRule". Default to "SimpleScalingRule".
     */
    scalingRuleType?: pulumi.Input<string>;
    /**
     * Steps for StepScalingRule. See `stepAdjustment` below.
     */
    stepAdjustments?: pulumi.Input<pulumi.Input<inputs.ess.ScalingRuleStepAdjustment>[]>;
    /**
     * The target value for the metric.
     */
    targetValue?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ScalingRule resource.
 */
export interface ScalingRuleArgs {
    /**
     * Adjustment mode of a scaling rule. Optional values:
     * - QuantityChangeInCapacity: It is used to increase or decrease a specified number of ECS instances.
     * - PercentChangeInCapacity: It is used to increase or decrease a specified proportion of ECS instances.
     * - TotalCapacity: It is used to adjust the quantity of ECS instances in the current scaling group to a specified value.
     */
    adjustmentType?: pulumi.Input<string>;
    /**
     * The number of ECS instances to be adjusted in the scaling rule. This parameter is required and applicable only to simple scaling rules. The number of ECS instances to be adjusted in a single scaling activity cannot exceed 500. Value range:
     * - QuantityChangeInCapacity：(0, 500] U (-500, 0]
     * - PercentChangeInCapacity：[0, 10000] U [-100, 0]
     * - TotalCapacity：[0, 1000]
     */
    adjustmentValue?: pulumi.Input<number>;
    /**
     * AlarmDimension for StepScalingRule. See `alarmDimension` below.
     */
    alarmDimension?: pulumi.Input<inputs.ess.ScalingRuleAlarmDimension>;
    /**
     * The cooldown time of the scaling rule. This parameter is applicable only to simple scaling rules. Value range: [0, 86,400], in seconds. The default value is empty，if not set, the return value will be 0, which is the default value of integer.
     */
    cooldown?: pulumi.Input<number>;
    /**
     * Indicates whether scale in by the target tracking policy is disabled. Default to false.
     */
    disableScaleIn?: pulumi.Input<boolean>;
    /**
     * The estimated time, in seconds, until a newly launched instance will contribute CloudMonitor metrics. Default to 300.
     */
    estimatedInstanceWarmup?: pulumi.Input<number>;
    /**
     * The Hybrid Cloud Monitoring metrics. See `hybridMetrics` below.
     */
    hybridMetrics?: pulumi.Input<pulumi.Input<inputs.ess.ScalingRuleHybridMetric>[]>;
    /**
     * The ID of the Hybrid Cloud Monitoring metric repository.
     */
    hybridMonitorNamespace?: pulumi.Input<string>;
    /**
     * The maximum number of ECS instances that can be added to the scaling group. If you specify InitialMaxSize, you must also specify PredictiveValueBehavior.
     */
    initialMaxSize?: pulumi.Input<number>;
    /**
     * A CloudMonitor metric name.
     */
    metricName?: pulumi.Input<string>;
    /**
     * The type of the metric. Valid values: system, custom, hybrid.
     */
    metricType?: pulumi.Input<string>;
    /**
     * The minimum number of instances that must be scaled. This parameter takes effect if you set ScalingRuleType to SimpleScalingRule or StepScalingRule, and AdjustmentType to PercentChangeInCapacity.
     */
    minAdjustmentMagnitude?: pulumi.Input<number>;
    /**
     * The mode of the predictive scaling rule. Valid values: PredictAndScale, PredictOnly.
     */
    predictiveScalingMode?: pulumi.Input<string>;
    /**
     * The amount of buffer time before the prediction task runs. By default, all prediction tasks that are automatically created by a predictive scaling rule run on the hour. You can specify a buffer time to run prediction tasks and prepare resources in advance. Valid values: 0 to 60. Unit: minutes.
     */
    predictiveTaskBufferTime?: pulumi.Input<number>;
    /**
     * The action on the predicted maximum value. Valid values: MaxOverridePredictiveValue, PredictiveValueOverrideMax, PredictiveValueOverrideMaxWithBuffer.
     */
    predictiveValueBehavior?: pulumi.Input<string>;
    /**
     * The ratio based on which the predicted value is increased if you set PredictiveValueBehavior to PredictiveValueOverrideMaxWithBuffer. If the predicted value increased by this ratio is greater than the initial maximum capacity, the increased value is used as the maximum value for prediction tasks. Valid values: 0 to 100.
     */
    predictiveValueBuffer?: pulumi.Input<number>;
    /**
     * The number of consecutive times that the event-triggered task created for scale-ins must meet the threshold conditions before an alert is triggered. After a target tracking scaling rule is created, an event-triggered task is automatically created and associated with the target tracking scaling rule.
     */
    scaleInEvaluationCount?: pulumi.Input<number>;
    /**
     * The number of consecutive times that the event-triggered task created for scale-outs must meet the threshold conditions before an alert is triggered. After a target tracking scaling rule is created, an event-triggered task is automatically created and associated with the target tracking scaling rule.
     */
    scaleOutEvaluationCount?: pulumi.Input<number>;
    /**
     * ID of the scaling group of a scaling rule.
     */
    scalingGroupId: pulumi.Input<string>;
    /**
     * Name shown for the scaling rule, which must contain 2-64 characters (English or Chinese), starting with numbers, English letters or Chinese characters, and can contain number, underscores `_`, hypens `-`, and decimal point `.`. If this parameter value is not specified, the default value is scaling rule id.
     */
    scalingRuleName?: pulumi.Input<string>;
    /**
     * The scaling rule type, either "SimpleScalingRule", "TargetTrackingScalingRule", "StepScalingRule", "PredictiveScalingRule". Default to "SimpleScalingRule".
     */
    scalingRuleType?: pulumi.Input<string>;
    /**
     * Steps for StepScalingRule. See `stepAdjustment` below.
     */
    stepAdjustments?: pulumi.Input<pulumi.Input<inputs.ess.ScalingRuleStepAdjustment>[]>;
    /**
     * The target value for the metric.
     */
    targetValue?: pulumi.Input<number>;
}
