// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Bastion Host Host resource.
 *
 * For information about Bastion Host Host and how to use it, see [What is Host](https://www.alibabacloud.com/help/en/doc-detail/201330.htm).
 *
 * > **NOTE:** Available since v1.135.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf_example";
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultGetNetworks = alicloud.vpc.getNetworks({
 *     nameRegex: "^default-NODELETING$",
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultGetSwitches = Promise.all([defaultGetNetworks, _default]).then(([defaultGetNetworks, _default]) => alicloud.vpc.getSwitches({
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: defaultGetNetworks.ids?.[0],
 *     zoneId: _default.zones?.[0]?.id,
 * }));
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {vpcId: defaultGetNetworks.then(defaultGetNetworks => defaultGetNetworks.ids?.[0])});
 * const defaultInstance = new alicloud.bastionhost.Instance("default", {
 *     description: name,
 *     licenseCode: "bhah_ent_50_asset",
 *     planCode: "cloudbastion",
 *     storage: "5",
 *     bandwidth: "5",
 *     period: 1,
 *     vswitchId: defaultGetSwitches.then(defaultGetSwitches => defaultGetSwitches.ids?.[0]),
 *     securityGroupIds: [defaultSecurityGroup.id],
 * });
 * const defaultHost = new alicloud.bastionhost.Host("default", {
 *     instanceId: defaultInstance.id,
 *     hostName: name,
 *     activeAddressType: "Private",
 *     hostPrivateAddress: "172.16.0.10",
 *     osType: "Linux",
 *     source: "Local",
 * });
 * ```
 *
 * ## Import
 *
 * Bastion Host Host can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:bastionhost/host:Host example <instance_id>:<host_id>
 * ```
 */
export class Host extends pulumi.CustomResource {
    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostState, opts?: pulumi.CustomResourceOptions): Host {
        return new Host(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:bastionhost/host:Host';

    /**
     * Returns true if the given object is an instance of Host.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Host {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Host.__pulumiType;
    }

    /**
     * Specify the new create a host of address types. Valid values: `Public`: the IP address of a Public network. `Private`: Private network address.
     */
    declare public readonly activeAddressType: pulumi.Output<string>;
    /**
     * Specify a host of notes, supports up to 500 characters.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * The host ID.
     */
    declare public /*out*/ readonly hostId: pulumi.Output<string>;
    /**
     * Specify the new create a host name of the supports up to 128 characters.
     */
    declare public readonly hostName: pulumi.Output<string>;
    /**
     * Specify the new create a host of the private network address, it is possible to use the domain name or IP ADDRESS. **NOTE:**  This parameter is required if the `activeAddressType` parameter is set to `Private`.
     */
    declare public readonly hostPrivateAddress: pulumi.Output<string | undefined>;
    /**
     * Specify the new create a host of the IP address of a public network, it is possible to use the domain name or IP ADDRESS.
     */
    declare public readonly hostPublicAddress: pulumi.Output<string | undefined>;
    /**
     * Specify the new create a host where the Bastion host ID of.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * The instance region id.
     */
    declare public readonly instanceRegionId: pulumi.Output<string | undefined>;
    /**
     * Specify the new create the host's operating system. Valid values: `Linux`,`Windows`.
     */
    declare public readonly osType: pulumi.Output<string>;
    /**
     * Specify the new create a host of source. Valid values: 
     * * `Local`: localhost
     * * `Ecs`:ECS instance
     * * `Rds`:RDS exclusive cluster host.
     */
    declare public readonly source: pulumi.Output<string>;
    /**
     * Specify the newly created ECS instance ID or dedicated cluster host ID. **NOTE:** This parameter is required if the `source` parameter is set to `Ecs` or `Rds`.
     */
    declare public readonly sourceInstanceId: pulumi.Output<string | undefined>;

    /**
     * Create a Host resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostArgs | HostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostState | undefined;
            resourceInputs["activeAddressType"] = state?.activeAddressType;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["hostId"] = state?.hostId;
            resourceInputs["hostName"] = state?.hostName;
            resourceInputs["hostPrivateAddress"] = state?.hostPrivateAddress;
            resourceInputs["hostPublicAddress"] = state?.hostPublicAddress;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["instanceRegionId"] = state?.instanceRegionId;
            resourceInputs["osType"] = state?.osType;
            resourceInputs["source"] = state?.source;
            resourceInputs["sourceInstanceId"] = state?.sourceInstanceId;
        } else {
            const args = argsOrState as HostArgs | undefined;
            if (args?.activeAddressType === undefined && !opts.urn) {
                throw new Error("Missing required property 'activeAddressType'");
            }
            if (args?.hostName === undefined && !opts.urn) {
                throw new Error("Missing required property 'hostName'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.osType === undefined && !opts.urn) {
                throw new Error("Missing required property 'osType'");
            }
            if (args?.source === undefined && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["activeAddressType"] = args?.activeAddressType;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["hostName"] = args?.hostName;
            resourceInputs["hostPrivateAddress"] = args?.hostPrivateAddress;
            resourceInputs["hostPublicAddress"] = args?.hostPublicAddress;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["instanceRegionId"] = args?.instanceRegionId;
            resourceInputs["osType"] = args?.osType;
            resourceInputs["source"] = args?.source;
            resourceInputs["sourceInstanceId"] = args?.sourceInstanceId;
            resourceInputs["hostId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Host.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Host resources.
 */
export interface HostState {
    /**
     * Specify the new create a host of address types. Valid values: `Public`: the IP address of a Public network. `Private`: Private network address.
     */
    activeAddressType?: pulumi.Input<string>;
    /**
     * Specify a host of notes, supports up to 500 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * The host ID.
     */
    hostId?: pulumi.Input<string>;
    /**
     * Specify the new create a host name of the supports up to 128 characters.
     */
    hostName?: pulumi.Input<string>;
    /**
     * Specify the new create a host of the private network address, it is possible to use the domain name or IP ADDRESS. **NOTE:**  This parameter is required if the `activeAddressType` parameter is set to `Private`.
     */
    hostPrivateAddress?: pulumi.Input<string>;
    /**
     * Specify the new create a host of the IP address of a public network, it is possible to use the domain name or IP ADDRESS.
     */
    hostPublicAddress?: pulumi.Input<string>;
    /**
     * Specify the new create a host where the Bastion host ID of.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The instance region id.
     */
    instanceRegionId?: pulumi.Input<string>;
    /**
     * Specify the new create the host's operating system. Valid values: `Linux`,`Windows`.
     */
    osType?: pulumi.Input<string>;
    /**
     * Specify the new create a host of source. Valid values: 
     * * `Local`: localhost
     * * `Ecs`:ECS instance
     * * `Rds`:RDS exclusive cluster host.
     */
    source?: pulumi.Input<string>;
    /**
     * Specify the newly created ECS instance ID or dedicated cluster host ID. **NOTE:** This parameter is required if the `source` parameter is set to `Ecs` or `Rds`.
     */
    sourceInstanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Host resource.
 */
export interface HostArgs {
    /**
     * Specify the new create a host of address types. Valid values: `Public`: the IP address of a Public network. `Private`: Private network address.
     */
    activeAddressType: pulumi.Input<string>;
    /**
     * Specify a host of notes, supports up to 500 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * Specify the new create a host name of the supports up to 128 characters.
     */
    hostName: pulumi.Input<string>;
    /**
     * Specify the new create a host of the private network address, it is possible to use the domain name or IP ADDRESS. **NOTE:**  This parameter is required if the `activeAddressType` parameter is set to `Private`.
     */
    hostPrivateAddress?: pulumi.Input<string>;
    /**
     * Specify the new create a host of the IP address of a public network, it is possible to use the domain name or IP ADDRESS.
     */
    hostPublicAddress?: pulumi.Input<string>;
    /**
     * Specify the new create a host where the Bastion host ID of.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The instance region id.
     */
    instanceRegionId?: pulumi.Input<string>;
    /**
     * Specify the new create the host's operating system. Valid values: `Linux`,`Windows`.
     */
    osType: pulumi.Input<string>;
    /**
     * Specify the new create a host of source. Valid values: 
     * * `Local`: localhost
     * * `Ecs`:ECS instance
     * * `Rds`:RDS exclusive cluster host.
     */
    source: pulumi.Input<string>;
    /**
     * Specify the newly created ECS instance ID or dedicated cluster host ID. **NOTE:** This parameter is required if the `source` parameter is set to `Ecs` or `Rds`.
     */
    sourceInstanceId?: pulumi.Input<string>;
}
