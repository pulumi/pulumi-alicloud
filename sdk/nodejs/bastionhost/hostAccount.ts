// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Bastion Host Host Account resource.
 *
 * For information about Bastion Host Host Account and how to use it, see [What is Host Account](https://www.alibabacloud.com/help/en/doc-detail/204377.htm).
 *
 * > **NOTE:** Available in v1.135.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.bastionhost.HostAccount("example", {
 *     hostAccountName: "example_value",
 *     hostId: "15",
 *     instanceId: "bastionhost-cn-tl32bh0no30",
 *     password: "YourPassword12345",
 *     protocolName: "SSH",
 * });
 * ```
 *
 * ## Import
 *
 * Bastion Host Host Account can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:bastionhost/hostAccount:HostAccount example <instance_id>:<host_account_id>
 * ```
 */
export class HostAccount extends pulumi.CustomResource {
    /**
     * Get an existing HostAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostAccountState, opts?: pulumi.CustomResourceOptions): HostAccount {
        return new HostAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:bastionhost/hostAccount:HostAccount';

    /**
     * Returns true if the given object is an instance of HostAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HostAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HostAccount.__pulumiType;
    }

    /**
     * Hosting account ID.
     */
    public /*out*/ readonly hostAccountId!: pulumi.Output<string>;
    /**
     * The name of the host account. The name can be up to 128 characters in length.
     */
    public readonly hostAccountName!: pulumi.Output<string>;
    /**
     * The ID of the host for which you want to create an account.
     */
    public readonly hostId!: pulumi.Output<string>;
    /**
     * The ID of the Bastionhost instance where you want to create an account for the host.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The passphrase of the private key for the host account. **NOTE:** It is valid when the attribute `protocolName` is `SSH`.
     */
    public readonly passPhrase!: pulumi.Output<string | undefined>;
    /**
     * The password of the host account.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The private key of the host account. The value is a Base64-encoded string. **NOTE:** It is valid when the attribute `protocolName` is `SSH`
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * The protocol used by the host account. Valid values: SSH,RDP
     */
    public readonly protocolName!: pulumi.Output<string>;

    /**
     * Create a HostAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostAccountArgs | HostAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostAccountState | undefined;
            resourceInputs["hostAccountId"] = state ? state.hostAccountId : undefined;
            resourceInputs["hostAccountName"] = state ? state.hostAccountName : undefined;
            resourceInputs["hostId"] = state ? state.hostId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["passPhrase"] = state ? state.passPhrase : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["protocolName"] = state ? state.protocolName : undefined;
        } else {
            const args = argsOrState as HostAccountArgs | undefined;
            if ((!args || args.hostAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostAccountName'");
            }
            if ((!args || args.hostId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostId'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.protocolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolName'");
            }
            resourceInputs["hostAccountName"] = args ? args.hostAccountName : undefined;
            resourceInputs["hostId"] = args ? args.hostId : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["passPhrase"] = args ? args.passPhrase : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["protocolName"] = args ? args.protocolName : undefined;
            resourceInputs["hostAccountId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HostAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HostAccount resources.
 */
export interface HostAccountState {
    /**
     * Hosting account ID.
     */
    hostAccountId?: pulumi.Input<string>;
    /**
     * The name of the host account. The name can be up to 128 characters in length.
     */
    hostAccountName?: pulumi.Input<string>;
    /**
     * The ID of the host for which you want to create an account.
     */
    hostId?: pulumi.Input<string>;
    /**
     * The ID of the Bastionhost instance where you want to create an account for the host.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The passphrase of the private key for the host account. **NOTE:** It is valid when the attribute `protocolName` is `SSH`.
     */
    passPhrase?: pulumi.Input<string>;
    /**
     * The password of the host account.
     */
    password?: pulumi.Input<string>;
    /**
     * The private key of the host account. The value is a Base64-encoded string. **NOTE:** It is valid when the attribute `protocolName` is `SSH`
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The protocol used by the host account. Valid values: SSH,RDP
     */
    protocolName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HostAccount resource.
 */
export interface HostAccountArgs {
    /**
     * The name of the host account. The name can be up to 128 characters in length.
     */
    hostAccountName: pulumi.Input<string>;
    /**
     * The ID of the host for which you want to create an account.
     */
    hostId: pulumi.Input<string>;
    /**
     * The ID of the Bastionhost instance where you want to create an account for the host.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The passphrase of the private key for the host account. **NOTE:** It is valid when the attribute `protocolName` is `SSH`.
     */
    passPhrase?: pulumi.Input<string>;
    /**
     * The password of the host account.
     */
    password?: pulumi.Input<string>;
    /**
     * The private key of the host account. The value is a Base64-encoded string. **NOTE:** It is valid when the attribute `protocolName` is `SSH`
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The protocol used by the host account. Valid values: SSH,RDP
     */
    protocolName: pulumi.Input<string>;
}
