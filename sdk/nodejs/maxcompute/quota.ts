// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * Max Compute Quota can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:maxcompute/quota:Quota example <id>
 * ```
 */
export class Quota extends pulumi.CustomResource {
    /**
     * Get an existing Quota resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuotaState, opts?: pulumi.CustomResourceOptions): Quota {
        return new Quota(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:maxcompute/quota:Quota';

    /**
     * Returns true if the given object is an instance of Quota.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Quota {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Quota.__pulumiType;
    }

    /**
     * Valid values: odps_intl/odpsplus_intl/odps/odpsplus
     * - *NOTE:** --odps_intl: International Station standard post-payment -- odpsplus_intl: International Station standard pre-payment -- odps: China Station standard post-payment -- odpsplus: China Station standard pre-payment
     */
    declare public readonly commodityCode: pulumi.Output<string>;
    /**
     * Define quota rules when creating quotas, for example:{"CU":50,"ordTime":"1:Month","autoRenew":false}.
     * CU (minimum quota resource size is 50)
     * ordTime 1:Month/Year (1 means quantity: Month/Year is the unit)
     * autoRenew (whether to enable automatic renewal)
     * If PaymentType is PayAsYouGo, you do not need to fill in
     */
    declare public readonly commodityData: pulumi.Output<string | undefined>;
    /**
     * Quota partial nickname, supports English letters and numbers, up to 24 characters
     *
     * > **NOTE:** If PaymentType is PayAsYouGo, you do not need to fill it in
     */
    declare public readonly partNickName: pulumi.Output<string | undefined>;
    /**
     * Payment type. Valid values: Subscription/PayAsYouGo
     *
     * > **NOTE:** -- PayAsYouGo only needs to be opened once per region
     */
    declare public readonly paymentType: pulumi.Output<string>;
    /**
     * Secondary Quota list
     *
     * > **NOTE:** -- Add: If the configuration contains a second-level Quota that does not exist, a second-level Quota is added. -- Delete: If the configuration does not contain the existing secondary Quota, it will be deleted. -- Modify: If the configuration is inconsistent with the existing secondary Quota configuration parameters, the secondary Quota configuration will be updated. -- The default secondary Quota must be configured and cannot be deleted.
     * See `subQuotaInfoList` below.
     */
    declare public readonly subQuotaInfoLists: pulumi.Output<outputs.maxcompute.QuotaSubQuotaInfoList[]>;

    /**
     * Create a Quota resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuotaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuotaArgs | QuotaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuotaState | undefined;
            resourceInputs["commodityCode"] = state?.commodityCode;
            resourceInputs["commodityData"] = state?.commodityData;
            resourceInputs["partNickName"] = state?.partNickName;
            resourceInputs["paymentType"] = state?.paymentType;
            resourceInputs["subQuotaInfoLists"] = state?.subQuotaInfoLists;
        } else {
            const args = argsOrState as QuotaArgs | undefined;
            if (args?.commodityCode === undefined && !opts.urn) {
                throw new Error("Missing required property 'commodityCode'");
            }
            if (args?.paymentType === undefined && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            resourceInputs["commodityCode"] = args?.commodityCode;
            resourceInputs["commodityData"] = args?.commodityData;
            resourceInputs["partNickName"] = args?.partNickName;
            resourceInputs["paymentType"] = args?.paymentType;
            resourceInputs["subQuotaInfoLists"] = args?.subQuotaInfoLists;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Quota.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Quota resources.
 */
export interface QuotaState {
    /**
     * Valid values: odps_intl/odpsplus_intl/odps/odpsplus
     * - *NOTE:** --odps_intl: International Station standard post-payment -- odpsplus_intl: International Station standard pre-payment -- odps: China Station standard post-payment -- odpsplus: China Station standard pre-payment
     */
    commodityCode?: pulumi.Input<string>;
    /**
     * Define quota rules when creating quotas, for example:{"CU":50,"ordTime":"1:Month","autoRenew":false}.
     * CU (minimum quota resource size is 50)
     * ordTime 1:Month/Year (1 means quantity: Month/Year is the unit)
     * autoRenew (whether to enable automatic renewal)
     * If PaymentType is PayAsYouGo, you do not need to fill in
     */
    commodityData?: pulumi.Input<string>;
    /**
     * Quota partial nickname, supports English letters and numbers, up to 24 characters
     *
     * > **NOTE:** If PaymentType is PayAsYouGo, you do not need to fill it in
     */
    partNickName?: pulumi.Input<string>;
    /**
     * Payment type. Valid values: Subscription/PayAsYouGo
     *
     * > **NOTE:** -- PayAsYouGo only needs to be opened once per region
     */
    paymentType?: pulumi.Input<string>;
    /**
     * Secondary Quota list
     *
     * > **NOTE:** -- Add: If the configuration contains a second-level Quota that does not exist, a second-level Quota is added. -- Delete: If the configuration does not contain the existing secondary Quota, it will be deleted. -- Modify: If the configuration is inconsistent with the existing secondary Quota configuration parameters, the secondary Quota configuration will be updated. -- The default secondary Quota must be configured and cannot be deleted.
     * See `subQuotaInfoList` below.
     */
    subQuotaInfoLists?: pulumi.Input<pulumi.Input<inputs.maxcompute.QuotaSubQuotaInfoList>[]>;
}

/**
 * The set of arguments for constructing a Quota resource.
 */
export interface QuotaArgs {
    /**
     * Valid values: odps_intl/odpsplus_intl/odps/odpsplus
     * - *NOTE:** --odps_intl: International Station standard post-payment -- odpsplus_intl: International Station standard pre-payment -- odps: China Station standard post-payment -- odpsplus: China Station standard pre-payment
     */
    commodityCode: pulumi.Input<string>;
    /**
     * Define quota rules when creating quotas, for example:{"CU":50,"ordTime":"1:Month","autoRenew":false}.
     * CU (minimum quota resource size is 50)
     * ordTime 1:Month/Year (1 means quantity: Month/Year is the unit)
     * autoRenew (whether to enable automatic renewal)
     * If PaymentType is PayAsYouGo, you do not need to fill in
     */
    commodityData?: pulumi.Input<string>;
    /**
     * Quota partial nickname, supports English letters and numbers, up to 24 characters
     *
     * > **NOTE:** If PaymentType is PayAsYouGo, you do not need to fill it in
     */
    partNickName?: pulumi.Input<string>;
    /**
     * Payment type. Valid values: Subscription/PayAsYouGo
     *
     * > **NOTE:** -- PayAsYouGo only needs to be opened once per region
     */
    paymentType: pulumi.Input<string>;
    /**
     * Secondary Quota list
     *
     * > **NOTE:** -- Add: If the configuration contains a second-level Quota that does not exist, a second-level Quota is added. -- Delete: If the configuration does not contain the existing secondary Quota, it will be deleted. -- Modify: If the configuration is inconsistent with the existing secondary Quota configuration parameters, the secondary Quota configuration will be updated. -- The default secondary Quota must be configured and cannot be deleted.
     * See `subQuotaInfoList` below.
     */
    subQuotaInfoLists?: pulumi.Input<pulumi.Input<inputs.maxcompute.QuotaSubQuotaInfoList>[]>;
}
