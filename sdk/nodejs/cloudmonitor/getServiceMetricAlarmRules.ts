// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the Cloud Monitor Service Metric Alarm Rules of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.256.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.ecs.getInstances({
 *     status: "Running",
 * });
 * const defaultAlarmContactGroup = new alicloud.cms.AlarmContactGroup("default", {alarmContactGroupName: name});
 * const defaultAlarm = new alicloud.cms.Alarm("default", {
 *     name: name,
 *     project: "acs_ecs_dashboard",
 *     metric: "disk_writebytes",
 *     period: 900,
 *     silenceTime: 300,
 *     webhook: "https://www.aliyun.com",
 *     enabled: true,
 *     contactGroups: [defaultAlarmContactGroup.alarmContactGroupName],
 *     effectiveInterval: "06:00-20:00",
 *     metricDimensions: _default.then(_default => `  [
 *     {
 *       \"instanceId\": \"${_default.ids?.[0]}\",
 *       \"device\": \"/dev/vda1\"
 *     }
 *   ]
 * `),
 *     escalationsCritical: {
 *         statistics: "Average",
 *         comparisonOperator: "<=",
 *         threshold: "90",
 *         times: 1,
 *     },
 *     escalationsInfo: {
 *         statistics: "Minimum",
 *         comparisonOperator: "!=",
 *         threshold: "20",
 *         times: 3,
 *     },
 *     escalationsWarn: {
 *         statistics: "Average",
 *         comparisonOperator: "==",
 *         threshold: "30",
 *         times: 5,
 *     },
 * });
 * const ids = alicloud.cloudmonitor.getServiceMetricAlarmRulesOutput({
 *     ids: [defaultAlarm.id],
 * });
 * export const cloudMonitorServiceMetricAlarmRulesId0 = ids.apply(ids => ids.rules?.[0]?.id);
 * ```
 */
export function getServiceMetricAlarmRules(args?: GetServiceMetricAlarmRulesArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceMetricAlarmRulesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:cloudmonitor/getServiceMetricAlarmRules:getServiceMetricAlarmRules", {
        "dimensions": args.dimensions,
        "ids": args.ids,
        "metricName": args.metricName,
        "namespace": args.namespace,
        "outputFile": args.outputFile,
        "ruleName": args.ruleName,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceMetricAlarmRules.
 */
export interface GetServiceMetricAlarmRulesArgs {
    /**
     * The monitoring dimensions of the specified resource.
     */
    dimensions?: string;
    /**
     * A list of Metric Alarm Rule IDs.
     */
    ids?: string[];
    /**
     * The name of the metric.
     */
    metricName?: string;
    /**
     * The namespace of the cloud service.
     */
    namespace?: string;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: string;
    /**
     * The name of the alert rule.
     */
    ruleName?: string;
    /**
     * Specifies whether to query enabled or disabled alert rules. Valid values: `true`, `false`.
     */
    status?: boolean;
}

/**
 * A collection of values returned by getServiceMetricAlarmRules.
 */
export interface GetServiceMetricAlarmRulesResult {
    /**
     * The dimensions of the alert rule.
     */
    readonly dimensions?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    /**
     * The metric that is used to monitor the cloud service.
     */
    readonly metricName?: string;
    /**
     * The namespace of the cloud service.
     */
    readonly namespace?: string;
    readonly outputFile?: string;
    /**
     * The name of the alert rule.
     */
    readonly ruleName?: string;
    /**
     * A list of Hybrid Double Writes. Each element contains the following attributes:
     */
    readonly rules: outputs.cloudmonitor.GetServiceMetricAlarmRulesRule[];
    /**
     * Indicates whether the alert rule is enabled.
     */
    readonly status?: boolean;
}
/**
 * This data source provides the Cloud Monitor Service Metric Alarm Rules of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.256.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.ecs.getInstances({
 *     status: "Running",
 * });
 * const defaultAlarmContactGroup = new alicloud.cms.AlarmContactGroup("default", {alarmContactGroupName: name});
 * const defaultAlarm = new alicloud.cms.Alarm("default", {
 *     name: name,
 *     project: "acs_ecs_dashboard",
 *     metric: "disk_writebytes",
 *     period: 900,
 *     silenceTime: 300,
 *     webhook: "https://www.aliyun.com",
 *     enabled: true,
 *     contactGroups: [defaultAlarmContactGroup.alarmContactGroupName],
 *     effectiveInterval: "06:00-20:00",
 *     metricDimensions: _default.then(_default => `  [
 *     {
 *       \"instanceId\": \"${_default.ids?.[0]}\",
 *       \"device\": \"/dev/vda1\"
 *     }
 *   ]
 * `),
 *     escalationsCritical: {
 *         statistics: "Average",
 *         comparisonOperator: "<=",
 *         threshold: "90",
 *         times: 1,
 *     },
 *     escalationsInfo: {
 *         statistics: "Minimum",
 *         comparisonOperator: "!=",
 *         threshold: "20",
 *         times: 3,
 *     },
 *     escalationsWarn: {
 *         statistics: "Average",
 *         comparisonOperator: "==",
 *         threshold: "30",
 *         times: 5,
 *     },
 * });
 * const ids = alicloud.cloudmonitor.getServiceMetricAlarmRulesOutput({
 *     ids: [defaultAlarm.id],
 * });
 * export const cloudMonitorServiceMetricAlarmRulesId0 = ids.apply(ids => ids.rules?.[0]?.id);
 * ```
 */
export function getServiceMetricAlarmRulesOutput(args?: GetServiceMetricAlarmRulesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetServiceMetricAlarmRulesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("alicloud:cloudmonitor/getServiceMetricAlarmRules:getServiceMetricAlarmRules", {
        "dimensions": args.dimensions,
        "ids": args.ids,
        "metricName": args.metricName,
        "namespace": args.namespace,
        "outputFile": args.outputFile,
        "ruleName": args.ruleName,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceMetricAlarmRules.
 */
export interface GetServiceMetricAlarmRulesOutputArgs {
    /**
     * The monitoring dimensions of the specified resource.
     */
    dimensions?: pulumi.Input<string>;
    /**
     * A list of Metric Alarm Rule IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the metric.
     */
    metricName?: pulumi.Input<string>;
    /**
     * The namespace of the cloud service.
     */
    namespace?: pulumi.Input<string>;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The name of the alert rule.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * Specifies whether to query enabled or disabled alert rules. Valid values: `true`, `false`.
     */
    status?: pulumi.Input<boolean>;
}
