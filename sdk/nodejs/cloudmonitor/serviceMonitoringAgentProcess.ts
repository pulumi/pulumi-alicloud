// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Monitor Service Monitoring Agent Process resource.
 *
 * For information about Cloud Monitor Service Monitoring Agent Process and how to use it, see [What is Monitoring Agent Process](https://www.alibabacloud.com/help/en/cms/developer-reference/api-cms-2019-01-01-createmonitoragentprocess).
 *
 * > **NOTE:** Available since v1.212.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const defaultZones = alicloud.getZones({
 *     availableDiskCategory: "cloud_efficiency",
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultInstanceTypes = defaultZones.then(defaultZones => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: defaultZones.zones?.[0]?.id,
 *     instanceTypeFamily: "ecs.sn1ne",
 * }));
 * const defaultImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_[0-9]+_[0-9]+_x64*",
 *     mostRecent: true,
 *     owners: "system",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("defaultNetwork", {
 *     vpcName: name,
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("defaultSwitch", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: defaultZones.then(defaultZones => defaultZones.zones?.[0]?.id),
 *     vswitchName: name,
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("defaultSecurityGroup", {vpcId: defaultSwitch.vpcId});
 * const defaultInstance = new alicloud.ecs.Instance("defaultInstance", {
 *     imageId: defaultImages.then(defaultImages => defaultImages.images?.[0]?.id),
 *     instanceType: defaultInstanceTypes.then(defaultInstanceTypes => defaultInstanceTypes.instanceTypes?.[0]?.id),
 *     instanceName: name,
 *     securityGroups: [defaultSecurityGroup].map(__item => __item.id),
 *     internetChargeType: "PayByTraffic",
 *     internetMaxBandwidthOut: 10,
 *     availabilityZone: defaultZones.then(defaultZones => defaultZones.zones?.[0]?.id),
 *     instanceChargeType: "PostPaid",
 *     systemDiskCategory: "cloud_efficiency",
 *     vswitchId: defaultSwitch.id,
 * });
 * const defaultServiceMonitoringAgentProcess = new alicloud.cloudmonitor.ServiceMonitoringAgentProcess("defaultServiceMonitoringAgentProcess", {
 *     instanceId: defaultInstance.id,
 *     processName: name,
 *     processUser: "root",
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Monitor Service Monitoring Agent Process can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cloudmonitor/serviceMonitoringAgentProcess:ServiceMonitoringAgentProcess example <instance_id>:<process_id>
 * ```
 */
export class ServiceMonitoringAgentProcess extends pulumi.CustomResource {
    /**
     * Get an existing ServiceMonitoringAgentProcess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceMonitoringAgentProcessState, opts?: pulumi.CustomResourceOptions): ServiceMonitoringAgentProcess {
        return new ServiceMonitoringAgentProcess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cloudmonitor/serviceMonitoringAgentProcess:ServiceMonitoringAgentProcess';

    /**
     * Returns true if the given object is an instance of ServiceMonitoringAgentProcess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceMonitoringAgentProcess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceMonitoringAgentProcess.__pulumiType;
    }

    /**
     * The ID of the instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The ID of the process.
     */
    public /*out*/ readonly processId!: pulumi.Output<string>;
    /**
     * The name of the process.
     */
    public readonly processName!: pulumi.Output<string>;
    /**
     * The user who launches the process.
     */
    public readonly processUser!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceMonitoringAgentProcess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceMonitoringAgentProcessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceMonitoringAgentProcessArgs | ServiceMonitoringAgentProcessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceMonitoringAgentProcessState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["processId"] = state ? state.processId : undefined;
            resourceInputs["processName"] = state ? state.processName : undefined;
            resourceInputs["processUser"] = state ? state.processUser : undefined;
        } else {
            const args = argsOrState as ServiceMonitoringAgentProcessArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.processName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processName'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["processName"] = args ? args.processName : undefined;
            resourceInputs["processUser"] = args ? args.processUser : undefined;
            resourceInputs["processId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceMonitoringAgentProcess.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceMonitoringAgentProcess resources.
 */
export interface ServiceMonitoringAgentProcessState {
    /**
     * The ID of the instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The ID of the process.
     */
    processId?: pulumi.Input<string>;
    /**
     * The name of the process.
     */
    processName?: pulumi.Input<string>;
    /**
     * The user who launches the process.
     */
    processUser?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceMonitoringAgentProcess resource.
 */
export interface ServiceMonitoringAgentProcessArgs {
    /**
     * The ID of the instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The name of the process.
     */
    processName: pulumi.Input<string>;
    /**
     * The user who launches the process.
     */
    processUser?: pulumi.Input<string>;
}
