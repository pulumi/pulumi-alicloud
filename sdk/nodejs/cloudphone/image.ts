// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Phone Image resource.
 *
 * Cloud phone image.
 *
 * For information about Cloud Phone Image and how to use it, see [What is Image](https://next.api.alibabacloud.com/document/eds-aic/2023-09-30/CreateCustomImage).
 *
 * > **NOTE:** Available since v1.243.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const defaultjZ1gi0 = new alicloud.cloudphone.Policy("defaultjZ1gi0", {});
 * const defaultYHMlTO = new alicloud.cloudphoneinstance.Group("defaultYHMlTO", {
 *     instanceGroupSpec: "acp.basic.small",
 *     policyGroupId: defaultjZ1gi0.id,
 *     instanceGroupName: "AutoCreateGroupName",
 *     period: 1,
 *     numberOfInstances: 1,
 *     chargeType: "PostPaid",
 *     imageId: "imgc-075cllfeuazh03tg9",
 *     periodUnit: "Hour",
 *     autoRenew: false,
 *     amount: 1,
 *     autoPay: false,
 *     gpuAcceleration: false,
 * });
 * const default04hhXk = new alicloud.cloudphoneinstance.CloudPhoneInstance("default04hhXk", {
 *     androidInstanceGroupId: defaultYHMlTO.id,
 *     androidInstanceName: "CreateInstanceName",
 * });
 * const _default = new alicloud.cloudphone.Image("default", {
 *     imageName: "ImageName",
 *     instanceId: default04hhXk.id,
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Phone Image can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cloudphone/image:Image example <id>
 * ```
 */
export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cloudphone/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    /**
     * The image name.
     */
    declare public readonly imageName: pulumi.Output<string>;
    /**
     * The instance ID.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * The status of the mirror.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["imageName"] = state?.imageName;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            if (args?.imageName === undefined && !opts.urn) {
                throw new Error("Missing required property 'imageName'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["imageName"] = args?.imageName;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    /**
     * The image name.
     */
    imageName?: pulumi.Input<string>;
    /**
     * The instance ID.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The status of the mirror.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * The image name.
     */
    imageName: pulumi.Input<string>;
    /**
     * The instance ID.
     */
    instanceId: pulumi.Input<string>;
}
