// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { EndpointArgs, EndpointState } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));

export { GetEndpointsArgs, GetEndpointsResult, GetEndpointsOutputArgs } from "./getEndpoints";
export const getEndpoints: typeof import("./getEndpoints").getEndpoints = null as any;
export const getEndpointsOutput: typeof import("./getEndpoints").getEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getEndpoints","getEndpointsOutput"], () => require("./getEndpoints"));

export { GetResolverZonesArgs, GetResolverZonesResult, GetResolverZonesOutputArgs } from "./getResolverZones";
export const getResolverZones: typeof import("./getResolverZones").getResolverZones = null as any;
export const getResolverZonesOutput: typeof import("./getResolverZones").getResolverZonesOutput = null as any;
utilities.lazyLoad(exports, ["getResolverZones","getResolverZonesOutput"], () => require("./getResolverZones"));

export { GetRulesArgs, GetRulesResult, GetRulesOutputArgs } from "./getRules";
export const getRules: typeof import("./getRules").getRules = null as any;
export const getRulesOutput: typeof import("./getRules").getRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRules","getRulesOutput"], () => require("./getRules"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetZoneRecordsArgs, GetZoneRecordsResult, GetZoneRecordsOutputArgs } from "./getZoneRecords";
export const getZoneRecords: typeof import("./getZoneRecords").getZoneRecords = null as any;
export const getZoneRecordsOutput: typeof import("./getZoneRecords").getZoneRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getZoneRecords","getZoneRecordsOutput"], () => require("./getZoneRecords"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { RuleAttachmentArgs, RuleAttachmentState } from "./ruleAttachment";
export type RuleAttachment = import("./ruleAttachment").RuleAttachment;
export const RuleAttachment: typeof import("./ruleAttachment").RuleAttachment = null as any;
utilities.lazyLoad(exports, ["RuleAttachment"], () => require("./ruleAttachment"));

export { UserVpcAuthorizationArgs, UserVpcAuthorizationState } from "./userVpcAuthorization";
export type UserVpcAuthorization = import("./userVpcAuthorization").UserVpcAuthorization;
export const UserVpcAuthorization: typeof import("./userVpcAuthorization").UserVpcAuthorization = null as any;
utilities.lazyLoad(exports, ["UserVpcAuthorization"], () => require("./userVpcAuthorization"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));

export { ZoneAttachmentArgs, ZoneAttachmentState } from "./zoneAttachment";
export type ZoneAttachment = import("./zoneAttachment").ZoneAttachment;
export const ZoneAttachment: typeof import("./zoneAttachment").ZoneAttachment = null as any;
utilities.lazyLoad(exports, ["ZoneAttachment"], () => require("./zoneAttachment"));

export { ZoneRecordArgs, ZoneRecordState } from "./zoneRecord";
export type ZoneRecord = import("./zoneRecord").ZoneRecord;
export const ZoneRecord: typeof import("./zoneRecord").ZoneRecord = null as any;
utilities.lazyLoad(exports, ["ZoneRecord"], () => require("./zoneRecord"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:pvtz/endpoint:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "alicloud:pvtz/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "alicloud:pvtz/ruleAttachment:RuleAttachment":
                return new RuleAttachment(name, <any>undefined, { urn })
            case "alicloud:pvtz/userVpcAuthorization:UserVpcAuthorization":
                return new UserVpcAuthorization(name, <any>undefined, { urn })
            case "alicloud:pvtz/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            case "alicloud:pvtz/zoneAttachment:ZoneAttachment":
                return new ZoneAttachment(name, <any>undefined, { urn })
            case "alicloud:pvtz/zoneRecord:ZoneRecord":
                return new ZoneRecord(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "pvtz/endpoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "pvtz/rule", _module)
pulumi.runtime.registerResourceModule("alicloud", "pvtz/ruleAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "pvtz/userVpcAuthorization", _module)
pulumi.runtime.registerResourceModule("alicloud", "pvtz/zone", _module)
pulumi.runtime.registerResourceModule("alicloud", "pvtz/zoneAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "pvtz/zoneRecord", _module)
