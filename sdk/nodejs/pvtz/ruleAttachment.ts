// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Private Zone Rule Attachment resource.
 *
 * For information about Private Zone Rule Attachment and how to use it, see [What is Rule Attachment](https://www.alibabacloud.com/help/en/doc-detail/177601.htm).
 *
 * > **NOTE:** Available since v1.143.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "example_value";
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const _default = alicloud.pvtz.getResolverZones({
 *     status: "NORMAL",
 * });
 * const defaultGetRegions = alicloud.getRegions({
 *     current: true,
 * });
 * const defaultNetwork: alicloud.vpc.Network[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     defaultNetwork.push(new alicloud.vpc.Network(`default-${range.value}`, {
 *         vpcName: name,
 *         cidrBlock: "172.16.0.0/12",
 *     }));
 * }
 * const defaultSwitch: alicloud.vpc.Switch[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     defaultSwitch.push(new alicloud.vpc.Switch(`default-${range.value}`, {
 *         vpcId: defaultNetwork[2].id,
 *         cidrBlock: defaultNetwork[2].cidrBlock.apply(cidrBlock => std.cidrsubnetOutput({
 *             input: cidrBlock,
 *             newbits: 8,
 *             netnum: range.value,
 *         })).apply(invoke => invoke.result),
 *         zoneId: _default.then(_default => _default.zones[range.value].zoneId),
 *     }));
 * }
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {
 *     vpcId: defaultNetwork[2].id,
 *     name: name,
 * });
 * const defaultEndpoint = new alicloud.pvtz.Endpoint("default", {
 *     endpointName: `${name}-${defaultInteger.result}`,
 *     securityGroupId: defaultSecurityGroup.id,
 *     vpcId: defaultNetwork[2].id,
 *     vpcRegionId: defaultGetRegions.then(defaultGetRegions => defaultGetRegions.regions?.[0]?.id),
 *     ipConfigs: [
 *         {
 *             zoneId: defaultSwitch[0].zoneId,
 *             cidrBlock: defaultSwitch[0].cidrBlock,
 *             vswitchId: defaultSwitch[0].id,
 *         },
 *         {
 *             zoneId: defaultSwitch[1].zoneId,
 *             cidrBlock: defaultSwitch[1].cidrBlock,
 *             vswitchId: defaultSwitch[1].id,
 *         },
 *     ],
 * });
 * const defaultRule = new alicloud.pvtz.Rule("default", {
 *     endpointId: defaultEndpoint.id,
 *     ruleName: `${name}-${defaultInteger.result}`,
 *     type: "OUTBOUND",
 *     zoneName: name,
 *     forwardIps: [{
 *         ip: "114.114.114.114",
 *         port: 8080,
 *     }],
 * });
 * const defaultRuleAttachment = new alicloud.pvtz.RuleAttachment("default", {
 *     ruleId: defaultRule.id,
 *     vpcs: [
 *         {
 *             regionId: defaultGetRegions.then(defaultGetRegions => defaultGetRegions.regions?.[0]?.id),
 *             vpcId: defaultNetwork[0].id,
 *         },
 *         {
 *             regionId: defaultGetRegions.then(defaultGetRegions => defaultGetRegions.regions?.[0]?.id),
 *             vpcId: defaultNetwork[1].id,
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Private Zone Rule Attachment can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:pvtz/ruleAttachment:RuleAttachment example <rule_id>
 * ```
 */
export class RuleAttachment extends pulumi.CustomResource {
    /**
     * Get an existing RuleAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleAttachmentState, opts?: pulumi.CustomResourceOptions): RuleAttachment {
        return new RuleAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:pvtz/ruleAttachment:RuleAttachment';

    /**
     * Returns true if the given object is an instance of RuleAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleAttachment.__pulumiType;
    }

    /**
     * The ID of the rule.
     */
    declare public readonly ruleId: pulumi.Output<string>;
    /**
     * The List of the VPC. See `vpcs` below.
     */
    declare public readonly vpcs: pulumi.Output<outputs.pvtz.RuleAttachmentVpc[]>;

    /**
     * Create a RuleAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleAttachmentArgs | RuleAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleAttachmentState | undefined;
            resourceInputs["ruleId"] = state?.ruleId;
            resourceInputs["vpcs"] = state?.vpcs;
        } else {
            const args = argsOrState as RuleAttachmentArgs | undefined;
            if (args?.ruleId === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleId'");
            }
            if (args?.vpcs === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcs'");
            }
            resourceInputs["ruleId"] = args?.ruleId;
            resourceInputs["vpcs"] = args?.vpcs;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuleAttachment resources.
 */
export interface RuleAttachmentState {
    /**
     * The ID of the rule.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * The List of the VPC. See `vpcs` below.
     */
    vpcs?: pulumi.Input<pulumi.Input<inputs.pvtz.RuleAttachmentVpc>[]>;
}

/**
 * The set of arguments for constructing a RuleAttachment resource.
 */
export interface RuleAttachmentArgs {
    /**
     * The ID of the rule.
     */
    ruleId: pulumi.Input<string>;
    /**
     * The List of the VPC. See `vpcs` below.
     */
    vpcs: pulumi.Input<pulumi.Input<inputs.pvtz.RuleAttachmentVpc>[]>;
}
