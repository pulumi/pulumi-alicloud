// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a KMS Policy resource. Permission policies which can be bound to the Application Access Points.
 *
 * For information about KMS Policy and how to use it, see [What is Policy](https://www.alibabacloud.com/help/zh/key-management-service/latest/api-createpolicy).
 *
 * > **NOTE:** Available since v1.210.0.
 *
 * ## Import
 *
 * KMS Policy can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:kms/policy:Policy example <id>
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:kms/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Network Rules in JSON struct.
     */
    public readonly accessControlRules!: pulumi.Output<string>;
    /**
     * Description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * KMS instance .
     */
    public readonly kmsInstanceId!: pulumi.Output<string>;
    /**
     * Allowed permissions (RBAC)Optional values:"RbacPermission/Template/CryptoServiceKeyUser" and "RbacPermission/Template/CryptoServiceSecretUser".
     */
    public readonly permissions!: pulumi.Output<string[]>;
    /**
     * Policy Name.
     */
    public readonly policyName!: pulumi.Output<string>;
    /**
     * The resources that the permission policy allows to access.Use "key/${KeyId}" or "key/*"  to specify a key or all keys.Use "secret/${SecretName}" or "secret/*" to specify a secret or all secrets.
     */
    public readonly resources!: pulumi.Output<string[]>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["accessControlRules"] = state ? state.accessControlRules : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["kmsInstanceId"] = state ? state.kmsInstanceId : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.accessControlRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessControlRules'");
            }
            if ((!args || args.kmsInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kmsInstanceId'");
            }
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.policyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            if ((!args || args.resources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            resourceInputs["accessControlRules"] = args ? args.accessControlRules : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["kmsInstanceId"] = args ? args.kmsInstanceId : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["policyName"] = args ? args.policyName : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Network Rules in JSON struct.
     */
    accessControlRules?: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * KMS instance .
     */
    kmsInstanceId?: pulumi.Input<string>;
    /**
     * Allowed permissions (RBAC)Optional values:"RbacPermission/Template/CryptoServiceKeyUser" and "RbacPermission/Template/CryptoServiceSecretUser".
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy Name.
     */
    policyName?: pulumi.Input<string>;
    /**
     * The resources that the permission policy allows to access.Use "key/${KeyId}" or "key/*"  to specify a key or all keys.Use "secret/${SecretName}" or "secret/*" to specify a secret or all secrets.
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Network Rules in JSON struct.
     */
    accessControlRules: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * KMS instance .
     */
    kmsInstanceId: pulumi.Input<string>;
    /**
     * Allowed permissions (RBAC)Optional values:"RbacPermission/Template/CryptoServiceKeyUser" and "RbacPermission/Template/CryptoServiceSecretUser".
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy Name.
     */
    policyName: pulumi.Input<string>;
    /**
     * The resources that the permission policy allows to access.Use "key/${KeyId}" or "key/*"  to specify a key or all keys.Use "secret/${SecretName}" or "secret/*" to specify a secret or all secrets.
     */
    resources: pulumi.Input<pulumi.Input<string>[]>;
}
