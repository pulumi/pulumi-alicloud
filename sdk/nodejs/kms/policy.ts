// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a KMS Policy resource. Permission policies which can be bound to the Application Access Points.
 *
 * For information about KMS Policy and how to use it, see [What is Policy](https://www.alibabacloud.com/help/zh/key-management-service/latest/api-createpolicy).
 *
 * > **NOTE:** Available since v1.210.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const networkRule1 = new alicloud.kms.NetworkRule("networkRule1", {
 *     description: "dummy",
 *     sourcePrivateIps: ["10.10.10.10"],
 *     networkRuleName: std.format({
 *         input: "%s1",
 *         args: [name],
 *     }).then(invoke => invoke.result),
 * });
 * const networkRule2 = new alicloud.kms.NetworkRule("networkRule2", {
 *     description: "dummy",
 *     sourcePrivateIps: ["10.10.10.10"],
 *     networkRuleName: std.format({
 *         input: "%s2",
 *         args: [name],
 *     }).then(invoke => invoke.result),
 * });
 * const networkRule3 = new alicloud.kms.NetworkRule("networkRule3", {
 *     description: "dummy",
 *     sourcePrivateIps: ["10.10.10.10"],
 *     networkRuleName: std.format({
 *         input: "%s3",
 *         args: [name],
 *     }).then(invoke => invoke.result),
 * });
 * const _default = new alicloud.kms.Policy("default", {
 *     description: "terraformpolicy",
 *     permissions: [
 *         "RbacPermission/Template/CryptoServiceKeyUser",
 *         "RbacPermission/Template/CryptoServiceSecretUser",
 *     ],
 *     resources: [
 *         "secret/*",
 *         "key/*",
 *     ],
 *     policyName: name,
 *     kmsInstanceId: "shared",
 *     accessControlRules: `  {
 *       \\"NetworkRules\\":[
 *           \\"alicloud_kms_network_rule.networkRule1.network_rule_name\\"
 *       ]
 *   }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * KMS Policy can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:kms/policy:Policy example <id>
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:kms/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Network Rules in JSON struct.
     */
    declare public readonly accessControlRules: pulumi.Output<string>;
    /**
     * Description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * KMS instance .
     */
    declare public readonly kmsInstanceId: pulumi.Output<string>;
    /**
     * Allowed permissions (RBAC)Optional values:"RbacPermission/Template/CryptoServiceKeyUser" and "RbacPermission/Template/CryptoServiceSecretUser".
     */
    declare public readonly permissions: pulumi.Output<string[]>;
    /**
     * Policy Name.
     */
    declare public readonly policyName: pulumi.Output<string>;
    /**
     * The resources that the permission policy allows to access.Use "key/${KeyId}" or "key/*"  to specify a key or all keys.Use "secret/${SecretName}" or "secret/*" to specify a secret or all secrets.
     */
    declare public readonly resources: pulumi.Output<string[]>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["accessControlRules"] = state?.accessControlRules;
            resourceInputs["description"] = state?.description;
            resourceInputs["kmsInstanceId"] = state?.kmsInstanceId;
            resourceInputs["permissions"] = state?.permissions;
            resourceInputs["policyName"] = state?.policyName;
            resourceInputs["resources"] = state?.resources;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if (args?.accessControlRules === undefined && !opts.urn) {
                throw new Error("Missing required property 'accessControlRules'");
            }
            if (args?.kmsInstanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'kmsInstanceId'");
            }
            if (args?.permissions === undefined && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if (args?.policyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            if (args?.resources === undefined && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            resourceInputs["accessControlRules"] = args?.accessControlRules;
            resourceInputs["description"] = args?.description;
            resourceInputs["kmsInstanceId"] = args?.kmsInstanceId;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["policyName"] = args?.policyName;
            resourceInputs["resources"] = args?.resources;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Network Rules in JSON struct.
     */
    accessControlRules?: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * KMS instance .
     */
    kmsInstanceId?: pulumi.Input<string>;
    /**
     * Allowed permissions (RBAC)Optional values:"RbacPermission/Template/CryptoServiceKeyUser" and "RbacPermission/Template/CryptoServiceSecretUser".
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy Name.
     */
    policyName?: pulumi.Input<string>;
    /**
     * The resources that the permission policy allows to access.Use "key/${KeyId}" or "key/*"  to specify a key or all keys.Use "secret/${SecretName}" or "secret/*" to specify a secret or all secrets.
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Network Rules in JSON struct.
     */
    accessControlRules: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * KMS instance .
     */
    kmsInstanceId: pulumi.Input<string>;
    /**
     * Allowed permissions (RBAC)Optional values:"RbacPermission/Template/CryptoServiceKeyUser" and "RbacPermission/Template/CryptoServiceSecretUser".
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy Name.
     */
    policyName: pulumi.Input<string>;
    /**
     * The resources that the permission policy allows to access.Use "key/${KeyId}" or "key/*"  to specify a key or all keys.Use "secret/${SecretName}" or "secret/*" to specify a secret or all secrets.
     */
    resources: pulumi.Input<pulumi.Input<string>[]>;
}
