// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Mongodb Global Security IP Group resource.
 *
 * Whitelist Template Resources.
 *
 * For information about Mongodb Global Security IP Group and how to use it, see [What is Global Security IP Group](https://next.api.alibabacloud.com/document/Dds/2015-12-01/CreateGlobalSecurityIPGroup).
 *
 * > **NOTE:** Available since v1.257.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraformexample";
 * const _default = new alicloud.mongodb.GlobalSecurityIpGroup("default", {
 *     globalIgName: name,
 *     globalSecurityIpList: "192.168.1.1,192.168.1.2,192.168.1.3",
 * });
 * ```
 *
 * ## Import
 *
 * Mongodb Global Security IP Group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:mongodb/globalSecurityIpGroup:GlobalSecurityIpGroup example <id>
 * ```
 */
export class GlobalSecurityIpGroup extends pulumi.CustomResource {
    /**
     * Get an existing GlobalSecurityIpGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalSecurityIpGroupState, opts?: pulumi.CustomResourceOptions): GlobalSecurityIpGroup {
        return new GlobalSecurityIpGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:mongodb/globalSecurityIpGroup:GlobalSecurityIpGroup';

    /**
     * Returns true if the given object is an instance of GlobalSecurityIpGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalSecurityIpGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalSecurityIpGroup.__pulumiType;
    }

    /**
     * The name of the IP whitelist template.
     */
    declare public readonly globalIgName: pulumi.Output<string>;
    /**
     * The IP address in the whitelist template.
     *
     * > **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
     */
    declare public readonly globalSecurityIpList: pulumi.Output<string>;
    /**
     * The region ID of the resource
     */
    declare public /*out*/ readonly regionId: pulumi.Output<string>;

    /**
     * Create a GlobalSecurityIpGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalSecurityIpGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalSecurityIpGroupArgs | GlobalSecurityIpGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalSecurityIpGroupState | undefined;
            resourceInputs["globalIgName"] = state?.globalIgName;
            resourceInputs["globalSecurityIpList"] = state?.globalSecurityIpList;
            resourceInputs["regionId"] = state?.regionId;
        } else {
            const args = argsOrState as GlobalSecurityIpGroupArgs | undefined;
            if (args?.globalIgName === undefined && !opts.urn) {
                throw new Error("Missing required property 'globalIgName'");
            }
            if (args?.globalSecurityIpList === undefined && !opts.urn) {
                throw new Error("Missing required property 'globalSecurityIpList'");
            }
            resourceInputs["globalIgName"] = args?.globalIgName;
            resourceInputs["globalSecurityIpList"] = args?.globalSecurityIpList;
            resourceInputs["regionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalSecurityIpGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalSecurityIpGroup resources.
 */
export interface GlobalSecurityIpGroupState {
    /**
     * The name of the IP whitelist template.
     */
    globalIgName?: pulumi.Input<string>;
    /**
     * The IP address in the whitelist template.
     *
     * > **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
     */
    globalSecurityIpList?: pulumi.Input<string>;
    /**
     * The region ID of the resource
     */
    regionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GlobalSecurityIpGroup resource.
 */
export interface GlobalSecurityIpGroupArgs {
    /**
     * The name of the IP whitelist template.
     */
    globalIgName: pulumi.Input<string>;
    /**
     * The IP address in the whitelist template.
     *
     * > **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
     */
    globalSecurityIpList: pulumi.Input<string>;
}
