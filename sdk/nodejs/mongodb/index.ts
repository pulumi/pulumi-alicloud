// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AuditPolicyArgs, AuditPolicyState } from "./auditPolicy";
export type AuditPolicy = import("./auditPolicy").AuditPolicy;
export const AuditPolicy: typeof import("./auditPolicy").AuditPolicy = null as any;
utilities.lazyLoad(exports, ["AuditPolicy"], () => require("./auditPolicy"));

export { GetAccountsArgs, GetAccountsResult, GetAccountsOutputArgs } from "./getAccounts";
export const getAccounts: typeof import("./getAccounts").getAccounts = null as any;
export const getAccountsOutput: typeof import("./getAccounts").getAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getAccounts","getAccountsOutput"], () => require("./getAccounts"));

export { GetAuditPoliciesArgs, GetAuditPoliciesResult, GetAuditPoliciesOutputArgs } from "./getAuditPolicies";
export const getAuditPolicies: typeof import("./getAuditPolicies").getAuditPolicies = null as any;
export const getAuditPoliciesOutput: typeof import("./getAuditPolicies").getAuditPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAuditPolicies","getAuditPoliciesOutput"], () => require("./getAuditPolicies"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetServerlessInstancesArgs, GetServerlessInstancesResult, GetServerlessInstancesOutputArgs } from "./getServerlessInstances";
export const getServerlessInstances: typeof import("./getServerlessInstances").getServerlessInstances = null as any;
export const getServerlessInstancesOutput: typeof import("./getServerlessInstances").getServerlessInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getServerlessInstances","getServerlessInstancesOutput"], () => require("./getServerlessInstances"));

export { GetShardingNetworkPrivateAddressesArgs, GetShardingNetworkPrivateAddressesResult, GetShardingNetworkPrivateAddressesOutputArgs } from "./getShardingNetworkPrivateAddresses";
export const getShardingNetworkPrivateAddresses: typeof import("./getShardingNetworkPrivateAddresses").getShardingNetworkPrivateAddresses = null as any;
export const getShardingNetworkPrivateAddressesOutput: typeof import("./getShardingNetworkPrivateAddresses").getShardingNetworkPrivateAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getShardingNetworkPrivateAddresses","getShardingNetworkPrivateAddressesOutput"], () => require("./getShardingNetworkPrivateAddresses"));

export { GetShardingNetworkPublicAddressesArgs, GetShardingNetworkPublicAddressesResult, GetShardingNetworkPublicAddressesOutputArgs } from "./getShardingNetworkPublicAddresses";
export const getShardingNetworkPublicAddresses: typeof import("./getShardingNetworkPublicAddresses").getShardingNetworkPublicAddresses = null as any;
export const getShardingNetworkPublicAddressesOutput: typeof import("./getShardingNetworkPublicAddresses").getShardingNetworkPublicAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getShardingNetworkPublicAddresses","getShardingNetworkPublicAddressesOutput"], () => require("./getShardingNetworkPublicAddresses"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { PrivateSrvNetworkAddressArgs, PrivateSrvNetworkAddressState } from "./privateSrvNetworkAddress";
export type PrivateSrvNetworkAddress = import("./privateSrvNetworkAddress").PrivateSrvNetworkAddress;
export const PrivateSrvNetworkAddress: typeof import("./privateSrvNetworkAddress").PrivateSrvNetworkAddress = null as any;
utilities.lazyLoad(exports, ["PrivateSrvNetworkAddress"], () => require("./privateSrvNetworkAddress"));

export { PublicNetworkAddressArgs, PublicNetworkAddressState } from "./publicNetworkAddress";
export type PublicNetworkAddress = import("./publicNetworkAddress").PublicNetworkAddress;
export const PublicNetworkAddress: typeof import("./publicNetworkAddress").PublicNetworkAddress = null as any;
utilities.lazyLoad(exports, ["PublicNetworkAddress"], () => require("./publicNetworkAddress"));

export { ReplicaSetRoleArgs, ReplicaSetRoleState } from "./replicaSetRole";
export type ReplicaSetRole = import("./replicaSetRole").ReplicaSetRole;
export const ReplicaSetRole: typeof import("./replicaSetRole").ReplicaSetRole = null as any;
utilities.lazyLoad(exports, ["ReplicaSetRole"], () => require("./replicaSetRole"));

export { ServerlessInstanceArgs, ServerlessInstanceState } from "./serverlessInstance";
export type ServerlessInstance = import("./serverlessInstance").ServerlessInstance;
export const ServerlessInstance: typeof import("./serverlessInstance").ServerlessInstance = null as any;
utilities.lazyLoad(exports, ["ServerlessInstance"], () => require("./serverlessInstance"));

export { ShardingInstanceArgs, ShardingInstanceState } from "./shardingInstance";
export type ShardingInstance = import("./shardingInstance").ShardingInstance;
export const ShardingInstance: typeof import("./shardingInstance").ShardingInstance = null as any;
utilities.lazyLoad(exports, ["ShardingInstance"], () => require("./shardingInstance"));

export { ShardingNetworkPrivateAddressArgs, ShardingNetworkPrivateAddressState } from "./shardingNetworkPrivateAddress";
export type ShardingNetworkPrivateAddress = import("./shardingNetworkPrivateAddress").ShardingNetworkPrivateAddress;
export const ShardingNetworkPrivateAddress: typeof import("./shardingNetworkPrivateAddress").ShardingNetworkPrivateAddress = null as any;
utilities.lazyLoad(exports, ["ShardingNetworkPrivateAddress"], () => require("./shardingNetworkPrivateAddress"));

export { ShardingNetworkPublicAddressArgs, ShardingNetworkPublicAddressState } from "./shardingNetworkPublicAddress";
export type ShardingNetworkPublicAddress = import("./shardingNetworkPublicAddress").ShardingNetworkPublicAddress;
export const ShardingNetworkPublicAddress: typeof import("./shardingNetworkPublicAddress").ShardingNetworkPublicAddress = null as any;
utilities.lazyLoad(exports, ["ShardingNetworkPublicAddress"], () => require("./shardingNetworkPublicAddress"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:mongodb/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "alicloud:mongodb/auditPolicy:AuditPolicy":
                return new AuditPolicy(name, <any>undefined, { urn })
            case "alicloud:mongodb/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "alicloud:mongodb/privateSrvNetworkAddress:PrivateSrvNetworkAddress":
                return new PrivateSrvNetworkAddress(name, <any>undefined, { urn })
            case "alicloud:mongodb/publicNetworkAddress:PublicNetworkAddress":
                return new PublicNetworkAddress(name, <any>undefined, { urn })
            case "alicloud:mongodb/replicaSetRole:ReplicaSetRole":
                return new ReplicaSetRole(name, <any>undefined, { urn })
            case "alicloud:mongodb/serverlessInstance:ServerlessInstance":
                return new ServerlessInstance(name, <any>undefined, { urn })
            case "alicloud:mongodb/shardingInstance:ShardingInstance":
                return new ShardingInstance(name, <any>undefined, { urn })
            case "alicloud:mongodb/shardingNetworkPrivateAddress:ShardingNetworkPrivateAddress":
                return new ShardingNetworkPrivateAddress(name, <any>undefined, { urn })
            case "alicloud:mongodb/shardingNetworkPublicAddress:ShardingNetworkPublicAddress":
                return new ShardingNetworkPublicAddress(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "mongodb/account", _module)
pulumi.runtime.registerResourceModule("alicloud", "mongodb/auditPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "mongodb/instance", _module)
pulumi.runtime.registerResourceModule("alicloud", "mongodb/privateSrvNetworkAddress", _module)
pulumi.runtime.registerResourceModule("alicloud", "mongodb/publicNetworkAddress", _module)
pulumi.runtime.registerResourceModule("alicloud", "mongodb/replicaSetRole", _module)
pulumi.runtime.registerResourceModule("alicloud", "mongodb/serverlessInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "mongodb/shardingInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "mongodb/shardingNetworkPrivateAddress", _module)
pulumi.runtime.registerResourceModule("alicloud", "mongodb/shardingNetworkPublicAddress", _module)
