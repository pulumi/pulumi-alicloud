// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This resource will help you to manager Container Registry repositories.
 *
 * > **NOTE:** Available in v1.35.0+.
 *
 * > **NOTE:** You need to set your registry password in Container Registry console before use this resource.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const my_namespace = new alicloud.cr.Namespace("my-namespace", {
 *     autoCreate: false,
 *     defaultVisibility: "PUBLIC",
 * });
 * const my_repo = new alicloud.cr.Repo("my-repo", {
 *     namespace: my_namespace.name,
 *     summary: "this is summary of my new repo",
 *     repoType: "PUBLIC",
 *     detail: "this is a public repo",
 * });
 * ```
 *
 * ## Import
 *
 * Container Registry repository can be imported using the `namespace/repository`, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cr/repo:Repo default `my-namespace/my-repo`
 * ```
 */
export class Repo extends pulumi.CustomResource {
    /**
     * Get an existing Repo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepoState, opts?: pulumi.CustomResourceOptions): Repo {
        return new Repo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cr/repo:Repo';

    /**
     * Returns true if the given object is an instance of Repo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repo.__pulumiType;
    }

    /**
     * The repository specific information. MarkDown format is supported, and the length limit is 2000.
     */
    public readonly detail!: pulumi.Output<string | undefined>;
    /**
     * The repository domain list.
     */
    public /*out*/ readonly domainList!: pulumi.Output<outputs.cr.RepoDomainList>;
    /**
     * Name of container registry repository.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of container registry namespace where repository is located.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * `PUBLIC` or `PRIVATE`, repo's visibility.
     */
    public readonly repoType!: pulumi.Output<string>;
    /**
     * The repository general information. It can contain 1 to 80 characters.
     */
    public readonly summary!: pulumi.Output<string>;

    /**
     * Create a Repo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepoArgs | RepoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepoState | undefined;
            resourceInputs["detail"] = state ? state.detail : undefined;
            resourceInputs["domainList"] = state ? state.domainList : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["repoType"] = state ? state.repoType : undefined;
            resourceInputs["summary"] = state ? state.summary : undefined;
        } else {
            const args = argsOrState as RepoArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.repoType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoType'");
            }
            if ((!args || args.summary === undefined) && !opts.urn) {
                throw new Error("Missing required property 'summary'");
            }
            resourceInputs["detail"] = args ? args.detail : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["repoType"] = args ? args.repoType : undefined;
            resourceInputs["summary"] = args ? args.summary : undefined;
            resourceInputs["domainList"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repo.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repo resources.
 */
export interface RepoState {
    /**
     * The repository specific information. MarkDown format is supported, and the length limit is 2000.
     */
    detail?: pulumi.Input<string>;
    /**
     * The repository domain list.
     */
    domainList?: pulumi.Input<inputs.cr.RepoDomainList>;
    /**
     * Name of container registry repository.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of container registry namespace where repository is located.
     */
    namespace?: pulumi.Input<string>;
    /**
     * `PUBLIC` or `PRIVATE`, repo's visibility.
     */
    repoType?: pulumi.Input<string>;
    /**
     * The repository general information. It can contain 1 to 80 characters.
     */
    summary?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Repo resource.
 */
export interface RepoArgs {
    /**
     * The repository specific information. MarkDown format is supported, and the length limit is 2000.
     */
    detail?: pulumi.Input<string>;
    /**
     * Name of container registry repository.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of container registry namespace where repository is located.
     */
    namespace: pulumi.Input<string>;
    /**
     * `PUBLIC` or `PRIVATE`, repo's visibility.
     */
    repoType: pulumi.Input<string>;
    /**
     * The repository general information. It can contain 1 to 80 characters.
     */
    summary: pulumi.Input<string>;
}
