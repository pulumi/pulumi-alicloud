// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Cloud SSO User Provisioning resource.
 *
 * RAM user synchronization.
 *
 * For information about Cloud SSO User Provisioning and how to use it, see [What is User Provisioning](https://next.api.alibabacloud.com/document/cloudsso/2021-05-15/CreateUserProvisioning).
 *
 * > **NOTE:** Available since v1.260.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.getAccount({});
 * const defaultGetDirectories = alicloud.cloudsso.getDirectories({});
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultDirectory: alicloud.cloudsso.Directory[] = [];
 * defaultGetDirectories.then(defaultGetDirectories => defaultGetDirectories.ids).length.apply(length => {
 *     for (const range = {value: 0}; range.value < (length > 0 ? 0 : 1); range.value++) {
 *         defaultDirectory.push(new alicloud.cloudsso.Directory(`default-${range.value}`, {directoryName: name}));
 *     }
 * });
 * const directoryId = pulumi.all([defaultGetDirectories.then(defaultGetDirectories => defaultGetDirectories.ids).length, defaultGetDirectories, std.concat({
 *     input: [
 *         defaultDirectory.map(__item => __item.id),
 *         [""],
 *     ],
 * })]).apply(([length, defaultGetDirectories, invoke]) => length > 0 ? defaultGetDirectories.ids?.[0] : invoke.result?.[0]);
 * const defaultUser = new alicloud.cloudsso.User("default", {
 *     directoryId: directoryId,
 *     userName: `${name}-${defaultInteger.result}`,
 * });
 * const defaultGroup = new alicloud.cloudsso.Group("default", {
 *     directoryId: directoryId,
 *     groupName: name,
 *     description: name,
 * });
 * const defaultUserProvisioning = new alicloud.cloudsso.UserProvisioning("default", {
 *     description: "description",
 *     principalId: defaultUser.userId,
 *     targetType: "RD-Account",
 *     deletionStrategy: "Keep",
 *     duplicationStrategy: "KeepBoth",
 *     principalType: "User",
 *     targetId: _default.then(_default => _default.id),
 *     directoryId: defaultUser.directoryId,
 * });
 * ```
 *
 * ## Import
 *
 * Cloud SSO User Provisioning can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cloudsso/userProvisioning:UserProvisioning example <directory_id>:<user_provisioning_id>
 * ```
 */
export class UserProvisioning extends pulumi.CustomResource {
    /**
     * Get an existing UserProvisioning resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserProvisioningState, opts?: pulumi.CustomResourceOptions): UserProvisioning {
        return new UserProvisioning(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cloudsso/userProvisioning:UserProvisioning';

    /**
     * Returns true if the given object is an instance of UserProvisioning.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserProvisioning {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserProvisioning.__pulumiType;
    }

    /**
     * The creation time of the synchronization
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The processing policy for users who have been synchronized when deleting synchronization
     */
    declare public readonly deletionStrategy: pulumi.Output<string>;
    /**
     * Description of User Synchronization
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The ID of the directory to which the synchronization belongs
     */
    declare public readonly directoryId: pulumi.Output<string>;
    /**
     * Processing Policy for Synchronization Conflicts
     */
    declare public readonly duplicationStrategy: pulumi.Output<string>;
    /**
     * The ID of the CloudSSO user/group associated with the synchronization.
     */
    declare public readonly principalId: pulumi.Output<string>;
    /**
     * The ID of the CloudSSO user/group associated with the synchronization.
     */
    declare public readonly principalType: pulumi.Output<string>;
    /**
     * The status of the resource
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The ID of the destination associated with the synchronization.
     */
    declare public readonly targetId: pulumi.Output<string>;
    /**
     * The target type associated with the synchronization
     */
    declare public readonly targetType: pulumi.Output<string>;
    /**
     * The first ID of the resource
     */
    declare public /*out*/ readonly userProvisioningId: pulumi.Output<string>;
    /**
     * User Provisioning statistics
     */
    declare public /*out*/ readonly userProvisioningStatistics: pulumi.Output<outputs.cloudsso.UserProvisioningUserProvisioningStatistic[]>;

    /**
     * Create a UserProvisioning resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserProvisioningArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserProvisioningArgs | UserProvisioningState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserProvisioningState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["deletionStrategy"] = state?.deletionStrategy;
            resourceInputs["description"] = state?.description;
            resourceInputs["directoryId"] = state?.directoryId;
            resourceInputs["duplicationStrategy"] = state?.duplicationStrategy;
            resourceInputs["principalId"] = state?.principalId;
            resourceInputs["principalType"] = state?.principalType;
            resourceInputs["status"] = state?.status;
            resourceInputs["targetId"] = state?.targetId;
            resourceInputs["targetType"] = state?.targetType;
            resourceInputs["userProvisioningId"] = state?.userProvisioningId;
            resourceInputs["userProvisioningStatistics"] = state?.userProvisioningStatistics;
        } else {
            const args = argsOrState as UserProvisioningArgs | undefined;
            if (args?.deletionStrategy === undefined && !opts.urn) {
                throw new Error("Missing required property 'deletionStrategy'");
            }
            if (args?.directoryId === undefined && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            if (args?.duplicationStrategy === undefined && !opts.urn) {
                throw new Error("Missing required property 'duplicationStrategy'");
            }
            if (args?.principalId === undefined && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if (args?.principalType === undefined && !opts.urn) {
                throw new Error("Missing required property 'principalType'");
            }
            if (args?.targetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            if (args?.targetType === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetType'");
            }
            resourceInputs["deletionStrategy"] = args?.deletionStrategy;
            resourceInputs["description"] = args?.description;
            resourceInputs["directoryId"] = args?.directoryId;
            resourceInputs["duplicationStrategy"] = args?.duplicationStrategy;
            resourceInputs["principalId"] = args?.principalId;
            resourceInputs["principalType"] = args?.principalType;
            resourceInputs["targetId"] = args?.targetId;
            resourceInputs["targetType"] = args?.targetType;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["userProvisioningId"] = undefined /*out*/;
            resourceInputs["userProvisioningStatistics"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserProvisioning.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserProvisioning resources.
 */
export interface UserProvisioningState {
    /**
     * The creation time of the synchronization
     */
    createTime?: pulumi.Input<string>;
    /**
     * The processing policy for users who have been synchronized when deleting synchronization
     */
    deletionStrategy?: pulumi.Input<string>;
    /**
     * Description of User Synchronization
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the directory to which the synchronization belongs
     */
    directoryId?: pulumi.Input<string>;
    /**
     * Processing Policy for Synchronization Conflicts
     */
    duplicationStrategy?: pulumi.Input<string>;
    /**
     * The ID of the CloudSSO user/group associated with the synchronization.
     */
    principalId?: pulumi.Input<string>;
    /**
     * The ID of the CloudSSO user/group associated with the synchronization.
     */
    principalType?: pulumi.Input<string>;
    /**
     * The status of the resource
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of the destination associated with the synchronization.
     */
    targetId?: pulumi.Input<string>;
    /**
     * The target type associated with the synchronization
     */
    targetType?: pulumi.Input<string>;
    /**
     * The first ID of the resource
     */
    userProvisioningId?: pulumi.Input<string>;
    /**
     * User Provisioning statistics
     */
    userProvisioningStatistics?: pulumi.Input<pulumi.Input<inputs.cloudsso.UserProvisioningUserProvisioningStatistic>[]>;
}

/**
 * The set of arguments for constructing a UserProvisioning resource.
 */
export interface UserProvisioningArgs {
    /**
     * The processing policy for users who have been synchronized when deleting synchronization
     */
    deletionStrategy: pulumi.Input<string>;
    /**
     * Description of User Synchronization
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the directory to which the synchronization belongs
     */
    directoryId: pulumi.Input<string>;
    /**
     * Processing Policy for Synchronization Conflicts
     */
    duplicationStrategy: pulumi.Input<string>;
    /**
     * The ID of the CloudSSO user/group associated with the synchronization.
     */
    principalId: pulumi.Input<string>;
    /**
     * The ID of the CloudSSO user/group associated with the synchronization.
     */
    principalType: pulumi.Input<string>;
    /**
     * The ID of the destination associated with the synchronization.
     */
    targetId: pulumi.Input<string>;
    /**
     * The target type associated with the synchronization
     */
    targetType: pulumi.Input<string>;
}
