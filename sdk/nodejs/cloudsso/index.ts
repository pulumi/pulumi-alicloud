// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessConfigurationArgs, AccessConfigurationState } from "./accessConfiguration";
export type AccessConfiguration = import("./accessConfiguration").AccessConfiguration;
export const AccessConfiguration: typeof import("./accessConfiguration").AccessConfiguration = null as any;
utilities.lazyLoad(exports, ["AccessConfiguration"], () => require("./accessConfiguration"));

export { AccessConfigurationProvisioningArgs, AccessConfigurationProvisioningState } from "./accessConfigurationProvisioning";
export type AccessConfigurationProvisioning = import("./accessConfigurationProvisioning").AccessConfigurationProvisioning;
export const AccessConfigurationProvisioning: typeof import("./accessConfigurationProvisioning").AccessConfigurationProvisioning = null as any;
utilities.lazyLoad(exports, ["AccessConfigurationProvisioning"], () => require("./accessConfigurationProvisioning"));

export { AccessManagementArgs, AccessManagementState } from "./accessManagement";
export type AccessManagement = import("./accessManagement").AccessManagement;
export const AccessManagement: typeof import("./accessManagement").AccessManagement = null as any;
utilities.lazyLoad(exports, ["AccessManagement"], () => require("./accessManagement"));

export { DelegateAccountArgs, DelegateAccountState } from "./delegateAccount";
export type DelegateAccount = import("./delegateAccount").DelegateAccount;
export const DelegateAccount: typeof import("./delegateAccount").DelegateAccount = null as any;
utilities.lazyLoad(exports, ["DelegateAccount"], () => require("./delegateAccount"));

export { DirectoryArgs, DirectoryState } from "./directory";
export type Directory = import("./directory").Directory;
export const Directory: typeof import("./directory").Directory = null as any;
utilities.lazyLoad(exports, ["Directory"], () => require("./directory"));

export { GetAccessAssignmentsArgs, GetAccessAssignmentsResult, GetAccessAssignmentsOutputArgs } from "./getAccessAssignments";
export const getAccessAssignments: typeof import("./getAccessAssignments").getAccessAssignments = null as any;
export const getAccessAssignmentsOutput: typeof import("./getAccessAssignments").getAccessAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getAccessAssignments","getAccessAssignmentsOutput"], () => require("./getAccessAssignments"));

export { GetAccessConfigurationsArgs, GetAccessConfigurationsResult, GetAccessConfigurationsOutputArgs } from "./getAccessConfigurations";
export const getAccessConfigurations: typeof import("./getAccessConfigurations").getAccessConfigurations = null as any;
export const getAccessConfigurationsOutput: typeof import("./getAccessConfigurations").getAccessConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getAccessConfigurations","getAccessConfigurationsOutput"], () => require("./getAccessConfigurations"));

export { GetDirectoriesArgs, GetDirectoriesResult, GetDirectoriesOutputArgs } from "./getDirectories";
export const getDirectories: typeof import("./getDirectories").getDirectories = null as any;
export const getDirectoriesOutput: typeof import("./getDirectories").getDirectoriesOutput = null as any;
utilities.lazyLoad(exports, ["getDirectories","getDirectoriesOutput"], () => require("./getDirectories"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetScimServerCredentialsArgs, GetScimServerCredentialsResult, GetScimServerCredentialsOutputArgs } from "./getScimServerCredentials";
export const getScimServerCredentials: typeof import("./getScimServerCredentials").getScimServerCredentials = null as any;
export const getScimServerCredentialsOutput: typeof import("./getScimServerCredentials").getScimServerCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getScimServerCredentials","getScimServerCredentialsOutput"], () => require("./getScimServerCredentials"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { ScimServerCredentialArgs, ScimServerCredentialState } from "./scimServerCredential";
export type ScimServerCredential = import("./scimServerCredential").ScimServerCredential;
export const ScimServerCredential: typeof import("./scimServerCredential").ScimServerCredential = null as any;
utilities.lazyLoad(exports, ["ScimServerCredential"], () => require("./scimServerCredential"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserAttachmentArgs, UserAttachmentState } from "./userAttachment";
export type UserAttachment = import("./userAttachment").UserAttachment;
export const UserAttachment: typeof import("./userAttachment").UserAttachment = null as any;
utilities.lazyLoad(exports, ["UserAttachment"], () => require("./userAttachment"));

export { UserProvisioningArgs, UserProvisioningState } from "./userProvisioning";
export type UserProvisioning = import("./userProvisioning").UserProvisioning;
export const UserProvisioning: typeof import("./userProvisioning").UserProvisioning = null as any;
utilities.lazyLoad(exports, ["UserProvisioning"], () => require("./userProvisioning"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:cloudsso/accessConfiguration:AccessConfiguration":
                return new AccessConfiguration(name, <any>undefined, { urn })
            case "alicloud:cloudsso/accessConfigurationProvisioning:AccessConfigurationProvisioning":
                return new AccessConfigurationProvisioning(name, <any>undefined, { urn })
            case "alicloud:cloudsso/accessManagement:AccessManagement":
                return new AccessManagement(name, <any>undefined, { urn })
            case "alicloud:cloudsso/delegateAccount:DelegateAccount":
                return new DelegateAccount(name, <any>undefined, { urn })
            case "alicloud:cloudsso/directory:Directory":
                return new Directory(name, <any>undefined, { urn })
            case "alicloud:cloudsso/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "alicloud:cloudsso/scimServerCredential:ScimServerCredential":
                return new ScimServerCredential(name, <any>undefined, { urn })
            case "alicloud:cloudsso/user:User":
                return new User(name, <any>undefined, { urn })
            case "alicloud:cloudsso/userAttachment:UserAttachment":
                return new UserAttachment(name, <any>undefined, { urn })
            case "alicloud:cloudsso/userProvisioning:UserProvisioning":
                return new UserProvisioning(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "cloudsso/accessConfiguration", _module)
pulumi.runtime.registerResourceModule("alicloud", "cloudsso/accessConfigurationProvisioning", _module)
pulumi.runtime.registerResourceModule("alicloud", "cloudsso/accessManagement", _module)
pulumi.runtime.registerResourceModule("alicloud", "cloudsso/delegateAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "cloudsso/directory", _module)
pulumi.runtime.registerResourceModule("alicloud", "cloudsso/group", _module)
pulumi.runtime.registerResourceModule("alicloud", "cloudsso/scimServerCredential", _module)
pulumi.runtime.registerResourceModule("alicloud", "cloudsso/user", _module)
pulumi.runtime.registerResourceModule("alicloud", "cloudsso/userAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "cloudsso/userProvisioning", _module)
