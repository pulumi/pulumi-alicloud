// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Cloud SSO SCIM Server Credential resource.
 *
 * For information about Cloud SSO SCIM Server Credential and how to use it, see [What is Cloud SSO SCIM Server Credential](https://www.alibabacloud.com/help/doc-detail/264937.html).
 *
 * > **NOTE:** Available in v1.138.0+.
 *
 * > **NOTE:** Cloud SSO Only Support `cn-shanghai` And `us-west-1` Region
 *
 * ## Import
 *
 * Cloud SSO SCIM Server Credential can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cloudsso/scimServerCredential:ScimServerCredential example <directory_id>:<credential_id>
 * ```
 */
export class ScimServerCredential extends pulumi.CustomResource {
    /**
     * Get an existing ScimServerCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScimServerCredentialState, opts?: pulumi.CustomResourceOptions): ScimServerCredential {
        return new ScimServerCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cloudsso/scimServerCredential:ScimServerCredential';

    /**
     * Returns true if the given object is an instance of ScimServerCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScimServerCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScimServerCredential.__pulumiType;
    }

    /**
     * The CredentialId of the resource.
     */
    public /*out*/ readonly credentialId!: pulumi.Output<string>;
    /**
     * The ID of the Directory.
     */
    public readonly directoryId!: pulumi.Output<string>;
    /**
     * The Status of the resource. Valid values: `Disabled`, `Enabled`.
     */
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a ScimServerCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScimServerCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScimServerCredentialArgs | ScimServerCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScimServerCredentialState | undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ScimServerCredentialArgs | undefined;
            if ((!args || args.directoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["credentialId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScimServerCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScimServerCredential resources.
 */
export interface ScimServerCredentialState {
    /**
     * The CredentialId of the resource.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * The ID of the Directory.
     */
    directoryId?: pulumi.Input<string>;
    /**
     * The Status of the resource. Valid values: `Disabled`, `Enabled`.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScimServerCredential resource.
 */
export interface ScimServerCredentialArgs {
    /**
     * The ID of the Directory.
     */
    directoryId: pulumi.Input<string>;
    /**
     * The Status of the resource. Valid values: `Disabled`, `Enabled`.
     */
    status?: pulumi.Input<string>;
}
