// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Cloud SSO Access Assignment resource.
 *
 * For information about Cloud SSO Access Assignment and how to use it, see [What is Access Assignment](https://www.alibabacloud.com/help/en/cloudsso/developer-reference/api-cloudsso-2021-05-15-createaccessassignment).
 *
 * > **NOTE:** When you configure access assignment for the first time, access configuration will be automatically deployed.
 *
 * > **NOTE:** Available since v1.145.0.
 *
 * > **NOTE:** Cloud SSO Only Support `cn-shanghai` And `us-west-1` Region
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.cloudsso.getDirectories({});
 * const defaultGetResourceDirectories = alicloud.resourcemanager.getResourceDirectories({});
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultDirectory: alicloud.cloudsso.Directory[] = [];
 * _default.then(_default => _default.ids).length.apply(length => {
 *     for (const range = {value: 0}; range.value < (length > 0 ? 0 : 1); range.value++) {
 *         defaultDirectory.push(new alicloud.cloudsso.Directory(`default-${range.value}`, {directoryName: name}));
 *     }
 * });
 * const directoryId = pulumi.all([_default.then(_default => _default.ids).length, _default, std.concat({
 *     input: [
 *         defaultDirectory.map(__item => __item.id),
 *         [""],
 *     ],
 * })]).apply(([length, _default, invoke]) => length > 0 ? _default.ids?.[0] : invoke.result?.[0]);
 * const defaultUser = new alicloud.cloudsso.User("default", {
 *     directoryId: directoryId,
 *     userName: `${name}-${defaultInteger.result}`,
 * });
 * const defaultAccessConfiguration = new alicloud.cloudsso.AccessConfiguration("default", {
 *     directoryId: directoryId,
 *     accessConfigurationName: `${name}-${defaultInteger.result}`,
 * });
 * const defaultAccessManagement = new alicloud.cloudsso.AccessManagement("default", {
 *     directoryId: directoryId,
 *     accessConfigurationId: defaultAccessConfiguration.accessConfigurationId,
 *     targetType: "RD-Account",
 *     targetId: defaultGetResourceDirectories.then(defaultGetResourceDirectories => defaultGetResourceDirectories.directories?.[0]?.masterAccountId),
 *     principalType: "User",
 *     principalId: defaultUser.userId,
 *     deprovisionStrategy: "DeprovisionForLastAccessAssignmentOnAccount",
 * });
 * ```
 *
 * ## Import
 *
 * Cloud SSO Access Assignment can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cloudsso/accessManagement:AccessManagement example <directory_id>:<access_configuration_id>:<target_type>:<target_id>:<principal_type>:<principal_id>
 * ```
 */
export class AccessManagement extends pulumi.CustomResource {
    /**
     * Get an existing AccessManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessManagementState, opts?: pulumi.CustomResourceOptions): AccessManagement {
        return new AccessManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cloudsso/accessManagement:AccessManagement';

    /**
     * Returns true if the given object is an instance of AccessManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessManagement.__pulumiType;
    }

    /**
     * The ID of the access configuration.
     */
    declare public readonly accessConfigurationId: pulumi.Output<string>;
    /**
     * (Available since v1.254.0) The time when the access permissions were assigned.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Specifies whether to de-provision the access configuration when you remove the access permissions from the CloudSSO identity. Valid values: `DeprovisionForLastAccessAssignmentOnAccount` and `None`. Default Value: `DeprovisionForLastAccessAssignmentOnAccount`. **NOTE:** When `deprovisionStrategy` is `DeprovisionForLastAccessAssignmentOnAccount`, and the access assignment to be deleted is the last access assignment for the same account and the same AC, this option is used for the undeployment operation.
     */
    declare public readonly deprovisionStrategy: pulumi.Output<string | undefined>;
    /**
     * The ID of the Directory.
     */
    declare public readonly directoryId: pulumi.Output<string>;
    /**
     * The ID of the CloudSSO identity.
     */
    declare public readonly principalId: pulumi.Output<string>;
    /**
     * The type of the CloudSSO identity. Valid values: `User`, `Group`.
     */
    declare public readonly principalType: pulumi.Output<string>;
    /**
     * The ID of the task object.
     */
    declare public readonly targetId: pulumi.Output<string>;
    /**
     * The type of the task object. Valid values: `RD-Account`.
     */
    declare public readonly targetType: pulumi.Output<string>;

    /**
     * Create a AccessManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessManagementArgs | AccessManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessManagementState | undefined;
            resourceInputs["accessConfigurationId"] = state?.accessConfigurationId;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["deprovisionStrategy"] = state?.deprovisionStrategy;
            resourceInputs["directoryId"] = state?.directoryId;
            resourceInputs["principalId"] = state?.principalId;
            resourceInputs["principalType"] = state?.principalType;
            resourceInputs["targetId"] = state?.targetId;
            resourceInputs["targetType"] = state?.targetType;
        } else {
            const args = argsOrState as AccessManagementArgs | undefined;
            if (args?.accessConfigurationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accessConfigurationId'");
            }
            if (args?.directoryId === undefined && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            if (args?.principalId === undefined && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if (args?.principalType === undefined && !opts.urn) {
                throw new Error("Missing required property 'principalType'");
            }
            if (args?.targetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            if (args?.targetType === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetType'");
            }
            resourceInputs["accessConfigurationId"] = args?.accessConfigurationId;
            resourceInputs["deprovisionStrategy"] = args?.deprovisionStrategy;
            resourceInputs["directoryId"] = args?.directoryId;
            resourceInputs["principalId"] = args?.principalId;
            resourceInputs["principalType"] = args?.principalType;
            resourceInputs["targetId"] = args?.targetId;
            resourceInputs["targetType"] = args?.targetType;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessManagement.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessManagement resources.
 */
export interface AccessManagementState {
    /**
     * The ID of the access configuration.
     */
    accessConfigurationId?: pulumi.Input<string>;
    /**
     * (Available since v1.254.0) The time when the access permissions were assigned.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Specifies whether to de-provision the access configuration when you remove the access permissions from the CloudSSO identity. Valid values: `DeprovisionForLastAccessAssignmentOnAccount` and `None`. Default Value: `DeprovisionForLastAccessAssignmentOnAccount`. **NOTE:** When `deprovisionStrategy` is `DeprovisionForLastAccessAssignmentOnAccount`, and the access assignment to be deleted is the last access assignment for the same account and the same AC, this option is used for the undeployment operation.
     */
    deprovisionStrategy?: pulumi.Input<string>;
    /**
     * The ID of the Directory.
     */
    directoryId?: pulumi.Input<string>;
    /**
     * The ID of the CloudSSO identity.
     */
    principalId?: pulumi.Input<string>;
    /**
     * The type of the CloudSSO identity. Valid values: `User`, `Group`.
     */
    principalType?: pulumi.Input<string>;
    /**
     * The ID of the task object.
     */
    targetId?: pulumi.Input<string>;
    /**
     * The type of the task object. Valid values: `RD-Account`.
     */
    targetType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessManagement resource.
 */
export interface AccessManagementArgs {
    /**
     * The ID of the access configuration.
     */
    accessConfigurationId: pulumi.Input<string>;
    /**
     * Specifies whether to de-provision the access configuration when you remove the access permissions from the CloudSSO identity. Valid values: `DeprovisionForLastAccessAssignmentOnAccount` and `None`. Default Value: `DeprovisionForLastAccessAssignmentOnAccount`. **NOTE:** When `deprovisionStrategy` is `DeprovisionForLastAccessAssignmentOnAccount`, and the access assignment to be deleted is the last access assignment for the same account and the same AC, this option is used for the undeployment operation.
     */
    deprovisionStrategy?: pulumi.Input<string>;
    /**
     * The ID of the Directory.
     */
    directoryId: pulumi.Input<string>;
    /**
     * The ID of the CloudSSO identity.
     */
    principalId: pulumi.Input<string>;
    /**
     * The type of the CloudSSO identity. Valid values: `User`, `Group`.
     */
    principalType: pulumi.Input<string>;
    /**
     * The ID of the task object.
     */
    targetId: pulumi.Input<string>;
    /**
     * The type of the task object. Valid values: `RD-Account`.
     */
    targetType: pulumi.Input<string>;
}
