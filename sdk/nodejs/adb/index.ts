// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { BackupPolicyArgs, BackupPolicyState } from "./backupPolicy";
export type BackupPolicy = import("./backupPolicy").BackupPolicy;
export const BackupPolicy: typeof import("./backupPolicy").BackupPolicy = null as any;
utilities.lazyLoad(exports, ["BackupPolicy"], () => require("./backupPolicy"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { DBClusterArgs, DBClusterState } from "./dbcluster";
export type DBCluster = import("./dbcluster").DBCluster;
export const DBCluster: typeof import("./dbcluster").DBCluster = null as any;
utilities.lazyLoad(exports, ["DBCluster"], () => require("./dbcluster"));

export { DBClusterLakeVersionArgs, DBClusterLakeVersionState } from "./dbclusterLakeVersion";
export type DBClusterLakeVersion = import("./dbclusterLakeVersion").DBClusterLakeVersion;
export const DBClusterLakeVersion: typeof import("./dbclusterLakeVersion").DBClusterLakeVersion = null as any;
utilities.lazyLoad(exports, ["DBClusterLakeVersion"], () => require("./dbclusterLakeVersion"));

export { GetClustersArgs, GetClustersResult, GetClustersOutputArgs } from "./getClusters";
export const getClusters: typeof import("./getClusters").getClusters = null as any;
export const getClustersOutput: typeof import("./getClusters").getClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClusters","getClustersOutput"], () => require("./getClusters"));

export { GetDBClusterLakeVersionsArgs, GetDBClusterLakeVersionsResult, GetDBClusterLakeVersionsOutputArgs } from "./getDBClusterLakeVersions";
export const getDBClusterLakeVersions: typeof import("./getDBClusterLakeVersions").getDBClusterLakeVersions = null as any;
export const getDBClusterLakeVersionsOutput: typeof import("./getDBClusterLakeVersions").getDBClusterLakeVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getDBClusterLakeVersions","getDBClusterLakeVersionsOutput"], () => require("./getDBClusterLakeVersions"));

export { GetDBClustersArgs, GetDBClustersResult, GetDBClustersOutputArgs } from "./getDBClusters";
export const getDBClusters: typeof import("./getDBClusters").getDBClusters = null as any;
export const getDBClustersOutput: typeof import("./getDBClusters").getDBClustersOutput = null as any;
utilities.lazyLoad(exports, ["getDBClusters","getDBClustersOutput"], () => require("./getDBClusters"));

export { GetResourceGroupsArgs, GetResourceGroupsResult, GetResourceGroupsOutputArgs } from "./getResourceGroups";
export const getResourceGroups: typeof import("./getResourceGroups").getResourceGroups = null as any;
export const getResourceGroupsOutput: typeof import("./getResourceGroups").getResourceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroups","getResourceGroupsOutput"], () => require("./getResourceGroups"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { LakeAccountArgs, LakeAccountState } from "./lakeAccount";
export type LakeAccount = import("./lakeAccount").LakeAccount;
export const LakeAccount: typeof import("./lakeAccount").LakeAccount = null as any;
utilities.lazyLoad(exports, ["LakeAccount"], () => require("./lakeAccount"));

export { ResourceGroupArgs, ResourceGroupState } from "./resourceGroup";
export type ResourceGroup = import("./resourceGroup").ResourceGroup;
export const ResourceGroup: typeof import("./resourceGroup").ResourceGroup = null as any;
utilities.lazyLoad(exports, ["ResourceGroup"], () => require("./resourceGroup"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:adb/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "alicloud:adb/backupPolicy:BackupPolicy":
                return new BackupPolicy(name, <any>undefined, { urn })
            case "alicloud:adb/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "alicloud:adb/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "alicloud:adb/dBCluster:DBCluster":
                return new DBCluster(name, <any>undefined, { urn })
            case "alicloud:adb/dBClusterLakeVersion:DBClusterLakeVersion":
                return new DBClusterLakeVersion(name, <any>undefined, { urn })
            case "alicloud:adb/lakeAccount:LakeAccount":
                return new LakeAccount(name, <any>undefined, { urn })
            case "alicloud:adb/resourceGroup:ResourceGroup":
                return new ResourceGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "adb/account", _module)
pulumi.runtime.registerResourceModule("alicloud", "adb/backupPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "adb/cluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "adb/connection", _module)
pulumi.runtime.registerResourceModule("alicloud", "adb/dBCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "adb/dBClusterLakeVersion", _module)
pulumi.runtime.registerResourceModule("alicloud", "adb/lakeAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "adb/resourceGroup", _module)
