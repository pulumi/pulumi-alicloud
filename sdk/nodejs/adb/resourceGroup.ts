// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a AnalyticDB for MySQL (ADB) Resource Group resource.
 *
 * For information about AnalyticDB for MySQL (ADB) Resource Group and how to use it, see [What is Resource Group](https://www.alibabacloud.com/help/en/analyticdb-for-mysql/latest/api-doc-adb-2019-03-15-api-doc-createdbresourcegroup).
 *
 * > **NOTE:** Available since v1.195.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.adb.getZones({});
 * const defaultGetResourceGroups = alicloud.resourcemanager.getResourceGroups({
 *     status: "OK",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "10.4.0.0/24",
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 *     vswitchName: name,
 * });
 * const defaultDBCluster = new alicloud.adb.DBCluster("default", {
 *     computeResource: "48Core192GB",
 *     dbClusterCategory: "MixedStorage",
 *     dbClusterVersion: "3.0",
 *     dbNodeClass: "E32",
 *     dbNodeStorage: 100,
 *     description: name,
 *     elasticIoResource: 1,
 *     maintainTime: "04:00Z-05:00Z",
 *     mode: "flexible",
 *     paymentType: "PayAsYouGo",
 *     resourceGroupId: defaultGetResourceGroups.then(defaultGetResourceGroups => defaultGetResourceGroups.ids?.[0]),
 *     securityIps: [
 *         "10.168.1.12",
 *         "10.168.1.11",
 *     ],
 *     vpcId: defaultNetwork.id,
 *     vswitchId: defaultSwitch.id,
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 *     tags: {
 *         Created: "TF",
 *         For: "example",
 *     },
 * });
 * const defaultResourceGroup = new alicloud.adb.ResourceGroup("default", {
 *     groupName: "TF_EXAMPLE",
 *     groupType: "batch",
 *     nodeNum: 0,
 *     dbClusterId: defaultDBCluster.id,
 * });
 * ```
 *
 * ## Import
 *
 * Adb Resource Group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:adb/resourceGroup:ResourceGroup example <db_cluster_id>:<group_name>
 * ```
 */
export class ResourceGroup extends pulumi.CustomResource {
    /**
     * Get an existing ResourceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceGroupState, opts?: pulumi.CustomResourceOptions): ResourceGroup {
        return new ResourceGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:adb/resourceGroup:ResourceGroup';

    /**
     * Returns true if the given object is an instance of ResourceGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceGroup.__pulumiType;
    }

    /**
     * The working mode of the resource group. Default value: `Disable`. Valid values: `Disable`, `AutoScale`.
     */
    declare public readonly clusterMode: pulumi.Output<string>;
    /**
     * The resource specifications of a single compute cluster. Unit: ACU.
     */
    declare public readonly clusterSizeResource: pulumi.Output<string>;
    /**
     * (Available since v1.261.0) The endpoint of the resource group.
     */
    declare public /*out*/ readonly connectionString: pulumi.Output<string>;
    /**
     * The time when the resource group was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The ID of the DBCluster.
     */
    declare public readonly dbClusterId: pulumi.Output<string>;
    /**
     * The engine of the resource group. Default value: `AnalyticDB`. Valid values: `AnalyticDB`, `SparkWarehouse`.
     */
    declare public readonly engine: pulumi.Output<string>;
    /**
     * The Spark application configuration parameters that can be applied to all Spark jobs executed in the resource group.
     */
    declare public readonly engineParams: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the resource group. The `groupName` can be up to 255 characters in length and can contain digits, uppercase letters, hyphens (-), and underscores (_). It must start with a digit or uppercase letter.
     */
    declare public readonly groupName: pulumi.Output<string>;
    /**
     * The query execution mode. Default value: `interactive`. Valid values: `interactive`, `batch`.
     */
    declare public readonly groupType: pulumi.Output<string>;
    /**
     * The maximum number of compute clusters that are allowed in the resource group.
     */
    declare public readonly maxClusterCount: pulumi.Output<number | undefined>;
    /**
     * The maximum amount of reserved computing resources, which refers to the amount of resources that are not allocated in the cluster.
     */
    declare public readonly maxComputeResource: pulumi.Output<string>;
    /**
     * The minimum number of compute clusters that are required in the resource group.
     */
    declare public readonly minClusterCount: pulumi.Output<number | undefined>;
    /**
     * The minimum amount of reserved computing resources. Unit: AnalyticDB compute unit (ACU).
     */
    declare public readonly minComputeResource: pulumi.Output<string>;
    /**
     * The number of nodes.
     */
    declare public readonly nodeNum: pulumi.Output<number>;
    /**
     * (Available since v1.261.0) The port number of the resource group.
     */
    declare public /*out*/ readonly port: pulumi.Output<string>;
    /**
     * (Available since v1.261.0) The status of the resource group.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The time when the resource group was updated.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;
    /**
     * The database accounts that are associated with the resource group.
     */
    declare public /*out*/ readonly user: pulumi.Output<string>;
    /**
     * The database accounts with which to associate the resource group.
     */
    declare public readonly users: pulumi.Output<string[] | undefined>;

    /**
     * Create a ResourceGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceGroupArgs | ResourceGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceGroupState | undefined;
            resourceInputs["clusterMode"] = state?.clusterMode;
            resourceInputs["clusterSizeResource"] = state?.clusterSizeResource;
            resourceInputs["connectionString"] = state?.connectionString;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["dbClusterId"] = state?.dbClusterId;
            resourceInputs["engine"] = state?.engine;
            resourceInputs["engineParams"] = state?.engineParams;
            resourceInputs["groupName"] = state?.groupName;
            resourceInputs["groupType"] = state?.groupType;
            resourceInputs["maxClusterCount"] = state?.maxClusterCount;
            resourceInputs["maxComputeResource"] = state?.maxComputeResource;
            resourceInputs["minClusterCount"] = state?.minClusterCount;
            resourceInputs["minComputeResource"] = state?.minComputeResource;
            resourceInputs["nodeNum"] = state?.nodeNum;
            resourceInputs["port"] = state?.port;
            resourceInputs["status"] = state?.status;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["user"] = state?.user;
            resourceInputs["users"] = state?.users;
        } else {
            const args = argsOrState as ResourceGroupArgs | undefined;
            if (args?.dbClusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbClusterId'");
            }
            if (args?.groupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            resourceInputs["clusterMode"] = args?.clusterMode;
            resourceInputs["clusterSizeResource"] = args?.clusterSizeResource;
            resourceInputs["dbClusterId"] = args?.dbClusterId;
            resourceInputs["engine"] = args?.engine;
            resourceInputs["engineParams"] = args?.engineParams;
            resourceInputs["groupName"] = args?.groupName;
            resourceInputs["groupType"] = args?.groupType;
            resourceInputs["maxClusterCount"] = args?.maxClusterCount;
            resourceInputs["maxComputeResource"] = args?.maxComputeResource;
            resourceInputs["minClusterCount"] = args?.minClusterCount;
            resourceInputs["minComputeResource"] = args?.minComputeResource;
            resourceInputs["nodeNum"] = args?.nodeNum;
            resourceInputs["users"] = args?.users;
            resourceInputs["connectionString"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["user"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceGroup resources.
 */
export interface ResourceGroupState {
    /**
     * The working mode of the resource group. Default value: `Disable`. Valid values: `Disable`, `AutoScale`.
     */
    clusterMode?: pulumi.Input<string>;
    /**
     * The resource specifications of a single compute cluster. Unit: ACU.
     */
    clusterSizeResource?: pulumi.Input<string>;
    /**
     * (Available since v1.261.0) The endpoint of the resource group.
     */
    connectionString?: pulumi.Input<string>;
    /**
     * The time when the resource group was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The ID of the DBCluster.
     */
    dbClusterId?: pulumi.Input<string>;
    /**
     * The engine of the resource group. Default value: `AnalyticDB`. Valid values: `AnalyticDB`, `SparkWarehouse`.
     */
    engine?: pulumi.Input<string>;
    /**
     * The Spark application configuration parameters that can be applied to all Spark jobs executed in the resource group.
     */
    engineParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the resource group. The `groupName` can be up to 255 characters in length and can contain digits, uppercase letters, hyphens (-), and underscores (_). It must start with a digit or uppercase letter.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The query execution mode. Default value: `interactive`. Valid values: `interactive`, `batch`.
     */
    groupType?: pulumi.Input<string>;
    /**
     * The maximum number of compute clusters that are allowed in the resource group.
     */
    maxClusterCount?: pulumi.Input<number>;
    /**
     * The maximum amount of reserved computing resources, which refers to the amount of resources that are not allocated in the cluster.
     */
    maxComputeResource?: pulumi.Input<string>;
    /**
     * The minimum number of compute clusters that are required in the resource group.
     */
    minClusterCount?: pulumi.Input<number>;
    /**
     * The minimum amount of reserved computing resources. Unit: AnalyticDB compute unit (ACU).
     */
    minComputeResource?: pulumi.Input<string>;
    /**
     * The number of nodes.
     */
    nodeNum?: pulumi.Input<number>;
    /**
     * (Available since v1.261.0) The port number of the resource group.
     */
    port?: pulumi.Input<string>;
    /**
     * (Available since v1.261.0) The status of the resource group.
     */
    status?: pulumi.Input<string>;
    /**
     * The time when the resource group was updated.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The database accounts that are associated with the resource group.
     */
    user?: pulumi.Input<string>;
    /**
     * The database accounts with which to associate the resource group.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ResourceGroup resource.
 */
export interface ResourceGroupArgs {
    /**
     * The working mode of the resource group. Default value: `Disable`. Valid values: `Disable`, `AutoScale`.
     */
    clusterMode?: pulumi.Input<string>;
    /**
     * The resource specifications of a single compute cluster. Unit: ACU.
     */
    clusterSizeResource?: pulumi.Input<string>;
    /**
     * The ID of the DBCluster.
     */
    dbClusterId: pulumi.Input<string>;
    /**
     * The engine of the resource group. Default value: `AnalyticDB`. Valid values: `AnalyticDB`, `SparkWarehouse`.
     */
    engine?: pulumi.Input<string>;
    /**
     * The Spark application configuration parameters that can be applied to all Spark jobs executed in the resource group.
     */
    engineParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the resource group. The `groupName` can be up to 255 characters in length and can contain digits, uppercase letters, hyphens (-), and underscores (_). It must start with a digit or uppercase letter.
     */
    groupName: pulumi.Input<string>;
    /**
     * The query execution mode. Default value: `interactive`. Valid values: `interactive`, `batch`.
     */
    groupType?: pulumi.Input<string>;
    /**
     * The maximum number of compute clusters that are allowed in the resource group.
     */
    maxClusterCount?: pulumi.Input<number>;
    /**
     * The maximum amount of reserved computing resources, which refers to the amount of resources that are not allocated in the cluster.
     */
    maxComputeResource?: pulumi.Input<string>;
    /**
     * The minimum number of compute clusters that are required in the resource group.
     */
    minClusterCount?: pulumi.Input<number>;
    /**
     * The minimum amount of reserved computing resources. Unit: AnalyticDB compute unit (ACU).
     */
    minComputeResource?: pulumi.Input<string>;
    /**
     * The number of nodes.
     */
    nodeNum?: pulumi.Input<number>;
    /**
     * The database accounts with which to associate the resource group.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}
