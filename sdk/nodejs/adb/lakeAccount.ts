// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a ADB Lake Account resource. Account of the DBClusterLakeVesion.
 *
 * For information about ADB Lake Account and how to use it, see [What is Lake Account](https://www.alibabacloud.com/help/en/analyticdb-for-mysql/developer-reference/api-adb-2021-12-01-createaccount).
 * For information about ADB Lake Account Privileges and how to use it, see [What are Lake Account Privileges](https://www.alibabacloud.com/help/en/analyticdb-for-mysql/developer-reference/api-adb-2021-12-01-modifyaccountprivileges/).
 *
 * > **NOTE:** Available since v1.214.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const defaultZones = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const vPCID = new alicloud.vpc.Network("vPCID", {
 *     vpcName: name,
 *     cidrBlock: "172.16.0.0/12",
 * });
 * const vSWITCHID = new alicloud.vpc.Switch("vSWITCHID", {
 *     vpcId: vPCID.id,
 *     zoneId: "cn-hangzhou-k",
 *     vswitchName: name,
 *     cidrBlock: "172.16.0.0/24",
 * });
 * const createInstance = new alicloud.adb.DBClusterLakeVersion("createInstance", {
 *     storageResource: "0ACU",
 *     zoneId: "cn-hangzhou-k",
 *     vpcId: vPCID.id,
 *     vswitchId: vSWITCHID.id,
 *     dbClusterDescription: name,
 *     computeResource: "16ACU",
 *     dbClusterVersion: "5.0",
 *     paymentType: "PayAsYouGo",
 *     securityIps: "127.0.0.1",
 * });
 * const defaultLakeAccount = new alicloud.adb.LakeAccount("defaultLakeAccount", {
 *     dbClusterId: createInstance.id,
 *     accountType: "Super",
 *     accountName: "tfnormal",
 *     accountPassword: "normal@2023",
 *     accountPrivileges: [
 *         {
 *             privilegeType: "Database",
 *             privilegeObject: {
 *                 database: "MYSQL",
 *             },
 *             privileges: [
 *                 "select",
 *                 "update",
 *             ],
 *         },
 *         {
 *             privilegeType: "Table",
 *             privilegeObject: {
 *                 database: "INFORMATION_SCHEMA",
 *                 table: "ENGINES",
 *             },
 *             privileges: ["update"],
 *         },
 *         {
 *             privilegeType: "Column",
 *             privilegeObject: {
 *                 table: "COLUMNS",
 *                 column: "PRIVILEGES",
 *                 database: "INFORMATION_SCHEMA",
 *             },
 *             privileges: ["update"],
 *         },
 *     ],
 *     accountDescription: name,
 * });
 * ```
 *
 * ## Import
 *
 * ADB Lake Account can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:adb/lakeAccount:LakeAccount example <db_cluster_id>:<account_name>
 * ```
 */
export class LakeAccount extends pulumi.CustomResource {
    /**
     * Get an existing LakeAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LakeAccountState, opts?: pulumi.CustomResourceOptions): LakeAccount {
        return new LakeAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:adb/lakeAccount:LakeAccount';

    /**
     * Returns true if the given object is an instance of LakeAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LakeAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LakeAccount.__pulumiType;
    }

    /**
     * The description of the account.
     */
    public readonly accountDescription!: pulumi.Output<string | undefined>;
    /**
     * The name of the account.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * AccountPassword.
     */
    public readonly accountPassword!: pulumi.Output<string>;
    /**
     * List of permissions granted. See `accountPrivileges` below.
     */
    public readonly accountPrivileges!: pulumi.Output<outputs.adb.LakeAccountAccountPrivilege[]>;
    /**
     * The type of the account.
     */
    public readonly accountType!: pulumi.Output<string | undefined>;
    /**
     * The DBCluster ID.
     */
    public readonly dbClusterId!: pulumi.Output<string>;
    /**
     * The status of the resource.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a LakeAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LakeAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LakeAccountArgs | LakeAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LakeAccountState | undefined;
            resourceInputs["accountDescription"] = state ? state.accountDescription : undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["accountPassword"] = state ? state.accountPassword : undefined;
            resourceInputs["accountPrivileges"] = state ? state.accountPrivileges : undefined;
            resourceInputs["accountType"] = state ? state.accountType : undefined;
            resourceInputs["dbClusterId"] = state ? state.dbClusterId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as LakeAccountArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.accountPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountPassword'");
            }
            if ((!args || args.dbClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbClusterId'");
            }
            resourceInputs["accountDescription"] = args ? args.accountDescription : undefined;
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["accountPassword"] = args?.accountPassword ? pulumi.secret(args.accountPassword) : undefined;
            resourceInputs["accountPrivileges"] = args ? args.accountPrivileges : undefined;
            resourceInputs["accountType"] = args ? args.accountType : undefined;
            resourceInputs["dbClusterId"] = args ? args.dbClusterId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accountPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LakeAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LakeAccount resources.
 */
export interface LakeAccountState {
    /**
     * The description of the account.
     */
    accountDescription?: pulumi.Input<string>;
    /**
     * The name of the account.
     */
    accountName?: pulumi.Input<string>;
    /**
     * AccountPassword.
     */
    accountPassword?: pulumi.Input<string>;
    /**
     * List of permissions granted. See `accountPrivileges` below.
     */
    accountPrivileges?: pulumi.Input<pulumi.Input<inputs.adb.LakeAccountAccountPrivilege>[]>;
    /**
     * The type of the account.
     */
    accountType?: pulumi.Input<string>;
    /**
     * The DBCluster ID.
     */
    dbClusterId?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LakeAccount resource.
 */
export interface LakeAccountArgs {
    /**
     * The description of the account.
     */
    accountDescription?: pulumi.Input<string>;
    /**
     * The name of the account.
     */
    accountName: pulumi.Input<string>;
    /**
     * AccountPassword.
     */
    accountPassword: pulumi.Input<string>;
    /**
     * List of permissions granted. See `accountPrivileges` below.
     */
    accountPrivileges?: pulumi.Input<pulumi.Input<inputs.adb.LakeAccountAccountPrivilege>[]>;
    /**
     * The type of the account.
     */
    accountType?: pulumi.Input<string>;
    /**
     * The DBCluster ID.
     */
    dbClusterId: pulumi.Input<string>;
}
