// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the Global Accelerator (GA) Endpoint Groups of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.113.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const region = config.get("region") || "cn-hangzhou";
 * const name = config.get("name") || "tf-example";
 * const defaultAccelerators = alicloud.ga.getAccelerators({
 *     status: "active",
 * });
 * const defaultBandwidthPackage = new alicloud.ga.BandwidthPackage("defaultBandwidthPackage", {
 *     bandwidth: 100,
 *     type: "Basic",
 *     bandwidthType: "Basic",
 *     paymentType: "PayAsYouGo",
 *     billingType: "PayBy95",
 *     ratio: 30,
 *     bandwidthPackageName: name,
 *     autoPay: true,
 *     autoUseCoupon: true,
 * });
 * const defaultBandwidthPackageAttachment = new alicloud.ga.BandwidthPackageAttachment("defaultBandwidthPackageAttachment", {
 *     acceleratorId: defaultAccelerators.then(defaultAccelerators => defaultAccelerators.ids?.[0]),
 *     bandwidthPackageId: defaultBandwidthPackage.id,
 * });
 * const defaultListener = new alicloud.ga.Listener("defaultListener", {
 *     acceleratorId: defaultBandwidthPackageAttachment.acceleratorId,
 *     clientAffinity: "SOURCE_IP",
 *     protocol: "UDP",
 *     portRanges: [{
 *         fromPort: 60,
 *         toPort: 70,
 *     }],
 * });
 * const defaultEipAddress = new alicloud.ecs.EipAddress("defaultEipAddress", {
 *     bandwidth: "10",
 *     internetChargeType: "PayByBandwidth",
 *     addressName: name,
 * });
 * const defaultEndpointGroup = new alicloud.ga.EndpointGroup("defaultEndpointGroup", {
 *     acceleratorId: defaultListener.acceleratorId,
 *     listenerId: defaultListener.id,
 *     description: name,
 *     thresholdCount: 4,
 *     trafficPercentage: 20,
 *     endpointGroupRegion: "cn-hangzhou",
 *     healthCheckIntervalSeconds: 3,
 *     healthCheckPath: "/healthcheck",
 *     healthCheckPort: 9999,
 *     healthCheckProtocol: "http",
 *     portOverrides: {
 *         endpointPort: 10,
 *         listenerPort: 60,
 *     },
 *     endpointConfigurations: [{
 *         endpoint: defaultEipAddress.ipAddress,
 *         type: "PublicIp",
 *         weight: 20,
 *     }],
 * });
 * const defaultEndpointGroups = alicloud.ga.getEndpointGroupsOutput({
 *     acceleratorId: defaultEndpointGroup.acceleratorId,
 *     ids: [defaultEndpointGroup.id],
 * });
 * export const firstGaEndpointGroupId = defaultEndpointGroups.apply(defaultEndpointGroups => defaultEndpointGroups.groups?.[0]?.id);
 * ```
 */
export function getEndpointGroups(args: GetEndpointGroupsArgs, opts?: pulumi.InvokeOptions): Promise<GetEndpointGroupsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:ga/getEndpointGroups:getEndpointGroups", {
        "acceleratorId": args.acceleratorId,
        "endpointGroupType": args.endpointGroupType,
        "ids": args.ids,
        "listenerId": args.listenerId,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getEndpointGroups.
 */
export interface GetEndpointGroupsArgs {
    /**
     * The ID of the Global Accelerator instance to which the endpoint group will be added.
     */
    acceleratorId: string;
    /**
     * The endpoint group type. Default value: `default`. Valid values: `default`, `virtual`.
     */
    endpointGroupType?: string;
    /**
     * A list of Endpoint Group IDs.
     */
    ids?: string[];
    /**
     * The ID of the listener that is associated with the endpoint group.
     */
    listenerId?: string;
    /**
     * A regex string to filter results by Endpoint Group name.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: string;
    /**
     * The status of the endpoint group. Valid values: `active`, `configuring`, `creating`, `init`.
     */
    status?: string;
}

/**
 * A collection of values returned by getEndpointGroups.
 */
export interface GetEndpointGroupsResult {
    readonly acceleratorId: string;
    readonly endpointGroupType?: string;
    /**
     * A list of Ga Endpoint Groups. Each element contains the following attributes:
     */
    readonly groups: outputs.ga.GetEndpointGroupsGroup[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    /**
     * The ID of the listener that is associated with the endpoint group.
     */
    readonly listenerId?: string;
    readonly nameRegex?: string;
    /**
     * A list of Endpoint Group names.
     */
    readonly names: string[];
    readonly outputFile?: string;
    /**
     * The status of the endpoint group.
     */
    readonly status?: string;
}
/**
 * This data source provides the Global Accelerator (GA) Endpoint Groups of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.113.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const region = config.get("region") || "cn-hangzhou";
 * const name = config.get("name") || "tf-example";
 * const defaultAccelerators = alicloud.ga.getAccelerators({
 *     status: "active",
 * });
 * const defaultBandwidthPackage = new alicloud.ga.BandwidthPackage("defaultBandwidthPackage", {
 *     bandwidth: 100,
 *     type: "Basic",
 *     bandwidthType: "Basic",
 *     paymentType: "PayAsYouGo",
 *     billingType: "PayBy95",
 *     ratio: 30,
 *     bandwidthPackageName: name,
 *     autoPay: true,
 *     autoUseCoupon: true,
 * });
 * const defaultBandwidthPackageAttachment = new alicloud.ga.BandwidthPackageAttachment("defaultBandwidthPackageAttachment", {
 *     acceleratorId: defaultAccelerators.then(defaultAccelerators => defaultAccelerators.ids?.[0]),
 *     bandwidthPackageId: defaultBandwidthPackage.id,
 * });
 * const defaultListener = new alicloud.ga.Listener("defaultListener", {
 *     acceleratorId: defaultBandwidthPackageAttachment.acceleratorId,
 *     clientAffinity: "SOURCE_IP",
 *     protocol: "UDP",
 *     portRanges: [{
 *         fromPort: 60,
 *         toPort: 70,
 *     }],
 * });
 * const defaultEipAddress = new alicloud.ecs.EipAddress("defaultEipAddress", {
 *     bandwidth: "10",
 *     internetChargeType: "PayByBandwidth",
 *     addressName: name,
 * });
 * const defaultEndpointGroup = new alicloud.ga.EndpointGroup("defaultEndpointGroup", {
 *     acceleratorId: defaultListener.acceleratorId,
 *     listenerId: defaultListener.id,
 *     description: name,
 *     thresholdCount: 4,
 *     trafficPercentage: 20,
 *     endpointGroupRegion: "cn-hangzhou",
 *     healthCheckIntervalSeconds: 3,
 *     healthCheckPath: "/healthcheck",
 *     healthCheckPort: 9999,
 *     healthCheckProtocol: "http",
 *     portOverrides: {
 *         endpointPort: 10,
 *         listenerPort: 60,
 *     },
 *     endpointConfigurations: [{
 *         endpoint: defaultEipAddress.ipAddress,
 *         type: "PublicIp",
 *         weight: 20,
 *     }],
 * });
 * const defaultEndpointGroups = alicloud.ga.getEndpointGroupsOutput({
 *     acceleratorId: defaultEndpointGroup.acceleratorId,
 *     ids: [defaultEndpointGroup.id],
 * });
 * export const firstGaEndpointGroupId = defaultEndpointGroups.apply(defaultEndpointGroups => defaultEndpointGroups.groups?.[0]?.id);
 * ```
 */
export function getEndpointGroupsOutput(args: GetEndpointGroupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEndpointGroupsResult> {
    return pulumi.output(args).apply((a: any) => getEndpointGroups(a, opts))
}

/**
 * A collection of arguments for invoking getEndpointGroups.
 */
export interface GetEndpointGroupsOutputArgs {
    /**
     * The ID of the Global Accelerator instance to which the endpoint group will be added.
     */
    acceleratorId: pulumi.Input<string>;
    /**
     * The endpoint group type. Default value: `default`. Valid values: `default`, `virtual`.
     */
    endpointGroupType?: pulumi.Input<string>;
    /**
     * A list of Endpoint Group IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the listener that is associated with the endpoint group.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * A regex string to filter results by Endpoint Group name.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The status of the endpoint group. Valid values: `active`, `configuring`, `creating`, `init`.
     */
    status?: pulumi.Input<string>;
}
