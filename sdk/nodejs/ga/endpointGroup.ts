// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a Global Accelerator (GA) Endpoint Group resource.
 *
 * For information about Global Accelerator (GA) Endpoint Group and how to use it, see [What is Endpoint Group](https://www.alibabacloud.com/help/en/doc-detail/153259.htm).
 *
 * > **NOTE:** Available in v1.113.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const exampleAccelerator = new alicloud.ga.Accelerator("exampleAccelerator", {
 *     duration: 1,
 *     autoUseCoupon: true,
 *     spec: "1",
 * });
 * const deBandwidthPackage = new alicloud.ga.BandwidthPackage("deBandwidthPackage", {
 *     bandwidth: "100",
 *     type: "Basic",
 *     bandwidthType: "Basic",
 *     paymentType: "PayAsYouGo",
 *     billingType: "PayBy95",
 *     ratio: 30,
 * });
 * const deBandwidthPackageAttachment = new alicloud.ga.BandwidthPackageAttachment("deBandwidthPackageAttachment", {
 *     acceleratorId: exampleAccelerator.id,
 *     bandwidthPackageId: deBandwidthPackage.id,
 * });
 * const exampleListener = new alicloud.ga.Listener("exampleListener", {
 *     acceleratorId: exampleAccelerator.id,
 *     portRanges: [{
 *         fromPort: 60,
 *         toPort: 70,
 *     }],
 * }, {
 *     dependsOn: [deBandwidthPackageAttachment],
 * });
 * const exampleEip = new alicloud.ecs.Eip("exampleEip", {
 *     bandwidth: "10",
 *     internetChargeType: "PayByBandwidth",
 * });
 * const exampleEndpointGroup = new alicloud.ga.EndpointGroup("exampleEndpointGroup", {
 *     acceleratorId: exampleAccelerator.id,
 *     endpointConfigurations: [{
 *         endpoint: exampleEip.ipAddress,
 *         type: "PublicIp",
 *         weight: "20",
 *     }],
 *     endpointGroupRegion: "cn-hangzhou",
 *     listenerId: exampleListener.id,
 * });
 * ```
 *
 * ## Import
 *
 * Ga Endpoint Group can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:ga/endpointGroup:EndpointGroup example <id>
 * ```
 */
export class EndpointGroup extends pulumi.CustomResource {
    /**
     * Get an existing EndpointGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointGroupState, opts?: pulumi.CustomResourceOptions): EndpointGroup {
        return new EndpointGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ga/endpointGroup:EndpointGroup';

    /**
     * Returns true if the given object is an instance of EndpointGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EndpointGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EndpointGroup.__pulumiType;
    }

    /**
     * The ID of the Global Accelerator instance to which the endpoint group will be added.
     */
    public readonly acceleratorId!: pulumi.Output<string>;
    /**
     * The description of the endpoint group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The endpointConfigurations of the endpoint group.
     */
    public readonly endpointConfigurations!: pulumi.Output<outputs.ga.EndpointGroupEndpointConfiguration[]>;
    /**
     * The ID of the region where the endpoint group is deployed.
     */
    public readonly endpointGroupRegion!: pulumi.Output<string>;
    /**
     * The endpoint group type. Valid values: `default`, `virtual`. Default value is `default`.
     */
    public readonly endpointGroupType!: pulumi.Output<string | undefined>;
    /**
     * The endpoint request protocol. Valid value: `HTTP`, `HTTPS`.
     */
    public readonly endpointRequestProtocol!: pulumi.Output<string | undefined>;
    /**
     * The interval between two consecutive health checks. Unit: seconds.
     */
    public readonly healthCheckIntervalSeconds!: pulumi.Output<number | undefined>;
    /**
     * The path specified as the destination of the targets for health checks.
     */
    public readonly healthCheckPath!: pulumi.Output<string | undefined>;
    /**
     * The port that is used for health checks.
     */
    public readonly healthCheckPort!: pulumi.Output<number | undefined>;
    /**
     * The protocol that is used to connect to the targets for health checks. Valid values: `http`, `https`, `tcp`.
     */
    public readonly healthCheckProtocol!: pulumi.Output<string | undefined>;
    /**
     * The ID of the listener that is associated with the endpoint group.
     */
    public readonly listenerId!: pulumi.Output<string>;
    /**
     * The name of the endpoint group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Mapping between listening port and forwarding port of boarding point.
     */
    public readonly portOverrides!: pulumi.Output<outputs.ga.EndpointGroupPortOverrides | undefined>;
    /**
     * The status of the endpoint group.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The number of consecutive failed heath checks that must occur before the endpoint is deemed unhealthy. Default value is `3`.
     */
    public readonly thresholdCount!: pulumi.Output<number | undefined>;
    /**
     * The weight of the endpoint group when the corresponding listener is associated with multiple endpoint groups.
     */
    public readonly trafficPercentage!: pulumi.Output<number | undefined>;

    /**
     * Create a EndpointGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointGroupArgs | EndpointGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EndpointGroupState | undefined;
            inputs["acceleratorId"] = state ? state.acceleratorId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["endpointConfigurations"] = state ? state.endpointConfigurations : undefined;
            inputs["endpointGroupRegion"] = state ? state.endpointGroupRegion : undefined;
            inputs["endpointGroupType"] = state ? state.endpointGroupType : undefined;
            inputs["endpointRequestProtocol"] = state ? state.endpointRequestProtocol : undefined;
            inputs["healthCheckIntervalSeconds"] = state ? state.healthCheckIntervalSeconds : undefined;
            inputs["healthCheckPath"] = state ? state.healthCheckPath : undefined;
            inputs["healthCheckPort"] = state ? state.healthCheckPort : undefined;
            inputs["healthCheckProtocol"] = state ? state.healthCheckProtocol : undefined;
            inputs["listenerId"] = state ? state.listenerId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["portOverrides"] = state ? state.portOverrides : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["thresholdCount"] = state ? state.thresholdCount : undefined;
            inputs["trafficPercentage"] = state ? state.trafficPercentage : undefined;
        } else {
            const args = argsOrState as EndpointGroupArgs | undefined;
            if ((!args || args.acceleratorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceleratorId'");
            }
            if ((!args || args.endpointConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointConfigurations'");
            }
            if ((!args || args.endpointGroupRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointGroupRegion'");
            }
            if ((!args || args.listenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            inputs["acceleratorId"] = args ? args.acceleratorId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["endpointConfigurations"] = args ? args.endpointConfigurations : undefined;
            inputs["endpointGroupRegion"] = args ? args.endpointGroupRegion : undefined;
            inputs["endpointGroupType"] = args ? args.endpointGroupType : undefined;
            inputs["endpointRequestProtocol"] = args ? args.endpointRequestProtocol : undefined;
            inputs["healthCheckIntervalSeconds"] = args ? args.healthCheckIntervalSeconds : undefined;
            inputs["healthCheckPath"] = args ? args.healthCheckPath : undefined;
            inputs["healthCheckPort"] = args ? args.healthCheckPort : undefined;
            inputs["healthCheckProtocol"] = args ? args.healthCheckProtocol : undefined;
            inputs["listenerId"] = args ? args.listenerId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["portOverrides"] = args ? args.portOverrides : undefined;
            inputs["thresholdCount"] = args ? args.thresholdCount : undefined;
            inputs["trafficPercentage"] = args ? args.trafficPercentage : undefined;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(EndpointGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EndpointGroup resources.
 */
export interface EndpointGroupState {
    /**
     * The ID of the Global Accelerator instance to which the endpoint group will be added.
     */
    readonly acceleratorId?: pulumi.Input<string>;
    /**
     * The description of the endpoint group.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The endpointConfigurations of the endpoint group.
     */
    readonly endpointConfigurations?: pulumi.Input<pulumi.Input<inputs.ga.EndpointGroupEndpointConfiguration>[]>;
    /**
     * The ID of the region where the endpoint group is deployed.
     */
    readonly endpointGroupRegion?: pulumi.Input<string>;
    /**
     * The endpoint group type. Valid values: `default`, `virtual`. Default value is `default`.
     */
    readonly endpointGroupType?: pulumi.Input<string>;
    /**
     * The endpoint request protocol. Valid value: `HTTP`, `HTTPS`.
     */
    readonly endpointRequestProtocol?: pulumi.Input<string>;
    /**
     * The interval between two consecutive health checks. Unit: seconds.
     */
    readonly healthCheckIntervalSeconds?: pulumi.Input<number>;
    /**
     * The path specified as the destination of the targets for health checks.
     */
    readonly healthCheckPath?: pulumi.Input<string>;
    /**
     * The port that is used for health checks.
     */
    readonly healthCheckPort?: pulumi.Input<number>;
    /**
     * The protocol that is used to connect to the targets for health checks. Valid values: `http`, `https`, `tcp`.
     */
    readonly healthCheckProtocol?: pulumi.Input<string>;
    /**
     * The ID of the listener that is associated with the endpoint group.
     */
    readonly listenerId?: pulumi.Input<string>;
    /**
     * The name of the endpoint group.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Mapping between listening port and forwarding port of boarding point.
     */
    readonly portOverrides?: pulumi.Input<inputs.ga.EndpointGroupPortOverrides>;
    /**
     * The status of the endpoint group.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * The number of consecutive failed heath checks that must occur before the endpoint is deemed unhealthy. Default value is `3`.
     */
    readonly thresholdCount?: pulumi.Input<number>;
    /**
     * The weight of the endpoint group when the corresponding listener is associated with multiple endpoint groups.
     */
    readonly trafficPercentage?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a EndpointGroup resource.
 */
export interface EndpointGroupArgs {
    /**
     * The ID of the Global Accelerator instance to which the endpoint group will be added.
     */
    readonly acceleratorId: pulumi.Input<string>;
    /**
     * The description of the endpoint group.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The endpointConfigurations of the endpoint group.
     */
    readonly endpointConfigurations: pulumi.Input<pulumi.Input<inputs.ga.EndpointGroupEndpointConfiguration>[]>;
    /**
     * The ID of the region where the endpoint group is deployed.
     */
    readonly endpointGroupRegion: pulumi.Input<string>;
    /**
     * The endpoint group type. Valid values: `default`, `virtual`. Default value is `default`.
     */
    readonly endpointGroupType?: pulumi.Input<string>;
    /**
     * The endpoint request protocol. Valid value: `HTTP`, `HTTPS`.
     */
    readonly endpointRequestProtocol?: pulumi.Input<string>;
    /**
     * The interval between two consecutive health checks. Unit: seconds.
     */
    readonly healthCheckIntervalSeconds?: pulumi.Input<number>;
    /**
     * The path specified as the destination of the targets for health checks.
     */
    readonly healthCheckPath?: pulumi.Input<string>;
    /**
     * The port that is used for health checks.
     */
    readonly healthCheckPort?: pulumi.Input<number>;
    /**
     * The protocol that is used to connect to the targets for health checks. Valid values: `http`, `https`, `tcp`.
     */
    readonly healthCheckProtocol?: pulumi.Input<string>;
    /**
     * The ID of the listener that is associated with the endpoint group.
     */
    readonly listenerId: pulumi.Input<string>;
    /**
     * The name of the endpoint group.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Mapping between listening port and forwarding port of boarding point.
     */
    readonly portOverrides?: pulumi.Input<inputs.ga.EndpointGroupPortOverrides>;
    /**
     * The number of consecutive failed heath checks that must occur before the endpoint is deemed unhealthy. Default value is `3`.
     */
    readonly thresholdCount?: pulumi.Input<number>;
    /**
     * The weight of the endpoint group when the corresponding listener is associated with multiple endpoint groups.
     */
    readonly trafficPercentage?: pulumi.Input<number>;
}
