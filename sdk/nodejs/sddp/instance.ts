// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Data Security Center Instance resource.
 *
 * For information about Data Security Center Instance and how to use it, see [What is Instance](https://help.aliyun.com/product/88674.html).
 *
 * > **NOTE:** Available in v1.136.0+.
 *
 * > **NOTE:** The Data Security Center Instance is not support in the international site.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.sddp.Instance("default", {
 *     paymentType: "Subscription",
 *     sddpVersion: "version_company",
 *     sdCbool: "yes",
 *     period: 1,
 *     sdc: "3",
 *     udCbool: "yes",
 *     udc: "2000",
 *     dataphin: "yes",
 * });
 * ```
 *
 * ## Import
 *
 * Data Security Center Instance can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:sddp/instance:Instance example <id>
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:sddp/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * Whether the required RAM authorization is configured.
     */
    declare public /*out*/ readonly authed: pulumi.Output<boolean>;
    /**
     * The dataphin. Valid values: `yes`,`no`.
     */
    declare public readonly dataphin: pulumi.Output<string | undefined>;
    /**
     * The dataphin count. Valid values: 1 to 20.
     */
    declare public readonly dataphinCount: pulumi.Output<string | undefined>;
    /**
     * The number of instances.
     */
    declare public /*out*/ readonly instanceNum: pulumi.Output<string>;
    /**
     * The logistics.
     */
    declare public readonly logistics: pulumi.Output<string | undefined>;
    /**
     * The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modifyType` is required when you execute a update operation.
     */
    declare public readonly modifyType: pulumi.Output<string | undefined>;
    /**
     * Whether the authorized MaxCompute (ODPS) assets.
     */
    declare public /*out*/ readonly odpsSet: pulumi.Output<boolean>;
    /**
     * Whether the authorized oss assets.
     */
    declare public /*out*/ readonly ossBucketSet: pulumi.Output<boolean>;
    /**
     * The OSS storage capacity.
     */
    declare public readonly ossSize: pulumi.Output<string>;
    /**
     * The payment type of the resource. Valid values: `Subscription`.
     */
    declare public readonly paymentType: pulumi.Output<string>;
    /**
     * The Prepaid period. Valid values: `1`, `2`, `3`, `6`,`12`,`24`.
     */
    declare public readonly period: pulumi.Output<number>;
    /**
     * Whether the authorized rds assets.
     */
    declare public /*out*/ readonly rdsSet: pulumi.Output<boolean>;
    /**
     * The remaining days of the protection period of the assets in the current login account.
     */
    declare public /*out*/ readonly remainDays: pulumi.Output<string>;
    /**
     * Automatic renewal period. **NOTE:** The `renewPeriod` is required under the condition that renewalStatus is `AutoRenewal`,
     */
    declare public readonly renewPeriod: pulumi.Output<number | undefined>;
    /**
     * Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
     */
    declare public readonly renewalStatus: pulumi.Output<string>;
    /**
     * Whether to use the database. Valid values:`yes`,`no`.
     */
    declare public readonly sdCbool: pulumi.Output<string>;
    /**
     * The number of instances.
     */
    declare public readonly sdc: pulumi.Output<string>;
    /**
     * The sddp version. Valid values: `versionAudit`,`versionCompany`,`versionDlp`.
     */
    declare public readonly sddpVersion: pulumi.Output<string>;
    /**
     * The status of the resource.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Whether to use OSS. Valid values: `yes`,`no`.
     */
    declare public readonly udCbool: pulumi.Output<string>;
    /**
     * OSS Size.
     */
    declare public readonly udc: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["authed"] = state?.authed;
            resourceInputs["dataphin"] = state?.dataphin;
            resourceInputs["dataphinCount"] = state?.dataphinCount;
            resourceInputs["instanceNum"] = state?.instanceNum;
            resourceInputs["logistics"] = state?.logistics;
            resourceInputs["modifyType"] = state?.modifyType;
            resourceInputs["odpsSet"] = state?.odpsSet;
            resourceInputs["ossBucketSet"] = state?.ossBucketSet;
            resourceInputs["ossSize"] = state?.ossSize;
            resourceInputs["paymentType"] = state?.paymentType;
            resourceInputs["period"] = state?.period;
            resourceInputs["rdsSet"] = state?.rdsSet;
            resourceInputs["remainDays"] = state?.remainDays;
            resourceInputs["renewPeriod"] = state?.renewPeriod;
            resourceInputs["renewalStatus"] = state?.renewalStatus;
            resourceInputs["sdCbool"] = state?.sdCbool;
            resourceInputs["sdc"] = state?.sdc;
            resourceInputs["sddpVersion"] = state?.sddpVersion;
            resourceInputs["status"] = state?.status;
            resourceInputs["udCbool"] = state?.udCbool;
            resourceInputs["udc"] = state?.udc;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if (args?.paymentType === undefined && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            if (args?.period === undefined && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            if (args?.sdCbool === undefined && !opts.urn) {
                throw new Error("Missing required property 'sdCbool'");
            }
            if (args?.sdc === undefined && !opts.urn) {
                throw new Error("Missing required property 'sdc'");
            }
            if (args?.sddpVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'sddpVersion'");
            }
            if (args?.udCbool === undefined && !opts.urn) {
                throw new Error("Missing required property 'udCbool'");
            }
            if (args?.udc === undefined && !opts.urn) {
                throw new Error("Missing required property 'udc'");
            }
            resourceInputs["dataphin"] = args?.dataphin;
            resourceInputs["dataphinCount"] = args?.dataphinCount;
            resourceInputs["logistics"] = args?.logistics;
            resourceInputs["modifyType"] = args?.modifyType;
            resourceInputs["ossSize"] = args?.ossSize;
            resourceInputs["paymentType"] = args?.paymentType;
            resourceInputs["period"] = args?.period;
            resourceInputs["renewPeriod"] = args?.renewPeriod;
            resourceInputs["renewalStatus"] = args?.renewalStatus;
            resourceInputs["sdCbool"] = args?.sdCbool;
            resourceInputs["sdc"] = args?.sdc;
            resourceInputs["sddpVersion"] = args?.sddpVersion;
            resourceInputs["udCbool"] = args?.udCbool;
            resourceInputs["udc"] = args?.udc;
            resourceInputs["authed"] = undefined /*out*/;
            resourceInputs["instanceNum"] = undefined /*out*/;
            resourceInputs["odpsSet"] = undefined /*out*/;
            resourceInputs["ossBucketSet"] = undefined /*out*/;
            resourceInputs["rdsSet"] = undefined /*out*/;
            resourceInputs["remainDays"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * Whether the required RAM authorization is configured.
     */
    authed?: pulumi.Input<boolean>;
    /**
     * The dataphin. Valid values: `yes`,`no`.
     */
    dataphin?: pulumi.Input<string>;
    /**
     * The dataphin count. Valid values: 1 to 20.
     */
    dataphinCount?: pulumi.Input<string>;
    /**
     * The number of instances.
     */
    instanceNum?: pulumi.Input<string>;
    /**
     * The logistics.
     */
    logistics?: pulumi.Input<string>;
    /**
     * The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modifyType` is required when you execute a update operation.
     */
    modifyType?: pulumi.Input<string>;
    /**
     * Whether the authorized MaxCompute (ODPS) assets.
     */
    odpsSet?: pulumi.Input<boolean>;
    /**
     * Whether the authorized oss assets.
     */
    ossBucketSet?: pulumi.Input<boolean>;
    /**
     * The OSS storage capacity.
     */
    ossSize?: pulumi.Input<string>;
    /**
     * The payment type of the resource. Valid values: `Subscription`.
     */
    paymentType?: pulumi.Input<string>;
    /**
     * The Prepaid period. Valid values: `1`, `2`, `3`, `6`,`12`,`24`.
     */
    period?: pulumi.Input<number>;
    /**
     * Whether the authorized rds assets.
     */
    rdsSet?: pulumi.Input<boolean>;
    /**
     * The remaining days of the protection period of the assets in the current login account.
     */
    remainDays?: pulumi.Input<string>;
    /**
     * Automatic renewal period. **NOTE:** The `renewPeriod` is required under the condition that renewalStatus is `AutoRenewal`,
     */
    renewPeriod?: pulumi.Input<number>;
    /**
     * Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
     */
    renewalStatus?: pulumi.Input<string>;
    /**
     * Whether to use the database. Valid values:`yes`,`no`.
     */
    sdCbool?: pulumi.Input<string>;
    /**
     * The number of instances.
     */
    sdc?: pulumi.Input<string>;
    /**
     * The sddp version. Valid values: `versionAudit`,`versionCompany`,`versionDlp`.
     */
    sddpVersion?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * Whether to use OSS. Valid values: `yes`,`no`.
     */
    udCbool?: pulumi.Input<string>;
    /**
     * OSS Size.
     */
    udc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * The dataphin. Valid values: `yes`,`no`.
     */
    dataphin?: pulumi.Input<string>;
    /**
     * The dataphin count. Valid values: 1 to 20.
     */
    dataphinCount?: pulumi.Input<string>;
    /**
     * The logistics.
     */
    logistics?: pulumi.Input<string>;
    /**
     * The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modifyType` is required when you execute a update operation.
     */
    modifyType?: pulumi.Input<string>;
    /**
     * The OSS storage capacity.
     */
    ossSize?: pulumi.Input<string>;
    /**
     * The payment type of the resource. Valid values: `Subscription`.
     */
    paymentType: pulumi.Input<string>;
    /**
     * The Prepaid period. Valid values: `1`, `2`, `3`, `6`,`12`,`24`.
     */
    period: pulumi.Input<number>;
    /**
     * Automatic renewal period. **NOTE:** The `renewPeriod` is required under the condition that renewalStatus is `AutoRenewal`,
     */
    renewPeriod?: pulumi.Input<number>;
    /**
     * Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
     */
    renewalStatus?: pulumi.Input<string>;
    /**
     * Whether to use the database. Valid values:`yes`,`no`.
     */
    sdCbool: pulumi.Input<string>;
    /**
     * The number of instances.
     */
    sdc: pulumi.Input<string>;
    /**
     * The sddp version. Valid values: `versionAudit`,`versionCompany`,`versionDlp`.
     */
    sddpVersion: pulumi.Input<string>;
    /**
     * Whether to use OSS. Valid values: `yes`,`no`.
     */
    udCbool: pulumi.Input<string>;
    /**
     * OSS Size.
     */
    udc: pulumi.Input<string>;
}
