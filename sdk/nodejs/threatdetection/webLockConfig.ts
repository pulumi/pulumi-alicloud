// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Threat Detection Web Lock Config resource.
 *
 * For information about Threat Detection Web Lock Config and how to use it, see [What is Web Lock Config](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-modifyweblockstart).
 *
 * > **NOTE:** Available in v1.195.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const defaultAssets = alicloud.threatdetection.getAssets({
 *     machineTypes: "ecs",
 * });
 * const defaultWebLockConfig = new alicloud.threatdetection.WebLockConfig("defaultWebLockConfig", {
 *     inclusiveFileType: "php;jsp;asp;aspx;js;cgi;html;htm;xml;shtml;shtm;jpg",
 *     uuid: defaultAssets.then(defaultAssets => defaultAssets.ids?.[0]),
 *     mode: "whitelist",
 *     localBackupDir: "/usr/local/aegis/bak",
 *     dir: "/tmp/",
 *     defenceMode: "audit",
 * });
 * ```
 *
 * ## Import
 *
 * Threat Detection Web Lock Config can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:threatdetection/webLockConfig:WebLockConfig example <id>
 * ```
 */
export class WebLockConfig extends pulumi.CustomResource {
    /**
     * Get an existing WebLockConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebLockConfigState, opts?: pulumi.CustomResourceOptions): WebLockConfig {
        return new WebLockConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:threatdetection/webLockConfig:WebLockConfig';

    /**
     * Returns true if the given object is an instance of WebLockConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebLockConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebLockConfig.__pulumiType;
    }

    /**
     * Protection mode. Value:-**block**: Intercept-**audit**: Alarm
     */
    public readonly defenceMode!: pulumi.Output<string>;
    /**
     * Specify the protection directory.
     */
    public readonly dir!: pulumi.Output<string>;
    /**
     * Specify a directory address that does not require Web tamper protection (I. E. Excluded directories).> The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     */
    public readonly exclusiveDir!: pulumi.Output<string | undefined>;
    /**
     * Specify files that do not need to enable tamper protection for web pages (that is, exclude files).> The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     */
    public readonly exclusiveFile!: pulumi.Output<string | undefined>;
    /**
     * Specify the type of file that does not require Web tamper protection (that is, the type of excluded file). When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png > The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     */
    public readonly exclusiveFileType!: pulumi.Output<string | undefined>;
    /**
     * Specify the type of file that requires tamper protection. When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png> The protection Mode **Mode** is set to **whitelist**, you need to configure this parameter.
     */
    public readonly inclusiveFileType!: pulumi.Output<string | undefined>;
    /**
     * The local backup path is used to protect the safe backup of the Directory.
     */
    public readonly localBackupDir!: pulumi.Output<string>;
    /**
     * Specify the protected directory mode. Value:-**whitelist**: whitelist mode, which protects the added protected directories and file types.-**blacklist**: blacklist mode, which protects all unexcluded subdirectories, file types, and specified files under the added protection directory.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * Specify the UUID of the server to which you want to add a protection directory.> You can call the DescribeCloudCenterInstances interface to obtain the UUID of the server.
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a WebLockConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebLockConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebLockConfigArgs | WebLockConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebLockConfigState | undefined;
            resourceInputs["defenceMode"] = state ? state.defenceMode : undefined;
            resourceInputs["dir"] = state ? state.dir : undefined;
            resourceInputs["exclusiveDir"] = state ? state.exclusiveDir : undefined;
            resourceInputs["exclusiveFile"] = state ? state.exclusiveFile : undefined;
            resourceInputs["exclusiveFileType"] = state ? state.exclusiveFileType : undefined;
            resourceInputs["inclusiveFileType"] = state ? state.inclusiveFileType : undefined;
            resourceInputs["localBackupDir"] = state ? state.localBackupDir : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as WebLockConfigArgs | undefined;
            if ((!args || args.defenceMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defenceMode'");
            }
            if ((!args || args.dir === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dir'");
            }
            if ((!args || args.localBackupDir === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localBackupDir'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.uuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uuid'");
            }
            resourceInputs["defenceMode"] = args ? args.defenceMode : undefined;
            resourceInputs["dir"] = args ? args.dir : undefined;
            resourceInputs["exclusiveDir"] = args ? args.exclusiveDir : undefined;
            resourceInputs["exclusiveFile"] = args ? args.exclusiveFile : undefined;
            resourceInputs["exclusiveFileType"] = args ? args.exclusiveFileType : undefined;
            resourceInputs["inclusiveFileType"] = args ? args.inclusiveFileType : undefined;
            resourceInputs["localBackupDir"] = args ? args.localBackupDir : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebLockConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebLockConfig resources.
 */
export interface WebLockConfigState {
    /**
     * Protection mode. Value:-**block**: Intercept-**audit**: Alarm
     */
    defenceMode?: pulumi.Input<string>;
    /**
     * Specify the protection directory.
     */
    dir?: pulumi.Input<string>;
    /**
     * Specify a directory address that does not require Web tamper protection (I. E. Excluded directories).> The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     */
    exclusiveDir?: pulumi.Input<string>;
    /**
     * Specify files that do not need to enable tamper protection for web pages (that is, exclude files).> The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     */
    exclusiveFile?: pulumi.Input<string>;
    /**
     * Specify the type of file that does not require Web tamper protection (that is, the type of excluded file). When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png > The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     */
    exclusiveFileType?: pulumi.Input<string>;
    /**
     * Specify the type of file that requires tamper protection. When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png> The protection Mode **Mode** is set to **whitelist**, you need to configure this parameter.
     */
    inclusiveFileType?: pulumi.Input<string>;
    /**
     * The local backup path is used to protect the safe backup of the Directory.
     */
    localBackupDir?: pulumi.Input<string>;
    /**
     * Specify the protected directory mode. Value:-**whitelist**: whitelist mode, which protects the added protected directories and file types.-**blacklist**: blacklist mode, which protects all unexcluded subdirectories, file types, and specified files under the added protection directory.
     */
    mode?: pulumi.Input<string>;
    /**
     * Specify the UUID of the server to which you want to add a protection directory.> You can call the DescribeCloudCenterInstances interface to obtain the UUID of the server.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebLockConfig resource.
 */
export interface WebLockConfigArgs {
    /**
     * Protection mode. Value:-**block**: Intercept-**audit**: Alarm
     */
    defenceMode: pulumi.Input<string>;
    /**
     * Specify the protection directory.
     */
    dir: pulumi.Input<string>;
    /**
     * Specify a directory address that does not require Web tamper protection (I. E. Excluded directories).> The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     */
    exclusiveDir?: pulumi.Input<string>;
    /**
     * Specify files that do not need to enable tamper protection for web pages (that is, exclude files).> The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     */
    exclusiveFile?: pulumi.Input<string>;
    /**
     * Specify the type of file that does not require Web tamper protection (that is, the type of excluded file). When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png > The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     */
    exclusiveFileType?: pulumi.Input<string>;
    /**
     * Specify the type of file that requires tamper protection. When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png> The protection Mode **Mode** is set to **whitelist**, you need to configure this parameter.
     */
    inclusiveFileType?: pulumi.Input<string>;
    /**
     * The local backup path is used to protect the safe backup of the Directory.
     */
    localBackupDir: pulumi.Input<string>;
    /**
     * Specify the protected directory mode. Value:-**whitelist**: whitelist mode, which protects the added protected directories and file types.-**blacklist**: blacklist mode, which protects all unexcluded subdirectories, file types, and specified files under the added protection directory.
     */
    mode: pulumi.Input<string>;
    /**
     * Specify the UUID of the server to which you want to add a protection directory.> You can call the DescribeCloudCenterInstances interface to obtain the UUID of the server.
     */
    uuid: pulumi.Input<string>;
}
