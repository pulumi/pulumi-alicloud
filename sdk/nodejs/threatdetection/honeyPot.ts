// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Threat Detection Honey Pot resource.
 *
 * For information about Threat Detection Honey Pot and how to use it, see [What is Honey Pot](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-createhoneypot).
 *
 * > **NOTE:** Available since v1.195.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tfexample";
 * const defaultHoneypotImages = alicloud.threatdetection.getHoneypotImages({
 *     nameRegex: "^ruoyi",
 * });
 * const defaultHoneypotNode = new alicloud.threatdetection.HoneypotNode("defaultHoneypotNode", {
 *     nodeName: name,
 *     availableProbeNum: 20,
 *     securityGroupProbeIpLists: ["0.0.0.0/0"],
 * });
 * const defaultHoneyPot = new alicloud.threatdetection.HoneyPot("defaultHoneyPot", {
 *     honeypotImageName: defaultHoneypotImages.then(defaultHoneypotImages => defaultHoneypotImages.images?.[0]?.honeypotImageName),
 *     honeypotImageId: defaultHoneypotImages.then(defaultHoneypotImages => defaultHoneypotImages.images?.[0]?.honeypotImageId),
 *     honeypotName: name,
 *     nodeId: defaultHoneypotNode.id,
 * });
 * ```
 *
 * ## Import
 *
 * Threat Detection Honey Pot can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:threatdetection/honeyPot:HoneyPot example <id>
 * ```
 */
export class HoneyPot extends pulumi.CustomResource {
    /**
     * Get an existing HoneyPot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HoneyPotState, opts?: pulumi.CustomResourceOptions): HoneyPot {
        return new HoneyPot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:threatdetection/honeyPot:HoneyPot';

    /**
     * Returns true if the given object is an instance of HoneyPot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HoneyPot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HoneyPot.__pulumiType;
    }

    /**
     * Honeypot ID.
     */
    public /*out*/ readonly honeypotId!: pulumi.Output<string>;
    /**
     * The image ID of the honeypot.
     */
    public readonly honeypotImageId!: pulumi.Output<string>;
    /**
     * Honeypot mirror name.
     */
    public readonly honeypotImageName!: pulumi.Output<string>;
    /**
     * Honeypot custom name.
     */
    public readonly honeypotName!: pulumi.Output<string>;
    /**
     * The ID of the honeypot management node.
     */
    public readonly nodeId!: pulumi.Output<string>;
    /**
     * The custom parameter ID of honeypot.
     */
    public /*out*/ readonly presetId!: pulumi.Output<string>;
    /**
     * Honeypot status.
     */
    public /*out*/ readonly states!: pulumi.Output<string[]>;
    /**
     * The status of the resource.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a HoneyPot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HoneyPotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HoneyPotArgs | HoneyPotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HoneyPotState | undefined;
            resourceInputs["honeypotId"] = state ? state.honeypotId : undefined;
            resourceInputs["honeypotImageId"] = state ? state.honeypotImageId : undefined;
            resourceInputs["honeypotImageName"] = state ? state.honeypotImageName : undefined;
            resourceInputs["honeypotName"] = state ? state.honeypotName : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["presetId"] = state ? state.presetId : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as HoneyPotArgs | undefined;
            if ((!args || args.honeypotImageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'honeypotImageId'");
            }
            if ((!args || args.honeypotImageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'honeypotImageName'");
            }
            if ((!args || args.honeypotName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'honeypotName'");
            }
            if ((!args || args.nodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeId'");
            }
            resourceInputs["honeypotImageId"] = args ? args.honeypotImageId : undefined;
            resourceInputs["honeypotImageName"] = args ? args.honeypotImageName : undefined;
            resourceInputs["honeypotName"] = args ? args.honeypotName : undefined;
            resourceInputs["nodeId"] = args ? args.nodeId : undefined;
            resourceInputs["honeypotId"] = undefined /*out*/;
            resourceInputs["presetId"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HoneyPot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HoneyPot resources.
 */
export interface HoneyPotState {
    /**
     * Honeypot ID.
     */
    honeypotId?: pulumi.Input<string>;
    /**
     * The image ID of the honeypot.
     */
    honeypotImageId?: pulumi.Input<string>;
    /**
     * Honeypot mirror name.
     */
    honeypotImageName?: pulumi.Input<string>;
    /**
     * Honeypot custom name.
     */
    honeypotName?: pulumi.Input<string>;
    /**
     * The ID of the honeypot management node.
     */
    nodeId?: pulumi.Input<string>;
    /**
     * The custom parameter ID of honeypot.
     */
    presetId?: pulumi.Input<string>;
    /**
     * Honeypot status.
     */
    states?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HoneyPot resource.
 */
export interface HoneyPotArgs {
    /**
     * The image ID of the honeypot.
     */
    honeypotImageId: pulumi.Input<string>;
    /**
     * Honeypot mirror name.
     */
    honeypotImageName: pulumi.Input<string>;
    /**
     * Honeypot custom name.
     */
    honeypotName: pulumi.Input<string>;
    /**
     * The ID of the honeypot management node.
     */
    nodeId: pulumi.Input<string>;
}
