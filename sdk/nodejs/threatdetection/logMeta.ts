// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * Threat Detection Log Meta can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:threatdetection/logMeta:LogMeta example <id>
 * ```
 */
export class LogMeta extends pulumi.CustomResource {
    /**
     * Get an existing LogMeta resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogMetaState, opts?: pulumi.CustomResourceOptions): LogMeta {
        return new LogMeta(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:threatdetection/logMeta:LogMeta';

    /**
     * Returns true if the given object is an instance of LogMeta.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogMeta {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogMeta.__pulumiType;
    }

    /**
     * The name of the exclusive Logstore where logs are stored. Value:
     * - aegis-log-client: client event log
     * - aegis-log-crack: Brute Force log
     * - aegis-log-dns-query:DNS request log
     * - aegis-log-login: login log
     * - aegis-log-network: network connection log
     * - aegis-log-process: process startup log
     * - aegis-snapshot-host: account snapshot log
     * - aegis-snapshot-port: port snapshot log
     * - aegis-snapshot-process: process snapshot log
     * - local-dns: local DNS log
     * - sas-log-dns:DNS resolution log
     * - sas-log-http:WEB access log
     * - sas-log-session: Web session log
     * - sas-security-log: alarm log
     * - sas-vul-log: Vulnerability log
     * - sas-cspm-log: Cloud platform configuration check log
     * - sas-hc-log: baseline log
     * - sas-rasp-log: Application Protection Log
     * - sas-filedetect-log: file detection log
     * - sas-net-block: Network Defense Log
     */
    public readonly logMetaName!: pulumi.Output<string>;
    /**
     * The status of the resource
     */
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a LogMeta resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogMetaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogMetaArgs | LogMetaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogMetaState | undefined;
            resourceInputs["logMetaName"] = state ? state.logMetaName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as LogMetaArgs | undefined;
            if ((!args || args.logMetaName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logMetaName'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            resourceInputs["logMetaName"] = args ? args.logMetaName : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogMeta.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogMeta resources.
 */
export interface LogMetaState {
    /**
     * The name of the exclusive Logstore where logs are stored. Value:
     * - aegis-log-client: client event log
     * - aegis-log-crack: Brute Force log
     * - aegis-log-dns-query:DNS request log
     * - aegis-log-login: login log
     * - aegis-log-network: network connection log
     * - aegis-log-process: process startup log
     * - aegis-snapshot-host: account snapshot log
     * - aegis-snapshot-port: port snapshot log
     * - aegis-snapshot-process: process snapshot log
     * - local-dns: local DNS log
     * - sas-log-dns:DNS resolution log
     * - sas-log-http:WEB access log
     * - sas-log-session: Web session log
     * - sas-security-log: alarm log
     * - sas-vul-log: Vulnerability log
     * - sas-cspm-log: Cloud platform configuration check log
     * - sas-hc-log: baseline log
     * - sas-rasp-log: Application Protection Log
     * - sas-filedetect-log: file detection log
     * - sas-net-block: Network Defense Log
     */
    logMetaName?: pulumi.Input<string>;
    /**
     * The status of the resource
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogMeta resource.
 */
export interface LogMetaArgs {
    /**
     * The name of the exclusive Logstore where logs are stored. Value:
     * - aegis-log-client: client event log
     * - aegis-log-crack: Brute Force log
     * - aegis-log-dns-query:DNS request log
     * - aegis-log-login: login log
     * - aegis-log-network: network connection log
     * - aegis-log-process: process startup log
     * - aegis-snapshot-host: account snapshot log
     * - aegis-snapshot-port: port snapshot log
     * - aegis-snapshot-process: process snapshot log
     * - local-dns: local DNS log
     * - sas-log-dns:DNS resolution log
     * - sas-log-http:WEB access log
     * - sas-log-session: Web session log
     * - sas-security-log: alarm log
     * - sas-vul-log: Vulnerability log
     * - sas-cspm-log: Cloud platform configuration check log
     * - sas-hc-log: baseline log
     * - sas-rasp-log: Application Protection Log
     * - sas-filedetect-log: file detection log
     * - sas-net-block: Network Defense Log
     */
    logMetaName: pulumi.Input<string>;
    /**
     * The status of the resource
     */
    status: pulumi.Input<string>;
}
