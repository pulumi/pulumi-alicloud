// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Threat Detection Cycle Task resource.
 *
 * Configure periodic tasks in Security Center.
 *
 * For information about Threat Detection Cycle Task and how to use it, see [What is Cycle Task](https://next.api.alibabacloud.com/document/Sas/2018-12-03/CreateCycleTask).
 *
 * > **NOTE:** Available since v1.253.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new alicloud.threatdetection.CycleTask("default", {
 *     targetEndTime: 6,
 *     taskType: "VIRUS_VUL_SCHEDULE_SCAN",
 *     targetStartTime: 0,
 *     source: "console_batch",
 *     taskName: "VIRUS_VUL_SCHEDULE_SCAN",
 *     firstDateStr: 1650556800000,
 *     periodUnit: "day",
 *     intervalPeriod: 7,
 *     param: JSON.stringify({
 *         targetInfo: [
 *             {
 *                 type: "groupId",
 *                 name: "TI HOST",
 *                 target: 10597,
 *             },
 *             {
 *                 type: "groupId",
 *                 name: "expense HOST",
 *                 target: 10597,
 *             },
 *         ],
 *     }),
 *     enable: 1,
 * });
 * ```
 *
 * ## Import
 *
 * Threat Detection Cycle Task can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:threatdetection/cycleTask:CycleTask example <id>
 * ```
 */
export class CycleTask extends pulumi.CustomResource {
    /**
     * Get an existing CycleTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CycleTaskState, opts?: pulumi.CustomResourceOptions): CycleTask {
        return new CycleTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:threatdetection/cycleTask:CycleTask';

    /**
     * Returns true if the given object is an instance of CycleTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CycleTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CycleTask.__pulumiType;
    }

    /**
     * Whether to enable. Value:
     */
    declare public readonly enable: pulumi.Output<number>;
    /**
     * First execution time.
     */
    declare public readonly firstDateStr: pulumi.Output<number>;
    /**
     * Interval period.
     */
    declare public readonly intervalPeriod: pulumi.Output<number>;
    /**
     * Extended information field.
     */
    declare public readonly param: pulumi.Output<string | undefined>;
    /**
     * Unit of scan cycle, value:
     */
    declare public readonly periodUnit: pulumi.Output<string>;
    /**
     * Added the source of the task.
     */
    declare public readonly source: pulumi.Output<string | undefined>;
    /**
     * Task end time (hours).
     */
    declare public readonly targetEndTime: pulumi.Output<number>;
    /**
     * Task start time (hours).
     */
    declare public readonly targetStartTime: pulumi.Output<number>;
    /**
     * The task name.
     * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
     * - **IMAGE_SCAN**: Image scan.
     * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
     */
    declare public readonly taskName: pulumi.Output<string>;
    /**
     * The task type.
     * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
     * - **IMAGE_SCAN**: Image scan.
     * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
     */
    declare public readonly taskType: pulumi.Output<string>;

    /**
     * Create a CycleTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CycleTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CycleTaskArgs | CycleTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CycleTaskState | undefined;
            resourceInputs["enable"] = state?.enable;
            resourceInputs["firstDateStr"] = state?.firstDateStr;
            resourceInputs["intervalPeriod"] = state?.intervalPeriod;
            resourceInputs["param"] = state?.param;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["source"] = state?.source;
            resourceInputs["targetEndTime"] = state?.targetEndTime;
            resourceInputs["targetStartTime"] = state?.targetStartTime;
            resourceInputs["taskName"] = state?.taskName;
            resourceInputs["taskType"] = state?.taskType;
        } else {
            const args = argsOrState as CycleTaskArgs | undefined;
            if (args?.enable === undefined && !opts.urn) {
                throw new Error("Missing required property 'enable'");
            }
            if (args?.firstDateStr === undefined && !opts.urn) {
                throw new Error("Missing required property 'firstDateStr'");
            }
            if (args?.intervalPeriod === undefined && !opts.urn) {
                throw new Error("Missing required property 'intervalPeriod'");
            }
            if (args?.periodUnit === undefined && !opts.urn) {
                throw new Error("Missing required property 'periodUnit'");
            }
            if (args?.targetEndTime === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetEndTime'");
            }
            if (args?.targetStartTime === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetStartTime'");
            }
            if (args?.taskName === undefined && !opts.urn) {
                throw new Error("Missing required property 'taskName'");
            }
            if (args?.taskType === undefined && !opts.urn) {
                throw new Error("Missing required property 'taskType'");
            }
            resourceInputs["enable"] = args?.enable;
            resourceInputs["firstDateStr"] = args?.firstDateStr;
            resourceInputs["intervalPeriod"] = args?.intervalPeriod;
            resourceInputs["param"] = args?.param;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["source"] = args?.source;
            resourceInputs["targetEndTime"] = args?.targetEndTime;
            resourceInputs["targetStartTime"] = args?.targetStartTime;
            resourceInputs["taskName"] = args?.taskName;
            resourceInputs["taskType"] = args?.taskType;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CycleTask.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CycleTask resources.
 */
export interface CycleTaskState {
    /**
     * Whether to enable. Value:
     */
    enable?: pulumi.Input<number>;
    /**
     * First execution time.
     */
    firstDateStr?: pulumi.Input<number>;
    /**
     * Interval period.
     */
    intervalPeriod?: pulumi.Input<number>;
    /**
     * Extended information field.
     */
    param?: pulumi.Input<string>;
    /**
     * Unit of scan cycle, value:
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Added the source of the task.
     */
    source?: pulumi.Input<string>;
    /**
     * Task end time (hours).
     */
    targetEndTime?: pulumi.Input<number>;
    /**
     * Task start time (hours).
     */
    targetStartTime?: pulumi.Input<number>;
    /**
     * The task name.
     * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
     * - **IMAGE_SCAN**: Image scan.
     * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
     */
    taskName?: pulumi.Input<string>;
    /**
     * The task type.
     * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
     * - **IMAGE_SCAN**: Image scan.
     * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
     */
    taskType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CycleTask resource.
 */
export interface CycleTaskArgs {
    /**
     * Whether to enable. Value:
     */
    enable: pulumi.Input<number>;
    /**
     * First execution time.
     */
    firstDateStr: pulumi.Input<number>;
    /**
     * Interval period.
     */
    intervalPeriod: pulumi.Input<number>;
    /**
     * Extended information field.
     */
    param?: pulumi.Input<string>;
    /**
     * Unit of scan cycle, value:
     */
    periodUnit: pulumi.Input<string>;
    /**
     * Added the source of the task.
     */
    source?: pulumi.Input<string>;
    /**
     * Task end time (hours).
     */
    targetEndTime: pulumi.Input<number>;
    /**
     * Task start time (hours).
     */
    targetStartTime: pulumi.Input<number>;
    /**
     * The task name.
     * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
     * - **IMAGE_SCAN**: Image scan.
     * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
     */
    taskName: pulumi.Input<string>;
    /**
     * The task type.
     * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
     * - **IMAGE_SCAN**: Image scan.
     * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
     */
    taskType: pulumi.Input<string>;
}
