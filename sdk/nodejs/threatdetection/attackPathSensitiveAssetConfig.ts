// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Threat Detection Attack Path Sensitive Asset Config resource.
 *
 * Attack Path Sensitive Asset Configuration.
 *
 * For information about Threat Detection Attack Path Sensitive Asset Config and how to use it, see [What is Attack Path Sensitive Asset Config](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-createattackpathsensitiveassetconfig).
 *
 * > **NOTE:** Available since v1.257.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = alicloud.slb.getApplicationLoadBalancers({});
 * const defaultAttackPathSensitiveAssetConfig = new alicloud.threatdetection.AttackPathSensitiveAssetConfig("default", {attackPathAssetLists: [{
 *     instanceId: _default.then(_default => _default.balancers?.[0]?.id),
 *     vendor: 0,
 *     assetType: 1,
 *     assetSubType: 0,
 *     regionId: "cn-hangzhou",
 * }]});
 * ```
 *
 * ## Import
 *
 * Threat Detection Attack Path Sensitive Asset Config can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:threatdetection/attackPathSensitiveAssetConfig:AttackPathSensitiveAssetConfig example <id>
 * ```
 */
export class AttackPathSensitiveAssetConfig extends pulumi.CustomResource {
    /**
     * Get an existing AttackPathSensitiveAssetConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AttackPathSensitiveAssetConfigState, opts?: pulumi.CustomResourceOptions): AttackPathSensitiveAssetConfig {
        return new AttackPathSensitiveAssetConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:threatdetection/attackPathSensitiveAssetConfig:AttackPathSensitiveAssetConfig';

    /**
     * Returns true if the given object is an instance of AttackPathSensitiveAssetConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AttackPathSensitiveAssetConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AttackPathSensitiveAssetConfig.__pulumiType;
    }

    /**
     * The attack path sensitive asset configuration list. See `attackPathAssetList` below.
     */
    public readonly attackPathAssetLists!: pulumi.Output<outputs.threatdetection.AttackPathSensitiveAssetConfigAttackPathAssetList[]>;

    /**
     * Create a AttackPathSensitiveAssetConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AttackPathSensitiveAssetConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AttackPathSensitiveAssetConfigArgs | AttackPathSensitiveAssetConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AttackPathSensitiveAssetConfigState | undefined;
            resourceInputs["attackPathAssetLists"] = state ? state.attackPathAssetLists : undefined;
        } else {
            const args = argsOrState as AttackPathSensitiveAssetConfigArgs | undefined;
            if ((!args || args.attackPathAssetLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attackPathAssetLists'");
            }
            resourceInputs["attackPathAssetLists"] = args ? args.attackPathAssetLists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AttackPathSensitiveAssetConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AttackPathSensitiveAssetConfig resources.
 */
export interface AttackPathSensitiveAssetConfigState {
    /**
     * The attack path sensitive asset configuration list. See `attackPathAssetList` below.
     */
    attackPathAssetLists?: pulumi.Input<pulumi.Input<inputs.threatdetection.AttackPathSensitiveAssetConfigAttackPathAssetList>[]>;
}

/**
 * The set of arguments for constructing a AttackPathSensitiveAssetConfig resource.
 */
export interface AttackPathSensitiveAssetConfigArgs {
    /**
     * The attack path sensitive asset configuration list. See `attackPathAssetList` below.
     */
    attackPathAssetLists: pulumi.Input<pulumi.Input<inputs.threatdetection.AttackPathSensitiveAssetConfigAttackPathAssetList>[]>;
}
