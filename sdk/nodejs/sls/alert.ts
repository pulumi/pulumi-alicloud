// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a SLS Alert resource.
 *
 * For information about SLS Alert and how to use it, see [What is Alert](https://www.alibabacloud.com/help/en/doc-detail/209202.html).
 *
 * > **NOTE:** Available since v1.223.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const alertName = config.get("alertName") || "openapi-terraform-alert";
 * const projectName = config.get("projectName") || "terraform-alert-example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultINsMgl = new alicloud.log.Project("defaultINsMgl", {
 *     description: `${projectName}-${_default.result}`,
 *     projectName: `${projectName}-${_default.result}`,
 * });
 * const defaultAlert = new alicloud.sls.Alert("default", {
 *     schedule: {
 *         type: "FixedRate",
 *         runImmdiately: true,
 *         interval: "1m",
 *         timeZone: "+0800",
 *         delay: 10,
 *     },
 *     displayName: "openapi-terraform",
 *     description: "create alert",
 *     status: "ENABLED",
 *     configuration: {
 *         groupConfiguration: {
 *             fields: [
 *                 "a",
 *                 "b",
 *             ],
 *             type: "no_group",
 *         },
 *         noDataFire: false,
 *         version: "2",
 *         severityConfigurations: [{
 *             severity: 6,
 *             evalCondition: {
 *                 countCondition: "cnt > 0",
 *                 condition: "__count__ > 1",
 *             },
 *         }],
 *         labels: [{
 *             key: "a",
 *             value: "b",
 *         }],
 *         autoAnnotation: true,
 *         templateConfiguration: {
 *             lang: "cn",
 *             tokens: {
 *                 a: "b",
 *             },
 *             annotations: {
 *                 x: "y",
 *             },
 *             templateId: "sls.app.ack.autoscaler.cluster_unhealthy",
 *             type: "sys",
 *             version: "1.0",
 *         },
 *         muteUntil: 0,
 *         annotations: [{
 *             key: "x",
 *             value: "y",
 *         }],
 *         sendResolved: false,
 *         threshold: 1,
 *         sinkCms: {
 *             enabled: false,
 *         },
 *         conditionConfiguration: {
 *             condition: "cnt > 3",
 *             countCondition: "__count__ < 3",
 *         },
 *         policyConfiguration: {
 *             alertPolicyId: "sls.builtin.dynamic",
 *             actionPolicyId: "wkb-action",
 *             repeatInterval: "1m",
 *         },
 *         dashboard: "internal-alert",
 *         type: "tpl",
 *         queryLists: [
 *             {
 *                 ui: "{}",
 *                 roleArn: "acs:ram::1654218965343050:role/aliyunslsalertmonitorrole",
 *                 query: "* | select *",
 *                 timeSpanType: "Relative",
 *                 project: defaultINsMgl.projectName,
 *                 powerSqlMode: "disable",
 *                 dashboardId: "wkb-dashboard",
 *                 chartTitle: "wkb-chart",
 *                 start: "-15m",
 *                 end: "now",
 *                 storeType: "log",
 *                 store: "alert",
 *                 region: "cn-shanghai",
 *             },
 *             {
 *                 storeType: "meta",
 *                 store: "user.rds_ip_whitelist",
 *             },
 *             {
 *                 storeType: "meta",
 *                 store: "myexample1",
 *             },
 *         ],
 *         joinConfigurations: [
 *             {
 *                 type: "no_join",
 *                 condition: "aa",
 *             },
 *             {
 *                 type: "cross_join",
 *                 condition: "qqq",
 *             },
 *             {
 *                 type: "inner_join",
 *                 condition: "fefefe",
 *             },
 *         ],
 *         sinkEventStore: {
 *             enabled: true,
 *             endpoint: "cn-shanghai-intranet.log.aliyuncs.com",
 *             project: "wkb-wangren",
 *             eventStore: "alert",
 *             roleArn: "acs:ram::1654218965343050:role/aliyunlogetlrole",
 *         },
 *         sinkAlerthub: {
 *             enabled: false,
 *         },
 *         noDataSeverity: 6,
 *         tags: [
 *             "wkb",
 *             "wangren",
 *             "sls",
 *         ],
 *     },
 *     alertName: alertName,
 *     projectName: defaultINsMgl.projectName,
 * });
 * ```
 *
 * ## Import
 *
 * SLS Alert can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:sls/alert:Alert example <project_name>:<alert_name>
 * ```
 */
export class Alert extends pulumi.CustomResource {
    /**
     * Get an existing Alert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertState, opts?: pulumi.CustomResourceOptions): Alert {
        return new Alert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:sls/alert:Alert';

    /**
     * Returns true if the given object is an instance of Alert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Alert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alert.__pulumiType;
    }

    /**
     * Alert rule ID, unique under Project.
     */
    public readonly alertName!: pulumi.Output<string>;
    /**
     * Detailed configuration of alarm monitoring rules. See `configuration` below.
     */
    public readonly configuration!: pulumi.Output<outputs.sls.AlertConfiguration>;
    /**
     * Alarm rule creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<number>;
    /**
     * Compatible fields, set to empty strings.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Display name of the alarm rule.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Project Name.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * Check the frequency-dependent configuration. See `schedule` below.
     */
    public readonly schedule!: pulumi.Output<outputs.sls.AlertSchedule>;
    /**
     * Resource attribute field representing alarm status.
     */
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a Alert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertArgs | AlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertState | undefined;
            resourceInputs["alertName"] = state ? state.alertName : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as AlertArgs | undefined;
            if ((!args || args.alertName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertName'");
            }
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            resourceInputs["alertName"] = args ? args.alertName : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Alert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Alert resources.
 */
export interface AlertState {
    /**
     * Alert rule ID, unique under Project.
     */
    alertName?: pulumi.Input<string>;
    /**
     * Detailed configuration of alarm monitoring rules. See `configuration` below.
     */
    configuration?: pulumi.Input<inputs.sls.AlertConfiguration>;
    /**
     * Alarm rule creation time.
     */
    createTime?: pulumi.Input<number>;
    /**
     * Compatible fields, set to empty strings.
     */
    description?: pulumi.Input<string>;
    /**
     * Display name of the alarm rule.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Project Name.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Check the frequency-dependent configuration. See `schedule` below.
     */
    schedule?: pulumi.Input<inputs.sls.AlertSchedule>;
    /**
     * Resource attribute field representing alarm status.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Alert resource.
 */
export interface AlertArgs {
    /**
     * Alert rule ID, unique under Project.
     */
    alertName: pulumi.Input<string>;
    /**
     * Detailed configuration of alarm monitoring rules. See `configuration` below.
     */
    configuration: pulumi.Input<inputs.sls.AlertConfiguration>;
    /**
     * Compatible fields, set to empty strings.
     */
    description?: pulumi.Input<string>;
    /**
     * Display name of the alarm rule.
     */
    displayName: pulumi.Input<string>;
    /**
     * Project Name.
     */
    projectName: pulumi.Input<string>;
    /**
     * Check the frequency-dependent configuration. See `schedule` below.
     */
    schedule: pulumi.Input<inputs.sls.AlertSchedule>;
    /**
     * Resource attribute field representing alarm status.
     */
    status?: pulumi.Input<string>;
}
