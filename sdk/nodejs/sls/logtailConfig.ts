// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Log Service (SLS) Logtail Config resource.
 *
 * For information about Log Service (SLS) Logtail Config and how to use it, see [What is Logtail Config](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateConfig).
 *
 * > **NOTE:** Available since v1.259.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const _default = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tfaccsls62147";
 * const projectName = config.get("projectName") || "project-for-logtail-terraform";
 * const defaultuA28zS = new alicloud.log.Project("defaultuA28zS", {projectName: projectName});
 * const defaultLogtailConfig = new alicloud.sls.LogtailConfig("default", {
 *     projectName: defaultuA28zS.projectName,
 *     outputDetail: {
 *         endpoint: "cn-hangzhou-intranet.log.aliyuncs.com",
 *         region: "cn-hangzhou",
 *         logstoreName: "example",
 *     },
 *     outputType: "LogService",
 *     inputDetail: JSON.stringify({
 *         adjustTimezone: false,
 *         delayAlarmBytes: 0,
 *         delaySkipBytes: 0,
 *         discardNonUtf8: false,
 *         discardUnmatch: true,
 *         dockerFile: false,
 *         enableRawLog: false,
 *         enableTag: false,
 *         fileEncoding: "utf8",
 *         filePattern: "access*.log",
 *         filterKey: ["key1"],
 *         filterRegex: ["regex1"],
 *         key: [
 *             "key1",
 *             "key2",
 *         ],
 *         localStorage: true,
 *         logBeginRegex: ".*",
 *         logPath: "/var/log/httpd",
 *         logTimezone: "",
 *         logType: "common_reg_log",
 *         maxDepth: 1000,
 *         maxSendRate: -1,
 *         mergeType: "topic",
 *         preserve: true,
 *         preserveDepth: 0,
 *         priority: 0,
 *         regex: "(w+)(s+)",
 *         sendRateExpire: 0,
 *         sensitive_keys: [],
 *         tailExisted: false,
 *         timeFormat: "%Y/%m/%d %H:%M:%S",
 *         timeKey: "time",
 *         topicFormat: "none",
 *     }),
 *     logtailConfigName: "tfaccsls62147",
 *     inputType: "file",
 * });
 * ```
 *
 * ## Import
 *
 * Log Service (SLS) Logtail Config can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:sls/logtailConfig:LogtailConfig example <project_name>:<logtail_config_name>
 * ```
 */
export class LogtailConfig extends pulumi.CustomResource {
    /**
     * Get an existing LogtailConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogtailConfigState, opts?: pulumi.CustomResourceOptions): LogtailConfig {
        return new LogtailConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:sls/logtailConfig:LogtailConfig';

    /**
     * Returns true if the given object is an instance of LogtailConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogtailConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogtailConfig.__pulumiType;
    }

    /**
     * The creation time of the resource
     */
    declare public readonly createTime: pulumi.Output<string>;
    /**
     * The detailed configuration entered by logtail.
     */
    declare public readonly inputDetail: pulumi.Output<string | undefined>;
    /**
     * Method of log entry
     */
    declare public readonly inputType: pulumi.Output<string | undefined>;
    /**
     * Last modification time, unix timestamp
     */
    declare public readonly lastModifyTime: pulumi.Output<number>;
    /**
     * Sample log
     */
    declare public readonly logSample: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    declare public readonly logtailConfigName: pulumi.Output<string>;
    /**
     * Detailed configuration of logtail output See `outputDetail` below.
     */
    declare public readonly outputDetail: pulumi.Output<outputs.sls.LogtailConfigOutputDetail | undefined>;
    /**
     * Log output mode. You can only upload data to log service.
     */
    declare public readonly outputType: pulumi.Output<string | undefined>;
    /**
     * Project name
     */
    declare public readonly projectName: pulumi.Output<string>;

    /**
     * Create a LogtailConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogtailConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogtailConfigArgs | LogtailConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogtailConfigState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["inputDetail"] = state?.inputDetail;
            resourceInputs["inputType"] = state?.inputType;
            resourceInputs["lastModifyTime"] = state?.lastModifyTime;
            resourceInputs["logSample"] = state?.logSample;
            resourceInputs["logtailConfigName"] = state?.logtailConfigName;
            resourceInputs["outputDetail"] = state?.outputDetail;
            resourceInputs["outputType"] = state?.outputType;
            resourceInputs["projectName"] = state?.projectName;
        } else {
            const args = argsOrState as LogtailConfigArgs | undefined;
            if (args?.projectName === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            resourceInputs["createTime"] = args?.createTime;
            resourceInputs["inputDetail"] = args?.inputDetail;
            resourceInputs["inputType"] = args?.inputType;
            resourceInputs["lastModifyTime"] = args?.lastModifyTime;
            resourceInputs["logSample"] = args?.logSample;
            resourceInputs["logtailConfigName"] = args?.logtailConfigName;
            resourceInputs["outputDetail"] = args?.outputDetail;
            resourceInputs["outputType"] = args?.outputType;
            resourceInputs["projectName"] = args?.projectName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogtailConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogtailConfig resources.
 */
export interface LogtailConfigState {
    /**
     * The creation time of the resource
     */
    createTime?: pulumi.Input<string>;
    /**
     * The detailed configuration entered by logtail.
     */
    inputDetail?: pulumi.Input<string>;
    /**
     * Method of log entry
     */
    inputType?: pulumi.Input<string>;
    /**
     * Last modification time, unix timestamp
     */
    lastModifyTime?: pulumi.Input<number>;
    /**
     * Sample log
     */
    logSample?: pulumi.Input<string>;
    /**
     * The name of the resource
     */
    logtailConfigName?: pulumi.Input<string>;
    /**
     * Detailed configuration of logtail output See `outputDetail` below.
     */
    outputDetail?: pulumi.Input<inputs.sls.LogtailConfigOutputDetail>;
    /**
     * Log output mode. You can only upload data to log service.
     */
    outputType?: pulumi.Input<string>;
    /**
     * Project name
     */
    projectName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogtailConfig resource.
 */
export interface LogtailConfigArgs {
    /**
     * The creation time of the resource
     */
    createTime?: pulumi.Input<string>;
    /**
     * The detailed configuration entered by logtail.
     */
    inputDetail?: pulumi.Input<string>;
    /**
     * Method of log entry
     */
    inputType?: pulumi.Input<string>;
    /**
     * Last modification time, unix timestamp
     */
    lastModifyTime?: pulumi.Input<number>;
    /**
     * Sample log
     */
    logSample?: pulumi.Input<string>;
    /**
     * The name of the resource
     */
    logtailConfigName?: pulumi.Input<string>;
    /**
     * Detailed configuration of logtail output See `outputDetail` below.
     */
    outputDetail?: pulumi.Input<inputs.sls.LogtailConfigOutputDetail>;
    /**
     * Log output mode. You can only upload data to log service.
     */
    outputType?: pulumi.Input<string>;
    /**
     * Project name
     */
    projectName: pulumi.Input<string>;
}
