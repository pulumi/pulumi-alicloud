// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a SLS Collection Policy resource.
 *
 * Orchestration policies for cloud product log collection.
 *
 * For information about SLS Collection Policy and how to use it, see [What is Collection Policy](https://www.alibabacloud.com/help/zh/sls/developer-reference/api-sls-2020-12-30-upsertcollectionpolicy).
 *
 * > **NOTE:** Available since v1.232.0.
 *
 * ## Import
 *
 * SLS Collection Policy can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:sls/collectionPolicy:CollectionPolicy example <id>
 * ```
 */
export class CollectionPolicy extends pulumi.CustomResource {
    /**
     * Get an existing CollectionPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CollectionPolicyState, opts?: pulumi.CustomResourceOptions): CollectionPolicy {
        return new CollectionPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:sls/collectionPolicy:CollectionPolicy';

    /**
     * Returns true if the given object is an instance of CollectionPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CollectionPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CollectionPolicy.__pulumiType;
    }

    /**
     * Centralized transfer configuration. See `centralizeConfig` below.
     */
    declare public readonly centralizeConfig: pulumi.Output<outputs.sls.CollectionPolicyCentralizeConfig>;
    /**
     * Whether to enable centralized Conversion. The default value is false.
     */
    declare public readonly centralizeEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Log type encoding.
     */
    declare public readonly dataCode: pulumi.Output<string>;
    /**
     * The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `dataConfig` below.
     */
    declare public readonly dataConfig: pulumi.Output<outputs.sls.CollectionPolicyDataConfig>;
    /**
     * Whether to open.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Collection rule configuration. See `policyConfig` below.
     */
    declare public readonly policyConfig: pulumi.Output<outputs.sls.CollectionPolicyPolicyConfig>;
    /**
     * The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
     */
    declare public readonly policyName: pulumi.Output<string>;
    /**
     * Product code.
     */
    declare public readonly productCode: pulumi.Output<string>;
    /**
     * For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resourceDirectory` below.
     */
    declare public readonly resourceDirectory: pulumi.Output<outputs.sls.CollectionPolicyResourceDirectory>;

    /**
     * Create a CollectionPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CollectionPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CollectionPolicyArgs | CollectionPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CollectionPolicyState | undefined;
            resourceInputs["centralizeConfig"] = state?.centralizeConfig;
            resourceInputs["centralizeEnabled"] = state?.centralizeEnabled;
            resourceInputs["dataCode"] = state?.dataCode;
            resourceInputs["dataConfig"] = state?.dataConfig;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["policyConfig"] = state?.policyConfig;
            resourceInputs["policyName"] = state?.policyName;
            resourceInputs["productCode"] = state?.productCode;
            resourceInputs["resourceDirectory"] = state?.resourceDirectory;
        } else {
            const args = argsOrState as CollectionPolicyArgs | undefined;
            if (args?.dataCode === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataCode'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.policyConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyConfig'");
            }
            if (args?.policyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            if (args?.productCode === undefined && !opts.urn) {
                throw new Error("Missing required property 'productCode'");
            }
            resourceInputs["centralizeConfig"] = args?.centralizeConfig;
            resourceInputs["centralizeEnabled"] = args?.centralizeEnabled;
            resourceInputs["dataCode"] = args?.dataCode;
            resourceInputs["dataConfig"] = args?.dataConfig;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["policyConfig"] = args?.policyConfig;
            resourceInputs["policyName"] = args?.policyName;
            resourceInputs["productCode"] = args?.productCode;
            resourceInputs["resourceDirectory"] = args?.resourceDirectory;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CollectionPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CollectionPolicy resources.
 */
export interface CollectionPolicyState {
    /**
     * Centralized transfer configuration. See `centralizeConfig` below.
     */
    centralizeConfig?: pulumi.Input<inputs.sls.CollectionPolicyCentralizeConfig>;
    /**
     * Whether to enable centralized Conversion. The default value is false.
     */
    centralizeEnabled?: pulumi.Input<boolean>;
    /**
     * Log type encoding.
     */
    dataCode?: pulumi.Input<string>;
    /**
     * The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `dataConfig` below.
     */
    dataConfig?: pulumi.Input<inputs.sls.CollectionPolicyDataConfig>;
    /**
     * Whether to open.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Collection rule configuration. See `policyConfig` below.
     */
    policyConfig?: pulumi.Input<inputs.sls.CollectionPolicyPolicyConfig>;
    /**
     * The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
     */
    policyName?: pulumi.Input<string>;
    /**
     * Product code.
     */
    productCode?: pulumi.Input<string>;
    /**
     * For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resourceDirectory` below.
     */
    resourceDirectory?: pulumi.Input<inputs.sls.CollectionPolicyResourceDirectory>;
}

/**
 * The set of arguments for constructing a CollectionPolicy resource.
 */
export interface CollectionPolicyArgs {
    /**
     * Centralized transfer configuration. See `centralizeConfig` below.
     */
    centralizeConfig?: pulumi.Input<inputs.sls.CollectionPolicyCentralizeConfig>;
    /**
     * Whether to enable centralized Conversion. The default value is false.
     */
    centralizeEnabled?: pulumi.Input<boolean>;
    /**
     * Log type encoding.
     */
    dataCode: pulumi.Input<string>;
    /**
     * The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `dataConfig` below.
     */
    dataConfig?: pulumi.Input<inputs.sls.CollectionPolicyDataConfig>;
    /**
     * Whether to open.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Collection rule configuration. See `policyConfig` below.
     */
    policyConfig: pulumi.Input<inputs.sls.CollectionPolicyPolicyConfig>;
    /**
     * The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
     */
    policyName: pulumi.Input<string>;
    /**
     * Product code.
     */
    productCode: pulumi.Input<string>;
    /**
     * For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resourceDirectory` below.
     */
    resourceDirectory?: pulumi.Input<inputs.sls.CollectionPolicyResourceDirectory>;
}
