// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides Sls Logtail Config available to the user.[What is Logtail Config](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateConfig)
 *
 * > **NOTE:** Available since v1.259.0.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const defaultInteger = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tfaccsls62147";
 * const projectName = config.get("projectName") || "project-for-logtail-terraform";
 * const defaultuA28zS = new alicloud.log.Project("defaultuA28zS", {projectName: projectName});
 * const defaultLogtailConfig = new alicloud.sls.LogtailConfig("default", {
 *     projectName: defaultuA28zS.projectName,
 *     outputDetail: {
 *         endpoint: "cn-hangzhou-intranet.log.aliyuncs.com",
 *         region: "cn-hangzhou",
 *         logstoreName: "example",
 *     },
 *     outputType: "LogService",
 *     inputDetail: JSON.stringify({
 *         adjustTimezone: false,
 *         delayAlarmBytes: 0,
 *         delaySkipBytes: 0,
 *         discardNonUtf8: false,
 *         discardUnmatch: true,
 *         dockerFile: false,
 *         enableRawLog: false,
 *         enableTag: false,
 *         fileEncoding: "utf8",
 *         filePattern: "access*.log",
 *         filterKey: ["key1"],
 *         filterRegex: ["regex1"],
 *         key: [
 *             "key1",
 *             "key2",
 *         ],
 *         localStorage: true,
 *         logBeginRegex: ".*",
 *         logPath: "/var/log/httpd",
 *         logTimezone: "",
 *         logType: "common_reg_log",
 *         maxDepth: 1000,
 *         maxSendRate: -1,
 *         mergeType: "topic",
 *         preserve: true,
 *         preserveDepth: 0,
 *         priority: 0,
 *         regex: "(w+)(s+)",
 *         sendRateExpire: 0,
 *         sensitive_keys: [],
 *         tailExisted: false,
 *         timeFormat: "%Y/%m/%d %H:%M:%S",
 *         timeKey: "time",
 *         topicFormat: "none",
 *     }),
 *     logtailConfigName: "tfaccsls62147",
 *     inputType: "file",
 * });
 * const _default = defaultLogtailConfig.logtailConfigName.apply(logtailConfigName => alicloud.sls.getLogtailConfigsOutput({
 *     logtailConfigName: logtailConfigName,
 *     logstoreName: "example",
 *     projectName: projectName,
 *     offset: 0,
 *     size: 100,
 * }));
 * export const alicloudSlsLogtailConfigExampleId = _default.apply(_default => _default.configs?.[0]?.id);
 * ```
 */
export function getLogtailConfigs(args: GetLogtailConfigsArgs, opts?: pulumi.InvokeOptions): Promise<GetLogtailConfigsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:sls/getLogtailConfigs:getLogtailConfigs", {
        "ids": args.ids,
        "logstoreName": args.logstoreName,
        "logtailConfigName": args.logtailConfigName,
        "nameRegex": args.nameRegex,
        "offset": args.offset,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "size": args.size,
    }, opts);
}

/**
 * A collection of arguments for invoking getLogtailConfigs.
 */
export interface GetLogtailConfigsArgs {
    /**
     * A list of Logtail Config IDs. The value is formulated as `<project_name>:<logtail_config_name>`.
     */
    ids?: string[];
    /**
     * Logstore name.
     */
    logstoreName: string;
    /**
     * The name of the resource
     */
    logtailConfigName?: string;
    /**
     * A regex string to filter results by Group Metric Rule name.
     */
    nameRegex?: string;
    /**
     * Query start row. The default value is 0.
     */
    offset: number;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: string;
    /**
     * Project name
     */
    projectName: string;
    /**
     * The number of rows per page set for a pagination query. The maximum value is 500.
     */
    size: number;
}

/**
 * A collection of values returned by getLogtailConfigs.
 */
export interface GetLogtailConfigsResult {
    /**
     * A list of Logtail Config Entries. Each element contains the following attributes:
     */
    readonly configs: outputs.sls.GetLogtailConfigsConfig[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A list of Logtail Config IDs.
     */
    readonly ids: string[];
    readonly logstoreName: string;
    /**
     * The name of the resource
     */
    readonly logtailConfigName?: string;
    readonly nameRegex?: string;
    /**
     * A list of name of Logtail Configs.
     */
    readonly names: string[];
    readonly offset: number;
    readonly outputFile?: string;
    readonly projectName: string;
    readonly size: number;
}
/**
 * This data source provides Sls Logtail Config available to the user.[What is Logtail Config](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateConfig)
 *
 * > **NOTE:** Available since v1.259.0.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const defaultInteger = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tfaccsls62147";
 * const projectName = config.get("projectName") || "project-for-logtail-terraform";
 * const defaultuA28zS = new alicloud.log.Project("defaultuA28zS", {projectName: projectName});
 * const defaultLogtailConfig = new alicloud.sls.LogtailConfig("default", {
 *     projectName: defaultuA28zS.projectName,
 *     outputDetail: {
 *         endpoint: "cn-hangzhou-intranet.log.aliyuncs.com",
 *         region: "cn-hangzhou",
 *         logstoreName: "example",
 *     },
 *     outputType: "LogService",
 *     inputDetail: JSON.stringify({
 *         adjustTimezone: false,
 *         delayAlarmBytes: 0,
 *         delaySkipBytes: 0,
 *         discardNonUtf8: false,
 *         discardUnmatch: true,
 *         dockerFile: false,
 *         enableRawLog: false,
 *         enableTag: false,
 *         fileEncoding: "utf8",
 *         filePattern: "access*.log",
 *         filterKey: ["key1"],
 *         filterRegex: ["regex1"],
 *         key: [
 *             "key1",
 *             "key2",
 *         ],
 *         localStorage: true,
 *         logBeginRegex: ".*",
 *         logPath: "/var/log/httpd",
 *         logTimezone: "",
 *         logType: "common_reg_log",
 *         maxDepth: 1000,
 *         maxSendRate: -1,
 *         mergeType: "topic",
 *         preserve: true,
 *         preserveDepth: 0,
 *         priority: 0,
 *         regex: "(w+)(s+)",
 *         sendRateExpire: 0,
 *         sensitive_keys: [],
 *         tailExisted: false,
 *         timeFormat: "%Y/%m/%d %H:%M:%S",
 *         timeKey: "time",
 *         topicFormat: "none",
 *     }),
 *     logtailConfigName: "tfaccsls62147",
 *     inputType: "file",
 * });
 * const _default = defaultLogtailConfig.logtailConfigName.apply(logtailConfigName => alicloud.sls.getLogtailConfigsOutput({
 *     logtailConfigName: logtailConfigName,
 *     logstoreName: "example",
 *     projectName: projectName,
 *     offset: 0,
 *     size: 100,
 * }));
 * export const alicloudSlsLogtailConfigExampleId = _default.apply(_default => _default.configs?.[0]?.id);
 * ```
 */
export function getLogtailConfigsOutput(args: GetLogtailConfigsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetLogtailConfigsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("alicloud:sls/getLogtailConfigs:getLogtailConfigs", {
        "ids": args.ids,
        "logstoreName": args.logstoreName,
        "logtailConfigName": args.logtailConfigName,
        "nameRegex": args.nameRegex,
        "offset": args.offset,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "size": args.size,
    }, opts);
}

/**
 * A collection of arguments for invoking getLogtailConfigs.
 */
export interface GetLogtailConfigsOutputArgs {
    /**
     * A list of Logtail Config IDs. The value is formulated as `<project_name>:<logtail_config_name>`.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Logstore name.
     */
    logstoreName: pulumi.Input<string>;
    /**
     * The name of the resource
     */
    logtailConfigName?: pulumi.Input<string>;
    /**
     * A regex string to filter results by Group Metric Rule name.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * Query start row. The default value is 0.
     */
    offset: pulumi.Input<number>;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: pulumi.Input<string>;
    /**
     * Project name
     */
    projectName: pulumi.Input<string>;
    /**
     * The number of rows per page set for a pagination query. The maximum value is 500.
     */
    size: pulumi.Input<number>;
}
