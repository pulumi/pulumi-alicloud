// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Log Service (SLS) Index resource.
 *
 * For information about Log Service (SLS) Index and how to use it, see [What is Index](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateIndex).
 *
 * > **NOTE:** Available since v1.260.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const logstoreName = config.get("logstoreName") || "logstore-example";
 * const projectName = config.get("projectName") || "project-for-index-terraform-example";
 * const _default = new alicloud.log.Project("default", {
 *     description: "terraform example",
 *     projectName: projectName,
 * });
 * const defaultStore = new alicloud.log.Store("default", {
 *     hotTtl: 7,
 *     retentionPeriod: 30,
 *     shardCount: 2,
 *     projectName: _default.projectName,
 *     logstoreName: logstoreName,
 * });
 * const defaultIndex = new alicloud.sls.Index("default", {
 *     line: {
 *         chn: true,
 *         caseSensitive: true,
 *         tokens: ["a"],
 *         excludeKeys: ["t"],
 *     },
 *     keys: JSON.stringify({
 *         example: {
 *             caseSensitive: false,
 *             token: [
 *                 "\n",
 *                 "\x09",
 *                 ",",
 *                 " ",
 *                 ";",
 *                 "\"",
 *                 "'",
 *                 "(",
 *                 ")",
 *                 "{",
 *                 "}",
 *                 "[",
 *                 "]",
 *                 "<",
 *                 ">",
 *                 "?",
 *                 "/",
 *                 "#",
 *                 ":",
 *             ],
 *             type: "text",
 *             doc_value: false,
 *             alias: "",
 *             chn: false,
 *         },
 *     }),
 *     logstoreName: defaultStore.logstoreName,
 *     projectName: projectName,
 * });
 * ```
 *
 * ## Import
 *
 * Log Service (SLS) Index can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:sls/index:Index example <project_name>:<logstore_name>
 * ```
 */
export class Index extends pulumi.CustomResource {
    /**
     * Get an existing Index resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IndexState, opts?: pulumi.CustomResourceOptions): Index {
        return new Index(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:sls/index:Index';

    /**
     * Returns true if the given object is an instance of Index.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Index {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Index.__pulumiType;
    }

    /**
     * Field index
     */
    declare public readonly keys: pulumi.Output<string | undefined>;
    /**
     * Full-text index See `line` below.
     */
    declare public readonly line: pulumi.Output<outputs.sls.IndexLine | undefined>;
    /**
     * Whether log clustering is enabled
     */
    declare public readonly logReduce: pulumi.Output<boolean | undefined>;
    /**
     * The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
     */
    declare public readonly logReduceBlackLists: pulumi.Output<string[] | undefined>;
    /**
     * The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
     */
    declare public readonly logReduceWhiteLists: pulumi.Output<string[] | undefined>;
    /**
     * Logstore name
     */
    declare public readonly logstoreName: pulumi.Output<string>;
    /**
     * Maximum length of statistical field
     */
    declare public readonly maxTextLen: pulumi.Output<number | undefined>;
    /**
     * Project name
     */
    declare public readonly projectName: pulumi.Output<string>;

    /**
     * Create a Index resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IndexArgs | IndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IndexState | undefined;
            resourceInputs["keys"] = state?.keys;
            resourceInputs["line"] = state?.line;
            resourceInputs["logReduce"] = state?.logReduce;
            resourceInputs["logReduceBlackLists"] = state?.logReduceBlackLists;
            resourceInputs["logReduceWhiteLists"] = state?.logReduceWhiteLists;
            resourceInputs["logstoreName"] = state?.logstoreName;
            resourceInputs["maxTextLen"] = state?.maxTextLen;
            resourceInputs["projectName"] = state?.projectName;
        } else {
            const args = argsOrState as IndexArgs | undefined;
            if (args?.logstoreName === undefined && !opts.urn) {
                throw new Error("Missing required property 'logstoreName'");
            }
            if (args?.projectName === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            resourceInputs["keys"] = args?.keys;
            resourceInputs["line"] = args?.line;
            resourceInputs["logReduce"] = args?.logReduce;
            resourceInputs["logReduceBlackLists"] = args?.logReduceBlackLists;
            resourceInputs["logReduceWhiteLists"] = args?.logReduceWhiteLists;
            resourceInputs["logstoreName"] = args?.logstoreName;
            resourceInputs["maxTextLen"] = args?.maxTextLen;
            resourceInputs["projectName"] = args?.projectName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Index.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Index resources.
 */
export interface IndexState {
    /**
     * Field index
     */
    keys?: pulumi.Input<string>;
    /**
     * Full-text index See `line` below.
     */
    line?: pulumi.Input<inputs.sls.IndexLine>;
    /**
     * Whether log clustering is enabled
     */
    logReduce?: pulumi.Input<boolean>;
    /**
     * The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
     */
    logReduceBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
     */
    logReduceWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Logstore name
     */
    logstoreName?: pulumi.Input<string>;
    /**
     * Maximum length of statistical field
     */
    maxTextLen?: pulumi.Input<number>;
    /**
     * Project name
     */
    projectName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Index resource.
 */
export interface IndexArgs {
    /**
     * Field index
     */
    keys?: pulumi.Input<string>;
    /**
     * Full-text index See `line` below.
     */
    line?: pulumi.Input<inputs.sls.IndexLine>;
    /**
     * Whether log clustering is enabled
     */
    logReduce?: pulumi.Input<boolean>;
    /**
     * The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
     */
    logReduceBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
     */
    logReduceWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Logstore name
     */
    logstoreName: pulumi.Input<string>;
    /**
     * Maximum length of statistical field
     */
    maxTextLen?: pulumi.Input<number>;
    /**
     * Project name
     */
    projectName: pulumi.Input<string>;
}
