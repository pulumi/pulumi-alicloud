// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AlertArgs, AlertState } from "./alert";
export type Alert = import("./alert").Alert;
export const Alert: typeof import("./alert").Alert = null as any;
utilities.lazyLoad(exports, ["Alert"], () => require("./alert"));

export { CollectionPolicyArgs, CollectionPolicyState } from "./collectionPolicy";
export type CollectionPolicy = import("./collectionPolicy").CollectionPolicy;
export const CollectionPolicy: typeof import("./collectionPolicy").CollectionPolicy = null as any;
utilities.lazyLoad(exports, ["CollectionPolicy"], () => require("./collectionPolicy"));

export { EtlArgs, EtlState } from "./etl";
export type Etl = import("./etl").Etl;
export const Etl: typeof import("./etl").Etl = null as any;
utilities.lazyLoad(exports, ["Etl"], () => require("./etl"));

export { GetAlertsArgs, GetAlertsResult, GetAlertsOutputArgs } from "./getAlerts";
export const getAlerts: typeof import("./getAlerts").getAlerts = null as any;
export const getAlertsOutput: typeof import("./getAlerts").getAlertsOutput = null as any;
utilities.lazyLoad(exports, ["getAlerts","getAlertsOutput"], () => require("./getAlerts"));

export { GetEtlsArgs, GetEtlsResult, GetEtlsOutputArgs } from "./getEtls";
export const getEtls: typeof import("./getEtls").getEtls = null as any;
export const getEtlsOutput: typeof import("./getEtls").getEtlsOutput = null as any;
utilities.lazyLoad(exports, ["getEtls","getEtlsOutput"], () => require("./getEtls"));

export { GetIndexsArgs, GetIndexsResult, GetIndexsOutputArgs } from "./getIndexs";
export const getIndexs: typeof import("./getIndexs").getIndexs = null as any;
export const getIndexsOutput: typeof import("./getIndexs").getIndexsOutput = null as any;
utilities.lazyLoad(exports, ["getIndexs","getIndexsOutput"], () => require("./getIndexs"));

export { GetLogtailConfigsArgs, GetLogtailConfigsResult, GetLogtailConfigsOutputArgs } from "./getLogtailConfigs";
export const getLogtailConfigs: typeof import("./getLogtailConfigs").getLogtailConfigs = null as any;
export const getLogtailConfigsOutput: typeof import("./getLogtailConfigs").getLogtailConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getLogtailConfigs","getLogtailConfigsOutput"], () => require("./getLogtailConfigs"));

export { GetMachineGroupsArgs, GetMachineGroupsResult, GetMachineGroupsOutputArgs } from "./getMachineGroups";
export const getMachineGroups: typeof import("./getMachineGroups").getMachineGroups = null as any;
export const getMachineGroupsOutput: typeof import("./getMachineGroups").getMachineGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getMachineGroups","getMachineGroupsOutput"], () => require("./getMachineGroups"));

export { IndexArgs, IndexState } from "./index_";
export type Index = import("./index_").Index;
export const Index: typeof import("./index_").Index = null as any;
utilities.lazyLoad(exports, ["Index"], () => require("./index_"));

export { LogtailConfigArgs, LogtailConfigState } from "./logtailConfig";
export type LogtailConfig = import("./logtailConfig").LogtailConfig;
export const LogtailConfig: typeof import("./logtailConfig").LogtailConfig = null as any;
utilities.lazyLoad(exports, ["LogtailConfig"], () => require("./logtailConfig"));

export { MachineGroupArgs, MachineGroupState } from "./machineGroup";
export type MachineGroup = import("./machineGroup").MachineGroup;
export const MachineGroup: typeof import("./machineGroup").MachineGroup = null as any;
utilities.lazyLoad(exports, ["MachineGroup"], () => require("./machineGroup"));

export { OssExportSinkArgs, OssExportSinkState } from "./ossExportSink";
export type OssExportSink = import("./ossExportSink").OssExportSink;
export const OssExportSink: typeof import("./ossExportSink").OssExportSink = null as any;
utilities.lazyLoad(exports, ["OssExportSink"], () => require("./ossExportSink"));

export { ScheduledSqlArgs, ScheduledSqlState } from "./scheduledSql";
export type ScheduledSql = import("./scheduledSql").ScheduledSql;
export const ScheduledSql: typeof import("./scheduledSql").ScheduledSql = null as any;
utilities.lazyLoad(exports, ["ScheduledSql"], () => require("./scheduledSql"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:sls/alert:Alert":
                return new Alert(name, <any>undefined, { urn })
            case "alicloud:sls/collectionPolicy:CollectionPolicy":
                return new CollectionPolicy(name, <any>undefined, { urn })
            case "alicloud:sls/etl:Etl":
                return new Etl(name, <any>undefined, { urn })
            case "alicloud:sls/index:Index":
                return new Index(name, <any>undefined, { urn })
            case "alicloud:sls/logtailConfig:LogtailConfig":
                return new LogtailConfig(name, <any>undefined, { urn })
            case "alicloud:sls/machineGroup:MachineGroup":
                return new MachineGroup(name, <any>undefined, { urn })
            case "alicloud:sls/ossExportSink:OssExportSink":
                return new OssExportSink(name, <any>undefined, { urn })
            case "alicloud:sls/scheduledSql:ScheduledSql":
                return new ScheduledSql(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "sls/alert", _module)
pulumi.runtime.registerResourceModule("alicloud", "sls/collectionPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "sls/etl", _module)
pulumi.runtime.registerResourceModule("alicloud", "sls/index", _module)
pulumi.runtime.registerResourceModule("alicloud", "sls/logtailConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "sls/machineGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "sls/ossExportSink", _module)
pulumi.runtime.registerResourceModule("alicloud", "sls/scheduledSql", _module)
