// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a SLS Scheduled SQL resource. Scheduled SQL task.
 *
 * For information about SLS Scheduled SQL and how to use it, see [What is Scheduled SQL](https://www.alibabacloud.com/help/zh/sls/developer-reference/api-sls-2020-12-30-createscheduledsql).
 *
 * > **NOTE:** Available since v1.224.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultKIe4KV = new alicloud.log.Project("defaultKIe4KV", {
 *     description: `${name}-${_default.result}`,
 *     projectName: `${name}-${_default.result}`,
 * });
 * const default1LI9we = new alicloud.log.Store("default1LI9we", {
 *     hotTtl: 8,
 *     retentionPeriod: 30,
 *     shardCount: 2,
 *     projectName: defaultKIe4KV.projectName,
 *     logstoreName: `${name}-${_default.result}`,
 * });
 * const defaultScheduledSql = new alicloud.sls.ScheduledSql("default", {
 *     description: "example-tf-scheduled-sql-0006",
 *     schedule: {
 *         type: "Cron",
 *         timeZone: "+0700",
 *         delay: 20,
 *         cronExpression: "0 0/1 * * *",
 *     },
 *     displayName: "example-tf-scheduled-sql-0006",
 *     scheduledSqlConfiguration: {
 *         script: "* | select * from log",
 *         sqlType: "searchQuery",
 *         destEndpoint: "ap-northeast-1.log.aliyuncs.com",
 *         destProject: "job-e2e-project-jj78kur-ap-southeast-1",
 *         sourceLogstore: default1LI9we.logstoreName,
 *         destLogstore: "example-open-api02",
 *         roleArn: "acs:ram::1395894005868720:role/aliyunlogetlrole",
 *         destRoleArn: "acs:ram::1395894005868720:role/aliyunlogetlrole",
 *         fromTimeExpr: "@m-1m",
 *         toTimeExpr: "@m",
 *         maxRunTimeInSeconds: 1800,
 *         resourcePool: "enhanced",
 *         maxRetries: 5,
 *         fromTime: 1713196800,
 *         toTime: 0,
 *         dataFormat: "log2log",
 *     },
 *     scheduledSqlName: name,
 *     project: defaultKIe4KV.projectName,
 * });
 * ```
 *
 * ## Import
 *
 * SLS Scheduled SQL can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:sls/scheduledSql:ScheduledSql example <project>:<scheduled_sql_name>
 * ```
 */
export class ScheduledSql extends pulumi.CustomResource {
    /**
     * Get an existing ScheduledSql resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduledSqlState, opts?: pulumi.CustomResourceOptions): ScheduledSql {
        return new ScheduledSql(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:sls/scheduledSql:ScheduledSql';

    /**
     * Returns true if the given object is an instance of ScheduledSql.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScheduledSql {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduledSql.__pulumiType;
    }

    /**
     * Task Description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Task Display Name.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Log project.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The scheduling type is generally not required by default. If there is a strong timing requirement, if it must be imported every Monday at 8 o'clock, cron can be used. See `schedule` below.
     */
    public readonly schedule!: pulumi.Output<outputs.sls.ScheduledSqlSchedule>;
    /**
     * Task Configuration. See `scheduledSqlConfiguration` below.
     */
    public readonly scheduledSqlConfiguration!: pulumi.Output<outputs.sls.ScheduledSqlScheduledSqlConfiguration>;
    /**
     * Timed SQL name.
     */
    public readonly scheduledSqlName!: pulumi.Output<string>;

    /**
     * Create a ScheduledSql resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduledSqlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduledSqlArgs | ScheduledSqlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduledSqlState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scheduledSqlConfiguration"] = state ? state.scheduledSqlConfiguration : undefined;
            resourceInputs["scheduledSqlName"] = state ? state.scheduledSqlName : undefined;
        } else {
            const args = argsOrState as ScheduledSqlArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            if ((!args || args.scheduledSqlConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduledSqlConfiguration'");
            }
            if ((!args || args.scheduledSqlName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduledSqlName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scheduledSqlConfiguration"] = args ? args.scheduledSqlConfiguration : undefined;
            resourceInputs["scheduledSqlName"] = args ? args.scheduledSqlName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScheduledSql.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScheduledSql resources.
 */
export interface ScheduledSqlState {
    /**
     * Task Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Task Display Name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Log project.
     */
    project?: pulumi.Input<string>;
    /**
     * The scheduling type is generally not required by default. If there is a strong timing requirement, if it must be imported every Monday at 8 o'clock, cron can be used. See `schedule` below.
     */
    schedule?: pulumi.Input<inputs.sls.ScheduledSqlSchedule>;
    /**
     * Task Configuration. See `scheduledSqlConfiguration` below.
     */
    scheduledSqlConfiguration?: pulumi.Input<inputs.sls.ScheduledSqlScheduledSqlConfiguration>;
    /**
     * Timed SQL name.
     */
    scheduledSqlName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScheduledSql resource.
 */
export interface ScheduledSqlArgs {
    /**
     * Task Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Task Display Name.
     */
    displayName: pulumi.Input<string>;
    /**
     * Log project.
     */
    project: pulumi.Input<string>;
    /**
     * The scheduling type is generally not required by default. If there is a strong timing requirement, if it must be imported every Monday at 8 o'clock, cron can be used. See `schedule` below.
     */
    schedule: pulumi.Input<inputs.sls.ScheduledSqlSchedule>;
    /**
     * Task Configuration. See `scheduledSqlConfiguration` below.
     */
    scheduledSqlConfiguration: pulumi.Input<inputs.sls.ScheduledSqlScheduledSqlConfiguration>;
    /**
     * Timed SQL name.
     */
    scheduledSqlName: pulumi.Input<string>;
}
