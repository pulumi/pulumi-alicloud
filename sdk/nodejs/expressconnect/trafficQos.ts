// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Express Connect Traffic Qos resource. Express Connect Traffic QoS Policy.
 *
 * For information about Express Connect Traffic Qos and how to use it, see [What is Traffic Qos](https://next.api.alibabacloud.com/document/Vpc/2016-04-28/CreateExpressConnectTrafficQos).
 *
 * > **NOTE:** Available since v1.224.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.expressconnect.getPhysicalConnections({
 *     nameRegex: "preserved-NODELETING",
 * });
 * const createQos = new alicloud.expressconnect.TrafficQos("createQos", {
 *     qosName: name,
 *     qosDescription: "terraform-example",
 * });
 * ```
 *
 * ## Import
 *
 * Express Connect Traffic Qos can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:expressconnect/trafficQos:TrafficQos example <id>
 * ```
 */
export class TrafficQos extends pulumi.CustomResource {
    /**
     * Get an existing TrafficQos resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficQosState, opts?: pulumi.CustomResourceOptions): TrafficQos {
        return new TrafficQos(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:expressconnect/trafficQos:TrafficQos';

    /**
     * Returns true if the given object is an instance of TrafficQos.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficQos {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficQos.__pulumiType;
    }

    /**
     * The description of the QoS policy.  The length is **0** to **256** characters and cannot start with 'http:// 'or 'https.
     */
    declare public readonly qosDescription: pulumi.Output<string | undefined>;
    /**
     * The name of the QoS policy.  The length is **0** to **128** characters and cannot start with 'http:// 'or 'https.
     */
    declare public readonly qosName: pulumi.Output<string | undefined>;
    /**
     * The status of the QoS policy. Value:
     * > **NOTE:**  QoS in the configuration state will restrict the creation, update, and deletion of most QoS policies, QoS queues, and QoS rules.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a TrafficQos resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TrafficQosArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficQosArgs | TrafficQosState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficQosState | undefined;
            resourceInputs["qosDescription"] = state?.qosDescription;
            resourceInputs["qosName"] = state?.qosName;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as TrafficQosArgs | undefined;
            resourceInputs["qosDescription"] = args?.qosDescription;
            resourceInputs["qosName"] = args?.qosName;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficQos.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficQos resources.
 */
export interface TrafficQosState {
    /**
     * The description of the QoS policy.  The length is **0** to **256** characters and cannot start with 'http:// 'or 'https.
     */
    qosDescription?: pulumi.Input<string>;
    /**
     * The name of the QoS policy.  The length is **0** to **128** characters and cannot start with 'http:// 'or 'https.
     */
    qosName?: pulumi.Input<string>;
    /**
     * The status of the QoS policy. Value:
     * > **NOTE:**  QoS in the configuration state will restrict the creation, update, and deletion of most QoS policies, QoS queues, and QoS rules.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TrafficQos resource.
 */
export interface TrafficQosArgs {
    /**
     * The description of the QoS policy.  The length is **0** to **256** characters and cannot start with 'http:// 'or 'https.
     */
    qosDescription?: pulumi.Input<string>;
    /**
     * The name of the QoS policy.  The length is **0** to **128** characters and cannot start with 'http:// 'or 'https.
     */
    qosName?: pulumi.Input<string>;
}
