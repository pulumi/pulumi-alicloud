// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Express Connect Physical Connection resource.
 *
 * For information about Express Connect Physical Connection and how to use it, see [What is Physical Connection](https://www.alibabacloud.com/help/en/express-connect/developer-reference/api-vpc-2016-04-28-createphysicalconnection-efficiency-channels).
 *
 * > **NOTE:** Available since v1.132.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const domestic = new alicloud.expressconnect.PhysicalConnection("domestic", {
 *     accessPointId: "ap-cn-hangzhou-yh-B",
 *     lineOperator: "CT",
 *     peerLocation: "example_value",
 *     physicalConnectionName: "example_value",
 *     type: "VPC",
 *     description: "my domestic connection",
 *     portType: "1000Base-LX",
 *     bandwidth: "100",
 * });
 * const international = new alicloud.expressconnect.PhysicalConnection("international", {
 *     accessPointId: "ap-sg-singpore-A",
 *     lineOperator: "Other",
 *     peerLocation: "example_value",
 *     physicalConnectionName: "example_value",
 *     type: "VPC",
 *     description: "my domestic connection",
 *     portType: "1000Base-LX",
 *     bandwidth: "100",
 * });
 * ```
 *
 * ## Import
 *
 * Express Connect Physical Connection can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:expressconnect/physicalConnection:PhysicalConnection example <id>
 * ```
 */
export class PhysicalConnection extends pulumi.CustomResource {
    /**
     * Get an existing PhysicalConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PhysicalConnectionState, opts?: pulumi.CustomResourceOptions): PhysicalConnection {
        return new PhysicalConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:expressconnect/physicalConnection:PhysicalConnection';

    /**
     * Returns true if the given object is an instance of PhysicalConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PhysicalConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PhysicalConnection.__pulumiType;
    }

    /**
     * The access point ID of the Express Connect circuit.
     */
    public readonly accessPointId!: pulumi.Output<string>;
    /**
     * The maximum bandwidth of the hosted connection.
     */
    public readonly bandwidth!: pulumi.Output<string>;
    /**
     * The circuit code of the Express Connect circuit.
     */
    public readonly circuitCode!: pulumi.Output<string | undefined>;
    /**
     * The description of the Express Connect circuit.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The connectivity provider of the Express Connect circuit. Valid values:
     * - `CT`: China Telecom.
     * - `CU`: China Unicom.
     * - `CM`: China Mobile.
     * - `CO`: Other connectivity providers in the Chinese mainland.
     * - `Equinix`: Equinix.
     * - `Other`: Other connectivity providers outside the Chinese mainland.
     */
    public readonly lineOperator!: pulumi.Output<string>;
    /**
     * The ID of the order that is placed. **Note:** `orderId` takes effect only if `status` is set to `Enabled`.
     */
    public /*out*/ readonly orderId!: pulumi.Output<string>;
    /**
     * The geographical location of the data center.
     */
    public readonly peerLocation!: pulumi.Output<string>;
    /**
     * The subscription duration. Valid values:
     * - If `pricingCycle` is set to `Month`. Valid values: `1` to `9`.
     * - If `pricingCycle` is set to `Year`. Valid values: `1` to `5`.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * The name of the Express Connect circuit.
     */
    public readonly physicalConnectionName!: pulumi.Output<string | undefined>;
    /**
     * The port type of the Express Connect circuit. Valid values:
     * - `100Base-T`: 100 Mbit/s copper Ethernet port.
     * - `1000Base-T`: 1000 Mbit/s copper Ethernet port.
     * - `1000Base-LX`: 1000 Mbit/s single-mode optical port (10 km).
     * - `10GBase-T`: 10000 Mbit/s copper Ethernet port.
     * - `10GBase-LR`: 10000 Mbit/s single-mode optical port (10 km).
     * - `40GBase-LR`: 40000 Mbit/s single-mode optical port.
     * - `100GBase-LR`: 100000 Mbit/s single-mode optical port.
     * > **NOTE:** From version 1.185.0, `portType` can be set to `40GBase-LR`, `100GBase-LR`. From version 1.230.1, `portType` cannot be modified.
     */
    public readonly portType!: pulumi.Output<string | undefined>;
    /**
     * The billing cycle of the subscription. Default value: `Month`. Valid values: `Month`, `Year`.
     * > **NOTE:** `period` and `pricingCycle` are valid only when `status` is set to `Enabled`.
     */
    public readonly pricingCycle!: pulumi.Output<string | undefined>;
    /**
     * The ID of the redundant Express Connect circuit. **NOTE:** From version 1.230.1, `redundantPhysicalConnectionId` cannot be modified.
     */
    public readonly redundantPhysicalConnectionId!: pulumi.Output<string | undefined>;
    /**
     * The status of the Express Connect circuit. Valid values: `Confirmed`, `Enabled`, `Canceled`, `Terminated`. **NOTE:** From version 1.230.1, `status` can be set to `Confirmed`. If you want to set `status` to `Enabled`, `period` must be set.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The type of Express Connect circuit. Default value: `VPC`. Valid values: `VPC`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a PhysicalConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PhysicalConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PhysicalConnectionArgs | PhysicalConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PhysicalConnectionState | undefined;
            resourceInputs["accessPointId"] = state ? state.accessPointId : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["circuitCode"] = state ? state.circuitCode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lineOperator"] = state ? state.lineOperator : undefined;
            resourceInputs["orderId"] = state ? state.orderId : undefined;
            resourceInputs["peerLocation"] = state ? state.peerLocation : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["physicalConnectionName"] = state ? state.physicalConnectionName : undefined;
            resourceInputs["portType"] = state ? state.portType : undefined;
            resourceInputs["pricingCycle"] = state ? state.pricingCycle : undefined;
            resourceInputs["redundantPhysicalConnectionId"] = state ? state.redundantPhysicalConnectionId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as PhysicalConnectionArgs | undefined;
            if ((!args || args.accessPointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessPointId'");
            }
            if ((!args || args.lineOperator === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lineOperator'");
            }
            resourceInputs["accessPointId"] = args ? args.accessPointId : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["circuitCode"] = args ? args.circuitCode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["lineOperator"] = args ? args.lineOperator : undefined;
            resourceInputs["peerLocation"] = args ? args.peerLocation : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["physicalConnectionName"] = args ? args.physicalConnectionName : undefined;
            resourceInputs["portType"] = args ? args.portType : undefined;
            resourceInputs["pricingCycle"] = args ? args.pricingCycle : undefined;
            resourceInputs["redundantPhysicalConnectionId"] = args ? args.redundantPhysicalConnectionId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["orderId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PhysicalConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PhysicalConnection resources.
 */
export interface PhysicalConnectionState {
    /**
     * The access point ID of the Express Connect circuit.
     */
    accessPointId?: pulumi.Input<string>;
    /**
     * The maximum bandwidth of the hosted connection.
     */
    bandwidth?: pulumi.Input<string>;
    /**
     * The circuit code of the Express Connect circuit.
     */
    circuitCode?: pulumi.Input<string>;
    /**
     * The description of the Express Connect circuit.
     */
    description?: pulumi.Input<string>;
    /**
     * The connectivity provider of the Express Connect circuit. Valid values:
     * - `CT`: China Telecom.
     * - `CU`: China Unicom.
     * - `CM`: China Mobile.
     * - `CO`: Other connectivity providers in the Chinese mainland.
     * - `Equinix`: Equinix.
     * - `Other`: Other connectivity providers outside the Chinese mainland.
     */
    lineOperator?: pulumi.Input<string>;
    /**
     * The ID of the order that is placed. **Note:** `orderId` takes effect only if `status` is set to `Enabled`.
     */
    orderId?: pulumi.Input<string>;
    /**
     * The geographical location of the data center.
     */
    peerLocation?: pulumi.Input<string>;
    /**
     * The subscription duration. Valid values:
     * - If `pricingCycle` is set to `Month`. Valid values: `1` to `9`.
     * - If `pricingCycle` is set to `Year`. Valid values: `1` to `5`.
     */
    period?: pulumi.Input<number>;
    /**
     * The name of the Express Connect circuit.
     */
    physicalConnectionName?: pulumi.Input<string>;
    /**
     * The port type of the Express Connect circuit. Valid values:
     * - `100Base-T`: 100 Mbit/s copper Ethernet port.
     * - `1000Base-T`: 1000 Mbit/s copper Ethernet port.
     * - `1000Base-LX`: 1000 Mbit/s single-mode optical port (10 km).
     * - `10GBase-T`: 10000 Mbit/s copper Ethernet port.
     * - `10GBase-LR`: 10000 Mbit/s single-mode optical port (10 km).
     * - `40GBase-LR`: 40000 Mbit/s single-mode optical port.
     * - `100GBase-LR`: 100000 Mbit/s single-mode optical port.
     * > **NOTE:** From version 1.185.0, `portType` can be set to `40GBase-LR`, `100GBase-LR`. From version 1.230.1, `portType` cannot be modified.
     */
    portType?: pulumi.Input<string>;
    /**
     * The billing cycle of the subscription. Default value: `Month`. Valid values: `Month`, `Year`.
     * > **NOTE:** `period` and `pricingCycle` are valid only when `status` is set to `Enabled`.
     */
    pricingCycle?: pulumi.Input<string>;
    /**
     * The ID of the redundant Express Connect circuit. **NOTE:** From version 1.230.1, `redundantPhysicalConnectionId` cannot be modified.
     */
    redundantPhysicalConnectionId?: pulumi.Input<string>;
    /**
     * The status of the Express Connect circuit. Valid values: `Confirmed`, `Enabled`, `Canceled`, `Terminated`. **NOTE:** From version 1.230.1, `status` can be set to `Confirmed`. If you want to set `status` to `Enabled`, `period` must be set.
     */
    status?: pulumi.Input<string>;
    /**
     * The type of Express Connect circuit. Default value: `VPC`. Valid values: `VPC`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PhysicalConnection resource.
 */
export interface PhysicalConnectionArgs {
    /**
     * The access point ID of the Express Connect circuit.
     */
    accessPointId: pulumi.Input<string>;
    /**
     * The maximum bandwidth of the hosted connection.
     */
    bandwidth?: pulumi.Input<string>;
    /**
     * The circuit code of the Express Connect circuit.
     */
    circuitCode?: pulumi.Input<string>;
    /**
     * The description of the Express Connect circuit.
     */
    description?: pulumi.Input<string>;
    /**
     * The connectivity provider of the Express Connect circuit. Valid values:
     * - `CT`: China Telecom.
     * - `CU`: China Unicom.
     * - `CM`: China Mobile.
     * - `CO`: Other connectivity providers in the Chinese mainland.
     * - `Equinix`: Equinix.
     * - `Other`: Other connectivity providers outside the Chinese mainland.
     */
    lineOperator: pulumi.Input<string>;
    /**
     * The geographical location of the data center.
     */
    peerLocation?: pulumi.Input<string>;
    /**
     * The subscription duration. Valid values:
     * - If `pricingCycle` is set to `Month`. Valid values: `1` to `9`.
     * - If `pricingCycle` is set to `Year`. Valid values: `1` to `5`.
     */
    period?: pulumi.Input<number>;
    /**
     * The name of the Express Connect circuit.
     */
    physicalConnectionName?: pulumi.Input<string>;
    /**
     * The port type of the Express Connect circuit. Valid values:
     * - `100Base-T`: 100 Mbit/s copper Ethernet port.
     * - `1000Base-T`: 1000 Mbit/s copper Ethernet port.
     * - `1000Base-LX`: 1000 Mbit/s single-mode optical port (10 km).
     * - `10GBase-T`: 10000 Mbit/s copper Ethernet port.
     * - `10GBase-LR`: 10000 Mbit/s single-mode optical port (10 km).
     * - `40GBase-LR`: 40000 Mbit/s single-mode optical port.
     * - `100GBase-LR`: 100000 Mbit/s single-mode optical port.
     * > **NOTE:** From version 1.185.0, `portType` can be set to `40GBase-LR`, `100GBase-LR`. From version 1.230.1, `portType` cannot be modified.
     */
    portType?: pulumi.Input<string>;
    /**
     * The billing cycle of the subscription. Default value: `Month`. Valid values: `Month`, `Year`.
     * > **NOTE:** `period` and `pricingCycle` are valid only when `status` is set to `Enabled`.
     */
    pricingCycle?: pulumi.Input<string>;
    /**
     * The ID of the redundant Express Connect circuit. **NOTE:** From version 1.230.1, `redundantPhysicalConnectionId` cannot be modified.
     */
    redundantPhysicalConnectionId?: pulumi.Input<string>;
    /**
     * The status of the Express Connect circuit. Valid values: `Confirmed`, `Enabled`, `Canceled`, `Terminated`. **NOTE:** From version 1.230.1, `status` can be set to `Confirmed`. If you want to set `status` to `Enabled`, `period` must be set.
     */
    status?: pulumi.Input<string>;
    /**
     * The type of Express Connect circuit. Default value: `VPC`. Valid values: `VPC`.
     */
    type?: pulumi.Input<string>;
}
