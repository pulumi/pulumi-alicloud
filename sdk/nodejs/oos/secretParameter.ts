// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a OOS Secret Parameter resource.
 *
 * For information about OOS Secret Parameter and how to use it, see [What is Secret Parameter](https://www.alibabacloud.com/help/en/doc-detail/183418.html).
 *
 * > **NOTE:** Available in v1.147.0+.
 *
 * ## Import
 *
 * OOS Secret Parameter can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:oos/secretParameter:SecretParameter example <secret_parameter_name>
 * ```
 */
export class SecretParameter extends pulumi.CustomResource {
    /**
     * Get an existing SecretParameter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretParameterState, opts?: pulumi.CustomResourceOptions): SecretParameter {
        return new SecretParameter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:oos/secretParameter:SecretParameter';

    /**
     * Returns true if the given object is an instance of SecretParameter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretParameter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretParameter.__pulumiType;
    }

    /**
     * The constraints of the encryption parameter. By default, this parameter is null. Valid values:
     * * `AllowedValues`: The value that is allowed for the encryption parameter. It must be an array string.
     * * `AllowedPattern`: The pattern that is allowed for the encryption parameter. It must be a regular expression.
     * * `MinLength`: The minimum length of the encryption parameter.
     * * `MaxLength`: The maximum length of the encryption parameter.
     */
    public readonly constraints!: pulumi.Output<string | undefined>;
    /**
     * The description of the encryption parameter. The description must be `1` to `200` characters in length.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The Customer Master Key (CMK) of Key Management Service (KMS) that is used to encrypt the parameter.
     */
    public readonly keyId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Resource Group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The name of the encryption parameter.  The name must be `2` to `180` characters in length, and can contain letters, digits, hyphens (-), forward slashes (/) and underscores (_). It cannot start with `ALIYUN`, `ACS`, `ALIBABA`, `ALICLOUD`, or `OOS`.
     */
    public readonly secretParameterName!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The data type of the encryption parameter. Valid values: `Secret`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The value of the encryption parameter. The value must be `1` to `4096` characters in length.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a SecretParameter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretParameterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretParameterArgs | SecretParameterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretParameterState | undefined;
            resourceInputs["constraints"] = state ? state.constraints : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["secretParameterName"] = state ? state.secretParameterName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as SecretParameterArgs | undefined;
            if ((!args || args.secretParameterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretParameterName'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["constraints"] = args ? args.constraints : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["secretParameterName"] = args ? args.secretParameterName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretParameter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretParameter resources.
 */
export interface SecretParameterState {
    /**
     * The constraints of the encryption parameter. By default, this parameter is null. Valid values:
     * * `AllowedValues`: The value that is allowed for the encryption parameter. It must be an array string.
     * * `AllowedPattern`: The pattern that is allowed for the encryption parameter. It must be a regular expression.
     * * `MinLength`: The minimum length of the encryption parameter.
     * * `MaxLength`: The maximum length of the encryption parameter.
     */
    constraints?: pulumi.Input<string>;
    /**
     * The description of the encryption parameter. The description must be `1` to `200` characters in length.
     */
    description?: pulumi.Input<string>;
    /**
     * The Customer Master Key (CMK) of Key Management Service (KMS) that is used to encrypt the parameter.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The ID of the Resource Group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The name of the encryption parameter.  The name must be `2` to `180` characters in length, and can contain letters, digits, hyphens (-), forward slashes (/) and underscores (_). It cannot start with `ALIYUN`, `ACS`, `ALIBABA`, `ALICLOUD`, or `OOS`.
     */
    secretParameterName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The data type of the encryption parameter. Valid values: `Secret`.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the encryption parameter. The value must be `1` to `4096` characters in length.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretParameter resource.
 */
export interface SecretParameterArgs {
    /**
     * The constraints of the encryption parameter. By default, this parameter is null. Valid values:
     * * `AllowedValues`: The value that is allowed for the encryption parameter. It must be an array string.
     * * `AllowedPattern`: The pattern that is allowed for the encryption parameter. It must be a regular expression.
     * * `MinLength`: The minimum length of the encryption parameter.
     * * `MaxLength`: The maximum length of the encryption parameter.
     */
    constraints?: pulumi.Input<string>;
    /**
     * The description of the encryption parameter. The description must be `1` to `200` characters in length.
     */
    description?: pulumi.Input<string>;
    /**
     * The Customer Master Key (CMK) of Key Management Service (KMS) that is used to encrypt the parameter.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The ID of the Resource Group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The name of the encryption parameter.  The name must be `2` to `180` characters in length, and can contain letters, digits, hyphens (-), forward slashes (/) and underscores (_). It cannot start with `ALIYUN`, `ACS`, `ALIBABA`, `ALICLOUD`, or `OOS`.
     */
    secretParameterName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The data type of the encryption parameter. Valid values: `Secret`.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the encryption parameter. The value must be `1` to `4096` characters in length.
     */
    value: pulumi.Input<string>;
}
