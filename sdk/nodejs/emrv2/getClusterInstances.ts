// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the Emr Cluster ecs instances of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.243.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = alicloud.resourcemanager.getResourceGroups({
 *     status: "OK",
 * });
 * const defaultGetZones = alicloud.getZones({
 *     availableInstanceType: "ecs.g7.xlarge",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: "TF-VPC",
 *     cidrBlock: "172.16.0.0/12",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "172.16.0.0/21",
 *     zoneId: defaultGetZones.then(defaultGetZones => defaultGetZones.zones?.[0]?.id),
 *     vswitchName: "TF_VSwitch",
 * });
 * const defaultEcsKeyPair = new alicloud.ecs.EcsKeyPair("default", {keyPairName: "terraform-kp"});
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {
 *     name: "TF_SECURITY_GROUP",
 *     vpcId: defaultNetwork.id,
 * });
 * const defaultRole = new alicloud.ram.Role("default", {
 *     name: "emrtf",
 *     document: `    {
 *         \\"Statement\\": [
 *         {
 *             \\"Action\\": \\"sts:AssumeRole\\",
 *             \\"Effect\\": \\"Allow\\",
 *             \\"Principal\\": {
 *             \\"Service\\": [
 *                 \\"emr.aliyuncs.com\\",
 *                 \\"ecs.aliyuncs.com\\"
 *             ]
 *             }
 *         }
 *         ],
 *         \\"Version\\": \\"1\\"
 *     }
 * `,
 *     description: "this is a role test.",
 *     force: true,
 * });
 * const defaultCluster = new alicloud.emrv2.Cluster("default", {
 *     paymentType: "PayAsYouGo",
 *     clusterType: "DATALAKE",
 *     releaseVersion: "EMR-5.10.0",
 *     clusterName: "terraform-emr-cluster-v2",
 *     deployMode: "NORMAL",
 *     securityMode: "NORMAL",
 *     applications: [
 *         "HADOOP-COMMON",
 *         "HDFS",
 *         "YARN",
 *         "HIVE",
 *         "SPARK3",
 *         "TEZ",
 *     ],
 *     applicationConfigs: [
 *         {
 *             applicationName: "HIVE",
 *             configFileName: "hivemetastore-site.xml",
 *             configItemKey: "hive.metastore.type",
 *             configItemValue: "DLF",
 *             configScope: "CLUSTER",
 *         },
 *         {
 *             applicationName: "SPARK3",
 *             configFileName: "hive-site.xml",
 *             configItemKey: "hive.metastore.type",
 *             configItemValue: "DLF",
 *             configScope: "CLUSTER",
 *         },
 *     ],
 *     nodeAttributes: [{
 *         ramRole: defaultRole.name,
 *         securityGroupId: defaultSecurityGroup.id,
 *         vpcId: defaultNetwork.id,
 *         zoneId: defaultGetZones.then(defaultGetZones => defaultGetZones.zones?.[0]?.id),
 *         keyPairName: defaultEcsKeyPair.id,
 *     }],
 *     tags: {
 *         created: "tf",
 *     },
 *     nodeGroups: [
 *         {
 *             nodeGroupType: "MASTER",
 *             nodeGroupName: "emr-master",
 *             paymentType: "PayAsYouGo",
 *             vswitchIds: [defaultSwitch.id],
 *             withPublicIp: false,
 *             instanceTypes: ["ecs.g7.xlarge"],
 *             nodeCount: 1,
 *             systemDisk: {
 *                 category: "cloud_essd",
 *                 size: 80,
 *                 count: 1,
 *             },
 *             dataDisks: [{
 *                 category: "cloud_essd",
 *                 size: 80,
 *                 count: 3,
 *             }],
 *         },
 *         {
 *             nodeGroupType: "CORE",
 *             nodeGroupName: "emr-core",
 *             paymentType: "PayAsYouGo",
 *             vswitchIds: [defaultSwitch.id],
 *             withPublicIp: false,
 *             instanceTypes: ["ecs.g7.xlarge"],
 *             nodeCount: 3,
 *             systemDisk: {
 *                 category: "cloud_essd",
 *                 size: 80,
 *                 count: 1,
 *             },
 *             dataDisks: [{
 *                 category: "cloud_essd",
 *                 size: 80,
 *                 count: 3,
 *             }],
 *         },
 *     ],
 *     resourceGroupId: _default.then(_default => _default.ids?.[0]),
 * });
 * const ids = alicloud.emrv2.getClusterInstances({});
 * export const emrv2ClusterInstancesId1 = ids.then(ids => ids.instances?.[0]?.instanceId);
 * const nodeGroupNames = alicloud.emrv2.getClusterInstances({
 *     nodeGroupNames: ["emr-core"],
 * });
 * export const emrv2ClusterInstancesId2 = nodeGroupNames.then(nodeGroupNames => nodeGroupNames.instances?.[0]?.instanceId);
 * ```
 */
export function getClusterInstances(args?: GetClusterInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterInstancesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:emrv2/getClusterInstances:getClusterInstances", {
        "clusterId": args.clusterId,
        "ids": args.ids,
        "instanceStates": args.instanceStates,
        "maxResults": args.maxResults,
        "nextToken": args.nextToken,
        "nodeGroupIds": args.nodeGroupIds,
        "nodeGroupNames": args.nodeGroupNames,
        "outputFile": args.outputFile,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getClusterInstances.
 */
export interface GetClusterInstancesArgs {
    /**
     * The emr cluster ID.
     */
    clusterId?: string;
    /**
     * A list of Cluster IDs.
     */
    ids?: string[];
    /**
     * The cluster ecs instance states.
     */
    instanceStates?: string[];
    /**
     * The max results is used to list emr cluster ecs instances for next page.
     */
    maxResults?: number;
    /**
     * The next token is used to list emr cluster ecs instances for next page.
     */
    nextToken?: string;
    /**
     * The cluster node group ids.
     */
    nodeGroupIds?: string[];
    /**
     * The cluster node group names.
     */
    nodeGroupNames?: string[];
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: string;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getClusterInstances.
 */
export interface GetClusterInstancesResult {
    readonly clusterId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A list of Cluster ecs instance IDS.
     */
    readonly ids: string[];
    readonly instanceStates?: string[];
    /**
     * A list of Emr Cluster ecs instances. Each element contains the following attributes:
     */
    readonly instances: outputs.emrv2.GetClusterInstancesInstance[];
    readonly maxResults?: number;
    /**
     * A list of Cluster ecs instance names.
     */
    readonly names: string[];
    readonly nextToken: string;
    readonly nodeGroupIds?: string[];
    readonly nodeGroupNames?: string[];
    readonly outputFile?: string;
    readonly tags?: {[key: string]: string};
    /**
     * The total count of list emr cluster ecs instances.
     */
    readonly totalCount: number;
}
/**
 * This data source provides the Emr Cluster ecs instances of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.243.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = alicloud.resourcemanager.getResourceGroups({
 *     status: "OK",
 * });
 * const defaultGetZones = alicloud.getZones({
 *     availableInstanceType: "ecs.g7.xlarge",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: "TF-VPC",
 *     cidrBlock: "172.16.0.0/12",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "172.16.0.0/21",
 *     zoneId: defaultGetZones.then(defaultGetZones => defaultGetZones.zones?.[0]?.id),
 *     vswitchName: "TF_VSwitch",
 * });
 * const defaultEcsKeyPair = new alicloud.ecs.EcsKeyPair("default", {keyPairName: "terraform-kp"});
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {
 *     name: "TF_SECURITY_GROUP",
 *     vpcId: defaultNetwork.id,
 * });
 * const defaultRole = new alicloud.ram.Role("default", {
 *     name: "emrtf",
 *     document: `    {
 *         \\"Statement\\": [
 *         {
 *             \\"Action\\": \\"sts:AssumeRole\\",
 *             \\"Effect\\": \\"Allow\\",
 *             \\"Principal\\": {
 *             \\"Service\\": [
 *                 \\"emr.aliyuncs.com\\",
 *                 \\"ecs.aliyuncs.com\\"
 *             ]
 *             }
 *         }
 *         ],
 *         \\"Version\\": \\"1\\"
 *     }
 * `,
 *     description: "this is a role test.",
 *     force: true,
 * });
 * const defaultCluster = new alicloud.emrv2.Cluster("default", {
 *     paymentType: "PayAsYouGo",
 *     clusterType: "DATALAKE",
 *     releaseVersion: "EMR-5.10.0",
 *     clusterName: "terraform-emr-cluster-v2",
 *     deployMode: "NORMAL",
 *     securityMode: "NORMAL",
 *     applications: [
 *         "HADOOP-COMMON",
 *         "HDFS",
 *         "YARN",
 *         "HIVE",
 *         "SPARK3",
 *         "TEZ",
 *     ],
 *     applicationConfigs: [
 *         {
 *             applicationName: "HIVE",
 *             configFileName: "hivemetastore-site.xml",
 *             configItemKey: "hive.metastore.type",
 *             configItemValue: "DLF",
 *             configScope: "CLUSTER",
 *         },
 *         {
 *             applicationName: "SPARK3",
 *             configFileName: "hive-site.xml",
 *             configItemKey: "hive.metastore.type",
 *             configItemValue: "DLF",
 *             configScope: "CLUSTER",
 *         },
 *     ],
 *     nodeAttributes: [{
 *         ramRole: defaultRole.name,
 *         securityGroupId: defaultSecurityGroup.id,
 *         vpcId: defaultNetwork.id,
 *         zoneId: defaultGetZones.then(defaultGetZones => defaultGetZones.zones?.[0]?.id),
 *         keyPairName: defaultEcsKeyPair.id,
 *     }],
 *     tags: {
 *         created: "tf",
 *     },
 *     nodeGroups: [
 *         {
 *             nodeGroupType: "MASTER",
 *             nodeGroupName: "emr-master",
 *             paymentType: "PayAsYouGo",
 *             vswitchIds: [defaultSwitch.id],
 *             withPublicIp: false,
 *             instanceTypes: ["ecs.g7.xlarge"],
 *             nodeCount: 1,
 *             systemDisk: {
 *                 category: "cloud_essd",
 *                 size: 80,
 *                 count: 1,
 *             },
 *             dataDisks: [{
 *                 category: "cloud_essd",
 *                 size: 80,
 *                 count: 3,
 *             }],
 *         },
 *         {
 *             nodeGroupType: "CORE",
 *             nodeGroupName: "emr-core",
 *             paymentType: "PayAsYouGo",
 *             vswitchIds: [defaultSwitch.id],
 *             withPublicIp: false,
 *             instanceTypes: ["ecs.g7.xlarge"],
 *             nodeCount: 3,
 *             systemDisk: {
 *                 category: "cloud_essd",
 *                 size: 80,
 *                 count: 1,
 *             },
 *             dataDisks: [{
 *                 category: "cloud_essd",
 *                 size: 80,
 *                 count: 3,
 *             }],
 *         },
 *     ],
 *     resourceGroupId: _default.then(_default => _default.ids?.[0]),
 * });
 * const ids = alicloud.emrv2.getClusterInstances({});
 * export const emrv2ClusterInstancesId1 = ids.then(ids => ids.instances?.[0]?.instanceId);
 * const nodeGroupNames = alicloud.emrv2.getClusterInstances({
 *     nodeGroupNames: ["emr-core"],
 * });
 * export const emrv2ClusterInstancesId2 = nodeGroupNames.then(nodeGroupNames => nodeGroupNames.instances?.[0]?.instanceId);
 * ```
 */
export function getClusterInstancesOutput(args?: GetClusterInstancesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetClusterInstancesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("alicloud:emrv2/getClusterInstances:getClusterInstances", {
        "clusterId": args.clusterId,
        "ids": args.ids,
        "instanceStates": args.instanceStates,
        "maxResults": args.maxResults,
        "nextToken": args.nextToken,
        "nodeGroupIds": args.nodeGroupIds,
        "nodeGroupNames": args.nodeGroupNames,
        "outputFile": args.outputFile,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getClusterInstances.
 */
export interface GetClusterInstancesOutputArgs {
    /**
     * The emr cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * A list of Cluster IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The cluster ecs instance states.
     */
    instanceStates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The max results is used to list emr cluster ecs instances for next page.
     */
    maxResults?: pulumi.Input<number>;
    /**
     * The next token is used to list emr cluster ecs instances for next page.
     */
    nextToken?: pulumi.Input<string>;
    /**
     * The cluster node group ids.
     */
    nodeGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The cluster node group names.
     */
    nodeGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
