// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Message Service Event Rule resource.
 *
 * For information about Message Service Event Rule and how to use it, see [What is Event Rule](https://next.api.alibabacloud.com/document/Mns-open/2022-01-19/CreateEventRule).
 *
 * > **NOTE:** Available since v1.255.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const queueName = config.get("queueName") || "tf-exampe-topic2queue";
 * const ruleName = config.get("ruleName") || "tf-exampe-topic-1";
 * const topicName = config.get("topicName") || "tf-exampe-topic2queue";
 * const createTopic = new alicloud.message.ServiceTopic("CreateTopic", {
 *     maxMessageSize: 65536,
 *     topicName: topicName,
 *     loggingEnabled: false,
 * });
 * const createQueue = new alicloud.message.ServiceQueue("CreateQueue", {
 *     delaySeconds: 2,
 *     pollingWaitSeconds: 2,
 *     messageRetentionPeriod: 566,
 *     maximumMessageSize: 1123,
 *     visibilityTimeout: 30,
 *     queueName: queueName,
 *     loggingEnabled: false,
 * });
 * const createSub = new alicloud.message.ServiceSubscription("CreateSub", {
 *     pushType: "queue",
 *     notifyStrategy: "BACKOFF_RETRY",
 *     notifyContentFormat: "SIMPLIFIED",
 *     subscriptionName: "RDK-example-sub",
 *     filterTag: "important",
 *     topicName: createTopic.topicName,
 *     endpoint: std.format({
 *         input: "acs:mns:cn-hangzhou:1511928242963727:/queues/%s",
 *         args: [createQueue.id],
 *     }).then(invoke => invoke.result),
 * });
 * const _default = new alicloud.message.ServiceEventRule("default", {
 *     eventTypes: ["ObjectCreated:PutObject"],
 *     matchRules: [[{
 *         suffix: "",
 *         matchState: "true",
 *         name: "acs:oss:cn-hangzhou:1511928242963727:accccx",
 *         prefix: "",
 *     }]],
 *     endpoint: {
 *         endpointValue: createSub.topicName,
 *         endpointType: "topic",
 *     },
 *     ruleName: ruleName,
 * });
 * ```
 *
 * ## Import
 *
 * Message Service Event Rule can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:message/serviceEventRule:ServiceEventRule example <id>
 * ```
 */
export class ServiceEventRule extends pulumi.CustomResource {
    /**
     * Get an existing ServiceEventRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceEventRuleState, opts?: pulumi.CustomResourceOptions): ServiceEventRule {
        return new ServiceEventRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:message/serviceEventRule:ServiceEventRule';

    /**
     * Returns true if the given object is an instance of ServiceEventRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceEventRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceEventRule.__pulumiType;
    }

    /**
     * DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
     * - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
     */
    public readonly deliveryMode!: pulumi.Output<string>;
    /**
     * Message Receiving Terminal Endpoint Object. See `endpoint` below.
     */
    public readonly endpoint!: pulumi.Output<outputs.message.ServiceEventRuleEndpoint | undefined>;
    /**
     * Event Type List
     */
    public readonly eventTypes!: pulumi.Output<string[]>;
    /**
     * Matching rules, or relationships between multiple rules. See `matchRules` below.
     */
    public readonly matchRules!: pulumi.Output<outputs.message.ServiceEventRuleMatchRule[][] | undefined>;
    /**
     * The event notification rule name.
     */
    public readonly ruleName!: pulumi.Output<string>;

    /**
     * Create a ServiceEventRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceEventRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceEventRuleArgs | ServiceEventRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceEventRuleState | undefined;
            resourceInputs["deliveryMode"] = state ? state.deliveryMode : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["eventTypes"] = state ? state.eventTypes : undefined;
            resourceInputs["matchRules"] = state ? state.matchRules : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
        } else {
            const args = argsOrState as ServiceEventRuleArgs | undefined;
            if ((!args || args.eventTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventTypes'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            resourceInputs["deliveryMode"] = args ? args.deliveryMode : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["eventTypes"] = args ? args.eventTypes : undefined;
            resourceInputs["matchRules"] = args ? args.matchRules : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceEventRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceEventRule resources.
 */
export interface ServiceEventRuleState {
    /**
     * DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
     * - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
     */
    deliveryMode?: pulumi.Input<string>;
    /**
     * Message Receiving Terminal Endpoint Object. See `endpoint` below.
     */
    endpoint?: pulumi.Input<inputs.message.ServiceEventRuleEndpoint>;
    /**
     * Event Type List
     */
    eventTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Matching rules, or relationships between multiple rules. See `matchRules` below.
     */
    matchRules?: pulumi.Input<pulumi.Input<pulumi.Input<inputs.message.ServiceEventRuleMatchRule>[]>[]>;
    /**
     * The event notification rule name.
     */
    ruleName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceEventRule resource.
 */
export interface ServiceEventRuleArgs {
    /**
     * DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
     * - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
     */
    deliveryMode?: pulumi.Input<string>;
    /**
     * Message Receiving Terminal Endpoint Object. See `endpoint` below.
     */
    endpoint?: pulumi.Input<inputs.message.ServiceEventRuleEndpoint>;
    /**
     * Event Type List
     */
    eventTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Matching rules, or relationships between multiple rules. See `matchRules` below.
     */
    matchRules?: pulumi.Input<pulumi.Input<pulumi.Input<inputs.message.ServiceEventRuleMatchRule>[]>[]>;
    /**
     * The event notification rule name.
     */
    ruleName: pulumi.Input<string>;
}
