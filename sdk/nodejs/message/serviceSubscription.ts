// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Message Service Subscription resource.
 *
 * For information about Message Service Subscription and how to use it, see [What is Subscription](https://www.alibabacloud.com/help/en/mns/developer-reference/api-mns-open-2022-01-19-subscribe).
 *
 * > **NOTE:** Available since v1.188.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new alicloud.message.ServiceTopic("default", {
 *     topicName: name,
 *     maxMessageSize: 16888,
 *     enableLogging: true,
 * });
 * const defaultServiceSubscription = new alicloud.message.ServiceSubscription("default", {
 *     topicName: _default.topicName,
 *     subscriptionName: name,
 *     endpoint: "http://example.com",
 *     pushType: "http",
 *     filterTag: name,
 *     notifyContentFormat: "XML",
 *     notifyStrategy: "BACKOFF_RETRY",
 * });
 * ```
 *
 * ## Import
 *
 * Message Service Subscription can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:message/serviceSubscription:ServiceSubscription example <topic_name>:<subscription_name>
 * ```
 */
export class ServiceSubscription extends pulumi.CustomResource {
    /**
     * Get an existing ServiceSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceSubscriptionState, opts?: pulumi.CustomResourceOptions): ServiceSubscription {
        return new ServiceSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:message/serviceSubscription:ServiceSubscription';

    /**
     * Returns true if the given object is an instance of ServiceSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceSubscription.__pulumiType;
    }

    /**
     * (Available since v1.244.0) The time when the subscription was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<number>;
    /**
     * The dead-letter queue policy. See `dlqPolicy` below.
     */
    declare public readonly dlqPolicy: pulumi.Output<outputs.message.ServiceSubscriptionDlqPolicy>;
    /**
     * The endpoint has three format. Available values format:
     * - `HTTP Format`: An HTTP URL that starts with http:// or https://.
     * - `Queue Format`: A queue name.
     * - `MPush Format`: An AppKey.
     * - `Sms Format`: A mobile number
     * - `Email Format`: An email address.
     */
    declare public readonly endpoint: pulumi.Output<string>;
    /**
     * The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
     */
    declare public readonly filterTag: pulumi.Output<string | undefined>;
    /**
     * The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
     */
    declare public readonly notifyContentFormat: pulumi.Output<string>;
    /**
     * The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
     * - `BACKOFF_RETRY`: retries with a fixed backoff interval.
     * - `EXPONENTIAL_DECAY_RETRY`: retries with exponential backoff.
     */
    declare public readonly notifyStrategy: pulumi.Output<string>;
    /**
     * The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
     */
    declare public readonly pushType: pulumi.Output<string>;
    /**
     * The STS RoleArn.
     */
    declare public readonly stsRoleArn: pulumi.Output<string | undefined>;
    /**
     * Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
     */
    declare public readonly subscriptionName: pulumi.Output<string>;
    /**
     * The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
     */
    declare public readonly topicName: pulumi.Output<string>;

    /**
     * Create a ServiceSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceSubscriptionArgs | ServiceSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceSubscriptionState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["dlqPolicy"] = state?.dlqPolicy;
            resourceInputs["endpoint"] = state?.endpoint;
            resourceInputs["filterTag"] = state?.filterTag;
            resourceInputs["notifyContentFormat"] = state?.notifyContentFormat;
            resourceInputs["notifyStrategy"] = state?.notifyStrategy;
            resourceInputs["pushType"] = state?.pushType;
            resourceInputs["stsRoleArn"] = state?.stsRoleArn;
            resourceInputs["subscriptionName"] = state?.subscriptionName;
            resourceInputs["topicName"] = state?.topicName;
        } else {
            const args = argsOrState as ServiceSubscriptionArgs | undefined;
            if (args?.endpoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if (args?.pushType === undefined && !opts.urn) {
                throw new Error("Missing required property 'pushType'");
            }
            if (args?.subscriptionName === undefined && !opts.urn) {
                throw new Error("Missing required property 'subscriptionName'");
            }
            if (args?.topicName === undefined && !opts.urn) {
                throw new Error("Missing required property 'topicName'");
            }
            resourceInputs["dlqPolicy"] = args?.dlqPolicy;
            resourceInputs["endpoint"] = args?.endpoint;
            resourceInputs["filterTag"] = args?.filterTag;
            resourceInputs["notifyContentFormat"] = args?.notifyContentFormat;
            resourceInputs["notifyStrategy"] = args?.notifyStrategy;
            resourceInputs["pushType"] = args?.pushType;
            resourceInputs["stsRoleArn"] = args?.stsRoleArn;
            resourceInputs["subscriptionName"] = args?.subscriptionName;
            resourceInputs["topicName"] = args?.topicName;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceSubscription.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceSubscription resources.
 */
export interface ServiceSubscriptionState {
    /**
     * (Available since v1.244.0) The time when the subscription was created.
     */
    createTime?: pulumi.Input<number>;
    /**
     * The dead-letter queue policy. See `dlqPolicy` below.
     */
    dlqPolicy?: pulumi.Input<inputs.message.ServiceSubscriptionDlqPolicy>;
    /**
     * The endpoint has three format. Available values format:
     * - `HTTP Format`: An HTTP URL that starts with http:// or https://.
     * - `Queue Format`: A queue name.
     * - `MPush Format`: An AppKey.
     * - `Sms Format`: A mobile number
     * - `Email Format`: An email address.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
     */
    filterTag?: pulumi.Input<string>;
    /**
     * The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
     */
    notifyContentFormat?: pulumi.Input<string>;
    /**
     * The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
     * - `BACKOFF_RETRY`: retries with a fixed backoff interval.
     * - `EXPONENTIAL_DECAY_RETRY`: retries with exponential backoff.
     */
    notifyStrategy?: pulumi.Input<string>;
    /**
     * The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
     */
    pushType?: pulumi.Input<string>;
    /**
     * The STS RoleArn.
     */
    stsRoleArn?: pulumi.Input<string>;
    /**
     * Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
     */
    subscriptionName?: pulumi.Input<string>;
    /**
     * The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
     */
    topicName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceSubscription resource.
 */
export interface ServiceSubscriptionArgs {
    /**
     * The dead-letter queue policy. See `dlqPolicy` below.
     */
    dlqPolicy?: pulumi.Input<inputs.message.ServiceSubscriptionDlqPolicy>;
    /**
     * The endpoint has three format. Available values format:
     * - `HTTP Format`: An HTTP URL that starts with http:// or https://.
     * - `Queue Format`: A queue name.
     * - `MPush Format`: An AppKey.
     * - `Sms Format`: A mobile number
     * - `Email Format`: An email address.
     */
    endpoint: pulumi.Input<string>;
    /**
     * The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
     */
    filterTag?: pulumi.Input<string>;
    /**
     * The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
     */
    notifyContentFormat?: pulumi.Input<string>;
    /**
     * The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
     * - `BACKOFF_RETRY`: retries with a fixed backoff interval.
     * - `EXPONENTIAL_DECAY_RETRY`: retries with exponential backoff.
     */
    notifyStrategy?: pulumi.Input<string>;
    /**
     * The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
     */
    pushType: pulumi.Input<string>;
    /**
     * The STS RoleArn.
     */
    stsRoleArn?: pulumi.Input<string>;
    /**
     * Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
     */
    subscriptionName: pulumi.Input<string>;
    /**
     * The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
     */
    topicName: pulumi.Input<string>;
}
