// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Message Service Endpoint Acl resource.
 *
 * For information about Message Service Endpoint Acl and how to use it, see [What is Endpoint Acl](https://www.alibabacloud.com/help/en/mns/developer-reference/api-mns-open-2022-01-19-authorizeendpointacl).
 *
 * > **NOTE:** Available since v1.243.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.message.ServiceEndpoint("default", {
 *     endpointEnabled: true,
 *     endpointType: "public",
 * });
 * const defaultServiceEndpointAcl = new alicloud.message.ServiceEndpointAcl("default", {
 *     cidr: "192.168.1.1/23",
 *     endpointType: _default.id,
 *     aclStrategy: "allow",
 * });
 * ```
 *
 * ## Import
 *
 * Message Service Endpoint Acl can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:message/serviceEndpointAcl:ServiceEndpointAcl example <endpoint_type>:<acl_strategy>:<cidr>
 * ```
 */
export class ServiceEndpointAcl extends pulumi.CustomResource {
    /**
     * Get an existing ServiceEndpointAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceEndpointAclState, opts?: pulumi.CustomResourceOptions): ServiceEndpointAcl {
        return new ServiceEndpointAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:message/serviceEndpointAcl:ServiceEndpointAcl';

    /**
     * Returns true if the given object is an instance of ServiceEndpointAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceEndpointAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceEndpointAcl.__pulumiType;
    }

    /**
     * The ACL policy. Valid value:
     * - allow: indicates that the current endpoint allows access from the corresponding CIDR block. (Only allow is supported)
     */
    public readonly aclStrategy!: pulumi.Output<string>;
    public readonly cidr!: pulumi.Output<string>;
    /**
     * Access point type. Value:
     * - public: indicates a public access point. (Currently only public is supported)
     */
    public readonly endpointType!: pulumi.Output<string>;

    /**
     * Create a ServiceEndpointAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceEndpointAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceEndpointAclArgs | ServiceEndpointAclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceEndpointAclState | undefined;
            resourceInputs["aclStrategy"] = state ? state.aclStrategy : undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["endpointType"] = state ? state.endpointType : undefined;
        } else {
            const args = argsOrState as ServiceEndpointAclArgs | undefined;
            if ((!args || args.aclStrategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclStrategy'");
            }
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            if ((!args || args.endpointType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointType'");
            }
            resourceInputs["aclStrategy"] = args ? args.aclStrategy : undefined;
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["endpointType"] = args ? args.endpointType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceEndpointAcl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceEndpointAcl resources.
 */
export interface ServiceEndpointAclState {
    /**
     * The ACL policy. Valid value:
     * - allow: indicates that the current endpoint allows access from the corresponding CIDR block. (Only allow is supported)
     */
    aclStrategy?: pulumi.Input<string>;
    cidr?: pulumi.Input<string>;
    /**
     * Access point type. Value:
     * - public: indicates a public access point. (Currently only public is supported)
     */
    endpointType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceEndpointAcl resource.
 */
export interface ServiceEndpointAclArgs {
    /**
     * The ACL policy. Valid value:
     * - allow: indicates that the current endpoint allows access from the corresponding CIDR block. (Only allow is supported)
     */
    aclStrategy: pulumi.Input<string>;
    cidr: pulumi.Input<string>;
    /**
     * Access point type. Value:
     * - public: indicates a public access point. (Currently only public is supported)
     */
    endpointType: pulumi.Input<string>;
}
