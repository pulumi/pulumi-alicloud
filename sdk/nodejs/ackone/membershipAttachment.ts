// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an Ack One Membership Attachment resource. Fleet Manager Membership Attachment.
 *
 * For information about Ack One Membership Attachment and how to use it, see [How to attach cluster tp hub](https://www.alibabacloud.com/help/en/ack/distributed-cloud-container-platform-for-kubernetes/developer-reference/api-adcp-2022-01-01-attachclustertohub).
 *
 * > **NOTE:** Available since v1.243.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const keyName = config.get("keyName") || "%s";
 * const enhanced = alicloud.vpc.getEnhancedNatAvailableZones({});
 * const cloudEfficiency = enhanced.then(enhanced => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: enhanced.zones?.[0]?.zoneId,
 *     cpuCoreCount: 4,
 *     memorySize: 8,
 *     kubernetesNodeRole: "Worker",
 *     systemDiskCategory: "cloud_efficiency",
 * }));
 * const _default = new alicloud.vpc.Network("default", {cidrBlock: "10.4.0.0/16"});
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: _default.id,
 *     zoneId: enhanced.then(enhanced => enhanced.zones?.[0]?.zoneId),
 * });
 * const defaultManagedKubernetes = new alicloud.cs.ManagedKubernetes("default", {
 *     clusterSpec: "ack.pro.small",
 *     vswitchIds: [defaultSwitch.id],
 *     newNatGateway: true,
 *     podCidr: std.cidrsubnet({
 *         input: "10.0.0.0/8",
 *         newbits: 8,
 *         netnum: 36,
 *     }).then(invoke => invoke.result),
 *     serviceCidr: std.cidrsubnet({
 *         input: "172.16.0.0/16",
 *         newbits: 4,
 *         netnum: 7,
 *     }).then(invoke => invoke.result),
 *     slbInternetEnabled: true,
 *     isEnterpriseSecurityGroup: true,
 * });
 * const defaultKeyPair = new alicloud.ecs.KeyPair("default", {keyPairName: keyName});
 * const defaultNodePool = new alicloud.cs.NodePool("default", {
 *     nodePoolName: name,
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [defaultSwitch.id],
 *     instanceTypes: [cloudEfficiency.then(cloudEfficiency => cloudEfficiency.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: defaultKeyPair.keyPairName,
 *     desiredSize: "1",
 * });
 * const defaultCluster = new alicloud.ackone.Cluster("default", {
 *     network: {
 *         vpcId: _default.id,
 *         vswitches: [defaultSwitch.id],
 *     },
 *     argocdEnabled: false,
 * }, {
 *     dependsOn: [defaultManagedKubernetes],
 * });
 * const defaultMembershipAttachment = new alicloud.ackone.MembershipAttachment("default", {
 *     clusterId: defaultCluster.id,
 *     subClusterId: defaultManagedKubernetes.id,
 * });
 * ```
 *
 * ## Import
 *
 * Ack One Membership Attachment can be imported using the id, which consists of cluster_id and sub_cluster_id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ackone/membershipAttachment:MembershipAttachment example <cluster_id>:<sub_cluster_id>
 * ```
 */
export class MembershipAttachment extends pulumi.CustomResource {
    /**
     * Get an existing MembershipAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MembershipAttachmentState, opts?: pulumi.CustomResourceOptions): MembershipAttachment {
        return new MembershipAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ackone/membershipAttachment:MembershipAttachment';

    /**
     * Returns true if the given object is an instance of MembershipAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MembershipAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MembershipAttachment.__pulumiType;
    }

    /**
     * The ID of the cluster to which the membership is being attached.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The ID of the member being attached to the cluster.
     */
    public readonly subClusterId!: pulumi.Output<string>;

    /**
     * Create a MembershipAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MembershipAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MembershipAttachmentArgs | MembershipAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MembershipAttachmentState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["subClusterId"] = state ? state.subClusterId : undefined;
        } else {
            const args = argsOrState as MembershipAttachmentArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.subClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subClusterId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["subClusterId"] = args ? args.subClusterId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MembershipAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MembershipAttachment resources.
 */
export interface MembershipAttachmentState {
    /**
     * The ID of the cluster to which the membership is being attached.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The ID of the member being attached to the cluster.
     */
    subClusterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MembershipAttachment resource.
 */
export interface MembershipAttachmentArgs {
    /**
     * The ID of the cluster to which the membership is being attached.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The ID of the member being attached to the cluster.
     */
    subClusterId: pulumi.Input<string>;
}
