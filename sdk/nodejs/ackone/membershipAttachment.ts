// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an Ack One Membership Attachment resource. Fleet Manager Membership Attachment.
 *
 * For information about Ack One Membership Attachment and how to use it, see [How to attach cluster tp hub](https://www.alibabacloud.com/help/en/ack/distributed-cloud-container-platform-for-kubernetes/developer-reference/api-adcp-2022-01-01-attachclustertohub).
 *
 * > **NOTE:** Available since v1.243.0.
 *
 * ## Import
 *
 * Ack One Membership Attachment can be imported using the id, which consists of cluster_id and sub_cluster_id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ackone/membershipAttachment:MembershipAttachment example <cluster_id>:<sub_cluster_id>
 * ```
 */
export class MembershipAttachment extends pulumi.CustomResource {
    /**
     * Get an existing MembershipAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MembershipAttachmentState, opts?: pulumi.CustomResourceOptions): MembershipAttachment {
        return new MembershipAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ackone/membershipAttachment:MembershipAttachment';

    /**
     * Returns true if the given object is an instance of MembershipAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MembershipAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MembershipAttachment.__pulumiType;
    }

    /**
     * The ID of the cluster to which the membership is being attached.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * The ID of the member being attached to the cluster.
     */
    declare public readonly subClusterId: pulumi.Output<string>;

    /**
     * Create a MembershipAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MembershipAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MembershipAttachmentArgs | MembershipAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MembershipAttachmentState | undefined;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["subClusterId"] = state?.subClusterId;
        } else {
            const args = argsOrState as MembershipAttachmentArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.subClusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subClusterId'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["subClusterId"] = args?.subClusterId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MembershipAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MembershipAttachment resources.
 */
export interface MembershipAttachmentState {
    /**
     * The ID of the cluster to which the membership is being attached.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The ID of the member being attached to the cluster.
     */
    subClusterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MembershipAttachment resource.
 */
export interface MembershipAttachmentArgs {
    /**
     * The ID of the cluster to which the membership is being attached.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The ID of the member being attached to the cluster.
     */
    subClusterId: pulumi.Input<string>;
}
