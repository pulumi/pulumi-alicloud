// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { FlowPipelineArgs, FlowPipelineState } from "./flowPipeline";
export type FlowPipeline = import("./flowPipeline").FlowPipeline;
export const FlowPipeline: typeof import("./flowPipeline").FlowPipeline = null as any;
utilities.lazyLoad(exports, ["FlowPipeline"], () => require("./flowPipeline"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { WorkspaceCodeSourceArgs, WorkspaceCodeSourceState } from "./workspaceCodeSource";
export type WorkspaceCodeSource = import("./workspaceCodeSource").WorkspaceCodeSource;
export const WorkspaceCodeSource: typeof import("./workspaceCodeSource").WorkspaceCodeSource = null as any;
utilities.lazyLoad(exports, ["WorkspaceCodeSource"], () => require("./workspaceCodeSource"));

export { WorkspaceDatasetArgs, WorkspaceDatasetState } from "./workspaceDataset";
export type WorkspaceDataset = import("./workspaceDataset").WorkspaceDataset;
export const WorkspaceDataset: typeof import("./workspaceDataset").WorkspaceDataset = null as any;
utilities.lazyLoad(exports, ["WorkspaceDataset"], () => require("./workspaceDataset"));

export { WorkspaceDatasetversionArgs, WorkspaceDatasetversionState } from "./workspaceDatasetversion";
export type WorkspaceDatasetversion = import("./workspaceDatasetversion").WorkspaceDatasetversion;
export const WorkspaceDatasetversion: typeof import("./workspaceDatasetversion").WorkspaceDatasetversion = null as any;
utilities.lazyLoad(exports, ["WorkspaceDatasetversion"], () => require("./workspaceDatasetversion"));

export { WorkspaceExperimentArgs, WorkspaceExperimentState } from "./workspaceExperiment";
export type WorkspaceExperiment = import("./workspaceExperiment").WorkspaceExperiment;
export const WorkspaceExperiment: typeof import("./workspaceExperiment").WorkspaceExperiment = null as any;
utilities.lazyLoad(exports, ["WorkspaceExperiment"], () => require("./workspaceExperiment"));

export { WorkspaceMemberArgs, WorkspaceMemberState } from "./workspaceMember";
export type WorkspaceMember = import("./workspaceMember").WorkspaceMember;
export const WorkspaceMember: typeof import("./workspaceMember").WorkspaceMember = null as any;
utilities.lazyLoad(exports, ["WorkspaceMember"], () => require("./workspaceMember"));

export { WorkspaceModelArgs, WorkspaceModelState } from "./workspaceModel";
export type WorkspaceModel = import("./workspaceModel").WorkspaceModel;
export const WorkspaceModel: typeof import("./workspaceModel").WorkspaceModel = null as any;
utilities.lazyLoad(exports, ["WorkspaceModel"], () => require("./workspaceModel"));

export { WorkspaceModelVersionArgs, WorkspaceModelVersionState } from "./workspaceModelVersion";
export type WorkspaceModelVersion = import("./workspaceModelVersion").WorkspaceModelVersion;
export const WorkspaceModelVersion: typeof import("./workspaceModelVersion").WorkspaceModelVersion = null as any;
utilities.lazyLoad(exports, ["WorkspaceModelVersion"], () => require("./workspaceModelVersion"));

export { WorkspaceRunArgs, WorkspaceRunState } from "./workspaceRun";
export type WorkspaceRun = import("./workspaceRun").WorkspaceRun;
export const WorkspaceRun: typeof import("./workspaceRun").WorkspaceRun = null as any;
utilities.lazyLoad(exports, ["WorkspaceRun"], () => require("./workspaceRun"));

export { WorkspaceWorkspaceArgs, WorkspaceWorkspaceState } from "./workspaceWorkspace";
export type WorkspaceWorkspace = import("./workspaceWorkspace").WorkspaceWorkspace;
export const WorkspaceWorkspace: typeof import("./workspaceWorkspace").WorkspaceWorkspace = null as any;
utilities.lazyLoad(exports, ["WorkspaceWorkspace"], () => require("./workspaceWorkspace"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:pai/flowPipeline:FlowPipeline":
                return new FlowPipeline(name, <any>undefined, { urn })
            case "alicloud:pai/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "alicloud:pai/workspaceCodeSource:WorkspaceCodeSource":
                return new WorkspaceCodeSource(name, <any>undefined, { urn })
            case "alicloud:pai/workspaceDataset:WorkspaceDataset":
                return new WorkspaceDataset(name, <any>undefined, { urn })
            case "alicloud:pai/workspaceDatasetversion:WorkspaceDatasetversion":
                return new WorkspaceDatasetversion(name, <any>undefined, { urn })
            case "alicloud:pai/workspaceExperiment:WorkspaceExperiment":
                return new WorkspaceExperiment(name, <any>undefined, { urn })
            case "alicloud:pai/workspaceMember:WorkspaceMember":
                return new WorkspaceMember(name, <any>undefined, { urn })
            case "alicloud:pai/workspaceModel:WorkspaceModel":
                return new WorkspaceModel(name, <any>undefined, { urn })
            case "alicloud:pai/workspaceModelVersion:WorkspaceModelVersion":
                return new WorkspaceModelVersion(name, <any>undefined, { urn })
            case "alicloud:pai/workspaceRun:WorkspaceRun":
                return new WorkspaceRun(name, <any>undefined, { urn })
            case "alicloud:pai/workspaceWorkspace:WorkspaceWorkspace":
                return new WorkspaceWorkspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "pai/flowPipeline", _module)
pulumi.runtime.registerResourceModule("alicloud", "pai/service", _module)
pulumi.runtime.registerResourceModule("alicloud", "pai/workspaceCodeSource", _module)
pulumi.runtime.registerResourceModule("alicloud", "pai/workspaceDataset", _module)
pulumi.runtime.registerResourceModule("alicloud", "pai/workspaceDatasetversion", _module)
pulumi.runtime.registerResourceModule("alicloud", "pai/workspaceExperiment", _module)
pulumi.runtime.registerResourceModule("alicloud", "pai/workspaceMember", _module)
pulumi.runtime.registerResourceModule("alicloud", "pai/workspaceModel", _module)
pulumi.runtime.registerResourceModule("alicloud", "pai/workspaceModelVersion", _module)
pulumi.runtime.registerResourceModule("alicloud", "pai/workspaceRun", _module)
pulumi.runtime.registerResourceModule("alicloud", "pai/workspaceWorkspace", _module)
