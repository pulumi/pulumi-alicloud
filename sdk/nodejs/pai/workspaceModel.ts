// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a PAI Workspace Model resource.
 *
 * For information about PAI Workspace Model and how to use it, see [What is Model](https://www.alibabacloud.com/help/en/pai/developer-reference/api-aiworkspace-2021-02-04-createmodel).
 *
 * > **NOTE:** Available since v1.249.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform_example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultENuC6u = new alicloud.pai.WorkspaceWorkspace("defaultENuC6u", {
 *     description: "156",
 *     displayName: name,
 *     workspaceName: `${name}_${_default.result}`,
 *     envTypes: ["prod"],
 * });
 * const defaultWorkspaceModel = new alicloud.pai.WorkspaceModel("default", {
 *     origin: "Civitai",
 *     task: "text-to-image-synthesis",
 *     modelName: name,
 *     accessibility: "PRIVATE",
 *     workspaceId: defaultENuC6u.id,
 *     modelType: "Checkpoint",
 *     labels: [{
 *         key: "base_model",
 *         value: "SD 1.5",
 *     }],
 *     orderNumber: 1,
 *     extraInfo: {
 *         test: "15",
 *     },
 *     modelDescription: "ModelDescription.",
 *     modelDoc: "https://eas-***.oss-cn-hangzhou.aliyuncs.com/s**.safetensors",
 *     domain: "aigc",
 * });
 * ```
 *
 * ## Import
 *
 * PAI Workspace Model can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:pai/workspaceModel:WorkspaceModel example <id>
 * ```
 */
export class WorkspaceModel extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceModel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceModelState, opts?: pulumi.CustomResourceOptions): WorkspaceModel {
        return new WorkspaceModel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:pai/workspaceModel:WorkspaceModel';

    /**
     * Returns true if the given object is an instance of WorkspaceModel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspaceModel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceModel.__pulumiType;
    }

    /**
     * The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
     * - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
     * - `PUBLIC`: In this workspace, it is visible to everyone.
     */
    declare public readonly accessibility: pulumi.Output<string>;
    /**
     * The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
     */
    declare public readonly domain: pulumi.Output<string | undefined>;
    /**
     * Other information about the model.
     */
    declare public readonly extraInfo: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A list of tags. See `labels` below.
     */
    declare public readonly labels: pulumi.Output<outputs.pai.WorkspaceModelLabel[] | undefined>;
    /**
     * The model description, used to distinguish different models.
     */
    declare public readonly modelDescription: pulumi.Output<string | undefined>;
    /**
     * The documentation of the model.
     */
    declare public readonly modelDoc: pulumi.Output<string | undefined>;
    /**
     * The name of the model. The name must be 1 to 127 characters in length.
     */
    declare public readonly modelName: pulumi.Output<string>;
    /**
     * The model type. Example: Checkpoint or LoRA.
     */
    declare public readonly modelType: pulumi.Output<string | undefined>;
    /**
     * The sequence number of the model. Can be used for custom sorting.
     */
    declare public readonly orderNumber: pulumi.Output<number | undefined>;
    /**
     * The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
     */
    declare public readonly origin: pulumi.Output<string | undefined>;
    /**
     * The task of the model. Describes the specific problem that the model solves. Example: text-classification.
     */
    declare public readonly task: pulumi.Output<string | undefined>;
    /**
     * The ID of the workspace.
     */
    declare public readonly workspaceId: pulumi.Output<string>;

    /**
     * Create a WorkspaceModel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceModelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceModelArgs | WorkspaceModelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceModelState | undefined;
            resourceInputs["accessibility"] = state?.accessibility;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["extraInfo"] = state?.extraInfo;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["modelDescription"] = state?.modelDescription;
            resourceInputs["modelDoc"] = state?.modelDoc;
            resourceInputs["modelName"] = state?.modelName;
            resourceInputs["modelType"] = state?.modelType;
            resourceInputs["orderNumber"] = state?.orderNumber;
            resourceInputs["origin"] = state?.origin;
            resourceInputs["task"] = state?.task;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as WorkspaceModelArgs | undefined;
            if (args?.modelName === undefined && !opts.urn) {
                throw new Error("Missing required property 'modelName'");
            }
            resourceInputs["accessibility"] = args?.accessibility;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["extraInfo"] = args?.extraInfo;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["modelDescription"] = args?.modelDescription;
            resourceInputs["modelDoc"] = args?.modelDoc;
            resourceInputs["modelName"] = args?.modelName;
            resourceInputs["modelType"] = args?.modelType;
            resourceInputs["orderNumber"] = args?.orderNumber;
            resourceInputs["origin"] = args?.origin;
            resourceInputs["task"] = args?.task;
            resourceInputs["workspaceId"] = args?.workspaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkspaceModel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkspaceModel resources.
 */
export interface WorkspaceModelState {
    /**
     * The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
     * - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
     * - `PUBLIC`: In this workspace, it is visible to everyone.
     */
    accessibility?: pulumi.Input<string>;
    /**
     * The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
     */
    domain?: pulumi.Input<string>;
    /**
     * Other information about the model.
     */
    extraInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of tags. See `labels` below.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.pai.WorkspaceModelLabel>[]>;
    /**
     * The model description, used to distinguish different models.
     */
    modelDescription?: pulumi.Input<string>;
    /**
     * The documentation of the model.
     */
    modelDoc?: pulumi.Input<string>;
    /**
     * The name of the model. The name must be 1 to 127 characters in length.
     */
    modelName?: pulumi.Input<string>;
    /**
     * The model type. Example: Checkpoint or LoRA.
     */
    modelType?: pulumi.Input<string>;
    /**
     * The sequence number of the model. Can be used for custom sorting.
     */
    orderNumber?: pulumi.Input<number>;
    /**
     * The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
     */
    origin?: pulumi.Input<string>;
    /**
     * The task of the model. Describes the specific problem that the model solves. Example: text-classification.
     */
    task?: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkspaceModel resource.
 */
export interface WorkspaceModelArgs {
    /**
     * The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
     * - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
     * - `PUBLIC`: In this workspace, it is visible to everyone.
     */
    accessibility?: pulumi.Input<string>;
    /**
     * The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
     */
    domain?: pulumi.Input<string>;
    /**
     * Other information about the model.
     */
    extraInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of tags. See `labels` below.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.pai.WorkspaceModelLabel>[]>;
    /**
     * The model description, used to distinguish different models.
     */
    modelDescription?: pulumi.Input<string>;
    /**
     * The documentation of the model.
     */
    modelDoc?: pulumi.Input<string>;
    /**
     * The name of the model. The name must be 1 to 127 characters in length.
     */
    modelName: pulumi.Input<string>;
    /**
     * The model type. Example: Checkpoint or LoRA.
     */
    modelType?: pulumi.Input<string>;
    /**
     * The sequence number of the model. Can be used for custom sorting.
     */
    orderNumber?: pulumi.Input<number>;
    /**
     * The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
     */
    origin?: pulumi.Input<string>;
    /**
     * The task of the model. Describes the specific problem that the model solves. Example: text-classification.
     */
    task?: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId?: pulumi.Input<string>;
}
