// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountPublicAccessBlockArgs, AccountPublicAccessBlockState } from "./accountPublicAccessBlock";
export type AccountPublicAccessBlock = import("./accountPublicAccessBlock").AccountPublicAccessBlock;
export const AccountPublicAccessBlock: typeof import("./accountPublicAccessBlock").AccountPublicAccessBlock = null as any;
utilities.lazyLoad(exports, ["AccountPublicAccessBlock"], () => require("./accountPublicAccessBlock"));

export { BucketArgs, BucketState } from "./bucket";
export type Bucket = import("./bucket").Bucket;
export const Bucket: typeof import("./bucket").Bucket = null as any;
utilities.lazyLoad(exports, ["Bucket"], () => require("./bucket"));

export { BucketAccessMonitorArgs, BucketAccessMonitorState } from "./bucketAccessMonitor";
export type BucketAccessMonitor = import("./bucketAccessMonitor").BucketAccessMonitor;
export const BucketAccessMonitor: typeof import("./bucketAccessMonitor").BucketAccessMonitor = null as any;
utilities.lazyLoad(exports, ["BucketAccessMonitor"], () => require("./bucketAccessMonitor"));

export { BucketAclArgs, BucketAclState } from "./bucketAcl";
export type BucketAcl = import("./bucketAcl").BucketAcl;
export const BucketAcl: typeof import("./bucketAcl").BucketAcl = null as any;
utilities.lazyLoad(exports, ["BucketAcl"], () => require("./bucketAcl"));

export { BucketCorsArgs, BucketCorsState } from "./bucketCors";
export type BucketCors = import("./bucketCors").BucketCors;
export const BucketCors: typeof import("./bucketCors").BucketCors = null as any;
utilities.lazyLoad(exports, ["BucketCors"], () => require("./bucketCors"));

export { BucketDataRedundancyTransitionArgs, BucketDataRedundancyTransitionState } from "./bucketDataRedundancyTransition";
export type BucketDataRedundancyTransition = import("./bucketDataRedundancyTransition").BucketDataRedundancyTransition;
export const BucketDataRedundancyTransition: typeof import("./bucketDataRedundancyTransition").BucketDataRedundancyTransition = null as any;
utilities.lazyLoad(exports, ["BucketDataRedundancyTransition"], () => require("./bucketDataRedundancyTransition"));

export { BucketHttpsConfigArgs, BucketHttpsConfigState } from "./bucketHttpsConfig";
export type BucketHttpsConfig = import("./bucketHttpsConfig").BucketHttpsConfig;
export const BucketHttpsConfig: typeof import("./bucketHttpsConfig").BucketHttpsConfig = null as any;
utilities.lazyLoad(exports, ["BucketHttpsConfig"], () => require("./bucketHttpsConfig"));

export { BucketLoggingArgs, BucketLoggingState } from "./bucketLogging";
export type BucketLogging = import("./bucketLogging").BucketLogging;
export const BucketLogging: typeof import("./bucketLogging").BucketLogging = null as any;
utilities.lazyLoad(exports, ["BucketLogging"], () => require("./bucketLogging"));

export { BucketMetaQueryArgs, BucketMetaQueryState } from "./bucketMetaQuery";
export type BucketMetaQuery = import("./bucketMetaQuery").BucketMetaQuery;
export const BucketMetaQuery: typeof import("./bucketMetaQuery").BucketMetaQuery = null as any;
utilities.lazyLoad(exports, ["BucketMetaQuery"], () => require("./bucketMetaQuery"));

export { BucketObjectArgs, BucketObjectState } from "./bucketObject";
export type BucketObject = import("./bucketObject").BucketObject;
export const BucketObject: typeof import("./bucketObject").BucketObject = null as any;
utilities.lazyLoad(exports, ["BucketObject"], () => require("./bucketObject"));

export { BucketPolicyArgs, BucketPolicyState } from "./bucketPolicy";
export type BucketPolicy = import("./bucketPolicy").BucketPolicy;
export const BucketPolicy: typeof import("./bucketPolicy").BucketPolicy = null as any;
utilities.lazyLoad(exports, ["BucketPolicy"], () => require("./bucketPolicy"));

export { BucketPublicAccessBlockArgs, BucketPublicAccessBlockState } from "./bucketPublicAccessBlock";
export type BucketPublicAccessBlock = import("./bucketPublicAccessBlock").BucketPublicAccessBlock;
export const BucketPublicAccessBlock: typeof import("./bucketPublicAccessBlock").BucketPublicAccessBlock = null as any;
utilities.lazyLoad(exports, ["BucketPublicAccessBlock"], () => require("./bucketPublicAccessBlock"));

export { BucketRefererArgs, BucketRefererState } from "./bucketReferer";
export type BucketReferer = import("./bucketReferer").BucketReferer;
export const BucketReferer: typeof import("./bucketReferer").BucketReferer = null as any;
utilities.lazyLoad(exports, ["BucketReferer"], () => require("./bucketReferer"));

export { BucketReplicationArgs, BucketReplicationState } from "./bucketReplication";
export type BucketReplication = import("./bucketReplication").BucketReplication;
export const BucketReplication: typeof import("./bucketReplication").BucketReplication = null as any;
utilities.lazyLoad(exports, ["BucketReplication"], () => require("./bucketReplication"));

export { BucketRequestPaymentArgs, BucketRequestPaymentState } from "./bucketRequestPayment";
export type BucketRequestPayment = import("./bucketRequestPayment").BucketRequestPayment;
export const BucketRequestPayment: typeof import("./bucketRequestPayment").BucketRequestPayment = null as any;
utilities.lazyLoad(exports, ["BucketRequestPayment"], () => require("./bucketRequestPayment"));

export { BucketServerSideEncryptionArgs, BucketServerSideEncryptionState } from "./bucketServerSideEncryption";
export type BucketServerSideEncryption = import("./bucketServerSideEncryption").BucketServerSideEncryption;
export const BucketServerSideEncryption: typeof import("./bucketServerSideEncryption").BucketServerSideEncryption = null as any;
utilities.lazyLoad(exports, ["BucketServerSideEncryption"], () => require("./bucketServerSideEncryption"));

export { BucketTransferAccelerationArgs, BucketTransferAccelerationState } from "./bucketTransferAcceleration";
export type BucketTransferAcceleration = import("./bucketTransferAcceleration").BucketTransferAcceleration;
export const BucketTransferAcceleration: typeof import("./bucketTransferAcceleration").BucketTransferAcceleration = null as any;
utilities.lazyLoad(exports, ["BucketTransferAcceleration"], () => require("./bucketTransferAcceleration"));

export { BucketUserDefinedLogFieldsArgs, BucketUserDefinedLogFieldsState } from "./bucketUserDefinedLogFields";
export type BucketUserDefinedLogFields = import("./bucketUserDefinedLogFields").BucketUserDefinedLogFields;
export const BucketUserDefinedLogFields: typeof import("./bucketUserDefinedLogFields").BucketUserDefinedLogFields = null as any;
utilities.lazyLoad(exports, ["BucketUserDefinedLogFields"], () => require("./bucketUserDefinedLogFields"));

export { BucketVersioningArgs, BucketVersioningState } from "./bucketVersioning";
export type BucketVersioning = import("./bucketVersioning").BucketVersioning;
export const BucketVersioning: typeof import("./bucketVersioning").BucketVersioning = null as any;
utilities.lazyLoad(exports, ["BucketVersioning"], () => require("./bucketVersioning"));

export { GetBucketObjectsArgs, GetBucketObjectsResult, GetBucketObjectsOutputArgs } from "./getBucketObjects";
export const getBucketObjects: typeof import("./getBucketObjects").getBucketObjects = null as any;
export const getBucketObjectsOutput: typeof import("./getBucketObjects").getBucketObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getBucketObjects","getBucketObjectsOutput"], () => require("./getBucketObjects"));

export { GetBucketsArgs, GetBucketsResult, GetBucketsOutputArgs } from "./getBuckets";
export const getBuckets: typeof import("./getBuckets").getBuckets = null as any;
export const getBucketsOutput: typeof import("./getBuckets").getBucketsOutput = null as any;
utilities.lazyLoad(exports, ["getBuckets","getBucketsOutput"], () => require("./getBuckets"));

export { GetInstanceAttachmentsArgs, GetInstanceAttachmentsResult, GetInstanceAttachmentsOutputArgs } from "./getInstanceAttachments";
export const getInstanceAttachments: typeof import("./getInstanceAttachments").getInstanceAttachments = null as any;
export const getInstanceAttachmentsOutput: typeof import("./getInstanceAttachments").getInstanceAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceAttachments","getInstanceAttachmentsOutput"], () => require("./getInstanceAttachments"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetTablesArgs, GetTablesResult, GetTablesOutputArgs } from "./getTables";
export const getTables: typeof import("./getTables").getTables = null as any;
export const getTablesOutput: typeof import("./getTables").getTablesOutput = null as any;
utilities.lazyLoad(exports, ["getTables","getTablesOutput"], () => require("./getTables"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:oss/accountPublicAccessBlock:AccountPublicAccessBlock":
                return new AccountPublicAccessBlock(name, <any>undefined, { urn })
            case "alicloud:oss/bucket:Bucket":
                return new Bucket(name, <any>undefined, { urn })
            case "alicloud:oss/bucketAccessMonitor:BucketAccessMonitor":
                return new BucketAccessMonitor(name, <any>undefined, { urn })
            case "alicloud:oss/bucketAcl:BucketAcl":
                return new BucketAcl(name, <any>undefined, { urn })
            case "alicloud:oss/bucketCors:BucketCors":
                return new BucketCors(name, <any>undefined, { urn })
            case "alicloud:oss/bucketDataRedundancyTransition:BucketDataRedundancyTransition":
                return new BucketDataRedundancyTransition(name, <any>undefined, { urn })
            case "alicloud:oss/bucketHttpsConfig:BucketHttpsConfig":
                return new BucketHttpsConfig(name, <any>undefined, { urn })
            case "alicloud:oss/bucketLogging:BucketLogging":
                return new BucketLogging(name, <any>undefined, { urn })
            case "alicloud:oss/bucketMetaQuery:BucketMetaQuery":
                return new BucketMetaQuery(name, <any>undefined, { urn })
            case "alicloud:oss/bucketObject:BucketObject":
                return new BucketObject(name, <any>undefined, { urn })
            case "alicloud:oss/bucketPolicy:BucketPolicy":
                return new BucketPolicy(name, <any>undefined, { urn })
            case "alicloud:oss/bucketPublicAccessBlock:BucketPublicAccessBlock":
                return new BucketPublicAccessBlock(name, <any>undefined, { urn })
            case "alicloud:oss/bucketReferer:BucketReferer":
                return new BucketReferer(name, <any>undefined, { urn })
            case "alicloud:oss/bucketReplication:BucketReplication":
                return new BucketReplication(name, <any>undefined, { urn })
            case "alicloud:oss/bucketRequestPayment:BucketRequestPayment":
                return new BucketRequestPayment(name, <any>undefined, { urn })
            case "alicloud:oss/bucketServerSideEncryption:BucketServerSideEncryption":
                return new BucketServerSideEncryption(name, <any>undefined, { urn })
            case "alicloud:oss/bucketTransferAcceleration:BucketTransferAcceleration":
                return new BucketTransferAcceleration(name, <any>undefined, { urn })
            case "alicloud:oss/bucketUserDefinedLogFields:BucketUserDefinedLogFields":
                return new BucketUserDefinedLogFields(name, <any>undefined, { urn })
            case "alicloud:oss/bucketVersioning:BucketVersioning":
                return new BucketVersioning(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "oss/accountPublicAccessBlock", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucket", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketAccessMonitor", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketAcl", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketCors", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketDataRedundancyTransition", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketHttpsConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketLogging", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketMetaQuery", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketObject", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketPublicAccessBlock", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketReferer", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketReplication", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketRequestPayment", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketServerSideEncryption", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketTransferAcceleration", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketUserDefinedLogFields", _module)
pulumi.runtime.registerResourceModule("alicloud", "oss/bucketVersioning", _module)
