// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a OSS Bucket Cname resource.
 *
 * Customizing Bucket domains.
 *
 * For information about OSS Bucket Cname and how to use it, see [What is Bucket Cname](https://www.alibabacloud.com/help/en/oss/developer-reference/putcname).
 *
 * > **NOTE:** Available since v1.233.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const createBucket = new alicloud.oss.Bucket("CreateBucket", {
 *     bucket: name,
 *     storageClass: "Standard",
 * });
 * const defaultZaWJfG = new alicloud.oss.BucketCnameToken("defaultZaWJfG", {
 *     bucket: createBucket.bucket,
 *     domain: "tftestacc.com",
 * });
 * const defaultnHqm5p = new alicloud.dns.AlidnsRecord("defaultnHqm5p", {
 *     status: "ENABLE",
 *     line: "default",
 *     rr: "_dnsauth",
 *     type: "TXT",
 *     domainName: "tftestacc.com",
 *     priority: 1,
 *     value: defaultZaWJfG.token,
 *     ttl: 600,
 * });
 * const _default = new alicloud.oss.BucketCname("default", {
 *     bucket: createBucket.bucket,
 *     domain: defaultnHqm5p.domainName,
 * });
 * ```
 *
 * ## Import
 *
 * OSS Bucket Cname can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:oss/bucketCname:BucketCname example <bucket>:<domain>
 * ```
 */
export class BucketCname extends pulumi.CustomResource {
    /**
     * Get an existing BucketCname resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketCnameState, opts?: pulumi.CustomResourceOptions): BucketCname {
        return new BucketCname(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:oss/bucketCname:BucketCname';

    /**
     * Returns true if the given object is an instance of BucketCname.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketCname {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketCname.__pulumiType;
    }

    /**
     * The bucket to which the custom domain name belongs
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * The container for the certificate configuration. See `certificate` below.
     */
    public readonly certificate!: pulumi.Output<outputs.oss.BucketCnameCertificate | undefined>;
    /**
     * Whether to delete the certificate.
     */
    public readonly deleteCertificate!: pulumi.Output<boolean | undefined>;
    /**
     * User-defined domain name
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Whether to force overwrite certificate.
     */
    public readonly force!: pulumi.Output<boolean | undefined>;
    /**
     * The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
     */
    public readonly previousCertId!: pulumi.Output<string | undefined>;
    /**
     * Cname status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a BucketCname resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketCnameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketCnameArgs | BucketCnameState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketCnameState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["deleteCertificate"] = state ? state.deleteCertificate : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["previousCertId"] = state ? state.previousCertId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as BucketCnameArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["deleteCertificate"] = args ? args.deleteCertificate : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["previousCertId"] = args ? args.previousCertId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketCname.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketCname resources.
 */
export interface BucketCnameState {
    /**
     * The bucket to which the custom domain name belongs
     */
    bucket?: pulumi.Input<string>;
    /**
     * The container for the certificate configuration. See `certificate` below.
     */
    certificate?: pulumi.Input<inputs.oss.BucketCnameCertificate>;
    /**
     * Whether to delete the certificate.
     */
    deleteCertificate?: pulumi.Input<boolean>;
    /**
     * User-defined domain name
     */
    domain?: pulumi.Input<string>;
    /**
     * Whether to force overwrite certificate.
     */
    force?: pulumi.Input<boolean>;
    /**
     * The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
     */
    previousCertId?: pulumi.Input<string>;
    /**
     * Cname status
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BucketCname resource.
 */
export interface BucketCnameArgs {
    /**
     * The bucket to which the custom domain name belongs
     */
    bucket: pulumi.Input<string>;
    /**
     * The container for the certificate configuration. See `certificate` below.
     */
    certificate?: pulumi.Input<inputs.oss.BucketCnameCertificate>;
    /**
     * Whether to delete the certificate.
     */
    deleteCertificate?: pulumi.Input<boolean>;
    /**
     * User-defined domain name
     */
    domain: pulumi.Input<string>;
    /**
     * Whether to force overwrite certificate.
     */
    force?: pulumi.Input<boolean>;
    /**
     * The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
     */
    previousCertId?: pulumi.Input<string>;
}
