// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a OSS Bucket Style resource.
 *
 * Image styles that contain single or multiple image processing parameters.
 *
 * For information about OSS Bucket Style and how to use it, see [What is Bucket Style](https://next.api.alibabacloud.com/document/Oss/2019-05-17/PutStyle).
 *
 * > **NOTE:** Available since v1.245.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const createBucket = new alicloud.oss.Bucket("CreateBucket", {
 *     storageClass: "Standard",
 *     bucket: `${name}-${_default.result}`,
 * });
 * const defaultBucketStyle = new alicloud.oss.BucketStyle("default", {
 *     bucket: createBucket.id,
 *     styleName: "style-933",
 *     content: "image/resize,p_75,w_75",
 *     category: "document",
 * });
 * ```
 *
 * ## Import
 *
 * OSS Bucket Style can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:oss/bucketStyle:BucketStyle example <bucket>:<style_name>
 * ```
 */
export class BucketStyle extends pulumi.CustomResource {
    /**
     * Get an existing BucketStyle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketStyleState, opts?: pulumi.CustomResourceOptions): BucketStyle {
        return new BucketStyle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:oss/bucketStyle:BucketStyle';

    /**
     * Returns true if the given object is an instance of BucketStyle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketStyle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketStyle.__pulumiType;
    }

    /**
     * Storage space to which the picture style belongs
     */
    declare public readonly bucket: pulumi.Output<string>;
    /**
     * Style category, valid values: image, document, video.
     */
    declare public readonly category: pulumi.Output<string>;
    /**
     * The Image style content can contain single or multiple image processing parameters.
     */
    declare public readonly content: pulumi.Output<string>;
    /**
     * Image Style Creation Time
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Image Style Name
     */
    declare public readonly styleName: pulumi.Output<string>;

    /**
     * Create a BucketStyle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketStyleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketStyleArgs | BucketStyleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketStyleState | undefined;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["category"] = state?.category;
            resourceInputs["content"] = state?.content;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["styleName"] = state?.styleName;
        } else {
            const args = argsOrState as BucketStyleArgs | undefined;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.styleName === undefined && !opts.urn) {
                throw new Error("Missing required property 'styleName'");
            }
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["category"] = args?.category;
            resourceInputs["content"] = args?.content;
            resourceInputs["styleName"] = args?.styleName;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketStyle.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketStyle resources.
 */
export interface BucketStyleState {
    /**
     * Storage space to which the picture style belongs
     */
    bucket?: pulumi.Input<string>;
    /**
     * Style category, valid values: image, document, video.
     */
    category?: pulumi.Input<string>;
    /**
     * The Image style content can contain single or multiple image processing parameters.
     */
    content?: pulumi.Input<string>;
    /**
     * Image Style Creation Time
     */
    createTime?: pulumi.Input<string>;
    /**
     * Image Style Name
     */
    styleName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BucketStyle resource.
 */
export interface BucketStyleArgs {
    /**
     * Storage space to which the picture style belongs
     */
    bucket: pulumi.Input<string>;
    /**
     * Style category, valid values: image, document, video.
     */
    category?: pulumi.Input<string>;
    /**
     * The Image style content can contain single or multiple image processing parameters.
     */
    content: pulumi.Input<string>;
    /**
     * Image Style Name
     */
    styleName: pulumi.Input<string>;
}
