// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a OSS Bucket Meta Query resource. Enables the metadata management feature for a bucket.
 *
 * For information about OSS Bucket Meta Query and how to use it, see [What is Bucket Meta Query](https://www.alibabacloud.com/help/en/oss/developer-reference/openmetaquery).
 *
 * > **NOTE:** Available since v1.224.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const createBucket = new alicloud.oss.Bucket("CreateBucket", {
 *     storageClass: "Standard",
 *     bucket: `${name}-${_default.result}`,
 * });
 * const defaultBucketMetaQuery = new alicloud.oss.BucketMetaQuery("default", {bucket: createBucket.bucket});
 * ```
 *
 * ## Import
 *
 * OSS Bucket Meta Query can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:oss/bucketMetaQuery:BucketMetaQuery example <id>
 * ```
 */
export class BucketMetaQuery extends pulumi.CustomResource {
    /**
     * Get an existing BucketMetaQuery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketMetaQueryState, opts?: pulumi.CustomResourceOptions): BucketMetaQuery {
        return new BucketMetaQuery(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:oss/bucketMetaQuery:BucketMetaQuery';

    /**
     * Returns true if the given object is an instance of BucketMetaQuery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketMetaQuery {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketMetaQuery.__pulumiType;
    }

    /**
     * The name of the bucket.
     */
    declare public readonly bucket: pulumi.Output<string>;
    /**
     * The creation time of the metadata index database. The format is mm:ss + TIMEZONE in the YYYY-MM-DDTHH format of RFC 3339. Where YYYY-MM-DD indicates the year, month and day, T indicates the beginning of the time element, HH:mm:ss indicates the hour, minute and second, and TIMEZONE indicates the time zone.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The status of the resource.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a BucketMetaQuery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketMetaQueryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketMetaQueryArgs | BucketMetaQueryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketMetaQueryState | undefined;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as BucketMetaQueryArgs | undefined;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketMetaQuery.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketMetaQuery resources.
 */
export interface BucketMetaQueryState {
    /**
     * The name of the bucket.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The creation time of the metadata index database. The format is mm:ss + TIMEZONE in the YYYY-MM-DDTHH format of RFC 3339. Where YYYY-MM-DD indicates the year, month and day, T indicates the beginning of the time element, HH:mm:ss indicates the hour, minute and second, and TIMEZONE indicates the time zone.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BucketMetaQuery resource.
 */
export interface BucketMetaQueryArgs {
    /**
     * The name of the bucket.
     */
    bucket: pulumi.Input<string>;
}
