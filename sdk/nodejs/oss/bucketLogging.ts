// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a OSS Bucket Logging resource. After you enable and configure logging for a bucket, Object Storage Service (OSS) generates log objects based on a predefined naming convention. This way, access logs are generated and stored in the specified bucket on an hourly basis.
 *
 * For information about OSS Bucket Logging and how to use it, see [What is Bucket Logging](https://www.alibabacloud.com/help/en/oss/developer-reference/putbucketlogging).
 *
 * > **NOTE:** Available since v1.222.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const createBucket = new alicloud.oss.Bucket("CreateBucket", {
 *     storageClass: "Standard",
 *     bucket: `${name}-${_default.result}`,
 * });
 * const defaultBucketLogging = new alicloud.oss.BucketLogging("default", {
 *     bucket: createBucket.bucket,
 *     targetBucket: createBucket.bucket,
 *     targetPrefix: "log/",
 * });
 * ```
 *
 * ## Import
 *
 * OSS Bucket Logging can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:oss/bucketLogging:BucketLogging example <id>
 * ```
 */
export class BucketLogging extends pulumi.CustomResource {
    /**
     * Get an existing BucketLogging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketLoggingState, opts?: pulumi.CustomResourceOptions): BucketLogging {
        return new BucketLogging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:oss/bucketLogging:BucketLogging';

    /**
     * Returns true if the given object is an instance of BucketLogging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketLogging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketLogging.__pulumiType;
    }

    /**
     * The name of the bucket.
     */
    declare public readonly bucket: pulumi.Output<string>;
    /**
     * The bucket that stores access logs.
     */
    declare public readonly targetBucket: pulumi.Output<string>;
    /**
     * The prefix of the saved log objects. This element can be left empty.
     */
    declare public readonly targetPrefix: pulumi.Output<string | undefined>;

    /**
     * Create a BucketLogging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketLoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketLoggingArgs | BucketLoggingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketLoggingState | undefined;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["targetBucket"] = state?.targetBucket;
            resourceInputs["targetPrefix"] = state?.targetPrefix;
        } else {
            const args = argsOrState as BucketLoggingArgs | undefined;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if (args?.targetBucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetBucket'");
            }
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["targetBucket"] = args?.targetBucket;
            resourceInputs["targetPrefix"] = args?.targetPrefix;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketLogging.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketLogging resources.
 */
export interface BucketLoggingState {
    /**
     * The name of the bucket.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The bucket that stores access logs.
     */
    targetBucket?: pulumi.Input<string>;
    /**
     * The prefix of the saved log objects. This element can be left empty.
     */
    targetPrefix?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BucketLogging resource.
 */
export interface BucketLoggingArgs {
    /**
     * The name of the bucket.
     */
    bucket: pulumi.Input<string>;
    /**
     * The bucket that stores access logs.
     */
    targetBucket: pulumi.Input<string>;
    /**
     * The prefix of the saved log objects. This element can be left empty.
     */
    targetPrefix?: pulumi.Input<string>;
}
