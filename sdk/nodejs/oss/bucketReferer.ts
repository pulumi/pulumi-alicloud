// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a OSS Bucket Referer resource. Bucket Referer configuration.
 *
 * For information about OSS Bucket Referer and how to use it, see [What is Bucket Referer](https://www.alibabacloud.com/help/en/oss/user-guide/hotlink-protection).
 *
 * > **NOTE:** Available since v1.220.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const createBucket = new alicloud.oss.Bucket("CreateBucket", {
 *     storageClass: "Standard",
 *     bucket: `${name}-${_default.result}`,
 * });
 * const defaultBucketReferer = new alicloud.oss.BucketReferer("default", {
 *     allowEmptyReferer: true,
 *     refererBlacklists: ["*.forbidden.com"],
 *     bucket: createBucket.bucket,
 *     truncatePath: false,
 *     allowTruncateQueryString: true,
 *     refererLists: [
 *         "*.aliyun.com",
 *         "*.example.com",
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * OSS Bucket Referer can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:oss/bucketReferer:BucketReferer example <id>
 * ```
 */
export class BucketReferer extends pulumi.CustomResource {
    /**
     * Get an existing BucketReferer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketRefererState, opts?: pulumi.CustomResourceOptions): BucketReferer {
        return new BucketReferer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:oss/bucketReferer:BucketReferer';

    /**
     * Returns true if the given object is an instance of BucketReferer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketReferer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketReferer.__pulumiType;
    }

    /**
     * Whether to allow empty Referer request headers.
     */
    public readonly allowEmptyReferer!: pulumi.Output<boolean>;
    /**
     * Allow phase request parameters.
     */
    public readonly allowTruncateQueryString!: pulumi.Output<boolean>;
    /**
     * Name of the Bucket.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * The container that holds the Referer blacklist.
     */
    public readonly refererBlacklists!: pulumi.Output<string[] | undefined>;
    /**
     * The container that holds the Referer whitelist.
     */
    public readonly refererLists!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the bucket.
     */
    public readonly truncatePath!: pulumi.Output<boolean | undefined>;

    /**
     * Create a BucketReferer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketRefererArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketRefererArgs | BucketRefererState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketRefererState | undefined;
            resourceInputs["allowEmptyReferer"] = state ? state.allowEmptyReferer : undefined;
            resourceInputs["allowTruncateQueryString"] = state ? state.allowTruncateQueryString : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["refererBlacklists"] = state ? state.refererBlacklists : undefined;
            resourceInputs["refererLists"] = state ? state.refererLists : undefined;
            resourceInputs["truncatePath"] = state ? state.truncatePath : undefined;
        } else {
            const args = argsOrState as BucketRefererArgs | undefined;
            if ((!args || args.allowEmptyReferer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowEmptyReferer'");
            }
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["allowEmptyReferer"] = args ? args.allowEmptyReferer : undefined;
            resourceInputs["allowTruncateQueryString"] = args ? args.allowTruncateQueryString : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["refererBlacklists"] = args ? args.refererBlacklists : undefined;
            resourceInputs["refererLists"] = args ? args.refererLists : undefined;
            resourceInputs["truncatePath"] = args ? args.truncatePath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketReferer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketReferer resources.
 */
export interface BucketRefererState {
    /**
     * Whether to allow empty Referer request headers.
     */
    allowEmptyReferer?: pulumi.Input<boolean>;
    /**
     * Allow phase request parameters.
     */
    allowTruncateQueryString?: pulumi.Input<boolean>;
    /**
     * Name of the Bucket.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The container that holds the Referer blacklist.
     */
    refererBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The container that holds the Referer whitelist.
     */
    refererLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the bucket.
     */
    truncatePath?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a BucketReferer resource.
 */
export interface BucketRefererArgs {
    /**
     * Whether to allow empty Referer request headers.
     */
    allowEmptyReferer: pulumi.Input<boolean>;
    /**
     * Allow phase request parameters.
     */
    allowTruncateQueryString?: pulumi.Input<boolean>;
    /**
     * Name of the Bucket.
     */
    bucket: pulumi.Input<string>;
    /**
     * The container that holds the Referer blacklist.
     */
    refererBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The container that holds the Referer whitelist.
     */
    refererLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the bucket.
     */
    truncatePath?: pulumi.Input<boolean>;
}
