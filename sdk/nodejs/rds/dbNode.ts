// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provide RDS cluster instance to increase node resources, see [What is RDS DB Node](https://www.alibabacloud.com/help/en/apsaradb-for-rds/latest/api-rds-2014-08-15-createdbnodes).
 *
 * > **NOTE:** Available since v1.202.0.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const defaultZones = alicloud.rds.getZones({
 *     engine: "MySQL",
 *     engineVersion: "8.0",
 *     instanceChargeType: "PostPaid",
 *     category: "cluster",
 *     dbInstanceStorageType: "cloud_essd",
 * });
 * const defaultInstanceClasses = defaultZones.then(defaultZones => alicloud.rds.getInstanceClasses({
 *     zoneId: defaultZones.ids?.[0],
 *     engine: "MySQL",
 *     engineVersion: "8.0",
 *     category: "cluster",
 *     dbInstanceStorageType: "cloud_essd",
 *     instanceChargeType: "PostPaid",
 * }));
 * const defaultNetwork = new alicloud.vpc.Network("defaultNetwork", {
 *     vpcName: name,
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("defaultSwitch", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: defaultZones.then(defaultZones => defaultZones.ids?.[0]),
 *     vswitchName: name,
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("defaultSecurityGroup", {vpcId: defaultNetwork.id});
 * const defaultInstance = new alicloud.rds.Instance("defaultInstance", {
 *     engine: "MySQL",
 *     engineVersion: "8.0",
 *     instanceType: defaultInstanceClasses.then(defaultInstanceClasses => defaultInstanceClasses.instanceClasses?.[0]?.instanceClass),
 *     instanceStorage: defaultInstanceClasses.then(defaultInstanceClasses => defaultInstanceClasses.instanceClasses?.[0]?.storageRange?.min),
 *     instanceChargeType: "Postpaid",
 *     instanceName: name,
 *     vswitchId: defaultSwitch.id,
 *     monitoringPeriod: 60,
 *     dbInstanceStorageType: "cloud_essd",
 *     securityGroupIds: [defaultSecurityGroup.id],
 *     zoneId: defaultZones.then(defaultZones => defaultZones.ids?.[0]),
 *     zoneIdSlaveA: defaultZones.then(defaultZones => defaultZones.ids?.[0]),
 * });
 * const defaultDbNode = new alicloud.rds.DbNode("defaultDbNode", {
 *     dbInstanceId: defaultInstance.id,
 *     classCode: defaultInstance.instanceType,
 *     zoneId: defaultSwitch.zoneId,
 * });
 * ```
 *
 * ## Import
 *
 * RDS MySQL database cluster node agent function can be imported using id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:rds/dbNode:DbNode example <db_instance_id>:<node_id>
 * ```
 */
export class DbNode extends pulumi.CustomResource {
    /**
     * Get an existing DbNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbNodeState, opts?: pulumi.CustomResourceOptions): DbNode {
        return new DbNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:rds/dbNode:DbNode';

    /**
     * Returns true if the given object is an instance of DbNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbNode.__pulumiType;
    }

    /**
     * The specification information of the node.
     */
    public readonly classCode!: pulumi.Output<string>;
    /**
     * The Id of instance that can run database.
     */
    public readonly dbInstanceId!: pulumi.Output<string>;
    /**
     * The ID of the node.
     */
    public /*out*/ readonly nodeId!: pulumi.Output<string>;
    /**
     * The region ID of the node.
     */
    public /*out*/ readonly nodeRegionId!: pulumi.Output<string>;
    /**
     * The role of node.
     */
    public /*out*/ readonly nodeRole!: pulumi.Output<string>;
    /**
     * The zone ID of the node.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DbNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbNodeArgs | DbNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbNodeState | undefined;
            resourceInputs["classCode"] = state ? state.classCode : undefined;
            resourceInputs["dbInstanceId"] = state ? state.dbInstanceId : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["nodeRegionId"] = state ? state.nodeRegionId : undefined;
            resourceInputs["nodeRole"] = state ? state.nodeRole : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DbNodeArgs | undefined;
            if ((!args || args.classCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'classCode'");
            }
            if ((!args || args.dbInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceId'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["classCode"] = args ? args.classCode : undefined;
            resourceInputs["dbInstanceId"] = args ? args.dbInstanceId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["nodeId"] = undefined /*out*/;
            resourceInputs["nodeRegionId"] = undefined /*out*/;
            resourceInputs["nodeRole"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbNode.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DbNode resources.
 */
export interface DbNodeState {
    /**
     * The specification information of the node.
     */
    classCode?: pulumi.Input<string>;
    /**
     * The Id of instance that can run database.
     */
    dbInstanceId?: pulumi.Input<string>;
    /**
     * The ID of the node.
     */
    nodeId?: pulumi.Input<string>;
    /**
     * The region ID of the node.
     */
    nodeRegionId?: pulumi.Input<string>;
    /**
     * The role of node.
     */
    nodeRole?: pulumi.Input<string>;
    /**
     * The zone ID of the node.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbNode resource.
 */
export interface DbNodeArgs {
    /**
     * The specification information of the node.
     */
    classCode: pulumi.Input<string>;
    /**
     * The Id of instance that can run database.
     */
    dbInstanceId: pulumi.Input<string>;
    /**
     * The zone ID of the node.
     */
    zoneId: pulumi.Input<string>;
}
