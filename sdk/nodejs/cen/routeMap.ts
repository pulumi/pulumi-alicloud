// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This topic provides an overview of the route map function of Cloud Enterprise Networks (CENs).
 * You can use the route map function to filter routes and modify route attributes.
 * By doing so, you can manage the communication between networks attached to a CEN.
 *
 * For information about CEN Route Map and how to use it, see [Manage CEN Route Map](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/api-cbn-2017-09-12-createcenroutemap).
 *
 * > **NOTE:** Available since v1.82.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const sourceRegion = config.get("sourceRegion") || "cn-hangzhou";
 * const destinationRegion = config.get("destinationRegion") || "cn-shanghai";
 * const exampleHz = new alicloud.vpc.Network("example_hz", {
 *     vpcName: "tf_example",
 *     cidrBlock: "192.168.0.0/16",
 * });
 * const exampleSh = new alicloud.vpc.Network("example_sh", {
 *     vpcName: "tf_example",
 *     cidrBlock: "172.16.0.0/12",
 * });
 * const example = new alicloud.cen.Instance("example", {
 *     cenInstanceName: "tf_example",
 *     description: "an example for cen",
 * });
 * const exampleHzInstanceAttachment = new alicloud.cen.InstanceAttachment("example_hz", {
 *     instanceId: example.id,
 *     childInstanceId: exampleHz.id,
 *     childInstanceType: "VPC",
 *     childInstanceRegionId: sourceRegion,
 * });
 * const exampleShInstanceAttachment = new alicloud.cen.InstanceAttachment("example_sh", {
 *     instanceId: example.id,
 *     childInstanceId: exampleSh.id,
 *     childInstanceType: "VPC",
 *     childInstanceRegionId: destinationRegion,
 * });
 * const _default = new alicloud.cen.RouteMap("default", {
 *     cenRegionId: sourceRegion,
 *     cenId: example.id,
 *     description: "tf_example",
 *     priority: 1,
 *     transmitDirection: "RegionIn",
 *     mapResult: "Permit",
 *     nextPriority: 1,
 *     sourceRegionIds: [sourceRegion],
 *     sourceInstanceIds: [exampleHzInstanceAttachment.childInstanceId],
 *     sourceInstanceIdsReverseMatch: false,
 *     destinationInstanceIds: [exampleShInstanceAttachment.childInstanceId],
 *     destinationInstanceIdsReverseMatch: false,
 *     sourceRouteTableIds: [exampleHz.routeTableId],
 *     destinationRouteTableIds: [exampleSh.routeTableId],
 *     sourceChildInstanceTypes: ["VPC"],
 *     destinationChildInstanceTypes: ["VPC"],
 *     destinationCidrBlocks: [exampleSh.cidrBlock],
 *     cidrMatchMode: "Include",
 *     routeTypes: ["System"],
 *     matchAsns: ["65501"],
 *     asPathMatchMode: "Include",
 *     matchCommunitySets: ["65501:1"],
 *     communityMatchMode: "Include",
 *     communityOperateMode: "Additive",
 *     operateCommunitySets: ["65501:1"],
 *     preference: 20,
 *     prependAsPaths: ["65501"],
 * });
 * ```
 *
 * ## Import
 *
 * CEN RouteMap can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cen/routeMap:RouteMap default <cen_id>:<route_map_id>.
 * ```
 */
export class RouteMap extends pulumi.CustomResource {
    /**
     * Get an existing RouteMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteMapState, opts?: pulumi.CustomResourceOptions): RouteMap {
        return new RouteMap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cen/routeMap:RouteMap';

    /**
     * Returns true if the given object is an instance of RouteMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteMap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteMap.__pulumiType;
    }

    /**
     * A match statement. It indicates the mode in which the AS path attribute is matched. Valid values: ["Include", "Complete"].
     */
    declare public readonly asPathMatchMode: pulumi.Output<string | undefined>;
    /**
     * The ID of the CEN instance.
     */
    declare public readonly cenId: pulumi.Output<string>;
    /**
     * The ID of the region to which the CEN instance belongs.
     */
    declare public readonly cenRegionId: pulumi.Output<string>;
    /**
     * A match statement. It indicates the mode in which the prefix attribute is matched. Valid values: ["Include", "Complete"].
     */
    declare public readonly cidrMatchMode: pulumi.Output<string | undefined>;
    /**
     * A match statement. It indicates the mode in which the community attribute is matched. Valid values: ["Include", "Complete"].
     */
    declare public readonly communityMatchMode: pulumi.Output<string | undefined>;
    /**
     * An action statement. It indicates the mode in which the community attribute is operated. Valid values: ["Additive", "Replace"].
     */
    declare public readonly communityOperateMode: pulumi.Output<string | undefined>;
    /**
     * The description of the route map.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * A match statement that indicates the list of destination instance types. Valid values: ["VPC", "VBR", "CCN", "VPN"].
     */
    declare public readonly destinationChildInstanceTypes: pulumi.Output<string[] | undefined>;
    /**
     * A match statement that indicates the prefix list. The prefix is in the CIDR format. You can enter a maximum of 32 CIDR blocks.
     */
    declare public readonly destinationCidrBlocks: pulumi.Output<string[] | undefined>;
    /**
     * A match statement that indicates the list of IDs of the destination instances.
     */
    declare public readonly destinationInstanceIds: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether to enable the reverse match method for the DestinationInstanceIds match condition. Valid values: ["false", "true"]. Default to "false".
     */
    declare public readonly destinationInstanceIdsReverseMatch: pulumi.Output<boolean | undefined>;
    /**
     * A match statement that indicates the list of IDs of the destination route tables. You can enter a maximum of 32 route table IDs.
     */
    declare public readonly destinationRouteTableIds: pulumi.Output<string[] | undefined>;
    /**
     * The action that is performed to a route if the route matches all the match conditions. Valid values: ["Permit", "Deny"].
     */
    declare public readonly mapResult: pulumi.Output<string>;
    /**
     * A match statement that indicates the AS path list. The AS path is a well-known mandatory attribute, which describes the numbers of the ASs that a BGP route passes through during transmission.
     */
    declare public readonly matchAsns: pulumi.Output<string[] | undefined>;
    /**
     * A match statement that indicates the community set. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
     */
    declare public readonly matchCommunitySets: pulumi.Output<string[] | undefined>;
    /**
     * The priority of the next route map that is associated with the current route map. Value range: 1 to 100.
     */
    declare public readonly nextPriority: pulumi.Output<number | undefined>;
    /**
     * An action statement that operates the community attribute. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
     */
    declare public readonly operateCommunitySets: pulumi.Output<string[] | undefined>;
    /**
     * An action statement that modifies the priority of the route. Value range: 1 to 100. The default priority of a route is 50. A lower value indicates a higher preference.
     */
    declare public readonly preference: pulumi.Output<number | undefined>;
    /**
     * An action statement that indicates an AS path is prepended when the regional gateway receives or advertises a route.
     */
    declare public readonly prependAsPaths: pulumi.Output<string[] | undefined>;
    /**
     * The priority of the route map. Value range: 1 to 100. A lower value indicates a higher priority.
     */
    declare public readonly priority: pulumi.Output<number>;
    /**
     * ID of the RouteMap. It is available in 1.161.0+.
     */
    declare public /*out*/ readonly routeMapId: pulumi.Output<string>;
    /**
     * A match statement that indicates the list of route types. Valid values: ["System", "Custom", "BGP"].
     */
    declare public readonly routeTypes: pulumi.Output<string[] | undefined>;
    /**
     * A match statement that indicates the list of source instance types. Valid values: ["VPC", "VBR", "CCN"].
     */
    declare public readonly sourceChildInstanceTypes: pulumi.Output<string[] | undefined>;
    /**
     * A match statement that indicates the list of IDs of the source instances.
     */
    declare public readonly sourceInstanceIds: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether to enable the reverse match method for the SourceInstanceIds match condition. Valid values: ["false", "true"]. Default to "false".
     */
    declare public readonly sourceInstanceIdsReverseMatch: pulumi.Output<boolean | undefined>;
    /**
     * A match statement that indicates the list of IDs of the source regions. You can enter a maximum of 32 region IDs.
     */
    declare public readonly sourceRegionIds: pulumi.Output<string[] | undefined>;
    /**
     * A match statement that indicates the list of IDs of the source route tables. You can enter a maximum of 32 route table IDs.
     */
    declare public readonly sourceRouteTableIds: pulumi.Output<string[] | undefined>;
    /**
     * (Computed) The status of route map. Valid values: ["Creating", "Active", "Deleting"].
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The routing table ID of the forwarding router. If you do not enter the routing table ID, the routing policy is automatically associated with the default routing table of the forwarding router.
     */
    declare public readonly transitRouterRouteTableId: pulumi.Output<string>;
    /**
     * The direction in which the route map is applied. Valid values: ["RegionIn", "RegionOut"].
     */
    declare public readonly transmitDirection: pulumi.Output<string>;

    /**
     * Create a RouteMap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteMapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteMapArgs | RouteMapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteMapState | undefined;
            resourceInputs["asPathMatchMode"] = state?.asPathMatchMode;
            resourceInputs["cenId"] = state?.cenId;
            resourceInputs["cenRegionId"] = state?.cenRegionId;
            resourceInputs["cidrMatchMode"] = state?.cidrMatchMode;
            resourceInputs["communityMatchMode"] = state?.communityMatchMode;
            resourceInputs["communityOperateMode"] = state?.communityOperateMode;
            resourceInputs["description"] = state?.description;
            resourceInputs["destinationChildInstanceTypes"] = state?.destinationChildInstanceTypes;
            resourceInputs["destinationCidrBlocks"] = state?.destinationCidrBlocks;
            resourceInputs["destinationInstanceIds"] = state?.destinationInstanceIds;
            resourceInputs["destinationInstanceIdsReverseMatch"] = state?.destinationInstanceIdsReverseMatch;
            resourceInputs["destinationRouteTableIds"] = state?.destinationRouteTableIds;
            resourceInputs["mapResult"] = state?.mapResult;
            resourceInputs["matchAsns"] = state?.matchAsns;
            resourceInputs["matchCommunitySets"] = state?.matchCommunitySets;
            resourceInputs["nextPriority"] = state?.nextPriority;
            resourceInputs["operateCommunitySets"] = state?.operateCommunitySets;
            resourceInputs["preference"] = state?.preference;
            resourceInputs["prependAsPaths"] = state?.prependAsPaths;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["routeMapId"] = state?.routeMapId;
            resourceInputs["routeTypes"] = state?.routeTypes;
            resourceInputs["sourceChildInstanceTypes"] = state?.sourceChildInstanceTypes;
            resourceInputs["sourceInstanceIds"] = state?.sourceInstanceIds;
            resourceInputs["sourceInstanceIdsReverseMatch"] = state?.sourceInstanceIdsReverseMatch;
            resourceInputs["sourceRegionIds"] = state?.sourceRegionIds;
            resourceInputs["sourceRouteTableIds"] = state?.sourceRouteTableIds;
            resourceInputs["status"] = state?.status;
            resourceInputs["transitRouterRouteTableId"] = state?.transitRouterRouteTableId;
            resourceInputs["transmitDirection"] = state?.transmitDirection;
        } else {
            const args = argsOrState as RouteMapArgs | undefined;
            if (args?.cenId === undefined && !opts.urn) {
                throw new Error("Missing required property 'cenId'");
            }
            if (args?.cenRegionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'cenRegionId'");
            }
            if (args?.mapResult === undefined && !opts.urn) {
                throw new Error("Missing required property 'mapResult'");
            }
            if (args?.priority === undefined && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if (args?.transmitDirection === undefined && !opts.urn) {
                throw new Error("Missing required property 'transmitDirection'");
            }
            resourceInputs["asPathMatchMode"] = args?.asPathMatchMode;
            resourceInputs["cenId"] = args?.cenId;
            resourceInputs["cenRegionId"] = args?.cenRegionId;
            resourceInputs["cidrMatchMode"] = args?.cidrMatchMode;
            resourceInputs["communityMatchMode"] = args?.communityMatchMode;
            resourceInputs["communityOperateMode"] = args?.communityOperateMode;
            resourceInputs["description"] = args?.description;
            resourceInputs["destinationChildInstanceTypes"] = args?.destinationChildInstanceTypes;
            resourceInputs["destinationCidrBlocks"] = args?.destinationCidrBlocks;
            resourceInputs["destinationInstanceIds"] = args?.destinationInstanceIds;
            resourceInputs["destinationInstanceIdsReverseMatch"] = args?.destinationInstanceIdsReverseMatch;
            resourceInputs["destinationRouteTableIds"] = args?.destinationRouteTableIds;
            resourceInputs["mapResult"] = args?.mapResult;
            resourceInputs["matchAsns"] = args?.matchAsns;
            resourceInputs["matchCommunitySets"] = args?.matchCommunitySets;
            resourceInputs["nextPriority"] = args?.nextPriority;
            resourceInputs["operateCommunitySets"] = args?.operateCommunitySets;
            resourceInputs["preference"] = args?.preference;
            resourceInputs["prependAsPaths"] = args?.prependAsPaths;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["routeTypes"] = args?.routeTypes;
            resourceInputs["sourceChildInstanceTypes"] = args?.sourceChildInstanceTypes;
            resourceInputs["sourceInstanceIds"] = args?.sourceInstanceIds;
            resourceInputs["sourceInstanceIdsReverseMatch"] = args?.sourceInstanceIdsReverseMatch;
            resourceInputs["sourceRegionIds"] = args?.sourceRegionIds;
            resourceInputs["sourceRouteTableIds"] = args?.sourceRouteTableIds;
            resourceInputs["transitRouterRouteTableId"] = args?.transitRouterRouteTableId;
            resourceInputs["transmitDirection"] = args?.transmitDirection;
            resourceInputs["routeMapId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteMap.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteMap resources.
 */
export interface RouteMapState {
    /**
     * A match statement. It indicates the mode in which the AS path attribute is matched. Valid values: ["Include", "Complete"].
     */
    asPathMatchMode?: pulumi.Input<string>;
    /**
     * The ID of the CEN instance.
     */
    cenId?: pulumi.Input<string>;
    /**
     * The ID of the region to which the CEN instance belongs.
     */
    cenRegionId?: pulumi.Input<string>;
    /**
     * A match statement. It indicates the mode in which the prefix attribute is matched. Valid values: ["Include", "Complete"].
     */
    cidrMatchMode?: pulumi.Input<string>;
    /**
     * A match statement. It indicates the mode in which the community attribute is matched. Valid values: ["Include", "Complete"].
     */
    communityMatchMode?: pulumi.Input<string>;
    /**
     * An action statement. It indicates the mode in which the community attribute is operated. Valid values: ["Additive", "Replace"].
     */
    communityOperateMode?: pulumi.Input<string>;
    /**
     * The description of the route map.
     */
    description?: pulumi.Input<string>;
    /**
     * A match statement that indicates the list of destination instance types. Valid values: ["VPC", "VBR", "CCN", "VPN"].
     */
    destinationChildInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A match statement that indicates the prefix list. The prefix is in the CIDR format. You can enter a maximum of 32 CIDR blocks.
     */
    destinationCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A match statement that indicates the list of IDs of the destination instances.
     */
    destinationInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether to enable the reverse match method for the DestinationInstanceIds match condition. Valid values: ["false", "true"]. Default to "false".
     */
    destinationInstanceIdsReverseMatch?: pulumi.Input<boolean>;
    /**
     * A match statement that indicates the list of IDs of the destination route tables. You can enter a maximum of 32 route table IDs.
     */
    destinationRouteTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The action that is performed to a route if the route matches all the match conditions. Valid values: ["Permit", "Deny"].
     */
    mapResult?: pulumi.Input<string>;
    /**
     * A match statement that indicates the AS path list. The AS path is a well-known mandatory attribute, which describes the numbers of the ASs that a BGP route passes through during transmission.
     */
    matchAsns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A match statement that indicates the community set. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
     */
    matchCommunitySets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The priority of the next route map that is associated with the current route map. Value range: 1 to 100.
     */
    nextPriority?: pulumi.Input<number>;
    /**
     * An action statement that operates the community attribute. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
     */
    operateCommunitySets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An action statement that modifies the priority of the route. Value range: 1 to 100. The default priority of a route is 50. A lower value indicates a higher preference.
     */
    preference?: pulumi.Input<number>;
    /**
     * An action statement that indicates an AS path is prepended when the regional gateway receives or advertises a route.
     */
    prependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The priority of the route map. Value range: 1 to 100. A lower value indicates a higher priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * ID of the RouteMap. It is available in 1.161.0+.
     */
    routeMapId?: pulumi.Input<string>;
    /**
     * A match statement that indicates the list of route types. Valid values: ["System", "Custom", "BGP"].
     */
    routeTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A match statement that indicates the list of source instance types. Valid values: ["VPC", "VBR", "CCN"].
     */
    sourceChildInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A match statement that indicates the list of IDs of the source instances.
     */
    sourceInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether to enable the reverse match method for the SourceInstanceIds match condition. Valid values: ["false", "true"]. Default to "false".
     */
    sourceInstanceIdsReverseMatch?: pulumi.Input<boolean>;
    /**
     * A match statement that indicates the list of IDs of the source regions. You can enter a maximum of 32 region IDs.
     */
    sourceRegionIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A match statement that indicates the list of IDs of the source route tables. You can enter a maximum of 32 route table IDs.
     */
    sourceRouteTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Computed) The status of route map. Valid values: ["Creating", "Active", "Deleting"].
     */
    status?: pulumi.Input<string>;
    /**
     * The routing table ID of the forwarding router. If you do not enter the routing table ID, the routing policy is automatically associated with the default routing table of the forwarding router.
     */
    transitRouterRouteTableId?: pulumi.Input<string>;
    /**
     * The direction in which the route map is applied. Valid values: ["RegionIn", "RegionOut"].
     */
    transmitDirection?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteMap resource.
 */
export interface RouteMapArgs {
    /**
     * A match statement. It indicates the mode in which the AS path attribute is matched. Valid values: ["Include", "Complete"].
     */
    asPathMatchMode?: pulumi.Input<string>;
    /**
     * The ID of the CEN instance.
     */
    cenId: pulumi.Input<string>;
    /**
     * The ID of the region to which the CEN instance belongs.
     */
    cenRegionId: pulumi.Input<string>;
    /**
     * A match statement. It indicates the mode in which the prefix attribute is matched. Valid values: ["Include", "Complete"].
     */
    cidrMatchMode?: pulumi.Input<string>;
    /**
     * A match statement. It indicates the mode in which the community attribute is matched. Valid values: ["Include", "Complete"].
     */
    communityMatchMode?: pulumi.Input<string>;
    /**
     * An action statement. It indicates the mode in which the community attribute is operated. Valid values: ["Additive", "Replace"].
     */
    communityOperateMode?: pulumi.Input<string>;
    /**
     * The description of the route map.
     */
    description?: pulumi.Input<string>;
    /**
     * A match statement that indicates the list of destination instance types. Valid values: ["VPC", "VBR", "CCN", "VPN"].
     */
    destinationChildInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A match statement that indicates the prefix list. The prefix is in the CIDR format. You can enter a maximum of 32 CIDR blocks.
     */
    destinationCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A match statement that indicates the list of IDs of the destination instances.
     */
    destinationInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether to enable the reverse match method for the DestinationInstanceIds match condition. Valid values: ["false", "true"]. Default to "false".
     */
    destinationInstanceIdsReverseMatch?: pulumi.Input<boolean>;
    /**
     * A match statement that indicates the list of IDs of the destination route tables. You can enter a maximum of 32 route table IDs.
     */
    destinationRouteTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The action that is performed to a route if the route matches all the match conditions. Valid values: ["Permit", "Deny"].
     */
    mapResult: pulumi.Input<string>;
    /**
     * A match statement that indicates the AS path list. The AS path is a well-known mandatory attribute, which describes the numbers of the ASs that a BGP route passes through during transmission.
     */
    matchAsns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A match statement that indicates the community set. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
     */
    matchCommunitySets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The priority of the next route map that is associated with the current route map. Value range: 1 to 100.
     */
    nextPriority?: pulumi.Input<number>;
    /**
     * An action statement that operates the community attribute. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
     */
    operateCommunitySets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An action statement that modifies the priority of the route. Value range: 1 to 100. The default priority of a route is 50. A lower value indicates a higher preference.
     */
    preference?: pulumi.Input<number>;
    /**
     * An action statement that indicates an AS path is prepended when the regional gateway receives or advertises a route.
     */
    prependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The priority of the route map. Value range: 1 to 100. A lower value indicates a higher priority.
     */
    priority: pulumi.Input<number>;
    /**
     * A match statement that indicates the list of route types. Valid values: ["System", "Custom", "BGP"].
     */
    routeTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A match statement that indicates the list of source instance types. Valid values: ["VPC", "VBR", "CCN"].
     */
    sourceChildInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A match statement that indicates the list of IDs of the source instances.
     */
    sourceInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether to enable the reverse match method for the SourceInstanceIds match condition. Valid values: ["false", "true"]. Default to "false".
     */
    sourceInstanceIdsReverseMatch?: pulumi.Input<boolean>;
    /**
     * A match statement that indicates the list of IDs of the source regions. You can enter a maximum of 32 region IDs.
     */
    sourceRegionIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A match statement that indicates the list of IDs of the source route tables. You can enter a maximum of 32 route table IDs.
     */
    sourceRouteTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The routing table ID of the forwarding router. If you do not enter the routing table ID, the routing policy is automatically associated with the default routing table of the forwarding router.
     */
    transitRouterRouteTableId?: pulumi.Input<string>;
    /**
     * The direction in which the route map is applied. Valid values: ["RegionIn", "RegionOut"].
     */
    transmitDirection: pulumi.Input<string>;
}
