// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BandwidthLimitArgs, BandwidthLimitState } from "./bandwidthLimit";
export type BandwidthLimit = import("./bandwidthLimit").BandwidthLimit;
export const BandwidthLimit: typeof import("./bandwidthLimit").BandwidthLimit = null as any;
utilities.lazyLoad(exports, ["BandwidthLimit"], () => require("./bandwidthLimit"));

export { BandwidthPackageArgs, BandwidthPackageState } from "./bandwidthPackage";
export type BandwidthPackage = import("./bandwidthPackage").BandwidthPackage;
export const BandwidthPackage: typeof import("./bandwidthPackage").BandwidthPackage = null as any;
utilities.lazyLoad(exports, ["BandwidthPackage"], () => require("./bandwidthPackage"));

export { BandwidthPackageAttachmentArgs, BandwidthPackageAttachmentState } from "./bandwidthPackageAttachment";
export type BandwidthPackageAttachment = import("./bandwidthPackageAttachment").BandwidthPackageAttachment;
export const BandwidthPackageAttachment: typeof import("./bandwidthPackageAttachment").BandwidthPackageAttachment = null as any;
utilities.lazyLoad(exports, ["BandwidthPackageAttachment"], () => require("./bandwidthPackageAttachment"));

export { ChildInstanceRouteEntryToAttachmentArgs, ChildInstanceRouteEntryToAttachmentState } from "./childInstanceRouteEntryToAttachment";
export type ChildInstanceRouteEntryToAttachment = import("./childInstanceRouteEntryToAttachment").ChildInstanceRouteEntryToAttachment;
export const ChildInstanceRouteEntryToAttachment: typeof import("./childInstanceRouteEntryToAttachment").ChildInstanceRouteEntryToAttachment = null as any;
utilities.lazyLoad(exports, ["ChildInstanceRouteEntryToAttachment"], () => require("./childInstanceRouteEntryToAttachment"));

export { FlowLogArgs, FlowLogState } from "./flowLog";
export type FlowLog = import("./flowLog").FlowLog;
export const FlowLog: typeof import("./flowLog").FlowLog = null as any;
utilities.lazyLoad(exports, ["FlowLog"], () => require("./flowLog"));

export { GetBandwidthLimitsArgs, GetBandwidthLimitsResult, GetBandwidthLimitsOutputArgs } from "./getBandwidthLimits";
export const getBandwidthLimits: typeof import("./getBandwidthLimits").getBandwidthLimits = null as any;
export const getBandwidthLimitsOutput: typeof import("./getBandwidthLimits").getBandwidthLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getBandwidthLimits","getBandwidthLimitsOutput"], () => require("./getBandwidthLimits"));

export { GetBandwidthPackagesArgs, GetBandwidthPackagesResult, GetBandwidthPackagesOutputArgs } from "./getBandwidthPackages";
export const getBandwidthPackages: typeof import("./getBandwidthPackages").getBandwidthPackages = null as any;
export const getBandwidthPackagesOutput: typeof import("./getBandwidthPackages").getBandwidthPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getBandwidthPackages","getBandwidthPackagesOutput"], () => require("./getBandwidthPackages"));

export { GetChildInstanceRouteEntryToAttachmentsArgs, GetChildInstanceRouteEntryToAttachmentsResult, GetChildInstanceRouteEntryToAttachmentsOutputArgs } from "./getChildInstanceRouteEntryToAttachments";
export const getChildInstanceRouteEntryToAttachments: typeof import("./getChildInstanceRouteEntryToAttachments").getChildInstanceRouteEntryToAttachments = null as any;
export const getChildInstanceRouteEntryToAttachmentsOutput: typeof import("./getChildInstanceRouteEntryToAttachments").getChildInstanceRouteEntryToAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getChildInstanceRouteEntryToAttachments","getChildInstanceRouteEntryToAttachmentsOutput"], () => require("./getChildInstanceRouteEntryToAttachments"));

export { GetFlowlogsArgs, GetFlowlogsResult, GetFlowlogsOutputArgs } from "./getFlowlogs";
export const getFlowlogs: typeof import("./getFlowlogs").getFlowlogs = null as any;
export const getFlowlogsOutput: typeof import("./getFlowlogs").getFlowlogsOutput = null as any;
utilities.lazyLoad(exports, ["getFlowlogs","getFlowlogsOutput"], () => require("./getFlowlogs"));

export { GetInstanceAttachmentsArgs, GetInstanceAttachmentsResult, GetInstanceAttachmentsOutputArgs } from "./getInstanceAttachments";
export const getInstanceAttachments: typeof import("./getInstanceAttachments").getInstanceAttachments = null as any;
export const getInstanceAttachmentsOutput: typeof import("./getInstanceAttachments").getInstanceAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceAttachments","getInstanceAttachmentsOutput"], () => require("./getInstanceAttachments"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetInterRegionTrafficQosPoliciesArgs, GetInterRegionTrafficQosPoliciesResult, GetInterRegionTrafficQosPoliciesOutputArgs } from "./getInterRegionTrafficQosPolicies";
export const getInterRegionTrafficQosPolicies: typeof import("./getInterRegionTrafficQosPolicies").getInterRegionTrafficQosPolicies = null as any;
export const getInterRegionTrafficQosPoliciesOutput: typeof import("./getInterRegionTrafficQosPolicies").getInterRegionTrafficQosPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getInterRegionTrafficQosPolicies","getInterRegionTrafficQosPoliciesOutput"], () => require("./getInterRegionTrafficQosPolicies"));

export { GetInterRegionTrafficQosQueuesArgs, GetInterRegionTrafficQosQueuesResult, GetInterRegionTrafficQosQueuesOutputArgs } from "./getInterRegionTrafficQosQueues";
export const getInterRegionTrafficQosQueues: typeof import("./getInterRegionTrafficQosQueues").getInterRegionTrafficQosQueues = null as any;
export const getInterRegionTrafficQosQueuesOutput: typeof import("./getInterRegionTrafficQosQueues").getInterRegionTrafficQosQueuesOutput = null as any;
utilities.lazyLoad(exports, ["getInterRegionTrafficQosQueues","getInterRegionTrafficQosQueuesOutput"], () => require("./getInterRegionTrafficQosQueues"));

export { GetPrivateZonesArgs, GetPrivateZonesResult, GetPrivateZonesOutputArgs } from "./getPrivateZones";
export const getPrivateZones: typeof import("./getPrivateZones").getPrivateZones = null as any;
export const getPrivateZonesOutput: typeof import("./getPrivateZones").getPrivateZonesOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateZones","getPrivateZonesOutput"], () => require("./getPrivateZones"));

export { GetRegionRouteEntriesArgs, GetRegionRouteEntriesResult, GetRegionRouteEntriesOutputArgs } from "./getRegionRouteEntries";
export const getRegionRouteEntries: typeof import("./getRegionRouteEntries").getRegionRouteEntries = null as any;
export const getRegionRouteEntriesOutput: typeof import("./getRegionRouteEntries").getRegionRouteEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getRegionRouteEntries","getRegionRouteEntriesOutput"], () => require("./getRegionRouteEntries"));

export { GetRouteEntriesArgs, GetRouteEntriesResult, GetRouteEntriesOutputArgs } from "./getRouteEntries";
export const getRouteEntries: typeof import("./getRouteEntries").getRouteEntries = null as any;
export const getRouteEntriesOutput: typeof import("./getRouteEntries").getRouteEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteEntries","getRouteEntriesOutput"], () => require("./getRouteEntries"));

export { GetRouteMapsArgs, GetRouteMapsResult, GetRouteMapsOutputArgs } from "./getRouteMaps";
export const getRouteMaps: typeof import("./getRouteMaps").getRouteMaps = null as any;
export const getRouteMapsOutput: typeof import("./getRouteMaps").getRouteMapsOutput = null as any;
utilities.lazyLoad(exports, ["getRouteMaps","getRouteMapsOutput"], () => require("./getRouteMaps"));

export { GetRouteServicesArgs, GetRouteServicesResult, GetRouteServicesOutputArgs } from "./getRouteServices";
export const getRouteServices: typeof import("./getRouteServices").getRouteServices = null as any;
export const getRouteServicesOutput: typeof import("./getRouteServices").getRouteServicesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteServices","getRouteServicesOutput"], () => require("./getRouteServices"));

export { GetTrafficMarkingPoliciesArgs, GetTrafficMarkingPoliciesResult, GetTrafficMarkingPoliciesOutputArgs } from "./getTrafficMarkingPolicies";
export const getTrafficMarkingPolicies: typeof import("./getTrafficMarkingPolicies").getTrafficMarkingPolicies = null as any;
export const getTrafficMarkingPoliciesOutput: typeof import("./getTrafficMarkingPolicies").getTrafficMarkingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficMarkingPolicies","getTrafficMarkingPoliciesOutput"], () => require("./getTrafficMarkingPolicies"));

export { GetTransitRouteTableAggregationsArgs, GetTransitRouteTableAggregationsResult, GetTransitRouteTableAggregationsOutputArgs } from "./getTransitRouteTableAggregations";
export const getTransitRouteTableAggregations: typeof import("./getTransitRouteTableAggregations").getTransitRouteTableAggregations = null as any;
export const getTransitRouteTableAggregationsOutput: typeof import("./getTransitRouteTableAggregations").getTransitRouteTableAggregationsOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouteTableAggregations","getTransitRouteTableAggregationsOutput"], () => require("./getTransitRouteTableAggregations"));

export { GetTransitRouterAvailableResourcesArgs, GetTransitRouterAvailableResourcesResult, GetTransitRouterAvailableResourcesOutputArgs } from "./getTransitRouterAvailableResources";
export const getTransitRouterAvailableResources: typeof import("./getTransitRouterAvailableResources").getTransitRouterAvailableResources = null as any;
export const getTransitRouterAvailableResourcesOutput: typeof import("./getTransitRouterAvailableResources").getTransitRouterAvailableResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterAvailableResources","getTransitRouterAvailableResourcesOutput"], () => require("./getTransitRouterAvailableResources"));

export { GetTransitRouterCidrsArgs, GetTransitRouterCidrsResult, GetTransitRouterCidrsOutputArgs } from "./getTransitRouterCidrs";
export const getTransitRouterCidrs: typeof import("./getTransitRouterCidrs").getTransitRouterCidrs = null as any;
export const getTransitRouterCidrsOutput: typeof import("./getTransitRouterCidrs").getTransitRouterCidrsOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterCidrs","getTransitRouterCidrsOutput"], () => require("./getTransitRouterCidrs"));

export { GetTransitRouterMulticastDomainAssociationsArgs, GetTransitRouterMulticastDomainAssociationsResult, GetTransitRouterMulticastDomainAssociationsOutputArgs } from "./getTransitRouterMulticastDomainAssociations";
export const getTransitRouterMulticastDomainAssociations: typeof import("./getTransitRouterMulticastDomainAssociations").getTransitRouterMulticastDomainAssociations = null as any;
export const getTransitRouterMulticastDomainAssociationsOutput: typeof import("./getTransitRouterMulticastDomainAssociations").getTransitRouterMulticastDomainAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterMulticastDomainAssociations","getTransitRouterMulticastDomainAssociationsOutput"], () => require("./getTransitRouterMulticastDomainAssociations"));

export { GetTransitRouterMulticastDomainMembersArgs, GetTransitRouterMulticastDomainMembersResult, GetTransitRouterMulticastDomainMembersOutputArgs } from "./getTransitRouterMulticastDomainMembers";
export const getTransitRouterMulticastDomainMembers: typeof import("./getTransitRouterMulticastDomainMembers").getTransitRouterMulticastDomainMembers = null as any;
export const getTransitRouterMulticastDomainMembersOutput: typeof import("./getTransitRouterMulticastDomainMembers").getTransitRouterMulticastDomainMembersOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterMulticastDomainMembers","getTransitRouterMulticastDomainMembersOutput"], () => require("./getTransitRouterMulticastDomainMembers"));

export { GetTransitRouterMulticastDomainPeerMembersArgs, GetTransitRouterMulticastDomainPeerMembersResult, GetTransitRouterMulticastDomainPeerMembersOutputArgs } from "./getTransitRouterMulticastDomainPeerMembers";
export const getTransitRouterMulticastDomainPeerMembers: typeof import("./getTransitRouterMulticastDomainPeerMembers").getTransitRouterMulticastDomainPeerMembers = null as any;
export const getTransitRouterMulticastDomainPeerMembersOutput: typeof import("./getTransitRouterMulticastDomainPeerMembers").getTransitRouterMulticastDomainPeerMembersOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterMulticastDomainPeerMembers","getTransitRouterMulticastDomainPeerMembersOutput"], () => require("./getTransitRouterMulticastDomainPeerMembers"));

export { GetTransitRouterMulticastDomainSourcesArgs, GetTransitRouterMulticastDomainSourcesResult, GetTransitRouterMulticastDomainSourcesOutputArgs } from "./getTransitRouterMulticastDomainSources";
export const getTransitRouterMulticastDomainSources: typeof import("./getTransitRouterMulticastDomainSources").getTransitRouterMulticastDomainSources = null as any;
export const getTransitRouterMulticastDomainSourcesOutput: typeof import("./getTransitRouterMulticastDomainSources").getTransitRouterMulticastDomainSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterMulticastDomainSources","getTransitRouterMulticastDomainSourcesOutput"], () => require("./getTransitRouterMulticastDomainSources"));

export { GetTransitRouterMulticastDomainsArgs, GetTransitRouterMulticastDomainsResult, GetTransitRouterMulticastDomainsOutputArgs } from "./getTransitRouterMulticastDomains";
export const getTransitRouterMulticastDomains: typeof import("./getTransitRouterMulticastDomains").getTransitRouterMulticastDomains = null as any;
export const getTransitRouterMulticastDomainsOutput: typeof import("./getTransitRouterMulticastDomains").getTransitRouterMulticastDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterMulticastDomains","getTransitRouterMulticastDomainsOutput"], () => require("./getTransitRouterMulticastDomains"));

export { GetTransitRouterPeerAttachmentsArgs, GetTransitRouterPeerAttachmentsResult, GetTransitRouterPeerAttachmentsOutputArgs } from "./getTransitRouterPeerAttachments";
export const getTransitRouterPeerAttachments: typeof import("./getTransitRouterPeerAttachments").getTransitRouterPeerAttachments = null as any;
export const getTransitRouterPeerAttachmentsOutput: typeof import("./getTransitRouterPeerAttachments").getTransitRouterPeerAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterPeerAttachments","getTransitRouterPeerAttachmentsOutput"], () => require("./getTransitRouterPeerAttachments"));

export { GetTransitRouterPrefixListAssociationsArgs, GetTransitRouterPrefixListAssociationsResult, GetTransitRouterPrefixListAssociationsOutputArgs } from "./getTransitRouterPrefixListAssociations";
export const getTransitRouterPrefixListAssociations: typeof import("./getTransitRouterPrefixListAssociations").getTransitRouterPrefixListAssociations = null as any;
export const getTransitRouterPrefixListAssociationsOutput: typeof import("./getTransitRouterPrefixListAssociations").getTransitRouterPrefixListAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterPrefixListAssociations","getTransitRouterPrefixListAssociationsOutput"], () => require("./getTransitRouterPrefixListAssociations"));

export { GetTransitRouterRouteEntriesArgs, GetTransitRouterRouteEntriesResult, GetTransitRouterRouteEntriesOutputArgs } from "./getTransitRouterRouteEntries";
export const getTransitRouterRouteEntries: typeof import("./getTransitRouterRouteEntries").getTransitRouterRouteEntries = null as any;
export const getTransitRouterRouteEntriesOutput: typeof import("./getTransitRouterRouteEntries").getTransitRouterRouteEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterRouteEntries","getTransitRouterRouteEntriesOutput"], () => require("./getTransitRouterRouteEntries"));

export { GetTransitRouterRouteTableAssociationsArgs, GetTransitRouterRouteTableAssociationsResult, GetTransitRouterRouteTableAssociationsOutputArgs } from "./getTransitRouterRouteTableAssociations";
export const getTransitRouterRouteTableAssociations: typeof import("./getTransitRouterRouteTableAssociations").getTransitRouterRouteTableAssociations = null as any;
export const getTransitRouterRouteTableAssociationsOutput: typeof import("./getTransitRouterRouteTableAssociations").getTransitRouterRouteTableAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterRouteTableAssociations","getTransitRouterRouteTableAssociationsOutput"], () => require("./getTransitRouterRouteTableAssociations"));

export { GetTransitRouterRouteTablePropagationsArgs, GetTransitRouterRouteTablePropagationsResult, GetTransitRouterRouteTablePropagationsOutputArgs } from "./getTransitRouterRouteTablePropagations";
export const getTransitRouterRouteTablePropagations: typeof import("./getTransitRouterRouteTablePropagations").getTransitRouterRouteTablePropagations = null as any;
export const getTransitRouterRouteTablePropagationsOutput: typeof import("./getTransitRouterRouteTablePropagations").getTransitRouterRouteTablePropagationsOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterRouteTablePropagations","getTransitRouterRouteTablePropagationsOutput"], () => require("./getTransitRouterRouteTablePropagations"));

export { GetTransitRouterRouteTablesArgs, GetTransitRouterRouteTablesResult, GetTransitRouterRouteTablesOutputArgs } from "./getTransitRouterRouteTables";
export const getTransitRouterRouteTables: typeof import("./getTransitRouterRouteTables").getTransitRouterRouteTables = null as any;
export const getTransitRouterRouteTablesOutput: typeof import("./getTransitRouterRouteTables").getTransitRouterRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterRouteTables","getTransitRouterRouteTablesOutput"], () => require("./getTransitRouterRouteTables"));

export { GetTransitRouterServiceArgs, GetTransitRouterServiceResult, GetTransitRouterServiceOutputArgs } from "./getTransitRouterService";
export const getTransitRouterService: typeof import("./getTransitRouterService").getTransitRouterService = null as any;
export const getTransitRouterServiceOutput: typeof import("./getTransitRouterService").getTransitRouterServiceOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterService","getTransitRouterServiceOutput"], () => require("./getTransitRouterService"));

export { GetTransitRouterVbrAttachmentsArgs, GetTransitRouterVbrAttachmentsResult, GetTransitRouterVbrAttachmentsOutputArgs } from "./getTransitRouterVbrAttachments";
export const getTransitRouterVbrAttachments: typeof import("./getTransitRouterVbrAttachments").getTransitRouterVbrAttachments = null as any;
export const getTransitRouterVbrAttachmentsOutput: typeof import("./getTransitRouterVbrAttachments").getTransitRouterVbrAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterVbrAttachments","getTransitRouterVbrAttachmentsOutput"], () => require("./getTransitRouterVbrAttachments"));

export { GetTransitRouterVpcAttachmentsArgs, GetTransitRouterVpcAttachmentsResult, GetTransitRouterVpcAttachmentsOutputArgs } from "./getTransitRouterVpcAttachments";
export const getTransitRouterVpcAttachments: typeof import("./getTransitRouterVpcAttachments").getTransitRouterVpcAttachments = null as any;
export const getTransitRouterVpcAttachmentsOutput: typeof import("./getTransitRouterVpcAttachments").getTransitRouterVpcAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterVpcAttachments","getTransitRouterVpcAttachmentsOutput"], () => require("./getTransitRouterVpcAttachments"));

export { GetTransitRouterVpnAttachmentsArgs, GetTransitRouterVpnAttachmentsResult, GetTransitRouterVpnAttachmentsOutputArgs } from "./getTransitRouterVpnAttachments";
export const getTransitRouterVpnAttachments: typeof import("./getTransitRouterVpnAttachments").getTransitRouterVpnAttachments = null as any;
export const getTransitRouterVpnAttachmentsOutput: typeof import("./getTransitRouterVpnAttachments").getTransitRouterVpnAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouterVpnAttachments","getTransitRouterVpnAttachmentsOutput"], () => require("./getTransitRouterVpnAttachments"));

export { GetTransitRoutersArgs, GetTransitRoutersResult, GetTransitRoutersOutputArgs } from "./getTransitRouters";
export const getTransitRouters: typeof import("./getTransitRouters").getTransitRouters = null as any;
export const getTransitRoutersOutput: typeof import("./getTransitRouters").getTransitRoutersOutput = null as any;
utilities.lazyLoad(exports, ["getTransitRouters","getTransitRoutersOutput"], () => require("./getTransitRouters"));

export { GetVbrHealthChecksArgs, GetVbrHealthChecksResult, GetVbrHealthChecksOutputArgs } from "./getVbrHealthChecks";
export const getVbrHealthChecks: typeof import("./getVbrHealthChecks").getVbrHealthChecks = null as any;
export const getVbrHealthChecksOutput: typeof import("./getVbrHealthChecks").getVbrHealthChecksOutput = null as any;
utilities.lazyLoad(exports, ["getVbrHealthChecks","getVbrHealthChecksOutput"], () => require("./getVbrHealthChecks"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceAttachmentArgs, InstanceAttachmentState } from "./instanceAttachment";
export type InstanceAttachment = import("./instanceAttachment").InstanceAttachment;
export const InstanceAttachment: typeof import("./instanceAttachment").InstanceAttachment = null as any;
utilities.lazyLoad(exports, ["InstanceAttachment"], () => require("./instanceAttachment"));

export { InstanceGrantArgs, InstanceGrantState } from "./instanceGrant";
export type InstanceGrant = import("./instanceGrant").InstanceGrant;
export const InstanceGrant: typeof import("./instanceGrant").InstanceGrant = null as any;
utilities.lazyLoad(exports, ["InstanceGrant"], () => require("./instanceGrant"));

export { InterRegionTrafficQosPolicyArgs, InterRegionTrafficQosPolicyState } from "./interRegionTrafficQosPolicy";
export type InterRegionTrafficQosPolicy = import("./interRegionTrafficQosPolicy").InterRegionTrafficQosPolicy;
export const InterRegionTrafficQosPolicy: typeof import("./interRegionTrafficQosPolicy").InterRegionTrafficQosPolicy = null as any;
utilities.lazyLoad(exports, ["InterRegionTrafficQosPolicy"], () => require("./interRegionTrafficQosPolicy"));

export { InterRegionTrafficQosQueueArgs, InterRegionTrafficQosQueueState } from "./interRegionTrafficQosQueue";
export type InterRegionTrafficQosQueue = import("./interRegionTrafficQosQueue").InterRegionTrafficQosQueue;
export const InterRegionTrafficQosQueue: typeof import("./interRegionTrafficQosQueue").InterRegionTrafficQosQueue = null as any;
utilities.lazyLoad(exports, ["InterRegionTrafficQosQueue"], () => require("./interRegionTrafficQosQueue"));

export { PrivateZoneArgs, PrivateZoneState } from "./privateZone";
export type PrivateZone = import("./privateZone").PrivateZone;
export const PrivateZone: typeof import("./privateZone").PrivateZone = null as any;
utilities.lazyLoad(exports, ["PrivateZone"], () => require("./privateZone"));

export { RouteEntryArgs, RouteEntryState } from "./routeEntry";
export type RouteEntry = import("./routeEntry").RouteEntry;
export const RouteEntry: typeof import("./routeEntry").RouteEntry = null as any;
utilities.lazyLoad(exports, ["RouteEntry"], () => require("./routeEntry"));

export { RouteMapArgs, RouteMapState } from "./routeMap";
export type RouteMap = import("./routeMap").RouteMap;
export const RouteMap: typeof import("./routeMap").RouteMap = null as any;
utilities.lazyLoad(exports, ["RouteMap"], () => require("./routeMap"));

export { RouteServiceArgs, RouteServiceState } from "./routeService";
export type RouteService = import("./routeService").RouteService;
export const RouteService: typeof import("./routeService").RouteService = null as any;
utilities.lazyLoad(exports, ["RouteService"], () => require("./routeService"));

export { TrafficMarkingPolicyArgs, TrafficMarkingPolicyState } from "./trafficMarkingPolicy";
export type TrafficMarkingPolicy = import("./trafficMarkingPolicy").TrafficMarkingPolicy;
export const TrafficMarkingPolicy: typeof import("./trafficMarkingPolicy").TrafficMarkingPolicy = null as any;
utilities.lazyLoad(exports, ["TrafficMarkingPolicy"], () => require("./trafficMarkingPolicy"));

export { TransitRouteTableAggregationArgs, TransitRouteTableAggregationState } from "./transitRouteTableAggregation";
export type TransitRouteTableAggregation = import("./transitRouteTableAggregation").TransitRouteTableAggregation;
export const TransitRouteTableAggregation: typeof import("./transitRouteTableAggregation").TransitRouteTableAggregation = null as any;
utilities.lazyLoad(exports, ["TransitRouteTableAggregation"], () => require("./transitRouteTableAggregation"));

export { TransitRouterArgs, TransitRouterState } from "./transitRouter";
export type TransitRouter = import("./transitRouter").TransitRouter;
export const TransitRouter: typeof import("./transitRouter").TransitRouter = null as any;
utilities.lazyLoad(exports, ["TransitRouter"], () => require("./transitRouter"));

export { TransitRouterCidrArgs, TransitRouterCidrState } from "./transitRouterCidr";
export type TransitRouterCidr = import("./transitRouterCidr").TransitRouterCidr;
export const TransitRouterCidr: typeof import("./transitRouterCidr").TransitRouterCidr = null as any;
utilities.lazyLoad(exports, ["TransitRouterCidr"], () => require("./transitRouterCidr"));

export { TransitRouterGrantAttachmentArgs, TransitRouterGrantAttachmentState } from "./transitRouterGrantAttachment";
export type TransitRouterGrantAttachment = import("./transitRouterGrantAttachment").TransitRouterGrantAttachment;
export const TransitRouterGrantAttachment: typeof import("./transitRouterGrantAttachment").TransitRouterGrantAttachment = null as any;
utilities.lazyLoad(exports, ["TransitRouterGrantAttachment"], () => require("./transitRouterGrantAttachment"));

export { TransitRouterMulticastDomainArgs, TransitRouterMulticastDomainState } from "./transitRouterMulticastDomain";
export type TransitRouterMulticastDomain = import("./transitRouterMulticastDomain").TransitRouterMulticastDomain;
export const TransitRouterMulticastDomain: typeof import("./transitRouterMulticastDomain").TransitRouterMulticastDomain = null as any;
utilities.lazyLoad(exports, ["TransitRouterMulticastDomain"], () => require("./transitRouterMulticastDomain"));

export { TransitRouterMulticastDomainAssociationArgs, TransitRouterMulticastDomainAssociationState } from "./transitRouterMulticastDomainAssociation";
export type TransitRouterMulticastDomainAssociation = import("./transitRouterMulticastDomainAssociation").TransitRouterMulticastDomainAssociation;
export const TransitRouterMulticastDomainAssociation: typeof import("./transitRouterMulticastDomainAssociation").TransitRouterMulticastDomainAssociation = null as any;
utilities.lazyLoad(exports, ["TransitRouterMulticastDomainAssociation"], () => require("./transitRouterMulticastDomainAssociation"));

export { TransitRouterMulticastDomainMemberArgs, TransitRouterMulticastDomainMemberState } from "./transitRouterMulticastDomainMember";
export type TransitRouterMulticastDomainMember = import("./transitRouterMulticastDomainMember").TransitRouterMulticastDomainMember;
export const TransitRouterMulticastDomainMember: typeof import("./transitRouterMulticastDomainMember").TransitRouterMulticastDomainMember = null as any;
utilities.lazyLoad(exports, ["TransitRouterMulticastDomainMember"], () => require("./transitRouterMulticastDomainMember"));

export { TransitRouterMulticastDomainPeerMemberArgs, TransitRouterMulticastDomainPeerMemberState } from "./transitRouterMulticastDomainPeerMember";
export type TransitRouterMulticastDomainPeerMember = import("./transitRouterMulticastDomainPeerMember").TransitRouterMulticastDomainPeerMember;
export const TransitRouterMulticastDomainPeerMember: typeof import("./transitRouterMulticastDomainPeerMember").TransitRouterMulticastDomainPeerMember = null as any;
utilities.lazyLoad(exports, ["TransitRouterMulticastDomainPeerMember"], () => require("./transitRouterMulticastDomainPeerMember"));

export { TransitRouterMulticastDomainSourceArgs, TransitRouterMulticastDomainSourceState } from "./transitRouterMulticastDomainSource";
export type TransitRouterMulticastDomainSource = import("./transitRouterMulticastDomainSource").TransitRouterMulticastDomainSource;
export const TransitRouterMulticastDomainSource: typeof import("./transitRouterMulticastDomainSource").TransitRouterMulticastDomainSource = null as any;
utilities.lazyLoad(exports, ["TransitRouterMulticastDomainSource"], () => require("./transitRouterMulticastDomainSource"));

export { TransitRouterPeerAttachmentArgs, TransitRouterPeerAttachmentState } from "./transitRouterPeerAttachment";
export type TransitRouterPeerAttachment = import("./transitRouterPeerAttachment").TransitRouterPeerAttachment;
export const TransitRouterPeerAttachment: typeof import("./transitRouterPeerAttachment").TransitRouterPeerAttachment = null as any;
utilities.lazyLoad(exports, ["TransitRouterPeerAttachment"], () => require("./transitRouterPeerAttachment"));

export { TransitRouterPrefixListAssociationArgs, TransitRouterPrefixListAssociationState } from "./transitRouterPrefixListAssociation";
export type TransitRouterPrefixListAssociation = import("./transitRouterPrefixListAssociation").TransitRouterPrefixListAssociation;
export const TransitRouterPrefixListAssociation: typeof import("./transitRouterPrefixListAssociation").TransitRouterPrefixListAssociation = null as any;
utilities.lazyLoad(exports, ["TransitRouterPrefixListAssociation"], () => require("./transitRouterPrefixListAssociation"));

export { TransitRouterRouteEntryArgs, TransitRouterRouteEntryState } from "./transitRouterRouteEntry";
export type TransitRouterRouteEntry = import("./transitRouterRouteEntry").TransitRouterRouteEntry;
export const TransitRouterRouteEntry: typeof import("./transitRouterRouteEntry").TransitRouterRouteEntry = null as any;
utilities.lazyLoad(exports, ["TransitRouterRouteEntry"], () => require("./transitRouterRouteEntry"));

export { TransitRouterRouteTableArgs, TransitRouterRouteTableState } from "./transitRouterRouteTable";
export type TransitRouterRouteTable = import("./transitRouterRouteTable").TransitRouterRouteTable;
export const TransitRouterRouteTable: typeof import("./transitRouterRouteTable").TransitRouterRouteTable = null as any;
utilities.lazyLoad(exports, ["TransitRouterRouteTable"], () => require("./transitRouterRouteTable"));

export { TransitRouterRouteTableAssociationArgs, TransitRouterRouteTableAssociationState } from "./transitRouterRouteTableAssociation";
export type TransitRouterRouteTableAssociation = import("./transitRouterRouteTableAssociation").TransitRouterRouteTableAssociation;
export const TransitRouterRouteTableAssociation: typeof import("./transitRouterRouteTableAssociation").TransitRouterRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["TransitRouterRouteTableAssociation"], () => require("./transitRouterRouteTableAssociation"));

export { TransitRouterRouteTablePropagationArgs, TransitRouterRouteTablePropagationState } from "./transitRouterRouteTablePropagation";
export type TransitRouterRouteTablePropagation = import("./transitRouterRouteTablePropagation").TransitRouterRouteTablePropagation;
export const TransitRouterRouteTablePropagation: typeof import("./transitRouterRouteTablePropagation").TransitRouterRouteTablePropagation = null as any;
utilities.lazyLoad(exports, ["TransitRouterRouteTablePropagation"], () => require("./transitRouterRouteTablePropagation"));

export { TransitRouterVbrAttachmentArgs, TransitRouterVbrAttachmentState } from "./transitRouterVbrAttachment";
export type TransitRouterVbrAttachment = import("./transitRouterVbrAttachment").TransitRouterVbrAttachment;
export const TransitRouterVbrAttachment: typeof import("./transitRouterVbrAttachment").TransitRouterVbrAttachment = null as any;
utilities.lazyLoad(exports, ["TransitRouterVbrAttachment"], () => require("./transitRouterVbrAttachment"));

export { TransitRouterVpcAttachmentArgs, TransitRouterVpcAttachmentState } from "./transitRouterVpcAttachment";
export type TransitRouterVpcAttachment = import("./transitRouterVpcAttachment").TransitRouterVpcAttachment;
export const TransitRouterVpcAttachment: typeof import("./transitRouterVpcAttachment").TransitRouterVpcAttachment = null as any;
utilities.lazyLoad(exports, ["TransitRouterVpcAttachment"], () => require("./transitRouterVpcAttachment"));

export { TransitRouterVpnAttachmentArgs, TransitRouterVpnAttachmentState } from "./transitRouterVpnAttachment";
export type TransitRouterVpnAttachment = import("./transitRouterVpnAttachment").TransitRouterVpnAttachment;
export const TransitRouterVpnAttachment: typeof import("./transitRouterVpnAttachment").TransitRouterVpnAttachment = null as any;
utilities.lazyLoad(exports, ["TransitRouterVpnAttachment"], () => require("./transitRouterVpnAttachment"));

export { VbrHealthCheckArgs, VbrHealthCheckState } from "./vbrHealthCheck";
export type VbrHealthCheck = import("./vbrHealthCheck").VbrHealthCheck;
export const VbrHealthCheck: typeof import("./vbrHealthCheck").VbrHealthCheck = null as any;
utilities.lazyLoad(exports, ["VbrHealthCheck"], () => require("./vbrHealthCheck"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:cen/bandwidthLimit:BandwidthLimit":
                return new BandwidthLimit(name, <any>undefined, { urn })
            case "alicloud:cen/bandwidthPackage:BandwidthPackage":
                return new BandwidthPackage(name, <any>undefined, { urn })
            case "alicloud:cen/bandwidthPackageAttachment:BandwidthPackageAttachment":
                return new BandwidthPackageAttachment(name, <any>undefined, { urn })
            case "alicloud:cen/childInstanceRouteEntryToAttachment:ChildInstanceRouteEntryToAttachment":
                return new ChildInstanceRouteEntryToAttachment(name, <any>undefined, { urn })
            case "alicloud:cen/flowLog:FlowLog":
                return new FlowLog(name, <any>undefined, { urn })
            case "alicloud:cen/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "alicloud:cen/instanceAttachment:InstanceAttachment":
                return new InstanceAttachment(name, <any>undefined, { urn })
            case "alicloud:cen/instanceGrant:InstanceGrant":
                return new InstanceGrant(name, <any>undefined, { urn })
            case "alicloud:cen/interRegionTrafficQosPolicy:InterRegionTrafficQosPolicy":
                return new InterRegionTrafficQosPolicy(name, <any>undefined, { urn })
            case "alicloud:cen/interRegionTrafficQosQueue:InterRegionTrafficQosQueue":
                return new InterRegionTrafficQosQueue(name, <any>undefined, { urn })
            case "alicloud:cen/privateZone:PrivateZone":
                return new PrivateZone(name, <any>undefined, { urn })
            case "alicloud:cen/routeEntry:RouteEntry":
                return new RouteEntry(name, <any>undefined, { urn })
            case "alicloud:cen/routeMap:RouteMap":
                return new RouteMap(name, <any>undefined, { urn })
            case "alicloud:cen/routeService:RouteService":
                return new RouteService(name, <any>undefined, { urn })
            case "alicloud:cen/trafficMarkingPolicy:TrafficMarkingPolicy":
                return new TrafficMarkingPolicy(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouteTableAggregation:TransitRouteTableAggregation":
                return new TransitRouteTableAggregation(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouter:TransitRouter":
                return new TransitRouter(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterCidr:TransitRouterCidr":
                return new TransitRouterCidr(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterGrantAttachment:TransitRouterGrantAttachment":
                return new TransitRouterGrantAttachment(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterMulticastDomain:TransitRouterMulticastDomain":
                return new TransitRouterMulticastDomain(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterMulticastDomainAssociation:TransitRouterMulticastDomainAssociation":
                return new TransitRouterMulticastDomainAssociation(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterMulticastDomainMember:TransitRouterMulticastDomainMember":
                return new TransitRouterMulticastDomainMember(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterMulticastDomainPeerMember:TransitRouterMulticastDomainPeerMember":
                return new TransitRouterMulticastDomainPeerMember(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterMulticastDomainSource:TransitRouterMulticastDomainSource":
                return new TransitRouterMulticastDomainSource(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterPeerAttachment:TransitRouterPeerAttachment":
                return new TransitRouterPeerAttachment(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterPrefixListAssociation:TransitRouterPrefixListAssociation":
                return new TransitRouterPrefixListAssociation(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterRouteEntry:TransitRouterRouteEntry":
                return new TransitRouterRouteEntry(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterRouteTable:TransitRouterRouteTable":
                return new TransitRouterRouteTable(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterRouteTableAssociation:TransitRouterRouteTableAssociation":
                return new TransitRouterRouteTableAssociation(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterRouteTablePropagation:TransitRouterRouteTablePropagation":
                return new TransitRouterRouteTablePropagation(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterVbrAttachment:TransitRouterVbrAttachment":
                return new TransitRouterVbrAttachment(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterVpcAttachment:TransitRouterVpcAttachment":
                return new TransitRouterVpcAttachment(name, <any>undefined, { urn })
            case "alicloud:cen/transitRouterVpnAttachment:TransitRouterVpnAttachment":
                return new TransitRouterVpnAttachment(name, <any>undefined, { urn })
            case "alicloud:cen/vbrHealthCheck:VbrHealthCheck":
                return new VbrHealthCheck(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "cen/bandwidthLimit", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/bandwidthPackage", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/bandwidthPackageAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/childInstanceRouteEntryToAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/flowLog", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/instance", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/instanceAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/instanceGrant", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/interRegionTrafficQosPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/interRegionTrafficQosQueue", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/privateZone", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/routeEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/routeMap", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/routeService", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/trafficMarkingPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouteTableAggregation", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouter", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterCidr", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterGrantAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterMulticastDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterMulticastDomainAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterMulticastDomainMember", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterMulticastDomainPeerMember", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterMulticastDomainSource", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterPeerAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterPrefixListAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterRouteEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterRouteTable", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterRouteTableAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterRouteTablePropagation", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterVbrAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterVpcAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/transitRouterVpnAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "cen/vbrHealthCheck", _module)
