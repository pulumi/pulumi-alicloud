// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a CEN route entry resource. Cloud Enterprise Network (CEN) supports publishing and withdrawing route entries of attached networks. You can publish a route entry of an attached VPC or VBR to a CEN instance, then other attached networks can learn the route if there is no route conflict. You can withdraw a published route entry when CEN does not need it any more.
 *
 * For information about CEN route entries publishment and how to use it, see [Manage network routes](https://www.alibabacloud.com/help/doc-detail/86980.htm).
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * // Create a cen_route_entry resource and use it to publish a route entry pointing to an ECS.
 * const hz = new alicloud.Provider("hz", {region: "cn-hangzhou"});
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-testAccCenRouteEntryConfig";
 * const defaultZones = alicloud.getZones({
 *     availableDiskCategory: "cloud_efficiency",
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultInstanceTypes = defaultZones.then(defaultZones => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: defaultZones.zones?[0]?.id,
 *     cpuCoreCount: 1,
 *     memorySize: 2,
 * }));
 * const defaultImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_18.*64",
 *     mostRecent: true,
 *     owners: "system",
 * });
 * const vpc = new alicloud.vpc.Network("vpc", {
 *     vpcName: name,
 *     cidrBlock: "172.16.0.0/12",
 * }, {
 *     provider: alicloud.hz,
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("defaultSwitch", {
 *     vpcId: vpc.id,
 *     cidrBlock: "172.16.0.0/21",
 *     zoneId: defaultZones.then(defaultZones => defaultZones.zones?[0]?.id),
 *     vswitchName: name,
 * }, {
 *     provider: alicloud.hz,
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("defaultSecurityGroup", {
 *     description: "foo",
 *     vpcId: vpc.id,
 * }, {
 *     provider: alicloud.hz,
 * });
 * const defaultInstance = new alicloud.ecs.Instance("defaultInstance", {
 *     vswitchId: defaultSwitch.id,
 *     imageId: defaultImages.then(defaultImages => defaultImages.images?[0]?.id),
 *     instanceType: defaultInstanceTypes.then(defaultInstanceTypes => defaultInstanceTypes.instanceTypes?[0]?.id),
 *     systemDiskCategory: "cloud_efficiency",
 *     internetChargeType: "PayByTraffic",
 *     internetMaxBandwidthOut: 5,
 *     securityGroups: [defaultSecurityGroup.id],
 *     instanceName: name,
 * }, {
 *     provider: alicloud.hz,
 * });
 * const cen = new alicloud.cen.Instance("cen", {});
 * const attach = new alicloud.cen.InstanceAttachment("attach", {
 *     instanceId: cen.id,
 *     childInstanceId: vpc.id,
 *     childInstanceType: "VPC",
 *     childInstanceRegionId: "cn-hangzhou",
 * }, {
 *     dependsOn: [defaultSwitch],
 * });
 * const route = new alicloud.vpc.RouteEntry("route", {
 *     routeTableId: vpc.routeTableId,
 *     destinationCidrblock: "11.0.0.0/16",
 *     nexthopType: "Instance",
 *     nexthopId: defaultInstance.id,
 * }, {
 *     provider: alicloud.hz,
 * });
 * const foo = new alicloud.cen.RouteEntry("foo", {
 *     instanceId: cen.id,
 *     routeTableId: vpc.routeTableId,
 *     cidrBlock: route.destinationCidrblock,
 * }, {
 *     provider: alicloud.hz,
 *     dependsOn: [attach],
 * });
 * ```
 *
 * ## Import
 *
 * CEN instance can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cen/routeEntry:RouteEntry example cen-abc123456:vtb-abc123:192.168.0.0/24
 * ```
 */
export class RouteEntry extends pulumi.CustomResource {
    /**
     * Get an existing RouteEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteEntryState, opts?: pulumi.CustomResourceOptions): RouteEntry {
        return new RouteEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cen/routeEntry:RouteEntry';

    /**
     * Returns true if the given object is an instance of RouteEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteEntry.__pulumiType;
    }

    /**
     * The destination CIDR block of the route entry to publish.
     */
    public readonly cidrBlock!: pulumi.Output<string>;
    /**
     * The ID of the CEN.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The route table of the attached VBR or VPC.
     */
    public readonly routeTableId!: pulumi.Output<string>;

    /**
     * Create a RouteEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteEntryArgs | RouteEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteEntryState | undefined;
            resourceInputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["routeTableId"] = state ? state.routeTableId : undefined;
        } else {
            const args = argsOrState as RouteEntryArgs | undefined;
            if ((!args || args.cidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidrBlock'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.routeTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeTableId'");
            }
            resourceInputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["routeTableId"] = args ? args.routeTableId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteEntry resources.
 */
export interface RouteEntryState {
    /**
     * The destination CIDR block of the route entry to publish.
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * The ID of the CEN.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The route table of the attached VBR or VPC.
     */
    routeTableId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteEntry resource.
 */
export interface RouteEntryArgs {
    /**
     * The destination CIDR block of the route entry to publish.
     */
    cidrBlock: pulumi.Input<string>;
    /**
     * The ID of the CEN.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The route table of the attached VBR or VPC.
     */
    routeTableId: pulumi.Input<string>;
}
