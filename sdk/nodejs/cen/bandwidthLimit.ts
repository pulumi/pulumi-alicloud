// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a CEN cross-regional interconnection bandwidth resource. To connect networks in different regions, you must set cross-region interconnection bandwidth after buying a bandwidth package. The total bandwidth set for all the interconnected regions of a bandwidth package cannot exceed the bandwidth of the bandwidth package. By default, 1 Kbps bandwidth is provided for connectivity test. To run normal business, you must buy a bandwidth package and set a proper interconnection bandwidth.
 *
 * For example, a CEN instance is bound to a bandwidth package of 20 Mbps and  the interconnection areas are Mainland China and North America. You can set the cross-region interconnection bandwidth between US West 1 and China East 1, China East 2, China South 1, and so on. However, the total bandwidth set for all the interconnected regions cannot exceed 20  Mbps.
 *
 * For information about CEN and how to use it, see [Cross-region interconnection bandwidth](https://www.alibabacloud.com/help/doc-detail/65983.htm)
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-testAccCenBandwidthLimitConfig";
 * const fra = new alicloud.Provider("fra", {region: "eu-central-1"});
 * const sh = new alicloud.Provider("sh", {region: "cn-shanghai"});
 * const vpc1 = new alicloud.vpc.Network("vpc1", {
 *     vpcName: name,
 *     cidrBlock: "192.168.0.0/16",
 * }, {
 *     provider: alicloud.fra,
 * });
 * const vpc2 = new alicloud.vpc.Network("vpc2", {cidrBlock: "172.16.0.0/12"}, {
 *     provider: alicloud.sh,
 * });
 * const cen = new alicloud.cen.Instance("cen", {description: "tf-testAccCenBandwidthLimitConfigDescription"});
 * const bwp = new alicloud.cen.BandwidthPackage("bwp", {
 *     bandwidth: 5,
 *     geographicRegionIds: [
 *         "Europe",
 *         "China",
 *     ],
 * });
 * const bwpAttach = new alicloud.cen.BandwidthPackageAttachment("bwpAttach", {
 *     instanceId: cen.id,
 *     bandwidthPackageId: bwp.id,
 * });
 * const vpcAttach1 = new alicloud.cen.InstanceAttachment("vpcAttach1", {
 *     instanceId: cen.id,
 *     childInstanceId: vpc1.id,
 *     childInstanceType: "VPC",
 *     childInstanceRegionId: "eu-central-1",
 * });
 * const vpcAttach2 = new alicloud.cen.InstanceAttachment("vpcAttach2", {
 *     instanceId: cen.id,
 *     childInstanceId: vpc2.id,
 *     childInstanceType: "VPC",
 *     childInstanceRegionId: "cn-shanghai",
 * });
 * const foo = new alicloud.cen.BandwidthLimit("foo", {
 *     instanceId: cen.id,
 *     regionIds: [
 *         "eu-central-1",
 *         "cn-shanghai",
 *     ],
 *     bandwidthLimit: 4,
 * }, {
 *     dependsOn: [
 *         bwpAttach,
 *         vpcAttach1,
 *         vpcAttach2,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * CEN bandwidth limit can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cen/bandwidthLimit:BandwidthLimit example cen-abc123456:cn-beijing:eu-west-1
 * ```
 */
export class BandwidthLimit extends pulumi.CustomResource {
    /**
     * Get an existing BandwidthLimit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BandwidthLimitState, opts?: pulumi.CustomResourceOptions): BandwidthLimit {
        return new BandwidthLimit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cen/bandwidthLimit:BandwidthLimit';

    /**
     * Returns true if the given object is an instance of BandwidthLimit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BandwidthLimit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BandwidthLimit.__pulumiType;
    }

    /**
     * The bandwidth configured for the interconnected regions communication.
     */
    public readonly bandwidthLimit!: pulumi.Output<number>;
    /**
     * The ID of the CEN.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * List of the two regions to interconnect. Must be two different regions.
     */
    public readonly regionIds!: pulumi.Output<string[]>;

    /**
     * Create a BandwidthLimit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BandwidthLimitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BandwidthLimitArgs | BandwidthLimitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BandwidthLimitState | undefined;
            resourceInputs["bandwidthLimit"] = state ? state.bandwidthLimit : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["regionIds"] = state ? state.regionIds : undefined;
        } else {
            const args = argsOrState as BandwidthLimitArgs | undefined;
            if ((!args || args.bandwidthLimit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bandwidthLimit'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.regionIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionIds'");
            }
            resourceInputs["bandwidthLimit"] = args ? args.bandwidthLimit : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["regionIds"] = args ? args.regionIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BandwidthLimit.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BandwidthLimit resources.
 */
export interface BandwidthLimitState {
    /**
     * The bandwidth configured for the interconnected regions communication.
     */
    bandwidthLimit?: pulumi.Input<number>;
    /**
     * The ID of the CEN.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * List of the two regions to interconnect. Must be two different regions.
     */
    regionIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a BandwidthLimit resource.
 */
export interface BandwidthLimitArgs {
    /**
     * The bandwidth configured for the interconnected regions communication.
     */
    bandwidthLimit: pulumi.Input<number>;
    /**
     * The ID of the CEN.
     */
    instanceId: pulumi.Input<string>;
    /**
     * List of the two regions to interconnect. Must be two different regions.
     */
    regionIds: pulumi.Input<pulumi.Input<string>[]>;
}
