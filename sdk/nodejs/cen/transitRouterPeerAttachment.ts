// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a CEN transit router peer attachment resource that associate the transit router with the CEN instance. [What is CEN transit router peer attachment](https://help.aliyun.com/document_detail/261363.html)
 *
 * > **NOTE:** Available in 1.128.0+
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-testAcccExample";
 * const us = new alicloud.Provider("us", {region: "us-east-1"});
 * const cn = new alicloud.Provider("cn", {region: "cn-hangzhou"});
 * const defaultInstance = new alicloud.cen.Instance("defaultInstance", {
 *     cenInstanceName: name,
 *     protectionLevel: "REDUCED",
 * }, {
 *     provider: alicloud.cn,
 * });
 * const defaultBandwidthPackage = new alicloud.cen.BandwidthPackage("defaultBandwidthPackage", {
 *     bandwidth: 5,
 *     cenBandwidthPackageName: name,
 *     geographicRegionAId: "China",
 *     geographicRegionBId: "North-America",
 * });
 * const defaultBandwidthPackageAttachment = new alicloud.cen.BandwidthPackageAttachment("defaultBandwidthPackageAttachment", {
 *     instanceId: defaultInstance.id,
 *     bandwidthPackageId: defaultBandwidthPackage.id,
 * }, {
 *     provider: alicloud.cn,
 * });
 * const cnTransitRouter = new alicloud.cen.TransitRouter("cnTransitRouter", {cenId: defaultInstance.id}, {
 *     provider: alicloud.cn,
 *     dependsOn: [defaultBandwidthPackageAttachment],
 * });
 * const usTransitRouter = new alicloud.cen.TransitRouter("usTransitRouter", {cenId: defaultInstance.id}, {
 *     provider: alicloud.us,
 *     dependsOn: [alicloud_cen_transit_router.default_0],
 * });
 * const defaultTransitRouterPeerAttachment = new alicloud.cen.TransitRouterPeerAttachment("defaultTransitRouterPeerAttachment", {
 *     cenId: defaultInstance.id,
 *     transitRouterId: cnTransitRouter.transitRouterId,
 *     peerTransitRouterRegionId: "us-east-1",
 *     peerTransitRouterId: usTransitRouter.transitRouterId,
 *     cenBandwidthPackageId: defaultBandwidthPackageAttachment.bandwidthPackageId,
 *     bandwidth: 5,
 *     transitRouterAttachmentDescription: name,
 *     transitRouterAttachmentName: name,
 * }, {
 *     provider: alicloud.cn,
 * });
 * ```
 *
 * ## Import
 *
 * CEN instance can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cen/transitRouterPeerAttachment:TransitRouterPeerAttachment example tr-********:tr-attach-*******
 * ```
 */
export class TransitRouterPeerAttachment extends pulumi.CustomResource {
    /**
     * Get an existing TransitRouterPeerAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransitRouterPeerAttachmentState, opts?: pulumi.CustomResourceOptions): TransitRouterPeerAttachment {
        return new TransitRouterPeerAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cen/transitRouterPeerAttachment:TransitRouterPeerAttachment';

    /**
     * Returns true if the given object is an instance of TransitRouterPeerAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransitRouterPeerAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransitRouterPeerAttachment.__pulumiType;
    }

    /**
     * Auto publish route enabled. The system default value is `false`.
     */
    public readonly autoPublishRouteEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The bandwidth of the bandwidth package.
     */
    public readonly bandwidth!: pulumi.Output<number | undefined>;
    /**
     * The ID of the bandwidth package. If you do not enter the ID of the package, it means you are using the test. The system default test is 1bps, demonstrating that you test network connectivity
     */
    public readonly cenBandwidthPackageId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the CEN.
     */
    public readonly cenId!: pulumi.Output<string>;
    /**
     * Whether to perform pre-check for this request, including permission, instance status verification, etc.
     */
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the peer transit router.
     */
    public readonly peerTransitRouterId!: pulumi.Output<string>;
    /**
     * The region ID of peer transit router.
     */
    public readonly peerTransitRouterRegionId!: pulumi.Output<string>;
    /**
     * The resource type to attachment. Only support `VR` and default value is `VR`.
     */
    public readonly resourceType!: pulumi.Output<string | undefined>;
    /**
     * Whether to association route table. System default is `false`.
     */
    public readonly routeTableAssociationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to propagation route table. System default is `false`.
     */
    public readonly routeTablePropagationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The associating status of the network.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The description of transit router attachment. The description is 2~256 characters long and must start with a letter or Chinese, but cannot start with `http://` or `https://`.
     */
    public readonly transitRouterAttachmentDescription!: pulumi.Output<string | undefined>;
    /**
     * The ID of transit router attachment id.
     */
    public /*out*/ readonly transitRouterAttachmentId!: pulumi.Output<string>;
    /**
     * The name of transit router attachment. The name is 2~128 characters in length, starts with uppercase and lowercase letters or Chinese, and can contain numbers, underscores (_) and dashes (-)
     */
    public readonly transitRouterAttachmentName!: pulumi.Output<string | undefined>;
    /**
     * The ID of the transit router to attach.
     */
    public readonly transitRouterId!: pulumi.Output<string | undefined>;

    /**
     * Create a TransitRouterPeerAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransitRouterPeerAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransitRouterPeerAttachmentArgs | TransitRouterPeerAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransitRouterPeerAttachmentState | undefined;
            resourceInputs["autoPublishRouteEnabled"] = state ? state.autoPublishRouteEnabled : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["cenBandwidthPackageId"] = state ? state.cenBandwidthPackageId : undefined;
            resourceInputs["cenId"] = state ? state.cenId : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["peerTransitRouterId"] = state ? state.peerTransitRouterId : undefined;
            resourceInputs["peerTransitRouterRegionId"] = state ? state.peerTransitRouterRegionId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["routeTableAssociationEnabled"] = state ? state.routeTableAssociationEnabled : undefined;
            resourceInputs["routeTablePropagationEnabled"] = state ? state.routeTablePropagationEnabled : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["transitRouterAttachmentDescription"] = state ? state.transitRouterAttachmentDescription : undefined;
            resourceInputs["transitRouterAttachmentId"] = state ? state.transitRouterAttachmentId : undefined;
            resourceInputs["transitRouterAttachmentName"] = state ? state.transitRouterAttachmentName : undefined;
            resourceInputs["transitRouterId"] = state ? state.transitRouterId : undefined;
        } else {
            const args = argsOrState as TransitRouterPeerAttachmentArgs | undefined;
            if ((!args || args.cenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cenId'");
            }
            if ((!args || args.peerTransitRouterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerTransitRouterId'");
            }
            if ((!args || args.peerTransitRouterRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerTransitRouterRegionId'");
            }
            resourceInputs["autoPublishRouteEnabled"] = args ? args.autoPublishRouteEnabled : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["cenBandwidthPackageId"] = args ? args.cenBandwidthPackageId : undefined;
            resourceInputs["cenId"] = args ? args.cenId : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["peerTransitRouterId"] = args ? args.peerTransitRouterId : undefined;
            resourceInputs["peerTransitRouterRegionId"] = args ? args.peerTransitRouterRegionId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["routeTableAssociationEnabled"] = args ? args.routeTableAssociationEnabled : undefined;
            resourceInputs["routeTablePropagationEnabled"] = args ? args.routeTablePropagationEnabled : undefined;
            resourceInputs["transitRouterAttachmentDescription"] = args ? args.transitRouterAttachmentDescription : undefined;
            resourceInputs["transitRouterAttachmentName"] = args ? args.transitRouterAttachmentName : undefined;
            resourceInputs["transitRouterId"] = args ? args.transitRouterId : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["transitRouterAttachmentId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransitRouterPeerAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TransitRouterPeerAttachment resources.
 */
export interface TransitRouterPeerAttachmentState {
    /**
     * Auto publish route enabled. The system default value is `false`.
     */
    autoPublishRouteEnabled?: pulumi.Input<boolean>;
    /**
     * The bandwidth of the bandwidth package.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * The ID of the bandwidth package. If you do not enter the ID of the package, it means you are using the test. The system default test is 1bps, demonstrating that you test network connectivity
     */
    cenBandwidthPackageId?: pulumi.Input<string>;
    /**
     * The ID of the CEN.
     */
    cenId?: pulumi.Input<string>;
    /**
     * Whether to perform pre-check for this request, including permission, instance status verification, etc.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The ID of the peer transit router.
     */
    peerTransitRouterId?: pulumi.Input<string>;
    /**
     * The region ID of peer transit router.
     */
    peerTransitRouterRegionId?: pulumi.Input<string>;
    /**
     * The resource type to attachment. Only support `VR` and default value is `VR`.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Whether to association route table. System default is `false`.
     */
    routeTableAssociationEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to propagation route table. System default is `false`.
     */
    routeTablePropagationEnabled?: pulumi.Input<boolean>;
    /**
     * The associating status of the network.
     */
    status?: pulumi.Input<string>;
    /**
     * The description of transit router attachment. The description is 2~256 characters long and must start with a letter or Chinese, but cannot start with `http://` or `https://`.
     */
    transitRouterAttachmentDescription?: pulumi.Input<string>;
    /**
     * The ID of transit router attachment id.
     */
    transitRouterAttachmentId?: pulumi.Input<string>;
    /**
     * The name of transit router attachment. The name is 2~128 characters in length, starts with uppercase and lowercase letters or Chinese, and can contain numbers, underscores (_) and dashes (-)
     */
    transitRouterAttachmentName?: pulumi.Input<string>;
    /**
     * The ID of the transit router to attach.
     */
    transitRouterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TransitRouterPeerAttachment resource.
 */
export interface TransitRouterPeerAttachmentArgs {
    /**
     * Auto publish route enabled. The system default value is `false`.
     */
    autoPublishRouteEnabled?: pulumi.Input<boolean>;
    /**
     * The bandwidth of the bandwidth package.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * The ID of the bandwidth package. If you do not enter the ID of the package, it means you are using the test. The system default test is 1bps, demonstrating that you test network connectivity
     */
    cenBandwidthPackageId?: pulumi.Input<string>;
    /**
     * The ID of the CEN.
     */
    cenId: pulumi.Input<string>;
    /**
     * Whether to perform pre-check for this request, including permission, instance status verification, etc.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The ID of the peer transit router.
     */
    peerTransitRouterId: pulumi.Input<string>;
    /**
     * The region ID of peer transit router.
     */
    peerTransitRouterRegionId: pulumi.Input<string>;
    /**
     * The resource type to attachment. Only support `VR` and default value is `VR`.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Whether to association route table. System default is `false`.
     */
    routeTableAssociationEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to propagation route table. System default is `false`.
     */
    routeTablePropagationEnabled?: pulumi.Input<boolean>;
    /**
     * The description of transit router attachment. The description is 2~256 characters long and must start with a letter or Chinese, but cannot start with `http://` or `https://`.
     */
    transitRouterAttachmentDescription?: pulumi.Input<string>;
    /**
     * The name of transit router attachment. The name is 2~128 characters in length, starts with uppercase and lowercase letters or Chinese, and can contain numbers, underscores (_) and dashes (-)
     */
    transitRouterAttachmentName?: pulumi.Input<string>;
    /**
     * The ID of the transit router to attach.
     */
    transitRouterId?: pulumi.Input<string>;
}
