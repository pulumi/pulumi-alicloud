// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides CEN flow logs available to the user.
 *
 * > **NOTE:** Available since v1.78.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultc5kxyC = new alicloud.cen.Instance("defaultc5kxyC", {cenInstanceName: name});
 * const defaultVw2U9u = new alicloud.cen.TransitRouter("defaultVw2U9u", {cenId: defaultc5kxyC.id});
 * const defaultProject = new alicloud.log.Project("default", {
 *     projectName: `${name}-${defaultInteger.result}`,
 *     description: "terraform-example",
 * });
 * const defaultStore = new alicloud.log.Store("default", {
 *     projectName: defaultProject.projectName,
 *     logstoreName: `${name}-${defaultInteger.result}`,
 *     shardCount: 3,
 *     autoSplit: true,
 *     maxSplitShardCount: 60,
 *     appendMeta: true,
 * });
 * const defaultFlowLog = new alicloud.cen.FlowLog("default", {
 *     projectName: defaultStore.projectName,
 *     flowLogName: `${name}-${defaultInteger.result}`,
 *     logFormatString: "${srcaddr}${dstaddr}${bytes}",
 *     cenId: defaultc5kxyC.id,
 *     logStoreName: defaultStore.logstoreName,
 *     interval: 600,
 *     status: "Active",
 *     transitRouterId: defaultVw2U9u.transitRouterId,
 *     description: "flowlog-resource-example-1",
 * });
 * const default = alicloud.cen.getFlowlogsOutput({
 *     ids: [defaultFlowLog.id],
 * });
 * export const firstCenFlowlogId = _default.apply(_default => _default.flowlogs?.[0]?.id);
 * ```
 */
export function getFlowlogs(args?: GetFlowlogsArgs, opts?: pulumi.InvokeOptions): Promise<GetFlowlogsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:cen/getFlowlogs:getFlowlogs", {
        "cenId": args.cenId,
        "description": args.description,
        "flowLogId": args.flowLogId,
        "flowLogName": args.flowLogName,
        "flowLogVersion": args.flowLogVersion,
        "ids": args.ids,
        "interval": args.interval,
        "logStoreName": args.logStoreName,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "pageNumber": args.pageNumber,
        "pageSize": args.pageSize,
        "projectName": args.projectName,
        "regionId": args.regionId,
        "status": args.status,
        "transitRouterId": args.transitRouterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFlowlogs.
 */
export interface GetFlowlogsArgs {
    /**
     * The ID of Cen instance.
     */
    cenId?: string;
    /**
     * The description of the flowlog.
     */
    description?: string;
    /**
     * The ID of FlowLog.
     */
    flowLogId?: string;
    /**
     * The name of the flowlog.
     */
    flowLogName?: string;
    /**
     * Flowlog Version.
     */
    flowLogVersion?: string;
    /**
     * A list of Flow Log IDs.
     */
    ids?: string[];
    /**
     * The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
     */
    interval?: number;
    /**
     * The LogStore that stores the flowlog.
     */
    logStoreName?: string;
    /**
     * A regex string to filter results by Group Metric Rule name.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: string;
    /**
     * Current page number.
     */
    pageNumber?: number;
    /**
     * Number of records per page.
     */
    pageSize?: number;
    /**
     * The Project that stores the flowlog.
     */
    projectName?: string;
    /**
     * Region id
     */
    regionId?: string;
    /**
     * The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
     */
    status?: string;
    /**
     * Transit Router ID
     */
    transitRouterId?: string;
}

/**
 * A collection of values returned by getFlowlogs.
 */
export interface GetFlowlogsResult {
    /**
     * The ID of Cen instance.
     */
    readonly cenId?: string;
    /**
     * The description of the flowlog.
     */
    readonly description?: string;
    /**
     * The ID of FlowLog.
     */
    readonly flowLogId?: string;
    /**
     * The name of the flowlog.
     */
    readonly flowLogName?: string;
    /**
     * (Available since v1.236.0) Flowlog Version.
     */
    readonly flowLogVersion?: string;
    /**
     * A list of Flow Log Entries. Each element contains the following attributes:
     */
    readonly flowlogs: outputs.cen.GetFlowlogsFlowlog[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A list of Flow Log IDs.
     */
    readonly ids: string[];
    /**
     * (Available since v1.236.0) The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
     */
    readonly interval?: number;
    /**
     * The LogStore that stores the flowlog.
     */
    readonly logStoreName?: string;
    readonly nameRegex?: string;
    /**
     * A list of name of Flow Logs.
     */
    readonly names: string[];
    readonly outputFile?: string;
    readonly pageNumber?: number;
    readonly pageSize?: number;
    /**
     * The Project that stores the flowlog.
     */
    readonly projectName?: string;
    /**
     * (Available since v1.236.0) Region Id.
     */
    readonly regionId?: string;
    /**
     * The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
     */
    readonly status?: string;
    /**
     * (Available since v1.236.0) Transit Router ID.
     */
    readonly transitRouterId?: string;
}
/**
 * This data source provides CEN flow logs available to the user.
 *
 * > **NOTE:** Available since v1.78.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultc5kxyC = new alicloud.cen.Instance("defaultc5kxyC", {cenInstanceName: name});
 * const defaultVw2U9u = new alicloud.cen.TransitRouter("defaultVw2U9u", {cenId: defaultc5kxyC.id});
 * const defaultProject = new alicloud.log.Project("default", {
 *     projectName: `${name}-${defaultInteger.result}`,
 *     description: "terraform-example",
 * });
 * const defaultStore = new alicloud.log.Store("default", {
 *     projectName: defaultProject.projectName,
 *     logstoreName: `${name}-${defaultInteger.result}`,
 *     shardCount: 3,
 *     autoSplit: true,
 *     maxSplitShardCount: 60,
 *     appendMeta: true,
 * });
 * const defaultFlowLog = new alicloud.cen.FlowLog("default", {
 *     projectName: defaultStore.projectName,
 *     flowLogName: `${name}-${defaultInteger.result}`,
 *     logFormatString: "${srcaddr}${dstaddr}${bytes}",
 *     cenId: defaultc5kxyC.id,
 *     logStoreName: defaultStore.logstoreName,
 *     interval: 600,
 *     status: "Active",
 *     transitRouterId: defaultVw2U9u.transitRouterId,
 *     description: "flowlog-resource-example-1",
 * });
 * const default = alicloud.cen.getFlowlogsOutput({
 *     ids: [defaultFlowLog.id],
 * });
 * export const firstCenFlowlogId = _default.apply(_default => _default.flowlogs?.[0]?.id);
 * ```
 */
export function getFlowlogsOutput(args?: GetFlowlogsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFlowlogsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("alicloud:cen/getFlowlogs:getFlowlogs", {
        "cenId": args.cenId,
        "description": args.description,
        "flowLogId": args.flowLogId,
        "flowLogName": args.flowLogName,
        "flowLogVersion": args.flowLogVersion,
        "ids": args.ids,
        "interval": args.interval,
        "logStoreName": args.logStoreName,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "pageNumber": args.pageNumber,
        "pageSize": args.pageSize,
        "projectName": args.projectName,
        "regionId": args.regionId,
        "status": args.status,
        "transitRouterId": args.transitRouterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFlowlogs.
 */
export interface GetFlowlogsOutputArgs {
    /**
     * The ID of Cen instance.
     */
    cenId?: pulumi.Input<string>;
    /**
     * The description of the flowlog.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of FlowLog.
     */
    flowLogId?: pulumi.Input<string>;
    /**
     * The name of the flowlog.
     */
    flowLogName?: pulumi.Input<string>;
    /**
     * Flowlog Version.
     */
    flowLogVersion?: pulumi.Input<string>;
    /**
     * A list of Flow Log IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
     */
    interval?: pulumi.Input<number>;
    /**
     * The LogStore that stores the flowlog.
     */
    logStoreName?: pulumi.Input<string>;
    /**
     * A regex string to filter results by Group Metric Rule name.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: pulumi.Input<string>;
    /**
     * Current page number.
     */
    pageNumber?: pulumi.Input<number>;
    /**
     * Number of records per page.
     */
    pageSize?: pulumi.Input<number>;
    /**
     * The Project that stores the flowlog.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Region id
     */
    regionId?: pulumi.Input<string>;
    /**
     * The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
     */
    status?: pulumi.Input<string>;
    /**
     * Transit Router ID
     */
    transitRouterId?: pulumi.Input<string>;
}
