// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a CEN Flow Log resource.
 *
 * For information about CEN Flow Log and how to use it, see [What is Flow Log](https://www.alibabacloud.com/help/en/cen/developer-reference/api-cbn-2017-09-12-createflowlog).
 *
 * > **NOTE:** Available since v1.73.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * // Create a cen flowlog resource and use it to publish a route entry pointing to an ECS.
 * const _default = new alicloud.cen.Instance("default", {name: "my-cen"});
 * const defaultProject = new alicloud.log.Project("default", {
 *     name: "sls-for-flowlog",
 *     description: "create by terraform",
 * });
 * const defaultStore = new alicloud.log.Store("default", {
 *     project: defaultProject.name,
 *     name: "sls-for-flowlog",
 *     retentionPeriod: 3650,
 *     shardCount: 3,
 *     autoSplit: true,
 *     maxSplitShardCount: 60,
 *     appendMeta: true,
 * });
 * const defaultFlowLog = new alicloud.cen.FlowLog("default", {
 *     flowLogName: "my-flowlog",
 *     cenId: _default.id,
 *     projectName: defaultProject.name,
 *     logStoreName: defaultStore.name,
 * });
 * ```
 *
 * ## Import
 *
 * CEN Flow Log can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cen/flowLog:FlowLog example <id>
 * ```
 */
export class FlowLog extends pulumi.CustomResource {
    /**
     * Get an existing FlowLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowLogState, opts?: pulumi.CustomResourceOptions): FlowLog {
        return new FlowLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cen/flowLog:FlowLog';

    /**
     * Returns true if the given object is an instance of FlowLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowLog.__pulumiType;
    }

    /**
     * cen id
     */
    public readonly cenId!: pulumi.Output<string>;
    /**
     * CreateTime
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The description of the flowlog.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the flowlog.
     */
    public readonly flowLogName!: pulumi.Output<string | undefined>;
    /**
     * The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: `60` or **600 * *. Default value: **600 * *.
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * Log Format
     */
    public readonly logFormatString!: pulumi.Output<string | undefined>;
    /**
     * The LogStore that stores the flowlog.
     */
    public readonly logStoreName!: pulumi.Output<string>;
    /**
     * The Project that stores the flowlog.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * region id
     */
    public /*out*/ readonly regionId!: pulumi.Output<string>;
    /**
     * The status of the flow log. Valid values:
     * - `Active`: started.
     * - `InActive`: not started.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The tag of the resource
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Cross-region Connection ID or VBR connection ID.
     *
     * > **NOTE:**  This parameter is required.
     */
    public readonly transitRouterAttachmentId!: pulumi.Output<string | undefined>;
    /**
     * Transit Router ID
     */
    public readonly transitRouterId!: pulumi.Output<string | undefined>;

    /**
     * Create a FlowLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowLogArgs | FlowLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowLogState | undefined;
            resourceInputs["cenId"] = state ? state.cenId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["flowLogName"] = state ? state.flowLogName : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["logFormatString"] = state ? state.logFormatString : undefined;
            resourceInputs["logStoreName"] = state ? state.logStoreName : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["transitRouterAttachmentId"] = state ? state.transitRouterAttachmentId : undefined;
            resourceInputs["transitRouterId"] = state ? state.transitRouterId : undefined;
        } else {
            const args = argsOrState as FlowLogArgs | undefined;
            if ((!args || args.cenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cenId'");
            }
            if ((!args || args.logStoreName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logStoreName'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            resourceInputs["cenId"] = args ? args.cenId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["flowLogName"] = args ? args.flowLogName : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["logFormatString"] = args ? args.logFormatString : undefined;
            resourceInputs["logStoreName"] = args ? args.logStoreName : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transitRouterAttachmentId"] = args ? args.transitRouterAttachmentId : undefined;
            resourceInputs["transitRouterId"] = args ? args.transitRouterId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["regionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlowLog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlowLog resources.
 */
export interface FlowLogState {
    /**
     * cen id
     */
    cenId?: pulumi.Input<string>;
    /**
     * CreateTime
     */
    createTime?: pulumi.Input<string>;
    /**
     * The description of the flowlog.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the flowlog.
     */
    flowLogName?: pulumi.Input<string>;
    /**
     * The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: `60` or **600 * *. Default value: **600 * *.
     */
    interval?: pulumi.Input<number>;
    /**
     * Log Format
     */
    logFormatString?: pulumi.Input<string>;
    /**
     * The LogStore that stores the flowlog.
     */
    logStoreName?: pulumi.Input<string>;
    /**
     * The Project that stores the flowlog.
     */
    projectName?: pulumi.Input<string>;
    /**
     * region id
     */
    regionId?: pulumi.Input<string>;
    /**
     * The status of the flow log. Valid values:
     * - `Active`: started.
     * - `InActive`: not started.
     */
    status?: pulumi.Input<string>;
    /**
     * The tag of the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Cross-region Connection ID or VBR connection ID.
     *
     * > **NOTE:**  This parameter is required.
     */
    transitRouterAttachmentId?: pulumi.Input<string>;
    /**
     * Transit Router ID
     */
    transitRouterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlowLog resource.
 */
export interface FlowLogArgs {
    /**
     * cen id
     */
    cenId: pulumi.Input<string>;
    /**
     * The description of the flowlog.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the flowlog.
     */
    flowLogName?: pulumi.Input<string>;
    /**
     * The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: `60` or **600 * *. Default value: **600 * *.
     */
    interval?: pulumi.Input<number>;
    /**
     * Log Format
     */
    logFormatString?: pulumi.Input<string>;
    /**
     * The LogStore that stores the flowlog.
     */
    logStoreName: pulumi.Input<string>;
    /**
     * The Project that stores the flowlog.
     */
    projectName: pulumi.Input<string>;
    /**
     * The status of the flow log. Valid values:
     * - `Active`: started.
     * - `InActive`: not started.
     */
    status?: pulumi.Input<string>;
    /**
     * The tag of the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Cross-region Connection ID or VBR connection ID.
     *
     * > **NOTE:**  This parameter is required.
     */
    transitRouterAttachmentId?: pulumi.Input<string>;
    /**
     * Transit Router ID
     */
    transitRouterId?: pulumi.Input<string>;
}
