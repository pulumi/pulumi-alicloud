// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource used to create a flow log function in Cloud Enterprise Network (CEN).
 * By using the flow log function, you can capture the traffic data of the network instances in different regions of a CEN.
 * You can also use the data aggregated in flow logs to analyze cross-region traffic flows, minimize traffic costs, and troubleshoot network faults.
 *
 * For information about CEN flow log and how to use it, see [Manage CEN flowlog](https://www.alibabacloud.com/help/doc-detail/123006.htm).
 *
 * > **NOTE:** Available in 1.73.0+
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * // Create a cen flowlog resource and use it to publish a route entry pointing to an ECS.
 * const defaultInstance = new alicloud.cen.Instance("defaultInstance", {});
 * const defaultProject = new alicloud.log.Project("defaultProject", {description: "create by terraform"});
 * const defaultStore = new alicloud.log.Store("defaultStore", {
 *     project: defaultProject.name,
 *     retentionPeriod: 3650,
 *     shardCount: 3,
 *     autoSplit: true,
 *     maxSplitShardCount: 60,
 *     appendMeta: true,
 * });
 * const defaultFlowLog = new alicloud.cen.FlowLog("defaultFlowLog", {
 *     flowLogName: "my-flowlog",
 *     cenId: defaultInstance.id,
 *     projectName: defaultProject.name,
 *     logStoreName: defaultStore.name,
 * });
 * ```
 *
 * ## Import
 *
 * CEN flowlog can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cen/flowLog:FlowLog default flowlog-tig1xxxxxx
 * ```
 */
export class FlowLog extends pulumi.CustomResource {
    /**
     * Get an existing FlowLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowLogState, opts?: pulumi.CustomResourceOptions): FlowLog {
        return new FlowLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cen/flowLog:FlowLog';

    /**
     * Returns true if the given object is an instance of FlowLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowLog.__pulumiType;
    }

    /**
     * The ID of the CEN Instance.
     */
    public readonly cenId!: pulumi.Output<string>;
    /**
     * The description of flowlog.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of flowlog.
     */
    public readonly flowLogName!: pulumi.Output<string | undefined>;
    /**
     * The name of the log store which is in the  `projectName` SLS project.
     */
    public readonly logStoreName!: pulumi.Output<string>;
    /**
     * The name of the SLS project.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The status of flowlog. Valid values: ["Active", "Inactive"]. Default to "Active".
     */
    public readonly status!: pulumi.Output<string | undefined>;

    /**
     * Create a FlowLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowLogArgs | FlowLogState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as FlowLogState | undefined;
            inputs["cenId"] = state ? state.cenId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["flowLogName"] = state ? state.flowLogName : undefined;
            inputs["logStoreName"] = state ? state.logStoreName : undefined;
            inputs["projectName"] = state ? state.projectName : undefined;
            inputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as FlowLogArgs | undefined;
            if (!args || args.cenId === undefined) {
                throw new Error("Missing required property 'cenId'");
            }
            if (!args || args.logStoreName === undefined) {
                throw new Error("Missing required property 'logStoreName'");
            }
            if (!args || args.projectName === undefined) {
                throw new Error("Missing required property 'projectName'");
            }
            inputs["cenId"] = args ? args.cenId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["flowLogName"] = args ? args.flowLogName : undefined;
            inputs["logStoreName"] = args ? args.logStoreName : undefined;
            inputs["projectName"] = args ? args.projectName : undefined;
            inputs["status"] = args ? args.status : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(FlowLog.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlowLog resources.
 */
export interface FlowLogState {
    /**
     * The ID of the CEN Instance.
     */
    readonly cenId?: pulumi.Input<string>;
    /**
     * The description of flowlog.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The name of flowlog.
     */
    readonly flowLogName?: pulumi.Input<string>;
    /**
     * The name of the log store which is in the  `projectName` SLS project.
     */
    readonly logStoreName?: pulumi.Input<string>;
    /**
     * The name of the SLS project.
     */
    readonly projectName?: pulumi.Input<string>;
    /**
     * The status of flowlog. Valid values: ["Active", "Inactive"]. Default to "Active".
     */
    readonly status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlowLog resource.
 */
export interface FlowLogArgs {
    /**
     * The ID of the CEN Instance.
     */
    readonly cenId: pulumi.Input<string>;
    /**
     * The description of flowlog.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The name of flowlog.
     */
    readonly flowLogName?: pulumi.Input<string>;
    /**
     * The name of the log store which is in the  `projectName` SLS project.
     */
    readonly logStoreName: pulumi.Input<string>;
    /**
     * The name of the SLS project.
     */
    readonly projectName: pulumi.Input<string>;
    /**
     * The status of flowlog. Valid values: ["Active", "Inactive"]. Default to "Active".
     */
    readonly status?: pulumi.Input<string>;
}
