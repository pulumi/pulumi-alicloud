// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Enterprise Network (CEN) Traffic Marking Policy resource.
 *
 * For information about Cloud Enterprise Network (CEN) Traffic Marking Policy and how to use it, see [What is Traffic Marking Policy](https://www.alibabacloud.com/help/en/cen/developer-reference/api-cbn-2017-09-12-createtrafficmarkingpolicy).
 *
 * > **NOTE:** Available since v1.173.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.cen.Instance("example", {
 *     cenInstanceName: "tf_example",
 *     description: "an example for cen",
 * });
 * const exampleTransitRouter = new alicloud.cen.TransitRouter("example", {
 *     transitRouterName: "tf_example",
 *     cenId: example.id,
 * });
 * const exampleTrafficMarkingPolicy = new alicloud.cen.TrafficMarkingPolicy("example", {
 *     markingDscp: 1,
 *     priority: 1,
 *     trafficMarkingPolicyName: "tf_example",
 *     transitRouterId: exampleTransitRouter.transitRouterId,
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Enterprise Network (CEN) Traffic Marking Policy can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cen/trafficMarkingPolicy:TrafficMarkingPolicy example <transit_router_id>:<traffic_marking_policy_id>
 * ```
 */
export class TrafficMarkingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing TrafficMarkingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficMarkingPolicyState, opts?: pulumi.CustomResourceOptions): TrafficMarkingPolicy {
        return new TrafficMarkingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cen/trafficMarkingPolicy:TrafficMarkingPolicy';

    /**
     * Returns true if the given object is an instance of TrafficMarkingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficMarkingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficMarkingPolicy.__pulumiType;
    }

    /**
     * TrafficMarkingPolicyDescription
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Whether to PreCheck only this request. Value:
     */
    declare public readonly dryRun: pulumi.Output<boolean | undefined>;
    /**
     * Whether to forcibly delete the traffic marker policy. Valid values:
     */
    declare public readonly force: pulumi.Output<boolean | undefined>;
    /**
     * MarkingDscp
     */
    declare public readonly markingDscp: pulumi.Output<number>;
    /**
     * Priority
     */
    declare public readonly priority: pulumi.Output<number>;
    /**
     * The status of the resource
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The first ID of the resource
     */
    declare public /*out*/ readonly trafficMarkingPolicyId: pulumi.Output<string>;
    /**
     * TrafficMarkingPolicyName
     */
    declare public readonly trafficMarkingPolicyName: pulumi.Output<string | undefined>;
    /**
     * List of stream classification rules.
     * You can add up to 50 stream classification rules at a time. See `trafficMatchRules` below.
     */
    declare public readonly trafficMatchRules: pulumi.Output<outputs.cen.TrafficMarkingPolicyTrafficMatchRule[] | undefined>;
    /**
     * TransitRouterId
     */
    declare public readonly transitRouterId: pulumi.Output<string>;

    /**
     * Create a TrafficMarkingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficMarkingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficMarkingPolicyArgs | TrafficMarkingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficMarkingPolicyState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["force"] = state?.force;
            resourceInputs["markingDscp"] = state?.markingDscp;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["status"] = state?.status;
            resourceInputs["trafficMarkingPolicyId"] = state?.trafficMarkingPolicyId;
            resourceInputs["trafficMarkingPolicyName"] = state?.trafficMarkingPolicyName;
            resourceInputs["trafficMatchRules"] = state?.trafficMatchRules;
            resourceInputs["transitRouterId"] = state?.transitRouterId;
        } else {
            const args = argsOrState as TrafficMarkingPolicyArgs | undefined;
            if (args?.markingDscp === undefined && !opts.urn) {
                throw new Error("Missing required property 'markingDscp'");
            }
            if (args?.priority === undefined && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if (args?.transitRouterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'transitRouterId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["force"] = args?.force;
            resourceInputs["markingDscp"] = args?.markingDscp;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["trafficMarkingPolicyName"] = args?.trafficMarkingPolicyName;
            resourceInputs["trafficMatchRules"] = args?.trafficMatchRules;
            resourceInputs["transitRouterId"] = args?.transitRouterId;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["trafficMarkingPolicyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficMarkingPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficMarkingPolicy resources.
 */
export interface TrafficMarkingPolicyState {
    /**
     * TrafficMarkingPolicyDescription
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to PreCheck only this request. Value:
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Whether to forcibly delete the traffic marker policy. Valid values:
     */
    force?: pulumi.Input<boolean>;
    /**
     * MarkingDscp
     */
    markingDscp?: pulumi.Input<number>;
    /**
     * Priority
     */
    priority?: pulumi.Input<number>;
    /**
     * The status of the resource
     */
    status?: pulumi.Input<string>;
    /**
     * The first ID of the resource
     */
    trafficMarkingPolicyId?: pulumi.Input<string>;
    /**
     * TrafficMarkingPolicyName
     */
    trafficMarkingPolicyName?: pulumi.Input<string>;
    /**
     * List of stream classification rules.
     * You can add up to 50 stream classification rules at a time. See `trafficMatchRules` below.
     */
    trafficMatchRules?: pulumi.Input<pulumi.Input<inputs.cen.TrafficMarkingPolicyTrafficMatchRule>[]>;
    /**
     * TransitRouterId
     */
    transitRouterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TrafficMarkingPolicy resource.
 */
export interface TrafficMarkingPolicyArgs {
    /**
     * TrafficMarkingPolicyDescription
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to PreCheck only this request. Value:
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Whether to forcibly delete the traffic marker policy. Valid values:
     */
    force?: pulumi.Input<boolean>;
    /**
     * MarkingDscp
     */
    markingDscp: pulumi.Input<number>;
    /**
     * Priority
     */
    priority: pulumi.Input<number>;
    /**
     * TrafficMarkingPolicyName
     */
    trafficMarkingPolicyName?: pulumi.Input<string>;
    /**
     * List of stream classification rules.
     * You can add up to 50 stream classification rules at a time. See `trafficMatchRules` below.
     */
    trafficMatchRules?: pulumi.Input<pulumi.Input<inputs.cen.TrafficMarkingPolicyTrafficMatchRule>[]>;
    /**
     * TransitRouterId
     */
    transitRouterId: pulumi.Input<string>;
}
