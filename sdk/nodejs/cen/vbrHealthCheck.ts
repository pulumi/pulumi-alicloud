// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This topic describes how to configure the health check feature for a Cloud Enterprise Network (CEN) instance.
 * After you attach a Virtual Border Router (VBR) to the CEN instance and configure the health check feature, you can monitor the network conditions of the on-premises data center connected to the VBR.
 *
 * For information about CEN VBR HealthCheck and how to use it, see [Manage CEN VBR HealthCheck](https://www.alibabacloud.com/help/en/doc-detail/71141.htm).
 *
 * > **NOTE:** Available in 1.88.0+
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * // Create a cen vbr HealrhCheck resource and use it.
 * const defaultInstance = new alicloud.cen.Instance("defaultInstance", {cenInstanceName: "test_name"});
 * const defaultInstanceAttachment = new alicloud.cen.InstanceAttachment("defaultInstanceAttachment", {
 *     instanceId: defaultInstance.id,
 *     childInstanceId: "vbr-xxxxx",
 *     childInstanceType: "VBR",
 *     childInstanceRegionId: "cn-hangzhou",
 * });
 * const defaultVbrHealthCheck = new alicloud.cen.VbrHealthCheck("defaultVbrHealthCheck", {
 *     cenId: defaultInstance.id,
 *     healthCheckSourceIp: "192.168.1.2",
 *     healthCheckTargetIp: "10.0.0.2",
 *     vbrInstanceId: "vbr-xxxxx",
 *     vbrInstanceRegionId: "cn-hangzhou",
 *     healthCheckInterval: 2,
 *     healthyThreshold: 8,
 * }, {
 *     dependsOn: [defaultInstanceAttachment],
 * });
 * ```
 *
 * ## Import
 *
 * CEN VBR HealthCheck can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cen/vbrHealthCheck:VbrHealthCheck example vbr-xxxxx:cn-hangzhou
 * ```
 */
export class VbrHealthCheck extends pulumi.CustomResource {
    /**
     * Get an existing VbrHealthCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VbrHealthCheckState, opts?: pulumi.CustomResourceOptions): VbrHealthCheck {
        return new VbrHealthCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cen/vbrHealthCheck:VbrHealthCheck';

    /**
     * Returns true if the given object is an instance of VbrHealthCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VbrHealthCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VbrHealthCheck.__pulumiType;
    }

    /**
     * The ID of the CEN instance.
     */
    public readonly cenId!: pulumi.Output<string>;
    /**
     * Specifies the interval at which the health check sends continuous detection packets. Default value: 2. Value range: 2 to 3.
     */
    public readonly healthCheckInterval!: pulumi.Output<number | undefined>;
    /**
     * The source IP address of health checks.
     */
    public readonly healthCheckSourceIp!: pulumi.Output<string | undefined>;
    /**
     * The destination IP address of health checks.
     */
    public readonly healthCheckTargetIp!: pulumi.Output<string>;
    /**
     * Specifies the number of probe messages sent by the health check. Default value: 8. Value range: 3 to 8.
     */
    public readonly healthyThreshold!: pulumi.Output<number | undefined>;
    /**
     * The ID of the VBR.
     */
    public readonly vbrInstanceId!: pulumi.Output<string>;
    /**
     * The ID of the account to which the VBR belongs.
     */
    public readonly vbrInstanceOwnerId!: pulumi.Output<number | undefined>;
    /**
     * The ID of the region to which the VBR belongs.
     */
    public readonly vbrInstanceRegionId!: pulumi.Output<string>;

    /**
     * Create a VbrHealthCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VbrHealthCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VbrHealthCheckArgs | VbrHealthCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VbrHealthCheckState | undefined;
            resourceInputs["cenId"] = state ? state.cenId : undefined;
            resourceInputs["healthCheckInterval"] = state ? state.healthCheckInterval : undefined;
            resourceInputs["healthCheckSourceIp"] = state ? state.healthCheckSourceIp : undefined;
            resourceInputs["healthCheckTargetIp"] = state ? state.healthCheckTargetIp : undefined;
            resourceInputs["healthyThreshold"] = state ? state.healthyThreshold : undefined;
            resourceInputs["vbrInstanceId"] = state ? state.vbrInstanceId : undefined;
            resourceInputs["vbrInstanceOwnerId"] = state ? state.vbrInstanceOwnerId : undefined;
            resourceInputs["vbrInstanceRegionId"] = state ? state.vbrInstanceRegionId : undefined;
        } else {
            const args = argsOrState as VbrHealthCheckArgs | undefined;
            if ((!args || args.cenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cenId'");
            }
            if ((!args || args.healthCheckTargetIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthCheckTargetIp'");
            }
            if ((!args || args.vbrInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vbrInstanceId'");
            }
            if ((!args || args.vbrInstanceRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vbrInstanceRegionId'");
            }
            resourceInputs["cenId"] = args ? args.cenId : undefined;
            resourceInputs["healthCheckInterval"] = args ? args.healthCheckInterval : undefined;
            resourceInputs["healthCheckSourceIp"] = args ? args.healthCheckSourceIp : undefined;
            resourceInputs["healthCheckTargetIp"] = args ? args.healthCheckTargetIp : undefined;
            resourceInputs["healthyThreshold"] = args ? args.healthyThreshold : undefined;
            resourceInputs["vbrInstanceId"] = args ? args.vbrInstanceId : undefined;
            resourceInputs["vbrInstanceOwnerId"] = args ? args.vbrInstanceOwnerId : undefined;
            resourceInputs["vbrInstanceRegionId"] = args ? args.vbrInstanceRegionId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VbrHealthCheck.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VbrHealthCheck resources.
 */
export interface VbrHealthCheckState {
    /**
     * The ID of the CEN instance.
     */
    cenId?: pulumi.Input<string>;
    /**
     * Specifies the interval at which the health check sends continuous detection packets. Default value: 2. Value range: 2 to 3.
     */
    healthCheckInterval?: pulumi.Input<number>;
    /**
     * The source IP address of health checks.
     */
    healthCheckSourceIp?: pulumi.Input<string>;
    /**
     * The destination IP address of health checks.
     */
    healthCheckTargetIp?: pulumi.Input<string>;
    /**
     * Specifies the number of probe messages sent by the health check. Default value: 8. Value range: 3 to 8.
     */
    healthyThreshold?: pulumi.Input<number>;
    /**
     * The ID of the VBR.
     */
    vbrInstanceId?: pulumi.Input<string>;
    /**
     * The ID of the account to which the VBR belongs.
     */
    vbrInstanceOwnerId?: pulumi.Input<number>;
    /**
     * The ID of the region to which the VBR belongs.
     */
    vbrInstanceRegionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VbrHealthCheck resource.
 */
export interface VbrHealthCheckArgs {
    /**
     * The ID of the CEN instance.
     */
    cenId: pulumi.Input<string>;
    /**
     * Specifies the interval at which the health check sends continuous detection packets. Default value: 2. Value range: 2 to 3.
     */
    healthCheckInterval?: pulumi.Input<number>;
    /**
     * The source IP address of health checks.
     */
    healthCheckSourceIp?: pulumi.Input<string>;
    /**
     * The destination IP address of health checks.
     */
    healthCheckTargetIp: pulumi.Input<string>;
    /**
     * Specifies the number of probe messages sent by the health check. Default value: 8. Value range: 3 to 8.
     */
    healthyThreshold?: pulumi.Input<number>;
    /**
     * The ID of the VBR.
     */
    vbrInstanceId: pulumi.Input<string>;
    /**
     * The ID of the account to which the VBR belongs.
     */
    vbrInstanceOwnerId?: pulumi.Input<number>;
    /**
     * The ID of the region to which the VBR belongs.
     */
    vbrInstanceRegionId: pulumi.Input<string>;
}
