// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the Ecd Nas File Systems of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available in v1.141.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const defaultSimpleOfficeSite = new alicloud.eds.SimpleOfficeSite("defaultSimpleOfficeSite", {
 *     cidrBlock: "172.16.0.0/12",
 *     desktopAccessType: "Internet",
 *     officeSiteName: "your_office_site_name",
 *     enableInternetAccess: false,
 * });
 * const defaultNasFileSystem = new alicloud.eds.NasFileSystem("defaultNasFileSystem", {
 *     description: "your_description",
 *     officeSiteId: defaultSimpleOfficeSite.id,
 *     nasFileSystemName: "your_nas_file_system_name",
 * });
 * const ids = alicloud.eds.getNasFileSystems({});
 * export const ecdNasFileSystemId1 = ids.then(ids => ids.systems?[0]?.id);
 * const nameRegex = defaultNasFileSystem.nasFileSystemName.apply(nasFileSystemName => alicloud.eds.getNasFileSystemsOutput({
 *     nameRegex: nasFileSystemName,
 * }));
 * export const ecdNasFileSystemId2 = nameRegex.apply(nameRegex => nameRegex.systems?[0]?.id);
 * ```
 */
export function getNasFileSystems(args?: GetNasFileSystemsArgs, opts?: pulumi.InvokeOptions): Promise<GetNasFileSystemsResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("alicloud:eds/getNasFileSystems:getNasFileSystems", {
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "officeSiteId": args.officeSiteId,
        "outputFile": args.outputFile,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getNasFileSystems.
 */
export interface GetNasFileSystemsArgs {
    /**
     * A list of Nas File System IDs.
     */
    ids?: string[];
    /**
     * A regex string to filter results by Nas File System name.
     */
    nameRegex?: string;
    /**
     * The ID of office site.
     */
    officeSiteId?: string;
    outputFile?: string;
    /**
     * The status of nas file system. Valid values: `Pending`, `Running`, `Stopped`,`Deleting`, `Deleted`, `Invalid`.
     */
    status?: string;
}

/**
 * A collection of values returned by getNasFileSystems.
 */
export interface GetNasFileSystemsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly nameRegex?: string;
    readonly names: string[];
    readonly officeSiteId?: string;
    readonly outputFile?: string;
    readonly status?: string;
    readonly systems: outputs.eds.GetNasFileSystemsSystem[];
}

export function getNasFileSystemsOutput(args?: GetNasFileSystemsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNasFileSystemsResult> {
    return pulumi.output(args).apply(a => getNasFileSystems(a, opts))
}

/**
 * A collection of arguments for invoking getNasFileSystems.
 */
export interface GetNasFileSystemsOutputArgs {
    /**
     * A list of Nas File System IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A regex string to filter results by Nas File System name.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * The ID of office site.
     */
    officeSiteId?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    /**
     * The status of nas file system. Valid values: `Pending`, `Running`, `Stopped`,`Deleting`, `Deleted`, `Invalid`.
     */
    status?: pulumi.Input<string>;
}
