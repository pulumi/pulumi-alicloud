// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ECD Desktop resource.
 *
 * For information about ECD Desktop and how to use it, see [What is Desktop](https://www.alibabacloud.com/help/en/wuying-workspace/developer-reference/api-ecd-2020-09-30-createdesktops)
 *
 * > **NOTE:** Available since v1.144.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultSimpleOfficeSite = new alicloud.eds.SimpleOfficeSite("default", {
 *     cidrBlock: "172.16.0.0/12",
 *     enableAdminAccess: true,
 *     desktopAccessType: "Internet",
 *     officeSiteName: `${name}-${defaultInteger.result}`,
 * });
 * const defaultEcdPolicyGroup = new alicloud.eds.EcdPolicyGroup("default", {
 *     policyGroupName: name,
 *     clipboard: "read",
 *     localDrive: "read",
 *     usbRedirect: "off",
 *     watermark: "off",
 *     authorizeAccessPolicyRules: [{
 *         description: name,
 *         cidrIp: "1.2.3.45/24",
 *     }],
 *     authorizeSecurityPolicyRules: [{
 *         type: "inflow",
 *         policy: "accept",
 *         description: name,
 *         portRange: "80/80",
 *         ipProtocol: "TCP",
 *         priority: "1",
 *         cidrIp: "1.2.3.4/24",
 *     }],
 * });
 * const _default = alicloud.eds.getBundles({
 *     bundleType: "SYSTEM",
 * });
 * const defaultDesktop = new alicloud.eds.Desktop("default", {
 *     officeSiteId: defaultSimpleOfficeSite.id,
 *     policyGroupId: defaultEcdPolicyGroup.id,
 *     bundleId: _default.then(_default => _default.bundles?.[1]?.id),
 *     desktopName: name,
 * });
 * ```
 *
 * ## Import
 *
 * ECD Desktop can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:eds/desktop:Desktop example <id>
 * ```
 */
export class Desktop extends pulumi.CustomResource {
    /**
     * Get an existing Desktop resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DesktopState, opts?: pulumi.CustomResourceOptions): Desktop {
        return new Desktop(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eds/desktop:Desktop';

    /**
     * Returns true if the given object is an instance of Desktop.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Desktop {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Desktop.__pulumiType;
    }

    /**
     * The amount of the Desktop.
     */
    declare public readonly amount: pulumi.Output<number | undefined>;
    /**
     * The auto-pay of the Desktop whether to pay automatically. values: `true`, `false`.
     */
    declare public readonly autoPay: pulumi.Output<boolean | undefined>;
    /**
     * The auto-renewal of the Desktop whether to renew automatically. It takes effect only when the parameter ChargeType is set to PrePaid. values: `true`, `false`.
     */
    declare public readonly autoRenew: pulumi.Output<boolean | undefined>;
    /**
     * The bundle id of the Desktop.
     */
    declare public readonly bundleId: pulumi.Output<string>;
    /**
     * The desktop name of the Desktop.
     */
    declare public readonly desktopName: pulumi.Output<string | undefined>;
    /**
     * The desktop type of the Desktop.
     */
    declare public readonly desktopType: pulumi.Output<string>;
    /**
     * The desktop end user id of the Desktop.
     */
    declare public readonly endUserIds: pulumi.Output<string[] | undefined>;
    /**
     * The hostname of the Desktop.
     */
    declare public readonly hostName: pulumi.Output<string | undefined>;
    /**
     * The ID of the Simple Office Site.
     */
    declare public readonly officeSiteId: pulumi.Output<string>;
    /**
     * The payment type of the Desktop. Valid values: `PayAsYouGo`, `Subscription`. Default to `PayAsYouGo`.
     */
    declare public readonly paymentType: pulumi.Output<string>;
    /**
     * The period of the Desktop.
     */
    declare public readonly period: pulumi.Output<number | undefined>;
    /**
     * The period unit of the Desktop.
     */
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    /**
     * The policy group id of the Desktop.
     */
    declare public readonly policyGroupId: pulumi.Output<string>;
    /**
     * The root disk size gib of the Desktop.
     */
    declare public readonly rootDiskSizeGib: pulumi.Output<number | undefined>;
    /**
     * The status of the Desktop. Valid values: `Deleted`, `Expired`, `Pending`, `Running`, `Starting`, `Stopped`, `Stopping`.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * The stopped mode of the Desktop.
     */
    declare public readonly stoppedMode: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The user assign mode of the Desktop. Valid values: `ALL`, `PER_USER`. Default to `ALL`.
     */
    declare public readonly userAssignMode: pulumi.Output<string>;
    /**
     * The user disk size gib of the Desktop.
     */
    declare public readonly userDiskSizeGib: pulumi.Output<number | undefined>;

    /**
     * Create a Desktop resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DesktopArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DesktopArgs | DesktopState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DesktopState | undefined;
            resourceInputs["amount"] = state?.amount;
            resourceInputs["autoPay"] = state?.autoPay;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["bundleId"] = state?.bundleId;
            resourceInputs["desktopName"] = state?.desktopName;
            resourceInputs["desktopType"] = state?.desktopType;
            resourceInputs["endUserIds"] = state?.endUserIds;
            resourceInputs["hostName"] = state?.hostName;
            resourceInputs["officeSiteId"] = state?.officeSiteId;
            resourceInputs["paymentType"] = state?.paymentType;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["policyGroupId"] = state?.policyGroupId;
            resourceInputs["rootDiskSizeGib"] = state?.rootDiskSizeGib;
            resourceInputs["status"] = state?.status;
            resourceInputs["stoppedMode"] = state?.stoppedMode;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["userAssignMode"] = state?.userAssignMode;
            resourceInputs["userDiskSizeGib"] = state?.userDiskSizeGib;
        } else {
            const args = argsOrState as DesktopArgs | undefined;
            if (args?.bundleId === undefined && !opts.urn) {
                throw new Error("Missing required property 'bundleId'");
            }
            if (args?.officeSiteId === undefined && !opts.urn) {
                throw new Error("Missing required property 'officeSiteId'");
            }
            if (args?.policyGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyGroupId'");
            }
            resourceInputs["amount"] = args?.amount;
            resourceInputs["autoPay"] = args?.autoPay;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["bundleId"] = args?.bundleId;
            resourceInputs["desktopName"] = args?.desktopName;
            resourceInputs["desktopType"] = args?.desktopType;
            resourceInputs["endUserIds"] = args?.endUserIds;
            resourceInputs["hostName"] = args?.hostName;
            resourceInputs["officeSiteId"] = args?.officeSiteId;
            resourceInputs["paymentType"] = args?.paymentType;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["policyGroupId"] = args?.policyGroupId;
            resourceInputs["rootDiskSizeGib"] = args?.rootDiskSizeGib;
            resourceInputs["status"] = args?.status;
            resourceInputs["stoppedMode"] = args?.stoppedMode;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["userAssignMode"] = args?.userAssignMode;
            resourceInputs["userDiskSizeGib"] = args?.userDiskSizeGib;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Desktop.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Desktop resources.
 */
export interface DesktopState {
    /**
     * The amount of the Desktop.
     */
    amount?: pulumi.Input<number>;
    /**
     * The auto-pay of the Desktop whether to pay automatically. values: `true`, `false`.
     */
    autoPay?: pulumi.Input<boolean>;
    /**
     * The auto-renewal of the Desktop whether to renew automatically. It takes effect only when the parameter ChargeType is set to PrePaid. values: `true`, `false`.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The bundle id of the Desktop.
     */
    bundleId?: pulumi.Input<string>;
    /**
     * The desktop name of the Desktop.
     */
    desktopName?: pulumi.Input<string>;
    /**
     * The desktop type of the Desktop.
     */
    desktopType?: pulumi.Input<string>;
    /**
     * The desktop end user id of the Desktop.
     */
    endUserIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The hostname of the Desktop.
     */
    hostName?: pulumi.Input<string>;
    /**
     * The ID of the Simple Office Site.
     */
    officeSiteId?: pulumi.Input<string>;
    /**
     * The payment type of the Desktop. Valid values: `PayAsYouGo`, `Subscription`. Default to `PayAsYouGo`.
     */
    paymentType?: pulumi.Input<string>;
    /**
     * The period of the Desktop.
     */
    period?: pulumi.Input<number>;
    /**
     * The period unit of the Desktop.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * The policy group id of the Desktop.
     */
    policyGroupId?: pulumi.Input<string>;
    /**
     * The root disk size gib of the Desktop.
     */
    rootDiskSizeGib?: pulumi.Input<number>;
    /**
     * The status of the Desktop. Valid values: `Deleted`, `Expired`, `Pending`, `Running`, `Starting`, `Stopped`, `Stopping`.
     */
    status?: pulumi.Input<string>;
    /**
     * The stopped mode of the Desktop.
     */
    stoppedMode?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The user assign mode of the Desktop. Valid values: `ALL`, `PER_USER`. Default to `ALL`.
     */
    userAssignMode?: pulumi.Input<string>;
    /**
     * The user disk size gib of the Desktop.
     */
    userDiskSizeGib?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Desktop resource.
 */
export interface DesktopArgs {
    /**
     * The amount of the Desktop.
     */
    amount?: pulumi.Input<number>;
    /**
     * The auto-pay of the Desktop whether to pay automatically. values: `true`, `false`.
     */
    autoPay?: pulumi.Input<boolean>;
    /**
     * The auto-renewal of the Desktop whether to renew automatically. It takes effect only when the parameter ChargeType is set to PrePaid. values: `true`, `false`.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The bundle id of the Desktop.
     */
    bundleId: pulumi.Input<string>;
    /**
     * The desktop name of the Desktop.
     */
    desktopName?: pulumi.Input<string>;
    /**
     * The desktop type of the Desktop.
     */
    desktopType?: pulumi.Input<string>;
    /**
     * The desktop end user id of the Desktop.
     */
    endUserIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The hostname of the Desktop.
     */
    hostName?: pulumi.Input<string>;
    /**
     * The ID of the Simple Office Site.
     */
    officeSiteId: pulumi.Input<string>;
    /**
     * The payment type of the Desktop. Valid values: `PayAsYouGo`, `Subscription`. Default to `PayAsYouGo`.
     */
    paymentType?: pulumi.Input<string>;
    /**
     * The period of the Desktop.
     */
    period?: pulumi.Input<number>;
    /**
     * The period unit of the Desktop.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * The policy group id of the Desktop.
     */
    policyGroupId: pulumi.Input<string>;
    /**
     * The root disk size gib of the Desktop.
     */
    rootDiskSizeGib?: pulumi.Input<number>;
    /**
     * The status of the Desktop. Valid values: `Deleted`, `Expired`, `Pending`, `Running`, `Starting`, `Stopped`, `Stopping`.
     */
    status?: pulumi.Input<string>;
    /**
     * The stopped mode of the Desktop.
     */
    stoppedMode?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The user assign mode of the Desktop. Valid values: `ALL`, `PER_USER`. Default to `ALL`.
     */
    userAssignMode?: pulumi.Input<string>;
    /**
     * The user disk size gib of the Desktop.
     */
    userDiskSizeGib?: pulumi.Input<number>;
}
