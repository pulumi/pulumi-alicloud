// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ECD Ram Directory resource.
 *
 * For information about ECD Ram Directory and how to use it, see [What is Ram Directory](https://www.alibabacloud.com/help/en/wuying-workspace/developer-reference/api-ecd-2020-09-30-createramdirectory).
 *
 * > **NOTE:** Available since v1.174.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const defaultZones = alicloud.eds.getZones({});
 * const defaultNetwork = new alicloud.vpc.Network("defaultNetwork", {
 *     vpcName: name,
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("defaultSwitch", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: defaultZones.then(defaultZones => defaultZones.ids?.[0]),
 *     vswitchName: name,
 * });
 * const defaultRamDirectory = new alicloud.eds.RamDirectory("defaultRamDirectory", {
 *     desktopAccessType: "INTERNET",
 *     enableAdminAccess: true,
 *     enableInternetAccess: true,
 *     ramDirectoryName: name,
 *     vswitchIds: [defaultSwitch.id],
 * });
 * ```
 *
 * ## Import
 *
 * ECD Ram Directory can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:eds/ramDirectory:RamDirectory example <id>
 * ```
 */
export class RamDirectory extends pulumi.CustomResource {
    /**
     * Get an existing RamDirectory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RamDirectoryState, opts?: pulumi.CustomResourceOptions): RamDirectory {
        return new RamDirectory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eds/ramDirectory:RamDirectory';

    /**
     * Returns true if the given object is an instance of RamDirectory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RamDirectory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RamDirectory.__pulumiType;
    }

    /**
     * The desktop access type. Valid values: `VPC`, `INTERNET`, `ANY`.
     */
    public readonly desktopAccessType!: pulumi.Output<string>;
    /**
     * Whether to enable public network access.
     */
    public readonly enableAdminAccess!: pulumi.Output<boolean>;
    /**
     * Whether to grant local administrator rights to users who use cloud desktops.
     */
    public readonly enableInternetAccess!: pulumi.Output<boolean>;
    /**
     * The name of the directory. The name must be 2 to 255 characters in length. It must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
     */
    public readonly ramDirectoryName!: pulumi.Output<string>;
    /**
     * The status of directory.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * List of VSwitch IDs in the directory.
     */
    public readonly vswitchIds!: pulumi.Output<string[]>;

    /**
     * Create a RamDirectory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RamDirectoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RamDirectoryArgs | RamDirectoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RamDirectoryState | undefined;
            resourceInputs["desktopAccessType"] = state ? state.desktopAccessType : undefined;
            resourceInputs["enableAdminAccess"] = state ? state.enableAdminAccess : undefined;
            resourceInputs["enableInternetAccess"] = state ? state.enableInternetAccess : undefined;
            resourceInputs["ramDirectoryName"] = state ? state.ramDirectoryName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vswitchIds"] = state ? state.vswitchIds : undefined;
        } else {
            const args = argsOrState as RamDirectoryArgs | undefined;
            if ((!args || args.ramDirectoryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ramDirectoryName'");
            }
            if ((!args || args.vswitchIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchIds'");
            }
            resourceInputs["desktopAccessType"] = args ? args.desktopAccessType : undefined;
            resourceInputs["enableAdminAccess"] = args ? args.enableAdminAccess : undefined;
            resourceInputs["enableInternetAccess"] = args ? args.enableInternetAccess : undefined;
            resourceInputs["ramDirectoryName"] = args ? args.ramDirectoryName : undefined;
            resourceInputs["vswitchIds"] = args ? args.vswitchIds : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RamDirectory.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RamDirectory resources.
 */
export interface RamDirectoryState {
    /**
     * The desktop access type. Valid values: `VPC`, `INTERNET`, `ANY`.
     */
    desktopAccessType?: pulumi.Input<string>;
    /**
     * Whether to enable public network access.
     */
    enableAdminAccess?: pulumi.Input<boolean>;
    /**
     * Whether to grant local administrator rights to users who use cloud desktops.
     */
    enableInternetAccess?: pulumi.Input<boolean>;
    /**
     * The name of the directory. The name must be 2 to 255 characters in length. It must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
     */
    ramDirectoryName?: pulumi.Input<string>;
    /**
     * The status of directory.
     */
    status?: pulumi.Input<string>;
    /**
     * List of VSwitch IDs in the directory.
     */
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RamDirectory resource.
 */
export interface RamDirectoryArgs {
    /**
     * The desktop access type. Valid values: `VPC`, `INTERNET`, `ANY`.
     */
    desktopAccessType?: pulumi.Input<string>;
    /**
     * Whether to enable public network access.
     */
    enableAdminAccess?: pulumi.Input<boolean>;
    /**
     * Whether to grant local administrator rights to users who use cloud desktops.
     */
    enableInternetAccess?: pulumi.Input<boolean>;
    /**
     * The name of the directory. The name must be 2 to 255 characters in length. It must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
     */
    ramDirectoryName: pulumi.Input<string>;
    /**
     * List of VSwitch IDs in the directory.
     */
    vswitchIds: pulumi.Input<pulumi.Input<string>[]>;
}
