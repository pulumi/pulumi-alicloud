// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Cdn Domain Config resource.
 *
 * For information about Cdn Domain Config and how to use it, see [What is Domain Config](https://www.alibabacloud.com/help/en/doc-detail/90915.htm)
 *
 * > **NOTE:** Available since v1.34.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * // Create a new Domain config.
 * const domain = new alicloud.cdn.DomainNew("domain", {
 *     domainName: `mycdndomain-${_default.result}.alicloud-provider.cn`,
 *     cdnType: "web",
 *     scope: "overseas",
 *     sources: [{
 *         content: "1.1.1.1",
 *         type: "ipaddr",
 *         priority: 20,
 *         port: 80,
 *         weight: 15,
 *     }],
 * });
 * const config = new alicloud.cdn.DomainConfig("config", {
 *     domainName: domain.domainName,
 *     functionName: "ip_allow_list_set",
 *     functionArgs: [{
 *         argName: "ip_list",
 *         argValue: "110.110.110.110",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * CDN domain config can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cdn/domainConfig:DomainConfig example <domain_name>:<function_name>:<config_id>
 * ```
 *
 * ```sh
 * $ pulumi import alicloud:cdn/domainConfig:DomainConfig example <domain_name>:<function_name>
 * ```
 */
export class DomainConfig extends pulumi.CustomResource {
    /**
     * Get an existing DomainConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainConfigState, opts?: pulumi.CustomResourceOptions): DomainConfig {
        return new DomainConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cdn/domainConfig:DomainConfig';

    /**
     * Returns true if the given object is an instance of DomainConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainConfig.__pulumiType;
    }

    /**
     * (Available since v1.132.0) The ID of the domain config function.
     */
    declare public /*out*/ readonly configId: pulumi.Output<string>;
    /**
     * Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
     */
    declare public readonly domainName: pulumi.Output<string>;
    /**
     * The args of the domain config. See `functionArgs` below.
     */
    declare public readonly functionArgs: pulumi.Output<outputs.cdn.DomainConfigFunctionArg[]>;
    /**
     * The name of the domain config.
     */
    declare public readonly functionName: pulumi.Output<string>;
    /**
     * By configuring the function condition (rule engine) in the domain name configuration function parameters, Rule conditions can be created (Rule conditions can match and filter user requests by identifying various parameters carried in user requests). After each rule condition is created, a corresponding ConfigId will be generated, and the ConfigId can be referenced by other functions as a ParentId parameter, in this way, the rule conditions can be combined with the functional configuration to form a more flexible configuration.
     */
    declare public readonly parentId: pulumi.Output<string>;
    /**
     * (Available since v1.132.0) The Status of the function.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a DomainConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainConfigArgs | DomainConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainConfigState | undefined;
            resourceInputs["configId"] = state?.configId;
            resourceInputs["domainName"] = state?.domainName;
            resourceInputs["functionArgs"] = state?.functionArgs;
            resourceInputs["functionName"] = state?.functionName;
            resourceInputs["parentId"] = state?.parentId;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as DomainConfigArgs | undefined;
            if (args?.domainName === undefined && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if (args?.functionArgs === undefined && !opts.urn) {
                throw new Error("Missing required property 'functionArgs'");
            }
            if (args?.functionName === undefined && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            resourceInputs["domainName"] = args?.domainName;
            resourceInputs["functionArgs"] = args?.functionArgs;
            resourceInputs["functionName"] = args?.functionName;
            resourceInputs["parentId"] = args?.parentId;
            resourceInputs["configId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainConfig resources.
 */
export interface DomainConfigState {
    /**
     * (Available since v1.132.0) The ID of the domain config function.
     */
    configId?: pulumi.Input<string>;
    /**
     * Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
     */
    domainName?: pulumi.Input<string>;
    /**
     * The args of the domain config. See `functionArgs` below.
     */
    functionArgs?: pulumi.Input<pulumi.Input<inputs.cdn.DomainConfigFunctionArg>[]>;
    /**
     * The name of the domain config.
     */
    functionName?: pulumi.Input<string>;
    /**
     * By configuring the function condition (rule engine) in the domain name configuration function parameters, Rule conditions can be created (Rule conditions can match and filter user requests by identifying various parameters carried in user requests). After each rule condition is created, a corresponding ConfigId will be generated, and the ConfigId can be referenced by other functions as a ParentId parameter, in this way, the rule conditions can be combined with the functional configuration to form a more flexible configuration.
     */
    parentId?: pulumi.Input<string>;
    /**
     * (Available since v1.132.0) The Status of the function.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DomainConfig resource.
 */
export interface DomainConfigArgs {
    /**
     * Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
     */
    domainName: pulumi.Input<string>;
    /**
     * The args of the domain config. See `functionArgs` below.
     */
    functionArgs: pulumi.Input<pulumi.Input<inputs.cdn.DomainConfigFunctionArg>[]>;
    /**
     * The name of the domain config.
     */
    functionName: pulumi.Input<string>;
    /**
     * By configuring the function condition (rule engine) in the domain name configuration function parameters, Rule conditions can be created (Rule conditions can match and filter user requests by identifying various parameters carried in user requests). After each rule condition is created, a corresponding ConfigId will be generated, and the ConfigId can be referenced by other functions as a ParentId parameter, in this way, the rule conditions can be combined with the functional configuration to form a more flexible configuration.
     */
    parentId?: pulumi.Input<string>;
}
