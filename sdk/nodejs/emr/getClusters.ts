// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the Emr Clusters of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available in v1.146.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-testAccClusters";
 * const defaultResourceGroups = alicloud.resourcemanager.getResourceGroups({
 *     status: "OK",
 * });
 * const defaultMainVersions = alicloud.emr.getMainVersions({});
 * const defaultInstanceTypes = defaultMainVersions.then(defaultMainVersions => alicloud.emr.getInstanceTypes({
 *     destinationResource: "InstanceType",
 *     clusterType: defaultMainVersions.mainVersions?[0]?.clusterTypes?[0],
 *     supportLocalStorage: false,
 *     instanceChargeType: "PostPaid",
 *     supportNodeTypes: [
 *         "MASTER",
 *         "CORE",
 *         "TASK",
 *     ],
 * }));
 * const dataDisk = Promise.all([defaultMainVersions, defaultInstanceTypes, defaultInstanceTypes]).then(([defaultMainVersions, defaultInstanceTypes, defaultInstanceTypes1]) => alicloud.emr.getDiskTypes({
 *     destinationResource: "DataDisk",
 *     clusterType: defaultMainVersions.mainVersions?[0]?.clusterTypes?[0],
 *     instanceChargeType: "PostPaid",
 *     instanceType: defaultInstanceTypes.types?[0]?.id,
 *     zoneId: defaultInstanceTypes1.types?[0]?.zoneId,
 * }));
 * const systemDisk = Promise.all([defaultMainVersions, defaultInstanceTypes, defaultInstanceTypes]).then(([defaultMainVersions, defaultInstanceTypes, defaultInstanceTypes1]) => alicloud.emr.getDiskTypes({
 *     destinationResource: "SystemDisk",
 *     clusterType: defaultMainVersions.mainVersions?[0]?.clusterTypes?[0],
 *     instanceChargeType: "PostPaid",
 *     instanceType: defaultInstanceTypes.types?[0]?.id,
 *     zoneId: defaultInstanceTypes1.types?[0]?.zoneId,
 * }));
 * const defaultNetworks = alicloud.vpc.getNetworks({
 *     nameRegex: "default-NODELETING",
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("defaultSecurityGroup", {vpcId: defaultNetworks.then(defaultNetworks => defaultNetworks.ids?[0])});
 * const defaultSwitches = Promise.all([defaultNetworks, defaultInstanceTypes]).then(([defaultNetworks, defaultInstanceTypes]) => alicloud.vpc.getSwitches({
 *     vpcId: defaultNetworks.ids?[0],
 *     zoneId: defaultInstanceTypes.types?[0]?.zoneId,
 * }));
 * const defaultRole = new alicloud.ram.Role("defaultRole", {
 *     document: `    {
 *         "Statement": [
 *         {
 *             "Action": "sts:AssumeRole",
 *             "Effect": "Allow",
 *             "Principal": {
 *             "Service": [
 *                 "emr.aliyuncs.com",
 *                 "ecs.aliyuncs.com"
 *             ]
 *             }
 *         }
 *         ],
 *         "Version": "1"
 *     }
 * `,
 *     description: "this is a role test.",
 *     force: true,
 * });
 * const defaultCluster = new alicloud.emr.Cluster("defaultCluster", {
 *     emrVer: defaultMainVersions.then(defaultMainVersions => defaultMainVersions.mainVersions?[0]?.emrVersion),
 *     clusterType: defaultMainVersions.then(defaultMainVersions => defaultMainVersions.mainVersions?[0]?.clusterTypes?[0]),
 *     hostGroups: [
 *         {
 *             hostGroupName: "master_group",
 *             hostGroupType: "MASTER",
 *             nodeCount: "2",
 *             instanceType: defaultInstanceTypes.then(defaultInstanceTypes => defaultInstanceTypes.types?[0]?.id),
 *             diskType: dataDisk.then(dataDisk => dataDisk.types?[0]?.value),
 *             diskCapacity: Promise.all([dataDisk, dataDisk]).then(([dataDisk, dataDisk1]) => dataDisk.types?[0]?.min > 160 ? dataDisk1.types?[0]?.min : 160),
 *             diskCount: "1",
 *             sysDiskType: systemDisk.then(systemDisk => systemDisk.types?[0]?.value),
 *             sysDiskCapacity: Promise.all([systemDisk, systemDisk]).then(([systemDisk, systemDisk1]) => systemDisk.types?[0]?.min > 160 ? systemDisk1.types?[0]?.min : 160),
 *         },
 *         {
 *             hostGroupName: "core_group",
 *             hostGroupType: "CORE",
 *             nodeCount: "3",
 *             instanceType: defaultInstanceTypes.then(defaultInstanceTypes => defaultInstanceTypes.types?[0]?.id),
 *             diskType: dataDisk.then(dataDisk => dataDisk.types?[0]?.value),
 *             diskCapacity: Promise.all([dataDisk, dataDisk]).then(([dataDisk, dataDisk1]) => dataDisk.types?[0]?.min > 160 ? dataDisk1.types?[0]?.min : 160),
 *             diskCount: "4",
 *             sysDiskType: systemDisk.then(systemDisk => systemDisk.types?[0]?.value),
 *             sysDiskCapacity: Promise.all([systemDisk, systemDisk]).then(([systemDisk, systemDisk1]) => systemDisk.types?[0]?.min > 160 ? systemDisk1.types?[0]?.min : 160),
 *         },
 *         {
 *             hostGroupName: "task_group",
 *             hostGroupType: "TASK",
 *             nodeCount: "2",
 *             instanceType: defaultInstanceTypes.then(defaultInstanceTypes => defaultInstanceTypes.types?[0]?.id),
 *             diskType: dataDisk.then(dataDisk => dataDisk.types?[0]?.value),
 *             diskCapacity: Promise.all([dataDisk, dataDisk]).then(([dataDisk, dataDisk1]) => dataDisk.types?[0]?.min > 160 ? dataDisk1.types?[0]?.min : 160),
 *             diskCount: "4",
 *             sysDiskType: systemDisk.then(systemDisk => systemDisk.types?[0]?.value),
 *             sysDiskCapacity: Promise.all([systemDisk, systemDisk]).then(([systemDisk, systemDisk1]) => systemDisk.types?[0]?.min > 160 ? systemDisk1.types?[0]?.min : 160),
 *         },
 *     ],
 *     highAvailabilityEnable: true,
 *     zoneId: defaultInstanceTypes.then(defaultInstanceTypes => defaultInstanceTypes.types?[0]?.zoneId),
 *     securityGroupId: defaultSecurityGroup.id,
 *     isOpenPublicIp: true,
 *     chargeType: "PostPaid",
 *     vswitchId: defaultSwitches.then(defaultSwitches => defaultSwitches.ids?[0]),
 *     userDefinedEmrEcsRole: defaultRole.name,
 *     sshEnable: true,
 *     masterPwd: "ABCtest1234!",
 *     tags: {
 *         Created: "TF",
 *         For: "acceptance test",
 *     },
 * });
 * const ids = alicloud.emr.getClusters({});
 * export const emrClusterId1 = ids.then(ids => ids.clusters?[0]?.id);
 * const nameRegex = alicloud.emr.getClustersOutput({
 *     nameRegex: defaultCluster.name,
 * });
 * export const emrClusterId2 = nameRegex.apply(nameRegex => nameRegex.clusters?[0]?.id);
 * ```
 */
export function getClusters(args?: GetClustersArgs, opts?: pulumi.InvokeOptions): Promise<GetClustersResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("alicloud:emr/getClusters:getClusters", {
        "clusterName": args.clusterName,
        "clusterTypeLists": args.clusterTypeLists,
        "createType": args.createType,
        "defaultStatus": args.defaultStatus,
        "depositType": args.depositType,
        "enableDetails": args.enableDetails,
        "ids": args.ids,
        "isDesc": args.isDesc,
        "machineType": args.machineType,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "resourceGroupId": args.resourceGroupId,
        "statusLists": args.statusLists,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getClusters.
 */
export interface GetClustersArgs {
    /**
     * The name of the associated cluster.
     */
    clusterName?: string;
    /**
     * The cluster type list.
     */
    clusterTypeLists?: string[];
    /**
     * How to create a cluster.
     */
    createType?: string;
    /**
     * The default status.
     */
    defaultStatus?: boolean;
    /**
     * The hosting type of the cluster.
     */
    depositType?: string;
    /**
     * Default to `false`. Set it to `true` can output more details about resource attributes.
     */
    enableDetails?: boolean;
    /**
     * A list of Cluster IDs.
     */
    ids?: string[];
    /**
     * The is desc.
     */
    isDesc?: boolean;
    /**
     * The host type of the cluster. The default is ECS.
     */
    machineType?: string;
    /**
     * A regex string to filter results by Cluster name.
     */
    nameRegex?: string;
    outputFile?: string;
    /**
     * The Resource Group ID.
     */
    resourceGroupId?: string;
    /**
     * The status list. Valid values: `ABNORMAL`, `CREATE_FAILED`, `CREATING`, `IDLE`, `RELEASED`, `RELEASE_FAILED`, `RELEASING`, `RUNNING`, `WAIT_FOR_PAY`.
     */
    statusLists?: string[];
    /**
     * The VPC ID.
     */
    vpcId?: string;
}

/**
 * A collection of values returned by getClusters.
 */
export interface GetClustersResult {
    readonly clusterName?: string;
    readonly clusterTypeLists?: string[];
    readonly clusters: outputs.emr.GetClustersCluster[];
    readonly createType?: string;
    readonly defaultStatus?: boolean;
    readonly depositType?: string;
    readonly enableDetails?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly isDesc?: boolean;
    readonly machineType?: string;
    readonly nameRegex?: string;
    readonly names: string[];
    readonly outputFile?: string;
    readonly resourceGroupId?: string;
    readonly statusLists?: string[];
    readonly vpcId?: string;
}

export function getClustersOutput(args?: GetClustersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClustersResult> {
    return pulumi.output(args).apply(a => getClusters(a, opts))
}

/**
 * A collection of arguments for invoking getClusters.
 */
export interface GetClustersOutputArgs {
    /**
     * The name of the associated cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The cluster type list.
     */
    clusterTypeLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How to create a cluster.
     */
    createType?: pulumi.Input<string>;
    /**
     * The default status.
     */
    defaultStatus?: pulumi.Input<boolean>;
    /**
     * The hosting type of the cluster.
     */
    depositType?: pulumi.Input<string>;
    /**
     * Default to `false`. Set it to `true` can output more details about resource attributes.
     */
    enableDetails?: pulumi.Input<boolean>;
    /**
     * A list of Cluster IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The is desc.
     */
    isDesc?: pulumi.Input<boolean>;
    /**
     * The host type of the cluster. The default is ECS.
     */
    machineType?: pulumi.Input<string>;
    /**
     * A regex string to filter results by Cluster name.
     */
    nameRegex?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    /**
     * The Resource Group ID.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The status list. Valid values: `ABNORMAL`, `CREATE_FAILED`, `CREATING`, `IDLE`, `RELEASED`, `RELEASE_FAILED`, `RELEASING`, `RUNNING`, `WAIT_FOR_PAY`.
     */
    statusLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The VPC ID.
     */
    vpcId?: pulumi.Input<string>;
}
