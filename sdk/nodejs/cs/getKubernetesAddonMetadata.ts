// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source provides metadata of kubernetes cluster addons.
 *
 * > **NOTE:** Available in 1.166.0+.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 * });
 * const defaultManagedKubernetes = new alicloud.cs.ManagedKubernetes("default", {
 *     namePrefix: name,
 *     clusterSpec: "ack.pro.small",
 *     workerVswitchIds: [defaultSwitch.id],
 *     newNatGateway: false,
 *     podCidr: std.cidrsubnet({
 *         input: "10.0.0.0/8",
 *         newbits: 8,
 *         netnum: 36,
 *     }).then(invoke => invoke.result),
 *     serviceCidr: std.cidrsubnet({
 *         input: "172.16.0.0/16",
 *         newbits: 4,
 *         netnum: 7,
 *     }).then(invoke => invoke.result),
 *     slbInternetEnabled: true,
 * });
 * const clusterId = defaultManagedKubernetes.id;
 * const defaultGetKubernetesAddonMetadata = alicloud.cs.getKubernetesAddonMetadataOutput({
 *     clusterId: clusterId,
 *     name: "nginx-ingress-controller",
 *     version: "v1.1.2-aliyun.2",
 * });
 * export const addonConfigSchema = defaultGetKubernetesAddonMetadata.apply(defaultGetKubernetesAddonMetadata => defaultGetKubernetesAddonMetadata.configSchema);
 * ```
 */
export function getKubernetesAddonMetadata(args: GetKubernetesAddonMetadataArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesAddonMetadataResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:cs/getKubernetesAddonMetadata:getKubernetesAddonMetadata", {
        "clusterId": args.clusterId,
        "name": args.name,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getKubernetesAddonMetadata.
 */
export interface GetKubernetesAddonMetadataArgs {
    /**
     * The id of kubernetes cluster.
     */
    clusterId: string;
    /**
     * The name of the cluster addon. You can get a list of available addons that the cluster can install by using data source `alicloud.cs.getKubernetesAddons`.
     */
    name: string;
    /**
     * The version of the cluster addon.
     */
    version: string;
}

/**
 * A collection of values returned by getKubernetesAddonMetadata.
 */
export interface GetKubernetesAddonMetadataResult {
    readonly clusterId: string;
    /**
     * The addon configuration that can be customized. The returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet.
     */
    readonly configSchema: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly version: string;
}
/**
 * This data source provides metadata of kubernetes cluster addons.
 *
 * > **NOTE:** Available in 1.166.0+.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 * });
 * const defaultManagedKubernetes = new alicloud.cs.ManagedKubernetes("default", {
 *     namePrefix: name,
 *     clusterSpec: "ack.pro.small",
 *     workerVswitchIds: [defaultSwitch.id],
 *     newNatGateway: false,
 *     podCidr: std.cidrsubnet({
 *         input: "10.0.0.0/8",
 *         newbits: 8,
 *         netnum: 36,
 *     }).then(invoke => invoke.result),
 *     serviceCidr: std.cidrsubnet({
 *         input: "172.16.0.0/16",
 *         newbits: 4,
 *         netnum: 7,
 *     }).then(invoke => invoke.result),
 *     slbInternetEnabled: true,
 * });
 * const clusterId = defaultManagedKubernetes.id;
 * const defaultGetKubernetesAddonMetadata = alicloud.cs.getKubernetesAddonMetadataOutput({
 *     clusterId: clusterId,
 *     name: "nginx-ingress-controller",
 *     version: "v1.1.2-aliyun.2",
 * });
 * export const addonConfigSchema = defaultGetKubernetesAddonMetadata.apply(defaultGetKubernetesAddonMetadata => defaultGetKubernetesAddonMetadata.configSchema);
 * ```
 */
export function getKubernetesAddonMetadataOutput(args: GetKubernetesAddonMetadataOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetKubernetesAddonMetadataResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("alicloud:cs/getKubernetesAddonMetadata:getKubernetesAddonMetadata", {
        "clusterId": args.clusterId,
        "name": args.name,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getKubernetesAddonMetadata.
 */
export interface GetKubernetesAddonMetadataOutputArgs {
    /**
     * The id of kubernetes cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The name of the cluster addon. You can get a list of available addons that the cluster can install by using data source `alicloud.cs.getKubernetesAddons`.
     */
    name: pulumi.Input<string>;
    /**
     * The version of the cluster addon.
     */
    version: pulumi.Input<string>;
}
