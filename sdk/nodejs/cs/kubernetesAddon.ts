// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * Basic Usage
 *
 * ## Import
 *
 * Cluster addon can be imported by cluster id and addon name. Then write the addon.tf file according to the result of `pulumi preview`.
 *
 * ```sh
 * $ pulumi import alicloud:cs/kubernetesAddon:KubernetesAddon my_addon <cluster_id>:<addon_name>
 * ```
 */
export class KubernetesAddon extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesAddon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesAddonState, opts?: pulumi.CustomResourceOptions): KubernetesAddon {
        return new KubernetesAddon(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cs/kubernetesAddon:KubernetesAddon';

    /**
     * Returns true if the given object is an instance of KubernetesAddon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesAddon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesAddon.__pulumiType;
    }

    /**
     * Is the addon ready for upgrade.
     */
    declare public /*out*/ readonly canUpgrade: pulumi.Output<boolean>;
    /**
     * Whether to clean up cloud resources when deleting. Currently only works for addon `ack-virtual-node` and you must specify it when uninstall addon `ack-virtual-node`. Valid values: `true`: clean up, `false`: do not clean up.
     */
    declare public readonly cleanupCloudResources: pulumi.Output<boolean | undefined>;
    /**
     * The id of kubernetes cluster.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * The customized configuration of addon. Your customized configuration will be merged to existed configuration stored in server. If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. You can checkout the customized configuration of the addon through datasource `alicloud.cs.getKubernetesAddonMetadata`, the returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet. You can also checkout the current custom configuration through the data source `alicloud.cs.getKubernetesAddons`.
     */
    declare public readonly config: pulumi.Output<string>;
    /**
     * The name of addon.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The version which addon can be upgraded to.
     */
    declare public /*out*/ readonly nextVersion: pulumi.Output<string>;
    /**
     * Is it a mandatory addon to be installed.
     */
    declare public /*out*/ readonly required: pulumi.Output<boolean>;
    /**
     * The current version of addon.
     */
    declare public readonly version: pulumi.Output<string>;

    /**
     * Create a KubernetesAddon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesAddonArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesAddonArgs | KubernetesAddonState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesAddonState | undefined;
            resourceInputs["canUpgrade"] = state?.canUpgrade;
            resourceInputs["cleanupCloudResources"] = state?.cleanupCloudResources;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["config"] = state?.config;
            resourceInputs["name"] = state?.name;
            resourceInputs["nextVersion"] = state?.nextVersion;
            resourceInputs["required"] = state?.required;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as KubernetesAddonArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["cleanupCloudResources"] = args?.cleanupCloudResources;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["config"] = args?.config;
            resourceInputs["name"] = args?.name;
            resourceInputs["version"] = args?.version;
            resourceInputs["canUpgrade"] = undefined /*out*/;
            resourceInputs["nextVersion"] = undefined /*out*/;
            resourceInputs["required"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesAddon.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubernetesAddon resources.
 */
export interface KubernetesAddonState {
    /**
     * Is the addon ready for upgrade.
     */
    canUpgrade?: pulumi.Input<boolean>;
    /**
     * Whether to clean up cloud resources when deleting. Currently only works for addon `ack-virtual-node` and you must specify it when uninstall addon `ack-virtual-node`. Valid values: `true`: clean up, `false`: do not clean up.
     */
    cleanupCloudResources?: pulumi.Input<boolean>;
    /**
     * The id of kubernetes cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The customized configuration of addon. Your customized configuration will be merged to existed configuration stored in server. If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. You can checkout the customized configuration of the addon through datasource `alicloud.cs.getKubernetesAddonMetadata`, the returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet. You can also checkout the current custom configuration through the data source `alicloud.cs.getKubernetesAddons`.
     */
    config?: pulumi.Input<string>;
    /**
     * The name of addon.
     */
    name?: pulumi.Input<string>;
    /**
     * The version which addon can be upgraded to.
     */
    nextVersion?: pulumi.Input<string>;
    /**
     * Is it a mandatory addon to be installed.
     */
    required?: pulumi.Input<boolean>;
    /**
     * The current version of addon.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesAddon resource.
 */
export interface KubernetesAddonArgs {
    /**
     * Whether to clean up cloud resources when deleting. Currently only works for addon `ack-virtual-node` and you must specify it when uninstall addon `ack-virtual-node`. Valid values: `true`: clean up, `false`: do not clean up.
     */
    cleanupCloudResources?: pulumi.Input<boolean>;
    /**
     * The id of kubernetes cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The customized configuration of addon. Your customized configuration will be merged to existed configuration stored in server. If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. You can checkout the customized configuration of the addon through datasource `alicloud.cs.getKubernetesAddonMetadata`, the returned format is the standard json schema. If return empty, it means that the addon does not support custom configuration yet. You can also checkout the current custom configuration through the data source `alicloud.cs.getKubernetesAddons`.
     */
    config?: pulumi.Input<string>;
    /**
     * The name of addon.
     */
    name?: pulumi.Input<string>;
    /**
     * The current version of addon.
     */
    version?: pulumi.Input<string>;
}
