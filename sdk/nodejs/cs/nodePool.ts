// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * Basic Usage
 *
 * ## Import
 *
 * ACK Nodepool can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cs/nodePool:NodePool example <cluster_id>:<node_pool_id>
 * ```
 */
export class NodePool extends pulumi.CustomResource {
    /**
     * Get an existing NodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodePoolState, opts?: pulumi.CustomResourceOptions): NodePool {
        return new NodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cs/nodePool:NodePool';

    /**
     * Returns true if the given object is an instance of NodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodePool.__pulumiType;
    }

    /**
     * Whether to enable automatic renewal for nodes in the node pool takes effect only when `instanceChargeType` is set to `PrePaid`. Default value: `false`. Valid values:
     */
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    /**
     * The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
     */
    public readonly autoRenewPeriod!: pulumi.Output<number | undefined>;
    /**
     * Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `securityHardeningOs` instead.
     *
     * @deprecated Field 'cis_enabled' has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `securityHardeningOs` instead.
     */
    public readonly cisEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The id of kubernetes cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multiAzPolicy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
     */
    public readonly compensateWithOnDemand!: pulumi.Output<boolean | undefined>;
    /**
     * Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
     */
    public readonly cpuPolicy!: pulumi.Output<string>;
    /**
     * Configure the data disk of the node in the node pool. See `dataDisks` below.
     */
    public readonly dataDisks!: pulumi.Output<outputs.cs.NodePoolDataDisk[] | undefined>;
    /**
     * The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     */
    public readonly deploymentSetId!: pulumi.Output<string | undefined>;
    /**
     * Number of expected nodes in the node pool.
     */
    public readonly desiredSize!: pulumi.Output<number | undefined>;
    /**
     * Whether to force deletion.
     */
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    /**
     * After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     */
    public readonly formatDisk!: pulumi.Output<boolean>;
    /**
     * The custom image ID. The system-provided image is used by default.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * The operating system image type and the `platform` parameter can be selected from the following values:
     * - `AliyunLinux` : Alinux2 image.
     * - `AliyunLinux3` : Alinux3 image.
     * - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
     * - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
     * - `CentOS` : CentOS image.
     * - `Windows` : Windows image.
     * - `WindowsCore` : WindowsCore image.
     * - `ContainerOS` : container-optimized image.
     */
    public readonly imageType!: pulumi.Output<string>;
    /**
     * Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
     */
    public readonly installCloudMonitor!: pulumi.Output<boolean | undefined>;
    /**
     * Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
     */
    public readonly instanceChargeType!: pulumi.Output<string | undefined>;
    /**
     * In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
     */
    public readonly instanceTypes!: pulumi.Output<string[]>;
    /**
     * The instance list. Add existing nodes under the same cluster VPC to the node pool.
     */
    public readonly instances!: pulumi.Output<string[] | undefined>;
    /**
     * The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one. .
     */
    public readonly internetChargeType!: pulumi.Output<string | undefined>;
    /**
     * The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\].
     */
    public readonly internetMaxBandwidthOut!: pulumi.Output<number | undefined>;
    /**
     * Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     */
    public readonly keepInstanceName!: pulumi.Output<boolean>;
    /**
     * The name of the key pair. When the node pool is a managed node pool, only `keyName` is supported.
     */
    public readonly keyName!: pulumi.Output<string | undefined>;
    /**
     * An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
     */
    public readonly kmsEncryptedPassword!: pulumi.Output<string | undefined>;
    /**
     * An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a cs kubernetes with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
     */
    public readonly kmsEncryptionContext!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Kubelet configuration parameters for worker nodes. See `kubeletConfiguration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubeletConfiguration` below.
     */
    public readonly kubeletConfiguration!: pulumi.Output<outputs.cs.NodePoolKubeletConfiguration | undefined>;
    /**
     * A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
     */
    public readonly labels!: pulumi.Output<outputs.cs.NodePoolLabel[] | undefined>;
    /**
     * Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
     */
    public readonly loginAsNonRoot!: pulumi.Output<boolean | undefined>;
    /**
     * Managed node pool configuration. See `management` below.
     */
    public readonly management!: pulumi.Output<outputs.cs.NodePoolManagement>;
    /**
     * The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
     */
    public readonly multiAzPolicy!: pulumi.Output<string>;
    /**
     * . Field 'name' has been deprecated from provider version 1.219.0. New field 'node_pool_name' instead.
     *
     * @deprecated Field 'name' has been deprecated since provider version 1.219.0. New field 'node_pool_name' instead.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
     *
     * @deprecated Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
     */
    public readonly nodeCount!: pulumi.Output<number>;
    /**
     * Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
     * - The prefix and suffix can be composed of one or more parts separated by '.', each part can use lowercase letters, numbers and '-', and the beginning and end of the node name must be lowercase letters and numbers.
     * - The node IP address is the complete private IP address of the node.
     * - For example, if the string `customized,aliyun,ip,com` is passed in (where 'customized' and 'ip' are fixed strings, 'aliyun' is the prefix, and 'com' is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
     */
    public readonly nodeNameMode!: pulumi.Output<string>;
    /**
     * The first ID of the resource.
     */
    public /*out*/ readonly nodePoolId!: pulumi.Output<string>;
    /**
     * The name of node pool.
     */
    public readonly nodePoolName!: pulumi.Output<string>;
    /**
     * The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
     */
    public readonly onDemandBaseCapacity!: pulumi.Output<number | undefined>;
    /**
     * The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `onDemandBaseCapacity`. Valid values: 0 to 100.
     */
    public readonly onDemandPercentageAboveBaseCapacity!: pulumi.Output<number | undefined>;
    /**
     * The password of ssh login. You have to specify one of `password` and `keyName` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Node payment period unit, valid value: `Month`. Default is `Month`.
     */
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * Operating system release, using `imageType` instead.
     *
     * @deprecated Field 'platform' has been deprecated from provider version 1.145.0. Operating system release, using `imageType` instead.
     */
    public readonly platform!: pulumi.Output<string>;
    /**
     * Private node pool configuration. See `privatePoolOptions` below.
     */
    public readonly privatePoolOptions!: pulumi.Output<outputs.cs.NodePoolPrivatePoolOptions | undefined>;
    /**
     * The list of RDS instances.
     */
    public readonly rdsInstances!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the resource group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * Rotary configuration. See `rollingPolicy` below.
     */
    public readonly rollingPolicy!: pulumi.Output<outputs.cs.NodePoolRollingPolicy | undefined>;
    /**
     * The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     */
    public readonly runtimeName!: pulumi.Output<string>;
    /**
     * The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     */
    public readonly runtimeVersion!: pulumi.Output<string>;
    /**
     * Automatic scaling configuration. See `scalingConfig` below.
     */
    public readonly scalingConfig!: pulumi.Output<outputs.cs.NodePoolScalingConfig>;
    /**
     * The ID of the scaling group.
     */
    public /*out*/ readonly scalingGroupId!: pulumi.Output<string>;
    /**
     * Scaling group mode, default value: `release`. Valid values:
     */
    public readonly scalingPolicy!: pulumi.Output<string>;
    /**
     * The security group ID of the node pool. This field has been replaced by `securityGroupIds`, please use the `securityGroupIds` field instead.
     *
     * @deprecated Field 'security_group_id' has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `securityGroupIds`, please use the `securityGroupIds` field instead.
     */
    public readonly securityGroupId!: pulumi.Output<string>;
    /**
     * Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
     */
    public readonly securityHardeningOs!: pulumi.Output<boolean | undefined>;
    /**
     * Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
     * > **NOTE:**  It is forbidden to set both `securityHardeningOs` and `socEnabled` to `true` at the same time.
     */
    public readonly socEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
     */
    public readonly spotInstancePools!: pulumi.Output<number | undefined>;
    /**
     * Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
     */
    public readonly spotInstanceRemedy!: pulumi.Output<boolean | undefined>;
    /**
     * The current single preemptible instance type market price range configuration. See `spotPriceLimit` below.
     */
    public readonly spotPriceLimits!: pulumi.Output<outputs.cs.NodePoolSpotPriceLimit[] | undefined>;
    /**
     * The preemptible instance type. Value:
     * - `NoSpot` : Non-preemptible instance.
     * - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
     * - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
     */
    public readonly spotStrategy!: pulumi.Output<string>;
    /**
     * Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `systemDiskCategory` is set to `cloudAuto`.
     */
    public readonly systemDiskBurstingEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values: `cloud`: cloud disk. `cloudEfficiency`: a high-efficiency cloud disk. `cloudSsd`:SSD cloud disk. `cloudEssd`: ESSD cloud disk.
     */
    public readonly systemDiskCategories!: pulumi.Output<string[]>;
    /**
     * The system disk category of worker node. Its valid value are `cloudSsd`, `cloudEfficiency`, `cloudEssd` and `cloudAuto`. .
     */
    public readonly systemDiskCategory!: pulumi.Output<string>;
    /**
     * The encryption algorithm used by the system disk. Value range: aes-256.
     */
    public readonly systemDiskEncryptAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
     */
    public readonly systemDiskEncrypted!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the KMS key used by the system disk.
     */
    public readonly systemDiskKmsKey!: pulumi.Output<string | undefined>;
    /**
     * The system disk performance of the node takes effect only for the ESSD disk.
     * - `PL0`: maximum random read/write IOPS 10000 for a single disk.
     * - `PL1`: maximum random read/write IOPS 50000 for a single disk.
     * - `PL2`: highest random read/write IOPS 100000 for a single disk.
     * - `PL3`: maximum random read/write IOPS 1 million for a single disk.
     */
    public readonly systemDiskPerformanceLevel!: pulumi.Output<string | undefined>;
    /**
     * The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `systemDiskCategory` is set to `cloudAuto`.
     */
    public readonly systemDiskProvisionedIops!: pulumi.Output<number | undefined>;
    /**
     * The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
     */
    public readonly systemDiskSize!: pulumi.Output<number | undefined>;
    /**
     * The ID of the automatic snapshot policy used by the system disk.
     */
    public readonly systemDiskSnapshotPolicyId!: pulumi.Output<string | undefined>;
    /**
     * Add tags only for ECS instances.  The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://".
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
     */
    public readonly taints!: pulumi.Output<outputs.cs.NodePoolTaint[] | undefined>;
    /**
     * The configuration about confidential computing for the cluster. See `teeConfig` below.
     */
    public readonly teeConfig!: pulumi.Output<outputs.cs.NodePoolTeeConfig>;
    /**
     * Whether the node after expansion can be scheduled.
     */
    public readonly unschedulable!: pulumi.Output<boolean | undefined>;
    /**
     * Synchronously update node labels and taints.
     */
    public readonly updateNodes!: pulumi.Output<boolean | undefined>;
    /**
     * Node custom data.
     */
    public readonly userData!: pulumi.Output<string | undefined>;
    /**
     * The vswitches used by node pool workers.
     */
    public readonly vswitchIds!: pulumi.Output<string[]>;

    /**
     * Create a NodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodePoolArgs | NodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodePoolState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = state ? state.autoRenewPeriod : undefined;
            resourceInputs["cisEnabled"] = state ? state.cisEnabled : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["compensateWithOnDemand"] = state ? state.compensateWithOnDemand : undefined;
            resourceInputs["cpuPolicy"] = state ? state.cpuPolicy : undefined;
            resourceInputs["dataDisks"] = state ? state.dataDisks : undefined;
            resourceInputs["deploymentSetId"] = state ? state.deploymentSetId : undefined;
            resourceInputs["desiredSize"] = state ? state.desiredSize : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["formatDisk"] = state ? state.formatDisk : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["installCloudMonitor"] = state ? state.installCloudMonitor : undefined;
            resourceInputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            resourceInputs["instanceTypes"] = state ? state.instanceTypes : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["internetChargeType"] = state ? state.internetChargeType : undefined;
            resourceInputs["internetMaxBandwidthOut"] = state ? state.internetMaxBandwidthOut : undefined;
            resourceInputs["keepInstanceName"] = state ? state.keepInstanceName : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["kmsEncryptedPassword"] = state ? state.kmsEncryptedPassword : undefined;
            resourceInputs["kmsEncryptionContext"] = state ? state.kmsEncryptionContext : undefined;
            resourceInputs["kubeletConfiguration"] = state ? state.kubeletConfiguration : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["loginAsNonRoot"] = state ? state.loginAsNonRoot : undefined;
            resourceInputs["management"] = state ? state.management : undefined;
            resourceInputs["multiAzPolicy"] = state ? state.multiAzPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nodeNameMode"] = state ? state.nodeNameMode : undefined;
            resourceInputs["nodePoolId"] = state ? state.nodePoolId : undefined;
            resourceInputs["nodePoolName"] = state ? state.nodePoolName : undefined;
            resourceInputs["onDemandBaseCapacity"] = state ? state.onDemandBaseCapacity : undefined;
            resourceInputs["onDemandPercentageAboveBaseCapacity"] = state ? state.onDemandPercentageAboveBaseCapacity : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["privatePoolOptions"] = state ? state.privatePoolOptions : undefined;
            resourceInputs["rdsInstances"] = state ? state.rdsInstances : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["rollingPolicy"] = state ? state.rollingPolicy : undefined;
            resourceInputs["runtimeName"] = state ? state.runtimeName : undefined;
            resourceInputs["runtimeVersion"] = state ? state.runtimeVersion : undefined;
            resourceInputs["scalingConfig"] = state ? state.scalingConfig : undefined;
            resourceInputs["scalingGroupId"] = state ? state.scalingGroupId : undefined;
            resourceInputs["scalingPolicy"] = state ? state.scalingPolicy : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["securityHardeningOs"] = state ? state.securityHardeningOs : undefined;
            resourceInputs["socEnabled"] = state ? state.socEnabled : undefined;
            resourceInputs["spotInstancePools"] = state ? state.spotInstancePools : undefined;
            resourceInputs["spotInstanceRemedy"] = state ? state.spotInstanceRemedy : undefined;
            resourceInputs["spotPriceLimits"] = state ? state.spotPriceLimits : undefined;
            resourceInputs["spotStrategy"] = state ? state.spotStrategy : undefined;
            resourceInputs["systemDiskBurstingEnabled"] = state ? state.systemDiskBurstingEnabled : undefined;
            resourceInputs["systemDiskCategories"] = state ? state.systemDiskCategories : undefined;
            resourceInputs["systemDiskCategory"] = state ? state.systemDiskCategory : undefined;
            resourceInputs["systemDiskEncryptAlgorithm"] = state ? state.systemDiskEncryptAlgorithm : undefined;
            resourceInputs["systemDiskEncrypted"] = state ? state.systemDiskEncrypted : undefined;
            resourceInputs["systemDiskKmsKey"] = state ? state.systemDiskKmsKey : undefined;
            resourceInputs["systemDiskPerformanceLevel"] = state ? state.systemDiskPerformanceLevel : undefined;
            resourceInputs["systemDiskProvisionedIops"] = state ? state.systemDiskProvisionedIops : undefined;
            resourceInputs["systemDiskSize"] = state ? state.systemDiskSize : undefined;
            resourceInputs["systemDiskSnapshotPolicyId"] = state ? state.systemDiskSnapshotPolicyId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["teeConfig"] = state ? state.teeConfig : undefined;
            resourceInputs["unschedulable"] = state ? state.unschedulable : undefined;
            resourceInputs["updateNodes"] = state ? state.updateNodes : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["vswitchIds"] = state ? state.vswitchIds : undefined;
        } else {
            const args = argsOrState as NodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.instanceTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceTypes'");
            }
            if ((!args || args.vswitchIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchIds'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = args ? args.autoRenewPeriod : undefined;
            resourceInputs["cisEnabled"] = args ? args.cisEnabled : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["compensateWithOnDemand"] = args ? args.compensateWithOnDemand : undefined;
            resourceInputs["cpuPolicy"] = args ? args.cpuPolicy : undefined;
            resourceInputs["dataDisks"] = args ? args.dataDisks : undefined;
            resourceInputs["deploymentSetId"] = args ? args.deploymentSetId : undefined;
            resourceInputs["desiredSize"] = args ? args.desiredSize : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["formatDisk"] = args ? args.formatDisk : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["imageType"] = args ? args.imageType : undefined;
            resourceInputs["installCloudMonitor"] = args ? args.installCloudMonitor : undefined;
            resourceInputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            resourceInputs["instanceTypes"] = args ? args.instanceTypes : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["internetChargeType"] = args ? args.internetChargeType : undefined;
            resourceInputs["internetMaxBandwidthOut"] = args ? args.internetMaxBandwidthOut : undefined;
            resourceInputs["keepInstanceName"] = args ? args.keepInstanceName : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["kmsEncryptedPassword"] = args?.kmsEncryptedPassword ? pulumi.secret(args.kmsEncryptedPassword) : undefined;
            resourceInputs["kmsEncryptionContext"] = args ? args.kmsEncryptionContext : undefined;
            resourceInputs["kubeletConfiguration"] = args ? args.kubeletConfiguration : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["loginAsNonRoot"] = args ? args.loginAsNonRoot : undefined;
            resourceInputs["management"] = args ? args.management : undefined;
            resourceInputs["multiAzPolicy"] = args ? args.multiAzPolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["nodeNameMode"] = args ? args.nodeNameMode : undefined;
            resourceInputs["nodePoolName"] = args ? args.nodePoolName : undefined;
            resourceInputs["onDemandBaseCapacity"] = args ? args.onDemandBaseCapacity : undefined;
            resourceInputs["onDemandPercentageAboveBaseCapacity"] = args ? args.onDemandPercentageAboveBaseCapacity : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["privatePoolOptions"] = args ? args.privatePoolOptions : undefined;
            resourceInputs["rdsInstances"] = args ? args.rdsInstances : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["rollingPolicy"] = args ? args.rollingPolicy : undefined;
            resourceInputs["runtimeName"] = args ? args.runtimeName : undefined;
            resourceInputs["runtimeVersion"] = args ? args.runtimeVersion : undefined;
            resourceInputs["scalingConfig"] = args ? args.scalingConfig : undefined;
            resourceInputs["scalingPolicy"] = args ? args.scalingPolicy : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["securityHardeningOs"] = args ? args.securityHardeningOs : undefined;
            resourceInputs["socEnabled"] = args ? args.socEnabled : undefined;
            resourceInputs["spotInstancePools"] = args ? args.spotInstancePools : undefined;
            resourceInputs["spotInstanceRemedy"] = args ? args.spotInstanceRemedy : undefined;
            resourceInputs["spotPriceLimits"] = args ? args.spotPriceLimits : undefined;
            resourceInputs["spotStrategy"] = args ? args.spotStrategy : undefined;
            resourceInputs["systemDiskBurstingEnabled"] = args ? args.systemDiskBurstingEnabled : undefined;
            resourceInputs["systemDiskCategories"] = args ? args.systemDiskCategories : undefined;
            resourceInputs["systemDiskCategory"] = args ? args.systemDiskCategory : undefined;
            resourceInputs["systemDiskEncryptAlgorithm"] = args ? args.systemDiskEncryptAlgorithm : undefined;
            resourceInputs["systemDiskEncrypted"] = args ? args.systemDiskEncrypted : undefined;
            resourceInputs["systemDiskKmsKey"] = args ? args.systemDiskKmsKey : undefined;
            resourceInputs["systemDiskPerformanceLevel"] = args ? args.systemDiskPerformanceLevel : undefined;
            resourceInputs["systemDiskProvisionedIops"] = args ? args.systemDiskProvisionedIops : undefined;
            resourceInputs["systemDiskSize"] = args ? args.systemDiskSize : undefined;
            resourceInputs["systemDiskSnapshotPolicyId"] = args ? args.systemDiskSnapshotPolicyId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["teeConfig"] = args ? args.teeConfig : undefined;
            resourceInputs["unschedulable"] = args ? args.unschedulable : undefined;
            resourceInputs["updateNodes"] = args ? args.updateNodes : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["vswitchIds"] = args ? args.vswitchIds : undefined;
            resourceInputs["nodePoolId"] = undefined /*out*/;
            resourceInputs["scalingGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kmsEncryptedPassword", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodePool resources.
 */
export interface NodePoolState {
    /**
     * Whether to enable automatic renewal for nodes in the node pool takes effect only when `instanceChargeType` is set to `PrePaid`. Default value: `false`. Valid values:
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
     */
    autoRenewPeriod?: pulumi.Input<number>;
    /**
     * Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `securityHardeningOs` instead.
     *
     * @deprecated Field 'cis_enabled' has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `securityHardeningOs` instead.
     */
    cisEnabled?: pulumi.Input<boolean>;
    /**
     * The id of kubernetes cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multiAzPolicy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
     */
    compensateWithOnDemand?: pulumi.Input<boolean>;
    /**
     * Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
     */
    cpuPolicy?: pulumi.Input<string>;
    /**
     * Configure the data disk of the node in the node pool. See `dataDisks` below.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolDataDisk>[]>;
    /**
     * The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     */
    deploymentSetId?: pulumi.Input<string>;
    /**
     * Number of expected nodes in the node pool.
     */
    desiredSize?: pulumi.Input<number>;
    /**
     * Whether to force deletion.
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     */
    formatDisk?: pulumi.Input<boolean>;
    /**
     * The custom image ID. The system-provided image is used by default.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The operating system image type and the `platform` parameter can be selected from the following values:
     * - `AliyunLinux` : Alinux2 image.
     * - `AliyunLinux3` : Alinux3 image.
     * - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
     * - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
     * - `CentOS` : CentOS image.
     * - `Windows` : Windows image.
     * - `WindowsCore` : WindowsCore image.
     * - `ContainerOS` : container-optimized image.
     */
    imageType?: pulumi.Input<string>;
    /**
     * Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
     */
    installCloudMonitor?: pulumi.Input<boolean>;
    /**
     * Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
     */
    instanceChargeType?: pulumi.Input<string>;
    /**
     * In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
     */
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance list. Add existing nodes under the same cluster VPC to the node pool.
     */
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one. .
     */
    internetChargeType?: pulumi.Input<string>;
    /**
     * The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\].
     */
    internetMaxBandwidthOut?: pulumi.Input<number>;
    /**
     * Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     */
    keepInstanceName?: pulumi.Input<boolean>;
    /**
     * The name of the key pair. When the node pool is a managed node pool, only `keyName` is supported.
     */
    keyName?: pulumi.Input<string>;
    /**
     * An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
     */
    kmsEncryptedPassword?: pulumi.Input<string>;
    /**
     * An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a cs kubernetes with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
     */
    kmsEncryptionContext?: pulumi.Input<{[key: string]: any}>;
    /**
     * Kubelet configuration parameters for worker nodes. See `kubeletConfiguration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubeletConfiguration` below.
     */
    kubeletConfiguration?: pulumi.Input<inputs.cs.NodePoolKubeletConfiguration>;
    /**
     * A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolLabel>[]>;
    /**
     * Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
     */
    loginAsNonRoot?: pulumi.Input<boolean>;
    /**
     * Managed node pool configuration. See `management` below.
     */
    management?: pulumi.Input<inputs.cs.NodePoolManagement>;
    /**
     * The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
     */
    multiAzPolicy?: pulumi.Input<string>;
    /**
     * . Field 'name' has been deprecated from provider version 1.219.0. New field 'node_pool_name' instead.
     *
     * @deprecated Field 'name' has been deprecated since provider version 1.219.0. New field 'node_pool_name' instead.
     */
    name?: pulumi.Input<string>;
    /**
     * The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
     *
     * @deprecated Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
     * - The prefix and suffix can be composed of one or more parts separated by '.', each part can use lowercase letters, numbers and '-', and the beginning and end of the node name must be lowercase letters and numbers.
     * - The node IP address is the complete private IP address of the node.
     * - For example, if the string `customized,aliyun,ip,com` is passed in (where 'customized' and 'ip' are fixed strings, 'aliyun' is the prefix, and 'com' is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
     */
    nodeNameMode?: pulumi.Input<string>;
    /**
     * The first ID of the resource.
     */
    nodePoolId?: pulumi.Input<string>;
    /**
     * The name of node pool.
     */
    nodePoolName?: pulumi.Input<string>;
    /**
     * The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
     */
    onDemandBaseCapacity?: pulumi.Input<number>;
    /**
     * The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `onDemandBaseCapacity`. Valid values: 0 to 100.
     */
    onDemandPercentageAboveBaseCapacity?: pulumi.Input<number>;
    /**
     * The password of ssh login. You have to specify one of `password` and `keyName` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
     */
    password?: pulumi.Input<string>;
    /**
     * Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
     */
    period?: pulumi.Input<number>;
    /**
     * Node payment period unit, valid value: `Month`. Default is `Month`.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Operating system release, using `imageType` instead.
     *
     * @deprecated Field 'platform' has been deprecated from provider version 1.145.0. Operating system release, using `imageType` instead.
     */
    platform?: pulumi.Input<string>;
    /**
     * Private node pool configuration. See `privatePoolOptions` below.
     */
    privatePoolOptions?: pulumi.Input<inputs.cs.NodePoolPrivatePoolOptions>;
    /**
     * The list of RDS instances.
     */
    rdsInstances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Rotary configuration. See `rollingPolicy` below.
     */
    rollingPolicy?: pulumi.Input<inputs.cs.NodePoolRollingPolicy>;
    /**
     * The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     */
    runtimeName?: pulumi.Input<string>;
    /**
     * The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * Automatic scaling configuration. See `scalingConfig` below.
     */
    scalingConfig?: pulumi.Input<inputs.cs.NodePoolScalingConfig>;
    /**
     * The ID of the scaling group.
     */
    scalingGroupId?: pulumi.Input<string>;
    /**
     * Scaling group mode, default value: `release`. Valid values:
     */
    scalingPolicy?: pulumi.Input<string>;
    /**
     * The security group ID of the node pool. This field has been replaced by `securityGroupIds`, please use the `securityGroupIds` field instead.
     *
     * @deprecated Field 'security_group_id' has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `securityGroupIds`, please use the `securityGroupIds` field instead.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
     */
    securityHardeningOs?: pulumi.Input<boolean>;
    /**
     * Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
     * > **NOTE:**  It is forbidden to set both `securityHardeningOs` and `socEnabled` to `true` at the same time.
     */
    socEnabled?: pulumi.Input<boolean>;
    /**
     * The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
     */
    spotInstancePools?: pulumi.Input<number>;
    /**
     * Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
     */
    spotInstanceRemedy?: pulumi.Input<boolean>;
    /**
     * The current single preemptible instance type market price range configuration. See `spotPriceLimit` below.
     */
    spotPriceLimits?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolSpotPriceLimit>[]>;
    /**
     * The preemptible instance type. Value:
     * - `NoSpot` : Non-preemptible instance.
     * - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
     * - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
     */
    spotStrategy?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `systemDiskCategory` is set to `cloudAuto`.
     */
    systemDiskBurstingEnabled?: pulumi.Input<boolean>;
    /**
     * The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values: `cloud`: cloud disk. `cloudEfficiency`: a high-efficiency cloud disk. `cloudSsd`:SSD cloud disk. `cloudEssd`: ESSD cloud disk.
     */
    systemDiskCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The system disk category of worker node. Its valid value are `cloudSsd`, `cloudEfficiency`, `cloudEssd` and `cloudAuto`. .
     */
    systemDiskCategory?: pulumi.Input<string>;
    /**
     * The encryption algorithm used by the system disk. Value range: aes-256.
     */
    systemDiskEncryptAlgorithm?: pulumi.Input<string>;
    /**
     * Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
     */
    systemDiskEncrypted?: pulumi.Input<boolean>;
    /**
     * The ID of the KMS key used by the system disk.
     */
    systemDiskKmsKey?: pulumi.Input<string>;
    /**
     * The system disk performance of the node takes effect only for the ESSD disk.
     * - `PL0`: maximum random read/write IOPS 10000 for a single disk.
     * - `PL1`: maximum random read/write IOPS 50000 for a single disk.
     * - `PL2`: highest random read/write IOPS 100000 for a single disk.
     * - `PL3`: maximum random read/write IOPS 1 million for a single disk.
     */
    systemDiskPerformanceLevel?: pulumi.Input<string>;
    /**
     * The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `systemDiskCategory` is set to `cloudAuto`.
     */
    systemDiskProvisionedIops?: pulumi.Input<number>;
    /**
     * The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
     */
    systemDiskSize?: pulumi.Input<number>;
    /**
     * The ID of the automatic snapshot policy used by the system disk.
     */
    systemDiskSnapshotPolicyId?: pulumi.Input<string>;
    /**
     * Add tags only for ECS instances.  The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://".
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolTaint>[]>;
    /**
     * The configuration about confidential computing for the cluster. See `teeConfig` below.
     */
    teeConfig?: pulumi.Input<inputs.cs.NodePoolTeeConfig>;
    /**
     * Whether the node after expansion can be scheduled.
     */
    unschedulable?: pulumi.Input<boolean>;
    /**
     * Synchronously update node labels and taints.
     */
    updateNodes?: pulumi.Input<boolean>;
    /**
     * Node custom data.
     */
    userData?: pulumi.Input<string>;
    /**
     * The vswitches used by node pool workers.
     */
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a NodePool resource.
 */
export interface NodePoolArgs {
    /**
     * Whether to enable automatic renewal for nodes in the node pool takes effect only when `instanceChargeType` is set to `PrePaid`. Default value: `false`. Valid values:
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
     */
    autoRenewPeriod?: pulumi.Input<number>;
    /**
     * Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `securityHardeningOs` instead.
     *
     * @deprecated Field 'cis_enabled' has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `securityHardeningOs` instead.
     */
    cisEnabled?: pulumi.Input<boolean>;
    /**
     * The id of kubernetes cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multiAzPolicy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
     */
    compensateWithOnDemand?: pulumi.Input<boolean>;
    /**
     * Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
     */
    cpuPolicy?: pulumi.Input<string>;
    /**
     * Configure the data disk of the node in the node pool. See `dataDisks` below.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolDataDisk>[]>;
    /**
     * The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     */
    deploymentSetId?: pulumi.Input<string>;
    /**
     * Number of expected nodes in the node pool.
     */
    desiredSize?: pulumi.Input<number>;
    /**
     * Whether to force deletion.
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     */
    formatDisk?: pulumi.Input<boolean>;
    /**
     * The custom image ID. The system-provided image is used by default.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The operating system image type and the `platform` parameter can be selected from the following values:
     * - `AliyunLinux` : Alinux2 image.
     * - `AliyunLinux3` : Alinux3 image.
     * - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
     * - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
     * - `CentOS` : CentOS image.
     * - `Windows` : Windows image.
     * - `WindowsCore` : WindowsCore image.
     * - `ContainerOS` : container-optimized image.
     */
    imageType?: pulumi.Input<string>;
    /**
     * Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
     */
    installCloudMonitor?: pulumi.Input<boolean>;
    /**
     * Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
     */
    instanceChargeType?: pulumi.Input<string>;
    /**
     * In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
     */
    instanceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance list. Add existing nodes under the same cluster VPC to the node pool.
     */
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one. .
     */
    internetChargeType?: pulumi.Input<string>;
    /**
     * The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\].
     */
    internetMaxBandwidthOut?: pulumi.Input<number>;
    /**
     * Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     */
    keepInstanceName?: pulumi.Input<boolean>;
    /**
     * The name of the key pair. When the node pool is a managed node pool, only `keyName` is supported.
     */
    keyName?: pulumi.Input<string>;
    /**
     * An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
     */
    kmsEncryptedPassword?: pulumi.Input<string>;
    /**
     * An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a cs kubernetes with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
     */
    kmsEncryptionContext?: pulumi.Input<{[key: string]: any}>;
    /**
     * Kubelet configuration parameters for worker nodes. See `kubeletConfiguration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubeletConfiguration` below.
     */
    kubeletConfiguration?: pulumi.Input<inputs.cs.NodePoolKubeletConfiguration>;
    /**
     * A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolLabel>[]>;
    /**
     * Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
     */
    loginAsNonRoot?: pulumi.Input<boolean>;
    /**
     * Managed node pool configuration. See `management` below.
     */
    management?: pulumi.Input<inputs.cs.NodePoolManagement>;
    /**
     * The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
     */
    multiAzPolicy?: pulumi.Input<string>;
    /**
     * . Field 'name' has been deprecated from provider version 1.219.0. New field 'node_pool_name' instead.
     *
     * @deprecated Field 'name' has been deprecated since provider version 1.219.0. New field 'node_pool_name' instead.
     */
    name?: pulumi.Input<string>;
    /**
     * The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
     *
     * @deprecated Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
     * - The prefix and suffix can be composed of one or more parts separated by '.', each part can use lowercase letters, numbers and '-', and the beginning and end of the node name must be lowercase letters and numbers.
     * - The node IP address is the complete private IP address of the node.
     * - For example, if the string `customized,aliyun,ip,com` is passed in (where 'customized' and 'ip' are fixed strings, 'aliyun' is the prefix, and 'com' is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
     */
    nodeNameMode?: pulumi.Input<string>;
    /**
     * The name of node pool.
     */
    nodePoolName?: pulumi.Input<string>;
    /**
     * The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
     */
    onDemandBaseCapacity?: pulumi.Input<number>;
    /**
     * The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `onDemandBaseCapacity`. Valid values: 0 to 100.
     */
    onDemandPercentageAboveBaseCapacity?: pulumi.Input<number>;
    /**
     * The password of ssh login. You have to specify one of `password` and `keyName` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
     */
    password?: pulumi.Input<string>;
    /**
     * Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
     */
    period?: pulumi.Input<number>;
    /**
     * Node payment period unit, valid value: `Month`. Default is `Month`.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Operating system release, using `imageType` instead.
     *
     * @deprecated Field 'platform' has been deprecated from provider version 1.145.0. Operating system release, using `imageType` instead.
     */
    platform?: pulumi.Input<string>;
    /**
     * Private node pool configuration. See `privatePoolOptions` below.
     */
    privatePoolOptions?: pulumi.Input<inputs.cs.NodePoolPrivatePoolOptions>;
    /**
     * The list of RDS instances.
     */
    rdsInstances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Rotary configuration. See `rollingPolicy` below.
     */
    rollingPolicy?: pulumi.Input<inputs.cs.NodePoolRollingPolicy>;
    /**
     * The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     */
    runtimeName?: pulumi.Input<string>;
    /**
     * The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * Automatic scaling configuration. See `scalingConfig` below.
     */
    scalingConfig?: pulumi.Input<inputs.cs.NodePoolScalingConfig>;
    /**
     * Scaling group mode, default value: `release`. Valid values:
     */
    scalingPolicy?: pulumi.Input<string>;
    /**
     * The security group ID of the node pool. This field has been replaced by `securityGroupIds`, please use the `securityGroupIds` field instead.
     *
     * @deprecated Field 'security_group_id' has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `securityGroupIds`, please use the `securityGroupIds` field instead.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
     */
    securityHardeningOs?: pulumi.Input<boolean>;
    /**
     * Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
     * > **NOTE:**  It is forbidden to set both `securityHardeningOs` and `socEnabled` to `true` at the same time.
     */
    socEnabled?: pulumi.Input<boolean>;
    /**
     * The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
     */
    spotInstancePools?: pulumi.Input<number>;
    /**
     * Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
     */
    spotInstanceRemedy?: pulumi.Input<boolean>;
    /**
     * The current single preemptible instance type market price range configuration. See `spotPriceLimit` below.
     */
    spotPriceLimits?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolSpotPriceLimit>[]>;
    /**
     * The preemptible instance type. Value:
     * - `NoSpot` : Non-preemptible instance.
     * - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
     * - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
     */
    spotStrategy?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `systemDiskCategory` is set to `cloudAuto`.
     */
    systemDiskBurstingEnabled?: pulumi.Input<boolean>;
    /**
     * The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values: `cloud`: cloud disk. `cloudEfficiency`: a high-efficiency cloud disk. `cloudSsd`:SSD cloud disk. `cloudEssd`: ESSD cloud disk.
     */
    systemDiskCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The system disk category of worker node. Its valid value are `cloudSsd`, `cloudEfficiency`, `cloudEssd` and `cloudAuto`. .
     */
    systemDiskCategory?: pulumi.Input<string>;
    /**
     * The encryption algorithm used by the system disk. Value range: aes-256.
     */
    systemDiskEncryptAlgorithm?: pulumi.Input<string>;
    /**
     * Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
     */
    systemDiskEncrypted?: pulumi.Input<boolean>;
    /**
     * The ID of the KMS key used by the system disk.
     */
    systemDiskKmsKey?: pulumi.Input<string>;
    /**
     * The system disk performance of the node takes effect only for the ESSD disk.
     * - `PL0`: maximum random read/write IOPS 10000 for a single disk.
     * - `PL1`: maximum random read/write IOPS 50000 for a single disk.
     * - `PL2`: highest random read/write IOPS 100000 for a single disk.
     * - `PL3`: maximum random read/write IOPS 1 million for a single disk.
     */
    systemDiskPerformanceLevel?: pulumi.Input<string>;
    /**
     * The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `systemDiskCategory` is set to `cloudAuto`.
     */
    systemDiskProvisionedIops?: pulumi.Input<number>;
    /**
     * The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
     */
    systemDiskSize?: pulumi.Input<number>;
    /**
     * The ID of the automatic snapshot policy used by the system disk.
     */
    systemDiskSnapshotPolicyId?: pulumi.Input<string>;
    /**
     * Add tags only for ECS instances.  The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://".
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolTaint>[]>;
    /**
     * The configuration about confidential computing for the cluster. See `teeConfig` below.
     */
    teeConfig?: pulumi.Input<inputs.cs.NodePoolTeeConfig>;
    /**
     * Whether the node after expansion can be scheduled.
     */
    unschedulable?: pulumi.Input<boolean>;
    /**
     * Synchronously update node labels and taints.
     */
    updateNodes?: pulumi.Input<boolean>;
    /**
     * Node custom data.
     */
    userData?: pulumi.Input<string>;
    /**
     * The vswitches used by node pool workers.
     */
    vswitchIds: pulumi.Input<pulumi.Input<string>[]>;
}
