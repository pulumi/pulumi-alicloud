// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * The managed cluster configuration,
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-test";
 * const defaultZones = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultInstanceTypes = defaultZones.then(defaultZones => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: defaultZones.zones?.[0]?.id,
 *     cpuCoreCount: 2,
 *     memorySize: 4,
 *     kubernetesNodeRole: "Worker",
 * }));
 * const defaultNetwork = new alicloud.vpc.Network("defaultNetwork", {
 *     vpcName: name,
 *     cidrBlock: "10.1.0.0/21",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("defaultSwitch", {
 *     vswitchName: name,
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "10.1.1.0/24",
 *     zoneId: defaultZones.then(defaultZones => defaultZones.zones?.[0]?.id),
 * });
 * const defaultKeyPair = new alicloud.ecs.KeyPair("defaultKeyPair", {keyPairName: name});
 * let defaultManagedKubernetes: alicloud.cs.ManagedKubernetes | undefined;
 * if (1 == true) {
 *     defaultManagedKubernetes = new alicloud.cs.ManagedKubernetes("defaultManagedKubernetes", {
 *         clusterSpec: "ack.pro.small",
 *         isEnterpriseSecurityGroup: true,
 *         podCidr: "172.20.0.0/16",
 *         serviceCidr: "172.21.0.0/20",
 *         workerVswitchIds: [defaultSwitch.id],
 *     });
 * }
 * ```
 *
 * Create a node pool.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.cs.NodePool("default", {
 *     clusterId: alicloud_cs_managed_kubernetes["default"][0].id,
 *     vswitchIds: [alicloud_vswitch["default"].id],
 *     instanceTypes: [data.alicloud_instance_types["default"].instance_types[0].id],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: alicloud_key_pair["default"].key_name,
 *     desiredSize: 1,
 * });
 * ```
 *
 * The parameter `nodeCount` are deprecated from version 1.158.0ï¼Œbut it can still works. If you want to use the new parameter `desiredSize` instead, you can update it as follows. for more information of `desiredSize`, visit [Modify the expected number of nodes in a node pool](https://www.alibabacloud.com/help/en/doc-detail/160490.html#title-mpp-3jj-oo3).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.cs.NodePool("default", {
 *     clusterId: alicloud_cs_managed_kubernetes["default"][0].id,
 *     vswitchIds: [alicloud_vswitch["default"].id],
 *     instanceTypes: [data.alicloud_instance_types["default"].instance_types[0].id],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: alicloud_key_pair["default"].key_name,
 *     desiredSize: 1,
 * });
 * ```
 *
 * Create a managed node pool. If you need to enable maintenance window, you need to set the maintenance window in `alicloud.cs.ManagedKubernetes`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.cs.NodePool("default", {
 *     clusterId: alicloud_cs_managed_kubernetes["default"][0].id,
 *     vswitchIds: [alicloud_vswitch["default"].id],
 *     instanceTypes: [data.alicloud_instance_types["default"].instance_types[0].id],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: alicloud_key_pair["default"].key_name,
 *     desiredSize: 1,
 *     management: {
 *         autoRepair: true,
 *         autoUpgrade: true,
 *         surge: 1,
 *         maxUnavailable: 1,
 *     },
 * });
 * ```
 *
 * Enable automatic scaling for the node pool. `scalingConfig` is required.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.cs.NodePool("default", {
 *     clusterId: alicloud_cs_managed_kubernetes["default"][0].id,
 *     vswitchIds: [alicloud_vswitch["default"].id],
 *     instanceTypes: [data.alicloud_instance_types["default"].instance_types[0].id],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: alicloud_key_pair["default"].key_name,
 *     scalingConfig: {
 *         minSize: 1,
 *         maxSize: 10,
 *     },
 * });
 * ```
 *
 * Enable automatic scaling for managed node pool.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.cs.NodePool("default", {
 *     clusterId: alicloud_cs_managed_kubernetes["default"][0].id,
 *     vswitchIds: [alicloud_vswitch["default"].id],
 *     instanceTypes: [data.alicloud_instance_types["default"].instance_types[0].id],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: alicloud_key_pair["default"].key_name,
 *     management: {
 *         autoRepair: true,
 *         autoUpgrade: true,
 *         surge: 1,
 *         maxUnavailable: 1,
 *     },
 *     scalingConfig: {
 *         minSize: 1,
 *         maxSize: 10,
 *         type: "cpu",
 *     },
 * }, {
 *     dependsOn: [alicloud_cs_autoscaling_config["default"]],
 * });
 * ```
 *
 * Create a `PrePaid` node pool.
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.cs.NodePool("default", {
 *     clusterId: alicloud_cs_managed_kubernetes["default"][0].id,
 *     vswitchIds: [alicloud_vswitch["default"].id],
 *     instanceTypes: [data.alicloud_instance_types["default"].instance_types[0].id],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: alicloud_key_pair["default"].key_name,
 *     instanceChargeType: "PrePaid",
 *     period: 1,
 *     periodUnit: "Month",
 *     autoRenew: true,
 *     autoRenewPeriod: 1,
 *     installCloudMonitor: true,
 *     scalingConfig: {
 *         minSize: 1,
 *         maxSize: 10,
 *         type: "cpu",
 *     },
 * });
 * ```
 *
 * Create a node pool with spot instance.
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.cs.NodePool("default", {
 *     clusterId: alicloud_cs_managed_kubernetes["default"][0].id,
 *     vswitchIds: [alicloud_vswitch["default"].id],
 *     instanceTypes: [data.alicloud_instance_types["default"].instance_types[0].id],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: alicloud_key_pair["default"].key_name,
 *     desiredSize: 1,
 *     spotStrategy: "SpotWithPriceLimit",
 *     spotPriceLimits: [{
 *         instanceType: data.alicloud_instance_types["default"].instance_types[0].id,
 *         priceLimit: "0.70",
 *     }],
 * });
 * ```
 *
 * Use Spot instances to create a node pool with auto-scaling enabled
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.cs.NodePool("default", {
 *     clusterId: alicloud_cs_managed_kubernetes["default"][0].id,
 *     vswitchIds: [alicloud_vswitch["default"].id],
 *     instanceTypes: [data.alicloud_instance_types["default"].instance_types[0].id],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: alicloud_key_pair["default"].key_name,
 *     scalingConfig: {
 *         minSize: 1,
 *         maxSize: 10,
 *         type: "spot",
 *     },
 *     spotStrategy: "SpotWithPriceLimit",
 *     spotPriceLimits: [{
 *         instanceType: data.alicloud_instance_types["default"].instance_types[0].id,
 *         priceLimit: "0.70",
 *     }],
 * });
 * ```
 *
 * Create a node pool with platform as Windows
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.cs.NodePool("default", {
 *     clusterId: alicloud_cs_managed_kubernetes["default"][0].id,
 *     vswitchIds: [alicloud_vswitch["default"].id],
 *     instanceTypes: [data.alicloud_instance_types["default"].instance_types[0].id],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     instanceChargeType: "PostPaid",
 *     desiredSize: 1,
 *     password: "Hello1234",
 *     platform: "Windows",
 *     imageId: window_image_id,
 * });
 * ```
 *
 * Add an existing node to the node pool
 *
 * In order to distinguish automatically created nodes, it is recommended that existing nodes be placed separately in a node pool for management.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.cs.NodePool("default", {
 *     clusterId: alicloud_cs_managed_kubernetes["default"][0].id,
 *     vswitchIds: [alicloud_vswitch["default"].id],
 *     instanceTypes: [data.alicloud_instance_types["default"].instance_types[0].id],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     instanceChargeType: "PostPaid",
 *     instances: [
 *         "instance_id_01",
 *         "instance_id_02",
 *         "instance_id_03",
 *     ],
 *     formatDisk: false,
 *     keepInstanceName: true,
 * });
 * ```
 *
 * Create a node pool with customized kubelet parameters
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.cs.NodePool("default", {
 *     clusterId: alicloud_cs_managed_kubernetes["default"][0].id,
 *     vswitchIds: [alicloud_vswitch["default"].id],
 *     instanceTypes: [data.alicloud_instance_types["default"].instance_types[0].id],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     instanceChargeType: "PostPaid",
 *     desiredSize: 3,
 *     kubeletConfiguration: {
 *         registryPullQps: "10",
 *         registryBurst: "5",
 *         eventRecordQps: "10",
 *         eventBurst: "5",
 *         evictionHard: {
 *             "memory.available": "1024Mi",
 *             "nodefs.available": "10%",
 *             "nodefs.inodesFree": "1000",
 *             "imagefs.available": "10%",
 *             "imagefs.inodesFree": "1000",
 *             "allocatableMemory.available": "2048",
 *             "pid.available": "1000",
 *         },
 *         systemReserved: {
 *             cpu: "1",
 *             memory: "1Gi",
 *             "ephemeral-storage": "10Gi",
 *         },
 *         kubeReserved: {
 *             cpu: "500m",
 *             memory: "1Gi",
 *         },
 *     },
 *     rollingPolicy: {
 *         maxParallelism: 1,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Cluster nodepool can be imported using the id, e.g. Then complete the nodepool.tf accords to the result of `terraform plan`.
 *
 * ```sh
 *  $ pulumi import alicloud:cs/nodePool:NodePool custom_nodepool cluster_id:nodepool_id
 * ```
 */
export class NodePool extends pulumi.CustomResource {
    /**
     * Get an existing NodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodePoolState, opts?: pulumi.CustomResourceOptions): NodePool {
        return new NodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cs/nodePool:NodePool';

    /**
     * Returns true if the given object is an instance of NodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodePool.__pulumiType;
    }

    /**
     * Enable Node payment auto-renew, default is `false`.
     */
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    /**
     * Node payment auto-renew period, one of `1`, `2`, `3`,`6`, `12`.
     */
    public readonly autoRenewPeriod!: pulumi.Output<number | undefined>;
    /**
     * Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [CIS Reinforcement](https://help.aliyun.com/document_detail/223744.html).
     */
    public readonly cisEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The id of kubernetes cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Kubelet cpu policy. For Kubernetes 1.12.6 and later, its valid value is either `static` or `none`. Default to `none` and modification is not supported.
     */
    public readonly cpuPolicy!: pulumi.Output<string | undefined>;
    /**
     * The data disk configurations of worker nodes, such as the disk type and disk size.
     */
    public readonly dataDisks!: pulumi.Output<outputs.cs.NodePoolDataDisk[] | undefined>;
    /**
     * The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     */
    public readonly deploymentSetId!: pulumi.Output<string>;
    /**
     * The desired size of nodes of the node pool. From version 1.158.0, `desiredSize` is not required.
     */
    public readonly desiredSize!: pulumi.Output<number>;
    /**
     * After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     */
    public readonly formatDisk!: pulumi.Output<boolean>;
    /**
     * Custom Image support. Must based on CentOS7 or AliyunLinux2.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * The image type, instead of `platform`. This field cannot be modified. One of `AliyunLinux`, `AliyunLinux3`, `AliyunLinux3Arm64`, `AliyunLinuxUEFI`, `CentOS`, `Windows`,`WindowsCore`,`AliyunLinux Qboot`,`ContainerOS`. If you select `Windows` or `WindowsCore`, the `passord` is required.
     */
    public readonly imageType!: pulumi.Output<string>;
    /**
     * Install the cloud monitoring plug-in on the node, and you can view the monitoring information of the instance through the cloud monitoring console. Default is `true`.
     */
    public readonly installCloudMonitor!: pulumi.Output<boolean | undefined>;
    /**
     * Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
     */
    public readonly instanceChargeType!: pulumi.Output<string | undefined>;
    /**
     * The instance type of worker node.
     */
    public readonly instanceTypes!: pulumi.Output<string[]>;
    /**
     * The instance list. Add existing nodes under the same cluster VPC to the node pool.
     */
    public readonly instances!: pulumi.Output<string[] | undefined>;
    /**
     * The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one.
     */
    public readonly internetChargeType!: pulumi.Output<string>;
    /**
     * The maximum outbound bandwidth for the public network. Unit: Mbit/s. Valid values: 0 to 100.
     */
    public readonly internetMaxBandwidthOut!: pulumi.Output<number>;
    /**
     * Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     */
    public readonly keepInstanceName!: pulumi.Output<boolean>;
    /**
     * The keypair of ssh login cluster node, you have to create it first. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields. Only `keyName` is supported in the management node pool.
     */
    public readonly keyName!: pulumi.Output<string | undefined>;
    /**
     * An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
     */
    public readonly kmsEncryptedPassword!: pulumi.Output<string | undefined>;
    /**
     * An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a cs kubernetes with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
     */
    public readonly kmsEncryptionContext!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Kubelet configuration parameters for worker nodes. Detailed below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/).
     */
    public readonly kubeletConfiguration!: pulumi.Output<outputs.cs.NodePoolKubeletConfiguration | undefined>;
    /**
     * A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
     */
    public readonly labels!: pulumi.Output<outputs.cs.NodePoolLabel[] | undefined>;
    /**
     * Managed node pool configuration. When using a managed node pool, the node key must use `keyName`. Detailed below.
     */
    public readonly management!: pulumi.Output<outputs.cs.NodePoolManagement | undefined>;
    /**
     * The name of node pool.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
     *
     * @deprecated Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
     */
    public readonly nodeCount!: pulumi.Output<number>;
    /**
     * Each node name consists of a prefix, an IP substring, and a suffix, the input format is `customized,<prefix>,IPSubStringLen,<suffix>`. For example "customized,aliyun.com-,5,-test", if the node IP address is 192.168.59.176, the prefix is aliyun.com-, IP substring length is 5, and the suffix is -test, the node name will be aliyun.com-59176-test.
     */
    public readonly nodeNameMode!: pulumi.Output<string>;
    /**
     * The password of ssh login cluster node. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Node payment period. Its valid value is one of {1, 2, 3, 6, 12, 24, 36, 48, 60}.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Node payment period unit, valid value: `Month`. Default is `Month`.
     */
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * The platform. One of `AliyunLinux`, `Windows`, `CentOS`, `WindowsCore`. If you select `Windows` or `WindowsCore`, the `passord` is required. Field `platform` has been deprecated from provider version 1.145.0. New field `imageType` instead.
     *
     * @deprecated Field 'platform' has been deprecated from provider version 1.145.0. New field 'image_type' instead
     */
    public readonly platform!: pulumi.Output<string>;
    /**
     * PolarDB id list, You can choose which PolarDB whitelist to add instances to.
     */
    public readonly polardbIds!: pulumi.Output<string[] | undefined>;
    /**
     * RDS instance list, You can choose which RDS instances whitelist to add instances to.
     */
    public readonly rdsInstances!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the resource group,by default these cloud resources are automatically assigned to the default resource group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * Rolling policy is used to specify the strategy when the node pool is rolling update. This field works when nodepool updating.
     */
    public readonly rollingPolicy!: pulumi.Output<outputs.cs.NodePoolRollingPolicy | undefined>;
    /**
     * Rollout policy is used to specify the strategy when the node pool is rolling update. This field works when nodepool updating. Please use `rollingPolicy` to instead it from provider version 1.185.0.
     *
     * @deprecated Field 'rollout_policy' has been deprecated from provider version 1.184.0. Please use new field 'rolling_policy' instead it to ensure the config takes effect
     */
    public readonly rolloutPolicy!: pulumi.Output<outputs.cs.NodePoolRolloutPolicy | undefined>;
    /**
     * The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     */
    public readonly runtimeName!: pulumi.Output<string>;
    /**
     * The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     */
    public readonly runtimeVersion!: pulumi.Output<string>;
    /**
     * Auto scaling node pool configuration. For more details, see `scalingConfig`. With auto-scaling is enabled, the nodes in the node pool will be labeled with `k8s.aliyun.com=true` to prevent system pods such as coredns, metrics-servers from being scheduled to elastic nodes, and to prevent node shrinkage from causing business abnormalities.
     */
    public readonly scalingConfig!: pulumi.Output<outputs.cs.NodePoolScalingConfig | undefined>;
    /**
     * (Available in 1.105.0+) Id of the Scaling Group.
     */
    public /*out*/ readonly scalingGroupId!: pulumi.Output<string>;
    /**
     * The scaling mode. Valid values: `release`, `recycle`, default is `release`. Standard mode(release): Create and release ECS instances based on requests.Swift mode(recycle): Create, stop, and restart ECS instances based on needs. New ECS instances are only created when no stopped ECS instance is avalible. This mode further accelerates the scaling process. Apart from ECS instances that use local storage, when an ECS instance is stopped, you are only chatged for storage space.
     */
    public readonly scalingPolicy!: pulumi.Output<string>;
    /**
     * The security group id for worker node. Field `securityGroupId` has been deprecated from provider version 1.145.0. New field `securityGroupIds` instead.
     *
     * @deprecated Field 'security_group_id' has been deprecated from provider version 1.145.0. New field 'security_group_ids' instead
     */
    public readonly securityGroupId!: pulumi.Output<string>;
    /**
     * Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).  
     * > **NOTE:** It is forbidden to set both `cisEnabled` and `socEnabled` to `true`at the same time.
     */
    public readonly socEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum hourly price of the instance. This parameter takes effect only when `spotStrategy` is set to `SpotWithPriceLimit`. You could enable multiple spot instances by setting this field repeatedly.
     */
    public readonly spotPriceLimits!: pulumi.Output<outputs.cs.NodePoolSpotPriceLimit[] | undefined>;
    /**
     * The preemption policy for the pay-as-you-go instance. This parameter takes effect only when `instanceChargeType` is set to `PostPaid`. Valid value `SpotWithPriceLimit`,`SpotAsPriceGo` and `NoSpot`, default is `NoSpot`.
     */
    public readonly spotStrategy!: pulumi.Output<string>;
    /**
     * The system disk category of worker node. Its valid value are `cloudSsd`, `cloudEfficiency` and `cloudEssd`. Default to `cloudEfficiency`.
     */
    public readonly systemDiskCategory!: pulumi.Output<string | undefined>;
    /**
     * The encryption Algorithm for Encrypting System Disk. It takes effect when systemDiskEncrypted is true. Valid values `aes-256` and `sm4-128`.
     */
    public readonly systemDiskEncryptAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Whether to enable system disk encryption.
     */
    public readonly systemDiskEncrypted!: pulumi.Output<boolean | undefined>;
    /**
     * The kms key id used to encrypt the system disk. It takes effect when systemDiskEncrypted is true.
     */
    public readonly systemDiskKmsKey!: pulumi.Output<string | undefined>;
    /**
     * The performance of system disk, only valid for ESSD disk. You have to specify one of `PL0` `PL1` `PL2` `PL3` fields.
     */
    public readonly systemDiskPerformanceLevel!: pulumi.Output<string | undefined>;
    /**
     * The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
     */
    public readonly systemDiskSize!: pulumi.Output<number | undefined>;
    /**
     * The system disk snapshot policy id.
     */
    public readonly systemDiskSnapshotPolicyId!: pulumi.Output<string | undefined>;
    /**
     * A Map of tags to assign to the resource. It will be applied for ECS instances finally. Detailed below.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
     */
    public readonly taints!: pulumi.Output<outputs.cs.NodePoolTaint[] | undefined>;
    /**
     * Set the newly added node as unschedulable. If you want to open the scheduling option, you can open it in the node list of the console. If you are using an auto-scaling node pool, the setting will not take effect. Default is `false`.
     */
    public readonly unschedulable!: pulumi.Output<boolean | undefined>;
    /**
     * Windows instances support batch and PowerShell scripts. If your script file is larger than 1 KB, we recommend that you upload the script to Object Storage Service (OSS) and pull it through the internal endpoint of your OSS bucket.
     */
    public readonly userData!: pulumi.Output<string | undefined>;
    /**
     * The VPC of the nodes in the node pool.
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    /**
     * The vswitches used by node pool workers.
     */
    public readonly vswitchIds!: pulumi.Output<string[]>;

    /**
     * Create a NodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodePoolArgs | NodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodePoolState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = state ? state.autoRenewPeriod : undefined;
            resourceInputs["cisEnabled"] = state ? state.cisEnabled : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["cpuPolicy"] = state ? state.cpuPolicy : undefined;
            resourceInputs["dataDisks"] = state ? state.dataDisks : undefined;
            resourceInputs["deploymentSetId"] = state ? state.deploymentSetId : undefined;
            resourceInputs["desiredSize"] = state ? state.desiredSize : undefined;
            resourceInputs["formatDisk"] = state ? state.formatDisk : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["installCloudMonitor"] = state ? state.installCloudMonitor : undefined;
            resourceInputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            resourceInputs["instanceTypes"] = state ? state.instanceTypes : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["internetChargeType"] = state ? state.internetChargeType : undefined;
            resourceInputs["internetMaxBandwidthOut"] = state ? state.internetMaxBandwidthOut : undefined;
            resourceInputs["keepInstanceName"] = state ? state.keepInstanceName : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["kmsEncryptedPassword"] = state ? state.kmsEncryptedPassword : undefined;
            resourceInputs["kmsEncryptionContext"] = state ? state.kmsEncryptionContext : undefined;
            resourceInputs["kubeletConfiguration"] = state ? state.kubeletConfiguration : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["management"] = state ? state.management : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nodeNameMode"] = state ? state.nodeNameMode : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["polardbIds"] = state ? state.polardbIds : undefined;
            resourceInputs["rdsInstances"] = state ? state.rdsInstances : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["rollingPolicy"] = state ? state.rollingPolicy : undefined;
            resourceInputs["rolloutPolicy"] = state ? state.rolloutPolicy : undefined;
            resourceInputs["runtimeName"] = state ? state.runtimeName : undefined;
            resourceInputs["runtimeVersion"] = state ? state.runtimeVersion : undefined;
            resourceInputs["scalingConfig"] = state ? state.scalingConfig : undefined;
            resourceInputs["scalingGroupId"] = state ? state.scalingGroupId : undefined;
            resourceInputs["scalingPolicy"] = state ? state.scalingPolicy : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["socEnabled"] = state ? state.socEnabled : undefined;
            resourceInputs["spotPriceLimits"] = state ? state.spotPriceLimits : undefined;
            resourceInputs["spotStrategy"] = state ? state.spotStrategy : undefined;
            resourceInputs["systemDiskCategory"] = state ? state.systemDiskCategory : undefined;
            resourceInputs["systemDiskEncryptAlgorithm"] = state ? state.systemDiskEncryptAlgorithm : undefined;
            resourceInputs["systemDiskEncrypted"] = state ? state.systemDiskEncrypted : undefined;
            resourceInputs["systemDiskKmsKey"] = state ? state.systemDiskKmsKey : undefined;
            resourceInputs["systemDiskPerformanceLevel"] = state ? state.systemDiskPerformanceLevel : undefined;
            resourceInputs["systemDiskSize"] = state ? state.systemDiskSize : undefined;
            resourceInputs["systemDiskSnapshotPolicyId"] = state ? state.systemDiskSnapshotPolicyId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["unschedulable"] = state ? state.unschedulable : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchIds"] = state ? state.vswitchIds : undefined;
        } else {
            const args = argsOrState as NodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.instanceTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceTypes'");
            }
            if ((!args || args.vswitchIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchIds'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = args ? args.autoRenewPeriod : undefined;
            resourceInputs["cisEnabled"] = args ? args.cisEnabled : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["cpuPolicy"] = args ? args.cpuPolicy : undefined;
            resourceInputs["dataDisks"] = args ? args.dataDisks : undefined;
            resourceInputs["deploymentSetId"] = args ? args.deploymentSetId : undefined;
            resourceInputs["desiredSize"] = args ? args.desiredSize : undefined;
            resourceInputs["formatDisk"] = args ? args.formatDisk : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["imageType"] = args ? args.imageType : undefined;
            resourceInputs["installCloudMonitor"] = args ? args.installCloudMonitor : undefined;
            resourceInputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            resourceInputs["instanceTypes"] = args ? args.instanceTypes : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["internetChargeType"] = args ? args.internetChargeType : undefined;
            resourceInputs["internetMaxBandwidthOut"] = args ? args.internetMaxBandwidthOut : undefined;
            resourceInputs["keepInstanceName"] = args ? args.keepInstanceName : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["kmsEncryptedPassword"] = args ? args.kmsEncryptedPassword : undefined;
            resourceInputs["kmsEncryptionContext"] = args ? args.kmsEncryptionContext : undefined;
            resourceInputs["kubeletConfiguration"] = args ? args.kubeletConfiguration : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["management"] = args ? args.management : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["nodeNameMode"] = args ? args.nodeNameMode : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["polardbIds"] = args ? args.polardbIds : undefined;
            resourceInputs["rdsInstances"] = args ? args.rdsInstances : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["rollingPolicy"] = args ? args.rollingPolicy : undefined;
            resourceInputs["rolloutPolicy"] = args ? args.rolloutPolicy : undefined;
            resourceInputs["runtimeName"] = args ? args.runtimeName : undefined;
            resourceInputs["runtimeVersion"] = args ? args.runtimeVersion : undefined;
            resourceInputs["scalingConfig"] = args ? args.scalingConfig : undefined;
            resourceInputs["scalingPolicy"] = args ? args.scalingPolicy : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["socEnabled"] = args ? args.socEnabled : undefined;
            resourceInputs["spotPriceLimits"] = args ? args.spotPriceLimits : undefined;
            resourceInputs["spotStrategy"] = args ? args.spotStrategy : undefined;
            resourceInputs["systemDiskCategory"] = args ? args.systemDiskCategory : undefined;
            resourceInputs["systemDiskEncryptAlgorithm"] = args ? args.systemDiskEncryptAlgorithm : undefined;
            resourceInputs["systemDiskEncrypted"] = args ? args.systemDiskEncrypted : undefined;
            resourceInputs["systemDiskKmsKey"] = args ? args.systemDiskKmsKey : undefined;
            resourceInputs["systemDiskPerformanceLevel"] = args ? args.systemDiskPerformanceLevel : undefined;
            resourceInputs["systemDiskSize"] = args ? args.systemDiskSize : undefined;
            resourceInputs["systemDiskSnapshotPolicyId"] = args ? args.systemDiskSnapshotPolicyId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["unschedulable"] = args ? args.unschedulable : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["vswitchIds"] = args ? args.vswitchIds : undefined;
            resourceInputs["scalingGroupId"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodePool resources.
 */
export interface NodePoolState {
    /**
     * Enable Node payment auto-renew, default is `false`.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * Node payment auto-renew period, one of `1`, `2`, `3`,`6`, `12`.
     */
    autoRenewPeriod?: pulumi.Input<number>;
    /**
     * Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [CIS Reinforcement](https://help.aliyun.com/document_detail/223744.html).
     */
    cisEnabled?: pulumi.Input<boolean>;
    /**
     * The id of kubernetes cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Kubelet cpu policy. For Kubernetes 1.12.6 and later, its valid value is either `static` or `none`. Default to `none` and modification is not supported.
     */
    cpuPolicy?: pulumi.Input<string>;
    /**
     * The data disk configurations of worker nodes, such as the disk type and disk size.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolDataDisk>[]>;
    /**
     * The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     */
    deploymentSetId?: pulumi.Input<string>;
    /**
     * The desired size of nodes of the node pool. From version 1.158.0, `desiredSize` is not required.
     */
    desiredSize?: pulumi.Input<number>;
    /**
     * After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     */
    formatDisk?: pulumi.Input<boolean>;
    /**
     * Custom Image support. Must based on CentOS7 or AliyunLinux2.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The image type, instead of `platform`. This field cannot be modified. One of `AliyunLinux`, `AliyunLinux3`, `AliyunLinux3Arm64`, `AliyunLinuxUEFI`, `CentOS`, `Windows`,`WindowsCore`,`AliyunLinux Qboot`,`ContainerOS`. If you select `Windows` or `WindowsCore`, the `passord` is required.
     */
    imageType?: pulumi.Input<string>;
    /**
     * Install the cloud monitoring plug-in on the node, and you can view the monitoring information of the instance through the cloud monitoring console. Default is `true`.
     */
    installCloudMonitor?: pulumi.Input<boolean>;
    /**
     * Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
     */
    instanceChargeType?: pulumi.Input<string>;
    /**
     * The instance type of worker node.
     */
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance list. Add existing nodes under the same cluster VPC to the node pool.
     */
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one.
     */
    internetChargeType?: pulumi.Input<string>;
    /**
     * The maximum outbound bandwidth for the public network. Unit: Mbit/s. Valid values: 0 to 100.
     */
    internetMaxBandwidthOut?: pulumi.Input<number>;
    /**
     * Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     */
    keepInstanceName?: pulumi.Input<boolean>;
    /**
     * The keypair of ssh login cluster node, you have to create it first. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields. Only `keyName` is supported in the management node pool.
     */
    keyName?: pulumi.Input<string>;
    /**
     * An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
     */
    kmsEncryptedPassword?: pulumi.Input<string>;
    /**
     * An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a cs kubernetes with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
     */
    kmsEncryptionContext?: pulumi.Input<{[key: string]: any}>;
    /**
     * Kubelet configuration parameters for worker nodes. Detailed below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/).
     */
    kubeletConfiguration?: pulumi.Input<inputs.cs.NodePoolKubeletConfiguration>;
    /**
     * A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
     */
    labels?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolLabel>[]>;
    /**
     * Managed node pool configuration. When using a managed node pool, the node key must use `keyName`. Detailed below.
     */
    management?: pulumi.Input<inputs.cs.NodePoolManagement>;
    /**
     * The name of node pool.
     */
    name?: pulumi.Input<string>;
    /**
     * The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
     *
     * @deprecated Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * Each node name consists of a prefix, an IP substring, and a suffix, the input format is `customized,<prefix>,IPSubStringLen,<suffix>`. For example "customized,aliyun.com-,5,-test", if the node IP address is 192.168.59.176, the prefix is aliyun.com-, IP substring length is 5, and the suffix is -test, the node name will be aliyun.com-59176-test.
     */
    nodeNameMode?: pulumi.Input<string>;
    /**
     * The password of ssh login cluster node. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
     */
    password?: pulumi.Input<string>;
    /**
     * Node payment period. Its valid value is one of {1, 2, 3, 6, 12, 24, 36, 48, 60}.
     */
    period?: pulumi.Input<number>;
    /**
     * Node payment period unit, valid value: `Month`. Default is `Month`.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * The platform. One of `AliyunLinux`, `Windows`, `CentOS`, `WindowsCore`. If you select `Windows` or `WindowsCore`, the `passord` is required. Field `platform` has been deprecated from provider version 1.145.0. New field `imageType` instead.
     *
     * @deprecated Field 'platform' has been deprecated from provider version 1.145.0. New field 'image_type' instead
     */
    platform?: pulumi.Input<string>;
    /**
     * PolarDB id list, You can choose which PolarDB whitelist to add instances to.
     */
    polardbIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * RDS instance list, You can choose which RDS instances whitelist to add instances to.
     */
    rdsInstances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the resource group,by default these cloud resources are automatically assigned to the default resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Rolling policy is used to specify the strategy when the node pool is rolling update. This field works when nodepool updating.
     */
    rollingPolicy?: pulumi.Input<inputs.cs.NodePoolRollingPolicy>;
    /**
     * Rollout policy is used to specify the strategy when the node pool is rolling update. This field works when nodepool updating. Please use `rollingPolicy` to instead it from provider version 1.185.0.
     *
     * @deprecated Field 'rollout_policy' has been deprecated from provider version 1.184.0. Please use new field 'rolling_policy' instead it to ensure the config takes effect
     */
    rolloutPolicy?: pulumi.Input<inputs.cs.NodePoolRolloutPolicy>;
    /**
     * The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     */
    runtimeName?: pulumi.Input<string>;
    /**
     * The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * Auto scaling node pool configuration. For more details, see `scalingConfig`. With auto-scaling is enabled, the nodes in the node pool will be labeled with `k8s.aliyun.com=true` to prevent system pods such as coredns, metrics-servers from being scheduled to elastic nodes, and to prevent node shrinkage from causing business abnormalities.
     */
    scalingConfig?: pulumi.Input<inputs.cs.NodePoolScalingConfig>;
    /**
     * (Available in 1.105.0+) Id of the Scaling Group.
     */
    scalingGroupId?: pulumi.Input<string>;
    /**
     * The scaling mode. Valid values: `release`, `recycle`, default is `release`. Standard mode(release): Create and release ECS instances based on requests.Swift mode(recycle): Create, stop, and restart ECS instances based on needs. New ECS instances are only created when no stopped ECS instance is avalible. This mode further accelerates the scaling process. Apart from ECS instances that use local storage, when an ECS instance is stopped, you are only chatged for storage space.
     */
    scalingPolicy?: pulumi.Input<string>;
    /**
     * The security group id for worker node. Field `securityGroupId` has been deprecated from provider version 1.145.0. New field `securityGroupIds` instead.
     *
     * @deprecated Field 'security_group_id' has been deprecated from provider version 1.145.0. New field 'security_group_ids' instead
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).  
     * > **NOTE:** It is forbidden to set both `cisEnabled` and `socEnabled` to `true`at the same time.
     */
    socEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum hourly price of the instance. This parameter takes effect only when `spotStrategy` is set to `SpotWithPriceLimit`. You could enable multiple spot instances by setting this field repeatedly.
     */
    spotPriceLimits?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolSpotPriceLimit>[]>;
    /**
     * The preemption policy for the pay-as-you-go instance. This parameter takes effect only when `instanceChargeType` is set to `PostPaid`. Valid value `SpotWithPriceLimit`,`SpotAsPriceGo` and `NoSpot`, default is `NoSpot`.
     */
    spotStrategy?: pulumi.Input<string>;
    /**
     * The system disk category of worker node. Its valid value are `cloudSsd`, `cloudEfficiency` and `cloudEssd`. Default to `cloudEfficiency`.
     */
    systemDiskCategory?: pulumi.Input<string>;
    /**
     * The encryption Algorithm for Encrypting System Disk. It takes effect when systemDiskEncrypted is true. Valid values `aes-256` and `sm4-128`.
     */
    systemDiskEncryptAlgorithm?: pulumi.Input<string>;
    /**
     * Whether to enable system disk encryption.
     */
    systemDiskEncrypted?: pulumi.Input<boolean>;
    /**
     * The kms key id used to encrypt the system disk. It takes effect when systemDiskEncrypted is true.
     */
    systemDiskKmsKey?: pulumi.Input<string>;
    /**
     * The performance of system disk, only valid for ESSD disk. You have to specify one of `PL0` `PL1` `PL2` `PL3` fields.
     */
    systemDiskPerformanceLevel?: pulumi.Input<string>;
    /**
     * The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
     */
    systemDiskSize?: pulumi.Input<number>;
    /**
     * The system disk snapshot policy id.
     */
    systemDiskSnapshotPolicyId?: pulumi.Input<string>;
    /**
     * A Map of tags to assign to the resource. It will be applied for ECS instances finally. Detailed below.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
     */
    taints?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolTaint>[]>;
    /**
     * Set the newly added node as unschedulable. If you want to open the scheduling option, you can open it in the node list of the console. If you are using an auto-scaling node pool, the setting will not take effect. Default is `false`.
     */
    unschedulable?: pulumi.Input<boolean>;
    /**
     * Windows instances support batch and PowerShell scripts. If your script file is larger than 1 KB, we recommend that you upload the script to Object Storage Service (OSS) and pull it through the internal endpoint of your OSS bucket.
     */
    userData?: pulumi.Input<string>;
    /**
     * The VPC of the nodes in the node pool.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The vswitches used by node pool workers.
     */
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a NodePool resource.
 */
export interface NodePoolArgs {
    /**
     * Enable Node payment auto-renew, default is `false`.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * Node payment auto-renew period, one of `1`, `2`, `3`,`6`, `12`.
     */
    autoRenewPeriod?: pulumi.Input<number>;
    /**
     * Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [CIS Reinforcement](https://help.aliyun.com/document_detail/223744.html).
     */
    cisEnabled?: pulumi.Input<boolean>;
    /**
     * The id of kubernetes cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Kubelet cpu policy. For Kubernetes 1.12.6 and later, its valid value is either `static` or `none`. Default to `none` and modification is not supported.
     */
    cpuPolicy?: pulumi.Input<string>;
    /**
     * The data disk configurations of worker nodes, such as the disk type and disk size.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolDataDisk>[]>;
    /**
     * The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     */
    deploymentSetId?: pulumi.Input<string>;
    /**
     * The desired size of nodes of the node pool. From version 1.158.0, `desiredSize` is not required.
     */
    desiredSize?: pulumi.Input<number>;
    /**
     * After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     */
    formatDisk?: pulumi.Input<boolean>;
    /**
     * Custom Image support. Must based on CentOS7 or AliyunLinux2.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The image type, instead of `platform`. This field cannot be modified. One of `AliyunLinux`, `AliyunLinux3`, `AliyunLinux3Arm64`, `AliyunLinuxUEFI`, `CentOS`, `Windows`,`WindowsCore`,`AliyunLinux Qboot`,`ContainerOS`. If you select `Windows` or `WindowsCore`, the `passord` is required.
     */
    imageType?: pulumi.Input<string>;
    /**
     * Install the cloud monitoring plug-in on the node, and you can view the monitoring information of the instance through the cloud monitoring console. Default is `true`.
     */
    installCloudMonitor?: pulumi.Input<boolean>;
    /**
     * Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
     */
    instanceChargeType?: pulumi.Input<string>;
    /**
     * The instance type of worker node.
     */
    instanceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance list. Add existing nodes under the same cluster VPC to the node pool.
     */
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one.
     */
    internetChargeType?: pulumi.Input<string>;
    /**
     * The maximum outbound bandwidth for the public network. Unit: Mbit/s. Valid values: 0 to 100.
     */
    internetMaxBandwidthOut?: pulumi.Input<number>;
    /**
     * Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     */
    keepInstanceName?: pulumi.Input<boolean>;
    /**
     * The keypair of ssh login cluster node, you have to create it first. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields. Only `keyName` is supported in the management node pool.
     */
    keyName?: pulumi.Input<string>;
    /**
     * An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
     */
    kmsEncryptedPassword?: pulumi.Input<string>;
    /**
     * An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a cs kubernetes with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
     */
    kmsEncryptionContext?: pulumi.Input<{[key: string]: any}>;
    /**
     * Kubelet configuration parameters for worker nodes. Detailed below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/).
     */
    kubeletConfiguration?: pulumi.Input<inputs.cs.NodePoolKubeletConfiguration>;
    /**
     * A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
     */
    labels?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolLabel>[]>;
    /**
     * Managed node pool configuration. When using a managed node pool, the node key must use `keyName`. Detailed below.
     */
    management?: pulumi.Input<inputs.cs.NodePoolManagement>;
    /**
     * The name of node pool.
     */
    name?: pulumi.Input<string>;
    /**
     * The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
     *
     * @deprecated Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * Each node name consists of a prefix, an IP substring, and a suffix, the input format is `customized,<prefix>,IPSubStringLen,<suffix>`. For example "customized,aliyun.com-,5,-test", if the node IP address is 192.168.59.176, the prefix is aliyun.com-, IP substring length is 5, and the suffix is -test, the node name will be aliyun.com-59176-test.
     */
    nodeNameMode?: pulumi.Input<string>;
    /**
     * The password of ssh login cluster node. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
     */
    password?: pulumi.Input<string>;
    /**
     * Node payment period. Its valid value is one of {1, 2, 3, 6, 12, 24, 36, 48, 60}.
     */
    period?: pulumi.Input<number>;
    /**
     * Node payment period unit, valid value: `Month`. Default is `Month`.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * The platform. One of `AliyunLinux`, `Windows`, `CentOS`, `WindowsCore`. If you select `Windows` or `WindowsCore`, the `passord` is required. Field `platform` has been deprecated from provider version 1.145.0. New field `imageType` instead.
     *
     * @deprecated Field 'platform' has been deprecated from provider version 1.145.0. New field 'image_type' instead
     */
    platform?: pulumi.Input<string>;
    /**
     * PolarDB id list, You can choose which PolarDB whitelist to add instances to.
     */
    polardbIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * RDS instance list, You can choose which RDS instances whitelist to add instances to.
     */
    rdsInstances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the resource group,by default these cloud resources are automatically assigned to the default resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Rolling policy is used to specify the strategy when the node pool is rolling update. This field works when nodepool updating.
     */
    rollingPolicy?: pulumi.Input<inputs.cs.NodePoolRollingPolicy>;
    /**
     * Rollout policy is used to specify the strategy when the node pool is rolling update. This field works when nodepool updating. Please use `rollingPolicy` to instead it from provider version 1.185.0.
     *
     * @deprecated Field 'rollout_policy' has been deprecated from provider version 1.184.0. Please use new field 'rolling_policy' instead it to ensure the config takes effect
     */
    rolloutPolicy?: pulumi.Input<inputs.cs.NodePoolRolloutPolicy>;
    /**
     * The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     */
    runtimeName?: pulumi.Input<string>;
    /**
     * The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * Auto scaling node pool configuration. For more details, see `scalingConfig`. With auto-scaling is enabled, the nodes in the node pool will be labeled with `k8s.aliyun.com=true` to prevent system pods such as coredns, metrics-servers from being scheduled to elastic nodes, and to prevent node shrinkage from causing business abnormalities.
     */
    scalingConfig?: pulumi.Input<inputs.cs.NodePoolScalingConfig>;
    /**
     * The scaling mode. Valid values: `release`, `recycle`, default is `release`. Standard mode(release): Create and release ECS instances based on requests.Swift mode(recycle): Create, stop, and restart ECS instances based on needs. New ECS instances are only created when no stopped ECS instance is avalible. This mode further accelerates the scaling process. Apart from ECS instances that use local storage, when an ECS instance is stopped, you are only chatged for storage space.
     */
    scalingPolicy?: pulumi.Input<string>;
    /**
     * The security group id for worker node. Field `securityGroupId` has been deprecated from provider version 1.145.0. New field `securityGroupIds` instead.
     *
     * @deprecated Field 'security_group_id' has been deprecated from provider version 1.145.0. New field 'security_group_ids' instead
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).  
     * > **NOTE:** It is forbidden to set both `cisEnabled` and `socEnabled` to `true`at the same time.
     */
    socEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum hourly price of the instance. This parameter takes effect only when `spotStrategy` is set to `SpotWithPriceLimit`. You could enable multiple spot instances by setting this field repeatedly.
     */
    spotPriceLimits?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolSpotPriceLimit>[]>;
    /**
     * The preemption policy for the pay-as-you-go instance. This parameter takes effect only when `instanceChargeType` is set to `PostPaid`. Valid value `SpotWithPriceLimit`,`SpotAsPriceGo` and `NoSpot`, default is `NoSpot`.
     */
    spotStrategy?: pulumi.Input<string>;
    /**
     * The system disk category of worker node. Its valid value are `cloudSsd`, `cloudEfficiency` and `cloudEssd`. Default to `cloudEfficiency`.
     */
    systemDiskCategory?: pulumi.Input<string>;
    /**
     * The encryption Algorithm for Encrypting System Disk. It takes effect when systemDiskEncrypted is true. Valid values `aes-256` and `sm4-128`.
     */
    systemDiskEncryptAlgorithm?: pulumi.Input<string>;
    /**
     * Whether to enable system disk encryption.
     */
    systemDiskEncrypted?: pulumi.Input<boolean>;
    /**
     * The kms key id used to encrypt the system disk. It takes effect when systemDiskEncrypted is true.
     */
    systemDiskKmsKey?: pulumi.Input<string>;
    /**
     * The performance of system disk, only valid for ESSD disk. You have to specify one of `PL0` `PL1` `PL2` `PL3` fields.
     */
    systemDiskPerformanceLevel?: pulumi.Input<string>;
    /**
     * The system disk category of worker node. Its valid value range [40~500] in GB. Default to `120`.
     */
    systemDiskSize?: pulumi.Input<number>;
    /**
     * The system disk snapshot policy id.
     */
    systemDiskSnapshotPolicyId?: pulumi.Input<string>;
    /**
     * A Map of tags to assign to the resource. It will be applied for ECS instances finally. Detailed below.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
     */
    taints?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolTaint>[]>;
    /**
     * Set the newly added node as unschedulable. If you want to open the scheduling option, you can open it in the node list of the console. If you are using an auto-scaling node pool, the setting will not take effect. Default is `false`.
     */
    unschedulable?: pulumi.Input<boolean>;
    /**
     * Windows instances support batch and PowerShell scripts. If your script file is larger than 1 KB, we recommend that you upload the script to Object Storage Service (OSS) and pull it through the internal endpoint of your OSS bucket.
     */
    userData?: pulumi.Input<string>;
    /**
     * The vswitches used by node pool workers.
     */
    vswitchIds: pulumi.Input<pulumi.Input<string>[]>;
}
