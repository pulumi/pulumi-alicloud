// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const _default = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const enhanced = alicloud.vpc.getEnhancedNatAvailableZones({});
 * const cloudEfficiency = enhanced.then(enhanced => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: enhanced.zones?.[0]?.zoneId,
 *     cpuCoreCount: 4,
 *     memorySize: 8,
 *     kubernetesNodeRole: "Worker",
 *     systemDiskCategory: "cloud_efficiency",
 * }));
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: enhanced.then(enhanced => enhanced.zones?.[0]?.zoneId),
 * });
 * const defaultManagedKubernetes = new alicloud.cs.ManagedKubernetes("default", {
 *     namePrefix: `terraform-example-${_default.result}`,
 *     clusterSpec: "ack.pro.small",
 *     workerVswitchIds: [defaultSwitch.id],
 *     newNatGateway: true,
 *     podCidr: std.cidrsubnet({
 *         input: "10.0.0.0/8",
 *         newbits: 8,
 *         netnum: 36,
 *     }).then(invoke => invoke.result),
 *     serviceCidr: std.cidrsubnet({
 *         input: "172.16.0.0/16",
 *         newbits: 4,
 *         netnum: 7,
 *     }).then(invoke => invoke.result),
 *     slbInternetEnabled: true,
 *     enableRrsa: true,
 * });
 * const defaultKeyPair = new alicloud.ecs.KeyPair("default", {keyPairName: `terraform-example-${_default.result}`});
 * const defaultNodePool = new alicloud.cs.NodePool("default", {
 *     nodePoolName: name,
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [defaultSwitch.id],
 *     instanceTypes: [cloudEfficiency.then(cloudEfficiency => cloudEfficiency.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: defaultKeyPair.keyPairName,
 *     labels: [
 *         {
 *             key: "test1",
 *             value: "nodepool",
 *         },
 *         {
 *             key: "test2",
 *             value: "nodepool",
 *         },
 *     ],
 *     taints: [
 *         {
 *             key: "tf",
 *             effect: "NoSchedule",
 *             value: "example",
 *         },
 *         {
 *             key: "tf2",
 *             effect: "NoSchedule",
 *             value: "example2",
 *         },
 *     ],
 * });
 * //The parameter `node_count` is deprecated from version 1.158.0. Please use the new parameter `desired_size` instead, you can update it as follows.
 * const desiredSize = new alicloud.cs.NodePool("desired_size", {
 *     nodePoolName: "desired_size",
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [defaultSwitch.id],
 *     instanceTypes: [cloudEfficiency.then(cloudEfficiency => cloudEfficiency.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: defaultKeyPair.keyPairName,
 *     desiredSize: "0",
 * });
 * // Create a managed node pool. If you need to enable maintenance window, you need to set the maintenance window in `alicloud_cs_managed_kubernetes`.
 * const maintenance = new alicloud.cs.NodePool("maintenance", {
 *     nodePoolName: "maintenance",
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [defaultSwitch.id],
 *     instanceTypes: [cloudEfficiency.then(cloudEfficiency => cloudEfficiency.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: defaultKeyPair.keyPairName,
 *     desiredSize: "1",
 *     management: {
 *         enable: true,
 *         autoRepair: true,
 *         autoRepairPolicy: {
 *             restartNode: true,
 *         },
 *         autoUpgrade: true,
 *         autoUpgradePolicy: {
 *             autoUpgradeKubelet: true,
 *         },
 *         autoVulFix: true,
 *         autoVulFixPolicy: {
 *             vulLevel: "asap",
 *             restartNode: true,
 *         },
 *         maxUnavailable: 1,
 *     },
 * });
 * //Create a node pool with spot instance.
 * const spotInstance = new alicloud.cs.NodePool("spot_instance", {
 *     nodePoolName: "spot_instance",
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [defaultSwitch.id],
 *     instanceTypes: [
 *         cloudEfficiency.then(cloudEfficiency => cloudEfficiency.instanceTypes?.[0]?.id),
 *         cloudEfficiency.then(cloudEfficiency => cloudEfficiency.instanceTypes?.[1]?.id),
 *     ],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: defaultKeyPair.keyPairName,
 *     desiredSize: "1",
 *     spotStrategy: "SpotWithPriceLimit",
 *     spotPriceLimits: [
 *         {
 *             instanceType: cloudEfficiency.then(cloudEfficiency => cloudEfficiency.instanceTypes?.[0]?.id),
 *             priceLimit: "0.70",
 *         },
 *         {
 *             instanceType: cloudEfficiency.then(cloudEfficiency => cloudEfficiency.instanceTypes?.[1]?.id),
 *             priceLimit: "0.72",
 *         },
 *     ],
 * });
 * //Use Spot instances to create a node pool with auto-scaling enabled
 * const spotAutoScaling = new alicloud.cs.NodePool("spot_auto_scaling", {
 *     nodePoolName: "spot_auto_scaling",
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [defaultSwitch.id],
 *     instanceTypes: [cloudEfficiency.then(cloudEfficiency => cloudEfficiency.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: defaultKeyPair.keyPairName,
 *     scalingConfig: {
 *         minSize: 1,
 *         maxSize: 10,
 *         type: "spot",
 *     },
 *     spotStrategy: "SpotWithPriceLimit",
 *     spotPriceLimits: [{
 *         instanceType: cloudEfficiency.then(cloudEfficiency => cloudEfficiency.instanceTypes?.[0]?.id),
 *         priceLimit: "0.70",
 *     }],
 * });
 * //Create a `PrePaid` node pool.
 * const prepaidNode = new alicloud.cs.NodePool("prepaid_node", {
 *     nodePoolName: "prepaid_node",
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [defaultSwitch.id],
 *     instanceTypes: [cloudEfficiency.then(cloudEfficiency => cloudEfficiency.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: defaultKeyPair.keyPairName,
 *     instanceChargeType: "PrePaid",
 *     period: 1,
 *     periodUnit: "Month",
 *     autoRenew: true,
 *     autoRenewPeriod: 1,
 *     installCloudMonitor: true,
 * });
 * //#Create a node pool with customized kubelet parameters
 * const customizedKubelet = new alicloud.cs.NodePool("customized_kubelet", {
 *     nodePoolName: "customized_kubelet",
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [defaultSwitch.id],
 *     instanceTypes: [cloudEfficiency.then(cloudEfficiency => cloudEfficiency.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     instanceChargeType: "PostPaid",
 *     desiredSize: "0",
 *     kubeletConfiguration: {
 *         registryPullQps: "10",
 *         registryBurst: "5",
 *         eventRecordQps: "10",
 *         eventBurst: "5",
 *         serializeImagePulls: "true",
 *         evictionHard: {
 *             "memory.available": "1024Mi",
 *             "nodefs.available": "10%",
 *             "nodefs.inodesFree": "5%",
 *             "imagefs.available": "10%",
 *         },
 *         systemReserved: {
 *             cpu: "1",
 *             memory: "1Gi",
 *             "ephemeral-storage": "10Gi",
 *         },
 *         kubeReserved: {
 *             cpu: "500m",
 *             memory: "1Gi",
 *         },
 *         containerLogMaxSize: "200Mi",
 *         containerLogMaxFiles: "3",
 *         maxPods: "100",
 *         readOnlyPort: "0",
 *         allowedUnsafeSysctls: ["net.ipv4.route.min_pmtu"],
 *     },
 *     rollingPolicy: {
 *         maxParallelism: 1,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Container Service for Kubernetes (ACK) Nodepool can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cs/nodePool:NodePool example <cluster_id>:<node_pool_id>
 * ```
 */
export class NodePool extends pulumi.CustomResource {
    /**
     * Get an existing NodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodePoolState, opts?: pulumi.CustomResourceOptions): NodePool {
        return new NodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cs/nodePool:NodePool';

    /**
     * Returns true if the given object is an instance of NodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodePool.__pulumiType;
    }

    /**
     * Whether to enable automatic renewal for nodes in the node pool takes effect only when `instanceChargeType` is set to `PrePaid`. Default value: `false`. Valid values:
     */
    declare public readonly autoRenew: pulumi.Output<boolean | undefined>;
    /**
     * The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
     */
    declare public readonly autoRenewPeriod: pulumi.Output<number | undefined>;
    /**
     * Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `securityHardeningOs` instead.
     *
     * @deprecated Field 'cis_enabled' has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `securityHardeningOs` instead.
     */
    declare public readonly cisEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The id of kubernetes cluster.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multiAzPolicy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
     */
    declare public readonly compensateWithOnDemand: pulumi.Output<boolean | undefined>;
    /**
     * Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
     */
    declare public readonly cpuPolicy: pulumi.Output<string>;
    /**
     * Configure the data disk of the node in the node pool. See `dataDisks` below.
     */
    declare public readonly dataDisks: pulumi.Output<outputs.cs.NodePoolDataDisk[] | undefined>;
    /**
     * The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     */
    declare public readonly deploymentSetId: pulumi.Output<string | undefined>;
    /**
     * Number of expected nodes in the node pool.
     */
    declare public readonly desiredSize: pulumi.Output<string | undefined>;
    /**
     * Lingjun node pool configuration. See `efloNodeGroup` below.
     */
    declare public readonly efloNodeGroup: pulumi.Output<outputs.cs.NodePoolEfloNodeGroup | undefined>;
    /**
     * Whether to force deletion.
     */
    declare public readonly forceDelete: pulumi.Output<boolean | undefined>;
    /**
     * After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     */
    declare public readonly formatDisk: pulumi.Output<boolean>;
    /**
     * The custom image ID. The system-provided image is used by default.
     */
    declare public readonly imageId: pulumi.Output<string>;
    /**
     * The operating system image type and the `platform` parameter can be selected from the following values:
     * - `AliyunLinux` : Alinux2 image.
     * - `AliyunLinux3` : Alinux3 image.
     * - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
     * - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
     * - `CentOS` : CentOS image.
     * - `Windows` : Windows image.
     * - `WindowsCore` : WindowsCore image.
     * - `ContainerOS` : container-optimized image.
     * - `Ubuntu`: Ubuntu image.
     * - `AliyunLinux3ContainerOptimized`: Alinux3 container-optimized image.
     */
    declare public readonly imageType: pulumi.Output<string>;
    /**
     * Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
     */
    declare public readonly installCloudMonitor: pulumi.Output<boolean | undefined>;
    /**
     * Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
     */
    declare public readonly instanceChargeType: pulumi.Output<string>;
    /**
     * In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
     */
    declare public readonly instanceTypes: pulumi.Output<string[] | undefined>;
    /**
     * The instance list. Add existing nodes under the same cluster VPC to the node pool.
     */
    declare public readonly instances: pulumi.Output<string[] | undefined>;
    /**
     * The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one.
     */
    declare public readonly internetChargeType: pulumi.Output<string | undefined>;
    /**
     * The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\]
     */
    declare public readonly internetMaxBandwidthOut: pulumi.Output<number | undefined>;
    /**
     * Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     */
    declare public readonly keepInstanceName: pulumi.Output<boolean>;
    /**
     * The name of the key pair. When the node pool is a managed node pool, only `keyName` is supported.
     */
    declare public readonly keyName: pulumi.Output<string | undefined>;
    /**
     * An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
     */
    declare public readonly kmsEncryptedPassword: pulumi.Output<string | undefined>;
    /**
     * An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a cs kubernetes with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
     */
    declare public readonly kmsEncryptionContext: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Kubelet configuration parameters for worker nodes. See `kubeletConfiguration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubeletConfiguration` below.
     */
    declare public readonly kubeletConfiguration: pulumi.Output<outputs.cs.NodePoolKubeletConfiguration | undefined>;
    /**
     * A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
     */
    declare public readonly labels: pulumi.Output<outputs.cs.NodePoolLabel[] | undefined>;
    /**
     * Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
     */
    declare public readonly loginAsNonRoot: pulumi.Output<boolean | undefined>;
    /**
     * Managed node pool configuration. See `management` below.
     */
    declare public readonly management: pulumi.Output<outputs.cs.NodePoolManagement>;
    /**
     * The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
     */
    declare public readonly multiAzPolicy: pulumi.Output<string>;
    /**
     * . Field 'name' has been deprecated from provider version 1.219.0. New field 'node_pool_name' instead.
     *
     * @deprecated Field 'name' has been deprecated since provider version 1.219.0. New field 'node_pool_name' instead.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
     *
     * @deprecated Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
     */
    declare public readonly nodeCount: pulumi.Output<number>;
    /**
     * Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
     * - The prefix and suffix can be composed of one or more parts separated by '.', each part can use lowercase letters, numbers and '-', and the beginning and end of the node name must be lowercase letters and numbers.
     * - The node IP address is the complete private IP address of the node.
     * - For example, if the string `customized,aliyun,ip,com` is passed in (where 'customized' and 'ip' are fixed strings, 'aliyun' is the prefix, and 'com' is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
     */
    declare public readonly nodeNameMode: pulumi.Output<string>;
    /**
     * The first ID of the resource.
     */
    declare public /*out*/ readonly nodePoolId: pulumi.Output<string>;
    /**
     * The name of node pool.
     */
    declare public readonly nodePoolName: pulumi.Output<string>;
    /**
     * The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
     */
    declare public readonly onDemandBaseCapacity: pulumi.Output<string | undefined>;
    /**
     * The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `onDemandBaseCapacity`. Valid values: 0 to 100.
     */
    declare public readonly onDemandPercentageAboveBaseCapacity: pulumi.Output<string | undefined>;
    /**
     * The password of ssh login. You have to specify one of `password` and `keyName` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
     */
    declare public readonly period: pulumi.Output<number | undefined>;
    /**
     * Node payment period unit, valid value: `Month`. Default is `Month`.
     */
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    /**
     * Operating system release, using `imageType` instead.
     *
     * @deprecated Field 'platform' has been deprecated from provider version 1.145.0. Operating system release, using `imageType` instead.
     */
    declare public readonly platform: pulumi.Output<string>;
    /**
     * Node pre custom data, base64-encoded, the script executed before the node is initialized.
     */
    declare public readonly preUserData: pulumi.Output<string | undefined>;
    /**
     * Private node pool configuration. See `privatePoolOptions` below.
     */
    declare public readonly privatePoolOptions: pulumi.Output<outputs.cs.NodePoolPrivatePoolOptions | undefined>;
    /**
     * The name of the Worker RAM role.
     * * If it is empty, the default Worker RAM role created in the cluster will be used.
     * * If the specified RAM role is not empty, the specified RAM role must be a **Common Service role**, and its **trusted service** configuration must be **cloud server**. For more information, see [Create a common service role](https://help.aliyun.com/document_detail/116800.html). If the specified RAM role is not the default Worker RAM role created in the cluster, the role name cannot start with 'KubernetesMasterRole-'or 'KubernetesWorkerRole.
     *
     * > **NOTE:**  This parameter is only supported for ACK-managed clusters of 1.22 or later versions.
     */
    declare public readonly ramRoleName: pulumi.Output<string>;
    /**
     * The list of RDS instances.
     */
    declare public readonly rdsInstances: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the resource group
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * Rotary configuration. See `rollingPolicy` below.
     */
    declare public readonly rollingPolicy: pulumi.Output<outputs.cs.NodePoolRollingPolicy | undefined>;
    /**
     * The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     */
    declare public readonly runtimeName: pulumi.Output<string>;
    /**
     * The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     */
    declare public readonly runtimeVersion: pulumi.Output<string>;
    /**
     * Automatic scaling configuration. See `scalingConfig` below.
     */
    declare public readonly scalingConfig: pulumi.Output<outputs.cs.NodePoolScalingConfig>;
    /**
     * The ID of the scaling group.
     */
    declare public /*out*/ readonly scalingGroupId: pulumi.Output<string>;
    /**
     * Scaling group mode, default value: `release`. Valid values:
     */
    declare public readonly scalingPolicy: pulumi.Output<string>;
    /**
     * The security group ID of the node pool. This field has been replaced by `securityGroupIds`, please use the `securityGroupIds` field instead.
     *
     * @deprecated Field 'security_group_id' has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `securityGroupIds`, please use the `securityGroupIds` field instead.
     */
    declare public readonly securityGroupId: pulumi.Output<string>;
    /**
     * Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    /**
     * Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
     */
    declare public readonly securityHardeningOs: pulumi.Output<boolean | undefined>;
    /**
     * Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
     *
     * > **NOTE:**  It is forbidden to set both `securityHardeningOs` and `socEnabled` to `true` at the same time.
     */
    declare public readonly socEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
     */
    declare public readonly spotInstancePools: pulumi.Output<number | undefined>;
    /**
     * Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
     */
    declare public readonly spotInstanceRemedy: pulumi.Output<boolean | undefined>;
    /**
     * The current single preemptible instance type market price range configuration. See `spotPriceLimit` below.
     */
    declare public readonly spotPriceLimits: pulumi.Output<outputs.cs.NodePoolSpotPriceLimit[] | undefined>;
    /**
     * The preemptible instance type. Value:
     * - `NoSpot` : Non-preemptible instance.
     * - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
     * - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
     */
    declare public readonly spotStrategy: pulumi.Output<string>;
    /**
     * Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `systemDiskCategory` is set to `cloudAuto`.
     */
    declare public readonly systemDiskBurstingEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values see `systemDiskCategory`.
     */
    declare public readonly systemDiskCategories: pulumi.Output<string[]>;
    /**
     * The category of the system disk for nodes. Default value: `cloudEfficiency`. Valid values:
     */
    declare public readonly systemDiskCategory: pulumi.Output<string>;
    /**
     * The encryption algorithm used by the system disk. Value range: aes-256.
     */
    declare public readonly systemDiskEncryptAlgorithm: pulumi.Output<string | undefined>;
    /**
     * Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
     */
    declare public readonly systemDiskEncrypted: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the KMS key used by the system disk.
     */
    declare public readonly systemDiskKmsKey: pulumi.Output<string | undefined>;
    /**
     * The system disk performance of the node takes effect only for the ESSD disk.
     * - `PL0`: maximum random read/write IOPS 10000 for a single disk.
     * - `PL1`: maximum random read/write IOPS 50000 for a single disk.
     * - `PL2`: highest random read/write IOPS 100000 for a single disk.
     * - `PL3`: maximum random read/write IOPS 1 million for a single disk.
     */
    declare public readonly systemDiskPerformanceLevel: pulumi.Output<string | undefined>;
    /**
     * The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `systemDiskCategory` is set to `cloudAuto`.
     */
    declare public readonly systemDiskProvisionedIops: pulumi.Output<number | undefined>;
    /**
     * The size of the system disk. Unit: GiB. The value of this parameter must be at least 1 and greater than or equal to the image size. Default value: 40 or the size of the image, whichever is larger.
     * - Basic disk: 20 to 500.
     * - ESSD (cloud_essd): The valid values vary based on the performance level of the ESSD. PL0 ESSD: 1 to 2048. PL1 ESSD: 20 to 2048. PL2 ESSD: 461 to 2048. PL3 ESSD: 1261 to 2048.
     * - ESSD AutoPL disk (cloud_auto): 1 to 2048.
     * - Other disk categories: 20 to 2048.
     */
    declare public readonly systemDiskSize: pulumi.Output<number | undefined>;
    /**
     * The ID of the automatic snapshot policy used by the system disk.
     */
    declare public readonly systemDiskSnapshotPolicyId: pulumi.Output<string | undefined>;
    /**
     * Add tags only for ECS instances. The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
     */
    declare public readonly taints: pulumi.Output<outputs.cs.NodePoolTaint[] | undefined>;
    /**
     * The configuration about confidential computing for the cluster. See `teeConfig` below.
     */
    declare public readonly teeConfig: pulumi.Output<outputs.cs.NodePoolTeeConfig>;
    /**
     * Node pool type, value range:
     * -'ess': common node pool (including hosting function and auto scaling function).
     * -'lingjun': Lingjun node pool.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Whether the node after expansion can be scheduled.
     */
    declare public readonly unschedulable: pulumi.Output<boolean | undefined>;
    /**
     * Synchronously update node labels and taints.
     */
    declare public readonly updateNodes: pulumi.Output<boolean | undefined>;
    /**
     * Node custom data, base64-encoded.
     */
    declare public readonly userData: pulumi.Output<string | undefined>;
    /**
     * The vswitches used by node pool workers.
     */
    declare public readonly vswitchIds: pulumi.Output<string[] | undefined>;

    /**
     * Create a NodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodePoolArgs | NodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodePoolState | undefined;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["autoRenewPeriod"] = state?.autoRenewPeriod;
            resourceInputs["cisEnabled"] = state?.cisEnabled;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["compensateWithOnDemand"] = state?.compensateWithOnDemand;
            resourceInputs["cpuPolicy"] = state?.cpuPolicy;
            resourceInputs["dataDisks"] = state?.dataDisks;
            resourceInputs["deploymentSetId"] = state?.deploymentSetId;
            resourceInputs["desiredSize"] = state?.desiredSize;
            resourceInputs["efloNodeGroup"] = state?.efloNodeGroup;
            resourceInputs["forceDelete"] = state?.forceDelete;
            resourceInputs["formatDisk"] = state?.formatDisk;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["imageType"] = state?.imageType;
            resourceInputs["installCloudMonitor"] = state?.installCloudMonitor;
            resourceInputs["instanceChargeType"] = state?.instanceChargeType;
            resourceInputs["instanceTypes"] = state?.instanceTypes;
            resourceInputs["instances"] = state?.instances;
            resourceInputs["internetChargeType"] = state?.internetChargeType;
            resourceInputs["internetMaxBandwidthOut"] = state?.internetMaxBandwidthOut;
            resourceInputs["keepInstanceName"] = state?.keepInstanceName;
            resourceInputs["keyName"] = state?.keyName;
            resourceInputs["kmsEncryptedPassword"] = state?.kmsEncryptedPassword;
            resourceInputs["kmsEncryptionContext"] = state?.kmsEncryptionContext;
            resourceInputs["kubeletConfiguration"] = state?.kubeletConfiguration;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["loginAsNonRoot"] = state?.loginAsNonRoot;
            resourceInputs["management"] = state?.management;
            resourceInputs["multiAzPolicy"] = state?.multiAzPolicy;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeCount"] = state?.nodeCount;
            resourceInputs["nodeNameMode"] = state?.nodeNameMode;
            resourceInputs["nodePoolId"] = state?.nodePoolId;
            resourceInputs["nodePoolName"] = state?.nodePoolName;
            resourceInputs["onDemandBaseCapacity"] = state?.onDemandBaseCapacity;
            resourceInputs["onDemandPercentageAboveBaseCapacity"] = state?.onDemandPercentageAboveBaseCapacity;
            resourceInputs["password"] = state?.password;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["platform"] = state?.platform;
            resourceInputs["preUserData"] = state?.preUserData;
            resourceInputs["privatePoolOptions"] = state?.privatePoolOptions;
            resourceInputs["ramRoleName"] = state?.ramRoleName;
            resourceInputs["rdsInstances"] = state?.rdsInstances;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["rollingPolicy"] = state?.rollingPolicy;
            resourceInputs["runtimeName"] = state?.runtimeName;
            resourceInputs["runtimeVersion"] = state?.runtimeVersion;
            resourceInputs["scalingConfig"] = state?.scalingConfig;
            resourceInputs["scalingGroupId"] = state?.scalingGroupId;
            resourceInputs["scalingPolicy"] = state?.scalingPolicy;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["securityHardeningOs"] = state?.securityHardeningOs;
            resourceInputs["socEnabled"] = state?.socEnabled;
            resourceInputs["spotInstancePools"] = state?.spotInstancePools;
            resourceInputs["spotInstanceRemedy"] = state?.spotInstanceRemedy;
            resourceInputs["spotPriceLimits"] = state?.spotPriceLimits;
            resourceInputs["spotStrategy"] = state?.spotStrategy;
            resourceInputs["systemDiskBurstingEnabled"] = state?.systemDiskBurstingEnabled;
            resourceInputs["systemDiskCategories"] = state?.systemDiskCategories;
            resourceInputs["systemDiskCategory"] = state?.systemDiskCategory;
            resourceInputs["systemDiskEncryptAlgorithm"] = state?.systemDiskEncryptAlgorithm;
            resourceInputs["systemDiskEncrypted"] = state?.systemDiskEncrypted;
            resourceInputs["systemDiskKmsKey"] = state?.systemDiskKmsKey;
            resourceInputs["systemDiskPerformanceLevel"] = state?.systemDiskPerformanceLevel;
            resourceInputs["systemDiskProvisionedIops"] = state?.systemDiskProvisionedIops;
            resourceInputs["systemDiskSize"] = state?.systemDiskSize;
            resourceInputs["systemDiskSnapshotPolicyId"] = state?.systemDiskSnapshotPolicyId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["taints"] = state?.taints;
            resourceInputs["teeConfig"] = state?.teeConfig;
            resourceInputs["type"] = state?.type;
            resourceInputs["unschedulable"] = state?.unschedulable;
            resourceInputs["updateNodes"] = state?.updateNodes;
            resourceInputs["userData"] = state?.userData;
            resourceInputs["vswitchIds"] = state?.vswitchIds;
        } else {
            const args = argsOrState as NodePoolArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["autoRenewPeriod"] = args?.autoRenewPeriod;
            resourceInputs["cisEnabled"] = args?.cisEnabled;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["compensateWithOnDemand"] = args?.compensateWithOnDemand;
            resourceInputs["cpuPolicy"] = args?.cpuPolicy;
            resourceInputs["dataDisks"] = args?.dataDisks;
            resourceInputs["deploymentSetId"] = args?.deploymentSetId;
            resourceInputs["desiredSize"] = args?.desiredSize;
            resourceInputs["efloNodeGroup"] = args?.efloNodeGroup;
            resourceInputs["forceDelete"] = args?.forceDelete;
            resourceInputs["formatDisk"] = args?.formatDisk;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["imageType"] = args?.imageType;
            resourceInputs["installCloudMonitor"] = args?.installCloudMonitor;
            resourceInputs["instanceChargeType"] = args?.instanceChargeType;
            resourceInputs["instanceTypes"] = args?.instanceTypes;
            resourceInputs["instances"] = args?.instances;
            resourceInputs["internetChargeType"] = args?.internetChargeType;
            resourceInputs["internetMaxBandwidthOut"] = args?.internetMaxBandwidthOut;
            resourceInputs["keepInstanceName"] = args?.keepInstanceName;
            resourceInputs["keyName"] = args?.keyName;
            resourceInputs["kmsEncryptedPassword"] = args?.kmsEncryptedPassword ? pulumi.secret(args.kmsEncryptedPassword) : undefined;
            resourceInputs["kmsEncryptionContext"] = args?.kmsEncryptionContext;
            resourceInputs["kubeletConfiguration"] = args?.kubeletConfiguration;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["loginAsNonRoot"] = args?.loginAsNonRoot;
            resourceInputs["management"] = args?.management;
            resourceInputs["multiAzPolicy"] = args?.multiAzPolicy;
            resourceInputs["name"] = args?.name;
            resourceInputs["nodeCount"] = args?.nodeCount;
            resourceInputs["nodeNameMode"] = args?.nodeNameMode;
            resourceInputs["nodePoolName"] = args?.nodePoolName;
            resourceInputs["onDemandBaseCapacity"] = args?.onDemandBaseCapacity;
            resourceInputs["onDemandPercentageAboveBaseCapacity"] = args?.onDemandPercentageAboveBaseCapacity;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["platform"] = args?.platform;
            resourceInputs["preUserData"] = args?.preUserData;
            resourceInputs["privatePoolOptions"] = args?.privatePoolOptions;
            resourceInputs["ramRoleName"] = args?.ramRoleName;
            resourceInputs["rdsInstances"] = args?.rdsInstances;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["rollingPolicy"] = args?.rollingPolicy;
            resourceInputs["runtimeName"] = args?.runtimeName;
            resourceInputs["runtimeVersion"] = args?.runtimeVersion;
            resourceInputs["scalingConfig"] = args?.scalingConfig;
            resourceInputs["scalingPolicy"] = args?.scalingPolicy;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["securityHardeningOs"] = args?.securityHardeningOs;
            resourceInputs["socEnabled"] = args?.socEnabled;
            resourceInputs["spotInstancePools"] = args?.spotInstancePools;
            resourceInputs["spotInstanceRemedy"] = args?.spotInstanceRemedy;
            resourceInputs["spotPriceLimits"] = args?.spotPriceLimits;
            resourceInputs["spotStrategy"] = args?.spotStrategy;
            resourceInputs["systemDiskBurstingEnabled"] = args?.systemDiskBurstingEnabled;
            resourceInputs["systemDiskCategories"] = args?.systemDiskCategories;
            resourceInputs["systemDiskCategory"] = args?.systemDiskCategory;
            resourceInputs["systemDiskEncryptAlgorithm"] = args?.systemDiskEncryptAlgorithm;
            resourceInputs["systemDiskEncrypted"] = args?.systemDiskEncrypted;
            resourceInputs["systemDiskKmsKey"] = args?.systemDiskKmsKey;
            resourceInputs["systemDiskPerformanceLevel"] = args?.systemDiskPerformanceLevel;
            resourceInputs["systemDiskProvisionedIops"] = args?.systemDiskProvisionedIops;
            resourceInputs["systemDiskSize"] = args?.systemDiskSize;
            resourceInputs["systemDiskSnapshotPolicyId"] = args?.systemDiskSnapshotPolicyId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["taints"] = args?.taints;
            resourceInputs["teeConfig"] = args?.teeConfig;
            resourceInputs["type"] = args?.type;
            resourceInputs["unschedulable"] = args?.unschedulable;
            resourceInputs["updateNodes"] = args?.updateNodes;
            resourceInputs["userData"] = args?.userData;
            resourceInputs["vswitchIds"] = args?.vswitchIds;
            resourceInputs["nodePoolId"] = undefined /*out*/;
            resourceInputs["scalingGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kmsEncryptedPassword", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodePool resources.
 */
export interface NodePoolState {
    /**
     * Whether to enable automatic renewal for nodes in the node pool takes effect only when `instanceChargeType` is set to `PrePaid`. Default value: `false`. Valid values:
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
     */
    autoRenewPeriod?: pulumi.Input<number>;
    /**
     * Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `securityHardeningOs` instead.
     *
     * @deprecated Field 'cis_enabled' has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `securityHardeningOs` instead.
     */
    cisEnabled?: pulumi.Input<boolean>;
    /**
     * The id of kubernetes cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multiAzPolicy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
     */
    compensateWithOnDemand?: pulumi.Input<boolean>;
    /**
     * Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
     */
    cpuPolicy?: pulumi.Input<string>;
    /**
     * Configure the data disk of the node in the node pool. See `dataDisks` below.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolDataDisk>[]>;
    /**
     * The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     */
    deploymentSetId?: pulumi.Input<string>;
    /**
     * Number of expected nodes in the node pool.
     */
    desiredSize?: pulumi.Input<string>;
    /**
     * Lingjun node pool configuration. See `efloNodeGroup` below.
     */
    efloNodeGroup?: pulumi.Input<inputs.cs.NodePoolEfloNodeGroup>;
    /**
     * Whether to force deletion.
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     */
    formatDisk?: pulumi.Input<boolean>;
    /**
     * The custom image ID. The system-provided image is used by default.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The operating system image type and the `platform` parameter can be selected from the following values:
     * - `AliyunLinux` : Alinux2 image.
     * - `AliyunLinux3` : Alinux3 image.
     * - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
     * - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
     * - `CentOS` : CentOS image.
     * - `Windows` : Windows image.
     * - `WindowsCore` : WindowsCore image.
     * - `ContainerOS` : container-optimized image.
     * - `Ubuntu`: Ubuntu image.
     * - `AliyunLinux3ContainerOptimized`: Alinux3 container-optimized image.
     */
    imageType?: pulumi.Input<string>;
    /**
     * Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
     */
    installCloudMonitor?: pulumi.Input<boolean>;
    /**
     * Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
     */
    instanceChargeType?: pulumi.Input<string>;
    /**
     * In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
     */
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance list. Add existing nodes under the same cluster VPC to the node pool.
     */
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one.
     */
    internetChargeType?: pulumi.Input<string>;
    /**
     * The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\]
     */
    internetMaxBandwidthOut?: pulumi.Input<number>;
    /**
     * Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     */
    keepInstanceName?: pulumi.Input<boolean>;
    /**
     * The name of the key pair. When the node pool is a managed node pool, only `keyName` is supported.
     */
    keyName?: pulumi.Input<string>;
    /**
     * An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
     */
    kmsEncryptedPassword?: pulumi.Input<string>;
    /**
     * An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a cs kubernetes with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
     */
    kmsEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Kubelet configuration parameters for worker nodes. See `kubeletConfiguration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubeletConfiguration` below.
     */
    kubeletConfiguration?: pulumi.Input<inputs.cs.NodePoolKubeletConfiguration>;
    /**
     * A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolLabel>[]>;
    /**
     * Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
     */
    loginAsNonRoot?: pulumi.Input<boolean>;
    /**
     * Managed node pool configuration. See `management` below.
     */
    management?: pulumi.Input<inputs.cs.NodePoolManagement>;
    /**
     * The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
     */
    multiAzPolicy?: pulumi.Input<string>;
    /**
     * . Field 'name' has been deprecated from provider version 1.219.0. New field 'node_pool_name' instead.
     *
     * @deprecated Field 'name' has been deprecated since provider version 1.219.0. New field 'node_pool_name' instead.
     */
    name?: pulumi.Input<string>;
    /**
     * The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
     *
     * @deprecated Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
     * - The prefix and suffix can be composed of one or more parts separated by '.', each part can use lowercase letters, numbers and '-', and the beginning and end of the node name must be lowercase letters and numbers.
     * - The node IP address is the complete private IP address of the node.
     * - For example, if the string `customized,aliyun,ip,com` is passed in (where 'customized' and 'ip' are fixed strings, 'aliyun' is the prefix, and 'com' is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
     */
    nodeNameMode?: pulumi.Input<string>;
    /**
     * The first ID of the resource.
     */
    nodePoolId?: pulumi.Input<string>;
    /**
     * The name of node pool.
     */
    nodePoolName?: pulumi.Input<string>;
    /**
     * The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
     */
    onDemandBaseCapacity?: pulumi.Input<string>;
    /**
     * The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `onDemandBaseCapacity`. Valid values: 0 to 100.
     */
    onDemandPercentageAboveBaseCapacity?: pulumi.Input<string>;
    /**
     * The password of ssh login. You have to specify one of `password` and `keyName` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
     */
    password?: pulumi.Input<string>;
    /**
     * Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
     */
    period?: pulumi.Input<number>;
    /**
     * Node payment period unit, valid value: `Month`. Default is `Month`.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Operating system release, using `imageType` instead.
     *
     * @deprecated Field 'platform' has been deprecated from provider version 1.145.0. Operating system release, using `imageType` instead.
     */
    platform?: pulumi.Input<string>;
    /**
     * Node pre custom data, base64-encoded, the script executed before the node is initialized.
     */
    preUserData?: pulumi.Input<string>;
    /**
     * Private node pool configuration. See `privatePoolOptions` below.
     */
    privatePoolOptions?: pulumi.Input<inputs.cs.NodePoolPrivatePoolOptions>;
    /**
     * The name of the Worker RAM role.
     * * If it is empty, the default Worker RAM role created in the cluster will be used.
     * * If the specified RAM role is not empty, the specified RAM role must be a **Common Service role**, and its **trusted service** configuration must be **cloud server**. For more information, see [Create a common service role](https://help.aliyun.com/document_detail/116800.html). If the specified RAM role is not the default Worker RAM role created in the cluster, the role name cannot start with 'KubernetesMasterRole-'or 'KubernetesWorkerRole.
     *
     * > **NOTE:**  This parameter is only supported for ACK-managed clusters of 1.22 or later versions.
     */
    ramRoleName?: pulumi.Input<string>;
    /**
     * The list of RDS instances.
     */
    rdsInstances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the resource group
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Rotary configuration. See `rollingPolicy` below.
     */
    rollingPolicy?: pulumi.Input<inputs.cs.NodePoolRollingPolicy>;
    /**
     * The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     */
    runtimeName?: pulumi.Input<string>;
    /**
     * The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * Automatic scaling configuration. See `scalingConfig` below.
     */
    scalingConfig?: pulumi.Input<inputs.cs.NodePoolScalingConfig>;
    /**
     * The ID of the scaling group.
     */
    scalingGroupId?: pulumi.Input<string>;
    /**
     * Scaling group mode, default value: `release`. Valid values:
     */
    scalingPolicy?: pulumi.Input<string>;
    /**
     * The security group ID of the node pool. This field has been replaced by `securityGroupIds`, please use the `securityGroupIds` field instead.
     *
     * @deprecated Field 'security_group_id' has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `securityGroupIds`, please use the `securityGroupIds` field instead.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
     */
    securityHardeningOs?: pulumi.Input<boolean>;
    /**
     * Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
     *
     * > **NOTE:**  It is forbidden to set both `securityHardeningOs` and `socEnabled` to `true` at the same time.
     */
    socEnabled?: pulumi.Input<boolean>;
    /**
     * The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
     */
    spotInstancePools?: pulumi.Input<number>;
    /**
     * Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
     */
    spotInstanceRemedy?: pulumi.Input<boolean>;
    /**
     * The current single preemptible instance type market price range configuration. See `spotPriceLimit` below.
     */
    spotPriceLimits?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolSpotPriceLimit>[]>;
    /**
     * The preemptible instance type. Value:
     * - `NoSpot` : Non-preemptible instance.
     * - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
     * - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
     */
    spotStrategy?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `systemDiskCategory` is set to `cloudAuto`.
     */
    systemDiskBurstingEnabled?: pulumi.Input<boolean>;
    /**
     * The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values see `systemDiskCategory`.
     */
    systemDiskCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The category of the system disk for nodes. Default value: `cloudEfficiency`. Valid values:
     */
    systemDiskCategory?: pulumi.Input<string>;
    /**
     * The encryption algorithm used by the system disk. Value range: aes-256.
     */
    systemDiskEncryptAlgorithm?: pulumi.Input<string>;
    /**
     * Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
     */
    systemDiskEncrypted?: pulumi.Input<boolean>;
    /**
     * The ID of the KMS key used by the system disk.
     */
    systemDiskKmsKey?: pulumi.Input<string>;
    /**
     * The system disk performance of the node takes effect only for the ESSD disk.
     * - `PL0`: maximum random read/write IOPS 10000 for a single disk.
     * - `PL1`: maximum random read/write IOPS 50000 for a single disk.
     * - `PL2`: highest random read/write IOPS 100000 for a single disk.
     * - `PL3`: maximum random read/write IOPS 1 million for a single disk.
     */
    systemDiskPerformanceLevel?: pulumi.Input<string>;
    /**
     * The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `systemDiskCategory` is set to `cloudAuto`.
     */
    systemDiskProvisionedIops?: pulumi.Input<number>;
    /**
     * The size of the system disk. Unit: GiB. The value of this parameter must be at least 1 and greater than or equal to the image size. Default value: 40 or the size of the image, whichever is larger.
     * - Basic disk: 20 to 500.
     * - ESSD (cloud_essd): The valid values vary based on the performance level of the ESSD. PL0 ESSD: 1 to 2048. PL1 ESSD: 20 to 2048. PL2 ESSD: 461 to 2048. PL3 ESSD: 1261 to 2048.
     * - ESSD AutoPL disk (cloud_auto): 1 to 2048.
     * - Other disk categories: 20 to 2048.
     */
    systemDiskSize?: pulumi.Input<number>;
    /**
     * The ID of the automatic snapshot policy used by the system disk.
     */
    systemDiskSnapshotPolicyId?: pulumi.Input<string>;
    /**
     * Add tags only for ECS instances. The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolTaint>[]>;
    /**
     * The configuration about confidential computing for the cluster. See `teeConfig` below.
     */
    teeConfig?: pulumi.Input<inputs.cs.NodePoolTeeConfig>;
    /**
     * Node pool type, value range:
     * -'ess': common node pool (including hosting function and auto scaling function).
     * -'lingjun': Lingjun node pool.
     */
    type?: pulumi.Input<string>;
    /**
     * Whether the node after expansion can be scheduled.
     */
    unschedulable?: pulumi.Input<boolean>;
    /**
     * Synchronously update node labels and taints.
     */
    updateNodes?: pulumi.Input<boolean>;
    /**
     * Node custom data, base64-encoded.
     */
    userData?: pulumi.Input<string>;
    /**
     * The vswitches used by node pool workers.
     */
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a NodePool resource.
 */
export interface NodePoolArgs {
    /**
     * Whether to enable automatic renewal for nodes in the node pool takes effect only when `instanceChargeType` is set to `PrePaid`. Default value: `false`. Valid values:
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
     */
    autoRenewPeriod?: pulumi.Input<number>;
    /**
     * Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `securityHardeningOs` instead.
     *
     * @deprecated Field 'cis_enabled' has been deprecated from provider version 1.223.1. Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `securityHardeningOs` instead.
     */
    cisEnabled?: pulumi.Input<boolean>;
    /**
     * The id of kubernetes cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multiAzPolicy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
     */
    compensateWithOnDemand?: pulumi.Input<boolean>;
    /**
     * Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
     */
    cpuPolicy?: pulumi.Input<string>;
    /**
     * Configure the data disk of the node in the node pool. See `dataDisks` below.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolDataDisk>[]>;
    /**
     * The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
     */
    deploymentSetId?: pulumi.Input<string>;
    /**
     * Number of expected nodes in the node pool.
     */
    desiredSize?: pulumi.Input<string>;
    /**
     * Lingjun node pool configuration. See `efloNodeGroup` below.
     */
    efloNodeGroup?: pulumi.Input<inputs.cs.NodePoolEfloNodeGroup>;
    /**
     * Whether to force deletion.
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
     */
    formatDisk?: pulumi.Input<boolean>;
    /**
     * The custom image ID. The system-provided image is used by default.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The operating system image type and the `platform` parameter can be selected from the following values:
     * - `AliyunLinux` : Alinux2 image.
     * - `AliyunLinux3` : Alinux3 image.
     * - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
     * - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
     * - `CentOS` : CentOS image.
     * - `Windows` : Windows image.
     * - `WindowsCore` : WindowsCore image.
     * - `ContainerOS` : container-optimized image.
     * - `Ubuntu`: Ubuntu image.
     * - `AliyunLinux3ContainerOptimized`: Alinux3 container-optimized image.
     */
    imageType?: pulumi.Input<string>;
    /**
     * Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
     */
    installCloudMonitor?: pulumi.Input<boolean>;
    /**
     * Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `periodUnit`, `autoRenew` and `autoRenewPeriod` are required.
     */
    instanceChargeType?: pulumi.Input<string>;
    /**
     * In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
     */
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance list. Add existing nodes under the same cluster VPC to the node pool.
     */
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eipInternetChargeType`, EIP and public network IP can only choose one.
     */
    internetChargeType?: pulumi.Input<string>;
    /**
     * The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\]
     */
    internetMaxBandwidthOut?: pulumi.Input<number>;
    /**
     * Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
     */
    keepInstanceName?: pulumi.Input<boolean>;
    /**
     * The name of the key pair. When the node pool is a managed node pool, only `keyName` is supported.
     */
    keyName?: pulumi.Input<string>;
    /**
     * An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `keyName` `kmsEncryptedPassword` fields.
     */
    kmsEncryptedPassword?: pulumi.Input<string>;
    /**
     * An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a cs kubernetes with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
     */
    kmsEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Kubelet configuration parameters for worker nodes. See `kubeletConfiguration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubeletConfiguration` below.
     */
    kubeletConfiguration?: pulumi.Input<inputs.cs.NodePoolKubeletConfiguration>;
    /**
     * A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolLabel>[]>;
    /**
     * Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
     */
    loginAsNonRoot?: pulumi.Input<boolean>;
    /**
     * Managed node pool configuration. See `management` below.
     */
    management?: pulumi.Input<inputs.cs.NodePoolManagement>;
    /**
     * The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
     */
    multiAzPolicy?: pulumi.Input<string>;
    /**
     * . Field 'name' has been deprecated from provider version 1.219.0. New field 'node_pool_name' instead.
     *
     * @deprecated Field 'name' has been deprecated since provider version 1.219.0. New field 'node_pool_name' instead.
     */
    name?: pulumi.Input<string>;
    /**
     * The worker node number of the node pool. From version 1.111.0, `nodeCount` is not required.
     *
     * @deprecated Field 'node_count' has been deprecated from provider version 1.158.0. New field 'desired_size' instead.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
     * - The prefix and suffix can be composed of one or more parts separated by '.', each part can use lowercase letters, numbers and '-', and the beginning and end of the node name must be lowercase letters and numbers.
     * - The node IP address is the complete private IP address of the node.
     * - For example, if the string `customized,aliyun,ip,com` is passed in (where 'customized' and 'ip' are fixed strings, 'aliyun' is the prefix, and 'com' is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
     */
    nodeNameMode?: pulumi.Input<string>;
    /**
     * The name of node pool.
     */
    nodePoolName?: pulumi.Input<string>;
    /**
     * The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
     */
    onDemandBaseCapacity?: pulumi.Input<string>;
    /**
     * The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `onDemandBaseCapacity`. Valid values: 0 to 100.
     */
    onDemandPercentageAboveBaseCapacity?: pulumi.Input<string>;
    /**
     * The password of ssh login. You have to specify one of `password` and `keyName` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
     */
    password?: pulumi.Input<string>;
    /**
     * Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
     */
    period?: pulumi.Input<number>;
    /**
     * Node payment period unit, valid value: `Month`. Default is `Month`.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Operating system release, using `imageType` instead.
     *
     * @deprecated Field 'platform' has been deprecated from provider version 1.145.0. Operating system release, using `imageType` instead.
     */
    platform?: pulumi.Input<string>;
    /**
     * Node pre custom data, base64-encoded, the script executed before the node is initialized.
     */
    preUserData?: pulumi.Input<string>;
    /**
     * Private node pool configuration. See `privatePoolOptions` below.
     */
    privatePoolOptions?: pulumi.Input<inputs.cs.NodePoolPrivatePoolOptions>;
    /**
     * The name of the Worker RAM role.
     * * If it is empty, the default Worker RAM role created in the cluster will be used.
     * * If the specified RAM role is not empty, the specified RAM role must be a **Common Service role**, and its **trusted service** configuration must be **cloud server**. For more information, see [Create a common service role](https://help.aliyun.com/document_detail/116800.html). If the specified RAM role is not the default Worker RAM role created in the cluster, the role name cannot start with 'KubernetesMasterRole-'or 'KubernetesWorkerRole.
     *
     * > **NOTE:**  This parameter is only supported for ACK-managed clusters of 1.22 or later versions.
     */
    ramRoleName?: pulumi.Input<string>;
    /**
     * The list of RDS instances.
     */
    rdsInstances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the resource group
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Rotary configuration. See `rollingPolicy` below.
     */
    rollingPolicy?: pulumi.Input<inputs.cs.NodePoolRollingPolicy>;
    /**
     * The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
     */
    runtimeName?: pulumi.Input<string>;
    /**
     * The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * Automatic scaling configuration. See `scalingConfig` below.
     */
    scalingConfig?: pulumi.Input<inputs.cs.NodePoolScalingConfig>;
    /**
     * Scaling group mode, default value: `release`. Valid values:
     */
    scalingPolicy?: pulumi.Input<string>;
    /**
     * The security group ID of the node pool. This field has been replaced by `securityGroupIds`, please use the `securityGroupIds` field instead.
     *
     * @deprecated Field 'security_group_id' has been deprecated from provider version 1.145.0. The security group ID of the node pool. This field has been replaced by `securityGroupIds`, please use the `securityGroupIds` field instead.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Multiple security groups can be configured for a node pool. If both `securityGroupIds` and `securityGroupId` are configured, `securityGroupIds` takes effect. This field cannot be modified.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
     */
    securityHardeningOs?: pulumi.Input<boolean>;
    /**
     * Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
     *
     * > **NOTE:**  It is forbidden to set both `securityHardeningOs` and `socEnabled` to `true` at the same time.
     */
    socEnabled?: pulumi.Input<boolean>;
    /**
     * The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
     */
    spotInstancePools?: pulumi.Input<number>;
    /**
     * Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
     */
    spotInstanceRemedy?: pulumi.Input<boolean>;
    /**
     * The current single preemptible instance type market price range configuration. See `spotPriceLimit` below.
     */
    spotPriceLimits?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolSpotPriceLimit>[]>;
    /**
     * The preemptible instance type. Value:
     * - `NoSpot` : Non-preemptible instance.
     * - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
     * - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
     */
    spotStrategy?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `systemDiskCategory` is set to `cloudAuto`.
     */
    systemDiskBurstingEnabled?: pulumi.Input<boolean>;
    /**
     * The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values see `systemDiskCategory`.
     */
    systemDiskCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The category of the system disk for nodes. Default value: `cloudEfficiency`. Valid values:
     */
    systemDiskCategory?: pulumi.Input<string>;
    /**
     * The encryption algorithm used by the system disk. Value range: aes-256.
     */
    systemDiskEncryptAlgorithm?: pulumi.Input<string>;
    /**
     * Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
     */
    systemDiskEncrypted?: pulumi.Input<boolean>;
    /**
     * The ID of the KMS key used by the system disk.
     */
    systemDiskKmsKey?: pulumi.Input<string>;
    /**
     * The system disk performance of the node takes effect only for the ESSD disk.
     * - `PL0`: maximum random read/write IOPS 10000 for a single disk.
     * - `PL1`: maximum random read/write IOPS 50000 for a single disk.
     * - `PL2`: highest random read/write IOPS 100000 for a single disk.
     * - `PL3`: maximum random read/write IOPS 1 million for a single disk.
     */
    systemDiskPerformanceLevel?: pulumi.Input<string>;
    /**
     * The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `systemDiskCategory` is set to `cloudAuto`.
     */
    systemDiskProvisionedIops?: pulumi.Input<number>;
    /**
     * The size of the system disk. Unit: GiB. The value of this parameter must be at least 1 and greater than or equal to the image size. Default value: 40 or the size of the image, whichever is larger.
     * - Basic disk: 20 to 500.
     * - ESSD (cloud_essd): The valid values vary based on the performance level of the ESSD. PL0 ESSD: 1 to 2048. PL1 ESSD: 20 to 2048. PL2 ESSD: 461 to 2048. PL3 ESSD: 1261 to 2048.
     * - ESSD AutoPL disk (cloud_auto): 1 to 2048.
     * - Other disk categories: 20 to 2048.
     */
    systemDiskSize?: pulumi.Input<number>;
    /**
     * The ID of the automatic snapshot policy used by the system disk.
     */
    systemDiskSnapshotPolicyId?: pulumi.Input<string>;
    /**
     * Add tags only for ECS instances. The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.cs.NodePoolTaint>[]>;
    /**
     * The configuration about confidential computing for the cluster. See `teeConfig` below.
     */
    teeConfig?: pulumi.Input<inputs.cs.NodePoolTeeConfig>;
    /**
     * Node pool type, value range:
     * -'ess': common node pool (including hosting function and auto scaling function).
     * -'lingjun': Lingjun node pool.
     */
    type?: pulumi.Input<string>;
    /**
     * Whether the node after expansion can be scheduled.
     */
    unschedulable?: pulumi.Input<boolean>;
    /**
     * Synchronously update node labels and taints.
     */
    updateNodes?: pulumi.Input<boolean>;
    /**
     * Node custom data, base64-encoded.
     */
    userData?: pulumi.Input<string>;
    /**
     * The vswitches used by node pool workers.
     */
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
}
