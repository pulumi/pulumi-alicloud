// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cs/application:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    declare public readonly blueGreen: pulumi.Output<boolean | undefined>;
    declare public readonly blueGreenConfirm: pulumi.Output<boolean | undefined>;
    declare public readonly clusterName: pulumi.Output<string>;
    declare public /*out*/ readonly defaultDomain: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly environment: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly latestImage: pulumi.Output<boolean | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly services: pulumi.Output<outputs.cs.ApplicationService[]>;
    declare public readonly template: pulumi.Output<string>;
    declare public readonly version: pulumi.Output<string | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationArgs | ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationState | undefined;
            resourceInputs["blueGreen"] = state?.blueGreen;
            resourceInputs["blueGreenConfirm"] = state?.blueGreenConfirm;
            resourceInputs["clusterName"] = state?.clusterName;
            resourceInputs["defaultDomain"] = state?.defaultDomain;
            resourceInputs["description"] = state?.description;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["latestImage"] = state?.latestImage;
            resourceInputs["name"] = state?.name;
            resourceInputs["services"] = state?.services;
            resourceInputs["template"] = state?.template;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as ApplicationArgs | undefined;
            if (args?.clusterName === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if (args?.template === undefined && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["blueGreen"] = args?.blueGreen;
            resourceInputs["blueGreenConfirm"] = args?.blueGreenConfirm;
            resourceInputs["clusterName"] = args?.clusterName;
            resourceInputs["description"] = args?.description;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["latestImage"] = args?.latestImage;
            resourceInputs["name"] = args?.name;
            resourceInputs["template"] = args?.template;
            resourceInputs["version"] = args?.version;
            resourceInputs["defaultDomain"] = undefined /*out*/;
            resourceInputs["services"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    blueGreen?: pulumi.Input<boolean>;
    blueGreenConfirm?: pulumi.Input<boolean>;
    clusterName?: pulumi.Input<string>;
    defaultDomain?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    latestImage?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.cs.ApplicationService>[]>;
    template?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    blueGreen?: pulumi.Input<boolean>;
    blueGreenConfirm?: pulumi.Input<boolean>;
    clusterName: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    latestImage?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    template: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
