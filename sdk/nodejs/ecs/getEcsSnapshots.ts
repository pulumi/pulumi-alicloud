// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the Ecs Snapshots of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.120.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.resourcemanager.getResourceGroups({
 *     status: "OK",
 * });
 * const defaultGetZones = alicloud.getZones({
 *     availableDiskCategory: "cloud_essd",
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultGetImages = alicloud.ecs.getImages({
 *     mostRecent: true,
 *     owners: "system",
 * });
 * const defaultGetInstanceTypes = Promise.all([defaultGetZones, defaultGetImages]).then(([defaultGetZones, defaultGetImages]) => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: defaultGetZones.zones?.[0]?.id,
 *     imageId: defaultGetImages.images?.[0]?.id,
 *     systemDiskCategory: "cloud_essd",
 * }));
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "192.168.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "192.168.192.0/24",
 *     zoneId: defaultGetZones.then(defaultGetZones => defaultGetZones.zones?.[0]?.id),
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {
 *     name: name,
 *     vpcId: defaultNetwork.id,
 * });
 * const defaultInstance = new alicloud.ecs.Instance("default", {
 *     imageId: defaultGetImages.then(defaultGetImages => defaultGetImages.images?.[0]?.id),
 *     instanceType: defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.id),
 *     securityGroups: [defaultSecurityGroup].map(__item => __item.id),
 *     internetChargeType: "PayByTraffic",
 *     internetMaxBandwidthOut: 10,
 *     availabilityZone: defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.availabilityZones?.[0]),
 *     instanceChargeType: "PostPaid",
 *     systemDiskCategory: "cloud_essd",
 *     vswitchId: defaultSwitch.id,
 *     instanceName: name,
 *     dataDisks: [{
 *         category: "cloud_essd",
 *         size: 20,
 *     }],
 * });
 * const defaultEcsDisk = new alicloud.ecs.EcsDisk("default", {
 *     diskName: name,
 *     zoneId: defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.availabilityZones?.[0]),
 *     category: "cloud_essd",
 *     size: 500,
 * });
 * const defaultEcsDiskAttachment = new alicloud.ecs.EcsDiskAttachment("default", {
 *     diskId: defaultEcsDisk.id,
 *     instanceId: defaultInstance.id,
 * });
 * const defaultEcsSnapshot = new alicloud.ecs.EcsSnapshot("default", {
 *     diskId: defaultEcsDiskAttachment.diskId,
 *     category: "standard",
 *     retentionDays: 20,
 *     snapshotName: name,
 *     description: name,
 *     tags: {
 *         Created: "TF",
 *         For: "Snapshot",
 *     },
 * });
 * const ids = alicloud.ecs.getEcsSnapshotsOutput({
 *     ids: [defaultEcsSnapshot.id],
 * });
 * export const ecsSnapshotsId0 = ids.apply(ids => ids.snapshots?.[0]?.id);
 * ```
 */
export function getEcsSnapshots(args?: GetEcsSnapshotsArgs, opts?: pulumi.InvokeOptions): Promise<GetEcsSnapshotsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:ecs/getEcsSnapshots:getEcsSnapshots", {
        "category": args.category,
        "dryRun": args.dryRun,
        "encrypted": args.encrypted,
        "ids": args.ids,
        "kmsKeyId": args.kmsKeyId,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "resourceGroupId": args.resourceGroupId,
        "snapshotLinkId": args.snapshotLinkId,
        "snapshotName": args.snapshotName,
        "snapshotType": args.snapshotType,
        "sourceDiskType": args.sourceDiskType,
        "status": args.status,
        "tags": args.tags,
        "type": args.type,
        "usage": args.usage,
    }, opts);
}

/**
 * A collection of arguments for invoking getEcsSnapshots.
 */
export interface GetEcsSnapshotsArgs {
    /**
     * The category of the snapshot. Valid Values: `flash` and `standard`.
     */
    category?: string;
    /**
     * Specifies whether to check the validity of the request without actually making the request.
     */
    dryRun?: boolean;
    /**
     * Specifies whether the snapshot is encrypted.
     */
    encrypted?: boolean;
    /**
     * A list of Snapshot IDs.
     */
    ids?: string[];
    /**
     * The kms key id.
     */
    kmsKeyId?: string;
    /**
     * A regex string to filter results by Snapshot name.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: string;
    /**
     * The resource group id.
     */
    resourceGroupId?: string;
    /**
     * The snapshot link id.
     */
    snapshotLinkId?: string;
    /**
     * The name of the snapshot.
     */
    snapshotName?: string;
    /**
     * The type of the snapshot. Valid Values: `auto`, `user` and `all`. Default to: `all`.
     */
    snapshotType?: string;
    /**
     * The type of the disk for which the snapshot was created. Valid Values: `System`, `Data`.
     */
    sourceDiskType?: string;
    /**
     * The status of the snapshot. Valid Values: `accomplished`, `failed`, `progressing` and `all`.
     */
    status?: string;
    /**
     * A mapping of tags to assign to the snapshot.
     */
    tags?: {[key: string]: string};
    /**
     * The type of the snapshot. Valid Values: `auto`, `user` and `all`. Default to: `all`.
     */
    type?: string;
    /**
     * A resource type that has a reference relationship. Valid Values: `image`, `disk`, `imageDisk` and `none`.
     */
    usage?: string;
}

/**
 * A collection of values returned by getEcsSnapshots.
 */
export interface GetEcsSnapshotsResult {
    /**
     * The category of the snapshot.
     */
    readonly category?: string;
    readonly dryRun?: boolean;
    /**
     * Indicates whether the snapshot was encrypted.
     */
    readonly encrypted?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly kmsKeyId?: string;
    readonly nameRegex?: string;
    /**
     * A list of Snapshot names.
     */
    readonly names: string[];
    readonly outputFile?: string;
    /**
     * The ID of the resource group to which the snapshot belongs.
     */
    readonly resourceGroupId?: string;
    readonly snapshotLinkId?: string;
    /**
     * The name of the snapshot.
     */
    readonly snapshotName?: string;
    /**
     * The type of the snapshot.
     */
    readonly snapshotType?: string;
    /**
     * A list of Ecs Snapshots. Each element contains the following attributes:
     */
    readonly snapshots: outputs.ecs.GetEcsSnapshotsSnapshot[];
    /**
     * The type of the source disk.
     */
    readonly sourceDiskType?: string;
    /**
     * The status of the snapshot.
     */
    readonly status?: string;
    /**
     * The tags of the snapshot.
     */
    readonly tags?: {[key: string]: string};
    /**
     * The type of the snapshot.
     */
    readonly type?: string;
    /**
     * Indicates whether the snapshot was used to create images or cloud disks.
     */
    readonly usage?: string;
}
/**
 * This data source provides the Ecs Snapshots of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.120.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.resourcemanager.getResourceGroups({
 *     status: "OK",
 * });
 * const defaultGetZones = alicloud.getZones({
 *     availableDiskCategory: "cloud_essd",
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultGetImages = alicloud.ecs.getImages({
 *     mostRecent: true,
 *     owners: "system",
 * });
 * const defaultGetInstanceTypes = Promise.all([defaultGetZones, defaultGetImages]).then(([defaultGetZones, defaultGetImages]) => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: defaultGetZones.zones?.[0]?.id,
 *     imageId: defaultGetImages.images?.[0]?.id,
 *     systemDiskCategory: "cloud_essd",
 * }));
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "192.168.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "192.168.192.0/24",
 *     zoneId: defaultGetZones.then(defaultGetZones => defaultGetZones.zones?.[0]?.id),
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {
 *     name: name,
 *     vpcId: defaultNetwork.id,
 * });
 * const defaultInstance = new alicloud.ecs.Instance("default", {
 *     imageId: defaultGetImages.then(defaultGetImages => defaultGetImages.images?.[0]?.id),
 *     instanceType: defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.id),
 *     securityGroups: [defaultSecurityGroup].map(__item => __item.id),
 *     internetChargeType: "PayByTraffic",
 *     internetMaxBandwidthOut: 10,
 *     availabilityZone: defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.availabilityZones?.[0]),
 *     instanceChargeType: "PostPaid",
 *     systemDiskCategory: "cloud_essd",
 *     vswitchId: defaultSwitch.id,
 *     instanceName: name,
 *     dataDisks: [{
 *         category: "cloud_essd",
 *         size: 20,
 *     }],
 * });
 * const defaultEcsDisk = new alicloud.ecs.EcsDisk("default", {
 *     diskName: name,
 *     zoneId: defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.availabilityZones?.[0]),
 *     category: "cloud_essd",
 *     size: 500,
 * });
 * const defaultEcsDiskAttachment = new alicloud.ecs.EcsDiskAttachment("default", {
 *     diskId: defaultEcsDisk.id,
 *     instanceId: defaultInstance.id,
 * });
 * const defaultEcsSnapshot = new alicloud.ecs.EcsSnapshot("default", {
 *     diskId: defaultEcsDiskAttachment.diskId,
 *     category: "standard",
 *     retentionDays: 20,
 *     snapshotName: name,
 *     description: name,
 *     tags: {
 *         Created: "TF",
 *         For: "Snapshot",
 *     },
 * });
 * const ids = alicloud.ecs.getEcsSnapshotsOutput({
 *     ids: [defaultEcsSnapshot.id],
 * });
 * export const ecsSnapshotsId0 = ids.apply(ids => ids.snapshots?.[0]?.id);
 * ```
 */
export function getEcsSnapshotsOutput(args?: GetEcsSnapshotsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetEcsSnapshotsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("alicloud:ecs/getEcsSnapshots:getEcsSnapshots", {
        "category": args.category,
        "dryRun": args.dryRun,
        "encrypted": args.encrypted,
        "ids": args.ids,
        "kmsKeyId": args.kmsKeyId,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "resourceGroupId": args.resourceGroupId,
        "snapshotLinkId": args.snapshotLinkId,
        "snapshotName": args.snapshotName,
        "snapshotType": args.snapshotType,
        "sourceDiskType": args.sourceDiskType,
        "status": args.status,
        "tags": args.tags,
        "type": args.type,
        "usage": args.usage,
    }, opts);
}

/**
 * A collection of arguments for invoking getEcsSnapshots.
 */
export interface GetEcsSnapshotsOutputArgs {
    /**
     * The category of the snapshot. Valid Values: `flash` and `standard`.
     */
    category?: pulumi.Input<string>;
    /**
     * Specifies whether to check the validity of the request without actually making the request.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Specifies whether the snapshot is encrypted.
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * A list of Snapshot IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The kms key id.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * A regex string to filter results by Snapshot name.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The resource group id.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The snapshot link id.
     */
    snapshotLinkId?: pulumi.Input<string>;
    /**
     * The name of the snapshot.
     */
    snapshotName?: pulumi.Input<string>;
    /**
     * The type of the snapshot. Valid Values: `auto`, `user` and `all`. Default to: `all`.
     */
    snapshotType?: pulumi.Input<string>;
    /**
     * The type of the disk for which the snapshot was created. Valid Values: `System`, `Data`.
     */
    sourceDiskType?: pulumi.Input<string>;
    /**
     * The status of the snapshot. Valid Values: `accomplished`, `failed`, `progressing` and `all`.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the snapshot.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of the snapshot. Valid Values: `auto`, `user` and `all`. Default to: `all`.
     */
    type?: pulumi.Input<string>;
    /**
     * A resource type that has a reference relationship. Valid Values: `image`, `disk`, `imageDisk` and `none`.
     */
    usage?: pulumi.Input<string>;
}
