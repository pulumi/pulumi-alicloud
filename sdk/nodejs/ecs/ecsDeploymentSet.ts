// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ECS Deployment Set resource.
 *
 * For information about ECS Deployment Set and how to use it, see [What is Deployment Set](https://www.alibabacloud.com/help/en/doc-detail/91269.htm).
 *
 * > **NOTE:** Available since v1.140.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new alicloud.ecs.EcsDeploymentSet("default", {
 *     strategy: "Availability",
 *     deploymentSetName: name,
 *     description: name,
 * });
 * ```
 *
 * ## Import
 *
 * ECS Deployment Set can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ecs/ecsDeploymentSet:EcsDeploymentSet example <id>
 * ```
 */
export class EcsDeploymentSet extends pulumi.CustomResource {
    /**
     * Get an existing EcsDeploymentSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsDeploymentSetState, opts?: pulumi.CustomResourceOptions): EcsDeploymentSet {
        return new EcsDeploymentSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ecs/ecsDeploymentSet:EcsDeploymentSet';

    /**
     * Returns true if the given object is an instance of EcsDeploymentSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsDeploymentSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsDeploymentSet.__pulumiType;
    }

    /**
     * The name of the deployment set. The name must be `2` to `128` characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
     */
    public readonly deploymentSetName!: pulumi.Output<string | undefined>;
    /**
     * The description of the deployment set. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Field `domain` has been deprecated from provider version 1.243.0.
     *
     * @deprecated Field `domain` has been deprecated from provider version 1.243.0.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Field `granularity` has been deprecated from provider version 1.243.0.
     *
     * @deprecated Field `granularity` has been deprecated from provider version 1.243.0.
     */
    public readonly granularity!: pulumi.Output<string>;
    /**
     * The emergency solution to use in the situation where instances in the deployment set cannot be evenly distributed to different zones due to resource insufficiency after the instances failover. Valid values:
     * - `CancelMembershipAndStart` - Removes the instances from the deployment set and starts the instances immediately after they are failed over.
     * - `KeepStopped`- Leaves the instances in the Stopped state and starts them after resources are replenished.
     */
    public readonly onUnableToRedeployFailedInstance!: pulumi.Output<string | undefined>;
    /**
     * The deployment strategy. Default value: `Availability`. Valid values: `Availability`, `AvailabilityGroup`, `LowLatency`.
     */
    public readonly strategy!: pulumi.Output<string>;

    /**
     * Create a EcsDeploymentSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EcsDeploymentSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsDeploymentSetArgs | EcsDeploymentSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsDeploymentSetState | undefined;
            resourceInputs["deploymentSetName"] = state ? state.deploymentSetName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["granularity"] = state ? state.granularity : undefined;
            resourceInputs["onUnableToRedeployFailedInstance"] = state ? state.onUnableToRedeployFailedInstance : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
        } else {
            const args = argsOrState as EcsDeploymentSetArgs | undefined;
            resourceInputs["deploymentSetName"] = args ? args.deploymentSetName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["granularity"] = args ? args.granularity : undefined;
            resourceInputs["onUnableToRedeployFailedInstance"] = args ? args.onUnableToRedeployFailedInstance : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsDeploymentSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EcsDeploymentSet resources.
 */
export interface EcsDeploymentSetState {
    /**
     * The name of the deployment set. The name must be `2` to `128` characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
     */
    deploymentSetName?: pulumi.Input<string>;
    /**
     * The description of the deployment set. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`.
     */
    description?: pulumi.Input<string>;
    /**
     * Field `domain` has been deprecated from provider version 1.243.0.
     *
     * @deprecated Field `domain` has been deprecated from provider version 1.243.0.
     */
    domain?: pulumi.Input<string>;
    /**
     * Field `granularity` has been deprecated from provider version 1.243.0.
     *
     * @deprecated Field `granularity` has been deprecated from provider version 1.243.0.
     */
    granularity?: pulumi.Input<string>;
    /**
     * The emergency solution to use in the situation where instances in the deployment set cannot be evenly distributed to different zones due to resource insufficiency after the instances failover. Valid values:
     * - `CancelMembershipAndStart` - Removes the instances from the deployment set and starts the instances immediately after they are failed over.
     * - `KeepStopped`- Leaves the instances in the Stopped state and starts them after resources are replenished.
     */
    onUnableToRedeployFailedInstance?: pulumi.Input<string>;
    /**
     * The deployment strategy. Default value: `Availability`. Valid values: `Availability`, `AvailabilityGroup`, `LowLatency`.
     */
    strategy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcsDeploymentSet resource.
 */
export interface EcsDeploymentSetArgs {
    /**
     * The name of the deployment set. The name must be `2` to `128` characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
     */
    deploymentSetName?: pulumi.Input<string>;
    /**
     * The description of the deployment set. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`.
     */
    description?: pulumi.Input<string>;
    /**
     * Field `domain` has been deprecated from provider version 1.243.0.
     *
     * @deprecated Field `domain` has been deprecated from provider version 1.243.0.
     */
    domain?: pulumi.Input<string>;
    /**
     * Field `granularity` has been deprecated from provider version 1.243.0.
     *
     * @deprecated Field `granularity` has been deprecated from provider version 1.243.0.
     */
    granularity?: pulumi.Input<string>;
    /**
     * The emergency solution to use in the situation where instances in the deployment set cannot be evenly distributed to different zones due to resource insufficiency after the instances failover. Valid values:
     * - `CancelMembershipAndStart` - Removes the instances from the deployment set and starts the instances immediately after they are failed over.
     * - `KeepStopped`- Leaves the instances in the Stopped state and starts them after resources are replenished.
     */
    onUnableToRedeployFailedInstance?: pulumi.Input<string>;
    /**
     * The deployment strategy. Default value: `Availability`. Valid values: `Availability`, `AvailabilityGroup`, `LowLatency`.
     */
    strategy?: pulumi.Input<string>;
}
