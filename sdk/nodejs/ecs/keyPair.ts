// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * > **DEPRECATED:** This resource has been renamed to alicloud.ecs.EcsKeyPair from version 1.121.0.
 *
 * Provides a key pair resource.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const basic = new alicloud.ecs.KeyPair("basic", {keyName: "terraform-test-key-pair"});
 * // Using name prefix to build key pair
 * const prefix = new alicloud.ecs.KeyPair("prefix", {keyNamePrefix: "terraform-test-key-pair-prefix"});
 * // Import an existing public key to build a alicloud key pair
 * const publickey = new alicloud.ecs.KeyPair("publickey", {
 *     keyName: "my_public_key",
 *     publicKey: "ssh-rsa AAAAB3Nza12345678qwertyuudsfsg",
 * });
 * ```
 *
 * ## Import
 *
 * Key pair can be imported using the name, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:ecs/keyPair:KeyPair example my_public_key
 * ```
 */
export class KeyPair extends pulumi.CustomResource {
    /**
     * Get an existing KeyPair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyPairState, opts?: pulumi.CustomResourceOptions): KeyPair {
        return new KeyPair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ecs/keyPair:KeyPair';

    /**
     * Returns true if the given object is an instance of KeyPair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyPair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyPair.__pulumiType;
    }

    public /*out*/ readonly fingerPrint!: pulumi.Output<string>;
    /**
     * The name of file to save your new key pair's private key. Strongly suggest you to specified it when you creating key pair, otherwise, you wouldn't get its private key ever.
     */
    public readonly keyFile!: pulumi.Output<string | undefined>;
    /**
     * The key pair's name. It is the only in one Alicloud account.
     *
     * @deprecated Field 'key_name' has been deprecated from provider version 1.121.0. New field 'key_pair_name' instead.
     */
    public readonly keyName!: pulumi.Output<string>;
    public readonly keyNamePrefix!: pulumi.Output<string | undefined>;
    public readonly keyPairName!: pulumi.Output<string>;
    /**
     * You can import an existing public key and using Alicloud key pair to manage it. If this parameter is specified, `resourceGroupId` is the key pair belongs.
     */
    public readonly publicKey!: pulumi.Output<string | undefined>;
    /**
     * The Id of resource group which the key pair belongs.
     */
    public readonly resourceGroupId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a KeyPair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KeyPairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyPairArgs | KeyPairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyPairState | undefined;
            resourceInputs["fingerPrint"] = state ? state.fingerPrint : undefined;
            resourceInputs["keyFile"] = state ? state.keyFile : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["keyNamePrefix"] = state ? state.keyNamePrefix : undefined;
            resourceInputs["keyPairName"] = state ? state.keyPairName : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as KeyPairArgs | undefined;
            resourceInputs["keyFile"] = args ? args.keyFile : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["keyNamePrefix"] = args ? args.keyNamePrefix : undefined;
            resourceInputs["keyPairName"] = args ? args.keyPairName : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["fingerPrint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyPair.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeyPair resources.
 */
export interface KeyPairState {
    fingerPrint?: pulumi.Input<string>;
    /**
     * The name of file to save your new key pair's private key. Strongly suggest you to specified it when you creating key pair, otherwise, you wouldn't get its private key ever.
     */
    keyFile?: pulumi.Input<string>;
    /**
     * The key pair's name. It is the only in one Alicloud account.
     *
     * @deprecated Field 'key_name' has been deprecated from provider version 1.121.0. New field 'key_pair_name' instead.
     */
    keyName?: pulumi.Input<string>;
    keyNamePrefix?: pulumi.Input<string>;
    keyPairName?: pulumi.Input<string>;
    /**
     * You can import an existing public key and using Alicloud key pair to manage it. If this parameter is specified, `resourceGroupId` is the key pair belongs.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The Id of resource group which the key pair belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a KeyPair resource.
 */
export interface KeyPairArgs {
    /**
     * The name of file to save your new key pair's private key. Strongly suggest you to specified it when you creating key pair, otherwise, you wouldn't get its private key ever.
     */
    keyFile?: pulumi.Input<string>;
    /**
     * The key pair's name. It is the only in one Alicloud account.
     *
     * @deprecated Field 'key_name' has been deprecated from provider version 1.121.0. New field 'key_pair_name' instead.
     */
    keyName?: pulumi.Input<string>;
    keyNamePrefix?: pulumi.Input<string>;
    keyPairName?: pulumi.Input<string>;
    /**
     * You can import an existing public key and using Alicloud key pair to manage it. If this parameter is specified, `resourceGroupId` is the key pair belongs.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The Id of resource group which the key pair belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: any}>;
}
