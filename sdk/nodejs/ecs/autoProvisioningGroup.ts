// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a ECS auto provisioning group resource which is a solution that uses preemptive instances and payAsYouGo instances to rapidly deploy clusters.
 *
 * > **NOTE:** Available in 1.79.0+
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "auto_provisioning_group";
 * const _default = alicloud.getZones({
 *     availableDiskCategory: "cloud_efficiency",
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 *     vswitchName: name,
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {
 *     name: name,
 *     vpcId: defaultNetwork.id,
 * });
 * const defaultGetImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_18.*64",
 *     mostRecent: true,
 *     owners: "system",
 * });
 * const template = new alicloud.ecs.EcsLaunchTemplate("template", {
 *     launchTemplateName: name,
 *     imageId: defaultGetImages.then(defaultGetImages => defaultGetImages.images?.[0]?.id),
 *     instanceType: "ecs.n1.tiny",
 *     securityGroupId: defaultSecurityGroup.id,
 * });
 * const defaultAutoProvisioningGroup = new alicloud.ecs.AutoProvisioningGroup("default", {
 *     launchTemplateId: template.id,
 *     totalTargetCapacity: "4",
 *     payAsYouGoTargetCapacity: "1",
 *     spotTargetCapacity: "2",
 *     launchTemplateConfigs: [{
 *         instanceType: "ecs.n1.small",
 *         vswitchId: defaultSwitch.id,
 *         weightedCapacity: "2",
 *         maxPrice: "2",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ECS auto provisioning group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ecs/autoProvisioningGroup:AutoProvisioningGroup example asg-abc123456
 * ```
 */
export class AutoProvisioningGroup extends pulumi.CustomResource {
    /**
     * Get an existing AutoProvisioningGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoProvisioningGroupState, opts?: pulumi.CustomResourceOptions): AutoProvisioningGroup {
        return new AutoProvisioningGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ecs/autoProvisioningGroup:AutoProvisioningGroup';

    /**
     * Returns true if the given object is an instance of AutoProvisioningGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoProvisioningGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoProvisioningGroup.__pulumiType;
    }

    /**
     * The name of the auto provisioning group to be created. It must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-)
     */
    declare public readonly autoProvisioningGroupName: pulumi.Output<string>;
    /**
     * The type of the auto provisioning group. Valid values:`request` and `maintain`,Default value: `maintain`.
     */
    declare public readonly autoProvisioningGroupType: pulumi.Output<string | undefined>;
    /**
     * The type of supplemental instances. When the total value of `PayAsYouGoTargetCapacity` and `SpotTargetCapacity` is smaller than the value of TotalTargetCapacity, the auto provisioning group will create instances of the specified type to meet the capacity requirements. Valid values:`PayAsYouGo`: Pay-as-you-go instances; `Spot`: Preemptible instances, Default value: `Spot`.
     */
    declare public readonly defaultTargetCapacityType: pulumi.Output<string | undefined>;
    /**
     * The description of the auto provisioning group.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The shutdown policy for excess preemptible instances followed when the capacity of the auto provisioning group exceeds the target capacity. Valid values: `no-termination` and `termination`,Default value: `no-termination`.
     */
    declare public readonly excessCapacityTerminationPolicy: pulumi.Output<string | undefined>;
    /**
     * DataDisk mappings to attach to ecs instance. See `block-config` below for details.
     */
    declare public readonly launchTemplateConfigs: pulumi.Output<outputs.ecs.AutoProvisioningGroupLaunchTemplateConfig[]>;
    /**
     * The ID of the instance launch template associated with the auto provisioning group.
     */
    declare public readonly launchTemplateId: pulumi.Output<string>;
    /**
     * The version of the instance launch template associated with the auto provisioning group.
     */
    declare public readonly launchTemplateVersion: pulumi.Output<string>;
    /**
     * The global maximum price for preemptible instances in the auto provisioning group. If both the `MaxSpotPrice` and `LaunchTemplateConfig.N.MaxPrice` parameters are specified, the maximum price is the lower value of the two.
     */
    declare public readonly maxSpotPrice: pulumi.Output<number>;
    /**
     * The scale-out policy for pay-as-you-go instances. Valid values: `lowest-price` and `prioritized`,Default value: `lowest-price`.
     */
    declare public readonly payAsYouGoAllocationStrategy: pulumi.Output<string | undefined>;
    /**
     * The target capacity of pay-as-you-go instances in the auto provisioning group.
     */
    declare public readonly payAsYouGoTargetCapacity: pulumi.Output<string | undefined>;
    /**
     * The scale-out policy for preemptible instances. Valid values:`lowest-price` and `diversified`,Default value: `lowest-price`.
     */
    declare public readonly spotAllocationStrategy: pulumi.Output<string | undefined>;
    /**
     * The default behavior after preemptible instances are shut down. Valid values: `stop` and `terminate`,Default value: `stop`.
     */
    declare public readonly spotInstanceInterruptionBehavior: pulumi.Output<string | undefined>;
    /**
     * This parameter takes effect when the `SpotAllocationStrategy` parameter is set to `lowest-price`. The auto provisioning group selects instance types of the lowest cost to create instances.
     */
    declare public readonly spotInstancePoolsToUseCount: pulumi.Output<number>;
    /**
     * The target capacity of preemptible instances in the auto provisioning group.
     */
    declare public readonly spotTargetCapacity: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to release instances of the auto provisioning group. Valid values:`false` and `true`, default value: `false`.
     */
    declare public readonly terminateInstances: pulumi.Output<boolean | undefined>;
    /**
     * The shutdown policy for preemptible instances when the auto provisioning group expires. Valid values: `false` and `true`, default value: `false`.
     */
    declare public readonly terminateInstancesWithExpiration: pulumi.Output<boolean | undefined>;
    /**
     * The total target capacity of the auto provisioning group. The target capacity consists of the following three parts:PayAsYouGoTargetCapacity,SpotTargetCapacity and the supplemental capacity besides PayAsYouGoTargetCapacity and SpotTargetCapacity.
     */
    declare public readonly totalTargetCapacity: pulumi.Output<string>;
    /**
     * The time when the auto provisioning group is started. The period of time between this point in time and the point in time specified by the `validUntil` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group is immediately started after creation.
     */
    declare public readonly validFrom: pulumi.Output<string>;
    /**
     * The time when the auto provisioning group expires. The period of time between this point in time and the point in time specified by the `validFrom` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group never expires.
     */
    declare public readonly validUntil: pulumi.Output<string>;

    /**
     * Create a AutoProvisioningGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoProvisioningGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoProvisioningGroupArgs | AutoProvisioningGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoProvisioningGroupState | undefined;
            resourceInputs["autoProvisioningGroupName"] = state?.autoProvisioningGroupName;
            resourceInputs["autoProvisioningGroupType"] = state?.autoProvisioningGroupType;
            resourceInputs["defaultTargetCapacityType"] = state?.defaultTargetCapacityType;
            resourceInputs["description"] = state?.description;
            resourceInputs["excessCapacityTerminationPolicy"] = state?.excessCapacityTerminationPolicy;
            resourceInputs["launchTemplateConfigs"] = state?.launchTemplateConfigs;
            resourceInputs["launchTemplateId"] = state?.launchTemplateId;
            resourceInputs["launchTemplateVersion"] = state?.launchTemplateVersion;
            resourceInputs["maxSpotPrice"] = state?.maxSpotPrice;
            resourceInputs["payAsYouGoAllocationStrategy"] = state?.payAsYouGoAllocationStrategy;
            resourceInputs["payAsYouGoTargetCapacity"] = state?.payAsYouGoTargetCapacity;
            resourceInputs["spotAllocationStrategy"] = state?.spotAllocationStrategy;
            resourceInputs["spotInstanceInterruptionBehavior"] = state?.spotInstanceInterruptionBehavior;
            resourceInputs["spotInstancePoolsToUseCount"] = state?.spotInstancePoolsToUseCount;
            resourceInputs["spotTargetCapacity"] = state?.spotTargetCapacity;
            resourceInputs["terminateInstances"] = state?.terminateInstances;
            resourceInputs["terminateInstancesWithExpiration"] = state?.terminateInstancesWithExpiration;
            resourceInputs["totalTargetCapacity"] = state?.totalTargetCapacity;
            resourceInputs["validFrom"] = state?.validFrom;
            resourceInputs["validUntil"] = state?.validUntil;
        } else {
            const args = argsOrState as AutoProvisioningGroupArgs | undefined;
            if (args?.launchTemplateConfigs === undefined && !opts.urn) {
                throw new Error("Missing required property 'launchTemplateConfigs'");
            }
            if (args?.launchTemplateId === undefined && !opts.urn) {
                throw new Error("Missing required property 'launchTemplateId'");
            }
            if (args?.totalTargetCapacity === undefined && !opts.urn) {
                throw new Error("Missing required property 'totalTargetCapacity'");
            }
            resourceInputs["autoProvisioningGroupName"] = args?.autoProvisioningGroupName;
            resourceInputs["autoProvisioningGroupType"] = args?.autoProvisioningGroupType;
            resourceInputs["defaultTargetCapacityType"] = args?.defaultTargetCapacityType;
            resourceInputs["description"] = args?.description;
            resourceInputs["excessCapacityTerminationPolicy"] = args?.excessCapacityTerminationPolicy;
            resourceInputs["launchTemplateConfigs"] = args?.launchTemplateConfigs;
            resourceInputs["launchTemplateId"] = args?.launchTemplateId;
            resourceInputs["launchTemplateVersion"] = args?.launchTemplateVersion;
            resourceInputs["maxSpotPrice"] = args?.maxSpotPrice;
            resourceInputs["payAsYouGoAllocationStrategy"] = args?.payAsYouGoAllocationStrategy;
            resourceInputs["payAsYouGoTargetCapacity"] = args?.payAsYouGoTargetCapacity;
            resourceInputs["spotAllocationStrategy"] = args?.spotAllocationStrategy;
            resourceInputs["spotInstanceInterruptionBehavior"] = args?.spotInstanceInterruptionBehavior;
            resourceInputs["spotInstancePoolsToUseCount"] = args?.spotInstancePoolsToUseCount;
            resourceInputs["spotTargetCapacity"] = args?.spotTargetCapacity;
            resourceInputs["terminateInstances"] = args?.terminateInstances;
            resourceInputs["terminateInstancesWithExpiration"] = args?.terminateInstancesWithExpiration;
            resourceInputs["totalTargetCapacity"] = args?.totalTargetCapacity;
            resourceInputs["validFrom"] = args?.validFrom;
            resourceInputs["validUntil"] = args?.validUntil;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoProvisioningGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AutoProvisioningGroup resources.
 */
export interface AutoProvisioningGroupState {
    /**
     * The name of the auto provisioning group to be created. It must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-)
     */
    autoProvisioningGroupName?: pulumi.Input<string>;
    /**
     * The type of the auto provisioning group. Valid values:`request` and `maintain`,Default value: `maintain`.
     */
    autoProvisioningGroupType?: pulumi.Input<string>;
    /**
     * The type of supplemental instances. When the total value of `PayAsYouGoTargetCapacity` and `SpotTargetCapacity` is smaller than the value of TotalTargetCapacity, the auto provisioning group will create instances of the specified type to meet the capacity requirements. Valid values:`PayAsYouGo`: Pay-as-you-go instances; `Spot`: Preemptible instances, Default value: `Spot`.
     */
    defaultTargetCapacityType?: pulumi.Input<string>;
    /**
     * The description of the auto provisioning group.
     */
    description?: pulumi.Input<string>;
    /**
     * The shutdown policy for excess preemptible instances followed when the capacity of the auto provisioning group exceeds the target capacity. Valid values: `no-termination` and `termination`,Default value: `no-termination`.
     */
    excessCapacityTerminationPolicy?: pulumi.Input<string>;
    /**
     * DataDisk mappings to attach to ecs instance. See `block-config` below for details.
     */
    launchTemplateConfigs?: pulumi.Input<pulumi.Input<inputs.ecs.AutoProvisioningGroupLaunchTemplateConfig>[]>;
    /**
     * The ID of the instance launch template associated with the auto provisioning group.
     */
    launchTemplateId?: pulumi.Input<string>;
    /**
     * The version of the instance launch template associated with the auto provisioning group.
     */
    launchTemplateVersion?: pulumi.Input<string>;
    /**
     * The global maximum price for preemptible instances in the auto provisioning group. If both the `MaxSpotPrice` and `LaunchTemplateConfig.N.MaxPrice` parameters are specified, the maximum price is the lower value of the two.
     */
    maxSpotPrice?: pulumi.Input<number>;
    /**
     * The scale-out policy for pay-as-you-go instances. Valid values: `lowest-price` and `prioritized`,Default value: `lowest-price`.
     */
    payAsYouGoAllocationStrategy?: pulumi.Input<string>;
    /**
     * The target capacity of pay-as-you-go instances in the auto provisioning group.
     */
    payAsYouGoTargetCapacity?: pulumi.Input<string>;
    /**
     * The scale-out policy for preemptible instances. Valid values:`lowest-price` and `diversified`,Default value: `lowest-price`.
     */
    spotAllocationStrategy?: pulumi.Input<string>;
    /**
     * The default behavior after preemptible instances are shut down. Valid values: `stop` and `terminate`,Default value: `stop`.
     */
    spotInstanceInterruptionBehavior?: pulumi.Input<string>;
    /**
     * This parameter takes effect when the `SpotAllocationStrategy` parameter is set to `lowest-price`. The auto provisioning group selects instance types of the lowest cost to create instances.
     */
    spotInstancePoolsToUseCount?: pulumi.Input<number>;
    /**
     * The target capacity of preemptible instances in the auto provisioning group.
     */
    spotTargetCapacity?: pulumi.Input<string>;
    /**
     * Specifies whether to release instances of the auto provisioning group. Valid values:`false` and `true`, default value: `false`.
     */
    terminateInstances?: pulumi.Input<boolean>;
    /**
     * The shutdown policy for preemptible instances when the auto provisioning group expires. Valid values: `false` and `true`, default value: `false`.
     */
    terminateInstancesWithExpiration?: pulumi.Input<boolean>;
    /**
     * The total target capacity of the auto provisioning group. The target capacity consists of the following three parts:PayAsYouGoTargetCapacity,SpotTargetCapacity and the supplemental capacity besides PayAsYouGoTargetCapacity and SpotTargetCapacity.
     */
    totalTargetCapacity?: pulumi.Input<string>;
    /**
     * The time when the auto provisioning group is started. The period of time between this point in time and the point in time specified by the `validUntil` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group is immediately started after creation.
     */
    validFrom?: pulumi.Input<string>;
    /**
     * The time when the auto provisioning group expires. The period of time between this point in time and the point in time specified by the `validFrom` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group never expires.
     */
    validUntil?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutoProvisioningGroup resource.
 */
export interface AutoProvisioningGroupArgs {
    /**
     * The name of the auto provisioning group to be created. It must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-)
     */
    autoProvisioningGroupName?: pulumi.Input<string>;
    /**
     * The type of the auto provisioning group. Valid values:`request` and `maintain`,Default value: `maintain`.
     */
    autoProvisioningGroupType?: pulumi.Input<string>;
    /**
     * The type of supplemental instances. When the total value of `PayAsYouGoTargetCapacity` and `SpotTargetCapacity` is smaller than the value of TotalTargetCapacity, the auto provisioning group will create instances of the specified type to meet the capacity requirements. Valid values:`PayAsYouGo`: Pay-as-you-go instances; `Spot`: Preemptible instances, Default value: `Spot`.
     */
    defaultTargetCapacityType?: pulumi.Input<string>;
    /**
     * The description of the auto provisioning group.
     */
    description?: pulumi.Input<string>;
    /**
     * The shutdown policy for excess preemptible instances followed when the capacity of the auto provisioning group exceeds the target capacity. Valid values: `no-termination` and `termination`,Default value: `no-termination`.
     */
    excessCapacityTerminationPolicy?: pulumi.Input<string>;
    /**
     * DataDisk mappings to attach to ecs instance. See `block-config` below for details.
     */
    launchTemplateConfigs: pulumi.Input<pulumi.Input<inputs.ecs.AutoProvisioningGroupLaunchTemplateConfig>[]>;
    /**
     * The ID of the instance launch template associated with the auto provisioning group.
     */
    launchTemplateId: pulumi.Input<string>;
    /**
     * The version of the instance launch template associated with the auto provisioning group.
     */
    launchTemplateVersion?: pulumi.Input<string>;
    /**
     * The global maximum price for preemptible instances in the auto provisioning group. If both the `MaxSpotPrice` and `LaunchTemplateConfig.N.MaxPrice` parameters are specified, the maximum price is the lower value of the two.
     */
    maxSpotPrice?: pulumi.Input<number>;
    /**
     * The scale-out policy for pay-as-you-go instances. Valid values: `lowest-price` and `prioritized`,Default value: `lowest-price`.
     */
    payAsYouGoAllocationStrategy?: pulumi.Input<string>;
    /**
     * The target capacity of pay-as-you-go instances in the auto provisioning group.
     */
    payAsYouGoTargetCapacity?: pulumi.Input<string>;
    /**
     * The scale-out policy for preemptible instances. Valid values:`lowest-price` and `diversified`,Default value: `lowest-price`.
     */
    spotAllocationStrategy?: pulumi.Input<string>;
    /**
     * The default behavior after preemptible instances are shut down. Valid values: `stop` and `terminate`,Default value: `stop`.
     */
    spotInstanceInterruptionBehavior?: pulumi.Input<string>;
    /**
     * This parameter takes effect when the `SpotAllocationStrategy` parameter is set to `lowest-price`. The auto provisioning group selects instance types of the lowest cost to create instances.
     */
    spotInstancePoolsToUseCount?: pulumi.Input<number>;
    /**
     * The target capacity of preemptible instances in the auto provisioning group.
     */
    spotTargetCapacity?: pulumi.Input<string>;
    /**
     * Specifies whether to release instances of the auto provisioning group. Valid values:`false` and `true`, default value: `false`.
     */
    terminateInstances?: pulumi.Input<boolean>;
    /**
     * The shutdown policy for preemptible instances when the auto provisioning group expires. Valid values: `false` and `true`, default value: `false`.
     */
    terminateInstancesWithExpiration?: pulumi.Input<boolean>;
    /**
     * The total target capacity of the auto provisioning group. The target capacity consists of the following three parts:PayAsYouGoTargetCapacity,SpotTargetCapacity and the supplemental capacity besides PayAsYouGoTargetCapacity and SpotTargetCapacity.
     */
    totalTargetCapacity: pulumi.Input<string>;
    /**
     * The time when the auto provisioning group is started. The period of time between this point in time and the point in time specified by the `validUntil` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group is immediately started after creation.
     */
    validFrom?: pulumi.Input<string>;
    /**
     * The time when the auto provisioning group expires. The period of time between this point in time and the point in time specified by the `validFrom` parameter is the effective time period of the auto provisioning group.By default, an auto provisioning group never expires.
     */
    validUntil?: pulumi.Input<string>;
}
