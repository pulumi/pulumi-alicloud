// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * // Create a new ECS disk-attachment and use it attach one disk to a new instance.
 * const ecsSg = new alicloud.ecs.SecurityGroup("ecsSg", {description: "New security group"});
 * const ecsDisk = new alicloud.ecs.Disk("ecsDisk", {
 *     availabilityZone: "cn-beijing-a",
 *     size: 50,
 *     tags: {
 *         Name: "TerraformTest-disk",
 *     },
 * });
 * const ecsInstance = new alicloud.ecs.Instance("ecsInstance", {
 *     imageId: "ubuntu_18_04_64_20G_alibase_20190624.vhd",
 *     instanceType: "ecs.n4.small",
 *     availabilityZone: "cn-beijing-a",
 *     securityGroups: [ecsSg.id],
 *     instanceName: "Hello",
 *     internetChargeType: "PayByBandwidth",
 *     tags: {
 *         Name: "TerraformTest-instance",
 *     },
 * });
 * const ecsDiskAtt = new alicloud.ecs.DiskAttachment("ecsDiskAtt", {
 *     diskId: ecsDisk.id,
 *     instanceId: ecsInstance.id,
 * });
 * ```
 *
 * ## Import
 *
 * The disk attachment can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:ecs/diskAttachment:DiskAttachment example d-abc12345678:i-abc12355
 * ```
 */
export class DiskAttachment extends pulumi.CustomResource {
    /**
     * Get an existing DiskAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiskAttachmentState, opts?: pulumi.CustomResourceOptions): DiskAttachment {
        return new DiskAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ecs/diskAttachment:DiskAttachment';

    /**
     * Returns true if the given object is an instance of DiskAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiskAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiskAttachment.__pulumiType;
    }

    public readonly bootable!: pulumi.Output<boolean | undefined>;
    public readonly deleteWithInstance!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly device!: pulumi.Output<string>;
    /**
     * ID of the Disk to be attached.
     */
    public readonly diskId!: pulumi.Output<string>;
    /**
     * ID of the Instance to attach to.
     */
    public readonly instanceId!: pulumi.Output<string>;
    public readonly keyPairName!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;

    /**
     * Create a DiskAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiskAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiskAttachmentArgs | DiskAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiskAttachmentState | undefined;
            resourceInputs["bootable"] = state ? state.bootable : undefined;
            resourceInputs["deleteWithInstance"] = state ? state.deleteWithInstance : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["diskId"] = state ? state.diskId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["keyPairName"] = state ? state.keyPairName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
        } else {
            const args = argsOrState as DiskAttachmentArgs | undefined;
            if ((!args || args.diskId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskId'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["bootable"] = args ? args.bootable : undefined;
            resourceInputs["deleteWithInstance"] = args ? args.deleteWithInstance : undefined;
            resourceInputs["diskId"] = args ? args.diskId : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["keyPairName"] = args ? args.keyPairName : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["device"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiskAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DiskAttachment resources.
 */
export interface DiskAttachmentState {
    bootable?: pulumi.Input<boolean>;
    deleteWithInstance?: pulumi.Input<boolean>;
    device?: pulumi.Input<string>;
    /**
     * ID of the Disk to be attached.
     */
    diskId?: pulumi.Input<string>;
    /**
     * ID of the Instance to attach to.
     */
    instanceId?: pulumi.Input<string>;
    keyPairName?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DiskAttachment resource.
 */
export interface DiskAttachmentArgs {
    bootable?: pulumi.Input<boolean>;
    deleteWithInstance?: pulumi.Input<boolean>;
    /**
     * ID of the Disk to be attached.
     */
    diskId: pulumi.Input<string>;
    /**
     * ID of the Instance to attach to.
     */
    instanceId: pulumi.Input<string>;
    keyPairName?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
}
