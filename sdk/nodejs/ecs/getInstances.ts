// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * The Instances data source list ECS instance resources according to their ID, name regex, image id, status and other fields.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const instancesDs = pulumi.output(alicloud.ecs.getInstances({
 *     nameRegex: "web_server",
 *     status: "Running",
 * }));
 *
 * export const firstInstanceId = instancesDs.instances[0].id;
 * export const instanceIds = instancesDs.ids!;
 * ```
 */
export function getInstances(args?: GetInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetInstancesResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("alicloud:ecs/getInstances:getInstances", {
        "availabilityZone": args.availabilityZone,
        "ids": args.ids,
        "imageId": args.imageId,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "ramRoleName": args.ramRoleName,
        "resourceGroupId": args.resourceGroupId,
        "status": args.status,
        "tags": args.tags,
        "vpcId": args.vpcId,
        "vswitchId": args.vswitchId,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesArgs {
    /**
     * Availability zone where instances are located.
     */
    availabilityZone?: string;
    /**
     * A list of ECS instance IDs.
     */
    ids?: string[];
    /**
     * The image ID of some ECS instance used.
     */
    imageId?: string;
    /**
     * A regex string to filter results by instance name.
     */
    nameRegex?: string;
    outputFile?: string;
    /**
     * The RAM role name which the instance attaches.
     */
    ramRoleName?: string;
    /**
     * The Id of resource group which the instance belongs.
     */
    resourceGroupId?: string;
    /**
     * Instance status. Valid values: "Creating", "Starting", "Running", "Stopping" and "Stopped". If undefined, all statuses are considered.
     */
    status?: string;
    /**
     * A map of tags assigned to the ECS instances. It must be in the format:
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as alicloud from "@pulumi/alicloud";
     *
     * const taggedInstances = pulumi.output(alicloud.ecs.getInstances({
     *     tags: {
     *         tagKey1: "tagValue1",
     *         tagKey2: "tagValue2",
     *     },
     * }));
     * ```
     */
    tags?: {[key: string]: any};
    /**
     * ID of the VPC linked to the instances.
     */
    vpcId?: string;
    /**
     * ID of the VSwitch linked to the instances.
     */
    vswitchId?: string;
}

/**
 * A collection of values returned by getInstances.
 */
export interface GetInstancesResult {
    /**
     * Availability zone the instance belongs to.
     */
    readonly availabilityZone?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A list of ECS instance IDs.
     */
    readonly ids: string[];
    /**
     * Image ID the instance is using.
     */
    readonly imageId?: string;
    /**
     * A list of instances. Each element contains the following attributes:
     */
    readonly instances: outputs.ecs.GetInstancesInstance[];
    readonly nameRegex?: string;
    /**
     * A list of instances names.
     */
    readonly names: string[];
    readonly outputFile?: string;
    /**
     * The Ram role name.
     */
    readonly ramRoleName?: string;
    /**
     * The Id of resource group.
     */
    readonly resourceGroupId?: string;
    /**
     * Instance current status.
     */
    readonly status?: string;
    /**
     * A map of tags assigned to the ECS instance.
     */
    readonly tags?: {[key: string]: any};
    /**
     * ID of the VPC the instance belongs to.
     */
    readonly vpcId?: string;
    /**
     * ID of the VSwitch the instance belongs to.
     */
    readonly vswitchId?: string;
}

export function getInstancesOutput(args?: GetInstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstancesResult> {
    return pulumi.output(args).apply(a => getInstances(a, opts))
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesOutputArgs {
    /**
     * Availability zone where instances are located.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * A list of ECS instance IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The image ID of some ECS instance used.
     */
    imageId?: pulumi.Input<string>;
    /**
     * A regex string to filter results by instance name.
     */
    nameRegex?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    /**
     * The RAM role name which the instance attaches.
     */
    ramRoleName?: pulumi.Input<string>;
    /**
     * The Id of resource group which the instance belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Instance status. Valid values: "Creating", "Starting", "Running", "Stopping" and "Stopped". If undefined, all statuses are considered.
     */
    status?: pulumi.Input<string>;
    /**
     * A map of tags assigned to the ECS instances. It must be in the format:
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as alicloud from "@pulumi/alicloud";
     *
     * const taggedInstances = pulumi.output(alicloud.ecs.getInstances({
     *     tags: {
     *         tagKey1: "tagValue1",
     *         tagKey2: "tagValue2",
     *     },
     * }));
     * ```
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * ID of the VPC linked to the instances.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * ID of the VSwitch linked to the instances.
     */
    vswitchId?: pulumi.Input<string>;
}
