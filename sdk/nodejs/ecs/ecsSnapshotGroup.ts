// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ECS Snapshot Group resource.
 *
 * For information about ECS Snapshot Group and how to use it, see [What is Snapshot Group](https://www.alibabacloud.com/help/en/doc-detail/210939.html).
 *
 * > **NOTE:** Available in v1.160.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const defaultResourceGroups = alicloud.resourcemanager.getResourceGroups({
 *     nameRegex: "default",
 * });
 * const defaultZones = alicloud.getZones({
 *     availableResourceCreation: "Instance",
 *     availableDiskCategory: "cloud_essd",
 * });
 * const defaultInstanceTypes = defaultZones.then(defaultZones => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: defaultZones.zones?[0]?.id,
 *     cpuCoreCount: 2,
 *     memorySize: 4,
 *     systemDiskCategory: "cloud_essd",
 * }));
 * const defaultNetworks = alicloud.vpc.getNetworks({
 *     nameRegex: "default-NODELETING",
 * });
 * const defaultSwitches = Promise.all([defaultNetworks, defaultZones]).then(([defaultNetworks, defaultZones]) => alicloud.vpc.getSwitches({
 *     vpcId: defaultNetworks.ids?[0],
 *     zoneId: defaultZones.zones?[0]?.id,
 * }));
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("defaultSecurityGroup", {
 *     description: "New security group",
 *     vpcId: defaultNetworks.then(defaultNetworks => defaultNetworks.ids?[0]),
 * });
 * const defaultDisk: alicloud.ecs.Disk[];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     defaultDisk.push(new alicloud.ecs.Disk(`defaultDisk-${range.value}`, {
 *         diskName: _var.name,
 *         zoneId: defaultInstanceTypes.then(defaultInstanceTypes => defaultInstanceTypes.instanceTypes?[0]?.availabilityZones?[0]),
 *         category: "cloud_essd",
 *         size: 20,
 *     }));
 * }
 * const defaultImages = alicloud.ecs.getImages({
 *     owners: "system",
 * });
 * const defaultInstance = new alicloud.ecs.Instance("defaultInstance", {
 *     availabilityZone: defaultZones.then(defaultZones => defaultZones.zones?[0]?.id),
 *     instanceName: _var.name,
 *     hostName: "tf-testAcc",
 *     imageId: defaultImages.then(defaultImages => defaultImages.images?[0]?.id),
 *     instanceType: defaultInstanceTypes.then(defaultInstanceTypes => defaultInstanceTypes.instanceTypes?[0]?.id),
 *     securityGroups: [defaultSecurityGroup.id],
 *     vswitchId: defaultSwitches.then(defaultSwitches => defaultSwitches.ids?[0]),
 * });
 * const defaultDiskAttachment: alicloud.ecs.DiskAttachment[];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     defaultDiskAttachment.push(new alicloud.ecs.DiskAttachment(`defaultDiskAttachment-${range.value}`, {
 *         diskId: defaultDisk.map(__item => __item.id)[range.value],
 *         instanceId: defaultInstance.id,
 *     }));
 * }
 * const example = new alicloud.ecs.EcsSnapshotGroup("example", {
 *     description: "example_value",
 *     diskIds: [
 *         defaultDiskAttachment[0].diskId,
 *         defaultDiskAttachment[1].diskId,
 *     ],
 *     snapshotGroupName: "example_value",
 *     resourceGroupId: defaultResourceGroups.then(defaultResourceGroups => defaultResourceGroups.groups?[0]?.id),
 *     instanceId: defaultDiskAttachment[0].instanceId,
 *     instantAccess: true,
 *     instantAccessRetentionDays: 1,
 *     tags: {
 *         Created: "TF",
 *         For: "Acceptance-test",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ECS Snapshot Group can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:ecs/ecsSnapshotGroup:EcsSnapshotGroup example <id>
 * ```
 */
export class EcsSnapshotGroup extends pulumi.CustomResource {
    /**
     * Get an existing EcsSnapshotGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsSnapshotGroupState, opts?: pulumi.CustomResourceOptions): EcsSnapshotGroup {
        return new EcsSnapshotGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ecs/ecsSnapshotGroup:EcsSnapshotGroup';

    /**
     * Returns true if the given object is an instance of EcsSnapshotGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsSnapshotGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsSnapshotGroup.__pulumiType;
    }

    /**
     * The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
     */
    public readonly diskIds!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
     */
    public readonly excludeDiskIds!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the instance.
     */
    public readonly instanceId!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable the instant access feature.
     */
    public readonly instantAccess!: pulumi.Output<boolean | undefined>;
    /**
     * Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
     */
    public readonly instantAccessRetentionDays!: pulumi.Output<number | undefined>;
    /**
     * The ID of the resource group to which the snapshot consistency group belongs.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
     */
    public readonly snapshotGroupName!: pulumi.Output<string | undefined>;
    /**
     * The status of the resource.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the snapshot group.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a EcsSnapshotGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EcsSnapshotGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsSnapshotGroupArgs | EcsSnapshotGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsSnapshotGroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskIds"] = state ? state.diskIds : undefined;
            resourceInputs["excludeDiskIds"] = state ? state.excludeDiskIds : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instantAccess"] = state ? state.instantAccess : undefined;
            resourceInputs["instantAccessRetentionDays"] = state ? state.instantAccessRetentionDays : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["snapshotGroupName"] = state ? state.snapshotGroupName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as EcsSnapshotGroupArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskIds"] = args ? args.diskIds : undefined;
            resourceInputs["excludeDiskIds"] = args ? args.excludeDiskIds : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["instantAccess"] = args ? args.instantAccess : undefined;
            resourceInputs["instantAccessRetentionDays"] = args ? args.instantAccessRetentionDays : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["snapshotGroupName"] = args ? args.snapshotGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsSnapshotGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EcsSnapshotGroup resources.
 */
export interface EcsSnapshotGroupState {
    /**
     * The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
     */
    diskIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
     */
    excludeDiskIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the instant access feature.
     */
    instantAccess?: pulumi.Input<boolean>;
    /**
     * Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
     */
    instantAccessRetentionDays?: pulumi.Input<number>;
    /**
     * The ID of the resource group to which the snapshot consistency group belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
     */
    snapshotGroupName?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the snapshot group.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a EcsSnapshotGroup resource.
 */
export interface EcsSnapshotGroupArgs {
    /**
     * The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
     */
    diskIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
     */
    excludeDiskIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the instant access feature.
     */
    instantAccess?: pulumi.Input<boolean>;
    /**
     * Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
     */
    instantAccessRetentionDays?: pulumi.Input<number>;
    /**
     * The ID of the resource group to which the snapshot consistency group belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
     */
    snapshotGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the snapshot group.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
}
