// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ECS Snapshot Group resource.
 *
 * For information about ECS Snapshot Group and how to use it, see [What is Snapshot Group](https://www.alibabacloud.com/help/en/doc-detail/210939.html).
 *
 * > **NOTE:** Available since v1.160.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "Instance",
 *     availableDiskCategory: "cloud_essd",
 * });
 * const defaultGetInstanceTypes = _default.then(_default => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: _default.zones?.[0]?.id,
 *     systemDiskCategory: "cloud_essd",
 * }));
 * const defaultGetImages = alicloud.ecs.getImages({
 *     owners: "system",
 *     nameRegex: "^ubuntu_18.*64",
 *     mostRecent: true,
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: "terraform-example",
 *     cidrBlock: "172.17.3.0/24",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: "terraform-example",
 *     cidrBlock: "172.17.3.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {
 *     name: "terraform-example",
 *     vpcId: defaultNetwork.id,
 * });
 * const defaultInstance = new alicloud.ecs.Instance("default", {
 *     availabilityZone: _default.then(_default => _default.zones?.[0]?.id),
 *     instanceName: "terraform-example",
 *     securityGroups: [defaultSecurityGroup.id],
 *     vswitchId: defaultSwitch.id,
 *     instanceType: defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.id),
 *     imageId: defaultGetImages.then(defaultGetImages => defaultGetImages.images?.[0]?.id),
 *     internetMaxBandwidthOut: 10,
 * });
 * const defaultEcsDisk = new alicloud.ecs.EcsDisk("default", {
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 *     diskName: "terraform-example",
 *     description: "terraform-example",
 *     category: "cloud_essd",
 *     size: 30,
 * });
 * const defaultDiskAttachment = new alicloud.ecs.DiskAttachment("default", {
 *     diskId: defaultEcsDisk.id,
 *     instanceId: defaultInstance.id,
 * });
 * const defaultEcsSnapshotGroup = new alicloud.ecs.EcsSnapshotGroup("default", {
 *     description: "terraform-example",
 *     diskIds: [defaultDiskAttachment.diskId],
 *     snapshotGroupName: "terraform-example",
 *     instanceId: defaultInstance.id,
 *     instantAccess: true,
 *     instantAccessRetentionDays: 1,
 *     tags: {
 *         Created: "TF",
 *         For: "Acceptance",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ECS Snapshot Group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ecs/ecsSnapshotGroup:EcsSnapshotGroup example <id>
 * ```
 */
export class EcsSnapshotGroup extends pulumi.CustomResource {
    /**
     * Get an existing EcsSnapshotGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsSnapshotGroupState, opts?: pulumi.CustomResourceOptions): EcsSnapshotGroup {
        return new EcsSnapshotGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ecs/ecsSnapshotGroup:EcsSnapshotGroup';

    /**
     * Returns true if the given object is an instance of EcsSnapshotGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsSnapshotGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsSnapshotGroup.__pulumiType;
    }

    /**
     * The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
     */
    declare public readonly diskIds: pulumi.Output<string[] | undefined>;
    /**
     * The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
     */
    declare public readonly excludeDiskIds: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the instance.
     */
    declare public readonly instanceId: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable the instant access feature.
     */
    declare public readonly instantAccess: pulumi.Output<boolean | undefined>;
    /**
     * Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
     */
    declare public readonly instantAccessRetentionDays: pulumi.Output<number | undefined>;
    /**
     * The ID of the resource group to which the snapshot consistency group belongs.
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
     */
    declare public readonly snapshotGroupName: pulumi.Output<string | undefined>;
    /**
     * The status of the resource.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the snapshot group.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a EcsSnapshotGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EcsSnapshotGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsSnapshotGroupArgs | EcsSnapshotGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsSnapshotGroupState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["diskIds"] = state?.diskIds;
            resourceInputs["excludeDiskIds"] = state?.excludeDiskIds;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["instantAccess"] = state?.instantAccess;
            resourceInputs["instantAccessRetentionDays"] = state?.instantAccessRetentionDays;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["snapshotGroupName"] = state?.snapshotGroupName;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as EcsSnapshotGroupArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["diskIds"] = args?.diskIds;
            resourceInputs["excludeDiskIds"] = args?.excludeDiskIds;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["instantAccess"] = args?.instantAccess;
            resourceInputs["instantAccessRetentionDays"] = args?.instantAccessRetentionDays;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["snapshotGroupName"] = args?.snapshotGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsSnapshotGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EcsSnapshotGroup resources.
 */
export interface EcsSnapshotGroupState {
    /**
     * The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
     */
    diskIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
     */
    excludeDiskIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the instant access feature.
     */
    instantAccess?: pulumi.Input<boolean>;
    /**
     * Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
     */
    instantAccessRetentionDays?: pulumi.Input<number>;
    /**
     * The ID of the resource group to which the snapshot consistency group belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
     */
    snapshotGroupName?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the snapshot group.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a EcsSnapshotGroup resource.
 */
export interface EcsSnapshotGroupArgs {
    /**
     * The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
     */
    diskIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
     */
    excludeDiskIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the instant access feature.
     */
    instantAccess?: pulumi.Input<boolean>;
    /**
     * Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
     */
    instantAccessRetentionDays?: pulumi.Input<number>;
    /**
     * The ID of the resource group to which the snapshot consistency group belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
     */
    snapshotGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the snapshot group.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
