// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a EIP Association resource.
 *
 * > **NOTE:** `alicloud.ecs.EipAssociation` is useful in scenarios where EIPs are either
 *  pre-existing or distributed to customers or users and therefore cannot be changed.
 *
 * > **NOTE:** From version 1.7.1, the resource support to associate EIP to SLB Instance or Nat Gateway.
 *
 * > **NOTE:** One EIP can only be associated with ECS or SLB instance which in the VPC.
 *
 * For information about EIP Association and how to use it, see [What is Association](https://www.alibabacloud.com/help/en/vpc/developer-reference/api-vpc-2016-04-28-associateeipaddress).
 *
 * > **NOTE:** Available since v1.117.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const example = alicloud.getZones({
 *     availableResourceCreation: "Instance",
 * });
 * const exampleGetInstanceTypes = example.then(example => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: example.zones?.[0]?.id,
 *     cpuCoreCount: 1,
 *     memorySize: 2,
 * }));
 * const exampleGetImages = exampleGetInstanceTypes.then(exampleGetInstanceTypes => alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_[0-9]+_[0-9]+_x64*",
 *     owners: "system",
 *     instanceType: exampleGetInstanceTypes.instanceTypes?.[0]?.id,
 * }));
 * const exampleNetwork = new alicloud.vpc.Network("example", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const exampleSwitch = new alicloud.vpc.Switch("example", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: exampleNetwork.id,
 *     zoneId: example.then(example => example.zones?.[0]?.id),
 * });
 * const exampleSecurityGroup = new alicloud.ecs.SecurityGroup("example", {
 *     name: name,
 *     vpcId: exampleNetwork.id,
 * });
 * const exampleInstance = new alicloud.ecs.Instance("example", {
 *     availabilityZone: example.then(example => example.zones?.[0]?.id),
 *     instanceName: name,
 *     imageId: exampleGetImages.then(exampleGetImages => exampleGetImages.images?.[0]?.id),
 *     instanceType: exampleGetInstanceTypes.then(exampleGetInstanceTypes => exampleGetInstanceTypes.instanceTypes?.[0]?.id),
 *     securityGroups: [exampleSecurityGroup.id],
 *     vswitchId: exampleSwitch.id,
 *     tags: {
 *         Created: "TF",
 *         For: "example",
 *     },
 * });
 * const exampleEipAddress = new alicloud.ecs.EipAddress("example", {addressName: name});
 * const exampleEipAssociation = new alicloud.ecs.EipAssociation("example", {
 *     allocationId: exampleEipAddress.id,
 *     instanceId: exampleInstance.id,
 * });
 * ```
 *
 * ## Import
 *
 * EIP Association can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ecs/eipAssociation:EipAssociation example <allocation_id>:<instance_id>
 * ```
 */
export class EipAssociation extends pulumi.CustomResource {
    /**
     * Get an existing EipAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EipAssociationState, opts?: pulumi.CustomResourceOptions): EipAssociation {
        return new EipAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ecs/eipAssociation:EipAssociation';

    /**
     * Returns true if the given object is an instance of EipAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EipAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EipAssociation.__pulumiType;
    }

    /**
     * The ID of the EIP instance.
     */
    public readonly allocationId!: pulumi.Output<string>;
    /**
     * Specifies whether to disassociate the EIP from a NAT gateway if a DNAT or SNAT entry is added to the NAT gateway. Valid values:
     */
    public readonly force!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the instance with which you want to associate the EIP. You can enter the ID of a NAT gateway, CLB instance, ECS instance, secondary ENI, HAVIP, or IP address.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The type of the instance with which you want to associate the EIP. Valid values:
     * - `Nat`: NAT gateway
     * - `SlbInstance`: CLB instance
     * - `EcsInstance` (default): ECS instance
     * - `NetworkInterface`: secondary ENI
     * - `HaVip`: HAVIP
     * - `IpAddress`: IP address
     *
     * > **NOTE:**   The default value is `EcsInstance`. If the instance with which you want to associate the EIP is not an ECS instance, this parameter is required.
     */
    public readonly instanceType!: pulumi.Output<string>;
    /**
     * The association mode. Valid values:
     * - `NAT` (default): NAT mode
     * - `MULTI_BINDED`: multi-EIP-to-ENI mode
     * - `BINDED`: cut-network interface controller mode
     *
     * > **NOTE:**   This parameter is required only when `instanceType` is set to `NetworkInterface`.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * The IP address in the CIDR block of the vSwitch.
     *
     * If you leave this parameter empty, the system allocates a private IP address based on the VPC ID and vSwitch ID.
     *
     * > **NOTE:**   This parameter is required if `instanceType` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
     */
    public readonly privateIpAddress!: pulumi.Output<string | undefined>;
    /**
     * The ID of the VPC in which an IPv4 gateway is created. The VPC and the EIP must be in the same region.
     *
     * When you associate an EIP with an IP address, the system can enable the IP address to access the Internet based on VPC route configurations.
     *
     * > **NOTE:**   This parameter is required if `instanceType` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
     */
    public readonly vpcId!: pulumi.Output<string | undefined>;

    /**
     * Create a EipAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EipAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EipAssociationArgs | EipAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EipAssociationState | undefined;
            resourceInputs["allocationId"] = state ? state.allocationId : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as EipAssociationArgs | undefined;
            if ((!args || args.allocationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allocationId'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["allocationId"] = args ? args.allocationId : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["privateIpAddress"] = args ? args.privateIpAddress : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EipAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EipAssociation resources.
 */
export interface EipAssociationState {
    /**
     * The ID of the EIP instance.
     */
    allocationId?: pulumi.Input<string>;
    /**
     * Specifies whether to disassociate the EIP from a NAT gateway if a DNAT or SNAT entry is added to the NAT gateway. Valid values:
     */
    force?: pulumi.Input<boolean>;
    /**
     * The ID of the instance with which you want to associate the EIP. You can enter the ID of a NAT gateway, CLB instance, ECS instance, secondary ENI, HAVIP, or IP address.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The type of the instance with which you want to associate the EIP. Valid values:
     * - `Nat`: NAT gateway
     * - `SlbInstance`: CLB instance
     * - `EcsInstance` (default): ECS instance
     * - `NetworkInterface`: secondary ENI
     * - `HaVip`: HAVIP
     * - `IpAddress`: IP address
     *
     * > **NOTE:**   The default value is `EcsInstance`. If the instance with which you want to associate the EIP is not an ECS instance, this parameter is required.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * The association mode. Valid values:
     * - `NAT` (default): NAT mode
     * - `MULTI_BINDED`: multi-EIP-to-ENI mode
     * - `BINDED`: cut-network interface controller mode
     *
     * > **NOTE:**   This parameter is required only when `instanceType` is set to `NetworkInterface`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The IP address in the CIDR block of the vSwitch.
     *
     * If you leave this parameter empty, the system allocates a private IP address based on the VPC ID and vSwitch ID.
     *
     * > **NOTE:**   This parameter is required if `instanceType` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
     */
    privateIpAddress?: pulumi.Input<string>;
    /**
     * The ID of the VPC in which an IPv4 gateway is created. The VPC and the EIP must be in the same region.
     *
     * When you associate an EIP with an IP address, the system can enable the IP address to access the Internet based on VPC route configurations.
     *
     * > **NOTE:**   This parameter is required if `instanceType` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EipAssociation resource.
 */
export interface EipAssociationArgs {
    /**
     * The ID of the EIP instance.
     */
    allocationId: pulumi.Input<string>;
    /**
     * Specifies whether to disassociate the EIP from a NAT gateway if a DNAT or SNAT entry is added to the NAT gateway. Valid values:
     */
    force?: pulumi.Input<boolean>;
    /**
     * The ID of the instance with which you want to associate the EIP. You can enter the ID of a NAT gateway, CLB instance, ECS instance, secondary ENI, HAVIP, or IP address.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The type of the instance with which you want to associate the EIP. Valid values:
     * - `Nat`: NAT gateway
     * - `SlbInstance`: CLB instance
     * - `EcsInstance` (default): ECS instance
     * - `NetworkInterface`: secondary ENI
     * - `HaVip`: HAVIP
     * - `IpAddress`: IP address
     *
     * > **NOTE:**   The default value is `EcsInstance`. If the instance with which you want to associate the EIP is not an ECS instance, this parameter is required.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * The association mode. Valid values:
     * - `NAT` (default): NAT mode
     * - `MULTI_BINDED`: multi-EIP-to-ENI mode
     * - `BINDED`: cut-network interface controller mode
     *
     * > **NOTE:**   This parameter is required only when `instanceType` is set to `NetworkInterface`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The IP address in the CIDR block of the vSwitch.
     *
     * If you leave this parameter empty, the system allocates a private IP address based on the VPC ID and vSwitch ID.
     *
     * > **NOTE:**   This parameter is required if `instanceType` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
     */
    privateIpAddress?: pulumi.Input<string>;
    /**
     * The ID of the VPC in which an IPv4 gateway is created. The VPC and the EIP must be in the same region.
     *
     * When you associate an EIP with an IP address, the system can enable the IP address to access the Internet based on VPC route configurations.
     *
     * > **NOTE:**   This parameter is required if `instanceType` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
     */
    vpcId?: pulumi.Input<string>;
}
