// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the ECS Dedicated Hosts of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.91.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new alicloud.ecs.DedicatedHost("default", {
 *     dedicatedHostType: "ddh.c5",
 *     description: "From_Terraform",
 *     dedicatedHostName: name,
 *     actionOnMaintenance: "Migrate",
 *     tags: {
 *         Create: "TF",
 *         For: "ddh-test",
 *     },
 * });
 * const ids = alicloud.ecs.getDedicatedHostsOutput({
 *     ids: [_default.id],
 * });
 * export const ecsDedicatedHostId0 = ids.apply(ids => ids.hosts?.[0]?.id);
 * ```
 */
export function getDedicatedHosts(args?: GetDedicatedHostsArgs, opts?: pulumi.InvokeOptions): Promise<GetDedicatedHostsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:ecs/getDedicatedHosts:getDedicatedHosts", {
        "dedicatedHostId": args.dedicatedHostId,
        "dedicatedHostName": args.dedicatedHostName,
        "dedicatedHostType": args.dedicatedHostType,
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "operationLocks": args.operationLocks,
        "outputFile": args.outputFile,
        "resourceGroupId": args.resourceGroupId,
        "status": args.status,
        "tags": args.tags,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDedicatedHosts.
 */
export interface GetDedicatedHostsArgs {
    /**
     * The ID of ECS Dedicated Host.
     */
    dedicatedHostId?: string;
    /**
     * The name of ECS Dedicated Host.
     */
    dedicatedHostName?: string;
    /**
     * The type of the dedicated host.
     */
    dedicatedHostType?: string;
    /**
     * A list of ECS Dedicated Host ids.
     */
    ids?: string[];
    /**
     * A regex string to filter results by the ECS Dedicated Host name.
     */
    nameRegex?: string;
    /**
     * The reason why the dedicated host resource is locked. See `operationLocks` below.
     */
    operationLocks?: inputs.ecs.GetDedicatedHostsOperationLock[];
    /**
     * Save the result to the file.
     */
    outputFile?: string;
    /**
     * The ID of the resource group to which the ECS Dedicated Host belongs.
     */
    resourceGroupId?: string;
    /**
     * The status of the ECS Dedicated Host. Valid Value: `Available`, `Creating`, `PermanentFailure`, `Released`, `UnderAssessment`.
     */
    status?: string;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: {[key: string]: string};
    /**
     * The zone ID of the ECS Dedicated Host.
     */
    zoneId?: string;
}

/**
 * A collection of values returned by getDedicatedHosts.
 */
export interface GetDedicatedHostsResult {
    /**
     * ID of the ECS Dedicated Host.
     */
    readonly dedicatedHostId?: string;
    /**
     * The name of the dedicated host.
     */
    readonly dedicatedHostName?: string;
    /**
     * The type of the dedicated host.
     */
    readonly dedicatedHostType?: string;
    /**
     * A list of ECS Dedicated Hosts. Each element contains the following attributes:
     */
    readonly hosts: outputs.ecs.GetDedicatedHostsHost[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly nameRegex?: string;
    /**
     * A list of ECS Dedicated Host names.
     */
    readonly names: string[];
    /**
     * (Available since v1.123.1) The operation_locks. contains the following attribute:
     */
    readonly operationLocks?: outputs.ecs.GetDedicatedHostsOperationLock[];
    readonly outputFile?: string;
    /**
     * The ID of the resource group to which the dedicated host belongs.
     */
    readonly resourceGroupId?: string;
    /**
     * The service status of the dedicated host.
     */
    readonly status?: string;
    /**
     * The tags of the dedicated host.
     */
    readonly tags?: {[key: string]: string};
    /**
     * The zone id of the dedicated host.
     */
    readonly zoneId?: string;
}
/**
 * This data source provides the ECS Dedicated Hosts of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.91.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new alicloud.ecs.DedicatedHost("default", {
 *     dedicatedHostType: "ddh.c5",
 *     description: "From_Terraform",
 *     dedicatedHostName: name,
 *     actionOnMaintenance: "Migrate",
 *     tags: {
 *         Create: "TF",
 *         For: "ddh-test",
 *     },
 * });
 * const ids = alicloud.ecs.getDedicatedHostsOutput({
 *     ids: [_default.id],
 * });
 * export const ecsDedicatedHostId0 = ids.apply(ids => ids.hosts?.[0]?.id);
 * ```
 */
export function getDedicatedHostsOutput(args?: GetDedicatedHostsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDedicatedHostsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("alicloud:ecs/getDedicatedHosts:getDedicatedHosts", {
        "dedicatedHostId": args.dedicatedHostId,
        "dedicatedHostName": args.dedicatedHostName,
        "dedicatedHostType": args.dedicatedHostType,
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "operationLocks": args.operationLocks,
        "outputFile": args.outputFile,
        "resourceGroupId": args.resourceGroupId,
        "status": args.status,
        "tags": args.tags,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDedicatedHosts.
 */
export interface GetDedicatedHostsOutputArgs {
    /**
     * The ID of ECS Dedicated Host.
     */
    dedicatedHostId?: pulumi.Input<string>;
    /**
     * The name of ECS Dedicated Host.
     */
    dedicatedHostName?: pulumi.Input<string>;
    /**
     * The type of the dedicated host.
     */
    dedicatedHostType?: pulumi.Input<string>;
    /**
     * A list of ECS Dedicated Host ids.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A regex string to filter results by the ECS Dedicated Host name.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * The reason why the dedicated host resource is locked. See `operationLocks` below.
     */
    operationLocks?: pulumi.Input<pulumi.Input<inputs.ecs.GetDedicatedHostsOperationLockArgs>[]>;
    /**
     * Save the result to the file.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The ID of the resource group to which the ECS Dedicated Host belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The status of the ECS Dedicated Host. Valid Value: `Available`, `Creating`, `PermanentFailure`, `Released`, `UnderAssessment`.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The zone ID of the ECS Dedicated Host.
     */
    zoneId?: pulumi.Input<string>;
}
