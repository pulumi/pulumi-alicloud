// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ECS Network Interface Attachment resource.
 *
 * For information about ECS Network Interface Attachment and how to use it, see [What is Network Interface Attachment](https://www.alibabacloud.com/help/en/doc-detail/58515.htm).
 *
 * > **NOTE:** Available in v1.123.1+.
 *
 * ## Import
 *
 * ECS Network Interface Attachment can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:ecs/ecsNetworkInterfaceAttachment:EcsNetworkInterfaceAttachment example eni-abcd1234:i-abcd1234
 * ```
 */
export class EcsNetworkInterfaceAttachment extends pulumi.CustomResource {
    /**
     * Get an existing EcsNetworkInterfaceAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsNetworkInterfaceAttachmentState, opts?: pulumi.CustomResourceOptions): EcsNetworkInterfaceAttachment {
        return new EcsNetworkInterfaceAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ecs/ecsNetworkInterfaceAttachment:EcsNetworkInterfaceAttachment';

    /**
     * Returns true if the given object is an instance of EcsNetworkInterfaceAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsNetworkInterfaceAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsNetworkInterfaceAttachment.__pulumiType;
    }

    /**
     * The instance id.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The network interface id.
     */
    public readonly networkInterfaceId!: pulumi.Output<string>;
    /**
     * The trunk network instance id.
     */
    public readonly trunkNetworkInstanceId!: pulumi.Output<string | undefined>;
    /**
     * The wait for network configuration ready.
     */
    public readonly waitForNetworkConfigurationReady!: pulumi.Output<boolean | undefined>;

    /**
     * Create a EcsNetworkInterfaceAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcsNetworkInterfaceAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsNetworkInterfaceAttachmentArgs | EcsNetworkInterfaceAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsNetworkInterfaceAttachmentState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["trunkNetworkInstanceId"] = state ? state.trunkNetworkInstanceId : undefined;
            resourceInputs["waitForNetworkConfigurationReady"] = state ? state.waitForNetworkConfigurationReady : undefined;
        } else {
            const args = argsOrState as EcsNetworkInterfaceAttachmentArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.networkInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceId'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            resourceInputs["trunkNetworkInstanceId"] = args ? args.trunkNetworkInstanceId : undefined;
            resourceInputs["waitForNetworkConfigurationReady"] = args ? args.waitForNetworkConfigurationReady : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsNetworkInterfaceAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EcsNetworkInterfaceAttachment resources.
 */
export interface EcsNetworkInterfaceAttachmentState {
    /**
     * The instance id.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The network interface id.
     */
    networkInterfaceId?: pulumi.Input<string>;
    /**
     * The trunk network instance id.
     */
    trunkNetworkInstanceId?: pulumi.Input<string>;
    /**
     * The wait for network configuration ready.
     */
    waitForNetworkConfigurationReady?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EcsNetworkInterfaceAttachment resource.
 */
export interface EcsNetworkInterfaceAttachmentArgs {
    /**
     * The instance id.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The network interface id.
     */
    networkInterfaceId: pulumi.Input<string>;
    /**
     * The trunk network instance id.
     */
    trunkNetworkInstanceId?: pulumi.Input<string>;
    /**
     * The wait for network configuration ready.
     */
    waitForNetworkConfigurationReady?: pulumi.Input<boolean>;
}
