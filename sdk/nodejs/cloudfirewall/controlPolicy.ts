// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Firewall Control Policy resource.
 *
 * For information about Cloud Firewall Control Policy and how to use it, see [What is Control Policy](https://www.alibabacloud.com/help/doc-detail/138867.htm).
 *
 * > **NOTE:** Available in v1.129.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.cloudfirewall.ControlPolicy("example", {
 *     aclAction: "accept",
 *     applicationName: "ANY",
 *     description: "example",
 *     destination: "100.1.1.0/24",
 *     destinationType: "net",
 *     direction: "out",
 *     proto: "ANY",
 *     source: "1.2.3.0/24",
 *     sourceType: "net",
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Firewall Control Policy can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cloudfirewall/controlPolicy:ControlPolicy example <acl_uuid>:<direction>
 * ```
 */
export class ControlPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ControlPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ControlPolicyState, opts?: pulumi.CustomResourceOptions): ControlPolicy {
        return new ControlPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cloudfirewall/controlPolicy:ControlPolicy';

    /**
     * Returns true if the given object is an instance of ControlPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ControlPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ControlPolicy.__pulumiType;
    }

    /**
     * The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
     */
    public readonly aclAction!: pulumi.Output<string>;
    /**
     * (Available in v1.148.0+) The unique ID of the access control policy.
     */
    public /*out*/ readonly aclUuid!: pulumi.Output<string>;
    /**
     * The application type that the access control policy supports.If `direction` is `in`, the valid value is `ANY`. If `direction` is `out`, the valid values are `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
     */
    public readonly applicationName!: pulumi.Output<string>;
    /**
     * The description of the access control policy.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The destination port defined in the access control policy.
     */
    public readonly destPort!: pulumi.Output<string>;
    /**
     * The destination port address book defined in the access control policy.
     */
    public readonly destPortGroup!: pulumi.Output<string>;
    /**
     * The destination port type defined in the access control policy. Valid values: `group`, `port`.
     */
    public readonly destPortType!: pulumi.Output<string>;
    /**
     * The destination address defined in the access control policy.
     */
    public readonly destination!: pulumi.Output<string>;
    /**
     * DestinationType. Valid values: If Direction is `in`, the valid values are `net`, `group`. If `direction` is `out`, the valid values are `net`, `group`, `domain`, `location`.
     */
    public readonly destinationType!: pulumi.Output<string>;
    /**
     * Direction. Valid values: `in`, `out`.
     */
    public readonly direction!: pulumi.Output<string>;
    /**
     * The ip version.
     */
    public readonly ipVersion!: pulumi.Output<string | undefined>;
    /**
     * DestPortGroupPorts. Valid values: `en`, `zh`.
     */
    public readonly lang!: pulumi.Output<string | undefined>;
    /**
     * Proto. Valid values: ` TCP`, ` UDP`, `ANY`, `ICMP`.
     */
    public readonly proto!: pulumi.Output<string>;
    /**
     * Specifies whether the access control policy is enabled. By default, an access control policy is enabled after it is created. Valid values: `true`, `false`.
     */
    public readonly release!: pulumi.Output<string>;
    /**
     * Source.
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * The source ip.
     */
    public readonly sourceIp!: pulumi.Output<string>;
    /**
     * SourceType. Valid values: If `direction` is `in`, the valid values are `net`, `group`, `location`. If `direction` is `out`, the valid values are `net`, `group`.
     */
    public readonly sourceType!: pulumi.Output<string>;

    /**
     * Create a ControlPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ControlPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ControlPolicyArgs | ControlPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ControlPolicyState | undefined;
            resourceInputs["aclAction"] = state ? state.aclAction : undefined;
            resourceInputs["aclUuid"] = state ? state.aclUuid : undefined;
            resourceInputs["applicationName"] = state ? state.applicationName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destPort"] = state ? state.destPort : undefined;
            resourceInputs["destPortGroup"] = state ? state.destPortGroup : undefined;
            resourceInputs["destPortType"] = state ? state.destPortType : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["destinationType"] = state ? state.destinationType : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["lang"] = state ? state.lang : undefined;
            resourceInputs["proto"] = state ? state.proto : undefined;
            resourceInputs["release"] = state ? state.release : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
        } else {
            const args = argsOrState as ControlPolicyArgs | undefined;
            if ((!args || args.aclAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclAction'");
            }
            if ((!args || args.applicationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationName'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.destinationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationType'");
            }
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.proto === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proto'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.sourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            resourceInputs["aclAction"] = args ? args.aclAction : undefined;
            resourceInputs["applicationName"] = args ? args.applicationName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destPort"] = args ? args.destPort : undefined;
            resourceInputs["destPortGroup"] = args ? args.destPortGroup : undefined;
            resourceInputs["destPortType"] = args ? args.destPortType : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["destinationType"] = args ? args.destinationType : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["lang"] = args ? args.lang : undefined;
            resourceInputs["proto"] = args ? args.proto : undefined;
            resourceInputs["release"] = args ? args.release : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["aclUuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ControlPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ControlPolicy resources.
 */
export interface ControlPolicyState {
    /**
     * The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
     */
    aclAction?: pulumi.Input<string>;
    /**
     * (Available in v1.148.0+) The unique ID of the access control policy.
     */
    aclUuid?: pulumi.Input<string>;
    /**
     * The application type that the access control policy supports.If `direction` is `in`, the valid value is `ANY`. If `direction` is `out`, the valid values are `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
     */
    applicationName?: pulumi.Input<string>;
    /**
     * The description of the access control policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination port defined in the access control policy.
     */
    destPort?: pulumi.Input<string>;
    /**
     * The destination port address book defined in the access control policy.
     */
    destPortGroup?: pulumi.Input<string>;
    /**
     * The destination port type defined in the access control policy. Valid values: `group`, `port`.
     */
    destPortType?: pulumi.Input<string>;
    /**
     * The destination address defined in the access control policy.
     */
    destination?: pulumi.Input<string>;
    /**
     * DestinationType. Valid values: If Direction is `in`, the valid values are `net`, `group`. If `direction` is `out`, the valid values are `net`, `group`, `domain`, `location`.
     */
    destinationType?: pulumi.Input<string>;
    /**
     * Direction. Valid values: `in`, `out`.
     */
    direction?: pulumi.Input<string>;
    /**
     * The ip version.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * DestPortGroupPorts. Valid values: `en`, `zh`.
     */
    lang?: pulumi.Input<string>;
    /**
     * Proto. Valid values: ` TCP`, ` UDP`, `ANY`, `ICMP`.
     */
    proto?: pulumi.Input<string>;
    /**
     * Specifies whether the access control policy is enabled. By default, an access control policy is enabled after it is created. Valid values: `true`, `false`.
     */
    release?: pulumi.Input<string>;
    /**
     * Source.
     */
    source?: pulumi.Input<string>;
    /**
     * The source ip.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * SourceType. Valid values: If `direction` is `in`, the valid values are `net`, `group`, `location`. If `direction` is `out`, the valid values are `net`, `group`.
     */
    sourceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ControlPolicy resource.
 */
export interface ControlPolicyArgs {
    /**
     * The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
     */
    aclAction: pulumi.Input<string>;
    /**
     * The application type that the access control policy supports.If `direction` is `in`, the valid value is `ANY`. If `direction` is `out`, the valid values are `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
     */
    applicationName: pulumi.Input<string>;
    /**
     * The description of the access control policy.
     */
    description: pulumi.Input<string>;
    /**
     * The destination port defined in the access control policy.
     */
    destPort?: pulumi.Input<string>;
    /**
     * The destination port address book defined in the access control policy.
     */
    destPortGroup?: pulumi.Input<string>;
    /**
     * The destination port type defined in the access control policy. Valid values: `group`, `port`.
     */
    destPortType?: pulumi.Input<string>;
    /**
     * The destination address defined in the access control policy.
     */
    destination: pulumi.Input<string>;
    /**
     * DestinationType. Valid values: If Direction is `in`, the valid values are `net`, `group`. If `direction` is `out`, the valid values are `net`, `group`, `domain`, `location`.
     */
    destinationType: pulumi.Input<string>;
    /**
     * Direction. Valid values: `in`, `out`.
     */
    direction: pulumi.Input<string>;
    /**
     * The ip version.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * DestPortGroupPorts. Valid values: `en`, `zh`.
     */
    lang?: pulumi.Input<string>;
    /**
     * Proto. Valid values: ` TCP`, ` UDP`, `ANY`, `ICMP`.
     */
    proto: pulumi.Input<string>;
    /**
     * Specifies whether the access control policy is enabled. By default, an access control policy is enabled after it is created. Valid values: `true`, `false`.
     */
    release?: pulumi.Input<string>;
    /**
     * Source.
     */
    source: pulumi.Input<string>;
    /**
     * The source ip.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * SourceType. Valid values: If `direction` is `in`, the valid values are `net`, `group`, `location`. If `direction` is `out`, the valid values are `net`, `group`.
     */
    sourceType: pulumi.Input<string>;
}
