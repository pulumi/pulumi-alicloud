// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Firewall Control Policy resource.
 *
 * For information about Cloud Firewall Control Policy and how to use it, see [What is Control Policy](https://www.alibabacloud.com/help/doc-detail/138867.htm).
 *
 * > **NOTE:** Available since v1.129.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new alicloud.cloudfirewall.ControlPolicy("default", {
 *     direction: "in",
 *     applicationName: "ANY",
 *     description: name,
 *     aclAction: "accept",
 *     source: "127.0.0.1/32",
 *     sourceType: "net",
 *     destination: "127.0.0.2/32",
 *     destinationType: "net",
 *     proto: "ANY",
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Firewall Control Policy can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cloudfirewall/controlPolicy:ControlPolicy example <acl_uuid>:<direction>
 * ```
 */
export class ControlPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ControlPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ControlPolicyState, opts?: pulumi.CustomResourceOptions): ControlPolicy {
        return new ControlPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cloudfirewall/controlPolicy:ControlPolicy';

    /**
     * Returns true if the given object is an instance of ControlPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ControlPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ControlPolicy.__pulumiType;
    }

    /**
     * The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
     */
    declare public readonly aclAction: pulumi.Output<string>;
    /**
     * (Available since v1.148.0) The unique ID of the access control policy.
     */
    declare public /*out*/ readonly aclUuid: pulumi.Output<string>;
    /**
     * The application type supported by the access control policy. Valid values: `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
     * > **NOTE:** If `proto` is set to `TCP`, you can set `applicationName` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `applicationName` to `ANY`.
     */
    declare public readonly applicationName: pulumi.Output<string | undefined>;
    /**
     * The application types supported by the access control policy.
     * > **NOTE:** If `proto` is set to `TCP`, you can set `applicationNameList` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `applicationNameList` to `["ANY"]`. From version 1.232.0, You must specify at least one of the `applicationNameList` and `applicationName`. If you specify both `applicationNameList` and `applicationName`, only the `applicationNameList` takes effect.
     */
    declare public readonly applicationNameLists: pulumi.Output<string[] | undefined>;
    /**
     * (Available since v1.232.0) The time when the access control policy was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The description of the access control policy.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The destination port in the access control policy. **Note:** If `destPortType` is set to `port`, you must specify `destPort`.
     */
    declare public readonly destPort: pulumi.Output<string>;
    /**
     * The name of the destination port address book in the access control policy. **Note:** If `destPortType` is set to `group`, you must specify `destPortGroup`.
     */
    declare public readonly destPortGroup: pulumi.Output<string | undefined>;
    /**
     * The type of the destination port in the access control policy. Valid values: `port`, `group`.
     */
    declare public readonly destPortType: pulumi.Output<string>;
    /**
     * The destination address in the access control policy.
     */
    declare public readonly destination: pulumi.Output<string>;
    /**
     * The type of the destination address in the access control policy. Valid values: `net`, `group`, `domain`, `location`.
     */
    declare public readonly destinationType: pulumi.Output<string>;
    /**
     * The direction of the traffic to which the access control policy applies. Valid values: `in`, `out`.
     */
    declare public readonly direction: pulumi.Output<string>;
    /**
     * The domain name resolution method of the access control policy. Valid values:
     * - `FQDN`: Fully qualified domain name (FQDN)-based resolution.
     * - `DNS`: DNS-based dynamic resolution.
     * - `FQDN_AND_DNS`: FQDN and DNS-based dynamic resolution.
     */
    declare public readonly domainResolveType: pulumi.Output<string | undefined>;
    /**
     * The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the start time.
     * > **NOTE:** If `repeatType` is set to `None`, `Daily`, `Weekly`, or `Monthly`, `startTime` and `endTime` must be set.
     */
    declare public readonly endTime: pulumi.Output<number | undefined>;
    /**
     * The IP version supported by the access control policy. Default value: `4`. Valid values:
     */
    declare public readonly ipVersion: pulumi.Output<string>;
    /**
     * The language of the content within the request and response. Valid values: `zh`, `en`.
     */
    declare public readonly lang: pulumi.Output<string | undefined>;
    /**
     * The protocol type supported by the access control policy. Valid values: `ANY`, ` TCP`, `UDP`, `ICMP`.
     */
    declare public readonly proto: pulumi.Output<string>;
    /**
     * The status of the access control policy. Valid values: `true`, `false`.
     */
    declare public readonly release: pulumi.Output<string>;
    /**
     * The days of a week or of a month on which the access control policy takes effect. Valid values:
     * - If `repeatType` is set to `Weekly`. Valid values: `0` to `6`.
     * - If `repeatType` is set to `Monthly`. Valid values: `1` to `31`.
     * > **NOTE:** If `repeatType` is set to `Weekly`, or `Monthly`, `repeatDays` must be set.
     */
    declare public readonly repeatDays: pulumi.Output<number[] | undefined>;
    /**
     * The point in time when the recurrence ends. Example: `23:30`. The end time must be on the hour or on the half hour, and at least 30 minutes later than the start time.
     * > **NOTE:** If `repeatType` is set to `Daily`, `Weekly`, or `Monthly`, `repeatStartTime` and `repeatEndTime` must be set.
     */
    declare public readonly repeatEndTime: pulumi.Output<string | undefined>;
    /**
     * The point in time when the recurrence starts. Example: `08:00`. The start time must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
     */
    declare public readonly repeatStartTime: pulumi.Output<string | undefined>;
    /**
     * The recurrence type for the access control policy to take effect. Default value: `Permanent`. Valid values:
     * - `Permanent`: The policy always takes effect.
     * - `None`: The policy takes effect for only once.
     * - `Daily`: The policy takes effect on a daily basis.
     * - `Weekly`: The policy takes effect on a weekly basis.
     * - `Monthly`: The policy takes effect on a monthly basis.
     */
    declare public readonly repeatType: pulumi.Output<string>;
    /**
     * The source address in the access control policy.
     */
    declare public readonly source: pulumi.Output<string>;
    /**
     * The source IP address of the request.
     */
    declare public readonly sourceIp: pulumi.Output<string | undefined>;
    /**
     * The type of the source address in the access control policy. Valid values: `net`, `group`, `location`.
     */
    declare public readonly sourceType: pulumi.Output<string>;
    /**
     * The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
     */
    declare public readonly startTime: pulumi.Output<number | undefined>;

    /**
     * Create a ControlPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ControlPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ControlPolicyArgs | ControlPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ControlPolicyState | undefined;
            resourceInputs["aclAction"] = state?.aclAction;
            resourceInputs["aclUuid"] = state?.aclUuid;
            resourceInputs["applicationName"] = state?.applicationName;
            resourceInputs["applicationNameLists"] = state?.applicationNameLists;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["destPort"] = state?.destPort;
            resourceInputs["destPortGroup"] = state?.destPortGroup;
            resourceInputs["destPortType"] = state?.destPortType;
            resourceInputs["destination"] = state?.destination;
            resourceInputs["destinationType"] = state?.destinationType;
            resourceInputs["direction"] = state?.direction;
            resourceInputs["domainResolveType"] = state?.domainResolveType;
            resourceInputs["endTime"] = state?.endTime;
            resourceInputs["ipVersion"] = state?.ipVersion;
            resourceInputs["lang"] = state?.lang;
            resourceInputs["proto"] = state?.proto;
            resourceInputs["release"] = state?.release;
            resourceInputs["repeatDays"] = state?.repeatDays;
            resourceInputs["repeatEndTime"] = state?.repeatEndTime;
            resourceInputs["repeatStartTime"] = state?.repeatStartTime;
            resourceInputs["repeatType"] = state?.repeatType;
            resourceInputs["source"] = state?.source;
            resourceInputs["sourceIp"] = state?.sourceIp;
            resourceInputs["sourceType"] = state?.sourceType;
            resourceInputs["startTime"] = state?.startTime;
        } else {
            const args = argsOrState as ControlPolicyArgs | undefined;
            if (args?.aclAction === undefined && !opts.urn) {
                throw new Error("Missing required property 'aclAction'");
            }
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.destination === undefined && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if (args?.destinationType === undefined && !opts.urn) {
                throw new Error("Missing required property 'destinationType'");
            }
            if (args?.direction === undefined && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if (args?.proto === undefined && !opts.urn) {
                throw new Error("Missing required property 'proto'");
            }
            if (args?.source === undefined && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if (args?.sourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            resourceInputs["aclAction"] = args?.aclAction;
            resourceInputs["applicationName"] = args?.applicationName;
            resourceInputs["applicationNameLists"] = args?.applicationNameLists;
            resourceInputs["description"] = args?.description;
            resourceInputs["destPort"] = args?.destPort;
            resourceInputs["destPortGroup"] = args?.destPortGroup;
            resourceInputs["destPortType"] = args?.destPortType;
            resourceInputs["destination"] = args?.destination;
            resourceInputs["destinationType"] = args?.destinationType;
            resourceInputs["direction"] = args?.direction;
            resourceInputs["domainResolveType"] = args?.domainResolveType;
            resourceInputs["endTime"] = args?.endTime;
            resourceInputs["ipVersion"] = args?.ipVersion;
            resourceInputs["lang"] = args?.lang;
            resourceInputs["proto"] = args?.proto;
            resourceInputs["release"] = args?.release;
            resourceInputs["repeatDays"] = args?.repeatDays;
            resourceInputs["repeatEndTime"] = args?.repeatEndTime;
            resourceInputs["repeatStartTime"] = args?.repeatStartTime;
            resourceInputs["repeatType"] = args?.repeatType;
            resourceInputs["source"] = args?.source;
            resourceInputs["sourceIp"] = args?.sourceIp;
            resourceInputs["sourceType"] = args?.sourceType;
            resourceInputs["startTime"] = args?.startTime;
            resourceInputs["aclUuid"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ControlPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ControlPolicy resources.
 */
export interface ControlPolicyState {
    /**
     * The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
     */
    aclAction?: pulumi.Input<string>;
    /**
     * (Available since v1.148.0) The unique ID of the access control policy.
     */
    aclUuid?: pulumi.Input<string>;
    /**
     * The application type supported by the access control policy. Valid values: `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
     * > **NOTE:** If `proto` is set to `TCP`, you can set `applicationName` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `applicationName` to `ANY`.
     */
    applicationName?: pulumi.Input<string>;
    /**
     * The application types supported by the access control policy.
     * > **NOTE:** If `proto` is set to `TCP`, you can set `applicationNameList` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `applicationNameList` to `["ANY"]`. From version 1.232.0, You must specify at least one of the `applicationNameList` and `applicationName`. If you specify both `applicationNameList` and `applicationName`, only the `applicationNameList` takes effect.
     */
    applicationNameLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Available since v1.232.0) The time when the access control policy was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The description of the access control policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination port in the access control policy. **Note:** If `destPortType` is set to `port`, you must specify `destPort`.
     */
    destPort?: pulumi.Input<string>;
    /**
     * The name of the destination port address book in the access control policy. **Note:** If `destPortType` is set to `group`, you must specify `destPortGroup`.
     */
    destPortGroup?: pulumi.Input<string>;
    /**
     * The type of the destination port in the access control policy. Valid values: `port`, `group`.
     */
    destPortType?: pulumi.Input<string>;
    /**
     * The destination address in the access control policy.
     */
    destination?: pulumi.Input<string>;
    /**
     * The type of the destination address in the access control policy. Valid values: `net`, `group`, `domain`, `location`.
     */
    destinationType?: pulumi.Input<string>;
    /**
     * The direction of the traffic to which the access control policy applies. Valid values: `in`, `out`.
     */
    direction?: pulumi.Input<string>;
    /**
     * The domain name resolution method of the access control policy. Valid values:
     * - `FQDN`: Fully qualified domain name (FQDN)-based resolution.
     * - `DNS`: DNS-based dynamic resolution.
     * - `FQDN_AND_DNS`: FQDN and DNS-based dynamic resolution.
     */
    domainResolveType?: pulumi.Input<string>;
    /**
     * The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the start time.
     * > **NOTE:** If `repeatType` is set to `None`, `Daily`, `Weekly`, or `Monthly`, `startTime` and `endTime` must be set.
     */
    endTime?: pulumi.Input<number>;
    /**
     * The IP version supported by the access control policy. Default value: `4`. Valid values:
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * The language of the content within the request and response. Valid values: `zh`, `en`.
     */
    lang?: pulumi.Input<string>;
    /**
     * The protocol type supported by the access control policy. Valid values: `ANY`, ` TCP`, `UDP`, `ICMP`.
     */
    proto?: pulumi.Input<string>;
    /**
     * The status of the access control policy. Valid values: `true`, `false`.
     */
    release?: pulumi.Input<string>;
    /**
     * The days of a week or of a month on which the access control policy takes effect. Valid values:
     * - If `repeatType` is set to `Weekly`. Valid values: `0` to `6`.
     * - If `repeatType` is set to `Monthly`. Valid values: `1` to `31`.
     * > **NOTE:** If `repeatType` is set to `Weekly`, or `Monthly`, `repeatDays` must be set.
     */
    repeatDays?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The point in time when the recurrence ends. Example: `23:30`. The end time must be on the hour or on the half hour, and at least 30 minutes later than the start time.
     * > **NOTE:** If `repeatType` is set to `Daily`, `Weekly`, or `Monthly`, `repeatStartTime` and `repeatEndTime` must be set.
     */
    repeatEndTime?: pulumi.Input<string>;
    /**
     * The point in time when the recurrence starts. Example: `08:00`. The start time must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
     */
    repeatStartTime?: pulumi.Input<string>;
    /**
     * The recurrence type for the access control policy to take effect. Default value: `Permanent`. Valid values:
     * - `Permanent`: The policy always takes effect.
     * - `None`: The policy takes effect for only once.
     * - `Daily`: The policy takes effect on a daily basis.
     * - `Weekly`: The policy takes effect on a weekly basis.
     * - `Monthly`: The policy takes effect on a monthly basis.
     */
    repeatType?: pulumi.Input<string>;
    /**
     * The source address in the access control policy.
     */
    source?: pulumi.Input<string>;
    /**
     * The source IP address of the request.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * The type of the source address in the access control policy. Valid values: `net`, `group`, `location`.
     */
    sourceType?: pulumi.Input<string>;
    /**
     * The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
     */
    startTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ControlPolicy resource.
 */
export interface ControlPolicyArgs {
    /**
     * The action that Cloud Firewall performs on the traffic. Valid values: `accept`, `drop`, `log`.
     */
    aclAction: pulumi.Input<string>;
    /**
     * The application type supported by the access control policy. Valid values: `ANY`, `HTTP`, `HTTPS`, `MQTT`, `Memcache`, `MongoDB`, `MySQL`, `RDP`, `Redis`, `SMTP`, `SMTPS`, `SSH`, `SSL`, `VNC`.
     * > **NOTE:** If `proto` is set to `TCP`, you can set `applicationName` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `applicationName` to `ANY`.
     */
    applicationName?: pulumi.Input<string>;
    /**
     * The application types supported by the access control policy.
     * > **NOTE:** If `proto` is set to `TCP`, you can set `applicationNameList` to any valid value. If `proto` is set to `UDP`, `ICMP`, or `ANY`, you can only set `applicationNameList` to `["ANY"]`. From version 1.232.0, You must specify at least one of the `applicationNameList` and `applicationName`. If you specify both `applicationNameList` and `applicationName`, only the `applicationNameList` takes effect.
     */
    applicationNameLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the access control policy.
     */
    description: pulumi.Input<string>;
    /**
     * The destination port in the access control policy. **Note:** If `destPortType` is set to `port`, you must specify `destPort`.
     */
    destPort?: pulumi.Input<string>;
    /**
     * The name of the destination port address book in the access control policy. **Note:** If `destPortType` is set to `group`, you must specify `destPortGroup`.
     */
    destPortGroup?: pulumi.Input<string>;
    /**
     * The type of the destination port in the access control policy. Valid values: `port`, `group`.
     */
    destPortType?: pulumi.Input<string>;
    /**
     * The destination address in the access control policy.
     */
    destination: pulumi.Input<string>;
    /**
     * The type of the destination address in the access control policy. Valid values: `net`, `group`, `domain`, `location`.
     */
    destinationType: pulumi.Input<string>;
    /**
     * The direction of the traffic to which the access control policy applies. Valid values: `in`, `out`.
     */
    direction: pulumi.Input<string>;
    /**
     * The domain name resolution method of the access control policy. Valid values:
     * - `FQDN`: Fully qualified domain name (FQDN)-based resolution.
     * - `DNS`: DNS-based dynamic resolution.
     * - `FQDN_AND_DNS`: FQDN and DNS-based dynamic resolution.
     */
    domainResolveType?: pulumi.Input<string>;
    /**
     * The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the start time.
     * > **NOTE:** If `repeatType` is set to `None`, `Daily`, `Weekly`, or `Monthly`, `startTime` and `endTime` must be set.
     */
    endTime?: pulumi.Input<number>;
    /**
     * The IP version supported by the access control policy. Default value: `4`. Valid values:
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * The language of the content within the request and response. Valid values: `zh`, `en`.
     */
    lang?: pulumi.Input<string>;
    /**
     * The protocol type supported by the access control policy. Valid values: `ANY`, ` TCP`, `UDP`, `ICMP`.
     */
    proto: pulumi.Input<string>;
    /**
     * The status of the access control policy. Valid values: `true`, `false`.
     */
    release?: pulumi.Input<string>;
    /**
     * The days of a week or of a month on which the access control policy takes effect. Valid values:
     * - If `repeatType` is set to `Weekly`. Valid values: `0` to `6`.
     * - If `repeatType` is set to `Monthly`. Valid values: `1` to `31`.
     * > **NOTE:** If `repeatType` is set to `Weekly`, or `Monthly`, `repeatDays` must be set.
     */
    repeatDays?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The point in time when the recurrence ends. Example: `23:30`. The end time must be on the hour or on the half hour, and at least 30 minutes later than the start time.
     * > **NOTE:** If `repeatType` is set to `Daily`, `Weekly`, or `Monthly`, `repeatStartTime` and `repeatEndTime` must be set.
     */
    repeatEndTime?: pulumi.Input<string>;
    /**
     * The point in time when the recurrence starts. Example: `08:00`. The start time must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
     */
    repeatStartTime?: pulumi.Input<string>;
    /**
     * The recurrence type for the access control policy to take effect. Default value: `Permanent`. Valid values:
     * - `Permanent`: The policy always takes effect.
     * - `None`: The policy takes effect for only once.
     * - `Daily`: The policy takes effect on a daily basis.
     * - `Weekly`: The policy takes effect on a weekly basis.
     * - `Monthly`: The policy takes effect on a monthly basis.
     */
    repeatType?: pulumi.Input<string>;
    /**
     * The source address in the access control policy.
     */
    source: pulumi.Input<string>;
    /**
     * The source IP address of the request.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * The type of the source address in the access control policy. Valid values: `net`, `group`, `location`.
     */
    sourceType: pulumi.Input<string>;
    /**
     * The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.
     */
    startTime?: pulumi.Input<number>;
}
