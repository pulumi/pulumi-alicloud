// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Firewall Nat Firewall resource.
 *
 * For information about Cloud Firewall Nat Firewall and how to use it, see [What is Nat Firewall](https://www.alibabacloud.com/help/zh/cloud-firewall/developer-reference/api-cloudfw-2017-12-07-createsecurityproxy).
 *
 * > **NOTE:** Available since v1.224.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultikZ0gD = new alicloud.vpc.Network("defaultikZ0gD", {
 *     cidrBlock: "172.16.0.0/12",
 *     vpcName: name,
 * });
 * const defaultp4O7qi = new alicloud.vpc.Switch("defaultp4O7qi", {
 *     vpcId: defaultikZ0gD.id,
 *     cidrBlock: "172.16.6.0/24",
 *     vswitchName: name,
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 * });
 * const default2iRZpC = new alicloud.vpc.NatGateway("default2iRZpC", {
 *     eipBindMode: "MULTI_BINDED",
 *     vpcId: defaultikZ0gD.id,
 *     natGatewayName: name,
 *     paymentType: "PayAsYouGo",
 *     vswitchId: defaultp4O7qi.id,
 *     natType: "Enhanced",
 *     networkType: "internet",
 * });
 * const defaultyiRwgs = new alicloud.ecs.EipAddress("defaultyiRwgs", {addressName: name});
 * const defaults2MTuO = new alicloud.ecs.EipAssociation("defaults2MTuO", {
 *     instanceId: default2iRZpC.id,
 *     allocationId: defaultyiRwgs.id,
 *     mode: "NAT",
 *     instanceType: "Nat",
 * });
 * const defaultAKE43g = new alicloud.vpc.SnatEntry("defaultAKE43g", {
 *     snatIp: defaultyiRwgs.ipAddress,
 *     snatTableId: default2iRZpC.snatTableIds,
 *     sourceVswitchId: defaultp4O7qi.id,
 * });
 * const defaultNatFirewall = new alicloud.cloudfirewall.NatFirewall("default", {
 *     natGatewayId: default2iRZpC.id,
 *     natRouteEntryLists: [{
 *         nexthopType: "NatGateway",
 *         routeTableId: defaultikZ0gD.routeTableId,
 *         nexthopId: default2iRZpC.id,
 *         destinationCidr: "0.0.0.0/0",
 *     }],
 *     firewallSwitch: "close",
 *     vswitchAuto: "true",
 *     status: "closed",
 *     regionNo: "cn-shenzhen",
 *     lang: "zh",
 *     proxyName: "CFW-example",
 *     vswitchId: defaultAKE43g.sourceVswitchId,
 *     strictMode: 0,
 *     vpcId: defaultikZ0gD.id,
 *     vswitchCidr: "172.16.5.0/24",
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Firewall Nat Firewall can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cloudfirewall/natFirewall:NatFirewall example <id>
 * ```
 */
export class NatFirewall extends pulumi.CustomResource {
    /**
     * Get an existing NatFirewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatFirewallState, opts?: pulumi.CustomResourceOptions): NatFirewall {
        return new NatFirewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cloudfirewall/natFirewall:NatFirewall';

    /**
     * Returns true if the given object is an instance of NatFirewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NatFirewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatFirewall.__pulumiType;
    }

    /**
     * Safety protection switch. Value:-**open**: open-**close**: close.
     */
    declare public readonly firewallSwitch: pulumi.Output<string | undefined>;
    /**
     * Lang.
     */
    declare public readonly lang: pulumi.Output<string | undefined>;
    /**
     * NAT gateway ID.
     */
    declare public readonly natGatewayId: pulumi.Output<string>;
    /**
     * The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
     */
    declare public readonly natRouteEntryLists: pulumi.Output<outputs.cloudfirewall.NatFirewallNatRouteEntryList[]>;
    /**
     * NAT firewall name.
     */
    declare public readonly proxyName: pulumi.Output<string>;
    /**
     * Region.
     */
    declare public readonly regionNo: pulumi.Output<string>;
    /**
     * The status of the resource.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
     */
    declare public readonly strictMode: pulumi.Output<number | undefined>;
    /**
     * The ID of the VPC instance.
     */
    declare public readonly vpcId: pulumi.Output<string>;
    /**
     * Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
     */
    declare public readonly vswitchAuto: pulumi.Output<string | undefined>;
    /**
     * The network segment of the virtual switch. Required for Switch automatic mode.
     */
    declare public readonly vswitchCidr: pulumi.Output<string | undefined>;
    /**
     * The switch ID. Required for switch manual mode.
     */
    declare public readonly vswitchId: pulumi.Output<string | undefined>;

    /**
     * Create a NatFirewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatFirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatFirewallArgs | NatFirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatFirewallState | undefined;
            resourceInputs["firewallSwitch"] = state?.firewallSwitch;
            resourceInputs["lang"] = state?.lang;
            resourceInputs["natGatewayId"] = state?.natGatewayId;
            resourceInputs["natRouteEntryLists"] = state?.natRouteEntryLists;
            resourceInputs["proxyName"] = state?.proxyName;
            resourceInputs["regionNo"] = state?.regionNo;
            resourceInputs["status"] = state?.status;
            resourceInputs["strictMode"] = state?.strictMode;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["vswitchAuto"] = state?.vswitchAuto;
            resourceInputs["vswitchCidr"] = state?.vswitchCidr;
            resourceInputs["vswitchId"] = state?.vswitchId;
        } else {
            const args = argsOrState as NatFirewallArgs | undefined;
            if (args?.natGatewayId === undefined && !opts.urn) {
                throw new Error("Missing required property 'natGatewayId'");
            }
            if (args?.natRouteEntryLists === undefined && !opts.urn) {
                throw new Error("Missing required property 'natRouteEntryLists'");
            }
            if (args?.proxyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'proxyName'");
            }
            if (args?.regionNo === undefined && !opts.urn) {
                throw new Error("Missing required property 'regionNo'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["firewallSwitch"] = args?.firewallSwitch;
            resourceInputs["lang"] = args?.lang;
            resourceInputs["natGatewayId"] = args?.natGatewayId;
            resourceInputs["natRouteEntryLists"] = args?.natRouteEntryLists;
            resourceInputs["proxyName"] = args?.proxyName;
            resourceInputs["regionNo"] = args?.regionNo;
            resourceInputs["status"] = args?.status;
            resourceInputs["strictMode"] = args?.strictMode;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["vswitchAuto"] = args?.vswitchAuto;
            resourceInputs["vswitchCidr"] = args?.vswitchCidr;
            resourceInputs["vswitchId"] = args?.vswitchId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NatFirewall.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NatFirewall resources.
 */
export interface NatFirewallState {
    /**
     * Safety protection switch. Value:-**open**: open-**close**: close.
     */
    firewallSwitch?: pulumi.Input<string>;
    /**
     * Lang.
     */
    lang?: pulumi.Input<string>;
    /**
     * NAT gateway ID.
     */
    natGatewayId?: pulumi.Input<string>;
    /**
     * The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
     */
    natRouteEntryLists?: pulumi.Input<pulumi.Input<inputs.cloudfirewall.NatFirewallNatRouteEntryList>[]>;
    /**
     * NAT firewall name.
     */
    proxyName?: pulumi.Input<string>;
    /**
     * Region.
     */
    regionNo?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
     */
    strictMode?: pulumi.Input<number>;
    /**
     * The ID of the VPC instance.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
     */
    vswitchAuto?: pulumi.Input<string>;
    /**
     * The network segment of the virtual switch. Required for Switch automatic mode.
     */
    vswitchCidr?: pulumi.Input<string>;
    /**
     * The switch ID. Required for switch manual mode.
     */
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NatFirewall resource.
 */
export interface NatFirewallArgs {
    /**
     * Safety protection switch. Value:-**open**: open-**close**: close.
     */
    firewallSwitch?: pulumi.Input<string>;
    /**
     * Lang.
     */
    lang?: pulumi.Input<string>;
    /**
     * NAT gateway ID.
     */
    natGatewayId: pulumi.Input<string>;
    /**
     * The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
     */
    natRouteEntryLists: pulumi.Input<pulumi.Input<inputs.cloudfirewall.NatFirewallNatRouteEntryList>[]>;
    /**
     * NAT firewall name.
     */
    proxyName: pulumi.Input<string>;
    /**
     * Region.
     */
    regionNo: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
     */
    strictMode?: pulumi.Input<number>;
    /**
     * The ID of the VPC instance.
     */
    vpcId: pulumi.Input<string>;
    /**
     * Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
     */
    vswitchAuto?: pulumi.Input<string>;
    /**
     * The network segment of the virtual switch. Required for Switch automatic mode.
     */
    vswitchCidr?: pulumi.Input<string>;
    /**
     * The switch ID. Required for switch manual mode.
     */
    vswitchId?: pulumi.Input<string>;
}
