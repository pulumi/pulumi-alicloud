// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a GWLB Listener resource.
 *
 * For information about GWLB Listener and how to use it, see [What is Listener](https://www.alibabacloud.com/help/en/slb/gateway-based-load-balancing-gwlb/developer-reference/api-gwlb-2024-04-15-createlistener).
 *
 * > **NOTE:** Available since v1.234.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const zoneId1 = config.get("zoneId1") || "cn-wulanchabu-b";
 * const _default = alicloud.resourcemanager.getResourceGroups({});
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     cidrBlock: "10.0.0.0/8",
 *     vpcName: name,
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vpcId: defaultNetwork.id,
 *     zoneId: zoneId1,
 *     cidrBlock: "10.0.0.0/24",
 *     vswitchName: std.format({
 *         input: "%s1",
 *         args: [name],
 *     }).then(invoke => invoke.result),
 * });
 * const defaultLoadBalancer = new alicloud.gwlb.LoadBalancer("default", {
 *     vpcId: defaultNetwork.id,
 *     loadBalancerName: std.format({
 *         input: "%s3",
 *         args: [name],
 *     }).then(invoke => invoke.result),
 *     zoneMappings: [{
 *         vswitchId: defaultSwitch.id,
 *         zoneId: zoneId1,
 *     }],
 *     addressIpVersion: "Ipv4",
 * });
 * const defaultServerGroup = new alicloud.gwlb.ServerGroup("default", {
 *     protocol: "GENEVE",
 *     serverGroupName: "tfaccgwlb62413",
 *     serverGroupType: "Ip",
 *     servers: [
 *         {
 *             serverId: "10.0.0.1",
 *             serverIp: "10.0.0.1",
 *             serverType: "Ip",
 *         },
 *         {
 *             serverId: "10.0.0.2",
 *             serverIp: "10.0.0.2",
 *             serverType: "Ip",
 *         },
 *         {
 *             serverId: "10.0.0.3",
 *             serverIp: "10.0.0.3",
 *             serverType: "Ip",
 *         },
 *     ],
 *     connectionDrainConfig: {
 *         connectionDrainEnabled: true,
 *         connectionDrainTimeout: 1,
 *     },
 *     resourceGroupId: _default.then(_default => _default.ids?.[0]),
 *     dryRun: false,
 *     healthCheckConfig: {
 *         healthCheckProtocol: "HTTP",
 *         healthCheckHttpCodes: [
 *             "http_2xx",
 *             "http_3xx",
 *             "http_4xx",
 *         ],
 *         healthCheckInterval: 10,
 *         healthCheckPath: "/health-check",
 *         unhealthyThreshold: 2,
 *         healthCheckConnectPort: 80,
 *         healthCheckConnectTimeout: 5,
 *         healthCheckDomain: "www.domain.com",
 *         healthCheckEnabled: true,
 *         healthyThreshold: 2,
 *     },
 *     vpcId: defaultNetwork.id,
 *     scheduler: "5TCH",
 * });
 * const defaultListener = new alicloud.gwlb.Listener("default", {
 *     listenerDescription: "example-tf-lsn",
 *     serverGroupId: defaultServerGroup.id,
 *     loadBalancerId: defaultLoadBalancer.id,
 * });
 * ```
 *
 * ## Import
 *
 * GWLB Listener can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:gwlb/listener:Listener example <id>
 * ```
 */
export class Listener extends pulumi.CustomResource {
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerState, opts?: pulumi.CustomResourceOptions): Listener {
        return new Listener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:gwlb/listener:Listener';

    /**
     * Returns true if the given object is an instance of Listener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Listener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listener.__pulumiType;
    }

    /**
     * Specifies whether to perform a dry run, without performing the actual request. Valid values:
     */
    declare public readonly dryRun: pulumi.Output<boolean | undefined>;
    /**
     * The description of the listener.
     *
     * The description must be 2 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (\_), and hyphens (-).
     */
    declare public readonly listenerDescription: pulumi.Output<string | undefined>;
    /**
     * The GWLB instance ID.
     */
    declare public readonly loadBalancerId: pulumi.Output<string>;
    /**
     * The region ID.
     */
    declare public /*out*/ readonly regionId: pulumi.Output<string>;
    /**
     * The server group ID.
     */
    declare public readonly serverGroupId: pulumi.Output<string>;
    /**
     * The status of the listener.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The tags. You can specify at most 20 tags in each call.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Listener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerArgs | ListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerState | undefined;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["listenerDescription"] = state?.listenerDescription;
            resourceInputs["loadBalancerId"] = state?.loadBalancerId;
            resourceInputs["regionId"] = state?.regionId;
            resourceInputs["serverGroupId"] = state?.serverGroupId;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as ListenerArgs | undefined;
            if (args?.loadBalancerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if (args?.serverGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serverGroupId'");
            }
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["listenerDescription"] = args?.listenerDescription;
            resourceInputs["loadBalancerId"] = args?.loadBalancerId;
            resourceInputs["serverGroupId"] = args?.serverGroupId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["regionId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Listener.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Listener resources.
 */
export interface ListenerState {
    /**
     * Specifies whether to perform a dry run, without performing the actual request. Valid values:
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The description of the listener.
     *
     * The description must be 2 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (\_), and hyphens (-).
     */
    listenerDescription?: pulumi.Input<string>;
    /**
     * The GWLB instance ID.
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * The region ID.
     */
    regionId?: pulumi.Input<string>;
    /**
     * The server group ID.
     */
    serverGroupId?: pulumi.Input<string>;
    /**
     * The status of the listener.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags. You can specify at most 20 tags in each call.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Listener resource.
 */
export interface ListenerArgs {
    /**
     * Specifies whether to perform a dry run, without performing the actual request. Valid values:
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The description of the listener.
     *
     * The description must be 2 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (\_), and hyphens (-).
     */
    listenerDescription?: pulumi.Input<string>;
    /**
     * The GWLB instance ID.
     */
    loadBalancerId: pulumi.Input<string>;
    /**
     * The server group ID.
     */
    serverGroupId: pulumi.Input<string>;
    /**
     * The tags. You can specify at most 20 tags in each call.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
