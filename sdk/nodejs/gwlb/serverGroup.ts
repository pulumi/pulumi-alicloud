// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a GWLB Server Group resource.
 *
 * For information about GWLB Server Group and how to use it, see [What is Server Group](https://www.alibabacloud.com/help/en/).
 *
 * > **NOTE:** Available since v1.234.0.
 *
 * ## Import
 *
 * GWLB Server Group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:gwlb/serverGroup:ServerGroup example <id>
 * ```
 */
export class ServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing ServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerGroupState, opts?: pulumi.CustomResourceOptions): ServerGroup {
        return new ServerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:gwlb/serverGroup:ServerGroup';

    /**
     * Returns true if the given object is an instance of ServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerGroup.__pulumiType;
    }

    /**
     * Connected graceful interrupt configuration. See `connectionDrainConfig` below.
     */
    public readonly connectionDrainConfig!: pulumi.Output<outputs.gwlb.ServerGroupConnectionDrainConfig>;
    /**
     * The creation time of the server group.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Specifies whether to perform only a dry run, without performing the actual request.
     */
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    /**
     * Health check configurations. See `healthCheckConfig` below.
     */
    public readonly healthCheckConfig!: pulumi.Output<outputs.gwlb.ServerGroupHealthCheckConfig>;
    /**
     * Backend Protocol. Value:
     *
     * - *GENEVE (default)**.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The ID of the resource group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * Scheduling algorithm. Value:
     * - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
     * - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
     * - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
     */
    public readonly scheduler!: pulumi.Output<string>;
    /**
     * The server group name.
     *
     * It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
     */
    public readonly serverGroupName!: pulumi.Output<string | undefined>;
    /**
     * The server group type. Value:
     * - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
     * - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
     */
    public readonly serverGroupType!: pulumi.Output<string>;
    /**
     * List of servers. See `servers` below.
     */
    public readonly servers!: pulumi.Output<outputs.gwlb.ServerGroupServer[] | undefined>;
    /**
     * Server group status. Value:
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * List of resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The VPC instance ID.
     *
     * > **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a ServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerGroupArgs | ServerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerGroupState | undefined;
            resourceInputs["connectionDrainConfig"] = state ? state.connectionDrainConfig : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["healthCheckConfig"] = state ? state.healthCheckConfig : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["scheduler"] = state ? state.scheduler : undefined;
            resourceInputs["serverGroupName"] = state ? state.serverGroupName : undefined;
            resourceInputs["serverGroupType"] = state ? state.serverGroupType : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as ServerGroupArgs | undefined;
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["connectionDrainConfig"] = args ? args.connectionDrainConfig : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["healthCheckConfig"] = args ? args.healthCheckConfig : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["scheduler"] = args ? args.scheduler : undefined;
            resourceInputs["serverGroupName"] = args ? args.serverGroupName : undefined;
            resourceInputs["serverGroupType"] = args ? args.serverGroupType : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerGroup resources.
 */
export interface ServerGroupState {
    /**
     * Connected graceful interrupt configuration. See `connectionDrainConfig` below.
     */
    connectionDrainConfig?: pulumi.Input<inputs.gwlb.ServerGroupConnectionDrainConfig>;
    /**
     * The creation time of the server group.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Specifies whether to perform only a dry run, without performing the actual request.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Health check configurations. See `healthCheckConfig` below.
     */
    healthCheckConfig?: pulumi.Input<inputs.gwlb.ServerGroupHealthCheckConfig>;
    /**
     * Backend Protocol. Value:
     *
     * - *GENEVE (default)**.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Scheduling algorithm. Value:
     * - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
     * - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
     * - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The server group name.
     *
     * It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
     */
    serverGroupName?: pulumi.Input<string>;
    /**
     * The server group type. Value:
     * - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
     * - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
     */
    serverGroupType?: pulumi.Input<string>;
    /**
     * List of servers. See `servers` below.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.gwlb.ServerGroupServer>[]>;
    /**
     * Server group status. Value:
     */
    status?: pulumi.Input<string>;
    /**
     * List of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The VPC instance ID.
     *
     * > **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerGroup resource.
 */
export interface ServerGroupArgs {
    /**
     * Connected graceful interrupt configuration. See `connectionDrainConfig` below.
     */
    connectionDrainConfig?: pulumi.Input<inputs.gwlb.ServerGroupConnectionDrainConfig>;
    /**
     * Specifies whether to perform only a dry run, without performing the actual request.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Health check configurations. See `healthCheckConfig` below.
     */
    healthCheckConfig?: pulumi.Input<inputs.gwlb.ServerGroupHealthCheckConfig>;
    /**
     * Backend Protocol. Value:
     *
     * - *GENEVE (default)**.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Scheduling algorithm. Value:
     * - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
     * - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
     * - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The server group name.
     *
     * It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
     */
    serverGroupName?: pulumi.Input<string>;
    /**
     * The server group type. Value:
     * - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
     * - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
     */
    serverGroupType?: pulumi.Input<string>;
    /**
     * List of servers. See `servers` below.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.gwlb.ServerGroupServer>[]>;
    /**
     * List of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The VPC instance ID.
     *
     * > **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
     */
    vpcId: pulumi.Input<string>;
}
