// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a GWLB Server Group resource.
 *
 * For information about GWLB Server Group and how to use it, see [What is Server Group](https://www.alibabacloud.com/help/en/slb/gateway-based-load-balancing-gwlb/developer-reference/api-gwlb-2024-04-15-createservergroup).
 *
 * > **NOTE:** Available since v1.234.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const regionId = config.get("regionId") || "cn-wulanchabu";
 * const zoneId1 = config.get("zoneId1") || "cn-wulanchabu-b";
 * const _default = alicloud.resourcemanager.getResourceGroups({});
 * const defaultEaxcvb = new alicloud.vpc.Network("defaultEaxcvb", {
 *     cidrBlock: "10.0.0.0/8",
 *     vpcName: "tf-gwlb-vpc",
 * });
 * const defaultc3uVID = new alicloud.vpc.Switch("defaultc3uVID", {
 *     vpcId: defaultEaxcvb.id,
 *     zoneId: zoneId1,
 *     cidrBlock: "10.0.0.0/24",
 *     vswitchName: "tf-example-vsw1",
 * });
 * const default7NNxRl = new alicloud.ecs.SecurityGroup("default7NNxRl", {
 *     description: "sg",
 *     securityGroupName: "sg_name",
 *     vpcId: defaultEaxcvb.id,
 *     securityGroupType: "normal",
 * });
 * const defaultH6McvC = new alicloud.ecs.Instance("defaultH6McvC", {
 *     vswitchId: defaultc3uVID.id,
 *     imageId: "aliyun_2_1903_x64_20G_alibase_20231221.vhd",
 *     instanceType: "ecs.g6.large",
 *     systemDiskCategory: "cloud_efficiency",
 *     internetChargeType: "PayByTraffic",
 *     internetMaxBandwidthOut: 5,
 *     instanceName: std.format({
 *         input: "%s4",
 *         args: [name],
 *     }).then(invoke => invoke.result),
 *     description: "tf-example-ecs",
 *     securityGroups: [default7NNxRl.id],
 *     availabilityZone: defaultc3uVID.zoneId,
 *     instanceChargeType: "PostPaid",
 * });
 * const defaultServerGroup = new alicloud.gwlb.ServerGroup("default", {
 *     dryRun: false,
 *     servers: [{
 *         serverId: defaultH6McvC.id,
 *         serverType: "Ecs",
 *     }],
 *     scheduler: "5TCH",
 *     protocol: "GENEVE",
 *     connectionDrainConfig: {
 *         connectionDrainEnabled: true,
 *         connectionDrainTimeout: 1,
 *     },
 *     vpcId: defaultEaxcvb.id,
 *     serverGroupType: "Instance",
 *     serverGroupName: name,
 *     healthCheckConfig: {
 *         healthCheckConnectPort: 80,
 *         healthCheckEnabled: true,
 *         healthCheckProtocol: "HTTP",
 *         healthCheckConnectTimeout: 5,
 *         healthCheckDomain: "www.domain.com",
 *         healthCheckHttpCodes: [
 *             "http_2xx",
 *             "http_3xx",
 *             "http_4xx",
 *         ],
 *         healthCheckInterval: 10,
 *         healthCheckPath: "/health-check",
 *         healthyThreshold: 2,
 *         unhealthyThreshold: 2,
 *     },
 *     resourceGroupId: _default.then(_default => _default.ids?.[0]),
 * });
 * ```
 *
 * ## Import
 *
 * GWLB Server Group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:gwlb/serverGroup:ServerGroup example <id>
 * ```
 */
export class ServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing ServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerGroupState, opts?: pulumi.CustomResourceOptions): ServerGroup {
        return new ServerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:gwlb/serverGroup:ServerGroup';

    /**
     * Returns true if the given object is an instance of ServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerGroup.__pulumiType;
    }

    /**
     * Connected graceful interrupt configuration. See `connectionDrainConfig` below.
     */
    public readonly connectionDrainConfig!: pulumi.Output<outputs.gwlb.ServerGroupConnectionDrainConfig>;
    /**
     * The time when the resource was created. The time follows the ISO 8601 standard in the **yyyy-MM-ddTHH:mm:ssZ** format. The time is displayed in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Specifies whether to perform only a dry run, without performing the actual request. Valid values:
     */
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    /**
     * Health check configurations. See `healthCheckConfig` below.
     */
    public readonly healthCheckConfig!: pulumi.Output<outputs.gwlb.ServerGroupHealthCheckConfig>;
    /**
     * The backend protocol. Valid values:
     *
     * - `GENEVE`(default)
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The ID of the resource group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The scheduling algorithm. Valid values:
     *
     * - `5TCH` (default): specifies consistent hashing that is based on the following factors: source IP address, destination IP address, source port, protocol, and destination port. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
     * - `3TCH`: specifies consistent hashing that is based on the following factors: source IP address, destination IP address, and protocol. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
     * - `2TCH`: specifies consistent hashing that is based on the following factors: source IP address and destination IP address. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
     */
    public readonly scheduler!: pulumi.Output<string>;
    /**
     * The server group name.
     *
     * The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (\_), and hyphens (-). It must start with a letter.
     */
    public readonly serverGroupName!: pulumi.Output<string | undefined>;
    /**
     * The type of server group. Valid values:
     *
     * - `Instance` (default): allows you to specify servers of the `Ecs`, `Eni`, or `Eci` type.
     * - `Ip`: allows you to add servers of by specifying IP addresses.
     */
    public readonly serverGroupType!: pulumi.Output<string>;
    /**
     * The backend servers that you want to remove.
     *
     * > **NOTE:**  You can remove at most 200 backend servers in each call.
     * See `servers` below.
     */
    public readonly servers!: pulumi.Output<outputs.gwlb.ServerGroupServer[] | undefined>;
    /**
     * Indicates the status of the backend server.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The tag keys.
     *
     * You can specify at most 20 tags in each call.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The VPC ID.
     *
     * > **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a ServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerGroupArgs | ServerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerGroupState | undefined;
            resourceInputs["connectionDrainConfig"] = state ? state.connectionDrainConfig : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["healthCheckConfig"] = state ? state.healthCheckConfig : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["scheduler"] = state ? state.scheduler : undefined;
            resourceInputs["serverGroupName"] = state ? state.serverGroupName : undefined;
            resourceInputs["serverGroupType"] = state ? state.serverGroupType : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as ServerGroupArgs | undefined;
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["connectionDrainConfig"] = args ? args.connectionDrainConfig : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["healthCheckConfig"] = args ? args.healthCheckConfig : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["scheduler"] = args ? args.scheduler : undefined;
            resourceInputs["serverGroupName"] = args ? args.serverGroupName : undefined;
            resourceInputs["serverGroupType"] = args ? args.serverGroupType : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerGroup resources.
 */
export interface ServerGroupState {
    /**
     * Connected graceful interrupt configuration. See `connectionDrainConfig` below.
     */
    connectionDrainConfig?: pulumi.Input<inputs.gwlb.ServerGroupConnectionDrainConfig>;
    /**
     * The time when the resource was created. The time follows the ISO 8601 standard in the **yyyy-MM-ddTHH:mm:ssZ** format. The time is displayed in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Specifies whether to perform only a dry run, without performing the actual request. Valid values:
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Health check configurations. See `healthCheckConfig` below.
     */
    healthCheckConfig?: pulumi.Input<inputs.gwlb.ServerGroupHealthCheckConfig>;
    /**
     * The backend protocol. Valid values:
     *
     * - `GENEVE`(default)
     */
    protocol?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The scheduling algorithm. Valid values:
     *
     * - `5TCH` (default): specifies consistent hashing that is based on the following factors: source IP address, destination IP address, source port, protocol, and destination port. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
     * - `3TCH`: specifies consistent hashing that is based on the following factors: source IP address, destination IP address, and protocol. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
     * - `2TCH`: specifies consistent hashing that is based on the following factors: source IP address and destination IP address. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The server group name.
     *
     * The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (\_), and hyphens (-). It must start with a letter.
     */
    serverGroupName?: pulumi.Input<string>;
    /**
     * The type of server group. Valid values:
     *
     * - `Instance` (default): allows you to specify servers of the `Ecs`, `Eni`, or `Eci` type.
     * - `Ip`: allows you to add servers of by specifying IP addresses.
     */
    serverGroupType?: pulumi.Input<string>;
    /**
     * The backend servers that you want to remove.
     *
     * > **NOTE:**  You can remove at most 200 backend servers in each call.
     * See `servers` below.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.gwlb.ServerGroupServer>[]>;
    /**
     * Indicates the status of the backend server.
     */
    status?: pulumi.Input<string>;
    /**
     * The tag keys.
     *
     * You can specify at most 20 tags in each call.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The VPC ID.
     *
     * > **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerGroup resource.
 */
export interface ServerGroupArgs {
    /**
     * Connected graceful interrupt configuration. See `connectionDrainConfig` below.
     */
    connectionDrainConfig?: pulumi.Input<inputs.gwlb.ServerGroupConnectionDrainConfig>;
    /**
     * Specifies whether to perform only a dry run, without performing the actual request. Valid values:
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Health check configurations. See `healthCheckConfig` below.
     */
    healthCheckConfig?: pulumi.Input<inputs.gwlb.ServerGroupHealthCheckConfig>;
    /**
     * The backend protocol. Valid values:
     *
     * - `GENEVE`(default)
     */
    protocol?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The scheduling algorithm. Valid values:
     *
     * - `5TCH` (default): specifies consistent hashing that is based on the following factors: source IP address, destination IP address, source port, protocol, and destination port. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
     * - `3TCH`: specifies consistent hashing that is based on the following factors: source IP address, destination IP address, and protocol. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
     * - `2TCH`: specifies consistent hashing that is based on the following factors: source IP address and destination IP address. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The server group name.
     *
     * The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (\_), and hyphens (-). It must start with a letter.
     */
    serverGroupName?: pulumi.Input<string>;
    /**
     * The type of server group. Valid values:
     *
     * - `Instance` (default): allows you to specify servers of the `Ecs`, `Eni`, or `Eci` type.
     * - `Ip`: allows you to add servers of by specifying IP addresses.
     */
    serverGroupType?: pulumi.Input<string>;
    /**
     * The backend servers that you want to remove.
     *
     * > **NOTE:**  You can remove at most 200 backend servers in each call.
     * See `servers` below.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.gwlb.ServerGroupServer>[]>;
    /**
     * The tag keys.
     *
     * You can specify at most 20 tags in each call.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The VPC ID.
     *
     * > **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
     */
    vpcId: pulumi.Input<string>;
}
