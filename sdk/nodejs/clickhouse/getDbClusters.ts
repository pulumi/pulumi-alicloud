// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the Click House DBCluster of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available in v1.134.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const defaultDbCluster = new alicloud.clickhouse.DbCluster("defaultDbCluster", {
 *     dbClusterVersion: "20.3.10.75",
 *     category: "Basic",
 *     dbClusterClass: "S8",
 *     dbClusterNetworkType: "vpc",
 *     dbNodeGroupCount: 1,
 *     paymentType: "PayAsYouGo",
 *     dbNodeStorage: "500",
 *     storageType: "cloud_essd",
 *     vswitchId: "your_vswitch_id",
 * });
 * const defaultDbClusters = alicloud.clickhouse.getDbClustersOutput({
 *     ids: [defaultDbCluster.id],
 * });
 * export const dbCluster = defaultDbClusters.apply(defaultDbClusters => defaultDbClusters.ids?[0]);
 * ```
 */
export function getDbClusters(args?: GetDbClustersArgs, opts?: pulumi.InvokeOptions): Promise<GetDbClustersResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("alicloud:clickhouse/getDbClusters:getDbClusters", {
        "dbClusterDescription": args.dbClusterDescription,
        "enableDetails": args.enableDetails,
        "ids": args.ids,
        "outputFile": args.outputFile,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getDbClusters.
 */
export interface GetDbClustersArgs {
    /**
     * The DBCluster description.
     */
    dbClusterDescription?: string;
    /**
     * Default to `false`. Set it to `true` can output more details about resource attributes.
     */
    enableDetails?: boolean;
    /**
     * A list of DBCluster IDs.
     */
    ids?: string[];
    outputFile?: string;
    /**
     * The status of the DBCluster. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
     */
    status?: string;
}

/**
 * A collection of values returned by getDbClusters.
 */
export interface GetDbClustersResult {
    readonly clusters: outputs.clickhouse.GetDbClustersCluster[];
    readonly dbClusterDescription?: string;
    readonly enableDetails?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly outputFile?: string;
    readonly status?: string;
}

export function getDbClustersOutput(args?: GetDbClustersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDbClustersResult> {
    return pulumi.output(args).apply(a => getDbClusters(a, opts))
}

/**
 * A collection of arguments for invoking getDbClusters.
 */
export interface GetDbClustersOutputArgs {
    /**
     * The DBCluster description.
     */
    dbClusterDescription?: pulumi.Input<string>;
    /**
     * Default to `false`. Set it to `true` can output more details about resource attributes.
     */
    enableDetails?: pulumi.Input<boolean>;
    /**
     * A list of DBCluster IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    outputFile?: pulumi.Input<string>;
    /**
     * The status of the DBCluster. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
     */
    status?: pulumi.Input<string>;
}
