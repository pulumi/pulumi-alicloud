// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Click House DBCluster resource.
 *
 * For information about Click House DBCluster and how to use it, see [What is DBCluster](https://www.alibabacloud.com/help/zh/clickhouse/latest/api-clickhouse-2019-11-11-createdbinstance).
 *
 * > **NOTE:** Available since v1.134.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const region = config.get("region") || "cn-hangzhou";
 * const name = config.get("name") || "tf-example";
 * const _default = alicloud.resourcemanager.getResourceGroups({});
 * const defaultGetRegions = alicloud.clickhouse.getRegions({
 *     regionId: region,
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: defaultGetRegions.then(defaultGetRegions => defaultGetRegions.regions?.[0]?.zoneIds?.[0]?.zoneId),
 * });
 * const defaultDbCluster = new alicloud.clickhouse.DbCluster("default", {
 *     dbClusterVersion: "23.8",
 *     category: "Basic",
 *     dbClusterClass: "S8",
 *     dbClusterNetworkType: "vpc",
 *     dbNodeGroupCount: 1,
 *     paymentType: "PayAsYouGo",
 *     dbNodeStorage: "100",
 *     storageType: "cloud_essd",
 *     vswitchId: defaultSwitch.id,
 *     vpcId: defaultNetwork.id,
 *     resourceGroupId: _default.then(_default => _default.groups?.[0]?.id),
 * });
 * ```
 *
 * ## Import
 *
 * Click House DBCluster can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:clickhouse/dbCluster:DbCluster example <id>
 * ```
 */
export class DbCluster extends pulumi.CustomResource {
    /**
     * Get an existing DbCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbClusterState, opts?: pulumi.CustomResourceOptions): DbCluster {
        return new DbCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:clickhouse/dbCluster:DbCluster';

    /**
     * Returns true if the given object is an instance of DbCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbCluster.__pulumiType;
    }

    /**
     * Whether to enable public connection. Value options: `true`, `false`.
     */
    declare public readonly allocatePublicConnection: pulumi.Output<boolean | undefined>;
    /**
     * The Category of DBCluster. Valid values: `Basic`,`HighAvailability`.
     */
    declare public readonly category: pulumi.Output<string>;
    /**
     * Whether to use cold storage. Valid values: `ENABLE`, `DISABLE`, default to `DISABLE`. When it's set to `ENABLE`, cold storage will be used, and `coldStorage` cannot be set to `DISABLE` again.
     */
    declare public readonly coldStorage: pulumi.Output<string>;
    /**
     * (Available since v1.196.0) - The connection string of the cluster.
     */
    declare public /*out*/ readonly connectionString: pulumi.Output<string>;
    /**
     * The db cluster access white list. See `dbClusterAccessWhiteList` below.
     */
    declare public readonly dbClusterAccessWhiteLists: pulumi.Output<outputs.clickhouse.DbClusterDbClusterAccessWhiteList[] | undefined>;
    /**
     * The DBCluster class. According to the category, dbClusterClass has two value ranges:
     * * Under the condition that the category is the `Basic`, Valid values: `LS20`, `LS40`, `LS80`,`S8`, `S16`, `S32`, `S64`,`S80`, `S104`.
     * * Under the condition that the category is the `HighAvailability`, Valid values: `LC20`, `LC40`, `LC80`,`C8`, `C16`, `C32`, `C64`, `C80`, `C104`.
     */
    declare public readonly dbClusterClass: pulumi.Output<string>;
    /**
     * The DBCluster description.
     */
    declare public readonly dbClusterDescription: pulumi.Output<string>;
    /**
     * The DBCluster network type. Valid values: `vpc`.
     */
    declare public readonly dbClusterNetworkType: pulumi.Output<string>;
    /**
     * The DBCluster version. Valid values: `20.3.10.75`, `20.8.7.15`, `21.8.10.19`, `22.8.5.29`, `23.8`. **NOTE:** `19.15.2.2` is no longer supported. From version 1.191.0, `dbClusterVersion` can be set to `22.8.5.29`.
     */
    declare public readonly dbClusterVersion: pulumi.Output<string>;
    /**
     * The db node group count. The number should between 1 and 48.
     */
    declare public readonly dbNodeGroupCount: pulumi.Output<number>;
    /**
     * The db node storage.
     */
    declare public readonly dbNodeStorage: pulumi.Output<string>;
    /**
     * Key management service KMS key ID. It is valid and required when encryptionType is `CloudDisk`.
     */
    declare public readonly encryptionKey: pulumi.Output<string | undefined>;
    /**
     * Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
     */
    declare public readonly encryptionType: pulumi.Output<string | undefined>;
    /**
     * The maintenance window of DBCluster. Valid format: `hh:mmZ-hh:mm Z`.
     */
    declare public readonly maintainTime: pulumi.Output<string>;
    /**
     * The zone IDs and 
     * corresponding vswitch IDs and zone IDs of multi-zone setup. if set, a multi-zone DBCluster will be created. Currently only support 2 available zones, primary zone not included. See `multiZoneVswitchList` below.
     */
    declare public readonly multiZoneVswitchLists: pulumi.Output<outputs.clickhouse.DbClusterMultiZoneVswitchList[] | undefined>;
    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     */
    declare public readonly paymentType: pulumi.Output<string>;
    /**
     * Pre-paid cluster of the pay-as-you-go cycle. It is valid and required when paymentType is `Subscription`. Valid values: `Month`, `Year`.
     */
    declare public readonly period: pulumi.Output<string | undefined>;
    /**
     * (Available since v1.196.0) The connection port of the cluster.
     */
    declare public /*out*/ readonly port: pulumi.Output<string>;
    /**
     * (Available since v1.245.0) The public connection string of the cluster. Only valid when `allocatePublicConnection` is `true`.
     */
    declare public /*out*/ readonly publicConnectionString: pulumi.Output<string>;
    /**
     * The renewal status of the resource. Valid values: `AutoRenewal`,`Normal`. It is valid and required when paymentType is `Subscription`. When `renewalStatus` is set to `AutoRenewal`, the resource is renewed automatically.
     */
    declare public readonly renewalStatus: pulumi.Output<string>;
    /**
     * The ID of the resource group.
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * The status of the resource. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * Storage type of DBCluster. Valid values: `cloudEssd`, `cloudEfficiency`, `cloudEssdPl2`, `cloudEssdPl3`.
     */
    declare public readonly storageType: pulumi.Output<string>;
    /**
     * The used time of DBCluster. It is valid and required when paymentType is `Subscription`. item choices: [1-9] when period is `Month`, [1-3] when period is `Year`.
     */
    declare public readonly usedTime: pulumi.Output<string | undefined>;
    /**
     * The id of the VPC.
     */
    declare public readonly vpcId: pulumi.Output<string>;
    /**
     * The vswitch id of DBCluster.
     */
    declare public readonly vswitchId: pulumi.Output<string | undefined>;
    /**
     * The zone ID of the instance.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a DbCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbClusterArgs | DbClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbClusterState | undefined;
            resourceInputs["allocatePublicConnection"] = state?.allocatePublicConnection;
            resourceInputs["category"] = state?.category;
            resourceInputs["coldStorage"] = state?.coldStorage;
            resourceInputs["connectionString"] = state?.connectionString;
            resourceInputs["dbClusterAccessWhiteLists"] = state?.dbClusterAccessWhiteLists;
            resourceInputs["dbClusterClass"] = state?.dbClusterClass;
            resourceInputs["dbClusterDescription"] = state?.dbClusterDescription;
            resourceInputs["dbClusterNetworkType"] = state?.dbClusterNetworkType;
            resourceInputs["dbClusterVersion"] = state?.dbClusterVersion;
            resourceInputs["dbNodeGroupCount"] = state?.dbNodeGroupCount;
            resourceInputs["dbNodeStorage"] = state?.dbNodeStorage;
            resourceInputs["encryptionKey"] = state?.encryptionKey;
            resourceInputs["encryptionType"] = state?.encryptionType;
            resourceInputs["maintainTime"] = state?.maintainTime;
            resourceInputs["multiZoneVswitchLists"] = state?.multiZoneVswitchLists;
            resourceInputs["paymentType"] = state?.paymentType;
            resourceInputs["period"] = state?.period;
            resourceInputs["port"] = state?.port;
            resourceInputs["publicConnectionString"] = state?.publicConnectionString;
            resourceInputs["renewalStatus"] = state?.renewalStatus;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["status"] = state?.status;
            resourceInputs["storageType"] = state?.storageType;
            resourceInputs["usedTime"] = state?.usedTime;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["vswitchId"] = state?.vswitchId;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as DbClusterArgs | undefined;
            if (args?.category === undefined && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if (args?.dbClusterClass === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbClusterClass'");
            }
            if (args?.dbClusterNetworkType === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbClusterNetworkType'");
            }
            if (args?.dbClusterVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbClusterVersion'");
            }
            if (args?.dbNodeGroupCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbNodeGroupCount'");
            }
            if (args?.dbNodeStorage === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbNodeStorage'");
            }
            if (args?.paymentType === undefined && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            if (args?.storageType === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            resourceInputs["allocatePublicConnection"] = args?.allocatePublicConnection;
            resourceInputs["category"] = args?.category;
            resourceInputs["coldStorage"] = args?.coldStorage;
            resourceInputs["dbClusterAccessWhiteLists"] = args?.dbClusterAccessWhiteLists;
            resourceInputs["dbClusterClass"] = args?.dbClusterClass;
            resourceInputs["dbClusterDescription"] = args?.dbClusterDescription;
            resourceInputs["dbClusterNetworkType"] = args?.dbClusterNetworkType;
            resourceInputs["dbClusterVersion"] = args?.dbClusterVersion;
            resourceInputs["dbNodeGroupCount"] = args?.dbNodeGroupCount;
            resourceInputs["dbNodeStorage"] = args?.dbNodeStorage;
            resourceInputs["encryptionKey"] = args?.encryptionKey;
            resourceInputs["encryptionType"] = args?.encryptionType;
            resourceInputs["maintainTime"] = args?.maintainTime;
            resourceInputs["multiZoneVswitchLists"] = args?.multiZoneVswitchLists;
            resourceInputs["paymentType"] = args?.paymentType;
            resourceInputs["period"] = args?.period;
            resourceInputs["renewalStatus"] = args?.renewalStatus;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["status"] = args?.status;
            resourceInputs["storageType"] = args?.storageType;
            resourceInputs["usedTime"] = args?.usedTime;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["vswitchId"] = args?.vswitchId;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["connectionString"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["publicConnectionString"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DbCluster resources.
 */
export interface DbClusterState {
    /**
     * Whether to enable public connection. Value options: `true`, `false`.
     */
    allocatePublicConnection?: pulumi.Input<boolean>;
    /**
     * The Category of DBCluster. Valid values: `Basic`,`HighAvailability`.
     */
    category?: pulumi.Input<string>;
    /**
     * Whether to use cold storage. Valid values: `ENABLE`, `DISABLE`, default to `DISABLE`. When it's set to `ENABLE`, cold storage will be used, and `coldStorage` cannot be set to `DISABLE` again.
     */
    coldStorage?: pulumi.Input<string>;
    /**
     * (Available since v1.196.0) - The connection string of the cluster.
     */
    connectionString?: pulumi.Input<string>;
    /**
     * The db cluster access white list. See `dbClusterAccessWhiteList` below.
     */
    dbClusterAccessWhiteLists?: pulumi.Input<pulumi.Input<inputs.clickhouse.DbClusterDbClusterAccessWhiteList>[]>;
    /**
     * The DBCluster class. According to the category, dbClusterClass has two value ranges:
     * * Under the condition that the category is the `Basic`, Valid values: `LS20`, `LS40`, `LS80`,`S8`, `S16`, `S32`, `S64`,`S80`, `S104`.
     * * Under the condition that the category is the `HighAvailability`, Valid values: `LC20`, `LC40`, `LC80`,`C8`, `C16`, `C32`, `C64`, `C80`, `C104`.
     */
    dbClusterClass?: pulumi.Input<string>;
    /**
     * The DBCluster description.
     */
    dbClusterDescription?: pulumi.Input<string>;
    /**
     * The DBCluster network type. Valid values: `vpc`.
     */
    dbClusterNetworkType?: pulumi.Input<string>;
    /**
     * The DBCluster version. Valid values: `20.3.10.75`, `20.8.7.15`, `21.8.10.19`, `22.8.5.29`, `23.8`. **NOTE:** `19.15.2.2` is no longer supported. From version 1.191.0, `dbClusterVersion` can be set to `22.8.5.29`.
     */
    dbClusterVersion?: pulumi.Input<string>;
    /**
     * The db node group count. The number should between 1 and 48.
     */
    dbNodeGroupCount?: pulumi.Input<number>;
    /**
     * The db node storage.
     */
    dbNodeStorage?: pulumi.Input<string>;
    /**
     * Key management service KMS key ID. It is valid and required when encryptionType is `CloudDisk`.
     */
    encryptionKey?: pulumi.Input<string>;
    /**
     * Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
     */
    encryptionType?: pulumi.Input<string>;
    /**
     * The maintenance window of DBCluster. Valid format: `hh:mmZ-hh:mm Z`.
     */
    maintainTime?: pulumi.Input<string>;
    /**
     * The zone IDs and 
     * corresponding vswitch IDs and zone IDs of multi-zone setup. if set, a multi-zone DBCluster will be created. Currently only support 2 available zones, primary zone not included. See `multiZoneVswitchList` below.
     */
    multiZoneVswitchLists?: pulumi.Input<pulumi.Input<inputs.clickhouse.DbClusterMultiZoneVswitchList>[]>;
    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     */
    paymentType?: pulumi.Input<string>;
    /**
     * Pre-paid cluster of the pay-as-you-go cycle. It is valid and required when paymentType is `Subscription`. Valid values: `Month`, `Year`.
     */
    period?: pulumi.Input<string>;
    /**
     * (Available since v1.196.0) The connection port of the cluster.
     */
    port?: pulumi.Input<string>;
    /**
     * (Available since v1.245.0) The public connection string of the cluster. Only valid when `allocatePublicConnection` is `true`.
     */
    publicConnectionString?: pulumi.Input<string>;
    /**
     * The renewal status of the resource. Valid values: `AutoRenewal`,`Normal`. It is valid and required when paymentType is `Subscription`. When `renewalStatus` is set to `AutoRenewal`, the resource is renewed automatically.
     */
    renewalStatus?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The status of the resource. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
     */
    status?: pulumi.Input<string>;
    /**
     * Storage type of DBCluster. Valid values: `cloudEssd`, `cloudEfficiency`, `cloudEssdPl2`, `cloudEssdPl3`.
     */
    storageType?: pulumi.Input<string>;
    /**
     * The used time of DBCluster. It is valid and required when paymentType is `Subscription`. item choices: [1-9] when period is `Month`, [1-3] when period is `Year`.
     */
    usedTime?: pulumi.Input<string>;
    /**
     * The id of the VPC.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The vswitch id of DBCluster.
     */
    vswitchId?: pulumi.Input<string>;
    /**
     * The zone ID of the instance.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbCluster resource.
 */
export interface DbClusterArgs {
    /**
     * Whether to enable public connection. Value options: `true`, `false`.
     */
    allocatePublicConnection?: pulumi.Input<boolean>;
    /**
     * The Category of DBCluster. Valid values: `Basic`,`HighAvailability`.
     */
    category: pulumi.Input<string>;
    /**
     * Whether to use cold storage. Valid values: `ENABLE`, `DISABLE`, default to `DISABLE`. When it's set to `ENABLE`, cold storage will be used, and `coldStorage` cannot be set to `DISABLE` again.
     */
    coldStorage?: pulumi.Input<string>;
    /**
     * The db cluster access white list. See `dbClusterAccessWhiteList` below.
     */
    dbClusterAccessWhiteLists?: pulumi.Input<pulumi.Input<inputs.clickhouse.DbClusterDbClusterAccessWhiteList>[]>;
    /**
     * The DBCluster class. According to the category, dbClusterClass has two value ranges:
     * * Under the condition that the category is the `Basic`, Valid values: `LS20`, `LS40`, `LS80`,`S8`, `S16`, `S32`, `S64`,`S80`, `S104`.
     * * Under the condition that the category is the `HighAvailability`, Valid values: `LC20`, `LC40`, `LC80`,`C8`, `C16`, `C32`, `C64`, `C80`, `C104`.
     */
    dbClusterClass: pulumi.Input<string>;
    /**
     * The DBCluster description.
     */
    dbClusterDescription?: pulumi.Input<string>;
    /**
     * The DBCluster network type. Valid values: `vpc`.
     */
    dbClusterNetworkType: pulumi.Input<string>;
    /**
     * The DBCluster version. Valid values: `20.3.10.75`, `20.8.7.15`, `21.8.10.19`, `22.8.5.29`, `23.8`. **NOTE:** `19.15.2.2` is no longer supported. From version 1.191.0, `dbClusterVersion` can be set to `22.8.5.29`.
     */
    dbClusterVersion: pulumi.Input<string>;
    /**
     * The db node group count. The number should between 1 and 48.
     */
    dbNodeGroupCount: pulumi.Input<number>;
    /**
     * The db node storage.
     */
    dbNodeStorage: pulumi.Input<string>;
    /**
     * Key management service KMS key ID. It is valid and required when encryptionType is `CloudDisk`.
     */
    encryptionKey?: pulumi.Input<string>;
    /**
     * Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
     */
    encryptionType?: pulumi.Input<string>;
    /**
     * The maintenance window of DBCluster. Valid format: `hh:mmZ-hh:mm Z`.
     */
    maintainTime?: pulumi.Input<string>;
    /**
     * The zone IDs and 
     * corresponding vswitch IDs and zone IDs of multi-zone setup. if set, a multi-zone DBCluster will be created. Currently only support 2 available zones, primary zone not included. See `multiZoneVswitchList` below.
     */
    multiZoneVswitchLists?: pulumi.Input<pulumi.Input<inputs.clickhouse.DbClusterMultiZoneVswitchList>[]>;
    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     */
    paymentType: pulumi.Input<string>;
    /**
     * Pre-paid cluster of the pay-as-you-go cycle. It is valid and required when paymentType is `Subscription`. Valid values: `Month`, `Year`.
     */
    period?: pulumi.Input<string>;
    /**
     * The renewal status of the resource. Valid values: `AutoRenewal`,`Normal`. It is valid and required when paymentType is `Subscription`. When `renewalStatus` is set to `AutoRenewal`, the resource is renewed automatically.
     */
    renewalStatus?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The status of the resource. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
     */
    status?: pulumi.Input<string>;
    /**
     * Storage type of DBCluster. Valid values: `cloudEssd`, `cloudEfficiency`, `cloudEssdPl2`, `cloudEssdPl3`.
     */
    storageType: pulumi.Input<string>;
    /**
     * The used time of DBCluster. It is valid and required when paymentType is `Subscription`. item choices: [1-9] when period is `Month`, [1-3] when period is `Year`.
     */
    usedTime?: pulumi.Input<string>;
    /**
     * The id of the VPC.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The vswitch id of DBCluster.
     */
    vswitchId?: pulumi.Input<string>;
    /**
     * The zone ID of the instance.
     */
    zoneId?: pulumi.Input<string>;
}
