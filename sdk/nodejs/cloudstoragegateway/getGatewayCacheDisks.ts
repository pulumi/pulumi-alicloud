// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the Cloud Storage Gateway Gateway Cache Disks of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available in v1.144.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const ids = alicloud.cloudstoragegateway.getGatewayCacheDisks({
 *     gatewayId: "example_value",
 *     ids: [
 *         "example_value-1",
 *         "example_value-2",
 *     ],
 * });
 * export const cloudStorageGatewayGatewayCacheDiskId1 = ids.then(ids => ids.disks?[0]?.id);
 * const status = alicloud.cloudstoragegateway.getGatewayCacheDisks({
 *     gatewayId: "example_value",
 *     ids: [
 *         "example_value-1",
 *         "example_value-2",
 *     ],
 *     status: 0,
 * });
 * export const cloudStorageGatewayGatewayCacheDiskId2 = status.then(status => status.disks?[0]?.id);
 * ```
 */
export function getGatewayCacheDisks(args: GetGatewayCacheDisksArgs, opts?: pulumi.InvokeOptions): Promise<GetGatewayCacheDisksResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("alicloud:cloudstoragegateway/getGatewayCacheDisks:getGatewayCacheDisks", {
        "gatewayId": args.gatewayId,
        "ids": args.ids,
        "outputFile": args.outputFile,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getGatewayCacheDisks.
 */
export interface GetGatewayCacheDisksArgs {
    /**
     * The ID of the gateway.
     */
    gatewayId: string;
    /**
     * A list of Gateway Cache Disk IDs.
     */
    ids?: string[];
    outputFile?: string;
    /**
     * The status of the resource.
     */
    status?: number;
}

/**
 * A collection of values returned by getGatewayCacheDisks.
 */
export interface GetGatewayCacheDisksResult {
    readonly disks: outputs.cloudstoragegateway.GetGatewayCacheDisksDisk[];
    readonly gatewayId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly outputFile?: string;
    readonly status?: number;
}

export function getGatewayCacheDisksOutput(args: GetGatewayCacheDisksOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGatewayCacheDisksResult> {
    return pulumi.output(args).apply(a => getGatewayCacheDisks(a, opts))
}

/**
 * A collection of arguments for invoking getGatewayCacheDisks.
 */
export interface GetGatewayCacheDisksOutputArgs {
    /**
     * The ID of the gateway.
     */
    gatewayId: pulumi.Input<string>;
    /**
     * A list of Gateway Cache Disk IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    outputFile?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<number>;
}
