// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides a list of Snat Entries owned by an Alibaba Cloud account.
 *
 * > **NOTE:** Available in 1.37.0+.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "snat-entry-example-name";
 * const default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const fooNetwork = new alicloud.vpc.Network("fooNetwork", {cidrBlock: "172.16.0.0/12"});
 * const fooSwitch = new alicloud.vpc.Switch("fooSwitch", {
 *     vpcId: fooNetwork.id,
 *     cidrBlock: "172.16.0.0/21",
 *     availabilityZone: _default.then(_default => _default.zones?[0]?.id),
 *     vswitchName: name,
 * });
 * const fooNatGateway = new alicloud.vpc.NatGateway("fooNatGateway", {
 *     vpcId: fooNetwork.id,
 *     specification: "Small",
 * });
 * const fooEipAddress = new alicloud.ecs.EipAddress("fooEipAddress", {addressName: name});
 * const fooEipAssociation = new alicloud.ecs.EipAssociation("fooEipAssociation", {
 *     allocationId: fooEipAddress.id,
 *     instanceId: fooNatGateway.id,
 * });
 * const fooSnatEntry = new alicloud.vpc.SnatEntry("fooSnatEntry", {
 *     snatTableId: fooNatGateway.snatTableIds,
 *     sourceVswitchId: fooSwitch.id,
 *     snatIp: fooEipAddress.ipAddress,
 * });
 * const fooSnatEntries = alicloud.vpc.getSnatEntriesOutput({
 *     snatTableId: fooSnatEntry.snatTableId,
 * });
 * ```
 */
export function getSnatEntries(args: GetSnatEntriesArgs, opts?: pulumi.InvokeOptions): Promise<GetSnatEntriesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("alicloud:vpc/getSnatEntries:getSnatEntries", {
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "snatEntryName": args.snatEntryName,
        "snatIp": args.snatIp,
        "snatTableId": args.snatTableId,
        "sourceCidr": args.sourceCidr,
        "sourceVswitchId": args.sourceVswitchId,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getSnatEntries.
 */
export interface GetSnatEntriesArgs {
    /**
     * A list of Snat Entries IDs.
     */
    ids?: string[];
    /**
     * A regex string to filter results by the resource name.
     */
    nameRegex?: string;
    outputFile?: string;
    /**
     * The name of snat entry.
     */
    snatEntryName?: string;
    /**
     * The public IP of the Snat Entry.
     */
    snatIp?: string;
    /**
     * The ID of the Snat table.
     */
    snatTableId: string;
    /**
     * The source CIDR block of the Snat Entry.
     */
    sourceCidr?: string;
    /**
     * The source vswitch ID.
     */
    sourceVswitchId?: string;
    /**
     * The status of the Snat Entry. Valid values: `Available`, `Deleting` and `Pending`.
     */
    status?: string;
}

/**
 * A collection of values returned by getSnatEntries.
 */
export interface GetSnatEntriesResult {
    /**
     * A list of Snat Entries. Each element contains the following attributes:
     */
    readonly entries: outputs.vpc.GetSnatEntriesEntry[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * (Optional) A list of Snat Entries IDs.
     */
    readonly ids: string[];
    readonly nameRegex?: string;
    readonly names: string[];
    readonly outputFile?: string;
    /**
     * The name of snat entry.
     */
    readonly snatEntryName?: string;
    /**
     * The public IP of the Snat Entry.
     */
    readonly snatIp?: string;
    readonly snatTableId: string;
    /**
     * The source CIDR block of the Snat Entry.
     */
    readonly sourceCidr?: string;
    /**
     * The source vswitch ID.
     */
    readonly sourceVswitchId?: string;
    /**
     * The status of the Snat Entry.
     */
    readonly status?: string;
}

export function getSnatEntriesOutput(args: GetSnatEntriesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSnatEntriesResult> {
    return pulumi.output(args).apply(a => getSnatEntries(a, opts))
}

/**
 * A collection of arguments for invoking getSnatEntries.
 */
export interface GetSnatEntriesOutputArgs {
    /**
     * A list of Snat Entries IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A regex string to filter results by the resource name.
     */
    nameRegex?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    /**
     * The name of snat entry.
     */
    snatEntryName?: pulumi.Input<string>;
    /**
     * The public IP of the Snat Entry.
     */
    snatIp?: pulumi.Input<string>;
    /**
     * The ID of the Snat table.
     */
    snatTableId: pulumi.Input<string>;
    /**
     * The source CIDR block of the Snat Entry.
     */
    sourceCidr?: pulumi.Input<string>;
    /**
     * The source vswitch ID.
     */
    sourceVswitchId?: pulumi.Input<string>;
    /**
     * The status of the Snat Entry. Valid values: `Available`, `Deleting` and `Pending`.
     */
    status?: pulumi.Input<string>;
}
