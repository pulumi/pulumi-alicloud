// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a VPC Route Table Attachment resource. Routing table associated resource type.
 *
 * For information about VPC Route Table Attachment and how to use it, see [What is Route Table Attachment](https://www.alibabacloud.com/help/doc-detail/174112.htm).
 *
 * > **NOTE:** Available since v1.194.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const fooNetwork = new alicloud.vpc.Network("fooNetwork", {cidrBlock: "172.16.0.0/12"});
 * const default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const fooSwitch = new alicloud.vpc.Switch("fooSwitch", {
 *     vpcId: fooNetwork.id,
 *     cidrBlock: "172.16.0.0/21",
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 * });
 * const fooRouteTable = new alicloud.vpc.RouteTable("fooRouteTable", {
 *     vpcId: fooNetwork.id,
 *     routeTableName: name,
 *     description: "route_table_attachment",
 * });
 * const fooRouteTableAttachment = new alicloud.vpc.RouteTableAttachment("fooRouteTableAttachment", {
 *     vswitchId: fooSwitch.id,
 *     routeTableId: fooRouteTable.id,
 * });
 * ```
 *
 * ## Import
 *
 * VPC Route Table Attachment can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:vpc/routeTableAttachment:RouteTableAttachment example <route_table_id>:<vswitch_id>
 * ```
 */
export class RouteTableAttachment extends pulumi.CustomResource {
    /**
     * Get an existing RouteTableAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteTableAttachmentState, opts?: pulumi.CustomResourceOptions): RouteTableAttachment {
        return new RouteTableAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/routeTableAttachment:RouteTableAttachment';

    /**
     * Returns true if the given object is an instance of RouteTableAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteTableAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteTableAttachment.__pulumiType;
    }

    /**
     * The ID of the route table to be bound to the switch.
     */
    public readonly routeTableId!: pulumi.Output<string>;
    /**
     * The status of the resource.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The ID of the switch to bind the route table.
     */
    public readonly vswitchId!: pulumi.Output<string>;

    /**
     * Create a RouteTableAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteTableAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteTableAttachmentArgs | RouteTableAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteTableAttachmentState | undefined;
            resourceInputs["routeTableId"] = state ? state.routeTableId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as RouteTableAttachmentArgs | undefined;
            if ((!args || args.routeTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeTableId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["routeTableId"] = args ? args.routeTableId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteTableAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteTableAttachment resources.
 */
export interface RouteTableAttachmentState {
    /**
     * The ID of the route table to be bound to the switch.
     */
    routeTableId?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of the switch to bind the route table.
     */
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteTableAttachment resource.
 */
export interface RouteTableAttachmentArgs {
    /**
     * The ID of the route table to be bound to the switch.
     */
    routeTableId: pulumi.Input<string>;
    /**
     * The ID of the switch to bind the route table.
     */
    vswitchId: pulumi.Input<string>;
}
