// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the Vpc Dhcp Options Sets of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available in v1.134.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const ids = alicloud.vpc.getDhcpOptionsSets({
 *     ids: ["example_value"],
 * });
 * export const vpcDhcpOptionsSetId1 = ids.then(ids => ids.sets?[0]?.id);
 * const nameRegex = alicloud.vpc.getDhcpOptionsSets({
 *     nameRegex: "^my-DhcpOptionsSet",
 * });
 * export const vpcDhcpOptionsSetId2 = nameRegex.then(nameRegex => nameRegex.sets?[0]?.id);
 * const dhcpOptionsSetName = alicloud.vpc.getDhcpOptionsSets({
 *     dhcpOptionsSetName: "my-DhcpOptionsSet",
 * });
 * export const vpcDhcpOptionsSetId3 = dhcpOptionsSetName.then(dhcpOptionsSetName => dhcpOptionsSetName.sets?[0]?.id);
 * const domainName = alicloud.vpc.getDhcpOptionsSets({
 *     ids: ["example_value"],
 *     domainName: "example.com",
 * });
 * export const vpcDhcpOptionsSetId4 = domainName.then(domainName => domainName.sets?[0]?.id);
 * const status = alicloud.vpc.getDhcpOptionsSets({
 *     ids: ["example_value"],
 *     status: "Available",
 * });
 * export const vpcDhcpOptionsSetId5 = status.then(status => status.sets?[0]?.id);
 * ```
 */
export function getDhcpOptionsSets(args?: GetDhcpOptionsSetsArgs, opts?: pulumi.InvokeOptions): Promise<GetDhcpOptionsSetsResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("alicloud:vpc/getDhcpOptionsSets:getDhcpOptionsSets", {
        "dhcpOptionsSetName": args.dhcpOptionsSetName,
        "domainName": args.domainName,
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getDhcpOptionsSets.
 */
export interface GetDhcpOptionsSetsArgs {
    /**
     * The root domain, for example, example.com. After a DHCP options set is associated with a
     * Virtual Private Cloud (VPC) network, the root domain in the DHCP options set is automatically synchronized to the
     * ECS instances in the VPC network.
     */
    dhcpOptionsSetName?: string;
    /**
     * The root domain, for example, example.com. After a DHCP options set is associated with a Virtual
     * Private Cloud (VPC) network, the root domain in the DHCP options set is automatically synchronized to the ECS
     * instances in the VPC network.
     */
    domainName?: string;
    /**
     * A list of Dhcp Options Set IDs.
     */
    ids?: string[];
    /**
     * A regex string to filter results by Dhcp Options Set name.
     */
    nameRegex?: string;
    outputFile?: string;
    /**
     * The status of the DHCP options set. Valid values: `Available`, `InUse` or `Pending`. `Available`: The DHCP options set is available for use. `InUse`: The DHCP options set is in use. `Pending`: The DHCP options set is being configured.
     */
    status?: string;
}

/**
 * A collection of values returned by getDhcpOptionsSets.
 */
export interface GetDhcpOptionsSetsResult {
    readonly dhcpOptionsSetName?: string;
    readonly domainName?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly nameRegex?: string;
    readonly names: string[];
    readonly outputFile?: string;
    readonly sets: outputs.vpc.GetDhcpOptionsSetsSet[];
    readonly status?: string;
}

export function getDhcpOptionsSetsOutput(args?: GetDhcpOptionsSetsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDhcpOptionsSetsResult> {
    return pulumi.output(args).apply(a => getDhcpOptionsSets(a, opts))
}

/**
 * A collection of arguments for invoking getDhcpOptionsSets.
 */
export interface GetDhcpOptionsSetsOutputArgs {
    /**
     * The root domain, for example, example.com. After a DHCP options set is associated with a
     * Virtual Private Cloud (VPC) network, the root domain in the DHCP options set is automatically synchronized to the
     * ECS instances in the VPC network.
     */
    dhcpOptionsSetName?: pulumi.Input<string>;
    /**
     * The root domain, for example, example.com. After a DHCP options set is associated with a Virtual
     * Private Cloud (VPC) network, the root domain in the DHCP options set is automatically synchronized to the ECS
     * instances in the VPC network.
     */
    domainName?: pulumi.Input<string>;
    /**
     * A list of Dhcp Options Set IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A regex string to filter results by Dhcp Options Set name.
     */
    nameRegex?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    /**
     * The status of the DHCP options set. Valid values: `Available`, `InUse` or `Pending`. `Available`: The DHCP options set is available for use. `InUse`: The DHCP options set is in use. `Pending`: The DHCP options set is being configured.
     */
    status?: pulumi.Input<string>;
}
