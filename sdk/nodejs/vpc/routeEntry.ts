// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a route entry resource. A route entry represents a route item of one VPC route table.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const defaultZones = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultInstanceTypes = defaultZones.then(defaultZones => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: defaultZones.zones?.[0]?.id,
 *     cpuCoreCount: 1,
 *     memorySize: 2,
 * }));
 * const defaultImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_18.*64",
 *     mostRecent: true,
 *     owners: "system",
 * });
 * const config = new pulumi.Config();
 * const name = config.get("name") || "RouteEntryConfig";
 * const fooNetwork = new alicloud.vpc.Network("fooNetwork", {
 *     vpcName: name,
 *     cidrBlock: "10.1.0.0/21",
 * });
 * const fooSwitch = new alicloud.vpc.Switch("fooSwitch", {
 *     vpcId: fooNetwork.id,
 *     cidrBlock: "10.1.1.0/24",
 *     zoneId: defaultZones.then(defaultZones => defaultZones.zones?.[0]?.id),
 *     vswitchName: name,
 * });
 * const tfTestFoo = new alicloud.ecs.SecurityGroup("tfTestFoo", {
 *     description: "foo",
 *     vpcId: fooNetwork.id,
 * });
 * const ingress = new alicloud.ecs.SecurityGroupRule("ingress", {
 *     type: "ingress",
 *     ipProtocol: "tcp",
 *     nicType: "intranet",
 *     policy: "accept",
 *     portRange: "22/22",
 *     priority: 1,
 *     securityGroupId: tfTestFoo.id,
 *     cidrIp: "0.0.0.0/0",
 * });
 * const fooInstance = new alicloud.ecs.Instance("fooInstance", {
 *     securityGroups: [tfTestFoo.id],
 *     vswitchId: fooSwitch.id,
 *     instanceChargeType: "PostPaid",
 *     instanceType: defaultInstanceTypes.then(defaultInstanceTypes => defaultInstanceTypes.instanceTypes?.[0]?.id),
 *     internetChargeType: "PayByTraffic",
 *     internetMaxBandwidthOut: 5,
 *     systemDiskCategory: "cloud_efficiency",
 *     imageId: defaultImages.then(defaultImages => defaultImages.images?.[0]?.id),
 *     instanceName: name,
 * });
 * const fooRouteEntry = new alicloud.vpc.RouteEntry("fooRouteEntry", {
 *     routeTableId: fooNetwork.routeTableId,
 *     destinationCidrblock: "172.11.1.1/32",
 *     nexthopType: "Instance",
 *     nexthopId: fooInstance.id,
 * });
 * ```
 * ## Module Support
 *
 * You can use to the existing vpc module
 * to create a VPC, several VSwitches and add several route entries one-click.
 *
 * ## Import
 *
 * Router entry can be imported using the id, e.g (formatted as<route_table_id:router_id:destination_cidrblock:nexthop_type:nexthop_id>).
 *
 * ```sh
 *  $ pulumi import alicloud:vpc/routeEntry:RouteEntry example vtb-123456:vrt-123456:0.0.0.0/0:NatGateway:ngw-123456
 * ```
 */
export class RouteEntry extends pulumi.CustomResource {
    /**
     * Get an existing RouteEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteEntryState, opts?: pulumi.CustomResourceOptions): RouteEntry {
        return new RouteEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/routeEntry:RouteEntry';

    /**
     * Returns true if the given object is an instance of RouteEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteEntry.__pulumiType;
    }

    /**
     * The RouteEntry's target network segment.
     */
    public readonly destinationCidrblock!: pulumi.Output<string | undefined>;
    /**
     * The name of the route entry. This name can have a string of 2 to 128 characters, must contain only alphanumeric characters or hyphens, such as "-",".","_", and must not begin or end with a hyphen, and must not begin with http:// or https://.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The route entry's next hop. ECS instance ID or VPC router interface ID.
     */
    public readonly nexthopId!: pulumi.Output<string | undefined>;
    /**
     * The next hop type. Available values:
     */
    public readonly nexthopType!: pulumi.Output<string | undefined>;
    /**
     * The ID of the route table.
     */
    public readonly routeTableId!: pulumi.Output<string>;
    /**
     * This argument has been deprecated. Please use other arguments to launch a custom route entry.
     *
     * @deprecated Attribute router_id has been deprecated and suggest removing it from your template.
     */
    public readonly routerId!: pulumi.Output<string>;

    /**
     * Create a RouteEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteEntryArgs | RouteEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteEntryState | undefined;
            resourceInputs["destinationCidrblock"] = state ? state.destinationCidrblock : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nexthopId"] = state ? state.nexthopId : undefined;
            resourceInputs["nexthopType"] = state ? state.nexthopType : undefined;
            resourceInputs["routeTableId"] = state ? state.routeTableId : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
        } else {
            const args = argsOrState as RouteEntryArgs | undefined;
            if ((!args || args.routeTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeTableId'");
            }
            resourceInputs["destinationCidrblock"] = args ? args.destinationCidrblock : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nexthopId"] = args ? args.nexthopId : undefined;
            resourceInputs["nexthopType"] = args ? args.nexthopType : undefined;
            resourceInputs["routeTableId"] = args ? args.routeTableId : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteEntry resources.
 */
export interface RouteEntryState {
    /**
     * The RouteEntry's target network segment.
     */
    destinationCidrblock?: pulumi.Input<string>;
    /**
     * The name of the route entry. This name can have a string of 2 to 128 characters, must contain only alphanumeric characters or hyphens, such as "-",".","_", and must not begin or end with a hyphen, and must not begin with http:// or https://.
     */
    name?: pulumi.Input<string>;
    /**
     * The route entry's next hop. ECS instance ID or VPC router interface ID.
     */
    nexthopId?: pulumi.Input<string>;
    /**
     * The next hop type. Available values:
     */
    nexthopType?: pulumi.Input<string>;
    /**
     * The ID of the route table.
     */
    routeTableId?: pulumi.Input<string>;
    /**
     * This argument has been deprecated. Please use other arguments to launch a custom route entry.
     *
     * @deprecated Attribute router_id has been deprecated and suggest removing it from your template.
     */
    routerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteEntry resource.
 */
export interface RouteEntryArgs {
    /**
     * The RouteEntry's target network segment.
     */
    destinationCidrblock?: pulumi.Input<string>;
    /**
     * The name of the route entry. This name can have a string of 2 to 128 characters, must contain only alphanumeric characters or hyphens, such as "-",".","_", and must not begin or end with a hyphen, and must not begin with http:// or https://.
     */
    name?: pulumi.Input<string>;
    /**
     * The route entry's next hop. ECS instance ID or VPC router interface ID.
     */
    nexthopId?: pulumi.Input<string>;
    /**
     * The next hop type. Available values:
     */
    nexthopType?: pulumi.Input<string>;
    /**
     * The ID of the route table.
     */
    routeTableId: pulumi.Input<string>;
    /**
     * This argument has been deprecated. Please use other arguments to launch a custom route entry.
     *
     * @deprecated Attribute router_id has been deprecated and suggest removing it from your template.
     */
    routerId?: pulumi.Input<string>;
}
