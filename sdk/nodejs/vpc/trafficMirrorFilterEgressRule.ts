// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a VPC Traffic Mirror Filter Egress Rule resource.
 *
 * For information about VPC Traffic Mirror Filter Egress Rule and how to use it, see [What is Traffic Mirror Filter Egress Rule](https://www.alibabacloud.com/help/doc-detail/261357.htm).
 *
 * > **NOTE:** Available in v1.140.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const exampleTrafficMirrorFilter = new alicloud.vpc.TrafficMirrorFilter("exampleTrafficMirrorFilter", {trafficMirrorFilterName: "example_value"});
 * const exampleTrafficMirrorFilterEgressRule = new alicloud.vpc.TrafficMirrorFilterEgressRule("exampleTrafficMirrorFilterEgressRule", {
 *     trafficMirrorFilterId: exampleTrafficMirrorFilter.id,
 *     priority: 1,
 *     ruleAction: "accept",
 *     protocol: "UDP",
 *     destinationCidrBlock: "10.0.0.0/24",
 *     sourceCidrBlock: "10.0.0.0/24",
 *     destinationPortRange: "1/120",
 *     sourcePortRange: "1/120",
 * });
 * ```
 *
 * ## Import
 *
 * VPC Traffic Mirror Filter Egress Rule can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:vpc/trafficMirrorFilterEgressRule:TrafficMirrorFilterEgressRule example <traffic_mirror_filter_id>:<traffic_mirror_filter_egress_rule_id>
 * ```
 */
export class TrafficMirrorFilterEgressRule extends pulumi.CustomResource {
    /**
     * Get an existing TrafficMirrorFilterEgressRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficMirrorFilterEgressRuleState, opts?: pulumi.CustomResourceOptions): TrafficMirrorFilterEgressRule {
        return new TrafficMirrorFilterEgressRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/trafficMirrorFilterEgressRule:TrafficMirrorFilterEgressRule';

    /**
     * Returns true if the given object is an instance of TrafficMirrorFilterEgressRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficMirrorFilterEgressRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficMirrorFilterEgressRule.__pulumiType;
    }

    /**
     * The destination CIDR block of the outbound traffic.
     */
    public readonly destinationCidrBlock!: pulumi.Output<string>;
    /**
     * The destination CIDR block of the outbound traffic. Valid values: `1` to `65535`. Separate the first port and last port with a forward slash (/), for example, `1/200` or `80/80`. A value of `-1/-1` indicates that all ports are available. Therefore, do not set the value to `-1/-1`. **NOTE:** When `protocol` is `ICMP`, this parameter is invalid.
     */
    public readonly destinationPortRange!: pulumi.Output<string>;
    /**
     * Whether to pre-check this request only. Default to: `false`
     */
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    /**
     * The priority of the inbound rule. A smaller value indicates a higher priority. The maximum value is `10`, which indicates that you can configure at most 10 inbound rules for a filter.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * The transport protocol used by outbound traffic that needs to be mirrored. Valid values: `ALL`, `ICMP`, `TCP`, `UDP`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The collection policy of the inbound rule. Valid values: `accept` or `drop`. `accept`: collects network traffic. `drop`: does not collect network traffic.
     */
    public readonly ruleAction!: pulumi.Output<string>;
    /**
     * The source CIDR block of the outbound traffic.
     */
    public readonly sourceCidrBlock!: pulumi.Output<string>;
    /**
     * The source port range of the outbound traffic. Valid values: `1` to `65535`. Separate the first port and last port with a forward slash (/), for example, `1/200` or `80/80`. A value of `-1/-1` indicates that all ports are available. Therefore, do not set the value to `-1/-1`. **NOTE:** When `protocol` is `ICMP`, this parameter is invalid.
     */
    public readonly sourcePortRange!: pulumi.Output<string>;
    /**
     * The state of the inbound rule. Valid values:`Creating`, `Created`, `Modifying` and `Deleting`.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The ID of the outbound rule.
     */
    public /*out*/ readonly trafficMirrorFilterEgressRuleId!: pulumi.Output<string>;
    /**
     * The ID of the filter.
     */
    public readonly trafficMirrorFilterId!: pulumi.Output<string>;

    /**
     * Create a TrafficMirrorFilterEgressRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficMirrorFilterEgressRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficMirrorFilterEgressRuleArgs | TrafficMirrorFilterEgressRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficMirrorFilterEgressRuleState | undefined;
            resourceInputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            resourceInputs["destinationPortRange"] = state ? state.destinationPortRange : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["ruleAction"] = state ? state.ruleAction : undefined;
            resourceInputs["sourceCidrBlock"] = state ? state.sourceCidrBlock : undefined;
            resourceInputs["sourcePortRange"] = state ? state.sourcePortRange : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["trafficMirrorFilterEgressRuleId"] = state ? state.trafficMirrorFilterEgressRuleId : undefined;
            resourceInputs["trafficMirrorFilterId"] = state ? state.trafficMirrorFilterId : undefined;
        } else {
            const args = argsOrState as TrafficMirrorFilterEgressRuleArgs | undefined;
            if ((!args || args.destinationCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.ruleAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleAction'");
            }
            if ((!args || args.sourceCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceCidrBlock'");
            }
            if ((!args || args.trafficMirrorFilterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorFilterId'");
            }
            resourceInputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            resourceInputs["destinationPortRange"] = args ? args.destinationPortRange : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["ruleAction"] = args ? args.ruleAction : undefined;
            resourceInputs["sourceCidrBlock"] = args ? args.sourceCidrBlock : undefined;
            resourceInputs["sourcePortRange"] = args ? args.sourcePortRange : undefined;
            resourceInputs["trafficMirrorFilterId"] = args ? args.trafficMirrorFilterId : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["trafficMirrorFilterEgressRuleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficMirrorFilterEgressRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficMirrorFilterEgressRule resources.
 */
export interface TrafficMirrorFilterEgressRuleState {
    /**
     * The destination CIDR block of the outbound traffic.
     */
    destinationCidrBlock?: pulumi.Input<string>;
    /**
     * The destination CIDR block of the outbound traffic. Valid values: `1` to `65535`. Separate the first port and last port with a forward slash (/), for example, `1/200` or `80/80`. A value of `-1/-1` indicates that all ports are available. Therefore, do not set the value to `-1/-1`. **NOTE:** When `protocol` is `ICMP`, this parameter is invalid.
     */
    destinationPortRange?: pulumi.Input<string>;
    /**
     * Whether to pre-check this request only. Default to: `false`
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The priority of the inbound rule. A smaller value indicates a higher priority. The maximum value is `10`, which indicates that you can configure at most 10 inbound rules for a filter.
     */
    priority?: pulumi.Input<number>;
    /**
     * The transport protocol used by outbound traffic that needs to be mirrored. Valid values: `ALL`, `ICMP`, `TCP`, `UDP`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The collection policy of the inbound rule. Valid values: `accept` or `drop`. `accept`: collects network traffic. `drop`: does not collect network traffic.
     */
    ruleAction?: pulumi.Input<string>;
    /**
     * The source CIDR block of the outbound traffic.
     */
    sourceCidrBlock?: pulumi.Input<string>;
    /**
     * The source port range of the outbound traffic. Valid values: `1` to `65535`. Separate the first port and last port with a forward slash (/), for example, `1/200` or `80/80`. A value of `-1/-1` indicates that all ports are available. Therefore, do not set the value to `-1/-1`. **NOTE:** When `protocol` is `ICMP`, this parameter is invalid.
     */
    sourcePortRange?: pulumi.Input<string>;
    /**
     * The state of the inbound rule. Valid values:`Creating`, `Created`, `Modifying` and `Deleting`.
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of the outbound rule.
     */
    trafficMirrorFilterEgressRuleId?: pulumi.Input<string>;
    /**
     * The ID of the filter.
     */
    trafficMirrorFilterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TrafficMirrorFilterEgressRule resource.
 */
export interface TrafficMirrorFilterEgressRuleArgs {
    /**
     * The destination CIDR block of the outbound traffic.
     */
    destinationCidrBlock: pulumi.Input<string>;
    /**
     * The destination CIDR block of the outbound traffic. Valid values: `1` to `65535`. Separate the first port and last port with a forward slash (/), for example, `1/200` or `80/80`. A value of `-1/-1` indicates that all ports are available. Therefore, do not set the value to `-1/-1`. **NOTE:** When `protocol` is `ICMP`, this parameter is invalid.
     */
    destinationPortRange?: pulumi.Input<string>;
    /**
     * Whether to pre-check this request only. Default to: `false`
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The priority of the inbound rule. A smaller value indicates a higher priority. The maximum value is `10`, which indicates that you can configure at most 10 inbound rules for a filter.
     */
    priority: pulumi.Input<number>;
    /**
     * The transport protocol used by outbound traffic that needs to be mirrored. Valid values: `ALL`, `ICMP`, `TCP`, `UDP`.
     */
    protocol: pulumi.Input<string>;
    /**
     * The collection policy of the inbound rule. Valid values: `accept` or `drop`. `accept`: collects network traffic. `drop`: does not collect network traffic.
     */
    ruleAction: pulumi.Input<string>;
    /**
     * The source CIDR block of the outbound traffic.
     */
    sourceCidrBlock: pulumi.Input<string>;
    /**
     * The source port range of the outbound traffic. Valid values: `1` to `65535`. Separate the first port and last port with a forward slash (/), for example, `1/200` or `80/80`. A value of `-1/-1` indicates that all ports are available. Therefore, do not set the value to `-1/-1`. **NOTE:** When `protocol` is `ICMP`, this parameter is invalid.
     */
    sourcePortRange?: pulumi.Input<string>;
    /**
     * The ID of the filter.
     */
    trafficMirrorFilterId: pulumi.Input<string>;
}
