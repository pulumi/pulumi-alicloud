// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Express Connect Bgp Group resource.
 *
 * For information about Express Connect Bgp Group and how to use it, see [What is Bgp Group](https://www.alibabacloud.com/help/en/doc-detail/91267.html).
 *
 * > **NOTE:** Available since v1.152.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const example = alicloud.expressconnect.getPhysicalConnections({
 *     nameRegex: "^preserved-NODELETING",
 * });
 * const vlanId = new random.index.Integer("vlan_id", {
 *     max: 2999,
 *     min: 1,
 * });
 * const exampleVirtualBorderRouter = new alicloud.expressconnect.VirtualBorderRouter("example", {
 *     localGatewayIp: "10.0.0.1",
 *     peerGatewayIp: "10.0.0.2",
 *     peeringSubnetMask: "255.255.255.252",
 *     physicalConnectionId: example.then(example => example.connections?.[0]?.id),
 *     virtualBorderRouterName: name,
 *     vlanId: vlanId.id,
 *     minRxInterval: 1000,
 *     minTxInterval: 1000,
 *     detectMultiplier: 10,
 * });
 * const exampleBgpGroup = new alicloud.vpc.BgpGroup("example", {
 *     authKey: "YourPassword+12345678",
 *     bgpGroupName: name,
 *     description: name,
 *     peerAsn: 1111,
 *     routerId: exampleVirtualBorderRouter.id,
 *     isFakeAsn: true,
 * });
 * ```
 *
 * ## Import
 *
 * Express Connect Bgp Group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:vpc/bgpGroup:BgpGroup example <id>
 * ```
 */
export class BgpGroup extends pulumi.CustomResource {
    /**
     * Get an existing BgpGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BgpGroupState, opts?: pulumi.CustomResourceOptions): BgpGroup {
        return new BgpGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/bgpGroup:BgpGroup';

    /**
     * Returns true if the given object is an instance of BgpGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BgpGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BgpGroup.__pulumiType;
    }

    /**
     * The authentication key of the BGP group.
     */
    declare public readonly authKey: pulumi.Output<string | undefined>;
    /**
     * The name of the BGP group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
     */
    declare public readonly bgpGroupName: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to clear the secret key. Valid values: `true`, `false`.
     */
    declare public readonly clearAuthKey: pulumi.Output<boolean | undefined>;
    /**
     * The description of the BGP group. The description must be 2 to 256 characters in length. It must start with a letter and cannot start with `http://` or `https://`.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The IP version. Valid values:
     * - `IPv4`: This is the default value.
     * - `IPv6`: IPv6 is supported only if the VBR for which you want to create the BGP group has IPv6 enabled.
     */
    declare public readonly ipVersion: pulumi.Output<string>;
    /**
     * Specifies whether to use a fake AS number. Valid values: `true`, `false`.
     *
     * > **NOTE:** Note A router that runs BGP typically belongs to only one AS. If you need to replace an AS with a new one, but you cannot immediately modify BGP configurations due to business requirements, you can specify a fake AS number to establish a connection with the local end. This ensures service continuity in scenarios such as AS migration or AS merging.
     */
    declare public readonly isFakeAsn: pulumi.Output<boolean>;
    /**
     * The custom ASN on the Alibaba Cloud side. Valid values:
     */
    declare public readonly localAsn: pulumi.Output<number>;
    /**
     * The ASN of the gateway device in the data center.
     */
    declare public readonly peerAsn: pulumi.Output<number>;
    /**
     * The Region ID of the BGP group.
     */
    declare public /*out*/ readonly regionId: pulumi.Output<string>;
    /**
     * The maximum number of routes supported by a BGP peer. Default value: 110.
     */
    declare public readonly routeLimit: pulumi.Output<number>;
    /**
     * The ID of the virtual border router (VBR) that is associated with the BGP group.
     */
    declare public readonly routerId: pulumi.Output<string>;
    /**
     * The status of the resource
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a BgpGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BgpGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BgpGroupArgs | BgpGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BgpGroupState | undefined;
            resourceInputs["authKey"] = state?.authKey;
            resourceInputs["bgpGroupName"] = state?.bgpGroupName;
            resourceInputs["clearAuthKey"] = state?.clearAuthKey;
            resourceInputs["description"] = state?.description;
            resourceInputs["ipVersion"] = state?.ipVersion;
            resourceInputs["isFakeAsn"] = state?.isFakeAsn;
            resourceInputs["localAsn"] = state?.localAsn;
            resourceInputs["peerAsn"] = state?.peerAsn;
            resourceInputs["regionId"] = state?.regionId;
            resourceInputs["routeLimit"] = state?.routeLimit;
            resourceInputs["routerId"] = state?.routerId;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as BgpGroupArgs | undefined;
            if (args?.peerAsn === undefined && !opts.urn) {
                throw new Error("Missing required property 'peerAsn'");
            }
            if (args?.routerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'routerId'");
            }
            resourceInputs["authKey"] = args?.authKey;
            resourceInputs["bgpGroupName"] = args?.bgpGroupName;
            resourceInputs["clearAuthKey"] = args?.clearAuthKey;
            resourceInputs["description"] = args?.description;
            resourceInputs["ipVersion"] = args?.ipVersion;
            resourceInputs["isFakeAsn"] = args?.isFakeAsn;
            resourceInputs["localAsn"] = args?.localAsn;
            resourceInputs["peerAsn"] = args?.peerAsn;
            resourceInputs["routeLimit"] = args?.routeLimit;
            resourceInputs["routerId"] = args?.routerId;
            resourceInputs["regionId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BgpGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BgpGroup resources.
 */
export interface BgpGroupState {
    /**
     * The authentication key of the BGP group.
     */
    authKey?: pulumi.Input<string>;
    /**
     * The name of the BGP group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
     */
    bgpGroupName?: pulumi.Input<string>;
    /**
     * Specifies whether to clear the secret key. Valid values: `true`, `false`.
     */
    clearAuthKey?: pulumi.Input<boolean>;
    /**
     * The description of the BGP group. The description must be 2 to 256 characters in length. It must start with a letter and cannot start with `http://` or `https://`.
     */
    description?: pulumi.Input<string>;
    /**
     * The IP version. Valid values:
     * - `IPv4`: This is the default value.
     * - `IPv6`: IPv6 is supported only if the VBR for which you want to create the BGP group has IPv6 enabled.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * Specifies whether to use a fake AS number. Valid values: `true`, `false`.
     *
     * > **NOTE:** Note A router that runs BGP typically belongs to only one AS. If you need to replace an AS with a new one, but you cannot immediately modify BGP configurations due to business requirements, you can specify a fake AS number to establish a connection with the local end. This ensures service continuity in scenarios such as AS migration or AS merging.
     */
    isFakeAsn?: pulumi.Input<boolean>;
    /**
     * The custom ASN on the Alibaba Cloud side. Valid values:
     */
    localAsn?: pulumi.Input<number>;
    /**
     * The ASN of the gateway device in the data center.
     */
    peerAsn?: pulumi.Input<number>;
    /**
     * The Region ID of the BGP group.
     */
    regionId?: pulumi.Input<string>;
    /**
     * The maximum number of routes supported by a BGP peer. Default value: 110.
     */
    routeLimit?: pulumi.Input<number>;
    /**
     * The ID of the virtual border router (VBR) that is associated with the BGP group.
     */
    routerId?: pulumi.Input<string>;
    /**
     * The status of the resource
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BgpGroup resource.
 */
export interface BgpGroupArgs {
    /**
     * The authentication key of the BGP group.
     */
    authKey?: pulumi.Input<string>;
    /**
     * The name of the BGP group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
     */
    bgpGroupName?: pulumi.Input<string>;
    /**
     * Specifies whether to clear the secret key. Valid values: `true`, `false`.
     */
    clearAuthKey?: pulumi.Input<boolean>;
    /**
     * The description of the BGP group. The description must be 2 to 256 characters in length. It must start with a letter and cannot start with `http://` or `https://`.
     */
    description?: pulumi.Input<string>;
    /**
     * The IP version. Valid values:
     * - `IPv4`: This is the default value.
     * - `IPv6`: IPv6 is supported only if the VBR for which you want to create the BGP group has IPv6 enabled.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * Specifies whether to use a fake AS number. Valid values: `true`, `false`.
     *
     * > **NOTE:** Note A router that runs BGP typically belongs to only one AS. If you need to replace an AS with a new one, but you cannot immediately modify BGP configurations due to business requirements, you can specify a fake AS number to establish a connection with the local end. This ensures service continuity in scenarios such as AS migration or AS merging.
     */
    isFakeAsn?: pulumi.Input<boolean>;
    /**
     * The custom ASN on the Alibaba Cloud side. Valid values:
     */
    localAsn?: pulumi.Input<number>;
    /**
     * The ASN of the gateway device in the data center.
     */
    peerAsn: pulumi.Input<number>;
    /**
     * The maximum number of routes supported by a BGP peer. Default value: 110.
     */
    routeLimit?: pulumi.Input<number>;
    /**
     * The ID of the virtual border router (VBR) that is associated with the BGP group.
     */
    routerId: pulumi.Input<string>;
}
