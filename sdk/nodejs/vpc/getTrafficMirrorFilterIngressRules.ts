// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the Vpc Traffic Mirror Filter Ingress Rules of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available in v1.141.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const ids = alicloud.vpc.getTrafficMirrorFilterIngressRules({
 *     trafficMirrorFilterId: "example_traffic_mirror_filter_id",
 *     ids: ["example_id"],
 * });
 * export const vpcTrafficMirrorFilterIngressRuleId1 = ids.then(ids => ids.rules?[0]?.id);
 * const status = alicloud.vpc.getTrafficMirrorFilterIngressRules({
 *     trafficMirrorFilterId: "example_traffic_mirror_filter_id",
 *     ids: ["example_id"],
 *     status: "Created",
 * });
 * export const vpcTrafficMirrorFilterIngressRuleId2 = status.then(status => status.rules?[0]?.id);
 * ```
 */
export function getTrafficMirrorFilterIngressRules(args: GetTrafficMirrorFilterIngressRulesArgs, opts?: pulumi.InvokeOptions): Promise<GetTrafficMirrorFilterIngressRulesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("alicloud:vpc/getTrafficMirrorFilterIngressRules:getTrafficMirrorFilterIngressRules", {
        "ids": args.ids,
        "outputFile": args.outputFile,
        "status": args.status,
        "trafficMirrorFilterId": args.trafficMirrorFilterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTrafficMirrorFilterIngressRules.
 */
export interface GetTrafficMirrorFilterIngressRulesArgs {
    /**
     * A list of Traffic Mirror Filter Ingress Rule IDs.
     */
    ids?: string[];
    outputFile?: string;
    /**
     * The status of the resource. Valid values:`Creating`, `Created`, `Modifying` and `Deleting`.
     */
    status?: string;
    /**
     * The ID of the filter associated with the inbound rule.
     */
    trafficMirrorFilterId: string;
}

/**
 * A collection of values returned by getTrafficMirrorFilterIngressRules.
 */
export interface GetTrafficMirrorFilterIngressRulesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly outputFile?: string;
    readonly rules: outputs.vpc.GetTrafficMirrorFilterIngressRulesRule[];
    readonly status?: string;
    readonly trafficMirrorFilterId: string;
}

export function getTrafficMirrorFilterIngressRulesOutput(args: GetTrafficMirrorFilterIngressRulesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTrafficMirrorFilterIngressRulesResult> {
    return pulumi.output(args).apply(a => getTrafficMirrorFilterIngressRules(a, opts))
}

/**
 * A collection of arguments for invoking getTrafficMirrorFilterIngressRules.
 */
export interface GetTrafficMirrorFilterIngressRulesOutputArgs {
    /**
     * A list of Traffic Mirror Filter Ingress Rule IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    outputFile?: pulumi.Input<string>;
    /**
     * The status of the resource. Valid values:`Creating`, `Created`, `Modifying` and `Deleting`.
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of the filter associated with the inbound rule.
     */
    trafficMirrorFilterId: pulumi.Input<string>;
}
