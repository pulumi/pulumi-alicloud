// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Vpc Ipv4 Gateway resource.
 *
 * For information about Vpc Ipv4 Gateway and how to use it, see [What is Ipv4 Gateway](https://www.alibabacloud.com/help/en/virtual-private-cloud/latest/createipv4gateway).
 *
 * > **NOTE:** Available in v1.181.0+.
 *
 * ## Import
 *
 * Vpc Ipv4 Gateway can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:vpc/ipv4Gateway:Ipv4Gateway example <id>
 * ```
 */
export class Ipv4Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Ipv4Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ipv4GatewayState, opts?: pulumi.CustomResourceOptions): Ipv4Gateway {
        return new Ipv4Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/ipv4Gateway:Ipv4Gateway';

    /**
     * Returns true if the given object is an instance of Ipv4Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ipv4Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ipv4Gateway.__pulumiType;
    }

    /**
     * The creation time of the resource.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Whether to PreCheck only this request. Value:-**true**: The check request is sent without creating an IPv4 Gateway. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.-**false** (default): Sends a normal request, returns an HTTP 2xx status code and directly creates an IPv4 Gateway.
     */
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the IPv4 gateway is active or not. Valid values are **true** and **false**.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The description of the IPv4 gateway. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
     */
    public readonly ipv4GatewayDescription!: pulumi.Output<string | undefined>;
    /**
     * Resource primary key field.
     */
    public /*out*/ readonly ipv4GatewayId!: pulumi.Output<string>;
    /**
     * The name of the IPv4 gateway. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter.
     */
    public readonly ipv4GatewayName!: pulumi.Output<string | undefined>;
    /**
     * ID of the route table associated with IPv4 Gateway.
     */
    public /*out*/ readonly ipv4GatewayRouteTableId!: pulumi.Output<string>;
    /**
     * The ID of the resource group to which the instance belongs.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The status of the resource.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The tags of the current resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The ID of the virtual private cloud (VPC) where you want to create the IPv4 gateway. You can create only one IPv4 gateway in a VPC.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Ipv4Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ipv4GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ipv4GatewayArgs | Ipv4GatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ipv4GatewayState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ipv4GatewayDescription"] = state ? state.ipv4GatewayDescription : undefined;
            resourceInputs["ipv4GatewayId"] = state ? state.ipv4GatewayId : undefined;
            resourceInputs["ipv4GatewayName"] = state ? state.ipv4GatewayName : undefined;
            resourceInputs["ipv4GatewayRouteTableId"] = state ? state.ipv4GatewayRouteTableId : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as Ipv4GatewayArgs | undefined;
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ipv4GatewayDescription"] = args ? args.ipv4GatewayDescription : undefined;
            resourceInputs["ipv4GatewayName"] = args ? args.ipv4GatewayName : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["ipv4GatewayId"] = undefined /*out*/;
            resourceInputs["ipv4GatewayRouteTableId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ipv4Gateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ipv4Gateway resources.
 */
export interface Ipv4GatewayState {
    /**
     * The creation time of the resource.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Whether to PreCheck only this request. Value:-**true**: The check request is sent without creating an IPv4 Gateway. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.-**false** (default): Sends a normal request, returns an HTTP 2xx status code and directly creates an IPv4 Gateway.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Whether the IPv4 gateway is active or not. Valid values are **true** and **false**.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The description of the IPv4 gateway. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
     */
    ipv4GatewayDescription?: pulumi.Input<string>;
    /**
     * Resource primary key field.
     */
    ipv4GatewayId?: pulumi.Input<string>;
    /**
     * The name of the IPv4 gateway. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter.
     */
    ipv4GatewayName?: pulumi.Input<string>;
    /**
     * ID of the route table associated with IPv4 Gateway.
     */
    ipv4GatewayRouteTableId?: pulumi.Input<string>;
    /**
     * The ID of the resource group to which the instance belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags of the current resource.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The ID of the virtual private cloud (VPC) where you want to create the IPv4 gateway. You can create only one IPv4 gateway in a VPC.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ipv4Gateway resource.
 */
export interface Ipv4GatewayArgs {
    /**
     * Whether to PreCheck only this request. Value:-**true**: The check request is sent without creating an IPv4 Gateway. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.-**false** (default): Sends a normal request, returns an HTTP 2xx status code and directly creates an IPv4 Gateway.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Whether the IPv4 gateway is active or not. Valid values are **true** and **false**.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The description of the IPv4 gateway. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
     */
    ipv4GatewayDescription?: pulumi.Input<string>;
    /**
     * The name of the IPv4 gateway. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter.
     */
    ipv4GatewayName?: pulumi.Input<string>;
    /**
     * The ID of the resource group to which the instance belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The tags of the current resource.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The ID of the virtual private cloud (VPC) where you want to create the IPv4 gateway. You can create only one IPv4 gateway in a VPC.
     */
    vpcId: pulumi.Input<string>;
}
