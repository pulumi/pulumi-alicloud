// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a VPC Ipv4 Gateway resource.
 *
 * For information about VPC Ipv4 Gateway and how to use it, see [What is Ipv4 Gateway](https://www.alibabacloud.com/help/en/virtual-private-cloud/latest/createipv4gateway).
 *
 * > **NOTE:** Available in v1.181.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const default = alicloud.vpc.getNetworks({
 *     nameRegex: "default-NoDeleting",
 * });
 * const example = new alicloud.vpc.Ipv4Gateway("example", {
 *     ipv4GatewayName: "example_value",
 *     vpcId: _default.then(_default => _default.ids?.[0]),
 * });
 * ```
 *
 * ## Import
 *
 * VPC Ipv4 Gateway can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:vpc/ipv4Gateway:Ipv4Gateway example <id>
 * ```
 */
export class Ipv4Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Ipv4Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ipv4GatewayState, opts?: pulumi.CustomResourceOptions): Ipv4Gateway {
        return new Ipv4Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/ipv4Gateway:Ipv4Gateway';

    /**
     * Returns true if the given object is an instance of Ipv4Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ipv4Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ipv4Gateway.__pulumiType;
    }

    /**
     * The dry run.
     */
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the IPv4 gateway is active or not. Valid values are `true` and `false`.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The description of the IPv4 gateway. The description must be `2` to `256` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
     */
    public readonly ipv4GatewayDescription!: pulumi.Output<string | undefined>;
    /**
     * The name of the IPv4 gateway. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter.
     */
    public readonly ipv4GatewayName!: pulumi.Output<string | undefined>;
    /**
     * The status of the resource.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The ID of the virtual private cloud (VPC) where you want to create the IPv4 gateway. You can create only one IPv4 gateway in a VPC.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Ipv4Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ipv4GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ipv4GatewayArgs | Ipv4GatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ipv4GatewayState | undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ipv4GatewayDescription"] = state ? state.ipv4GatewayDescription : undefined;
            resourceInputs["ipv4GatewayName"] = state ? state.ipv4GatewayName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as Ipv4GatewayArgs | undefined;
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ipv4GatewayDescription"] = args ? args.ipv4GatewayDescription : undefined;
            resourceInputs["ipv4GatewayName"] = args ? args.ipv4GatewayName : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ipv4Gateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ipv4Gateway resources.
 */
export interface Ipv4GatewayState {
    /**
     * The dry run.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Whether the IPv4 gateway is active or not. Valid values are `true` and `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The description of the IPv4 gateway. The description must be `2` to `256` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
     */
    ipv4GatewayDescription?: pulumi.Input<string>;
    /**
     * The name of the IPv4 gateway. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter.
     */
    ipv4GatewayName?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of the virtual private cloud (VPC) where you want to create the IPv4 gateway. You can create only one IPv4 gateway in a VPC.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ipv4Gateway resource.
 */
export interface Ipv4GatewayArgs {
    /**
     * The dry run.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Whether the IPv4 gateway is active or not. Valid values are `true` and `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The description of the IPv4 gateway. The description must be `2` to `256` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
     */
    ipv4GatewayDescription?: pulumi.Input<string>;
    /**
     * The name of the IPv4 gateway. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter.
     */
    ipv4GatewayName?: pulumi.Input<string>;
    /**
     * The ID of the virtual private cloud (VPC) where you want to create the IPv4 gateway. You can create only one IPv4 gateway in a VPC.
     */
    vpcId: pulumi.Input<string>;
}
