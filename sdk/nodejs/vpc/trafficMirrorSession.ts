// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a VPC Traffic Mirror Session resource. Traffic mirroring session.
 *
 * For information about VPC Traffic Mirror Session and how to use it, see [What is Traffic Mirror Session](https://www.alibabacloud.com/help/en/doc-detail/261364.htm).
 *
 * > **NOTE:** Available since v1.142.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = alicloud.ecs.getInstanceTypes({
 *     instanceTypeFamily: "ecs.g7",
 * });
 * const defaultGetZones = _default.then(_default => alicloud.getZones({
 *     availableResourceCreation: "Instance",
 *     availableInstanceType: _default.instanceTypes?.[0]?.id,
 * }));
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: defaultGetZones.then(defaultGetZones => defaultGetZones.zones?.[0]?.id),
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {
 *     name: name,
 *     description: name,
 *     vpcId: defaultNetwork.id,
 * });
 * const defaultGetImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_18.*64",
 *     mostRecent: true,
 *     owners: "system",
 * });
 * const defaultInstance: alicloud.ecs.Instance[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     defaultInstance.push(new alicloud.ecs.Instance(`default-${range.value}`, {
 *         availabilityZone: defaultGetZones.then(defaultGetZones => defaultGetZones.zones?.[0]?.id),
 *         instanceName: name,
 *         hostName: name,
 *         imageId: defaultGetImages.then(defaultGetImages => defaultGetImages.images?.[0]?.id),
 *         instanceType: _default.then(_default => _default.instanceTypes?.[0]?.id),
 *         securityGroups: [defaultSecurityGroup.id],
 *         vswitchId: defaultSwitch.id,
 *         systemDiskCategory: "cloud_essd",
 *     }));
 * }
 * const defaultEcsNetworkInterface: alicloud.ecs.EcsNetworkInterface[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     defaultEcsNetworkInterface.push(new alicloud.ecs.EcsNetworkInterface(`default-${range.value}`, {
 *         networkInterfaceName: name,
 *         vswitchId: defaultSwitch.id,
 *         securityGroupIds: [defaultSecurityGroup.id],
 *     }));
 * }
 * const defaultEcsNetworkInterfaceAttachment: alicloud.ecs.EcsNetworkInterfaceAttachment[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     defaultEcsNetworkInterfaceAttachment.push(new alicloud.ecs.EcsNetworkInterfaceAttachment(`default-${range.value}`, {
 *         instanceId: defaultInstance[range.value].id,
 *         networkInterfaceId: defaultEcsNetworkInterface[range.value].id,
 *     }));
 * }
 * const defaultTrafficMirrorFilter = new alicloud.vpc.TrafficMirrorFilter("default", {
 *     trafficMirrorFilterName: name,
 *     trafficMirrorFilterDescription: name,
 * });
 * const defaultTrafficMirrorSession = new alicloud.vpc.TrafficMirrorSession("default", {
 *     priority: 1,
 *     virtualNetworkId: 10,
 *     trafficMirrorSessionDescription: name,
 *     trafficMirrorSessionName: name,
 *     trafficMirrorTargetId: defaultEcsNetworkInterfaceAttachment[0].networkInterfaceId,
 *     trafficMirrorSourceIds: [defaultEcsNetworkInterfaceAttachment[1].networkInterfaceId],
 *     trafficMirrorFilterId: defaultTrafficMirrorFilter.id,
 *     trafficMirrorTargetType: "NetworkInterface",
 * });
 * ```
 *
 * ## Import
 *
 * VPC Traffic Mirror Session can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:vpc/trafficMirrorSession:TrafficMirrorSession example <id>
 * ```
 */
export class TrafficMirrorSession extends pulumi.CustomResource {
    /**
     * Get an existing TrafficMirrorSession resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficMirrorSessionState, opts?: pulumi.CustomResourceOptions): TrafficMirrorSession {
        return new TrafficMirrorSession(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/trafficMirrorSession:TrafficMirrorSession';

    /**
     * Returns true if the given object is an instance of TrafficMirrorSession.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficMirrorSession {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficMirrorSession.__pulumiType;
    }

    /**
     * Whether to PreCheck only this request, value:
     * - **true**: sends a check request and does not create a mirror session. Check items include whether required parameters are filled in, request format, and restrictions. If the check fails, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.
     * - **false** (default): Sends a normal request and directly creates a mirror session after checking.
     */
    declare public readonly dryRun: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether to enable traffic mirror sessions. default to `false`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * Maximum Transmission Unit (MTU).
     */
    declare public readonly packetLength: pulumi.Output<number>;
    /**
     * The priority of the traffic mirror session. Valid values: `1` to `32766`. A smaller value indicates a higher priority. You cannot specify the same priority for traffic mirror sessions that are created in the same region with the same Alibaba Cloud account.
     */
    declare public readonly priority: pulumi.Output<number>;
    /**
     * The ID of the resource group.
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * The status of the resource.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The tags of this resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the filter.
     */
    declare public readonly trafficMirrorFilterId: pulumi.Output<string>;
    /**
     * The description of the traffic mirror session. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`.
     */
    declare public readonly trafficMirrorSessionDescription: pulumi.Output<string | undefined>;
    /**
     * The name of the traffic mirror session. The name must be `2` to `128` characters in length and can contain digits, underscores (_), and hyphens (-). It must start with a letter.
     */
    declare public readonly trafficMirrorSessionName: pulumi.Output<string | undefined>;
    /**
     * The ID of the image source instance. Currently, the Eni is supported as the image source. The default value of N is 1, that is, only one mirror source can be added to a mirror session.
     */
    declare public readonly trafficMirrorSourceIds: pulumi.Output<string[]>;
    /**
     * The ID of the mirror destination. You can specify only an ENI or a Server Load Balancer (SLB) instance as a mirror destination.
     */
    declare public readonly trafficMirrorTargetId: pulumi.Output<string>;
    /**
     * The type of the mirror destination. Valid values: `NetworkInterface` or `SLB`. `NetworkInterface`: an ENI. `SLB`: an internal-facing SLB instance.
     */
    declare public readonly trafficMirrorTargetType: pulumi.Output<string>;
    /**
     * The VXLAN network identifier (VNI) that is used to distinguish different mirrored traffic. Valid values: `0` to `16777215`. You can specify VNIs for the traffic mirror destination to identify mirrored traffic from different sessions. If you do not specify a VNI, the system randomly allocates a VNI. If you want the system to randomly allocate a VNI, ignore this parameter.
     */
    declare public readonly virtualNetworkId: pulumi.Output<number>;

    /**
     * Create a TrafficMirrorSession resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficMirrorSessionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficMirrorSessionArgs | TrafficMirrorSessionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficMirrorSessionState | undefined;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["packetLength"] = state?.packetLength;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["trafficMirrorFilterId"] = state?.trafficMirrorFilterId;
            resourceInputs["trafficMirrorSessionDescription"] = state?.trafficMirrorSessionDescription;
            resourceInputs["trafficMirrorSessionName"] = state?.trafficMirrorSessionName;
            resourceInputs["trafficMirrorSourceIds"] = state?.trafficMirrorSourceIds;
            resourceInputs["trafficMirrorTargetId"] = state?.trafficMirrorTargetId;
            resourceInputs["trafficMirrorTargetType"] = state?.trafficMirrorTargetType;
            resourceInputs["virtualNetworkId"] = state?.virtualNetworkId;
        } else {
            const args = argsOrState as TrafficMirrorSessionArgs | undefined;
            if (args?.priority === undefined && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if (args?.trafficMirrorFilterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorFilterId'");
            }
            if (args?.trafficMirrorSourceIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorSourceIds'");
            }
            if (args?.trafficMirrorTargetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorTargetId'");
            }
            if (args?.trafficMirrorTargetType === undefined && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorTargetType'");
            }
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["packetLength"] = args?.packetLength;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["trafficMirrorFilterId"] = args?.trafficMirrorFilterId;
            resourceInputs["trafficMirrorSessionDescription"] = args?.trafficMirrorSessionDescription;
            resourceInputs["trafficMirrorSessionName"] = args?.trafficMirrorSessionName;
            resourceInputs["trafficMirrorSourceIds"] = args?.trafficMirrorSourceIds;
            resourceInputs["trafficMirrorTargetId"] = args?.trafficMirrorTargetId;
            resourceInputs["trafficMirrorTargetType"] = args?.trafficMirrorTargetType;
            resourceInputs["virtualNetworkId"] = args?.virtualNetworkId;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficMirrorSession.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficMirrorSession resources.
 */
export interface TrafficMirrorSessionState {
    /**
     * Whether to PreCheck only this request, value:
     * - **true**: sends a check request and does not create a mirror session. Check items include whether required parameters are filled in, request format, and restrictions. If the check fails, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.
     * - **false** (default): Sends a normal request and directly creates a mirror session after checking.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Specifies whether to enable traffic mirror sessions. default to `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Maximum Transmission Unit (MTU).
     */
    packetLength?: pulumi.Input<number>;
    /**
     * The priority of the traffic mirror session. Valid values: `1` to `32766`. A smaller value indicates a higher priority. You cannot specify the same priority for traffic mirror sessions that are created in the same region with the same Alibaba Cloud account.
     */
    priority?: pulumi.Input<number>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags of this resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the filter.
     */
    trafficMirrorFilterId?: pulumi.Input<string>;
    /**
     * The description of the traffic mirror session. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`.
     */
    trafficMirrorSessionDescription?: pulumi.Input<string>;
    /**
     * The name of the traffic mirror session. The name must be `2` to `128` characters in length and can contain digits, underscores (_), and hyphens (-). It must start with a letter.
     */
    trafficMirrorSessionName?: pulumi.Input<string>;
    /**
     * The ID of the image source instance. Currently, the Eni is supported as the image source. The default value of N is 1, that is, only one mirror source can be added to a mirror session.
     */
    trafficMirrorSourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the mirror destination. You can specify only an ENI or a Server Load Balancer (SLB) instance as a mirror destination.
     */
    trafficMirrorTargetId?: pulumi.Input<string>;
    /**
     * The type of the mirror destination. Valid values: `NetworkInterface` or `SLB`. `NetworkInterface`: an ENI. `SLB`: an internal-facing SLB instance.
     */
    trafficMirrorTargetType?: pulumi.Input<string>;
    /**
     * The VXLAN network identifier (VNI) that is used to distinguish different mirrored traffic. Valid values: `0` to `16777215`. You can specify VNIs for the traffic mirror destination to identify mirrored traffic from different sessions. If you do not specify a VNI, the system randomly allocates a VNI. If you want the system to randomly allocate a VNI, ignore this parameter.
     */
    virtualNetworkId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TrafficMirrorSession resource.
 */
export interface TrafficMirrorSessionArgs {
    /**
     * Whether to PreCheck only this request, value:
     * - **true**: sends a check request and does not create a mirror session. Check items include whether required parameters are filled in, request format, and restrictions. If the check fails, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.
     * - **false** (default): Sends a normal request and directly creates a mirror session after checking.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Specifies whether to enable traffic mirror sessions. default to `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Maximum Transmission Unit (MTU).
     */
    packetLength?: pulumi.Input<number>;
    /**
     * The priority of the traffic mirror session. Valid values: `1` to `32766`. A smaller value indicates a higher priority. You cannot specify the same priority for traffic mirror sessions that are created in the same region with the same Alibaba Cloud account.
     */
    priority: pulumi.Input<number>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The tags of this resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the filter.
     */
    trafficMirrorFilterId: pulumi.Input<string>;
    /**
     * The description of the traffic mirror session. The description must be `2` to `256` characters in length and cannot start with `http://` or `https://`.
     */
    trafficMirrorSessionDescription?: pulumi.Input<string>;
    /**
     * The name of the traffic mirror session. The name must be `2` to `128` characters in length and can contain digits, underscores (_), and hyphens (-). It must start with a letter.
     */
    trafficMirrorSessionName?: pulumi.Input<string>;
    /**
     * The ID of the image source instance. Currently, the Eni is supported as the image source. The default value of N is 1, that is, only one mirror source can be added to a mirror session.
     */
    trafficMirrorSourceIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the mirror destination. You can specify only an ENI or a Server Load Balancer (SLB) instance as a mirror destination.
     */
    trafficMirrorTargetId: pulumi.Input<string>;
    /**
     * The type of the mirror destination. Valid values: `NetworkInterface` or `SLB`. `NetworkInterface`: an ENI. `SLB`: an internal-facing SLB instance.
     */
    trafficMirrorTargetType: pulumi.Input<string>;
    /**
     * The VXLAN network identifier (VNI) that is used to distinguish different mirrored traffic. Valid values: `0` to `16777215`. You can specify VNIs for the traffic mirror destination to identify mirrored traffic from different sessions. If you do not specify a VNI, the system randomly allocates a VNI. If you want the system to randomly allocate a VNI, ignore this parameter.
     */
    virtualNetworkId?: pulumi.Input<number>;
}
