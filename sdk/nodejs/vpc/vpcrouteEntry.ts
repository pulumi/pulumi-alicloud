// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a VPC Route Entry resource.
 *
 * There are route entries in the routing table, and the next hop is judged based on the route entries.
 *
 * For information about VPC Route Entry and how to use it, see [What is Route Entry](https://www.alibabacloud.com/help/en/vpc/developer-reference/api-vpc-2016-04-28-createrouteentry).
 *
 * > **NOTE:** Available since v1.245.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.getZones({
 *     availableDiskCategory: "cloud_efficiency",
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultGetImages = alicloud.ecs.getImages({
 *     mostRecent: true,
 *     owners: "system",
 * });
 * const defaultGetInstanceTypes = Promise.all([_default, defaultGetImages]).then(([_default, defaultGetImages]) => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: _default.zones?.[0]?.id,
 *     imageId: defaultGetImages.images?.[0]?.id,
 * }));
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "192.168.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "192.168.192.0/24",
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {
 *     name: name,
 *     vpcId: defaultNetwork.id,
 * });
 * const defaultInstance = new alicloud.ecs.Instance("default", {
 *     imageId: defaultGetImages.then(defaultGetImages => defaultGetImages.images?.[0]?.id),
 *     instanceType: defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.id),
 *     securityGroups: [defaultSecurityGroup].map(__item => __item.id),
 *     internetChargeType: "PayByTraffic",
 *     internetMaxBandwidthOut: 10,
 *     availabilityZone: defaultGetInstanceTypes.then(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.availabilityZones?.[0]),
 *     instanceChargeType: "PostPaid",
 *     systemDiskCategory: "cloud_efficiency",
 *     vswitchId: defaultSwitch.id,
 *     instanceName: name,
 * });
 * const foo = new alicloud.vpc.RouteEntry("foo", {
 *     routeTableId: defaultNetwork.routeTableId,
 *     destinationCidrblock: "172.11.1.1/32",
 *     nexthopType: "Instance",
 *     nexthopId: defaultInstance.id,
 * });
 * ```
 *
 * ## Import
 *
 * VPC Route Entry can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:vpc/vPCRouteEntry:VPCRouteEntry example <route_table_id>:<destination_cidr_block>
 * ```
 */
export class VPCRouteEntry extends pulumi.CustomResource {
    /**
     * Get an existing VPCRouteEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VPCRouteEntryState, opts?: pulumi.CustomResourceOptions): VPCRouteEntry {
        return new VPCRouteEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/vPCRouteEntry:VPCRouteEntry';

    /**
     * Returns true if the given object is an instance of VPCRouteEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VPCRouteEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VPCRouteEntry.__pulumiType;
    }

    /**
     * Description of the route entry.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The destination network segment of the routing entry.
     */
    public readonly destinationCidrBlock!: pulumi.Output<string>;
    /**
     * Next jump See `nextHops` below.
     */
    public readonly nextHops!: pulumi.Output<outputs.vpc.VPCRouteEntryNextHop[]>;
    /**
     * The ID of the next hop instance of the custom route entry.
     */
    public readonly nexthopId!: pulumi.Output<string>;
    /**
     * The type of the next hop of the custom route entry. Valid values:
     * - `Instance` (default): The ECS Instance.
     * - `HaVip`: a highly available virtual IP address.
     * - `RouterInterface`: indicates the router interface.
     * - **Network interface**: ENI.
     * - `VpnGateway`: the VPN gateway.
     * - `IPv6Gateway`:IPv6 gateway.
     * - `NatGateway`:NAT gateway.
     * - `Attachment`: The forwarding router.
     * - `VpcPeer`:VPC peer connection.
     * - `Ipv4Gateway`:IPv4 Gateway.
     * - `GatewayEndpoint`: the gateway endpoint.
     * - `Ecr`: Leased line gateway.
     * - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
     */
    public readonly nexthopType!: pulumi.Output<string>;
    /**
     * The name of the route entry.
     */
    public readonly routeEntryName!: pulumi.Output<string>;
    /**
     * Route publish status and publish target type See `routePublishTargets` below.
     */
    public readonly routePublishTargets!: pulumi.Output<outputs.vpc.VPCRouteEntryRoutePublishTarget[] | undefined>;
    /**
     * Routing table ID
     */
    public readonly routeTableId!: pulumi.Output<string>;
    /**
     * The status of the route entry.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a VPCRouteEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VPCRouteEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VPCRouteEntryArgs | VPCRouteEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VPCRouteEntryState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            resourceInputs["nextHops"] = state ? state.nextHops : undefined;
            resourceInputs["nexthopId"] = state ? state.nexthopId : undefined;
            resourceInputs["nexthopType"] = state ? state.nexthopType : undefined;
            resourceInputs["routeEntryName"] = state ? state.routeEntryName : undefined;
            resourceInputs["routePublishTargets"] = state ? state.routePublishTargets : undefined;
            resourceInputs["routeTableId"] = state ? state.routeTableId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as VPCRouteEntryArgs | undefined;
            if ((!args || args.destinationCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if ((!args || args.routeTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeTableId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            resourceInputs["nextHops"] = args ? args.nextHops : undefined;
            resourceInputs["nexthopId"] = args ? args.nexthopId : undefined;
            resourceInputs["nexthopType"] = args ? args.nexthopType : undefined;
            resourceInputs["routeEntryName"] = args ? args.routeEntryName : undefined;
            resourceInputs["routePublishTargets"] = args ? args.routePublishTargets : undefined;
            resourceInputs["routeTableId"] = args ? args.routeTableId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VPCRouteEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VPCRouteEntry resources.
 */
export interface VPCRouteEntryState {
    /**
     * Description of the route entry.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination network segment of the routing entry.
     */
    destinationCidrBlock?: pulumi.Input<string>;
    /**
     * Next jump See `nextHops` below.
     */
    nextHops?: pulumi.Input<pulumi.Input<inputs.vpc.VPCRouteEntryNextHop>[]>;
    /**
     * The ID of the next hop instance of the custom route entry.
     */
    nexthopId?: pulumi.Input<string>;
    /**
     * The type of the next hop of the custom route entry. Valid values:
     * - `Instance` (default): The ECS Instance.
     * - `HaVip`: a highly available virtual IP address.
     * - `RouterInterface`: indicates the router interface.
     * - **Network interface**: ENI.
     * - `VpnGateway`: the VPN gateway.
     * - `IPv6Gateway`:IPv6 gateway.
     * - `NatGateway`:NAT gateway.
     * - `Attachment`: The forwarding router.
     * - `VpcPeer`:VPC peer connection.
     * - `Ipv4Gateway`:IPv4 Gateway.
     * - `GatewayEndpoint`: the gateway endpoint.
     * - `Ecr`: Leased line gateway.
     * - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
     */
    nexthopType?: pulumi.Input<string>;
    /**
     * The name of the route entry.
     */
    routeEntryName?: pulumi.Input<string>;
    /**
     * Route publish status and publish target type See `routePublishTargets` below.
     */
    routePublishTargets?: pulumi.Input<pulumi.Input<inputs.vpc.VPCRouteEntryRoutePublishTarget>[]>;
    /**
     * Routing table ID
     */
    routeTableId?: pulumi.Input<string>;
    /**
     * The status of the route entry.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VPCRouteEntry resource.
 */
export interface VPCRouteEntryArgs {
    /**
     * Description of the route entry.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination network segment of the routing entry.
     */
    destinationCidrBlock: pulumi.Input<string>;
    /**
     * Next jump See `nextHops` below.
     */
    nextHops?: pulumi.Input<pulumi.Input<inputs.vpc.VPCRouteEntryNextHop>[]>;
    /**
     * The ID of the next hop instance of the custom route entry.
     */
    nexthopId?: pulumi.Input<string>;
    /**
     * The type of the next hop of the custom route entry. Valid values:
     * - `Instance` (default): The ECS Instance.
     * - `HaVip`: a highly available virtual IP address.
     * - `RouterInterface`: indicates the router interface.
     * - **Network interface**: ENI.
     * - `VpnGateway`: the VPN gateway.
     * - `IPv6Gateway`:IPv6 gateway.
     * - `NatGateway`:NAT gateway.
     * - `Attachment`: The forwarding router.
     * - `VpcPeer`:VPC peer connection.
     * - `Ipv4Gateway`:IPv4 Gateway.
     * - `GatewayEndpoint`: the gateway endpoint.
     * - `Ecr`: Leased line gateway.
     * - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
     */
    nexthopType?: pulumi.Input<string>;
    /**
     * The name of the route entry.
     */
    routeEntryName?: pulumi.Input<string>;
    /**
     * Route publish status and publish target type See `routePublishTargets` below.
     */
    routePublishTargets?: pulumi.Input<pulumi.Input<inputs.vpc.VPCRouteEntryRoutePublishTarget>[]>;
    /**
     * Routing table ID
     */
    routeTableId: pulumi.Input<string>;
}
