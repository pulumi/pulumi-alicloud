// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Express Connect Vbr Ha resource.
 *
 * VBR switching Group.
 *
 * For information about Express Connect Vbr Ha and how to use it, see [What is Vbr Ha](https://www.alibabacloud.com/help/doc-detail/212629.html).
 *
 * > **NOTE:** Available since v1.151.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = alicloud.getRegions({
 *     current: true,
 * });
 * const example = alicloud.expressconnect.getPhysicalConnections({
 *     nameRegex: "^preserved-NODELETING",
 * });
 * const vlanId = new random.index.Integer("vlan_id", {
 *     max: 2999,
 *     min: 1,
 * });
 * const exampleVirtualBorderRouter: alicloud.expressconnect.VirtualBorderRouter[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleVirtualBorderRouter.push(new alicloud.expressconnect.VirtualBorderRouter(`example-${range.value}`, {
 *         localGatewayIp: "10.0.0.1",
 *         peerGatewayIp: "10.0.0.2",
 *         peeringSubnetMask: "255.255.255.252",
 *         physicalConnectionId: example.then(example => example.connections[range.value].id),
 *         virtualBorderRouterName: std.format({
 *             input: `${name}-%d`,
 *             args: [range.value + 1],
 *         }).then(invoke => invoke.result),
 *         vlanId: vlanId.id + range.value,
 *         minRxInterval: 1000,
 *         minTxInterval: 1000,
 *         detectMultiplier: 10,
 *     }));
 * }
 * const exampleInstance = new alicloud.cen.Instance("example", {
 *     cenInstanceName: name,
 *     description: name,
 *     protectionLevel: "REDUCED",
 * });
 * const exampleInstanceAttachment: alicloud.cen.InstanceAttachment[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleInstanceAttachment.push(new alicloud.cen.InstanceAttachment(`example-${range.value}`, {
 *         instanceId: exampleInstance.id,
 *         childInstanceId: exampleVirtualBorderRouter[range.value].id,
 *         childInstanceType: "VBR",
 *         childInstanceRegionId: _default.then(_default => _default.regions?.[0]?.id),
 *     }));
 * }
 * const exampleVbrHa = new alicloud.vpc.VbrHa("example", {
 *     vbrId: exampleInstanceAttachment[0].childInstanceId,
 *     peerVbrId: exampleInstanceAttachment[1].childInstanceId,
 *     vbrHaName: name,
 *     description: name,
 * });
 * ```
 *
 * ## Import
 *
 * Express Connect Vbr Ha can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:vpc/vbrHa:VbrHa example <id>
 * ```
 */
export class VbrHa extends pulumi.CustomResource {
    /**
     * Get an existing VbrHa resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VbrHaState, opts?: pulumi.CustomResourceOptions): VbrHa {
        return new VbrHa(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/vbrHa:VbrHa';

    /**
     * Returns true if the given object is an instance of VbrHa.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VbrHa {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VbrHa.__pulumiType;
    }

    /**
     * The creation time of the VBR.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The description of the VBR switching group.
     * It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with 'http:// 'or 'https.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Whether to PreCheck only this request. Value range:
     * - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
     * - *false** (default): Send a normal request and start the instance directly after passing the check.
     */
    declare public readonly dryRun: pulumi.Output<boolean | undefined>;
    /**
     * The instance ID of another VBR in The VBR switching group.
     */
    declare public readonly peerVbrId: pulumi.Output<string>;
    /**
     * The ID of the region to which the VBR belongs.
     */
    declare public /*out*/ readonly regionId: pulumi.Output<string>;
    /**
     * Status of VBR switching Group
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * VBR switch group name.
     */
    declare public readonly vbrHaName: pulumi.Output<string | undefined>;
    /**
     * The VBR instance ID.
     */
    declare public readonly vbrId: pulumi.Output<string>;

    /**
     * Create a VbrHa resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VbrHaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VbrHaArgs | VbrHaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VbrHaState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["peerVbrId"] = state?.peerVbrId;
            resourceInputs["regionId"] = state?.regionId;
            resourceInputs["status"] = state?.status;
            resourceInputs["vbrHaName"] = state?.vbrHaName;
            resourceInputs["vbrId"] = state?.vbrId;
        } else {
            const args = argsOrState as VbrHaArgs | undefined;
            if (args?.peerVbrId === undefined && !opts.urn) {
                throw new Error("Missing required property 'peerVbrId'");
            }
            if (args?.vbrId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vbrId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["peerVbrId"] = args?.peerVbrId;
            resourceInputs["vbrHaName"] = args?.vbrHaName;
            resourceInputs["vbrId"] = args?.vbrId;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["regionId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VbrHa.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VbrHa resources.
 */
export interface VbrHaState {
    /**
     * The creation time of the VBR.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The description of the VBR switching group.
     * It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with 'http:// 'or 'https.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to PreCheck only this request. Value range:
     * - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
     * - *false** (default): Send a normal request and start the instance directly after passing the check.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The instance ID of another VBR in The VBR switching group.
     */
    peerVbrId?: pulumi.Input<string>;
    /**
     * The ID of the region to which the VBR belongs.
     */
    regionId?: pulumi.Input<string>;
    /**
     * Status of VBR switching Group
     */
    status?: pulumi.Input<string>;
    /**
     * VBR switch group name.
     */
    vbrHaName?: pulumi.Input<string>;
    /**
     * The VBR instance ID.
     */
    vbrId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VbrHa resource.
 */
export interface VbrHaArgs {
    /**
     * The description of the VBR switching group.
     * It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with 'http:// 'or 'https.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to PreCheck only this request. Value range:
     * - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
     * - *false** (default): Send a normal request and start the instance directly after passing the check.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The instance ID of another VBR in The VBR switching group.
     */
    peerVbrId: pulumi.Input<string>;
    /**
     * VBR switch group name.
     */
    vbrHaName?: pulumi.Input<string>;
    /**
     * The VBR instance ID.
     */
    vbrId: pulumi.Input<string>;
}
