// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a VPC Vbr Ha resource.
 *
 * For information about VPC Vbr Ha and how to use it, see [What is Vbr Ha](https://www.alibabacloud.com/help/doc-detail/212629.html).
 *
 * > **NOTE:** Available since v1.151.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = alicloud.getRegions({
 *     current: true,
 * });
 * const example = alicloud.expressconnect.getPhysicalConnections({
 *     nameRegex: "^preserved-NODELETING",
 * });
 * const vlanId = new random.index.Integer("vlan_id", {
 *     max: 2999,
 *     min: 1,
 * });
 * const exampleVirtualBorderRouter: alicloud.expressconnect.VirtualBorderRouter[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleVirtualBorderRouter.push(new alicloud.expressconnect.VirtualBorderRouter(`example-${range.value}`, {
 *         localGatewayIp: "10.0.0.1",
 *         peerGatewayIp: "10.0.0.2",
 *         peeringSubnetMask: "255.255.255.252",
 *         physicalConnectionId: example.then(example => example.connections[range.value].id),
 *         virtualBorderRouterName: std.format({
 *             input: `${name}-%d`,
 *             args: [range.value + 1],
 *         }).then(invoke => invoke.result),
 *         vlanId: vlanId.id + range.value,
 *         minRxInterval: 1000,
 *         minTxInterval: 1000,
 *         detectMultiplier: 10,
 *     }));
 * }
 * const exampleInstance = new alicloud.cen.Instance("example", {
 *     cenInstanceName: name,
 *     description: name,
 *     protectionLevel: "REDUCED",
 * });
 * const exampleInstanceAttachment: alicloud.cen.InstanceAttachment[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleInstanceAttachment.push(new alicloud.cen.InstanceAttachment(`example-${range.value}`, {
 *         instanceId: exampleInstance.id,
 *         childInstanceId: exampleVirtualBorderRouter[range.value].id,
 *         childInstanceType: "VBR",
 *         childInstanceRegionId: _default.then(_default => _default.regions?.[0]?.id),
 *     }));
 * }
 * const exampleVbrHa = new alicloud.vpc.VbrHa("example", {
 *     vbrId: exampleInstanceAttachment[0].childInstanceId,
 *     peerVbrId: exampleInstanceAttachment[1].childInstanceId,
 *     vbrHaName: name,
 *     description: name,
 * });
 * ```
 *
 * ## Import
 *
 * VPC Vbr Ha can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:vpc/vbrHa:VbrHa example <id>
 * ```
 */
export class VbrHa extends pulumi.CustomResource {
    /**
     * Get an existing VbrHa resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VbrHaState, opts?: pulumi.CustomResourceOptions): VbrHa {
        return new VbrHa(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/vbrHa:VbrHa';

    /**
     * Returns true if the given object is an instance of VbrHa.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VbrHa {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VbrHa.__pulumiType;
    }

    /**
     * The description of the VBR switching group. It must be `2` to `256` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The dry run.
     */
    declare public readonly dryRun: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the other VBR in the VBR failover group.
     */
    declare public readonly peerVbrId: pulumi.Output<string>;
    /**
     * The state of the VBR failover group.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The name of the VBR failover group.
     */
    declare public readonly vbrHaName: pulumi.Output<string | undefined>;
    /**
     * The ID of the VBR instance.
     */
    declare public readonly vbrId: pulumi.Output<string>;

    /**
     * Create a VbrHa resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VbrHaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VbrHaArgs | VbrHaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VbrHaState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["peerVbrId"] = state?.peerVbrId;
            resourceInputs["status"] = state?.status;
            resourceInputs["vbrHaName"] = state?.vbrHaName;
            resourceInputs["vbrId"] = state?.vbrId;
        } else {
            const args = argsOrState as VbrHaArgs | undefined;
            if (args?.peerVbrId === undefined && !opts.urn) {
                throw new Error("Missing required property 'peerVbrId'");
            }
            if (args?.vbrId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vbrId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["peerVbrId"] = args?.peerVbrId;
            resourceInputs["vbrHaName"] = args?.vbrHaName;
            resourceInputs["vbrId"] = args?.vbrId;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VbrHa.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VbrHa resources.
 */
export interface VbrHaState {
    /**
     * The description of the VBR switching group. It must be `2` to `256` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
     */
    description?: pulumi.Input<string>;
    /**
     * The dry run.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The ID of the other VBR in the VBR failover group.
     */
    peerVbrId?: pulumi.Input<string>;
    /**
     * The state of the VBR failover group.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the VBR failover group.
     */
    vbrHaName?: pulumi.Input<string>;
    /**
     * The ID of the VBR instance.
     */
    vbrId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VbrHa resource.
 */
export interface VbrHaArgs {
    /**
     * The description of the VBR switching group. It must be `2` to `256` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
     */
    description?: pulumi.Input<string>;
    /**
     * The dry run.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The ID of the other VBR in the VBR failover group.
     */
    peerVbrId: pulumi.Input<string>;
    /**
     * The name of the VBR failover group.
     */
    vbrHaName?: pulumi.Input<string>;
    /**
     * The ID of the VBR instance.
     */
    vbrId: pulumi.Input<string>;
}
