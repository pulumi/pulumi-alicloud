// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides VPCs available to the user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const vpcsDs = pulumi.output(alicloud.vpc.getNetworks({
 *     cidrBlock: "172.16.0.0/12",
 *     nameRegex: "^foo",
 *     status: "Available",
 * }));
 *
 * export const firstVpcId = vpcsDs.vpcs[0].id;
 * ```
 */
export function getNetworks(args?: GetNetworksArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworksResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("alicloud:vpc/getNetworks:getNetworks", {
        "cidrBlock": args.cidrBlock,
        "dhcpOptionsSetId": args.dhcpOptionsSetId,
        "dryRun": args.dryRun,
        "enableDetails": args.enableDetails,
        "ids": args.ids,
        "isDefault": args.isDefault,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "resourceGroupId": args.resourceGroupId,
        "status": args.status,
        "tags": args.tags,
        "vpcName": args.vpcName,
        "vpcOwnerId": args.vpcOwnerId,
        "vswitchId": args.vswitchId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetworks.
 */
export interface GetNetworksArgs {
    /**
     * Filter results by a specific CIDR block. For example: "172.16.0.0/12".
     */
    cidrBlock?: string;
    /**
     * The ID of dhcp options set.
     */
    dhcpOptionsSetId?: string;
    /**
     * Indicates whether to check this request only. Valid values: `true` and `false`.
     */
    dryRun?: boolean;
    /**
     * -(Optional, Available in v1.119.0+) Default to `true`. Set it to true can output the `routeTableId`.
     */
    enableDetails?: boolean;
    /**
     * A list of VPC IDs.
     */
    ids?: string[];
    /**
     * Indicate whether the VPC is the default one in the specified region.
     */
    isDefault?: boolean;
    /**
     * A regex string to filter VPCs by name.
     */
    nameRegex?: string;
    outputFile?: string;
    /**
     * The Id of resource group which VPC belongs.
     */
    resourceGroupId?: string;
    /**
     * Filter results by a specific status. Valid value are `Pending` and `Available`.
     */
    status?: string;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: {[key: string]: any};
    /**
     * The name of the VPC.
     */
    vpcName?: string;
    /**
     * The owner ID of VPC.
     */
    vpcOwnerId?: number;
    /**
     * Filter results by the specified VSwitch.
     */
    vswitchId?: string;
}

/**
 * A collection of values returned by getNetworks.
 */
export interface GetNetworksResult {
    /**
     * CIDR block of the VPC.
     */
    readonly cidrBlock?: string;
    readonly dhcpOptionsSetId?: string;
    readonly dryRun?: boolean;
    readonly enableDetails?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A list of VPC IDs.
     */
    readonly ids: string[];
    /**
     * Whether the VPC is the default VPC in the region.
     */
    readonly isDefault?: boolean;
    readonly nameRegex?: string;
    /**
     * A list of VPC names.
     */
    readonly names: string[];
    readonly outputFile?: string;
    readonly resourceGroupId?: string;
    /**
     * Status of the VPC.
     */
    readonly status?: string;
    /**
     * A map of tags assigned to the VPC.
     */
    readonly tags?: {[key: string]: any};
    /**
     * Name of the VPC.
     */
    readonly vpcName?: string;
    readonly vpcOwnerId?: number;
    /**
     * A list of VPCs. Each element contains the following attributes:
     */
    readonly vpcs: outputs.vpc.GetNetworksVpc[];
    readonly vswitchId?: string;
}

export function getNetworksOutput(args?: GetNetworksOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworksResult> {
    return pulumi.output(args).apply(a => getNetworks(a, opts))
}

/**
 * A collection of arguments for invoking getNetworks.
 */
export interface GetNetworksOutputArgs {
    /**
     * Filter results by a specific CIDR block. For example: "172.16.0.0/12".
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * The ID of dhcp options set.
     */
    dhcpOptionsSetId?: pulumi.Input<string>;
    /**
     * Indicates whether to check this request only. Valid values: `true` and `false`.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * -(Optional, Available in v1.119.0+) Default to `true`. Set it to true can output the `routeTableId`.
     */
    enableDetails?: pulumi.Input<boolean>;
    /**
     * A list of VPC IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicate whether the VPC is the default one in the specified region.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * A regex string to filter VPCs by name.
     */
    nameRegex?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    /**
     * The Id of resource group which VPC belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Filter results by a specific status. Valid value are `Pending` and `Available`.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the VPC.
     */
    vpcName?: pulumi.Input<string>;
    /**
     * The owner ID of VPC.
     */
    vpcOwnerId?: pulumi.Input<number>;
    /**
     * Filter results by the specified VSwitch.
     */
    vswitchId?: pulumi.Input<string>;
}
