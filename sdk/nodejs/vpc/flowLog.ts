// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a VPC Flow Log resource.
 *
 * While it uses alicloud.vpc.FlowLog to build a vpc flow log resource, it will be active by default.
 *
 * For information about VPC Flow Log and how to use it, see [What is Flow Log](https://www.alibabacloud.com/help/en/virtual-private-cloud/latest/flow-logs-overview).
 *
 * > **NOTE:** Available since v1.117.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = alicloud.resourcemanager.getResourceGroups({
 *     status: "OK",
 * });
 * const example = new alicloud.vpc.Network("example", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const exampleUuid = new random.index.Uuid("example", {});
 * const exampleProject = new alicloud.log.Project("example", {
 *     projectName: std.replace({
 *         text: exampleUuid.result,
 *         search: "-",
 *         replace: "",
 *     }).then(invoke => std.substr({
 *         input: `tf-example-${invoke.result}`,
 *         offset: 0,
 *         length: 16,
 *     })).then(invoke => invoke.result),
 *     description: name,
 * });
 * const exampleStore = new alicloud.log.Store("example", {
 *     projectName: exampleProject.projectName,
 *     logstoreName: name,
 *     shardCount: 3,
 *     autoSplit: true,
 *     maxSplitShardCount: 60,
 *     appendMeta: true,
 * });
 * const exampleFlowLog = new alicloud.vpc.FlowLog("example", {
 *     flowLogName: name,
 *     logStoreName: exampleStore.logstoreName,
 *     description: name,
 *     trafficPaths: ["all"],
 *     projectName: exampleProject.projectName,
 *     resourceType: "VPC",
 *     resourceGroupId: _default.then(_default => _default.ids?.[0]),
 *     resourceId: example.id,
 *     aggregationInterval: "1",
 *     trafficType: "All",
 * });
 * ```
 *
 * ## Import
 *
 * VPC Flow Log can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:vpc/flowLog:FlowLog example <id>
 * ```
 */
export class FlowLog extends pulumi.CustomResource {
    /**
     * Get an existing FlowLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowLogState, opts?: pulumi.CustomResourceOptions): FlowLog {
        return new FlowLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/flowLog:FlowLog';

    /**
     * Returns true if the given object is an instance of FlowLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowLog.__pulumiType;
    }

    /**
     * Data aggregation interval
     */
    declare public readonly aggregationInterval: pulumi.Output<string>;
    /**
     * Business status
     */
    declare public /*out*/ readonly businessStatus: pulumi.Output<string>;
    /**
     * Creation time
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The Description of the VPC Flow Log.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The flow log ID.
     */
    declare public /*out*/ readonly flowLogId: pulumi.Output<string>;
    /**
     * The Name of the VPC Flow Log.
     */
    declare public readonly flowLogName: pulumi.Output<string | undefined>;
    /**
     * The IP address type of the collected traffic.
     */
    declare public readonly ipVersion: pulumi.Output<string>;
    /**
     * The name of the logstore.
     */
    declare public readonly logStoreName: pulumi.Output<string>;
    /**
     * The name of the project.
     */
    declare public readonly projectName: pulumi.Output<string>;
    /**
     * (Available since v1.243.0) The region ID.
     */
    declare public /*out*/ readonly regionId: pulumi.Output<string>;
    /**
     * The ID of the resource group.
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * The ID of the resource.
     */
    declare public readonly resourceId: pulumi.Output<string>;
    /**
     * The resource type of the traffic captured by the flow log:
     * - `NetworkInterface`: ENI.
     * - `VSwitch`: All ENIs in the VSwitch.
     * - `VPC`: All ENIs in the VPC.
     */
    declare public readonly resourceType: pulumi.Output<string>;
    /**
     * The status of the VPC Flow Log. Valid values: `Active` and `Inactive`.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * The tag of the current instance resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The collected flow path. Value:
     * - *all**: indicates full acquisition.
     * - *internetGateway**: indicates public network traffic collection.
     */
    declare public readonly trafficPaths: pulumi.Output<string[]>;
    /**
     * The type of traffic collected. Valid values:
     * - *All**: All traffic.
     * - *Allow**: Access control allowedtraffic.
     * - *Drop**: Access control denied traffic.
     */
    declare public readonly trafficType: pulumi.Output<string>;

    /**
     * Create a FlowLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowLogArgs | FlowLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowLogState | undefined;
            resourceInputs["aggregationInterval"] = state?.aggregationInterval;
            resourceInputs["businessStatus"] = state?.businessStatus;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["flowLogId"] = state?.flowLogId;
            resourceInputs["flowLogName"] = state?.flowLogName;
            resourceInputs["ipVersion"] = state?.ipVersion;
            resourceInputs["logStoreName"] = state?.logStoreName;
            resourceInputs["projectName"] = state?.projectName;
            resourceInputs["regionId"] = state?.regionId;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["resourceId"] = state?.resourceId;
            resourceInputs["resourceType"] = state?.resourceType;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["trafficPaths"] = state?.trafficPaths;
            resourceInputs["trafficType"] = state?.trafficType;
        } else {
            const args = argsOrState as FlowLogArgs | undefined;
            if (args?.logStoreName === undefined && !opts.urn) {
                throw new Error("Missing required property 'logStoreName'");
            }
            if (args?.projectName === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if (args?.resourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if (args?.resourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if (args?.trafficType === undefined && !opts.urn) {
                throw new Error("Missing required property 'trafficType'");
            }
            resourceInputs["aggregationInterval"] = args?.aggregationInterval;
            resourceInputs["description"] = args?.description;
            resourceInputs["flowLogName"] = args?.flowLogName;
            resourceInputs["ipVersion"] = args?.ipVersion;
            resourceInputs["logStoreName"] = args?.logStoreName;
            resourceInputs["projectName"] = args?.projectName;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["resourceId"] = args?.resourceId;
            resourceInputs["resourceType"] = args?.resourceType;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["trafficPaths"] = args?.trafficPaths;
            resourceInputs["trafficType"] = args?.trafficType;
            resourceInputs["businessStatus"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["flowLogId"] = undefined /*out*/;
            resourceInputs["regionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlowLog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlowLog resources.
 */
export interface FlowLogState {
    /**
     * Data aggregation interval
     */
    aggregationInterval?: pulumi.Input<string>;
    /**
     * Business status
     */
    businessStatus?: pulumi.Input<string>;
    /**
     * Creation time
     */
    createTime?: pulumi.Input<string>;
    /**
     * The Description of the VPC Flow Log.
     */
    description?: pulumi.Input<string>;
    /**
     * The flow log ID.
     */
    flowLogId?: pulumi.Input<string>;
    /**
     * The Name of the VPC Flow Log.
     */
    flowLogName?: pulumi.Input<string>;
    /**
     * The IP address type of the collected traffic.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * The name of the logstore.
     */
    logStoreName?: pulumi.Input<string>;
    /**
     * The name of the project.
     */
    projectName?: pulumi.Input<string>;
    /**
     * (Available since v1.243.0) The region ID.
     */
    regionId?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The ID of the resource.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The resource type of the traffic captured by the flow log:
     * - `NetworkInterface`: ENI.
     * - `VSwitch`: All ENIs in the VSwitch.
     * - `VPC`: All ENIs in the VPC.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The status of the VPC Flow Log. Valid values: `Active` and `Inactive`.
     */
    status?: pulumi.Input<string>;
    /**
     * The tag of the current instance resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The collected flow path. Value:
     * - *all**: indicates full acquisition.
     * - *internetGateway**: indicates public network traffic collection.
     */
    trafficPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of traffic collected. Valid values:
     * - *All**: All traffic.
     * - *Allow**: Access control allowedtraffic.
     * - *Drop**: Access control denied traffic.
     */
    trafficType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlowLog resource.
 */
export interface FlowLogArgs {
    /**
     * Data aggregation interval
     */
    aggregationInterval?: pulumi.Input<string>;
    /**
     * The Description of the VPC Flow Log.
     */
    description?: pulumi.Input<string>;
    /**
     * The Name of the VPC Flow Log.
     */
    flowLogName?: pulumi.Input<string>;
    /**
     * The IP address type of the collected traffic.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * The name of the logstore.
     */
    logStoreName: pulumi.Input<string>;
    /**
     * The name of the project.
     */
    projectName: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The ID of the resource.
     */
    resourceId: pulumi.Input<string>;
    /**
     * The resource type of the traffic captured by the flow log:
     * - `NetworkInterface`: ENI.
     * - `VSwitch`: All ENIs in the VSwitch.
     * - `VPC`: All ENIs in the VPC.
     */
    resourceType: pulumi.Input<string>;
    /**
     * The status of the VPC Flow Log. Valid values: `Active` and `Inactive`.
     */
    status?: pulumi.Input<string>;
    /**
     * The tag of the current instance resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The collected flow path. Value:
     * - *all**: indicates full acquisition.
     * - *internetGateway**: indicates public network traffic collection.
     */
    trafficPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of traffic collected. Valid values:
     * - *All**: All traffic.
     * - *Allow**: Access control allowedtraffic.
     * - *Drop**: Access control denied traffic.
     */
    trafficType: pulumi.Input<string>;
}
