// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a VPC Traffic Mirror Filter resource. Traffic mirror filter criteria.
 *
 * For information about VPC Traffic Mirror Filter and how to use it, see [What is Traffic Mirror Filter](https://www.alibabacloud.com/help/doc-detail/207513.htm).
 *
 * > **NOTE:** Available in v1.140.0+.
 *
 * ## Import
 *
 * VPC Traffic Mirror Filter can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:vpc/trafficMirrorFilter:TrafficMirrorFilter example <id>
 * ```
 */
export class TrafficMirrorFilter extends pulumi.CustomResource {
    /**
     * Get an existing TrafficMirrorFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficMirrorFilterState, opts?: pulumi.CustomResourceOptions): TrafficMirrorFilter {
        return new TrafficMirrorFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/trafficMirrorFilter:TrafficMirrorFilter';

    /**
     * Returns true if the given object is an instance of TrafficMirrorFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficMirrorFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficMirrorFilter.__pulumiType;
    }

    /**
     * Whether to PreCheck only this request. Value:
     * - **true**: The check request is sent without creating traffic Image filter conditions. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.
     * - **false** (default): Sends a normal request, returns a 2xx HTTP status code after passing the check, and directly creates a filter condition.
     */
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    /**
     * Information about the outbound rule. See the following `Block EgressRules`.
     */
    public readonly egressRules!: pulumi.Output<outputs.vpc.TrafficMirrorFilterEgressRule[]>;
    /**
     * Inward direction rule information. See the following `Block IngressRules`.
     */
    public readonly ingressRules!: pulumi.Output<outputs.vpc.TrafficMirrorFilterIngressRule[]>;
    /**
     * The ID of the resource group to which the VPC belongs.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The status of the resource.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The tags of this resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The description of the TrafficMirrorFilter.
     */
    public readonly trafficMirrorFilterDescription!: pulumi.Output<string | undefined>;
    /**
     * The name of the TrafficMirrorFilter.
     */
    public readonly trafficMirrorFilterName!: pulumi.Output<string | undefined>;

    /**
     * Create a TrafficMirrorFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TrafficMirrorFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficMirrorFilterArgs | TrafficMirrorFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficMirrorFilterState | undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["egressRules"] = state ? state.egressRules : undefined;
            resourceInputs["ingressRules"] = state ? state.ingressRules : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trafficMirrorFilterDescription"] = state ? state.trafficMirrorFilterDescription : undefined;
            resourceInputs["trafficMirrorFilterName"] = state ? state.trafficMirrorFilterName : undefined;
        } else {
            const args = argsOrState as TrafficMirrorFilterArgs | undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["egressRules"] = args ? args.egressRules : undefined;
            resourceInputs["ingressRules"] = args ? args.ingressRules : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trafficMirrorFilterDescription"] = args ? args.trafficMirrorFilterDescription : undefined;
            resourceInputs["trafficMirrorFilterName"] = args ? args.trafficMirrorFilterName : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficMirrorFilter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficMirrorFilter resources.
 */
export interface TrafficMirrorFilterState {
    /**
     * Whether to PreCheck only this request. Value:
     * - **true**: The check request is sent without creating traffic Image filter conditions. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.
     * - **false** (default): Sends a normal request, returns a 2xx HTTP status code after passing the check, and directly creates a filter condition.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Information about the outbound rule. See the following `Block EgressRules`.
     */
    egressRules?: pulumi.Input<pulumi.Input<inputs.vpc.TrafficMirrorFilterEgressRule>[]>;
    /**
     * Inward direction rule information. See the following `Block IngressRules`.
     */
    ingressRules?: pulumi.Input<pulumi.Input<inputs.vpc.TrafficMirrorFilterIngressRule>[]>;
    /**
     * The ID of the resource group to which the VPC belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags of this resource.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The description of the TrafficMirrorFilter.
     */
    trafficMirrorFilterDescription?: pulumi.Input<string>;
    /**
     * The name of the TrafficMirrorFilter.
     */
    trafficMirrorFilterName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TrafficMirrorFilter resource.
 */
export interface TrafficMirrorFilterArgs {
    /**
     * Whether to PreCheck only this request. Value:
     * - **true**: The check request is sent without creating traffic Image filter conditions. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.
     * - **false** (default): Sends a normal request, returns a 2xx HTTP status code after passing the check, and directly creates a filter condition.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Information about the outbound rule. See the following `Block EgressRules`.
     */
    egressRules?: pulumi.Input<pulumi.Input<inputs.vpc.TrafficMirrorFilterEgressRule>[]>;
    /**
     * Inward direction rule information. See the following `Block IngressRules`.
     */
    ingressRules?: pulumi.Input<pulumi.Input<inputs.vpc.TrafficMirrorFilterIngressRule>[]>;
    /**
     * The ID of the resource group to which the VPC belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The tags of this resource.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The description of the TrafficMirrorFilter.
     */
    trafficMirrorFilterDescription?: pulumi.Input<string>;
    /**
     * The name of the TrafficMirrorFilter.
     */
    trafficMirrorFilterName?: pulumi.Input<string>;
}
