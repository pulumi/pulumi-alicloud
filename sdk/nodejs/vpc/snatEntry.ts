// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a NAT Gateway Snat Entry resource.
 *
 * For information about NAT Gateway Snat Entry and how to use it, see [What is Snat Entry](https://www.alibabacloud.com/help/en/nat-gateway/developer-reference/api-vpc-2016-04-28-createsnatentry-natgws).
 *
 * > **NOTE:** Available since v1.119.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "172.16.0.0/12",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "172.16.0.0/21",
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 *     vswitchName: name,
 * });
 * const defaultNatGateway = new alicloud.vpc.NatGateway("default", {
 *     vpcId: defaultNetwork.id,
 *     natGatewayName: name,
 *     paymentType: "PayAsYouGo",
 *     vswitchId: defaultSwitch.id,
 *     natType: "Enhanced",
 * });
 * const defaultEipAddress = new alicloud.ecs.EipAddress("default", {addressName: name});
 * const defaultEipAssociation = new alicloud.ecs.EipAssociation("default", {
 *     allocationId: defaultEipAddress.id,
 *     instanceId: defaultNatGateway.id,
 * });
 * const defaultSnatEntry = new alicloud.vpc.SnatEntry("default", {
 *     snatTableId: defaultNatGateway.snatTableIds,
 *     sourceVswitchId: defaultSwitch.id,
 *     snatIp: defaultEipAddress.ipAddress,
 * });
 * ```
 *
 * ## Import
 *
 * NAT Gateway Snat Entry can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:vpc/snatEntry:SnatEntry example <snat_table_id>:<snat_entry_id>
 * ```
 *
 * ```sh
 * $ pulumi import alicloud:vpc/snatEntry:SnatEntry example <snat_entry_id>
 * ```
 */
export class SnatEntry extends pulumi.CustomResource {
    /**
     * Get an existing SnatEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnatEntryState, opts?: pulumi.CustomResourceOptions): SnatEntry {
        return new SnatEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpc/snatEntry:SnatEntry';

    /**
     * Returns true if the given object is an instance of SnatEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnatEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnatEntry.__pulumiType;
    }

    /**
     * Specifies whether to enable EIP affinity. Default value: `0`. Valid values:
     */
    public readonly eipAffinity!: pulumi.Output<number | undefined>;
    /**
     * The id of the snat entry on the server.
     */
    public /*out*/ readonly snatEntryId!: pulumi.Output<string>;
    /**
     * The name of the SNAT entry. The name must be `2` to `128` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
     */
    public readonly snatEntryName!: pulumi.Output<string | undefined>;
    /**
     * The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). **NOTE:** From version 1.241.0, `snatIp` can be modified.
     */
    public readonly snatIp!: pulumi.Output<string>;
    /**
     * The ID of the SNAT table.
     */
    public readonly snatTableId!: pulumi.Output<string>;
    /**
     * The source CIDR block specified in the SNAT entry.
     */
    public readonly sourceCidr!: pulumi.Output<string>;
    /**
     * The ID of the vSwitch.
     */
    public readonly sourceVswitchId!: pulumi.Output<string>;
    /**
     * (Available since v1.119.1) The ID of the SNAT entry.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a SnatEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnatEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnatEntryArgs | SnatEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnatEntryState | undefined;
            resourceInputs["eipAffinity"] = state ? state.eipAffinity : undefined;
            resourceInputs["snatEntryId"] = state ? state.snatEntryId : undefined;
            resourceInputs["snatEntryName"] = state ? state.snatEntryName : undefined;
            resourceInputs["snatIp"] = state ? state.snatIp : undefined;
            resourceInputs["snatTableId"] = state ? state.snatTableId : undefined;
            resourceInputs["sourceCidr"] = state ? state.sourceCidr : undefined;
            resourceInputs["sourceVswitchId"] = state ? state.sourceVswitchId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as SnatEntryArgs | undefined;
            if ((!args || args.snatIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snatIp'");
            }
            if ((!args || args.snatTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snatTableId'");
            }
            resourceInputs["eipAffinity"] = args ? args.eipAffinity : undefined;
            resourceInputs["snatEntryName"] = args ? args.snatEntryName : undefined;
            resourceInputs["snatIp"] = args ? args.snatIp : undefined;
            resourceInputs["snatTableId"] = args ? args.snatTableId : undefined;
            resourceInputs["sourceCidr"] = args ? args.sourceCidr : undefined;
            resourceInputs["sourceVswitchId"] = args ? args.sourceVswitchId : undefined;
            resourceInputs["snatEntryId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnatEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnatEntry resources.
 */
export interface SnatEntryState {
    /**
     * Specifies whether to enable EIP affinity. Default value: `0`. Valid values:
     */
    eipAffinity?: pulumi.Input<number>;
    /**
     * The id of the snat entry on the server.
     */
    snatEntryId?: pulumi.Input<string>;
    /**
     * The name of the SNAT entry. The name must be `2` to `128` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
     */
    snatEntryName?: pulumi.Input<string>;
    /**
     * The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). **NOTE:** From version 1.241.0, `snatIp` can be modified.
     */
    snatIp?: pulumi.Input<string>;
    /**
     * The ID of the SNAT table.
     */
    snatTableId?: pulumi.Input<string>;
    /**
     * The source CIDR block specified in the SNAT entry.
     */
    sourceCidr?: pulumi.Input<string>;
    /**
     * The ID of the vSwitch.
     */
    sourceVswitchId?: pulumi.Input<string>;
    /**
     * (Available since v1.119.1) The ID of the SNAT entry.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnatEntry resource.
 */
export interface SnatEntryArgs {
    /**
     * Specifies whether to enable EIP affinity. Default value: `0`. Valid values:
     */
    eipAffinity?: pulumi.Input<number>;
    /**
     * The name of the SNAT entry. The name must be `2` to `128` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
     */
    snatEntryName?: pulumi.Input<string>;
    /**
     * The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). **NOTE:** From version 1.241.0, `snatIp` can be modified.
     */
    snatIp: pulumi.Input<string>;
    /**
     * The ID of the SNAT table.
     */
    snatTableId: pulumi.Input<string>;
    /**
     * The source CIDR block specified in the SNAT entry.
     */
    sourceCidr?: pulumi.Input<string>;
    /**
     * The ID of the vSwitch.
     */
    sourceVswitchId?: pulumi.Input<string>;
}
