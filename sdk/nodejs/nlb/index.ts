// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetListenersArgs, GetListenersResult, GetListenersOutputArgs } from "./getListeners";
export const getListeners: typeof import("./getListeners").getListeners = null as any;
export const getListenersOutput: typeof import("./getListeners").getListenersOutput = null as any;
utilities.lazyLoad(exports, ["getListeners","getListenersOutput"], () => require("./getListeners"));

export { GetLoadBalancersArgs, GetLoadBalancersResult, GetLoadBalancersOutputArgs } from "./getLoadBalancers";
export const getLoadBalancers: typeof import("./getLoadBalancers").getLoadBalancers = null as any;
export const getLoadBalancersOutput: typeof import("./getLoadBalancers").getLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancers","getLoadBalancersOutput"], () => require("./getLoadBalancers"));

export { GetSecurityPoliciesArgs, GetSecurityPoliciesResult, GetSecurityPoliciesOutputArgs } from "./getSecurityPolicies";
export const getSecurityPolicies: typeof import("./getSecurityPolicies").getSecurityPolicies = null as any;
export const getSecurityPoliciesOutput: typeof import("./getSecurityPolicies").getSecurityPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityPolicies","getSecurityPoliciesOutput"], () => require("./getSecurityPolicies"));

export { GetServerGroupServerAttachmentsArgs, GetServerGroupServerAttachmentsResult, GetServerGroupServerAttachmentsOutputArgs } from "./getServerGroupServerAttachments";
export const getServerGroupServerAttachments: typeof import("./getServerGroupServerAttachments").getServerGroupServerAttachments = null as any;
export const getServerGroupServerAttachmentsOutput: typeof import("./getServerGroupServerAttachments").getServerGroupServerAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getServerGroupServerAttachments","getServerGroupServerAttachmentsOutput"], () => require("./getServerGroupServerAttachments"));

export { GetServerGroupsArgs, GetServerGroupsResult, GetServerGroupsOutputArgs } from "./getServerGroups";
export const getServerGroups: typeof import("./getServerGroups").getServerGroups = null as any;
export const getServerGroupsOutput: typeof import("./getServerGroups").getServerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getServerGroups","getServerGroupsOutput"], () => require("./getServerGroups"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { ListenerArgs, ListenerState } from "./listener";
export type Listener = import("./listener").Listener;
export const Listener: typeof import("./listener").Listener = null as any;
utilities.lazyLoad(exports, ["Listener"], () => require("./listener"));

export { ListenerAdditionalCertificateAttachmentArgs, ListenerAdditionalCertificateAttachmentState } from "./listenerAdditionalCertificateAttachment";
export type ListenerAdditionalCertificateAttachment = import("./listenerAdditionalCertificateAttachment").ListenerAdditionalCertificateAttachment;
export const ListenerAdditionalCertificateAttachment: typeof import("./listenerAdditionalCertificateAttachment").ListenerAdditionalCertificateAttachment = null as any;
utilities.lazyLoad(exports, ["ListenerAdditionalCertificateAttachment"], () => require("./listenerAdditionalCertificateAttachment"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { LoadBalancerSecurityGroupAttachmentArgs, LoadBalancerSecurityGroupAttachmentState } from "./loadBalancerSecurityGroupAttachment";
export type LoadBalancerSecurityGroupAttachment = import("./loadBalancerSecurityGroupAttachment").LoadBalancerSecurityGroupAttachment;
export const LoadBalancerSecurityGroupAttachment: typeof import("./loadBalancerSecurityGroupAttachment").LoadBalancerSecurityGroupAttachment = null as any;
utilities.lazyLoad(exports, ["LoadBalancerSecurityGroupAttachment"], () => require("./loadBalancerSecurityGroupAttachment"));

export { LoadbalancerCommonBandwidthPackageAttachmentArgs, LoadbalancerCommonBandwidthPackageAttachmentState } from "./loadbalancerCommonBandwidthPackageAttachment";
export type LoadbalancerCommonBandwidthPackageAttachment = import("./loadbalancerCommonBandwidthPackageAttachment").LoadbalancerCommonBandwidthPackageAttachment;
export const LoadbalancerCommonBandwidthPackageAttachment: typeof import("./loadbalancerCommonBandwidthPackageAttachment").LoadbalancerCommonBandwidthPackageAttachment = null as any;
utilities.lazyLoad(exports, ["LoadbalancerCommonBandwidthPackageAttachment"], () => require("./loadbalancerCommonBandwidthPackageAttachment"));

export { SecurityPolicyArgs, SecurityPolicyState } from "./securityPolicy";
export type SecurityPolicy = import("./securityPolicy").SecurityPolicy;
export const SecurityPolicy: typeof import("./securityPolicy").SecurityPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityPolicy"], () => require("./securityPolicy"));

export { ServerGroupArgs, ServerGroupState } from "./serverGroup";
export type ServerGroup = import("./serverGroup").ServerGroup;
export const ServerGroup: typeof import("./serverGroup").ServerGroup = null as any;
utilities.lazyLoad(exports, ["ServerGroup"], () => require("./serverGroup"));

export { ServerGroupServerAttachmentArgs, ServerGroupServerAttachmentState } from "./serverGroupServerAttachment";
export type ServerGroupServerAttachment = import("./serverGroupServerAttachment").ServerGroupServerAttachment;
export const ServerGroupServerAttachment: typeof import("./serverGroupServerAttachment").ServerGroupServerAttachment = null as any;
utilities.lazyLoad(exports, ["ServerGroupServerAttachment"], () => require("./serverGroupServerAttachment"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:nlb/listener:Listener":
                return new Listener(name, <any>undefined, { urn })
            case "alicloud:nlb/listenerAdditionalCertificateAttachment:ListenerAdditionalCertificateAttachment":
                return new ListenerAdditionalCertificateAttachment(name, <any>undefined, { urn })
            case "alicloud:nlb/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "alicloud:nlb/loadBalancerSecurityGroupAttachment:LoadBalancerSecurityGroupAttachment":
                return new LoadBalancerSecurityGroupAttachment(name, <any>undefined, { urn })
            case "alicloud:nlb/loadbalancerCommonBandwidthPackageAttachment:LoadbalancerCommonBandwidthPackageAttachment":
                return new LoadbalancerCommonBandwidthPackageAttachment(name, <any>undefined, { urn })
            case "alicloud:nlb/securityPolicy:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "alicloud:nlb/serverGroup:ServerGroup":
                return new ServerGroup(name, <any>undefined, { urn })
            case "alicloud:nlb/serverGroupServerAttachment:ServerGroupServerAttachment":
                return new ServerGroupServerAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "nlb/listener", _module)
pulumi.runtime.registerResourceModule("alicloud", "nlb/listenerAdditionalCertificateAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "nlb/loadBalancer", _module)
pulumi.runtime.registerResourceModule("alicloud", "nlb/loadBalancerSecurityGroupAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "nlb/loadbalancerCommonBandwidthPackageAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "nlb/securityPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "nlb/serverGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "nlb/serverGroupServerAttachment", _module)
