// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Network Load Balancer (NLB) Server Group resource.
 *
 * For information about Network Load Balancer (NLB) Server Group and how to use it, see [What is Server Group](https://www.alibabacloud.com/help/en/server-load-balancer/latest/createservergroup-nlb).
 *
 * > **NOTE:** Available since v1.186.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = alicloud.resourcemanager.getResourceGroups({});
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultServerGroup = new alicloud.nlb.ServerGroup("default", {
 *     resourceGroupId: _default.then(_default => _default.ids?.[0]),
 *     serverGroupName: name,
 *     serverGroupType: "Instance",
 *     vpcId: defaultNetwork.id,
 *     scheduler: "Wrr",
 *     protocol: "TCP",
 *     connectionDrainEnabled: true,
 *     connectionDrainTimeout: 60,
 *     addressIpVersion: "Ipv4",
 *     healthCheck: {
 *         healthCheckEnabled: true,
 *         healthCheckType: "TCP",
 *         healthCheckConnectPort: 0,
 *         healthyThreshold: 2,
 *         unhealthyThreshold: 2,
 *         healthCheckConnectTimeout: 5,
 *         healthCheckInterval: 10,
 *         httpCheckMethod: "GET",
 *         healthCheckHttpCodes: [
 *             "http_2xx",
 *             "http_3xx",
 *             "http_4xx",
 *         ],
 *     },
 *     tags: {
 *         Created: "TF",
 *         For: "example",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Network Load Balancer (NLB) Server Group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:nlb/serverGroup:ServerGroup example <id>
 * ```
 */
export class ServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing ServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerGroupState, opts?: pulumi.CustomResourceOptions): ServerGroup {
        return new ServerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:nlb/serverGroup:ServerGroup';

    /**
     * Returns true if the given object is an instance of ServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerGroup.__pulumiType;
    }

    /**
     * The protocol version. Valid values:
     */
    declare public readonly addressIpVersion: pulumi.Output<string>;
    /**
     * Specifies whether to enable all-port forwarding. Valid values:
     */
    declare public readonly anyPortEnabled: pulumi.Output<boolean>;
    /**
     * . Field 'connection_drain' has been deprecated from provider version 1.231.0. New field 'connection_drain_enabled' instead.
     *
     * @deprecated Field 'connection_drain' has been deprecated since provider version 1.214.0. New field 'connection_drain_enabled' instead.
     */
    declare public readonly connectionDrain: pulumi.Output<boolean>;
    /**
     * Specifies whether to enable connection draining. Valid values:
     */
    declare public readonly connectionDrainEnabled: pulumi.Output<boolean>;
    /**
     * The timeout period of connection draining. Unit: seconds. Valid values: `10` to `900`.
     */
    declare public readonly connectionDrainTimeout: pulumi.Output<number>;
    /**
     * Health check configuration information. See `healthCheck` below.
     */
    declare public readonly healthCheck: pulumi.Output<outputs.nlb.ServerGroupHealthCheck>;
    /**
     * Specifies whether to enable client IP preservation. Valid values:
     */
    declare public readonly preserveClientIpEnabled: pulumi.Output<boolean>;
    /**
     * The protocol used to forward requests to the backend servers. Valid values:
     *
     * - `TCP` (default)
     * - `UDP`
     * - `TCPSSL`
     */
    declare public readonly protocol: pulumi.Output<string>;
    /**
     * The ID of the region where the NLB instance is deployed.
     */
    declare public /*out*/ readonly regionId: pulumi.Output<string>;
    /**
     * The ID of the new resource group.
     * You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) to view resource group IDs.
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * The scheduling algorithm. Valid values:
     *
     * - **Wrr:** The weighted round-robin algorithm is used. Backend servers with higher weights receive more requests than backend servers with lower weights. This is the default value.
     * - **Rr:** The round-robin algorithm is used. Requests are forwarded to backend servers in sequence.
     * - **Sch:** Source IP hashing is used. Requests from the same source IP address are forwarded to the same backend server.
     * - **Tch:** Four-element hashing is used. It specifies consistent hashing that is based on four factors: source IP address, destination IP address, source port, and destination port. Requests that contain the same information based on the four factors are forwarded to the same backend server.
     * - `Qch`: QUIC ID hashing. Requests that contain the same QUIC ID are forwarded to the same backend server.
     */
    declare public readonly scheduler: pulumi.Output<string>;
    /**
     * The new name of the server group.
     * The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
     */
    declare public readonly serverGroupName: pulumi.Output<string>;
    /**
     * The type of server group. Valid values:
     *
     * - `Instance`: allows you to add servers of the `Ecs`, `Eni`, or `Eci` type. This is the default value.
     * - `Ip`: allows you to add servers by specifying IP addresses.
     */
    declare public readonly serverGroupType: pulumi.Output<string>;
    /**
     * Server group status. Value:
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Label.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the virtual private cloud (VPC) to which the server group belongs.
     *
     * > **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
     *
     *
     * The following arguments will be discarded. Please use new fields as soon as possible:
     */
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a ServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerGroupArgs | ServerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerGroupState | undefined;
            resourceInputs["addressIpVersion"] = state?.addressIpVersion;
            resourceInputs["anyPortEnabled"] = state?.anyPortEnabled;
            resourceInputs["connectionDrain"] = state?.connectionDrain;
            resourceInputs["connectionDrainEnabled"] = state?.connectionDrainEnabled;
            resourceInputs["connectionDrainTimeout"] = state?.connectionDrainTimeout;
            resourceInputs["healthCheck"] = state?.healthCheck;
            resourceInputs["preserveClientIpEnabled"] = state?.preserveClientIpEnabled;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["regionId"] = state?.regionId;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["scheduler"] = state?.scheduler;
            resourceInputs["serverGroupName"] = state?.serverGroupName;
            resourceInputs["serverGroupType"] = state?.serverGroupType;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as ServerGroupArgs | undefined;
            if (args?.serverGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serverGroupName'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["addressIpVersion"] = args?.addressIpVersion;
            resourceInputs["anyPortEnabled"] = args?.anyPortEnabled;
            resourceInputs["connectionDrain"] = args?.connectionDrain;
            resourceInputs["connectionDrainEnabled"] = args?.connectionDrainEnabled;
            resourceInputs["connectionDrainTimeout"] = args?.connectionDrainTimeout;
            resourceInputs["healthCheck"] = args?.healthCheck;
            resourceInputs["preserveClientIpEnabled"] = args?.preserveClientIpEnabled;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["scheduler"] = args?.scheduler;
            resourceInputs["serverGroupName"] = args?.serverGroupName;
            resourceInputs["serverGroupType"] = args?.serverGroupType;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["regionId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerGroup resources.
 */
export interface ServerGroupState {
    /**
     * The protocol version. Valid values:
     */
    addressIpVersion?: pulumi.Input<string>;
    /**
     * Specifies whether to enable all-port forwarding. Valid values:
     */
    anyPortEnabled?: pulumi.Input<boolean>;
    /**
     * . Field 'connection_drain' has been deprecated from provider version 1.231.0. New field 'connection_drain_enabled' instead.
     *
     * @deprecated Field 'connection_drain' has been deprecated since provider version 1.214.0. New field 'connection_drain_enabled' instead.
     */
    connectionDrain?: pulumi.Input<boolean>;
    /**
     * Specifies whether to enable connection draining. Valid values:
     */
    connectionDrainEnabled?: pulumi.Input<boolean>;
    /**
     * The timeout period of connection draining. Unit: seconds. Valid values: `10` to `900`.
     */
    connectionDrainTimeout?: pulumi.Input<number>;
    /**
     * Health check configuration information. See `healthCheck` below.
     */
    healthCheck?: pulumi.Input<inputs.nlb.ServerGroupHealthCheck>;
    /**
     * Specifies whether to enable client IP preservation. Valid values:
     */
    preserveClientIpEnabled?: pulumi.Input<boolean>;
    /**
     * The protocol used to forward requests to the backend servers. Valid values:
     *
     * - `TCP` (default)
     * - `UDP`
     * - `TCPSSL`
     */
    protocol?: pulumi.Input<string>;
    /**
     * The ID of the region where the NLB instance is deployed.
     */
    regionId?: pulumi.Input<string>;
    /**
     * The ID of the new resource group.
     * You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) to view resource group IDs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The scheduling algorithm. Valid values:
     *
     * - **Wrr:** The weighted round-robin algorithm is used. Backend servers with higher weights receive more requests than backend servers with lower weights. This is the default value.
     * - **Rr:** The round-robin algorithm is used. Requests are forwarded to backend servers in sequence.
     * - **Sch:** Source IP hashing is used. Requests from the same source IP address are forwarded to the same backend server.
     * - **Tch:** Four-element hashing is used. It specifies consistent hashing that is based on four factors: source IP address, destination IP address, source port, and destination port. Requests that contain the same information based on the four factors are forwarded to the same backend server.
     * - `Qch`: QUIC ID hashing. Requests that contain the same QUIC ID are forwarded to the same backend server.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The new name of the server group.
     * The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
     */
    serverGroupName?: pulumi.Input<string>;
    /**
     * The type of server group. Valid values:
     *
     * - `Instance`: allows you to add servers of the `Ecs`, `Eni`, or `Eci` type. This is the default value.
     * - `Ip`: allows you to add servers by specifying IP addresses.
     */
    serverGroupType?: pulumi.Input<string>;
    /**
     * Server group status. Value:
     */
    status?: pulumi.Input<string>;
    /**
     * Label.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the virtual private cloud (VPC) to which the server group belongs.
     *
     * > **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
     *
     *
     * The following arguments will be discarded. Please use new fields as soon as possible:
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerGroup resource.
 */
export interface ServerGroupArgs {
    /**
     * The protocol version. Valid values:
     */
    addressIpVersion?: pulumi.Input<string>;
    /**
     * Specifies whether to enable all-port forwarding. Valid values:
     */
    anyPortEnabled?: pulumi.Input<boolean>;
    /**
     * . Field 'connection_drain' has been deprecated from provider version 1.231.0. New field 'connection_drain_enabled' instead.
     *
     * @deprecated Field 'connection_drain' has been deprecated since provider version 1.214.0. New field 'connection_drain_enabled' instead.
     */
    connectionDrain?: pulumi.Input<boolean>;
    /**
     * Specifies whether to enable connection draining. Valid values:
     */
    connectionDrainEnabled?: pulumi.Input<boolean>;
    /**
     * The timeout period of connection draining. Unit: seconds. Valid values: `10` to `900`.
     */
    connectionDrainTimeout?: pulumi.Input<number>;
    /**
     * Health check configuration information. See `healthCheck` below.
     */
    healthCheck?: pulumi.Input<inputs.nlb.ServerGroupHealthCheck>;
    /**
     * Specifies whether to enable client IP preservation. Valid values:
     */
    preserveClientIpEnabled?: pulumi.Input<boolean>;
    /**
     * The protocol used to forward requests to the backend servers. Valid values:
     *
     * - `TCP` (default)
     * - `UDP`
     * - `TCPSSL`
     */
    protocol?: pulumi.Input<string>;
    /**
     * The ID of the new resource group.
     * You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) to view resource group IDs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The scheduling algorithm. Valid values:
     *
     * - **Wrr:** The weighted round-robin algorithm is used. Backend servers with higher weights receive more requests than backend servers with lower weights. This is the default value.
     * - **Rr:** The round-robin algorithm is used. Requests are forwarded to backend servers in sequence.
     * - **Sch:** Source IP hashing is used. Requests from the same source IP address are forwarded to the same backend server.
     * - **Tch:** Four-element hashing is used. It specifies consistent hashing that is based on four factors: source IP address, destination IP address, source port, and destination port. Requests that contain the same information based on the four factors are forwarded to the same backend server.
     * - `Qch`: QUIC ID hashing. Requests that contain the same QUIC ID are forwarded to the same backend server.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The new name of the server group.
     * The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
     */
    serverGroupName: pulumi.Input<string>;
    /**
     * The type of server group. Valid values:
     *
     * - `Instance`: allows you to add servers of the `Ecs`, `Eni`, or `Eci` type. This is the default value.
     * - `Ip`: allows you to add servers by specifying IP addresses.
     */
    serverGroupType?: pulumi.Input<string>;
    /**
     * Label.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the virtual private cloud (VPC) to which the server group belongs.
     *
     * > **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
     *
     *
     * The following arguments will be discarded. Please use new fields as soon as possible:
     */
    vpcId: pulumi.Input<string>;
}
