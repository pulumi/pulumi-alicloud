// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an Alikafka Sasl User resource.
 *
 * > **NOTE:** Available since v1.66.0.
 *
 * > **NOTE:**  Only the following regions support create alikafka Sasl User.
 * [`cn-hangzhou`,`cn-beijing`,`cn-shenzhen`,`cn-shanghai`,`cn-qingdao`,`cn-hongkong`,`cn-huhehaote`,`cn-zhangjiakou`,`cn-chengdu`,`cn-heyuan`,`ap-southeast-1`,`ap-southeast-3`,`ap-southeast-5`,`ap-northeast-1`,`eu-central-1`,`eu-west-1`,`us-west-1`,`us-east-1`]
 *
 * For information about Alikafka Sasl User and how to use it, see [What is Sasl User](https://www.alibabacloud.com/help/en/message-queue-for-apache-kafka/latest/api-alikafka-2019-09-16-createsasluser).
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {vpcId: defaultNetwork.id});
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultInstance = new alicloud.alikafka.Instance("default", {
 *     name: `${name}-${defaultInteger.result}`,
 *     partitionNum: 50,
 *     diskType: 1,
 *     diskSize: 500,
 *     deployType: 5,
 *     ioMax: 20,
 *     specType: "professional",
 *     serviceVersion: "2.2.0",
 *     vswitchId: defaultSwitch.id,
 *     securityGroup: defaultSecurityGroup.id,
 *     config: `  {
 *     "enable.acl": "true"
 *   }
 * `,
 * });
 * const defaultSaslUser = new alicloud.alikafka.SaslUser("default", {
 *     instanceId: defaultInstance.id,
 *     username: name,
 *     password: "tf_example123",
 * });
 * ```
 *
 * ## Import
 *
 * Alikafka Sasl User can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:alikafka/saslUser:SaslUser example <instance_id>:<username>
 * ```
 */
export class SaslUser extends pulumi.CustomResource {
    /**
     * Get an existing SaslUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SaslUserState, opts?: pulumi.CustomResourceOptions): SaslUser {
        return new SaslUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:alikafka/saslUser:SaslUser';

    /**
     * Returns true if the given object is an instance of SaslUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SaslUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SaslUser.__pulumiType;
    }

    /**
     * ID of the ALIKAFKA Instance that owns the groups.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * An KMS encrypts password used to a db account. You have to specify one of `password` and `kmsEncryptedPassword` fields.
     */
    declare public readonly kmsEncryptedPassword: pulumi.Output<string | undefined>;
    /**
     * An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a user with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
     */
    declare public readonly kmsEncryptionContext: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The password of the SASL user. It may consist of letters, digits, or underlines, with a length of 1 to 64 characters. You have to specify one of `password` and `kmsEncryptedPassword` fields.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * The authentication mechanism. Default value: `plain`. Valid values: `plain`, `scram`.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * The name of the SASL user. The length should between `1` to `64` characters. The characters can only contain `a`-`z`, `A`-`Z`, `0`-`9`, `_` and `-`.
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a SaslUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SaslUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SaslUserArgs | SaslUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SaslUserState | undefined;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["kmsEncryptedPassword"] = state?.kmsEncryptedPassword;
            resourceInputs["kmsEncryptionContext"] = state?.kmsEncryptionContext;
            resourceInputs["password"] = state?.password;
            resourceInputs["type"] = state?.type;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as SaslUserArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["kmsEncryptedPassword"] = args?.kmsEncryptedPassword;
            resourceInputs["kmsEncryptionContext"] = args?.kmsEncryptionContext;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["type"] = args?.type;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SaslUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SaslUser resources.
 */
export interface SaslUserState {
    /**
     * ID of the ALIKAFKA Instance that owns the groups.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * An KMS encrypts password used to a db account. You have to specify one of `password` and `kmsEncryptedPassword` fields.
     */
    kmsEncryptedPassword?: pulumi.Input<string>;
    /**
     * An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a user with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
     */
    kmsEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The password of the SASL user. It may consist of letters, digits, or underlines, with a length of 1 to 64 characters. You have to specify one of `password` and `kmsEncryptedPassword` fields.
     */
    password?: pulumi.Input<string>;
    /**
     * The authentication mechanism. Default value: `plain`. Valid values: `plain`, `scram`.
     */
    type?: pulumi.Input<string>;
    /**
     * The name of the SASL user. The length should between `1` to `64` characters. The characters can only contain `a`-`z`, `A`-`Z`, `0`-`9`, `_` and `-`.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SaslUser resource.
 */
export interface SaslUserArgs {
    /**
     * ID of the ALIKAFKA Instance that owns the groups.
     */
    instanceId: pulumi.Input<string>;
    /**
     * An KMS encrypts password used to a db account. You have to specify one of `password` and `kmsEncryptedPassword` fields.
     */
    kmsEncryptedPassword?: pulumi.Input<string>;
    /**
     * An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating a user with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
     */
    kmsEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The password of the SASL user. It may consist of letters, digits, or underlines, with a length of 1 to 64 characters. You have to specify one of `password` and `kmsEncryptedPassword` fields.
     */
    password?: pulumi.Input<string>;
    /**
     * The authentication mechanism. Default value: `plain`. Valid values: `plain`, `scram`.
     */
    type?: pulumi.Input<string>;
    /**
     * The name of the SASL user. The length should between `1` to `64` characters. The characters can only contain `a`-`z`, `A`-`Z`, `0`-`9`, `_` and `-`.
     */
    username: pulumi.Input<string>;
}
