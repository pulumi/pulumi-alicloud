// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Service Catalog Product resource.
 *
 * Service catalog product, IaC template encapsulation concept.
 *
 * For information about Service Catalog Product and how to use it, see [What is Product](https://www.alibabacloud.com/help/en/service-catalog/developer-reference/api-servicecatalog-2021-09-01-createproduct).
 *
 * > **NOTE:** Available since v1.230.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new alicloud.servicecatalog.Product("default", {
 *     providerName: name,
 *     description: "desc",
 *     productName: name,
 *     productType: "Ros",
 * });
 * ```
 *
 * ## Import
 *
 * Service Catalog Product can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:servicecatalog/product:Product example <id>
 * ```
 */
export class Product extends pulumi.CustomResource {
    /**
     * Get an existing Product resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProductState, opts?: pulumi.CustomResourceOptions): Product {
        return new Product(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:servicecatalog/product:Product';

    /**
     * Returns true if the given object is an instance of Product.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Product {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Product.__pulumiType;
    }

    /**
     * The creation time of the product
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The description of the product
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the product
     */
    public readonly productName!: pulumi.Output<string>;
    /**
     * The type of the product
     */
    public readonly productType!: pulumi.Output<string>;
    /**
     * The provider name of the product
     */
    public readonly providerName!: pulumi.Output<string>;

    /**
     * Create a Product resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProductArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProductArgs | ProductState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProductState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["productName"] = state ? state.productName : undefined;
            resourceInputs["productType"] = state ? state.productType : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
        } else {
            const args = argsOrState as ProductArgs | undefined;
            if ((!args || args.productName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productName'");
            }
            if ((!args || args.productType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productType'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["productName"] = args ? args.productName : undefined;
            resourceInputs["productType"] = args ? args.productType : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Product.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Product resources.
 */
export interface ProductState {
    /**
     * The creation time of the product
     */
    createTime?: pulumi.Input<string>;
    /**
     * The description of the product
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the product
     */
    productName?: pulumi.Input<string>;
    /**
     * The type of the product
     */
    productType?: pulumi.Input<string>;
    /**
     * The provider name of the product
     */
    providerName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Product resource.
 */
export interface ProductArgs {
    /**
     * The description of the product
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the product
     */
    productName: pulumi.Input<string>;
    /**
     * The type of the product
     */
    productType: pulumi.Input<string>;
    /**
     * The provider name of the product
     */
    providerName: pulumi.Input<string>;
}
