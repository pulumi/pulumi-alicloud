// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetEndUserProductsArgs, GetEndUserProductsResult, GetEndUserProductsOutputArgs } from "./getEndUserProducts";
export const getEndUserProducts: typeof import("./getEndUserProducts").getEndUserProducts = null as any;
export const getEndUserProductsOutput: typeof import("./getEndUserProducts").getEndUserProductsOutput = null as any;
utilities.lazyLoad(exports, ["getEndUserProducts","getEndUserProductsOutput"], () => require("./getEndUserProducts"));

export { GetLaunchOptionsArgs, GetLaunchOptionsResult, GetLaunchOptionsOutputArgs } from "./getLaunchOptions";
export const getLaunchOptions: typeof import("./getLaunchOptions").getLaunchOptions = null as any;
export const getLaunchOptionsOutput: typeof import("./getLaunchOptions").getLaunchOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchOptions","getLaunchOptionsOutput"], () => require("./getLaunchOptions"));

export { GetPortfoliosArgs, GetPortfoliosResult, GetPortfoliosOutputArgs } from "./getPortfolios";
export const getPortfolios: typeof import("./getPortfolios").getPortfolios = null as any;
export const getPortfoliosOutput: typeof import("./getPortfolios").getPortfoliosOutput = null as any;
utilities.lazyLoad(exports, ["getPortfolios","getPortfoliosOutput"], () => require("./getPortfolios"));

export { GetProductAsEndUsersArgs, GetProductAsEndUsersResult, GetProductAsEndUsersOutputArgs } from "./getProductAsEndUsers";
export const getProductAsEndUsers: typeof import("./getProductAsEndUsers").getProductAsEndUsers = null as any;
export const getProductAsEndUsersOutput: typeof import("./getProductAsEndUsers").getProductAsEndUsersOutput = null as any;
utilities.lazyLoad(exports, ["getProductAsEndUsers","getProductAsEndUsersOutput"], () => require("./getProductAsEndUsers"));

export { GetProductVersionsArgs, GetProductVersionsResult, GetProductVersionsOutputArgs } from "./getProductVersions";
export const getProductVersions: typeof import("./getProductVersions").getProductVersions = null as any;
export const getProductVersionsOutput: typeof import("./getProductVersions").getProductVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getProductVersions","getProductVersionsOutput"], () => require("./getProductVersions"));

export { GetProvisionedProductsArgs, GetProvisionedProductsResult, GetProvisionedProductsOutputArgs } from "./getProvisionedProducts";
export const getProvisionedProducts: typeof import("./getProvisionedProducts").getProvisionedProducts = null as any;
export const getProvisionedProductsOutput: typeof import("./getProvisionedProducts").getProvisionedProductsOutput = null as any;
utilities.lazyLoad(exports, ["getProvisionedProducts","getProvisionedProductsOutput"], () => require("./getProvisionedProducts"));

export { PortfolioArgs, PortfolioState } from "./portfolio";
export type Portfolio = import("./portfolio").Portfolio;
export const Portfolio: typeof import("./portfolio").Portfolio = null as any;
utilities.lazyLoad(exports, ["Portfolio"], () => require("./portfolio"));

export { PrincipalPortfolioAssociationArgs, PrincipalPortfolioAssociationState } from "./principalPortfolioAssociation";
export type PrincipalPortfolioAssociation = import("./principalPortfolioAssociation").PrincipalPortfolioAssociation;
export const PrincipalPortfolioAssociation: typeof import("./principalPortfolioAssociation").PrincipalPortfolioAssociation = null as any;
utilities.lazyLoad(exports, ["PrincipalPortfolioAssociation"], () => require("./principalPortfolioAssociation"));

export { ProductArgs, ProductState } from "./product";
export type Product = import("./product").Product;
export const Product: typeof import("./product").Product = null as any;
utilities.lazyLoad(exports, ["Product"], () => require("./product"));

export { ProductPortfolioAssociationArgs, ProductPortfolioAssociationState } from "./productPortfolioAssociation";
export type ProductPortfolioAssociation = import("./productPortfolioAssociation").ProductPortfolioAssociation;
export const ProductPortfolioAssociation: typeof import("./productPortfolioAssociation").ProductPortfolioAssociation = null as any;
utilities.lazyLoad(exports, ["ProductPortfolioAssociation"], () => require("./productPortfolioAssociation"));

export { ProductVersionArgs, ProductVersionState } from "./productVersion";
export type ProductVersion = import("./productVersion").ProductVersion;
export const ProductVersion: typeof import("./productVersion").ProductVersion = null as any;
utilities.lazyLoad(exports, ["ProductVersion"], () => require("./productVersion"));

export { ProvisionedProductArgs, ProvisionedProductState } from "./provisionedProduct";
export type ProvisionedProduct = import("./provisionedProduct").ProvisionedProduct;
export const ProvisionedProduct: typeof import("./provisionedProduct").ProvisionedProduct = null as any;
utilities.lazyLoad(exports, ["ProvisionedProduct"], () => require("./provisionedProduct"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:servicecatalog/portfolio:Portfolio":
                return new Portfolio(name, <any>undefined, { urn })
            case "alicloud:servicecatalog/principalPortfolioAssociation:PrincipalPortfolioAssociation":
                return new PrincipalPortfolioAssociation(name, <any>undefined, { urn })
            case "alicloud:servicecatalog/product:Product":
                return new Product(name, <any>undefined, { urn })
            case "alicloud:servicecatalog/productPortfolioAssociation:ProductPortfolioAssociation":
                return new ProductPortfolioAssociation(name, <any>undefined, { urn })
            case "alicloud:servicecatalog/productVersion:ProductVersion":
                return new ProductVersion(name, <any>undefined, { urn })
            case "alicloud:servicecatalog/provisionedProduct:ProvisionedProduct":
                return new ProvisionedProduct(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "servicecatalog/portfolio", _module)
pulumi.runtime.registerResourceModule("alicloud", "servicecatalog/principalPortfolioAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "servicecatalog/product", _module)
pulumi.runtime.registerResourceModule("alicloud", "servicecatalog/productPortfolioAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "servicecatalog/productVersion", _module)
pulumi.runtime.registerResourceModule("alicloud", "servicecatalog/provisionedProduct", _module)
