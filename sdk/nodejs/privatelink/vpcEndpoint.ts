// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Private Link Vpc Endpoint resource.
 *
 * For information about Private Link Vpc Endpoint and how to use it, see [What is Vpc Endpoint](https://help.aliyun.com/document_detail/120479.html).
 *
 * > **NOTE:** Available in v1.109.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.privatelink.VpcEndpoint("example", {
 *     securityGroupId: ["sg-ercx1234"],
 *     serviceId: "YourServiceId",
 *     vpcId: "YourVpcId",
 * });
 * ```
 *
 * ## Import
 *
 * Private Link Vpc Endpoint can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:privatelink/vpcEndpoint:VpcEndpoint example <endpoint_id>
 * ```
 */
export class VpcEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing VpcEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcEndpointState, opts?: pulumi.CustomResourceOptions): VpcEndpoint {
        return new VpcEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:privatelink/vpcEndpoint:VpcEndpoint';

    /**
     * Returns true if the given object is an instance of VpcEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcEndpoint.__pulumiType;
    }

    /**
     * The Bandwidth.
     */
    public /*out*/ readonly bandwidth!: pulumi.Output<number>;
    /**
     * The status of Connection.
     */
    public /*out*/ readonly connectionStatus!: pulumi.Output<string>;
    /**
     * The dry run. Default to: `false`.
     */
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    /**
     * The status of Endpoint Business.
     */
    public /*out*/ readonly endpointBusinessStatus!: pulumi.Output<string>;
    /**
     * The description of Vpc Endpoint. The length is 2~256 characters and cannot start with `http://` and `https://`.
     */
    public readonly endpointDescription!: pulumi.Output<string | undefined>;
    /**
     * The Endpoint Domain.
     */
    public /*out*/ readonly endpointDomain!: pulumi.Output<string>;
    /**
     * The security group associated with the terminal node network card.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * The terminal node service associated with the terminal node.
     */
    public readonly serviceId!: pulumi.Output<string | undefined>;
    /**
     * The name of the terminal node service associated with the terminal node.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * The status of Vpc Endpoint.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The name of Vpc Endpoint. The length is between 2 and 128 characters, starting with English letters or Chinese, and can include numbers, hyphens (-) and underscores (_).
     */
    public readonly vpcEndpointName!: pulumi.Output<string | undefined>;
    /**
     * The private network to which the terminal node belongs.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a VpcEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcEndpointArgs | VpcEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcEndpointState | undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["connectionStatus"] = state ? state.connectionStatus : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["endpointBusinessStatus"] = state ? state.endpointBusinessStatus : undefined;
            resourceInputs["endpointDescription"] = state ? state.endpointDescription : undefined;
            resourceInputs["endpointDomain"] = state ? state.endpointDomain : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vpcEndpointName"] = state ? state.vpcEndpointName : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as VpcEndpointArgs | undefined;
            if ((!args || args.securityGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupIds'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["endpointDescription"] = args ? args.endpointDescription : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["vpcEndpointName"] = args ? args.vpcEndpointName : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["bandwidth"] = undefined /*out*/;
            resourceInputs["connectionStatus"] = undefined /*out*/;
            resourceInputs["endpointBusinessStatus"] = undefined /*out*/;
            resourceInputs["endpointDomain"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcEndpoint resources.
 */
export interface VpcEndpointState {
    /**
     * The Bandwidth.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * The status of Connection.
     */
    connectionStatus?: pulumi.Input<string>;
    /**
     * The dry run. Default to: `false`.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The status of Endpoint Business.
     */
    endpointBusinessStatus?: pulumi.Input<string>;
    /**
     * The description of Vpc Endpoint. The length is 2~256 characters and cannot start with `http://` and `https://`.
     */
    endpointDescription?: pulumi.Input<string>;
    /**
     * The Endpoint Domain.
     */
    endpointDomain?: pulumi.Input<string>;
    /**
     * The security group associated with the terminal node network card.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The terminal node service associated with the terminal node.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * The name of the terminal node service associated with the terminal node.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The status of Vpc Endpoint.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of Vpc Endpoint. The length is between 2 and 128 characters, starting with English letters or Chinese, and can include numbers, hyphens (-) and underscores (_).
     */
    vpcEndpointName?: pulumi.Input<string>;
    /**
     * The private network to which the terminal node belongs.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcEndpoint resource.
 */
export interface VpcEndpointArgs {
    /**
     * The dry run. Default to: `false`.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The description of Vpc Endpoint. The length is 2~256 characters and cannot start with `http://` and `https://`.
     */
    endpointDescription?: pulumi.Input<string>;
    /**
     * The security group associated with the terminal node network card.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The terminal node service associated with the terminal node.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * The name of the terminal node service associated with the terminal node.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The name of Vpc Endpoint. The length is between 2 and 128 characters, starting with English letters or Chinese, and can include numbers, hyphens (-) and underscores (_).
     */
    vpcEndpointName?: pulumi.Input<string>;
    /**
     * The private network to which the terminal node belongs.
     */
    vpcId: pulumi.Input<string>;
}
