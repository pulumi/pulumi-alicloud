// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Application Load Balancer (ALB) A Script resource.
 *
 * For information about Application Load Balancer (ALB) A Script and how to use it, see [What is A Script](https://www.alibabacloud.com/help/en/slb/application-load-balancer/developer-reference/api-alb-2020-06-16-createascripts).
 *
 * > **NOTE:** Available since v1.195.0.
 *
 * ## Import
 *
 * Application Load Balancer (ALB) A Script can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:alb/aScript:AScript example <id>
 * ```
 */
export class AScript extends pulumi.CustomResource {
    /**
     * Get an existing AScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AScriptState, opts?: pulumi.CustomResourceOptions): AScript {
        return new AScript(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:alb/aScript:AScript';

    /**
     * Returns true if the given object is an instance of AScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AScript {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AScript.__pulumiType;
    }

    /**
     * AScript name.
     */
    public readonly ascriptName!: pulumi.Output<string>;
    /**
     * Whether to PreCheck only this request
     */
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    /**
     * Whether AScript is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Whether extension parameters are enabled. When ExtAttributeEnabled is true, ExtAttributes must be set.
     */
    public readonly extAttributeEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Expand the list of attributes. When ExtAttributeEnabled is true, ExtAttributes must be set. See `extAttributes` below.
     */
    public readonly extAttributes!: pulumi.Output<outputs.alb.AScriptExtAttribute[] | undefined>;
    /**
     * Listener ID of script attribution
     */
    public readonly listenerId!: pulumi.Output<string>;
    /**
     * Script execution location.
     */
    public readonly position!: pulumi.Output<string>;
    /**
     * AScript script content.
     */
    public readonly scriptContent!: pulumi.Output<string>;
    /**
     * Script status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a AScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AScriptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AScriptArgs | AScriptState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AScriptState | undefined;
            resourceInputs["ascriptName"] = state ? state.ascriptName : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["extAttributeEnabled"] = state ? state.extAttributeEnabled : undefined;
            resourceInputs["extAttributes"] = state ? state.extAttributes : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["scriptContent"] = state ? state.scriptContent : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as AScriptArgs | undefined;
            if ((!args || args.ascriptName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ascriptName'");
            }
            if ((!args || args.listenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            if ((!args || args.position === undefined) && !opts.urn) {
                throw new Error("Missing required property 'position'");
            }
            if ((!args || args.scriptContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scriptContent'");
            }
            resourceInputs["ascriptName"] = args ? args.ascriptName : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["extAttributeEnabled"] = args ? args.extAttributeEnabled : undefined;
            resourceInputs["extAttributes"] = args ? args.extAttributes : undefined;
            resourceInputs["listenerId"] = args ? args.listenerId : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["scriptContent"] = args ? args.scriptContent : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AScript.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AScript resources.
 */
export interface AScriptState {
    /**
     * AScript name.
     */
    ascriptName?: pulumi.Input<string>;
    /**
     * Whether to PreCheck only this request
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Whether AScript is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether extension parameters are enabled. When ExtAttributeEnabled is true, ExtAttributes must be set.
     */
    extAttributeEnabled?: pulumi.Input<boolean>;
    /**
     * Expand the list of attributes. When ExtAttributeEnabled is true, ExtAttributes must be set. See `extAttributes` below.
     */
    extAttributes?: pulumi.Input<pulumi.Input<inputs.alb.AScriptExtAttribute>[]>;
    /**
     * Listener ID of script attribution
     */
    listenerId?: pulumi.Input<string>;
    /**
     * Script execution location.
     */
    position?: pulumi.Input<string>;
    /**
     * AScript script content.
     */
    scriptContent?: pulumi.Input<string>;
    /**
     * Script status
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AScript resource.
 */
export interface AScriptArgs {
    /**
     * AScript name.
     */
    ascriptName: pulumi.Input<string>;
    /**
     * Whether to PreCheck only this request
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Whether AScript is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether extension parameters are enabled. When ExtAttributeEnabled is true, ExtAttributes must be set.
     */
    extAttributeEnabled?: pulumi.Input<boolean>;
    /**
     * Expand the list of attributes. When ExtAttributeEnabled is true, ExtAttributes must be set. See `extAttributes` below.
     */
    extAttributes?: pulumi.Input<pulumi.Input<inputs.alb.AScriptExtAttribute>[]>;
    /**
     * Listener ID of script attribution
     */
    listenerId: pulumi.Input<string>;
    /**
     * Script execution location.
     */
    position: pulumi.Input<string>;
    /**
     * AScript script content.
     */
    scriptContent: pulumi.Input<string>;
}
