// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ALB Security Policy resource.
 *
 * For information about ALB Security Policy and how to use it, see [What is Security Policy](https://www.alibabacloud.com/help/en/slb/application-load-balancer/developer-reference/api-alb-2020-06-16-createsecuritypolicy).
 *
 * > **NOTE:** Available since v1.130.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.alb.SecurityPolicy("default", {
 *     securityPolicyName: "tf_example",
 *     tlsVersions: ["TLSv1.0"],
 *     ciphers: [
 *         "ECDHE-ECDSA-AES128-SHA",
 *         "AES256-SHA",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ALB Security Policy can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:alb/securityPolicy:SecurityPolicy example <id>
 * ```
 */
export class SecurityPolicy extends pulumi.CustomResource {
    /**
     * Get an existing SecurityPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityPolicyState, opts?: pulumi.CustomResourceOptions): SecurityPolicy {
        return new SecurityPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:alb/securityPolicy:SecurityPolicy';

    /**
     * Returns true if the given object is an instance of SecurityPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityPolicy.__pulumiType;
    }

    /**
     * The supported cipher suites, which are determined by the TLS protocol version.The specified cipher suites must be supported by at least one TLS protocol version that you select.
     */
    declare public readonly ciphers: pulumi.Output<string[]>;
    /**
     * The dry run.
     */
    declare public readonly dryRun: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the resource group.
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * The name of the resource. The name must be 2 to 128 characters in length and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
     */
    declare public readonly securityPolicyName: pulumi.Output<string>;
    /**
     * The status of the resource.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The TLS protocol versions that are supported. Valid values: TLSv1.0, TLSv1.1, TLSv1.2 and TLSv1.3.
     */
    declare public readonly tlsVersions: pulumi.Output<string[]>;

    /**
     * Create a SecurityPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityPolicyArgs | SecurityPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityPolicyState | undefined;
            resourceInputs["ciphers"] = state?.ciphers;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["securityPolicyName"] = state?.securityPolicyName;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tlsVersions"] = state?.tlsVersions;
        } else {
            const args = argsOrState as SecurityPolicyArgs | undefined;
            if (args?.ciphers === undefined && !opts.urn) {
                throw new Error("Missing required property 'ciphers'");
            }
            if (args?.securityPolicyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityPolicyName'");
            }
            if (args?.tlsVersions === undefined && !opts.urn) {
                throw new Error("Missing required property 'tlsVersions'");
            }
            resourceInputs["ciphers"] = args?.ciphers;
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["securityPolicyName"] = args?.securityPolicyName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tlsVersions"] = args?.tlsVersions;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityPolicy resources.
 */
export interface SecurityPolicyState {
    /**
     * The supported cipher suites, which are determined by the TLS protocol version.The specified cipher suites must be supported by at least one TLS protocol version that you select.
     */
    ciphers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The dry run.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The name of the resource. The name must be 2 to 128 characters in length and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
     */
    securityPolicyName?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The TLS protocol versions that are supported. Valid values: TLSv1.0, TLSv1.1, TLSv1.2 and TLSv1.3.
     */
    tlsVersions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SecurityPolicy resource.
 */
export interface SecurityPolicyArgs {
    /**
     * The supported cipher suites, which are determined by the TLS protocol version.The specified cipher suites must be supported by at least one TLS protocol version that you select.
     */
    ciphers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The dry run.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The name of the resource. The name must be 2 to 128 characters in length and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
     */
    securityPolicyName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The TLS protocol versions that are supported. Valid values: TLSv1.0, TLSv1.1, TLSv1.2 and TLSv1.3.
     */
    tlsVersions: pulumi.Input<pulumi.Input<string>[]>;
}
