// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Application Load Balancer (ALB) Health Check Template resource.
 *
 * Health check template.
 *
 * For information about Application Load Balancer (ALB) Health Check Template and how to use it, see [What is Health Check Template](https://www.alibabacloud.com/help/en/slb/application-load-balancer/developer-reference/api-alb-2020-06-16-createhealthchecktemplate).
 *
 * > **NOTE:** Available since v1.134.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const example = new alicloud.alb.HealthCheckTemplate("example", {healthCheckTemplateName: name});
 * ```
 *
 * ## Import
 *
 * Application Load Balancer (ALB) Health Check Template can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:alb/healthCheckTemplate:HealthCheckTemplate example <id>
 * ```
 */
export class HealthCheckTemplate extends pulumi.CustomResource {
    /**
     * Get an existing HealthCheckTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthCheckTemplateState, opts?: pulumi.CustomResourceOptions): HealthCheckTemplate {
        return new HealthCheckTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:alb/healthCheckTemplate:HealthCheckTemplate';

    /**
     * Returns true if the given object is an instance of HealthCheckTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthCheckTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthCheckTemplate.__pulumiType;
    }

    /**
     * Whether to PreCheck only this request, value:
     * true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
     * false (default): Sends a normal request, returns the http2xx status code after the check, and directly performs the operation.
     */
    declare public readonly dryRun: pulumi.Output<boolean | undefined>;
    /**
     * The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
     */
    declare public readonly healthCheckCodes: pulumi.Output<string[]>;
    /**
     * The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
     */
    declare public readonly healthCheckConnectPort: pulumi.Output<number>;
    /**
     * The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
     */
    declare public readonly healthCheckHost: pulumi.Output<string>;
    /**
     * The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
     */
    declare public readonly healthCheckHttpVersion: pulumi.Output<string>;
    /**
     * The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
     */
    declare public readonly healthCheckInterval: pulumi.Output<number>;
    /**
     * The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
     */
    declare public readonly healthCheckMethod: pulumi.Output<string>;
    /**
     * The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/).
     */
    declare public readonly healthCheckPath: pulumi.Output<string>;
    /**
     * The protocol used for the health check. Value:
     * HTTP (default): Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy.
     * HTTPS: Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
     * TCP: Sends a SYN handshake packet to check whether the server port is alive.
     * gRPC: Check whether the server application is healthy by sending a POST or GET request.
     */
    declare public readonly healthCheckProtocol: pulumi.Output<string>;
    /**
     * The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
     */
    declare public readonly healthCheckTemplateName: pulumi.Output<string>;
    /**
     * The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
     */
    declare public readonly healthCheckTimeout: pulumi.Output<number>;
    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
     */
    declare public readonly healthyThreshold: pulumi.Output<number>;
    /**
     * The ID of the resource group
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * The tag of the resource
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
     */
    declare public readonly unhealthyThreshold: pulumi.Output<number>;

    /**
     * Create a HealthCheckTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HealthCheckTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthCheckTemplateArgs | HealthCheckTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthCheckTemplateState | undefined;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["healthCheckCodes"] = state?.healthCheckCodes;
            resourceInputs["healthCheckConnectPort"] = state?.healthCheckConnectPort;
            resourceInputs["healthCheckHost"] = state?.healthCheckHost;
            resourceInputs["healthCheckHttpVersion"] = state?.healthCheckHttpVersion;
            resourceInputs["healthCheckInterval"] = state?.healthCheckInterval;
            resourceInputs["healthCheckMethod"] = state?.healthCheckMethod;
            resourceInputs["healthCheckPath"] = state?.healthCheckPath;
            resourceInputs["healthCheckProtocol"] = state?.healthCheckProtocol;
            resourceInputs["healthCheckTemplateName"] = state?.healthCheckTemplateName;
            resourceInputs["healthCheckTimeout"] = state?.healthCheckTimeout;
            resourceInputs["healthyThreshold"] = state?.healthyThreshold;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["unhealthyThreshold"] = state?.unhealthyThreshold;
        } else {
            const args = argsOrState as HealthCheckTemplateArgs | undefined;
            if (args?.healthCheckTemplateName === undefined && !opts.urn) {
                throw new Error("Missing required property 'healthCheckTemplateName'");
            }
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["healthCheckCodes"] = args?.healthCheckCodes;
            resourceInputs["healthCheckConnectPort"] = args?.healthCheckConnectPort;
            resourceInputs["healthCheckHost"] = args?.healthCheckHost;
            resourceInputs["healthCheckHttpVersion"] = args?.healthCheckHttpVersion;
            resourceInputs["healthCheckInterval"] = args?.healthCheckInterval;
            resourceInputs["healthCheckMethod"] = args?.healthCheckMethod;
            resourceInputs["healthCheckPath"] = args?.healthCheckPath;
            resourceInputs["healthCheckProtocol"] = args?.healthCheckProtocol;
            resourceInputs["healthCheckTemplateName"] = args?.healthCheckTemplateName;
            resourceInputs["healthCheckTimeout"] = args?.healthCheckTimeout;
            resourceInputs["healthyThreshold"] = args?.healthyThreshold;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["unhealthyThreshold"] = args?.unhealthyThreshold;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthCheckTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HealthCheckTemplate resources.
 */
export interface HealthCheckTemplateState {
    /**
     * Whether to PreCheck only this request, value:
     * true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
     * false (default): Sends a normal request, returns the http2xx status code after the check, and directly performs the operation.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
     */
    healthCheckCodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
     */
    healthCheckConnectPort?: pulumi.Input<number>;
    /**
     * The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
     */
    healthCheckHost?: pulumi.Input<string>;
    /**
     * The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
     */
    healthCheckHttpVersion?: pulumi.Input<string>;
    /**
     * The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
     */
    healthCheckInterval?: pulumi.Input<number>;
    /**
     * The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
     */
    healthCheckMethod?: pulumi.Input<string>;
    /**
     * The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/).
     */
    healthCheckPath?: pulumi.Input<string>;
    /**
     * The protocol used for the health check. Value:
     * HTTP (default): Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy.
     * HTTPS: Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
     * TCP: Sends a SYN handshake packet to check whether the server port is alive.
     * gRPC: Check whether the server application is healthy by sending a POST or GET request.
     */
    healthCheckProtocol?: pulumi.Input<string>;
    /**
     * The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
     */
    healthCheckTemplateName?: pulumi.Input<string>;
    /**
     * The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
     */
    healthCheckTimeout?: pulumi.Input<number>;
    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
     */
    healthyThreshold?: pulumi.Input<number>;
    /**
     * The ID of the resource group
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The tag of the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
     */
    unhealthyThreshold?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a HealthCheckTemplate resource.
 */
export interface HealthCheckTemplateArgs {
    /**
     * Whether to PreCheck only this request, value:
     * true: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code DryRunOperation is returned.
     * false (default): Sends a normal request, returns the http2xx status code after the check, and directly performs the operation.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The HTTP code of the health check. The default value is http_2xx. The normal HTTP code for health check. Separate multiple codes with commas (,). Valid values: http_2xx, http_3xx, http_4xx, or http_5xx.
     */
    healthCheckCodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of the port that is used for health checks.  Valid values: 0 to 65535.  Default value: 0. This value indicates that the backend server is used for health checks.
     */
    healthCheckConnectPort?: pulumi.Input<number>;
    /**
     * The domain name that is used for health checks. Valid values:  $SERVER_IP (default value): The private IP addresses of backend servers. If the $_ip parameter is set or the HealthCheckHost parameter is not set, SLB uses the private IP addresses of backend servers as the domain names for health checks.  domain: The domain name must be 1 to 80 characters in length, and can contain only letters, digits, periods (.),and hyphens (-).
     */
    healthCheckHost?: pulumi.Input<string>;
    /**
     * The version of the HTTP protocol.  Valid values: HTTP 1.0 and HTTP 1.1.  Default value: HTTP 1.1.
     */
    healthCheckHttpVersion?: pulumi.Input<string>;
    /**
     * The time interval between two consecutive health checks.  Valid values: 1 to 50. Unit: seconds.  Default value: 2.
     */
    healthCheckInterval?: pulumi.Input<number>;
    /**
     * The health check method.  Valid values: GET and HEAD.  Default value: HEAD.
     */
    healthCheckMethod?: pulumi.Input<string>;
    /**
     * The URL that is used for health checks.  The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). The URL can also contain the following extended characters: _ ; ~ ! ( )* [ ] @ $ ^ : ' , +. The URL must start with a forward slash (/).
     */
    healthCheckPath?: pulumi.Input<string>;
    /**
     * The protocol used for the health check. Value:
     * HTTP (default): Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy.
     * HTTPS: Sends a HEAD or GET request to simulate the browser's access behavior to check whether the server application is healthy. (Data encryption is more secure than HTTP.)
     * TCP: Sends a SYN handshake packet to check whether the server port is alive.
     * gRPC: Check whether the server application is healthy by sending a POST or GET request.
     */
    healthCheckProtocol?: pulumi.Input<string>;
    /**
     * The name of the health check template.  The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
     */
    healthCheckTemplateName: pulumi.Input<string>;
    /**
     * The timeout period of a health check response. If the backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the health check fails.  Valid values: 1 to 300. Unit: seconds.  Default value: 5.
     */
    healthCheckTimeout?: pulumi.Input<number>;
    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy (from fail to success).
     */
    healthyThreshold?: pulumi.Input<number>;
    /**
     * The ID of the resource group
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The tag of the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the number of times that an healthy backend server must consecutively fail health checks before it is declared unhealthy (from success to fail).
     */
    unhealthyThreshold?: pulumi.Input<number>;
}
