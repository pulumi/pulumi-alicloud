// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Application Load Balancer (ALB) Server Group resource.
 *
 * For information about Application Load Balancer (ALB) Server Group and how to use it, see [What is Server Group](https://www.alibabacloud.com/help/en/slb/application-load-balancer/developer-reference/api-alb-2020-06-16-createservergroup).
 *
 * > **NOTE:** Available since v1.131.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const example = alicloud.resourcemanager.getResourceGroups({});
 * const exampleGetZones = alicloud.getZones({
 *     availableResourceCreation: "Instance",
 * });
 * const exampleGetInstanceTypes = exampleGetZones.then(exampleGetZones => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: exampleGetZones.zones?.[0]?.id,
 *     cpuCoreCount: 1,
 *     memorySize: 2,
 * }));
 * const exampleGetImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_18.*64",
 *     owners: "system",
 * });
 * const exampleNetwork = new alicloud.vpc.Network("example", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const exampleSwitch = new alicloud.vpc.Switch("example", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/16",
 *     vpcId: exampleNetwork.id,
 *     zoneId: exampleGetZones.then(exampleGetZones => exampleGetZones.zones?.[0]?.id),
 * });
 * const exampleSecurityGroup = new alicloud.ecs.SecurityGroup("example", {
 *     name: name,
 *     description: name,
 *     vpcId: exampleNetwork.id,
 * });
 * const exampleInstance = new alicloud.ecs.Instance("example", {
 *     availabilityZone: exampleGetZones.then(exampleGetZones => exampleGetZones.zones?.[0]?.id),
 *     instanceName: name,
 *     imageId: exampleGetImages.then(exampleGetImages => exampleGetImages.images?.[0]?.id),
 *     instanceType: exampleGetInstanceTypes.then(exampleGetInstanceTypes => exampleGetInstanceTypes.instanceTypes?.[0]?.id),
 *     securityGroups: [exampleSecurityGroup.id],
 *     vswitchId: exampleSwitch.id,
 * });
 * const exampleServerGroup = new alicloud.alb.ServerGroup("example", {
 *     protocol: "HTTP",
 *     vpcId: exampleNetwork.id,
 *     serverGroupName: name,
 *     resourceGroupId: example.then(example => example.groups?.[0]?.id),
 *     stickySessionConfig: {
 *         stickySessionEnabled: true,
 *         cookie: "tf-example",
 *         stickySessionType: "Server",
 *     },
 *     healthCheckConfig: {
 *         healthCheckConnectPort: 46325,
 *         healthCheckEnabled: true,
 *         healthCheckHost: "tf-example.com",
 *         healthCheckCodes: [
 *             "http_2xx",
 *             "http_3xx",
 *             "http_4xx",
 *         ],
 *         healthCheckHttpVersion: "HTTP1.1",
 *         healthCheckInterval: 2,
 *         healthCheckMethod: "HEAD",
 *         healthCheckPath: "/tf-example",
 *         healthCheckProtocol: "HTTP",
 *         healthCheckTimeout: 5,
 *         healthyThreshold: 3,
 *         unhealthyThreshold: 3,
 *     },
 *     servers: [{
 *         description: name,
 *         port: 80,
 *         serverId: exampleInstance.id,
 *         serverIp: exampleInstance.privateIp,
 *         serverType: "Ecs",
 *         weight: 10,
 *     }],
 *     tags: {
 *         Created: "TF",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Application Load Balancer (ALB) Server Group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:alb/serverGroup:ServerGroup example <id>
 * ```
 */
export class ServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing ServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerGroupState, opts?: pulumi.CustomResourceOptions): ServerGroup {
        return new ServerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:alb/serverGroup:ServerGroup';

    /**
     * Returns true if the given object is an instance of ServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerGroup.__pulumiType;
    }

    /**
     * Elegant interrupt configuration. See `connectionDrainConfig` below.
     */
    declare public readonly connectionDrainConfig: pulumi.Output<outputs.alb.ServerGroupConnectionDrainConfig>;
    /**
     * The creation time of the resource
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Indicates whether cross-zone load balancing is enabled for the server group. Valid values:
     */
    declare public readonly crossZoneEnabled: pulumi.Output<boolean>;
    /**
     * Whether to PreCheck only this request. Value:
     * true: Send a check request,
     * false (default): Send a normal request.
     */
    declare public readonly dryRun: pulumi.Output<boolean | undefined>;
    /**
     * The configuration of health checks See `healthCheckConfig` below.
     */
    declare public readonly healthCheckConfig: pulumi.Output<outputs.alb.ServerGroupHealthCheckConfig>;
    /**
     * The ID of the resource group to which you want to transfer the cloud resource.
     *
     * > **NOTE:**   You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is resource management?](https://www.alibabacloud.com/help/en/doc-detail/94475.html)
     */
    declare public readonly healthCheckTemplateId: pulumi.Output<string | undefined>;
    /**
     * Enable Ipv6
     */
    declare public readonly ipv6Enabled: pulumi.Output<boolean | undefined>;
    /**
     * The backend protocol. Valid values:
     *
     * *   `HTTP`: allows you to associate an HTTPS, HTTP, or QUIC listener with the server group. This is the default value.
     *
     * *   `HTTPS`: allows you to associate HTTPS listeners with backend servers.
     *
     * *   `gRPC`: allows you to associate an HTTPS or QUIC listener with the server group.
     *
     * > **NOTE:**   You do not need to specify a backend protocol if you set `ServerGroupType` to `Fc`.
     */
    declare public readonly protocol: pulumi.Output<string>;
    /**
     * Elegant interrupt configuration.
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * The scheduling algorithm. Valid values:
     *
     * *   `Wrr` (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
     *
     * *   `Wlc`: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
     *
     * *   `Sch`: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.
     *
     * > **NOTE:**  This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
     */
    declare public readonly scheduler: pulumi.Output<string>;
    /**
     * The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
     */
    declare public readonly serverGroupName: pulumi.Output<string>;
    /**
     * The type of server group. Valid values:
     *
     * - `Instance` (default): allows you to add servers by specifying `Ecs`, `Eni`, or `Eci`.
     * - `Ip`: allows you to add servers by specifying IP addresses.
     * - `Fc`: allows you to add servers by specifying functions of Function Compute.
     */
    declare public readonly serverGroupType: pulumi.Output<string>;
    /**
     * List of servers. See `servers` below.
     */
    declare public readonly servers: pulumi.Output<outputs.alb.ServerGroupServer[] | undefined>;
    /**
     * Only applicable to the ALB Ingress scenario, indicating the K8s Service name corresponding to the server group.
     */
    declare public readonly serviceName: pulumi.Output<string | undefined>;
    /**
     * Slow start configuration. See `slowStartConfig` below.
     */
    declare public readonly slowStartConfig: pulumi.Output<outputs.alb.ServerGroupSlowStartConfig>;
    /**
     * The status of the resource
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The configuration of health checks See `stickySessionConfig` below.
     */
    declare public readonly stickySessionConfig: pulumi.Output<outputs.alb.ServerGroupStickySessionConfig | undefined>;
    /**
     * The creation time of the resource
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Url consistency hash parameter configuration See `uchConfig` below.
     */
    declare public readonly uchConfig: pulumi.Output<outputs.alb.ServerGroupUchConfig | undefined>;
    /**
     * Specifies whether to enable persistent TCP connections.
     */
    declare public readonly upstreamKeepaliveEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the virtual private cloud (VPC). You can add only servers that are deployed in the specified VPC to the server group.
     *
     * > **NOTE:**   This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
     */
    declare public readonly vpcId: pulumi.Output<string | undefined>;

    /**
     * Create a ServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerGroupArgs | ServerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerGroupState | undefined;
            resourceInputs["connectionDrainConfig"] = state?.connectionDrainConfig;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["crossZoneEnabled"] = state?.crossZoneEnabled;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["healthCheckConfig"] = state?.healthCheckConfig;
            resourceInputs["healthCheckTemplateId"] = state?.healthCheckTemplateId;
            resourceInputs["ipv6Enabled"] = state?.ipv6Enabled;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["scheduler"] = state?.scheduler;
            resourceInputs["serverGroupName"] = state?.serverGroupName;
            resourceInputs["serverGroupType"] = state?.serverGroupType;
            resourceInputs["servers"] = state?.servers;
            resourceInputs["serviceName"] = state?.serviceName;
            resourceInputs["slowStartConfig"] = state?.slowStartConfig;
            resourceInputs["status"] = state?.status;
            resourceInputs["stickySessionConfig"] = state?.stickySessionConfig;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["uchConfig"] = state?.uchConfig;
            resourceInputs["upstreamKeepaliveEnabled"] = state?.upstreamKeepaliveEnabled;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as ServerGroupArgs | undefined;
            if (args?.healthCheckConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'healthCheckConfig'");
            }
            if (args?.serverGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serverGroupName'");
            }
            resourceInputs["connectionDrainConfig"] = args?.connectionDrainConfig;
            resourceInputs["crossZoneEnabled"] = args?.crossZoneEnabled;
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["healthCheckConfig"] = args?.healthCheckConfig;
            resourceInputs["healthCheckTemplateId"] = args?.healthCheckTemplateId;
            resourceInputs["ipv6Enabled"] = args?.ipv6Enabled;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["scheduler"] = args?.scheduler;
            resourceInputs["serverGroupName"] = args?.serverGroupName;
            resourceInputs["serverGroupType"] = args?.serverGroupType;
            resourceInputs["servers"] = args?.servers;
            resourceInputs["serviceName"] = args?.serviceName;
            resourceInputs["slowStartConfig"] = args?.slowStartConfig;
            resourceInputs["stickySessionConfig"] = args?.stickySessionConfig;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["uchConfig"] = args?.uchConfig;
            resourceInputs["upstreamKeepaliveEnabled"] = args?.upstreamKeepaliveEnabled;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerGroup resources.
 */
export interface ServerGroupState {
    /**
     * Elegant interrupt configuration. See `connectionDrainConfig` below.
     */
    connectionDrainConfig?: pulumi.Input<inputs.alb.ServerGroupConnectionDrainConfig>;
    /**
     * The creation time of the resource
     */
    createTime?: pulumi.Input<string>;
    /**
     * Indicates whether cross-zone load balancing is enabled for the server group. Valid values:
     */
    crossZoneEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to PreCheck only this request. Value:
     * true: Send a check request,
     * false (default): Send a normal request.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The configuration of health checks See `healthCheckConfig` below.
     */
    healthCheckConfig?: pulumi.Input<inputs.alb.ServerGroupHealthCheckConfig>;
    /**
     * The ID of the resource group to which you want to transfer the cloud resource.
     *
     * > **NOTE:**   You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is resource management?](https://www.alibabacloud.com/help/en/doc-detail/94475.html)
     */
    healthCheckTemplateId?: pulumi.Input<string>;
    /**
     * Enable Ipv6
     */
    ipv6Enabled?: pulumi.Input<boolean>;
    /**
     * The backend protocol. Valid values:
     *
     * *   `HTTP`: allows you to associate an HTTPS, HTTP, or QUIC listener with the server group. This is the default value.
     *
     * *   `HTTPS`: allows you to associate HTTPS listeners with backend servers.
     *
     * *   `gRPC`: allows you to associate an HTTPS or QUIC listener with the server group.
     *
     * > **NOTE:**   You do not need to specify a backend protocol if you set `ServerGroupType` to `Fc`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Elegant interrupt configuration.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The scheduling algorithm. Valid values:
     *
     * *   `Wrr` (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
     *
     * *   `Wlc`: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
     *
     * *   `Sch`: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.
     *
     * > **NOTE:**  This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
     */
    serverGroupName?: pulumi.Input<string>;
    /**
     * The type of server group. Valid values:
     *
     * - `Instance` (default): allows you to add servers by specifying `Ecs`, `Eni`, or `Eci`.
     * - `Ip`: allows you to add servers by specifying IP addresses.
     * - `Fc`: allows you to add servers by specifying functions of Function Compute.
     */
    serverGroupType?: pulumi.Input<string>;
    /**
     * List of servers. See `servers` below.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.alb.ServerGroupServer>[]>;
    /**
     * Only applicable to the ALB Ingress scenario, indicating the K8s Service name corresponding to the server group.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Slow start configuration. See `slowStartConfig` below.
     */
    slowStartConfig?: pulumi.Input<inputs.alb.ServerGroupSlowStartConfig>;
    /**
     * The status of the resource
     */
    status?: pulumi.Input<string>;
    /**
     * The configuration of health checks See `stickySessionConfig` below.
     */
    stickySessionConfig?: pulumi.Input<inputs.alb.ServerGroupStickySessionConfig>;
    /**
     * The creation time of the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Url consistency hash parameter configuration See `uchConfig` below.
     */
    uchConfig?: pulumi.Input<inputs.alb.ServerGroupUchConfig>;
    /**
     * Specifies whether to enable persistent TCP connections.
     */
    upstreamKeepaliveEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the virtual private cloud (VPC). You can add only servers that are deployed in the specified VPC to the server group.
     *
     * > **NOTE:**   This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerGroup resource.
 */
export interface ServerGroupArgs {
    /**
     * Elegant interrupt configuration. See `connectionDrainConfig` below.
     */
    connectionDrainConfig?: pulumi.Input<inputs.alb.ServerGroupConnectionDrainConfig>;
    /**
     * Indicates whether cross-zone load balancing is enabled for the server group. Valid values:
     */
    crossZoneEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to PreCheck only this request. Value:
     * true: Send a check request,
     * false (default): Send a normal request.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The configuration of health checks See `healthCheckConfig` below.
     */
    healthCheckConfig: pulumi.Input<inputs.alb.ServerGroupHealthCheckConfig>;
    /**
     * The ID of the resource group to which you want to transfer the cloud resource.
     *
     * > **NOTE:**   You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is resource management?](https://www.alibabacloud.com/help/en/doc-detail/94475.html)
     */
    healthCheckTemplateId?: pulumi.Input<string>;
    /**
     * Enable Ipv6
     */
    ipv6Enabled?: pulumi.Input<boolean>;
    /**
     * The backend protocol. Valid values:
     *
     * *   `HTTP`: allows you to associate an HTTPS, HTTP, or QUIC listener with the server group. This is the default value.
     *
     * *   `HTTPS`: allows you to associate HTTPS listeners with backend servers.
     *
     * *   `gRPC`: allows you to associate an HTTPS or QUIC listener with the server group.
     *
     * > **NOTE:**   You do not need to specify a backend protocol if you set `ServerGroupType` to `Fc`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Elegant interrupt configuration.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The scheduling algorithm. Valid values:
     *
     * *   `Wrr` (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
     *
     * *   `Wlc`: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
     *
     * *   `Sch`: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.
     *
     * > **NOTE:**  This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
     */
    serverGroupName: pulumi.Input<string>;
    /**
     * The type of server group. Valid values:
     *
     * - `Instance` (default): allows you to add servers by specifying `Ecs`, `Eni`, or `Eci`.
     * - `Ip`: allows you to add servers by specifying IP addresses.
     * - `Fc`: allows you to add servers by specifying functions of Function Compute.
     */
    serverGroupType?: pulumi.Input<string>;
    /**
     * List of servers. See `servers` below.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.alb.ServerGroupServer>[]>;
    /**
     * Only applicable to the ALB Ingress scenario, indicating the K8s Service name corresponding to the server group.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Slow start configuration. See `slowStartConfig` below.
     */
    slowStartConfig?: pulumi.Input<inputs.alb.ServerGroupSlowStartConfig>;
    /**
     * The configuration of health checks See `stickySessionConfig` below.
     */
    stickySessionConfig?: pulumi.Input<inputs.alb.ServerGroupStickySessionConfig>;
    /**
     * The creation time of the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Url consistency hash parameter configuration See `uchConfig` below.
     */
    uchConfig?: pulumi.Input<inputs.alb.ServerGroupUchConfig>;
    /**
     * Specifies whether to enable persistent TCP connections.
     */
    upstreamKeepaliveEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the virtual private cloud (VPC). You can add only servers that are deployed in the specified VPC to the server group.
     *
     * > **NOTE:**   This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
     */
    vpcId?: pulumi.Input<string>;
}
