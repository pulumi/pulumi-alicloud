// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a ALB Server Group resource.
 *
 * For information about ALB Server Group and how to use it,
 * see [What is Server Group](https://www.alibabacloud.com/help/doc-detail/213627.htm).
 *
 * > **NOTE:** Available in v1.131.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "example_value";
 * const defaultZones = alicloud.getZones({
 *     availableDiskCategory: "cloud_efficiency",
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultInstanceTypes = defaultZones.then(defaultZones => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: defaultZones.zones?[0]?.id,
 *     cpuCoreCount: 1,
 *     memorySize: 2,
 * }));
 * const defaultImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_18.*64",
 *     mostRecent: true,
 *     owners: "system",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("defaultNetwork", {
 *     vpcName: name,
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("defaultSwitch", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "172.16.0.0/16",
 *     zoneId: defaultZones.then(defaultZones => defaultZones.zones?[0]?.id),
 *     vswitchName: name,
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("defaultSecurityGroup", {vpcId: defaultNetwork.id});
 * const defaultInstance = new alicloud.ecs.Instance("defaultInstance", {
 *     imageId: defaultImages.then(defaultImages => defaultImages.images?[0]?.id),
 *     instanceType: defaultInstanceTypes.then(defaultInstanceTypes => defaultInstanceTypes.instanceTypes?[0]?.id),
 *     instanceName: name,
 *     securityGroups: [defaultSecurityGroup].map(__item => __item.id),
 *     internetChargeType: "PayByTraffic",
 *     internetMaxBandwidthOut: 10,
 *     availabilityZone: defaultZones.then(defaultZones => defaultZones.zones?[0]?.id),
 *     instanceChargeType: "PostPaid",
 *     systemDiskCategory: "cloud_efficiency",
 *     vswitchId: defaultSwitch.id,
 * });
 * const defaultResourceGroups = alicloud.resourcemanager.getResourceGroups({});
 * const defaultServerGroup = new alicloud.alb.ServerGroup("defaultServerGroup", {
 *     protocol: "HTTP",
 *     vpcId: defaultNetwork.id,
 *     serverGroupName: name,
 *     resourceGroupId: defaultResourceGroups.then(defaultResourceGroups => defaultResourceGroups.groups?[0]?.id),
 *     healthCheckConfig: {
 *         healthCheckConnectPort: 46325,
 *         healthCheckEnabled: true,
 *         healthCheckHost: "tf-testAcc.com",
 *         healthCheckCodes: [
 *             "http_2xx",
 *             "http_3xx",
 *             "http_4xx",
 *         ],
 *         healthCheckHttpVersion: "HTTP1.1",
 *         healthCheckInterval: 2,
 *         healthCheckMethod: "HEAD",
 *         healthCheckPath: "/tf-testAcc",
 *         healthCheckProtocol: "HTTP",
 *         healthCheckTimeout: 5,
 *         healthyThreshold: 3,
 *         unhealthyThreshold: 3,
 *     },
 *     stickySessionConfig: {
 *         stickySessionEnabled: true,
 *         cookie: "tf-testAcc",
 *         stickySessionType: "Server",
 *     },
 *     tags: {
 *         Created: "TF",
 *     },
 *     servers: [{
 *         description: name,
 *         port: 80,
 *         serverId: defaultInstance.id,
 *         serverIp: defaultInstance.privateIp,
 *         serverType: "Ecs",
 *         weight: 10,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ALB Server Group can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:alb/serverGroup:ServerGroup example <id>
 * ```
 */
export class ServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing ServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerGroupState, opts?: pulumi.CustomResourceOptions): ServerGroup {
        return new ServerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:alb/serverGroup:ServerGroup';

    /**
     * Returns true if the given object is an instance of ServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerGroup.__pulumiType;
    }

    /**
     * The dry run.
     */
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    /**
     * The configuration of health checks.
     */
    public readonly healthCheckConfig!: pulumi.Output<outputs.alb.ServerGroupHealthCheckConfig | undefined>;
    /**
     * The server protocol. Valid values: ` HTTPS`, `HTTP`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The ID of the resource group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The scheduling algorithm. Valid values: ` Sch`, ` Wlc`, `Wrr`.
     */
    public readonly scheduler!: pulumi.Output<string>;
    /**
     * The name of the resource.
     */
    public readonly serverGroupName!: pulumi.Output<string | undefined>;
    /**
     * The backend server.
     */
    public readonly servers!: pulumi.Output<outputs.alb.ServerGroupServer[] | undefined>;
    /**
     * The status of the resource.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The configuration of the sticky session.
     */
    public readonly stickySessionConfig!: pulumi.Output<outputs.alb.ServerGroupStickySessionConfig | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The ID of the VPC that you want to access.
     */
    public readonly vpcId!: pulumi.Output<string | undefined>;

    /**
     * Create a ServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerGroupArgs | ServerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerGroupState | undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["healthCheckConfig"] = state ? state.healthCheckConfig : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["scheduler"] = state ? state.scheduler : undefined;
            resourceInputs["serverGroupName"] = state ? state.serverGroupName : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stickySessionConfig"] = state ? state.stickySessionConfig : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as ServerGroupArgs | undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["healthCheckConfig"] = args ? args.healthCheckConfig : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["scheduler"] = args ? args.scheduler : undefined;
            resourceInputs["serverGroupName"] = args ? args.serverGroupName : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["stickySessionConfig"] = args ? args.stickySessionConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerGroup resources.
 */
export interface ServerGroupState {
    /**
     * The dry run.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The configuration of health checks.
     */
    healthCheckConfig?: pulumi.Input<inputs.alb.ServerGroupHealthCheckConfig>;
    /**
     * The server protocol. Valid values: ` HTTPS`, `HTTP`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The scheduling algorithm. Valid values: ` Sch`, ` Wlc`, `Wrr`.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    serverGroupName?: pulumi.Input<string>;
    /**
     * The backend server.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.alb.ServerGroupServer>[]>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * The configuration of the sticky session.
     */
    stickySessionConfig?: pulumi.Input<inputs.alb.ServerGroupStickySessionConfig>;
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The ID of the VPC that you want to access.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerGroup resource.
 */
export interface ServerGroupArgs {
    /**
     * The dry run.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The configuration of health checks.
     */
    healthCheckConfig?: pulumi.Input<inputs.alb.ServerGroupHealthCheckConfig>;
    /**
     * The server protocol. Valid values: ` HTTPS`, `HTTP`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The scheduling algorithm. Valid values: ` Sch`, ` Wlc`, `Wrr`.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    serverGroupName?: pulumi.Input<string>;
    /**
     * The backend server.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.alb.ServerGroupServer>[]>;
    /**
     * The configuration of the sticky session.
     */
    stickySessionConfig?: pulumi.Input<inputs.alb.ServerGroupStickySessionConfig>;
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The ID of the VPC that you want to access.
     */
    vpcId?: pulumi.Input<string>;
}
