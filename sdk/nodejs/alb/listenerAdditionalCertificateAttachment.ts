// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Application Load Balancer (ALB) Listener Additional Certificate Attachment resource.
 *
 * For information about Application Load Balancer (ALB) Listener Additional Certificate Attachment and how to use it, see [What is Listener Additional Certificate Attachment](https://www.alibabacloud.com/help/en/slb/application-load-balancer/developer-reference/api-alb-2020-06-16-associateadditionalcertificateswithlistener).
 *
 * > **NOTE:** Available since v1.161.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf_example";
 * const _default = alicloud.alb.getZones({});
 * const defaultGetResourceGroups = alicloud.resourcemanager.getResourceGroups({});
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch: alicloud.vpc.Switch[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     defaultSwitch.push(new alicloud.vpc.Switch(`default-${range.value}`, {
 *         vpcId: defaultNetwork.id,
 *         cidrBlock: std.format({
 *             input: "10.4.%d.0/24",
 *             args: [range.value + 1],
 *         }).then(invoke => invoke.result),
 *         zoneId: _default.then(_default => _default.zones[range.value].id),
 *         vswitchName: std.format({
 *             input: `${name}_%d`,
 *             args: [range.value + 1],
 *         }).then(invoke => invoke.result),
 *     }));
 * }
 * const defaultLoadBalancer = new alicloud.alb.LoadBalancer("default", {
 *     vpcId: defaultNetwork.id,
 *     addressType: "Internet",
 *     addressAllocatedMode: "Fixed",
 *     loadBalancerName: name,
 *     loadBalancerEdition: "Standard",
 *     resourceGroupId: defaultGetResourceGroups.then(defaultGetResourceGroups => defaultGetResourceGroups.groups?.[0]?.id),
 *     loadBalancerBillingConfig: {
 *         payType: "PayAsYouGo",
 *     },
 *     tags: {
 *         Created: "TF",
 *     },
 *     zoneMappings: [
 *         {
 *             vswitchId: defaultSwitch[0].id,
 *             zoneId: _default.then(_default => _default.zones?.[0]?.id),
 *         },
 *         {
 *             vswitchId: defaultSwitch[1].id,
 *             zoneId: _default.then(_default => _default.zones?.[1]?.id),
 *         },
 *     ],
 * });
 * const defaultServerGroup = new alicloud.alb.ServerGroup("default", {
 *     protocol: "HTTP",
 *     vpcId: defaultNetwork.id,
 *     serverGroupName: name,
 *     resourceGroupId: defaultGetResourceGroups.then(defaultGetResourceGroups => defaultGetResourceGroups.groups?.[0]?.id),
 *     healthCheckConfig: {
 *         healthCheckEnabled: false,
 *     },
 *     stickySessionConfig: {
 *         stickySessionEnabled: false,
 *     },
 *     tags: {
 *         Created: "TF",
 *     },
 * });
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultServiceCertificate: alicloud.cas.ServiceCertificate[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     defaultServiceCertificate.push(new alicloud.cas.ServiceCertificate(`default-${range.value}`, {
 *         certificateName: std.join({
 *             separator: "-",
 *             input: [
 *                 name,
 *                 defaultInteger.result,
 *                 range.value,
 *             ],
 *         }).then(invoke => invoke.result),
 *         cert: `-----BEGIN CERTIFICATE-----
 * MIIDeDCCAmCgAwIBAgIEN3ZT6zANBgkqhkiG9w0BAQsFADBVMQswCQYDVQQGEwJD
 * TjEVMBMGA1UEAwwMKi50ZnRlc3QudG9wMRAwDgYDVQQIDAdCZWlKaW5nMRAwDgYD
 * VQQHDAdCZWlKaW5nMQswCQYDVQQKDAJBQTAeFw0yMzA4MjgwNjQ5NDNaFw0yNTA4
 * MjcwNjQ5NDNaMFUxCzAJBgNVBAYTAkNOMRUwEwYDVQQDDAwqLnRmdGVzdC50b3Ax
 * EDAOBgNVBAgMB0JlaUppbmcxEDAOBgNVBAcMB0JlaUppbmcxCzAJBgNVBAoMAkFB
 * MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzkk9NJUH7PLSQK4RRrGQ
 * Y5dVsftkhnKh9HhI6yrnlowWIDPS1PZHOU/5gQ7xPUPGdKQV5S7x8wROnAaXEimx
 * N4GdQw25pGhRJvlwme9fzJJiSe6lG49NCxmuBiEdJAzPKaTPpK1cG1f1TqdgCfHR
 * HAL6Jxb3ylHG2LlTNFLXikubUi5RT6/9C8psr713Zm4HveCI/cx0WdgZ+fmsc9ft
 * rkIB1DdyV1kQ51m8r2rLi3J7aC5ggGOiex/VlGSd4e6SOQLpdQEdDbodtOJ4LgVk
 * +arFNCMinUWIOPGFzXhdm6lssPbh4MOBrz8c/M9TcF4hoMn5/o/9johZIZ/DOvXt
 * ZQIDAQABo1AwTjAdBgNVHQ4EFgQUOnWiddgeZj17IeysatqhE361o5YwHwYDVR0j
 * BBgwFoAUOnWiddgeZj17IeysatqhE361o5YwDAYDVR0TBAUwAwEB/zANBgkqhkiG
 * 9w0BAQsFAAOCAQEAfh3cnOszHM/5wXjY7BIkmgDOReksS+87ibhBz7T2ddZj+yCF
 * 9GdIBzXCiHpQFXpW8a3kc3I7l3nGfMTkmF6ld3ot/6SXP17QKJwxtvUA4ib8QkWD
 * S7FT+UcHCUHv42Sh1e5uAlQ5pMSul7iKcR7jwlwZGZ0905HOqrmdyUGJ+Ud2uZWD
 * AC0dJF6Bv9VhNtci8Imp05PaPH09deXLZu8LRrKRZFy9qLW5R6Swv7nzxckOAqDk
 * TTc40xwvQROekWUyxeJL7xaHuylUHE0bxsiIfx5bZsBizRjprIwGlj85CSPuTZyP
 * DPfaiZAN/61h5HNAnxLltOZfqabKYYw7l9LBDg==
 * -----END CERTIFICATE-----
 * `,
 *         key: `-----BEGIN PRIVATE KEY-----
 * MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDOST00lQfs8tJA
 * rhFGsZBjl1Wx+2SGcqH0eEjrKueWjBYgM9LU9kc5T/mBDvE9Q8Z0pBXlLvHzBE6c
 * BpcSKbE3gZ1DDbmkaFEm+XCZ71/MkmJJ7qUbj00LGa4GIR0kDM8ppM+krVwbV/VO
 * p2AJ8dEcAvonFvfKUcbYuVM0UteKS5tSLlFPr/0LymyvvXdmbge94Ij9zHRZ2Bn5
 * +axz1+2uQgHUN3JXWRDnWbyvasuLcntoLmCAY6J7H9WUZJ3h7pI5Aul1AR0Nuh20
 * 4nguBWT5qsU0IyKdRYg48YXNeF2bqWyw9uHgw4GvPxz8z1NwXiGgyfn+j/2OiFkh
 * n8M69e1lAgMBAAECggEAevPgTTT+0lYwx2h416ACJboP09O5KQGuUl5XaAPcoTjB
 * /1OkOFbKQPjQCAJ1+0QoR2F9w2plv6kziX/MD4FWJXVV3J+TpNCgfhBy8u1gNjiR
 * 6Osa8gBJtXIK7ZBTJCeWWoXnVYoWuh2FEupkLck6D+4eV6oy6x4u3QIo+6jc24n9
 * dIXQG6/v/Iao34kB0LUdp/4WNaUDvfI6NDhEwchpKE95dtWIDlIN/YhfiYAdjrnl
 * YmH2VDbAGgsdEiHP4wLZfjgsGPPDGS0+qBHoSiJGH0E6wWEZdAE4TsYGRFsO86n3
 * LfjEPFGfPlcnZe2cTTe3kmyKq/DTjxtu2rh3I8o2CQKBgQD/5Xe7cenaOBefzPlx
 * GOEsB+qv49UmzEPOXDNZe9hmAawuuuxPUM+xlE++P+mEgQm1LPT4WWgtFLPVuwmx
 * ncxt4CJNZh+ZGFyAZ4dm4M4ZhIBXNonyIP+yGyAJUUVF9Iy3TYcJNiGzv2Rx9JRQ
 * XWJMQnTDILmZbmU+ltTea7/zqwKBgQDOXqCqb17MuLt7OcKWSgthm79OlaOdzZvl
 * i9qU6VzZKG7Axc5gA9yq6tHp3vWPI4bNdvwqIIa/nzVILjGA5fcYFbRN+7gHwo8s
 * rNAgi5PAoKWqQRovyJRY9Eq/sn6l1jbJZAOUAMZMWDm8z89OqK7PNQSIAtfFSneo
 * 2QxJkGeTLwKBgGJkafBB8af9b1/7YWISLepPNPbihH/BhMThAMGEdAVs2TaymtA4
 * g1OFck/1pSVUtFXcbmjbf8ntruQcYbLQuNz6lFXsUXP9QPwCUrbE85ouL2bZSps2
 * AvsJoPzUKe2nBUAp6CUrkjPaAJYsc6ae8X/fAaRRfeu33ef9+OV4yrq3AoGAYFZo
 * ZmfrN2Kdkt7Z6dLTEVPlsMfGQ6pyNmxdM9rkzzNC0JcGymfDIb7RE35T3+hTy6La
 * AMiCXv3xn6qAzY2NFh87tpPlyymWMOLTnf3Kkcfszlfp45idOBGCu46V9NDVbppT
 * 2UmrSIR/H5dbTXsNcAlt/hhlpeInjhkU1VqmH10CgYEA7Kk+QhWq705SczpWjm5J
 * 9kHqfFzJLwAWNBduiia0WypgPhLe/4wT1rYQkBtKMVKrgFo7Cvi4YKlrtlDnXyeU
 * CIFqfEL5NriQelqrFsvgHsmD+MpvDoSWm5C8IrTubtlNyWUzXSVT4OIwzPobzPqG
 * LILJ+e7bLw8RrM0HfgFnl8c=
 * -----END PRIVATE KEY-----
 * `,
 *     }));
 * }
 * const defaultListener = new alicloud.alb.Listener("default", {
 *     loadBalancerId: defaultLoadBalancer.id,
 *     listenerProtocol: "HTTPS",
 *     listenerPort: 8081,
 *     listenerDescription: name,
 *     defaultActions: [{
 *         type: "ForwardGroup",
 *         forwardGroupConfig: {
 *             serverGroupTuples: [{
 *                 serverGroupId: defaultServerGroup.id,
 *             }],
 *         },
 *     }],
 *     certificates: {
 *         certificateId: std.joinOutput({
 *             separator: "",
 *             input: [
 *                 defaultServiceCertificate[0].id,
 *                 "-cn-hangzhou",
 *             ],
 *         }).apply(invoke => invoke.result),
 *     },
 * });
 * const defaultListenerAdditionalCertificateAttachment = new alicloud.alb.ListenerAdditionalCertificateAttachment("default", {
 *     certificateId: std.joinOutput({
 *         separator: "",
 *         input: [
 *             defaultServiceCertificate[1].id,
 *             "-cn-hangzhou",
 *         ],
 *     }).apply(invoke => invoke.result),
 *     listenerId: defaultListener.id,
 * });
 * ```
 *
 * ## Import
 *
 * Application Load Balancer (ALB) Listener Additional Certificate Attachment can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:alb/listenerAdditionalCertificateAttachment:ListenerAdditionalCertificateAttachment example <listener_id>:<certificate_id>
 * ```
 */
export class ListenerAdditionalCertificateAttachment extends pulumi.CustomResource {
    /**
     * Get an existing ListenerAdditionalCertificateAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerAdditionalCertificateAttachmentState, opts?: pulumi.CustomResourceOptions): ListenerAdditionalCertificateAttachment {
        return new ListenerAdditionalCertificateAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:alb/listenerAdditionalCertificateAttachment:ListenerAdditionalCertificateAttachment';

    /**
     * Returns true if the given object is an instance of ListenerAdditionalCertificateAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ListenerAdditionalCertificateAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ListenerAdditionalCertificateAttachment.__pulumiType;
    }

    /**
     * The Certificate ID.
     */
    declare public readonly certificateId: pulumi.Output<string>;
    /**
     * The type of the certificate.
     */
    declare public /*out*/ readonly certificateType: pulumi.Output<string>;
    /**
     * The ID of the ALB listener.
     */
    declare public readonly listenerId: pulumi.Output<string>;
    /**
     * The status of the certificate.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a ListenerAdditionalCertificateAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerAdditionalCertificateAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerAdditionalCertificateAttachmentArgs | ListenerAdditionalCertificateAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerAdditionalCertificateAttachmentState | undefined;
            resourceInputs["certificateId"] = state?.certificateId;
            resourceInputs["certificateType"] = state?.certificateType;
            resourceInputs["listenerId"] = state?.listenerId;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as ListenerAdditionalCertificateAttachmentArgs | undefined;
            if (args?.certificateId === undefined && !opts.urn) {
                throw new Error("Missing required property 'certificateId'");
            }
            if (args?.listenerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            resourceInputs["certificateId"] = args?.certificateId;
            resourceInputs["listenerId"] = args?.listenerId;
            resourceInputs["certificateType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ListenerAdditionalCertificateAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ListenerAdditionalCertificateAttachment resources.
 */
export interface ListenerAdditionalCertificateAttachmentState {
    /**
     * The Certificate ID.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * The type of the certificate.
     */
    certificateType?: pulumi.Input<string>;
    /**
     * The ID of the ALB listener.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * The status of the certificate.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ListenerAdditionalCertificateAttachment resource.
 */
export interface ListenerAdditionalCertificateAttachmentArgs {
    /**
     * The Certificate ID.
     */
    certificateId: pulumi.Input<string>;
    /**
     * The ID of the ALB listener.
     */
    listenerId: pulumi.Input<string>;
}
