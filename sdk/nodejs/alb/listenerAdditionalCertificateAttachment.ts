// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Application Load Balancer (ALB) Listener Additional Certificate Attachment resource.
 *
 * For information about Application Load Balancer (ALB) Listener Additional Certificate Attachment and how to use it, see [What is Listener Additional Certificate Attachment](https://www.alibabacloud.com/help/en/slb/application-load-balancer/developer-reference/api-alb-2020-06-16-associateadditionalcertificateswithlistener).
 *
 * > **NOTE:** Available since v1.161.0.
 *
 * ## Import
 *
 * Application Load Balancer (ALB) Listener Additional Certificate Attachment can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:alb/listenerAdditionalCertificateAttachment:ListenerAdditionalCertificateAttachment example <listener_id>:<certificate_id>
 * ```
 */
export class ListenerAdditionalCertificateAttachment extends pulumi.CustomResource {
    /**
     * Get an existing ListenerAdditionalCertificateAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerAdditionalCertificateAttachmentState, opts?: pulumi.CustomResourceOptions): ListenerAdditionalCertificateAttachment {
        return new ListenerAdditionalCertificateAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:alb/listenerAdditionalCertificateAttachment:ListenerAdditionalCertificateAttachment';

    /**
     * Returns true if the given object is an instance of ListenerAdditionalCertificateAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ListenerAdditionalCertificateAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ListenerAdditionalCertificateAttachment.__pulumiType;
    }

    /**
     * The Certificate ID.
     */
    public readonly certificateId!: pulumi.Output<string>;
    /**
     * The type of the certificate.
     */
    public /*out*/ readonly certificateType!: pulumi.Output<string>;
    /**
     * The ID of the ALB listener.
     */
    public readonly listenerId!: pulumi.Output<string>;
    /**
     * The status of the certificate.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a ListenerAdditionalCertificateAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerAdditionalCertificateAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerAdditionalCertificateAttachmentArgs | ListenerAdditionalCertificateAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerAdditionalCertificateAttachmentState | undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["certificateType"] = state ? state.certificateType : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ListenerAdditionalCertificateAttachmentArgs | undefined;
            if ((!args || args.certificateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateId'");
            }
            if ((!args || args.listenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["listenerId"] = args ? args.listenerId : undefined;
            resourceInputs["certificateType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ListenerAdditionalCertificateAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ListenerAdditionalCertificateAttachment resources.
 */
export interface ListenerAdditionalCertificateAttachmentState {
    /**
     * The Certificate ID.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * The type of the certificate.
     */
    certificateType?: pulumi.Input<string>;
    /**
     * The ID of the ALB listener.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * The status of the certificate.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ListenerAdditionalCertificateAttachment resource.
 */
export interface ListenerAdditionalCertificateAttachmentArgs {
    /**
     * The Certificate ID.
     */
    certificateId: pulumi.Input<string>;
    /**
     * The ID of the ALB listener.
     */
    listenerId: pulumi.Input<string>;
}
