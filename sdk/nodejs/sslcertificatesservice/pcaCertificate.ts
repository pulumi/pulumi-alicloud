// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a SSL Certificates Pca Certificate resource.
 *
 * For information about SSL Certificates Pca Certificate and how to use it, see [What is Pca Certificate](https://next.api.alibabacloud.com/document/cas/2020-06-30/CreateRootCACertificate).
 *
 * > **NOTE:** Available since v1.257.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.sslcertificatesservice.PcaCertificate("default", {
 *     organization: "a",
 *     years: 1,
 *     locality: "a",
 *     organizationUnit: "a",
 *     state: "a",
 *     countryCode: "cn",
 *     commonName: "cbc.certqa.cn",
 *     algorithm: "RSA_2048",
 * });
 * ```
 *
 * ## Import
 *
 * SSL Certificates Pca Certificate can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate example <id>
 * ```
 */
export class PcaCertificate extends pulumi.CustomResource {
    /**
     * Get an existing PcaCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PcaCertificateState, opts?: pulumi.CustomResourceOptions): PcaCertificate {
        return new PcaCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate';

    /**
     * Returns true if the given object is an instance of PcaCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PcaCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PcaCertificate.__pulumiType;
    }

    /**
     * The key algorithm type of the root CA certificate. The key algorithm is expressed using the '_< key length>' format. Value:
     * - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
     * - `ECC_256`: The signature algorithm is Sha256WithECDSA.
     * - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
     * - `ECC_512`: The signature algorithm is Sha256WithECDSA.
     * - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
     * The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
     */
    declare public readonly algorithm: pulumi.Output<string>;
    /**
     * The common name or abbreviation of the organization. Support the use of Chinese, English characters.
     */
    declare public readonly commonName: pulumi.Output<string>;
    /**
     * The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
     */
    declare public readonly countryCode: pulumi.Output<string | undefined>;
    /**
     * Name of the city where the organization is located. Support the use of Chinese, English characters.
     */
    declare public readonly locality: pulumi.Output<string>;
    /**
     * The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
     */
    declare public readonly organization: pulumi.Output<string>;
    /**
     * The name of the department or branch under the organization. Support the use of Chinese, English characters.
     */
    declare public readonly organizationUnit: pulumi.Output<string>;
    /**
     * The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters. 
     * Name of the province or state where the organization is located. Support the use of Chinese, English characters.
     */
    declare public readonly state: pulumi.Output<string>;
    /**
     * The status of the CA certificate.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The validity period of the root CA certificate, in years.
     * > **NOTE:**  It is recommended to set to `5` to `10` years.
     */
    declare public readonly years: pulumi.Output<number>;

    /**
     * Create a PcaCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PcaCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PcaCertificateArgs | PcaCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PcaCertificateState | undefined;
            resourceInputs["algorithm"] = state?.algorithm;
            resourceInputs["commonName"] = state?.commonName;
            resourceInputs["countryCode"] = state?.countryCode;
            resourceInputs["locality"] = state?.locality;
            resourceInputs["organization"] = state?.organization;
            resourceInputs["organizationUnit"] = state?.organizationUnit;
            resourceInputs["state"] = state?.state;
            resourceInputs["status"] = state?.status;
            resourceInputs["years"] = state?.years;
        } else {
            const args = argsOrState as PcaCertificateArgs | undefined;
            if (args?.commonName === undefined && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if (args?.locality === undefined && !opts.urn) {
                throw new Error("Missing required property 'locality'");
            }
            if (args?.organization === undefined && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if (args?.organizationUnit === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationUnit'");
            }
            if (args?.state === undefined && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            if (args?.years === undefined && !opts.urn) {
                throw new Error("Missing required property 'years'");
            }
            resourceInputs["algorithm"] = args?.algorithm;
            resourceInputs["commonName"] = args?.commonName;
            resourceInputs["countryCode"] = args?.countryCode;
            resourceInputs["locality"] = args?.locality;
            resourceInputs["organization"] = args?.organization;
            resourceInputs["organizationUnit"] = args?.organizationUnit;
            resourceInputs["state"] = args?.state;
            resourceInputs["years"] = args?.years;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PcaCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PcaCertificate resources.
 */
export interface PcaCertificateState {
    /**
     * The key algorithm type of the root CA certificate. The key algorithm is expressed using the '_< key length>' format. Value:
     * - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
     * - `ECC_256`: The signature algorithm is Sha256WithECDSA.
     * - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
     * - `ECC_512`: The signature algorithm is Sha256WithECDSA.
     * - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
     * The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * The common name or abbreviation of the organization. Support the use of Chinese, English characters.
     */
    commonName?: pulumi.Input<string>;
    /**
     * The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
     */
    countryCode?: pulumi.Input<string>;
    /**
     * Name of the city where the organization is located. Support the use of Chinese, English characters.
     */
    locality?: pulumi.Input<string>;
    /**
     * The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
     */
    organization?: pulumi.Input<string>;
    /**
     * The name of the department or branch under the organization. Support the use of Chinese, English characters.
     */
    organizationUnit?: pulumi.Input<string>;
    /**
     * The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters. 
     * Name of the province or state where the organization is located. Support the use of Chinese, English characters.
     */
    state?: pulumi.Input<string>;
    /**
     * The status of the CA certificate.
     */
    status?: pulumi.Input<string>;
    /**
     * The validity period of the root CA certificate, in years.
     * > **NOTE:**  It is recommended to set to `5` to `10` years.
     */
    years?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PcaCertificate resource.
 */
export interface PcaCertificateArgs {
    /**
     * The key algorithm type of the root CA certificate. The key algorithm is expressed using the '_< key length>' format. Value:
     * - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
     * - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
     * - `ECC_256`: The signature algorithm is Sha256WithECDSA.
     * - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
     * - `ECC_512`: The signature algorithm is Sha256WithECDSA.
     * - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
     * The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * The common name or abbreviation of the organization. Support the use of Chinese, English characters.
     */
    commonName: pulumi.Input<string>;
    /**
     * The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
     */
    countryCode?: pulumi.Input<string>;
    /**
     * Name of the city where the organization is located. Support the use of Chinese, English characters.
     */
    locality: pulumi.Input<string>;
    /**
     * The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
     */
    organization: pulumi.Input<string>;
    /**
     * The name of the department or branch under the organization. Support the use of Chinese, English characters.
     */
    organizationUnit: pulumi.Input<string>;
    /**
     * The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters. 
     * Name of the province or state where the organization is located. Support the use of Chinese, English characters.
     */
    state: pulumi.Input<string>;
    /**
     * The validity period of the root CA certificate, in years.
     * > **NOTE:**  It is recommended to set to `5` to `10` years.
     */
    years: pulumi.Input<number>;
}
