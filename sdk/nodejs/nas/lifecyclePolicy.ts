// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Network Attached Storage (NAS) Lifecycle Policy resource.
 *
 * For information about Network Attached Storage (NAS) Lifecycle Policy and how to use it, see [What is Lifecycle Policy](https://www.alibabacloud.com/help/en/doc-detail/169362.html).
 *
 * > **NOTE:** Available in v1.153.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const exampleFileSystem = new alicloud.nas.FileSystem("exampleFileSystem", {
 *     protocolType: "NFS",
 *     storageType: "Capacity",
 * });
 * const exampleLifecyclePolicy = new alicloud.nas.LifecyclePolicy("exampleLifecyclePolicy", {
 *     fileSystemId: exampleFileSystem.id,
 *     lifecyclePolicyName: "terraform-example",
 *     lifecycleRuleName: "DEFAULT_ATIME_14",
 *     storageType: "InfrequentAccess",
 *     paths: ["/"],
 * });
 * ```
 *
 * ## Import
 *
 * Network Attached Storage (NAS) Lifecycle Policy can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:nas/lifecyclePolicy:LifecyclePolicy example <file_system_id>:<lifecycle_policy_name>
 * ```
 */
export class LifecyclePolicy extends pulumi.CustomResource {
    /**
     * Get an existing LifecyclePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LifecyclePolicyState, opts?: pulumi.CustomResourceOptions): LifecyclePolicy {
        return new LifecyclePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:nas/lifecyclePolicy:LifecyclePolicy';

    /**
     * Returns true if the given object is an instance of LifecyclePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LifecyclePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LifecyclePolicy.__pulumiType;
    }

    /**
     * The ID of the file system.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * The name of the lifecycle management policy.
     */
    public readonly lifecyclePolicyName!: pulumi.Output<string>;
    /**
     * The rules in the lifecycle management policy. Valid values: `DEFAULT_ATIME_14`, `DEFAULT_ATIME_30`, `DEFAULT_ATIME_60`, `DEFAULT_ATIME_90`.
     */
    public readonly lifecycleRuleName!: pulumi.Output<string>;
    /**
     * The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
     */
    public readonly paths!: pulumi.Output<string[]>;
    /**
     * The storage type of the data that is dumped to the IA storage medium. Valid values: `InfrequentAccess`.
     */
    public readonly storageType!: pulumi.Output<string>;

    /**
     * Create a LifecyclePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LifecyclePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LifecyclePolicyArgs | LifecyclePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LifecyclePolicyState | undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["lifecyclePolicyName"] = state ? state.lifecyclePolicyName : undefined;
            resourceInputs["lifecycleRuleName"] = state ? state.lifecycleRuleName : undefined;
            resourceInputs["paths"] = state ? state.paths : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
        } else {
            const args = argsOrState as LifecyclePolicyArgs | undefined;
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.lifecyclePolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lifecyclePolicyName'");
            }
            if ((!args || args.lifecycleRuleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lifecycleRuleName'");
            }
            if ((!args || args.paths === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paths'");
            }
            if ((!args || args.storageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["lifecyclePolicyName"] = args ? args.lifecyclePolicyName : undefined;
            resourceInputs["lifecycleRuleName"] = args ? args.lifecycleRuleName : undefined;
            resourceInputs["paths"] = args ? args.paths : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LifecyclePolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LifecyclePolicy resources.
 */
export interface LifecyclePolicyState {
    /**
     * The ID of the file system.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * The name of the lifecycle management policy.
     */
    lifecyclePolicyName?: pulumi.Input<string>;
    /**
     * The rules in the lifecycle management policy. Valid values: `DEFAULT_ATIME_14`, `DEFAULT_ATIME_30`, `DEFAULT_ATIME_60`, `DEFAULT_ATIME_90`.
     */
    lifecycleRuleName?: pulumi.Input<string>;
    /**
     * The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
     */
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The storage type of the data that is dumped to the IA storage medium. Valid values: `InfrequentAccess`.
     */
    storageType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LifecyclePolicy resource.
 */
export interface LifecyclePolicyArgs {
    /**
     * The ID of the file system.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * The name of the lifecycle management policy.
     */
    lifecyclePolicyName: pulumi.Input<string>;
    /**
     * The rules in the lifecycle management policy. Valid values: `DEFAULT_ATIME_14`, `DEFAULT_ATIME_30`, `DEFAULT_ATIME_60`, `DEFAULT_ATIME_90`.
     */
    lifecycleRuleName: pulumi.Input<string>;
    /**
     * The absolute path of the directory for which the lifecycle management policy is configured. Set a maximum of `10` path. The path value must be prefixed by a forward slash (/) and must be an existing path in the mount target.
     */
    paths: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The storage type of the data that is dumped to the IA storage medium. Valid values: `InfrequentAccess`.
     */
    storageType: pulumi.Input<string>;
}
