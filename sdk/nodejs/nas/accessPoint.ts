// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a NAS Access Point resource.
 *
 * For information about NAS Access Point and how to use it, see [What is Access Point](https://www.alibabacloud.com/help/zh/nas/developer-reference/api-nas-2017-06-26-createaccesspoint).
 *
 * > **NOTE:** Available since v1.224.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const regionId = config.get("regionId") || "cn-hangzhou";
 * const azone = config.get("azone") || "cn-hangzhou-g";
 * const default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultkyVC70 = new alicloud.vpc.Network("defaultkyVC70", {
 *     cidrBlock: "172.16.0.0/12",
 *     description: "接入点测试noRootDirectory",
 * });
 * const defaultoZAPmO = new alicloud.vpc.Switch("defaultoZAPmO", {
 *     vpcId: defaultkyVC70.id,
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 *     cidrBlock: "172.16.0.0/24",
 * });
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultBbc7ev = new alicloud.nas.AccessGroup("defaultBbc7ev", {
 *     accessGroupType: "Vpc",
 *     accessGroupName: `${name}-${defaultInteger.result}`,
 *     fileSystemType: "standard",
 * });
 * const defaultVtUpDh = new alicloud.nas.FileSystem("defaultVtUpDh", {
 *     storageType: "Performance",
 *     zoneId: azone,
 *     encryptType: 0,
 *     protocolType: "NFS",
 *     fileSystemType: "standard",
 *     description: "AccessPointnoRootDirectory",
 * });
 * const defaultAccessPoint = new alicloud.nas.AccessPoint("default", {
 *     vpcId: defaultkyVC70.id,
 *     accessGroup: defaultBbc7ev.accessGroupName,
 *     vswitchId: defaultoZAPmO.id,
 *     fileSystemId: defaultVtUpDh.id,
 *     accessPointName: name,
 *     posixUser: {
 *         posixGroupId: 123,
 *         posixUserId: 123,
 *     },
 *     rootPathPermission: {
 *         ownerGroupId: 1,
 *         ownerUserId: 1,
 *         permission: "0777",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * NAS Access Point can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:nas/accessPoint:AccessPoint example <file_system_id>:<access_point_id>
 * ```
 */
export class AccessPoint extends pulumi.CustomResource {
    /**
     * Get an existing AccessPoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessPointState, opts?: pulumi.CustomResourceOptions): AccessPoint {
        return new AccessPoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:nas/accessPoint:AccessPoint';

    /**
     * Returns true if the given object is an instance of AccessPoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessPoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessPoint.__pulumiType;
    }

    /**
     * The permission group name.
     */
    public readonly accessGroup!: pulumi.Output<string>;
    /**
     * Access point ID.
     */
    public /*out*/ readonly accessPointId!: pulumi.Output<string>;
    /**
     * The Access Point Name.
     */
    public readonly accessPointName!: pulumi.Output<string | undefined>;
    /**
     * Creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Whether to enable the RAM policy.
     */
    public readonly enabledRam!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the file system.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * The Posix user. See `posixUser` below.
     */
    public readonly posixUser!: pulumi.Output<outputs.nas.AccessPointPosixUser>;
    /**
     * The root directory.
     */
    public readonly rootPath!: pulumi.Output<string>;
    /**
     * Root permissions. See `rootPathPermission` below.
     */
    public readonly rootPathPermission!: pulumi.Output<outputs.nas.AccessPointRootPathPermission>;
    /**
     * Current access point state.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The ID of the VPC.
     */
    public readonly vpcId!: pulumi.Output<string>;
    /**
     * The vSwitch ID.
     */
    public readonly vswitchId!: pulumi.Output<string>;

    /**
     * Create a AccessPoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessPointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessPointArgs | AccessPointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessPointState | undefined;
            resourceInputs["accessGroup"] = state ? state.accessGroup : undefined;
            resourceInputs["accessPointId"] = state ? state.accessPointId : undefined;
            resourceInputs["accessPointName"] = state ? state.accessPointName : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["enabledRam"] = state ? state.enabledRam : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["posixUser"] = state ? state.posixUser : undefined;
            resourceInputs["rootPath"] = state ? state.rootPath : undefined;
            resourceInputs["rootPathPermission"] = state ? state.rootPathPermission : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as AccessPointArgs | undefined;
            if ((!args || args.accessGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessGroup'");
            }
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["accessGroup"] = args ? args.accessGroup : undefined;
            resourceInputs["accessPointName"] = args ? args.accessPointName : undefined;
            resourceInputs["enabledRam"] = args ? args.enabledRam : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["posixUser"] = args ? args.posixUser : undefined;
            resourceInputs["rootPath"] = args ? args.rootPath : undefined;
            resourceInputs["rootPathPermission"] = args ? args.rootPathPermission : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["accessPointId"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessPoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessPoint resources.
 */
export interface AccessPointState {
    /**
     * The permission group name.
     */
    accessGroup?: pulumi.Input<string>;
    /**
     * Access point ID.
     */
    accessPointId?: pulumi.Input<string>;
    /**
     * The Access Point Name.
     */
    accessPointName?: pulumi.Input<string>;
    /**
     * Creation time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Whether to enable the RAM policy.
     */
    enabledRam?: pulumi.Input<boolean>;
    /**
     * The ID of the file system.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * The Posix user. See `posixUser` below.
     */
    posixUser?: pulumi.Input<inputs.nas.AccessPointPosixUser>;
    /**
     * The root directory.
     */
    rootPath?: pulumi.Input<string>;
    /**
     * Root permissions. See `rootPathPermission` below.
     */
    rootPathPermission?: pulumi.Input<inputs.nas.AccessPointRootPathPermission>;
    /**
     * Current access point state.
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of the VPC.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The vSwitch ID.
     */
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessPoint resource.
 */
export interface AccessPointArgs {
    /**
     * The permission group name.
     */
    accessGroup: pulumi.Input<string>;
    /**
     * The Access Point Name.
     */
    accessPointName?: pulumi.Input<string>;
    /**
     * Whether to enable the RAM policy.
     */
    enabledRam?: pulumi.Input<boolean>;
    /**
     * The ID of the file system.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * The Posix user. See `posixUser` below.
     */
    posixUser?: pulumi.Input<inputs.nas.AccessPointPosixUser>;
    /**
     * The root directory.
     */
    rootPath?: pulumi.Input<string>;
    /**
     * Root permissions. See `rootPathPermission` below.
     */
    rootPathPermission?: pulumi.Input<inputs.nas.AccessPointRootPathPermission>;
    /**
     * The ID of the VPC.
     */
    vpcId: pulumi.Input<string>;
    /**
     * The vSwitch ID.
     */
    vswitchId: pulumi.Input<string>;
}
