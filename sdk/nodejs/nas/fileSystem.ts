// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a File Storage (NAS) File System resource.
 *
 * For information about File Storage (NAS) File System and how to use it, see [What is File System](https://www.alibabacloud.com/help/en/nas/developer-reference/api-nas-2017-06-26-createfilesystem).
 *
 * > **NOTE:** Available since v1.33.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.nas.getZones({
 *     fileSystemType: "standard",
 * });
 * const defaultFileSystem = new alicloud.nas.FileSystem("default", {
 *     protocolType: "NFS",
 *     storageType: "Capacity",
 *     description: name,
 *     encryptType: 1,
 *     fileSystemType: "standard",
 *     recycleBin: {
 *         status: "Enable",
 *         reservedDays: 10,
 *     },
 *     nfsAcl: {
 *         enabled: true,
 *     },
 *     zoneId: _default.then(_default => _default.zones?.[0]?.zoneId),
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.nas.getZones({
 *     fileSystemType: "extreme",
 * });
 * const defaultFileSystem = new alicloud.nas.FileSystem("default", {
 *     protocolType: "NFS",
 *     storageType: "standard",
 *     capacity: 100,
 *     description: name,
 *     encryptType: 1,
 *     fileSystemType: "extreme",
 *     zoneId: _default.then(_default => _default.zones?.[0]?.zoneId),
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.nas.getZones({
 *     fileSystemType: "cpfs",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "172.17.3.0/24",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     cidrBlock: "172.17.3.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: _default.then(_default => _default.zones?.[1]?.zoneId),
 * });
 * const defaultFileSystem = new alicloud.nas.FileSystem("default", {
 *     protocolType: "cpfs",
 *     storageType: "advance_100",
 *     capacity: 5000,
 *     description: name,
 *     fileSystemType: "cpfs",
 *     vswitchId: defaultSwitch.id,
 *     vpcId: defaultNetwork.id,
 *     zoneId: _default.then(_default => _default.zones?.[1]?.zoneId),
 * });
 * ```
 *
 * ## Import
 *
 * File Storage (NAS) File System can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:nas/fileSystem:FileSystem example <id>
 * ```
 */
export class FileSystem extends pulumi.CustomResource {
    /**
     * Get an existing FileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileSystemState, opts?: pulumi.CustomResourceOptions): FileSystem {
        return new FileSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:nas/fileSystem:FileSystem';

    /**
     * Returns true if the given object is an instance of FileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileSystem.__pulumiType;
    }

    /**
     * The capacity of the file system. Unit: GiB. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `capacity` must be set.
     */
    public readonly capacity!: pulumi.Output<number>;
    /**
     * (Available since v1.236.0) The time when the file system was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The description of the file system.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
     */
    public readonly encryptType!: pulumi.Output<number | undefined>;
    /**
     * The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
     */
    public readonly fileSystemType!: pulumi.Output<string>;
    /**
     * The ID of the KMS-managed key. **Note:** If `encryptType` is set to `2`, `kmsKeyId` must be set.
     */
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * The NFS ACL feature of the file system. See `nfsAcl` below.
     * > **NOTE:** `nfsAcl` takes effect only if `fileSystemType` is set to `standard`.
     */
    public readonly nfsAcl!: pulumi.Output<outputs.nas.FileSystemNfsAcl>;
    /**
     * The protocol type of the file system. Valid values:
     * - If `fileSystemType` is set to `standard`. Valid values: `NFS`, `SMB`.
     * - If `fileSystemType` is set to `extreme`. Valid values: `NFS`.
     * - If `fileSystemType` is set to `cpfs`. Valid values: `cpfs`.
     */
    public readonly protocolType!: pulumi.Output<string>;
    /**
     * The recycle bin feature of the file system. See `recycleBin` below.
     * > **NOTE:** `recycleBin` takes effect only if `fileSystemType` is set to `standard`.
     */
    public readonly recycleBin!: pulumi.Output<outputs.nas.FileSystemRecycleBin>;
    /**
     * The ID of the resource group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The ID of the snapshot. **NOTE:** `snapshotId` takes effect only if `fileSystemType` is set to `extreme`.
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    /**
     * (Available since v1.236.0) The status of the File System.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The storage type of the file system. Valid values:
     * - If `fileSystemType` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
     * - If `fileSystemType` is set to `extreme`. Valid values: `standard`, `advance`.
     * - If `fileSystemType` is set to `cpfs`. Valid values: `advance100`, `advance200`.
     * > **NOTE:** From version 1.140.0, `storageType` can be set to `standard`, `advance`. From version 1.153.0, `storageType` can be set to `advance100`, `advance200`. From version 1.236.0, `storageType` can be set to `Premium`.
     */
    public readonly storageType!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the VPC. **NOTE:** `vpcId` takes effect only if `fileSystemType` is set to `cpfs`.
     */
    public readonly vpcId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the vSwitch. **NOTE:** `vswitchId` takes effect only if `fileSystemType` is set to `cpfs`.
     */
    public readonly vswitchId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the zone. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `zoneId` must be set.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a FileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileSystemArgs | FileSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileSystemState | undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptType"] = state ? state.encryptType : undefined;
            resourceInputs["fileSystemType"] = state ? state.fileSystemType : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["nfsAcl"] = state ? state.nfsAcl : undefined;
            resourceInputs["protocolType"] = state ? state.protocolType : undefined;
            resourceInputs["recycleBin"] = state ? state.recycleBin : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as FileSystemArgs | undefined;
            if ((!args || args.protocolType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolType'");
            }
            if ((!args || args.storageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptType"] = args ? args.encryptType : undefined;
            resourceInputs["fileSystemType"] = args ? args.fileSystemType : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["nfsAcl"] = args ? args.nfsAcl : undefined;
            resourceInputs["protocolType"] = args ? args.protocolType : undefined;
            resourceInputs["recycleBin"] = args ? args.recycleBin : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileSystem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FileSystem resources.
 */
export interface FileSystemState {
    /**
     * The capacity of the file system. Unit: GiB. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `capacity` must be set.
     */
    capacity?: pulumi.Input<number>;
    /**
     * (Available since v1.236.0) The time when the file system was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The description of the file system.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
     */
    encryptType?: pulumi.Input<number>;
    /**
     * The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
     */
    fileSystemType?: pulumi.Input<string>;
    /**
     * The ID of the KMS-managed key. **Note:** If `encryptType` is set to `2`, `kmsKeyId` must be set.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The NFS ACL feature of the file system. See `nfsAcl` below.
     * > **NOTE:** `nfsAcl` takes effect only if `fileSystemType` is set to `standard`.
     */
    nfsAcl?: pulumi.Input<inputs.nas.FileSystemNfsAcl>;
    /**
     * The protocol type of the file system. Valid values:
     * - If `fileSystemType` is set to `standard`. Valid values: `NFS`, `SMB`.
     * - If `fileSystemType` is set to `extreme`. Valid values: `NFS`.
     * - If `fileSystemType` is set to `cpfs`. Valid values: `cpfs`.
     */
    protocolType?: pulumi.Input<string>;
    /**
     * The recycle bin feature of the file system. See `recycleBin` below.
     * > **NOTE:** `recycleBin` takes effect only if `fileSystemType` is set to `standard`.
     */
    recycleBin?: pulumi.Input<inputs.nas.FileSystemRecycleBin>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The ID of the snapshot. **NOTE:** `snapshotId` takes effect only if `fileSystemType` is set to `extreme`.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * (Available since v1.236.0) The status of the File System.
     */
    status?: pulumi.Input<string>;
    /**
     * The storage type of the file system. Valid values:
     * - If `fileSystemType` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
     * - If `fileSystemType` is set to `extreme`. Valid values: `standard`, `advance`.
     * - If `fileSystemType` is set to `cpfs`. Valid values: `advance100`, `advance200`.
     * > **NOTE:** From version 1.140.0, `storageType` can be set to `standard`, `advance`. From version 1.153.0, `storageType` can be set to `advance100`, `advance200`. From version 1.236.0, `storageType` can be set to `Premium`.
     */
    storageType?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the VPC. **NOTE:** `vpcId` takes effect only if `fileSystemType` is set to `cpfs`.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The ID of the vSwitch. **NOTE:** `vswitchId` takes effect only if `fileSystemType` is set to `cpfs`.
     */
    vswitchId?: pulumi.Input<string>;
    /**
     * The ID of the zone. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `zoneId` must be set.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FileSystem resource.
 */
export interface FileSystemArgs {
    /**
     * The capacity of the file system. Unit: GiB. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `capacity` must be set.
     */
    capacity?: pulumi.Input<number>;
    /**
     * The description of the file system.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
     */
    encryptType?: pulumi.Input<number>;
    /**
     * The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
     */
    fileSystemType?: pulumi.Input<string>;
    /**
     * The ID of the KMS-managed key. **Note:** If `encryptType` is set to `2`, `kmsKeyId` must be set.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The NFS ACL feature of the file system. See `nfsAcl` below.
     * > **NOTE:** `nfsAcl` takes effect only if `fileSystemType` is set to `standard`.
     */
    nfsAcl?: pulumi.Input<inputs.nas.FileSystemNfsAcl>;
    /**
     * The protocol type of the file system. Valid values:
     * - If `fileSystemType` is set to `standard`. Valid values: `NFS`, `SMB`.
     * - If `fileSystemType` is set to `extreme`. Valid values: `NFS`.
     * - If `fileSystemType` is set to `cpfs`. Valid values: `cpfs`.
     */
    protocolType: pulumi.Input<string>;
    /**
     * The recycle bin feature of the file system. See `recycleBin` below.
     * > **NOTE:** `recycleBin` takes effect only if `fileSystemType` is set to `standard`.
     */
    recycleBin?: pulumi.Input<inputs.nas.FileSystemRecycleBin>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The ID of the snapshot. **NOTE:** `snapshotId` takes effect only if `fileSystemType` is set to `extreme`.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The storage type of the file system. Valid values:
     * - If `fileSystemType` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
     * - If `fileSystemType` is set to `extreme`. Valid values: `standard`, `advance`.
     * - If `fileSystemType` is set to `cpfs`. Valid values: `advance100`, `advance200`.
     * > **NOTE:** From version 1.140.0, `storageType` can be set to `standard`, `advance`. From version 1.153.0, `storageType` can be set to `advance100`, `advance200`. From version 1.236.0, `storageType` can be set to `Premium`.
     */
    storageType: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the VPC. **NOTE:** `vpcId` takes effect only if `fileSystemType` is set to `cpfs`.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The ID of the vSwitch. **NOTE:** `vswitchId` takes effect only if `fileSystemType` is set to `cpfs`.
     */
    vswitchId?: pulumi.Input<string>;
    /**
     * The ID of the zone. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `zoneId` must be set.
     */
    zoneId?: pulumi.Input<string>;
}
