// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a File Storage (NAS) Data Flow resource.
 *
 * For information about File Storage (NAS) Data Flow and how to use it, see [What is Data Flow](https://www.alibabacloud.com/help/en/doc-detail/27530.html).
 *
 * > **NOTE:** Available since v1.153.0.
 *
 * ## Import
 *
 * File Storage (NAS) Data Flow can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:nas/dataFlow:DataFlow example <file_system_id>:<data_flow_id>
 * ```
 */
export class DataFlow extends pulumi.CustomResource {
    /**
     * Get an existing DataFlow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataFlowState, opts?: pulumi.CustomResourceOptions): DataFlow {
        return new DataFlow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:nas/dataFlow:DataFlow';

    /**
     * Returns true if the given object is an instance of DataFlow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataFlow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataFlow.__pulumiType;
    }

    /**
     * The ID of the Data flow.
     */
    declare public /*out*/ readonly dataFlowId: pulumi.Output<string>;
    /**
     * The Description of the data flow. Restrictions:
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The dry run.
     */
    declare public readonly dryRun: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the file system.
     */
    declare public readonly fileSystemId: pulumi.Output<string>;
    /**
     * The ID of the Fileset.
     */
    declare public readonly fsetId: pulumi.Output<string>;
    /**
     * The security protection type of the source storage. If the source storage must be accessed through security protection, specify the security protection type of the source storage. Value:
     * - `NONE` (default): Indicates that the source storage does not need to be accessed through security protection.
     * - `SSL`: Protects access through SSL certificates.
     */
    declare public readonly sourceSecurityType: pulumi.Output<string>;
    /**
     * The access path of the source store. Format: `<storage type>://<path>`. Among them:
     * - storage type: currently only OSS is supported.
     * - path: the bucket name of OSS.
     * - Only lowercase letters, numbers, and dashes (-) are supported and must start and end with lowercase letters or numbers.
     */
    declare public readonly sourceStorage: pulumi.Output<string>;
    /**
     * The status of the Data flow. Valid values: `Running`, `Stopped`.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * The maximum transmission bandwidth of data flow, unit: `MB/s`. Valid values: `1200`, `1500`, `600`. **NOTE:** The transmission bandwidth of data flow must be less than the IO bandwidth of the file system.
     */
    declare public readonly throughput: pulumi.Output<number>;

    /**
     * Create a DataFlow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataFlowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataFlowArgs | DataFlowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataFlowState | undefined;
            resourceInputs["dataFlowId"] = state?.dataFlowId;
            resourceInputs["description"] = state?.description;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["fileSystemId"] = state?.fileSystemId;
            resourceInputs["fsetId"] = state?.fsetId;
            resourceInputs["sourceSecurityType"] = state?.sourceSecurityType;
            resourceInputs["sourceStorage"] = state?.sourceStorage;
            resourceInputs["status"] = state?.status;
            resourceInputs["throughput"] = state?.throughput;
        } else {
            const args = argsOrState as DataFlowArgs | undefined;
            if (args?.fileSystemId === undefined && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if (args?.fsetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'fsetId'");
            }
            if (args?.sourceStorage === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceStorage'");
            }
            if (args?.throughput === undefined && !opts.urn) {
                throw new Error("Missing required property 'throughput'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["fileSystemId"] = args?.fileSystemId;
            resourceInputs["fsetId"] = args?.fsetId;
            resourceInputs["sourceSecurityType"] = args?.sourceSecurityType;
            resourceInputs["sourceStorage"] = args?.sourceStorage;
            resourceInputs["status"] = args?.status;
            resourceInputs["throughput"] = args?.throughput;
            resourceInputs["dataFlowId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataFlow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataFlow resources.
 */
export interface DataFlowState {
    /**
     * The ID of the Data flow.
     */
    dataFlowId?: pulumi.Input<string>;
    /**
     * The Description of the data flow. Restrictions:
     */
    description?: pulumi.Input<string>;
    /**
     * The dry run.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The ID of the file system.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * The ID of the Fileset.
     */
    fsetId?: pulumi.Input<string>;
    /**
     * The security protection type of the source storage. If the source storage must be accessed through security protection, specify the security protection type of the source storage. Value:
     * - `NONE` (default): Indicates that the source storage does not need to be accessed through security protection.
     * - `SSL`: Protects access through SSL certificates.
     */
    sourceSecurityType?: pulumi.Input<string>;
    /**
     * The access path of the source store. Format: `<storage type>://<path>`. Among them:
     * - storage type: currently only OSS is supported.
     * - path: the bucket name of OSS.
     * - Only lowercase letters, numbers, and dashes (-) are supported and must start and end with lowercase letters or numbers.
     */
    sourceStorage?: pulumi.Input<string>;
    /**
     * The status of the Data flow. Valid values: `Running`, `Stopped`.
     */
    status?: pulumi.Input<string>;
    /**
     * The maximum transmission bandwidth of data flow, unit: `MB/s`. Valid values: `1200`, `1500`, `600`. **NOTE:** The transmission bandwidth of data flow must be less than the IO bandwidth of the file system.
     */
    throughput?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DataFlow resource.
 */
export interface DataFlowArgs {
    /**
     * The Description of the data flow. Restrictions:
     */
    description?: pulumi.Input<string>;
    /**
     * The dry run.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * The ID of the file system.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * The ID of the Fileset.
     */
    fsetId: pulumi.Input<string>;
    /**
     * The security protection type of the source storage. If the source storage must be accessed through security protection, specify the security protection type of the source storage. Value:
     * - `NONE` (default): Indicates that the source storage does not need to be accessed through security protection.
     * - `SSL`: Protects access through SSL certificates.
     */
    sourceSecurityType?: pulumi.Input<string>;
    /**
     * The access path of the source store. Format: `<storage type>://<path>`. Among them:
     * - storage type: currently only OSS is supported.
     * - path: the bucket name of OSS.
     * - Only lowercase letters, numbers, and dashes (-) are supported and must start and end with lowercase letters or numbers.
     */
    sourceStorage: pulumi.Input<string>;
    /**
     * The status of the Data flow. Valid values: `Running`, `Stopped`.
     */
    status?: pulumi.Input<string>;
    /**
     * The maximum transmission bandwidth of data flow, unit: `MB/s`. Valid values: `1200`, `1500`, `600`. **NOTE:** The transmission bandwidth of data flow must be less than the IO bandwidth of the file system.
     */
    throughput: pulumi.Input<number>;
}
