// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Nas Access Rule resource.
 *
 * When NAS is activated, the Default VPC Permission Group is automatically generated. It allows all IP addresses in a VPC to access the mount point with full permissions. Full permissions include Read/Write permission with no restriction on root users.
 *
 * > **NOTE:** Available in v1.34.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const fooAccessGroup = new alicloud.nas.AccessGroup("fooAccessGroup", {
 *     accessGroupName: "tf-NasConfigName",
 *     accessGroupType: "Vpc",
 *     description: "tf-testAccNasConfig",
 * });
 * const fooAccessRule = new alicloud.nas.AccessRule("fooAccessRule", {
 *     accessGroupName: fooAccessGroup.accessGroupName,
 *     sourceCidrIp: "168.1.1.0/16",
 *     rwAccessType: "RDWR",
 *     userAccessType: "no_squash",
 *     priority: 2,
 * });
 * ```
 *
 * ## Import
 *
 * Nas Access Rule can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:nas/accessRule:AccessRule foo tf-testAccNasConfigName:1
 * ```
 */
export class AccessRule extends pulumi.CustomResource {
    /**
     * Get an existing AccessRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessRuleState, opts?: pulumi.CustomResourceOptions): AccessRule {
        return new AccessRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:nas/accessRule:AccessRule';

    /**
     * Returns true if the given object is an instance of AccessRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessRule.__pulumiType;
    }

    /**
     * Permission group name.
     */
    public readonly accessGroupName!: pulumi.Output<string>;
    /**
     * The nas access rule ID.
     */
    public /*out*/ readonly accessRuleId!: pulumi.Output<string>;
    /**
     * Priority level. Range: 1-100. Default value: `1`.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * Read-write permission type: `RDWR` (default), `RDONLY`.
     */
    public readonly rwAccessType!: pulumi.Output<string | undefined>;
    /**
     * Address or address segment.
     */
    public readonly sourceCidrIp!: pulumi.Output<string>;
    /**
     * User permission type: `noSquash` (default), `rootSquash`, `allSquash`.
     */
    public readonly userAccessType!: pulumi.Output<string | undefined>;

    /**
     * Create a AccessRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessRuleArgs | AccessRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessRuleState | undefined;
            resourceInputs["accessGroupName"] = state ? state.accessGroupName : undefined;
            resourceInputs["accessRuleId"] = state ? state.accessRuleId : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["rwAccessType"] = state ? state.rwAccessType : undefined;
            resourceInputs["sourceCidrIp"] = state ? state.sourceCidrIp : undefined;
            resourceInputs["userAccessType"] = state ? state.userAccessType : undefined;
        } else {
            const args = argsOrState as AccessRuleArgs | undefined;
            if ((!args || args.accessGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessGroupName'");
            }
            if ((!args || args.sourceCidrIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceCidrIp'");
            }
            resourceInputs["accessGroupName"] = args ? args.accessGroupName : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["rwAccessType"] = args ? args.rwAccessType : undefined;
            resourceInputs["sourceCidrIp"] = args ? args.sourceCidrIp : undefined;
            resourceInputs["userAccessType"] = args ? args.userAccessType : undefined;
            resourceInputs["accessRuleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessRule resources.
 */
export interface AccessRuleState {
    /**
     * Permission group name.
     */
    accessGroupName?: pulumi.Input<string>;
    /**
     * The nas access rule ID.
     */
    accessRuleId?: pulumi.Input<string>;
    /**
     * Priority level. Range: 1-100. Default value: `1`.
     */
    priority?: pulumi.Input<number>;
    /**
     * Read-write permission type: `RDWR` (default), `RDONLY`.
     */
    rwAccessType?: pulumi.Input<string>;
    /**
     * Address or address segment.
     */
    sourceCidrIp?: pulumi.Input<string>;
    /**
     * User permission type: `noSquash` (default), `rootSquash`, `allSquash`.
     */
    userAccessType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessRule resource.
 */
export interface AccessRuleArgs {
    /**
     * Permission group name.
     */
    accessGroupName: pulumi.Input<string>;
    /**
     * Priority level. Range: 1-100. Default value: `1`.
     */
    priority?: pulumi.Input<number>;
    /**
     * Read-write permission type: `RDWR` (default), `RDONLY`.
     */
    rwAccessType?: pulumi.Input<string>;
    /**
     * Address or address segment.
     */
    sourceCidrIp: pulumi.Input<string>;
    /**
     * User permission type: `noSquash` (default), `rootSquash`, `allSquash`.
     */
    userAccessType?: pulumi.Input<string>;
}
