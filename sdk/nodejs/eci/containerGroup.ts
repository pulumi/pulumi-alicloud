// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides ECI Container Group resource.
 *
 * For information about ECI Container Group and how to use it, see [What is Container Group](https://www.alibabacloud.com/help/en/elastic-container-instance/latest/api-eci-2018-08-08-createcontainergroup).
 *
 * > **NOTE:** Available since v1.111.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = alicloud.eci.getZones({});
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.0.0.0/8",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     cidrBlock: "10.1.0.0/16",
 *     vpcId: defaultNetwork.id,
 *     zoneId: _default.then(_default => _default.zones?.[0]?.zoneIds?.[0]),
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {
 *     name: name,
 *     vpcId: defaultNetwork.id,
 * });
 * const defaultContainerGroup = new alicloud.eci.ContainerGroup("default", {
 *     containerGroupName: name,
 *     cpu: 8,
 *     memory: 16,
 *     restartPolicy: "OnFailure",
 *     securityGroupId: defaultSecurityGroup.id,
 *     vswitchId: defaultSwitch.id,
 *     autoCreateEip: true,
 *     tags: {
 *         Created: "TF",
 *         For: "example",
 *     },
 *     containers: [{
 *         image: "registry.cn-beijing.aliyuncs.com/eci_open/nginx:alpine",
 *         name: "nginx",
 *         workingDir: "/tmp/nginx",
 *         imagePullPolicy: "IfNotPresent",
 *         commands: [
 *             "/bin/sh",
 *             "-c",
 *             "sleep 9999",
 *         ],
 *         volumeMounts: [{
 *             mountPath: "/tmp/example",
 *             readOnly: false,
 *             name: "empty1",
 *         }],
 *         ports: [{
 *             port: 80,
 *             protocol: "TCP",
 *         }],
 *         environmentVars: [{
 *             key: "name",
 *             value: "nginx",
 *         }],
 *         livenessProbes: [{
 *             periodSeconds: 5,
 *             initialDelaySeconds: 5,
 *             successThreshold: 1,
 *             failureThreshold: 3,
 *             timeoutSeconds: 1,
 *             execs: [{
 *                 commands: ["cat /tmp/healthy"],
 *             }],
 *         }],
 *         readinessProbes: [{
 *             periodSeconds: 5,
 *             initialDelaySeconds: 5,
 *             successThreshold: 1,
 *             failureThreshold: 3,
 *             timeoutSeconds: 1,
 *             execs: [{
 *                 commands: ["cat /tmp/healthy"],
 *             }],
 *         }],
 *     }],
 *     initContainers: [{
 *         name: "init-busybox",
 *         image: "registry.cn-beijing.aliyuncs.com/eci_open/busybox:1.30",
 *         imagePullPolicy: "IfNotPresent",
 *         commands: ["echo"],
 *         args: ["hello initcontainer"],
 *     }],
 *     volumes: [
 *         {
 *             name: "empty1",
 *             type: "EmptyDirVolume",
 *         },
 *         {
 *             name: "empty2",
 *             type: "EmptyDirVolume",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ECI Container Group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:eci/containerGroup:ContainerGroup example <container_group_id>
 * ```
 */
export class ContainerGroup extends pulumi.CustomResource {
    /**
     * Get an existing ContainerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerGroupState, opts?: pulumi.CustomResourceOptions): ContainerGroup {
        return new ContainerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eci/containerGroup:ContainerGroup';

    /**
     * Returns true if the given object is an instance of ContainerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerGroup.__pulumiType;
    }

    /**
     * The ACR enterprise edition example properties. See `acrRegistryInfo` below.
     */
    declare public readonly acrRegistryInfos: pulumi.Output<outputs.eci.ContainerGroupAcrRegistryInfo[] | undefined>;
    /**
     * Specifies whether to automatically create an EIP and bind the EIP to the elastic container instance.
     */
    declare public readonly autoCreateEip: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether to automatically match the image cache. Default value: `false`. Valid values: `true` and `false`.
     */
    declare public readonly autoMatchImageCache: pulumi.Output<boolean>;
    /**
     * The name of the container group.
     */
    declare public readonly containerGroupName: pulumi.Output<string>;
    /**
     * The list of containers. See `containers` below.
     */
    declare public readonly containers: pulumi.Output<outputs.eci.ContainerGroupContainer[]>;
    /**
     * The amount of CPU resources allocated to the container group.
     */
    declare public readonly cpu: pulumi.Output<number>;
    /**
     * The structure of dnsConfig. See `dnsConfig` below.
     */
    declare public readonly dnsConfig: pulumi.Output<outputs.eci.ContainerGroupDnsConfig | undefined>;
    /**
     * The policy of DNS. Default value: `Default`. Valid values: `Default` and `None`.
     */
    declare public readonly dnsPolicy: pulumi.Output<string>;
    /**
     * The bandwidth of the EIP. Default value: `5`.
     */
    declare public readonly eipBandwidth: pulumi.Output<number | undefined>;
    /**
     * The ID of the elastic IP address (EIP).
     */
    declare public readonly eipInstanceId: pulumi.Output<string | undefined>;
    /**
     * HostAliases. See `hostAliases` below.
     */
    declare public readonly hostAliases: pulumi.Output<outputs.eci.ContainerGroupHostAlias[] | undefined>;
    /**
     * The image registry credential. See `imageRegistryCredential` below.
     */
    declare public readonly imageRegistryCredentials: pulumi.Output<outputs.eci.ContainerGroupImageRegistryCredential[] | undefined>;
    /**
     * The list of initContainers. See `initContainers` below.
     */
    declare public readonly initContainers: pulumi.Output<outputs.eci.ContainerGroupInitContainer[] | undefined>;
    /**
     * The address of the self-built mirror warehouse. When creating an image cache using an image in a self-built image repository with a self-signed certificate, you need to configure this parameter to skip certificate authentication to avoid image pull failure due to certificate authentication failure.
     */
    declare public readonly insecureRegistry: pulumi.Output<string | undefined>;
    /**
     * The type of the ECS instance.
     */
    declare public readonly instanceType: pulumi.Output<string>;
    /**
     * (Available since v1.170.0) The Public IP of the container group.
     */
    declare public /*out*/ readonly internetIp: pulumi.Output<string>;
    /**
     * (Available since v1.170.0) The Private IP of the container group.
     */
    declare public /*out*/ readonly intranetIp: pulumi.Output<string>;
    /**
     * The amount of memory resources allocated to the container group.
     */
    declare public readonly memory: pulumi.Output<number>;
    /**
     * The address of the self-built mirror warehouse. When creating an image cache from an image in a self-built image repository using the HTTP protocol, you need to configure this parameter so that the ECI uses the HTTP protocol to pull the image to avoid image pull failure due to different protocols.
     */
    declare public readonly plainHttpRegistry: pulumi.Output<string | undefined>;
    /**
     * The RAM role that the container group assumes. ECI and ECS share the same RAM role.
     */
    declare public readonly ramRoleName: pulumi.Output<string | undefined>;
    /**
     * The ID of the resource group. **NOTE:** From version 1.208.0, `resourceGroupId` can be modified.
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * The restart policy of the container group. Valid values: `Always`, `Never`, `OnFailure`.
     */
    declare public readonly restartPolicy: pulumi.Output<string>;
    /**
     * The security context of the container group. See `securityContext` below.
     */
    declare public readonly securityContext: pulumi.Output<outputs.eci.ContainerGroupSecurityContext | undefined>;
    /**
     * The ID of the security group to which the container group belongs. Container groups within the same security group can access each other.
     */
    declare public readonly securityGroupId: pulumi.Output<string>;
    /**
     * The maximum hourly price of the ECI spot instance.
     */
    declare public readonly spotPriceLimit: pulumi.Output<number>;
    /**
     * Filter the results by ECI spot type. Valid values: `NoSpot`, `SpotWithPriceLimit` and `SpotAsPriceGo`. Default to `NoSpot`.
     */
    declare public readonly spotStrategy: pulumi.Output<string>;
    /**
     * The status of container group.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     * - Key: It can be up to 64 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It cannot be a null string.
     * - Value: It can be up to 128 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It can be a null string.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The buffer time during which the program handles operations before the program stops. Unit: seconds.
     */
    declare public readonly terminationGracePeriodSeconds: pulumi.Output<number | undefined>;
    /**
     * The list of volumes. See `volumes` below.
     */
    declare public readonly volumes: pulumi.Output<outputs.eci.ContainerGroupVolume[] | undefined>;
    /**
     * The ID of the VSwitch. Currently, container groups can only be deployed in VPC networks. The number of IP addresses in the VSwitch CIDR block determines the maximum number of container groups that can be created in the VSwitch. Before you can create an ECI instance, plan the CIDR block of the VSwitch.
     * **NOTE:** From version 1.208.0, You can specify up to 10 `vswitchId`. Separate multiple vSwitch IDs with commas (,), such as vsw-***,vsw-***.  attribute `vswitchId` updating diff will be ignored when you set multiple vSwitchIds, there is only one valid `vswitchId` exists in the set vSwitchIds.
     */
    declare public readonly vswitchId: pulumi.Output<string>;
    /**
     * The ID of the zone where you want to deploy the container group. If no value is specified, the system assigns a zone to the container group. By default, no value is specified.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a ContainerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerGroupArgs | ContainerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerGroupState | undefined;
            resourceInputs["acrRegistryInfos"] = state?.acrRegistryInfos;
            resourceInputs["autoCreateEip"] = state?.autoCreateEip;
            resourceInputs["autoMatchImageCache"] = state?.autoMatchImageCache;
            resourceInputs["containerGroupName"] = state?.containerGroupName;
            resourceInputs["containers"] = state?.containers;
            resourceInputs["cpu"] = state?.cpu;
            resourceInputs["dnsConfig"] = state?.dnsConfig;
            resourceInputs["dnsPolicy"] = state?.dnsPolicy;
            resourceInputs["eipBandwidth"] = state?.eipBandwidth;
            resourceInputs["eipInstanceId"] = state?.eipInstanceId;
            resourceInputs["hostAliases"] = state?.hostAliases;
            resourceInputs["imageRegistryCredentials"] = state?.imageRegistryCredentials;
            resourceInputs["initContainers"] = state?.initContainers;
            resourceInputs["insecureRegistry"] = state?.insecureRegistry;
            resourceInputs["instanceType"] = state?.instanceType;
            resourceInputs["internetIp"] = state?.internetIp;
            resourceInputs["intranetIp"] = state?.intranetIp;
            resourceInputs["memory"] = state?.memory;
            resourceInputs["plainHttpRegistry"] = state?.plainHttpRegistry;
            resourceInputs["ramRoleName"] = state?.ramRoleName;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["restartPolicy"] = state?.restartPolicy;
            resourceInputs["securityContext"] = state?.securityContext;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["spotPriceLimit"] = state?.spotPriceLimit;
            resourceInputs["spotStrategy"] = state?.spotStrategy;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["terminationGracePeriodSeconds"] = state?.terminationGracePeriodSeconds;
            resourceInputs["volumes"] = state?.volumes;
            resourceInputs["vswitchId"] = state?.vswitchId;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as ContainerGroupArgs | undefined;
            if (args?.containerGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'containerGroupName'");
            }
            if (args?.containers === undefined && !opts.urn) {
                throw new Error("Missing required property 'containers'");
            }
            if (args?.securityGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if (args?.vswitchId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["acrRegistryInfos"] = args?.acrRegistryInfos;
            resourceInputs["autoCreateEip"] = args?.autoCreateEip;
            resourceInputs["autoMatchImageCache"] = args?.autoMatchImageCache;
            resourceInputs["containerGroupName"] = args?.containerGroupName;
            resourceInputs["containers"] = args?.containers;
            resourceInputs["cpu"] = args?.cpu;
            resourceInputs["dnsConfig"] = args?.dnsConfig;
            resourceInputs["dnsPolicy"] = args?.dnsPolicy;
            resourceInputs["eipBandwidth"] = args?.eipBandwidth;
            resourceInputs["eipInstanceId"] = args?.eipInstanceId;
            resourceInputs["hostAliases"] = args?.hostAliases;
            resourceInputs["imageRegistryCredentials"] = args?.imageRegistryCredentials;
            resourceInputs["initContainers"] = args?.initContainers;
            resourceInputs["insecureRegistry"] = args?.insecureRegistry;
            resourceInputs["instanceType"] = args?.instanceType;
            resourceInputs["memory"] = args?.memory;
            resourceInputs["plainHttpRegistry"] = args?.plainHttpRegistry;
            resourceInputs["ramRoleName"] = args?.ramRoleName;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["restartPolicy"] = args?.restartPolicy;
            resourceInputs["securityContext"] = args?.securityContext;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["spotPriceLimit"] = args?.spotPriceLimit;
            resourceInputs["spotStrategy"] = args?.spotStrategy;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["terminationGracePeriodSeconds"] = args?.terminationGracePeriodSeconds;
            resourceInputs["volumes"] = args?.volumes;
            resourceInputs["vswitchId"] = args?.vswitchId;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["internetIp"] = undefined /*out*/;
            resourceInputs["intranetIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContainerGroup resources.
 */
export interface ContainerGroupState {
    /**
     * The ACR enterprise edition example properties. See `acrRegistryInfo` below.
     */
    acrRegistryInfos?: pulumi.Input<pulumi.Input<inputs.eci.ContainerGroupAcrRegistryInfo>[]>;
    /**
     * Specifies whether to automatically create an EIP and bind the EIP to the elastic container instance.
     */
    autoCreateEip?: pulumi.Input<boolean>;
    /**
     * Specifies whether to automatically match the image cache. Default value: `false`. Valid values: `true` and `false`.
     */
    autoMatchImageCache?: pulumi.Input<boolean>;
    /**
     * The name of the container group.
     */
    containerGroupName?: pulumi.Input<string>;
    /**
     * The list of containers. See `containers` below.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.eci.ContainerGroupContainer>[]>;
    /**
     * The amount of CPU resources allocated to the container group.
     */
    cpu?: pulumi.Input<number>;
    /**
     * The structure of dnsConfig. See `dnsConfig` below.
     */
    dnsConfig?: pulumi.Input<inputs.eci.ContainerGroupDnsConfig>;
    /**
     * The policy of DNS. Default value: `Default`. Valid values: `Default` and `None`.
     */
    dnsPolicy?: pulumi.Input<string>;
    /**
     * The bandwidth of the EIP. Default value: `5`.
     */
    eipBandwidth?: pulumi.Input<number>;
    /**
     * The ID of the elastic IP address (EIP).
     */
    eipInstanceId?: pulumi.Input<string>;
    /**
     * HostAliases. See `hostAliases` below.
     */
    hostAliases?: pulumi.Input<pulumi.Input<inputs.eci.ContainerGroupHostAlias>[]>;
    /**
     * The image registry credential. See `imageRegistryCredential` below.
     */
    imageRegistryCredentials?: pulumi.Input<pulumi.Input<inputs.eci.ContainerGroupImageRegistryCredential>[]>;
    /**
     * The list of initContainers. See `initContainers` below.
     */
    initContainers?: pulumi.Input<pulumi.Input<inputs.eci.ContainerGroupInitContainer>[]>;
    /**
     * The address of the self-built mirror warehouse. When creating an image cache using an image in a self-built image repository with a self-signed certificate, you need to configure this parameter to skip certificate authentication to avoid image pull failure due to certificate authentication failure.
     */
    insecureRegistry?: pulumi.Input<string>;
    /**
     * The type of the ECS instance.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * (Available since v1.170.0) The Public IP of the container group.
     */
    internetIp?: pulumi.Input<string>;
    /**
     * (Available since v1.170.0) The Private IP of the container group.
     */
    intranetIp?: pulumi.Input<string>;
    /**
     * The amount of memory resources allocated to the container group.
     */
    memory?: pulumi.Input<number>;
    /**
     * The address of the self-built mirror warehouse. When creating an image cache from an image in a self-built image repository using the HTTP protocol, you need to configure this parameter so that the ECI uses the HTTP protocol to pull the image to avoid image pull failure due to different protocols.
     */
    plainHttpRegistry?: pulumi.Input<string>;
    /**
     * The RAM role that the container group assumes. ECI and ECS share the same RAM role.
     */
    ramRoleName?: pulumi.Input<string>;
    /**
     * The ID of the resource group. **NOTE:** From version 1.208.0, `resourceGroupId` can be modified.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The restart policy of the container group. Valid values: `Always`, `Never`, `OnFailure`.
     */
    restartPolicy?: pulumi.Input<string>;
    /**
     * The security context of the container group. See `securityContext` below.
     */
    securityContext?: pulumi.Input<inputs.eci.ContainerGroupSecurityContext>;
    /**
     * The ID of the security group to which the container group belongs. Container groups within the same security group can access each other.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * The maximum hourly price of the ECI spot instance.
     */
    spotPriceLimit?: pulumi.Input<number>;
    /**
     * Filter the results by ECI spot type. Valid values: `NoSpot`, `SpotWithPriceLimit` and `SpotAsPriceGo`. Default to `NoSpot`.
     */
    spotStrategy?: pulumi.Input<string>;
    /**
     * The status of container group.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     * - Key: It can be up to 64 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It cannot be a null string.
     * - Value: It can be up to 128 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It can be a null string.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The buffer time during which the program handles operations before the program stops. Unit: seconds.
     */
    terminationGracePeriodSeconds?: pulumi.Input<number>;
    /**
     * The list of volumes. See `volumes` below.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.eci.ContainerGroupVolume>[]>;
    /**
     * The ID of the VSwitch. Currently, container groups can only be deployed in VPC networks. The number of IP addresses in the VSwitch CIDR block determines the maximum number of container groups that can be created in the VSwitch. Before you can create an ECI instance, plan the CIDR block of the VSwitch.
     * **NOTE:** From version 1.208.0, You can specify up to 10 `vswitchId`. Separate multiple vSwitch IDs with commas (,), such as vsw-***,vsw-***.  attribute `vswitchId` updating diff will be ignored when you set multiple vSwitchIds, there is only one valid `vswitchId` exists in the set vSwitchIds.
     */
    vswitchId?: pulumi.Input<string>;
    /**
     * The ID of the zone where you want to deploy the container group. If no value is specified, the system assigns a zone to the container group. By default, no value is specified.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerGroup resource.
 */
export interface ContainerGroupArgs {
    /**
     * The ACR enterprise edition example properties. See `acrRegistryInfo` below.
     */
    acrRegistryInfos?: pulumi.Input<pulumi.Input<inputs.eci.ContainerGroupAcrRegistryInfo>[]>;
    /**
     * Specifies whether to automatically create an EIP and bind the EIP to the elastic container instance.
     */
    autoCreateEip?: pulumi.Input<boolean>;
    /**
     * Specifies whether to automatically match the image cache. Default value: `false`. Valid values: `true` and `false`.
     */
    autoMatchImageCache?: pulumi.Input<boolean>;
    /**
     * The name of the container group.
     */
    containerGroupName: pulumi.Input<string>;
    /**
     * The list of containers. See `containers` below.
     */
    containers: pulumi.Input<pulumi.Input<inputs.eci.ContainerGroupContainer>[]>;
    /**
     * The amount of CPU resources allocated to the container group.
     */
    cpu?: pulumi.Input<number>;
    /**
     * The structure of dnsConfig. See `dnsConfig` below.
     */
    dnsConfig?: pulumi.Input<inputs.eci.ContainerGroupDnsConfig>;
    /**
     * The policy of DNS. Default value: `Default`. Valid values: `Default` and `None`.
     */
    dnsPolicy?: pulumi.Input<string>;
    /**
     * The bandwidth of the EIP. Default value: `5`.
     */
    eipBandwidth?: pulumi.Input<number>;
    /**
     * The ID of the elastic IP address (EIP).
     */
    eipInstanceId?: pulumi.Input<string>;
    /**
     * HostAliases. See `hostAliases` below.
     */
    hostAliases?: pulumi.Input<pulumi.Input<inputs.eci.ContainerGroupHostAlias>[]>;
    /**
     * The image registry credential. See `imageRegistryCredential` below.
     */
    imageRegistryCredentials?: pulumi.Input<pulumi.Input<inputs.eci.ContainerGroupImageRegistryCredential>[]>;
    /**
     * The list of initContainers. See `initContainers` below.
     */
    initContainers?: pulumi.Input<pulumi.Input<inputs.eci.ContainerGroupInitContainer>[]>;
    /**
     * The address of the self-built mirror warehouse. When creating an image cache using an image in a self-built image repository with a self-signed certificate, you need to configure this parameter to skip certificate authentication to avoid image pull failure due to certificate authentication failure.
     */
    insecureRegistry?: pulumi.Input<string>;
    /**
     * The type of the ECS instance.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * The amount of memory resources allocated to the container group.
     */
    memory?: pulumi.Input<number>;
    /**
     * The address of the self-built mirror warehouse. When creating an image cache from an image in a self-built image repository using the HTTP protocol, you need to configure this parameter so that the ECI uses the HTTP protocol to pull the image to avoid image pull failure due to different protocols.
     */
    plainHttpRegistry?: pulumi.Input<string>;
    /**
     * The RAM role that the container group assumes. ECI and ECS share the same RAM role.
     */
    ramRoleName?: pulumi.Input<string>;
    /**
     * The ID of the resource group. **NOTE:** From version 1.208.0, `resourceGroupId` can be modified.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The restart policy of the container group. Valid values: `Always`, `Never`, `OnFailure`.
     */
    restartPolicy?: pulumi.Input<string>;
    /**
     * The security context of the container group. See `securityContext` below.
     */
    securityContext?: pulumi.Input<inputs.eci.ContainerGroupSecurityContext>;
    /**
     * The ID of the security group to which the container group belongs. Container groups within the same security group can access each other.
     */
    securityGroupId: pulumi.Input<string>;
    /**
     * The maximum hourly price of the ECI spot instance.
     */
    spotPriceLimit?: pulumi.Input<number>;
    /**
     * Filter the results by ECI spot type. Valid values: `NoSpot`, `SpotWithPriceLimit` and `SpotAsPriceGo`. Default to `NoSpot`.
     */
    spotStrategy?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     * - Key: It can be up to 64 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It cannot be a null string.
     * - Value: It can be up to 128 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It can be a null string.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The buffer time during which the program handles operations before the program stops. Unit: seconds.
     */
    terminationGracePeriodSeconds?: pulumi.Input<number>;
    /**
     * The list of volumes. See `volumes` below.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.eci.ContainerGroupVolume>[]>;
    /**
     * The ID of the VSwitch. Currently, container groups can only be deployed in VPC networks. The number of IP addresses in the VSwitch CIDR block determines the maximum number of container groups that can be created in the VSwitch. Before you can create an ECI instance, plan the CIDR block of the VSwitch.
     * **NOTE:** From version 1.208.0, You can specify up to 10 `vswitchId`. Separate multiple vSwitch IDs with commas (,), such as vsw-***,vsw-***.  attribute `vswitchId` updating diff will be ignored when you set multiple vSwitchIds, there is only one valid `vswitchId` exists in the set vSwitchIds.
     */
    vswitchId: pulumi.Input<string>;
    /**
     * The ID of the zone where you want to deploy the container group. If no value is specified, the system assigns a zone to the container group. By default, no value is specified.
     */
    zoneId?: pulumi.Input<string>;
}
