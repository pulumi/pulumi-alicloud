// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a ECI Virtual Node resource.
 *
 * For information about ECI Virtual Node and how to use it, see [What is Virtual Node](https://www.alibabacloud.com/help/en/doc-detail/89129.html).
 *
 * > **NOTE:** Available in v1.145.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-testaccvirtualnode";
 * const defaultZones = alicloud.eci.getZones({});
 * const defaultNetworks = alicloud.vpc.getNetworks({
 *     nameRegex: "default-NODELETING",
 * });
 * const defaultSwitches = Promise.all([defaultNetworks, defaultZones]).then(([defaultNetworks, defaultZones]) => alicloud.vpc.getSwitches({
 *     vpcId: defaultNetworks.ids?[0],
 *     zoneId: defaultZones.zones?[0]?.zoneIds?[1],
 * }));
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("defaultSecurityGroup", {vpcId: defaultNetworks.then(defaultNetworks => defaultNetworks.ids?[0])});
 * const defaultEipAddress = new alicloud.ecs.EipAddress("defaultEipAddress", {addressName: name});
 * const defaultResourceGroups = alicloud.resourcemanager.getResourceGroups({});
 * const defaultVirtualNode = new alicloud.eci.VirtualNode("defaultVirtualNode", {
 *     securityGroupId: defaultSecurityGroup.id,
 *     virtualNodeName: name,
 *     vswitchId: defaultSwitches.then(defaultSwitches => defaultSwitches.ids?[1]),
 *     enablePublicNetwork: false,
 *     eipInstanceId: defaultEipAddress.id,
 *     resourceGroupId: defaultResourceGroups.then(defaultResourceGroups => defaultResourceGroups.groups?[0]?.id),
 *     kubeConfig: "kube config",
 *     tags: {
 *         Created: "TF",
 *     },
 *     taints: [{
 *         effect: "NoSchedule",
 *         key: "Tf1",
 *         value: "Test1",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ECI Virtual Node can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:eci/virtualNode:VirtualNode example <id>
 * ```
 */
export class VirtualNode extends pulumi.CustomResource {
    /**
     * Get an existing VirtualNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualNodeState, opts?: pulumi.CustomResourceOptions): VirtualNode {
        return new VirtualNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eci/virtualNode:VirtualNode';

    /**
     * Returns true if the given object is an instance of VirtualNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualNode.__pulumiType;
    }

    /**
     * The Id of eip.
     */
    public readonly eipInstanceId!: pulumi.Output<string>;
    /**
     * Whether to enable public network. **NOTE:** If `eipInstanceId` is not configured and `enablePublicNetwork` is true, the system will create an elastic public network IP.
     */
    public readonly enablePublicNetwork!: pulumi.Output<boolean | undefined>;
    /**
     * The kube config for the k8s cluster. It needs to be connected after Base64 encoding.
     */
    public readonly kubeConfig!: pulumi.Output<string>;
    /**
     * The resource group ID.
     */
    public readonly resourceGroupId!: pulumi.Output<string | undefined>;
    /**
     * The security group ID.
     */
    public readonly securityGroupId!: pulumi.Output<string>;
    /**
     * The Status of the virtual node. Valid values: `Cleaned`, `Failed`, `Pending`, `Ready`.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The taint. See the following `Block taints`.
     */
    public readonly taints!: pulumi.Output<outputs.eci.VirtualNodeTaint[] | undefined>;
    /**
     * The name of the virtual node. The length of the name is limited to `2` to `128` characters. It can contain uppercase and lowercase letters, Chinese characters, numbers, half-width colon (:), underscores (_), or hyphens (-), and must start with letters.
     */
    public readonly virtualNodeName!: pulumi.Output<string | undefined>;
    /**
     * The vswitch id.
     */
    public readonly vswitchId!: pulumi.Output<string>;
    /**
     * The Zone.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a VirtualNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualNodeArgs | VirtualNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualNodeState | undefined;
            resourceInputs["eipInstanceId"] = state ? state.eipInstanceId : undefined;
            resourceInputs["enablePublicNetwork"] = state ? state.enablePublicNetwork : undefined;
            resourceInputs["kubeConfig"] = state ? state.kubeConfig : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["virtualNodeName"] = state ? state.virtualNodeName : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as VirtualNodeArgs | undefined;
            if ((!args || args.kubeConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubeConfig'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["eipInstanceId"] = args ? args.eipInstanceId : undefined;
            resourceInputs["enablePublicNetwork"] = args ? args.enablePublicNetwork : undefined;
            resourceInputs["kubeConfig"] = args ? args.kubeConfig : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["virtualNodeName"] = args ? args.virtualNodeName : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualNode.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualNode resources.
 */
export interface VirtualNodeState {
    /**
     * The Id of eip.
     */
    eipInstanceId?: pulumi.Input<string>;
    /**
     * Whether to enable public network. **NOTE:** If `eipInstanceId` is not configured and `enablePublicNetwork` is true, the system will create an elastic public network IP.
     */
    enablePublicNetwork?: pulumi.Input<boolean>;
    /**
     * The kube config for the k8s cluster. It needs to be connected after Base64 encoding.
     */
    kubeConfig?: pulumi.Input<string>;
    /**
     * The resource group ID.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The security group ID.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * The Status of the virtual node. Valid values: `Cleaned`, `Failed`, `Pending`, `Ready`.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The taint. See the following `Block taints`.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.eci.VirtualNodeTaint>[]>;
    /**
     * The name of the virtual node. The length of the name is limited to `2` to `128` characters. It can contain uppercase and lowercase letters, Chinese characters, numbers, half-width colon (:), underscores (_), or hyphens (-), and must start with letters.
     */
    virtualNodeName?: pulumi.Input<string>;
    /**
     * The vswitch id.
     */
    vswitchId?: pulumi.Input<string>;
    /**
     * The Zone.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualNode resource.
 */
export interface VirtualNodeArgs {
    /**
     * The Id of eip.
     */
    eipInstanceId?: pulumi.Input<string>;
    /**
     * Whether to enable public network. **NOTE:** If `eipInstanceId` is not configured and `enablePublicNetwork` is true, the system will create an elastic public network IP.
     */
    enablePublicNetwork?: pulumi.Input<boolean>;
    /**
     * The kube config for the k8s cluster. It needs to be connected after Base64 encoding.
     */
    kubeConfig: pulumi.Input<string>;
    /**
     * The resource group ID.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The security group ID.
     */
    securityGroupId: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The taint. See the following `Block taints`.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.eci.VirtualNodeTaint>[]>;
    /**
     * The name of the virtual node. The length of the name is limited to `2` to `128` characters. It can contain uppercase and lowercase letters, Chinese characters, numbers, half-width colon (:), underscores (_), or hyphens (-), and must start with letters.
     */
    virtualNodeName?: pulumi.Input<string>;
    /**
     * The vswitch id.
     */
    vswitchId: pulumi.Input<string>;
    /**
     * The Zone.
     */
    zoneId?: pulumi.Input<string>;
}
