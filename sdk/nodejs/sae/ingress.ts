// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a Serverless App Engine (SAE) Ingress resource.
 *
 * For information about Serverless App Engine (SAE) Ingress and how to use it, see [What is Ingress](https://help.aliyun.com/document_detail/97792.html).
 *
 * > **NOTE:** Available in v1.137.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "example_value";
 * const defaultZones = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("defaultNetwork", {cidrBlock: "172.16.0.0/12"});
 * const defaultSwitch = new alicloud.vpc.Switch("defaultSwitch", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: "172.16.0.0/21",
 *     zoneId: defaultZones.then(defaultZones => defaultZones.zones?[0]?.id),
 *     vswitchName: name,
 * });
 * const defaultLoadBalancer = new alicloud.slb.LoadBalancer("defaultLoadBalancer", {
 *     specification: "slb.s2.small",
 *     vswitchId: data.alicloud_vswitches["default"].ids[0],
 * });
 * const namespaceId = config.get("namespaceId") || "cn-hangzhou:yourname";
 * const defaultNamespace = new alicloud.sae.Namespace("defaultNamespace", {
 *     namespaceId: namespaceId,
 *     namespaceName: name,
 *     namespaceDescription: name,
 * });
 * const defaultApplication = new alicloud.sae.Application("defaultApplication", {
 *     appDescription: "your_app_description",
 *     appName: "your_app_name",
 *     namespaceId: "your_namespace_id",
 *     packageUrl: "your_package_url",
 *     packageType: "your_package_url",
 *     jdk: "jdk_specifications",
 *     vswitchId: data.alicloud_vswitches["default"].ids[0],
 *     replicas: "your_replicas",
 *     cpu: "cpu_specifications",
 *     memory: "memory_specifications",
 * });
 * const defaultIngress = new alicloud.sae.Ingress("defaultIngress", {
 *     slbId: defaultLoadBalancer.id,
 *     namespaceId: defaultNamespace.id,
 *     listenerPort: "your_listener_port",
 *     rules: [{
 *         appId: defaultApplication.id,
 *         containerPort: "your_container_port",
 *         domain: "your_domain",
 *         appName: "your_name",
 *         path: "your_path",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Serverless App Engine (SAE) Ingress can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:sae/ingress:Ingress example <id>
 * ```
 */
export class Ingress extends pulumi.CustomResource {
    /**
     * Get an existing Ingress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IngressState, opts?: pulumi.CustomResourceOptions): Ingress {
        return new Ingress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:sae/ingress:Ingress';

    /**
     * Returns true if the given object is an instance of Ingress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ingress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ingress.__pulumiType;
    }

    /**
     * Cert Id.
     */
    public readonly certId!: pulumi.Output<string | undefined>;
    /**
     * Default Rule.
     */
    public readonly defaultRule!: pulumi.Output<outputs.sae.IngressDefaultRule | undefined>;
    /**
     * Description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * SLB listening port.
     */
    public readonly listenerPort!: pulumi.Output<number>;
    /**
     * The Id of Namespace.It can contain 2 to 32 lowercase characters.The value is in format `{RegionId}:{namespace}`
     */
    public readonly namespaceId!: pulumi.Output<string>;
    /**
     * Forwarding rules. Forward traffic to the specified application according to the domain name and path.
     */
    public readonly rules!: pulumi.Output<outputs.sae.IngressRule[]>;
    /**
     * SLB ID.
     */
    public readonly slbId!: pulumi.Output<string>;

    /**
     * Create a Ingress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IngressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IngressArgs | IngressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IngressState | undefined;
            resourceInputs["certId"] = state ? state.certId : undefined;
            resourceInputs["defaultRule"] = state ? state.defaultRule : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["listenerPort"] = state ? state.listenerPort : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["slbId"] = state ? state.slbId : undefined;
        } else {
            const args = argsOrState as IngressArgs | undefined;
            if ((!args || args.listenerPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerPort'");
            }
            if ((!args || args.namespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceId'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.slbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slbId'");
            }
            resourceInputs["certId"] = args ? args.certId : undefined;
            resourceInputs["defaultRule"] = args ? args.defaultRule : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["listenerPort"] = args ? args.listenerPort : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["slbId"] = args ? args.slbId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ingress.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ingress resources.
 */
export interface IngressState {
    /**
     * Cert Id.
     */
    certId?: pulumi.Input<string>;
    /**
     * Default Rule.
     */
    defaultRule?: pulumi.Input<inputs.sae.IngressDefaultRule>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * SLB listening port.
     */
    listenerPort?: pulumi.Input<number>;
    /**
     * The Id of Namespace.It can contain 2 to 32 lowercase characters.The value is in format `{RegionId}:{namespace}`
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * Forwarding rules. Forward traffic to the specified application according to the domain name and path.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.sae.IngressRule>[]>;
    /**
     * SLB ID.
     */
    slbId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ingress resource.
 */
export interface IngressArgs {
    /**
     * Cert Id.
     */
    certId?: pulumi.Input<string>;
    /**
     * Default Rule.
     */
    defaultRule?: pulumi.Input<inputs.sae.IngressDefaultRule>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * SLB listening port.
     */
    listenerPort: pulumi.Input<number>;
    /**
     * The Id of Namespace.It can contain 2 to 32 lowercase characters.The value is in format `{RegionId}:{namespace}`
     */
    namespaceId: pulumi.Input<string>;
    /**
     * Forwarding rules. Forward traffic to the specified application according to the domain name and path.
     */
    rules: pulumi.Input<pulumi.Input<inputs.sae.IngressRule>[]>;
    /**
     * SLB ID.
     */
    slbId: pulumi.Input<string>;
}
