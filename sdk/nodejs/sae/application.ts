// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a Serverless App Engine (SAE) Application resource.
 *
 * For information about Serverless App Engine (SAE) Application and how to use it, see [What is Application](https://help.aliyun.com/document_detail/97792.html).
 *
 * > **NOTE:** Available in v1.133.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-testacc";
 * const defaultZones = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const vpc = new alicloud.vpc.Network("vpc", {
 *     vpcName: "tf_testacc",
 *     cidrBlock: "172.16.0.0/12",
 * });
 * const vsw = new alicloud.vpc.Switch("vsw", {
 *     vpcId: vpc.id,
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: defaultZones.then(defaultZones => defaultZones.zones?[0]?.id),
 *     vswitchName: name,
 * });
 * const defaultNamespace = new alicloud.sae.Namespace("defaultNamespace", {
 *     namespaceDescription: name,
 *     namespaceId: "cn-hangzhou:tfacctest",
 *     namespaceName: name,
 * });
 * const defaultApplication = new alicloud.sae.Application("defaultApplication", {
 *     appDescription: "tf-testaccDescription",
 *     appName: "tf-testaccAppName",
 *     namespaceId: defaultNamespace.id,
 *     imageUrl: "registry-vpc.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5",
 *     packageType: "Image",
 *     vswitchId: vsw.id,
 *     timezone: "Asia/Beijing",
 *     replicas: 5,
 *     cpu: 500,
 *     memory: 2048,
 * });
 * ```
 *
 * ## Import
 *
 * Serverless App Engine (SAE) Application can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:sae/application:Application example <id>
 * ```
 */
export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:sae/application:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    /**
     * Application description information. No more than 1024 characters.
     */
    public readonly appDescription!: pulumi.Output<string | undefined>;
    /**
     * Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
     */
    public readonly appName!: pulumi.Output<string>;
    /**
     * The auto config. Valid values: `false`, `true`.
     */
    public readonly autoConfig!: pulumi.Output<boolean | undefined>;
    /**
     * The auto enable application scaling rule. Valid values: `false`, `true`.
     */
    public readonly autoEnableApplicationScalingRule!: pulumi.Output<boolean>;
    /**
     * The batch wait time.
     */
    public readonly batchWaitTime!: pulumi.Output<number>;
    /**
     * The change order desc.
     */
    public readonly changeOrderDesc!: pulumi.Output<string>;
    /**
     * Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
     */
    public readonly command!: pulumi.Output<string | undefined>;
    /**
     * Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
     */
    public readonly commandArgs!: pulumi.Output<string | undefined>;
    /**
     * ConfigMap mount description.
     */
    public readonly configMapMountDesc!: pulumi.Output<string>;
    /**
     * The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
     */
    public readonly cpu!: pulumi.Output<number | undefined>;
    /**
     * Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
     */
    public readonly customHostAlias!: pulumi.Output<string>;
    /**
     * The deploy. Valid values: `false`, `true`.
     */
    public readonly deploy!: pulumi.Output<boolean | undefined>;
    /**
     * The operating environment used by the Pandora application.
     */
    public readonly edasContainerVersion!: pulumi.Output<string | undefined>;
    /**
     * The enable ahas.
     */
    public readonly enableAhas!: pulumi.Output<string>;
    /**
     * The enable grey tag route.
     */
    public readonly enableGreyTagRoute!: pulumi.Output<boolean>;
    /**
     * The virtual switch where the elastic network card of the application instance is located. The switch must be located in the aforementioned VPC. The switch also has a binding relationship with the SAE namespace. If it is left blank, the default is the vSwitch ID bound to the namespace.
     */
    public readonly envs!: pulumi.Output<string>;
    /**
     * Mirror address. Only Image type applications can configure the mirror address.
     */
    public readonly imageUrl!: pulumi.Output<string | undefined>;
    /**
     * Use designated public network SLBs that have been purchased to support non-shared instances. **NOTE:** Available in v1.139+.
     */
    public /*out*/ readonly internetIp!: pulumi.Output<string>;
    /**
     * public network SLB ID.
     */
    public readonly internetSlbId!: pulumi.Output<string | undefined>;
    /**
     * Bound private network SLB. The details see Block internet.
     */
    public readonly internets!: pulumi.Output<outputs.sae.ApplicationInternet[] | undefined>;
    /**
     * Use the designated private network SLB that has been purchased to support non-shared instances. **NOTE:** Available in v1.139+.
     */
    public /*out*/ readonly intranetIp!: pulumi.Output<string>;
    /**
     * private network SLB ID.
     */
    public readonly intranetSlbId!: pulumi.Output<string | undefined>;
    /**
     * Bound public network SLB. The details see Block intranet.
     */
    public readonly intranets!: pulumi.Output<outputs.sae.ApplicationIntranet[] | undefined>;
    /**
     * The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
     */
    public readonly jarStartArgs!: pulumi.Output<string | undefined>;
    /**
     * The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
     */
    public readonly jarStartOptions!: pulumi.Output<string | undefined>;
    /**
     * The JDK version that the deployment package depends on. Image type applications are not supported.
     */
    public readonly jdk!: pulumi.Output<string | undefined>;
    /**
     * Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
     */
    public readonly liveness!: pulumi.Output<string | undefined>;
    /**
     * The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
     */
    public readonly memory!: pulumi.Output<number | undefined>;
    /**
     * The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
     */
    public readonly minReadyInstances!: pulumi.Output<number>;
    /**
     * Mount description.
     */
    public readonly mountDesc!: pulumi.Output<string | undefined>;
    /**
     * Mount point of NAS in application VPC.
     */
    public readonly mountHost!: pulumi.Output<string | undefined>;
    /**
     * SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
     */
    public readonly namespaceId!: pulumi.Output<string | undefined>;
    /**
     * ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
     */
    public readonly nasId!: pulumi.Output<string | undefined>;
    /**
     * OSS AccessKey ID.
     */
    public readonly ossAkId!: pulumi.Output<string | undefined>;
    /**
     * OSS  AccessKey Secret.
     */
    public readonly ossAkSecret!: pulumi.Output<string | undefined>;
    /**
     * OSS mount description information.
     */
    public readonly ossMountDescs!: pulumi.Output<string | undefined>;
    /**
     * Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
     */
    public readonly packageType!: pulumi.Output<string>;
    /**
     * Deployment package address. Only FatJar or War type applications can configure the deployment package address.
     */
    public readonly packageUrl!: pulumi.Output<string | undefined>;
    /**
     * The version number of the deployment package. Required when the Package Type is War and FatJar.
     */
    public readonly packageVersion!: pulumi.Output<string>;
    /**
     * The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
     */
    public readonly phpArmsConfigLocation!: pulumi.Output<string | undefined>;
    /**
     * PHP configuration file content.
     */
    public readonly phpConfig!: pulumi.Output<string | undefined>;
    /**
     * PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
     */
    public readonly phpConfigLocation!: pulumi.Output<string | undefined>;
    /**
     * Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
     */
    public readonly postStart!: pulumi.Output<string | undefined>;
    /**
     * Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
     */
    public readonly preStop!: pulumi.Output<string | undefined>;
    /**
     * Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
     */
    public readonly readiness!: pulumi.Output<string | undefined>;
    /**
     * Initial number of instances. **NOTE:** the `replicas` supports modification since V1.139.0.
     */
    public readonly replicas!: pulumi.Output<number>;
    /**
     * Security group ID.
     */
    public readonly securityGroupId!: pulumi.Output<string | undefined>;
    /**
     * SLS  configuration.
     */
    public readonly slsConfigs!: pulumi.Output<string | undefined>;
    /**
     * The status of the resource. Valid values: `RUNNING`, `STOPPED`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
     */
    public readonly terminationGracePeriodSeconds!: pulumi.Output<number>;
    /**
     * Time zone, the default value is Asia/Shanghai.
     */
    public readonly timezone!: pulumi.Output<string>;
    /**
     * Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
     */
    public readonly tomcatConfig!: pulumi.Output<string | undefined>;
    /**
     * The update strategy.
     */
    public readonly updateStrategy!: pulumi.Output<string>;
    /**
     * Application version id.
     */
    public readonly versionId!: pulumi.Output<string | undefined>;
    /**
     * The vpc id.
     */
    public readonly vpcId!: pulumi.Output<string | undefined>;
    /**
     * The vswitch id.
     */
    public readonly vswitchId!: pulumi.Output<string | undefined>;
    /**
     * WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
     */
    public readonly warStartOptions!: pulumi.Output<string | undefined>;
    /**
     * The version of tomcat that the deployment package depends on. Image type applications are not supported.
     */
    public readonly webContainer!: pulumi.Output<string | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationArgs | ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationState | undefined;
            resourceInputs["appDescription"] = state ? state.appDescription : undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["autoConfig"] = state ? state.autoConfig : undefined;
            resourceInputs["autoEnableApplicationScalingRule"] = state ? state.autoEnableApplicationScalingRule : undefined;
            resourceInputs["batchWaitTime"] = state ? state.batchWaitTime : undefined;
            resourceInputs["changeOrderDesc"] = state ? state.changeOrderDesc : undefined;
            resourceInputs["command"] = state ? state.command : undefined;
            resourceInputs["commandArgs"] = state ? state.commandArgs : undefined;
            resourceInputs["configMapMountDesc"] = state ? state.configMapMountDesc : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["customHostAlias"] = state ? state.customHostAlias : undefined;
            resourceInputs["deploy"] = state ? state.deploy : undefined;
            resourceInputs["edasContainerVersion"] = state ? state.edasContainerVersion : undefined;
            resourceInputs["enableAhas"] = state ? state.enableAhas : undefined;
            resourceInputs["enableGreyTagRoute"] = state ? state.enableGreyTagRoute : undefined;
            resourceInputs["envs"] = state ? state.envs : undefined;
            resourceInputs["imageUrl"] = state ? state.imageUrl : undefined;
            resourceInputs["internetIp"] = state ? state.internetIp : undefined;
            resourceInputs["internetSlbId"] = state ? state.internetSlbId : undefined;
            resourceInputs["internets"] = state ? state.internets : undefined;
            resourceInputs["intranetIp"] = state ? state.intranetIp : undefined;
            resourceInputs["intranetSlbId"] = state ? state.intranetSlbId : undefined;
            resourceInputs["intranets"] = state ? state.intranets : undefined;
            resourceInputs["jarStartArgs"] = state ? state.jarStartArgs : undefined;
            resourceInputs["jarStartOptions"] = state ? state.jarStartOptions : undefined;
            resourceInputs["jdk"] = state ? state.jdk : undefined;
            resourceInputs["liveness"] = state ? state.liveness : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["minReadyInstances"] = state ? state.minReadyInstances : undefined;
            resourceInputs["mountDesc"] = state ? state.mountDesc : undefined;
            resourceInputs["mountHost"] = state ? state.mountHost : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["nasId"] = state ? state.nasId : undefined;
            resourceInputs["ossAkId"] = state ? state.ossAkId : undefined;
            resourceInputs["ossAkSecret"] = state ? state.ossAkSecret : undefined;
            resourceInputs["ossMountDescs"] = state ? state.ossMountDescs : undefined;
            resourceInputs["packageType"] = state ? state.packageType : undefined;
            resourceInputs["packageUrl"] = state ? state.packageUrl : undefined;
            resourceInputs["packageVersion"] = state ? state.packageVersion : undefined;
            resourceInputs["phpArmsConfigLocation"] = state ? state.phpArmsConfigLocation : undefined;
            resourceInputs["phpConfig"] = state ? state.phpConfig : undefined;
            resourceInputs["phpConfigLocation"] = state ? state.phpConfigLocation : undefined;
            resourceInputs["postStart"] = state ? state.postStart : undefined;
            resourceInputs["preStop"] = state ? state.preStop : undefined;
            resourceInputs["readiness"] = state ? state.readiness : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["slsConfigs"] = state ? state.slsConfigs : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["terminationGracePeriodSeconds"] = state ? state.terminationGracePeriodSeconds : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["tomcatConfig"] = state ? state.tomcatConfig : undefined;
            resourceInputs["updateStrategy"] = state ? state.updateStrategy : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["warStartOptions"] = state ? state.warStartOptions : undefined;
            resourceInputs["webContainer"] = state ? state.webContainer : undefined;
        } else {
            const args = argsOrState as ApplicationArgs | undefined;
            if ((!args || args.appName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appName'");
            }
            if ((!args || args.packageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageType'");
            }
            if ((!args || args.replicas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicas'");
            }
            resourceInputs["appDescription"] = args ? args.appDescription : undefined;
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["autoConfig"] = args ? args.autoConfig : undefined;
            resourceInputs["autoEnableApplicationScalingRule"] = args ? args.autoEnableApplicationScalingRule : undefined;
            resourceInputs["batchWaitTime"] = args ? args.batchWaitTime : undefined;
            resourceInputs["changeOrderDesc"] = args ? args.changeOrderDesc : undefined;
            resourceInputs["command"] = args ? args.command : undefined;
            resourceInputs["commandArgs"] = args ? args.commandArgs : undefined;
            resourceInputs["configMapMountDesc"] = args ? args.configMapMountDesc : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["customHostAlias"] = args ? args.customHostAlias : undefined;
            resourceInputs["deploy"] = args ? args.deploy : undefined;
            resourceInputs["edasContainerVersion"] = args ? args.edasContainerVersion : undefined;
            resourceInputs["enableAhas"] = args ? args.enableAhas : undefined;
            resourceInputs["enableGreyTagRoute"] = args ? args.enableGreyTagRoute : undefined;
            resourceInputs["envs"] = args ? args.envs : undefined;
            resourceInputs["imageUrl"] = args ? args.imageUrl : undefined;
            resourceInputs["internetSlbId"] = args ? args.internetSlbId : undefined;
            resourceInputs["internets"] = args ? args.internets : undefined;
            resourceInputs["intranetSlbId"] = args ? args.intranetSlbId : undefined;
            resourceInputs["intranets"] = args ? args.intranets : undefined;
            resourceInputs["jarStartArgs"] = args ? args.jarStartArgs : undefined;
            resourceInputs["jarStartOptions"] = args ? args.jarStartOptions : undefined;
            resourceInputs["jdk"] = args ? args.jdk : undefined;
            resourceInputs["liveness"] = args ? args.liveness : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["minReadyInstances"] = args ? args.minReadyInstances : undefined;
            resourceInputs["mountDesc"] = args ? args.mountDesc : undefined;
            resourceInputs["mountHost"] = args ? args.mountHost : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["nasId"] = args ? args.nasId : undefined;
            resourceInputs["ossAkId"] = args ? args.ossAkId : undefined;
            resourceInputs["ossAkSecret"] = args ? args.ossAkSecret : undefined;
            resourceInputs["ossMountDescs"] = args ? args.ossMountDescs : undefined;
            resourceInputs["packageType"] = args ? args.packageType : undefined;
            resourceInputs["packageUrl"] = args ? args.packageUrl : undefined;
            resourceInputs["packageVersion"] = args ? args.packageVersion : undefined;
            resourceInputs["phpArmsConfigLocation"] = args ? args.phpArmsConfigLocation : undefined;
            resourceInputs["phpConfig"] = args ? args.phpConfig : undefined;
            resourceInputs["phpConfigLocation"] = args ? args.phpConfigLocation : undefined;
            resourceInputs["postStart"] = args ? args.postStart : undefined;
            resourceInputs["preStop"] = args ? args.preStop : undefined;
            resourceInputs["readiness"] = args ? args.readiness : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["slsConfigs"] = args ? args.slsConfigs : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["terminationGracePeriodSeconds"] = args ? args.terminationGracePeriodSeconds : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["tomcatConfig"] = args ? args.tomcatConfig : undefined;
            resourceInputs["updateStrategy"] = args ? args.updateStrategy : undefined;
            resourceInputs["versionId"] = args ? args.versionId : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["warStartOptions"] = args ? args.warStartOptions : undefined;
            resourceInputs["webContainer"] = args ? args.webContainer : undefined;
            resourceInputs["internetIp"] = undefined /*out*/;
            resourceInputs["intranetIp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    /**
     * Application description information. No more than 1024 characters.
     */
    appDescription?: pulumi.Input<string>;
    /**
     * Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
     */
    appName?: pulumi.Input<string>;
    /**
     * The auto config. Valid values: `false`, `true`.
     */
    autoConfig?: pulumi.Input<boolean>;
    /**
     * The auto enable application scaling rule. Valid values: `false`, `true`.
     */
    autoEnableApplicationScalingRule?: pulumi.Input<boolean>;
    /**
     * The batch wait time.
     */
    batchWaitTime?: pulumi.Input<number>;
    /**
     * The change order desc.
     */
    changeOrderDesc?: pulumi.Input<string>;
    /**
     * Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
     */
    command?: pulumi.Input<string>;
    /**
     * Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
     */
    commandArgs?: pulumi.Input<string>;
    /**
     * ConfigMap mount description.
     */
    configMapMountDesc?: pulumi.Input<string>;
    /**
     * The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
     */
    cpu?: pulumi.Input<number>;
    /**
     * Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
     */
    customHostAlias?: pulumi.Input<string>;
    /**
     * The deploy. Valid values: `false`, `true`.
     */
    deploy?: pulumi.Input<boolean>;
    /**
     * The operating environment used by the Pandora application.
     */
    edasContainerVersion?: pulumi.Input<string>;
    /**
     * The enable ahas.
     */
    enableAhas?: pulumi.Input<string>;
    /**
     * The enable grey tag route.
     */
    enableGreyTagRoute?: pulumi.Input<boolean>;
    /**
     * The virtual switch where the elastic network card of the application instance is located. The switch must be located in the aforementioned VPC. The switch also has a binding relationship with the SAE namespace. If it is left blank, the default is the vSwitch ID bound to the namespace.
     */
    envs?: pulumi.Input<string>;
    /**
     * Mirror address. Only Image type applications can configure the mirror address.
     */
    imageUrl?: pulumi.Input<string>;
    /**
     * Use designated public network SLBs that have been purchased to support non-shared instances. **NOTE:** Available in v1.139+.
     */
    internetIp?: pulumi.Input<string>;
    /**
     * public network SLB ID.
     */
    internetSlbId?: pulumi.Input<string>;
    /**
     * Bound private network SLB. The details see Block internet.
     */
    internets?: pulumi.Input<pulumi.Input<inputs.sae.ApplicationInternet>[]>;
    /**
     * Use the designated private network SLB that has been purchased to support non-shared instances. **NOTE:** Available in v1.139+.
     */
    intranetIp?: pulumi.Input<string>;
    /**
     * private network SLB ID.
     */
    intranetSlbId?: pulumi.Input<string>;
    /**
     * Bound public network SLB. The details see Block intranet.
     */
    intranets?: pulumi.Input<pulumi.Input<inputs.sae.ApplicationIntranet>[]>;
    /**
     * The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
     */
    jarStartArgs?: pulumi.Input<string>;
    /**
     * The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
     */
    jarStartOptions?: pulumi.Input<string>;
    /**
     * The JDK version that the deployment package depends on. Image type applications are not supported.
     */
    jdk?: pulumi.Input<string>;
    /**
     * Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
     */
    liveness?: pulumi.Input<string>;
    /**
     * The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
     */
    memory?: pulumi.Input<number>;
    /**
     * The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
     */
    minReadyInstances?: pulumi.Input<number>;
    /**
     * Mount description.
     */
    mountDesc?: pulumi.Input<string>;
    /**
     * Mount point of NAS in application VPC.
     */
    mountHost?: pulumi.Input<string>;
    /**
     * SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
     */
    nasId?: pulumi.Input<string>;
    /**
     * OSS AccessKey ID.
     */
    ossAkId?: pulumi.Input<string>;
    /**
     * OSS  AccessKey Secret.
     */
    ossAkSecret?: pulumi.Input<string>;
    /**
     * OSS mount description information.
     */
    ossMountDescs?: pulumi.Input<string>;
    /**
     * Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
     */
    packageType?: pulumi.Input<string>;
    /**
     * Deployment package address. Only FatJar or War type applications can configure the deployment package address.
     */
    packageUrl?: pulumi.Input<string>;
    /**
     * The version number of the deployment package. Required when the Package Type is War and FatJar.
     */
    packageVersion?: pulumi.Input<string>;
    /**
     * The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
     */
    phpArmsConfigLocation?: pulumi.Input<string>;
    /**
     * PHP configuration file content.
     */
    phpConfig?: pulumi.Input<string>;
    /**
     * PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
     */
    phpConfigLocation?: pulumi.Input<string>;
    /**
     * Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
     */
    postStart?: pulumi.Input<string>;
    /**
     * Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
     */
    preStop?: pulumi.Input<string>;
    /**
     * Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
     */
    readiness?: pulumi.Input<string>;
    /**
     * Initial number of instances. **NOTE:** the `replicas` supports modification since V1.139.0.
     */
    replicas?: pulumi.Input<number>;
    /**
     * Security group ID.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * SLS  configuration.
     */
    slsConfigs?: pulumi.Input<string>;
    /**
     * The status of the resource. Valid values: `RUNNING`, `STOPPED`.
     */
    status?: pulumi.Input<string>;
    /**
     * Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
     */
    terminationGracePeriodSeconds?: pulumi.Input<number>;
    /**
     * Time zone, the default value is Asia/Shanghai.
     */
    timezone?: pulumi.Input<string>;
    /**
     * Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
     */
    tomcatConfig?: pulumi.Input<string>;
    /**
     * The update strategy.
     */
    updateStrategy?: pulumi.Input<string>;
    /**
     * Application version id.
     */
    versionId?: pulumi.Input<string>;
    /**
     * The vpc id.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The vswitch id.
     */
    vswitchId?: pulumi.Input<string>;
    /**
     * WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
     */
    warStartOptions?: pulumi.Input<string>;
    /**
     * The version of tomcat that the deployment package depends on. Image type applications are not supported.
     */
    webContainer?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * Application description information. No more than 1024 characters.
     */
    appDescription?: pulumi.Input<string>;
    /**
     * Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
     */
    appName: pulumi.Input<string>;
    /**
     * The auto config. Valid values: `false`, `true`.
     */
    autoConfig?: pulumi.Input<boolean>;
    /**
     * The auto enable application scaling rule. Valid values: `false`, `true`.
     */
    autoEnableApplicationScalingRule?: pulumi.Input<boolean>;
    /**
     * The batch wait time.
     */
    batchWaitTime?: pulumi.Input<number>;
    /**
     * The change order desc.
     */
    changeOrderDesc?: pulumi.Input<string>;
    /**
     * Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
     */
    command?: pulumi.Input<string>;
    /**
     * Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
     */
    commandArgs?: pulumi.Input<string>;
    /**
     * ConfigMap mount description.
     */
    configMapMountDesc?: pulumi.Input<string>;
    /**
     * The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
     */
    cpu?: pulumi.Input<number>;
    /**
     * Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
     */
    customHostAlias?: pulumi.Input<string>;
    /**
     * The deploy. Valid values: `false`, `true`.
     */
    deploy?: pulumi.Input<boolean>;
    /**
     * The operating environment used by the Pandora application.
     */
    edasContainerVersion?: pulumi.Input<string>;
    /**
     * The enable ahas.
     */
    enableAhas?: pulumi.Input<string>;
    /**
     * The enable grey tag route.
     */
    enableGreyTagRoute?: pulumi.Input<boolean>;
    /**
     * The virtual switch where the elastic network card of the application instance is located. The switch must be located in the aforementioned VPC. The switch also has a binding relationship with the SAE namespace. If it is left blank, the default is the vSwitch ID bound to the namespace.
     */
    envs?: pulumi.Input<string>;
    /**
     * Mirror address. Only Image type applications can configure the mirror address.
     */
    imageUrl?: pulumi.Input<string>;
    /**
     * public network SLB ID.
     */
    internetSlbId?: pulumi.Input<string>;
    /**
     * Bound private network SLB. The details see Block internet.
     */
    internets?: pulumi.Input<pulumi.Input<inputs.sae.ApplicationInternet>[]>;
    /**
     * private network SLB ID.
     */
    intranetSlbId?: pulumi.Input<string>;
    /**
     * Bound public network SLB. The details see Block intranet.
     */
    intranets?: pulumi.Input<pulumi.Input<inputs.sae.ApplicationIntranet>[]>;
    /**
     * The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
     */
    jarStartArgs?: pulumi.Input<string>;
    /**
     * The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
     */
    jarStartOptions?: pulumi.Input<string>;
    /**
     * The JDK version that the deployment package depends on. Image type applications are not supported.
     */
    jdk?: pulumi.Input<string>;
    /**
     * Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
     */
    liveness?: pulumi.Input<string>;
    /**
     * The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
     */
    memory?: pulumi.Input<number>;
    /**
     * The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
     */
    minReadyInstances?: pulumi.Input<number>;
    /**
     * Mount description.
     */
    mountDesc?: pulumi.Input<string>;
    /**
     * Mount point of NAS in application VPC.
     */
    mountHost?: pulumi.Input<string>;
    /**
     * SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
     */
    nasId?: pulumi.Input<string>;
    /**
     * OSS AccessKey ID.
     */
    ossAkId?: pulumi.Input<string>;
    /**
     * OSS  AccessKey Secret.
     */
    ossAkSecret?: pulumi.Input<string>;
    /**
     * OSS mount description information.
     */
    ossMountDescs?: pulumi.Input<string>;
    /**
     * Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
     */
    packageType: pulumi.Input<string>;
    /**
     * Deployment package address. Only FatJar or War type applications can configure the deployment package address.
     */
    packageUrl?: pulumi.Input<string>;
    /**
     * The version number of the deployment package. Required when the Package Type is War and FatJar.
     */
    packageVersion?: pulumi.Input<string>;
    /**
     * The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
     */
    phpArmsConfigLocation?: pulumi.Input<string>;
    /**
     * PHP configuration file content.
     */
    phpConfig?: pulumi.Input<string>;
    /**
     * PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
     */
    phpConfigLocation?: pulumi.Input<string>;
    /**
     * Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
     */
    postStart?: pulumi.Input<string>;
    /**
     * Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
     */
    preStop?: pulumi.Input<string>;
    /**
     * Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
     */
    readiness?: pulumi.Input<string>;
    /**
     * Initial number of instances. **NOTE:** the `replicas` supports modification since V1.139.0.
     */
    replicas: pulumi.Input<number>;
    /**
     * Security group ID.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * SLS  configuration.
     */
    slsConfigs?: pulumi.Input<string>;
    /**
     * The status of the resource. Valid values: `RUNNING`, `STOPPED`.
     */
    status?: pulumi.Input<string>;
    /**
     * Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
     */
    terminationGracePeriodSeconds?: pulumi.Input<number>;
    /**
     * Time zone, the default value is Asia/Shanghai.
     */
    timezone?: pulumi.Input<string>;
    /**
     * Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
     */
    tomcatConfig?: pulumi.Input<string>;
    /**
     * The update strategy.
     */
    updateStrategy?: pulumi.Input<string>;
    /**
     * Application version id.
     */
    versionId?: pulumi.Input<string>;
    /**
     * The vpc id.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The vswitch id.
     */
    vswitchId?: pulumi.Input<string>;
    /**
     * WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
     */
    warStartOptions?: pulumi.Input<string>;
    /**
     * The version of tomcat that the deployment package depends on. Image type applications are not supported.
     */
    webContainer?: pulumi.Input<string>;
}
