// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Serverless App Engine (SAE) Application resource.
 *
 * For information about Serverless App Engine (SAE) Application and how to use it, see [What is Application](https://www.alibabacloud.com/help/en/sae/latest/createapplication).
 *
 * > **NOTE:** Available since v1.161.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const region = config.get("region") || "cn-hangzhou";
 * const name = config.get("name") || "tf-example";
 * const defaultInteger = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const _default = alicloud.getRegions({
 *     current: true,
 * });
 * const defaultGetZones = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("default", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: defaultGetZones.then(defaultGetZones => defaultGetZones.zones?.[0]?.id),
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("default", {vpcId: defaultNetwork.id});
 * const defaultNamespace = new alicloud.sae.Namespace("default", {
 *     namespaceId: _default.then(_default => `${_default.regions?.[0]?.id}:example${defaultInteger.result}`),
 *     namespaceName: name,
 *     namespaceDescription: name,
 *     enableMicroRegistration: false,
 * });
 * const defaultApplication = new alicloud.sae.Application("default", {
 *     appDescription: name,
 *     appName: `${name}-${defaultInteger.result}`,
 *     namespaceId: defaultNamespace.id,
 *     imageUrl: _default.then(_default => `registry-vpc.${_default.regions?.[0]?.id}.aliyuncs.com/sae-demo-image/consumer:1.0`),
 *     packageType: "Image",
 *     securityGroupId: defaultSecurityGroup.id,
 *     vpcId: defaultNetwork.id,
 *     vswitchId: defaultSwitch.id,
 *     timezone: "Asia/Beijing",
 *     replicas: 5,
 *     cpu: 500,
 *     memory: 2048,
 * });
 * ```
 *
 * ## Import
 *
 * Serverless App Engine (SAE) Application can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:sae/application:Application example <id>
 * ```
 */
export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:sae/application:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    /**
     * The ARN of the RAM role required when pulling images across accounts. Only necessary if the imageUrl is pointing to an ACR EE instance.
     */
    declare public readonly acrAssumeRoleArn: pulumi.Output<string | undefined>;
    /**
     * The ID of the ACR EE instance. Only necessary if the imageUrl is pointing to an ACR EE instance.
     */
    declare public readonly acrInstanceId: pulumi.Output<string | undefined>;
    /**
     * Application description information. No more than 1024 characters. **NOTE:** From version 1.211.0, `appDescription` can be modified.
     */
    declare public readonly appDescription: pulumi.Output<string | undefined>;
    /**
     * Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
     */
    declare public readonly appName: pulumi.Output<string>;
    /**
     * The auto config. Valid values: `true`, `false`.
     */
    declare public readonly autoConfig: pulumi.Output<boolean | undefined>;
    /**
     * The auto enable application scaling rule. Valid values: `true`, `false`.
     */
    declare public readonly autoEnableApplicationScalingRule: pulumi.Output<boolean | undefined>;
    /**
     * The batch wait time.
     */
    declare public readonly batchWaitTime: pulumi.Output<number>;
    /**
     * The change order desc.
     */
    declare public readonly changeOrderDesc: pulumi.Output<string | undefined>;
    /**
     * Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
     */
    declare public readonly command: pulumi.Output<string | undefined>;
    /**
     * Mirror startup command parameters. The parameters required for the above start command. For example: 1d. **NOTE:** Field `commandArgs` has been deprecated from provider version 1.211.0. New field `commandArgsV2` instead.
     *
     * @deprecated Field `commandArgs` has been deprecated from provider version 1.211.0. New field `commandArgsV2` instead.
     */
    declare public readonly commandArgs: pulumi.Output<string>;
    /**
     * The parameters of the image startup command.
     */
    declare public readonly commandArgsV2s: pulumi.Output<string[]>;
    /**
     * ConfigMap mount description. **NOTE:** Field `configMapMountDesc` has been deprecated from provider version 1.211.0. New field `configMapMountDescV2` instead.
     *
     * @deprecated Field `configMapMountDesc` has been deprecated from provider version 1.211.0. New field `configMapMountDescV2` instead.
     */
    declare public readonly configMapMountDesc: pulumi.Output<string>;
    /**
     * The description of the ConfigMap that is mounted to the application. A ConfigMap that is created on the ConfigMaps page of a namespace is used to inject configurations into containers. See `configMapMountDescV2` below.
     */
    declare public readonly configMapMountDescV2s: pulumi.Output<outputs.sae.ApplicationConfigMapMountDescV2[]>;
    /**
     * The CPU required for each instance, in millicores, cannot be 0. Valid values: `500`, `1000`, `2000`, `4000`, `8000`, `16000`, `32000`.
     */
    declare public readonly cpu: pulumi.Output<number | undefined>;
    /**
     * Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}]. **NOTE:** Field `customHostAlias` has been deprecated from provider version 1.211.0. New field `customHostAliasV2` instead.
     *
     * @deprecated Field `customHostAlias` has been deprecated from provider version 1.211.0. New field `customHostAliasV2` instead.
     */
    declare public readonly customHostAlias: pulumi.Output<string>;
    /**
     * The custom mapping between the hostname and IP address in the container. See `customHostAliasV2` below.
     */
    declare public readonly customHostAliasV2s: pulumi.Output<outputs.sae.ApplicationCustomHostAliasV2[]>;
    /**
     * The deploy. Valid values: `true`, `false`.
     */
    declare public readonly deploy: pulumi.Output<boolean | undefined>;
    /**
     * The operating environment used by the Pandora application.
     */
    declare public readonly edasContainerVersion: pulumi.Output<string | undefined>;
    /**
     * The enable ahas. Valid values: `true`, `false`.
     */
    declare public readonly enableAhas: pulumi.Output<string>;
    /**
     * The enable grey tag route. Default value: `false`. Valid values:
     */
    declare public readonly enableGreyTagRoute: pulumi.Output<boolean>;
    /**
     * Container environment variable parameters. For example,`	[{"name":"envtmp","value":"0"}]`. The value description is as follows:
     */
    declare public readonly envs: pulumi.Output<string>;
    /**
     * The ID of the corresponding Secret.
     */
    declare public readonly imagePullSecrets: pulumi.Output<string | undefined>;
    /**
     * Mirror address. Only Image type applications can configure the mirror address.
     */
    declare public readonly imageUrl: pulumi.Output<string | undefined>;
    /**
     * The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
     */
    declare public readonly jarStartArgs: pulumi.Output<string | undefined>;
    /**
     * The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
     */
    declare public readonly jarStartOptions: pulumi.Output<string | undefined>;
    /**
     * The JDK version that the deployment package depends on. Image type applications are not supported.
     */
    declare public readonly jdk: pulumi.Output<string | undefined>;
    /**
     * The logging configurations of ApsaraMQ for Kafka. See `kafkaConfigs` below.
     */
    declare public readonly kafkaConfigs: pulumi.Output<outputs.sae.ApplicationKafkaConfigs | undefined>;
    /**
     * Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
     * **NOTE:** Field `liveness` has been deprecated from provider version 1.211.0. New field `livenessV2` instead.
     *
     * @deprecated Field `liveness` has been deprecated from provider version 1.211.0. New field `livenessV2` instead.
     */
    declare public readonly liveness: pulumi.Output<string>;
    /**
     * The liveness check settings of the container. See `livenessV2` below.
     */
    declare public readonly livenessV2: pulumi.Output<outputs.sae.ApplicationLivenessV2>;
    /**
     * The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `2048`, `4096`, `8192`, `12288`, `16384`, `24576`, `32768`, `65536`, `131072`.
     */
    declare public readonly memory: pulumi.Output<number | undefined>;
    /**
     * Select the Nacos registry. Valid values: `0`, `1`, `2`.
     */
    declare public readonly microRegistration: pulumi.Output<string>;
    /**
     * Minimum Survival Instance Percentage. **NOTE:** When `minReadyInstances` and `minReadyInstanceRatio` are passed at the same time, and the value of `minReadyInstanceRatio` is not -1, the `minReadyInstanceRatio` parameter shall prevail. Assuming that `minReadyInstances` is 5 and `minReadyInstanceRatio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
     * * `-1`: Initialization value, indicating that percentages are not used.
     * * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
     */
    declare public readonly minReadyInstanceRatio: pulumi.Output<number>;
    /**
     * The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
     */
    declare public readonly minReadyInstances: pulumi.Output<number>;
    /**
     * SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
     */
    declare public readonly namespaceId: pulumi.Output<string | undefined>;
    /**
     * The configurations for mounting the NAS file system. See `nasConfigs` below.
     */
    declare public readonly nasConfigs: pulumi.Output<outputs.sae.ApplicationNasConfig[] | undefined>;
    /**
     * OSS AccessKey ID.
     */
    declare public readonly ossAkId: pulumi.Output<string | undefined>;
    /**
     * OSS  AccessKey Secret.
     */
    declare public readonly ossAkSecret: pulumi.Output<string | undefined>;
    /**
     * OSS mount description information. **NOTE:** Field `ossMountDescs` has been deprecated from provider version 1.211.0. New field `ossMountDescsV2` instead.
     *
     * @deprecated Field `ossMountDescs` has been deprecated from provider version 1.211.0. New field `ossMountDescsV2` instead.
     */
    declare public readonly ossMountDescs: pulumi.Output<string>;
    /**
     * The description of the mounted Object Storage Service (OSS) bucket. See `ossMountDescsV2` below.
     */
    declare public readonly ossMountDescsV2s: pulumi.Output<outputs.sae.ApplicationOssMountDescsV2[]>;
    /**
     * Application package type. Valid values: `FatJar`, `War`, `Image`, `PhpZip`, `IMAGE_PHP_5_4`, `IMAGE_PHP_5_4_ALPINE`, `IMAGE_PHP_5_5`, `IMAGE_PHP_5_5_ALPINE`, `IMAGE_PHP_5_6`, `IMAGE_PHP_5_6_ALPINE`, `IMAGE_PHP_7_0`, `IMAGE_PHP_7_0_ALPINE`, `IMAGE_PHP_7_1`, `IMAGE_PHP_7_1_ALPINE`, `IMAGE_PHP_7_2`, `IMAGE_PHP_7_2_ALPINE`, `IMAGE_PHP_7_3`, `IMAGE_PHP_7_3_ALPINE`, `PythonZip`.
     */
    declare public readonly packageType: pulumi.Output<string>;
    /**
     * Deployment package address. Only FatJar or War type applications can configure the deployment package address.
     */
    declare public readonly packageUrl: pulumi.Output<string | undefined>;
    /**
     * The version number of the deployment package. Required when the Package Type is War and FatJar.
     */
    declare public readonly packageVersion: pulumi.Output<string>;
    /**
     * The Php environment.
     */
    declare public readonly php: pulumi.Output<string | undefined>;
    /**
     * The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
     */
    declare public readonly phpArmsConfigLocation: pulumi.Output<string>;
    /**
     * PHP configuration file content.
     */
    declare public readonly phpConfig: pulumi.Output<string | undefined>;
    /**
     * PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
     */
    declare public readonly phpConfigLocation: pulumi.Output<string | undefined>;
    /**
     * Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}. **NOTE:** Field `postStart` has been deprecated from provider version 1.211.0. New field `postStartV2` instead.
     *
     * @deprecated Field `postStart` has been deprecated from provider version 1.211.0. New field `postStartV2` instead.
     */
    declare public readonly postStart: pulumi.Output<string>;
    /**
     * The script that is run immediately after the container is started. See `postStartV2` below.
     */
    declare public readonly postStartV2: pulumi.Output<outputs.sae.ApplicationPostStartV2>;
    /**
     * Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}. **NOTE:** Field `preStop` has been deprecated from provider version 1.211.0. New field `preStopV2` instead.
     *
     * @deprecated Field `preStop` has been deprecated from provider version 1.211.0. New field `preStopV2` instead.
     */
    declare public readonly preStop: pulumi.Output<string>;
    /**
     * The script that is run before the container is stopped. See `preStopV2` below.
     */
    declare public readonly preStopV2: pulumi.Output<outputs.sae.ApplicationPreStopV2>;
    /**
     * The programming language that is used to create the application. Valid values: `java`, `php`, `other`.
     */
    declare public readonly programmingLanguage: pulumi.Output<string>;
    /**
     * The configurations of Kubernetes Service-based service registration and discovery. See `pvtzDiscoverySvc` below.
     */
    declare public readonly pvtzDiscoverySvc: pulumi.Output<outputs.sae.ApplicationPvtzDiscoverySvc | undefined>;
    /**
     * Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
     * **NOTE:** Field `readiness` has been deprecated from provider version 1.211.0. New field `readinessV2` instead.
     *
     * @deprecated Field `readiness` has been deprecated from provider version 1.211.0. New field `readinessV2` instead.
     */
    declare public readonly readiness: pulumi.Output<string>;
    /**
     * The readiness check settings of the container. If a container fails this health check multiple times, the container is stopped and then restarted. See `readinessV2` below.
     */
    declare public readonly readinessV2: pulumi.Output<outputs.sae.ApplicationReadinessV2>;
    /**
     * Initial number of instances.
     */
    declare public readonly replicas: pulumi.Output<number>;
    /**
     * Security group ID.
     */
    declare public readonly securityGroupId: pulumi.Output<string>;
    /**
     * Configuration for log collection to SLS. Valid parameter descriptions are as follows:
     * * `projectName`: Configures the project name on SLS.
     * * `logDir`: Path to the logs.
     * * `logType`: Type of logs. stdout indicates container standard output logs, and only one can be set; if not set, it means collecting file logs.
     * * `logstoreName`: Configures the log store name on SLS.
     * * `logtailName`: Configures the log tail name on SLS; if not specified, it means creating a new log tail.
     *
     * If you no longer need to use the SLS collection feature, you should set the value of this field to an empty string. There are two examples:
     * - Using SAE automatically created SLS resources: [{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}].
     * - Using custom SLS resources: [{"projectName":"test-sls","logType":"stdout","logDir":"","logstoreName":"sae","logtailName":""},{"projectName":"test","logDir":"/tmp/a.log","logstoreName":"sae","logtailName":""}].
     *
     * **NOTE:** Projects that are automatically created with applications will be deleted along with the application deletion. Therefore, when selecting existing projects, you cannot choose projects automatically created by SAE.
     */
    declare public readonly slsConfigs: pulumi.Output<string | undefined>;
    /**
     * The status of the resource. Valid values: `RUNNING`, `STOPPED`, `UNKNOWN`.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
     */
    declare public readonly terminationGracePeriodSeconds: pulumi.Output<number>;
    /**
     * Time zone. Default value: `Asia/Shanghai`.
     */
    declare public readonly timezone: pulumi.Output<string>;
    /**
     * Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
     * **NOTE:** Field `tomcatConfig` has been deprecated from provider version 1.211.0. New field `tomcatConfigV2` instead.
     *
     * @deprecated Field `tomcatConfig` has been deprecated from provider version 1.211.0. New field `tomcatConfigV2` instead.
     */
    declare public readonly tomcatConfig: pulumi.Output<string>;
    /**
     * The Tomcat configuration. See `tomcatConfigV2` below.
     */
    declare public readonly tomcatConfigV2: pulumi.Output<outputs.sae.ApplicationTomcatConfigV2>;
    /**
     * The update strategy. **NOTE:** Field `updateStrategy` has been deprecated from provider version 1.211.0. New field `updateStrategyV2` instead.
     *
     * @deprecated Field `updateStrategy` has been deprecated from provider version 1.211.0. New field `updateStrategyV2` instead.
     */
    declare public readonly updateStrategy: pulumi.Output<string>;
    /**
     * The release policy. See `updateStrategyV2` below.
     */
    declare public readonly updateStrategyV2: pulumi.Output<outputs.sae.ApplicationUpdateStrategyV2>;
    /**
     * The vpc id.
     */
    declare public readonly vpcId: pulumi.Output<string | undefined>;
    /**
     * The vswitch id. **NOTE:** From version 1.211.0, `vswitchId` can be modified.
     */
    declare public readonly vswitchId: pulumi.Output<string | undefined>;
    /**
     * WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
     */
    declare public readonly warStartOptions: pulumi.Output<string | undefined>;
    /**
     * The version of tomcat that the deployment package depends on. Image type applications are not supported.
     */
    declare public readonly webContainer: pulumi.Output<string | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationArgs | ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationState | undefined;
            resourceInputs["acrAssumeRoleArn"] = state?.acrAssumeRoleArn;
            resourceInputs["acrInstanceId"] = state?.acrInstanceId;
            resourceInputs["appDescription"] = state?.appDescription;
            resourceInputs["appName"] = state?.appName;
            resourceInputs["autoConfig"] = state?.autoConfig;
            resourceInputs["autoEnableApplicationScalingRule"] = state?.autoEnableApplicationScalingRule;
            resourceInputs["batchWaitTime"] = state?.batchWaitTime;
            resourceInputs["changeOrderDesc"] = state?.changeOrderDesc;
            resourceInputs["command"] = state?.command;
            resourceInputs["commandArgs"] = state?.commandArgs;
            resourceInputs["commandArgsV2s"] = state?.commandArgsV2s;
            resourceInputs["configMapMountDesc"] = state?.configMapMountDesc;
            resourceInputs["configMapMountDescV2s"] = state?.configMapMountDescV2s;
            resourceInputs["cpu"] = state?.cpu;
            resourceInputs["customHostAlias"] = state?.customHostAlias;
            resourceInputs["customHostAliasV2s"] = state?.customHostAliasV2s;
            resourceInputs["deploy"] = state?.deploy;
            resourceInputs["edasContainerVersion"] = state?.edasContainerVersion;
            resourceInputs["enableAhas"] = state?.enableAhas;
            resourceInputs["enableGreyTagRoute"] = state?.enableGreyTagRoute;
            resourceInputs["envs"] = state?.envs;
            resourceInputs["imagePullSecrets"] = state?.imagePullSecrets;
            resourceInputs["imageUrl"] = state?.imageUrl;
            resourceInputs["jarStartArgs"] = state?.jarStartArgs;
            resourceInputs["jarStartOptions"] = state?.jarStartOptions;
            resourceInputs["jdk"] = state?.jdk;
            resourceInputs["kafkaConfigs"] = state?.kafkaConfigs;
            resourceInputs["liveness"] = state?.liveness;
            resourceInputs["livenessV2"] = state?.livenessV2;
            resourceInputs["memory"] = state?.memory;
            resourceInputs["microRegistration"] = state?.microRegistration;
            resourceInputs["minReadyInstanceRatio"] = state?.minReadyInstanceRatio;
            resourceInputs["minReadyInstances"] = state?.minReadyInstances;
            resourceInputs["namespaceId"] = state?.namespaceId;
            resourceInputs["nasConfigs"] = state?.nasConfigs;
            resourceInputs["ossAkId"] = state?.ossAkId;
            resourceInputs["ossAkSecret"] = state?.ossAkSecret;
            resourceInputs["ossMountDescs"] = state?.ossMountDescs;
            resourceInputs["ossMountDescsV2s"] = state?.ossMountDescsV2s;
            resourceInputs["packageType"] = state?.packageType;
            resourceInputs["packageUrl"] = state?.packageUrl;
            resourceInputs["packageVersion"] = state?.packageVersion;
            resourceInputs["php"] = state?.php;
            resourceInputs["phpArmsConfigLocation"] = state?.phpArmsConfigLocation;
            resourceInputs["phpConfig"] = state?.phpConfig;
            resourceInputs["phpConfigLocation"] = state?.phpConfigLocation;
            resourceInputs["postStart"] = state?.postStart;
            resourceInputs["postStartV2"] = state?.postStartV2;
            resourceInputs["preStop"] = state?.preStop;
            resourceInputs["preStopV2"] = state?.preStopV2;
            resourceInputs["programmingLanguage"] = state?.programmingLanguage;
            resourceInputs["pvtzDiscoverySvc"] = state?.pvtzDiscoverySvc;
            resourceInputs["readiness"] = state?.readiness;
            resourceInputs["readinessV2"] = state?.readinessV2;
            resourceInputs["replicas"] = state?.replicas;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["slsConfigs"] = state?.slsConfigs;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["terminationGracePeriodSeconds"] = state?.terminationGracePeriodSeconds;
            resourceInputs["timezone"] = state?.timezone;
            resourceInputs["tomcatConfig"] = state?.tomcatConfig;
            resourceInputs["tomcatConfigV2"] = state?.tomcatConfigV2;
            resourceInputs["updateStrategy"] = state?.updateStrategy;
            resourceInputs["updateStrategyV2"] = state?.updateStrategyV2;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["vswitchId"] = state?.vswitchId;
            resourceInputs["warStartOptions"] = state?.warStartOptions;
            resourceInputs["webContainer"] = state?.webContainer;
        } else {
            const args = argsOrState as ApplicationArgs | undefined;
            if (args?.appName === undefined && !opts.urn) {
                throw new Error("Missing required property 'appName'");
            }
            if (args?.packageType === undefined && !opts.urn) {
                throw new Error("Missing required property 'packageType'");
            }
            if (args?.replicas === undefined && !opts.urn) {
                throw new Error("Missing required property 'replicas'");
            }
            resourceInputs["acrAssumeRoleArn"] = args?.acrAssumeRoleArn;
            resourceInputs["acrInstanceId"] = args?.acrInstanceId;
            resourceInputs["appDescription"] = args?.appDescription;
            resourceInputs["appName"] = args?.appName;
            resourceInputs["autoConfig"] = args?.autoConfig;
            resourceInputs["autoEnableApplicationScalingRule"] = args?.autoEnableApplicationScalingRule;
            resourceInputs["batchWaitTime"] = args?.batchWaitTime;
            resourceInputs["changeOrderDesc"] = args?.changeOrderDesc;
            resourceInputs["command"] = args?.command;
            resourceInputs["commandArgs"] = args?.commandArgs;
            resourceInputs["commandArgsV2s"] = args?.commandArgsV2s;
            resourceInputs["configMapMountDesc"] = args?.configMapMountDesc;
            resourceInputs["configMapMountDescV2s"] = args?.configMapMountDescV2s;
            resourceInputs["cpu"] = args?.cpu;
            resourceInputs["customHostAlias"] = args?.customHostAlias;
            resourceInputs["customHostAliasV2s"] = args?.customHostAliasV2s;
            resourceInputs["deploy"] = args?.deploy;
            resourceInputs["edasContainerVersion"] = args?.edasContainerVersion;
            resourceInputs["enableAhas"] = args?.enableAhas;
            resourceInputs["enableGreyTagRoute"] = args?.enableGreyTagRoute;
            resourceInputs["envs"] = args?.envs;
            resourceInputs["imagePullSecrets"] = args?.imagePullSecrets;
            resourceInputs["imageUrl"] = args?.imageUrl;
            resourceInputs["jarStartArgs"] = args?.jarStartArgs;
            resourceInputs["jarStartOptions"] = args?.jarStartOptions;
            resourceInputs["jdk"] = args?.jdk;
            resourceInputs["kafkaConfigs"] = args?.kafkaConfigs;
            resourceInputs["liveness"] = args?.liveness;
            resourceInputs["livenessV2"] = args?.livenessV2;
            resourceInputs["memory"] = args?.memory;
            resourceInputs["microRegistration"] = args?.microRegistration;
            resourceInputs["minReadyInstanceRatio"] = args?.minReadyInstanceRatio;
            resourceInputs["minReadyInstances"] = args?.minReadyInstances;
            resourceInputs["namespaceId"] = args?.namespaceId;
            resourceInputs["nasConfigs"] = args?.nasConfigs;
            resourceInputs["ossAkId"] = args?.ossAkId ? pulumi.secret(args.ossAkId) : undefined;
            resourceInputs["ossAkSecret"] = args?.ossAkSecret ? pulumi.secret(args.ossAkSecret) : undefined;
            resourceInputs["ossMountDescs"] = args?.ossMountDescs;
            resourceInputs["ossMountDescsV2s"] = args?.ossMountDescsV2s;
            resourceInputs["packageType"] = args?.packageType;
            resourceInputs["packageUrl"] = args?.packageUrl;
            resourceInputs["packageVersion"] = args?.packageVersion;
            resourceInputs["php"] = args?.php;
            resourceInputs["phpArmsConfigLocation"] = args?.phpArmsConfigLocation;
            resourceInputs["phpConfig"] = args?.phpConfig;
            resourceInputs["phpConfigLocation"] = args?.phpConfigLocation;
            resourceInputs["postStart"] = args?.postStart;
            resourceInputs["postStartV2"] = args?.postStartV2;
            resourceInputs["preStop"] = args?.preStop;
            resourceInputs["preStopV2"] = args?.preStopV2;
            resourceInputs["programmingLanguage"] = args?.programmingLanguage;
            resourceInputs["pvtzDiscoverySvc"] = args?.pvtzDiscoverySvc;
            resourceInputs["readiness"] = args?.readiness;
            resourceInputs["readinessV2"] = args?.readinessV2;
            resourceInputs["replicas"] = args?.replicas;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["slsConfigs"] = args?.slsConfigs;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["terminationGracePeriodSeconds"] = args?.terminationGracePeriodSeconds;
            resourceInputs["timezone"] = args?.timezone;
            resourceInputs["tomcatConfig"] = args?.tomcatConfig;
            resourceInputs["tomcatConfigV2"] = args?.tomcatConfigV2;
            resourceInputs["updateStrategy"] = args?.updateStrategy;
            resourceInputs["updateStrategyV2"] = args?.updateStrategyV2;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["vswitchId"] = args?.vswitchId;
            resourceInputs["warStartOptions"] = args?.warStartOptions;
            resourceInputs["webContainer"] = args?.webContainer;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["ossAkId", "ossAkSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    /**
     * The ARN of the RAM role required when pulling images across accounts. Only necessary if the imageUrl is pointing to an ACR EE instance.
     */
    acrAssumeRoleArn?: pulumi.Input<string>;
    /**
     * The ID of the ACR EE instance. Only necessary if the imageUrl is pointing to an ACR EE instance.
     */
    acrInstanceId?: pulumi.Input<string>;
    /**
     * Application description information. No more than 1024 characters. **NOTE:** From version 1.211.0, `appDescription` can be modified.
     */
    appDescription?: pulumi.Input<string>;
    /**
     * Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
     */
    appName?: pulumi.Input<string>;
    /**
     * The auto config. Valid values: `true`, `false`.
     */
    autoConfig?: pulumi.Input<boolean>;
    /**
     * The auto enable application scaling rule. Valid values: `true`, `false`.
     */
    autoEnableApplicationScalingRule?: pulumi.Input<boolean>;
    /**
     * The batch wait time.
     */
    batchWaitTime?: pulumi.Input<number>;
    /**
     * The change order desc.
     */
    changeOrderDesc?: pulumi.Input<string>;
    /**
     * Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
     */
    command?: pulumi.Input<string>;
    /**
     * Mirror startup command parameters. The parameters required for the above start command. For example: 1d. **NOTE:** Field `commandArgs` has been deprecated from provider version 1.211.0. New field `commandArgsV2` instead.
     *
     * @deprecated Field `commandArgs` has been deprecated from provider version 1.211.0. New field `commandArgsV2` instead.
     */
    commandArgs?: pulumi.Input<string>;
    /**
     * The parameters of the image startup command.
     */
    commandArgsV2s?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ConfigMap mount description. **NOTE:** Field `configMapMountDesc` has been deprecated from provider version 1.211.0. New field `configMapMountDescV2` instead.
     *
     * @deprecated Field `configMapMountDesc` has been deprecated from provider version 1.211.0. New field `configMapMountDescV2` instead.
     */
    configMapMountDesc?: pulumi.Input<string>;
    /**
     * The description of the ConfigMap that is mounted to the application. A ConfigMap that is created on the ConfigMaps page of a namespace is used to inject configurations into containers. See `configMapMountDescV2` below.
     */
    configMapMountDescV2s?: pulumi.Input<pulumi.Input<inputs.sae.ApplicationConfigMapMountDescV2>[]>;
    /**
     * The CPU required for each instance, in millicores, cannot be 0. Valid values: `500`, `1000`, `2000`, `4000`, `8000`, `16000`, `32000`.
     */
    cpu?: pulumi.Input<number>;
    /**
     * Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}]. **NOTE:** Field `customHostAlias` has been deprecated from provider version 1.211.0. New field `customHostAliasV2` instead.
     *
     * @deprecated Field `customHostAlias` has been deprecated from provider version 1.211.0. New field `customHostAliasV2` instead.
     */
    customHostAlias?: pulumi.Input<string>;
    /**
     * The custom mapping between the hostname and IP address in the container. See `customHostAliasV2` below.
     */
    customHostAliasV2s?: pulumi.Input<pulumi.Input<inputs.sae.ApplicationCustomHostAliasV2>[]>;
    /**
     * The deploy. Valid values: `true`, `false`.
     */
    deploy?: pulumi.Input<boolean>;
    /**
     * The operating environment used by the Pandora application.
     */
    edasContainerVersion?: pulumi.Input<string>;
    /**
     * The enable ahas. Valid values: `true`, `false`.
     */
    enableAhas?: pulumi.Input<string>;
    /**
     * The enable grey tag route. Default value: `false`. Valid values:
     */
    enableGreyTagRoute?: pulumi.Input<boolean>;
    /**
     * Container environment variable parameters. For example,`	[{"name":"envtmp","value":"0"}]`. The value description is as follows:
     */
    envs?: pulumi.Input<string>;
    /**
     * The ID of the corresponding Secret.
     */
    imagePullSecrets?: pulumi.Input<string>;
    /**
     * Mirror address. Only Image type applications can configure the mirror address.
     */
    imageUrl?: pulumi.Input<string>;
    /**
     * The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
     */
    jarStartArgs?: pulumi.Input<string>;
    /**
     * The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
     */
    jarStartOptions?: pulumi.Input<string>;
    /**
     * The JDK version that the deployment package depends on. Image type applications are not supported.
     */
    jdk?: pulumi.Input<string>;
    /**
     * The logging configurations of ApsaraMQ for Kafka. See `kafkaConfigs` below.
     */
    kafkaConfigs?: pulumi.Input<inputs.sae.ApplicationKafkaConfigs>;
    /**
     * Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
     * **NOTE:** Field `liveness` has been deprecated from provider version 1.211.0. New field `livenessV2` instead.
     *
     * @deprecated Field `liveness` has been deprecated from provider version 1.211.0. New field `livenessV2` instead.
     */
    liveness?: pulumi.Input<string>;
    /**
     * The liveness check settings of the container. See `livenessV2` below.
     */
    livenessV2?: pulumi.Input<inputs.sae.ApplicationLivenessV2>;
    /**
     * The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `2048`, `4096`, `8192`, `12288`, `16384`, `24576`, `32768`, `65536`, `131072`.
     */
    memory?: pulumi.Input<number>;
    /**
     * Select the Nacos registry. Valid values: `0`, `1`, `2`.
     */
    microRegistration?: pulumi.Input<string>;
    /**
     * Minimum Survival Instance Percentage. **NOTE:** When `minReadyInstances` and `minReadyInstanceRatio` are passed at the same time, and the value of `minReadyInstanceRatio` is not -1, the `minReadyInstanceRatio` parameter shall prevail. Assuming that `minReadyInstances` is 5 and `minReadyInstanceRatio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
     * * `-1`: Initialization value, indicating that percentages are not used.
     * * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
     */
    minReadyInstanceRatio?: pulumi.Input<number>;
    /**
     * The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
     */
    minReadyInstances?: pulumi.Input<number>;
    /**
     * SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * The configurations for mounting the NAS file system. See `nasConfigs` below.
     */
    nasConfigs?: pulumi.Input<pulumi.Input<inputs.sae.ApplicationNasConfig>[]>;
    /**
     * OSS AccessKey ID.
     */
    ossAkId?: pulumi.Input<string>;
    /**
     * OSS  AccessKey Secret.
     */
    ossAkSecret?: pulumi.Input<string>;
    /**
     * OSS mount description information. **NOTE:** Field `ossMountDescs` has been deprecated from provider version 1.211.0. New field `ossMountDescsV2` instead.
     *
     * @deprecated Field `ossMountDescs` has been deprecated from provider version 1.211.0. New field `ossMountDescsV2` instead.
     */
    ossMountDescs?: pulumi.Input<string>;
    /**
     * The description of the mounted Object Storage Service (OSS) bucket. See `ossMountDescsV2` below.
     */
    ossMountDescsV2s?: pulumi.Input<pulumi.Input<inputs.sae.ApplicationOssMountDescsV2>[]>;
    /**
     * Application package type. Valid values: `FatJar`, `War`, `Image`, `PhpZip`, `IMAGE_PHP_5_4`, `IMAGE_PHP_5_4_ALPINE`, `IMAGE_PHP_5_5`, `IMAGE_PHP_5_5_ALPINE`, `IMAGE_PHP_5_6`, `IMAGE_PHP_5_6_ALPINE`, `IMAGE_PHP_7_0`, `IMAGE_PHP_7_0_ALPINE`, `IMAGE_PHP_7_1`, `IMAGE_PHP_7_1_ALPINE`, `IMAGE_PHP_7_2`, `IMAGE_PHP_7_2_ALPINE`, `IMAGE_PHP_7_3`, `IMAGE_PHP_7_3_ALPINE`, `PythonZip`.
     */
    packageType?: pulumi.Input<string>;
    /**
     * Deployment package address. Only FatJar or War type applications can configure the deployment package address.
     */
    packageUrl?: pulumi.Input<string>;
    /**
     * The version number of the deployment package. Required when the Package Type is War and FatJar.
     */
    packageVersion?: pulumi.Input<string>;
    /**
     * The Php environment.
     */
    php?: pulumi.Input<string>;
    /**
     * The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
     */
    phpArmsConfigLocation?: pulumi.Input<string>;
    /**
     * PHP configuration file content.
     */
    phpConfig?: pulumi.Input<string>;
    /**
     * PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
     */
    phpConfigLocation?: pulumi.Input<string>;
    /**
     * Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}. **NOTE:** Field `postStart` has been deprecated from provider version 1.211.0. New field `postStartV2` instead.
     *
     * @deprecated Field `postStart` has been deprecated from provider version 1.211.0. New field `postStartV2` instead.
     */
    postStart?: pulumi.Input<string>;
    /**
     * The script that is run immediately after the container is started. See `postStartV2` below.
     */
    postStartV2?: pulumi.Input<inputs.sae.ApplicationPostStartV2>;
    /**
     * Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}. **NOTE:** Field `preStop` has been deprecated from provider version 1.211.0. New field `preStopV2` instead.
     *
     * @deprecated Field `preStop` has been deprecated from provider version 1.211.0. New field `preStopV2` instead.
     */
    preStop?: pulumi.Input<string>;
    /**
     * The script that is run before the container is stopped. See `preStopV2` below.
     */
    preStopV2?: pulumi.Input<inputs.sae.ApplicationPreStopV2>;
    /**
     * The programming language that is used to create the application. Valid values: `java`, `php`, `other`.
     */
    programmingLanguage?: pulumi.Input<string>;
    /**
     * The configurations of Kubernetes Service-based service registration and discovery. See `pvtzDiscoverySvc` below.
     */
    pvtzDiscoverySvc?: pulumi.Input<inputs.sae.ApplicationPvtzDiscoverySvc>;
    /**
     * Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
     * **NOTE:** Field `readiness` has been deprecated from provider version 1.211.0. New field `readinessV2` instead.
     *
     * @deprecated Field `readiness` has been deprecated from provider version 1.211.0. New field `readinessV2` instead.
     */
    readiness?: pulumi.Input<string>;
    /**
     * The readiness check settings of the container. If a container fails this health check multiple times, the container is stopped and then restarted. See `readinessV2` below.
     */
    readinessV2?: pulumi.Input<inputs.sae.ApplicationReadinessV2>;
    /**
     * Initial number of instances.
     */
    replicas?: pulumi.Input<number>;
    /**
     * Security group ID.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Configuration for log collection to SLS. Valid parameter descriptions are as follows:
     * * `projectName`: Configures the project name on SLS.
     * * `logDir`: Path to the logs.
     * * `logType`: Type of logs. stdout indicates container standard output logs, and only one can be set; if not set, it means collecting file logs.
     * * `logstoreName`: Configures the log store name on SLS.
     * * `logtailName`: Configures the log tail name on SLS; if not specified, it means creating a new log tail.
     *
     * If you no longer need to use the SLS collection feature, you should set the value of this field to an empty string. There are two examples:
     * - Using SAE automatically created SLS resources: [{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}].
     * - Using custom SLS resources: [{"projectName":"test-sls","logType":"stdout","logDir":"","logstoreName":"sae","logtailName":""},{"projectName":"test","logDir":"/tmp/a.log","logstoreName":"sae","logtailName":""}].
     *
     * **NOTE:** Projects that are automatically created with applications will be deleted along with the application deletion. Therefore, when selecting existing projects, you cannot choose projects automatically created by SAE.
     */
    slsConfigs?: pulumi.Input<string>;
    /**
     * The status of the resource. Valid values: `RUNNING`, `STOPPED`, `UNKNOWN`.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
     */
    terminationGracePeriodSeconds?: pulumi.Input<number>;
    /**
     * Time zone. Default value: `Asia/Shanghai`.
     */
    timezone?: pulumi.Input<string>;
    /**
     * Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
     * **NOTE:** Field `tomcatConfig` has been deprecated from provider version 1.211.0. New field `tomcatConfigV2` instead.
     *
     * @deprecated Field `tomcatConfig` has been deprecated from provider version 1.211.0. New field `tomcatConfigV2` instead.
     */
    tomcatConfig?: pulumi.Input<string>;
    /**
     * The Tomcat configuration. See `tomcatConfigV2` below.
     */
    tomcatConfigV2?: pulumi.Input<inputs.sae.ApplicationTomcatConfigV2>;
    /**
     * The update strategy. **NOTE:** Field `updateStrategy` has been deprecated from provider version 1.211.0. New field `updateStrategyV2` instead.
     *
     * @deprecated Field `updateStrategy` has been deprecated from provider version 1.211.0. New field `updateStrategyV2` instead.
     */
    updateStrategy?: pulumi.Input<string>;
    /**
     * The release policy. See `updateStrategyV2` below.
     */
    updateStrategyV2?: pulumi.Input<inputs.sae.ApplicationUpdateStrategyV2>;
    /**
     * The vpc id.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The vswitch id. **NOTE:** From version 1.211.0, `vswitchId` can be modified.
     */
    vswitchId?: pulumi.Input<string>;
    /**
     * WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
     */
    warStartOptions?: pulumi.Input<string>;
    /**
     * The version of tomcat that the deployment package depends on. Image type applications are not supported.
     */
    webContainer?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * The ARN of the RAM role required when pulling images across accounts. Only necessary if the imageUrl is pointing to an ACR EE instance.
     */
    acrAssumeRoleArn?: pulumi.Input<string>;
    /**
     * The ID of the ACR EE instance. Only necessary if the imageUrl is pointing to an ACR EE instance.
     */
    acrInstanceId?: pulumi.Input<string>;
    /**
     * Application description information. No more than 1024 characters. **NOTE:** From version 1.211.0, `appDescription` can be modified.
     */
    appDescription?: pulumi.Input<string>;
    /**
     * Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
     */
    appName: pulumi.Input<string>;
    /**
     * The auto config. Valid values: `true`, `false`.
     */
    autoConfig?: pulumi.Input<boolean>;
    /**
     * The auto enable application scaling rule. Valid values: `true`, `false`.
     */
    autoEnableApplicationScalingRule?: pulumi.Input<boolean>;
    /**
     * The batch wait time.
     */
    batchWaitTime?: pulumi.Input<number>;
    /**
     * The change order desc.
     */
    changeOrderDesc?: pulumi.Input<string>;
    /**
     * Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
     */
    command?: pulumi.Input<string>;
    /**
     * Mirror startup command parameters. The parameters required for the above start command. For example: 1d. **NOTE:** Field `commandArgs` has been deprecated from provider version 1.211.0. New field `commandArgsV2` instead.
     *
     * @deprecated Field `commandArgs` has been deprecated from provider version 1.211.0. New field `commandArgsV2` instead.
     */
    commandArgs?: pulumi.Input<string>;
    /**
     * The parameters of the image startup command.
     */
    commandArgsV2s?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ConfigMap mount description. **NOTE:** Field `configMapMountDesc` has been deprecated from provider version 1.211.0. New field `configMapMountDescV2` instead.
     *
     * @deprecated Field `configMapMountDesc` has been deprecated from provider version 1.211.0. New field `configMapMountDescV2` instead.
     */
    configMapMountDesc?: pulumi.Input<string>;
    /**
     * The description of the ConfigMap that is mounted to the application. A ConfigMap that is created on the ConfigMaps page of a namespace is used to inject configurations into containers. See `configMapMountDescV2` below.
     */
    configMapMountDescV2s?: pulumi.Input<pulumi.Input<inputs.sae.ApplicationConfigMapMountDescV2>[]>;
    /**
     * The CPU required for each instance, in millicores, cannot be 0. Valid values: `500`, `1000`, `2000`, `4000`, `8000`, `16000`, `32000`.
     */
    cpu?: pulumi.Input<number>;
    /**
     * Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}]. **NOTE:** Field `customHostAlias` has been deprecated from provider version 1.211.0. New field `customHostAliasV2` instead.
     *
     * @deprecated Field `customHostAlias` has been deprecated from provider version 1.211.0. New field `customHostAliasV2` instead.
     */
    customHostAlias?: pulumi.Input<string>;
    /**
     * The custom mapping between the hostname and IP address in the container. See `customHostAliasV2` below.
     */
    customHostAliasV2s?: pulumi.Input<pulumi.Input<inputs.sae.ApplicationCustomHostAliasV2>[]>;
    /**
     * The deploy. Valid values: `true`, `false`.
     */
    deploy?: pulumi.Input<boolean>;
    /**
     * The operating environment used by the Pandora application.
     */
    edasContainerVersion?: pulumi.Input<string>;
    /**
     * The enable ahas. Valid values: `true`, `false`.
     */
    enableAhas?: pulumi.Input<string>;
    /**
     * The enable grey tag route. Default value: `false`. Valid values:
     */
    enableGreyTagRoute?: pulumi.Input<boolean>;
    /**
     * Container environment variable parameters. For example,`	[{"name":"envtmp","value":"0"}]`. The value description is as follows:
     */
    envs?: pulumi.Input<string>;
    /**
     * The ID of the corresponding Secret.
     */
    imagePullSecrets?: pulumi.Input<string>;
    /**
     * Mirror address. Only Image type applications can configure the mirror address.
     */
    imageUrl?: pulumi.Input<string>;
    /**
     * The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
     */
    jarStartArgs?: pulumi.Input<string>;
    /**
     * The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
     */
    jarStartOptions?: pulumi.Input<string>;
    /**
     * The JDK version that the deployment package depends on. Image type applications are not supported.
     */
    jdk?: pulumi.Input<string>;
    /**
     * The logging configurations of ApsaraMQ for Kafka. See `kafkaConfigs` below.
     */
    kafkaConfigs?: pulumi.Input<inputs.sae.ApplicationKafkaConfigs>;
    /**
     * Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
     * **NOTE:** Field `liveness` has been deprecated from provider version 1.211.0. New field `livenessV2` instead.
     *
     * @deprecated Field `liveness` has been deprecated from provider version 1.211.0. New field `livenessV2` instead.
     */
    liveness?: pulumi.Input<string>;
    /**
     * The liveness check settings of the container. See `livenessV2` below.
     */
    livenessV2?: pulumi.Input<inputs.sae.ApplicationLivenessV2>;
    /**
     * The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `2048`, `4096`, `8192`, `12288`, `16384`, `24576`, `32768`, `65536`, `131072`.
     */
    memory?: pulumi.Input<number>;
    /**
     * Select the Nacos registry. Valid values: `0`, `1`, `2`.
     */
    microRegistration?: pulumi.Input<string>;
    /**
     * Minimum Survival Instance Percentage. **NOTE:** When `minReadyInstances` and `minReadyInstanceRatio` are passed at the same time, and the value of `minReadyInstanceRatio` is not -1, the `minReadyInstanceRatio` parameter shall prevail. Assuming that `minReadyInstances` is 5 and `minReadyInstanceRatio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
     * * `-1`: Initialization value, indicating that percentages are not used.
     * * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
     */
    minReadyInstanceRatio?: pulumi.Input<number>;
    /**
     * The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
     */
    minReadyInstances?: pulumi.Input<number>;
    /**
     * SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * The configurations for mounting the NAS file system. See `nasConfigs` below.
     */
    nasConfigs?: pulumi.Input<pulumi.Input<inputs.sae.ApplicationNasConfig>[]>;
    /**
     * OSS AccessKey ID.
     */
    ossAkId?: pulumi.Input<string>;
    /**
     * OSS  AccessKey Secret.
     */
    ossAkSecret?: pulumi.Input<string>;
    /**
     * OSS mount description information. **NOTE:** Field `ossMountDescs` has been deprecated from provider version 1.211.0. New field `ossMountDescsV2` instead.
     *
     * @deprecated Field `ossMountDescs` has been deprecated from provider version 1.211.0. New field `ossMountDescsV2` instead.
     */
    ossMountDescs?: pulumi.Input<string>;
    /**
     * The description of the mounted Object Storage Service (OSS) bucket. See `ossMountDescsV2` below.
     */
    ossMountDescsV2s?: pulumi.Input<pulumi.Input<inputs.sae.ApplicationOssMountDescsV2>[]>;
    /**
     * Application package type. Valid values: `FatJar`, `War`, `Image`, `PhpZip`, `IMAGE_PHP_5_4`, `IMAGE_PHP_5_4_ALPINE`, `IMAGE_PHP_5_5`, `IMAGE_PHP_5_5_ALPINE`, `IMAGE_PHP_5_6`, `IMAGE_PHP_5_6_ALPINE`, `IMAGE_PHP_7_0`, `IMAGE_PHP_7_0_ALPINE`, `IMAGE_PHP_7_1`, `IMAGE_PHP_7_1_ALPINE`, `IMAGE_PHP_7_2`, `IMAGE_PHP_7_2_ALPINE`, `IMAGE_PHP_7_3`, `IMAGE_PHP_7_3_ALPINE`, `PythonZip`.
     */
    packageType: pulumi.Input<string>;
    /**
     * Deployment package address. Only FatJar or War type applications can configure the deployment package address.
     */
    packageUrl?: pulumi.Input<string>;
    /**
     * The version number of the deployment package. Required when the Package Type is War and FatJar.
     */
    packageVersion?: pulumi.Input<string>;
    /**
     * The Php environment.
     */
    php?: pulumi.Input<string>;
    /**
     * The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
     */
    phpArmsConfigLocation?: pulumi.Input<string>;
    /**
     * PHP configuration file content.
     */
    phpConfig?: pulumi.Input<string>;
    /**
     * PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
     */
    phpConfigLocation?: pulumi.Input<string>;
    /**
     * Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}. **NOTE:** Field `postStart` has been deprecated from provider version 1.211.0. New field `postStartV2` instead.
     *
     * @deprecated Field `postStart` has been deprecated from provider version 1.211.0. New field `postStartV2` instead.
     */
    postStart?: pulumi.Input<string>;
    /**
     * The script that is run immediately after the container is started. See `postStartV2` below.
     */
    postStartV2?: pulumi.Input<inputs.sae.ApplicationPostStartV2>;
    /**
     * Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}. **NOTE:** Field `preStop` has been deprecated from provider version 1.211.0. New field `preStopV2` instead.
     *
     * @deprecated Field `preStop` has been deprecated from provider version 1.211.0. New field `preStopV2` instead.
     */
    preStop?: pulumi.Input<string>;
    /**
     * The script that is run before the container is stopped. See `preStopV2` below.
     */
    preStopV2?: pulumi.Input<inputs.sae.ApplicationPreStopV2>;
    /**
     * The programming language that is used to create the application. Valid values: `java`, `php`, `other`.
     */
    programmingLanguage?: pulumi.Input<string>;
    /**
     * The configurations of Kubernetes Service-based service registration and discovery. See `pvtzDiscoverySvc` below.
     */
    pvtzDiscoverySvc?: pulumi.Input<inputs.sae.ApplicationPvtzDiscoverySvc>;
    /**
     * Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
     * **NOTE:** Field `readiness` has been deprecated from provider version 1.211.0. New field `readinessV2` instead.
     *
     * @deprecated Field `readiness` has been deprecated from provider version 1.211.0. New field `readinessV2` instead.
     */
    readiness?: pulumi.Input<string>;
    /**
     * The readiness check settings of the container. If a container fails this health check multiple times, the container is stopped and then restarted. See `readinessV2` below.
     */
    readinessV2?: pulumi.Input<inputs.sae.ApplicationReadinessV2>;
    /**
     * Initial number of instances.
     */
    replicas: pulumi.Input<number>;
    /**
     * Security group ID.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Configuration for log collection to SLS. Valid parameter descriptions are as follows:
     * * `projectName`: Configures the project name on SLS.
     * * `logDir`: Path to the logs.
     * * `logType`: Type of logs. stdout indicates container standard output logs, and only one can be set; if not set, it means collecting file logs.
     * * `logstoreName`: Configures the log store name on SLS.
     * * `logtailName`: Configures the log tail name on SLS; if not specified, it means creating a new log tail.
     *
     * If you no longer need to use the SLS collection feature, you should set the value of this field to an empty string. There are two examples:
     * - Using SAE automatically created SLS resources: [{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}].
     * - Using custom SLS resources: [{"projectName":"test-sls","logType":"stdout","logDir":"","logstoreName":"sae","logtailName":""},{"projectName":"test","logDir":"/tmp/a.log","logstoreName":"sae","logtailName":""}].
     *
     * **NOTE:** Projects that are automatically created with applications will be deleted along with the application deletion. Therefore, when selecting existing projects, you cannot choose projects automatically created by SAE.
     */
    slsConfigs?: pulumi.Input<string>;
    /**
     * The status of the resource. Valid values: `RUNNING`, `STOPPED`, `UNKNOWN`.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
     */
    terminationGracePeriodSeconds?: pulumi.Input<number>;
    /**
     * Time zone. Default value: `Asia/Shanghai`.
     */
    timezone?: pulumi.Input<string>;
    /**
     * Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
     * **NOTE:** Field `tomcatConfig` has been deprecated from provider version 1.211.0. New field `tomcatConfigV2` instead.
     *
     * @deprecated Field `tomcatConfig` has been deprecated from provider version 1.211.0. New field `tomcatConfigV2` instead.
     */
    tomcatConfig?: pulumi.Input<string>;
    /**
     * The Tomcat configuration. See `tomcatConfigV2` below.
     */
    tomcatConfigV2?: pulumi.Input<inputs.sae.ApplicationTomcatConfigV2>;
    /**
     * The update strategy. **NOTE:** Field `updateStrategy` has been deprecated from provider version 1.211.0. New field `updateStrategyV2` instead.
     *
     * @deprecated Field `updateStrategy` has been deprecated from provider version 1.211.0. New field `updateStrategyV2` instead.
     */
    updateStrategy?: pulumi.Input<string>;
    /**
     * The release policy. See `updateStrategyV2` below.
     */
    updateStrategyV2?: pulumi.Input<inputs.sae.ApplicationUpdateStrategyV2>;
    /**
     * The vpc id.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The vswitch id. **NOTE:** From version 1.211.0, `vswitchId` can be modified.
     */
    vswitchId?: pulumi.Input<string>;
    /**
     * WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
     */
    warStartOptions?: pulumi.Input<string>;
    /**
     * The version of tomcat that the deployment package depends on. Image type applications are not supported.
     */
    webContainer?: pulumi.Input<string>;
}
