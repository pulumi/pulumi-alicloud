// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * Eflo Resource can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:eflo/resource:Resource example <id>
 * ```
 */
export class Resource extends pulumi.CustomResource {
    /**
     * Get an existing Resource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceState, opts?: pulumi.CustomResourceOptions): Resource {
        return new Resource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eflo/resource:Resource';

    /**
     * Returns true if the given object is an instance of Resource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Resource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Resource.__pulumiType;
    }

    /**
     * Used to provide a description or comment on the compute cluster.
     */
    public readonly clusterDesc!: pulumi.Output<string | undefined>;
    /**
     * Used to uniquely identify a computing cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Represents the name of the compute cluster, usually including the model number.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Generally refers to the type or instance type of a computing resource. See `machineTypes` below.
     */
    public readonly machineTypes!: pulumi.Output<outputs.eflo.ResourceMachineTypes>;
    /**
     * The ID of the Resource.
     */
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    /**
     * Used to define the access parameters for the user. See `userAccessParam` below.
     */
    public readonly userAccessParam!: pulumi.Output<outputs.eflo.ResourceUserAccessParam>;

    /**
     * Create a Resource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceArgs | ResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceState | undefined;
            resourceInputs["clusterDesc"] = state ? state.clusterDesc : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["machineTypes"] = state ? state.machineTypes : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["userAccessParam"] = state ? state.userAccessParam : undefined;
        } else {
            const args = argsOrState as ResourceArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.machineTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineTypes'");
            }
            if ((!args || args.userAccessParam === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userAccessParam'");
            }
            resourceInputs["clusterDesc"] = args ? args.clusterDesc : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["machineTypes"] = args ? args.machineTypes : undefined;
            resourceInputs["userAccessParam"] = args ? args.userAccessParam : undefined;
            resourceInputs["resourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Resource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Resource resources.
 */
export interface ResourceState {
    /**
     * Used to provide a description or comment on the compute cluster.
     */
    clusterDesc?: pulumi.Input<string>;
    /**
     * Used to uniquely identify a computing cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Represents the name of the compute cluster, usually including the model number.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Generally refers to the type or instance type of a computing resource. See `machineTypes` below.
     */
    machineTypes?: pulumi.Input<inputs.eflo.ResourceMachineTypes>;
    /**
     * The ID of the Resource.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Used to define the access parameters for the user. See `userAccessParam` below.
     */
    userAccessParam?: pulumi.Input<inputs.eflo.ResourceUserAccessParam>;
}

/**
 * The set of arguments for constructing a Resource resource.
 */
export interface ResourceArgs {
    /**
     * Used to provide a description or comment on the compute cluster.
     */
    clusterDesc?: pulumi.Input<string>;
    /**
     * Used to uniquely identify a computing cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Represents the name of the compute cluster, usually including the model number.
     */
    clusterName: pulumi.Input<string>;
    /**
     * Generally refers to the type or instance type of a computing resource. See `machineTypes` below.
     */
    machineTypes: pulumi.Input<inputs.eflo.ResourceMachineTypes>;
    /**
     * Used to define the access parameters for the user. See `userAccessParam` below.
     */
    userAccessParam: pulumi.Input<inputs.eflo.ResourceUserAccessParam>;
}
