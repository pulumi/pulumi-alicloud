// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Eflo Vsc resource.
 *
 * Virtual Storage Channel.
 *
 * For information about Eflo Vsc and how to use it, see [What is Vsc](https://www.alibabacloud.com/help/en/pai/developer-reference/api-eflo-controller-2022-12-15-createvsc).
 *
 * > **NOTE:** Available since v1.250.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new alicloud.eflo.Vsc("default", {
 *     vscType: "primary",
 *     nodeId: "e01-cn-9me49omda01",
 *     vscName: name,
 * });
 * ```
 *
 * ## Import
 *
 * Eflo Vsc can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:eflo/vsc:Vsc example <id>
 * ```
 */
export class Vsc extends pulumi.CustomResource {
    /**
     * Get an existing Vsc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VscState, opts?: pulumi.CustomResourceOptions): Vsc {
        return new Vsc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eflo/vsc:Vsc';

    /**
     * Returns true if the given object is an instance of Vsc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vsc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vsc.__pulumiType;
    }

    /**
     * The ID of the Node.
     */
    public readonly nodeId!: pulumi.Output<string>;
    /**
     * The ID of the resource group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The status of the Vsc.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The tag of the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the Vsc.
     */
    public readonly vscName!: pulumi.Output<string | undefined>;
    /**
     * The type of the Vsc. Default value: `primary`. Valid values: `primary`.
     */
    public readonly vscType!: pulumi.Output<string>;

    /**
     * Create a Vsc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VscArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VscArgs | VscState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VscState | undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vscName"] = state ? state.vscName : undefined;
            resourceInputs["vscType"] = state ? state.vscType : undefined;
        } else {
            const args = argsOrState as VscArgs | undefined;
            if ((!args || args.nodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeId'");
            }
            resourceInputs["nodeId"] = args ? args.nodeId : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vscName"] = args ? args.vscName : undefined;
            resourceInputs["vscType"] = args ? args.vscType : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vsc.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vsc resources.
 */
export interface VscState {
    /**
     * The ID of the Node.
     */
    nodeId?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The status of the Vsc.
     */
    status?: pulumi.Input<string>;
    /**
     * The tag of the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Vsc.
     */
    vscName?: pulumi.Input<string>;
    /**
     * The type of the Vsc. Default value: `primary`. Valid values: `primary`.
     */
    vscType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vsc resource.
 */
export interface VscArgs {
    /**
     * The ID of the Node.
     */
    nodeId: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The tag of the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Vsc.
     */
    vscName?: pulumi.Input<string>;
    /**
     * The type of the Vsc. Default value: `primary`. Valid values: `primary`.
     */
    vscType?: pulumi.Input<string>;
}
