// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Eflo Experiment Plan resource.
 *
 * For information about Eflo Experiment Plan and how to use it, see [What is Experiment Plan](https://www.alibabacloud.com/help/en/pai/developer-reference/api-eflo-cnp-2023-08-28-createexperimentplan).
 *
 * > **NOTE:** Available since v1.248.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultpSZN7t = new alicloud.eflo.ExperimentPlanTemplate("defaultpSZN7t", {
 *     templatePipelines: [{
 *         workloadId: 2,
 *         workloadName: "MatMul",
 *         envParams: {
 *             cpuPerWorker: 90,
 *             gpuPerWorker: 8,
 *             memoryPerWorker: 500,
 *             shareMemory: 500,
 *             workerNum: 1,
 *             pyTorchVersion: "1",
 *             gpuDriverVersion: "1",
 *             cudaVersion: "1",
 *             ncclVersion: "1",
 *         },
 *         pipelineOrder: 1,
 *         scene: "baseline",
 *     }],
 *     privacyLevel: "private",
 *     templateName: name,
 *     templateDescription: name,
 * });
 * const defaultResource = new alicloud.eflo.Resource("default", {
 *     userAccessParam: {
 *         accessId: "your_access_id",
 *         accessKey: "your_access_key",
 *         workspaceId: "your_workspace_id",
 *         endpoint: "your_endpoint",
 *     },
 *     clusterId: `terraform-${_default.result}`,
 *     machineTypes: {
 *         memoryInfo: "32x 64GB DDR4 4800 Memory",
 *         type: "Private",
 *         bondNum: 5,
 *         nodeCount: 1,
 *         cpuInfo: "2x Intel Saphhire Rapid 8469C 48C CPU",
 *         networkInfo: "1x 200Gbps Dual Port BF3 DPU for VPC 4x 200Gbps Dual Port EIC",
 *         gpuInfo: "8x OAM 810 GPU",
 *         diskInfo: "2x 480GB SATA SSD 4x 3.84TB NVMe SSD",
 *         networkMode: "net",
 *         name: "lingjun",
 *     },
 *     clusterName: name,
 *     clusterDesc: name,
 * });
 * const defaultExperimentPlan = new alicloud.eflo.ExperimentPlan("default", {
 *     resourceId: defaultResource.resourceId,
 *     planName: name,
 *     templateId: defaultpSZN7t.id,
 * });
 * ```
 *
 * ## Import
 *
 * Eflo Experiment Plan can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:eflo/experimentPlan:ExperimentPlan example <id>
 * ```
 */
export class ExperimentPlan extends pulumi.CustomResource {
    /**
     * Get an existing ExperimentPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExperimentPlanState, opts?: pulumi.CustomResourceOptions): ExperimentPlan {
        return new ExperimentPlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eflo/experimentPlan:ExperimentPlan';

    /**
     * Returns true if the given object is an instance of ExperimentPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExperimentPlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExperimentPlan.__pulumiType;
    }

    /**
     * The creation time of the resource.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Additional operating parameters. You can include information about the specified node.
     */
    public readonly externalParams!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
     */
    public readonly planName!: pulumi.Output<string>;
    /**
     * The ID of the resource group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The ID of the resource.
     */
    public readonly resourceId!: pulumi.Output<number>;
    /**
     * The tag of the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the template.
     */
    public readonly templateId!: pulumi.Output<number>;

    /**
     * Create a ExperimentPlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExperimentPlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExperimentPlanArgs | ExperimentPlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExperimentPlanState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["externalParams"] = state ? state.externalParams : undefined;
            resourceInputs["planName"] = state ? state.planName : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
        } else {
            const args = argsOrState as ExperimentPlanArgs | undefined;
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.templateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            resourceInputs["externalParams"] = args ? args.externalParams : undefined;
            resourceInputs["planName"] = args ? args.planName : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExperimentPlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExperimentPlan resources.
 */
export interface ExperimentPlanState {
    /**
     * The creation time of the resource.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Additional operating parameters. You can include information about the specified node.
     */
    externalParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
     */
    planName?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The ID of the resource.
     */
    resourceId?: pulumi.Input<number>;
    /**
     * The tag of the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the template.
     */
    templateId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ExperimentPlan resource.
 */
export interface ExperimentPlanArgs {
    /**
     * Additional operating parameters. You can include information about the specified node.
     */
    externalParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
     */
    planName?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The ID of the resource.
     */
    resourceId: pulumi.Input<number>;
    /**
     * The tag of the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the template.
     */
    templateId: pulumi.Input<number>;
}
