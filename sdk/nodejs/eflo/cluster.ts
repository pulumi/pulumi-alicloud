// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Eflo Cluster resource.
 *
 * Large computing cluster.
 *
 * For information about Eflo Cluster and how to use it, see [What is Cluster](https://next.api.alibabacloud.com/document/eflo-controller/2022-12-15/CreateCluster).
 *
 * > **NOTE:** Available since v1.246.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.resourcemanager.getResourceGroups({});
 * const createVpc = new alicloud.vpc.Network("create_vpc", {
 *     cidrBlock: "192.168.0.0/16",
 *     vpcName: "cluster-resoure-example",
 * });
 * const createVswitch = new alicloud.vpc.Switch("create_vswitch", {
 *     vpcId: createVpc.id,
 *     zoneId: "cn-hangzhou-b",
 *     cidrBlock: "192.168.0.0/24",
 *     vswitchName: "cluster-resoure-example",
 * });
 * const createSecurityGroup = new alicloud.ecs.SecurityGroup("create_security_group", {
 *     description: "sg",
 *     securityGroupName: "cluster-resoure-example",
 *     securityGroupType: "normal",
 *     vpcId: createVpc.id,
 * });
 * const defaultCluster = new alicloud.eflo.Cluster("default", {
 *     clusterDescription: "cluster-resource-example",
 *     openEniJumboFrame: false,
 *     hpnZone: "B1",
 *     nimizVswitches: ["1111"],
 *     ignoreFailedNodeTasks: true,
 *     resourceGroupId: _default.then(_default => _default.ids?.[1]),
 *     nodeGroups: [{
 *         imageId: "i198448731735114628708",
 *         zoneId: "cn-hangzhou-b",
 *         nodeGroupName: "cluster-resource-example",
 *         nodeGroupDescription: "cluster-resource-example",
 *         machineType: "efg2.C48cA3sen",
 *     }],
 *     networks: {
 *         tailIpVersion: "ipv4",
 *         newVpdInfo: {
 *             monitorVpcId: createVpc.id,
 *             monitorVswitchId: createVswitch.id,
 *             cenId: "11111",
 *             cloudLinkId: "1111",
 *             vpdCidr: "111",
 *             vpdSubnets: [{
 *                 zoneId: "1111",
 *                 subnetCidr: "111",
 *                 subnetType: "111",
 *             }],
 *             cloudLinkCidr: "169.254.128.0/23",
 *         },
 *         securityGroupId: createSecurityGroup.id,
 *         vswitchZoneId: "cn-hangzhou-b",
 *         vpcId: createVpc.id,
 *         vswitchId: createVswitch.id,
 *         vpdInfo: {
 *             vpdId: "111",
 *             vpdSubnets: ["111"],
 *         },
 *         ipAllocationPolicies: [{
 *             bondPolicy: {
 *                 bondDefaultSubnet: "111",
 *                 bonds: [{
 *                     name: "111",
 *                     subnet: "111",
 *                 }],
 *             },
 *             machineTypePolicies: [{
 *                 bonds: [{
 *                     name: "111",
 *                     subnet: "111",
 *                 }],
 *                 machineType: "111",
 *             }],
 *             nodePolicies: [{
 *                 bonds: [{
 *                     name: "111",
 *                     subnet: "111",
 *                 }],
 *                 nodeId: "111",
 *             }],
 *         }],
 *     },
 *     clusterName: "tfacceflo7165",
 *     clusterType: "Lite",
 * });
 * ```
 *
 * ## Import
 *
 * Eflo Cluster can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:eflo/cluster:Cluster example <id>
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eflo/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * cluster description
     */
    public readonly clusterDescription!: pulumi.Output<string | undefined>;
    /**
     * ClusterName
     */
    public readonly clusterName!: pulumi.Output<string | undefined>;
    /**
     * cluster type
     */
    public readonly clusterType!: pulumi.Output<string | undefined>;
    /**
     * Component (software instance) See `components` below.
     */
    public readonly components!: pulumi.Output<outputs.eflo.ClusterComponent[] | undefined>;
    /**
     * The creation time of the resource
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Cluster Number
     */
    public readonly hpnZone!: pulumi.Output<string | undefined>;
    /**
     * Whether to allow skipping failed nodes. Default value: False
     */
    public readonly ignoreFailedNodeTasks!: pulumi.Output<boolean | undefined>;
    /**
     * Network Information See `networks` below.
     */
    public readonly networks!: pulumi.Output<outputs.eflo.ClusterNetworks | undefined>;
    /**
     * Node virtual switch
     */
    public readonly nimizVswitches!: pulumi.Output<string[] | undefined>;
    /**
     * Node Group List See `nodeGroups` below.
     */
    public readonly nodeGroups!: pulumi.Output<outputs.eflo.ClusterNodeGroup[] | undefined>;
    /**
     * Whether the network interface supports jumbo frames
     */
    public readonly openEniJumboFrame!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the resource group
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The status of the resource
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * tag
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["clusterDescription"] = state ? state.clusterDescription : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["components"] = state ? state.components : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["hpnZone"] = state ? state.hpnZone : undefined;
            resourceInputs["ignoreFailedNodeTasks"] = state ? state.ignoreFailedNodeTasks : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["nimizVswitches"] = state ? state.nimizVswitches : undefined;
            resourceInputs["nodeGroups"] = state ? state.nodeGroups : undefined;
            resourceInputs["openEniJumboFrame"] = state ? state.openEniJumboFrame : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            resourceInputs["clusterDescription"] = args ? args.clusterDescription : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["components"] = args ? args.components : undefined;
            resourceInputs["hpnZone"] = args ? args.hpnZone : undefined;
            resourceInputs["ignoreFailedNodeTasks"] = args ? args.ignoreFailedNodeTasks : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["nimizVswitches"] = args ? args.nimizVswitches : undefined;
            resourceInputs["nodeGroups"] = args ? args.nodeGroups : undefined;
            resourceInputs["openEniJumboFrame"] = args ? args.openEniJumboFrame : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * cluster description
     */
    clusterDescription?: pulumi.Input<string>;
    /**
     * ClusterName
     */
    clusterName?: pulumi.Input<string>;
    /**
     * cluster type
     */
    clusterType?: pulumi.Input<string>;
    /**
     * Component (software instance) See `components` below.
     */
    components?: pulumi.Input<pulumi.Input<inputs.eflo.ClusterComponent>[]>;
    /**
     * The creation time of the resource
     */
    createTime?: pulumi.Input<string>;
    /**
     * Cluster Number
     */
    hpnZone?: pulumi.Input<string>;
    /**
     * Whether to allow skipping failed nodes. Default value: False
     */
    ignoreFailedNodeTasks?: pulumi.Input<boolean>;
    /**
     * Network Information See `networks` below.
     */
    networks?: pulumi.Input<inputs.eflo.ClusterNetworks>;
    /**
     * Node virtual switch
     */
    nimizVswitches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Node Group List See `nodeGroups` below.
     */
    nodeGroups?: pulumi.Input<pulumi.Input<inputs.eflo.ClusterNodeGroup>[]>;
    /**
     * Whether the network interface supports jumbo frames
     */
    openEniJumboFrame?: pulumi.Input<boolean>;
    /**
     * The ID of the resource group
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The status of the resource
     */
    status?: pulumi.Input<string>;
    /**
     * tag
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * cluster description
     */
    clusterDescription?: pulumi.Input<string>;
    /**
     * ClusterName
     */
    clusterName?: pulumi.Input<string>;
    /**
     * cluster type
     */
    clusterType?: pulumi.Input<string>;
    /**
     * Component (software instance) See `components` below.
     */
    components?: pulumi.Input<pulumi.Input<inputs.eflo.ClusterComponent>[]>;
    /**
     * Cluster Number
     */
    hpnZone?: pulumi.Input<string>;
    /**
     * Whether to allow skipping failed nodes. Default value: False
     */
    ignoreFailedNodeTasks?: pulumi.Input<boolean>;
    /**
     * Network Information See `networks` below.
     */
    networks?: pulumi.Input<inputs.eflo.ClusterNetworks>;
    /**
     * Node virtual switch
     */
    nimizVswitches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Node Group List See `nodeGroups` below.
     */
    nodeGroups?: pulumi.Input<pulumi.Input<inputs.eflo.ClusterNodeGroup>[]>;
    /**
     * Whether the network interface supports jumbo frames
     */
    openEniJumboFrame?: pulumi.Input<boolean>;
    /**
     * The ID of the resource group
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * tag
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
