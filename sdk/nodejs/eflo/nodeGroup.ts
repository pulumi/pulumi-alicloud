// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Eflo Node Group resource.
 *
 * Node group. Divide a cluster into multiple node groups, each containing multiple nodes.
 *
 * For information about Eflo Node Group and how to use it, see [What is Node Group](https://next.api.alibabacloud.com/document/eflo-controller/2022-12-15/CreateNodeGroup).
 *
 * > **NOTE:** Available since v1.246.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.resourcemanager.getResourceGroups({});
 * const createVpc = new alicloud.vpc.Network("create_vpc", {
 *     cidrBlock: "192.168.0.0/16",
 *     vpcName: "cluster-resoure-example",
 * });
 * const createVswitch = new alicloud.vpc.Switch("create_vswitch", {
 *     vpcId: createVpc.id,
 *     zoneId: "cn-hangzhou-b",
 *     cidrBlock: "192.168.0.0/24",
 *     vswitchName: "cluster-resoure-example",
 * });
 * const createSecurityGroup = new alicloud.ecs.SecurityGroup("create_security_group", {
 *     description: "sg",
 *     securityGroupName: "cluster-resoure-example",
 *     securityGroupType: "normal",
 *     vpcId: createVpc.id,
 * });
 * const defaultCluster = new alicloud.eflo.Cluster("default", {
 *     clusterDescription: "cluster-resource-example",
 *     openEniJumboFrame: false,
 *     hpnZone: "B1",
 *     nimizVswitches: ["1111"],
 *     ignoreFailedNodeTasks: true,
 *     resourceGroupId: _default.then(_default => _default.ids?.[1]),
 *     nodeGroups: [{
 *         imageId: "i198448731735114628708",
 *         zoneId: "cn-hangzhou-b",
 *         nodeGroupName: "cluster-resource-example",
 *         nodeGroupDescription: "cluster-resource-example",
 *         machineType: "efg2.C48cA3sen",
 *     }],
 *     networks: {
 *         tailIpVersion: "ipv4",
 *         newVpdInfo: {
 *             monitorVpcId: createVpc.id,
 *             monitorVswitchId: createVswitch.id,
 *             cenId: "11111",
 *             cloudLinkId: "1111",
 *             vpdCidr: "111",
 *             vpdSubnets: [{
 *                 zoneId: "1111",
 *                 subnetCidr: "111",
 *                 subnetType: "111",
 *             }],
 *             cloudLinkCidr: "169.254.128.0/23",
 *         },
 *         securityGroupId: createSecurityGroup.id,
 *         vswitchZoneId: "cn-hangzhou-b",
 *         vpcId: createVpc.id,
 *         vswitchId: createVswitch.id,
 *         vpdInfo: {
 *             vpdId: "111",
 *             vpdSubnets: ["111"],
 *         },
 *         ipAllocationPolicies: [{
 *             bondPolicy: {
 *                 bondDefaultSubnet: "111",
 *                 bonds: [{
 *                     name: "111",
 *                     subnet: "111",
 *                 }],
 *             },
 *             machineTypePolicies: [{
 *                 bonds: [{
 *                     name: "111",
 *                     subnet: "111",
 *                 }],
 *                 machineType: "111",
 *             }],
 *             nodePolicies: [{
 *                 bonds: [{
 *                     name: "111",
 *                     subnet: "111",
 *                 }],
 *                 nodeId: "111",
 *             }],
 *         }],
 *     },
 *     clusterName: "tfacceflo7165",
 *     clusterType: "Lite",
 * });
 * const defaultNode = new alicloud.eflo.Node("default", {
 *     period: 36,
 *     discountLevel: "36",
 *     billingCycle: "1month",
 *     classify: "gpuserver",
 *     zone: "cn-hangzhou-b",
 *     productForm: "instance",
 *     paymentRatio: "0",
 *     hpnZone: "B1",
 *     serverArch: "bmserver",
 *     computingServer: "efg1.nvga1n",
 *     stageNum: "36",
 *     renewalStatus: "AutoRenewal",
 *     renewPeriod: 36,
 *     status: "Unused",
 * });
 * const defaultNodeGroup = new alicloud.eflo.NodeGroup("default", {
 *     nodes: [{
 *         nodeId: defaultNode.id,
 *         vpcId: createVpc.id,
 *         vswitchId: createVswitch.id,
 *         hostname: "jxyhostname",
 *         loginPassword: "Alibaba@2025",
 *     }],
 *     ignoreFailedNodeTasks: true,
 *     clusterId: defaultCluster.id,
 *     imageId: "i195048661660874208657",
 *     zoneId: "cn-hangzhou-b",
 *     vpdSubnets: ["example"],
 *     userData: "YWxpLGFsaSxhbGliYWJh",
 *     vswitchZoneId: "cn-hangzhou-b",
 *     ipAllocationPolicies: [{
 *         bondPolicy: {
 *             bondDefaultSubnet: "example",
 *             bonds: [{
 *                 name: "example",
 *                 subnet: "example",
 *             }],
 *         },
 *         machineTypePolicies: [{
 *             bonds: [{
 *                 name: "example",
 *                 subnet: "example",
 *             }],
 *             machineType: "example",
 *         }],
 *         nodePolicies: [{
 *             nodeId: defaultNode.id,
 *             bonds: [{
 *                 name: "example",
 *                 subnet: "example",
 *             }],
 *         }],
 *     }],
 *     machineType: "efg1.nvga1",
 *     az: "cn-hangzhou-b",
 *     nodeGroupDescription: "resource-example1",
 *     nodeGroupName: "tfacceflo63657_update",
 * });
 * ```
 *
 * ## Import
 *
 * Eflo Node Group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:eflo/nodeGroup:NodeGroup example <cluster_id>:<node_group_id>
 * ```
 */
export class NodeGroup extends pulumi.CustomResource {
    /**
     * Get an existing NodeGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeGroupState, opts?: pulumi.CustomResourceOptions): NodeGroup {
        return new NodeGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eflo/nodeGroup:NodeGroup';

    /**
     * Returns true if the given object is an instance of NodeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodeGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeGroup.__pulumiType;
    }

    /**
     * Az
     */
    declare public readonly az: pulumi.Output<string>;
    /**
     * Cluster ID
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * Create time
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Whether to allow skipping failed nodes. Default value: False
     */
    declare public readonly ignoreFailedNodeTasks: pulumi.Output<boolean | undefined>;
    /**
     * Image ID. You can modify the image ID since v1.252.0.
     */
    declare public readonly imageId: pulumi.Output<string>;
    /**
     * IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
     */
    declare public readonly ipAllocationPolicies: pulumi.Output<outputs.eflo.NodeGroupIpAllocationPolicy[] | undefined>;
    /**
     * key pair name
     */
    declare public readonly keyPairName: pulumi.Output<string | undefined>;
    /**
     * Login Password
     */
    declare public readonly loginPassword: pulumi.Output<string | undefined>;
    /**
     * Machine type
     */
    declare public readonly machineType: pulumi.Output<string>;
    /**
     * NodeGroupDescription
     */
    declare public readonly nodeGroupDescription: pulumi.Output<string | undefined>;
    /**
     * The first ID of the resource
     */
    declare public /*out*/ readonly nodeGroupId: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    declare public readonly nodeGroupName: pulumi.Output<string>;
    /**
     * Node List See `nodes` below.
     */
    declare public readonly nodes: pulumi.Output<outputs.eflo.NodeGroupNode[] | undefined>;
    /**
     * Custom Data
     */
    declare public readonly userData: pulumi.Output<string | undefined>;
    /**
     * Cluster subnet list
     */
    declare public readonly vpdSubnets: pulumi.Output<string[] | undefined>;
    /**
     * Zone ID of the switch
     */
    declare public readonly vswitchZoneId: pulumi.Output<string | undefined>;
    /**
     * Zone ID
     */
    declare public readonly zoneId: pulumi.Output<string | undefined>;

    /**
     * Create a NodeGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeGroupArgs | NodeGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeGroupState | undefined;
            resourceInputs["az"] = state?.az;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["ignoreFailedNodeTasks"] = state?.ignoreFailedNodeTasks;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["ipAllocationPolicies"] = state?.ipAllocationPolicies;
            resourceInputs["keyPairName"] = state?.keyPairName;
            resourceInputs["loginPassword"] = state?.loginPassword;
            resourceInputs["machineType"] = state?.machineType;
            resourceInputs["nodeGroupDescription"] = state?.nodeGroupDescription;
            resourceInputs["nodeGroupId"] = state?.nodeGroupId;
            resourceInputs["nodeGroupName"] = state?.nodeGroupName;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["userData"] = state?.userData;
            resourceInputs["vpdSubnets"] = state?.vpdSubnets;
            resourceInputs["vswitchZoneId"] = state?.vswitchZoneId;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as NodeGroupArgs | undefined;
            if (args?.az === undefined && !opts.urn) {
                throw new Error("Missing required property 'az'");
            }
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.imageId === undefined && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if (args?.machineType === undefined && !opts.urn) {
                throw new Error("Missing required property 'machineType'");
            }
            if (args?.nodeGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodeGroupName'");
            }
            resourceInputs["az"] = args?.az;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["ignoreFailedNodeTasks"] = args?.ignoreFailedNodeTasks;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["ipAllocationPolicies"] = args?.ipAllocationPolicies;
            resourceInputs["keyPairName"] = args?.keyPairName;
            resourceInputs["loginPassword"] = args?.loginPassword ? pulumi.secret(args.loginPassword) : undefined;
            resourceInputs["machineType"] = args?.machineType;
            resourceInputs["nodeGroupDescription"] = args?.nodeGroupDescription;
            resourceInputs["nodeGroupName"] = args?.nodeGroupName;
            resourceInputs["nodes"] = args?.nodes;
            resourceInputs["userData"] = args?.userData;
            resourceInputs["vpdSubnets"] = args?.vpdSubnets;
            resourceInputs["vswitchZoneId"] = args?.vswitchZoneId;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["nodeGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["loginPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NodeGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodeGroup resources.
 */
export interface NodeGroupState {
    /**
     * Az
     */
    az?: pulumi.Input<string>;
    /**
     * Cluster ID
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Create time
     */
    createTime?: pulumi.Input<string>;
    /**
     * Whether to allow skipping failed nodes. Default value: False
     */
    ignoreFailedNodeTasks?: pulumi.Input<boolean>;
    /**
     * Image ID. You can modify the image ID since v1.252.0.
     */
    imageId?: pulumi.Input<string>;
    /**
     * IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
     */
    ipAllocationPolicies?: pulumi.Input<pulumi.Input<inputs.eflo.NodeGroupIpAllocationPolicy>[]>;
    /**
     * key pair name
     */
    keyPairName?: pulumi.Input<string>;
    /**
     * Login Password
     */
    loginPassword?: pulumi.Input<string>;
    /**
     * Machine type
     */
    machineType?: pulumi.Input<string>;
    /**
     * NodeGroupDescription
     */
    nodeGroupDescription?: pulumi.Input<string>;
    /**
     * The first ID of the resource
     */
    nodeGroupId?: pulumi.Input<string>;
    /**
     * The name of the resource
     */
    nodeGroupName?: pulumi.Input<string>;
    /**
     * Node List See `nodes` below.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.eflo.NodeGroupNode>[]>;
    /**
     * Custom Data
     */
    userData?: pulumi.Input<string>;
    /**
     * Cluster subnet list
     */
    vpdSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Zone ID of the switch
     */
    vswitchZoneId?: pulumi.Input<string>;
    /**
     * Zone ID
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NodeGroup resource.
 */
export interface NodeGroupArgs {
    /**
     * Az
     */
    az: pulumi.Input<string>;
    /**
     * Cluster ID
     */
    clusterId: pulumi.Input<string>;
    /**
     * Whether to allow skipping failed nodes. Default value: False
     */
    ignoreFailedNodeTasks?: pulumi.Input<boolean>;
    /**
     * Image ID. You can modify the image ID since v1.252.0.
     */
    imageId: pulumi.Input<string>;
    /**
     * IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
     */
    ipAllocationPolicies?: pulumi.Input<pulumi.Input<inputs.eflo.NodeGroupIpAllocationPolicy>[]>;
    /**
     * key pair name
     */
    keyPairName?: pulumi.Input<string>;
    /**
     * Login Password
     */
    loginPassword?: pulumi.Input<string>;
    /**
     * Machine type
     */
    machineType: pulumi.Input<string>;
    /**
     * NodeGroupDescription
     */
    nodeGroupDescription?: pulumi.Input<string>;
    /**
     * The name of the resource
     */
    nodeGroupName: pulumi.Input<string>;
    /**
     * Node List See `nodes` below.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.eflo.NodeGroupNode>[]>;
    /**
     * Custom Data
     */
    userData?: pulumi.Input<string>;
    /**
     * Cluster subnet list
     */
    vpdSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Zone ID of the switch
     */
    vswitchZoneId?: pulumi.Input<string>;
    /**
     * Zone ID
     */
    zoneId?: pulumi.Input<string>;
}
