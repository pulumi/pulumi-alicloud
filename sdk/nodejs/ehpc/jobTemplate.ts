// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Ehpc Job Template resource.
 *
 * For information about Ehpc Job Template and how to use it, see [What is Job Template](https://www.alibabacloud.com/help/product/57664.html).
 *
 * > **NOTE:** Available since v1.133.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.ehpc.JobTemplate("default", {
 *     jobTemplateName: "example_value",
 *     commandLine: "./LammpsTest/lammps.pbs",
 * });
 * ```
 *
 * ## Import
 *
 * Ehpc Job Template can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ehpc/jobTemplate:JobTemplate example <id>
 * ```
 */
export class JobTemplate extends pulumi.CustomResource {
    /**
     * Get an existing JobTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobTemplateState, opts?: pulumi.CustomResourceOptions): JobTemplate {
        return new JobTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ehpc/jobTemplate:JobTemplate';

    /**
     * Returns true if the given object is an instance of JobTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JobTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JobTemplate.__pulumiType;
    }

    /**
     * Queue Jobs, Is of the Form: 1-10:2.
     */
    declare public readonly arrayRequest: pulumi.Output<string | undefined>;
    /**
     * Job Maximum Run Time.
     */
    declare public readonly clockTime: pulumi.Output<string | undefined>;
    /**
     * Job Commands.
     */
    declare public readonly commandLine: pulumi.Output<string>;
    /**
     * A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
     */
    declare public readonly gpu: pulumi.Output<number | undefined>;
    /**
     * A Job Template Name.
     */
    declare public readonly jobTemplateName: pulumi.Output<string>;
    /**
     * A Single Compute Node Maximum Memory.
     */
    declare public readonly mem: pulumi.Output<string | undefined>;
    /**
     * Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
     */
    declare public readonly node: pulumi.Output<number | undefined>;
    /**
     * Job Commands the Directory.
     */
    declare public readonly packagePath: pulumi.Output<string | undefined>;
    /**
     * The Job Priority.
     */
    declare public readonly priority: pulumi.Output<number | undefined>;
    /**
     * The Job Queue.
     */
    declare public readonly queue: pulumi.Output<string | undefined>;
    /**
     * If the Job Is Support for the Re-Run.
     */
    declare public readonly reRunable: pulumi.Output<boolean>;
    /**
     * The name of the user who performed the job.
     */
    declare public readonly runasUser: pulumi.Output<string | undefined>;
    /**
     * Error Output Path.
     */
    declare public readonly stderrRedirectPath: pulumi.Output<string | undefined>;
    /**
     * Standard Output Path and.
     */
    declare public readonly stdoutRedirectPath: pulumi.Output<string | undefined>;
    /**
     * A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
     */
    declare public readonly task: pulumi.Output<number | undefined>;
    /**
     * A Single Task and the Number of Required Threads.
     */
    declare public readonly thread: pulumi.Output<number | undefined>;
    /**
     * The Job of the Environment Variable.
     */
    declare public readonly variables: pulumi.Output<string | undefined>;

    /**
     * Create a JobTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobTemplateArgs | JobTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JobTemplateState | undefined;
            resourceInputs["arrayRequest"] = state?.arrayRequest;
            resourceInputs["clockTime"] = state?.clockTime;
            resourceInputs["commandLine"] = state?.commandLine;
            resourceInputs["gpu"] = state?.gpu;
            resourceInputs["jobTemplateName"] = state?.jobTemplateName;
            resourceInputs["mem"] = state?.mem;
            resourceInputs["node"] = state?.node;
            resourceInputs["packagePath"] = state?.packagePath;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["queue"] = state?.queue;
            resourceInputs["reRunable"] = state?.reRunable;
            resourceInputs["runasUser"] = state?.runasUser;
            resourceInputs["stderrRedirectPath"] = state?.stderrRedirectPath;
            resourceInputs["stdoutRedirectPath"] = state?.stdoutRedirectPath;
            resourceInputs["task"] = state?.task;
            resourceInputs["thread"] = state?.thread;
            resourceInputs["variables"] = state?.variables;
        } else {
            const args = argsOrState as JobTemplateArgs | undefined;
            if (args?.commandLine === undefined && !opts.urn) {
                throw new Error("Missing required property 'commandLine'");
            }
            if (args?.jobTemplateName === undefined && !opts.urn) {
                throw new Error("Missing required property 'jobTemplateName'");
            }
            resourceInputs["arrayRequest"] = args?.arrayRequest;
            resourceInputs["clockTime"] = args?.clockTime;
            resourceInputs["commandLine"] = args?.commandLine;
            resourceInputs["gpu"] = args?.gpu;
            resourceInputs["jobTemplateName"] = args?.jobTemplateName;
            resourceInputs["mem"] = args?.mem;
            resourceInputs["node"] = args?.node;
            resourceInputs["packagePath"] = args?.packagePath;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["queue"] = args?.queue;
            resourceInputs["reRunable"] = args?.reRunable;
            resourceInputs["runasUser"] = args?.runasUser;
            resourceInputs["stderrRedirectPath"] = args?.stderrRedirectPath;
            resourceInputs["stdoutRedirectPath"] = args?.stdoutRedirectPath;
            resourceInputs["task"] = args?.task;
            resourceInputs["thread"] = args?.thread;
            resourceInputs["variables"] = args?.variables;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JobTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering JobTemplate resources.
 */
export interface JobTemplateState {
    /**
     * Queue Jobs, Is of the Form: 1-10:2.
     */
    arrayRequest?: pulumi.Input<string>;
    /**
     * Job Maximum Run Time.
     */
    clockTime?: pulumi.Input<string>;
    /**
     * Job Commands.
     */
    commandLine?: pulumi.Input<string>;
    /**
     * A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
     */
    gpu?: pulumi.Input<number>;
    /**
     * A Job Template Name.
     */
    jobTemplateName?: pulumi.Input<string>;
    /**
     * A Single Compute Node Maximum Memory.
     */
    mem?: pulumi.Input<string>;
    /**
     * Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
     */
    node?: pulumi.Input<number>;
    /**
     * Job Commands the Directory.
     */
    packagePath?: pulumi.Input<string>;
    /**
     * The Job Priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * The Job Queue.
     */
    queue?: pulumi.Input<string>;
    /**
     * If the Job Is Support for the Re-Run.
     */
    reRunable?: pulumi.Input<boolean>;
    /**
     * The name of the user who performed the job.
     */
    runasUser?: pulumi.Input<string>;
    /**
     * Error Output Path.
     */
    stderrRedirectPath?: pulumi.Input<string>;
    /**
     * Standard Output Path and.
     */
    stdoutRedirectPath?: pulumi.Input<string>;
    /**
     * A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
     */
    task?: pulumi.Input<number>;
    /**
     * A Single Task and the Number of Required Threads.
     */
    thread?: pulumi.Input<number>;
    /**
     * The Job of the Environment Variable.
     */
    variables?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JobTemplate resource.
 */
export interface JobTemplateArgs {
    /**
     * Queue Jobs, Is of the Form: 1-10:2.
     */
    arrayRequest?: pulumi.Input<string>;
    /**
     * Job Maximum Run Time.
     */
    clockTime?: pulumi.Input<string>;
    /**
     * Job Commands.
     */
    commandLine: pulumi.Input<string>;
    /**
     * A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
     */
    gpu?: pulumi.Input<number>;
    /**
     * A Job Template Name.
     */
    jobTemplateName: pulumi.Input<string>;
    /**
     * A Single Compute Node Maximum Memory.
     */
    mem?: pulumi.Input<string>;
    /**
     * Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
     */
    node?: pulumi.Input<number>;
    /**
     * Job Commands the Directory.
     */
    packagePath?: pulumi.Input<string>;
    /**
     * The Job Priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * The Job Queue.
     */
    queue?: pulumi.Input<string>;
    /**
     * If the Job Is Support for the Re-Run.
     */
    reRunable?: pulumi.Input<boolean>;
    /**
     * The name of the user who performed the job.
     */
    runasUser?: pulumi.Input<string>;
    /**
     * Error Output Path.
     */
    stderrRedirectPath?: pulumi.Input<string>;
    /**
     * Standard Output Path and.
     */
    stdoutRedirectPath?: pulumi.Input<string>;
    /**
     * A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
     */
    task?: pulumi.Input<number>;
    /**
     * A Single Task and the Number of Required Threads.
     */
    thread?: pulumi.Input<number>;
    /**
     * The Job of the Environment Variable.
     */
    variables?: pulumi.Input<string>;
}
