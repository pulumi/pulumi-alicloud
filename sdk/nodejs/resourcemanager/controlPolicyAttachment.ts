// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Resource Manager Control Policy Attachment resource.
 *
 * For information about Resource Manager Control Policy Attachment and how to use it, see [What is Control Policy Attachment](https://www.alibabacloud.com/help/en/resource-management/resource-directory/developer-reference/api-resourcemanager-2020-03-31-attachcontrolpolicy).
 *
 * > **NOTE:** Available since v1.120.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultControlPolicy = new alicloud.resourcemanager.ControlPolicy("default", {
 *     controlPolicyName: name,
 *     description: name,
 *     effectScope: "RAM",
 *     policyDocument: `  {
 *     "Version": "1",
 *     "Statement": [
 *       {
 *         "Effect": "Deny",
 *         "Action": [
 *           "ram:UpdateRole",
 *           "ram:DeleteRole",
 *           "ram:AttachPolicyToRole",
 *           "ram:DetachPolicyFromRole"
 *         ],
 *         "Resource": "acs:ram:*:*:role/ResourceDirectoryAccountAccessRole"
 *       }
 *     ]
 *   }
 * `,
 * });
 * const defaultFolder = new alicloud.resourcemanager.Folder("default", {folderName: `${name}-${_default.result}`});
 * const defaultControlPolicyAttachment = new alicloud.resourcemanager.ControlPolicyAttachment("default", {
 *     policyId: defaultControlPolicy.id,
 *     targetId: defaultFolder.id,
 * });
 * ```
 *
 * ## Import
 *
 * Resource Manager Control Policy Attachment can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:resourcemanager/controlPolicyAttachment:ControlPolicyAttachment example <policy_id>:<target_id>
 * ```
 */
export class ControlPolicyAttachment extends pulumi.CustomResource {
    /**
     * Get an existing ControlPolicyAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ControlPolicyAttachmentState, opts?: pulumi.CustomResourceOptions): ControlPolicyAttachment {
        return new ControlPolicyAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:resourcemanager/controlPolicyAttachment:ControlPolicyAttachment';

    /**
     * Returns true if the given object is an instance of ControlPolicyAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ControlPolicyAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ControlPolicyAttachment.__pulumiType;
    }

    /**
     * The ID of the access control policy.
     */
    declare public readonly policyId: pulumi.Output<string>;
    /**
     * The ID of the object to which you want to attach the access control policy.
     */
    declare public readonly targetId: pulumi.Output<string>;

    /**
     * Create a ControlPolicyAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ControlPolicyAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ControlPolicyAttachmentArgs | ControlPolicyAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ControlPolicyAttachmentState | undefined;
            resourceInputs["policyId"] = state?.policyId;
            resourceInputs["targetId"] = state?.targetId;
        } else {
            const args = argsOrState as ControlPolicyAttachmentArgs | undefined;
            if (args?.policyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if (args?.targetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            resourceInputs["policyId"] = args?.policyId;
            resourceInputs["targetId"] = args?.targetId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ControlPolicyAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ControlPolicyAttachment resources.
 */
export interface ControlPolicyAttachmentState {
    /**
     * The ID of the access control policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The ID of the object to which you want to attach the access control policy.
     */
    targetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ControlPolicyAttachment resource.
 */
export interface ControlPolicyAttachmentArgs {
    /**
     * The ID of the access control policy.
     */
    policyId: pulumi.Input<string>;
    /**
     * The ID of the object to which you want to attach the access control policy.
     */
    targetId: pulumi.Input<string>;
}
