// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Resource Manager Auto Grouping Rule resource.
 *
 * Auto grouping rules of resource group.
 *
 * For information about Resource Manager Auto Grouping Rule and how to use it, see [What is Auto Grouping Rule](https://www.alibabacloud.com/help/en/resource-management/resource-group/developer-reference/api-resourcemanager-2020-03-31-createautogroupingrule-rg).
 *
 * > **NOTE:** Available since v1.246.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new alicloud.resourcemanager.AutoGroupingRule("default", {
 *     ruleContents: [{
 *         targetResourceGroupCondition: `    {
 *         "children": [
 *       {
 *         "desired": "rg-aek*****sbvy",
 *         "featurePath": ".resourceGroupId",
 *         "featureSource": "RESOURCE",
 *         "operator": "StringEquals"
 *       }
 *         ],
 *         "operator": "and"
 *     }
 * `,
 *         autoGroupingScopeCondition: `    {
 *         "children": [
 *       {
 *         "desired": "name_a",
 *         "featurePath": ".resourceName",
 *         "featureSource": "RESOURCE",
 *         "operator": "StringEqualsAny"
 *       }
 *         ],
 *         "operator": "and"
 *     }
 * `,
 *     }],
 *     ruleDesc: name,
 *     ruleType: "custom_condition",
 *     regionIdsScope: "cn-hangzhou,cn-shanghai",
 *     resourceIdsScope: "imock-xxxxxx",
 *     resourceGroupIdsScope: "rg-aek22*****3sbvz",
 *     resourceTypesScope: "ecs.instance,vpc.vpc",
 *     ruleName: name,
 * });
 * ```
 *
 * ## Import
 *
 * Resource Manager Auto Grouping Rule can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:resourcemanager/autoGroupingRule:AutoGroupingRule example <id>
 * ```
 */
export class AutoGroupingRule extends pulumi.CustomResource {
    /**
     * Get an existing AutoGroupingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoGroupingRuleState, opts?: pulumi.CustomResourceOptions): AutoGroupingRule {
        return new AutoGroupingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:resourcemanager/autoGroupingRule:AutoGroupingRule';

    /**
     * Returns true if the given object is an instance of AutoGroupingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoGroupingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoGroupingRule.__pulumiType;
    }

    /**
     * The IDs of regions to be excluded. Separate multiple IDs with commas (,).
     */
    public readonly excludeRegionIdsScope!: pulumi.Output<string | undefined>;
    /**
     * The IDs of resource groups to be excluded. Separate multiple IDs with commas (,).
     */
    public readonly excludeResourceGroupIdsScope!: pulumi.Output<string | undefined>;
    /**
     * The IDs of resources to be excluded. Separate multiple IDs with commas (,).
     */
    public readonly excludeResourceIdsScope!: pulumi.Output<string | undefined>;
    /**
     * The resource types to be excluded. Separate multiple resource types with commas (,).
     */
    public readonly excludeResourceTypesScope!: pulumi.Output<string | undefined>;
    /**
     * The IDs of regions. Separate multiple IDs with commas (,).
     */
    public readonly regionIdsScope!: pulumi.Output<string | undefined>;
    /**
     * The IDs of resource groups. Separate multiple IDs with commas (,).
     */
    public readonly resourceGroupIdsScope!: pulumi.Output<string | undefined>;
    /**
     * The IDs of resources. Separate multiple IDs with commas (,).
     */
    public readonly resourceIdsScope!: pulumi.Output<string | undefined>;
    /**
     * The resource types. Separate multiple resource types with commas (,).
     */
    public readonly resourceTypesScope!: pulumi.Output<string | undefined>;
    /**
     * The content records of the rule. See `ruleContents` below.
     */
    public readonly ruleContents!: pulumi.Output<outputs.resourcemanager.AutoGroupingRuleRuleContent[]>;
    /**
     * The description of the rule.
     */
    public readonly ruleDesc!: pulumi.Output<string | undefined>;
    /**
     * The name of the rule.
     */
    public readonly ruleName!: pulumi.Output<string>;
    /**
     * The type of the rule. Valid values:
     */
    public readonly ruleType!: pulumi.Output<string>;

    /**
     * Create a AutoGroupingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoGroupingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoGroupingRuleArgs | AutoGroupingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoGroupingRuleState | undefined;
            resourceInputs["excludeRegionIdsScope"] = state ? state.excludeRegionIdsScope : undefined;
            resourceInputs["excludeResourceGroupIdsScope"] = state ? state.excludeResourceGroupIdsScope : undefined;
            resourceInputs["excludeResourceIdsScope"] = state ? state.excludeResourceIdsScope : undefined;
            resourceInputs["excludeResourceTypesScope"] = state ? state.excludeResourceTypesScope : undefined;
            resourceInputs["regionIdsScope"] = state ? state.regionIdsScope : undefined;
            resourceInputs["resourceGroupIdsScope"] = state ? state.resourceGroupIdsScope : undefined;
            resourceInputs["resourceIdsScope"] = state ? state.resourceIdsScope : undefined;
            resourceInputs["resourceTypesScope"] = state ? state.resourceTypesScope : undefined;
            resourceInputs["ruleContents"] = state ? state.ruleContents : undefined;
            resourceInputs["ruleDesc"] = state ? state.ruleDesc : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["ruleType"] = state ? state.ruleType : undefined;
        } else {
            const args = argsOrState as AutoGroupingRuleArgs | undefined;
            if ((!args || args.ruleContents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleContents'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if ((!args || args.ruleType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleType'");
            }
            resourceInputs["excludeRegionIdsScope"] = args ? args.excludeRegionIdsScope : undefined;
            resourceInputs["excludeResourceGroupIdsScope"] = args ? args.excludeResourceGroupIdsScope : undefined;
            resourceInputs["excludeResourceIdsScope"] = args ? args.excludeResourceIdsScope : undefined;
            resourceInputs["excludeResourceTypesScope"] = args ? args.excludeResourceTypesScope : undefined;
            resourceInputs["regionIdsScope"] = args ? args.regionIdsScope : undefined;
            resourceInputs["resourceGroupIdsScope"] = args ? args.resourceGroupIdsScope : undefined;
            resourceInputs["resourceIdsScope"] = args ? args.resourceIdsScope : undefined;
            resourceInputs["resourceTypesScope"] = args ? args.resourceTypesScope : undefined;
            resourceInputs["ruleContents"] = args ? args.ruleContents : undefined;
            resourceInputs["ruleDesc"] = args ? args.ruleDesc : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["ruleType"] = args ? args.ruleType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoGroupingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AutoGroupingRule resources.
 */
export interface AutoGroupingRuleState {
    /**
     * The IDs of regions to be excluded. Separate multiple IDs with commas (,).
     */
    excludeRegionIdsScope?: pulumi.Input<string>;
    /**
     * The IDs of resource groups to be excluded. Separate multiple IDs with commas (,).
     */
    excludeResourceGroupIdsScope?: pulumi.Input<string>;
    /**
     * The IDs of resources to be excluded. Separate multiple IDs with commas (,).
     */
    excludeResourceIdsScope?: pulumi.Input<string>;
    /**
     * The resource types to be excluded. Separate multiple resource types with commas (,).
     */
    excludeResourceTypesScope?: pulumi.Input<string>;
    /**
     * The IDs of regions. Separate multiple IDs with commas (,).
     */
    regionIdsScope?: pulumi.Input<string>;
    /**
     * The IDs of resource groups. Separate multiple IDs with commas (,).
     */
    resourceGroupIdsScope?: pulumi.Input<string>;
    /**
     * The IDs of resources. Separate multiple IDs with commas (,).
     */
    resourceIdsScope?: pulumi.Input<string>;
    /**
     * The resource types. Separate multiple resource types with commas (,).
     */
    resourceTypesScope?: pulumi.Input<string>;
    /**
     * The content records of the rule. See `ruleContents` below.
     */
    ruleContents?: pulumi.Input<pulumi.Input<inputs.resourcemanager.AutoGroupingRuleRuleContent>[]>;
    /**
     * The description of the rule.
     */
    ruleDesc?: pulumi.Input<string>;
    /**
     * The name of the rule.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * The type of the rule. Valid values:
     */
    ruleType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutoGroupingRule resource.
 */
export interface AutoGroupingRuleArgs {
    /**
     * The IDs of regions to be excluded. Separate multiple IDs with commas (,).
     */
    excludeRegionIdsScope?: pulumi.Input<string>;
    /**
     * The IDs of resource groups to be excluded. Separate multiple IDs with commas (,).
     */
    excludeResourceGroupIdsScope?: pulumi.Input<string>;
    /**
     * The IDs of resources to be excluded. Separate multiple IDs with commas (,).
     */
    excludeResourceIdsScope?: pulumi.Input<string>;
    /**
     * The resource types to be excluded. Separate multiple resource types with commas (,).
     */
    excludeResourceTypesScope?: pulumi.Input<string>;
    /**
     * The IDs of regions. Separate multiple IDs with commas (,).
     */
    regionIdsScope?: pulumi.Input<string>;
    /**
     * The IDs of resource groups. Separate multiple IDs with commas (,).
     */
    resourceGroupIdsScope?: pulumi.Input<string>;
    /**
     * The IDs of resources. Separate multiple IDs with commas (,).
     */
    resourceIdsScope?: pulumi.Input<string>;
    /**
     * The resource types. Separate multiple resource types with commas (,).
     */
    resourceTypesScope?: pulumi.Input<string>;
    /**
     * The content records of the rule. See `ruleContents` below.
     */
    ruleContents: pulumi.Input<pulumi.Input<inputs.resourcemanager.AutoGroupingRuleRuleContent>[]>;
    /**
     * The description of the rule.
     */
    ruleDesc?: pulumi.Input<string>;
    /**
     * The name of the rule.
     */
    ruleName: pulumi.Input<string>;
    /**
     * The type of the rule. Valid values:
     */
    ruleType: pulumi.Input<string>;
}
