// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides an OTS tunnel resource.
 *
 * For information about OTS tunnel and how to use it, see [Tunnel overview](https://www.alibabacloud.com/help/en/tablestore/latest/tunnel-service-overview).
 *
 * > **NOTE:** Available since v1.172.0.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultInstance = new alicloud.ots.Instance("default", {
 *     name: `${name}-${_default.result}`,
 *     description: name,
 *     accessedBy: "Any",
 *     tags: {
 *         Created: "TF",
 *         For: "example",
 *     },
 * });
 * const defaultTable = new alicloud.ots.Table("default", {
 *     instanceName: defaultInstance.name,
 *     tableName: "tf_example",
 *     timeToLive: -1,
 *     maxVersion: 1,
 *     enableSse: true,
 *     sseKeyType: "SSE_KMS_SERVICE",
 *     primaryKeys: [
 *         {
 *             name: "pk1",
 *             type: "Integer",
 *         },
 *         {
 *             name: "pk2",
 *             type: "String",
 *         },
 *         {
 *             name: "pk3",
 *             type: "Binary",
 *         },
 *     ],
 * });
 * const defaultTunnel = new alicloud.ots.Tunnel("default", {
 *     instanceName: defaultInstance.name,
 *     tableName: defaultTable.tableName,
 *     tunnelName: "tf_example",
 *     tunnelType: "BaseAndStream",
 * });
 * ```
 *
 * ## Import
 *
 * OTS tunnel can be imported using id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ots/tunnel:Tunnel foo <instance_name>:<table_name>:<tunnel_name>
 * ```
 */
export class Tunnel extends pulumi.CustomResource {
    /**
     * Get an existing Tunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TunnelState, opts?: pulumi.CustomResourceOptions): Tunnel {
        return new Tunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ots/tunnel:Tunnel';

    /**
     * Returns true if the given object is an instance of Tunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tunnel.__pulumiType;
    }

    /**
     * The channels of OTS tunnel. Each element contains the following attributes:
     */
    declare public /*out*/ readonly channels: pulumi.Output<outputs.ots.TunnelChannel[]>;
    /**
     * The creation time of the Tunnel.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<number>;
    /**
     * Whether the tunnel has expired.
     */
    declare public /*out*/ readonly expired: pulumi.Output<boolean>;
    /**
     * The name of the OTS instance in which table will located.
     */
    declare public readonly instanceName: pulumi.Output<string>;
    /**
     * The name of the OTS table. If changed, a new table would be created.
     */
    declare public readonly tableName: pulumi.Output<string>;
    /**
     * The tunnel id of the OTS which could not be changed.
     */
    declare public /*out*/ readonly tunnelId: pulumi.Output<string>;
    /**
     * The name of the OTS tunnel. If changed, a new tunnel would be created.
     */
    declare public readonly tunnelName: pulumi.Output<string>;
    /**
     * The latest consumption time of the tunnel, unix time in nanosecond.
     */
    declare public /*out*/ readonly tunnelRpo: pulumi.Output<number>;
    /**
     * The stage of OTS tunnel, valid values: `InitBaseDataAndStreamShard`, `ProcessBaseData`, `ProcessStream`.
     */
    declare public /*out*/ readonly tunnelStage: pulumi.Output<string>;
    /**
     * The type of the OTS tunnel. Only `BaseAndStream`, `BaseData` or `Stream` is allowed.
     */
    declare public readonly tunnelType: pulumi.Output<string>;

    /**
     * Create a Tunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TunnelArgs | TunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TunnelState | undefined;
            resourceInputs["channels"] = state?.channels;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["expired"] = state?.expired;
            resourceInputs["instanceName"] = state?.instanceName;
            resourceInputs["tableName"] = state?.tableName;
            resourceInputs["tunnelId"] = state?.tunnelId;
            resourceInputs["tunnelName"] = state?.tunnelName;
            resourceInputs["tunnelRpo"] = state?.tunnelRpo;
            resourceInputs["tunnelStage"] = state?.tunnelStage;
            resourceInputs["tunnelType"] = state?.tunnelType;
        } else {
            const args = argsOrState as TunnelArgs | undefined;
            if (args?.instanceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if (args?.tableName === undefined && !opts.urn) {
                throw new Error("Missing required property 'tableName'");
            }
            if (args?.tunnelName === undefined && !opts.urn) {
                throw new Error("Missing required property 'tunnelName'");
            }
            if (args?.tunnelType === undefined && !opts.urn) {
                throw new Error("Missing required property 'tunnelType'");
            }
            resourceInputs["instanceName"] = args?.instanceName;
            resourceInputs["tableName"] = args?.tableName;
            resourceInputs["tunnelName"] = args?.tunnelName;
            resourceInputs["tunnelType"] = args?.tunnelType;
            resourceInputs["channels"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["expired"] = undefined /*out*/;
            resourceInputs["tunnelId"] = undefined /*out*/;
            resourceInputs["tunnelRpo"] = undefined /*out*/;
            resourceInputs["tunnelStage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Tunnel resources.
 */
export interface TunnelState {
    /**
     * The channels of OTS tunnel. Each element contains the following attributes:
     */
    channels?: pulumi.Input<pulumi.Input<inputs.ots.TunnelChannel>[]>;
    /**
     * The creation time of the Tunnel.
     */
    createTime?: pulumi.Input<number>;
    /**
     * Whether the tunnel has expired.
     */
    expired?: pulumi.Input<boolean>;
    /**
     * The name of the OTS instance in which table will located.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The name of the OTS table. If changed, a new table would be created.
     */
    tableName?: pulumi.Input<string>;
    /**
     * The tunnel id of the OTS which could not be changed.
     */
    tunnelId?: pulumi.Input<string>;
    /**
     * The name of the OTS tunnel. If changed, a new tunnel would be created.
     */
    tunnelName?: pulumi.Input<string>;
    /**
     * The latest consumption time of the tunnel, unix time in nanosecond.
     */
    tunnelRpo?: pulumi.Input<number>;
    /**
     * The stage of OTS tunnel, valid values: `InitBaseDataAndStreamShard`, `ProcessBaseData`, `ProcessStream`.
     */
    tunnelStage?: pulumi.Input<string>;
    /**
     * The type of the OTS tunnel. Only `BaseAndStream`, `BaseData` or `Stream` is allowed.
     */
    tunnelType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Tunnel resource.
 */
export interface TunnelArgs {
    /**
     * The name of the OTS instance in which table will located.
     */
    instanceName: pulumi.Input<string>;
    /**
     * The name of the OTS table. If changed, a new table would be created.
     */
    tableName: pulumi.Input<string>;
    /**
     * The name of the OTS tunnel. If changed, a new tunnel would be created.
     */
    tunnelName: pulumi.Input<string>;
    /**
     * The type of the OTS tunnel. Only `BaseAndStream`, `BaseData` or `Stream` is allowed.
     */
    tunnelType: pulumi.Input<string>;
}
