// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an OTS secondary index resource.
 *
 * For information about OTS secondary index and how to use it, see [Secondary index overview](https://www.alibabacloud.com/help/en/tablestore/latest/secondary-index-overview).
 *
 * > **NOTE:** Available since v1.187.0.
 *
 * ## Import
 *
 * OTS secondary index can be imported using id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:ots/secondaryIndex:SecondaryIndex index1 <instance_name>:<table_name>:<index_name>:<index_type>
 * ```
 */
export class SecondaryIndex extends pulumi.CustomResource {
    /**
     * Get an existing SecondaryIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecondaryIndexState, opts?: pulumi.CustomResourceOptions): SecondaryIndex {
        return new SecondaryIndex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ots/secondaryIndex:SecondaryIndex';

    /**
     * Returns true if the given object is an instance of SecondaryIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecondaryIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecondaryIndex.__pulumiType;
    }

    /**
     * A list of defined column for index, referenced from Table's primary keys or predefined columns.
     */
    public readonly definedColumns!: pulumi.Output<string[] | undefined>;
    /**
     * whether the index contains data that already exists in the data table. When includeBaseData is set to true, it means that stock data is included.
     */
    public readonly includeBaseData!: pulumi.Output<boolean>;
    /**
     * The index name of the OTS Table. If changed, a new index would be created.
     */
    public readonly indexName!: pulumi.Output<string>;
    /**
     * The index type of the OTS Table. If changed, a new index would be created, only `Global` or `Local` is allowed.
     */
    public readonly indexType!: pulumi.Output<string>;
    /**
     * The name of the OTS instance in which table will located.
     */
    public readonly instanceName!: pulumi.Output<string>;
    /**
     * A list of primary keys for index, referenced from Table's primary keys or predefined columns.
     */
    public readonly primaryKeys!: pulumi.Output<string[]>;
    /**
     * The name of the OTS table. If changed, a new table would be created.
     */
    public readonly tableName!: pulumi.Output<string>;

    /**
     * Create a SecondaryIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecondaryIndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecondaryIndexArgs | SecondaryIndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecondaryIndexState | undefined;
            resourceInputs["definedColumns"] = state ? state.definedColumns : undefined;
            resourceInputs["includeBaseData"] = state ? state.includeBaseData : undefined;
            resourceInputs["indexName"] = state ? state.indexName : undefined;
            resourceInputs["indexType"] = state ? state.indexType : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["primaryKeys"] = state ? state.primaryKeys : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
        } else {
            const args = argsOrState as SecondaryIndexArgs | undefined;
            if ((!args || args.includeBaseData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'includeBaseData'");
            }
            if ((!args || args.indexName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexName'");
            }
            if ((!args || args.indexType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexType'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.primaryKeys === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryKeys'");
            }
            if ((!args || args.tableName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableName'");
            }
            resourceInputs["definedColumns"] = args ? args.definedColumns : undefined;
            resourceInputs["includeBaseData"] = args ? args.includeBaseData : undefined;
            resourceInputs["indexName"] = args ? args.indexName : undefined;
            resourceInputs["indexType"] = args ? args.indexType : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["primaryKeys"] = args ? args.primaryKeys : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecondaryIndex.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecondaryIndex resources.
 */
export interface SecondaryIndexState {
    /**
     * A list of defined column for index, referenced from Table's primary keys or predefined columns.
     */
    definedColumns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * whether the index contains data that already exists in the data table. When includeBaseData is set to true, it means that stock data is included.
     */
    includeBaseData?: pulumi.Input<boolean>;
    /**
     * The index name of the OTS Table. If changed, a new index would be created.
     */
    indexName?: pulumi.Input<string>;
    /**
     * The index type of the OTS Table. If changed, a new index would be created, only `Global` or `Local` is allowed.
     */
    indexType?: pulumi.Input<string>;
    /**
     * The name of the OTS instance in which table will located.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * A list of primary keys for index, referenced from Table's primary keys or predefined columns.
     */
    primaryKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the OTS table. If changed, a new table would be created.
     */
    tableName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecondaryIndex resource.
 */
export interface SecondaryIndexArgs {
    /**
     * A list of defined column for index, referenced from Table's primary keys or predefined columns.
     */
    definedColumns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * whether the index contains data that already exists in the data table. When includeBaseData is set to true, it means that stock data is included.
     */
    includeBaseData: pulumi.Input<boolean>;
    /**
     * The index name of the OTS Table. If changed, a new index would be created.
     */
    indexName: pulumi.Input<string>;
    /**
     * The index type of the OTS Table. If changed, a new index would be created, only `Global` or `Local` is allowed.
     */
    indexType: pulumi.Input<string>;
    /**
     * The name of the OTS instance in which table will located.
     */
    instanceName: pulumi.Input<string>;
    /**
     * A list of primary keys for index, referenced from Table's primary keys or predefined columns.
     */
    primaryKeys: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the OTS table. If changed, a new table would be created.
     */
    tableName: pulumi.Input<string>;
}
