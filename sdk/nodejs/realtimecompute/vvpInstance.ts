// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * Realtime Compute Vvp Instance can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:realtimecompute/vvpInstance:VvpInstance example <id>
 * ```
 */
export class VvpInstance extends pulumi.CustomResource {
    /**
     * Get an existing VvpInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VvpInstanceState, opts?: pulumi.CustomResourceOptions): VvpInstance {
        return new VvpInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:realtimecompute/vvpInstance:VvpInstance';

    /**
     * Returns true if the given object is an instance of VvpInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VvpInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VvpInstance.__pulumiType;
    }

    /**
     * The creation time of the resource.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The number of subscription periods. If the payment type is PRE, this parameter is required.
     */
    declare public readonly duration: pulumi.Output<number | undefined>;
    /**
     * The payment type of the resource.
     */
    declare public readonly paymentType: pulumi.Output<string>;
    /**
     * The subscription period. If the payment type is PRE, this parameter is required.
     */
    declare public readonly pricingCycle: pulumi.Output<string | undefined>;
    /**
     * The resource group to which the newly purchased instance belongs.
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * Resource specifications. See `resourceSpec` below.
     */
    declare public readonly resourceSpec: pulumi.Output<outputs.realtimecompute.VvpInstanceResourceSpec>;
    /**
     * The status of the resource.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Store information. See `storage` below.
     */
    declare public readonly storage: pulumi.Output<outputs.realtimecompute.VvpInstanceStorage>;
    /**
     * The tags of the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The VPC ID of the user.
     */
    declare public readonly vpcId: pulumi.Output<string>;
    /**
     * Virtual Switch ID.
     */
    declare public readonly vswitchIds: pulumi.Output<string[]>;
    /**
     * The name of the workspace.
     */
    declare public readonly vvpInstanceName: pulumi.Output<string>;
    /**
     * The zone ID of the resource.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a VvpInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VvpInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VvpInstanceArgs | VvpInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VvpInstanceState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["duration"] = state?.duration;
            resourceInputs["paymentType"] = state?.paymentType;
            resourceInputs["pricingCycle"] = state?.pricingCycle;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["resourceSpec"] = state?.resourceSpec;
            resourceInputs["status"] = state?.status;
            resourceInputs["storage"] = state?.storage;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["vswitchIds"] = state?.vswitchIds;
            resourceInputs["vvpInstanceName"] = state?.vvpInstanceName;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as VvpInstanceArgs | undefined;
            if (args?.paymentType === undefined && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            if (args?.storage === undefined && !opts.urn) {
                throw new Error("Missing required property 'storage'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if (args?.vswitchIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'vswitchIds'");
            }
            if (args?.vvpInstanceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'vvpInstanceName'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["duration"] = args?.duration;
            resourceInputs["paymentType"] = args?.paymentType;
            resourceInputs["pricingCycle"] = args?.pricingCycle;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["resourceSpec"] = args?.resourceSpec;
            resourceInputs["storage"] = args?.storage;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["vswitchIds"] = args?.vswitchIds;
            resourceInputs["vvpInstanceName"] = args?.vvpInstanceName;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VvpInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VvpInstance resources.
 */
export interface VvpInstanceState {
    /**
     * The creation time of the resource.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The number of subscription periods. If the payment type is PRE, this parameter is required.
     */
    duration?: pulumi.Input<number>;
    /**
     * The payment type of the resource.
     */
    paymentType?: pulumi.Input<string>;
    /**
     * The subscription period. If the payment type is PRE, this parameter is required.
     */
    pricingCycle?: pulumi.Input<string>;
    /**
     * The resource group to which the newly purchased instance belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Resource specifications. See `resourceSpec` below.
     */
    resourceSpec?: pulumi.Input<inputs.realtimecompute.VvpInstanceResourceSpec>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * Store information. See `storage` below.
     */
    storage?: pulumi.Input<inputs.realtimecompute.VvpInstanceStorage>;
    /**
     * The tags of the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The VPC ID of the user.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Virtual Switch ID.
     */
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the workspace.
     */
    vvpInstanceName?: pulumi.Input<string>;
    /**
     * The zone ID of the resource.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VvpInstance resource.
 */
export interface VvpInstanceArgs {
    /**
     * The number of subscription periods. If the payment type is PRE, this parameter is required.
     */
    duration?: pulumi.Input<number>;
    /**
     * The payment type of the resource.
     */
    paymentType: pulumi.Input<string>;
    /**
     * The subscription period. If the payment type is PRE, this parameter is required.
     */
    pricingCycle?: pulumi.Input<string>;
    /**
     * The resource group to which the newly purchased instance belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Resource specifications. See `resourceSpec` below.
     */
    resourceSpec?: pulumi.Input<inputs.realtimecompute.VvpInstanceResourceSpec>;
    /**
     * Store information. See `storage` below.
     */
    storage: pulumi.Input<inputs.realtimecompute.VvpInstanceStorage>;
    /**
     * The tags of the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The VPC ID of the user.
     */
    vpcId: pulumi.Input<string>;
    /**
     * Virtual Switch ID.
     */
    vswitchIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the workspace.
     */
    vvpInstanceName: pulumi.Input<string>;
    /**
     * The zone ID of the resource.
     */
    zoneId: pulumi.Input<string>;
}
