// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Config (Config) Aggregator resource.
 *
 * For information about Cloud Config (Config) Aggregator and how to use it, see [What is Aggregator](https://www.alibabacloud.com/help/en/cloud-config/latest/api-config-2020-09-07-createaggregator).
 *
 * > **NOTE:** Available since v1.124.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf_example";
 * const _default = alicloud.resourcemanager.getAccounts({
 *     status: "CreateSuccess",
 * });
 * const last = _default.then(_default => _default.accounts).length.apply(length => length - 1);
 * const defaultAggregator = new alicloud.cfg.Aggregator("default", {
 *     aggregatorAccounts: [{
 *         accountId: _default.then(_default => _default.accounts[last].accountId),
 *         accountName: _default.then(_default => _default.accounts[last].displayName),
 *         accountType: "ResourceDirectory",
 *     }],
 *     aggregatorName: name,
 *     description: name,
 *     aggregatorType: "CUSTOM",
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Config (Config) Aggregator can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cfg/aggregator:Aggregator example <id>
 * ```
 */
export class Aggregator extends pulumi.CustomResource {
    /**
     * Get an existing Aggregator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AggregatorState, opts?: pulumi.CustomResourceOptions): Aggregator {
        return new Aggregator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cfg/aggregator:Aggregator';

    /**
     * Returns true if the given object is an instance of Aggregator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Aggregator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Aggregator.__pulumiType;
    }

    /**
     * The member accounts of the account group. See `aggregatorAccounts` below.
     * > **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
     */
    declare public readonly aggregatorAccounts: pulumi.Output<outputs.cfg.AggregatorAggregatorAccount[]>;
    /**
     * The name of the account group.
     */
    declare public readonly aggregatorName: pulumi.Output<string>;
    /**
     * The type of the account group. Default value: `CUSTOM`. Valid values:
     * - `RD`: Global account group.
     * - `FOLDER`: Folder account group.
     * - `CUSTOM`: Custom account group.
     */
    declare public readonly aggregatorType: pulumi.Output<string>;
    /**
     * (Available since v1.262.0) The timestamp when the account group was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<number>;
    /**
     * The description of the account group.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The ID of the attached folder. You can specify multiple folder IDs. Separate the IDs with commas (,). **NOTE:** If `aggregatorType` is set to `FOLDER`, `folderId` is required.
     */
    declare public readonly folderId: pulumi.Output<string | undefined>;
    /**
     * The status of the account group.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a Aggregator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AggregatorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AggregatorArgs | AggregatorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AggregatorState | undefined;
            resourceInputs["aggregatorAccounts"] = state?.aggregatorAccounts;
            resourceInputs["aggregatorName"] = state?.aggregatorName;
            resourceInputs["aggregatorType"] = state?.aggregatorType;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as AggregatorArgs | undefined;
            if (args?.aggregatorName === undefined && !opts.urn) {
                throw new Error("Missing required property 'aggregatorName'");
            }
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["aggregatorAccounts"] = args?.aggregatorAccounts;
            resourceInputs["aggregatorName"] = args?.aggregatorName;
            resourceInputs["aggregatorType"] = args?.aggregatorType;
            resourceInputs["description"] = args?.description;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Aggregator.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Aggregator resources.
 */
export interface AggregatorState {
    /**
     * The member accounts of the account group. See `aggregatorAccounts` below.
     * > **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
     */
    aggregatorAccounts?: pulumi.Input<pulumi.Input<inputs.cfg.AggregatorAggregatorAccount>[]>;
    /**
     * The name of the account group.
     */
    aggregatorName?: pulumi.Input<string>;
    /**
     * The type of the account group. Default value: `CUSTOM`. Valid values:
     * - `RD`: Global account group.
     * - `FOLDER`: Folder account group.
     * - `CUSTOM`: Custom account group.
     */
    aggregatorType?: pulumi.Input<string>;
    /**
     * (Available since v1.262.0) The timestamp when the account group was created.
     */
    createTime?: pulumi.Input<number>;
    /**
     * The description of the account group.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the attached folder. You can specify multiple folder IDs. Separate the IDs with commas (,). **NOTE:** If `aggregatorType` is set to `FOLDER`, `folderId` is required.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The status of the account group.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Aggregator resource.
 */
export interface AggregatorArgs {
    /**
     * The member accounts of the account group. See `aggregatorAccounts` below.
     * > **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
     */
    aggregatorAccounts?: pulumi.Input<pulumi.Input<inputs.cfg.AggregatorAggregatorAccount>[]>;
    /**
     * The name of the account group.
     */
    aggregatorName: pulumi.Input<string>;
    /**
     * The type of the account group. Default value: `CUSTOM`. Valid values:
     * - `RD`: Global account group.
     * - `FOLDER`: Folder account group.
     * - `CUSTOM`: Custom account group.
     */
    aggregatorType?: pulumi.Input<string>;
    /**
     * The description of the account group.
     */
    description: pulumi.Input<string>;
    /**
     * The ID of the attached folder. You can specify multiple folder IDs. Separate the IDs with commas (,). **NOTE:** If `aggregatorType` is set to `FOLDER`, `folderId` is required.
     */
    folderId?: pulumi.Input<string>;
}
