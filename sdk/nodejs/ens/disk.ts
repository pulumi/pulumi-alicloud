// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ENS Disk resource.
 *
 * The disk. When you use it for the first time, please contact the product classmates to add a resource whitelist.
 *
 * For information about ENS Disk and how to use it, see [What is Disk](https://www.alibabacloud.com/help/en/ens/developer-reference/api-ens-2017-11-10-createdisk).
 *
 * > **NOTE:** Available since v1.213.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new alicloud.ens.Disk("default", {
 *     category: "cloud_ssd",
 *     size: 20,
 *     paymentType: "PayAsYouGo",
 *     ensRegionId: "cn-chongqing-11",
 * });
 * ```
 *
 * ## Import
 *
 * ENS Disk can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ens/disk:Disk example <id>
 * ```
 */
export class Disk extends pulumi.CustomResource {
    /**
     * Get an existing Disk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiskState, opts?: pulumi.CustomResourceOptions): Disk {
        return new Disk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ens/disk:Disk';

    /**
     * Returns true if the given object is an instance of Disk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Disk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Disk.__pulumiType;
    }

    /**
     * The category of the disk. Valid values: `cloudEfficiency` (high-efficiency cloud disk), `cloudSsd` (full Flash cloud disk), `localHdd` (local HDD), `localSsd` (local ssd).
     */
    declare public readonly category: pulumi.Output<string>;
    /**
     * The time when the disk was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The name of the disk.
     */
    declare public readonly diskName: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to encrypt the new system disk. Valid values: `true`, `false`(default).
     */
    declare public readonly encrypted: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the edge node.
     */
    declare public readonly ensRegionId: pulumi.Output<string>;
    /**
     * The ID of the KMS key used by the cloud disk. If `encrypted` is set to `true`, the service default key is used when KMSKeyId is empty.
     */
    declare public readonly kmsKeyId: pulumi.Output<string>;
    /**
     * The billing method of the instance. Valid values: `PayAsYouGo`.
     */
    declare public readonly paymentType: pulumi.Output<string>;
    /**
     * The size of the disk instance. Unit: GiB.
     */
    declare public readonly size: pulumi.Output<number | undefined>;
    /**
     * The ID of the snapshot used to create the cloud disk.
     *
     * The SnapshotId and Size parameters have the following limitations:
     * - If the snapshot capacity corresponding to the `snapshotId` parameter is greater than the specified `size` parameter, the Size of the cloud disk created is the Size of the specified snapshot.
     * - If the snapshot capacity corresponding to the `snapshotId` parameter is less than the set `size` parameter value, the Size of the cloud disk created is the specified `size` parameter value.
     */
    declare public readonly snapshotId: pulumi.Output<string | undefined>;
    /**
     * The status of the disk.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The label to which the instance is bound.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Disk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiskArgs | DiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiskState | undefined;
            resourceInputs["category"] = state?.category;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["diskName"] = state?.diskName;
            resourceInputs["encrypted"] = state?.encrypted;
            resourceInputs["ensRegionId"] = state?.ensRegionId;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["paymentType"] = state?.paymentType;
            resourceInputs["size"] = state?.size;
            resourceInputs["snapshotId"] = state?.snapshotId;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as DiskArgs | undefined;
            if (args?.category === undefined && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if (args?.ensRegionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'ensRegionId'");
            }
            if (args?.paymentType === undefined && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            resourceInputs["category"] = args?.category;
            resourceInputs["diskName"] = args?.diskName;
            resourceInputs["encrypted"] = args?.encrypted;
            resourceInputs["ensRegionId"] = args?.ensRegionId;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["paymentType"] = args?.paymentType;
            resourceInputs["size"] = args?.size;
            resourceInputs["snapshotId"] = args?.snapshotId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Disk.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Disk resources.
 */
export interface DiskState {
    /**
     * The category of the disk. Valid values: `cloudEfficiency` (high-efficiency cloud disk), `cloudSsd` (full Flash cloud disk), `localHdd` (local HDD), `localSsd` (local ssd).
     */
    category?: pulumi.Input<string>;
    /**
     * The time when the disk was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The name of the disk.
     */
    diskName?: pulumi.Input<string>;
    /**
     * Specifies whether to encrypt the new system disk. Valid values: `true`, `false`(default).
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * The ID of the edge node.
     */
    ensRegionId?: pulumi.Input<string>;
    /**
     * The ID of the KMS key used by the cloud disk. If `encrypted` is set to `true`, the service default key is used when KMSKeyId is empty.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The billing method of the instance. Valid values: `PayAsYouGo`.
     */
    paymentType?: pulumi.Input<string>;
    /**
     * The size of the disk instance. Unit: GiB.
     */
    size?: pulumi.Input<number>;
    /**
     * The ID of the snapshot used to create the cloud disk.
     *
     * The SnapshotId and Size parameters have the following limitations:
     * - If the snapshot capacity corresponding to the `snapshotId` parameter is greater than the specified `size` parameter, the Size of the cloud disk created is the Size of the specified snapshot.
     * - If the snapshot capacity corresponding to the `snapshotId` parameter is less than the set `size` parameter value, the Size of the cloud disk created is the specified `size` parameter value.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The status of the disk.
     */
    status?: pulumi.Input<string>;
    /**
     * The label to which the instance is bound.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Disk resource.
 */
export interface DiskArgs {
    /**
     * The category of the disk. Valid values: `cloudEfficiency` (high-efficiency cloud disk), `cloudSsd` (full Flash cloud disk), `localHdd` (local HDD), `localSsd` (local ssd).
     */
    category: pulumi.Input<string>;
    /**
     * The name of the disk.
     */
    diskName?: pulumi.Input<string>;
    /**
     * Specifies whether to encrypt the new system disk. Valid values: `true`, `false`(default).
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * The ID of the edge node.
     */
    ensRegionId: pulumi.Input<string>;
    /**
     * The ID of the KMS key used by the cloud disk. If `encrypted` is set to `true`, the service default key is used when KMSKeyId is empty.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The billing method of the instance. Valid values: `PayAsYouGo`.
     */
    paymentType: pulumi.Input<string>;
    /**
     * The size of the disk instance. Unit: GiB.
     */
    size?: pulumi.Input<number>;
    /**
     * The ID of the snapshot used to create the cloud disk.
     *
     * The SnapshotId and Size parameters have the following limitations:
     * - If the snapshot capacity corresponding to the `snapshotId` parameter is greater than the specified `size` parameter, the Size of the cloud disk created is the Size of the specified snapshot.
     * - If the snapshot capacity corresponding to the `snapshotId` parameter is less than the set `size` parameter value, the Size of the cloud disk created is the specified `size` parameter value.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The label to which the instance is bound.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
