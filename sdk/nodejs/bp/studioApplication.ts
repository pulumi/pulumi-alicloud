// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Architect Design Tools Application resource.
 *
 * For information about Cloud Architect Design Tools Application and how to use it, see [What is Application](https://help.aliyun.com/document_detail/428263.html).
 *
 * > **NOTE:** Available in v1.192.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.bp.StudioApplication("default", {
 *     applicationName: "example_value",
 *     areaId: "example_value",
 *     configuration: {
 *         enableMonitor: "1",
 *     },
 *     instances: [{
 *         id: "example_value",
 *         nodeName: "example_value",
 *         nodeType: "ecs",
 *     }],
 *     resourceGroupId: "example_value",
 *     templateId: "example_value",
 *     variables: {
 *         test: "1",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Architect Design Tools Application can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:bp/studioApplication:StudioApplication example <id>
 * ```
 */
export class StudioApplication extends pulumi.CustomResource {
    /**
     * Get an existing StudioApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StudioApplicationState, opts?: pulumi.CustomResourceOptions): StudioApplication {
        return new StudioApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:bp/studioApplication:StudioApplication';

    /**
     * Returns true if the given object is an instance of StudioApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StudioApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StudioApplication.__pulumiType;
    }

    /**
     * The name of the application.
     */
    public readonly applicationName!: pulumi.Output<string>;
    /**
     * The id of the area.
     */
    public readonly areaId!: pulumi.Output<string | undefined>;
    /**
     * The configuration of the application.
     */
    public readonly configuration!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The instance list. Support the creation of instances in the existing vpc under the application. See the following `Block instances`.
     */
    public readonly instances!: pulumi.Output<outputs.bp.StudioApplicationInstance[] | undefined>;
    /**
     * The id of the resource group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The status of the Application.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The id of the template.
     */
    public readonly templateId!: pulumi.Output<string>;
    /**
     * The variables of the application.
     */
    public readonly variables!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a StudioApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StudioApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StudioApplicationArgs | StudioApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StudioApplicationState | undefined;
            resourceInputs["applicationName"] = state ? state.applicationName : undefined;
            resourceInputs["areaId"] = state ? state.areaId : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as StudioApplicationArgs | undefined;
            if ((!args || args.applicationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationName'");
            }
            if ((!args || args.templateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            resourceInputs["applicationName"] = args ? args.applicationName : undefined;
            resourceInputs["areaId"] = args ? args.areaId : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["variables"] = args ? args.variables : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StudioApplication.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StudioApplication resources.
 */
export interface StudioApplicationState {
    /**
     * The name of the application.
     */
    applicationName?: pulumi.Input<string>;
    /**
     * The id of the area.
     */
    areaId?: pulumi.Input<string>;
    /**
     * The configuration of the application.
     */
    configuration?: pulumi.Input<{[key: string]: any}>;
    /**
     * The instance list. Support the creation of instances in the existing vpc under the application. See the following `Block instances`.
     */
    instances?: pulumi.Input<pulumi.Input<inputs.bp.StudioApplicationInstance>[]>;
    /**
     * The id of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The status of the Application.
     */
    status?: pulumi.Input<string>;
    /**
     * The id of the template.
     */
    templateId?: pulumi.Input<string>;
    /**
     * The variables of the application.
     */
    variables?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a StudioApplication resource.
 */
export interface StudioApplicationArgs {
    /**
     * The name of the application.
     */
    applicationName: pulumi.Input<string>;
    /**
     * The id of the area.
     */
    areaId?: pulumi.Input<string>;
    /**
     * The configuration of the application.
     */
    configuration?: pulumi.Input<{[key: string]: any}>;
    /**
     * The instance list. Support the creation of instances in the existing vpc under the application. See the following `Block instances`.
     */
    instances?: pulumi.Input<pulumi.Input<inputs.bp.StudioApplicationInstance>[]>;
    /**
     * The id of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The id of the template.
     */
    templateId: pulumi.Input<string>;
    /**
     * The variables of the application.
     */
    variables?: pulumi.Input<{[key: string]: any}>;
}
