// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AuditLogConfigArgs, AuditLogConfigState } from "./auditLogConfig";
export type AuditLogConfig = import("./auditLogConfig").AuditLogConfig;
export const AuditLogConfig: typeof import("./auditLogConfig").AuditLogConfig = null as any;
utilities.lazyLoad(exports, ["AuditLogConfig"], () => require("./auditLogConfig"));

export { BackupPolicyArgs, BackupPolicyState } from "./backupPolicy";
export type BackupPolicy = import("./backupPolicy").BackupPolicy;
export const BackupPolicy: typeof import("./backupPolicy").BackupPolicy = null as any;
utilities.lazyLoad(exports, ["BackupPolicy"], () => require("./backupPolicy"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { GetAccountsArgs, GetAccountsResult, GetAccountsOutputArgs } from "./getAccounts";
export const getAccounts: typeof import("./getAccounts").getAccounts = null as any;
export const getAccountsOutput: typeof import("./getAccounts").getAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getAccounts","getAccountsOutput"], () => require("./getAccounts"));

export { GetConnectionsArgs, GetConnectionsResult, GetConnectionsOutputArgs } from "./getConnections";
export const getConnections: typeof import("./getConnections").getConnections = null as any;
export const getConnectionsOutput: typeof import("./getConnections").getConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getConnections","getConnectionsOutput"], () => require("./getConnections"));

export { GetInstanceClassesArgs, GetInstanceClassesResult, GetInstanceClassesOutputArgs } from "./getInstanceClasses";
export const getInstanceClasses: typeof import("./getInstanceClasses").getInstanceClasses = null as any;
export const getInstanceClassesOutput: typeof import("./getInstanceClasses").getInstanceClassesOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceClasses","getInstanceClassesOutput"], () => require("./getInstanceClasses"));

export { GetInstanceEnginesArgs, GetInstanceEnginesResult, GetInstanceEnginesOutputArgs } from "./getInstanceEngines";
export const getInstanceEngines: typeof import("./getInstanceEngines").getInstanceEngines = null as any;
export const getInstanceEnginesOutput: typeof import("./getInstanceEngines").getInstanceEnginesOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceEngines","getInstanceEnginesOutput"], () => require("./getInstanceEngines"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetPermissionArgs, GetPermissionResult, GetPermissionOutputArgs } from "./getPermission";
export const getPermission: typeof import("./getPermission").getPermission = null as any;
export const getPermissionOutput: typeof import("./getPermission").getPermissionOutput = null as any;
utilities.lazyLoad(exports, ["getPermission","getPermissionOutput"], () => require("./getPermission"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:kvstore/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "alicloud:kvstore/auditLogConfig:AuditLogConfig":
                return new AuditLogConfig(name, <any>undefined, { urn })
            case "alicloud:kvstore/backupPolicy:BackupPolicy":
                return new BackupPolicy(name, <any>undefined, { urn })
            case "alicloud:kvstore/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "alicloud:kvstore/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "kvstore/account", _module)
pulumi.runtime.registerResourceModule("alicloud", "kvstore/auditLogConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "kvstore/backupPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "kvstore/connection", _module)
pulumi.runtime.registerResourceModule("alicloud", "kvstore/instance", _module)
