// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Event Bridge Event Source resource.
 *
 * For information about Event Bridge Event Source and how to use it, see [What is Event Source](https://www.alibabacloud.com/help/en/eventbridge/latest/api-eventbridge-2020-04-01-createeventsource).
 *
 * > **NOTE:** Available since v1.130.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const defaultQueue = new alicloud.mns.Queue("default", {name: `${name}-${_default.result}`});
 * const defaultEventBus = new alicloud.eventbridge.EventBus("default", {eventBusName: `${name}-${_default.result}`});
 * const defaultEventSource = new alicloud.eventbridge.EventSource("default", {
 *     eventBusName: defaultEventBus.eventBusName,
 *     eventSourceName: `${name}-${_default.result}`,
 *     description: name,
 *     linkedExternalSource: true,
 *     externalSourceType: "MNS",
 *     externalSourceConfig: {
 *         QueueName: defaultQueue.name,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Event Bridge Event Source can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:eventbridge/eventSource:EventSource example <event_source_name>
 * ```
 */
export class EventSource extends pulumi.CustomResource {
    /**
     * Get an existing EventSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventSourceState, opts?: pulumi.CustomResourceOptions): EventSource {
        return new EventSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eventbridge/eventSource:EventSource';

    /**
     * Returns true if the given object is an instance of EventSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventSource.__pulumiType;
    }

    /**
     * The description of the event source.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the event bus to which the event source is attached.
     */
    declare public readonly eventBusName: pulumi.Output<string>;
    /**
     * The name of the event source.
     */
    declare public readonly eventSourceName: pulumi.Output<string>;
    /**
     * The configuration of the external data source.
     * When `externalSourceType` is `RabbitMQ`, The following attributes are supported:
     * `RegionId` - The region ID of RabbitMQ.
     * `InstanceId` - The instance ID of RabbitMQ.
     * `VirtualHostName` - The virtual host name of RabbitMQ.
     * `QueueName` - The queue name of RabbitMQ.
     * When `externalSourceType` is `RabbitMQ`, The following attributes are supported:
     * `RegionId` - The region ID of RabbitMQ.
     * `InstanceId` - The instance ID of RabbitMQ.
     * `Topic` - The topic of RabbitMQ.
     * `Offset` -  The offset of RabbitMQ, valid values: `CONSUME_FROM_FIRST_OFFSET`, `CONSUME_FROM_LAST_OFFSET` and `CONSUME_FROM_TIMESTAMP`.
     * `GroupID` - The group ID of consumer.
     * When `externalSourceType` is `MNS`, The following attributes are supported:
     * `QueueName` - The queue name of MNS.
     */
    declare public readonly externalSourceConfig: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the external data source. Valid values: `RabbitMQ`, `RocketMQ` and `MNS`.
     */
    declare public readonly externalSourceType: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to connect to an external data source. Default value: `false`.
     */
    declare public readonly linkedExternalSource: pulumi.Output<boolean | undefined>;

    /**
     * Create a EventSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventSourceArgs | EventSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventSourceState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["eventBusName"] = state?.eventBusName;
            resourceInputs["eventSourceName"] = state?.eventSourceName;
            resourceInputs["externalSourceConfig"] = state?.externalSourceConfig;
            resourceInputs["externalSourceType"] = state?.externalSourceType;
            resourceInputs["linkedExternalSource"] = state?.linkedExternalSource;
        } else {
            const args = argsOrState as EventSourceArgs | undefined;
            if (args?.eventBusName === undefined && !opts.urn) {
                throw new Error("Missing required property 'eventBusName'");
            }
            if (args?.eventSourceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'eventSourceName'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["eventBusName"] = args?.eventBusName;
            resourceInputs["eventSourceName"] = args?.eventSourceName;
            resourceInputs["externalSourceConfig"] = args?.externalSourceConfig;
            resourceInputs["externalSourceType"] = args?.externalSourceType;
            resourceInputs["linkedExternalSource"] = args?.linkedExternalSource;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventSource resources.
 */
export interface EventSourceState {
    /**
     * The description of the event source.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the event bus to which the event source is attached.
     */
    eventBusName?: pulumi.Input<string>;
    /**
     * The name of the event source.
     */
    eventSourceName?: pulumi.Input<string>;
    /**
     * The configuration of the external data source.
     * When `externalSourceType` is `RabbitMQ`, The following attributes are supported:
     * `RegionId` - The region ID of RabbitMQ.
     * `InstanceId` - The instance ID of RabbitMQ.
     * `VirtualHostName` - The virtual host name of RabbitMQ.
     * `QueueName` - The queue name of RabbitMQ.
     * When `externalSourceType` is `RabbitMQ`, The following attributes are supported:
     * `RegionId` - The region ID of RabbitMQ.
     * `InstanceId` - The instance ID of RabbitMQ.
     * `Topic` - The topic of RabbitMQ.
     * `Offset` -  The offset of RabbitMQ, valid values: `CONSUME_FROM_FIRST_OFFSET`, `CONSUME_FROM_LAST_OFFSET` and `CONSUME_FROM_TIMESTAMP`.
     * `GroupID` - The group ID of consumer.
     * When `externalSourceType` is `MNS`, The following attributes are supported:
     * `QueueName` - The queue name of MNS.
     */
    externalSourceConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of the external data source. Valid values: `RabbitMQ`, `RocketMQ` and `MNS`.
     */
    externalSourceType?: pulumi.Input<string>;
    /**
     * Specifies whether to connect to an external data source. Default value: `false`.
     */
    linkedExternalSource?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EventSource resource.
 */
export interface EventSourceArgs {
    /**
     * The description of the event source.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the event bus to which the event source is attached.
     */
    eventBusName: pulumi.Input<string>;
    /**
     * The name of the event source.
     */
    eventSourceName: pulumi.Input<string>;
    /**
     * The configuration of the external data source.
     * When `externalSourceType` is `RabbitMQ`, The following attributes are supported:
     * `RegionId` - The region ID of RabbitMQ.
     * `InstanceId` - The instance ID of RabbitMQ.
     * `VirtualHostName` - The virtual host name of RabbitMQ.
     * `QueueName` - The queue name of RabbitMQ.
     * When `externalSourceType` is `RabbitMQ`, The following attributes are supported:
     * `RegionId` - The region ID of RabbitMQ.
     * `InstanceId` - The instance ID of RabbitMQ.
     * `Topic` - The topic of RabbitMQ.
     * `Offset` -  The offset of RabbitMQ, valid values: `CONSUME_FROM_FIRST_OFFSET`, `CONSUME_FROM_LAST_OFFSET` and `CONSUME_FROM_TIMESTAMP`.
     * `GroupID` - The group ID of consumer.
     * When `externalSourceType` is `MNS`, The following attributes are supported:
     * `QueueName` - The queue name of MNS.
     */
    externalSourceConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of the external data source. Valid values: `RabbitMQ`, `RocketMQ` and `MNS`.
     */
    externalSourceType?: pulumi.Input<string>;
    /**
     * Specifies whether to connect to an external data source. Default value: `false`.
     */
    linkedExternalSource?: pulumi.Input<boolean>;
}
