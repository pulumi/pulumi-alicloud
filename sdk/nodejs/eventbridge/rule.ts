// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Event Bridge Rule resource.
 *
 * For information about Event Bridge Rule and how to use it, see [What is Rule](https://www.alibabacloud.com/help/en/eventbridge/latest/createrule-6).
 *
 * > **NOTE:** Available since v1.129.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = alicloud.getAccount({});
 * const defaultEventBus = new alicloud.eventbridge.EventBus("default", {eventBusName: name});
 * const queue1 = new alicloud.mns.Queue("queue1", {name: name});
 * const mnsEndpointA = std.format({
 *     input: "acs:mns:cn-hangzhou:%s:queues/%s",
 *     args: [
 *         _default.then(_default => _default.id),
 *         queue1.name,
 *     ],
 * }).then(invoke => invoke.result);
 * const fnfEndpoint = std.format({
 *     input: "acs:fnf:cn-hangzhou:%s:flow/${flow}",
 *     args: [_default.then(_default => _default.id)],
 * }).then(invoke => invoke.result);
 * const example = new alicloud.eventbridge.Rule("example", {
 *     eventBusName: defaultEventBus.eventBusName,
 *     ruleName: name,
 *     description: "example",
 *     filterPattern: "{\"source\":[\"crmabc.newsletter\"],\"type\":[\"UserSignUp\", \"UserLogin\"]}",
 *     targets: [{
 *         targetId: "tf-example1",
 *         endpoint: mnsEndpointA,
 *         type: "acs.mns.queue",
 *         paramLists: [
 *             {
 *                 resourceKey: "queue",
 *                 form: "CONSTANT",
 *                 value: "tf-testaccEbRule",
 *             },
 *             {
 *                 resourceKey: "Body",
 *                 form: "ORIGINAL",
 *             },
 *             {
 *                 form: "CONSTANT",
 *                 resourceKey: "IsBase64Encode",
 *                 value: "true",
 *             },
 *         ],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Event Bridge Rule can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:eventbridge/rule:Rule example <event_bus_name>:<rule_name>
 * ```
 */
export class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleState, opts?: pulumi.CustomResourceOptions): Rule {
        return new Rule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:eventbridge/rule:Rule';

    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rule.__pulumiType;
    }

    /**
     * The description of the event rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the event bus.
     */
    public readonly eventBusName!: pulumi.Output<string>;
    /**
     * The pattern to match interested events. Event mode, JSON format. The value description is as follows: `stringEqual` mode. `stringExpression` mode. Each field has up to 5 expressions (map structure).
     */
    public readonly filterPattern!: pulumi.Output<string>;
    /**
     * The name of the event rule.
     */
    public readonly ruleName!: pulumi.Output<string>;
    /**
     * The status of the event rule. Valid values: `ENABLE`, `DISABLE`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The targets of rule. See `targets` below.
     */
    public readonly targets!: pulumi.Output<outputs.eventbridge.RuleTarget[]>;

    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleArgs | RuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventBusName"] = state ? state.eventBusName : undefined;
            resourceInputs["filterPattern"] = state ? state.filterPattern : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
        } else {
            const args = argsOrState as RuleArgs | undefined;
            if ((!args || args.eventBusName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventBusName'");
            }
            if ((!args || args.filterPattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterPattern'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventBusName"] = args ? args.eventBusName : undefined;
            resourceInputs["filterPattern"] = args ? args.filterPattern : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Rule resources.
 */
export interface RuleState {
    /**
     * The description of the event rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the event bus.
     */
    eventBusName?: pulumi.Input<string>;
    /**
     * The pattern to match interested events. Event mode, JSON format. The value description is as follows: `stringEqual` mode. `stringExpression` mode. Each field has up to 5 expressions (map structure).
     */
    filterPattern?: pulumi.Input<string>;
    /**
     * The name of the event rule.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * The status of the event rule. Valid values: `ENABLE`, `DISABLE`.
     */
    status?: pulumi.Input<string>;
    /**
     * The targets of rule. See `targets` below.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.eventbridge.RuleTarget>[]>;
}

/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * The description of the event rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the event bus.
     */
    eventBusName: pulumi.Input<string>;
    /**
     * The pattern to match interested events. Event mode, JSON format. The value description is as follows: `stringEqual` mode. `stringExpression` mode. Each field has up to 5 expressions (map structure).
     */
    filterPattern: pulumi.Input<string>;
    /**
     * The name of the event rule.
     */
    ruleName: pulumi.Input<string>;
    /**
     * The status of the event rule. Valid values: `ENABLE`, `DISABLE`.
     */
    status?: pulumi.Input<string>;
    /**
     * The targets of rule. See `targets` below.
     */
    targets: pulumi.Input<pulumi.Input<inputs.eventbridge.RuleTarget>[]>;
}
