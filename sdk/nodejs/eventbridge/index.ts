// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApiDestinationArgs, ApiDestinationState } from "./apiDestination";
export type ApiDestination = import("./apiDestination").ApiDestination;
export const ApiDestination: typeof import("./apiDestination").ApiDestination = null as any;
utilities.lazyLoad(exports, ["ApiDestination"], () => require("./apiDestination"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { EventBusArgs, EventBusState } from "./eventBus";
export type EventBus = import("./eventBus").EventBus;
export const EventBus: typeof import("./eventBus").EventBus = null as any;
utilities.lazyLoad(exports, ["EventBus"], () => require("./eventBus"));

export { EventSourceArgs, EventSourceState } from "./eventSource";
export type EventSource = import("./eventSource").EventSource;
export const EventSource: typeof import("./eventSource").EventSource = null as any;
utilities.lazyLoad(exports, ["EventSource"], () => require("./eventSource"));

export { GetEventBusesArgs, GetEventBusesResult, GetEventBusesOutputArgs } from "./getEventBuses";
export const getEventBuses: typeof import("./getEventBuses").getEventBuses = null as any;
export const getEventBusesOutput: typeof import("./getEventBuses").getEventBusesOutput = null as any;
utilities.lazyLoad(exports, ["getEventBuses","getEventBusesOutput"], () => require("./getEventBuses"));

export { GetEventSourcesArgs, GetEventSourcesResult, GetEventSourcesOutputArgs } from "./getEventSources";
export const getEventSources: typeof import("./getEventSources").getEventSources = null as any;
export const getEventSourcesOutput: typeof import("./getEventSources").getEventSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getEventSources","getEventSourcesOutput"], () => require("./getEventSources"));

export { GetRulesArgs, GetRulesResult, GetRulesOutputArgs } from "./getRules";
export const getRules: typeof import("./getRules").getRules = null as any;
export const getRulesOutput: typeof import("./getRules").getRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRules","getRulesOutput"], () => require("./getRules"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { ServiceLinkedRoleArgs, ServiceLinkedRoleState } from "./serviceLinkedRole";
export type ServiceLinkedRole = import("./serviceLinkedRole").ServiceLinkedRole;
export const ServiceLinkedRole: typeof import("./serviceLinkedRole").ServiceLinkedRole = null as any;
utilities.lazyLoad(exports, ["ServiceLinkedRole"], () => require("./serviceLinkedRole"));

export { SlrArgs, SlrState } from "./slr";
export type Slr = import("./slr").Slr;
export const Slr: typeof import("./slr").Slr = null as any;
utilities.lazyLoad(exports, ["Slr"], () => require("./slr"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:eventbridge/apiDestination:ApiDestination":
                return new ApiDestination(name, <any>undefined, { urn })
            case "alicloud:eventbridge/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "alicloud:eventbridge/eventBus:EventBus":
                return new EventBus(name, <any>undefined, { urn })
            case "alicloud:eventbridge/eventSource:EventSource":
                return new EventSource(name, <any>undefined, { urn })
            case "alicloud:eventbridge/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "alicloud:eventbridge/serviceLinkedRole:ServiceLinkedRole":
                return new ServiceLinkedRole(name, <any>undefined, { urn })
            case "alicloud:eventbridge/slr:Slr":
                return new Slr(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "eventbridge/apiDestination", _module)
pulumi.runtime.registerResourceModule("alicloud", "eventbridge/connection", _module)
pulumi.runtime.registerResourceModule("alicloud", "eventbridge/eventBus", _module)
pulumi.runtime.registerResourceModule("alicloud", "eventbridge/eventSource", _module)
pulumi.runtime.registerResourceModule("alicloud", "eventbridge/rule", _module)
pulumi.runtime.registerResourceModule("alicloud", "eventbridge/serviceLinkedRole", _module)
pulumi.runtime.registerResourceModule("alicloud", "eventbridge/slr", _module)
