// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * SLS log audit exists in the form of log service app.
 *
 * In addition to inheriting all SLS functions, it also enhances the real-time automatic centralized collection of audit related logs across multi cloud products under multi accounts, and provides support for storage, query and information summary required by audit. It covers actiontrail, OSS, NAS, SLB, API gateway, RDS, WAF, cloud firewall, cloud security center and other products.
 *
 * > **NOTE:** Available in 1.81.0
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.log.Audit("example", {
 *     aliuid: "12345678",
 *     displayName: "tf-audit-test",
 *     variableMap: {
 *         actiontrail_enabled: "true",
 *         actiontrail_ti_enabled: "false",
 *         actiontrail_ttl: "180",
 *         apigateway_enabled: "true",
 *         apigateway_ti_enabled: "false",
 *         apigateway_ttl: "180",
 *         appconnect_enabled: "false",
 *         appconnect_ttl: "180",
 *         bastion_enabled: "true",
 *         bastion_ti_enabled: "false",
 *         bastion_ttl: "180",
 *         cloudfirewall_enabled: "true",
 *         cloudfirewall_ti_enabled: "false",
 *         cloudfirewall_ttl: "180",
 *         cps_enabled: "true",
 *         cps_ti_enabled: "false",
 *         cps_ttl: "180",
 *         ddos_bgp_access_enabled: "false",
 *         ddos_bgp_access_ttl: "180",
 *         ddos_coo_access_enabled: "false",
 *         ddos_coo_access_ti_enabled: "false",
 *         ddos_coo_access_ttl: "180",
 *         ddos_dip_access_enabled: "false",
 *         ddos_dip_access_ti_enabled: "false",
 *         ddos_dip_access_ttl: "180",
 *         drds_audit_collection_policy: "",
 *         drds_audit_enabled: "true",
 *         drds_audit_ti_enabled: "false",
 *         drds_audit_ttl: "7",
 *         drds_sync_enabled: "true",
 *         drds_sync_ttl: "180",
 *         k8s_audit_collection_policy: "",
 *         k8s_audit_enabled: "true",
 *         k8s_audit_ttl: "180",
 *         k8s_event_collection_policy: "",
 *         k8s_event_enabled: "true",
 *         k8s_event_ttl: "180",
 *         k8s_ingress_collection_policy: "",
 *         k8s_ingress_enabled: "true",
 *         k8s_ingress_ttl: "180",
 *         nas_enabled: "true",
 *         nas_ti_enabled: "false",
 *         nas_ttl: "180",
 *         oss_access_enabled: "true",
 *         oss_access_ti_enabled: "false",
 *         oss_access_ttl: "7",
 *         oss_metering_enabled: "true",
 *         oss_metering_ttl: "180",
 *         oss_sync_enabled: "true",
 *         oss_sync_ttl: "180",
 *         polardb_audit_collection_policy: "",
 *         polardb_enabled: "true",
 *         polardb_perf_collection_policy: "",
 *         polardb_perf_enabled: "false",
 *         polardb_perf_ttl: "180",
 *         polardb_slow_collection_policy: "",
 *         polardb_slow_enabled: "false",
 *         polardb_slow_ttl: "180",
 *         polardb_ti_enabled: "false",
 *         polardb_ttl: "180",
 *         rds_audit_collection_policy: "",
 *         rds_enabled: "true",
 *         rds_perf_collection_policy: "",
 *         rds_perf_enabled: "false",
 *         rds_perf_ttl: "180",
 *         rds_slow_collection_policy: "",
 *         rds_slow_enabled: "false",
 *         rds_slow_ttl: "180",
 *         rds_ti_enabled: "false",
 *         rds_ttl: "180",
 *         sas_crack_enabled: "true",
 *         sas_dns_enabled: "true",
 *         sas_http_enabled: "true",
 *         sas_local_dns_enabled: "true",
 *         sas_login_enabled: "true",
 *         sas_network_enabled: "true",
 *         sas_process_enabled: "true",
 *         sas_security_alert_enabled: "true",
 *         sas_security_hc_enabled: "true",
 *         sas_security_vul_enabled: "true",
 *         sas_session_enabled: "true",
 *         sas_snapshot_account_enabled: "true",
 *         sas_snapshot_port_enabled: "true",
 *         sas_snapshot_process_enabled: "true",
 *         sas_ti_enabled: "false",
 *         sas_ttl: "180",
 *         slb_access_collection_policy: "",
 *         slb_access_enabled: "true",
 *         slb_access_ti_enabled: "false",
 *         slb_access_ttl: "7",
 *         slb_sync_enabled: "true",
 *         slb_sync_ttl: "180",
 *         vpc_flow_collection_policy: "",
 *         vpc_flow_enabled: "false",
 *         vpc_flow_ttl: "7",
 *         vpc_sync_enabled: "true",
 *         vpc_sync_ttl: "180",
 *         waf_enabled: "true",
 *         waf_ti_enabled: "false",
 *         waf_ttl: "180",
 *     },
 * });
 * ```
 * Multiple accounts Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.log.Audit("example", {
 *     aliuid: "12345678",
 *     displayName: "tf-audit-test",
 *     multiAccounts: [
 *         "123456789123",
 *         "12345678912300123",
 *     ],
 *     variableMap: {
 *         actiontrail_enabled: "true",
 *         actiontrail_ttl: "180",
 *         oss_access_enabled: "true",
 *         oss_access_ttl: "180",
 *     },
 * });
 * ```
 * Resource Directory Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.log.Audit("example", {
 *     aliuid: "12345678",
 *     displayName: "tf-audit-test",
 *     resourceDirectoryType: "all",
 *     variableMap: {
 *         actiontrail_enabled: "true",
 *         actiontrail_ttl: "180",
 *         oss_access_enabled: "true",
 *         oss_access_ttl: "180",
 *     },
 * });
 * ```
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.log.Audit("example", {
 *     aliuid: "12345678",
 *     displayName: "tf-audit-test",
 *     multiAccounts: [
 *         "123456789123",
 *         "12345678912300123",
 *     ],
 *     resourceDirectoryType: "custom",
 *     variableMap: {
 *         actiontrail_enabled: "true",
 *         actiontrail_ttl: "180",
 *         oss_access_enabled: "true",
 *         oss_access_ttl: "180",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Log audit can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:log/audit:Audit example tf-audit-test
 * ```
 */
export class Audit extends pulumi.CustomResource {
    /**
     * Get an existing Audit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuditState, opts?: pulumi.CustomResourceOptions): Audit {
        return new Audit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:log/audit:Audit';

    /**
     * Returns true if the given object is an instance of Audit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Audit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Audit.__pulumiType;
    }

    /**
     * Aliuid value of your account.
     */
    public readonly aliuid!: pulumi.Output<string>;
    /**
     * Name of SLS log audit.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Multi-account configuration, please fill in multiple aliuid.
     */
    public readonly multiAccounts!: pulumi.Output<string[] | undefined>;
    /**
     * Resource Directory type. Optional values are all or custom. If the value is custom, argument multiAccount should be provided.
     */
    public readonly resourceDirectoryType!: pulumi.Output<string | undefined>;
    /**
     * Log audit detailed configuration.
     */
    public readonly variableMap!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a Audit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuditArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuditArgs | AuditState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuditState | undefined;
            resourceInputs["aliuid"] = state ? state.aliuid : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["multiAccounts"] = state ? state.multiAccounts : undefined;
            resourceInputs["resourceDirectoryType"] = state ? state.resourceDirectoryType : undefined;
            resourceInputs["variableMap"] = state ? state.variableMap : undefined;
        } else {
            const args = argsOrState as AuditArgs | undefined;
            if ((!args || args.aliuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aliuid'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["aliuid"] = args ? args.aliuid : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["multiAccounts"] = args ? args.multiAccounts : undefined;
            resourceInputs["resourceDirectoryType"] = args ? args.resourceDirectoryType : undefined;
            resourceInputs["variableMap"] = args ? args.variableMap : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Audit.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Audit resources.
 */
export interface AuditState {
    /**
     * Aliuid value of your account.
     */
    aliuid?: pulumi.Input<string>;
    /**
     * Name of SLS log audit.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Multi-account configuration, please fill in multiple aliuid.
     */
    multiAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resource Directory type. Optional values are all or custom. If the value is custom, argument multiAccount should be provided.
     */
    resourceDirectoryType?: pulumi.Input<string>;
    /**
     * Log audit detailed configuration.
     */
    variableMap?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Audit resource.
 */
export interface AuditArgs {
    /**
     * Aliuid value of your account.
     */
    aliuid: pulumi.Input<string>;
    /**
     * Name of SLS log audit.
     */
    displayName: pulumi.Input<string>;
    /**
     * Multi-account configuration, please fill in multiple aliuid.
     */
    multiAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resource Directory type. Optional values are all or custom. If the value is custom, argument multiAccount should be provided.
     */
    resourceDirectoryType?: pulumi.Input<string>;
    /**
     * Log audit detailed configuration.
     */
    variableMap?: pulumi.Input<{[key: string]: any}>;
}
