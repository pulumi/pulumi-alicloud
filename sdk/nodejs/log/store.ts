// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a SLS Log Store resource.
 *
 * For information about SLS Log Store and how to use it, see [What is Log Store](https://www.alibabacloud.com/help/doc-detail/48874.htm).
 *
 * > **NOTE:** Available since v1.0.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const _default = new random.RandomInteger("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const exampleProject = new alicloud.log.Project("exampleProject", {description: "terraform-example"});
 * const exampleStore = new alicloud.log.Store("exampleStore", {
 *     project: exampleProject.name,
 *     shardCount: 3,
 *     autoSplit: true,
 *     maxSplitShardCount: 60,
 *     appendMeta: true,
 * });
 * ```
 *
 * Encrypt Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const region = config.get("region") || "cn-hangzhou";
 * const exampleAccount = alicloud.getAccount({});
 * const _default = new random.RandomInteger("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const exampleKey = new alicloud.kms.Key("exampleKey", {
 *     description: "terraform-example",
 *     pendingWindowInDays: 7,
 *     status: "Enabled",
 * });
 * const exampleProject = new alicloud.log.Project("exampleProject", {description: "terraform-example"});
 * const exampleStore = new alicloud.log.Store("exampleStore", {
 *     project: exampleProject.name,
 *     shardCount: 1,
 *     autoSplit: true,
 *     maxSplitShardCount: 60,
 *     encryptConf: {
 *         enable: true,
 *         encryptType: "default",
 *         userCmkInfo: {
 *             cmkKeyId: exampleKey.id,
 *             arn: exampleAccount.then(exampleAccount => `acs:ram::${exampleAccount.id}:role/aliyunlogdefaultrole`),
 *             regionId: region,
 *         },
 *     },
 * });
 * ```
 * ## Module Support
 *
 * You can use the existing sls module
 * to create SLS project, store and store index one-click, like ECS instances.
 *
 * ## Import
 *
 * SLS Log Store can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:log/store:Store example <project_name>:<logstore_name>
 * ```
 */
export class Store extends pulumi.CustomResource {
    /**
     * Get an existing Store resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StoreState, opts?: pulumi.CustomResourceOptions): Store {
        return new Store(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:log/store:Store';

    /**
     * Returns true if the given object is an instance of Store.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Store {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Store.__pulumiType;
    }

    /**
     * Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
     */
    public readonly appendMeta!: pulumi.Output<boolean | undefined>;
    /**
     * Determines whether to automatically split a shard. Default to `false`.
     */
    public readonly autoSplit!: pulumi.Output<boolean | undefined>;
    /**
     * Log library creation time. Unix timestamp format that represents the number of seconds from 1970-1-1 00:00:00 UTC calculation.
     */
    public /*out*/ readonly createTime!: pulumi.Output<number>;
    /**
     * Whether open webtracking. webtracking network tracing, support the collection of HTML log, H5, Ios and android platforms.
     */
    public readonly enableWebTracking!: pulumi.Output<boolean | undefined>;
    /**
     * Encrypted storage of data, providing data static protection capability, encryptConf can be updated since 1.188.0 (only enable change is supported when updating logstore). See `encryptConf` below.
     */
    public readonly encryptConf!: pulumi.Output<outputs.log.StoreEncryptConf>;
    /**
     * The ttl of hot storage. Default to 30, at least 30, hot storage ttl must be less than ttl.
     */
    public readonly hotTtl!: pulumi.Output<number | undefined>;
    /**
     * The log store, which is unique in the same project. You need to specify one of the attributes: `logstoreName`, `name`.
     */
    public readonly logstoreName!: pulumi.Output<string>;
    /**
     * The maximum number of shards for automatic split, which is in the range of 1 to 256. You must specify this parameter when autoSplit is true.
     */
    public readonly maxSplitShardCount!: pulumi.Output<number | undefined>;
    /**
     * The mode of storage. Default to `standard`, must be `standard` or `query`, `lite`.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * . Field 'name' has been deprecated from provider version 1.215.0. New field 'logstore_name' instead.
     *
     * @deprecated Field 'name' has been deprecated since provider version 1.215.0. New field 'logstore_name' instead.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * . Field 'project' has been deprecated from provider version 1.215.0. New field 'project_name' instead.
     *
     * @deprecated Field 'project' has been deprecated since provider version 1.215.0. New field 'project_name' instead.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The project name to the log store belongs. You need to specify one of the attributes: `projectName`, `project`.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The data retention time (in days). Valid values: [1-3650]. Default to 30. Log store data will be stored permanently when the value is 3650.
     */
    public readonly retentionPeriod!: pulumi.Output<number | undefined>;
    /**
     * The number of shards in this log store. Default to 2. You can modify it by "Split" or "Merge" operations. [Refer to details](https://www.alibabacloud.com/help/zh/sls/product-overview/shard).
     */
    public readonly shardCount!: pulumi.Output<number | undefined>;
    /**
     * The shard attribute.
     */
    public /*out*/ readonly shards!: pulumi.Output<outputs.log.StoreShard[]>;
    /**
     * Determines whether store type is metric. `Metrics` means metric store, empty means log store.
     *
     * The following arguments will be discarded. Please use new fields as soon as possible:
     */
    public readonly telemetryType!: pulumi.Output<string | undefined>;

    /**
     * Create a Store resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StoreArgs | StoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StoreState | undefined;
            resourceInputs["appendMeta"] = state ? state.appendMeta : undefined;
            resourceInputs["autoSplit"] = state ? state.autoSplit : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["enableWebTracking"] = state ? state.enableWebTracking : undefined;
            resourceInputs["encryptConf"] = state ? state.encryptConf : undefined;
            resourceInputs["hotTtl"] = state ? state.hotTtl : undefined;
            resourceInputs["logstoreName"] = state ? state.logstoreName : undefined;
            resourceInputs["maxSplitShardCount"] = state ? state.maxSplitShardCount : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["retentionPeriod"] = state ? state.retentionPeriod : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["shards"] = state ? state.shards : undefined;
            resourceInputs["telemetryType"] = state ? state.telemetryType : undefined;
        } else {
            const args = argsOrState as StoreArgs | undefined;
            resourceInputs["appendMeta"] = args ? args.appendMeta : undefined;
            resourceInputs["autoSplit"] = args ? args.autoSplit : undefined;
            resourceInputs["enableWebTracking"] = args ? args.enableWebTracking : undefined;
            resourceInputs["encryptConf"] = args ? args.encryptConf : undefined;
            resourceInputs["hotTtl"] = args ? args.hotTtl : undefined;
            resourceInputs["logstoreName"] = args ? args.logstoreName : undefined;
            resourceInputs["maxSplitShardCount"] = args ? args.maxSplitShardCount : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["retentionPeriod"] = args ? args.retentionPeriod : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["telemetryType"] = args ? args.telemetryType : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["shards"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Store.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Store resources.
 */
export interface StoreState {
    /**
     * Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
     */
    appendMeta?: pulumi.Input<boolean>;
    /**
     * Determines whether to automatically split a shard. Default to `false`.
     */
    autoSplit?: pulumi.Input<boolean>;
    /**
     * Log library creation time. Unix timestamp format that represents the number of seconds from 1970-1-1 00:00:00 UTC calculation.
     */
    createTime?: pulumi.Input<number>;
    /**
     * Whether open webtracking. webtracking network tracing, support the collection of HTML log, H5, Ios and android platforms.
     */
    enableWebTracking?: pulumi.Input<boolean>;
    /**
     * Encrypted storage of data, providing data static protection capability, encryptConf can be updated since 1.188.0 (only enable change is supported when updating logstore). See `encryptConf` below.
     */
    encryptConf?: pulumi.Input<inputs.log.StoreEncryptConf>;
    /**
     * The ttl of hot storage. Default to 30, at least 30, hot storage ttl must be less than ttl.
     */
    hotTtl?: pulumi.Input<number>;
    /**
     * The log store, which is unique in the same project. You need to specify one of the attributes: `logstoreName`, `name`.
     */
    logstoreName?: pulumi.Input<string>;
    /**
     * The maximum number of shards for automatic split, which is in the range of 1 to 256. You must specify this parameter when autoSplit is true.
     */
    maxSplitShardCount?: pulumi.Input<number>;
    /**
     * The mode of storage. Default to `standard`, must be `standard` or `query`, `lite`.
     */
    mode?: pulumi.Input<string>;
    /**
     * . Field 'name' has been deprecated from provider version 1.215.0. New field 'logstore_name' instead.
     *
     * @deprecated Field 'name' has been deprecated since provider version 1.215.0. New field 'logstore_name' instead.
     */
    name?: pulumi.Input<string>;
    /**
     * . Field 'project' has been deprecated from provider version 1.215.0. New field 'project_name' instead.
     *
     * @deprecated Field 'project' has been deprecated since provider version 1.215.0. New field 'project_name' instead.
     */
    project?: pulumi.Input<string>;
    /**
     * The project name to the log store belongs. You need to specify one of the attributes: `projectName`, `project`.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The data retention time (in days). Valid values: [1-3650]. Default to 30. Log store data will be stored permanently when the value is 3650.
     */
    retentionPeriod?: pulumi.Input<number>;
    /**
     * The number of shards in this log store. Default to 2. You can modify it by "Split" or "Merge" operations. [Refer to details](https://www.alibabacloud.com/help/zh/sls/product-overview/shard).
     */
    shardCount?: pulumi.Input<number>;
    /**
     * The shard attribute.
     */
    shards?: pulumi.Input<pulumi.Input<inputs.log.StoreShard>[]>;
    /**
     * Determines whether store type is metric. `Metrics` means metric store, empty means log store.
     *
     * The following arguments will be discarded. Please use new fields as soon as possible:
     */
    telemetryType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Store resource.
 */
export interface StoreArgs {
    /**
     * Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
     */
    appendMeta?: pulumi.Input<boolean>;
    /**
     * Determines whether to automatically split a shard. Default to `false`.
     */
    autoSplit?: pulumi.Input<boolean>;
    /**
     * Whether open webtracking. webtracking network tracing, support the collection of HTML log, H5, Ios and android platforms.
     */
    enableWebTracking?: pulumi.Input<boolean>;
    /**
     * Encrypted storage of data, providing data static protection capability, encryptConf can be updated since 1.188.0 (only enable change is supported when updating logstore). See `encryptConf` below.
     */
    encryptConf?: pulumi.Input<inputs.log.StoreEncryptConf>;
    /**
     * The ttl of hot storage. Default to 30, at least 30, hot storage ttl must be less than ttl.
     */
    hotTtl?: pulumi.Input<number>;
    /**
     * The log store, which is unique in the same project. You need to specify one of the attributes: `logstoreName`, `name`.
     */
    logstoreName?: pulumi.Input<string>;
    /**
     * The maximum number of shards for automatic split, which is in the range of 1 to 256. You must specify this parameter when autoSplit is true.
     */
    maxSplitShardCount?: pulumi.Input<number>;
    /**
     * The mode of storage. Default to `standard`, must be `standard` or `query`, `lite`.
     */
    mode?: pulumi.Input<string>;
    /**
     * . Field 'name' has been deprecated from provider version 1.215.0. New field 'logstore_name' instead.
     *
     * @deprecated Field 'name' has been deprecated since provider version 1.215.0. New field 'logstore_name' instead.
     */
    name?: pulumi.Input<string>;
    /**
     * . Field 'project' has been deprecated from provider version 1.215.0. New field 'project_name' instead.
     *
     * @deprecated Field 'project' has been deprecated since provider version 1.215.0. New field 'project_name' instead.
     */
    project?: pulumi.Input<string>;
    /**
     * The project name to the log store belongs. You need to specify one of the attributes: `projectName`, `project`.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The data retention time (in days). Valid values: [1-3650]. Default to 30. Log store data will be stored permanently when the value is 3650.
     */
    retentionPeriod?: pulumi.Input<number>;
    /**
     * The number of shards in this log store. Default to 2. You can modify it by "Split" or "Merge" operations. [Refer to details](https://www.alibabacloud.com/help/zh/sls/product-overview/shard).
     */
    shardCount?: pulumi.Input<number>;
    /**
     * Determines whether store type is metric. `Metrics` means metric store, empty means log store.
     *
     * The following arguments will be discarded. Please use new fields as soon as possible:
     */
    telemetryType?: pulumi.Input<string>;
}
