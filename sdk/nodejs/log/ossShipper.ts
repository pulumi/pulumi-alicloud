// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Log service data delivery management, this service provides the function of delivering data in logstore to oss product storage.
 * [Refer to details](https://www.alibabacloud.com/help/en/doc-detail/43724.htm).
 *
 * > **NOTE:** Available since v1.121.0.
 *
 * > **DEPRECATED:**  This resource has been deprecated from version `1.215.0`. Please use new resource alicloud_log_oss_export.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const _default = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const example = new alicloud.log.Project("example", {
 *     name: `terraform-example-${_default.result}`,
 *     description: "terraform-example",
 *     tags: {
 *         Created: "TF",
 *         For: "example",
 *     },
 * });
 * const exampleStore = new alicloud.log.Store("example", {
 *     project: example.name,
 *     name: "example-store",
 *     retentionPeriod: 3650,
 *     autoSplit: true,
 *     maxSplitShardCount: 60,
 *     appendMeta: true,
 * });
 * const exampleOssShipper = new alicloud.log.OssShipper("example", {
 *     projectName: example.name,
 *     logstoreName: exampleStore.name,
 *     shipperName: "terraform-example",
 *     ossBucket: "example_bucket",
 *     ossPrefix: "root",
 *     bufferInterval: 300,
 *     bufferSize: 250,
 *     compressType: "none",
 *     pathFormat: "%Y/%m/%d/%H/%M",
 *     format: "json",
 *     jsonEnableTag: true,
 * });
 * ```
 *
 * ## Import
 *
 * Log oss shipper can be imported using the id or name, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:log/ossShipper:OssShipper example tf-log-project:tf-log-logstore:tf-log-shipper
 * ```
 */
export class OssShipper extends pulumi.CustomResource {
    /**
     * Get an existing OssShipper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OssShipperState, opts?: pulumi.CustomResourceOptions): OssShipper {
        return new OssShipper(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:log/ossShipper:OssShipper';

    /**
     * Returns true if the given object is an instance of OssShipper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OssShipper {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OssShipper.__pulumiType;
    }

    /**
     * How often is it delivered every interval.
     */
    declare public readonly bufferInterval: pulumi.Output<number>;
    /**
     * Automatically control the creation interval of delivery tasks and set the upper limit of an OSS object size (calculated in uncompressed), unit: `MB`.
     */
    declare public readonly bufferSize: pulumi.Output<number>;
    /**
     * OSS data storage compression method, support: none, snappy. Among them, none means that the original data is not compressed, and snappy means that the data is compressed using the snappy algorithm, which can reduce the storage space usage of the `OSS Bucket`.
     */
    declare public readonly compressType: pulumi.Output<string | undefined>;
    declare public readonly csvConfigColumns: pulumi.Output<string[] | undefined>;
    declare public readonly csvConfigDelimiter: pulumi.Output<string | undefined>;
    declare public readonly csvConfigHeader: pulumi.Output<boolean | undefined>;
    declare public readonly csvConfigLinefeed: pulumi.Output<string | undefined>;
    declare public readonly csvConfigNullidentifier: pulumi.Output<string | undefined>;
    declare public readonly csvConfigQuote: pulumi.Output<string | undefined>;
    /**
     * Storage format, only supports three types: `json`, `parquet`, `csv`.
     * **According to the different format, please select the following parameters**
     * - format = `json`
     * `jsonEnableTag` - (Optional) Whether to deliver the label.
     * - format = `csv`
     * `csvConfigDelimiter` - (Optional) Separator configuration in csv configuration format.
     * `csvConfigColumns` - (Optional) Field configuration in csv configuration format.
     * `csvConfigNullidentifier` - (Optional) Invalid field content.
     * `csvConfigQuote` - (Optional) Escape character under csv configuration.
     * `csvConfigHeader` - (Optional) Indicates whether to write the field name to the CSV file, the default value is `false`.
     * `csvConfigLinefeed` - (Optional) lineFeed in csv configuration.
     * - format = `parquet`
     * `parquetConfig` - (Optional) Configure to use parquet storage format.
     * `name` - (Required) The name of the key.
     * `type` - (Required) Type of configuration name.
     */
    declare public readonly format: pulumi.Output<string>;
    declare public readonly jsonEnableTag: pulumi.Output<boolean | undefined>;
    /**
     * The name of the log logstore.
     */
    declare public readonly logstoreName: pulumi.Output<string>;
    /**
     * The name of the oss bucket.
     */
    declare public readonly ossBucket: pulumi.Output<string>;
    /**
     * The data synchronized from Log Service to OSS will be stored in this directory of Bucket.
     */
    declare public readonly ossPrefix: pulumi.Output<string | undefined>;
    declare public readonly parquetConfigs: pulumi.Output<outputs.log.OssShipperParquetConfig[] | undefined>;
    /**
     * The OSS Bucket directory is dynamically generated according to the creation time of the shipper task, it cannot start with a forward slash `/`, the default value is `%Y/%m/%d/%H/%M`.
     */
    declare public readonly pathFormat: pulumi.Output<string>;
    /**
     * The name of the log project. It is the only in one Alicloud account.
     */
    declare public readonly projectName: pulumi.Output<string>;
    /**
     * Used for access control, the OSS Bucket owner creates the role mark, such as `acs:ram::13234:role/logrole`
     */
    declare public readonly roleArn: pulumi.Output<string | undefined>;
    /**
     * Delivery configuration name, it can only contain lowercase letters, numbers, dashes `-` and underscores `_`. It must start and end with lowercase letters or numbers, and the name must be 2 to 128 characters long.
     */
    declare public readonly shipperName: pulumi.Output<string>;

    /**
     * Create a OssShipper resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OssShipperArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OssShipperArgs | OssShipperState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OssShipperState | undefined;
            resourceInputs["bufferInterval"] = state?.bufferInterval;
            resourceInputs["bufferSize"] = state?.bufferSize;
            resourceInputs["compressType"] = state?.compressType;
            resourceInputs["csvConfigColumns"] = state?.csvConfigColumns;
            resourceInputs["csvConfigDelimiter"] = state?.csvConfigDelimiter;
            resourceInputs["csvConfigHeader"] = state?.csvConfigHeader;
            resourceInputs["csvConfigLinefeed"] = state?.csvConfigLinefeed;
            resourceInputs["csvConfigNullidentifier"] = state?.csvConfigNullidentifier;
            resourceInputs["csvConfigQuote"] = state?.csvConfigQuote;
            resourceInputs["format"] = state?.format;
            resourceInputs["jsonEnableTag"] = state?.jsonEnableTag;
            resourceInputs["logstoreName"] = state?.logstoreName;
            resourceInputs["ossBucket"] = state?.ossBucket;
            resourceInputs["ossPrefix"] = state?.ossPrefix;
            resourceInputs["parquetConfigs"] = state?.parquetConfigs;
            resourceInputs["pathFormat"] = state?.pathFormat;
            resourceInputs["projectName"] = state?.projectName;
            resourceInputs["roleArn"] = state?.roleArn;
            resourceInputs["shipperName"] = state?.shipperName;
        } else {
            const args = argsOrState as OssShipperArgs | undefined;
            if (args?.bufferInterval === undefined && !opts.urn) {
                throw new Error("Missing required property 'bufferInterval'");
            }
            if (args?.bufferSize === undefined && !opts.urn) {
                throw new Error("Missing required property 'bufferSize'");
            }
            if (args?.format === undefined && !opts.urn) {
                throw new Error("Missing required property 'format'");
            }
            if (args?.logstoreName === undefined && !opts.urn) {
                throw new Error("Missing required property 'logstoreName'");
            }
            if (args?.ossBucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'ossBucket'");
            }
            if (args?.pathFormat === undefined && !opts.urn) {
                throw new Error("Missing required property 'pathFormat'");
            }
            if (args?.projectName === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if (args?.shipperName === undefined && !opts.urn) {
                throw new Error("Missing required property 'shipperName'");
            }
            resourceInputs["bufferInterval"] = args?.bufferInterval;
            resourceInputs["bufferSize"] = args?.bufferSize;
            resourceInputs["compressType"] = args?.compressType;
            resourceInputs["csvConfigColumns"] = args?.csvConfigColumns;
            resourceInputs["csvConfigDelimiter"] = args?.csvConfigDelimiter;
            resourceInputs["csvConfigHeader"] = args?.csvConfigHeader;
            resourceInputs["csvConfigLinefeed"] = args?.csvConfigLinefeed;
            resourceInputs["csvConfigNullidentifier"] = args?.csvConfigNullidentifier;
            resourceInputs["csvConfigQuote"] = args?.csvConfigQuote;
            resourceInputs["format"] = args?.format;
            resourceInputs["jsonEnableTag"] = args?.jsonEnableTag;
            resourceInputs["logstoreName"] = args?.logstoreName;
            resourceInputs["ossBucket"] = args?.ossBucket;
            resourceInputs["ossPrefix"] = args?.ossPrefix;
            resourceInputs["parquetConfigs"] = args?.parquetConfigs;
            resourceInputs["pathFormat"] = args?.pathFormat;
            resourceInputs["projectName"] = args?.projectName;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["shipperName"] = args?.shipperName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OssShipper.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OssShipper resources.
 */
export interface OssShipperState {
    /**
     * How often is it delivered every interval.
     */
    bufferInterval?: pulumi.Input<number>;
    /**
     * Automatically control the creation interval of delivery tasks and set the upper limit of an OSS object size (calculated in uncompressed), unit: `MB`.
     */
    bufferSize?: pulumi.Input<number>;
    /**
     * OSS data storage compression method, support: none, snappy. Among them, none means that the original data is not compressed, and snappy means that the data is compressed using the snappy algorithm, which can reduce the storage space usage of the `OSS Bucket`.
     */
    compressType?: pulumi.Input<string>;
    csvConfigColumns?: pulumi.Input<pulumi.Input<string>[]>;
    csvConfigDelimiter?: pulumi.Input<string>;
    csvConfigHeader?: pulumi.Input<boolean>;
    csvConfigLinefeed?: pulumi.Input<string>;
    csvConfigNullidentifier?: pulumi.Input<string>;
    csvConfigQuote?: pulumi.Input<string>;
    /**
     * Storage format, only supports three types: `json`, `parquet`, `csv`.
     * **According to the different format, please select the following parameters**
     * - format = `json`
     * `jsonEnableTag` - (Optional) Whether to deliver the label.
     * - format = `csv`
     * `csvConfigDelimiter` - (Optional) Separator configuration in csv configuration format.
     * `csvConfigColumns` - (Optional) Field configuration in csv configuration format.
     * `csvConfigNullidentifier` - (Optional) Invalid field content.
     * `csvConfigQuote` - (Optional) Escape character under csv configuration.
     * `csvConfigHeader` - (Optional) Indicates whether to write the field name to the CSV file, the default value is `false`.
     * `csvConfigLinefeed` - (Optional) lineFeed in csv configuration.
     * - format = `parquet`
     * `parquetConfig` - (Optional) Configure to use parquet storage format.
     * `name` - (Required) The name of the key.
     * `type` - (Required) Type of configuration name.
     */
    format?: pulumi.Input<string>;
    jsonEnableTag?: pulumi.Input<boolean>;
    /**
     * The name of the log logstore.
     */
    logstoreName?: pulumi.Input<string>;
    /**
     * The name of the oss bucket.
     */
    ossBucket?: pulumi.Input<string>;
    /**
     * The data synchronized from Log Service to OSS will be stored in this directory of Bucket.
     */
    ossPrefix?: pulumi.Input<string>;
    parquetConfigs?: pulumi.Input<pulumi.Input<inputs.log.OssShipperParquetConfig>[]>;
    /**
     * The OSS Bucket directory is dynamically generated according to the creation time of the shipper task, it cannot start with a forward slash `/`, the default value is `%Y/%m/%d/%H/%M`.
     */
    pathFormat?: pulumi.Input<string>;
    /**
     * The name of the log project. It is the only in one Alicloud account.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Used for access control, the OSS Bucket owner creates the role mark, such as `acs:ram::13234:role/logrole`
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Delivery configuration name, it can only contain lowercase letters, numbers, dashes `-` and underscores `_`. It must start and end with lowercase letters or numbers, and the name must be 2 to 128 characters long.
     */
    shipperName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OssShipper resource.
 */
export interface OssShipperArgs {
    /**
     * How often is it delivered every interval.
     */
    bufferInterval: pulumi.Input<number>;
    /**
     * Automatically control the creation interval of delivery tasks and set the upper limit of an OSS object size (calculated in uncompressed), unit: `MB`.
     */
    bufferSize: pulumi.Input<number>;
    /**
     * OSS data storage compression method, support: none, snappy. Among them, none means that the original data is not compressed, and snappy means that the data is compressed using the snappy algorithm, which can reduce the storage space usage of the `OSS Bucket`.
     */
    compressType?: pulumi.Input<string>;
    csvConfigColumns?: pulumi.Input<pulumi.Input<string>[]>;
    csvConfigDelimiter?: pulumi.Input<string>;
    csvConfigHeader?: pulumi.Input<boolean>;
    csvConfigLinefeed?: pulumi.Input<string>;
    csvConfigNullidentifier?: pulumi.Input<string>;
    csvConfigQuote?: pulumi.Input<string>;
    /**
     * Storage format, only supports three types: `json`, `parquet`, `csv`.
     * **According to the different format, please select the following parameters**
     * - format = `json`
     * `jsonEnableTag` - (Optional) Whether to deliver the label.
     * - format = `csv`
     * `csvConfigDelimiter` - (Optional) Separator configuration in csv configuration format.
     * `csvConfigColumns` - (Optional) Field configuration in csv configuration format.
     * `csvConfigNullidentifier` - (Optional) Invalid field content.
     * `csvConfigQuote` - (Optional) Escape character under csv configuration.
     * `csvConfigHeader` - (Optional) Indicates whether to write the field name to the CSV file, the default value is `false`.
     * `csvConfigLinefeed` - (Optional) lineFeed in csv configuration.
     * - format = `parquet`
     * `parquetConfig` - (Optional) Configure to use parquet storage format.
     * `name` - (Required) The name of the key.
     * `type` - (Required) Type of configuration name.
     */
    format: pulumi.Input<string>;
    jsonEnableTag?: pulumi.Input<boolean>;
    /**
     * The name of the log logstore.
     */
    logstoreName: pulumi.Input<string>;
    /**
     * The name of the oss bucket.
     */
    ossBucket: pulumi.Input<string>;
    /**
     * The data synchronized from Log Service to OSS will be stored in this directory of Bucket.
     */
    ossPrefix?: pulumi.Input<string>;
    parquetConfigs?: pulumi.Input<pulumi.Input<inputs.log.OssShipperParquetConfig>[]>;
    /**
     * The OSS Bucket directory is dynamically generated according to the creation time of the shipper task, it cannot start with a forward slash `/`, the default value is `%Y/%m/%d/%H/%M`.
     */
    pathFormat: pulumi.Input<string>;
    /**
     * The name of the log project. It is the only in one Alicloud account.
     */
    projectName: pulumi.Input<string>;
    /**
     * Used for access control, the OSS Bucket owner creates the role mark, such as `acs:ram::13234:role/logrole`
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Delivery configuration name, it can only contain lowercase letters, numbers, dashes `-` and underscores `_`. It must start and end with lowercase letters or numbers, and the name must be 2 to 128 characters long.
     */
    shipperName: pulumi.Input<string>;
}
