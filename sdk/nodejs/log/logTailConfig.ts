// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The Logtail access service is a log collection agent provided by Log Service.
 * You can use Logtail to collect logs from servers such as Alibaba Cloud Elastic
 * Compute Service (ECS) instances in real time in the Log Service console. [Refer to details](https://www.alibabacloud.com/help/doc-detail/29058.htm)
 *
 * > **NOTE:** Available since v1.93.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const _default = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const example = new alicloud.log.Project("example", {
 *     projectName: `terraform-example-${_default.result}`,
 *     description: "terraform-example",
 * });
 * const exampleStore = new alicloud.log.Store("example", {
 *     projectName: example.projectName,
 *     logstoreName: "example-store",
 *     retentionPeriod: 3650,
 *     shardCount: 3,
 *     autoSplit: true,
 *     maxSplitShardCount: 60,
 *     appendMeta: true,
 * });
 * const exampleLogTailConfig = new alicloud.log.LogTailConfig("example", {
 *     project: example.projectName,
 *     logstore: exampleStore.logstoreName,
 *     inputType: "file",
 *     name: "terraform-example",
 *     outputType: "LogService",
 *     inputDetail: `  \\t{
 * \\t\\t\\"logPath\\": \\"/logPath\\",
 * \\t\\t\\"filePattern\\": \\"access.log\\",
 * \\t\\t\\"logType\\": \\"json_log\\",
 * \\t\\t\\"topicFormat\\": \\"default\\",
 * \\t\\t\\"discardUnmatch\\": false,
 * \\t\\t\\"enableRawLog\\": true,
 * \\t\\t\\"fileEncoding\\": \\"gbk\\",
 * \\t\\t\\"maxDepth\\": 10
 * \\t}
 * `,
 * });
 * ```
 *
 * ## Module Support
 *
 * You can use the existing sls-logtail module
 * to create logtail config, machine group, install logtail on ECS instances and join instances into machine group one-click.
 *
 * ## Import
 *
 * Logtial config can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:log/logTailConfig:LogTailConfig example tf-log:tf-log-store:tf-log-config
 * ```
 */
export class LogTailConfig extends pulumi.CustomResource {
    /**
     * Get an existing LogTailConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogTailConfigState, opts?: pulumi.CustomResourceOptions): LogTailConfig {
        return new LogTailConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:log/logTailConfig:LogTailConfig';

    /**
     * Returns true if the given object is an instance of LogTailConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogTailConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogTailConfig.__pulumiType;
    }

    /**
     * The logtail configure the required JSON files. ([Refer to details](https://www.alibabacloud.com/help/doc-detail/29058.htm))
     */
    declare public readonly inputDetail: pulumi.Output<string>;
    /**
     * The input type. Currently only two types of files and plugin are supported.
     */
    declare public readonly inputType: pulumi.Output<string>;
    /**
     * This parameter is auto generated by server, please do not fill in.
     */
    declare public /*out*/ readonly lastModifyTime: pulumi.Output<string>;
    /**
     * The log sample of the Logtail configuration. The log size cannot exceed 1,000 bytes.
     */
    declare public readonly logSample: pulumi.Output<string | undefined>;
    /**
     * The log store name to the query index belongs.
     */
    declare public readonly logstore: pulumi.Output<string>;
    /**
     * The Logtail configuration name, which is unique in the same project.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The output type. Currently, only LogService is supported.
     */
    declare public readonly outputType: pulumi.Output<string>;
    /**
     * The project name to the log store belongs.
     */
    declare public readonly project: pulumi.Output<string>;

    /**
     * Create a LogTailConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogTailConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogTailConfigArgs | LogTailConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogTailConfigState | undefined;
            resourceInputs["inputDetail"] = state?.inputDetail;
            resourceInputs["inputType"] = state?.inputType;
            resourceInputs["lastModifyTime"] = state?.lastModifyTime;
            resourceInputs["logSample"] = state?.logSample;
            resourceInputs["logstore"] = state?.logstore;
            resourceInputs["name"] = state?.name;
            resourceInputs["outputType"] = state?.outputType;
            resourceInputs["project"] = state?.project;
        } else {
            const args = argsOrState as LogTailConfigArgs | undefined;
            if (args?.inputDetail === undefined && !opts.urn) {
                throw new Error("Missing required property 'inputDetail'");
            }
            if (args?.inputType === undefined && !opts.urn) {
                throw new Error("Missing required property 'inputType'");
            }
            if (args?.logstore === undefined && !opts.urn) {
                throw new Error("Missing required property 'logstore'");
            }
            if (args?.outputType === undefined && !opts.urn) {
                throw new Error("Missing required property 'outputType'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["inputDetail"] = args?.inputDetail;
            resourceInputs["inputType"] = args?.inputType;
            resourceInputs["logSample"] = args?.logSample;
            resourceInputs["logstore"] = args?.logstore;
            resourceInputs["name"] = args?.name;
            resourceInputs["outputType"] = args?.outputType;
            resourceInputs["project"] = args?.project;
            resourceInputs["lastModifyTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogTailConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogTailConfig resources.
 */
export interface LogTailConfigState {
    /**
     * The logtail configure the required JSON files. ([Refer to details](https://www.alibabacloud.com/help/doc-detail/29058.htm))
     */
    inputDetail?: pulumi.Input<string>;
    /**
     * The input type. Currently only two types of files and plugin are supported.
     */
    inputType?: pulumi.Input<string>;
    /**
     * This parameter is auto generated by server, please do not fill in.
     */
    lastModifyTime?: pulumi.Input<string>;
    /**
     * The log sample of the Logtail configuration. The log size cannot exceed 1,000 bytes.
     */
    logSample?: pulumi.Input<string>;
    /**
     * The log store name to the query index belongs.
     */
    logstore?: pulumi.Input<string>;
    /**
     * The Logtail configuration name, which is unique in the same project.
     */
    name?: pulumi.Input<string>;
    /**
     * The output type. Currently, only LogService is supported.
     */
    outputType?: pulumi.Input<string>;
    /**
     * The project name to the log store belongs.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogTailConfig resource.
 */
export interface LogTailConfigArgs {
    /**
     * The logtail configure the required JSON files. ([Refer to details](https://www.alibabacloud.com/help/doc-detail/29058.htm))
     */
    inputDetail: pulumi.Input<string>;
    /**
     * The input type. Currently only two types of files and plugin are supported.
     */
    inputType: pulumi.Input<string>;
    /**
     * The log sample of the Logtail configuration. The log size cannot exceed 1,000 bytes.
     */
    logSample?: pulumi.Input<string>;
    /**
     * The log store name to the query index belongs.
     */
    logstore: pulumi.Input<string>;
    /**
     * The Logtail configuration name, which is unique in the same project.
     */
    name?: pulumi.Input<string>;
    /**
     * The output type. Currently, only LogService is supported.
     */
    outputType: pulumi.Input<string>;
    /**
     * The project name to the log store belongs.
     */
    project: pulumi.Input<string>;
}
