// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Using this resource can init SLS Alert resources automatically.
 *
 * For information about SLS Alert and how to use it, see [SLS Alert Overview](https://www.alibabacloud.com/help/en/doc-detail/209202.html)
 *
 * > **NOTE:** Available since v1.219.0.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const exampleUser = new alicloud.log.AlertResource("example_user", {
 *     type: "user",
 *     lang: "cn",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Log alert resource can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:log/alertResource:AlertResource example alert_resource:project:tf-project
 * ```
 */
export class AlertResource extends pulumi.CustomResource {
    /**
     * Get an existing AlertResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertResourceState, opts?: pulumi.CustomResourceOptions): AlertResource {
        return new AlertResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:log/alertResource:AlertResource';

    /**
     * Returns true if the given object is an instance of AlertResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertResource.__pulumiType;
    }

    /**
     * The lang of alert center resource when type is user.
     */
    public readonly lang!: pulumi.Output<string | undefined>;
    /**
     * The project of alert resource when type is project.
     */
    public readonly project!: pulumi.Output<string | undefined>;
    /**
     * The type of alert resources, must be user or project, 'user' for init aliyuncloud account's alert center resource, including project named sls-alert-{uid}-{region} and some dashboards; 'project' for init project's alert resource, including logstore named internal-alert-history and alert dashboard.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a AlertResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertResourceArgs | AlertResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertResourceState | undefined;
            resourceInputs["lang"] = state ? state.lang : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AlertResourceArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["lang"] = args ? args.lang : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertResource resources.
 */
export interface AlertResourceState {
    /**
     * The lang of alert center resource when type is user.
     */
    lang?: pulumi.Input<string>;
    /**
     * The project of alert resource when type is project.
     */
    project?: pulumi.Input<string>;
    /**
     * The type of alert resources, must be user or project, 'user' for init aliyuncloud account's alert center resource, including project named sls-alert-{uid}-{region} and some dashboards; 'project' for init project's alert resource, including logstore named internal-alert-history and alert dashboard.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertResource resource.
 */
export interface AlertResourceArgs {
    /**
     * The lang of alert center resource when type is user.
     */
    lang?: pulumi.Input<string>;
    /**
     * The project of alert resource when type is project.
     */
    project?: pulumi.Input<string>;
    /**
     * The type of alert resources, must be user or project, 'user' for init aliyuncloud account's alert center resource, including project named sls-alert-{uid}-{region} and some dashboards; 'project' for init project's alert resource, including logstore named internal-alert-history and alert dashboard.
     */
    type: pulumi.Input<string>;
}
