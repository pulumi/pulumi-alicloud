// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Log resource is a meta store service provided by log service, resource can be used to define meta store's table structure.
 *
 * For information about SLS Resource and how to use it, see [Resource management](https://www.alibabacloud.com/help/en/doc-detail/207732.html)
 *
 * > **NOTE:** Available in 1.162.0+, log resource region should be set a main region: cn-heyuan
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.log.Resource("example", {
 *     description: "user tf test resource desc",
 *     extInfo: "{}",
 *     schema: "{\"schema\":[{\"column\":\"col1\",\"desc\":\"col1 desc\",\"ext_info\":{},\"required\":true,\"type\":\"string\"},{\"column\":\"col2\",\"desc\":\"col2 desc\",\"ext_info\":\"optional\",\"required\":true,\"type\":\"string\"}]}",
 *     type: "userdefine",
 * });
 * ```
 *
 * ## Import
 *
 * Log resource can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:log/resource:Resource example user.tf.test_resource
 * ```
 */
export class Resource extends pulumi.CustomResource {
    /**
     * Get an existing Resource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceState, opts?: pulumi.CustomResourceOptions): Resource {
        return new Resource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:log/resource:Resource';

    /**
     * Returns true if the given object is an instance of Resource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Resource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Resource.__pulumiType;
    }

    /**
     * The meta store's description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ext info of meta store.
     */
    public readonly extInfo!: pulumi.Output<string | undefined>;
    /**
     * The meta store's name, can be used as table name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The meta store's schema info, which is json string format, used to define table's fields.
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * The meta store's type, userdefine e.g.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Resource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceArgs | ResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["extInfo"] = state ? state.extInfo : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ResourceArgs | undefined;
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["extInfo"] = args ? args.extInfo : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Resource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Resource resources.
 */
export interface ResourceState {
    /**
     * The meta store's description.
     */
    description?: pulumi.Input<string>;
    /**
     * The ext info of meta store.
     */
    extInfo?: pulumi.Input<string>;
    /**
     * The meta store's name, can be used as table name.
     */
    name?: pulumi.Input<string>;
    /**
     * The meta store's schema info, which is json string format, used to define table's fields.
     */
    schema?: pulumi.Input<string>;
    /**
     * The meta store's type, userdefine e.g.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Resource resource.
 */
export interface ResourceArgs {
    /**
     * The meta store's description.
     */
    description?: pulumi.Input<string>;
    /**
     * The ext info of meta store.
     */
    extInfo?: pulumi.Input<string>;
    /**
     * The meta store's name, can be used as table name.
     */
    name?: pulumi.Input<string>;
    /**
     * The meta store's schema info, which is json string format, used to define table's fields.
     */
    schema: pulumi.Input<string>;
    /**
     * The meta store's type, userdefine e.g.
     */
    type: pulumi.Input<string>;
}
