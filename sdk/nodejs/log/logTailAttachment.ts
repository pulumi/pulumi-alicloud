// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The Logtail access service is a log collection agent provided by Log Service.
 * You can use Logtail to collect logs from servers such as Alibaba Cloud Elastic
 * Compute Service (ECS) instances in real time in the Log Service console. [Refer to details](https://www.alibabacloud.com/help/doc-detail/29058.htm)
 *
 * This resource amis to attach one logtail configure to a machine group.
 *
 * > **NOTE:** One logtail configure can be attached to multiple machine groups and one machine group can attach several logtail configures.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const _default = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const example = new alicloud.log.Project("example", {
 *     projectName: `terraform-example-${_default.result}`,
 *     description: "terraform-example",
 * });
 * const exampleStore = new alicloud.log.Store("example", {
 *     projectName: example.projectName,
 *     logstoreName: "example-store",
 *     retentionPeriod: 3650,
 *     shardCount: 3,
 *     autoSplit: true,
 *     maxSplitShardCount: 60,
 *     appendMeta: true,
 * });
 * const exampleLogTailConfig = new alicloud.log.LogTailConfig("example", {
 *     project: example.projectName,
 *     logstore: exampleStore.logstoreName,
 *     inputType: "file",
 *     name: "terraform-example",
 *     outputType: "LogService",
 *     inputDetail: `  \x09{
 * \x09\x09"logPath": "/logPath",
 * \x09\x09"filePattern": "access.log",
 * \x09\x09"logType": "json_log",
 * \x09\x09"topicFormat": "default",
 * \x09\x09"discardUnmatch": false,
 * \x09\x09"enableRawLog": true,
 * \x09\x09"fileEncoding": "gbk",
 * \x09\x09"maxDepth": 10
 * \x09}
 * `,
 * });
 * const exampleMachineGroup = new alicloud.log.MachineGroup("example", {
 *     project: example.projectName,
 *     name: "terraform-example",
 *     identifyType: "ip",
 *     topic: "terraform",
 *     identifyLists: [
 *         "10.0.0.1",
 *         "10.0.0.2",
 *     ],
 * });
 * const exampleLogTailAttachment = new alicloud.log.LogTailAttachment("example", {
 *     project: example.projectName,
 *     logtailConfigName: exampleLogTailConfig.name,
 *     machineGroupName: exampleMachineGroup.name,
 * });
 * ```
 *
 * ## Import
 *
 * Logtial to machine group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:log/logTailAttachment:LogTailAttachment example tf-log:tf-log-config:tf-log-machine-group
 * ```
 */
export class LogTailAttachment extends pulumi.CustomResource {
    /**
     * Get an existing LogTailAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogTailAttachmentState, opts?: pulumi.CustomResourceOptions): LogTailAttachment {
        return new LogTailAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:log/logTailAttachment:LogTailAttachment';

    /**
     * Returns true if the given object is an instance of LogTailAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogTailAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogTailAttachment.__pulumiType;
    }

    /**
     * The Logtail configuration name, which is unique in the same project.
     */
    declare public readonly logtailConfigName: pulumi.Output<string>;
    /**
     * The machine group name, which is unique in the same project.
     */
    declare public readonly machineGroupName: pulumi.Output<string>;
    /**
     * The project name to the log store belongs.
     */
    declare public readonly project: pulumi.Output<string>;

    /**
     * Create a LogTailAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogTailAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogTailAttachmentArgs | LogTailAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogTailAttachmentState | undefined;
            resourceInputs["logtailConfigName"] = state?.logtailConfigName;
            resourceInputs["machineGroupName"] = state?.machineGroupName;
            resourceInputs["project"] = state?.project;
        } else {
            const args = argsOrState as LogTailAttachmentArgs | undefined;
            if (args?.logtailConfigName === undefined && !opts.urn) {
                throw new Error("Missing required property 'logtailConfigName'");
            }
            if (args?.machineGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'machineGroupName'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["logtailConfigName"] = args?.logtailConfigName;
            resourceInputs["machineGroupName"] = args?.machineGroupName;
            resourceInputs["project"] = args?.project;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogTailAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogTailAttachment resources.
 */
export interface LogTailAttachmentState {
    /**
     * The Logtail configuration name, which is unique in the same project.
     */
    logtailConfigName?: pulumi.Input<string>;
    /**
     * The machine group name, which is unique in the same project.
     */
    machineGroupName?: pulumi.Input<string>;
    /**
     * The project name to the log store belongs.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogTailAttachment resource.
 */
export interface LogTailAttachmentArgs {
    /**
     * The Logtail configuration name, which is unique in the same project.
     */
    logtailConfigName: pulumi.Input<string>;
    /**
     * The machine group name, which is unique in the same project.
     */
    machineGroupName: pulumi.Input<string>;
    /**
     * The project name to the log store belongs.
     */
    project: pulumi.Input<string>;
}
