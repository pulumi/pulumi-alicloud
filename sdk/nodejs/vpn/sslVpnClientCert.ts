// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultGetNetworks = alicloud.vpc.getNetworks({
 *     nameRegex: "^default-NODELETING$",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const default0 = Promise.all([defaultGetNetworks, _default]).then(([defaultGetNetworks, _default]) => alicloud.vpc.getSwitches({
 *     vpcId: defaultGetNetworks.ids?.[0],
 *     zoneId: _default.ids?.[0],
 * }));
 * const default1 = Promise.all([defaultGetNetworks, _default]).then(([defaultGetNetworks, _default]) => alicloud.vpc.getSwitches({
 *     vpcId: defaultGetNetworks.ids?.[0],
 *     zoneId: _default.ids?.[1],
 * }));
 * const defaultGateway = new alicloud.vpn.Gateway("default", {
 *     vpnGatewayName: name,
 *     vpcId: defaultGetNetworks.then(defaultGetNetworks => defaultGetNetworks.ids?.[0]),
 *     bandwidth: 10,
 *     enableSsl: true,
 *     description: name,
 *     paymentType: "Subscription",
 *     vswitchId: default0.then(default0 => default0.ids?.[0]),
 *     disasterRecoveryVswitchId: default1.then(default1 => default1.ids?.[0]),
 * });
 * const defaultSslVpnServer = new alicloud.vpn.SslVpnServer("default", {
 *     name: name,
 *     vpnGatewayId: defaultGateway.id,
 *     clientIpPool: "192.168.0.0/16",
 *     localSubnet: defaultGetNetworks.then(defaultGetNetworks => std.cidrsubnet({
 *         input: defaultGetNetworks.vpcs?.[0]?.cidrBlock,
 *         newbits: 8,
 *         netnum: 8,
 *     })).then(invoke => invoke.result),
 *     protocol: "UDP",
 *     cipher: "AES-128-CBC",
 *     port: 1194,
 *     compress: false,
 * });
 * const defaultSslVpnClientCert = new alicloud.vpn.SslVpnClientCert("default", {
 *     sslVpnServerId: defaultSslVpnServer.id,
 *     name: name,
 * });
 * ```
 *
 * ## Import
 *
 * SSL-VPN client certificates can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:vpn/sslVpnClientCert:SslVpnClientCert example vsc-abc123456
 * ```
 */
export class SslVpnClientCert extends pulumi.CustomResource {
    /**
     * Get an existing SslVpnClientCert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslVpnClientCertState, opts?: pulumi.CustomResourceOptions): SslVpnClientCert {
        return new SslVpnClientCert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpn/sslVpnClientCert:SslVpnClientCert';

    /**
     * Returns true if the given object is an instance of SslVpnClientCert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslVpnClientCert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslVpnClientCert.__pulumiType;
    }

    /**
     * The client ca cert.
     */
    public /*out*/ readonly caCert!: pulumi.Output<string>;
    /**
     * The client cert.
     */
    public /*out*/ readonly clientCert!: pulumi.Output<string>;
    /**
     * The vpn client config.
     */
    public /*out*/ readonly clientConfig!: pulumi.Output<string>;
    /**
     * The client key.
     */
    public /*out*/ readonly clientKey!: pulumi.Output<string>;
    /**
     * The name of the client certificate.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the SSL-VPN server.
     */
    public readonly sslVpnServerId!: pulumi.Output<string>;
    /**
     * The status of the client certificate.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a SslVpnClientCert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslVpnClientCertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslVpnClientCertArgs | SslVpnClientCertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslVpnClientCertState | undefined;
            resourceInputs["caCert"] = state ? state.caCert : undefined;
            resourceInputs["clientCert"] = state ? state.clientCert : undefined;
            resourceInputs["clientConfig"] = state ? state.clientConfig : undefined;
            resourceInputs["clientKey"] = state ? state.clientKey : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sslVpnServerId"] = state ? state.sslVpnServerId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as SslVpnClientCertArgs | undefined;
            if ((!args || args.sslVpnServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sslVpnServerId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sslVpnServerId"] = args ? args.sslVpnServerId : undefined;
            resourceInputs["caCert"] = undefined /*out*/;
            resourceInputs["clientCert"] = undefined /*out*/;
            resourceInputs["clientConfig"] = undefined /*out*/;
            resourceInputs["clientKey"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caCert", "clientCert", "clientConfig", "clientKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SslVpnClientCert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SslVpnClientCert resources.
 */
export interface SslVpnClientCertState {
    /**
     * The client ca cert.
     */
    caCert?: pulumi.Input<string>;
    /**
     * The client cert.
     */
    clientCert?: pulumi.Input<string>;
    /**
     * The vpn client config.
     */
    clientConfig?: pulumi.Input<string>;
    /**
     * The client key.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * The name of the client certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the SSL-VPN server.
     */
    sslVpnServerId?: pulumi.Input<string>;
    /**
     * The status of the client certificate.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SslVpnClientCert resource.
 */
export interface SslVpnClientCertArgs {
    /**
     * The name of the client certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the SSL-VPN server.
     */
    sslVpnServerId: pulumi.Input<string>;
}
