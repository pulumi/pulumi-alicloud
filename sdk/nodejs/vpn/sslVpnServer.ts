// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * SSL-VPN server can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:vpn/sslVpnServer:SslVpnServer example vss-abc123456
 * ```
 */
export class SslVpnServer extends pulumi.CustomResource {
    /**
     * Get an existing SslVpnServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslVpnServerState, opts?: pulumi.CustomResourceOptions): SslVpnServer {
        return new SslVpnServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpn/sslVpnServer:SslVpnServer';

    /**
     * Returns true if the given object is an instance of SslVpnServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslVpnServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslVpnServer.__pulumiType;
    }

    /**
     * The encryption algorithm used by the SSL-VPN server. Valid value: AES-128-CBC (default)| AES-192-CBC | AES-256-CBC | none
     */
    public readonly cipher!: pulumi.Output<string | undefined>;
    /**
     * The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
     */
    public readonly clientIpPool!: pulumi.Output<string>;
    /**
     * Specify whether to compress the communication. Valid value: true (default) | false
     */
    public readonly compress!: pulumi.Output<boolean | undefined>;
    /**
     * The number of current connections.
     */
    public /*out*/ readonly connections!: pulumi.Output<number>;
    /**
     * The internet IP of the SSL-VPN server.
     */
    public /*out*/ readonly internetIp!: pulumi.Output<string>;
    /**
     * The CIDR block to be accessed by the client through the SSL-VPN connection. It supports to set multi CIDRs by comma join ways, like `10.0.1.0/24,10.0.2.0/24,10.0.3.0/24`.
     */
    public readonly localSubnet!: pulumi.Output<string>;
    /**
     * The maximum number of connections.
     */
    public /*out*/ readonly maxConnections!: pulumi.Output<number>;
    /**
     * The name of the SSL-VPN server.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The port used by the SSL-VPN server. The default value is 1194.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * The ID of the VPN gateway.
     */
    public readonly vpnGatewayId!: pulumi.Output<string>;

    /**
     * Create a SslVpnServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslVpnServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslVpnServerArgs | SslVpnServerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SslVpnServerState | undefined;
            inputs["cipher"] = state ? state.cipher : undefined;
            inputs["clientIpPool"] = state ? state.clientIpPool : undefined;
            inputs["compress"] = state ? state.compress : undefined;
            inputs["connections"] = state ? state.connections : undefined;
            inputs["internetIp"] = state ? state.internetIp : undefined;
            inputs["localSubnet"] = state ? state.localSubnet : undefined;
            inputs["maxConnections"] = state ? state.maxConnections : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        } else {
            const args = argsOrState as SslVpnServerArgs | undefined;
            if (!args || args.clientIpPool === undefined) {
                throw new Error("Missing required property 'clientIpPool'");
            }
            if (!args || args.localSubnet === undefined) {
                throw new Error("Missing required property 'localSubnet'");
            }
            if (!args || args.vpnGatewayId === undefined) {
                throw new Error("Missing required property 'vpnGatewayId'");
            }
            inputs["cipher"] = args ? args.cipher : undefined;
            inputs["clientIpPool"] = args ? args.clientIpPool : undefined;
            inputs["compress"] = args ? args.compress : undefined;
            inputs["localSubnet"] = args ? args.localSubnet : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            inputs["connections"] = undefined /*out*/;
            inputs["internetIp"] = undefined /*out*/;
            inputs["maxConnections"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SslVpnServer.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SslVpnServer resources.
 */
export interface SslVpnServerState {
    /**
     * The encryption algorithm used by the SSL-VPN server. Valid value: AES-128-CBC (default)| AES-192-CBC | AES-256-CBC | none
     */
    readonly cipher?: pulumi.Input<string>;
    /**
     * The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
     */
    readonly clientIpPool?: pulumi.Input<string>;
    /**
     * Specify whether to compress the communication. Valid value: true (default) | false
     */
    readonly compress?: pulumi.Input<boolean>;
    /**
     * The number of current connections.
     */
    readonly connections?: pulumi.Input<number>;
    /**
     * The internet IP of the SSL-VPN server.
     */
    readonly internetIp?: pulumi.Input<string>;
    /**
     * The CIDR block to be accessed by the client through the SSL-VPN connection. It supports to set multi CIDRs by comma join ways, like `10.0.1.0/24,10.0.2.0/24,10.0.3.0/24`.
     */
    readonly localSubnet?: pulumi.Input<string>;
    /**
     * The maximum number of connections.
     */
    readonly maxConnections?: pulumi.Input<number>;
    /**
     * The name of the SSL-VPN server.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The port used by the SSL-VPN server. The default value is 1194.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
     */
    readonly port?: pulumi.Input<number>;
    /**
     * The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
     */
    readonly protocol?: pulumi.Input<string>;
    /**
     * The ID of the VPN gateway.
     */
    readonly vpnGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SslVpnServer resource.
 */
export interface SslVpnServerArgs {
    /**
     * The encryption algorithm used by the SSL-VPN server. Valid value: AES-128-CBC (default)| AES-192-CBC | AES-256-CBC | none
     */
    readonly cipher?: pulumi.Input<string>;
    /**
     * The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
     */
    readonly clientIpPool: pulumi.Input<string>;
    /**
     * Specify whether to compress the communication. Valid value: true (default) | false
     */
    readonly compress?: pulumi.Input<boolean>;
    /**
     * The CIDR block to be accessed by the client through the SSL-VPN connection. It supports to set multi CIDRs by comma join ways, like `10.0.1.0/24,10.0.2.0/24,10.0.3.0/24`.
     */
    readonly localSubnet: pulumi.Input<string>;
    /**
     * The name of the SSL-VPN server.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The port used by the SSL-VPN server. The default value is 1194.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
     */
    readonly port?: pulumi.Input<number>;
    /**
     * The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
     */
    readonly protocol?: pulumi.Input<string>;
    /**
     * The ID of the VPN gateway.
     */
    readonly vpnGatewayId: pulumi.Input<string>;
}
