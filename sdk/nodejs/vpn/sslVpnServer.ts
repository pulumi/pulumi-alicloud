// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const fooGateway = new alicloud.vpn.Gateway("fooGateway", {
 *     vpcId: "vpc-fake-id",
 *     bandwidth: 10,
 *     enableSsl: true,
 *     instanceChargeType: "PostPaid",
 *     description: "test_create_description",
 * });
 * const fooSslVpnServer = new alicloud.vpn.SslVpnServer("fooSslVpnServer", {
 *     vpnGatewayId: fooGateway.id,
 *     clientIpPool: "192.168.0.0/16",
 *     localSubnet: "172.16.0.0/21",
 *     protocol: "UDP",
 *     cipher: "AES-128-CBC",
 *     port: 1194,
 *     compress: false,
 * });
 * ```
 *
 * ## Import
 *
 * SSL-VPN server can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:vpn/sslVpnServer:SslVpnServer example vss-abc123456
 * ```
 */
export class SslVpnServer extends pulumi.CustomResource {
    /**
     * Get an existing SslVpnServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslVpnServerState, opts?: pulumi.CustomResourceOptions): SslVpnServer {
        return new SslVpnServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpn/sslVpnServer:SslVpnServer';

    /**
     * Returns true if the given object is an instance of SslVpnServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslVpnServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslVpnServer.__pulumiType;
    }

    /**
     * The encryption algorithm that is used in the SSL-VPN connection. Valid values: `AES-128-CBC`,`AES-192-CBC`,`AES-256-CBC`,`none`. Default value: `AES-128-CBC`.
     * * `AES-128-CBC` - the AES-128-CBC algorithm.
     * * `AES-192-CBC` - the AES-192-CBC algorithm.
     * * `AES-256-CBC` - the AES-256-CBC algorithm.
     */
    public readonly cipher!: pulumi.Output<string | undefined>;
    /**
     * The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
     */
    public readonly clientIpPool!: pulumi.Output<string>;
    /**
     * Specifies whether to enable data compression. Valid values: `true`,`false`. Default value: `false`
     */
    public readonly compress!: pulumi.Output<boolean | undefined>;
    /**
     * The number of current connections.
     */
    public /*out*/ readonly connections!: pulumi.Output<number>;
    /**
     * The internet IP of the SSL-VPN server.
     */
    public /*out*/ readonly internetIp!: pulumi.Output<string>;
    /**
     * The CIDR block to be accessed by the client through the SSL-VPN connection. It supports to set multi CIDRs by comma join ways, like `10.0.1.0/24,10.0.2.0/24,10.0.3.0/24`.
     */
    public readonly localSubnet!: pulumi.Output<string>;
    /**
     * The maximum number of connections.
     */
    public /*out*/ readonly maxConnections!: pulumi.Output<number>;
    /**
     * The name of the SSL-VPN server.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The port used by the SSL-VPN server. The default value is `1194`.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * The ID of the VPN gateway.
     */
    public readonly vpnGatewayId!: pulumi.Output<string>;

    /**
     * Create a SslVpnServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslVpnServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslVpnServerArgs | SslVpnServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslVpnServerState | undefined;
            resourceInputs["cipher"] = state ? state.cipher : undefined;
            resourceInputs["clientIpPool"] = state ? state.clientIpPool : undefined;
            resourceInputs["compress"] = state ? state.compress : undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["internetIp"] = state ? state.internetIp : undefined;
            resourceInputs["localSubnet"] = state ? state.localSubnet : undefined;
            resourceInputs["maxConnections"] = state ? state.maxConnections : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        } else {
            const args = argsOrState as SslVpnServerArgs | undefined;
            if ((!args || args.clientIpPool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientIpPool'");
            }
            if ((!args || args.localSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localSubnet'");
            }
            if ((!args || args.vpnGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnGatewayId'");
            }
            resourceInputs["cipher"] = args ? args.cipher : undefined;
            resourceInputs["clientIpPool"] = args ? args.clientIpPool : undefined;
            resourceInputs["compress"] = args ? args.compress : undefined;
            resourceInputs["localSubnet"] = args ? args.localSubnet : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            resourceInputs["connections"] = undefined /*out*/;
            resourceInputs["internetIp"] = undefined /*out*/;
            resourceInputs["maxConnections"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SslVpnServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SslVpnServer resources.
 */
export interface SslVpnServerState {
    /**
     * The encryption algorithm that is used in the SSL-VPN connection. Valid values: `AES-128-CBC`,`AES-192-CBC`,`AES-256-CBC`,`none`. Default value: `AES-128-CBC`.
     * * `AES-128-CBC` - the AES-128-CBC algorithm.
     * * `AES-192-CBC` - the AES-192-CBC algorithm.
     * * `AES-256-CBC` - the AES-256-CBC algorithm.
     */
    cipher?: pulumi.Input<string>;
    /**
     * The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
     */
    clientIpPool?: pulumi.Input<string>;
    /**
     * Specifies whether to enable data compression. Valid values: `true`,`false`. Default value: `false`
     */
    compress?: pulumi.Input<boolean>;
    /**
     * The number of current connections.
     */
    connections?: pulumi.Input<number>;
    /**
     * The internet IP of the SSL-VPN server.
     */
    internetIp?: pulumi.Input<string>;
    /**
     * The CIDR block to be accessed by the client through the SSL-VPN connection. It supports to set multi CIDRs by comma join ways, like `10.0.1.0/24,10.0.2.0/24,10.0.3.0/24`.
     */
    localSubnet?: pulumi.Input<string>;
    /**
     * The maximum number of connections.
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * The name of the SSL-VPN server.
     */
    name?: pulumi.Input<string>;
    /**
     * The port used by the SSL-VPN server. The default value is `1194`.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
     */
    protocol?: pulumi.Input<string>;
    /**
     * The ID of the VPN gateway.
     */
    vpnGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SslVpnServer resource.
 */
export interface SslVpnServerArgs {
    /**
     * The encryption algorithm that is used in the SSL-VPN connection. Valid values: `AES-128-CBC`,`AES-192-CBC`,`AES-256-CBC`,`none`. Default value: `AES-128-CBC`.
     * * `AES-128-CBC` - the AES-128-CBC algorithm.
     * * `AES-192-CBC` - the AES-192-CBC algorithm.
     * * `AES-256-CBC` - the AES-256-CBC algorithm.
     */
    cipher?: pulumi.Input<string>;
    /**
     * The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
     */
    clientIpPool: pulumi.Input<string>;
    /**
     * Specifies whether to enable data compression. Valid values: `true`,`false`. Default value: `false`
     */
    compress?: pulumi.Input<boolean>;
    /**
     * The CIDR block to be accessed by the client through the SSL-VPN connection. It supports to set multi CIDRs by comma join ways, like `10.0.1.0/24,10.0.2.0/24,10.0.3.0/24`.
     */
    localSubnet: pulumi.Input<string>;
    /**
     * The name of the SSL-VPN server.
     */
    name?: pulumi.Input<string>;
    /**
     * The port used by the SSL-VPN server. The default value is `1194`.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
     */
    protocol?: pulumi.Input<string>;
    /**
     * The ID of the VPN gateway.
     */
    vpnGatewayId: pulumi.Input<string>;
}
