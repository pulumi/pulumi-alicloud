// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a VPN Gateway Vpn Attachment resource.
 *
 * VpnAttachment has been upgraded to dual-tunnel mode. When you create a VpnAttachment in dual tunnel mode, you can configure the following request parameters in addition to the required parameters: vpn_attachment_name, network_type, effectImmediately, tags array, resource_group_id, tunnelOptionsSpecification array, and enable_tunnels_bgp.
 *
 * For information about VPN Gateway Vpn Attachment and how to use it, see [What is Vpn Attachment](https://www.alibabacloud.com/help/zh/virtual-private-cloud/latest/createvpnattachment).
 *
 * > **NOTE:** Available since v1.181.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = new alicloud.vpn.CustomerGateway("default", {
 *     customerGatewayName: name,
 *     ipAddress: "42.104.22.210",
 *     asn: "45014",
 *     description: name,
 * });
 * const defaultGatewayVpnAttachment = new alicloud.vpn.GatewayVpnAttachment("default", {
 *     customerGatewayId: _default.id,
 *     networkType: "public",
 *     localSubnet: "0.0.0.0/0",
 *     remoteSubnet: "0.0.0.0/0",
 *     effectImmediately: false,
 *     ikeConfig: {
 *         ikeAuthAlg: "md5",
 *         ikeEncAlg: "des",
 *         ikeVersion: "ikev2",
 *         ikeMode: "main",
 *         ikeLifetime: 86400,
 *         psk: "tf-testvpn2",
 *         ikePfs: "group1",
 *         remoteId: "testbob2",
 *         localId: "testalice2",
 *     },
 *     ipsecConfig: {
 *         ipsecPfs: "group5",
 *         ipsecEncAlg: "des",
 *         ipsecAuthAlg: "md5",
 *         ipsecLifetime: 86400,
 *     },
 *     bgpConfig: {
 *         enable: true,
 *         localAsn: 45014,
 *         tunnelCidr: "169.254.11.0/30",
 *         localBgpIp: "169.254.11.1",
 *     },
 *     healthCheckConfig: {
 *         enable: true,
 *         sip: "192.168.1.1",
 *         dip: "10.0.0.1",
 *         interval: 10,
 *         retry: 10,
 *         policy: "revoke_route",
 *     },
 *     enableDpd: true,
 *     enableNatTraversal: true,
 *     vpnAttachmentName: name,
 * });
 * ```
 *
 * Dual Tunnel Mode Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf_example";
 * const _default = alicloud.resourcemanager.getResourceGroups({});
 * const cgw1 = new alicloud.vpn.CustomerGateway("cgw1", {
 *     ipAddress: "2.2.2.2",
 *     asn: "1219001",
 * });
 * const cgw2 = new alicloud.vpn.CustomerGateway("cgw2", {
 *     ipAddress: "43.43.3.22",
 *     asn: "44331",
 *     customerGatewayName: "example_amp",
 * });
 * const defaultGatewayVpnAttachment = new alicloud.vpn.GatewayVpnAttachment("default", {
 *     localSubnet: "0.0.0.0/0",
 *     enableTunnelsBgp: true,
 *     vpnAttachmentName: "tfaccvpngateway25800",
 *     tunnelOptionsSpecifications: [
 *         {
 *             tunnelIpsecConfig: {
 *                 ipsecLifetime: 86200,
 *                 ipsecPfs: "group5",
 *                 ipsecAuthAlg: "md5",
 *                 ipsecEncAlg: "aes",
 *             },
 *             customerGatewayId: cgw1.id,
 *             enableDpd: true,
 *             enableNatTraversal: true,
 *             tunnelIndex: 1,
 *             tunnelBgpConfig: {
 *                 localAsn: 1219001,
 *                 localBgpIp: "169.254.10.1",
 *                 tunnelCidr: "169.254.10.0/30",
 *             },
 *             tunnelIkeConfig: {
 *                 ikeMode: "main",
 *                 ikeVersion: "ikev1",
 *                 psk: "12345678",
 *                 remoteId: "2.2.2.2",
 *                 ikeAuthAlg: "md5",
 *                 ikeEncAlg: "aes",
 *                 ikeLifetime: 86100,
 *                 ikePfs: "group2",
 *                 localId: "1.1.1.1",
 *             },
 *         },
 *         {
 *             tunnelIpsecConfig: {
 *                 ipsecEncAlg: "aes",
 *                 ipsecLifetime: 86400,
 *                 ipsecPfs: "group5",
 *                 ipsecAuthAlg: "sha256",
 *             },
 *             customerGatewayId: cgw1.id,
 *             enableDpd: true,
 *             enableNatTraversal: true,
 *             tunnelIndex: 2,
 *             tunnelBgpConfig: {
 *                 localAsn: 1219001,
 *                 localBgpIp: "169.254.20.1",
 *                 tunnelCidr: "169.254.20.0/30",
 *             },
 *             tunnelIkeConfig: {
 *                 localId: "4.4.4.4",
 *                 remoteId: "5.5.5.5",
 *                 ikeLifetime: 86400,
 *                 ikeMode: "main",
 *                 ikePfs: "group5",
 *                 ikeVersion: "ikev2",
 *                 ikeAuthAlg: "md5",
 *                 ikeEncAlg: "aes",
 *                 psk: "32333442",
 *             },
 *         },
 *     ],
 *     remoteSubnet: "0.0.0.0/0",
 *     networkType: "public",
 *     resourceGroupId: _default.then(_default => _default.ids?.[0]),
 * });
 * ```
 *
 * ## Import
 *
 * VPN Gateway Vpn Attachment can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:vpn/gatewayVpnAttachment:GatewayVpnAttachment example <id>
 * ```
 */
export class GatewayVpnAttachment extends pulumi.CustomResource {
    /**
     * Get an existing GatewayVpnAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayVpnAttachmentState, opts?: pulumi.CustomResourceOptions): GatewayVpnAttachment {
        return new GatewayVpnAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpn/gatewayVpnAttachment:GatewayVpnAttachment';

    /**
     * Returns true if the given object is an instance of GatewayVpnAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayVpnAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayVpnAttachment.__pulumiType;
    }

    /**
     * Bgp configuration information.
     * - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgpConfig` below.
     */
    declare public readonly bgpConfig: pulumi.Output<outputs.vpn.GatewayVpnAttachmentBgpConfig>;
    /**
     * The creation time of the resource
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Customer gateway ID.
     * - This parameter is required when creating a single-tunnel mode vpn attachment.
     */
    declare public readonly customerGatewayId: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
     */
    declare public readonly effectImmediately: pulumi.Output<boolean>;
    /**
     * This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Whether to enable the DPD (peer survival detection) function.
     * - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
     * - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
     */
    declare public readonly enableDpd: pulumi.Output<boolean>;
    /**
     * This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Specifies whether to enable NAT traversal. Valid values:
     * - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
     * - false: disables NAT traversal.
     */
    declare public readonly enableNatTraversal: pulumi.Output<boolean>;
    /**
     * You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
     *
     * > **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
     */
    declare public readonly enableTunnelsBgp: pulumi.Output<boolean>;
    /**
     * This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Health check configuration information. See `healthCheckConfig` below.
     */
    declare public readonly healthCheckConfig: pulumi.Output<outputs.vpn.GatewayVpnAttachmentHealthCheckConfig>;
    /**
     * The configurations of Phase 1 negotiations. 
     * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ikeConfig` below.
     */
    declare public readonly ikeConfig: pulumi.Output<outputs.vpn.GatewayVpnAttachmentIkeConfig>;
    /**
     * Configuration negotiated in the second stage. 
     * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsecConfig` below.
     */
    declare public readonly ipsecConfig: pulumi.Output<outputs.vpn.GatewayVpnAttachmentIpsecConfig>;
    /**
     * The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
     * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
     * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
     */
    declare public readonly localSubnet: pulumi.Output<string>;
    /**
     * network type
     */
    declare public readonly networkType: pulumi.Output<string>;
    /**
     * The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
     * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
     * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
     */
    declare public readonly remoteSubnet: pulumi.Output<string>;
    /**
     * The ID of the resource group
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * The negotiation status of Tunnel.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Tags
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Configure the tunnel.
     * - You can configure parameters in the `tunnelOptionsSpecification` array when you create a vpn attachment in dual-tunnel mode.
     * - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnelOptionsSpecification` below.
     */
    declare public readonly tunnelOptionsSpecifications: pulumi.Output<outputs.vpn.GatewayVpnAttachmentTunnelOptionsSpecification[]>;
    /**
     * vpn attachment name
     */
    declare public readonly vpnAttachmentName: pulumi.Output<string | undefined>;

    /**
     * Create a GatewayVpnAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayVpnAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayVpnAttachmentArgs | GatewayVpnAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayVpnAttachmentState | undefined;
            resourceInputs["bgpConfig"] = state?.bgpConfig;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["customerGatewayId"] = state?.customerGatewayId;
            resourceInputs["effectImmediately"] = state?.effectImmediately;
            resourceInputs["enableDpd"] = state?.enableDpd;
            resourceInputs["enableNatTraversal"] = state?.enableNatTraversal;
            resourceInputs["enableTunnelsBgp"] = state?.enableTunnelsBgp;
            resourceInputs["healthCheckConfig"] = state?.healthCheckConfig;
            resourceInputs["ikeConfig"] = state?.ikeConfig;
            resourceInputs["ipsecConfig"] = state?.ipsecConfig;
            resourceInputs["localSubnet"] = state?.localSubnet;
            resourceInputs["networkType"] = state?.networkType;
            resourceInputs["remoteSubnet"] = state?.remoteSubnet;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tunnelOptionsSpecifications"] = state?.tunnelOptionsSpecifications;
            resourceInputs["vpnAttachmentName"] = state?.vpnAttachmentName;
        } else {
            const args = argsOrState as GatewayVpnAttachmentArgs | undefined;
            if (args?.localSubnet === undefined && !opts.urn) {
                throw new Error("Missing required property 'localSubnet'");
            }
            if (args?.remoteSubnet === undefined && !opts.urn) {
                throw new Error("Missing required property 'remoteSubnet'");
            }
            resourceInputs["bgpConfig"] = args?.bgpConfig;
            resourceInputs["customerGatewayId"] = args?.customerGatewayId;
            resourceInputs["effectImmediately"] = args?.effectImmediately;
            resourceInputs["enableDpd"] = args?.enableDpd;
            resourceInputs["enableNatTraversal"] = args?.enableNatTraversal;
            resourceInputs["enableTunnelsBgp"] = args?.enableTunnelsBgp;
            resourceInputs["healthCheckConfig"] = args?.healthCheckConfig;
            resourceInputs["ikeConfig"] = args?.ikeConfig;
            resourceInputs["ipsecConfig"] = args?.ipsecConfig;
            resourceInputs["localSubnet"] = args?.localSubnet;
            resourceInputs["networkType"] = args?.networkType;
            resourceInputs["remoteSubnet"] = args?.remoteSubnet;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tunnelOptionsSpecifications"] = args?.tunnelOptionsSpecifications;
            resourceInputs["vpnAttachmentName"] = args?.vpnAttachmentName;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayVpnAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayVpnAttachment resources.
 */
export interface GatewayVpnAttachmentState {
    /**
     * Bgp configuration information.
     * - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgpConfig` below.
     */
    bgpConfig?: pulumi.Input<inputs.vpn.GatewayVpnAttachmentBgpConfig>;
    /**
     * The creation time of the resource
     */
    createTime?: pulumi.Input<string>;
    /**
     * Customer gateway ID.
     * - This parameter is required when creating a single-tunnel mode vpn attachment.
     */
    customerGatewayId?: pulumi.Input<string>;
    /**
     * Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
     */
    effectImmediately?: pulumi.Input<boolean>;
    /**
     * This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Whether to enable the DPD (peer survival detection) function.
     * - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
     * - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
     */
    enableDpd?: pulumi.Input<boolean>;
    /**
     * This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Specifies whether to enable NAT traversal. Valid values:
     * - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
     * - false: disables NAT traversal.
     */
    enableNatTraversal?: pulumi.Input<boolean>;
    /**
     * You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
     *
     * > **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
     */
    enableTunnelsBgp?: pulumi.Input<boolean>;
    /**
     * This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Health check configuration information. See `healthCheckConfig` below.
     */
    healthCheckConfig?: pulumi.Input<inputs.vpn.GatewayVpnAttachmentHealthCheckConfig>;
    /**
     * The configurations of Phase 1 negotiations. 
     * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ikeConfig` below.
     */
    ikeConfig?: pulumi.Input<inputs.vpn.GatewayVpnAttachmentIkeConfig>;
    /**
     * Configuration negotiated in the second stage. 
     * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsecConfig` below.
     */
    ipsecConfig?: pulumi.Input<inputs.vpn.GatewayVpnAttachmentIpsecConfig>;
    /**
     * The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
     * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
     * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
     */
    localSubnet?: pulumi.Input<string>;
    /**
     * network type
     */
    networkType?: pulumi.Input<string>;
    /**
     * The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
     * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
     * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
     */
    remoteSubnet?: pulumi.Input<string>;
    /**
     * The ID of the resource group
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The negotiation status of Tunnel.
     */
    status?: pulumi.Input<string>;
    /**
     * Tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configure the tunnel.
     * - You can configure parameters in the `tunnelOptionsSpecification` array when you create a vpn attachment in dual-tunnel mode.
     * - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnelOptionsSpecification` below.
     */
    tunnelOptionsSpecifications?: pulumi.Input<pulumi.Input<inputs.vpn.GatewayVpnAttachmentTunnelOptionsSpecification>[]>;
    /**
     * vpn attachment name
     */
    vpnAttachmentName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewayVpnAttachment resource.
 */
export interface GatewayVpnAttachmentArgs {
    /**
     * Bgp configuration information.
     * - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgpConfig` below.
     */
    bgpConfig?: pulumi.Input<inputs.vpn.GatewayVpnAttachmentBgpConfig>;
    /**
     * Customer gateway ID.
     * - This parameter is required when creating a single-tunnel mode vpn attachment.
     */
    customerGatewayId?: pulumi.Input<string>;
    /**
     * Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
     */
    effectImmediately?: pulumi.Input<boolean>;
    /**
     * This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Whether to enable the DPD (peer survival detection) function.
     * - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
     * - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
     */
    enableDpd?: pulumi.Input<boolean>;
    /**
     * This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Specifies whether to enable NAT traversal. Valid values:
     * - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
     * - false: disables NAT traversal.
     */
    enableNatTraversal?: pulumi.Input<boolean>;
    /**
     * You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
     *
     * > **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
     */
    enableTunnelsBgp?: pulumi.Input<boolean>;
    /**
     * This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Health check configuration information. See `healthCheckConfig` below.
     */
    healthCheckConfig?: pulumi.Input<inputs.vpn.GatewayVpnAttachmentHealthCheckConfig>;
    /**
     * The configurations of Phase 1 negotiations. 
     * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ikeConfig` below.
     */
    ikeConfig?: pulumi.Input<inputs.vpn.GatewayVpnAttachmentIkeConfig>;
    /**
     * Configuration negotiated in the second stage. 
     * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsecConfig` below.
     */
    ipsecConfig?: pulumi.Input<inputs.vpn.GatewayVpnAttachmentIpsecConfig>;
    /**
     * The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
     * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
     * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
     */
    localSubnet: pulumi.Input<string>;
    /**
     * network type
     */
    networkType?: pulumi.Input<string>;
    /**
     * The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
     * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
     * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
     */
    remoteSubnet: pulumi.Input<string>;
    /**
     * The ID of the resource group
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configure the tunnel.
     * - You can configure parameters in the `tunnelOptionsSpecification` array when you create a vpn attachment in dual-tunnel mode.
     * - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnelOptionsSpecification` below.
     */
    tunnelOptionsSpecifications?: pulumi.Input<pulumi.Input<inputs.vpn.GatewayVpnAttachmentTunnelOptionsSpecification>[]>;
    /**
     * vpn attachment name
     */
    vpnAttachmentName?: pulumi.Input<string>;
}
