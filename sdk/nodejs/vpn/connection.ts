// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * Basic Usage
 *
 * [IPsec-VPN connections support the dual-tunnel mode](https://www.alibabacloud.com/help/en/vpn/product-overview/ipsec-vpn-connections-support-the-dual-tunnel-mode)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const spec = config.get("spec") || "5";
 * const default = alicloud.vpn.getGatewayZones({
 *     spec: "5M",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     cidrBlock: "172.16.0.0/16",
 *     vpcName: name,
 * });
 * const default0 = new alicloud.vpc.Switch("default0", {
 *     cidrBlock: "172.16.0.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: _default.then(_default => _default.ids?.[0]),
 * });
 * const default1 = new alicloud.vpc.Switch("default1", {
 *     cidrBlock: "172.16.1.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: _default.then(_default => _default.ids?.[1]),
 * });
 * const HA_VPN = new alicloud.vpn.Gateway("HA-VPN", {
 *     vpnType: "Normal",
 *     disasterRecoveryVswitchId: default1.id,
 *     vpnGatewayName: name,
 *     vswitchId: default0.id,
 *     autoPay: true,
 *     vpcId: defaultNetwork.id,
 *     networkType: "public",
 *     paymentType: "Subscription",
 *     enableIpsec: true,
 *     bandwidth: spec,
 * });
 * const defaultCustomerGateway = new alicloud.vpn.CustomerGateway("defaultCustomerGateway", {
 *     description: "defaultCustomerGateway",
 *     ipAddress: "2.2.2.5",
 *     asn: "2224",
 *     customerGatewayName: name,
 * });
 * const changeCustomerGateway = new alicloud.vpn.CustomerGateway("changeCustomerGateway", {
 *     description: "changeCustomerGateway",
 *     ipAddress: "2.2.2.6",
 *     asn: "2225",
 *     customerGatewayName: name,
 * });
 * const defaultConnection = new alicloud.vpn.Connection("default", {
 *     vpnGatewayId: HA_VPN.id,
 *     vpnConnectionName: name,
 *     localSubnets: ["3.0.0.0/24"],
 *     remoteSubnets: [
 *         "10.0.0.0/24",
 *         "10.0.1.0/24",
 *     ],
 *     tags: {
 *         Created: "TF",
 *         For: "example",
 *     },
 *     enableTunnelsBgp: true,
 *     tunnelOptionsSpecifications: [
 *         {
 *             tunnelIpsecConfig: {
 *                 ipsecAuthAlg: "md5",
 *                 ipsecEncAlg: "aes256",
 *                 ipsecLifetime: 16400,
 *                 ipsecPfs: "group5",
 *             },
 *             customerGatewayId: defaultCustomerGateway.id,
 *             role: "master",
 *             tunnelBgpConfig: {
 *                 localAsn: "1219002",
 *                 tunnelCidr: "169.254.30.0/30",
 *                 localBgpIp: "169.254.30.1",
 *             },
 *             tunnelIkeConfig: {
 *                 ikeMode: "aggressive",
 *                 ikeVersion: "ikev2",
 *                 localId: "localid_tunnel2",
 *                 psk: "12345678",
 *                 remoteId: "remote2",
 *                 ikeAuthAlg: "md5",
 *                 ikeEncAlg: "aes256",
 *                 ikeLifetime: 3600,
 *                 ikePfs: "group14",
 *             },
 *         },
 *         {
 *             tunnelIkeConfig: {
 *                 remoteId: "remote24",
 *                 ikeEncAlg: "aes256",
 *                 ikeLifetime: 27000,
 *                 ikeMode: "aggressive",
 *                 ikePfs: "group5",
 *                 ikeAuthAlg: "md5",
 *                 ikeVersion: "ikev2",
 *                 localId: "localid_tunnel2",
 *                 psk: "12345678",
 *             },
 *             tunnelIpsecConfig: {
 *                 ipsecLifetime: 2700,
 *                 ipsecPfs: "group14",
 *                 ipsecAuthAlg: "md5",
 *                 ipsecEncAlg: "aes256",
 *             },
 *             customerGatewayId: defaultCustomerGateway.id,
 *             role: "slave",
 *             tunnelBgpConfig: {
 *                 localAsn: "1219002",
 *                 localBgpIp: "169.254.40.1",
 *                 tunnelCidr: "169.254.40.0/30",
 *             },
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * VPN connection can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:vpn/connection:Connection example <id>
 * ```
 */
export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpn/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * Whether to configure routing automatically. Value:
     * - **true**: Automatically configure routes.
     * - **false**: does not automatically configure routes.
     */
    public readonly autoConfigRoute!: pulumi.Output<boolean | undefined>;
    /**
     * vpnBgp configuration. See `bgpConfig` below.
     */
    public readonly bgpConfig!: pulumi.Output<outputs.vpn.ConnectionBgpConfig>;
    /**
     * The time when the IPsec-VPN connection was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<number>;
    /**
     * The ID of the customer gateway.
     */
    public readonly customerGatewayId!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether IPsec-VPN negotiations are initiated immediately. Valid values.
     */
    public readonly effectImmediately!: pulumi.Output<boolean | undefined>;
    /**
     * Wether enable Dpd detection.
     */
    public readonly enableDpd!: pulumi.Output<boolean>;
    /**
     * enable nat traversal.
     */
    public readonly enableNatTraversal!: pulumi.Output<boolean>;
    /**
     * Enable tunnel bgp.
     */
    public readonly enableTunnelsBgp!: pulumi.Output<boolean>;
    /**
     * Health Check information. See `healthCheckConfig` below.
     */
    public readonly healthCheckConfig!: pulumi.Output<outputs.vpn.ConnectionHealthCheckConfig>;
    /**
     * The configuration of Phase 1 negotiations. See `ikeConfig` below.
     */
    public readonly ikeConfig!: pulumi.Output<outputs.vpn.ConnectionIkeConfig>;
    /**
     * IPsec configuration. See `ipsecConfig` below.
     */
    public readonly ipsecConfig!: pulumi.Output<outputs.vpn.ConnectionIpsecConfig>;
    /**
     * The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
     */
    public readonly localSubnets!: pulumi.Output<string[]>;
    /**
     * . Field 'name' has been deprecated from provider version 1.216.0. New field 'vpn_connection_name' instead.
     *
     * @deprecated Field 'name' has been deprecated since provider version 1.216.0. New field 'vpn_connection_name' instead.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The network type of the IPsec connection. Value:
     * - **public**: public network, indicating that the IPsec connection establishes an encrypted communication channel through the public network.
     * - **private**: private network, indicating that the IPsec connection establishes an encrypted communication channel through the private network.
     */
    public readonly networkType!: pulumi.Output<string | undefined>;
    /**
     * The CIDR block of the local data center. This parameter is used for phase-two negotiation.
     */
    public readonly remoteSubnets!: pulumi.Output<string[]>;
    /**
     * The ID of the resource group.
     */
    public /*out*/ readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The negotiation status of Tunnel.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The tunnel options of IPsec. See `tunnelOptionsSpecification` below.
     */
    public readonly tunnelOptionsSpecifications!: pulumi.Output<outputs.vpn.ConnectionTunnelOptionsSpecification[] | undefined>;
    /**
     * The name of the IPsec-VPN connection.
     */
    public readonly vpnConnectionName!: pulumi.Output<string>;
    /**
     * The ID of the VPN gateway.
     */
    public readonly vpnGatewayId!: pulumi.Output<string>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            resourceInputs["autoConfigRoute"] = state ? state.autoConfigRoute : undefined;
            resourceInputs["bgpConfig"] = state ? state.bgpConfig : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["customerGatewayId"] = state ? state.customerGatewayId : undefined;
            resourceInputs["effectImmediately"] = state ? state.effectImmediately : undefined;
            resourceInputs["enableDpd"] = state ? state.enableDpd : undefined;
            resourceInputs["enableNatTraversal"] = state ? state.enableNatTraversal : undefined;
            resourceInputs["enableTunnelsBgp"] = state ? state.enableTunnelsBgp : undefined;
            resourceInputs["healthCheckConfig"] = state ? state.healthCheckConfig : undefined;
            resourceInputs["ikeConfig"] = state ? state.ikeConfig : undefined;
            resourceInputs["ipsecConfig"] = state ? state.ipsecConfig : undefined;
            resourceInputs["localSubnets"] = state ? state.localSubnets : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["remoteSubnets"] = state ? state.remoteSubnets : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tunnelOptionsSpecifications"] = state ? state.tunnelOptionsSpecifications : undefined;
            resourceInputs["vpnConnectionName"] = state ? state.vpnConnectionName : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            if ((!args || args.localSubnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localSubnets'");
            }
            if ((!args || args.remoteSubnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteSubnets'");
            }
            if ((!args || args.vpnGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnGatewayId'");
            }
            resourceInputs["autoConfigRoute"] = args ? args.autoConfigRoute : undefined;
            resourceInputs["bgpConfig"] = args ? args.bgpConfig : undefined;
            resourceInputs["customerGatewayId"] = args ? args.customerGatewayId : undefined;
            resourceInputs["effectImmediately"] = args ? args.effectImmediately : undefined;
            resourceInputs["enableDpd"] = args ? args.enableDpd : undefined;
            resourceInputs["enableNatTraversal"] = args ? args.enableNatTraversal : undefined;
            resourceInputs["enableTunnelsBgp"] = args ? args.enableTunnelsBgp : undefined;
            resourceInputs["healthCheckConfig"] = args ? args.healthCheckConfig : undefined;
            resourceInputs["ikeConfig"] = args ? args.ikeConfig : undefined;
            resourceInputs["ipsecConfig"] = args ? args.ipsecConfig : undefined;
            resourceInputs["localSubnets"] = args ? args.localSubnets : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["remoteSubnets"] = args ? args.remoteSubnets : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tunnelOptionsSpecifications"] = args ? args.tunnelOptionsSpecifications : undefined;
            resourceInputs["vpnConnectionName"] = args ? args.vpnConnectionName : undefined;
            resourceInputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["resourceGroupId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * Whether to configure routing automatically. Value:
     * - **true**: Automatically configure routes.
     * - **false**: does not automatically configure routes.
     */
    autoConfigRoute?: pulumi.Input<boolean>;
    /**
     * vpnBgp configuration. See `bgpConfig` below.
     */
    bgpConfig?: pulumi.Input<inputs.vpn.ConnectionBgpConfig>;
    /**
     * The time when the IPsec-VPN connection was created.
     */
    createTime?: pulumi.Input<number>;
    /**
     * The ID of the customer gateway.
     */
    customerGatewayId?: pulumi.Input<string>;
    /**
     * Indicates whether IPsec-VPN negotiations are initiated immediately. Valid values.
     */
    effectImmediately?: pulumi.Input<boolean>;
    /**
     * Wether enable Dpd detection.
     */
    enableDpd?: pulumi.Input<boolean>;
    /**
     * enable nat traversal.
     */
    enableNatTraversal?: pulumi.Input<boolean>;
    /**
     * Enable tunnel bgp.
     */
    enableTunnelsBgp?: pulumi.Input<boolean>;
    /**
     * Health Check information. See `healthCheckConfig` below.
     */
    healthCheckConfig?: pulumi.Input<inputs.vpn.ConnectionHealthCheckConfig>;
    /**
     * The configuration of Phase 1 negotiations. See `ikeConfig` below.
     */
    ikeConfig?: pulumi.Input<inputs.vpn.ConnectionIkeConfig>;
    /**
     * IPsec configuration. See `ipsecConfig` below.
     */
    ipsecConfig?: pulumi.Input<inputs.vpn.ConnectionIpsecConfig>;
    /**
     * The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
     */
    localSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * . Field 'name' has been deprecated from provider version 1.216.0. New field 'vpn_connection_name' instead.
     *
     * @deprecated Field 'name' has been deprecated since provider version 1.216.0. New field 'vpn_connection_name' instead.
     */
    name?: pulumi.Input<string>;
    /**
     * The network type of the IPsec connection. Value:
     * - **public**: public network, indicating that the IPsec connection establishes an encrypted communication channel through the public network.
     * - **private**: private network, indicating that the IPsec connection establishes an encrypted communication channel through the private network.
     */
    networkType?: pulumi.Input<string>;
    /**
     * The CIDR block of the local data center. This parameter is used for phase-two negotiation.
     */
    remoteSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The negotiation status of Tunnel.
     */
    status?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The tunnel options of IPsec. See `tunnelOptionsSpecification` below.
     */
    tunnelOptionsSpecifications?: pulumi.Input<pulumi.Input<inputs.vpn.ConnectionTunnelOptionsSpecification>[]>;
    /**
     * The name of the IPsec-VPN connection.
     */
    vpnConnectionName?: pulumi.Input<string>;
    /**
     * The ID of the VPN gateway.
     */
    vpnGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * Whether to configure routing automatically. Value:
     * - **true**: Automatically configure routes.
     * - **false**: does not automatically configure routes.
     */
    autoConfigRoute?: pulumi.Input<boolean>;
    /**
     * vpnBgp configuration. See `bgpConfig` below.
     */
    bgpConfig?: pulumi.Input<inputs.vpn.ConnectionBgpConfig>;
    /**
     * The ID of the customer gateway.
     */
    customerGatewayId?: pulumi.Input<string>;
    /**
     * Indicates whether IPsec-VPN negotiations are initiated immediately. Valid values.
     */
    effectImmediately?: pulumi.Input<boolean>;
    /**
     * Wether enable Dpd detection.
     */
    enableDpd?: pulumi.Input<boolean>;
    /**
     * enable nat traversal.
     */
    enableNatTraversal?: pulumi.Input<boolean>;
    /**
     * Enable tunnel bgp.
     */
    enableTunnelsBgp?: pulumi.Input<boolean>;
    /**
     * Health Check information. See `healthCheckConfig` below.
     */
    healthCheckConfig?: pulumi.Input<inputs.vpn.ConnectionHealthCheckConfig>;
    /**
     * The configuration of Phase 1 negotiations. See `ikeConfig` below.
     */
    ikeConfig?: pulumi.Input<inputs.vpn.ConnectionIkeConfig>;
    /**
     * IPsec configuration. See `ipsecConfig` below.
     */
    ipsecConfig?: pulumi.Input<inputs.vpn.ConnectionIpsecConfig>;
    /**
     * The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
     */
    localSubnets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * . Field 'name' has been deprecated from provider version 1.216.0. New field 'vpn_connection_name' instead.
     *
     * @deprecated Field 'name' has been deprecated since provider version 1.216.0. New field 'vpn_connection_name' instead.
     */
    name?: pulumi.Input<string>;
    /**
     * The network type of the IPsec connection. Value:
     * - **public**: public network, indicating that the IPsec connection establishes an encrypted communication channel through the public network.
     * - **private**: private network, indicating that the IPsec connection establishes an encrypted communication channel through the private network.
     */
    networkType?: pulumi.Input<string>;
    /**
     * The CIDR block of the local data center. This parameter is used for phase-two negotiation.
     */
    remoteSubnets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The tunnel options of IPsec. See `tunnelOptionsSpecification` below.
     */
    tunnelOptionsSpecifications?: pulumi.Input<pulumi.Input<inputs.vpn.ConnectionTunnelOptionsSpecification>[]>;
    /**
     * The name of the IPsec-VPN connection.
     */
    vpnConnectionName?: pulumi.Input<string>;
    /**
     * The ID of the VPN gateway.
     */
    vpnGatewayId: pulumi.Input<string>;
}
