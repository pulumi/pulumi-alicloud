// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * VPN connection can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:vpn/connection:Connection example vco-abc123456
 * ```
 */
export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpn/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * The ID of the customer gateway.
     */
    public readonly customerGatewayId!: pulumi.Output<string>;
    /**
     * Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
     */
    public readonly effectImmediately!: pulumi.Output<boolean | undefined>;
    /**
     * The configurations of phase-one negotiation.
     */
    public readonly ikeConfigs!: pulumi.Output<outputs.vpn.ConnectionIkeConfig[]>;
    /**
     * The configurations of phase-two negotiation.
     */
    public readonly ipsecConfigs!: pulumi.Output<outputs.vpn.ConnectionIpsecConfig[]>;
    /**
     * The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
     */
    public readonly localSubnets!: pulumi.Output<string[]>;
    /**
     * The name of the IPsec connection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The CIDR block of the local data center. This parameter is used for phase-two negotiation.
     */
    public readonly remoteSubnets!: pulumi.Output<string[]>;
    /**
     * The status of VPN connection.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The ID of the VPN gateway.
     */
    public readonly vpnGatewayId!: pulumi.Output<string>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            inputs["customerGatewayId"] = state ? state.customerGatewayId : undefined;
            inputs["effectImmediately"] = state ? state.effectImmediately : undefined;
            inputs["ikeConfigs"] = state ? state.ikeConfigs : undefined;
            inputs["ipsecConfigs"] = state ? state.ipsecConfigs : undefined;
            inputs["localSubnets"] = state ? state.localSubnets : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["remoteSubnets"] = state ? state.remoteSubnets : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            if (!args || args.customerGatewayId === undefined) {
                throw new Error("Missing required property 'customerGatewayId'");
            }
            if (!args || args.localSubnets === undefined) {
                throw new Error("Missing required property 'localSubnets'");
            }
            if (!args || args.remoteSubnets === undefined) {
                throw new Error("Missing required property 'remoteSubnets'");
            }
            if (!args || args.vpnGatewayId === undefined) {
                throw new Error("Missing required property 'vpnGatewayId'");
            }
            inputs["customerGatewayId"] = args ? args.customerGatewayId : undefined;
            inputs["effectImmediately"] = args ? args.effectImmediately : undefined;
            inputs["ikeConfigs"] = args ? args.ikeConfigs : undefined;
            inputs["ipsecConfigs"] = args ? args.ipsecConfigs : undefined;
            inputs["localSubnets"] = args ? args.localSubnets : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["remoteSubnets"] = args ? args.remoteSubnets : undefined;
            inputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Connection.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * The ID of the customer gateway.
     */
    readonly customerGatewayId?: pulumi.Input<string>;
    /**
     * Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
     */
    readonly effectImmediately?: pulumi.Input<boolean>;
    /**
     * The configurations of phase-one negotiation.
     */
    readonly ikeConfigs?: pulumi.Input<pulumi.Input<inputs.vpn.ConnectionIkeConfig>[]>;
    /**
     * The configurations of phase-two negotiation.
     */
    readonly ipsecConfigs?: pulumi.Input<pulumi.Input<inputs.vpn.ConnectionIpsecConfig>[]>;
    /**
     * The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
     */
    readonly localSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the IPsec connection.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The CIDR block of the local data center. This parameter is used for phase-two negotiation.
     */
    readonly remoteSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of VPN connection.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * The ID of the VPN gateway.
     */
    readonly vpnGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * The ID of the customer gateway.
     */
    readonly customerGatewayId: pulumi.Input<string>;
    /**
     * Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
     */
    readonly effectImmediately?: pulumi.Input<boolean>;
    /**
     * The configurations of phase-one negotiation.
     */
    readonly ikeConfigs?: pulumi.Input<pulumi.Input<inputs.vpn.ConnectionIkeConfig>[]>;
    /**
     * The configurations of phase-two negotiation.
     */
    readonly ipsecConfigs?: pulumi.Input<pulumi.Input<inputs.vpn.ConnectionIpsecConfig>[]>;
    /**
     * The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
     */
    readonly localSubnets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the IPsec connection.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The CIDR block of the local data center. This parameter is used for phase-two negotiation.
     */
    readonly remoteSubnets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the VPN gateway.
     */
    readonly vpnGatewayId: pulumi.Input<string>;
}
