// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a VPN Gateway Vco Route resource.
 *
 * For information about VPN Gateway Vco Route and how to use it, see [What is Vco Route](https://www.alibabacloud.com/help/zh/virtual-private-cloud/latest/createvcorouteentry).
 *
 * > **NOTE:** Available in v1.183.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const defaultInstance = new alicloud.cen.Instance("defaultInstance", {cenInstanceName: _var.name});
 * const defaultTransitRouter = new alicloud.cen.TransitRouter("defaultTransitRouter", {
 *     cenId: defaultInstance.id,
 *     transitRouterDescription: "desd",
 *     transitRouterName: _var.name,
 * });
 * const defaultTransitRouterAvailableResources = alicloud.cen.getTransitRouterAvailableResources({});
 * const defaultCustomerGateway = new alicloud.vpn.CustomerGateway("defaultCustomerGateway", {
 *     ipAddress: "42.104.22.210",
 *     asn: "45014",
 *     description: "testAccVpnConnectionDesc",
 * });
 * const defaultGatewayVpnAttachment = new alicloud.vpn.GatewayVpnAttachment("defaultGatewayVpnAttachment", {
 *     customerGatewayId: defaultCustomerGateway.id,
 *     networkType: "public",
 *     localSubnet: "0.0.0.0/0",
 *     remoteSubnet: "0.0.0.0/0",
 *     effectImmediately: false,
 *     ikeConfig: {
 *         ikeAuthAlg: "md5",
 *         ikeEncAlg: "des",
 *         ikeVersion: "ikev2",
 *         ikeMode: "main",
 *         ikeLifetime: 86400,
 *         psk: "tf-testvpn2",
 *         ikePfs: "group1",
 *         remoteId: "testbob2",
 *         localId: "testalice2",
 *     },
 *     ipsecConfig: {
 *         ipsecPfs: "group5",
 *         ipsecEncAlg: "des",
 *         ipsecAuthAlg: "md5",
 *         ipsecLifetime: 86400,
 *     },
 *     bgpConfig: {
 *         enable: true,
 *         localAsn: 45014,
 *         tunnelCidr: "169.254.11.0/30",
 *         localBgpIp: "169.254.11.1",
 *     },
 *     healthCheckConfig: {
 *         enable: true,
 *         sip: "192.168.1.1",
 *         dip: "10.0.0.1",
 *         interval: 10,
 *         retry: 10,
 *         policy: "revoke_route",
 *     },
 *     enableDpd: true,
 *     enableNatTraversal: true,
 *     vpnAttachmentName: _var.name,
 * });
 * const defaultTransitRouterVpnAttachment = new alicloud.cen.TransitRouterVpnAttachment("defaultTransitRouterVpnAttachment", {
 *     autoPublishRouteEnabled: false,
 *     transitRouterAttachmentDescription: _var.name,
 *     transitRouterAttachmentName: _var.name,
 *     cenId: defaultTransitRouter.cenId,
 *     transitRouterId: defaultTransitRouter.transitRouterId,
 *     vpnId: defaultGatewayVpnAttachment.id,
 *     zones: [{
 *         zoneId: defaultTransitRouterAvailableResources.then(defaultTransitRouterAvailableResources => defaultTransitRouterAvailableResources.resources?.[0]?.masterZones?.[0]),
 *     }],
 * });
 * const defaultGatewayVcoRoute = new alicloud.vpn.GatewayVcoRoute("defaultGatewayVcoRoute", {
 *     routeDest: "192.168.12.0/24",
 *     nextHop: defaultTransitRouterVpnAttachment.vpnId,
 *     vpnConnectionId: defaultTransitRouterVpnAttachment.vpnId,
 *     weight: 100,
 * });
 * ```
 *
 * ## Import
 *
 * VPN Gateway Vco Route can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:vpn/gatewayVcoRoute:GatewayVcoRoute example <vpn_connection_id>:<route_dest>:<next_hop>:<weight>
 * ```
 */
export class GatewayVcoRoute extends pulumi.CustomResource {
    /**
     * Get an existing GatewayVcoRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayVcoRouteState, opts?: pulumi.CustomResourceOptions): GatewayVcoRoute {
        return new GatewayVcoRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:vpn/gatewayVcoRoute:GatewayVcoRoute';

    /**
     * Returns true if the given object is an instance of GatewayVcoRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayVcoRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayVcoRoute.__pulumiType;
    }

    /**
     * The next hop of the destination route.
     */
    public readonly nextHop!: pulumi.Output<string>;
    /**
     * The destination network segment of the destination route.
     */
    public readonly routeDest!: pulumi.Output<string>;
    /**
     * The status of the vpn route entry.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The id of the vpn attachment.
     */
    public readonly vpnConnectionId!: pulumi.Output<string>;
    /**
     * The weight value of the destination route. Valid values: `0`, `100`.
     */
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a GatewayVcoRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayVcoRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayVcoRouteArgs | GatewayVcoRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayVcoRouteState | undefined;
            resourceInputs["nextHop"] = state ? state.nextHop : undefined;
            resourceInputs["routeDest"] = state ? state.routeDest : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vpnConnectionId"] = state ? state.vpnConnectionId : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as GatewayVcoRouteArgs | undefined;
            if ((!args || args.nextHop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHop'");
            }
            if ((!args || args.routeDest === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeDest'");
            }
            if ((!args || args.vpnConnectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnConnectionId'");
            }
            if ((!args || args.weight === undefined) && !opts.urn) {
                throw new Error("Missing required property 'weight'");
            }
            resourceInputs["nextHop"] = args ? args.nextHop : undefined;
            resourceInputs["routeDest"] = args ? args.routeDest : undefined;
            resourceInputs["vpnConnectionId"] = args ? args.vpnConnectionId : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayVcoRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayVcoRoute resources.
 */
export interface GatewayVcoRouteState {
    /**
     * The next hop of the destination route.
     */
    nextHop?: pulumi.Input<string>;
    /**
     * The destination network segment of the destination route.
     */
    routeDest?: pulumi.Input<string>;
    /**
     * The status of the vpn route entry.
     */
    status?: pulumi.Input<string>;
    /**
     * The id of the vpn attachment.
     */
    vpnConnectionId?: pulumi.Input<string>;
    /**
     * The weight value of the destination route. Valid values: `0`, `100`.
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GatewayVcoRoute resource.
 */
export interface GatewayVcoRouteArgs {
    /**
     * The next hop of the destination route.
     */
    nextHop: pulumi.Input<string>;
    /**
     * The destination network segment of the destination route.
     */
    routeDest: pulumi.Input<string>;
    /**
     * The id of the vpn attachment.
     */
    vpnConnectionId: pulumi.Input<string>;
    /**
     * The weight value of the destination route. Valid values: `0`, `100`.
     */
    weight: pulumi.Input<number>;
}
