// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Application Real-Time Monitoring Service (ARMS) Prometheus resource.
 *
 * For information about Application Real-Time Monitoring Service (ARMS) Prometheus and how to use it, see [What is Prometheus](https://www.alibabacloud.com/help/en/application-real-time-monitoring-service/latest/api-doc-arms-2019-08-08-api-doc-createprometheusinstance).
 *
 * > **NOTE:** Available in v1.203.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const defaultNetworks = alicloud.vpc.getNetworks({
 *     nameRegex: "your_name_regex",
 * });
 * const defaultSwitches = defaultNetworks.then(defaultNetworks => alicloud.vpc.getSwitches({
 *     vpcId: defaultNetworks.ids?.[0],
 * }));
 * const defaultResourceGroups = alicloud.resourcemanager.getResourceGroups({});
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("defaultSecurityGroup", {vpcId: defaultNetworks.then(defaultNetworks => defaultNetworks.ids?.[0])});
 * const defaultPrometheus = new alicloud.arms.Prometheus("defaultPrometheus", {
 *     clusterType: "ecs",
 *     grafanaInstanceId: "free",
 *     vpcId: defaultNetworks.then(defaultNetworks => defaultNetworks.ids?.[0]),
 *     vswitchId: defaultSwitches.then(defaultSwitches => defaultSwitches.ids?.[0]),
 *     securityGroupId: defaultSecurityGroup.id,
 *     clusterName: defaultNetworks.then(defaultNetworks => `${_var.name}-${defaultNetworks.ids?.[0]}`),
 *     resourceGroupId: defaultResourceGroups.then(defaultResourceGroups => defaultResourceGroups.groups?.[0]?.id),
 *     tags: {
 *         Created: "TF",
 *         For: "Prometheus",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Application Real-Time Monitoring Service (ARMS) Prometheus can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:arms/prometheus:Prometheus example <id>
 * ```
 */
export class Prometheus extends pulumi.CustomResource {
    /**
     * Get an existing Prometheus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrometheusState, opts?: pulumi.CustomResourceOptions): Prometheus {
        return new Prometheus(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:arms/prometheus:Prometheus';

    /**
     * Returns true if the given object is an instance of Prometheus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Prometheus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Prometheus.__pulumiType;
    }

    /**
     * The ID of the Kubernetes cluster. This parameter is required, if you set `clusterType` to `aliyun-cs`.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The name of the created cluster. This parameter is required, if you set `clusterType` to `remote-write`, `ecs` or `global-view`.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The type of the Prometheus instance. Valid values: `remote-write`, `ecs`, `global-view`, `aliyun-cs`.
     */
    public readonly clusterType!: pulumi.Output<string>;
    /**
     * The ID of the Grafana dedicated instance. When using the shared version of Grafana, you can set `grafanaInstanceId` to `free`.
     */
    public readonly grafanaInstanceId!: pulumi.Output<string>;
    /**
     * The ID of the resource group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The ID of the security group. This parameter is required, if you set `clusterType` to `ecs` or `aliyun-cs`(ASK instance).
     */
    public readonly securityGroupId!: pulumi.Output<string | undefined>;
    /**
     * The child instance json string of the globalView instance.
     */
    public readonly subClustersJson!: pulumi.Output<string | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The ID of the VPC. This parameter is required, if you set `clusterType` to `ecs` or `aliyun-cs`(ASK instance).
     */
    public readonly vpcId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the VSwitch. This parameter is required, if you set `clusterType` to `ecs` or `aliyun-cs`(ASK instance).
     */
    public readonly vswitchId!: pulumi.Output<string | undefined>;

    /**
     * Create a Prometheus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrometheusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrometheusArgs | PrometheusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrometheusState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["grafanaInstanceId"] = state ? state.grafanaInstanceId : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["subClustersJson"] = state ? state.subClustersJson : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as PrometheusArgs | undefined;
            if ((!args || args.clusterType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterType'");
            }
            if ((!args || args.grafanaInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'grafanaInstanceId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["grafanaInstanceId"] = args ? args.grafanaInstanceId : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["subClustersJson"] = args ? args.subClustersJson : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Prometheus.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Prometheus resources.
 */
export interface PrometheusState {
    /**
     * The ID of the Kubernetes cluster. This parameter is required, if you set `clusterType` to `aliyun-cs`.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The name of the created cluster. This parameter is required, if you set `clusterType` to `remote-write`, `ecs` or `global-view`.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The type of the Prometheus instance. Valid values: `remote-write`, `ecs`, `global-view`, `aliyun-cs`.
     */
    clusterType?: pulumi.Input<string>;
    /**
     * The ID of the Grafana dedicated instance. When using the shared version of Grafana, you can set `grafanaInstanceId` to `free`.
     */
    grafanaInstanceId?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The ID of the security group. This parameter is required, if you set `clusterType` to `ecs` or `aliyun-cs`(ASK instance).
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * The child instance json string of the globalView instance.
     */
    subClustersJson?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The ID of the VPC. This parameter is required, if you set `clusterType` to `ecs` or `aliyun-cs`(ASK instance).
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The ID of the VSwitch. This parameter is required, if you set `clusterType` to `ecs` or `aliyun-cs`(ASK instance).
     */
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Prometheus resource.
 */
export interface PrometheusArgs {
    /**
     * The ID of the Kubernetes cluster. This parameter is required, if you set `clusterType` to `aliyun-cs`.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The name of the created cluster. This parameter is required, if you set `clusterType` to `remote-write`, `ecs` or `global-view`.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The type of the Prometheus instance. Valid values: `remote-write`, `ecs`, `global-view`, `aliyun-cs`.
     */
    clusterType: pulumi.Input<string>;
    /**
     * The ID of the Grafana dedicated instance. When using the shared version of Grafana, you can set `grafanaInstanceId` to `free`.
     */
    grafanaInstanceId: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The ID of the security group. This parameter is required, if you set `clusterType` to `ecs` or `aliyun-cs`(ASK instance).
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * The child instance json string of the globalView instance.
     */
    subClustersJson?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The ID of the VPC. This parameter is required, if you set `clusterType` to `ecs` or `aliyun-cs`(ASK instance).
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The ID of the VSwitch. This parameter is required, if you set `clusterType` to `ecs` or `aliyun-cs`(ASK instance).
     */
    vswitchId?: pulumi.Input<string>;
}
