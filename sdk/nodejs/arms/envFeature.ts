// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ARMS Env Feature resource. Feature of the arms environment.
 *
 * For information about ARMS Env Feature and how to use it, see [What is Env Feature](https://www.alibabacloud.com/help/en/arms/developer-reference/api-arms-2019-08-08-installenvironmentfeature).
 *
 * > **NOTE:** Available since v1.212.0.
 *
 * ## Import
 *
 * ARMS Env Feature can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:arms/envFeature:EnvFeature example <environment_id>:<env_feature_name>
 * ```
 */
export class EnvFeature extends pulumi.CustomResource {
    /**
     * Get an existing EnvFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvFeatureState, opts?: pulumi.CustomResourceOptions): EnvFeature {
        return new EnvFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:arms/envFeature:EnvFeature';

    /**
     * Returns true if the given object is an instance of EnvFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnvFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvFeature.__pulumiType;
    }

    /**
     * The name of the resource.
     */
    public readonly envFeatureName!: pulumi.Output<string>;
    /**
     * The first ID of the resource.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
     */
    public readonly featureVersion!: pulumi.Output<string>;
    /**
     * Namespace.
     */
    public /*out*/ readonly namespace!: pulumi.Output<string>;
    /**
     * Status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a EnvFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvFeatureArgs | EnvFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvFeatureState | undefined;
            resourceInputs["envFeatureName"] = state ? state.envFeatureName : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["featureVersion"] = state ? state.featureVersion : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as EnvFeatureArgs | undefined;
            if ((!args || args.envFeatureName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envFeatureName'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.featureVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureVersion'");
            }
            resourceInputs["envFeatureName"] = args ? args.envFeatureName : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["featureVersion"] = args ? args.featureVersion : undefined;
            resourceInputs["namespace"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnvFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EnvFeature resources.
 */
export interface EnvFeatureState {
    /**
     * The name of the resource.
     */
    envFeatureName?: pulumi.Input<string>;
    /**
     * The first ID of the resource.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
     */
    featureVersion?: pulumi.Input<string>;
    /**
     * Namespace.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Status.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EnvFeature resource.
 */
export interface EnvFeatureArgs {
    /**
     * The name of the resource.
     */
    envFeatureName: pulumi.Input<string>;
    /**
     * The first ID of the resource.
     */
    environmentId: pulumi.Input<string>;
    /**
     * Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
     */
    featureVersion: pulumi.Input<string>;
}
