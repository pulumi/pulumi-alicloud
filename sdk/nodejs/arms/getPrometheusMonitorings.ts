// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the Arms Prometheus Monitorings of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.210.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const ids = alicloud.arms.getPrometheusMonitorings({
 *     clusterId: "your_cluster_id",
 *     ids: ["example_id"],
 * });
 * export const armsPrometheusMonitoringsId1 = ids.then(ids => ids.prometheusMonitorings?.[0]?.id);
 * const nameRegex = alicloud.arms.getPrometheusMonitorings({
 *     clusterId: "your_cluster_id",
 *     nameRegex: "tf-example",
 * });
 * export const armsPrometheusMonitoringsId2 = nameRegex.then(nameRegex => nameRegex.prometheusMonitorings?.[0]?.id);
 * ```
 */
export function getPrometheusMonitorings(args: GetPrometheusMonitoringsArgs, opts?: pulumi.InvokeOptions): Promise<GetPrometheusMonitoringsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:arms/getPrometheusMonitorings:getPrometheusMonitorings", {
        "clusterId": args.clusterId,
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "status": args.status,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getPrometheusMonitorings.
 */
export interface GetPrometheusMonitoringsArgs {
    /**
     * The ID of the Prometheus instance.
     */
    clusterId: string;
    /**
     * A list of Prometheus Monitoring IDs.
     */
    ids?: string[];
    /**
     * A regex string to filter results by Prometheus Monitoring name.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: string;
    /**
     * The status of the monitoring configuration. Valid values: `run`, `stop`.
     */
    status?: string;
    /**
     * The type of the monitoring configuration. Valid values: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
     */
    type?: string;
}

/**
 * A collection of values returned by getPrometheusMonitorings.
 */
export interface GetPrometheusMonitoringsResult {
    /**
     * The ID of the Prometheus instance.
     */
    readonly clusterId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly nameRegex?: string;
    /**
     * A list of Prometheus Monitoring names.
     */
    readonly names: string[];
    readonly outputFile?: string;
    /**
     * A list of Prometheus Monitorings. Each element contains the following attributes:
     */
    readonly prometheusMonitorings: outputs.arms.GetPrometheusMonitoringsPrometheusMonitoring[];
    /**
     * The status of the monitoring configuration.
     */
    readonly status?: string;
    /**
     * The type of the monitoring configuration.
     */
    readonly type?: string;
}
/**
 * This data source provides the Arms Prometheus Monitorings of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.210.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const ids = alicloud.arms.getPrometheusMonitorings({
 *     clusterId: "your_cluster_id",
 *     ids: ["example_id"],
 * });
 * export const armsPrometheusMonitoringsId1 = ids.then(ids => ids.prometheusMonitorings?.[0]?.id);
 * const nameRegex = alicloud.arms.getPrometheusMonitorings({
 *     clusterId: "your_cluster_id",
 *     nameRegex: "tf-example",
 * });
 * export const armsPrometheusMonitoringsId2 = nameRegex.then(nameRegex => nameRegex.prometheusMonitorings?.[0]?.id);
 * ```
 */
export function getPrometheusMonitoringsOutput(args: GetPrometheusMonitoringsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPrometheusMonitoringsResult> {
    return pulumi.output(args).apply((a: any) => getPrometheusMonitorings(a, opts))
}

/**
 * A collection of arguments for invoking getPrometheusMonitorings.
 */
export interface GetPrometheusMonitoringsOutputArgs {
    /**
     * The ID of the Prometheus instance.
     */
    clusterId: pulumi.Input<string>;
    /**
     * A list of Prometheus Monitoring IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A regex string to filter results by Prometheus Monitoring name.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The status of the monitoring configuration. Valid values: `run`, `stop`.
     */
    status?: pulumi.Input<string>;
    /**
     * The type of the monitoring configuration. Valid values: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
     */
    type?: pulumi.Input<string>;
}
