// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a Application Real-Time Monitoring Service (ARMS) Prometheus Alert Rule resource.
 *
 * For information about Application Real-Time Monitoring Service (ARMS) Prometheus Alert Rule and how to use it, see [What is Prometheus Alert Rule](https://www.alibabacloud.com/help/en/doc-detail/212056.htm).
 *
 * > **NOTE:** Available in v1.136.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = new alicloud.arms.PrometheusAlertRule("example", {
 *     clusterId: "example_value",
 *     duration: "example_value",
 *     expression: "example_value",
 *     message: "example_value",
 *     prometheusAlertRuleName: "example_value",
 * });
 * ```
 *
 * ## Import
 *
 * Application Real-Time Monitoring Service (ARMS) Prometheus Alert Rule can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:arms/prometheusAlertRule:PrometheusAlertRule example <cluster_id>:<prometheus_alert_rule_id>
 * ```
 */
export class PrometheusAlertRule extends pulumi.CustomResource {
    /**
     * Get an existing PrometheusAlertRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrometheusAlertRuleState, opts?: pulumi.CustomResourceOptions): PrometheusAlertRule {
        return new PrometheusAlertRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:arms/prometheusAlertRule:PrometheusAlertRule';

    /**
     * Returns true if the given object is an instance of PrometheusAlertRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrometheusAlertRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrometheusAlertRule.__pulumiType;
    }

    /**
     * The annotations of the alert rule.. See the following `Block annotations`.
     */
    public readonly annotations!: pulumi.Output<outputs.arms.PrometheusAlertRuleAnnotation[] | undefined>;
    /**
     * The ID of the cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The ID of the notification policy. This parameter is required when the `notifyType` parameter is set to `DISPATCH_RULE`.
     */
    public readonly dispatchRuleId!: pulumi.Output<string | undefined>;
    /**
     * The duration of the alert.
     */
    public readonly duration!: pulumi.Output<string>;
    /**
     * The alert rule expression that follows the PromQL syntax.
     */
    public readonly expression!: pulumi.Output<string>;
    /**
     * The labels of the resource. See the following `Block labels`.
     */
    public readonly labels!: pulumi.Output<outputs.arms.PrometheusAlertRuleLabel[] | undefined>;
    /**
     * The message of the alert notification.
     */
    public readonly message!: pulumi.Output<string>;
    /**
     * The method of sending the alert notification. Valid values: `ALERT_MANAGER`, `DISPATCH_RULE`.
     */
    public readonly notifyType!: pulumi.Output<string | undefined>;
    /**
     * The first ID of the resource.
     */
    public /*out*/ readonly prometheusAlertRuleId!: pulumi.Output<number>;
    /**
     * The name of the resource.
     */
    public readonly prometheusAlertRuleName!: pulumi.Output<string>;
    /**
     * The status of the resource. Valid values: `0`, `1`.
     */
    public /*out*/ readonly status!: pulumi.Output<number>;
    /**
     * The type of the alert rule.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a PrometheusAlertRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrometheusAlertRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrometheusAlertRuleArgs | PrometheusAlertRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrometheusAlertRuleState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["dispatchRuleId"] = state ? state.dispatchRuleId : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["expression"] = state ? state.expression : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["notifyType"] = state ? state.notifyType : undefined;
            resourceInputs["prometheusAlertRuleId"] = state ? state.prometheusAlertRuleId : undefined;
            resourceInputs["prometheusAlertRuleName"] = state ? state.prometheusAlertRuleName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as PrometheusAlertRuleArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.duration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'duration'");
            }
            if ((!args || args.expression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expression'");
            }
            if ((!args || args.message === undefined) && !opts.urn) {
                throw new Error("Missing required property 'message'");
            }
            if ((!args || args.prometheusAlertRuleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prometheusAlertRuleName'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dispatchRuleId"] = args ? args.dispatchRuleId : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["expression"] = args ? args.expression : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["notifyType"] = args ? args.notifyType : undefined;
            resourceInputs["prometheusAlertRuleName"] = args ? args.prometheusAlertRuleName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["prometheusAlertRuleId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrometheusAlertRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrometheusAlertRule resources.
 */
export interface PrometheusAlertRuleState {
    /**
     * The annotations of the alert rule.. See the following `Block annotations`.
     */
    annotations?: pulumi.Input<pulumi.Input<inputs.arms.PrometheusAlertRuleAnnotation>[]>;
    /**
     * The ID of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The ID of the notification policy. This parameter is required when the `notifyType` parameter is set to `DISPATCH_RULE`.
     */
    dispatchRuleId?: pulumi.Input<string>;
    /**
     * The duration of the alert.
     */
    duration?: pulumi.Input<string>;
    /**
     * The alert rule expression that follows the PromQL syntax.
     */
    expression?: pulumi.Input<string>;
    /**
     * The labels of the resource. See the following `Block labels`.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.arms.PrometheusAlertRuleLabel>[]>;
    /**
     * The message of the alert notification.
     */
    message?: pulumi.Input<string>;
    /**
     * The method of sending the alert notification. Valid values: `ALERT_MANAGER`, `DISPATCH_RULE`.
     */
    notifyType?: pulumi.Input<string>;
    /**
     * The first ID of the resource.
     */
    prometheusAlertRuleId?: pulumi.Input<number>;
    /**
     * The name of the resource.
     */
    prometheusAlertRuleName?: pulumi.Input<string>;
    /**
     * The status of the resource. Valid values: `0`, `1`.
     */
    status?: pulumi.Input<number>;
    /**
     * The type of the alert rule.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PrometheusAlertRule resource.
 */
export interface PrometheusAlertRuleArgs {
    /**
     * The annotations of the alert rule.. See the following `Block annotations`.
     */
    annotations?: pulumi.Input<pulumi.Input<inputs.arms.PrometheusAlertRuleAnnotation>[]>;
    /**
     * The ID of the cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The ID of the notification policy. This parameter is required when the `notifyType` parameter is set to `DISPATCH_RULE`.
     */
    dispatchRuleId?: pulumi.Input<string>;
    /**
     * The duration of the alert.
     */
    duration: pulumi.Input<string>;
    /**
     * The alert rule expression that follows the PromQL syntax.
     */
    expression: pulumi.Input<string>;
    /**
     * The labels of the resource. See the following `Block labels`.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.arms.PrometheusAlertRuleLabel>[]>;
    /**
     * The message of the alert notification.
     */
    message: pulumi.Input<string>;
    /**
     * The method of sending the alert notification. Valid values: `ALERT_MANAGER`, `DISPATCH_RULE`.
     */
    notifyType?: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    prometheusAlertRuleName: pulumi.Input<string>;
    /**
     * The type of the alert rule.
     */
    type?: pulumi.Input<string>;
}
