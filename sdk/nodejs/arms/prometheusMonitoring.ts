// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ARMS Prometheus Monitoring resource. Including serviceMonitor, podMonitor, customJob, probe and other four types of monitoring.
 *
 * For information about ARMS Prometheus Monitoring and how to use it, see [What is Prometheus Monitoring](https://www.alibabacloud.com/help/en/arms/developer-reference/api-arms-2019-08-08-dir-managed-service-for-prometheus/).
 *
 * > **NOTE:** Available since v1.209.0.
 *
 * ## Import
 *
 * ARMS Prometheus Monitoring can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:arms/prometheusMonitoring:PrometheusMonitoring example <cluster_id>:<monitoring_name>:<type>
 * ```
 */
export class PrometheusMonitoring extends pulumi.CustomResource {
    /**
     * Get an existing PrometheusMonitoring resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrometheusMonitoringState, opts?: pulumi.CustomResourceOptions): PrometheusMonitoring {
        return new PrometheusMonitoring(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:arms/prometheusMonitoring:PrometheusMonitoring';

    /**
     * Returns true if the given object is an instance of PrometheusMonitoring.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrometheusMonitoring {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrometheusMonitoring.__pulumiType;
    }

    /**
     * The ID of the prometheus instance.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Yaml configuration for monitoring.
     */
    public readonly configYaml!: pulumi.Output<string>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly monitoringName!: pulumi.Output<string>;
    /**
     * Valid values: `stop`, `run`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Monitoring type: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a PrometheusMonitoring resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrometheusMonitoringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrometheusMonitoringArgs | PrometheusMonitoringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrometheusMonitoringState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["configYaml"] = state ? state.configYaml : undefined;
            resourceInputs["monitoringName"] = state ? state.monitoringName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as PrometheusMonitoringArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.configYaml === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configYaml'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["configYaml"] = args ? args.configYaml : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["monitoringName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrometheusMonitoring.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrometheusMonitoring resources.
 */
export interface PrometheusMonitoringState {
    /**
     * The ID of the prometheus instance.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Yaml configuration for monitoring.
     */
    configYaml?: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    monitoringName?: pulumi.Input<string>;
    /**
     * Valid values: `stop`, `run`.
     */
    status?: pulumi.Input<string>;
    /**
     * Monitoring type: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PrometheusMonitoring resource.
 */
export interface PrometheusMonitoringArgs {
    /**
     * The ID of the prometheus instance.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Yaml configuration for monitoring.
     */
    configYaml: pulumi.Input<string>;
    /**
     * Valid values: `stop`, `run`.
     */
    status?: pulumi.Input<string>;
    /**
     * Monitoring type: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
     */
    type: pulumi.Input<string>;
}
