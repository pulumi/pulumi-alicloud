// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ARMS Prometheus Monitoring resource. Including serviceMonitor, podMonitor, customJob, probe and other four types of monitoring.
 *
 * For information about ARMS Prometheus Monitoring and how to use it, see [What is Prometheus Monitoring](https://www.alibabacloud.com/help/en/arms/prometheus-monitoring/api-arms-2019-08-08-createprometheusmonitoring).
 *
 * > **NOTE:** Available since v1.209.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultGetResourceGroups = alicloud.resourcemanager.getResourceGroups({});
 * const defaultNetwork = new alicloud.vpc.Network("default", {
 *     cidrBlock: "192.168.0.0/16",
 *     vpcName: name,
 * });
 * const vswitch = new alicloud.vpc.Switch("vswitch", {
 *     vpcId: defaultNetwork.id,
 *     cidrBlock: defaultNetwork.cidrBlock.apply(cidrBlock => std.cidrsubnetOutput({
 *         input: cidrBlock,
 *         newbits: 8,
 *         netnum: 8,
 *     })).apply(invoke => invoke.result),
 *     zoneId: _default.then(_default => _default.zones?.[0]?.id),
 *     vswitchName: name,
 * });
 * const defaultSnapshotPolicy = new alicloud.ecs.SnapshotPolicy("default", {
 *     name: name,
 *     repeatWeekdays: [
 *         "1",
 *         "2",
 *         "3",
 *     ],
 *     retentionDays: -1,
 *     timePoints: [
 *         "1",
 *         "22",
 *         "23",
 *     ],
 * });
 * const defaultGetInstanceTypes = vswitch.zoneId.apply(zoneId => alicloud.ecs.getInstanceTypesOutput({
 *     availabilityZone: zoneId,
 *     cpuCoreCount: 2,
 *     memorySize: 4,
 *     kubernetesNodeRole: "Worker",
 *     instanceTypeFamily: "ecs.sn1ne",
 * }));
 * const defaultManagedKubernetes = new alicloud.cs.ManagedKubernetes("default", {
 *     name: name,
 *     clusterSpec: "ack.pro.small",
 *     version: "1.24.6-aliyun.1",
 *     newNatGateway: true,
 *     nodeCidrMask: 26,
 *     proxyMode: "ipvs",
 *     serviceCidr: "172.23.0.0/16",
 *     podCidr: "10.95.0.0/16",
 *     workerVswitchIds: [vswitch.id],
 * });
 * const defaultInteger = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const defaultKeyPair = new alicloud.ecs.KeyPair("default", {keyPairName: `${name}-${defaultInteger.result}`});
 * const defaultNodePool = new alicloud.cs.NodePool("default", {
 *     nodePoolName: "desired_size",
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [vswitch.id],
 *     instanceTypes: [defaultGetInstanceTypes.apply(defaultGetInstanceTypes => defaultGetInstanceTypes.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: defaultKeyPair.keyPairName,
 *     desiredSize: "2",
 * });
 * const defaultPrometheus = new alicloud.arms.Prometheus("default", {
 *     clusterType: "aliyun-cs",
 *     grafanaInstanceId: "free",
 *     clusterId: defaultNodePool.clusterId,
 * });
 * const defaultPrometheusMonitoring = new alicloud.arms.PrometheusMonitoring("default", {
 *     status: "run",
 *     type: "serviceMonitor",
 *     clusterId: defaultPrometheus.clusterId,
 *     configYaml: `apiVersion: monitoring.coreos.com/v1
 * kind: ServiceMonitor
 * metadata:
 *   name: tomcat-demo
 *   namespace: default
 * spec:
 *   endpoints:
 *   - bearerTokenSecret:
 *       key: ''
 *     interval: 30s
 *     path: /metrics
 *     port: tomcat-monitor
 *   namespaceSelector:
 *     any: true
 *   selector:
 *     matchLabels:
 *       app: tomcat
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * ARMS Prometheus Monitoring can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:arms/prometheusMonitoring:PrometheusMonitoring example <cluster_id>:<monitoring_name>:<type>
 * ```
 */
export class PrometheusMonitoring extends pulumi.CustomResource {
    /**
     * Get an existing PrometheusMonitoring resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrometheusMonitoringState, opts?: pulumi.CustomResourceOptions): PrometheusMonitoring {
        return new PrometheusMonitoring(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:arms/prometheusMonitoring:PrometheusMonitoring';

    /**
     * Returns true if the given object is an instance of PrometheusMonitoring.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrometheusMonitoring {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrometheusMonitoring.__pulumiType;
    }

    /**
     * The ID of the prometheus instance.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * Yaml configuration for monitoring.
     */
    declare public readonly configYaml: pulumi.Output<string>;
    /**
     * The name of the resource.
     */
    declare public /*out*/ readonly monitoringName: pulumi.Output<string>;
    /**
     * Valid values: `stop`, `run`.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * Monitoring type: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a PrometheusMonitoring resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrometheusMonitoringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrometheusMonitoringArgs | PrometheusMonitoringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrometheusMonitoringState | undefined;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["configYaml"] = state?.configYaml;
            resourceInputs["monitoringName"] = state?.monitoringName;
            resourceInputs["status"] = state?.status;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as PrometheusMonitoringArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.configYaml === undefined && !opts.urn) {
                throw new Error("Missing required property 'configYaml'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["configYaml"] = args?.configYaml;
            resourceInputs["status"] = args?.status;
            resourceInputs["type"] = args?.type;
            resourceInputs["monitoringName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrometheusMonitoring.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrometheusMonitoring resources.
 */
export interface PrometheusMonitoringState {
    /**
     * The ID of the prometheus instance.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Yaml configuration for monitoring.
     */
    configYaml?: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    monitoringName?: pulumi.Input<string>;
    /**
     * Valid values: `stop`, `run`.
     */
    status?: pulumi.Input<string>;
    /**
     * Monitoring type: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PrometheusMonitoring resource.
 */
export interface PrometheusMonitoringArgs {
    /**
     * The ID of the prometheus instance.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Yaml configuration for monitoring.
     */
    configYaml: pulumi.Input<string>;
    /**
     * Valid values: `stop`, `run`.
     */
    status?: pulumi.Input<string>;
    /**
     * Monitoring type: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
     */
    type: pulumi.Input<string>;
}
