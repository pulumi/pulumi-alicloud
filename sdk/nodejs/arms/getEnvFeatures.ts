// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the ARMS Env Features of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.258.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const enhanced = alicloud.vpc.getEnhancedNatAvailableZones({});
 * const vpc = new alicloud.vpc.Network("vpc", {
 *     description: "api-resource-test1-hz",
 *     cidrBlock: "192.168.0.0/16",
 *     vpcName: `${name}-${defaultInteger.result}`,
 * });
 * const vswitch = new alicloud.vpc.Switch("vswitch", {
 *     description: "api-resource-test1-hz",
 *     vpcId: vpc.id,
 *     vswitchName: `${name}-${defaultInteger.result}`,
 *     zoneId: enhanced.then(enhanced => enhanced.zones?.[0]?.zoneId),
 *     cidrBlock: vpc.cidrBlock.apply(cidrBlock => std.cidrsubnetOutput({
 *         input: cidrBlock,
 *         newbits: 8,
 *         netnum: 8,
 *     })).apply(invoke => invoke.result),
 * });
 * const defaultSnapshotPolicy = new alicloud.ecs.SnapshotPolicy("default", {
 *     name: `${name}-${defaultInteger.result}`,
 *     repeatWeekdays: [
 *         "1",
 *         "2",
 *         "3",
 *     ],
 *     retentionDays: -1,
 *     timePoints: [
 *         "1",
 *         "22",
 *         "23",
 *     ],
 * });
 * const _default = vswitch.zoneId.apply(zoneId => alicloud.ecs.getInstanceTypesOutput({
 *     availabilityZone: zoneId,
 *     cpuCoreCount: 2,
 *     memorySize: 4,
 *     kubernetesNodeRole: "Worker",
 *     instanceTypeFamily: "ecs.sn1ne",
 * }));
 * const defaultManagedKubernetes = new alicloud.cs.ManagedKubernetes("default", {
 *     name: `${name}-${defaultInteger.result}`,
 *     clusterSpec: "ack.pro.small",
 *     version: "1.24.6-aliyun.1",
 *     newNatGateway: true,
 *     nodeCidrMask: 26,
 *     proxyMode: "ipvs",
 *     serviceCidr: "172.23.0.0/16",
 *     podCidr: "10.95.0.0/16",
 *     workerVswitchIds: [vswitch.id],
 * });
 * const defaultKeyPair = new alicloud.ecs.KeyPair("default", {keyPairName: `${name}-${defaultInteger.result}`});
 * const defaultNodePool = new alicloud.cs.NodePool("default", {
 *     name: "desired_size",
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [vswitch.id],
 *     instanceTypes: [_default.apply(_default => _default.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: defaultKeyPair.keyPairName,
 *     desiredSize: "2",
 * });
 * const defaultEnvironment = new alicloud.arms.Environment("default", {
 *     environmentType: "CS",
 *     environmentName: `${name}-${defaultInteger.result}`,
 *     bindResourceId: defaultNodePool.clusterId,
 *     environmentSubType: "ManagedKubernetes",
 * });
 * const defaultEnvFeature = new alicloud.arms.EnvFeature("default", {
 *     envFeatureName: "metric-agent",
 *     environmentId: defaultEnvironment.id,
 *     featureVersion: "1.1.17",
 * });
 * const ids = alicloud.arms.getEnvFeaturesOutput({
 *     environmentId: defaultEnvFeature.environmentId,
 *     ids: [defaultEnvFeature.id],
 * });
 * export const armsEnvFeaturesId0 = ids.apply(ids => ids.features?.[0]?.id);
 * ```
 */
export function getEnvFeatures(args: GetEnvFeaturesArgs, opts?: pulumi.InvokeOptions): Promise<GetEnvFeaturesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:arms/getEnvFeatures:getEnvFeatures", {
        "environmentId": args.environmentId,
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getEnvFeatures.
 */
export interface GetEnvFeaturesArgs {
    /**
     * The ID of the environment instance.
     */
    environmentId: string;
    /**
     * A list of ARMS Env Feature IDs.
     */
    ids?: string[];
    /**
     * A regex string to filter results by ARMS Env Feature name.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: string;
}

/**
 * A collection of values returned by getEnvFeatures.
 */
export interface GetEnvFeaturesResult {
    /**
     * The ID of the environment instance.
     */
    readonly environmentId: string;
    /**
     * A list of ARMS Env Features. Each element contains the following attributes:
     */
    readonly features: outputs.arms.GetEnvFeaturesFeature[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly nameRegex?: string;
    /**
     * A list of ARMS Env Feature names.
     */
    readonly names: string[];
    readonly outputFile?: string;
}
/**
 * This data source provides the ARMS Env Features of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.258.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const defaultInteger = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const enhanced = alicloud.vpc.getEnhancedNatAvailableZones({});
 * const vpc = new alicloud.vpc.Network("vpc", {
 *     description: "api-resource-test1-hz",
 *     cidrBlock: "192.168.0.0/16",
 *     vpcName: `${name}-${defaultInteger.result}`,
 * });
 * const vswitch = new alicloud.vpc.Switch("vswitch", {
 *     description: "api-resource-test1-hz",
 *     vpcId: vpc.id,
 *     vswitchName: `${name}-${defaultInteger.result}`,
 *     zoneId: enhanced.then(enhanced => enhanced.zones?.[0]?.zoneId),
 *     cidrBlock: vpc.cidrBlock.apply(cidrBlock => std.cidrsubnetOutput({
 *         input: cidrBlock,
 *         newbits: 8,
 *         netnum: 8,
 *     })).apply(invoke => invoke.result),
 * });
 * const defaultSnapshotPolicy = new alicloud.ecs.SnapshotPolicy("default", {
 *     name: `${name}-${defaultInteger.result}`,
 *     repeatWeekdays: [
 *         "1",
 *         "2",
 *         "3",
 *     ],
 *     retentionDays: -1,
 *     timePoints: [
 *         "1",
 *         "22",
 *         "23",
 *     ],
 * });
 * const _default = vswitch.zoneId.apply(zoneId => alicloud.ecs.getInstanceTypesOutput({
 *     availabilityZone: zoneId,
 *     cpuCoreCount: 2,
 *     memorySize: 4,
 *     kubernetesNodeRole: "Worker",
 *     instanceTypeFamily: "ecs.sn1ne",
 * }));
 * const defaultManagedKubernetes = new alicloud.cs.ManagedKubernetes("default", {
 *     name: `${name}-${defaultInteger.result}`,
 *     clusterSpec: "ack.pro.small",
 *     version: "1.24.6-aliyun.1",
 *     newNatGateway: true,
 *     nodeCidrMask: 26,
 *     proxyMode: "ipvs",
 *     serviceCidr: "172.23.0.0/16",
 *     podCidr: "10.95.0.0/16",
 *     workerVswitchIds: [vswitch.id],
 * });
 * const defaultKeyPair = new alicloud.ecs.KeyPair("default", {keyPairName: `${name}-${defaultInteger.result}`});
 * const defaultNodePool = new alicloud.cs.NodePool("default", {
 *     name: "desired_size",
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [vswitch.id],
 *     instanceTypes: [_default.apply(_default => _default.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: defaultKeyPair.keyPairName,
 *     desiredSize: "2",
 * });
 * const defaultEnvironment = new alicloud.arms.Environment("default", {
 *     environmentType: "CS",
 *     environmentName: `${name}-${defaultInteger.result}`,
 *     bindResourceId: defaultNodePool.clusterId,
 *     environmentSubType: "ManagedKubernetes",
 * });
 * const defaultEnvFeature = new alicloud.arms.EnvFeature("default", {
 *     envFeatureName: "metric-agent",
 *     environmentId: defaultEnvironment.id,
 *     featureVersion: "1.1.17",
 * });
 * const ids = alicloud.arms.getEnvFeaturesOutput({
 *     environmentId: defaultEnvFeature.environmentId,
 *     ids: [defaultEnvFeature.id],
 * });
 * export const armsEnvFeaturesId0 = ids.apply(ids => ids.features?.[0]?.id);
 * ```
 */
export function getEnvFeaturesOutput(args: GetEnvFeaturesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetEnvFeaturesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("alicloud:arms/getEnvFeatures:getEnvFeatures", {
        "environmentId": args.environmentId,
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getEnvFeatures.
 */
export interface GetEnvFeaturesOutputArgs {
    /**
     * The ID of the environment instance.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A list of ARMS Env Feature IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A regex string to filter results by ARMS Env Feature name.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: pulumi.Input<string>;
}
