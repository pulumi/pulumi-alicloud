// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a ARMS Synthetic Task resource. Cloud Synthetic task resources.
 *
 * For information about ARMS Synthetic Task and how to use it, see [What is Synthetic Task](https://next.api.alibabacloud.com/document/ARMS/2019-08-08/CreateTimingSyntheticTask).
 *
 * > **NOTE:** Available since v1.215.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const defaultResourceGroups = alicloud.resourcemanager.getResourceGroups({});
 * const defaultSyntheticTask = new alicloud.arms.SyntheticTask("defaultSyntheticTask", {
 *     monitors: [{
 *         cityCode: "1200101",
 *         operatorCode: "246",
 *         clientType: 4,
 *     }],
 *     syntheticTaskName: name,
 *     customPeriod: {
 *         endHour: 12,
 *         startHour: 11,
 *     },
 *     availableAssertions: [
 *         {
 *             type: "IcmpPackLoss",
 *             operator: "neq",
 *             expect: "200",
 *             target: "example",
 *         },
 *         {
 *             type: "IcmpPackAvgLatency",
 *             operator: "lte",
 *             expect: "1000",
 *         },
 *         {
 *             type: "IcmpPackMaxLatency",
 *             operator: "lte",
 *             expect: "10000",
 *         },
 *     ],
 *     tags: {
 *         Created: "TF",
 *         For: "example",
 *     },
 *     status: "RUNNING",
 *     monitorConf: {
 *         netTcp: {
 *             tracertTimeout: 1050,
 *             targetUrl: "www.aliyun.com",
 *             connectTimes: 6,
 *             interval: 300,
 *             timeout: 3000,
 *             tracertNumMax: 2,
 *         },
 *         netDns: {
 *             queryMethod: 1,
 *             timeout: 5050,
 *             targetUrl: "www.aliyun.com",
 *             dnsServerIpType: 1,
 *             nsServer: "61.128.114.167",
 *         },
 *         apiHttp: {
 *             timeout: 10050,
 *             targetUrl: "https://www.aliyun.com",
 *             method: "POST",
 *             requestHeaders: {
 *                 key1: "value1",
 *             },
 *             requestBody: {
 *                 content: "example2",
 *                 type: "text/html",
 *             },
 *             connectTimeout: 6000,
 *         },
 *         website: {
 *             slowElementThreshold: 5005,
 *             verifyStringBlacklist: "Failed",
 *             elementBlacklist: "a.jpg",
 *             disableCompression: 1,
 *             ignoreCertificateError: 0,
 *             monitorTimeout: 20000,
 *             redirection: 0,
 *             dnsHijackWhitelist: "www.aliyun.com:203.0.3.55",
 *             pageTamper: "www.aliyun.com:|/cc/bb/a.gif",
 *             flowHijackJumpTimes: 10,
 *             customHeader: 1,
 *             disableCache: 1,
 *             verifyStringWhitelist: "Senyuan",
 *             targetUrl: "http://www.aliyun.com",
 *             automaticScrolling: 1,
 *             waitCompletionTime: 5005,
 *             flowHijackLogo: "senyuan1",
 *             customHeaderContent: {
 *                 key1: "value1",
 *             },
 *             filterInvalidIp: 0,
 *         },
 *         fileDownload: {
 *             whiteList: "www.aliyun.com:203.0.3.55",
 *             monitorTimeout: 1050,
 *             ignoreCertificateUntrustworthyError: 0,
 *             redirection: 0,
 *             ignoreCertificateCanceledError: 0,
 *             ignoreCertificateAuthError: 0,
 *             ignoreCertificateOutOfDateError: 0,
 *             ignoreCertificateUsingError: 0,
 *             connectionTimeout: 6090,
 *             ignoreInvalidHostError: 0,
 *             verifyWay: 0,
 *             customHeaderContent: {
 *                 key1: "value1",
 *             },
 *             targetUrl: "https://www.aliyun.com",
 *             downloadKernel: 0,
 *             quickProtocol: 2,
 *             ignoreCertificateStatusError: 1,
 *             transmissionSize: 128,
 *             validateKeywords: "senyuan1",
 *         },
 *         stream: {
 *             streamMonitorTimeout: 10,
 *             streamAddressType: 0,
 *             playerType: 2,
 *             customHeaderContent: {
 *                 key1: "value1",
 *             },
 *             whiteList: "www.aliyun.com:203.0.3.55",
 *             targetUrl: "https://acd-assets.alicdn.com:443/2021productweek/week1_s.mp4",
 *             streamType: 1,
 *         },
 *         netIcmp: {
 *             targetUrl: "www.aliyun.com",
 *             interval: 200,
 *             packageNum: 36,
 *             packageSize: 512,
 *             timeout: 1000,
 *             tracertEnable: true,
 *             tracertNumMax: 1,
 *             tracertTimeout: 1200,
 *         },
 *     },
 *     taskType: 1,
 *     frequency: "1h",
 *     monitorCategory: 1,
 *     commonSetting: {
 *         xtraceRegion: "cn-beijing",
 *         customHost: {
 *             hosts: [
 *                 {
 *                     domain: "www.a.aliyun.com",
 *                     ips: ["153.3.238.102"],
 *                     ipType: 0,
 *                 },
 *                 {
 *                     domain: "www.shifen.com",
 *                     ips: [
 *                         "153.3.238.110",
 *                         "114.114.114.114",
 *                         "127.0.0.1",
 *                     ],
 *                     ipType: 1,
 *                 },
 *                 {
 *                     domain: "www.aliyun.com",
 *                     ips: [
 *                         "153.3.238.110",
 *                         "180.101.50.242",
 *                         "180.101.50.188",
 *                     ],
 *                     ipType: 0,
 *                 },
 *             ],
 *             selectType: 1,
 *         },
 *         monitorSamples: 1,
 *         ipType: 1,
 *         isOpenTrace: true,
 *         traceClientType: 1,
 *     },
 *     resourceGroupId: defaultResourceGroups.then(defaultResourceGroups => defaultResourceGroups.ids?.[1]),
 * });
 * ```
 *
 * ## Import
 *
 * ARMS Synthetic Task can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:arms/syntheticTask:SyntheticTask example <id>
 * ```
 */
export class SyntheticTask extends pulumi.CustomResource {
    /**
     * Get an existing SyntheticTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyntheticTaskState, opts?: pulumi.CustomResourceOptions): SyntheticTask {
        return new SyntheticTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:arms/syntheticTask:SyntheticTask';

    /**
     * Returns true if the given object is an instance of SyntheticTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyntheticTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyntheticTask.__pulumiType;
    }

    /**
     * Assertion List. See `availableAssertions` below.
     */
    public readonly availableAssertions!: pulumi.Output<outputs.arms.SyntheticTaskAvailableAssertion[] | undefined>;
    /**
     * Common settings. See `commonSetting` below.
     */
    public readonly commonSetting!: pulumi.Output<outputs.arms.SyntheticTaskCommonSetting>;
    /**
     * Custom Cycle. See `customPeriod` below.
     */
    public readonly customPeriod!: pulumi.Output<outputs.arms.SyntheticTaskCustomPeriod | undefined>;
    /**
     * Frequency.
     */
    public readonly frequency!: pulumi.Output<string>;
    /**
     * Classification of selected monitors.
     */
    public readonly monitorCategory!: pulumi.Output<number>;
    /**
     * Monitoring configuration. See `monitorConf` below.
     */
    public readonly monitorConf!: pulumi.Output<outputs.arms.SyntheticTaskMonitorConf>;
    /**
     * List of selected monitors. See `monitors` below.
     */
    public readonly monitors!: pulumi.Output<outputs.arms.SyntheticTaskMonitor[]>;
    /**
     * Describes which resource group the resource belongs.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * task status.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The name of synthetic task.
     */
    public readonly syntheticTaskName!: pulumi.Output<string>;
    /**
     * The list of tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The type of synthetic task.
     */
    public readonly taskType!: pulumi.Output<number>;

    /**
     * Create a SyntheticTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyntheticTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyntheticTaskArgs | SyntheticTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyntheticTaskState | undefined;
            resourceInputs["availableAssertions"] = state ? state.availableAssertions : undefined;
            resourceInputs["commonSetting"] = state ? state.commonSetting : undefined;
            resourceInputs["customPeriod"] = state ? state.customPeriod : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["monitorCategory"] = state ? state.monitorCategory : undefined;
            resourceInputs["monitorConf"] = state ? state.monitorConf : undefined;
            resourceInputs["monitors"] = state ? state.monitors : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["syntheticTaskName"] = state ? state.syntheticTaskName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taskType"] = state ? state.taskType : undefined;
        } else {
            const args = argsOrState as SyntheticTaskArgs | undefined;
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.monitorCategory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorCategory'");
            }
            if ((!args || args.monitorConf === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorConf'");
            }
            if ((!args || args.monitors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitors'");
            }
            if ((!args || args.syntheticTaskName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syntheticTaskName'");
            }
            if ((!args || args.taskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskType'");
            }
            resourceInputs["availableAssertions"] = args ? args.availableAssertions : undefined;
            resourceInputs["commonSetting"] = args ? args.commonSetting : undefined;
            resourceInputs["customPeriod"] = args ? args.customPeriod : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["monitorCategory"] = args ? args.monitorCategory : undefined;
            resourceInputs["monitorConf"] = args ? args.monitorConf : undefined;
            resourceInputs["monitors"] = args ? args.monitors : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["syntheticTaskName"] = args ? args.syntheticTaskName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taskType"] = args ? args.taskType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyntheticTask.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SyntheticTask resources.
 */
export interface SyntheticTaskState {
    /**
     * Assertion List. See `availableAssertions` below.
     */
    availableAssertions?: pulumi.Input<pulumi.Input<inputs.arms.SyntheticTaskAvailableAssertion>[]>;
    /**
     * Common settings. See `commonSetting` below.
     */
    commonSetting?: pulumi.Input<inputs.arms.SyntheticTaskCommonSetting>;
    /**
     * Custom Cycle. See `customPeriod` below.
     */
    customPeriod?: pulumi.Input<inputs.arms.SyntheticTaskCustomPeriod>;
    /**
     * Frequency.
     */
    frequency?: pulumi.Input<string>;
    /**
     * Classification of selected monitors.
     */
    monitorCategory?: pulumi.Input<number>;
    /**
     * Monitoring configuration. See `monitorConf` below.
     */
    monitorConf?: pulumi.Input<inputs.arms.SyntheticTaskMonitorConf>;
    /**
     * List of selected monitors. See `monitors` below.
     */
    monitors?: pulumi.Input<pulumi.Input<inputs.arms.SyntheticTaskMonitor>[]>;
    /**
     * Describes which resource group the resource belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * task status.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of synthetic task.
     */
    syntheticTaskName?: pulumi.Input<string>;
    /**
     * The list of tags.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The type of synthetic task.
     */
    taskType?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SyntheticTask resource.
 */
export interface SyntheticTaskArgs {
    /**
     * Assertion List. See `availableAssertions` below.
     */
    availableAssertions?: pulumi.Input<pulumi.Input<inputs.arms.SyntheticTaskAvailableAssertion>[]>;
    /**
     * Common settings. See `commonSetting` below.
     */
    commonSetting?: pulumi.Input<inputs.arms.SyntheticTaskCommonSetting>;
    /**
     * Custom Cycle. See `customPeriod` below.
     */
    customPeriod?: pulumi.Input<inputs.arms.SyntheticTaskCustomPeriod>;
    /**
     * Frequency.
     */
    frequency: pulumi.Input<string>;
    /**
     * Classification of selected monitors.
     */
    monitorCategory: pulumi.Input<number>;
    /**
     * Monitoring configuration. See `monitorConf` below.
     */
    monitorConf: pulumi.Input<inputs.arms.SyntheticTaskMonitorConf>;
    /**
     * List of selected monitors. See `monitors` below.
     */
    monitors: pulumi.Input<pulumi.Input<inputs.arms.SyntheticTaskMonitor>[]>;
    /**
     * Describes which resource group the resource belongs.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * task status.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of synthetic task.
     */
    syntheticTaskName: pulumi.Input<string>;
    /**
     * The list of tags.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The type of synthetic task.
     */
    taskType: pulumi.Input<number>;
}
