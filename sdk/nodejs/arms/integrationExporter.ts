// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Application Real-Time Monitoring Service (ARMS) Integration Exporter resource.
 *
 * For information about Application Real-Time Monitoring Service (ARMS) Integration Exporter and how to use it, see [What is Integration Exporter](https://www.alibabacloud.com/help/en/application-real-time-monitoring-service/latest/api-doc-arms-2019-08-08-api-doc-addprometheusintegration).
 *
 * > **NOTE:** Available in v1.203.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const defaultNetworks = alicloud.vpc.getNetworks({
 *     nameRegex: "your_name_regex",
 * });
 * const defaultSwitches = defaultNetworks.then(defaultNetworks => alicloud.vpc.getSwitches({
 *     vpcId: defaultNetworks.ids?.[0],
 * }));
 * const defaultResourceGroups = alicloud.resourcemanager.getResourceGroups({});
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("defaultSecurityGroup", {vpcId: defaultNetworks.then(defaultNetworks => defaultNetworks.ids?.[0])});
 * const defaultPrometheus = new alicloud.arms.Prometheus("defaultPrometheus", {
 *     clusterType: "ecs",
 *     grafanaInstanceId: "free",
 *     vpcId: defaultNetworks.then(defaultNetworks => defaultNetworks.ids?.[0]),
 *     vswitchId: defaultSwitches.then(defaultSwitches => defaultSwitches.ids?.[0]),
 *     securityGroupId: defaultSecurityGroup.id,
 *     clusterName: defaultNetworks.then(defaultNetworks => `${_var.name}-${defaultNetworks.ids?.[0]}`),
 *     resourceGroupId: defaultResourceGroups.then(defaultResourceGroups => defaultResourceGroups.groups?.[0]?.id),
 *     tags: {
 *         Created: "TF",
 *         For: "Prometheus",
 *     },
 * });
 * const defaultIntegrationExporter = new alicloud.arms.IntegrationExporter("defaultIntegrationExporter", {
 *     clusterId: defaultPrometheus.id,
 *     integrationType: "kafka",
 *     param: "{\"tls_insecure-skip-tls-verify\":\"none=tls.insecure-skip-tls-verify\",\"tls_enabled\":\"none=tls.enabled\",\"sasl_mechanism\":\"\",\"name\":\"kafka1\",\"sasl_enabled\":\"none=sasl.enabled\",\"ip_ports\":\"abc:888\",\"scrape_interval\":30,\"version\":\"0.10.1.0\"}",
 * });
 * ```
 *
 * ## Import
 *
 * Application Real-Time Monitoring Service (ARMS) Integration Exporter can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:arms/integrationExporter:IntegrationExporter example <cluster_id>:<integration_type>:<instance_id>
 * ```
 */
export class IntegrationExporter extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationExporter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationExporterState, opts?: pulumi.CustomResourceOptions): IntegrationExporter {
        return new IntegrationExporter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:arms/integrationExporter:IntegrationExporter';

    /**
     * Returns true if the given object is an instance of IntegrationExporter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationExporter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationExporter.__pulumiType;
    }

    /**
     * The ID of the Prometheus instance.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The ID of the Integration Exporter instance.
     */
    public /*out*/ readonly instanceId!: pulumi.Output<number>;
    /**
     * The type of prometheus integration.
     */
    public readonly integrationType!: pulumi.Output<string>;
    /**
     * Exporter configuration parameter json string.
     */
    public readonly param!: pulumi.Output<string>;

    /**
     * Create a IntegrationExporter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationExporterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationExporterArgs | IntegrationExporterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationExporterState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["integrationType"] = state ? state.integrationType : undefined;
            resourceInputs["param"] = state ? state.param : undefined;
        } else {
            const args = argsOrState as IntegrationExporterArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.integrationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationType'");
            }
            if ((!args || args.param === undefined) && !opts.urn) {
                throw new Error("Missing required property 'param'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["integrationType"] = args ? args.integrationType : undefined;
            resourceInputs["param"] = args ? args.param : undefined;
            resourceInputs["instanceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationExporter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationExporter resources.
 */
export interface IntegrationExporterState {
    /**
     * The ID of the Prometheus instance.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The ID of the Integration Exporter instance.
     */
    instanceId?: pulumi.Input<number>;
    /**
     * The type of prometheus integration.
     */
    integrationType?: pulumi.Input<string>;
    /**
     * Exporter configuration parameter json string.
     */
    param?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationExporter resource.
 */
export interface IntegrationExporterArgs {
    /**
     * The ID of the Prometheus instance.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The type of prometheus integration.
     */
    integrationType: pulumi.Input<string>;
    /**
     * Exporter configuration parameter json string.
     */
    param: pulumi.Input<string>;
}
