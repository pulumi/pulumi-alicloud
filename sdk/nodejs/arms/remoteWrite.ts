// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Application Real-Time Monitoring Service (ARMS) Remote Write resource.
 *
 * For information about Application Real-Time Monitoring Service (ARMS) Remote Write and how to use it, see [What is Remote Write](https://www.alibabacloud.com/help/en/application-real-time-monitoring-service/latest/api-doc-arms-2019-08-08-api-doc-addprometheusremotewrite).
 *
 * > **NOTE:** Available since v1.204.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const defaultZones = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("defaultNetwork", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("defaultSwitch", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: Promise.all([defaultZones, defaultZones.then(defaultZones => defaultZones.zones).length]).then(([defaultZones, length]) => defaultZones.zones[length - 1].id),
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("defaultSecurityGroup", {vpcId: defaultNetwork.id});
 * const defaultResourceGroups = alicloud.resourcemanager.getResourceGroups({});
 * const defaultPrometheus = new alicloud.arms.Prometheus("defaultPrometheus", {
 *     clusterType: "ecs",
 *     grafanaInstanceId: "free",
 *     vpcId: defaultNetwork.id,
 *     vswitchId: defaultSwitch.id,
 *     securityGroupId: defaultSecurityGroup.id,
 *     clusterName: pulumi.interpolate`${name}-${defaultNetwork.id}`,
 *     resourceGroupId: defaultResourceGroups.then(defaultResourceGroups => defaultResourceGroups.groups?.[0]?.id),
 *     tags: {
 *         Created: "TF",
 *         For: "Prometheus",
 *     },
 * });
 * const defaultRemoteWrite = new alicloud.arms.RemoteWrite("defaultRemoteWrite", {
 *     clusterId: defaultPrometheus.id,
 *     remoteWriteYaml: `remote_write:
 * - name: ArmsRemoteWrite
 *   url: http://47.96.227.137:8080/prometheus/xxx/yyy/cn-hangzhou/api/v3/write
 *   basic_auth: {username: 666, password: '******'}
 *   write_relabel_configs:
 *   - source_labels: [instance_id]
 *     separator: ;
 *     regex: si-6e2ca86444db4e55a7c1
 *     replacement: $1
 *     action: keep
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Application Real-Time Monitoring Service (ARMS) Remote Write can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:arms/remoteWrite:RemoteWrite example <cluster_id>:<remote_write_name>
 * ```
 */
export class RemoteWrite extends pulumi.CustomResource {
    /**
     * Get an existing RemoteWrite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RemoteWriteState, opts?: pulumi.CustomResourceOptions): RemoteWrite {
        return new RemoteWrite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:arms/remoteWrite:RemoteWrite';

    /**
     * Returns true if the given object is an instance of RemoteWrite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemoteWrite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemoteWrite.__pulumiType;
    }

    /**
     * The ID of the Prometheus instance.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The name of the Remote Write configuration item.
     */
    public /*out*/ readonly remoteWriteName!: pulumi.Output<string>;
    /**
     * The details of the Remote Write configuration item. Specify the value in the YAML format.
     */
    public readonly remoteWriteYaml!: pulumi.Output<string>;

    /**
     * Create a RemoteWrite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RemoteWriteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RemoteWriteArgs | RemoteWriteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RemoteWriteState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["remoteWriteName"] = state ? state.remoteWriteName : undefined;
            resourceInputs["remoteWriteYaml"] = state ? state.remoteWriteYaml : undefined;
        } else {
            const args = argsOrState as RemoteWriteArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.remoteWriteYaml === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteWriteYaml'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["remoteWriteYaml"] = args ? args.remoteWriteYaml : undefined;
            resourceInputs["remoteWriteName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RemoteWrite.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RemoteWrite resources.
 */
export interface RemoteWriteState {
    /**
     * The ID of the Prometheus instance.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The name of the Remote Write configuration item.
     */
    remoteWriteName?: pulumi.Input<string>;
    /**
     * The details of the Remote Write configuration item. Specify the value in the YAML format.
     */
    remoteWriteYaml?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RemoteWrite resource.
 */
export interface RemoteWriteArgs {
    /**
     * The ID of the Prometheus instance.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The details of the Remote Write configuration item. Specify the value in the YAML format.
     */
    remoteWriteYaml: pulumi.Input<string>;
}
