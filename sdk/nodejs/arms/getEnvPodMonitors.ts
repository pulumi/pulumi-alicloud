// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the ARMS Env Pod Monitors of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.258.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const enhanced = alicloud.vpc.getEnhancedNatAvailableZones({});
 * const defaultInteger = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const vpc = new alicloud.vpc.Network("vpc", {
 *     description: `${name}-${defaultInteger.result}`,
 *     cidrBlock: "192.168.0.0/16",
 *     vpcName: `${name}-${defaultInteger.result}`,
 * });
 * const vswitch = new alicloud.vpc.Switch("vswitch", {
 *     description: `${name}-${defaultInteger.result}`,
 *     vpcId: vpc.id,
 *     vswitchName: `${name}-${defaultInteger.result}`,
 *     zoneId: enhanced.then(enhanced => enhanced.zones?.[0]?.zoneId),
 *     cidrBlock: vpc.cidrBlock.apply(cidrBlock => std.cidrsubnetOutput({
 *         input: cidrBlock,
 *         newbits: 8,
 *         netnum: 8,
 *     })).apply(invoke => invoke.result),
 * });
 * const defaultSnapshotPolicy = new alicloud.ecs.SnapshotPolicy("default", {
 *     name: `${name}-${defaultInteger.result}`,
 *     repeatWeekdays: [
 *         "1",
 *         "2",
 *         "3",
 *     ],
 *     retentionDays: -1,
 *     timePoints: [
 *         "1",
 *         "22",
 *         "23",
 *     ],
 * });
 * const _default = vswitch.zoneId.apply(zoneId => alicloud.ecs.getInstanceTypesOutput({
 *     availabilityZone: zoneId,
 *     cpuCoreCount: 2,
 *     memorySize: 4,
 *     kubernetesNodeRole: "Worker",
 *     instanceTypeFamily: "ecs.sn1ne",
 * }));
 * const defaultManagedKubernetes = new alicloud.cs.ManagedKubernetes("default", {
 *     name: `terraform-example-${defaultInteger.result}`,
 *     clusterSpec: "ack.pro.small",
 *     version: "1.24.6-aliyun.1",
 *     newNatGateway: true,
 *     nodeCidrMask: 26,
 *     proxyMode: "ipvs",
 *     serviceCidr: "172.23.0.0/16",
 *     podCidr: "10.95.0.0/16",
 *     workerVswitchIds: [vswitch.id],
 * });
 * const defaultKeyPair = new alicloud.ecs.KeyPair("default", {keyPairName: `terraform-example-${defaultInteger.result}`});
 * const defaultNodePool = new alicloud.cs.NodePool("default", {
 *     name: "desired_size",
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [vswitch.id],
 *     instanceTypes: [_default.apply(_default => _default.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: defaultKeyPair.keyName,
 *     desiredSize: "2",
 * });
 * const environment_cs = new alicloud.arms.Environment("environment-cs", {
 *     environmentType: "CS",
 *     environmentName: `${name}-${defaultInteger.result}`,
 *     bindResourceId: defaultNodePool.clusterId,
 *     environmentSubType: "ManagedKubernetes",
 * });
 * const defaultEnvPodMonitor = new alicloud.arms.EnvPodMonitor("default", {
 *     aliyunLang: "en",
 *     environmentId: environment_cs.id,
 *     configYaml: `apiVersion: monitoring.coreos.com/v1
 * kind: PodMonitor
 * metadata:
 *   name: arms-admin-pm1
 *   namespace: arms-prom
 *   annotations:
 *     arms.prometheus.io/discovery: 'true'
 *     o11y.aliyun.com/addon-name: mysql
 *     o11y.aliyun.com/addon-version: 1.0.2
 *     o11y.aliyun.com/release-name: mysql2
 * spec:
 *   selector:
 *     matchLabels:
 *       app: arms-prometheus-ack-arms-prometheus
 *       release: arms-prometheus
 *   namespaceSelector:
 *     any: true
 *   podMetricsEndpoints:
 *   - interval: 30s
 *     targetPort: 9335
 *     path: /metrics
 *   - interval: 11s
 *     targetPort: 9335
 *     path: /metric
 * `,
 * });
 * const ids = alicloud.arms.getEnvPodMonitorsOutput({
 *     environmentId: defaultEnvPodMonitor.environmentId,
 *     ids: [defaultEnvPodMonitor.id],
 * });
 * export const armsEnvPodMonitorsId0 = ids.apply(ids => ids.monitors?.[0]?.id);
 * ```
 */
export function getEnvPodMonitors(args: GetEnvPodMonitorsArgs, opts?: pulumi.InvokeOptions): Promise<GetEnvPodMonitorsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:arms/getEnvPodMonitors:getEnvPodMonitors", {
        "environmentId": args.environmentId,
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getEnvPodMonitors.
 */
export interface GetEnvPodMonitorsArgs {
    /**
     * The environment ID.
     */
    environmentId: string;
    /**
     * A list of ARMS Env Pod Monitor IDs.
     */
    ids?: string[];
    /**
     * A regex string to filter results by ARMS Env Pod Monitor name.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: string;
}

/**
 * A collection of values returned by getEnvPodMonitors.
 */
export interface GetEnvPodMonitorsResult {
    /**
     * The environment ID.
     */
    readonly environmentId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    /**
     * A list of ARMS Env Pod Monitors. Each element contains the following attributes:
     */
    readonly monitors: outputs.arms.GetEnvPodMonitorsMonitor[];
    readonly nameRegex?: string;
    /**
     * A list of ARMS Env Pod Monitor names.
     */
    readonly names: string[];
    readonly outputFile?: string;
}
/**
 * This data source provides the ARMS Env Pod Monitors of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available since v1.258.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 * import * as std from "@pulumi/std";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const enhanced = alicloud.vpc.getEnhancedNatAvailableZones({});
 * const defaultInteger = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const vpc = new alicloud.vpc.Network("vpc", {
 *     description: `${name}-${defaultInteger.result}`,
 *     cidrBlock: "192.168.0.0/16",
 *     vpcName: `${name}-${defaultInteger.result}`,
 * });
 * const vswitch = new alicloud.vpc.Switch("vswitch", {
 *     description: `${name}-${defaultInteger.result}`,
 *     vpcId: vpc.id,
 *     vswitchName: `${name}-${defaultInteger.result}`,
 *     zoneId: enhanced.then(enhanced => enhanced.zones?.[0]?.zoneId),
 *     cidrBlock: vpc.cidrBlock.apply(cidrBlock => std.cidrsubnetOutput({
 *         input: cidrBlock,
 *         newbits: 8,
 *         netnum: 8,
 *     })).apply(invoke => invoke.result),
 * });
 * const defaultSnapshotPolicy = new alicloud.ecs.SnapshotPolicy("default", {
 *     name: `${name}-${defaultInteger.result}`,
 *     repeatWeekdays: [
 *         "1",
 *         "2",
 *         "3",
 *     ],
 *     retentionDays: -1,
 *     timePoints: [
 *         "1",
 *         "22",
 *         "23",
 *     ],
 * });
 * const _default = vswitch.zoneId.apply(zoneId => alicloud.ecs.getInstanceTypesOutput({
 *     availabilityZone: zoneId,
 *     cpuCoreCount: 2,
 *     memorySize: 4,
 *     kubernetesNodeRole: "Worker",
 *     instanceTypeFamily: "ecs.sn1ne",
 * }));
 * const defaultManagedKubernetes = new alicloud.cs.ManagedKubernetes("default", {
 *     name: `terraform-example-${defaultInteger.result}`,
 *     clusterSpec: "ack.pro.small",
 *     version: "1.24.6-aliyun.1",
 *     newNatGateway: true,
 *     nodeCidrMask: 26,
 *     proxyMode: "ipvs",
 *     serviceCidr: "172.23.0.0/16",
 *     podCidr: "10.95.0.0/16",
 *     workerVswitchIds: [vswitch.id],
 * });
 * const defaultKeyPair = new alicloud.ecs.KeyPair("default", {keyPairName: `terraform-example-${defaultInteger.result}`});
 * const defaultNodePool = new alicloud.cs.NodePool("default", {
 *     name: "desired_size",
 *     clusterId: defaultManagedKubernetes.id,
 *     vswitchIds: [vswitch.id],
 *     instanceTypes: [_default.apply(_default => _default.instanceTypes?.[0]?.id)],
 *     systemDiskCategory: "cloud_efficiency",
 *     systemDiskSize: 40,
 *     keyName: defaultKeyPair.keyName,
 *     desiredSize: "2",
 * });
 * const environment_cs = new alicloud.arms.Environment("environment-cs", {
 *     environmentType: "CS",
 *     environmentName: `${name}-${defaultInteger.result}`,
 *     bindResourceId: defaultNodePool.clusterId,
 *     environmentSubType: "ManagedKubernetes",
 * });
 * const defaultEnvPodMonitor = new alicloud.arms.EnvPodMonitor("default", {
 *     aliyunLang: "en",
 *     environmentId: environment_cs.id,
 *     configYaml: `apiVersion: monitoring.coreos.com/v1
 * kind: PodMonitor
 * metadata:
 *   name: arms-admin-pm1
 *   namespace: arms-prom
 *   annotations:
 *     arms.prometheus.io/discovery: 'true'
 *     o11y.aliyun.com/addon-name: mysql
 *     o11y.aliyun.com/addon-version: 1.0.2
 *     o11y.aliyun.com/release-name: mysql2
 * spec:
 *   selector:
 *     matchLabels:
 *       app: arms-prometheus-ack-arms-prometheus
 *       release: arms-prometheus
 *   namespaceSelector:
 *     any: true
 *   podMetricsEndpoints:
 *   - interval: 30s
 *     targetPort: 9335
 *     path: /metrics
 *   - interval: 11s
 *     targetPort: 9335
 *     path: /metric
 * `,
 * });
 * const ids = alicloud.arms.getEnvPodMonitorsOutput({
 *     environmentId: defaultEnvPodMonitor.environmentId,
 *     ids: [defaultEnvPodMonitor.id],
 * });
 * export const armsEnvPodMonitorsId0 = ids.apply(ids => ids.monitors?.[0]?.id);
 * ```
 */
export function getEnvPodMonitorsOutput(args: GetEnvPodMonitorsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetEnvPodMonitorsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("alicloud:arms/getEnvPodMonitors:getEnvPodMonitors", {
        "environmentId": args.environmentId,
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getEnvPodMonitors.
 */
export interface GetEnvPodMonitorsOutputArgs {
    /**
     * The environment ID.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A list of ARMS Env Pod Monitor IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A regex string to filter results by ARMS Env Pod Monitor name.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: pulumi.Input<string>;
}
