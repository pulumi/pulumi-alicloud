// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AddonReleaseArgs, AddonReleaseState } from "./addonRelease";
export type AddonRelease = import("./addonRelease").AddonRelease;
export const AddonRelease: typeof import("./addonRelease").AddonRelease = null as any;
utilities.lazyLoad(exports, ["AddonRelease"], () => require("./addonRelease"));

export { AlertContactArgs, AlertContactState } from "./alertContact";
export type AlertContact = import("./alertContact").AlertContact;
export const AlertContact: typeof import("./alertContact").AlertContact = null as any;
utilities.lazyLoad(exports, ["AlertContact"], () => require("./alertContact"));

export { AlertContactGroupArgs, AlertContactGroupState } from "./alertContactGroup";
export type AlertContactGroup = import("./alertContactGroup").AlertContactGroup;
export const AlertContactGroup: typeof import("./alertContactGroup").AlertContactGroup = null as any;
utilities.lazyLoad(exports, ["AlertContactGroup"], () => require("./alertContactGroup"));

export { AlertRobotArgs, AlertRobotState } from "./alertRobot";
export type AlertRobot = import("./alertRobot").AlertRobot;
export const AlertRobot: typeof import("./alertRobot").AlertRobot = null as any;
utilities.lazyLoad(exports, ["AlertRobot"], () => require("./alertRobot"));

export { DispatchRuleArgs, DispatchRuleState } from "./dispatchRule";
export type DispatchRule = import("./dispatchRule").DispatchRule;
export const DispatchRule: typeof import("./dispatchRule").DispatchRule = null as any;
utilities.lazyLoad(exports, ["DispatchRule"], () => require("./dispatchRule"));

export { EnvCustomJobArgs, EnvCustomJobState } from "./envCustomJob";
export type EnvCustomJob = import("./envCustomJob").EnvCustomJob;
export const EnvCustomJob: typeof import("./envCustomJob").EnvCustomJob = null as any;
utilities.lazyLoad(exports, ["EnvCustomJob"], () => require("./envCustomJob"));

export { EnvFeatureArgs, EnvFeatureState } from "./envFeature";
export type EnvFeature = import("./envFeature").EnvFeature;
export const EnvFeature: typeof import("./envFeature").EnvFeature = null as any;
utilities.lazyLoad(exports, ["EnvFeature"], () => require("./envFeature"));

export { EnvPodMonitorArgs, EnvPodMonitorState } from "./envPodMonitor";
export type EnvPodMonitor = import("./envPodMonitor").EnvPodMonitor;
export const EnvPodMonitor: typeof import("./envPodMonitor").EnvPodMonitor = null as any;
utilities.lazyLoad(exports, ["EnvPodMonitor"], () => require("./envPodMonitor"));

export { EnvServiceMonitorArgs, EnvServiceMonitorState } from "./envServiceMonitor";
export type EnvServiceMonitor = import("./envServiceMonitor").EnvServiceMonitor;
export const EnvServiceMonitor: typeof import("./envServiceMonitor").EnvServiceMonitor = null as any;
utilities.lazyLoad(exports, ["EnvServiceMonitor"], () => require("./envServiceMonitor"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GetAddonReleasesArgs, GetAddonReleasesResult, GetAddonReleasesOutputArgs } from "./getAddonReleases";
export const getAddonReleases: typeof import("./getAddonReleases").getAddonReleases = null as any;
export const getAddonReleasesOutput: typeof import("./getAddonReleases").getAddonReleasesOutput = null as any;
utilities.lazyLoad(exports, ["getAddonReleases","getAddonReleasesOutput"], () => require("./getAddonReleases"));

export { GetAlertContactGroupsArgs, GetAlertContactGroupsResult, GetAlertContactGroupsOutputArgs } from "./getAlertContactGroups";
export const getAlertContactGroups: typeof import("./getAlertContactGroups").getAlertContactGroups = null as any;
export const getAlertContactGroupsOutput: typeof import("./getAlertContactGroups").getAlertContactGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAlertContactGroups","getAlertContactGroupsOutput"], () => require("./getAlertContactGroups"));

export { GetAlertContactsArgs, GetAlertContactsResult, GetAlertContactsOutputArgs } from "./getAlertContacts";
export const getAlertContacts: typeof import("./getAlertContacts").getAlertContacts = null as any;
export const getAlertContactsOutput: typeof import("./getAlertContacts").getAlertContactsOutput = null as any;
utilities.lazyLoad(exports, ["getAlertContacts","getAlertContactsOutput"], () => require("./getAlertContacts"));

export { GetAlertRobotsArgs, GetAlertRobotsResult, GetAlertRobotsOutputArgs } from "./getAlertRobots";
export const getAlertRobots: typeof import("./getAlertRobots").getAlertRobots = null as any;
export const getAlertRobotsOutput: typeof import("./getAlertRobots").getAlertRobotsOutput = null as any;
utilities.lazyLoad(exports, ["getAlertRobots","getAlertRobotsOutput"], () => require("./getAlertRobots"));

export { GetDispatchRulesArgs, GetDispatchRulesResult, GetDispatchRulesOutputArgs } from "./getDispatchRules";
export const getDispatchRules: typeof import("./getDispatchRules").getDispatchRules = null as any;
export const getDispatchRulesOutput: typeof import("./getDispatchRules").getDispatchRulesOutput = null as any;
utilities.lazyLoad(exports, ["getDispatchRules","getDispatchRulesOutput"], () => require("./getDispatchRules"));

export { GetEnvCustomJobsArgs, GetEnvCustomJobsResult, GetEnvCustomJobsOutputArgs } from "./getEnvCustomJobs";
export const getEnvCustomJobs: typeof import("./getEnvCustomJobs").getEnvCustomJobs = null as any;
export const getEnvCustomJobsOutput: typeof import("./getEnvCustomJobs").getEnvCustomJobsOutput = null as any;
utilities.lazyLoad(exports, ["getEnvCustomJobs","getEnvCustomJobsOutput"], () => require("./getEnvCustomJobs"));

export { GetEnvFeaturesArgs, GetEnvFeaturesResult, GetEnvFeaturesOutputArgs } from "./getEnvFeatures";
export const getEnvFeatures: typeof import("./getEnvFeatures").getEnvFeatures = null as any;
export const getEnvFeaturesOutput: typeof import("./getEnvFeatures").getEnvFeaturesOutput = null as any;
utilities.lazyLoad(exports, ["getEnvFeatures","getEnvFeaturesOutput"], () => require("./getEnvFeatures"));

export { GetEnvPodMonitorsArgs, GetEnvPodMonitorsResult, GetEnvPodMonitorsOutputArgs } from "./getEnvPodMonitors";
export const getEnvPodMonitors: typeof import("./getEnvPodMonitors").getEnvPodMonitors = null as any;
export const getEnvPodMonitorsOutput: typeof import("./getEnvPodMonitors").getEnvPodMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getEnvPodMonitors","getEnvPodMonitorsOutput"], () => require("./getEnvPodMonitors"));

export { GetEnvServiceMonitorsArgs, GetEnvServiceMonitorsResult, GetEnvServiceMonitorsOutputArgs } from "./getEnvServiceMonitors";
export const getEnvServiceMonitors: typeof import("./getEnvServiceMonitors").getEnvServiceMonitors = null as any;
export const getEnvServiceMonitorsOutput: typeof import("./getEnvServiceMonitors").getEnvServiceMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getEnvServiceMonitors","getEnvServiceMonitorsOutput"], () => require("./getEnvServiceMonitors"));

export { GetEnvironmentsArgs, GetEnvironmentsResult, GetEnvironmentsOutputArgs } from "./getEnvironments";
export const getEnvironments: typeof import("./getEnvironments").getEnvironments = null as any;
export const getEnvironmentsOutput: typeof import("./getEnvironments").getEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironments","getEnvironmentsOutput"], () => require("./getEnvironments"));

export { GetIntegrationExportersArgs, GetIntegrationExportersResult, GetIntegrationExportersOutputArgs } from "./getIntegrationExporters";
export const getIntegrationExporters: typeof import("./getIntegrationExporters").getIntegrationExporters = null as any;
export const getIntegrationExportersOutput: typeof import("./getIntegrationExporters").getIntegrationExportersOutput = null as any;
utilities.lazyLoad(exports, ["getIntegrationExporters","getIntegrationExportersOutput"], () => require("./getIntegrationExporters"));

export { GetPrometheisArgs, GetPrometheisResult, GetPrometheisOutputArgs } from "./getPrometheis";
export const getPrometheis: typeof import("./getPrometheis").getPrometheis = null as any;
export const getPrometheisOutput: typeof import("./getPrometheis").getPrometheisOutput = null as any;
utilities.lazyLoad(exports, ["getPrometheis","getPrometheisOutput"], () => require("./getPrometheis"));

export { GetPrometheusArgs, GetPrometheusResult, GetPrometheusOutputArgs } from "./getPrometheus";
export const getPrometheus: typeof import("./getPrometheus").getPrometheus = null as any;
export const getPrometheusOutput: typeof import("./getPrometheus").getPrometheusOutput = null as any;
utilities.lazyLoad(exports, ["getPrometheus","getPrometheusOutput"], () => require("./getPrometheus"));

export { GetPrometheusAlertRulesArgs, GetPrometheusAlertRulesResult, GetPrometheusAlertRulesOutputArgs } from "./getPrometheusAlertRules";
export const getPrometheusAlertRules: typeof import("./getPrometheusAlertRules").getPrometheusAlertRules = null as any;
export const getPrometheusAlertRulesOutput: typeof import("./getPrometheusAlertRules").getPrometheusAlertRulesOutput = null as any;
utilities.lazyLoad(exports, ["getPrometheusAlertRules","getPrometheusAlertRulesOutput"], () => require("./getPrometheusAlertRules"));

export { GetPrometheusMonitoringsArgs, GetPrometheusMonitoringsResult, GetPrometheusMonitoringsOutputArgs } from "./getPrometheusMonitorings";
export const getPrometheusMonitorings: typeof import("./getPrometheusMonitorings").getPrometheusMonitorings = null as any;
export const getPrometheusMonitoringsOutput: typeof import("./getPrometheusMonitorings").getPrometheusMonitoringsOutput = null as any;
utilities.lazyLoad(exports, ["getPrometheusMonitorings","getPrometheusMonitoringsOutput"], () => require("./getPrometheusMonitorings"));

export { GetRemoteWritesArgs, GetRemoteWritesResult, GetRemoteWritesOutputArgs } from "./getRemoteWrites";
export const getRemoteWrites: typeof import("./getRemoteWrites").getRemoteWrites = null as any;
export const getRemoteWritesOutput: typeof import("./getRemoteWrites").getRemoteWritesOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteWrites","getRemoteWritesOutput"], () => require("./getRemoteWrites"));

export { GrafanaWorkspaceArgs, GrafanaWorkspaceState } from "./grafanaWorkspace";
export type GrafanaWorkspace = import("./grafanaWorkspace").GrafanaWorkspace;
export const GrafanaWorkspace: typeof import("./grafanaWorkspace").GrafanaWorkspace = null as any;
utilities.lazyLoad(exports, ["GrafanaWorkspace"], () => require("./grafanaWorkspace"));

export { IntegrationExporterArgs, IntegrationExporterState } from "./integrationExporter";
export type IntegrationExporter = import("./integrationExporter").IntegrationExporter;
export const IntegrationExporter: typeof import("./integrationExporter").IntegrationExporter = null as any;
utilities.lazyLoad(exports, ["IntegrationExporter"], () => require("./integrationExporter"));

export { PrometheusArgs, PrometheusState } from "./prometheus";
export type Prometheus = import("./prometheus").Prometheus;
export const Prometheus: typeof import("./prometheus").Prometheus = null as any;
utilities.lazyLoad(exports, ["Prometheus"], () => require("./prometheus"));

export { PrometheusAlertRuleArgs, PrometheusAlertRuleState } from "./prometheusAlertRule";
export type PrometheusAlertRule = import("./prometheusAlertRule").PrometheusAlertRule;
export const PrometheusAlertRule: typeof import("./prometheusAlertRule").PrometheusAlertRule = null as any;
utilities.lazyLoad(exports, ["PrometheusAlertRule"], () => require("./prometheusAlertRule"));

export { PrometheusMonitoringArgs, PrometheusMonitoringState } from "./prometheusMonitoring";
export type PrometheusMonitoring = import("./prometheusMonitoring").PrometheusMonitoring;
export const PrometheusMonitoring: typeof import("./prometheusMonitoring").PrometheusMonitoring = null as any;
utilities.lazyLoad(exports, ["PrometheusMonitoring"], () => require("./prometheusMonitoring"));

export { RemoteWriteArgs, RemoteWriteState } from "./remoteWrite";
export type RemoteWrite = import("./remoteWrite").RemoteWrite;
export const RemoteWrite: typeof import("./remoteWrite").RemoteWrite = null as any;
utilities.lazyLoad(exports, ["RemoteWrite"], () => require("./remoteWrite"));

export { SyntheticTaskArgs, SyntheticTaskState } from "./syntheticTask";
export type SyntheticTask = import("./syntheticTask").SyntheticTask;
export const SyntheticTask: typeof import("./syntheticTask").SyntheticTask = null as any;
utilities.lazyLoad(exports, ["SyntheticTask"], () => require("./syntheticTask"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:arms/addonRelease:AddonRelease":
                return new AddonRelease(name, <any>undefined, { urn })
            case "alicloud:arms/alertContact:AlertContact":
                return new AlertContact(name, <any>undefined, { urn })
            case "alicloud:arms/alertContactGroup:AlertContactGroup":
                return new AlertContactGroup(name, <any>undefined, { urn })
            case "alicloud:arms/alertRobot:AlertRobot":
                return new AlertRobot(name, <any>undefined, { urn })
            case "alicloud:arms/dispatchRule:DispatchRule":
                return new DispatchRule(name, <any>undefined, { urn })
            case "alicloud:arms/envCustomJob:EnvCustomJob":
                return new EnvCustomJob(name, <any>undefined, { urn })
            case "alicloud:arms/envFeature:EnvFeature":
                return new EnvFeature(name, <any>undefined, { urn })
            case "alicloud:arms/envPodMonitor:EnvPodMonitor":
                return new EnvPodMonitor(name, <any>undefined, { urn })
            case "alicloud:arms/envServiceMonitor:EnvServiceMonitor":
                return new EnvServiceMonitor(name, <any>undefined, { urn })
            case "alicloud:arms/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "alicloud:arms/grafanaWorkspace:GrafanaWorkspace":
                return new GrafanaWorkspace(name, <any>undefined, { urn })
            case "alicloud:arms/integrationExporter:IntegrationExporter":
                return new IntegrationExporter(name, <any>undefined, { urn })
            case "alicloud:arms/prometheus:Prometheus":
                return new Prometheus(name, <any>undefined, { urn })
            case "alicloud:arms/prometheusAlertRule:PrometheusAlertRule":
                return new PrometheusAlertRule(name, <any>undefined, { urn })
            case "alicloud:arms/prometheusMonitoring:PrometheusMonitoring":
                return new PrometheusMonitoring(name, <any>undefined, { urn })
            case "alicloud:arms/remoteWrite:RemoteWrite":
                return new RemoteWrite(name, <any>undefined, { urn })
            case "alicloud:arms/syntheticTask:SyntheticTask":
                return new SyntheticTask(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "arms/addonRelease", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/alertContact", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/alertContactGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/alertRobot", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/dispatchRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/envCustomJob", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/envFeature", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/envPodMonitor", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/envServiceMonitor", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/environment", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/grafanaWorkspace", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/integrationExporter", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/prometheus", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/prometheusAlertRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/prometheusMonitoring", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/remoteWrite", _module)
pulumi.runtime.registerResourceModule("alicloud", "arms/syntheticTask", _module)
