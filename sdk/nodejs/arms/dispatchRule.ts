// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Application Real-Time Monitoring Service (ARMS) Alert Dispatch Rule resource.
 *
 * For information about Application Real-Time Monitoring Service (ARMS) Alert Dispatch Rule and how to use it, see [What is Alert Dispatch_Rule](https://next.api.alibabacloud.com/document/ARMS/2019-08-08/CreateDispatchRule).
 *
 * > **NOTE:** Available since v1.136.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const _default = new alicloud.arms.AlertContact("default", {
 *     alertContactName: "example_value",
 *     email: "example_value@aaa.com",
 * });
 * const defaultAlertContactGroup = new alicloud.arms.AlertContactGroup("default", {
 *     alertContactGroupName: "example_value",
 *     contactIds: [_default.id],
 * });
 * const defaultDispatchRule = new alicloud.arms.DispatchRule("default", {
 *     dispatchRuleName: "example_value",
 *     dispatchType: "CREATE_ALERT",
 *     groupRules: [{
 *         groupWaitTime: 5,
 *         groupInterval: 15,
 *         repeatInterval: 100,
 *         groupingFields: ["alertname"],
 *     }],
 *     labelMatchExpressionGrids: [{
 *         labelMatchExpressionGroups: [{
 *             labelMatchExpressions: [{
 *                 key: "_aliyun_arms_involvedObject_kind",
 *                 value: "app",
 *                 operator: "eq",
 *             }],
 *         }],
 *     }],
 *     notifyRules: [{
 *         notifyObjects: [
 *             {
 *                 notifyObjectId: _default.id,
 *                 notifyType: "ARMS_CONTACT",
 *                 name: "example_value",
 *             },
 *             {
 *                 notifyObjectId: defaultAlertContactGroup.id,
 *                 notifyType: "ARMS_CONTACT_GROUP",
 *                 name: "example_value",
 *             },
 *         ],
 *         notifyChannels: [
 *             "dingTalk",
 *             "wechat",
 *         ],
 *         notifyStartTime: "10:00",
 *         notifyEndTime: "23:00",
 *     }],
 *     notifyTemplates: [{
 *         emailTitle: "example_email_title",
 *         emailContent: "example_email_content",
 *         emailRecoverTitle: "example_email_recover_title",
 *         emailRecoverContent: "example_email_recover_content",
 *         smsContent: "example_sms_content",
 *         smsRecoverContent: "example_sms_recover_content",
 *         ttsContent: "example_tts_content",
 *         ttsRecoverContent: "example_tts_recover_content",
 *         robotContent: "example_robot_content",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Application Real-Time Monitoring Service (ARMS) Alert Contact can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:arms/dispatchRule:DispatchRule example <id>
 * ```
 */
export class DispatchRule extends pulumi.CustomResource {
    /**
     * Get an existing DispatchRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DispatchRuleState, opts?: pulumi.CustomResourceOptions): DispatchRule {
        return new DispatchRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:arms/dispatchRule:DispatchRule';

    /**
     * Returns true if the given object is an instance of DispatchRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DispatchRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DispatchRule.__pulumiType;
    }

    /**
     * The name of the dispatch policy.
     */
    declare public readonly dispatchRuleName: pulumi.Output<string>;
    /**
     * The alert handling method. Valid values: CREATE_ALERT: generates an alert. DISCARD_ALERT: discards the alert event and generates no alert.
     */
    declare public readonly dispatchType: pulumi.Output<string | undefined>;
    /**
     * Sets the event group. See `groupRules` below. It will be ignored  when `dispatchType = "DISCARD_ALERT"`.
     */
    declare public readonly groupRules: pulumi.Output<outputs.arms.DispatchRuleGroupRule[]>;
    /**
     * Specifies whether to send the restored alert. Valid values: true: sends the alert. false: does not send the alert.
     */
    declare public readonly isRecover: pulumi.Output<boolean | undefined>;
    /**
     * Sets the dispatch rule. See `labelMatchExpressionGrid` below.
     */
    declare public readonly labelMatchExpressionGrids: pulumi.Output<outputs.arms.DispatchRuleLabelMatchExpressionGrid[]>;
    /**
     * Sets the notification rule. See `notifyRules` below. It will be ignored  when `dispatchType = "DISCARD_ALERT"`.
     */
    declare public readonly notifyRules: pulumi.Output<outputs.arms.DispatchRuleNotifyRule[]>;
    /**
     * Sets the notification template. See `notifyTemplate` below.
     */
    declare public readonly notifyTemplates: pulumi.Output<outputs.arms.DispatchRuleNotifyTemplate[] | undefined>;
    /**
     * The resource status of Alert Dispatch Rule.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a DispatchRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DispatchRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DispatchRuleArgs | DispatchRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DispatchRuleState | undefined;
            resourceInputs["dispatchRuleName"] = state?.dispatchRuleName;
            resourceInputs["dispatchType"] = state?.dispatchType;
            resourceInputs["groupRules"] = state?.groupRules;
            resourceInputs["isRecover"] = state?.isRecover;
            resourceInputs["labelMatchExpressionGrids"] = state?.labelMatchExpressionGrids;
            resourceInputs["notifyRules"] = state?.notifyRules;
            resourceInputs["notifyTemplates"] = state?.notifyTemplates;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as DispatchRuleArgs | undefined;
            if (args?.dispatchRuleName === undefined && !opts.urn) {
                throw new Error("Missing required property 'dispatchRuleName'");
            }
            if (args?.groupRules === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupRules'");
            }
            if (args?.labelMatchExpressionGrids === undefined && !opts.urn) {
                throw new Error("Missing required property 'labelMatchExpressionGrids'");
            }
            if (args?.notifyRules === undefined && !opts.urn) {
                throw new Error("Missing required property 'notifyRules'");
            }
            resourceInputs["dispatchRuleName"] = args?.dispatchRuleName;
            resourceInputs["dispatchType"] = args?.dispatchType;
            resourceInputs["groupRules"] = args?.groupRules;
            resourceInputs["isRecover"] = args?.isRecover;
            resourceInputs["labelMatchExpressionGrids"] = args?.labelMatchExpressionGrids;
            resourceInputs["notifyRules"] = args?.notifyRules;
            resourceInputs["notifyTemplates"] = args?.notifyTemplates;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DispatchRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DispatchRule resources.
 */
export interface DispatchRuleState {
    /**
     * The name of the dispatch policy.
     */
    dispatchRuleName?: pulumi.Input<string>;
    /**
     * The alert handling method. Valid values: CREATE_ALERT: generates an alert. DISCARD_ALERT: discards the alert event and generates no alert.
     */
    dispatchType?: pulumi.Input<string>;
    /**
     * Sets the event group. See `groupRules` below. It will be ignored  when `dispatchType = "DISCARD_ALERT"`.
     */
    groupRules?: pulumi.Input<pulumi.Input<inputs.arms.DispatchRuleGroupRule>[]>;
    /**
     * Specifies whether to send the restored alert. Valid values: true: sends the alert. false: does not send the alert.
     */
    isRecover?: pulumi.Input<boolean>;
    /**
     * Sets the dispatch rule. See `labelMatchExpressionGrid` below.
     */
    labelMatchExpressionGrids?: pulumi.Input<pulumi.Input<inputs.arms.DispatchRuleLabelMatchExpressionGrid>[]>;
    /**
     * Sets the notification rule. See `notifyRules` below. It will be ignored  when `dispatchType = "DISCARD_ALERT"`.
     */
    notifyRules?: pulumi.Input<pulumi.Input<inputs.arms.DispatchRuleNotifyRule>[]>;
    /**
     * Sets the notification template. See `notifyTemplate` below.
     */
    notifyTemplates?: pulumi.Input<pulumi.Input<inputs.arms.DispatchRuleNotifyTemplate>[]>;
    /**
     * The resource status of Alert Dispatch Rule.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DispatchRule resource.
 */
export interface DispatchRuleArgs {
    /**
     * The name of the dispatch policy.
     */
    dispatchRuleName: pulumi.Input<string>;
    /**
     * The alert handling method. Valid values: CREATE_ALERT: generates an alert. DISCARD_ALERT: discards the alert event and generates no alert.
     */
    dispatchType?: pulumi.Input<string>;
    /**
     * Sets the event group. See `groupRules` below. It will be ignored  when `dispatchType = "DISCARD_ALERT"`.
     */
    groupRules: pulumi.Input<pulumi.Input<inputs.arms.DispatchRuleGroupRule>[]>;
    /**
     * Specifies whether to send the restored alert. Valid values: true: sends the alert. false: does not send the alert.
     */
    isRecover?: pulumi.Input<boolean>;
    /**
     * Sets the dispatch rule. See `labelMatchExpressionGrid` below.
     */
    labelMatchExpressionGrids: pulumi.Input<pulumi.Input<inputs.arms.DispatchRuleLabelMatchExpressionGrid>[]>;
    /**
     * Sets the notification rule. See `notifyRules` below. It will be ignored  when `dispatchType = "DISCARD_ALERT"`.
     */
    notifyRules: pulumi.Input<pulumi.Input<inputs.arms.DispatchRuleNotifyRule>[]>;
    /**
     * Sets the notification template. See `notifyTemplate` below.
     */
    notifyTemplates?: pulumi.Input<pulumi.Input<inputs.arms.DispatchRuleNotifyTemplate>[]>;
}
