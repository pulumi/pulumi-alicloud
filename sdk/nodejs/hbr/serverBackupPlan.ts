// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Hybrid Backup Recovery (HBR) Server Backup Plan resource.
 *
 * For information about Hybrid Backup Recovery (HBR) Server Backup Plan and how to use it, see [What is Server Backup Plan](https://www.alibabacloud.com/help/doc-detail/211140.htm).
 *
 * > **NOTE:** Available since v1.142.0.
 *
 * > **NOTE:** Deprecated since v1.249.0.
 *
 * > **DEPRECATED:** This resource has been deprecated from version `1.249.0`. Please use new resource alicloud.hbr.Policy and alicloud_hbr_policy_binding.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = alicloud.getZones({
 *     availableResourceCreation: "Instance",
 * });
 * const exampleGetInstanceTypes = example.then(example => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: example.zones?.[0]?.id,
 *     cpuCoreCount: 1,
 *     memorySize: 2,
 * }));
 * const exampleGetImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_18.*64",
 *     owners: "system",
 * });
 * const exampleNetwork = new alicloud.vpc.Network("example", {
 *     vpcName: "terraform-example",
 *     cidrBlock: "172.17.3.0/24",
 * });
 * const exampleSwitch = new alicloud.vpc.Switch("example", {
 *     vswitchName: "terraform-example",
 *     cidrBlock: "172.17.3.0/24",
 *     vpcId: exampleNetwork.id,
 *     zoneId: example.then(example => example.zones?.[0]?.id),
 * });
 * const exampleSecurityGroup = new alicloud.ecs.SecurityGroup("example", {
 *     name: "terraform-example",
 *     vpcId: exampleNetwork.id,
 * });
 * const exampleInstance = new alicloud.ecs.Instance("example", {
 *     imageId: exampleGetImages.then(exampleGetImages => exampleGetImages.images?.[0]?.id),
 *     instanceType: exampleGetInstanceTypes.then(exampleGetInstanceTypes => exampleGetInstanceTypes.instanceTypes?.[0]?.id),
 *     availabilityZone: example.then(example => example.zones?.[0]?.id),
 *     securityGroups: [exampleSecurityGroup.id],
 *     instanceName: "terraform-example",
 *     internetChargeType: "PayByBandwidth",
 *     vswitchId: exampleSwitch.id,
 * });
 * const exampleServerBackupPlan = new alicloud.hbr.ServerBackupPlan("example", {
 *     ecsServerBackupPlanName: "terraform-example",
 *     instanceId: exampleInstance.id,
 *     schedule: "I|1602673264|PT2H",
 *     retention: 1,
 *     details: [{
 *         appConsistent: true,
 *         snapshotGroup: true,
 *     }],
 *     disabled: false,
 * });
 * ```
 *
 * ## Import
 *
 * Hybrid Backup Recovery (HBR) Server Backup Plan can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:hbr/serverBackupPlan:ServerBackupPlan example <id>
 * ```
 */
export class ServerBackupPlan extends pulumi.CustomResource {
    /**
     * Get an existing ServerBackupPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerBackupPlanState, opts?: pulumi.CustomResourceOptions): ServerBackupPlan {
        return new ServerBackupPlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:hbr/serverBackupPlan:ServerBackupPlan';

    /**
     * Returns true if the given object is an instance of ServerBackupPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerBackupPlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerBackupPlan.__pulumiType;
    }

    /**
     * The role name created in the original account RAM backup by the cross account managed by the current account.
     */
    declare public readonly crossAccountRoleName: pulumi.Output<string | undefined>;
    /**
     * The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
     */
    declare public readonly crossAccountType: pulumi.Output<string>;
    /**
     * The original account ID of the cross account backup managed by the current account.
     */
    declare public readonly crossAccountUserId: pulumi.Output<number | undefined>;
    /**
     * ECS server backup plan details.
     */
    declare public readonly details: pulumi.Output<outputs.hbr.ServerBackupPlanDetail[]>;
    /**
     * Whether to disable the backup task. Valid values: `true`, `false`.
     */
    declare public readonly disabled: pulumi.Output<boolean>;
    /**
     * The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
     */
    declare public readonly ecsServerBackupPlanName: pulumi.Output<string>;
    /**
     * The ID of ECS instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * Backup retention days, the minimum is 1.
     */
    declare public readonly retention: pulumi.Output<number>;
    /**
     * Backup strategy. Optional format: `I|{startTime}|{interval}`
     * * `startTime` Backup start time, UNIX time, in seconds.
     */
    declare public readonly schedule: pulumi.Output<string>;

    /**
     * Create a ServerBackupPlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerBackupPlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerBackupPlanArgs | ServerBackupPlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerBackupPlanState | undefined;
            resourceInputs["crossAccountRoleName"] = state?.crossAccountRoleName;
            resourceInputs["crossAccountType"] = state?.crossAccountType;
            resourceInputs["crossAccountUserId"] = state?.crossAccountUserId;
            resourceInputs["details"] = state?.details;
            resourceInputs["disabled"] = state?.disabled;
            resourceInputs["ecsServerBackupPlanName"] = state?.ecsServerBackupPlanName;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["retention"] = state?.retention;
            resourceInputs["schedule"] = state?.schedule;
        } else {
            const args = argsOrState as ServerBackupPlanArgs | undefined;
            if (args?.details === undefined && !opts.urn) {
                throw new Error("Missing required property 'details'");
            }
            if (args?.ecsServerBackupPlanName === undefined && !opts.urn) {
                throw new Error("Missing required property 'ecsServerBackupPlanName'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.retention === undefined && !opts.urn) {
                throw new Error("Missing required property 'retention'");
            }
            if (args?.schedule === undefined && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            resourceInputs["crossAccountRoleName"] = args?.crossAccountRoleName;
            resourceInputs["crossAccountType"] = args?.crossAccountType;
            resourceInputs["crossAccountUserId"] = args?.crossAccountUserId;
            resourceInputs["details"] = args?.details;
            resourceInputs["disabled"] = args?.disabled;
            resourceInputs["ecsServerBackupPlanName"] = args?.ecsServerBackupPlanName;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["retention"] = args?.retention;
            resourceInputs["schedule"] = args?.schedule;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerBackupPlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerBackupPlan resources.
 */
export interface ServerBackupPlanState {
    /**
     * The role name created in the original account RAM backup by the cross account managed by the current account.
     */
    crossAccountRoleName?: pulumi.Input<string>;
    /**
     * The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
     */
    crossAccountType?: pulumi.Input<string>;
    /**
     * The original account ID of the cross account backup managed by the current account.
     */
    crossAccountUserId?: pulumi.Input<number>;
    /**
     * ECS server backup plan details.
     */
    details?: pulumi.Input<pulumi.Input<inputs.hbr.ServerBackupPlanDetail>[]>;
    /**
     * Whether to disable the backup task. Valid values: `true`, `false`.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
     */
    ecsServerBackupPlanName?: pulumi.Input<string>;
    /**
     * The ID of ECS instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Backup retention days, the minimum is 1.
     */
    retention?: pulumi.Input<number>;
    /**
     * Backup strategy. Optional format: `I|{startTime}|{interval}`
     * * `startTime` Backup start time, UNIX time, in seconds.
     */
    schedule?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerBackupPlan resource.
 */
export interface ServerBackupPlanArgs {
    /**
     * The role name created in the original account RAM backup by the cross account managed by the current account.
     */
    crossAccountRoleName?: pulumi.Input<string>;
    /**
     * The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
     */
    crossAccountType?: pulumi.Input<string>;
    /**
     * The original account ID of the cross account backup managed by the current account.
     */
    crossAccountUserId?: pulumi.Input<number>;
    /**
     * ECS server backup plan details.
     */
    details: pulumi.Input<pulumi.Input<inputs.hbr.ServerBackupPlanDetail>[]>;
    /**
     * Whether to disable the backup task. Valid values: `true`, `false`.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
     */
    ecsServerBackupPlanName: pulumi.Input<string>;
    /**
     * The ID of ECS instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Backup retention days, the minimum is 1.
     */
    retention: pulumi.Input<number>;
    /**
     * Backup strategy. Optional format: `I|{startTime}|{interval}`
     * * `startTime` Backup start time, UNIX time, in seconds.
     */
    schedule: pulumi.Input<string>;
}
