// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a HBR Oss Backup Plan resource.
 *
 * For information about HBR Oss Backup Plan and how to use it, see [What is Oss Backup Plan](https://www.alibabacloud.com/help/doc-detail/130040.htm).
 *
 * > **NOTE:** Available since v1.131.0.
 *
 * > **NOTE:** Deprecated since v1.249.0.
 *
 * > **DEPRECATED:** This resource has been deprecated from version `1.249.0`. Please use new resource alicloud.hbr.Policy and alicloud_hbr_policy_binding.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const _default = new random.index.Integer("default", {
 *     max: 99999,
 *     min: 10000,
 * });
 * const defaultVault = new alicloud.hbr.Vault("default", {vaultName: `terraform-example-${_default.result}`});
 * const defaultBucket = new alicloud.oss.Bucket("default", {bucket: `terraform-example-${_default.result}`});
 * const defaultOssBackupPlan = new alicloud.hbr.OssBackupPlan("default", {
 *     ossBackupPlanName: "terraform-example",
 *     prefix: "/example",
 *     bucket: defaultBucket.bucket,
 *     vaultId: defaultVault.id,
 *     schedule: "I|1602673264|PT2H",
 *     backupType: "COMPLETE",
 *     retention: "2",
 * });
 * ```
 *
 * ## Import
 *
 * HBR Oss Backup Plan can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:hbr/ossBackupPlan:OssBackupPlan example <id>
 * ```
 */
export class OssBackupPlan extends pulumi.CustomResource {
    /**
     * Get an existing OssBackupPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OssBackupPlanState, opts?: pulumi.CustomResourceOptions): OssBackupPlan {
        return new OssBackupPlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:hbr/ossBackupPlan:OssBackupPlan';

    /**
     * Returns true if the given object is an instance of OssBackupPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OssBackupPlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OssBackupPlan.__pulumiType;
    }

    /**
     * Backup type. Valid values: `COMPLETE`.
     */
    declare public readonly backupType: pulumi.Output<string>;
    /**
     * The name of OSS bucket.
     */
    declare public readonly bucket: pulumi.Output<string>;
    /**
     * The role name created in the original account RAM backup by the cross account managed by the current account.
     */
    declare public readonly crossAccountRoleName: pulumi.Output<string | undefined>;
    /**
     * The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
     */
    declare public readonly crossAccountType: pulumi.Output<string>;
    /**
     * The original account ID of the cross account backup managed by the current account.
     */
    declare public readonly crossAccountUserId: pulumi.Output<number | undefined>;
    /**
     * Whether to disable the backup task. Valid values: `true`, `false`.
     */
    declare public readonly disabled: pulumi.Output<boolean>;
    /**
     * The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
     */
    declare public readonly ossBackupPlanName: pulumi.Output<string>;
    /**
     * Backup prefix. Once specified, only objects with matching prefixes will be backed up.
     */
    declare public readonly prefix: pulumi.Output<string | undefined>;
    /**
     * Backup retention days, the minimum is 1.
     */
    declare public readonly retention: pulumi.Output<string>;
    /**
     * Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
     * * `startTime` Backup start time, UNIX time seconds.
     */
    declare public readonly schedule: pulumi.Output<string>;
    /**
     * The ID of backup vault.
     */
    declare public readonly vaultId: pulumi.Output<string>;

    /**
     * Create a OssBackupPlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OssBackupPlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OssBackupPlanArgs | OssBackupPlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OssBackupPlanState | undefined;
            resourceInputs["backupType"] = state?.backupType;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["crossAccountRoleName"] = state?.crossAccountRoleName;
            resourceInputs["crossAccountType"] = state?.crossAccountType;
            resourceInputs["crossAccountUserId"] = state?.crossAccountUserId;
            resourceInputs["disabled"] = state?.disabled;
            resourceInputs["ossBackupPlanName"] = state?.ossBackupPlanName;
            resourceInputs["prefix"] = state?.prefix;
            resourceInputs["retention"] = state?.retention;
            resourceInputs["schedule"] = state?.schedule;
            resourceInputs["vaultId"] = state?.vaultId;
        } else {
            const args = argsOrState as OssBackupPlanArgs | undefined;
            if (args?.backupType === undefined && !opts.urn) {
                throw new Error("Missing required property 'backupType'");
            }
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if (args?.ossBackupPlanName === undefined && !opts.urn) {
                throw new Error("Missing required property 'ossBackupPlanName'");
            }
            if (args?.retention === undefined && !opts.urn) {
                throw new Error("Missing required property 'retention'");
            }
            if (args?.schedule === undefined && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            if (args?.vaultId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["backupType"] = args?.backupType;
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["crossAccountRoleName"] = args?.crossAccountRoleName;
            resourceInputs["crossAccountType"] = args?.crossAccountType;
            resourceInputs["crossAccountUserId"] = args?.crossAccountUserId;
            resourceInputs["disabled"] = args?.disabled;
            resourceInputs["ossBackupPlanName"] = args?.ossBackupPlanName;
            resourceInputs["prefix"] = args?.prefix;
            resourceInputs["retention"] = args?.retention;
            resourceInputs["schedule"] = args?.schedule;
            resourceInputs["vaultId"] = args?.vaultId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OssBackupPlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OssBackupPlan resources.
 */
export interface OssBackupPlanState {
    /**
     * Backup type. Valid values: `COMPLETE`.
     */
    backupType?: pulumi.Input<string>;
    /**
     * The name of OSS bucket.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The role name created in the original account RAM backup by the cross account managed by the current account.
     */
    crossAccountRoleName?: pulumi.Input<string>;
    /**
     * The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
     */
    crossAccountType?: pulumi.Input<string>;
    /**
     * The original account ID of the cross account backup managed by the current account.
     */
    crossAccountUserId?: pulumi.Input<number>;
    /**
     * Whether to disable the backup task. Valid values: `true`, `false`.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
     */
    ossBackupPlanName?: pulumi.Input<string>;
    /**
     * Backup prefix. Once specified, only objects with matching prefixes will be backed up.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Backup retention days, the minimum is 1.
     */
    retention?: pulumi.Input<string>;
    /**
     * Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
     * * `startTime` Backup start time, UNIX time seconds.
     */
    schedule?: pulumi.Input<string>;
    /**
     * The ID of backup vault.
     */
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OssBackupPlan resource.
 */
export interface OssBackupPlanArgs {
    /**
     * Backup type. Valid values: `COMPLETE`.
     */
    backupType: pulumi.Input<string>;
    /**
     * The name of OSS bucket.
     */
    bucket: pulumi.Input<string>;
    /**
     * The role name created in the original account RAM backup by the cross account managed by the current account.
     */
    crossAccountRoleName?: pulumi.Input<string>;
    /**
     * The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
     */
    crossAccountType?: pulumi.Input<string>;
    /**
     * The original account ID of the cross account backup managed by the current account.
     */
    crossAccountUserId?: pulumi.Input<number>;
    /**
     * Whether to disable the backup task. Valid values: `true`, `false`.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
     */
    ossBackupPlanName: pulumi.Input<string>;
    /**
     * Backup prefix. Once specified, only objects with matching prefixes will be backed up.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Backup retention days, the minimum is 1.
     */
    retention: pulumi.Input<string>;
    /**
     * Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
     * * `startTime` Backup start time, UNIX time seconds.
     */
    schedule: pulumi.Input<string>;
    /**
     * The ID of backup vault.
     */
    vaultId: pulumi.Input<string>;
}
