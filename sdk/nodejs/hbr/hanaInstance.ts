// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Hybrid Backup Recovery (HBR) Hana Instance resource.
 *
 * For information about Hybrid Backup Recovery (HBR) Hana Instance and how to use it, see [What is Hana Instance](https://www.alibabacloud.com/help/en/hybrid-backup-recovery/latest/api-doc-hbr-2017-09-08-api-doc-createhanainstance).
 *
 * > **NOTE:** Available in v1.178.0+.
 *
 * > **NOTE:** The `sid` attribute is required when destroying resources.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const exampleResourceGroups = alicloud.resourcemanager.getResourceGroups({
 *     status: "OK",
 * });
 * const exampleVault = new alicloud.hbr.Vault("exampleVault", {vaultName: "terraform-example"});
 * const exampleHanaInstance = new alicloud.hbr.HanaInstance("exampleHanaInstance", {
 *     alertSetting: "INHERITED",
 *     hanaName: "terraform-example",
 *     host: "1.1.1.1",
 *     instanceNumber: 1,
 *     password: "YouPassword123",
 *     resourceGroupId: exampleResourceGroups.then(exampleResourceGroups => exampleResourceGroups.groups?.[0]?.id),
 *     sid: "HXE",
 *     useSsl: false,
 *     userName: "admin",
 *     validateCertificate: false,
 *     vaultId: exampleVault.id,
 * });
 * ```
 *
 * ## Import
 *
 * Hybrid Backup Recovery (HBR) Hana Instance can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:hbr/hanaInstance:HanaInstance example <vault_id>:<hana_instance_id>
 * ```
 */
export class HanaInstance extends pulumi.CustomResource {
    /**
     * Get an existing HanaInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HanaInstanceState, opts?: pulumi.CustomResourceOptions): HanaInstance {
        return new HanaInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:hbr/hanaInstance:HanaInstance';

    /**
     * Returns true if the given object is an instance of HanaInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HanaInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HanaInstance.__pulumiType;
    }

    /**
     * The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
     */
    public readonly alertSetting!: pulumi.Output<string>;
    /**
     * The IDs of ECS instances that host the SAP HANA instance to be registered. HBR installs backup clients on the specified ECS instances.
     */
    public readonly ecsInstanceIds!: pulumi.Output<string[] | undefined>;
    /**
     * The id of the Hana Instance.
     */
    public /*out*/ readonly hanaInstanceId!: pulumi.Output<string>;
    /**
     * The name of the SAP HANA instance.
     */
    public readonly hanaName!: pulumi.Output<string | undefined>;
    /**
     * The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * The instance number of the SAP HANA system.
     */
    public readonly instanceNumber!: pulumi.Output<number | undefined>;
    /**
     * The password that is used to connect with the SAP HANA database.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The ID of the resource group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The security identifier (SID) of the SAP HANA database.
     */
    public readonly sid!: pulumi.Output<string | undefined>;
    /**
     * The status of the resource.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies whether to connect with the SAP HANA database over Secure Sockets Layer (SSL).
     */
    public readonly useSsl!: pulumi.Output<boolean | undefined>;
    /**
     * The username of the SYSTEMDB database.
     */
    public readonly userName!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to verify the SSL certificate of the SAP HANA database.
     */
    public readonly validateCertificate!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the backup vault.
     */
    public readonly vaultId!: pulumi.Output<string>;

    /**
     * Create a HanaInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HanaInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HanaInstanceArgs | HanaInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HanaInstanceState | undefined;
            resourceInputs["alertSetting"] = state ? state.alertSetting : undefined;
            resourceInputs["ecsInstanceIds"] = state ? state.ecsInstanceIds : undefined;
            resourceInputs["hanaInstanceId"] = state ? state.hanaInstanceId : undefined;
            resourceInputs["hanaName"] = state ? state.hanaName : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["instanceNumber"] = state ? state.instanceNumber : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["sid"] = state ? state.sid : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["useSsl"] = state ? state.useSsl : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["validateCertificate"] = state ? state.validateCertificate : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
        } else {
            const args = argsOrState as HanaInstanceArgs | undefined;
            if ((!args || args.vaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["alertSetting"] = args ? args.alertSetting : undefined;
            resourceInputs["ecsInstanceIds"] = args ? args.ecsInstanceIds : undefined;
            resourceInputs["hanaName"] = args ? args.hanaName : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["instanceNumber"] = args ? args.instanceNumber : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["sid"] = args ? args.sid : undefined;
            resourceInputs["useSsl"] = args ? args.useSsl : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["validateCertificate"] = args ? args.validateCertificate : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
            resourceInputs["hanaInstanceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(HanaInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HanaInstance resources.
 */
export interface HanaInstanceState {
    /**
     * The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
     */
    alertSetting?: pulumi.Input<string>;
    /**
     * The IDs of ECS instances that host the SAP HANA instance to be registered. HBR installs backup clients on the specified ECS instances.
     */
    ecsInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The id of the Hana Instance.
     */
    hanaInstanceId?: pulumi.Input<string>;
    /**
     * The name of the SAP HANA instance.
     */
    hanaName?: pulumi.Input<string>;
    /**
     * The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
     */
    host?: pulumi.Input<string>;
    /**
     * The instance number of the SAP HANA system.
     */
    instanceNumber?: pulumi.Input<number>;
    /**
     * The password that is used to connect with the SAP HANA database.
     */
    password?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The security identifier (SID) of the SAP HANA database.
     */
    sid?: pulumi.Input<string>;
    /**
     * The status of the resource.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies whether to connect with the SAP HANA database over Secure Sockets Layer (SSL).
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * The username of the SYSTEMDB database.
     */
    userName?: pulumi.Input<string>;
    /**
     * Specifies whether to verify the SSL certificate of the SAP HANA database.
     */
    validateCertificate?: pulumi.Input<boolean>;
    /**
     * The ID of the backup vault.
     */
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HanaInstance resource.
 */
export interface HanaInstanceArgs {
    /**
     * The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
     */
    alertSetting?: pulumi.Input<string>;
    /**
     * The IDs of ECS instances that host the SAP HANA instance to be registered. HBR installs backup clients on the specified ECS instances.
     */
    ecsInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the SAP HANA instance.
     */
    hanaName?: pulumi.Input<string>;
    /**
     * The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
     */
    host?: pulumi.Input<string>;
    /**
     * The instance number of the SAP HANA system.
     */
    instanceNumber?: pulumi.Input<number>;
    /**
     * The password that is used to connect with the SAP HANA database.
     */
    password?: pulumi.Input<string>;
    /**
     * The ID of the resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The security identifier (SID) of the SAP HANA database.
     */
    sid?: pulumi.Input<string>;
    /**
     * Specifies whether to connect with the SAP HANA database over Secure Sockets Layer (SSL).
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * The username of the SYSTEMDB database.
     */
    userName?: pulumi.Input<string>;
    /**
     * Specifies whether to verify the SSL certificate of the SAP HANA database.
     */
    validateCertificate?: pulumi.Input<boolean>;
    /**
     * The ID of the backup vault.
     */
    vaultId: pulumi.Input<string>;
}
