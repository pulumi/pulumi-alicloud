// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Hybrid Backup Recovery (HBR) Cross Account resource.
 *
 * The cross account is used for the cross-account backup in the Cloud Backup. The management account can back up the resources under the cross account.
 *
 * For information about Hybrid Backup Recovery (HBR) Cross Account and how to use it, see [What is Cross Account](https://www.alibabacloud.com/help/en/).
 *
 * > **NOTE:** Available since v1.241.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = new alicloud.hbr.CrossAccount("default", {
 *     crossAccountUserId: 1,
 *     crossAccountRoleName: name,
 *     alias: name,
 * });
 * ```
 *
 * ## Import
 *
 * Hybrid Backup Recovery (HBR) Cross Account can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:hbr/crossAccount:CrossAccount example <cross_account_user_id>:<cross_account_role_name>
 * ```
 */
export class CrossAccount extends pulumi.CustomResource {
    /**
     * Get an existing CrossAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CrossAccountState, opts?: pulumi.CustomResourceOptions): CrossAccount {
        return new CrossAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:hbr/crossAccount:CrossAccount';

    /**
     * Returns true if the given object is an instance of CrossAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CrossAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CrossAccount.__pulumiType;
    }

    /**
     * Backup account alias
     */
    declare public readonly alias: pulumi.Output<string | undefined>;
    /**
     * Timestamp of the creation time
     */
    declare public /*out*/ readonly createTime: pulumi.Output<number>;
    /**
     * The name of RAM role that the backup account authorizes the management account to manage its resources
     */
    declare public readonly crossAccountRoleName: pulumi.Output<string>;
    /**
     * The uid of the backup account.
     */
    declare public readonly crossAccountUserId: pulumi.Output<number>;

    /**
     * Create a CrossAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CrossAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CrossAccountArgs | CrossAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CrossAccountState | undefined;
            resourceInputs["alias"] = state?.alias;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["crossAccountRoleName"] = state?.crossAccountRoleName;
            resourceInputs["crossAccountUserId"] = state?.crossAccountUserId;
        } else {
            const args = argsOrState as CrossAccountArgs | undefined;
            if (args?.crossAccountRoleName === undefined && !opts.urn) {
                throw new Error("Missing required property 'crossAccountRoleName'");
            }
            if (args?.crossAccountUserId === undefined && !opts.urn) {
                throw new Error("Missing required property 'crossAccountUserId'");
            }
            resourceInputs["alias"] = args?.alias;
            resourceInputs["crossAccountRoleName"] = args?.crossAccountRoleName;
            resourceInputs["crossAccountUserId"] = args?.crossAccountUserId;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CrossAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CrossAccount resources.
 */
export interface CrossAccountState {
    /**
     * Backup account alias
     */
    alias?: pulumi.Input<string>;
    /**
     * Timestamp of the creation time
     */
    createTime?: pulumi.Input<number>;
    /**
     * The name of RAM role that the backup account authorizes the management account to manage its resources
     */
    crossAccountRoleName?: pulumi.Input<string>;
    /**
     * The uid of the backup account.
     */
    crossAccountUserId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CrossAccount resource.
 */
export interface CrossAccountArgs {
    /**
     * Backup account alias
     */
    alias?: pulumi.Input<string>;
    /**
     * The name of RAM role that the backup account authorizes the management account to manage its resources
     */
    crossAccountRoleName: pulumi.Input<string>;
    /**
     * The uid of the backup account.
     */
    crossAccountUserId: pulumi.Input<number>;
}
