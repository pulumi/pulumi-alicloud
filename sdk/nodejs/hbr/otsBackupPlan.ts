// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a HBR Ots Backup Plan resource.
 *
 * For information about HBR Ots Backup Plan and how to use it, see [What is Ots Backup Plan](https://www.alibabacloud.com/help/en/hybrid-backup-recovery/latest/overview).
 *
 * > **NOTE:** Available in v1.163.0+.
 *
 * ## Import
 *
 * HBR Ots Backup Plan can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:hbr/otsBackupPlan:OtsBackupPlan example <id>
 * ```
 */
export class OtsBackupPlan extends pulumi.CustomResource {
    /**
     * Get an existing OtsBackupPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OtsBackupPlanState, opts?: pulumi.CustomResourceOptions): OtsBackupPlan {
        return new OtsBackupPlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:hbr/otsBackupPlan:OtsBackupPlan';

    /**
     * Returns true if the given object is an instance of OtsBackupPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OtsBackupPlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OtsBackupPlan.__pulumiType;
    }

    /**
     * Backup type. Valid values: `COMPLETE`.
     */
    public readonly backupType!: pulumi.Output<string>;
    /**
     * The role name created in the original account RAM backup by the cross account managed by the current account.
     */
    public readonly crossAccountRoleName!: pulumi.Output<string | undefined>;
    /**
     * The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
     */
    public readonly crossAccountType!: pulumi.Output<string>;
    /**
     * The original account ID of the cross account backup managed by the current account.
     */
    public readonly crossAccountUserId!: pulumi.Output<number | undefined>;
    /**
     * Whether to disable the backup task. Valid values: `true`, `false`. Default values: `false`.
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * The name of the Table store instance. **Note:** Required while sourceType equals `OTS_TABLE`.
     */
    public readonly instanceName!: pulumi.Output<string | undefined>;
    /**
     * The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
     */
    public readonly otsBackupPlanName!: pulumi.Output<string>;
    /**
     * The details about the Table store instance. See the following `Block otsDetail`. **Note:** Required while sourceType equals `OTS_TABLE`.
     */
    public readonly otsDetails!: pulumi.Output<outputs.hbr.OtsBackupPlanOtsDetail[] | undefined>;
    /**
     * Backup retention days, the minimum is 1.
     */
    public readonly retention!: pulumi.Output<string>;
    /**
     * The backup plan rule. See the following `Block rules`. **Note:** Required while sourceType equals `OTS_TABLE`.
     */
    public readonly rules!: pulumi.Output<outputs.hbr.OtsBackupPlanRule[] | undefined>;
    /**
     * Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
     *
     * @deprecated Field 'schedule' has been deprecated from version 1.163.0. Use 'rules' instead.
     */
    public readonly schedule!: pulumi.Output<string | undefined>;
    /**
     * The ID of backup vault.
     */
    public readonly vaultId!: pulumi.Output<string | undefined>;

    /**
     * Create a OtsBackupPlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OtsBackupPlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OtsBackupPlanArgs | OtsBackupPlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OtsBackupPlanState | undefined;
            resourceInputs["backupType"] = state ? state.backupType : undefined;
            resourceInputs["crossAccountRoleName"] = state ? state.crossAccountRoleName : undefined;
            resourceInputs["crossAccountType"] = state ? state.crossAccountType : undefined;
            resourceInputs["crossAccountUserId"] = state ? state.crossAccountUserId : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["otsBackupPlanName"] = state ? state.otsBackupPlanName : undefined;
            resourceInputs["otsDetails"] = state ? state.otsDetails : undefined;
            resourceInputs["retention"] = state ? state.retention : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
        } else {
            const args = argsOrState as OtsBackupPlanArgs | undefined;
            if ((!args || args.backupType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupType'");
            }
            if ((!args || args.otsBackupPlanName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'otsBackupPlanName'");
            }
            if ((!args || args.retention === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retention'");
            }
            resourceInputs["backupType"] = args ? args.backupType : undefined;
            resourceInputs["crossAccountRoleName"] = args ? args.crossAccountRoleName : undefined;
            resourceInputs["crossAccountType"] = args ? args.crossAccountType : undefined;
            resourceInputs["crossAccountUserId"] = args ? args.crossAccountUserId : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["otsBackupPlanName"] = args ? args.otsBackupPlanName : undefined;
            resourceInputs["otsDetails"] = args ? args.otsDetails : undefined;
            resourceInputs["retention"] = args ? args.retention : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OtsBackupPlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OtsBackupPlan resources.
 */
export interface OtsBackupPlanState {
    /**
     * Backup type. Valid values: `COMPLETE`.
     */
    backupType?: pulumi.Input<string>;
    /**
     * The role name created in the original account RAM backup by the cross account managed by the current account.
     */
    crossAccountRoleName?: pulumi.Input<string>;
    /**
     * The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
     */
    crossAccountType?: pulumi.Input<string>;
    /**
     * The original account ID of the cross account backup managed by the current account.
     */
    crossAccountUserId?: pulumi.Input<number>;
    /**
     * Whether to disable the backup task. Valid values: `true`, `false`. Default values: `false`.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The name of the Table store instance. **Note:** Required while sourceType equals `OTS_TABLE`.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
     */
    otsBackupPlanName?: pulumi.Input<string>;
    /**
     * The details about the Table store instance. See the following `Block otsDetail`. **Note:** Required while sourceType equals `OTS_TABLE`.
     */
    otsDetails?: pulumi.Input<pulumi.Input<inputs.hbr.OtsBackupPlanOtsDetail>[]>;
    /**
     * Backup retention days, the minimum is 1.
     */
    retention?: pulumi.Input<string>;
    /**
     * The backup plan rule. See the following `Block rules`. **Note:** Required while sourceType equals `OTS_TABLE`.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.hbr.OtsBackupPlanRule>[]>;
    /**
     * Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
     *
     * @deprecated Field 'schedule' has been deprecated from version 1.163.0. Use 'rules' instead.
     */
    schedule?: pulumi.Input<string>;
    /**
     * The ID of backup vault.
     */
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OtsBackupPlan resource.
 */
export interface OtsBackupPlanArgs {
    /**
     * Backup type. Valid values: `COMPLETE`.
     */
    backupType: pulumi.Input<string>;
    /**
     * The role name created in the original account RAM backup by the cross account managed by the current account.
     */
    crossAccountRoleName?: pulumi.Input<string>;
    /**
     * The type of the cross account backup. Valid values: `SELF_ACCOUNT`, `CROSS_ACCOUNT`.
     */
    crossAccountType?: pulumi.Input<string>;
    /**
     * The original account ID of the cross account backup managed by the current account.
     */
    crossAccountUserId?: pulumi.Input<number>;
    /**
     * Whether to disable the backup task. Valid values: `true`, `false`. Default values: `false`.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The name of the Table store instance. **Note:** Required while sourceType equals `OTS_TABLE`.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
     */
    otsBackupPlanName: pulumi.Input<string>;
    /**
     * The details about the Table store instance. See the following `Block otsDetail`. **Note:** Required while sourceType equals `OTS_TABLE`.
     */
    otsDetails?: pulumi.Input<pulumi.Input<inputs.hbr.OtsBackupPlanOtsDetail>[]>;
    /**
     * Backup retention days, the minimum is 1.
     */
    retention: pulumi.Input<string>;
    /**
     * The backup plan rule. See the following `Block rules`. **Note:** Required while sourceType equals `OTS_TABLE`.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.hbr.OtsBackupPlanRule>[]>;
    /**
     * Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
     *
     * @deprecated Field 'schedule' has been deprecated from version 1.163.0. Use 'rules' instead.
     */
    schedule?: pulumi.Input<string>;
    /**
     * The ID of backup vault.
     */
    vaultId?: pulumi.Input<string>;
}
