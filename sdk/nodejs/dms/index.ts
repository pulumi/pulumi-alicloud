// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { EnterpriseAuthorityTemplateArgs, EnterpriseAuthorityTemplateState } from "./enterpriseAuthorityTemplate";
export type EnterpriseAuthorityTemplate = import("./enterpriseAuthorityTemplate").EnterpriseAuthorityTemplate;
export const EnterpriseAuthorityTemplate: typeof import("./enterpriseAuthorityTemplate").EnterpriseAuthorityTemplate = null as any;
utilities.lazyLoad(exports, ["EnterpriseAuthorityTemplate"], () => require("./enterpriseAuthorityTemplate"));

export { EnterpriseInstanceArgs, EnterpriseInstanceState } from "./enterpriseInstance";
export type EnterpriseInstance = import("./enterpriseInstance").EnterpriseInstance;
export const EnterpriseInstance: typeof import("./enterpriseInstance").EnterpriseInstance = null as any;
utilities.lazyLoad(exports, ["EnterpriseInstance"], () => require("./enterpriseInstance"));

export { EnterpriseLogicDatabaseArgs, EnterpriseLogicDatabaseState } from "./enterpriseLogicDatabase";
export type EnterpriseLogicDatabase = import("./enterpriseLogicDatabase").EnterpriseLogicDatabase;
export const EnterpriseLogicDatabase: typeof import("./enterpriseLogicDatabase").EnterpriseLogicDatabase = null as any;
utilities.lazyLoad(exports, ["EnterpriseLogicDatabase"], () => require("./enterpriseLogicDatabase"));

export { EnterpriseProxyArgs, EnterpriseProxyState } from "./enterpriseProxy";
export type EnterpriseProxy = import("./enterpriseProxy").EnterpriseProxy;
export const EnterpriseProxy: typeof import("./enterpriseProxy").EnterpriseProxy = null as any;
utilities.lazyLoad(exports, ["EnterpriseProxy"], () => require("./enterpriseProxy"));

export { EnterpriseProxyAccessArgs, EnterpriseProxyAccessState } from "./enterpriseProxyAccess";
export type EnterpriseProxyAccess = import("./enterpriseProxyAccess").EnterpriseProxyAccess;
export const EnterpriseProxyAccess: typeof import("./enterpriseProxyAccess").EnterpriseProxyAccess = null as any;
utilities.lazyLoad(exports, ["EnterpriseProxyAccess"], () => require("./enterpriseProxyAccess"));

export { EnterpriseUserArgs, EnterpriseUserState } from "./enterpriseUser";
export type EnterpriseUser = import("./enterpriseUser").EnterpriseUser;
export const EnterpriseUser: typeof import("./enterpriseUser").EnterpriseUser = null as any;
utilities.lazyLoad(exports, ["EnterpriseUser"], () => require("./enterpriseUser"));

export { GetEnterpriseDatabasesArgs, GetEnterpriseDatabasesResult, GetEnterpriseDatabasesOutputArgs } from "./getEnterpriseDatabases";
export const getEnterpriseDatabases: typeof import("./getEnterpriseDatabases").getEnterpriseDatabases = null as any;
export const getEnterpriseDatabasesOutput: typeof import("./getEnterpriseDatabases").getEnterpriseDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getEnterpriseDatabases","getEnterpriseDatabasesOutput"], () => require("./getEnterpriseDatabases"));

export { GetEnterpriseInstancesArgs, GetEnterpriseInstancesResult, GetEnterpriseInstancesOutputArgs } from "./getEnterpriseInstances";
export const getEnterpriseInstances: typeof import("./getEnterpriseInstances").getEnterpriseInstances = null as any;
export const getEnterpriseInstancesOutput: typeof import("./getEnterpriseInstances").getEnterpriseInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getEnterpriseInstances","getEnterpriseInstancesOutput"], () => require("./getEnterpriseInstances"));

export { GetEnterpriseLogicDatabasesArgs, GetEnterpriseLogicDatabasesResult, GetEnterpriseLogicDatabasesOutputArgs } from "./getEnterpriseLogicDatabases";
export const getEnterpriseLogicDatabases: typeof import("./getEnterpriseLogicDatabases").getEnterpriseLogicDatabases = null as any;
export const getEnterpriseLogicDatabasesOutput: typeof import("./getEnterpriseLogicDatabases").getEnterpriseLogicDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getEnterpriseLogicDatabases","getEnterpriseLogicDatabasesOutput"], () => require("./getEnterpriseLogicDatabases"));

export { GetEnterpriseProxiesArgs, GetEnterpriseProxiesResult, GetEnterpriseProxiesOutputArgs } from "./getEnterpriseProxies";
export const getEnterpriseProxies: typeof import("./getEnterpriseProxies").getEnterpriseProxies = null as any;
export const getEnterpriseProxiesOutput: typeof import("./getEnterpriseProxies").getEnterpriseProxiesOutput = null as any;
utilities.lazyLoad(exports, ["getEnterpriseProxies","getEnterpriseProxiesOutput"], () => require("./getEnterpriseProxies"));

export { GetEnterpriseProxyAccessesArgs, GetEnterpriseProxyAccessesResult, GetEnterpriseProxyAccessesOutputArgs } from "./getEnterpriseProxyAccesses";
export const getEnterpriseProxyAccesses: typeof import("./getEnterpriseProxyAccesses").getEnterpriseProxyAccesses = null as any;
export const getEnterpriseProxyAccessesOutput: typeof import("./getEnterpriseProxyAccesses").getEnterpriseProxyAccessesOutput = null as any;
utilities.lazyLoad(exports, ["getEnterpriseProxyAccesses","getEnterpriseProxyAccessesOutput"], () => require("./getEnterpriseProxyAccesses"));

export { GetEnterpriseUsersArgs, GetEnterpriseUsersResult, GetEnterpriseUsersOutputArgs } from "./getEnterpriseUsers";
export const getEnterpriseUsers: typeof import("./getEnterpriseUsers").getEnterpriseUsers = null as any;
export const getEnterpriseUsersOutput: typeof import("./getEnterpriseUsers").getEnterpriseUsersOutput = null as any;
utilities.lazyLoad(exports, ["getEnterpriseUsers","getEnterpriseUsersOutput"], () => require("./getEnterpriseUsers"));

export { GetUserTenantsArgs, GetUserTenantsResult, GetUserTenantsOutputArgs } from "./getUserTenants";
export const getUserTenants: typeof import("./getUserTenants").getUserTenants = null as any;
export const getUserTenantsOutput: typeof import("./getUserTenants").getUserTenantsOutput = null as any;
utilities.lazyLoad(exports, ["getUserTenants","getUserTenantsOutput"], () => require("./getUserTenants"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:dms/enterpriseAuthorityTemplate:EnterpriseAuthorityTemplate":
                return new EnterpriseAuthorityTemplate(name, <any>undefined, { urn })
            case "alicloud:dms/enterpriseInstance:EnterpriseInstance":
                return new EnterpriseInstance(name, <any>undefined, { urn })
            case "alicloud:dms/enterpriseLogicDatabase:EnterpriseLogicDatabase":
                return new EnterpriseLogicDatabase(name, <any>undefined, { urn })
            case "alicloud:dms/enterpriseProxy:EnterpriseProxy":
                return new EnterpriseProxy(name, <any>undefined, { urn })
            case "alicloud:dms/enterpriseProxyAccess:EnterpriseProxyAccess":
                return new EnterpriseProxyAccess(name, <any>undefined, { urn })
            case "alicloud:dms/enterpriseUser:EnterpriseUser":
                return new EnterpriseUser(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "dms/enterpriseAuthorityTemplate", _module)
pulumi.runtime.registerResourceModule("alicloud", "dms/enterpriseInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "dms/enterpriseLogicDatabase", _module)
pulumi.runtime.registerResourceModule("alicloud", "dms/enterpriseProxy", _module)
pulumi.runtime.registerResourceModule("alicloud", "dms/enterpriseProxyAccess", _module)
pulumi.runtime.registerResourceModule("alicloud", "dms/enterpriseUser", _module)
