// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Dms Airflow resource.
 *
 * Airflow instance, used to schedule jobs.
 *
 * For information about Dms Airflow and how to use it, see [What is Airflow](https://next.api.alibabacloud.com/document/Dms/2025-04-14/CreateAirflow).
 *
 * > **NOTE:** Available since v1.260.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.vpc.getNetworks({
 *     nameRegex: "^default-NODELETING$",
 * });
 * const defaultGetSwitches = _default.then(_default => alicloud.vpc.getSwitches({
 *     vpcId: _default.ids?.[0],
 *     zoneId: "cn-hangzhou-h",
 * }));
 * const securityGroup = new alicloud.ecs.SecurityGroup("security_group", {
 *     description: "terraform_example_group",
 *     securityGroupName: "terraform_example_group",
 *     vpcId: _default.then(_default => _default.ids?.[0]),
 *     securityGroupType: "normal",
 *     innerAccessPolicy: "Accept",
 * });
 * const workspace = new alicloud.dms.EnterpriseWorkspace("workspace", {
 *     description: "terraform-example",
 *     vpcId: _default.then(_default => _default.ids?.[0]),
 *     workspaceName: "terraform-example",
 * });
 * const defaultAirflow = new alicloud.dms.Airflow("default", {
 *     vpcId: _default.then(_default => _default.ids?.[0]),
 *     ossPath: "/",
 *     dagsDir: "default/dags",
 *     zoneId: "cn-hangzhou-h",
 *     workerServerlessReplicas: 0,
 *     description: "terraform-example",
 *     securityGroupId: securityGroup.id,
 *     requirementFile: "default/requirements.txt",
 *     airflowName: "tfaccdms6513",
 *     pluginsDir: "default/plugins",
 *     startupFile: "default/startup.sh",
 *     appSpec: "SMALL",
 *     ossBucketName: "hansheng",
 *     vswitchId: defaultGetSwitches.then(defaultGetSwitches => defaultGetSwitches.ids?.[0]),
 *     workspaceId: workspace.id,
 * });
 * ```
 *
 * ## Import
 *
 * Dms Airflow can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:dms/airflow:Airflow example <workspace_id>:<airflow_id>
 * ```
 */
export class Airflow extends pulumi.CustomResource {
    /**
     * Get an existing Airflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AirflowState, opts?: pulumi.CustomResourceOptions): Airflow {
        return new Airflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:dms/airflow:Airflow';

    /**
     * Returns true if the given object is an instance of Airflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Airflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Airflow.__pulumiType;
    }

    /**
     * AirflowId
     */
    declare public /*out*/ readonly airflowId: pulumi.Output<string>;
    /**
     * Name of the Airflow instance
     */
    declare public readonly airflowName: pulumi.Output<string>;
    /**
     * Airflow instance specifications
     */
    declare public readonly appSpec: pulumi.Output<string>;
    /**
     * Dag scan path
     */
    declare public readonly dagsDir: pulumi.Output<string | undefined>;
    /**
     * Description of the airflow instance
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * OSS bucket name
     */
    declare public readonly ossBucketName: pulumi.Output<string>;
    /**
     * OSS path
     */
    declare public readonly ossPath: pulumi.Output<string>;
    /**
     * The path of the plugin scanned by the airflow instance.
     */
    declare public readonly pluginsDir: pulumi.Output<string | undefined>;
    /**
     * The region ID of the resource
     */
    declare public /*out*/ readonly regionId: pulumi.Output<string>;
    /**
     * Path to installable package
     */
    declare public readonly requirementFile: pulumi.Output<string | undefined>;
    /**
     * Security group ID
     */
    declare public readonly securityGroupId: pulumi.Output<string>;
    /**
     * Launch script for the airflow container
     */
    declare public readonly startupFile: pulumi.Output<string | undefined>;
    /**
     * Vpc id
     */
    declare public readonly vpcId: pulumi.Output<string>;
    /**
     * Switch ID
     */
    declare public readonly vswitchId: pulumi.Output<string>;
    /**
     * Worker Node extension
     */
    declare public readonly workerServerlessReplicas: pulumi.Output<number>;
    /**
     * DMS workspace ID
     */
    declare public readonly workspaceId: pulumi.Output<string>;
    /**
     * Zone ID in the region
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a Airflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AirflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AirflowArgs | AirflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AirflowState | undefined;
            resourceInputs["airflowId"] = state?.airflowId;
            resourceInputs["airflowName"] = state?.airflowName;
            resourceInputs["appSpec"] = state?.appSpec;
            resourceInputs["dagsDir"] = state?.dagsDir;
            resourceInputs["description"] = state?.description;
            resourceInputs["ossBucketName"] = state?.ossBucketName;
            resourceInputs["ossPath"] = state?.ossPath;
            resourceInputs["pluginsDir"] = state?.pluginsDir;
            resourceInputs["regionId"] = state?.regionId;
            resourceInputs["requirementFile"] = state?.requirementFile;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["startupFile"] = state?.startupFile;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["vswitchId"] = state?.vswitchId;
            resourceInputs["workerServerlessReplicas"] = state?.workerServerlessReplicas;
            resourceInputs["workspaceId"] = state?.workspaceId;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as AirflowArgs | undefined;
            if (args?.airflowName === undefined && !opts.urn) {
                throw new Error("Missing required property 'airflowName'");
            }
            if (args?.appSpec === undefined && !opts.urn) {
                throw new Error("Missing required property 'appSpec'");
            }
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.ossBucketName === undefined && !opts.urn) {
                throw new Error("Missing required property 'ossBucketName'");
            }
            if (args?.ossPath === undefined && !opts.urn) {
                throw new Error("Missing required property 'ossPath'");
            }
            if (args?.securityGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if (args?.vswitchId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            if (args?.workerServerlessReplicas === undefined && !opts.urn) {
                throw new Error("Missing required property 'workerServerlessReplicas'");
            }
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["airflowName"] = args?.airflowName;
            resourceInputs["appSpec"] = args?.appSpec;
            resourceInputs["dagsDir"] = args?.dagsDir;
            resourceInputs["description"] = args?.description;
            resourceInputs["ossBucketName"] = args?.ossBucketName;
            resourceInputs["ossPath"] = args?.ossPath;
            resourceInputs["pluginsDir"] = args?.pluginsDir;
            resourceInputs["requirementFile"] = args?.requirementFile;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["startupFile"] = args?.startupFile;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["vswitchId"] = args?.vswitchId;
            resourceInputs["workerServerlessReplicas"] = args?.workerServerlessReplicas;
            resourceInputs["workspaceId"] = args?.workspaceId;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["airflowId"] = undefined /*out*/;
            resourceInputs["regionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Airflow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Airflow resources.
 */
export interface AirflowState {
    /**
     * AirflowId
     */
    airflowId?: pulumi.Input<string>;
    /**
     * Name of the Airflow instance
     */
    airflowName?: pulumi.Input<string>;
    /**
     * Airflow instance specifications
     */
    appSpec?: pulumi.Input<string>;
    /**
     * Dag scan path
     */
    dagsDir?: pulumi.Input<string>;
    /**
     * Description of the airflow instance
     */
    description?: pulumi.Input<string>;
    /**
     * OSS bucket name
     */
    ossBucketName?: pulumi.Input<string>;
    /**
     * OSS path
     */
    ossPath?: pulumi.Input<string>;
    /**
     * The path of the plugin scanned by the airflow instance.
     */
    pluginsDir?: pulumi.Input<string>;
    /**
     * The region ID of the resource
     */
    regionId?: pulumi.Input<string>;
    /**
     * Path to installable package
     */
    requirementFile?: pulumi.Input<string>;
    /**
     * Security group ID
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Launch script for the airflow container
     */
    startupFile?: pulumi.Input<string>;
    /**
     * Vpc id
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Switch ID
     */
    vswitchId?: pulumi.Input<string>;
    /**
     * Worker Node extension
     */
    workerServerlessReplicas?: pulumi.Input<number>;
    /**
     * DMS workspace ID
     */
    workspaceId?: pulumi.Input<string>;
    /**
     * Zone ID in the region
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Airflow resource.
 */
export interface AirflowArgs {
    /**
     * Name of the Airflow instance
     */
    airflowName: pulumi.Input<string>;
    /**
     * Airflow instance specifications
     */
    appSpec: pulumi.Input<string>;
    /**
     * Dag scan path
     */
    dagsDir?: pulumi.Input<string>;
    /**
     * Description of the airflow instance
     */
    description: pulumi.Input<string>;
    /**
     * OSS bucket name
     */
    ossBucketName: pulumi.Input<string>;
    /**
     * OSS path
     */
    ossPath: pulumi.Input<string>;
    /**
     * The path of the plugin scanned by the airflow instance.
     */
    pluginsDir?: pulumi.Input<string>;
    /**
     * Path to installable package
     */
    requirementFile?: pulumi.Input<string>;
    /**
     * Security group ID
     */
    securityGroupId: pulumi.Input<string>;
    /**
     * Launch script for the airflow container
     */
    startupFile?: pulumi.Input<string>;
    /**
     * Vpc id
     */
    vpcId: pulumi.Input<string>;
    /**
     * Switch ID
     */
    vswitchId: pulumi.Input<string>;
    /**
     * Worker Node extension
     */
    workerServerlessReplicas: pulumi.Input<number>;
    /**
     * DMS workspace ID
     */
    workspaceId: pulumi.Input<string>;
    /**
     * Zone ID in the region
     */
    zoneId: pulumi.Input<string>;
}
