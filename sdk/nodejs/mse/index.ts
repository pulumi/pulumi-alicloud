// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { EngineNamespaceArgs, EngineNamespaceState } from "./engineNamespace";
export type EngineNamespace = import("./engineNamespace").EngineNamespace;
export const EngineNamespace: typeof import("./engineNamespace").EngineNamespace = null as any;
utilities.lazyLoad(exports, ["EngineNamespace"], () => require("./engineNamespace"));

export { GatewayArgs, GatewayState } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { GetClustersArgs, GetClustersResult, GetClustersOutputArgs } from "./getClusters";
export const getClusters: typeof import("./getClusters").getClusters = null as any;
export const getClustersOutput: typeof import("./getClusters").getClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClusters","getClustersOutput"], () => require("./getClusters"));

export { GetEngineNamespacesArgs, GetEngineNamespacesResult, GetEngineNamespacesOutputArgs } from "./getEngineNamespaces";
export const getEngineNamespaces: typeof import("./getEngineNamespaces").getEngineNamespaces = null as any;
export const getEngineNamespacesOutput: typeof import("./getEngineNamespaces").getEngineNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getEngineNamespaces","getEngineNamespacesOutput"], () => require("./getEngineNamespaces"));

export { GetGatewaysArgs, GetGatewaysResult, GetGatewaysOutputArgs } from "./getGateways";
export const getGateways: typeof import("./getGateways").getGateways = null as any;
export const getGatewaysOutput: typeof import("./getGateways").getGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getGateways","getGatewaysOutput"], () => require("./getGateways"));

export { GetNacosConfigsArgs, GetNacosConfigsResult, GetNacosConfigsOutputArgs } from "./getNacosConfigs";
export const getNacosConfigs: typeof import("./getNacosConfigs").getNacosConfigs = null as any;
export const getNacosConfigsOutput: typeof import("./getNacosConfigs").getNacosConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getNacosConfigs","getNacosConfigsOutput"], () => require("./getNacosConfigs"));

export { GetZnodesArgs, GetZnodesResult, GetZnodesOutputArgs } from "./getZnodes";
export const getZnodes: typeof import("./getZnodes").getZnodes = null as any;
export const getZnodesOutput: typeof import("./getZnodes").getZnodesOutput = null as any;
utilities.lazyLoad(exports, ["getZnodes","getZnodesOutput"], () => require("./getZnodes"));

export { NacosConfigArgs, NacosConfigState } from "./nacosConfig";
export type NacosConfig = import("./nacosConfig").NacosConfig;
export const NacosConfig: typeof import("./nacosConfig").NacosConfig = null as any;
utilities.lazyLoad(exports, ["NacosConfig"], () => require("./nacosConfig"));

export { ZnodeArgs, ZnodeState } from "./znode";
export type Znode = import("./znode").Znode;
export const Znode: typeof import("./znode").Znode = null as any;
utilities.lazyLoad(exports, ["Znode"], () => require("./znode"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:mse/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "alicloud:mse/engineNamespace:EngineNamespace":
                return new EngineNamespace(name, <any>undefined, { urn })
            case "alicloud:mse/gateway:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "alicloud:mse/nacosConfig:NacosConfig":
                return new NacosConfig(name, <any>undefined, { urn })
            case "alicloud:mse/znode:Znode":
                return new Znode(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "mse/cluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "mse/engineNamespace", _module)
pulumi.runtime.registerResourceModule("alicloud", "mse/gateway", _module)
pulumi.runtime.registerResourceModule("alicloud", "mse/nacosConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "mse/znode", _module)
