// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Microservice Engine (MSE) Nacos Config resource.
 *
 * For information about Microservice Engine (MSE) Nacos Config and how to use it, see [What is Nacos configuration](https://www.alibabacloud.com/help/en/mse/developer-reference/api-mse-2019-05-31-createnacosconfig)
 *
 * > **NOTE:** Available since v1.233.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const example = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const exampleNetwork = new alicloud.vpc.Network("example", {
 *     vpcName: "terraform-example",
 *     cidrBlock: "172.17.3.0/24",
 * });
 * const exampleSwitch = new alicloud.vpc.Switch("example", {
 *     vswitchName: "terraform-example",
 *     cidrBlock: "172.17.3.0/24",
 *     vpcId: exampleNetwork.id,
 *     zoneId: example.then(example => example.zones?.[0]?.id),
 * });
 * const exampleCluster = new alicloud.mse.Cluster("example", {
 *     connectionType: "slb",
 *     netType: "privatenet",
 *     vswitchId: exampleSwitch.id,
 *     clusterSpecification: "MSE_SC_1_2_60_c",
 *     clusterVersion: "NACOS_2_0_0",
 *     instanceCount: 3,
 *     pubNetworkFlow: "1",
 *     clusterAliasName: "example",
 *     mseVersion: "mse_pro",
 *     clusterType: "Nacos-Ans",
 * });
 * const exampleEngineNamespace = new alicloud.mse.EngineNamespace("example", {
 *     instanceId: exampleCluster.id,
 *     namespaceShowName: "example",
 *     namespaceId: "example",
 * });
 * const exampleNacosConfig = new alicloud.mse.NacosConfig("example", {
 *     instanceId: exampleCluster.id,
 *     dataId: "example",
 *     group: "example",
 *     namespaceId: exampleEngineNamespace.namespaceId,
 *     content: "example",
 *     type: "text",
 *     tags: "example",
 *     appName: "example",
 *     desc: "example",
 * });
 * ```
 *
 * ## Import
 *
 * Microservice Engine (MSE) Nacos Config can be imported using the id, e.g.
 *
 * **Note**: If instance_id, namespace_id, data_id, and group contain ":", please replace it with "\\\\:", available since v1.243.0
 *
 * ```sh
 * $ pulumi import alicloud:mse/nacosConfig:NacosConfig example <instance_id>:<namespace_id>:<data_id>:<group>
 * ```
 */
export class NacosConfig extends pulumi.CustomResource {
    /**
     * Get an existing NacosConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NacosConfigState, opts?: pulumi.CustomResourceOptions): NacosConfig {
        return new NacosConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:mse/nacosConfig:NacosConfig';

    /**
     * Returns true if the given object is an instance of NacosConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NacosConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NacosConfig.__pulumiType;
    }

    /**
     * The language type of the returned information. Valid values: `zh`, `en`.
     */
    declare public readonly acceptLanguage: pulumi.Output<string | undefined>;
    /**
     * The name of the application.
     */
    declare public readonly appName: pulumi.Output<string | undefined>;
    /**
     * The list of IP addresses where the beta release of the configuration is performed.
     */
    declare public readonly betaIps: pulumi.Output<string>;
    /**
     * The content of the configuration.
     */
    declare public readonly content: pulumi.Output<string>;
    /**
     * The ID of the data.
     */
    declare public readonly dataId: pulumi.Output<string>;
    /**
     * The description of the configuration.
     */
    declare public readonly desc: pulumi.Output<string | undefined>;
    /**
     * The encryption key.
     */
    declare public /*out*/ readonly encryptedDataKey: pulumi.Output<string>;
    /**
     * The ID of the group.
     */
    declare public readonly group: pulumi.Output<string>;
    /**
     * The ID of the instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * The id of Namespace. If you want to create a config under the `public` namespace, this parameter can be set to an empty string  *`""`* or just not set this parameter.
     */
    declare public readonly namespaceId: pulumi.Output<string | undefined>;
    /**
     * The tags of the configuration.
     */
    declare public readonly tags: pulumi.Output<string | undefined>;
    /**
     * The format of the configuration. Supported formats include TEXT, JSON, and XML.
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a NacosConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NacosConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NacosConfigArgs | NacosConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NacosConfigState | undefined;
            resourceInputs["acceptLanguage"] = state?.acceptLanguage;
            resourceInputs["appName"] = state?.appName;
            resourceInputs["betaIps"] = state?.betaIps;
            resourceInputs["content"] = state?.content;
            resourceInputs["dataId"] = state?.dataId;
            resourceInputs["desc"] = state?.desc;
            resourceInputs["encryptedDataKey"] = state?.encryptedDataKey;
            resourceInputs["group"] = state?.group;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["namespaceId"] = state?.namespaceId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as NacosConfigArgs | undefined;
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.dataId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataId'");
            }
            if (args?.group === undefined && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["acceptLanguage"] = args?.acceptLanguage;
            resourceInputs["appName"] = args?.appName;
            resourceInputs["betaIps"] = args?.betaIps;
            resourceInputs["content"] = args?.content;
            resourceInputs["dataId"] = args?.dataId;
            resourceInputs["desc"] = args?.desc;
            resourceInputs["group"] = args?.group;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["namespaceId"] = args?.namespaceId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["encryptedDataKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NacosConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NacosConfig resources.
 */
export interface NacosConfigState {
    /**
     * The language type of the returned information. Valid values: `zh`, `en`.
     */
    acceptLanguage?: pulumi.Input<string>;
    /**
     * The name of the application.
     */
    appName?: pulumi.Input<string>;
    /**
     * The list of IP addresses where the beta release of the configuration is performed.
     */
    betaIps?: pulumi.Input<string>;
    /**
     * The content of the configuration.
     */
    content?: pulumi.Input<string>;
    /**
     * The ID of the data.
     */
    dataId?: pulumi.Input<string>;
    /**
     * The description of the configuration.
     */
    desc?: pulumi.Input<string>;
    /**
     * The encryption key.
     */
    encryptedDataKey?: pulumi.Input<string>;
    /**
     * The ID of the group.
     */
    group?: pulumi.Input<string>;
    /**
     * The ID of the instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The id of Namespace. If you want to create a config under the `public` namespace, this parameter can be set to an empty string  *`""`* or just not set this parameter.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * The tags of the configuration.
     */
    tags?: pulumi.Input<string>;
    /**
     * The format of the configuration. Supported formats include TEXT, JSON, and XML.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NacosConfig resource.
 */
export interface NacosConfigArgs {
    /**
     * The language type of the returned information. Valid values: `zh`, `en`.
     */
    acceptLanguage?: pulumi.Input<string>;
    /**
     * The name of the application.
     */
    appName?: pulumi.Input<string>;
    /**
     * The list of IP addresses where the beta release of the configuration is performed.
     */
    betaIps?: pulumi.Input<string>;
    /**
     * The content of the configuration.
     */
    content: pulumi.Input<string>;
    /**
     * The ID of the data.
     */
    dataId: pulumi.Input<string>;
    /**
     * The description of the configuration.
     */
    desc?: pulumi.Input<string>;
    /**
     * The ID of the group.
     */
    group: pulumi.Input<string>;
    /**
     * The ID of the instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The id of Namespace. If you want to create a config under the `public` namespace, this parameter can be set to an empty string  *`""`* or just not set this parameter.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * The tags of the configuration.
     */
    tags?: pulumi.Input<string>;
    /**
     * The format of the configuration. Supported formats include TEXT, JSON, and XML.
     */
    type?: pulumi.Input<string>;
}
