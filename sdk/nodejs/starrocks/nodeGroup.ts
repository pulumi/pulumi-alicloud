// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Star Rocks Node Group resource.
 *
 * For information about Star Rocks Node Group and how to use it, see [What is Node Group](https://next.api.alibabacloud.com/document/starrocks/2022-10-19/CreateNodeGroup).
 *
 * > **NOTE:** Available since v1.262.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const defaultq6pcFe = new alicloud.vpc.Network("defaultq6pcFe", {
 *     cidrBlock: "172.16.0.0/12",
 *     vpcName: "example-vpc-487",
 * });
 * const defaultujlpyG = new alicloud.vpc.Switch("defaultujlpyG", {
 *     vpcId: defaultq6pcFe.id,
 *     zoneId: "cn-hangzhou-i",
 *     cidrBlock: "172.16.0.0/24",
 *     vswitchName: "sr-example-ng",
 * });
 * const defaultvjnpM0 = new alicloud.starrocks.Instance("defaultvjnpM0", {
 *     clusterZoneId: "cn-hangzhou-i",
 *     encrypted: false,
 *     autoRenew: false,
 *     payType: "postPaid",
 *     frontendNodeGroups: [{
 *         cu: 8,
 *         storageSize: 100,
 *         storagePerformanceLevel: "pl1",
 *         diskNumber: 1,
 *         zoneId: "cn-hangzhou-i",
 *         specType: "standard",
 *         residentNodeNumber: 1,
 *     }],
 *     instanceName: "t1",
 *     vswitches: [{
 *         zoneId: "cn-hangzhou-i",
 *         vswitchId: defaultujlpyG.id,
 *     }],
 *     vpcId: defaultq6pcFe.id,
 *     version: "3.3",
 *     runMode: "shared_data",
 *     packageType: "official",
 *     ossAccessingRoleName: "AliyunEMRStarRocksAccessingOSSRolecn",
 *     adminPassword: "1qaz@QAZ",
 *     backendNodeGroups: [{
 *         cu: 8,
 *         storageSize: 200,
 *         zoneId: "cn-hangzhou-i",
 *         specType: "standard",
 *         residentNodeNumber: 3,
 *         diskNumber: 1,
 *         storagePerformanceLevel: "pl1",
 *     }],
 * });
 * const _default = new alicloud.starrocks.NodeGroup("default", {
 *     description: "example_desc",
 *     nodeGroupName: "ng_676",
 *     instanceId: defaultvjnpM0.id,
 *     specType: "standard",
 *     storagePerformanceLevel: "pl1",
 *     pricingCycle: "1",
 *     autoRenew: false,
 *     storageSize: 200,
 *     duration: 1,
 *     payType: "postPaid",
 *     cu: 8,
 *     diskNumber: 1,
 *     residentNodeNumber: 1,
 *     localStorageInstanceType: "non_local_storage",
 *     promotionOptionNo: "blank",
 * });
 * ```
 *
 * ## Import
 *
 * Star Rocks Node Group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:starrocks/nodeGroup:NodeGroup example <instance_id>:<node_group_id>
 * ```
 */
export class NodeGroup extends pulumi.CustomResource {
    /**
     * Get an existing NodeGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeGroupState, opts?: pulumi.CustomResourceOptions): NodeGroup {
        return new NodeGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:starrocks/nodeGroup:NodeGroup';

    /**
     * Returns true if the given object is an instance of NodeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodeGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeGroup.__pulumiType;
    }

    /**
     * Whether auto-renewal is enabled.
     *
     * > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     */
    declare public readonly autoRenew: pulumi.Output<boolean | undefined>;
    /**
     * The creation time of the node group.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
     */
    declare public readonly cu: pulumi.Output<number | undefined>;
    /**
     * Description of node group.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Number of disks.
     */
    declare public readonly diskNumber: pulumi.Output<number | undefined>;
    /**
     * Duration of node group.
     *
     * > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     */
    declare public readonly duration: pulumi.Output<number | undefined>;
    /**
     * Whether to restart in fast restart mode. The default is false.
     * - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
     * - false: Restarts the compute node in rolling restart mode.
     *
     * > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     */
    declare public readonly fastMode: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
     */
    declare public readonly localStorageInstanceType: pulumi.Output<string | undefined>;
    /**
     * The ID of the node group.
     */
    declare public /*out*/ readonly nodeGroupId: pulumi.Output<string>;
    /**
     * The name of the node group.
     */
    declare public readonly nodeGroupName: pulumi.Output<string | undefined>;
    /**
     * Payment type:
     * - PrePaid: Subscription (prepaid).
     * - PostPaid: Pay-as-you-go (postpaid).
     */
    declare public readonly payType: pulumi.Output<string | undefined>;
    /**
     * Unit of purchase duration:
     * - Month
     * - Year
     *
     * This is only applicable when payType is set to PrePaid.
     *
     * > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     */
    declare public readonly pricingCycle: pulumi.Output<string | undefined>;
    declare public readonly promotionOptionNo: pulumi.Output<string | undefined>;
    /**
     * The region ID of the node group.
     */
    declare public /*out*/ readonly regionId: pulumi.Output<string>;
    /**
     * Number of nodes.
     */
    declare public readonly residentNodeNumber: pulumi.Output<number | undefined>;
    /**
     * Node group spec types include the following:
     * - standard: Standard edition.
     * - localSSD: Local SSD.
     * - bigData: Large-scale storage.
     * - ramEnhanced: Memory-enhanced type.
     * - networkEnhanced: Network-enhanced type.
     */
    declare public readonly specType: pulumi.Output<string | undefined>;
    /**
     * Node group status, including the following values:_FAILED: Creation failed._CONFIG: Modifying configuration._TIMEZONE: Modifying timezone._SCALING_OUT: Elastic scaling out._SCALING_IN: Elastic scaling in._OUT: Scaling out._IN: Scaling in._UP: Scaling up (upgrading configuration)._DOWN: Scaling down (downgrading configuration)._PUBLIC_NETWORK: Enabling public network._PUBLIC_NETWORK: Disabling public network._AZ: Switching availability zones.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Performance levels of the cloud disk. Includes the following values:
     * - pl0: Maximum random read/write IOPS of a single disk is 10,000.
     * - pl1: Maximum random read/write IOPS of a single disk is 50,000.
     * - pl2: Maximum random read/write IOPS of a single disk is 100,000.
     * - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
     */
    declare public readonly storagePerformanceLevel: pulumi.Output<string | undefined>;
    /**
     * Storage size, measured in GiB.
     */
    declare public readonly storageSize: pulumi.Output<number | undefined>;

    /**
     * Create a NodeGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NodeGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeGroupArgs | NodeGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeGroupState | undefined;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["cu"] = state?.cu;
            resourceInputs["description"] = state?.description;
            resourceInputs["diskNumber"] = state?.diskNumber;
            resourceInputs["duration"] = state?.duration;
            resourceInputs["fastMode"] = state?.fastMode;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["localStorageInstanceType"] = state?.localStorageInstanceType;
            resourceInputs["nodeGroupId"] = state?.nodeGroupId;
            resourceInputs["nodeGroupName"] = state?.nodeGroupName;
            resourceInputs["payType"] = state?.payType;
            resourceInputs["pricingCycle"] = state?.pricingCycle;
            resourceInputs["promotionOptionNo"] = state?.promotionOptionNo;
            resourceInputs["regionId"] = state?.regionId;
            resourceInputs["residentNodeNumber"] = state?.residentNodeNumber;
            resourceInputs["specType"] = state?.specType;
            resourceInputs["status"] = state?.status;
            resourceInputs["storagePerformanceLevel"] = state?.storagePerformanceLevel;
            resourceInputs["storageSize"] = state?.storageSize;
        } else {
            const args = argsOrState as NodeGroupArgs | undefined;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["cu"] = args?.cu;
            resourceInputs["description"] = args?.description;
            resourceInputs["diskNumber"] = args?.diskNumber;
            resourceInputs["duration"] = args?.duration;
            resourceInputs["fastMode"] = args?.fastMode;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["localStorageInstanceType"] = args?.localStorageInstanceType;
            resourceInputs["nodeGroupName"] = args?.nodeGroupName;
            resourceInputs["payType"] = args?.payType;
            resourceInputs["pricingCycle"] = args?.pricingCycle;
            resourceInputs["promotionOptionNo"] = args?.promotionOptionNo;
            resourceInputs["residentNodeNumber"] = args?.residentNodeNumber;
            resourceInputs["specType"] = args?.specType;
            resourceInputs["storagePerformanceLevel"] = args?.storagePerformanceLevel;
            resourceInputs["storageSize"] = args?.storageSize;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["nodeGroupId"] = undefined /*out*/;
            resourceInputs["regionId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NodeGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodeGroup resources.
 */
export interface NodeGroupState {
    /**
     * Whether auto-renewal is enabled.
     *
     * > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The creation time of the node group.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
     */
    cu?: pulumi.Input<number>;
    /**
     * Description of node group.
     */
    description?: pulumi.Input<string>;
    /**
     * Number of disks.
     */
    diskNumber?: pulumi.Input<number>;
    /**
     * Duration of node group.
     *
     * > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     */
    duration?: pulumi.Input<number>;
    /**
     * Whether to restart in fast restart mode. The default is false.
     * - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
     * - false: Restarts the compute node in rolling restart mode.
     *
     * > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     */
    fastMode?: pulumi.Input<boolean>;
    /**
     * The ID of the instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
     */
    localStorageInstanceType?: pulumi.Input<string>;
    /**
     * The ID of the node group.
     */
    nodeGroupId?: pulumi.Input<string>;
    /**
     * The name of the node group.
     */
    nodeGroupName?: pulumi.Input<string>;
    /**
     * Payment type:
     * - PrePaid: Subscription (prepaid).
     * - PostPaid: Pay-as-you-go (postpaid).
     */
    payType?: pulumi.Input<string>;
    /**
     * Unit of purchase duration:
     * - Month
     * - Year
     *
     * This is only applicable when payType is set to PrePaid.
     *
     * > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     */
    pricingCycle?: pulumi.Input<string>;
    promotionOptionNo?: pulumi.Input<string>;
    /**
     * The region ID of the node group.
     */
    regionId?: pulumi.Input<string>;
    /**
     * Number of nodes.
     */
    residentNodeNumber?: pulumi.Input<number>;
    /**
     * Node group spec types include the following:
     * - standard: Standard edition.
     * - localSSD: Local SSD.
     * - bigData: Large-scale storage.
     * - ramEnhanced: Memory-enhanced type.
     * - networkEnhanced: Network-enhanced type.
     */
    specType?: pulumi.Input<string>;
    /**
     * Node group status, including the following values:_FAILED: Creation failed._CONFIG: Modifying configuration._TIMEZONE: Modifying timezone._SCALING_OUT: Elastic scaling out._SCALING_IN: Elastic scaling in._OUT: Scaling out._IN: Scaling in._UP: Scaling up (upgrading configuration)._DOWN: Scaling down (downgrading configuration)._PUBLIC_NETWORK: Enabling public network._PUBLIC_NETWORK: Disabling public network._AZ: Switching availability zones.
     */
    status?: pulumi.Input<string>;
    /**
     * Performance levels of the cloud disk. Includes the following values:
     * - pl0: Maximum random read/write IOPS of a single disk is 10,000.
     * - pl1: Maximum random read/write IOPS of a single disk is 50,000.
     * - pl2: Maximum random read/write IOPS of a single disk is 100,000.
     * - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
     */
    storagePerformanceLevel?: pulumi.Input<string>;
    /**
     * Storage size, measured in GiB.
     */
    storageSize?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NodeGroup resource.
 */
export interface NodeGroupArgs {
    /**
     * Whether auto-renewal is enabled.
     *
     * > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
     */
    cu?: pulumi.Input<number>;
    /**
     * Description of node group.
     */
    description?: pulumi.Input<string>;
    /**
     * Number of disks.
     */
    diskNumber?: pulumi.Input<number>;
    /**
     * Duration of node group.
     *
     * > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     */
    duration?: pulumi.Input<number>;
    /**
     * Whether to restart in fast restart mode. The default is false.
     * - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
     * - false: Restarts the compute node in rolling restart mode.
     *
     * > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     */
    fastMode?: pulumi.Input<boolean>;
    /**
     * The ID of the instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
     */
    localStorageInstanceType?: pulumi.Input<string>;
    /**
     * The name of the node group.
     */
    nodeGroupName?: pulumi.Input<string>;
    /**
     * Payment type:
     * - PrePaid: Subscription (prepaid).
     * - PostPaid: Pay-as-you-go (postpaid).
     */
    payType?: pulumi.Input<string>;
    /**
     * Unit of purchase duration:
     * - Month
     * - Year
     *
     * This is only applicable when payType is set to PrePaid.
     *
     * > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     */
    pricingCycle?: pulumi.Input<string>;
    promotionOptionNo?: pulumi.Input<string>;
    /**
     * Number of nodes.
     */
    residentNodeNumber?: pulumi.Input<number>;
    /**
     * Node group spec types include the following:
     * - standard: Standard edition.
     * - localSSD: Local SSD.
     * - bigData: Large-scale storage.
     * - ramEnhanced: Memory-enhanced type.
     * - networkEnhanced: Network-enhanced type.
     */
    specType?: pulumi.Input<string>;
    /**
     * Performance levels of the cloud disk. Includes the following values:
     * - pl0: Maximum random read/write IOPS of a single disk is 10,000.
     * - pl1: Maximum random read/write IOPS of a single disk is 50,000.
     * - pl2: Maximum random read/write IOPS of a single disk is 100,000.
     * - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
     */
    storagePerformanceLevel?: pulumi.Input<string>;
    /**
     * Storage size, measured in GiB.
     */
    storageSize?: pulumi.Input<number>;
}
