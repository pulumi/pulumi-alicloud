// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Monitor Service Metric Rule Black List resource.
 *
 * For information about Cloud Monitor Service Metric Rule Black List and how to use it, see [What is Metric Rule Black List](https://www.alibabacloud.com/help/en/cloudmonitor/latest/describemetricruleblacklist).
 *
 * > **NOTE:** Available since v1.194.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const defaultZones = alicloud.getZones({
 *     availableResourceCreation: "Instance",
 * });
 * const defaultInstanceTypes = defaultZones.then(defaultZones => alicloud.ecs.getInstanceTypes({
 *     availabilityZone: defaultZones.zones?.[0]?.id,
 *     cpuCoreCount: 1,
 *     memorySize: 2,
 * }));
 * const defaultImages = alicloud.ecs.getImages({
 *     nameRegex: "^ubuntu_[0-9]+_[0-9]+_x64*",
 *     owners: "system",
 * });
 * const defaultNetwork = new alicloud.vpc.Network("defaultNetwork", {
 *     vpcName: name,
 *     cidrBlock: "10.4.0.0/16",
 * });
 * const defaultSwitch = new alicloud.vpc.Switch("defaultSwitch", {
 *     vswitchName: name,
 *     cidrBlock: "10.4.0.0/24",
 *     vpcId: defaultNetwork.id,
 *     zoneId: defaultZones.then(defaultZones => defaultZones.zones?.[0]?.id),
 * });
 * const defaultSecurityGroup = new alicloud.ecs.SecurityGroup("defaultSecurityGroup", {vpcId: defaultNetwork.id});
 * const defaultInstance = new alicloud.ecs.Instance("defaultInstance", {
 *     availabilityZone: defaultZones.then(defaultZones => defaultZones.zones?.[0]?.id),
 *     instanceName: name,
 *     imageId: defaultImages.then(defaultImages => defaultImages.images?.[0]?.id),
 *     instanceType: defaultInstanceTypes.then(defaultInstanceTypes => defaultInstanceTypes.instanceTypes?.[0]?.id),
 *     securityGroups: [defaultSecurityGroup.id],
 *     vswitchId: defaultSwitch.id,
 * });
 * const defaultMetricRuleBlackList = new alicloud.cms.MetricRuleBlackList("defaultMetricRuleBlackList", {
 *     instances: [pulumi.interpolate`{"instancceId":"${defaultInstance.id}"}`],
 *     metrics: [{
 *         metricName: "disk_utilization",
 *     }],
 *     category: "ecs",
 *     enableEndTime: "1799443209000",
 *     namespace: "acs_ecs_dashboard",
 *     enableStartTime: "1689243209000",
 *     metricRuleBlackListName: name,
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Monitor Service Metric Rule Black List can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cms/metricRuleBlackList:MetricRuleBlackList example <id>
 * ```
 */
export class MetricRuleBlackList extends pulumi.CustomResource {
    /**
     * Get an existing MetricRuleBlackList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricRuleBlackListState, opts?: pulumi.CustomResourceOptions): MetricRuleBlackList {
        return new MetricRuleBlackList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cms/metricRuleBlackList:MetricRuleBlackList';

    /**
     * Returns true if the given object is an instance of MetricRuleBlackList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricRuleBlackList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricRuleBlackList.__pulumiType;
    }

    /**
     * Cloud service classification. For example, Redis includes kvstore_standard, kvstore_sharding, and kvstore_splitrw.
     */
    public readonly category!: pulumi.Output<string>;
    /**
     * The timestamp for creating an alert blacklist policy.Unit: milliseconds.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The effective time range of the alert blacklist policy.
     */
    public readonly effectiveTime!: pulumi.Output<string | undefined>;
    /**
     * The start timestamp of the alert blacklist policy.Unit: milliseconds.
     */
    public readonly enableEndTime!: pulumi.Output<string | undefined>;
    /**
     * The end timestamp of the alert blacklist policy.Unit: milliseconds.
     */
    public readonly enableStartTime!: pulumi.Output<string | undefined>;
    /**
     * The list of instances of cloud services specified in the alert blacklist policy.
     */
    public readonly instances!: pulumi.Output<string[]>;
    /**
     * The status of the alert blacklist policy. Value:-true: enabled.-false: disabled.
     */
    public readonly isEnable!: pulumi.Output<boolean>;
    /**
     * The ID of the blacklist policy.
     */
    public /*out*/ readonly metricRuleBlackListId!: pulumi.Output<string>;
    /**
     * The name of the alert blacklist policy.
     */
    public readonly metricRuleBlackListName!: pulumi.Output<string>;
    /**
     * Monitoring metrics in the instance. See `metrics` below.
     */
    public readonly metrics!: pulumi.Output<outputs.cms.MetricRuleBlackListMetric[] | undefined>;
    /**
     * The data namespace of the cloud service.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * The effective range of the alert blacklist policy. Value:-USER: The alert blacklist policy only takes effect in the current Alibaba cloud account.-GROUP: The alert blacklist policy takes effect in the specified application GROUP.
     */
    public readonly scopeType!: pulumi.Output<string>;
    /**
     * Application Group ID list. The format is JSON Array.> This parameter is displayed only when 'ScopeType' is 'GROUP.
     */
    public readonly scopeValues!: pulumi.Output<string[] | undefined>;
    /**
     * Modify the timestamp of the alert blacklist policy.Unit: milliseconds.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a MetricRuleBlackList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricRuleBlackListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricRuleBlackListArgs | MetricRuleBlackListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricRuleBlackListState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveTime"] = state ? state.effectiveTime : undefined;
            resourceInputs["enableEndTime"] = state ? state.enableEndTime : undefined;
            resourceInputs["enableStartTime"] = state ? state.enableStartTime : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["isEnable"] = state ? state.isEnable : undefined;
            resourceInputs["metricRuleBlackListId"] = state ? state.metricRuleBlackListId : undefined;
            resourceInputs["metricRuleBlackListName"] = state ? state.metricRuleBlackListName : undefined;
            resourceInputs["metrics"] = state ? state.metrics : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["scopeType"] = state ? state.scopeType : undefined;
            resourceInputs["scopeValues"] = state ? state.scopeValues : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as MetricRuleBlackListArgs | undefined;
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.instances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instances'");
            }
            if ((!args || args.metricRuleBlackListName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricRuleBlackListName'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["effectiveTime"] = args ? args.effectiveTime : undefined;
            resourceInputs["enableEndTime"] = args ? args.enableEndTime : undefined;
            resourceInputs["enableStartTime"] = args ? args.enableStartTime : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["isEnable"] = args ? args.isEnable : undefined;
            resourceInputs["metricRuleBlackListName"] = args ? args.metricRuleBlackListName : undefined;
            resourceInputs["metrics"] = args ? args.metrics : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["scopeType"] = args ? args.scopeType : undefined;
            resourceInputs["scopeValues"] = args ? args.scopeValues : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["metricRuleBlackListId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetricRuleBlackList.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetricRuleBlackList resources.
 */
export interface MetricRuleBlackListState {
    /**
     * Cloud service classification. For example, Redis includes kvstore_standard, kvstore_sharding, and kvstore_splitrw.
     */
    category?: pulumi.Input<string>;
    /**
     * The timestamp for creating an alert blacklist policy.Unit: milliseconds.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The effective time range of the alert blacklist policy.
     */
    effectiveTime?: pulumi.Input<string>;
    /**
     * The start timestamp of the alert blacklist policy.Unit: milliseconds.
     */
    enableEndTime?: pulumi.Input<string>;
    /**
     * The end timestamp of the alert blacklist policy.Unit: milliseconds.
     */
    enableStartTime?: pulumi.Input<string>;
    /**
     * The list of instances of cloud services specified in the alert blacklist policy.
     */
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of the alert blacklist policy. Value:-true: enabled.-false: disabled.
     */
    isEnable?: pulumi.Input<boolean>;
    /**
     * The ID of the blacklist policy.
     */
    metricRuleBlackListId?: pulumi.Input<string>;
    /**
     * The name of the alert blacklist policy.
     */
    metricRuleBlackListName?: pulumi.Input<string>;
    /**
     * Monitoring metrics in the instance. See `metrics` below.
     */
    metrics?: pulumi.Input<pulumi.Input<inputs.cms.MetricRuleBlackListMetric>[]>;
    /**
     * The data namespace of the cloud service.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The effective range of the alert blacklist policy. Value:-USER: The alert blacklist policy only takes effect in the current Alibaba cloud account.-GROUP: The alert blacklist policy takes effect in the specified application GROUP.
     */
    scopeType?: pulumi.Input<string>;
    /**
     * Application Group ID list. The format is JSON Array.> This parameter is displayed only when 'ScopeType' is 'GROUP.
     */
    scopeValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Modify the timestamp of the alert blacklist policy.Unit: milliseconds.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetricRuleBlackList resource.
 */
export interface MetricRuleBlackListArgs {
    /**
     * Cloud service classification. For example, Redis includes kvstore_standard, kvstore_sharding, and kvstore_splitrw.
     */
    category: pulumi.Input<string>;
    /**
     * The effective time range of the alert blacklist policy.
     */
    effectiveTime?: pulumi.Input<string>;
    /**
     * The start timestamp of the alert blacklist policy.Unit: milliseconds.
     */
    enableEndTime?: pulumi.Input<string>;
    /**
     * The end timestamp of the alert blacklist policy.Unit: milliseconds.
     */
    enableStartTime?: pulumi.Input<string>;
    /**
     * The list of instances of cloud services specified in the alert blacklist policy.
     */
    instances: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of the alert blacklist policy. Value:-true: enabled.-false: disabled.
     */
    isEnable?: pulumi.Input<boolean>;
    /**
     * The name of the alert blacklist policy.
     */
    metricRuleBlackListName: pulumi.Input<string>;
    /**
     * Monitoring metrics in the instance. See `metrics` below.
     */
    metrics?: pulumi.Input<pulumi.Input<inputs.cms.MetricRuleBlackListMetric>[]>;
    /**
     * The data namespace of the cloud service.
     */
    namespace: pulumi.Input<string>;
    /**
     * The effective range of the alert blacklist policy. Value:-USER: The alert blacklist policy only takes effect in the current Alibaba cloud account.-GROUP: The alert blacklist policy takes effect in the specified application GROUP.
     */
    scopeType?: pulumi.Input<string>;
    /**
     * Application Group ID list. The format is JSON Array.> This parameter is displayed only when 'ScopeType' is 'GROUP.
     */
    scopeValues?: pulumi.Input<pulumi.Input<string>[]>;
}
