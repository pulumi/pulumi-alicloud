// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the Cms Hybrid Monitor Datas of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available in v1.177.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const default = alicloud.cms.getHybridMonitorDatas({
 *     namespace: "example_value",
 *     promSql: "AliyunEcs_cpu_total",
 *     start: "1657505665",
 *     end: "1657520065",
 * });
 * export const cmsMetricRuleTemplateId1 = _default.then(_default => _default.datas?.[0]);
 * ```
 */
export function getHybridMonitorDatas(args: GetHybridMonitorDatasArgs, opts?: pulumi.InvokeOptions): Promise<GetHybridMonitorDatasResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:cms/getHybridMonitorDatas:getHybridMonitorDatas", {
        "end": args.end,
        "namespace": args.namespace,
        "outputFile": args.outputFile,
        "period": args.period,
        "promSql": args.promSql,
        "start": args.start,
    }, opts);
}

/**
 * A collection of arguments for invoking getHybridMonitorDatas.
 */
export interface GetHybridMonitorDatasArgs {
    /**
     * The timestamp that specifies the end of the time range to query.
     */
    end: string;
    /**
     * The name of the namespace.
     */
    namespace: string;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: string;
    /**
     * The interval at which monitoring data is collected. Unit: seconds.
     */
    period?: string;
    /**
     * The name of the metric. Note PromQL statements are supported.
     */
    promSql: string;
    /**
     * The timestamp that specifies the beginning of the time range to query.
     */
    start: string;
}

/**
 * A collection of values returned by getHybridMonitorDatas.
 */
export interface GetHybridMonitorDatasResult {
    readonly datas: outputs.cms.GetHybridMonitorDatasData[];
    readonly end: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly namespace: string;
    readonly outputFile?: string;
    readonly period?: string;
    readonly promSql: string;
    readonly start: string;
}
/**
 * This data source provides the Cms Hybrid Monitor Datas of the current Alibaba Cloud user.
 *
 * > **NOTE:** Available in v1.177.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const default = alicloud.cms.getHybridMonitorDatas({
 *     namespace: "example_value",
 *     promSql: "AliyunEcs_cpu_total",
 *     start: "1657505665",
 *     end: "1657520065",
 * });
 * export const cmsMetricRuleTemplateId1 = _default.then(_default => _default.datas?.[0]);
 * ```
 */
export function getHybridMonitorDatasOutput(args: GetHybridMonitorDatasOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHybridMonitorDatasResult> {
    return pulumi.output(args).apply((a: any) => getHybridMonitorDatas(a, opts))
}

/**
 * A collection of arguments for invoking getHybridMonitorDatas.
 */
export interface GetHybridMonitorDatasOutputArgs {
    /**
     * The timestamp that specifies the end of the time range to query.
     */
    end: pulumi.Input<string>;
    /**
     * The name of the namespace.
     */
    namespace: pulumi.Input<string>;
    /**
     * File name where to save data source results (after running `pulumi preview`).
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The interval at which monitoring data is collected. Unit: seconds.
     */
    period?: pulumi.Input<string>;
    /**
     * The name of the metric. Note PromQL statements are supported.
     */
    promSql: pulumi.Input<string>;
    /**
     * The timestamp that specifies the beginning of the time range to query.
     */
    start: pulumi.Input<string>;
}
