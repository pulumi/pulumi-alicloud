// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Monitor Service Group Metric Rule resource.
 *
 * For information about Cloud Monitor Service Group Metric Rule and how to use it, see [What is Group Metric Rule](https://www.alibabacloud.com/help/en/cloudmonitor/latest/putgroupmetricrule).
 *
 * > **NOTE:** Available since v1.104.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = new alicloud.cms.AlarmContactGroup("default", {
 *     alarmContactGroupName: name,
 *     describe: name,
 * });
 * const defaultMonitorGroup = new alicloud.cms.MonitorGroup("default", {
 *     monitorGroupName: name,
 *     contactGroups: [_default.id],
 * });
 * const _this = new alicloud.cms.GroupMetricRule("this", {
 *     groupId: defaultMonitorGroup.id,
 *     groupMetricRuleName: name,
 *     category: "ecs",
 *     metricName: "cpu_total",
 *     namespace: "acs_ecs_dashboard",
 *     ruleId: name,
 *     period: 60,
 *     interval: "3600",
 *     silenceTime: 85800,
 *     noEffectiveInterval: "00:00-05:30",
 *     webhook: "http://www.aliyun.com",
 *     escalations: {
 *         warn: {
 *             comparisonOperator: "GreaterThanOrEqualToThreshold",
 *             statistics: "Average",
 *             threshold: "90",
 *             times: 3,
 *         },
 *         info: {
 *             comparisonOperator: "LessThanLastWeek",
 *             statistics: "Average",
 *             threshold: "90",
 *             times: 5,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Monitor Service Group Metric Rule can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:cms/groupMetricRule:GroupMetricRule example <rule_id>
 * ```
 */
export class GroupMetricRule extends pulumi.CustomResource {
    /**
     * Get an existing GroupMetricRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupMetricRuleState, opts?: pulumi.CustomResourceOptions): GroupMetricRule {
        return new GroupMetricRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cms/groupMetricRule:GroupMetricRule';

    /**
     * Returns true if the given object is an instance of GroupMetricRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupMetricRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupMetricRule.__pulumiType;
    }

    /**
     * The abbreviation of the service name.
     */
    declare public readonly category: pulumi.Output<string | undefined>;
    /**
     * Alarm contact group.
     */
    declare public readonly contactGroups: pulumi.Output<string>;
    /**
     * The dimensions that specify the resources to be associated with the alert rule.
     */
    declare public readonly dimensions: pulumi.Output<string>;
    /**
     * The time period during which the alert rule is effective.
     */
    declare public readonly effectiveInterval: pulumi.Output<string | undefined>;
    /**
     * The subject of the alert notification email.
     */
    declare public readonly emailSubject: pulumi.Output<string>;
    /**
     * Alarm level. See `escalations` below.
     */
    declare public readonly escalations: pulumi.Output<outputs.cms.GroupMetricRuleEscalations>;
    /**
     * The ID of the application group.
     */
    declare public readonly groupId: pulumi.Output<string>;
    /**
     * The name of the alert rule.
     */
    declare public readonly groupMetricRuleName: pulumi.Output<string>;
    /**
     * The interval at which Cloud Monitor checks whether the alert rule is triggered. Unit: seconds.
     */
    declare public readonly interval: pulumi.Output<string | undefined>;
    /**
     * The name of the metric.
     */
    declare public readonly metricName: pulumi.Output<string>;
    /**
     * The namespace of the service.
     */
    declare public readonly namespace: pulumi.Output<string>;
    /**
     * The time period during which the alert rule is ineffective.
     */
    declare public readonly noEffectiveInterval: pulumi.Output<string | undefined>;
    /**
     * The aggregation period of the monitoring data. Unit: seconds. The value is an integral multiple of 60. Default value: `300`.
     */
    declare public readonly period: pulumi.Output<number>;
    /**
     * The ID of the alert rule.
     */
    declare public readonly ruleId: pulumi.Output<string>;
    /**
     * The mute period during which new alerts are not reported even if the alert trigger conditions are met. Unit: seconds. Default value: `86400`, which is equivalent to one day.
     */
    declare public readonly silenceTime: pulumi.Output<number>;
    /**
     * The status of Group Metric Rule.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The information about the resource for which alerts are triggered. See `targets` below.
     */
    declare public readonly targets: pulumi.Output<outputs.cms.GroupMetricRuleTarget[]>;
    /**
     * The callback URL.
     */
    declare public readonly webhook: pulumi.Output<string | undefined>;

    /**
     * Create a GroupMetricRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupMetricRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupMetricRuleArgs | GroupMetricRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupMetricRuleState | undefined;
            resourceInputs["category"] = state?.category;
            resourceInputs["contactGroups"] = state?.contactGroups;
            resourceInputs["dimensions"] = state?.dimensions;
            resourceInputs["effectiveInterval"] = state?.effectiveInterval;
            resourceInputs["emailSubject"] = state?.emailSubject;
            resourceInputs["escalations"] = state?.escalations;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["groupMetricRuleName"] = state?.groupMetricRuleName;
            resourceInputs["interval"] = state?.interval;
            resourceInputs["metricName"] = state?.metricName;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["noEffectiveInterval"] = state?.noEffectiveInterval;
            resourceInputs["period"] = state?.period;
            resourceInputs["ruleId"] = state?.ruleId;
            resourceInputs["silenceTime"] = state?.silenceTime;
            resourceInputs["status"] = state?.status;
            resourceInputs["targets"] = state?.targets;
            resourceInputs["webhook"] = state?.webhook;
        } else {
            const args = argsOrState as GroupMetricRuleArgs | undefined;
            if (args?.escalations === undefined && !opts.urn) {
                throw new Error("Missing required property 'escalations'");
            }
            if (args?.groupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if (args?.groupMetricRuleName === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupMetricRuleName'");
            }
            if (args?.metricName === undefined && !opts.urn) {
                throw new Error("Missing required property 'metricName'");
            }
            if (args?.namespace === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if (args?.ruleId === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleId'");
            }
            resourceInputs["category"] = args?.category;
            resourceInputs["contactGroups"] = args?.contactGroups;
            resourceInputs["dimensions"] = args?.dimensions;
            resourceInputs["effectiveInterval"] = args?.effectiveInterval;
            resourceInputs["emailSubject"] = args?.emailSubject;
            resourceInputs["escalations"] = args?.escalations;
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["groupMetricRuleName"] = args?.groupMetricRuleName;
            resourceInputs["interval"] = args?.interval;
            resourceInputs["metricName"] = args?.metricName;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["noEffectiveInterval"] = args?.noEffectiveInterval;
            resourceInputs["period"] = args?.period;
            resourceInputs["ruleId"] = args?.ruleId;
            resourceInputs["silenceTime"] = args?.silenceTime;
            resourceInputs["targets"] = args?.targets;
            resourceInputs["webhook"] = args?.webhook;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupMetricRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupMetricRule resources.
 */
export interface GroupMetricRuleState {
    /**
     * The abbreviation of the service name.
     */
    category?: pulumi.Input<string>;
    /**
     * Alarm contact group.
     */
    contactGroups?: pulumi.Input<string>;
    /**
     * The dimensions that specify the resources to be associated with the alert rule.
     */
    dimensions?: pulumi.Input<string>;
    /**
     * The time period during which the alert rule is effective.
     */
    effectiveInterval?: pulumi.Input<string>;
    /**
     * The subject of the alert notification email.
     */
    emailSubject?: pulumi.Input<string>;
    /**
     * Alarm level. See `escalations` below.
     */
    escalations?: pulumi.Input<inputs.cms.GroupMetricRuleEscalations>;
    /**
     * The ID of the application group.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The name of the alert rule.
     */
    groupMetricRuleName?: pulumi.Input<string>;
    /**
     * The interval at which Cloud Monitor checks whether the alert rule is triggered. Unit: seconds.
     */
    interval?: pulumi.Input<string>;
    /**
     * The name of the metric.
     */
    metricName?: pulumi.Input<string>;
    /**
     * The namespace of the service.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The time period during which the alert rule is ineffective.
     */
    noEffectiveInterval?: pulumi.Input<string>;
    /**
     * The aggregation period of the monitoring data. Unit: seconds. The value is an integral multiple of 60. Default value: `300`.
     */
    period?: pulumi.Input<number>;
    /**
     * The ID of the alert rule.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * The mute period during which new alerts are not reported even if the alert trigger conditions are met. Unit: seconds. Default value: `86400`, which is equivalent to one day.
     */
    silenceTime?: pulumi.Input<number>;
    /**
     * The status of Group Metric Rule.
     */
    status?: pulumi.Input<string>;
    /**
     * The information about the resource for which alerts are triggered. See `targets` below.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.cms.GroupMetricRuleTarget>[]>;
    /**
     * The callback URL.
     */
    webhook?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroupMetricRule resource.
 */
export interface GroupMetricRuleArgs {
    /**
     * The abbreviation of the service name.
     */
    category?: pulumi.Input<string>;
    /**
     * Alarm contact group.
     */
    contactGroups?: pulumi.Input<string>;
    /**
     * The dimensions that specify the resources to be associated with the alert rule.
     */
    dimensions?: pulumi.Input<string>;
    /**
     * The time period during which the alert rule is effective.
     */
    effectiveInterval?: pulumi.Input<string>;
    /**
     * The subject of the alert notification email.
     */
    emailSubject?: pulumi.Input<string>;
    /**
     * Alarm level. See `escalations` below.
     */
    escalations: pulumi.Input<inputs.cms.GroupMetricRuleEscalations>;
    /**
     * The ID of the application group.
     */
    groupId: pulumi.Input<string>;
    /**
     * The name of the alert rule.
     */
    groupMetricRuleName: pulumi.Input<string>;
    /**
     * The interval at which Cloud Monitor checks whether the alert rule is triggered. Unit: seconds.
     */
    interval?: pulumi.Input<string>;
    /**
     * The name of the metric.
     */
    metricName: pulumi.Input<string>;
    /**
     * The namespace of the service.
     */
    namespace: pulumi.Input<string>;
    /**
     * The time period during which the alert rule is ineffective.
     */
    noEffectiveInterval?: pulumi.Input<string>;
    /**
     * The aggregation period of the monitoring data. Unit: seconds. The value is an integral multiple of 60. Default value: `300`.
     */
    period?: pulumi.Input<number>;
    /**
     * The ID of the alert rule.
     */
    ruleId: pulumi.Input<string>;
    /**
     * The mute period during which new alerts are not reported even if the alert trigger conditions are met. Unit: seconds. Default value: `86400`, which is equivalent to one day.
     */
    silenceTime?: pulumi.Input<number>;
    /**
     * The information about the resource for which alerts are triggered. See `targets` below.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.cms.GroupMetricRuleTarget>[]>;
    /**
     * The callback URL.
     */
    webhook?: pulumi.Input<string>;
}
