// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Monitor Service Event Rule resource.
 *
 * For information about Cloud Monitor Service Event Rule and how to use it, see [What is Event Rule](https://www.alibabacloud.com/help/en/cloudmonitor/latest/puteventrule).
 *
 * > **NOTE:** Available since v1.182.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const _default = new alicloud.cms.MonitorGroup("default", {monitorGroupName: name});
 * const example = new alicloud.cms.EventRule("example", {
 *     ruleName: name,
 *     groupId: _default.id,
 *     description: name,
 *     status: "ENABLED",
 *     eventPattern: {
 *         product: "ecs",
 *         eventTypeLists: ["StatusNotification"],
 *         levelLists: ["CRITICAL"],
 *         nameLists: ["example_value"],
 *         sqlFilter: "example_value",
 *     },
 *     silenceTime: 100,
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Monitor Service Event Rule can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:cms/eventRule:EventRule example <rule_name>
 * ```
 */
export class EventRule extends pulumi.CustomResource {
    /**
     * Get an existing EventRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventRuleState, opts?: pulumi.CustomResourceOptions): EventRule {
        return new EventRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:cms/eventRule:EventRule';

    /**
     * Returns true if the given object is an instance of EventRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventRule.__pulumiType;
    }

    /**
     * The description of the event-triggered alert rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Event mode, used to describe the trigger conditions for this event. See `eventPattern` below.
     */
    public readonly eventPattern!: pulumi.Output<outputs.cms.EventRuleEventPattern>;
    /**
     * The ID of the application group to which the event-triggered alert rule belongs.
     */
    public readonly groupId!: pulumi.Output<string | undefined>;
    /**
     * The name of the event-triggered alert rule.
     */
    public readonly ruleName!: pulumi.Output<string>;
    /**
     * The silence time.
     */
    public readonly silenceTime!: pulumi.Output<number | undefined>;
    /**
     * The status of the resource. Valid values: `ENABLED`, `DISABLED`.
     */
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a EventRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventRuleArgs | EventRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventRuleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventPattern"] = state ? state.eventPattern : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["silenceTime"] = state ? state.silenceTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as EventRuleArgs | undefined;
            if ((!args || args.eventPattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventPattern'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventPattern"] = args ? args.eventPattern : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["silenceTime"] = args ? args.silenceTime : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventRule resources.
 */
export interface EventRuleState {
    /**
     * The description of the event-triggered alert rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Event mode, used to describe the trigger conditions for this event. See `eventPattern` below.
     */
    eventPattern?: pulumi.Input<inputs.cms.EventRuleEventPattern>;
    /**
     * The ID of the application group to which the event-triggered alert rule belongs.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The name of the event-triggered alert rule.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * The silence time.
     */
    silenceTime?: pulumi.Input<number>;
    /**
     * The status of the resource. Valid values: `ENABLED`, `DISABLED`.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EventRule resource.
 */
export interface EventRuleArgs {
    /**
     * The description of the event-triggered alert rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Event mode, used to describe the trigger conditions for this event. See `eventPattern` below.
     */
    eventPattern: pulumi.Input<inputs.cms.EventRuleEventPattern>;
    /**
     * The ID of the application group to which the event-triggered alert rule belongs.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The name of the event-triggered alert rule.
     */
    ruleName: pulumi.Input<string>;
    /**
     * The silence time.
     */
    silenceTime?: pulumi.Input<number>;
    /**
     * The status of the resource. Valid values: `ENABLED`, `DISABLED`.
     */
    status?: pulumi.Input<string>;
}
