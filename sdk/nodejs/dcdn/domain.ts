// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a DCDN Domain resource.
 *
 * Full station accelerated domain name.
 *
 * For information about DCDN Domain and how to use it, see [What is Domain](https://www.alibabacloud.com/help/en/doc-detail/130628.htm).
 *
 * > **NOTE:** Available since v1.94.0.
 *
 * > **NOTE:** Field `forceSet`, `securityToken` has been removed from provider version 1.227.1.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 * import * as random from "@pulumi/random";
 *
 * const config = new pulumi.Config();
 * const domainName = config.get("domainName") || "tf-example.com";
 * const _default = new random.index.Integer("default", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const example = new alicloud.dcdn.Domain("example", {
 *     domainName: `${domainName}-${_default.result}`,
 *     scope: "overseas",
 *     sources: [{
 *         content: "1.1.1.1",
 *         port: 80,
 *         priority: "20",
 *         type: "ipaddr",
 *         weight: "10",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * DCDN Domain can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:dcdn/domain:Domain example <id>
 * ```
 */
export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainState, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:dcdn/domain:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    /**
     * The certificate ID. This parameter is required and valid only when `CertType` is set to `cas`. If you specify this parameter, an existing certificate is used.
     */
    public readonly certId!: pulumi.Output<string>;
    /**
     * The name of the new certificate. You can specify only one certificate name. This parameter is optional and valid only when `CertType` is set to `upload`.
     */
    public readonly certName!: pulumi.Output<string>;
    /**
     * The region of the SSL certificate. This parameter takes effect only when `CertType` is set to `cas`. Default value: **cn-hangzhou**. Valid values: **cn-hangzhou** and **ap-southeast-1**.
     */
    public readonly certRegion!: pulumi.Output<string>;
    /**
     * The certificate type.
     */
    public readonly certType!: pulumi.Output<string>;
    /**
     * The URL that is used for health checks.
     */
    public readonly checkUrl!: pulumi.Output<string | undefined>;
    /**
     * The CNAME domain name corresponding to the accelerated domain name.
     */
    public /*out*/ readonly cname!: pulumi.Output<string>;
    /**
     * The time when the accelerated domain name was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The accelerated domain name. You can specify multiple domain names and separate them with commas (,). You can specify up to 500 domain names in each request. The query results of multiple domain names are aggregated. If you do not specify this parameter, data of all accelerated domain names under your account is queried.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * Specifies whether the certificate is issued in canary releases. If you set this parameter to `staging`, the certificate is issued in canary releases. If you do not specify this parameter or set this parameter to other values, the certificate is officially issued.
     */
    public readonly env!: pulumi.Output<string | undefined>;
    /**
     * Computing service type. Valid values:
     */
    public readonly functionType!: pulumi.Output<string | undefined>;
    /**
     * The ID of the resource group. If you do not specify a value for this parameter, the system automatically assigns the ID of the default resource group.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The Acceleration scen. Supported:
     */
    public readonly scene!: pulumi.Output<string | undefined>;
    /**
     * The region where the acceleration service is deployed. Valid values:
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * Source  See `sources` below.
     */
    public readonly sources!: pulumi.Output<outputs.dcdn.DomainSource[] | undefined>;
    /**
     * The private key. Specify the private key only if you want to enable the SSL certificate.
     */
    public readonly sslPri!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable the SSL certificate. Valid values:
     */
    public readonly sslProtocol!: pulumi.Output<string | undefined>;
    /**
     * The content of the SSL certificate. Specify the content of the SSL certificate only if you want to enable the SSL certificate.
     */
    public readonly sslPub!: pulumi.Output<string>;
    /**
     * The status of the domain name. Valid values:
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The tag of the resource
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The top-level domain.
     */
    public readonly topLevelDomain!: pulumi.Output<string | undefined>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs | DomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainState | undefined;
            resourceInputs["certId"] = state ? state.certId : undefined;
            resourceInputs["certName"] = state ? state.certName : undefined;
            resourceInputs["certRegion"] = state ? state.certRegion : undefined;
            resourceInputs["certType"] = state ? state.certType : undefined;
            resourceInputs["checkUrl"] = state ? state.checkUrl : undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["env"] = state ? state.env : undefined;
            resourceInputs["functionType"] = state ? state.functionType : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["scene"] = state ? state.scene : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["sslPri"] = state ? state.sslPri : undefined;
            resourceInputs["sslProtocol"] = state ? state.sslProtocol : undefined;
            resourceInputs["sslPub"] = state ? state.sslPub : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["topLevelDomain"] = state ? state.topLevelDomain : undefined;
        } else {
            const args = argsOrState as DomainArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["certId"] = args ? args.certId : undefined;
            resourceInputs["certName"] = args ? args.certName : undefined;
            resourceInputs["certRegion"] = args ? args.certRegion : undefined;
            resourceInputs["certType"] = args ? args.certType : undefined;
            resourceInputs["checkUrl"] = args ? args.checkUrl : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["env"] = args ? args.env : undefined;
            resourceInputs["functionType"] = args ? args.functionType : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["scene"] = args ? args.scene : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["sslPri"] = args?.sslPri ? pulumi.secret(args.sslPri) : undefined;
            resourceInputs["sslProtocol"] = args ? args.sslProtocol : undefined;
            resourceInputs["sslPub"] = args ? args.sslPub : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["topLevelDomain"] = args ? args.topLevelDomain : undefined;
            resourceInputs["cname"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sslPri"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Domain resources.
 */
export interface DomainState {
    /**
     * The certificate ID. This parameter is required and valid only when `CertType` is set to `cas`. If you specify this parameter, an existing certificate is used.
     */
    certId?: pulumi.Input<string>;
    /**
     * The name of the new certificate. You can specify only one certificate name. This parameter is optional and valid only when `CertType` is set to `upload`.
     */
    certName?: pulumi.Input<string>;
    /**
     * The region of the SSL certificate. This parameter takes effect only when `CertType` is set to `cas`. Default value: **cn-hangzhou**. Valid values: **cn-hangzhou** and **ap-southeast-1**.
     */
    certRegion?: pulumi.Input<string>;
    /**
     * The certificate type.
     */
    certType?: pulumi.Input<string>;
    /**
     * The URL that is used for health checks.
     */
    checkUrl?: pulumi.Input<string>;
    /**
     * The CNAME domain name corresponding to the accelerated domain name.
     */
    cname?: pulumi.Input<string>;
    /**
     * The time when the accelerated domain name was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The accelerated domain name. You can specify multiple domain names and separate them with commas (,). You can specify up to 500 domain names in each request. The query results of multiple domain names are aggregated. If you do not specify this parameter, data of all accelerated domain names under your account is queried.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Specifies whether the certificate is issued in canary releases. If you set this parameter to `staging`, the certificate is issued in canary releases. If you do not specify this parameter or set this parameter to other values, the certificate is officially issued.
     */
    env?: pulumi.Input<string>;
    /**
     * Computing service type. Valid values:
     */
    functionType?: pulumi.Input<string>;
    /**
     * The ID of the resource group. If you do not specify a value for this parameter, the system automatically assigns the ID of the default resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The Acceleration scen. Supported:
     */
    scene?: pulumi.Input<string>;
    /**
     * The region where the acceleration service is deployed. Valid values:
     */
    scope?: pulumi.Input<string>;
    /**
     * Source  See `sources` below.
     */
    sources?: pulumi.Input<pulumi.Input<inputs.dcdn.DomainSource>[]>;
    /**
     * The private key. Specify the private key only if you want to enable the SSL certificate.
     */
    sslPri?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the SSL certificate. Valid values:
     */
    sslProtocol?: pulumi.Input<string>;
    /**
     * The content of the SSL certificate. Specify the content of the SSL certificate only if you want to enable the SSL certificate.
     */
    sslPub?: pulumi.Input<string>;
    /**
     * The status of the domain name. Valid values:
     */
    status?: pulumi.Input<string>;
    /**
     * The tag of the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The top-level domain.
     */
    topLevelDomain?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    /**
     * The certificate ID. This parameter is required and valid only when `CertType` is set to `cas`. If you specify this parameter, an existing certificate is used.
     */
    certId?: pulumi.Input<string>;
    /**
     * The name of the new certificate. You can specify only one certificate name. This parameter is optional and valid only when `CertType` is set to `upload`.
     */
    certName?: pulumi.Input<string>;
    /**
     * The region of the SSL certificate. This parameter takes effect only when `CertType` is set to `cas`. Default value: **cn-hangzhou**. Valid values: **cn-hangzhou** and **ap-southeast-1**.
     */
    certRegion?: pulumi.Input<string>;
    /**
     * The certificate type.
     */
    certType?: pulumi.Input<string>;
    /**
     * The URL that is used for health checks.
     */
    checkUrl?: pulumi.Input<string>;
    /**
     * The accelerated domain name. You can specify multiple domain names and separate them with commas (,). You can specify up to 500 domain names in each request. The query results of multiple domain names are aggregated. If you do not specify this parameter, data of all accelerated domain names under your account is queried.
     */
    domainName: pulumi.Input<string>;
    /**
     * Specifies whether the certificate is issued in canary releases. If you set this parameter to `staging`, the certificate is issued in canary releases. If you do not specify this parameter or set this parameter to other values, the certificate is officially issued.
     */
    env?: pulumi.Input<string>;
    /**
     * Computing service type. Valid values:
     */
    functionType?: pulumi.Input<string>;
    /**
     * The ID of the resource group. If you do not specify a value for this parameter, the system automatically assigns the ID of the default resource group.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The Acceleration scen. Supported:
     */
    scene?: pulumi.Input<string>;
    /**
     * The region where the acceleration service is deployed. Valid values:
     */
    scope?: pulumi.Input<string>;
    /**
     * Source  See `sources` below.
     */
    sources?: pulumi.Input<pulumi.Input<inputs.dcdn.DomainSource>[]>;
    /**
     * The private key. Specify the private key only if you want to enable the SSL certificate.
     */
    sslPri?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the SSL certificate. Valid values:
     */
    sslProtocol?: pulumi.Input<string>;
    /**
     * The content of the SSL certificate. Specify the content of the SSL certificate only if you want to enable the SSL certificate.
     */
    sslPub?: pulumi.Input<string>;
    /**
     * The status of the domain name. Valid values:
     */
    status?: pulumi.Input<string>;
    /**
     * The tag of the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The top-level domain.
     */
    topLevelDomain?: pulumi.Input<string>;
}
