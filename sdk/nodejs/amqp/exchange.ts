// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a RabbitMQ (AMQP) Exchange resource.
 *
 * For information about RabbitMQ (AMQP) Exchange and how to use it, see [What is Exchange](https://www.alibabacloud.com/help/en/message-queue-for-rabbitmq/latest/createexchange).
 *
 * > **NOTE:** Available since v1.128.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const virtualHostName = config.get("virtualHostName") || "/";
 * const createInstance = new alicloud.amqp.Instance("CreateInstance", {
 *     renewalDuration: 1,
 *     maxTps: "3000",
 *     periodCycle: "Month",
 *     maxConnections: 2000,
 *     supportEip: true,
 *     autoRenew: false,
 *     renewalStatus: "AutoRenewal",
 *     period: 12,
 *     instanceName: name,
 *     supportTracing: false,
 *     paymentType: "Subscription",
 *     renewalDurationUnit: "Month",
 *     instanceType: "enterprise",
 *     queueCapacity: "200",
 *     maxEipTps: "128",
 *     storageSize: "0",
 * });
 * const _default = new alicloud.amqp.Exchange("default", {
 *     virtualHostName: virtualHostName,
 *     instanceId: createInstance.id,
 *     internal: true,
 *     autoDeleteState: false,
 *     exchangeName: name,
 *     exchangeType: "X_CONSISTENT_HASH",
 *     alternateExchange: "bakExchange",
 *     xDelayedType: "DIRECT",
 * });
 * ```
 *
 * ## Import
 *
 * RabbitMQ (AMQP) Exchange can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:amqp/exchange:Exchange example <instance_id>:<virtual_host_name>:<exchange_name>
 * ```
 */
export class Exchange extends pulumi.CustomResource {
    /**
     * Get an existing Exchange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExchangeState, opts?: pulumi.CustomResourceOptions): Exchange {
        return new Exchange(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:amqp/exchange:Exchange';

    /**
     * Returns true if the given object is an instance of Exchange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Exchange {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Exchange.__pulumiType;
    }

    /**
     * The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
     */
    declare public readonly alternateExchange: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to automatically delete the exchange. Valid values:
     */
    declare public readonly autoDeleteState: pulumi.Output<boolean>;
    /**
     * CreateTime
     */
    declare public /*out*/ readonly createTime: pulumi.Output<number>;
    /**
     * The name of the exchange that you want to create. The exchange name must meet the following conventions:
     *
     * - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs (@).
     * - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
     */
    declare public readonly exchangeName: pulumi.Output<string>;
    /**
     * The Exchange type. Value:
     * - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
     * - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
     * - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
     * - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
     * - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
     * - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
     */
    declare public readonly exchangeType: pulumi.Output<string>;
    /**
     * The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * Specifies whether the exchange is an internal exchange. Valid values:
     */
    declare public readonly internal: pulumi.Output<boolean>;
    /**
     * The name of the vhost to which the exchange that you want to create belongs.
     */
    declare public readonly virtualHostName: pulumi.Output<string>;
    /**
     * RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
     */
    declare public readonly xDelayedType: pulumi.Output<string | undefined>;

    /**
     * Create a Exchange resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExchangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExchangeArgs | ExchangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExchangeState | undefined;
            resourceInputs["alternateExchange"] = state?.alternateExchange;
            resourceInputs["autoDeleteState"] = state?.autoDeleteState;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["exchangeName"] = state?.exchangeName;
            resourceInputs["exchangeType"] = state?.exchangeType;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["internal"] = state?.internal;
            resourceInputs["virtualHostName"] = state?.virtualHostName;
            resourceInputs["xDelayedType"] = state?.xDelayedType;
        } else {
            const args = argsOrState as ExchangeArgs | undefined;
            if (args?.autoDeleteState === undefined && !opts.urn) {
                throw new Error("Missing required property 'autoDeleteState'");
            }
            if (args?.exchangeName === undefined && !opts.urn) {
                throw new Error("Missing required property 'exchangeName'");
            }
            if (args?.exchangeType === undefined && !opts.urn) {
                throw new Error("Missing required property 'exchangeType'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.internal === undefined && !opts.urn) {
                throw new Error("Missing required property 'internal'");
            }
            if (args?.virtualHostName === undefined && !opts.urn) {
                throw new Error("Missing required property 'virtualHostName'");
            }
            resourceInputs["alternateExchange"] = args?.alternateExchange;
            resourceInputs["autoDeleteState"] = args?.autoDeleteState;
            resourceInputs["exchangeName"] = args?.exchangeName;
            resourceInputs["exchangeType"] = args?.exchangeType;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["internal"] = args?.internal;
            resourceInputs["virtualHostName"] = args?.virtualHostName;
            resourceInputs["xDelayedType"] = args?.xDelayedType;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Exchange.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Exchange resources.
 */
export interface ExchangeState {
    /**
     * The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
     */
    alternateExchange?: pulumi.Input<string>;
    /**
     * Specifies whether to automatically delete the exchange. Valid values:
     */
    autoDeleteState?: pulumi.Input<boolean>;
    /**
     * CreateTime
     */
    createTime?: pulumi.Input<number>;
    /**
     * The name of the exchange that you want to create. The exchange name must meet the following conventions:
     *
     * - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs (@).
     * - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
     */
    exchangeName?: pulumi.Input<string>;
    /**
     * The Exchange type. Value:
     * - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
     * - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
     * - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
     * - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
     * - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
     * - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
     */
    exchangeType?: pulumi.Input<string>;
    /**
     * The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies whether the exchange is an internal exchange. Valid values:
     */
    internal?: pulumi.Input<boolean>;
    /**
     * The name of the vhost to which the exchange that you want to create belongs.
     */
    virtualHostName?: pulumi.Input<string>;
    /**
     * RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
     */
    xDelayedType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Exchange resource.
 */
export interface ExchangeArgs {
    /**
     * The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
     */
    alternateExchange?: pulumi.Input<string>;
    /**
     * Specifies whether to automatically delete the exchange. Valid values:
     */
    autoDeleteState: pulumi.Input<boolean>;
    /**
     * The name of the exchange that you want to create. The exchange name must meet the following conventions:
     *
     * - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs (@).
     * - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
     */
    exchangeName: pulumi.Input<string>;
    /**
     * The Exchange type. Value:
     * - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
     * - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
     * - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
     * - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
     * - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
     * - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
     */
    exchangeType: pulumi.Input<string>;
    /**
     * The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies whether the exchange is an internal exchange. Valid values:
     */
    internal: pulumi.Input<boolean>;
    /**
     * The name of the vhost to which the exchange that you want to create belongs.
     */
    virtualHostName: pulumi.Input<string>;
    /**
     * RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
     */
    xDelayedType?: pulumi.Input<string>;
}
