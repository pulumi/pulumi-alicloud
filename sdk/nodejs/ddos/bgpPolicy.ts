// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Ddos Bgp Policy resource.
 *
 * Ddos protection policy.
 *
 * For information about Ddos Bgp Policy and how to use it, see [What is Policy](https://www.alibabacloud.com/help/en/anti-ddos/anti-ddos-origin/developer-reference/api-ddosbgp-2018-07-20-createpolicy).
 *
 * > **NOTE:** Available since v1.226.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf_exampleacc_bgp32594";
 * const policyName = config.get("policyName") || "example_l4_policy";
 * const _default = new alicloud.ddos.BgpPolicy("default", {
 *     content: {
 *         enableDefense: false,
 *         layer4RuleLists: [{
 *             method: "hex",
 *             match: "1",
 *             action: "1",
 *             limited: 0,
 *             conditionLists: [{
 *                 arg: "3C",
 *                 position: 1,
 *                 depth: 2,
 *             }],
 *             name: "11",
 *             priority: 10,
 *         }],
 *     },
 *     type: "l4",
 *     policyName: "tf_exampleacc_bgp32594",
 * });
 * ```
 *
 * ## Import
 *
 * Ddos Bgp Policy can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ddos/bgpPolicy:BgpPolicy example <id>
 * ```
 */
export class BgpPolicy extends pulumi.CustomResource {
    /**
     * Get an existing BgpPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BgpPolicyState, opts?: pulumi.CustomResourceOptions): BgpPolicy {
        return new BgpPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ddos/bgpPolicy:BgpPolicy';

    /**
     * Returns true if the given object is an instance of BgpPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BgpPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BgpPolicy.__pulumiType;
    }

    /**
     * Configuration Content See `content` below.
     */
    declare public readonly content: pulumi.Output<outputs.ddos.BgpPolicyContent>;
    /**
     * The name of the resource
     */
    declare public readonly policyName: pulumi.Output<string>;
    /**
     * Type
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a BgpPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BgpPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BgpPolicyArgs | BgpPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BgpPolicyState | undefined;
            resourceInputs["content"] = state?.content;
            resourceInputs["policyName"] = state?.policyName;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as BgpPolicyArgs | undefined;
            if (args?.policyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["content"] = args?.content;
            resourceInputs["policyName"] = args?.policyName;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BgpPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BgpPolicy resources.
 */
export interface BgpPolicyState {
    /**
     * Configuration Content See `content` below.
     */
    content?: pulumi.Input<inputs.ddos.BgpPolicyContent>;
    /**
     * The name of the resource
     */
    policyName?: pulumi.Input<string>;
    /**
     * Type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BgpPolicy resource.
 */
export interface BgpPolicyArgs {
    /**
     * Configuration Content See `content` below.
     */
    content?: pulumi.Input<inputs.ddos.BgpPolicyContent>;
    /**
     * The name of the resource
     */
    policyName: pulumi.Input<string>;
    /**
     * Type
     */
    type: pulumi.Input<string>;
}
