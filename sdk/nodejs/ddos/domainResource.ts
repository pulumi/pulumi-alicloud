// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Ddos Coo Domain Resource resource.
 *
 * For information about Ddos Coo Domain Resource and how to use it, see [What is Domain Resource](https://www.alibabacloud.com/help/en/anti-ddos/anti-ddos-pro-and-premium/developer-reference/api-ddoscoo-2020-01-01-createdomainresource).
 *
 * > **NOTE:** Available since v1.123.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "tf-example";
 * const domain = config.get("domain") || "tf-example.alibaba.com";
 * const _default = new alicloud.ddos.DdosCooInstance("default", {
 *     name: name,
 *     bandwidth: "30",
 *     baseBandwidth: "30",
 *     serviceBandwidth: "100",
 *     portCount: "50",
 *     domainCount: "50",
 *     period: 1,
 *     productType: "ddoscoo",
 * });
 * const defaultDomainResource = new alicloud.ddos.DomainResource("default", {
 *     domain: domain,
 *     rsType: 0,
 *     instanceIds: [_default.id],
 *     realServers: ["177.167.32.11"],
 *     httpsExt: `    {
 *     "Http2": 1,
 *     "Http2https": 0,
 *     "Https2http": 0
 *   }
 * `,
 *     proxyTypes: [{
 *         proxyPorts: [443],
 *         proxyType: "https",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Ddos Coo Domain Resource can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:ddos/domainResource:DomainResource example <id>
 * ```
 */
export class DomainResource extends pulumi.CustomResource {
    /**
     * Get an existing DomainResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainResourceState, opts?: pulumi.CustomResourceOptions): DomainResource {
        return new DomainResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ddos/domainResource:DomainResource';

    /**
     * Returns true if the given object is an instance of DomainResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainResource.__pulumiType;
    }

    /**
     * The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
     *
     * > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     */
    public readonly cert!: pulumi.Output<string | undefined>;
    /**
     * The name of the certificate.
     *
     * > **NOTE:**   You can specify the name of the certificate that you want to associate. From version 1.249.0, `certIdentifier` is in the "CertificateID-RegionId" format. For example, if the ID of the certificateId is `123`, and the region ID is `cn-hangzhou`, the value of the `certIdentifier` is `123-cn-hangzhou`.
     */
    public readonly certIdentifier!: pulumi.Output<string | undefined>;
    /**
     * The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
     *
     * > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     */
    public readonly certName!: pulumi.Output<string>;
    /**
     * The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
     */
    public readonly certRegion!: pulumi.Output<string | undefined>;
    /**
     * The CNAME address to query.
     */
    public /*out*/ readonly cname!: pulumi.Output<string>;
    /**
     * The domain name for which you want to configure the Static Page Caching policy.
     *
     * > **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
     *
     * - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
     *
     * If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
     *
     * - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
     *
     * If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
     *
     * - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
     *
     * After you turn on the switch, HTTP/2 is used.
     */
    public readonly httpsExt!: pulumi.Output<string>;
    /**
     * InstanceIds
     */
    public readonly instanceIds!: pulumi.Output<string[]>;
    /**
     * The globally unique ID of the certificate. The value is in the "Certificate ID-cn-hangzhou" format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
     *
     * > **NOTE:**   You can specify only one of this parameter and the CertId parameter.
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable the OCSP feature. Valid values:
     */
    public readonly ocspEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Protocol type and port number information. See `proxyTypes` below.
     */
    public readonly proxyTypes!: pulumi.Output<outputs.ddos.DomainResourceProxyType[]>;
    /**
     * Server address information of the source station.
     */
    public readonly realServers!: pulumi.Output<string[]>;
    /**
     * The address type of the origin server. Valid values:
     */
    public readonly rsType!: pulumi.Output<number>;

    /**
     * Create a DomainResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainResourceArgs | DomainResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainResourceState | undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["certIdentifier"] = state ? state.certIdentifier : undefined;
            resourceInputs["certName"] = state ? state.certName : undefined;
            resourceInputs["certRegion"] = state ? state.certRegion : undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["httpsExt"] = state ? state.httpsExt : undefined;
            resourceInputs["instanceIds"] = state ? state.instanceIds : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["ocspEnabled"] = state ? state.ocspEnabled : undefined;
            resourceInputs["proxyTypes"] = state ? state.proxyTypes : undefined;
            resourceInputs["realServers"] = state ? state.realServers : undefined;
            resourceInputs["rsType"] = state ? state.rsType : undefined;
        } else {
            const args = argsOrState as DomainResourceArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.instanceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceIds'");
            }
            if ((!args || args.proxyTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proxyTypes'");
            }
            if ((!args || args.realServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realServers'");
            }
            if ((!args || args.rsType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rsType'");
            }
            resourceInputs["cert"] = args?.cert ? pulumi.secret(args.cert) : undefined;
            resourceInputs["certIdentifier"] = args ? args.certIdentifier : undefined;
            resourceInputs["certName"] = args ? args.certName : undefined;
            resourceInputs["certRegion"] = args?.certRegion ? pulumi.secret(args.certRegion) : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["httpsExt"] = args ? args.httpsExt : undefined;
            resourceInputs["instanceIds"] = args ? args.instanceIds : undefined;
            resourceInputs["key"] = args?.key ? pulumi.secret(args.key) : undefined;
            resourceInputs["ocspEnabled"] = args ? args.ocspEnabled : undefined;
            resourceInputs["proxyTypes"] = args ? args.proxyTypes : undefined;
            resourceInputs["realServers"] = args ? args.realServers : undefined;
            resourceInputs["rsType"] = args ? args.rsType : undefined;
            resourceInputs["cname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["cert", "certRegion", "key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DomainResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainResource resources.
 */
export interface DomainResourceState {
    /**
     * The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
     *
     * > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     */
    cert?: pulumi.Input<string>;
    /**
     * The name of the certificate.
     *
     * > **NOTE:**   You can specify the name of the certificate that you want to associate. From version 1.249.0, `certIdentifier` is in the "CertificateID-RegionId" format. For example, if the ID of the certificateId is `123`, and the region ID is `cn-hangzhou`, the value of the `certIdentifier` is `123-cn-hangzhou`.
     */
    certIdentifier?: pulumi.Input<string>;
    /**
     * The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
     *
     * > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     */
    certName?: pulumi.Input<string>;
    /**
     * The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
     */
    certRegion?: pulumi.Input<string>;
    /**
     * The CNAME address to query.
     */
    cname?: pulumi.Input<string>;
    /**
     * The domain name for which you want to configure the Static Page Caching policy.
     *
     * > **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
     */
    domain?: pulumi.Input<string>;
    /**
     * The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
     *
     * - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
     *
     * If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
     *
     * - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
     *
     * If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
     *
     * - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
     *
     * After you turn on the switch, HTTP/2 is used.
     */
    httpsExt?: pulumi.Input<string>;
    /**
     * InstanceIds
     */
    instanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The globally unique ID of the certificate. The value is in the "Certificate ID-cn-hangzhou" format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
     *
     * > **NOTE:**   You can specify only one of this parameter and the CertId parameter.
     */
    key?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the OCSP feature. Valid values:
     */
    ocspEnabled?: pulumi.Input<boolean>;
    /**
     * Protocol type and port number information. See `proxyTypes` below.
     */
    proxyTypes?: pulumi.Input<pulumi.Input<inputs.ddos.DomainResourceProxyType>[]>;
    /**
     * Server address information of the source station.
     */
    realServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The address type of the origin server. Valid values:
     */
    rsType?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DomainResource resource.
 */
export interface DomainResourceArgs {
    /**
     * The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
     *
     * > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     */
    cert?: pulumi.Input<string>;
    /**
     * The name of the certificate.
     *
     * > **NOTE:**   You can specify the name of the certificate that you want to associate. From version 1.249.0, `certIdentifier` is in the "CertificateID-RegionId" format. For example, if the ID of the certificateId is `123`, and the region ID is `cn-hangzhou`, the value of the `certIdentifier` is `123-cn-hangzhou`.
     */
    certIdentifier?: pulumi.Input<string>;
    /**
     * The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
     *
     * > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     */
    certName?: pulumi.Input<string>;
    /**
     * The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
     */
    certRegion?: pulumi.Input<string>;
    /**
     * The domain name for which you want to configure the Static Page Caching policy.
     *
     * > **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
     */
    domain: pulumi.Input<string>;
    /**
     * The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
     *
     * - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
     *
     * If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
     *
     * - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
     *
     * If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
     *
     * - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
     *
     * After you turn on the switch, HTTP/2 is used.
     */
    httpsExt?: pulumi.Input<string>;
    /**
     * InstanceIds
     */
    instanceIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The globally unique ID of the certificate. The value is in the "Certificate ID-cn-hangzhou" format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
     *
     * > **NOTE:**   You can specify only one of this parameter and the CertId parameter.
     */
    key?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the OCSP feature. Valid values:
     */
    ocspEnabled?: pulumi.Input<boolean>;
    /**
     * Protocol type and port number information. See `proxyTypes` below.
     */
    proxyTypes: pulumi.Input<pulumi.Input<inputs.ddos.DomainResourceProxyType>[]>;
    /**
     * Server address information of the source station.
     */
    realServers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The address type of the origin server. Valid values:
     */
    rsType: pulumi.Input<number>;
}
