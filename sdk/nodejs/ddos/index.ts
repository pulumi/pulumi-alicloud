// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BasicDefenseThresholdArgs, BasicDefenseThresholdState } from "./basicDefenseThreshold";
export type BasicDefenseThreshold = import("./basicDefenseThreshold").BasicDefenseThreshold;
export const BasicDefenseThreshold: typeof import("./basicDefenseThreshold").BasicDefenseThreshold = null as any;
utilities.lazyLoad(exports, ["BasicDefenseThreshold"], () => require("./basicDefenseThreshold"));

export { BasicThresholdArgs, BasicThresholdState } from "./basicThreshold";
export type BasicThreshold = import("./basicThreshold").BasicThreshold;
export const BasicThreshold: typeof import("./basicThreshold").BasicThreshold = null as any;
utilities.lazyLoad(exports, ["BasicThreshold"], () => require("./basicThreshold"));

export { BgpIpArgs, BgpIpState } from "./bgpIp";
export type BgpIp = import("./bgpIp").BgpIp;
export const BgpIp: typeof import("./bgpIp").BgpIp = null as any;
utilities.lazyLoad(exports, ["BgpIp"], () => require("./bgpIp"));

export { BgpPolicyArgs, BgpPolicyState } from "./bgpPolicy";
export type BgpPolicy = import("./bgpPolicy").BgpPolicy;
export const BgpPolicy: typeof import("./bgpPolicy").BgpPolicy = null as any;
utilities.lazyLoad(exports, ["BgpPolicy"], () => require("./bgpPolicy"));

export { DdosBgpInstanceArgs, DdosBgpInstanceState } from "./ddosBgpInstance";
export type DdosBgpInstance = import("./ddosBgpInstance").DdosBgpInstance;
export const DdosBgpInstance: typeof import("./ddosBgpInstance").DdosBgpInstance = null as any;
utilities.lazyLoad(exports, ["DdosBgpInstance"], () => require("./ddosBgpInstance"));

export { DdosCooInstanceArgs, DdosCooInstanceState } from "./ddosCooInstance";
export type DdosCooInstance = import("./ddosCooInstance").DdosCooInstance;
export const DdosCooInstance: typeof import("./ddosCooInstance").DdosCooInstance = null as any;
utilities.lazyLoad(exports, ["DdosCooInstance"], () => require("./ddosCooInstance"));

export { DomainResourceArgs, DomainResourceState } from "./domainResource";
export type DomainResource = import("./domainResource").DomainResource;
export const DomainResource: typeof import("./domainResource").DomainResource = null as any;
utilities.lazyLoad(exports, ["DomainResource"], () => require("./domainResource"));

export { GetDdosBgpInstancesArgs, GetDdosBgpInstancesResult, GetDdosBgpInstancesOutputArgs } from "./getDdosBgpInstances";
export const getDdosBgpInstances: typeof import("./getDdosBgpInstances").getDdosBgpInstances = null as any;
export const getDdosBgpInstancesOutput: typeof import("./getDdosBgpInstances").getDdosBgpInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDdosBgpInstances","getDdosBgpInstancesOutput"], () => require("./getDdosBgpInstances"));

export { GetDdosBgpIpsArgs, GetDdosBgpIpsResult, GetDdosBgpIpsOutputArgs } from "./getDdosBgpIps";
export const getDdosBgpIps: typeof import("./getDdosBgpIps").getDdosBgpIps = null as any;
export const getDdosBgpIpsOutput: typeof import("./getDdosBgpIps").getDdosBgpIpsOutput = null as any;
utilities.lazyLoad(exports, ["getDdosBgpIps","getDdosBgpIpsOutput"], () => require("./getDdosBgpIps"));

export { GetDdosCooDomainResourcesArgs, GetDdosCooDomainResourcesResult, GetDdosCooDomainResourcesOutputArgs } from "./getDdosCooDomainResources";
export const getDdosCooDomainResources: typeof import("./getDdosCooDomainResources").getDdosCooDomainResources = null as any;
export const getDdosCooDomainResourcesOutput: typeof import("./getDdosCooDomainResources").getDdosCooDomainResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getDdosCooDomainResources","getDdosCooDomainResourcesOutput"], () => require("./getDdosCooDomainResources"));

export { GetDdosCooInstancesArgs, GetDdosCooInstancesResult, GetDdosCooInstancesOutputArgs } from "./getDdosCooInstances";
export const getDdosCooInstances: typeof import("./getDdosCooInstances").getDdosCooInstances = null as any;
export const getDdosCooInstancesOutput: typeof import("./getDdosCooInstances").getDdosCooInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDdosCooInstances","getDdosCooInstancesOutput"], () => require("./getDdosCooInstances"));

export { GetDdosCooPortsArgs, GetDdosCooPortsResult, GetDdosCooPortsOutputArgs } from "./getDdosCooPorts";
export const getDdosCooPorts: typeof import("./getDdosCooPorts").getDdosCooPorts = null as any;
export const getDdosCooPortsOutput: typeof import("./getDdosCooPorts").getDdosCooPortsOutput = null as any;
utilities.lazyLoad(exports, ["getDdosCooPorts","getDdosCooPortsOutput"], () => require("./getDdosCooPorts"));

export { PortArgs, PortState } from "./port";
export type Port = import("./port").Port;
export const Port: typeof import("./port").Port = null as any;
utilities.lazyLoad(exports, ["Port"], () => require("./port"));

export { SchedulerRuleArgs, SchedulerRuleState } from "./schedulerRule";
export type SchedulerRule = import("./schedulerRule").SchedulerRule;
export const SchedulerRule: typeof import("./schedulerRule").SchedulerRule = null as any;
utilities.lazyLoad(exports, ["SchedulerRule"], () => require("./schedulerRule"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:ddos/basicDefenseThreshold:BasicDefenseThreshold":
                return new BasicDefenseThreshold(name, <any>undefined, { urn })
            case "alicloud:ddos/basicThreshold:BasicThreshold":
                return new BasicThreshold(name, <any>undefined, { urn })
            case "alicloud:ddos/bgpIp:BgpIp":
                return new BgpIp(name, <any>undefined, { urn })
            case "alicloud:ddos/bgpPolicy:BgpPolicy":
                return new BgpPolicy(name, <any>undefined, { urn })
            case "alicloud:ddos/ddosBgpInstance:DdosBgpInstance":
                return new DdosBgpInstance(name, <any>undefined, { urn })
            case "alicloud:ddos/ddosCooInstance:DdosCooInstance":
                return new DdosCooInstance(name, <any>undefined, { urn })
            case "alicloud:ddos/domainResource:DomainResource":
                return new DomainResource(name, <any>undefined, { urn })
            case "alicloud:ddos/port:Port":
                return new Port(name, <any>undefined, { urn })
            case "alicloud:ddos/schedulerRule:SchedulerRule":
                return new SchedulerRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "ddos/basicDefenseThreshold", _module)
pulumi.runtime.registerResourceModule("alicloud", "ddos/basicThreshold", _module)
pulumi.runtime.registerResourceModule("alicloud", "ddos/bgpIp", _module)
pulumi.runtime.registerResourceModule("alicloud", "ddos/bgpPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "ddos/ddosBgpInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "ddos/ddosCooInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "ddos/domainResource", _module)
pulumi.runtime.registerResourceModule("alicloud", "ddos/port", _module)
pulumi.runtime.registerResourceModule("alicloud", "ddos/schedulerRule", _module)
