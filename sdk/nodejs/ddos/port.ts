// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Anti-DDoS Pro Port resource.
 *
 * For information about Anti-DDoS Pro Port and how to use it, see [What is Port](https://www.alibabacloud.com/help/en/doc-detail/157482.htm).
 *
 * > **NOTE:** Available in v1.123.0+.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const exampleDdosCooInstance = new alicloud.ddos.DdosCooInstance("exampleDdosCooInstance", {
 *     bandwidth: "30",
 *     baseBandwidth: "30",
 *     serviceBandwidth: "100",
 *     portCount: "50",
 *     domainCount: "50",
 * });
 * const examplePort = new alicloud.ddos.Port("examplePort", {
 *     instanceId: exampleDdosCooInstance.id,
 *     frontendPort: "7001",
 *     frontendProtocol: "tcp",
 *     realServers: [
 *         "1.1.1.1",
 *         "2.2.2.2",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Anti-DDoS Pro Port can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:ddos/port:Port example <instance_id>:<frontend_port>:<frontend_protocol>
 * ```
 */
export class Port extends pulumi.CustomResource {
    /**
     * Get an existing Port resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortState, opts?: pulumi.CustomResourceOptions): Port {
        return new Port(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:ddos/port:Port';

    /**
     * Returns true if the given object is an instance of Port.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Port {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Port.__pulumiType;
    }

    /**
     * The port of the origin server.
     */
    public readonly backendPort!: pulumi.Output<string | undefined>;
    /**
     * The forwarding port.
     */
    public readonly frontendPort!: pulumi.Output<string>;
    /**
     * The forwarding protocol. Valid values `tcp` and `udp`.
     */
    public readonly frontendProtocol!: pulumi.Output<string>;
    /**
     * The ID of Ddoscoo instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * List of source IP addresses.
     */
    public readonly realServers!: pulumi.Output<string[]>;

    /**
     * Create a Port resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortArgs | PortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PortState | undefined;
            resourceInputs["backendPort"] = state ? state.backendPort : undefined;
            resourceInputs["frontendPort"] = state ? state.frontendPort : undefined;
            resourceInputs["frontendProtocol"] = state ? state.frontendProtocol : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["realServers"] = state ? state.realServers : undefined;
        } else {
            const args = argsOrState as PortArgs | undefined;
            if ((!args || args.frontendPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendPort'");
            }
            if ((!args || args.frontendProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendProtocol'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.realServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realServers'");
            }
            resourceInputs["backendPort"] = args ? args.backendPort : undefined;
            resourceInputs["frontendPort"] = args ? args.frontendPort : undefined;
            resourceInputs["frontendProtocol"] = args ? args.frontendProtocol : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["realServers"] = args ? args.realServers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Port.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Port resources.
 */
export interface PortState {
    /**
     * The port of the origin server.
     */
    backendPort?: pulumi.Input<string>;
    /**
     * The forwarding port.
     */
    frontendPort?: pulumi.Input<string>;
    /**
     * The forwarding protocol. Valid values `tcp` and `udp`.
     */
    frontendProtocol?: pulumi.Input<string>;
    /**
     * The ID of Ddoscoo instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * List of source IP addresses.
     */
    realServers?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Port resource.
 */
export interface PortArgs {
    /**
     * The port of the origin server.
     */
    backendPort?: pulumi.Input<string>;
    /**
     * The forwarding port.
     */
    frontendPort: pulumi.Input<string>;
    /**
     * The forwarding protocol. Valid values `tcp` and `udp`.
     */
    frontendProtocol: pulumi.Input<string>;
    /**
     * The ID of Ddoscoo instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * List of source IP addresses.
     */
    realServers: pulumi.Input<pulumi.Input<string>[]>;
}
