// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a GPDB Remote ADB Data Source resource.
 *
 * RemoteADBDataSource is the data external table call method between greenplums, which will be used for data external table access between ADB-PG.
 *
 * For information about GPDB Remote ADB Data Source and how to use it, see [What is Remote ADB Data Source](https://www.alibabacloud.com/help/en/analyticdb/analyticdb-for-postgresql/developer-reference/api-gpdb-2016-05-03-createremoteadbdatasource).
 *
 * > **NOTE:** Available since v1.227.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const default4Mf0nY = new alicloud.vpc.Network("default4Mf0nY", {cidrBlock: "192.168.0.0/16"});
 * const defaultwSAVpf = new alicloud.vpc.Switch("defaultwSAVpf", {
 *     vpcId: default4Mf0nY.id,
 *     zoneId: "cn-beijing-h",
 *     cidrBlock: "192.168.1.0/24",
 * });
 * const defaultEtEzMF = new alicloud.gpdb.Instance("defaultEtEzMF", {
 *     instanceSpec: "2C8G",
 *     description: name,
 *     segNodeNum: 2,
 *     segStorageType: "cloud_essd",
 *     instanceNetworkType: "VPC",
 *     dbInstanceCategory: "Basic",
 *     paymentType: "PayAsYouGo",
 *     sslEnabled: 0,
 *     engineVersion: "6.0",
 *     zoneId: "cn-beijing-h",
 *     vswitchId: defaultwSAVpf.id,
 *     storageSize: 50,
 *     masterCu: 4,
 *     vpcId: default4Mf0nY.id,
 *     dbInstanceMode: "StorageElastic",
 *     engine: "gpdb",
 * });
 * const defaultEY7t9t = new alicloud.gpdb.Instance("defaultEY7t9t", {
 *     instanceSpec: "2C8G",
 *     description: name,
 *     segNodeNum: 2,
 *     segStorageType: "cloud_essd",
 *     instanceNetworkType: "VPC",
 *     dbInstanceCategory: "Basic",
 *     paymentType: "PayAsYouGo",
 *     sslEnabled: 0,
 *     engineVersion: "6.0",
 *     zoneId: "cn-beijing-h",
 *     vswitchId: defaultwSAVpf.id,
 *     storageSize: 50,
 *     masterCu: 4,
 *     vpcId: default4Mf0nY.id,
 *     dbInstanceMode: "StorageElastic",
 *     engine: "gpdb",
 * });
 * const default26qpEo = new alicloud.gpdb.Account("default26qpEo", {
 *     accountDescription: "example_001",
 *     dbInstanceId: defaultEtEzMF.id,
 *     accountName: "example_001",
 *     accountPassword: "example_001",
 * });
 * const defaultwXePof = new alicloud.gpdb.Account("defaultwXePof", {
 *     accountDescription: "example_001",
 *     dbInstanceId: defaultEY7t9t.id,
 *     accountName: "example_001",
 *     accountPassword: "example_001",
 * });
 * const defaultRemoteAdbDataSource = new alicloud.gpdb.RemoteAdbDataSource("default", {
 *     remoteDatabase: "example_001",
 *     managerUserName: "example_001",
 *     userName: "example_001",
 *     remoteDbInstanceId: defaultwXePof.dbInstanceId,
 *     localDatabase: "example_001",
 *     dataSourceName: "myexample",
 *     userPassword: "example_001",
 *     managerUserPassword: "example_001",
 *     localDbInstanceId: defaultEtEzMF.id,
 * });
 * ```
 *
 * ## Import
 *
 * GPDB Remote ADB Data Source can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:gpdb/remoteAdbDataSource:RemoteAdbDataSource example <local_db_instance_id>:<remote_adb_data_source_id>
 * ```
 */
export class RemoteAdbDataSource extends pulumi.CustomResource {
    /**
     * Get an existing RemoteAdbDataSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RemoteAdbDataSourceState, opts?: pulumi.CustomResourceOptions): RemoteAdbDataSource {
        return new RemoteAdbDataSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:gpdb/remoteAdbDataSource:RemoteAdbDataSource';

    /**
     * Returns true if the given object is an instance of RemoteAdbDataSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemoteAdbDataSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemoteAdbDataSource.__pulumiType;
    }

    /**
     * Data Source Name
     */
    declare public readonly dataSourceName: pulumi.Output<string | undefined>;
    /**
     * The database of the local instance which connection data.
     */
    declare public readonly localDatabase: pulumi.Output<string>;
    /**
     * The instanceId of the local instance which connection data.
     */
    declare public readonly localDbInstanceId: pulumi.Output<string>;
    /**
     * The Management user name of the local instance.
     */
    declare public readonly managerUserName: pulumi.Output<string>;
    /**
     * Password of the Manager user of the local instance
     */
    declare public readonly managerUserPassword: pulumi.Output<string>;
    /**
     * The first ID of the resource
     */
    declare public /*out*/ readonly remoteAdbDataSourceId: pulumi.Output<number>;
    /**
     * The database of the remote instance which provide data.
     */
    declare public readonly remoteDatabase: pulumi.Output<string>;
    /**
     * The instanceId of the remote instance which provide data.
     */
    declare public readonly remoteDbInstanceId: pulumi.Output<string>;
    /**
     * The status of the resource
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The user name used to connect to the remote instance
     */
    declare public readonly userName: pulumi.Output<string>;
    /**
     * The user password used to connect to the remote instance
     */
    declare public readonly userPassword: pulumi.Output<string>;

    /**
     * Create a RemoteAdbDataSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RemoteAdbDataSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RemoteAdbDataSourceArgs | RemoteAdbDataSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RemoteAdbDataSourceState | undefined;
            resourceInputs["dataSourceName"] = state?.dataSourceName;
            resourceInputs["localDatabase"] = state?.localDatabase;
            resourceInputs["localDbInstanceId"] = state?.localDbInstanceId;
            resourceInputs["managerUserName"] = state?.managerUserName;
            resourceInputs["managerUserPassword"] = state?.managerUserPassword;
            resourceInputs["remoteAdbDataSourceId"] = state?.remoteAdbDataSourceId;
            resourceInputs["remoteDatabase"] = state?.remoteDatabase;
            resourceInputs["remoteDbInstanceId"] = state?.remoteDbInstanceId;
            resourceInputs["status"] = state?.status;
            resourceInputs["userName"] = state?.userName;
            resourceInputs["userPassword"] = state?.userPassword;
        } else {
            const args = argsOrState as RemoteAdbDataSourceArgs | undefined;
            if (args?.localDatabase === undefined && !opts.urn) {
                throw new Error("Missing required property 'localDatabase'");
            }
            if (args?.localDbInstanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'localDbInstanceId'");
            }
            if (args?.managerUserName === undefined && !opts.urn) {
                throw new Error("Missing required property 'managerUserName'");
            }
            if (args?.managerUserPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'managerUserPassword'");
            }
            if (args?.remoteDatabase === undefined && !opts.urn) {
                throw new Error("Missing required property 'remoteDatabase'");
            }
            if (args?.remoteDbInstanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'remoteDbInstanceId'");
            }
            if (args?.userName === undefined && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            if (args?.userPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'userPassword'");
            }
            resourceInputs["dataSourceName"] = args?.dataSourceName;
            resourceInputs["localDatabase"] = args?.localDatabase;
            resourceInputs["localDbInstanceId"] = args?.localDbInstanceId;
            resourceInputs["managerUserName"] = args?.managerUserName;
            resourceInputs["managerUserPassword"] = args?.managerUserPassword ? pulumi.secret(args.managerUserPassword) : undefined;
            resourceInputs["remoteDatabase"] = args?.remoteDatabase;
            resourceInputs["remoteDbInstanceId"] = args?.remoteDbInstanceId;
            resourceInputs["userName"] = args?.userName;
            resourceInputs["userPassword"] = args?.userPassword ? pulumi.secret(args.userPassword) : undefined;
            resourceInputs["remoteAdbDataSourceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["managerUserPassword", "userPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RemoteAdbDataSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RemoteAdbDataSource resources.
 */
export interface RemoteAdbDataSourceState {
    /**
     * Data Source Name
     */
    dataSourceName?: pulumi.Input<string>;
    /**
     * The database of the local instance which connection data.
     */
    localDatabase?: pulumi.Input<string>;
    /**
     * The instanceId of the local instance which connection data.
     */
    localDbInstanceId?: pulumi.Input<string>;
    /**
     * The Management user name of the local instance.
     */
    managerUserName?: pulumi.Input<string>;
    /**
     * Password of the Manager user of the local instance
     */
    managerUserPassword?: pulumi.Input<string>;
    /**
     * The first ID of the resource
     */
    remoteAdbDataSourceId?: pulumi.Input<number>;
    /**
     * The database of the remote instance which provide data.
     */
    remoteDatabase?: pulumi.Input<string>;
    /**
     * The instanceId of the remote instance which provide data.
     */
    remoteDbInstanceId?: pulumi.Input<string>;
    /**
     * The status of the resource
     */
    status?: pulumi.Input<string>;
    /**
     * The user name used to connect to the remote instance
     */
    userName?: pulumi.Input<string>;
    /**
     * The user password used to connect to the remote instance
     */
    userPassword?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RemoteAdbDataSource resource.
 */
export interface RemoteAdbDataSourceArgs {
    /**
     * Data Source Name
     */
    dataSourceName?: pulumi.Input<string>;
    /**
     * The database of the local instance which connection data.
     */
    localDatabase: pulumi.Input<string>;
    /**
     * The instanceId of the local instance which connection data.
     */
    localDbInstanceId: pulumi.Input<string>;
    /**
     * The Management user name of the local instance.
     */
    managerUserName: pulumi.Input<string>;
    /**
     * Password of the Manager user of the local instance
     */
    managerUserPassword: pulumi.Input<string>;
    /**
     * The database of the remote instance which provide data.
     */
    remoteDatabase: pulumi.Input<string>;
    /**
     * The instanceId of the remote instance which provide data.
     */
    remoteDbInstanceId: pulumi.Input<string>;
    /**
     * The user name used to connect to the remote instance
     */
    userName: pulumi.Input<string>;
    /**
     * The user password used to connect to the remote instance
     */
    userPassword: pulumi.Input<string>;
}
