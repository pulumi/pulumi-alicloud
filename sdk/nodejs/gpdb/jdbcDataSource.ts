// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a GPDB Jdbc Data Source resource.
 *
 * For information about GPDB Jdbc Data Source and how to use it, see [What is Jdbc Data Source](https://www.alibabacloud.com/help/en/analyticdb/analyticdb-for-postgresql/developer-reference/api-gpdb-2016-05-03-createjdbcdatasource).
 *
 * > **NOTE:** Available since v1.230.0.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const config = new pulumi.Config();
 * const name = config.get("name") || "terraform-example";
 * const _default = alicloud.getZones({
 *     availableResourceCreation: "VSwitch",
 * });
 * const defaultGetNetworks = alicloud.vpc.getNetworks({
 *     nameRegex: "^default-NODELETING$",
 * });
 * const defaultGetSwitches = defaultGetNetworks.then(defaultGetNetworks => alicloud.vpc.getSwitches({
 *     vpcId: defaultGetNetworks.ids?.[0],
 *     zoneId: "cn-beijing-h",
 * }));
 * const defaulttuqTmM = new alicloud.gpdb.Instance("defaulttuqTmM", {
 *     instanceSpec: "2C8G",
 *     description: name,
 *     segNodeNum: 2,
 *     segStorageType: "cloud_essd",
 *     instanceNetworkType: "VPC",
 *     paymentType: "PayAsYouGo",
 *     sslEnabled: 0,
 *     engineVersion: "6.0",
 *     zoneId: "cn-beijing-h",
 *     vswitchId: defaultGetSwitches.then(defaultGetSwitches => defaultGetSwitches.ids?.[0]),
 *     storageSize: 50,
 *     masterCu: 4,
 *     vpcId: defaultGetNetworks.then(defaultGetNetworks => defaultGetNetworks.ids?.[0]),
 *     dbInstanceMode: "StorageElastic",
 *     engine: "gpdb",
 *     dbInstanceCategory: "Basic",
 * });
 * const defaultsk1eaS = new alicloud.gpdb.Account("defaultsk1eaS", {
 *     accountDescription: "example_001",
 *     dbInstanceId: defaulttuqTmM.id,
 *     accountName: "example_001",
 *     accountPassword: "example_001",
 * });
 * const defaultRXkfKL = new alicloud.gpdb.ExternalDataService("defaultRXkfKL", {
 *     serviceName: name,
 *     dbInstanceId: defaulttuqTmM.id,
 *     serviceDescription: "myexample",
 *     serviceSpec: "8",
 * });
 * const defaultJdbcDataSource = new alicloud.gpdb.JdbcDataSource("default", {
 *     jdbcConnectionString: "jdbc:mysql://rm-2ze327yr44c61183c.mysql.rds.aliyuncs.com:3306/example_001",
 *     dataSourceDescription: "myexample",
 *     dbInstanceId: defaulttuqTmM.id,
 *     jdbcPassword: "example_001",
 *     dataSourceName: defaultRXkfKL.serviceName,
 *     dataSourceType: "mysql",
 *     jdbcUserName: "example_001",
 * });
 * ```
 *
 * ## Import
 *
 * GPDB Jdbc Data Source can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import alicloud:gpdb/jdbcDataSource:JdbcDataSource example <db_instance_id>:<data_source_id>
 * ```
 */
export class JdbcDataSource extends pulumi.CustomResource {
    /**
     * Get an existing JdbcDataSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JdbcDataSourceState, opts?: pulumi.CustomResourceOptions): JdbcDataSource {
        return new JdbcDataSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:gpdb/jdbcDataSource:JdbcDataSource';

    /**
     * Returns true if the given object is an instance of JdbcDataSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JdbcDataSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JdbcDataSource.__pulumiType;
    }

    /**
     * The creation time of the resource
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Data Source Description
     */
    declare public readonly dataSourceDescription: pulumi.Output<string | undefined>;
    /**
     * The data source ID.
     */
    declare public /*out*/ readonly dataSourceId: pulumi.Output<string>;
    /**
     * Data Source Name
     */
    declare public readonly dataSourceName: pulumi.Output<string | undefined>;
    /**
     * Data Source Type
     */
    declare public readonly dataSourceType: pulumi.Output<string | undefined>;
    /**
     * The instance ID.
     */
    declare public readonly dbInstanceId: pulumi.Output<string>;
    /**
     * The JDBC connection string.
     */
    declare public readonly jdbcConnectionString: pulumi.Output<string | undefined>;
    /**
     * The password of the database account.
     */
    declare public readonly jdbcPassword: pulumi.Output<string | undefined>;
    /**
     * The name of the database account.
     */
    declare public readonly jdbcUserName: pulumi.Output<string>;
    /**
     * Data Source Status
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a JdbcDataSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JdbcDataSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JdbcDataSourceArgs | JdbcDataSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JdbcDataSourceState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["dataSourceDescription"] = state?.dataSourceDescription;
            resourceInputs["dataSourceId"] = state?.dataSourceId;
            resourceInputs["dataSourceName"] = state?.dataSourceName;
            resourceInputs["dataSourceType"] = state?.dataSourceType;
            resourceInputs["dbInstanceId"] = state?.dbInstanceId;
            resourceInputs["jdbcConnectionString"] = state?.jdbcConnectionString;
            resourceInputs["jdbcPassword"] = state?.jdbcPassword;
            resourceInputs["jdbcUserName"] = state?.jdbcUserName;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as JdbcDataSourceArgs | undefined;
            if (args?.dbInstanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceId'");
            }
            if (args?.jdbcUserName === undefined && !opts.urn) {
                throw new Error("Missing required property 'jdbcUserName'");
            }
            resourceInputs["dataSourceDescription"] = args?.dataSourceDescription;
            resourceInputs["dataSourceName"] = args?.dataSourceName;
            resourceInputs["dataSourceType"] = args?.dataSourceType;
            resourceInputs["dbInstanceId"] = args?.dbInstanceId;
            resourceInputs["jdbcConnectionString"] = args?.jdbcConnectionString;
            resourceInputs["jdbcPassword"] = args?.jdbcPassword;
            resourceInputs["jdbcUserName"] = args?.jdbcUserName;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dataSourceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JdbcDataSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering JdbcDataSource resources.
 */
export interface JdbcDataSourceState {
    /**
     * The creation time of the resource
     */
    createTime?: pulumi.Input<string>;
    /**
     * Data Source Description
     */
    dataSourceDescription?: pulumi.Input<string>;
    /**
     * The data source ID.
     */
    dataSourceId?: pulumi.Input<string>;
    /**
     * Data Source Name
     */
    dataSourceName?: pulumi.Input<string>;
    /**
     * Data Source Type
     */
    dataSourceType?: pulumi.Input<string>;
    /**
     * The instance ID.
     */
    dbInstanceId?: pulumi.Input<string>;
    /**
     * The JDBC connection string.
     */
    jdbcConnectionString?: pulumi.Input<string>;
    /**
     * The password of the database account.
     */
    jdbcPassword?: pulumi.Input<string>;
    /**
     * The name of the database account.
     */
    jdbcUserName?: pulumi.Input<string>;
    /**
     * Data Source Status
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JdbcDataSource resource.
 */
export interface JdbcDataSourceArgs {
    /**
     * Data Source Description
     */
    dataSourceDescription?: pulumi.Input<string>;
    /**
     * Data Source Name
     */
    dataSourceName?: pulumi.Input<string>;
    /**
     * Data Source Type
     */
    dataSourceType?: pulumi.Input<string>;
    /**
     * The instance ID.
     */
    dbInstanceId: pulumi.Input<string>;
    /**
     * The JDBC connection string.
     */
    jdbcConnectionString?: pulumi.Input<string>;
    /**
     * The password of the database account.
     */
    jdbcPassword?: pulumi.Input<string>;
    /**
     * The name of the database account.
     */
    jdbcUserName: pulumi.Input<string>;
}
