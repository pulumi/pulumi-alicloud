// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { BackupPolicyArgs, BackupPolicyState } from "./backupPolicy";
export type BackupPolicy = import("./backupPolicy").BackupPolicy;
export const BackupPolicy: typeof import("./backupPolicy").BackupPolicy = null as any;
utilities.lazyLoad(exports, ["BackupPolicy"], () => require("./backupPolicy"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DbInstanceIpArrayArgs, DbInstanceIpArrayState } from "./dbInstanceIpArray";
export type DbInstanceIpArray = import("./dbInstanceIpArray").DbInstanceIpArray;
export const DbInstanceIpArray: typeof import("./dbInstanceIpArray").DbInstanceIpArray = null as any;
utilities.lazyLoad(exports, ["DbInstanceIpArray"], () => require("./dbInstanceIpArray"));

export { DbInstancePlanArgs, DbInstancePlanState } from "./dbInstancePlan";
export type DbInstancePlan = import("./dbInstancePlan").DbInstancePlan;
export const DbInstancePlan: typeof import("./dbInstancePlan").DbInstancePlan = null as any;
utilities.lazyLoad(exports, ["DbInstancePlan"], () => require("./dbInstancePlan"));

export { DbResourceGroupArgs, DbResourceGroupState } from "./dbResourceGroup";
export type DbResourceGroup = import("./dbResourceGroup").DbResourceGroup;
export const DbResourceGroup: typeof import("./dbResourceGroup").DbResourceGroup = null as any;
utilities.lazyLoad(exports, ["DbResourceGroup"], () => require("./dbResourceGroup"));

export { ElasticInstanceArgs, ElasticInstanceState } from "./elasticInstance";
export type ElasticInstance = import("./elasticInstance").ElasticInstance;
export const ElasticInstance: typeof import("./elasticInstance").ElasticInstance = null as any;
utilities.lazyLoad(exports, ["ElasticInstance"], () => require("./elasticInstance"));

export { ExternalDataServiceArgs, ExternalDataServiceState } from "./externalDataService";
export type ExternalDataService = import("./externalDataService").ExternalDataService;
export const ExternalDataService: typeof import("./externalDataService").ExternalDataService = null as any;
utilities.lazyLoad(exports, ["ExternalDataService"], () => require("./externalDataService"));

export { GetAccountsArgs, GetAccountsResult, GetAccountsOutputArgs } from "./getAccounts";
export const getAccounts: typeof import("./getAccounts").getAccounts = null as any;
export const getAccountsOutput: typeof import("./getAccounts").getAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getAccounts","getAccountsOutput"], () => require("./getAccounts"));

export { GetDataBackupsArgs, GetDataBackupsResult, GetDataBackupsOutputArgs } from "./getDataBackups";
export const getDataBackups: typeof import("./getDataBackups").getDataBackups = null as any;
export const getDataBackupsOutput: typeof import("./getDataBackups").getDataBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getDataBackups","getDataBackupsOutput"], () => require("./getDataBackups"));

export { GetDbInstancePlansArgs, GetDbInstancePlansResult, GetDbInstancePlansOutputArgs } from "./getDbInstancePlans";
export const getDbInstancePlans: typeof import("./getDbInstancePlans").getDbInstancePlans = null as any;
export const getDbInstancePlansOutput: typeof import("./getDbInstancePlans").getDbInstancePlansOutput = null as any;
utilities.lazyLoad(exports, ["getDbInstancePlans","getDbInstancePlansOutput"], () => require("./getDbInstancePlans"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetLogBackupsArgs, GetLogBackupsResult, GetLogBackupsOutputArgs } from "./getLogBackups";
export const getLogBackups: typeof import("./getLogBackups").getLogBackups = null as any;
export const getLogBackupsOutput: typeof import("./getLogBackups").getLogBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getLogBackups","getLogBackupsOutput"], () => require("./getLogBackups"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { HadoopDataSourceArgs, HadoopDataSourceState } from "./hadoopDataSource";
export type HadoopDataSource = import("./hadoopDataSource").HadoopDataSource;
export const HadoopDataSource: typeof import("./hadoopDataSource").HadoopDataSource = null as any;
utilities.lazyLoad(exports, ["HadoopDataSource"], () => require("./hadoopDataSource"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { JdbcDataSourceArgs, JdbcDataSourceState } from "./jdbcDataSource";
export type JdbcDataSource = import("./jdbcDataSource").JdbcDataSource;
export const JdbcDataSource: typeof import("./jdbcDataSource").JdbcDataSource = null as any;
utilities.lazyLoad(exports, ["JdbcDataSource"], () => require("./jdbcDataSource"));

export { RemoteAdbDataSourceArgs, RemoteAdbDataSourceState } from "./remoteAdbDataSource";
export type RemoteAdbDataSource = import("./remoteAdbDataSource").RemoteAdbDataSource;
export const RemoteAdbDataSource: typeof import("./remoteAdbDataSource").RemoteAdbDataSource = null as any;
utilities.lazyLoad(exports, ["RemoteAdbDataSource"], () => require("./remoteAdbDataSource"));

export { StreamingDataServiceArgs, StreamingDataServiceState } from "./streamingDataService";
export type StreamingDataService = import("./streamingDataService").StreamingDataService;
export const StreamingDataService: typeof import("./streamingDataService").StreamingDataService = null as any;
utilities.lazyLoad(exports, ["StreamingDataService"], () => require("./streamingDataService"));

export { StreamingDataSourceArgs, StreamingDataSourceState } from "./streamingDataSource";
export type StreamingDataSource = import("./streamingDataSource").StreamingDataSource;
export const StreamingDataSource: typeof import("./streamingDataSource").StreamingDataSource = null as any;
utilities.lazyLoad(exports, ["StreamingDataSource"], () => require("./streamingDataSource"));

export { StreamingJobArgs, StreamingJobState } from "./streamingJob";
export type StreamingJob = import("./streamingJob").StreamingJob;
export const StreamingJob: typeof import("./streamingJob").StreamingJob = null as any;
utilities.lazyLoad(exports, ["StreamingJob"], () => require("./streamingJob"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:gpdb/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "alicloud:gpdb/backupPolicy:BackupPolicy":
                return new BackupPolicy(name, <any>undefined, { urn })
            case "alicloud:gpdb/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "alicloud:gpdb/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "alicloud:gpdb/dbInstanceIpArray:DbInstanceIpArray":
                return new DbInstanceIpArray(name, <any>undefined, { urn })
            case "alicloud:gpdb/dbInstancePlan:DbInstancePlan":
                return new DbInstancePlan(name, <any>undefined, { urn })
            case "alicloud:gpdb/dbResourceGroup:DbResourceGroup":
                return new DbResourceGroup(name, <any>undefined, { urn })
            case "alicloud:gpdb/elasticInstance:ElasticInstance":
                return new ElasticInstance(name, <any>undefined, { urn })
            case "alicloud:gpdb/externalDataService:ExternalDataService":
                return new ExternalDataService(name, <any>undefined, { urn })
            case "alicloud:gpdb/hadoopDataSource:HadoopDataSource":
                return new HadoopDataSource(name, <any>undefined, { urn })
            case "alicloud:gpdb/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "alicloud:gpdb/jdbcDataSource:JdbcDataSource":
                return new JdbcDataSource(name, <any>undefined, { urn })
            case "alicloud:gpdb/remoteAdbDataSource:RemoteAdbDataSource":
                return new RemoteAdbDataSource(name, <any>undefined, { urn })
            case "alicloud:gpdb/streamingDataService:StreamingDataService":
                return new StreamingDataService(name, <any>undefined, { urn })
            case "alicloud:gpdb/streamingDataSource:StreamingDataSource":
                return new StreamingDataSource(name, <any>undefined, { urn })
            case "alicloud:gpdb/streamingJob:StreamingJob":
                return new StreamingJob(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "gpdb/account", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/backupPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/connection", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/database", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/dbInstanceIpArray", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/dbInstancePlan", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/dbResourceGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/elasticInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/externalDataService", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/hadoopDataSource", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/instance", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/jdbcDataSource", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/remoteAdbDataSource", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/streamingDataService", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/streamingDataSource", _module)
pulumi.runtime.registerResourceModule("alicloud", "gpdb/streamingJob", _module)
