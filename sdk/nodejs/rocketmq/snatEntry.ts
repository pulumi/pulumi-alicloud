// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Sag SnatEntry resource. This topic describes how to add a SNAT entry to enable the SNAT function. The SNAT function can hide internal IP addresses and resolve private IP address conflicts. With this function, on-premises sites can access internal IP addresses, but cannot be accessed by internal IP addresses. If you do not add a SNAT entry, on-premises sites can access each other only when all related IP addresses do not conflict.
 *
 * For information about Sag SnatEntry and how to use it, see [What is Sag SnatEntry](https://www.alibabacloud.com/help/doc-detail/124231.htm).
 *
 * > **NOTE:** Available in 1.61.0+
 *
 * > **NOTE:** Only the following regions support. [`cn-shanghai`, `cn-shanghai-finance-1`, `cn-hongkong`, `ap-southeast-1`, `ap-southeast-2`, `ap-southeast-3`, `ap-southeast-5`, `ap-northeast-1`, `eu-central-1`]
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const defaultSnatEntry = new alicloud.rocketmq.SnatEntry("default", {
 *     cidrBlock: "192.168.7.0/24",
 *     sagId: "sag-3rb1t3iagy3w0zgwy9",
 *     snatIp: "192.0.0.2",
 * });
 * ```
 *
 * ## Import
 *
 * The Sag SnatEntry can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:rocketmq/snatEntry:SnatEntry example sag-abc123456:snat-abc123456
 * ```
 */
export class SnatEntry extends pulumi.CustomResource {
    /**
     * Get an existing SnatEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnatEntryState, opts?: pulumi.CustomResourceOptions): SnatEntry {
        return new SnatEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:rocketmq/snatEntry:SnatEntry';

    /**
     * Returns true if the given object is an instance of SnatEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnatEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnatEntry.__pulumiType;
    }

    /**
     * The destination CIDR block.
     */
    public readonly cidrBlock!: pulumi.Output<string>;
    /**
     * The ID of the SAG instance.
     */
    public readonly sagId!: pulumi.Output<string>;
    /**
     * The public IP address.
     */
    public readonly snatIp!: pulumi.Output<string>;

    /**
     * Create a SnatEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnatEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnatEntryArgs | SnatEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnatEntryState | undefined;
            resourceInputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            resourceInputs["sagId"] = state ? state.sagId : undefined;
            resourceInputs["snatIp"] = state ? state.snatIp : undefined;
        } else {
            const args = argsOrState as SnatEntryArgs | undefined;
            if ((!args || args.cidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidrBlock'");
            }
            if ((!args || args.sagId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sagId'");
            }
            if ((!args || args.snatIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snatIp'");
            }
            resourceInputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            resourceInputs["sagId"] = args ? args.sagId : undefined;
            resourceInputs["snatIp"] = args ? args.snatIp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnatEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnatEntry resources.
 */
export interface SnatEntryState {
    /**
     * The destination CIDR block.
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * The ID of the SAG instance.
     */
    sagId?: pulumi.Input<string>;
    /**
     * The public IP address.
     */
    snatIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnatEntry resource.
 */
export interface SnatEntryArgs {
    /**
     * The destination CIDR block.
     */
    cidrBlock: pulumi.Input<string>;
    /**
     * The ID of the SAG instance.
     */
    sagId: pulumi.Input<string>;
    /**
     * The public IP address.
     */
    snatIp: pulumi.Input<string>;
}
