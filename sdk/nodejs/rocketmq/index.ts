// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { AclRuleArgs, AclRuleState } from "./aclRule";
export type AclRule = import("./aclRule").AclRule;
export const AclRule: typeof import("./aclRule").AclRule = null as any;
utilities.lazyLoad(exports, ["AclRule"], () => require("./aclRule"));

export { ClientUserArgs, ClientUserState } from "./clientUser";
export type ClientUser = import("./clientUser").ClientUser;
export const ClientUser: typeof import("./clientUser").ClientUser = null as any;
utilities.lazyLoad(exports, ["ClientUser"], () => require("./clientUser"));

export { ConsumerGroupArgs, ConsumerGroupState } from "./consumerGroup";
export type ConsumerGroup = import("./consumerGroup").ConsumerGroup;
export const ConsumerGroup: typeof import("./consumerGroup").ConsumerGroup = null as any;
utilities.lazyLoad(exports, ["ConsumerGroup"], () => require("./consumerGroup"));

export { DnatEntryArgs, DnatEntryState } from "./dnatEntry";
export type DnatEntry = import("./dnatEntry").DnatEntry;
export const DnatEntry: typeof import("./dnatEntry").DnatEntry = null as any;
utilities.lazyLoad(exports, ["DnatEntry"], () => require("./dnatEntry"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetTopicsArgs, GetTopicsResult, GetTopicsOutputArgs } from "./getTopics";
export const getTopics: typeof import("./getTopics").getTopics = null as any;
export const getTopicsOutput: typeof import("./getTopics").getTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getTopics","getTopicsOutput"], () => require("./getTopics"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { QosArgs, QosState } from "./qos";
export type Qos = import("./qos").Qos;
export const Qos: typeof import("./qos").Qos = null as any;
utilities.lazyLoad(exports, ["Qos"], () => require("./qos"));

export { QosCarArgs, QosCarState } from "./qosCar";
export type QosCar = import("./qosCar").QosCar;
export const QosCar: typeof import("./qosCar").QosCar = null as any;
utilities.lazyLoad(exports, ["QosCar"], () => require("./qosCar"));

export { QosPolicyArgs, QosPolicyState } from "./qosPolicy";
export type QosPolicy = import("./qosPolicy").QosPolicy;
export const QosPolicy: typeof import("./qosPolicy").QosPolicy = null as any;
utilities.lazyLoad(exports, ["QosPolicy"], () => require("./qosPolicy"));

export { RocketMQInstanceArgs, RocketMQInstanceState } from "./rocketMQInstance";
export type RocketMQInstance = import("./rocketMQInstance").RocketMQInstance;
export const RocketMQInstance: typeof import("./rocketMQInstance").RocketMQInstance = null as any;
utilities.lazyLoad(exports, ["RocketMQInstance"], () => require("./rocketMQInstance"));

export { RocketMQTopicArgs, RocketMQTopicState } from "./rocketMQTopic";
export type RocketMQTopic = import("./rocketMQTopic").RocketMQTopic;
export const RocketMQTopic: typeof import("./rocketMQTopic").RocketMQTopic = null as any;
utilities.lazyLoad(exports, ["RocketMQTopic"], () => require("./rocketMQTopic"));

export { SnatEntryArgs, SnatEntryState } from "./snatEntry";
export type SnatEntry = import("./snatEntry").SnatEntry;
export const SnatEntry: typeof import("./snatEntry").SnatEntry = null as any;
utilities.lazyLoad(exports, ["SnatEntry"], () => require("./snatEntry"));

export { TopicArgs, TopicState } from "./topic";
export type Topic = import("./topic").Topic;
export const Topic: typeof import("./topic").Topic = null as any;
utilities.lazyLoad(exports, ["Topic"], () => require("./topic"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:rocketmq/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "alicloud:rocketmq/aclRule:AclRule":
                return new AclRule(name, <any>undefined, { urn })
            case "alicloud:rocketmq/clientUser:ClientUser":
                return new ClientUser(name, <any>undefined, { urn })
            case "alicloud:rocketmq/consumerGroup:ConsumerGroup":
                return new ConsumerGroup(name, <any>undefined, { urn })
            case "alicloud:rocketmq/dnatEntry:DnatEntry":
                return new DnatEntry(name, <any>undefined, { urn })
            case "alicloud:rocketmq/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "alicloud:rocketmq/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "alicloud:rocketmq/qos:Qos":
                return new Qos(name, <any>undefined, { urn })
            case "alicloud:rocketmq/qosCar:QosCar":
                return new QosCar(name, <any>undefined, { urn })
            case "alicloud:rocketmq/qosPolicy:QosPolicy":
                return new QosPolicy(name, <any>undefined, { urn })
            case "alicloud:rocketmq/rocketMQInstance:RocketMQInstance":
                return new RocketMQInstance(name, <any>undefined, { urn })
            case "alicloud:rocketmq/rocketMQTopic:RocketMQTopic":
                return new RocketMQTopic(name, <any>undefined, { urn })
            case "alicloud:rocketmq/snatEntry:SnatEntry":
                return new SnatEntry(name, <any>undefined, { urn })
            case "alicloud:rocketmq/topic:Topic":
                return new Topic(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/acl", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/aclRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/clientUser", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/consumerGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/dnatEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/group", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/instance", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/qos", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/qosCar", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/qosPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/rocketMQInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/rocketMQTopic", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/snatEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "rocketmq/topic", _module)
