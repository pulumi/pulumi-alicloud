// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstancesInstanceDiskDeviceMapping {
    /**
     * @return Cloud disk category.
     * 
     */
    private String category;
    /**
     * @return Device information of the created disk: such as /dev/xvdb.
     * 
     */
    private String device;
    /**
     * @return The ID of the Disk.
     * 
     */
    private String diskId;
    /**
     * @return The name of the Disk.
     * 
     */
    private String diskName;
    /**
     * @return Size of the created disk.
     * 
     */
    private Integer size;
    /**
     * @return Cloud disk type: system disk or data disk.
     * 
     */
    private String type;

    private GetInstancesInstanceDiskDeviceMapping() {}
    /**
     * @return Cloud disk category.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return Device information of the created disk: such as /dev/xvdb.
     * 
     */
    public String device() {
        return this.device;
    }
    /**
     * @return The ID of the Disk.
     * 
     */
    public String diskId() {
        return this.diskId;
    }
    /**
     * @return The name of the Disk.
     * 
     */
    public String diskName() {
        return this.diskName;
    }
    /**
     * @return Size of the created disk.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return Cloud disk type: system disk or data disk.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstanceDiskDeviceMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private String device;
        private String diskId;
        private String diskName;
        private Integer size;
        private String type;
        public Builder() {}
        public Builder(GetInstancesInstanceDiskDeviceMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.device = defaults.device;
    	      this.diskId = defaults.diskId;
    	      this.diskName = defaults.diskName;
    	      this.size = defaults.size;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceDiskDeviceMapping", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder device(String device) {
            if (device == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceDiskDeviceMapping", "device");
            }
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder diskId(String diskId) {
            if (diskId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceDiskDeviceMapping", "diskId");
            }
            this.diskId = diskId;
            return this;
        }
        @CustomType.Setter
        public Builder diskName(String diskName) {
            if (diskName == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceDiskDeviceMapping", "diskName");
            }
            this.diskName = diskName;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceDiskDeviceMapping", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceDiskDeviceMapping", "type");
            }
            this.type = type;
            return this;
        }
        public GetInstancesInstanceDiskDeviceMapping build() {
            final var _resultValue = new GetInstancesInstanceDiskDeviceMapping();
            _resultValue.category = category;
            _resultValue.device = device;
            _resultValue.diskId = diskId;
            _resultValue.diskName = diskName;
            _resultValue.size = size;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
