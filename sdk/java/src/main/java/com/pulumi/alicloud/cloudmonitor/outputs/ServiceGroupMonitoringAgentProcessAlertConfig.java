// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudmonitor.outputs;

import com.pulumi.alicloud.cloudmonitor.outputs.ServiceGroupMonitoringAgentProcessAlertConfigTargetList;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceGroupMonitoringAgentProcessAlertConfig {
    /**
     * @return The operator that is used to compare the metric value with the threshold. Valid values: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanOrEqualToThreshold`, `LessThanThreshold`, `NotEqualToThreshold`, `GreaterThanYesterday`, `LessThanYesterday`, `GreaterThanLastWeek`, `LessThanLastWeek`, `GreaterThanLastPeriod`, `LessThanLastPeriod`.
     * 
     */
    private String comparisonOperator;
    /**
     * @return The time period during which the alert rule is effective.
     * 
     */
    private @Nullable String effectiveInterval;
    /**
     * @return The alert level. Valid values: `critical`, `warn`, `info`.
     * 
     */
    private String escalationsLevel;
    /**
     * @return The mute period during which new alert notifications are not sent even if the trigger conditions are met. Unit: seconds.
     * 
     */
    private @Nullable Integer silenceTime;
    /**
     * @return The statistical method for alerts. Valid values: `Average`.
     * 
     */
    private String statistics;
    /**
     * @return The alert triggers. See `target_list` below.
     * 
     */
    private @Nullable List<ServiceGroupMonitoringAgentProcessAlertConfigTargetList> targetLists;
    /**
     * @return The alert threshold.
     * 
     */
    private String threshold;
    /**
     * @return The number of times for which the threshold can be consecutively exceeded.
     * 
     */
    private String times;
    /**
     * @return The callback URL.
     * 
     */
    private @Nullable String webhook;

    private ServiceGroupMonitoringAgentProcessAlertConfig() {}
    /**
     * @return The operator that is used to compare the metric value with the threshold. Valid values: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanOrEqualToThreshold`, `LessThanThreshold`, `NotEqualToThreshold`, `GreaterThanYesterday`, `LessThanYesterday`, `GreaterThanLastWeek`, `LessThanLastWeek`, `GreaterThanLastPeriod`, `LessThanLastPeriod`.
     * 
     */
    public String comparisonOperator() {
        return this.comparisonOperator;
    }
    /**
     * @return The time period during which the alert rule is effective.
     * 
     */
    public Optional<String> effectiveInterval() {
        return Optional.ofNullable(this.effectiveInterval);
    }
    /**
     * @return The alert level. Valid values: `critical`, `warn`, `info`.
     * 
     */
    public String escalationsLevel() {
        return this.escalationsLevel;
    }
    /**
     * @return The mute period during which new alert notifications are not sent even if the trigger conditions are met. Unit: seconds.
     * 
     */
    public Optional<Integer> silenceTime() {
        return Optional.ofNullable(this.silenceTime);
    }
    /**
     * @return The statistical method for alerts. Valid values: `Average`.
     * 
     */
    public String statistics() {
        return this.statistics;
    }
    /**
     * @return The alert triggers. See `target_list` below.
     * 
     */
    public List<ServiceGroupMonitoringAgentProcessAlertConfigTargetList> targetLists() {
        return this.targetLists == null ? List.of() : this.targetLists;
    }
    /**
     * @return The alert threshold.
     * 
     */
    public String threshold() {
        return this.threshold;
    }
    /**
     * @return The number of times for which the threshold can be consecutively exceeded.
     * 
     */
    public String times() {
        return this.times;
    }
    /**
     * @return The callback URL.
     * 
     */
    public Optional<String> webhook() {
        return Optional.ofNullable(this.webhook);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceGroupMonitoringAgentProcessAlertConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comparisonOperator;
        private @Nullable String effectiveInterval;
        private String escalationsLevel;
        private @Nullable Integer silenceTime;
        private String statistics;
        private @Nullable List<ServiceGroupMonitoringAgentProcessAlertConfigTargetList> targetLists;
        private String threshold;
        private String times;
        private @Nullable String webhook;
        public Builder() {}
        public Builder(ServiceGroupMonitoringAgentProcessAlertConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comparisonOperator = defaults.comparisonOperator;
    	      this.effectiveInterval = defaults.effectiveInterval;
    	      this.escalationsLevel = defaults.escalationsLevel;
    	      this.silenceTime = defaults.silenceTime;
    	      this.statistics = defaults.statistics;
    	      this.targetLists = defaults.targetLists;
    	      this.threshold = defaults.threshold;
    	      this.times = defaults.times;
    	      this.webhook = defaults.webhook;
        }

        @CustomType.Setter
        public Builder comparisonOperator(String comparisonOperator) {
            if (comparisonOperator == null) {
              throw new MissingRequiredPropertyException("ServiceGroupMonitoringAgentProcessAlertConfig", "comparisonOperator");
            }
            this.comparisonOperator = comparisonOperator;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveInterval(@Nullable String effectiveInterval) {

            this.effectiveInterval = effectiveInterval;
            return this;
        }
        @CustomType.Setter
        public Builder escalationsLevel(String escalationsLevel) {
            if (escalationsLevel == null) {
              throw new MissingRequiredPropertyException("ServiceGroupMonitoringAgentProcessAlertConfig", "escalationsLevel");
            }
            this.escalationsLevel = escalationsLevel;
            return this;
        }
        @CustomType.Setter
        public Builder silenceTime(@Nullable Integer silenceTime) {

            this.silenceTime = silenceTime;
            return this;
        }
        @CustomType.Setter
        public Builder statistics(String statistics) {
            if (statistics == null) {
              throw new MissingRequiredPropertyException("ServiceGroupMonitoringAgentProcessAlertConfig", "statistics");
            }
            this.statistics = statistics;
            return this;
        }
        @CustomType.Setter
        public Builder targetLists(@Nullable List<ServiceGroupMonitoringAgentProcessAlertConfigTargetList> targetLists) {

            this.targetLists = targetLists;
            return this;
        }
        public Builder targetLists(ServiceGroupMonitoringAgentProcessAlertConfigTargetList... targetLists) {
            return targetLists(List.of(targetLists));
        }
        @CustomType.Setter
        public Builder threshold(String threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("ServiceGroupMonitoringAgentProcessAlertConfig", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder times(String times) {
            if (times == null) {
              throw new MissingRequiredPropertyException("ServiceGroupMonitoringAgentProcessAlertConfig", "times");
            }
            this.times = times;
            return this;
        }
        @CustomType.Setter
        public Builder webhook(@Nullable String webhook) {

            this.webhook = webhook;
            return this;
        }
        public ServiceGroupMonitoringAgentProcessAlertConfig build() {
            final var _resultValue = new ServiceGroupMonitoringAgentProcessAlertConfig();
            _resultValue.comparisonOperator = comparisonOperator;
            _resultValue.effectiveInterval = effectiveInterval;
            _resultValue.escalationsLevel = escalationsLevel;
            _resultValue.silenceTime = silenceTime;
            _resultValue.statistics = statistics;
            _resultValue.targetLists = targetLists;
            _resultValue.threshold = threshold;
            _resultValue.times = times;
            _resultValue.webhook = webhook;
            return _resultValue;
        }
    }
}
