// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAlarmsAlarm {
    /**
     * @return The list of actions to execute when this alarm transition into an ALARM state. Each action is specified as ess scaling rule ari.
     * 
     */
    private List<String> alarmActions;
    /**
     * @return Defines the application group id defined by CMS which is assigned when you upload custom metric to CMS, only available for custom metirc.
     * 
     */
    private Integer cloudMonitorGroupId;
    /**
     * @return The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand.
     * 
     */
    private String comparisonOperator;
    /**
     * @return The description for the alarm.
     * 
     */
    private String description;
    /**
     * @return The dimension map for the alarm&#39;s associated metric.
     * 
     */
    private Map<String,Object> dimensions;
    /**
     * @return Whether to enable specific ess alarm.
     * 
     */
    private Boolean enable;
    /**
     * @return The number of times that needs to satisfies comparison condition before transition into ALARM state.
     * 
     */
    private Integer evaluationCount;
    /**
     * @return The id of alarm.
     * 
     */
    private String id;
    /**
     * @return The name for the alarm&#39;s associated metric. See Block_metricNames_and_dimensions below for details.
     * 
     */
    private String metricName;
    /**
     * @return The type for the alarm&#39;s associated metric. Supported value: system, custom. &#34;system&#34; means the metric data is collected by Aliyun Cloud Monitor Service(CMS), &#34;custom&#34; means the metric data is upload to CMS by users. Defaults to system.
     * 
     */
    private String metricType;
    /**
     * @return The name for ess alarm.
     * 
     */
    private String name;
    /**
     * @return The period in seconds over which the specified statistic is applied.
     * 
     */
    private Integer period;
    /**
     * @return Scaling group id the alarms belong to.
     * 
     */
    private String scalingGroupId;
    /**
     * @return The state of alarm task.
     * 
     */
    private String state;
    /**
     * @return The statistic to apply to the alarm&#39;s associated metric.
     * 
     */
    private String statistics;
    /**
     * @return The value against which the specified statistics is compared.
     * 
     */
    private String threshold;

    private GetAlarmsAlarm() {}
    /**
     * @return The list of actions to execute when this alarm transition into an ALARM state. Each action is specified as ess scaling rule ari.
     * 
     */
    public List<String> alarmActions() {
        return this.alarmActions;
    }
    /**
     * @return Defines the application group id defined by CMS which is assigned when you upload custom metric to CMS, only available for custom metirc.
     * 
     */
    public Integer cloudMonitorGroupId() {
        return this.cloudMonitorGroupId;
    }
    /**
     * @return The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand.
     * 
     */
    public String comparisonOperator() {
        return this.comparisonOperator;
    }
    /**
     * @return The description for the alarm.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The dimension map for the alarm&#39;s associated metric.
     * 
     */
    public Map<String,Object> dimensions() {
        return this.dimensions;
    }
    /**
     * @return Whether to enable specific ess alarm.
     * 
     */
    public Boolean enable() {
        return this.enable;
    }
    /**
     * @return The number of times that needs to satisfies comparison condition before transition into ALARM state.
     * 
     */
    public Integer evaluationCount() {
        return this.evaluationCount;
    }
    /**
     * @return The id of alarm.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name for the alarm&#39;s associated metric. See Block_metricNames_and_dimensions below for details.
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return The type for the alarm&#39;s associated metric. Supported value: system, custom. &#34;system&#34; means the metric data is collected by Aliyun Cloud Monitor Service(CMS), &#34;custom&#34; means the metric data is upload to CMS by users. Defaults to system.
     * 
     */
    public String metricType() {
        return this.metricType;
    }
    /**
     * @return The name for ess alarm.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The period in seconds over which the specified statistic is applied.
     * 
     */
    public Integer period() {
        return this.period;
    }
    /**
     * @return Scaling group id the alarms belong to.
     * 
     */
    public String scalingGroupId() {
        return this.scalingGroupId;
    }
    /**
     * @return The state of alarm task.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The statistic to apply to the alarm&#39;s associated metric.
     * 
     */
    public String statistics() {
        return this.statistics;
    }
    /**
     * @return The value against which the specified statistics is compared.
     * 
     */
    public String threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlarmsAlarm defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> alarmActions;
        private Integer cloudMonitorGroupId;
        private String comparisonOperator;
        private String description;
        private Map<String,Object> dimensions;
        private Boolean enable;
        private Integer evaluationCount;
        private String id;
        private String metricName;
        private String metricType;
        private String name;
        private Integer period;
        private String scalingGroupId;
        private String state;
        private String statistics;
        private String threshold;
        public Builder() {}
        public Builder(GetAlarmsAlarm defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alarmActions = defaults.alarmActions;
    	      this.cloudMonitorGroupId = defaults.cloudMonitorGroupId;
    	      this.comparisonOperator = defaults.comparisonOperator;
    	      this.description = defaults.description;
    	      this.dimensions = defaults.dimensions;
    	      this.enable = defaults.enable;
    	      this.evaluationCount = defaults.evaluationCount;
    	      this.id = defaults.id;
    	      this.metricName = defaults.metricName;
    	      this.metricType = defaults.metricType;
    	      this.name = defaults.name;
    	      this.period = defaults.period;
    	      this.scalingGroupId = defaults.scalingGroupId;
    	      this.state = defaults.state;
    	      this.statistics = defaults.statistics;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder alarmActions(List<String> alarmActions) {
            this.alarmActions = Objects.requireNonNull(alarmActions);
            return this;
        }
        public Builder alarmActions(String... alarmActions) {
            return alarmActions(List.of(alarmActions));
        }
        @CustomType.Setter
        public Builder cloudMonitorGroupId(Integer cloudMonitorGroupId) {
            this.cloudMonitorGroupId = Objects.requireNonNull(cloudMonitorGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder comparisonOperator(String comparisonOperator) {
            this.comparisonOperator = Objects.requireNonNull(comparisonOperator);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder dimensions(Map<String,Object> dimensions) {
            this.dimensions = Objects.requireNonNull(dimensions);
            return this;
        }
        @CustomType.Setter
        public Builder enable(Boolean enable) {
            this.enable = Objects.requireNonNull(enable);
            return this;
        }
        @CustomType.Setter
        public Builder evaluationCount(Integer evaluationCount) {
            this.evaluationCount = Objects.requireNonNull(evaluationCount);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder metricName(String metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }
        @CustomType.Setter
        public Builder metricType(String metricType) {
            this.metricType = Objects.requireNonNull(metricType);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder period(Integer period) {
            this.period = Objects.requireNonNull(period);
            return this;
        }
        @CustomType.Setter
        public Builder scalingGroupId(String scalingGroupId) {
            this.scalingGroupId = Objects.requireNonNull(scalingGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder statistics(String statistics) {
            this.statistics = Objects.requireNonNull(statistics);
            return this;
        }
        @CustomType.Setter
        public Builder threshold(String threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }
        public GetAlarmsAlarm build() {
            final var o = new GetAlarmsAlarm();
            o.alarmActions = alarmActions;
            o.cloudMonitorGroupId = cloudMonitorGroupId;
            o.comparisonOperator = comparisonOperator;
            o.description = description;
            o.dimensions = dimensions;
            o.enable = enable;
            o.evaluationCount = evaluationCount;
            o.id = id;
            o.metricName = metricName;
            o.metricType = metricType;
            o.name = name;
            o.period = period;
            o.scalingGroupId = scalingGroupId;
            o.state = state;
            o.statistics = statistics;
            o.threshold = threshold;
            return o;
        }
    }
}
