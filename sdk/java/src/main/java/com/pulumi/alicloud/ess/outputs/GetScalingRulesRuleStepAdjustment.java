// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetScalingRulesRuleStepAdjustment {
    /**
     * @return (Available since v1.250.0) The lower limit of each step adjustment. Valid values: -9.999999E18 to 9.999999E18.
     * 
     */
    private String metricIntervalLowerBound;
    /**
     * @return (Available since v1.250.0) The upper limit of each step adjustment. Valid values: -9.999999E18 to 9.999999E18.
     * 
     */
    private String metricIntervalUpperBound;
    /**
     * @return (Available since v1.250.0) The number of instances that are scaled in each step adjustment.
     * 
     */
    private Integer scalingAdjustment;

    private GetScalingRulesRuleStepAdjustment() {}
    /**
     * @return (Available since v1.250.0) The lower limit of each step adjustment. Valid values: -9.999999E18 to 9.999999E18.
     * 
     */
    public String metricIntervalLowerBound() {
        return this.metricIntervalLowerBound;
    }
    /**
     * @return (Available since v1.250.0) The upper limit of each step adjustment. Valid values: -9.999999E18 to 9.999999E18.
     * 
     */
    public String metricIntervalUpperBound() {
        return this.metricIntervalUpperBound;
    }
    /**
     * @return (Available since v1.250.0) The number of instances that are scaled in each step adjustment.
     * 
     */
    public Integer scalingAdjustment() {
        return this.scalingAdjustment;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScalingRulesRuleStepAdjustment defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String metricIntervalLowerBound;
        private String metricIntervalUpperBound;
        private Integer scalingAdjustment;
        public Builder() {}
        public Builder(GetScalingRulesRuleStepAdjustment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricIntervalLowerBound = defaults.metricIntervalLowerBound;
    	      this.metricIntervalUpperBound = defaults.metricIntervalUpperBound;
    	      this.scalingAdjustment = defaults.scalingAdjustment;
        }

        @CustomType.Setter
        public Builder metricIntervalLowerBound(String metricIntervalLowerBound) {
            if (metricIntervalLowerBound == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRuleStepAdjustment", "metricIntervalLowerBound");
            }
            this.metricIntervalLowerBound = metricIntervalLowerBound;
            return this;
        }
        @CustomType.Setter
        public Builder metricIntervalUpperBound(String metricIntervalUpperBound) {
            if (metricIntervalUpperBound == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRuleStepAdjustment", "metricIntervalUpperBound");
            }
            this.metricIntervalUpperBound = metricIntervalUpperBound;
            return this;
        }
        @CustomType.Setter
        public Builder scalingAdjustment(Integer scalingAdjustment) {
            if (scalingAdjustment == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRuleStepAdjustment", "scalingAdjustment");
            }
            this.scalingAdjustment = scalingAdjustment;
            return this;
        }
        public GetScalingRulesRuleStepAdjustment build() {
            final var _resultValue = new GetScalingRulesRuleStepAdjustment();
            _resultValue.metricIntervalLowerBound = metricIntervalLowerBound;
            _resultValue.metricIntervalUpperBound = metricIntervalUpperBound;
            _resultValue.scalingAdjustment = scalingAdjustment;
            return _resultValue;
        }
    }
}
