// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V3ConcurrencyConfigState extends com.pulumi.resources.ResourceArgs {

    public static final V3ConcurrencyConfigState Empty = new V3ConcurrencyConfigState();

    /**
     * (Available since v1.234.0) Resource identity of the function
     * 
     */
    @Import(name="functionArn")
    private @Nullable Output<String> functionArn;

    /**
     * @return (Available since v1.234.0) Resource identity of the function
     * 
     */
    public Optional<Output<String>> functionArn() {
        return Optional.ofNullable(this.functionArn);
    }

    /**
     * Function Name
     * 
     */
    @Import(name="functionName")
    private @Nullable Output<String> functionName;

    /**
     * @return Function Name
     * 
     */
    public Optional<Output<String>> functionName() {
        return Optional.ofNullable(this.functionName);
    }

    /**
     * Reserved Concurrency. Functions reserve a part of account concurrency. Other functions cannot use this part of concurrency. Reserved concurrency includes the total concurrency of Reserved Instances and As-You-go instances.
     * 
     */
    @Import(name="reservedConcurrency")
    private @Nullable Output<Integer> reservedConcurrency;

    /**
     * @return Reserved Concurrency. Functions reserve a part of account concurrency. Other functions cannot use this part of concurrency. Reserved concurrency includes the total concurrency of Reserved Instances and As-You-go instances.
     * 
     */
    public Optional<Output<Integer>> reservedConcurrency() {
        return Optional.ofNullable(this.reservedConcurrency);
    }

    private V3ConcurrencyConfigState() {}

    private V3ConcurrencyConfigState(V3ConcurrencyConfigState $) {
        this.functionArn = $.functionArn;
        this.functionName = $.functionName;
        this.reservedConcurrency = $.reservedConcurrency;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V3ConcurrencyConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V3ConcurrencyConfigState $;

        public Builder() {
            $ = new V3ConcurrencyConfigState();
        }

        public Builder(V3ConcurrencyConfigState defaults) {
            $ = new V3ConcurrencyConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param functionArn (Available since v1.234.0) Resource identity of the function
         * 
         * @return builder
         * 
         */
        public Builder functionArn(@Nullable Output<String> functionArn) {
            $.functionArn = functionArn;
            return this;
        }

        /**
         * @param functionArn (Available since v1.234.0) Resource identity of the function
         * 
         * @return builder
         * 
         */
        public Builder functionArn(String functionArn) {
            return functionArn(Output.of(functionArn));
        }

        /**
         * @param functionName Function Name
         * 
         * @return builder
         * 
         */
        public Builder functionName(@Nullable Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName Function Name
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param reservedConcurrency Reserved Concurrency. Functions reserve a part of account concurrency. Other functions cannot use this part of concurrency. Reserved concurrency includes the total concurrency of Reserved Instances and As-You-go instances.
         * 
         * @return builder
         * 
         */
        public Builder reservedConcurrency(@Nullable Output<Integer> reservedConcurrency) {
            $.reservedConcurrency = reservedConcurrency;
            return this;
        }

        /**
         * @param reservedConcurrency Reserved Concurrency. Functions reserve a part of account concurrency. Other functions cannot use this part of concurrency. Reserved concurrency includes the total concurrency of Reserved Instances and As-You-go instances.
         * 
         * @return builder
         * 
         */
        public Builder reservedConcurrency(Integer reservedConcurrency) {
            return reservedConcurrency(Output.of(reservedConcurrency));
        }

        public V3ConcurrencyConfigState build() {
            return $;
        }
    }

}
