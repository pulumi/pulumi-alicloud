// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryEnterpriseSyncRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryEnterpriseSyncRuleArgs Empty = new RegistryEnterpriseSyncRuleArgs();

    /**
     * ID of Container Registry Enterprise Edition source instance.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return ID of Container Registry Enterprise Edition source instance.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Name of Container Registry Enterprise Edition sync rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of Container Registry Enterprise Edition sync rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Name of Container Registry Enterprise Edition source namespace. It can contain 2 to 30 characters.
     * 
     */
    @Import(name="namespaceName", required=true)
    private Output<String> namespaceName;

    /**
     * @return Name of Container Registry Enterprise Edition source namespace. It can contain 2 to 30 characters.
     * 
     */
    public Output<String> namespaceName() {
        return this.namespaceName;
    }

    /**
     * Name of the source repository which should be set together with `target_repo_name`, if empty means that the synchronization scope is the entire namespace level.
     * 
     */
    @Import(name="repoName")
    private @Nullable Output<String> repoName;

    /**
     * @return Name of the source repository which should be set together with `target_repo_name`, if empty means that the synchronization scope is the entire namespace level.
     * 
     */
    public Optional<Output<String>> repoName() {
        return Optional.ofNullable(this.repoName);
    }

    /**
     * The regular expression used to filter image tags for synchronization in the source repository.
     * 
     */
    @Import(name="tagFilter", required=true)
    private Output<String> tagFilter;

    /**
     * @return The regular expression used to filter image tags for synchronization in the source repository.
     * 
     */
    public Output<String> tagFilter() {
        return this.tagFilter;
    }

    /**
     * ID of Container Registry Enterprise Edition target instance to be synchronized.
     * 
     */
    @Import(name="targetInstanceId", required=true)
    private Output<String> targetInstanceId;

    /**
     * @return ID of Container Registry Enterprise Edition target instance to be synchronized.
     * 
     */
    public Output<String> targetInstanceId() {
        return this.targetInstanceId;
    }

    /**
     * Name of Container Registry Enterprise Edition target namespace to be synchronized. It can contain 2 to 30 characters.
     * 
     */
    @Import(name="targetNamespaceName", required=true)
    private Output<String> targetNamespaceName;

    /**
     * @return Name of Container Registry Enterprise Edition target namespace to be synchronized. It can contain 2 to 30 characters.
     * 
     */
    public Output<String> targetNamespaceName() {
        return this.targetNamespaceName;
    }

    /**
     * The target region to be synchronized.
     * 
     */
    @Import(name="targetRegionId", required=true)
    private Output<String> targetRegionId;

    /**
     * @return The target region to be synchronized.
     * 
     */
    public Output<String> targetRegionId() {
        return this.targetRegionId;
    }

    /**
     * Name of the target repository.
     * 
     */
    @Import(name="targetRepoName")
    private @Nullable Output<String> targetRepoName;

    /**
     * @return Name of the target repository.
     * 
     */
    public Optional<Output<String>> targetRepoName() {
        return Optional.ofNullable(this.targetRepoName);
    }

    private RegistryEnterpriseSyncRuleArgs() {}

    private RegistryEnterpriseSyncRuleArgs(RegistryEnterpriseSyncRuleArgs $) {
        this.instanceId = $.instanceId;
        this.name = $.name;
        this.namespaceName = $.namespaceName;
        this.repoName = $.repoName;
        this.tagFilter = $.tagFilter;
        this.targetInstanceId = $.targetInstanceId;
        this.targetNamespaceName = $.targetNamespaceName;
        this.targetRegionId = $.targetRegionId;
        this.targetRepoName = $.targetRepoName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryEnterpriseSyncRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryEnterpriseSyncRuleArgs $;

        public Builder() {
            $ = new RegistryEnterpriseSyncRuleArgs();
        }

        public Builder(RegistryEnterpriseSyncRuleArgs defaults) {
            $ = new RegistryEnterpriseSyncRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId ID of Container Registry Enterprise Edition source instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId ID of Container Registry Enterprise Edition source instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param name Name of Container Registry Enterprise Edition sync rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of Container Registry Enterprise Edition sync rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespaceName Name of Container Registry Enterprise Edition source namespace. It can contain 2 to 30 characters.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        /**
         * @param namespaceName Name of Container Registry Enterprise Edition source namespace. It can contain 2 to 30 characters.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        /**
         * @param repoName Name of the source repository which should be set together with `target_repo_name`, if empty means that the synchronization scope is the entire namespace level.
         * 
         * @return builder
         * 
         */
        public Builder repoName(@Nullable Output<String> repoName) {
            $.repoName = repoName;
            return this;
        }

        /**
         * @param repoName Name of the source repository which should be set together with `target_repo_name`, if empty means that the synchronization scope is the entire namespace level.
         * 
         * @return builder
         * 
         */
        public Builder repoName(String repoName) {
            return repoName(Output.of(repoName));
        }

        /**
         * @param tagFilter The regular expression used to filter image tags for synchronization in the source repository.
         * 
         * @return builder
         * 
         */
        public Builder tagFilter(Output<String> tagFilter) {
            $.tagFilter = tagFilter;
            return this;
        }

        /**
         * @param tagFilter The regular expression used to filter image tags for synchronization in the source repository.
         * 
         * @return builder
         * 
         */
        public Builder tagFilter(String tagFilter) {
            return tagFilter(Output.of(tagFilter));
        }

        /**
         * @param targetInstanceId ID of Container Registry Enterprise Edition target instance to be synchronized.
         * 
         * @return builder
         * 
         */
        public Builder targetInstanceId(Output<String> targetInstanceId) {
            $.targetInstanceId = targetInstanceId;
            return this;
        }

        /**
         * @param targetInstanceId ID of Container Registry Enterprise Edition target instance to be synchronized.
         * 
         * @return builder
         * 
         */
        public Builder targetInstanceId(String targetInstanceId) {
            return targetInstanceId(Output.of(targetInstanceId));
        }

        /**
         * @param targetNamespaceName Name of Container Registry Enterprise Edition target namespace to be synchronized. It can contain 2 to 30 characters.
         * 
         * @return builder
         * 
         */
        public Builder targetNamespaceName(Output<String> targetNamespaceName) {
            $.targetNamespaceName = targetNamespaceName;
            return this;
        }

        /**
         * @param targetNamespaceName Name of Container Registry Enterprise Edition target namespace to be synchronized. It can contain 2 to 30 characters.
         * 
         * @return builder
         * 
         */
        public Builder targetNamespaceName(String targetNamespaceName) {
            return targetNamespaceName(Output.of(targetNamespaceName));
        }

        /**
         * @param targetRegionId The target region to be synchronized.
         * 
         * @return builder
         * 
         */
        public Builder targetRegionId(Output<String> targetRegionId) {
            $.targetRegionId = targetRegionId;
            return this;
        }

        /**
         * @param targetRegionId The target region to be synchronized.
         * 
         * @return builder
         * 
         */
        public Builder targetRegionId(String targetRegionId) {
            return targetRegionId(Output.of(targetRegionId));
        }

        /**
         * @param targetRepoName Name of the target repository.
         * 
         * @return builder
         * 
         */
        public Builder targetRepoName(@Nullable Output<String> targetRepoName) {
            $.targetRepoName = targetRepoName;
            return this;
        }

        /**
         * @param targetRepoName Name of the target repository.
         * 
         * @return builder
         * 
         */
        public Builder targetRepoName(String targetRepoName) {
            return targetRepoName(Output.of(targetRepoName));
        }

        public RegistryEnterpriseSyncRuleArgs build() {
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("RegistryEnterpriseSyncRuleArgs", "instanceId");
            }
            if ($.namespaceName == null) {
                throw new MissingRequiredPropertyException("RegistryEnterpriseSyncRuleArgs", "namespaceName");
            }
            if ($.tagFilter == null) {
                throw new MissingRequiredPropertyException("RegistryEnterpriseSyncRuleArgs", "tagFilter");
            }
            if ($.targetInstanceId == null) {
                throw new MissingRequiredPropertyException("RegistryEnterpriseSyncRuleArgs", "targetInstanceId");
            }
            if ($.targetNamespaceName == null) {
                throw new MissingRequiredPropertyException("RegistryEnterpriseSyncRuleArgs", "targetNamespaceName");
            }
            if ($.targetRegionId == null) {
                throw new MissingRequiredPropertyException("RegistryEnterpriseSyncRuleArgs", "targetRegionId");
            }
            return $;
        }
    }

}
