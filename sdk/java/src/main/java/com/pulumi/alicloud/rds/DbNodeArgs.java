// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class DbNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbNodeArgs Empty = new DbNodeArgs();

    /**
     * The specification information of the node.
     * 
     */
    @Import(name="classCode", required=true)
    private Output<String> classCode;

    /**
     * @return The specification information of the node.
     * 
     */
    public Output<String> classCode() {
        return this.classCode;
    }

    /**
     * The Id of instance that can run database.
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return The Id of instance that can run database.
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    /**
     * The zone ID of the node.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone ID of the node.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private DbNodeArgs() {}

    private DbNodeArgs(DbNodeArgs $) {
        this.classCode = $.classCode;
        this.dbInstanceId = $.dbInstanceId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbNodeArgs $;

        public Builder() {
            $ = new DbNodeArgs();
        }

        public Builder(DbNodeArgs defaults) {
            $ = new DbNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param classCode The specification information of the node.
         * 
         * @return builder
         * 
         */
        public Builder classCode(Output<String> classCode) {
            $.classCode = classCode;
            return this;
        }

        /**
         * @param classCode The specification information of the node.
         * 
         * @return builder
         * 
         */
        public Builder classCode(String classCode) {
            return classCode(Output.of(classCode));
        }

        /**
         * @param dbInstanceId The Id of instance that can run database.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The Id of instance that can run database.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param zoneId The zone ID of the node.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID of the node.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public DbNodeArgs build() {
            $.classCode = Objects.requireNonNull($.classCode, "expected parameter 'classCode' to be non-null");
            $.dbInstanceId = Objects.requireNonNull($.dbInstanceId, "expected parameter 'dbInstanceId' to be non-null");
            $.zoneId = Objects.requireNonNull($.zoneId, "expected parameter 'zoneId' to be non-null");
            return $;
        }
    }

}
