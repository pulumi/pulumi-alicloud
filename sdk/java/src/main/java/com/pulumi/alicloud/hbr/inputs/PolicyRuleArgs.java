// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.inputs;

import com.pulumi.alicloud.hbr.inputs.PolicyRuleRetentionRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyRuleArgs Empty = new PolicyRuleArgs();

    /**
     * This parameter is required only when the value of `RuleType` is **TRANSITION. The minimum value is 30, and the Retention-ArchiveDays needs to be greater than or equal to 60.
     * 
     */
    @Import(name="archiveDays")
    private @Nullable Output<Integer> archiveDays;

    /**
     * @return This parameter is required only when the value of `RuleType` is **TRANSITION. The minimum value is 30, and the Retention-ArchiveDays needs to be greater than or equal to 60.
     * 
     */
    public Optional<Output<Integer>> archiveDays() {
        return Optional.ofNullable(this.archiveDays);
    }

    /**
     * This parameter is required only when the `RuleType` value is **BACKUP. Backup Type.
     * 
     */
    @Import(name="backupType")
    private @Nullable Output<String> backupType;

    /**
     * @return This parameter is required only when the `RuleType` value is **BACKUP. Backup Type.
     * 
     */
    public Optional<Output<String>> backupType() {
        return Optional.ofNullable(this.backupType);
    }

    /**
     * This parameter is required only when `RuleType` is set to `BACKUP`.
     * 
     */
    @Import(name="keepLatestSnapshots")
    private @Nullable Output<Integer> keepLatestSnapshots;

    /**
     * @return This parameter is required only when `RuleType` is set to `BACKUP`.
     * 
     */
    public Optional<Output<Integer>> keepLatestSnapshots() {
        return Optional.ofNullable(this.keepLatestSnapshots);
    }

    /**
     * Only when the `RuleType` value is.
     * 
     */
    @Import(name="replicationRegionId")
    private @Nullable Output<String> replicationRegionId;

    /**
     * @return Only when the `RuleType` value is.
     * 
     */
    public Optional<Output<String>> replicationRegionId() {
        return Optional.ofNullable(this.replicationRegionId);
    }

    /**
     * Retention time, in days.
     * 
     */
    @Import(name="retention")
    private @Nullable Output<Integer> retention;

    /**
     * @return Retention time, in days.
     * 
     */
    public Optional<Output<Integer>> retention() {
        return Optional.ofNullable(this.retention);
    }

    /**
     * This parameter is required only when the value of `RuleType` is `TRANSITION`. See `retention_rules` below.
     * 
     */
    @Import(name="retentionRules")
    private @Nullable Output<List<PolicyRuleRetentionRuleArgs>> retentionRules;

    /**
     * @return This parameter is required only when the value of `RuleType` is `TRANSITION`. See `retention_rules` below.
     * 
     */
    public Optional<Output<List<PolicyRuleRetentionRuleArgs>>> retentionRules() {
        return Optional.ofNullable(this.retentionRules);
    }

    /**
     * Rule ID.
     * 
     */
    @Import(name="ruleId")
    private @Nullable Output<String> ruleId;

    /**
     * @return Rule ID.
     * 
     */
    public Optional<Output<String>> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }

    /**
     * Rule Type.
     * 
     */
    @Import(name="ruleType", required=true)
    private Output<String> ruleType;

    /**
     * @return Rule Type.
     * 
     */
    public Output<String> ruleType() {
        return this.ruleType;
    }

    /**
     * This parameter is required only if you set the `RuleType` parameter to `BACKUP`. This parameter specifies the backup schedule settings. Format: `I|{startTime}|{interval}`. The system runs the first backup job at a point in time that is specified in the {startTime} parameter and the subsequent backup jobs at an interval that is specified in the {interval} parameter. The system does not run a backup job before the specified point in time. Each backup job, except the first one, starts only after the previous backup job is complete. For example, `I|1631685600|P1D` specifies that the system runs the first backup job at 14:00:00 on September 15, 2021 and the subsequent backup jobs once a day.  *   startTime: the time at which the system starts to run a backup job. The time must follow the UNIX time format. Unit: seconds. *   interval: the interval at which the system runs a backup job. The interval must follow the ISO 8601 standard. For example, PT1H specifies an interval of one hour. P1D specifies an interval of one day.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    /**
     * @return This parameter is required only if you set the `RuleType` parameter to `BACKUP`. This parameter specifies the backup schedule settings. Format: `I|{startTime}|{interval}`. The system runs the first backup job at a point in time that is specified in the {startTime} parameter and the subsequent backup jobs at an interval that is specified in the {interval} parameter. The system does not run a backup job before the specified point in time. Each backup job, except the first one, starts only after the previous backup job is complete. For example, `I|1631685600|P1D` specifies that the system runs the first backup job at 14:00:00 on September 15, 2021 and the subsequent backup jobs once a day.  *   startTime: the time at which the system starts to run a backup job. The time must follow the UNIX time format. Unit: seconds. *   interval: the interval at which the system runs a backup job. The interval must follow the ISO 8601 standard. For example, PT1H specifies an interval of one hour. P1D specifies an interval of one day.
     * 
     */
    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * Vault ID.
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return Vault ID.
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    private PolicyRuleArgs() {}

    private PolicyRuleArgs(PolicyRuleArgs $) {
        this.archiveDays = $.archiveDays;
        this.backupType = $.backupType;
        this.keepLatestSnapshots = $.keepLatestSnapshots;
        this.replicationRegionId = $.replicationRegionId;
        this.retention = $.retention;
        this.retentionRules = $.retentionRules;
        this.ruleId = $.ruleId;
        this.ruleType = $.ruleType;
        this.schedule = $.schedule;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyRuleArgs $;

        public Builder() {
            $ = new PolicyRuleArgs();
        }

        public Builder(PolicyRuleArgs defaults) {
            $ = new PolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archiveDays This parameter is required only when the value of `RuleType` is **TRANSITION. The minimum value is 30, and the Retention-ArchiveDays needs to be greater than or equal to 60.
         * 
         * @return builder
         * 
         */
        public Builder archiveDays(@Nullable Output<Integer> archiveDays) {
            $.archiveDays = archiveDays;
            return this;
        }

        /**
         * @param archiveDays This parameter is required only when the value of `RuleType` is **TRANSITION. The minimum value is 30, and the Retention-ArchiveDays needs to be greater than or equal to 60.
         * 
         * @return builder
         * 
         */
        public Builder archiveDays(Integer archiveDays) {
            return archiveDays(Output.of(archiveDays));
        }

        /**
         * @param backupType This parameter is required only when the `RuleType` value is **BACKUP. Backup Type.
         * 
         * @return builder
         * 
         */
        public Builder backupType(@Nullable Output<String> backupType) {
            $.backupType = backupType;
            return this;
        }

        /**
         * @param backupType This parameter is required only when the `RuleType` value is **BACKUP. Backup Type.
         * 
         * @return builder
         * 
         */
        public Builder backupType(String backupType) {
            return backupType(Output.of(backupType));
        }

        /**
         * @param keepLatestSnapshots This parameter is required only when `RuleType` is set to `BACKUP`.
         * 
         * @return builder
         * 
         */
        public Builder keepLatestSnapshots(@Nullable Output<Integer> keepLatestSnapshots) {
            $.keepLatestSnapshots = keepLatestSnapshots;
            return this;
        }

        /**
         * @param keepLatestSnapshots This parameter is required only when `RuleType` is set to `BACKUP`.
         * 
         * @return builder
         * 
         */
        public Builder keepLatestSnapshots(Integer keepLatestSnapshots) {
            return keepLatestSnapshots(Output.of(keepLatestSnapshots));
        }

        /**
         * @param replicationRegionId Only when the `RuleType` value is.
         * 
         * @return builder
         * 
         */
        public Builder replicationRegionId(@Nullable Output<String> replicationRegionId) {
            $.replicationRegionId = replicationRegionId;
            return this;
        }

        /**
         * @param replicationRegionId Only when the `RuleType` value is.
         * 
         * @return builder
         * 
         */
        public Builder replicationRegionId(String replicationRegionId) {
            return replicationRegionId(Output.of(replicationRegionId));
        }

        /**
         * @param retention Retention time, in days.
         * 
         * @return builder
         * 
         */
        public Builder retention(@Nullable Output<Integer> retention) {
            $.retention = retention;
            return this;
        }

        /**
         * @param retention Retention time, in days.
         * 
         * @return builder
         * 
         */
        public Builder retention(Integer retention) {
            return retention(Output.of(retention));
        }

        /**
         * @param retentionRules This parameter is required only when the value of `RuleType` is `TRANSITION`. See `retention_rules` below.
         * 
         * @return builder
         * 
         */
        public Builder retentionRules(@Nullable Output<List<PolicyRuleRetentionRuleArgs>> retentionRules) {
            $.retentionRules = retentionRules;
            return this;
        }

        /**
         * @param retentionRules This parameter is required only when the value of `RuleType` is `TRANSITION`. See `retention_rules` below.
         * 
         * @return builder
         * 
         */
        public Builder retentionRules(List<PolicyRuleRetentionRuleArgs> retentionRules) {
            return retentionRules(Output.of(retentionRules));
        }

        /**
         * @param retentionRules This parameter is required only when the value of `RuleType` is `TRANSITION`. See `retention_rules` below.
         * 
         * @return builder
         * 
         */
        public Builder retentionRules(PolicyRuleRetentionRuleArgs... retentionRules) {
            return retentionRules(List.of(retentionRules));
        }

        /**
         * @param ruleId Rule ID.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(@Nullable Output<String> ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        /**
         * @param ruleId Rule ID.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(String ruleId) {
            return ruleId(Output.of(ruleId));
        }

        /**
         * @param ruleType Rule Type.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(Output<String> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param ruleType Rule Type.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(String ruleType) {
            return ruleType(Output.of(ruleType));
        }

        /**
         * @param schedule This parameter is required only if you set the `RuleType` parameter to `BACKUP`. This parameter specifies the backup schedule settings. Format: `I|{startTime}|{interval}`. The system runs the first backup job at a point in time that is specified in the {startTime} parameter and the subsequent backup jobs at an interval that is specified in the {interval} parameter. The system does not run a backup job before the specified point in time. Each backup job, except the first one, starts only after the previous backup job is complete. For example, `I|1631685600|P1D` specifies that the system runs the first backup job at 14:00:00 on September 15, 2021 and the subsequent backup jobs once a day.  *   startTime: the time at which the system starts to run a backup job. The time must follow the UNIX time format. Unit: seconds. *   interval: the interval at which the system runs a backup job. The interval must follow the ISO 8601 standard. For example, PT1H specifies an interval of one hour. P1D specifies an interval of one day.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule This parameter is required only if you set the `RuleType` parameter to `BACKUP`. This parameter specifies the backup schedule settings. Format: `I|{startTime}|{interval}`. The system runs the first backup job at a point in time that is specified in the {startTime} parameter and the subsequent backup jobs at an interval that is specified in the {interval} parameter. The system does not run a backup job before the specified point in time. Each backup job, except the first one, starts only after the previous backup job is complete. For example, `I|1631685600|P1D` specifies that the system runs the first backup job at 14:00:00 on September 15, 2021 and the subsequent backup jobs once a day.  *   startTime: the time at which the system starts to run a backup job. The time must follow the UNIX time format. Unit: seconds. *   interval: the interval at which the system runs a backup job. The interval must follow the ISO 8601 standard. For example, PT1H specifies an interval of one hour. P1D specifies an interval of one day.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param vaultId Vault ID.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId Vault ID.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public PolicyRuleArgs build() {
            if ($.ruleType == null) {
                throw new MissingRequiredPropertyException("PolicyRuleArgs", "ruleType");
            }
            return $;
        }
    }

}
