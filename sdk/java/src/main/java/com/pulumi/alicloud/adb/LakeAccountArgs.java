// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.adb;

import com.pulumi.alicloud.adb.inputs.LakeAccountAccountPrivilegeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LakeAccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final LakeAccountArgs Empty = new LakeAccountArgs();

    /**
     * The description of the account.
     * 
     */
    @Import(name="accountDescription")
    private @Nullable Output<String> accountDescription;

    /**
     * @return The description of the account.
     * 
     */
    public Optional<Output<String>> accountDescription() {
        return Optional.ofNullable(this.accountDescription);
    }

    /**
     * The name of the account.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The name of the account.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * AccountPassword.
     * 
     */
    @Import(name="accountPassword", required=true)
    private Output<String> accountPassword;

    /**
     * @return AccountPassword.
     * 
     */
    public Output<String> accountPassword() {
        return this.accountPassword;
    }

    /**
     * List of permissions granted. See `account_privileges` below.
     * 
     */
    @Import(name="accountPrivileges")
    private @Nullable Output<List<LakeAccountAccountPrivilegeArgs>> accountPrivileges;

    /**
     * @return List of permissions granted. See `account_privileges` below.
     * 
     */
    public Optional<Output<List<LakeAccountAccountPrivilegeArgs>>> accountPrivileges() {
        return Optional.ofNullable(this.accountPrivileges);
    }

    /**
     * The type of the account.
     * 
     */
    @Import(name="accountType")
    private @Nullable Output<String> accountType;

    /**
     * @return The type of the account.
     * 
     */
    public Optional<Output<String>> accountType() {
        return Optional.ofNullable(this.accountType);
    }

    /**
     * The DBCluster ID.
     * 
     */
    @Import(name="dbClusterId", required=true)
    private Output<String> dbClusterId;

    /**
     * @return The DBCluster ID.
     * 
     */
    public Output<String> dbClusterId() {
        return this.dbClusterId;
    }

    private LakeAccountArgs() {}

    private LakeAccountArgs(LakeAccountArgs $) {
        this.accountDescription = $.accountDescription;
        this.accountName = $.accountName;
        this.accountPassword = $.accountPassword;
        this.accountPrivileges = $.accountPrivileges;
        this.accountType = $.accountType;
        this.dbClusterId = $.dbClusterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LakeAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LakeAccountArgs $;

        public Builder() {
            $ = new LakeAccountArgs();
        }

        public Builder(LakeAccountArgs defaults) {
            $ = new LakeAccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountDescription The description of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountDescription(@Nullable Output<String> accountDescription) {
            $.accountDescription = accountDescription;
            return this;
        }

        /**
         * @param accountDescription The description of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountDescription(String accountDescription) {
            return accountDescription(Output.of(accountDescription));
        }

        /**
         * @param accountName The name of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param accountPassword AccountPassword.
         * 
         * @return builder
         * 
         */
        public Builder accountPassword(Output<String> accountPassword) {
            $.accountPassword = accountPassword;
            return this;
        }

        /**
         * @param accountPassword AccountPassword.
         * 
         * @return builder
         * 
         */
        public Builder accountPassword(String accountPassword) {
            return accountPassword(Output.of(accountPassword));
        }

        /**
         * @param accountPrivileges List of permissions granted. See `account_privileges` below.
         * 
         * @return builder
         * 
         */
        public Builder accountPrivileges(@Nullable Output<List<LakeAccountAccountPrivilegeArgs>> accountPrivileges) {
            $.accountPrivileges = accountPrivileges;
            return this;
        }

        /**
         * @param accountPrivileges List of permissions granted. See `account_privileges` below.
         * 
         * @return builder
         * 
         */
        public Builder accountPrivileges(List<LakeAccountAccountPrivilegeArgs> accountPrivileges) {
            return accountPrivileges(Output.of(accountPrivileges));
        }

        /**
         * @param accountPrivileges List of permissions granted. See `account_privileges` below.
         * 
         * @return builder
         * 
         */
        public Builder accountPrivileges(LakeAccountAccountPrivilegeArgs... accountPrivileges) {
            return accountPrivileges(List.of(accountPrivileges));
        }

        /**
         * @param accountType The type of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountType(@Nullable Output<String> accountType) {
            $.accountType = accountType;
            return this;
        }

        /**
         * @param accountType The type of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountType(String accountType) {
            return accountType(Output.of(accountType));
        }

        /**
         * @param dbClusterId The DBCluster ID.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterId(Output<String> dbClusterId) {
            $.dbClusterId = dbClusterId;
            return this;
        }

        /**
         * @param dbClusterId The DBCluster ID.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterId(String dbClusterId) {
            return dbClusterId(Output.of(dbClusterId));
        }

        public LakeAccountArgs build() {
            if ($.accountName == null) {
                throw new MissingRequiredPropertyException("LakeAccountArgs", "accountName");
            }
            if ($.accountPassword == null) {
                throw new MissingRequiredPropertyException("LakeAccountArgs", "accountPassword");
            }
            if ($.dbClusterId == null) {
                throw new MissingRequiredPropertyException("LakeAccountArgs", "dbClusterId");
            }
            return $;
        }
    }

}
