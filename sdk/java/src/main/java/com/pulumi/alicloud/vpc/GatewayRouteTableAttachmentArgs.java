// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayRouteTableAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayRouteTableAttachmentArgs Empty = new GatewayRouteTableAttachmentArgs();

    /**
     * Specifies whether to only precheck this request. Default value: `false`.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Specifies whether to only precheck this request. Default value: `false`.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The ID of the IPv4 Gateway instance.
     * 
     */
    @Import(name="ipv4GatewayId", required=true)
    private Output<String> ipv4GatewayId;

    /**
     * @return The ID of the IPv4 Gateway instance.
     * 
     */
    public Output<String> ipv4GatewayId() {
        return this.ipv4GatewayId;
    }

    /**
     * The ID of the Gateway route table to be bound.
     * 
     */
    @Import(name="routeTableId", required=true)
    private Output<String> routeTableId;

    /**
     * @return The ID of the Gateway route table to be bound.
     * 
     */
    public Output<String> routeTableId() {
        return this.routeTableId;
    }

    private GatewayRouteTableAttachmentArgs() {}

    private GatewayRouteTableAttachmentArgs(GatewayRouteTableAttachmentArgs $) {
        this.dryRun = $.dryRun;
        this.ipv4GatewayId = $.ipv4GatewayId;
        this.routeTableId = $.routeTableId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayRouteTableAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayRouteTableAttachmentArgs $;

        public Builder() {
            $ = new GatewayRouteTableAttachmentArgs();
        }

        public Builder(GatewayRouteTableAttachmentArgs defaults) {
            $ = new GatewayRouteTableAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dryRun Specifies whether to only precheck this request. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Specifies whether to only precheck this request. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param ipv4GatewayId The ID of the IPv4 Gateway instance.
         * 
         * @return builder
         * 
         */
        public Builder ipv4GatewayId(Output<String> ipv4GatewayId) {
            $.ipv4GatewayId = ipv4GatewayId;
            return this;
        }

        /**
         * @param ipv4GatewayId The ID of the IPv4 Gateway instance.
         * 
         * @return builder
         * 
         */
        public Builder ipv4GatewayId(String ipv4GatewayId) {
            return ipv4GatewayId(Output.of(ipv4GatewayId));
        }

        /**
         * @param routeTableId The ID of the Gateway route table to be bound.
         * 
         * @return builder
         * 
         */
        public Builder routeTableId(Output<String> routeTableId) {
            $.routeTableId = routeTableId;
            return this;
        }

        /**
         * @param routeTableId The ID of the Gateway route table to be bound.
         * 
         * @return builder
         * 
         */
        public Builder routeTableId(String routeTableId) {
            return routeTableId(Output.of(routeTableId));
        }

        public GatewayRouteTableAttachmentArgs build() {
            if ($.ipv4GatewayId == null) {
                throw new MissingRequiredPropertyException("GatewayRouteTableAttachmentArgs", "ipv4GatewayId");
            }
            if ($.routeTableId == null) {
                throw new MissingRequiredPropertyException("GatewayRouteTableAttachmentArgs", "routeTableId");
            }
            return $;
        }
    }

}
