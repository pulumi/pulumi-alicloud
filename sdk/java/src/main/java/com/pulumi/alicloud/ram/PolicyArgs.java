// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ram;

import com.pulumi.alicloud.ram.inputs.PolicyStatementArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyArgs Empty = new PolicyArgs();

    /**
     * The description of the policy. It can be 1 to 1024 characters in length.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the policy. It can be 1 to 1024 characters in length.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Field `document` has been deprecated from provider version 1.114.0. New field `policy_document` instead.
     * 
     * @deprecated
     * Field &#39;document&#39; has been deprecated from provider version 1.114.0. New field &#39;policy_document&#39; instead.
     * 
     */
    @Deprecated /* Field 'document' has been deprecated from provider version 1.114.0. New field 'policy_document' instead. */
    @Import(name="document")
    private @Nullable Output<String> document;

    /**
     * @return Field `document` has been deprecated from provider version 1.114.0. New field `policy_document` instead.
     * 
     * @deprecated
     * Field &#39;document&#39; has been deprecated from provider version 1.114.0. New field &#39;policy_document&#39; instead.
     * 
     */
    @Deprecated /* Field 'document' has been deprecated from provider version 1.114.0. New field 'policy_document' instead. */
    public Optional<Output<String>> document() {
        return Optional.ofNullable(this.document);
    }

    /**
     * Specifies whether to force delete the Policy. Default value: `false`. Valid values:
     * 
     */
    @Import(name="force")
    private @Nullable Output<Boolean> force;

    /**
     * @return Specifies whether to force delete the Policy. Default value: `false`. Valid values:
     * 
     */
    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * Field `name` has been deprecated from provider version 1.114.0. New field `policy_name` instead.
     * 
     * @deprecated
     * Field &#39;name&#39; has been deprecated from provider version 1.114.0. New field &#39;policy_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'name' has been deprecated from provider version 1.114.0. New field 'policy_name' instead. */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Field `name` has been deprecated from provider version 1.114.0. New field `policy_name` instead.
     * 
     * @deprecated
     * Field &#39;name&#39; has been deprecated from provider version 1.114.0. New field &#39;policy_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'name' has been deprecated from provider version 1.114.0. New field 'policy_name' instead. */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The content of the policy. The maximum length is 6144 bytes.
     * 
     */
    @Import(name="policyDocument")
    private @Nullable Output<String> policyDocument;

    /**
     * @return The content of the policy. The maximum length is 6144 bytes.
     * 
     */
    public Optional<Output<String>> policyDocument() {
        return Optional.ofNullable(this.policyDocument);
    }

    /**
     * The policy name. It can be 1 to 128 characters in length and can contain English letters, digits, and dashes (-).
     * 
     */
    @Import(name="policyName")
    private @Nullable Output<String> policyName;

    /**
     * @return The policy name. It can be 1 to 128 characters in length and can contain English letters, digits, and dashes (-).
     * 
     */
    public Optional<Output<String>> policyName() {
        return Optional.ofNullable(this.policyName);
    }

    /**
     * The automatic rotation mechanism of policy versions can delete historical policy versions. The default value is None.
     * 
     * Currently contains:
     * - None: Turn off the rotation mechanism.
     * - DeleteOldestNonDefaultVersionWhenLimitExceeded: When the number of permission policy versions exceeds the limit, the oldest and inactive version is deleted.
     * 
     */
    @Import(name="rotateStrategy")
    private @Nullable Output<String> rotateStrategy;

    /**
     * @return The automatic rotation mechanism of policy versions can delete historical policy versions. The default value is None.
     * 
     * Currently contains:
     * - None: Turn off the rotation mechanism.
     * - DeleteOldestNonDefaultVersionWhenLimitExceeded: When the number of permission policy versions exceeds the limit, the oldest and inactive version is deleted.
     * 
     */
    public Optional<Output<String>> rotateStrategy() {
        return Optional.ofNullable(this.rotateStrategy);
    }

    /**
     * Field `statement` has been deprecated from provider version 1.49.0. New field `document` instead. See `statement` below.
     * 
     * @deprecated
     * Field &#39;statement&#39; has been deprecated from version 1.49.0, and use field &#39;document&#39; to replace.
     * 
     */
    @Deprecated /* Field 'statement' has been deprecated from version 1.49.0, and use field 'document' to replace.  */
    @Import(name="statements")
    private @Nullable Output<List<PolicyStatementArgs>> statements;

    /**
     * @return Field `statement` has been deprecated from provider version 1.49.0. New field `document` instead. See `statement` below.
     * 
     * @deprecated
     * Field &#39;statement&#39; has been deprecated from version 1.49.0, and use field &#39;document&#39; to replace.
     * 
     */
    @Deprecated /* Field 'statement' has been deprecated from version 1.49.0, and use field 'document' to replace.  */
    public Optional<Output<List<PolicyStatementArgs>>> statements() {
        return Optional.ofNullable(this.statements);
    }

    /**
     * The list of tags on the policy.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The list of tags on the policy.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Field `version` has been deprecated from provider version 1.49.0. New field `document` instead.
     * 
     * @deprecated
     * Field &#39;version&#39; has been deprecated from version 1.49.0, and use field &#39;document&#39; to replace.
     * 
     */
    @Deprecated /* Field 'version' has been deprecated from version 1.49.0, and use field 'document' to replace.  */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Field `version` has been deprecated from provider version 1.49.0. New field `document` instead.
     * 
     * @deprecated
     * Field &#39;version&#39; has been deprecated from version 1.49.0, and use field &#39;document&#39; to replace.
     * 
     */
    @Deprecated /* Field 'version' has been deprecated from version 1.49.0, and use field 'document' to replace.  */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private PolicyArgs() {}

    private PolicyArgs(PolicyArgs $) {
        this.description = $.description;
        this.document = $.document;
        this.force = $.force;
        this.name = $.name;
        this.policyDocument = $.policyDocument;
        this.policyName = $.policyName;
        this.rotateStrategy = $.rotateStrategy;
        this.statements = $.statements;
        this.tags = $.tags;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyArgs $;

        public Builder() {
            $ = new PolicyArgs();
        }

        public Builder(PolicyArgs defaults) {
            $ = new PolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the policy. It can be 1 to 1024 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the policy. It can be 1 to 1024 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param document Field `document` has been deprecated from provider version 1.114.0. New field `policy_document` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;document&#39; has been deprecated from provider version 1.114.0. New field &#39;policy_document&#39; instead.
         * 
         */
        @Deprecated /* Field 'document' has been deprecated from provider version 1.114.0. New field 'policy_document' instead. */
        public Builder document(@Nullable Output<String> document) {
            $.document = document;
            return this;
        }

        /**
         * @param document Field `document` has been deprecated from provider version 1.114.0. New field `policy_document` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;document&#39; has been deprecated from provider version 1.114.0. New field &#39;policy_document&#39; instead.
         * 
         */
        @Deprecated /* Field 'document' has been deprecated from provider version 1.114.0. New field 'policy_document' instead. */
        public Builder document(String document) {
            return document(Output.of(document));
        }

        /**
         * @param force Specifies whether to force delete the Policy. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force Specifies whether to force delete the Policy. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        /**
         * @param name Field `name` has been deprecated from provider version 1.114.0. New field `policy_name` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;name&#39; has been deprecated from provider version 1.114.0. New field &#39;policy_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'name' has been deprecated from provider version 1.114.0. New field 'policy_name' instead. */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Field `name` has been deprecated from provider version 1.114.0. New field `policy_name` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;name&#39; has been deprecated from provider version 1.114.0. New field &#39;policy_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'name' has been deprecated from provider version 1.114.0. New field 'policy_name' instead. */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policyDocument The content of the policy. The maximum length is 6144 bytes.
         * 
         * @return builder
         * 
         */
        public Builder policyDocument(@Nullable Output<String> policyDocument) {
            $.policyDocument = policyDocument;
            return this;
        }

        /**
         * @param policyDocument The content of the policy. The maximum length is 6144 bytes.
         * 
         * @return builder
         * 
         */
        public Builder policyDocument(String policyDocument) {
            return policyDocument(Output.of(policyDocument));
        }

        /**
         * @param policyName The policy name. It can be 1 to 128 characters in length and can contain English letters, digits, and dashes (-).
         * 
         * @return builder
         * 
         */
        public Builder policyName(@Nullable Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        /**
         * @param policyName The policy name. It can be 1 to 128 characters in length and can contain English letters, digits, and dashes (-).
         * 
         * @return builder
         * 
         */
        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        /**
         * @param rotateStrategy The automatic rotation mechanism of policy versions can delete historical policy versions. The default value is None.
         * 
         * Currently contains:
         * - None: Turn off the rotation mechanism.
         * - DeleteOldestNonDefaultVersionWhenLimitExceeded: When the number of permission policy versions exceeds the limit, the oldest and inactive version is deleted.
         * 
         * @return builder
         * 
         */
        public Builder rotateStrategy(@Nullable Output<String> rotateStrategy) {
            $.rotateStrategy = rotateStrategy;
            return this;
        }

        /**
         * @param rotateStrategy The automatic rotation mechanism of policy versions can delete historical policy versions. The default value is None.
         * 
         * Currently contains:
         * - None: Turn off the rotation mechanism.
         * - DeleteOldestNonDefaultVersionWhenLimitExceeded: When the number of permission policy versions exceeds the limit, the oldest and inactive version is deleted.
         * 
         * @return builder
         * 
         */
        public Builder rotateStrategy(String rotateStrategy) {
            return rotateStrategy(Output.of(rotateStrategy));
        }

        /**
         * @param statements Field `statement` has been deprecated from provider version 1.49.0. New field `document` instead. See `statement` below.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;statement&#39; has been deprecated from version 1.49.0, and use field &#39;document&#39; to replace.
         * 
         */
        @Deprecated /* Field 'statement' has been deprecated from version 1.49.0, and use field 'document' to replace.  */
        public Builder statements(@Nullable Output<List<PolicyStatementArgs>> statements) {
            $.statements = statements;
            return this;
        }

        /**
         * @param statements Field `statement` has been deprecated from provider version 1.49.0. New field `document` instead. See `statement` below.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;statement&#39; has been deprecated from version 1.49.0, and use field &#39;document&#39; to replace.
         * 
         */
        @Deprecated /* Field 'statement' has been deprecated from version 1.49.0, and use field 'document' to replace.  */
        public Builder statements(List<PolicyStatementArgs> statements) {
            return statements(Output.of(statements));
        }

        /**
         * @param statements Field `statement` has been deprecated from provider version 1.49.0. New field `document` instead. See `statement` below.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;statement&#39; has been deprecated from version 1.49.0, and use field &#39;document&#39; to replace.
         * 
         */
        @Deprecated /* Field 'statement' has been deprecated from version 1.49.0, and use field 'document' to replace.  */
        public Builder statements(PolicyStatementArgs... statements) {
            return statements(List.of(statements));
        }

        /**
         * @param tags The list of tags on the policy.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of tags on the policy.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param version Field `version` has been deprecated from provider version 1.49.0. New field `document` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;version&#39; has been deprecated from version 1.49.0, and use field &#39;document&#39; to replace.
         * 
         */
        @Deprecated /* Field 'version' has been deprecated from version 1.49.0, and use field 'document' to replace.  */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Field `version` has been deprecated from provider version 1.49.0. New field `document` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;version&#39; has been deprecated from version 1.49.0, and use field &#39;document&#39; to replace.
         * 
         */
        @Deprecated /* Field 'version' has been deprecated from version 1.49.0, and use field 'document' to replace.  */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public PolicyArgs build() {
            return $;
        }
    }

}
