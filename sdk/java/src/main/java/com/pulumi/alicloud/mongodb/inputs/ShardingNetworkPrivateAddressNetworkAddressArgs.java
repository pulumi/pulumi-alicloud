// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mongodb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShardingNetworkPrivateAddressNetworkAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final ShardingNetworkPrivateAddressNetworkAddressArgs Empty = new ShardingNetworkPrivateAddressNetworkAddressArgs();

    /**
     * The remaining duration of the classic network endpoint.
     * 
     */
    @Import(name="expiredTime")
    private @Nullable Output<String> expiredTime;

    /**
     * @return The remaining duration of the classic network endpoint.
     * 
     */
    public Optional<Output<String>> expiredTime() {
        return Optional.ofNullable(this.expiredTime);
    }

    /**
     * The IP address of the instance.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The IP address of the instance.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The connection string of the instance.
     * 
     */
    @Import(name="networkAddress")
    private @Nullable Output<String> networkAddress;

    /**
     * @return The connection string of the instance.
     * 
     */
    public Optional<Output<String>> networkAddress() {
        return Optional.ofNullable(this.networkAddress);
    }

    /**
     * The network type of the instance.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return The network type of the instance.
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * The ID of the Shard node or ConfigServer node.
     * 
     */
    @Import(name="nodeId")
    private @Nullable Output<String> nodeId;

    /**
     * @return The ID of the Shard node or ConfigServer node.
     * 
     */
    public Optional<Output<String>> nodeId() {
        return Optional.ofNullable(this.nodeId);
    }

    /**
     * The type of the node.
     * 
     */
    @Import(name="nodeType")
    private @Nullable Output<String> nodeType;

    /**
     * @return The type of the node.
     * 
     */
    public Optional<Output<String>> nodeType() {
        return Optional.ofNullable(this.nodeType);
    }

    /**
     * The port that is used to connect to the instance.
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return The port that is used to connect to the instance.
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The role of the node.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role of the node.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The ID of the VPC.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The ID of the VPC.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The ID of the vSwitch in the VPC.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of the vSwitch in the VPC.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private ShardingNetworkPrivateAddressNetworkAddressArgs() {}

    private ShardingNetworkPrivateAddressNetworkAddressArgs(ShardingNetworkPrivateAddressNetworkAddressArgs $) {
        this.expiredTime = $.expiredTime;
        this.ipAddress = $.ipAddress;
        this.networkAddress = $.networkAddress;
        this.networkType = $.networkType;
        this.nodeId = $.nodeId;
        this.nodeType = $.nodeType;
        this.port = $.port;
        this.role = $.role;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShardingNetworkPrivateAddressNetworkAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShardingNetworkPrivateAddressNetworkAddressArgs $;

        public Builder() {
            $ = new ShardingNetworkPrivateAddressNetworkAddressArgs();
        }

        public Builder(ShardingNetworkPrivateAddressNetworkAddressArgs defaults) {
            $ = new ShardingNetworkPrivateAddressNetworkAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expiredTime The remaining duration of the classic network endpoint.
         * 
         * @return builder
         * 
         */
        public Builder expiredTime(@Nullable Output<String> expiredTime) {
            $.expiredTime = expiredTime;
            return this;
        }

        /**
         * @param expiredTime The remaining duration of the classic network endpoint.
         * 
         * @return builder
         * 
         */
        public Builder expiredTime(String expiredTime) {
            return expiredTime(Output.of(expiredTime));
        }

        /**
         * @param ipAddress The IP address of the instance.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The IP address of the instance.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param networkAddress The connection string of the instance.
         * 
         * @return builder
         * 
         */
        public Builder networkAddress(@Nullable Output<String> networkAddress) {
            $.networkAddress = networkAddress;
            return this;
        }

        /**
         * @param networkAddress The connection string of the instance.
         * 
         * @return builder
         * 
         */
        public Builder networkAddress(String networkAddress) {
            return networkAddress(Output.of(networkAddress));
        }

        /**
         * @param networkType The network type of the instance.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The network type of the instance.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param nodeId The ID of the Shard node or ConfigServer node.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(@Nullable Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeId The ID of the Shard node or ConfigServer node.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        /**
         * @param nodeType The type of the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeType(@Nullable Output<String> nodeType) {
            $.nodeType = nodeType;
            return this;
        }

        /**
         * @param nodeType The type of the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeType(String nodeType) {
            return nodeType(Output.of(nodeType));
        }

        /**
         * @param port The port that is used to connect to the instance.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port that is used to connect to the instance.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param role The role of the node.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role of the node.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param vpcId The ID of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of the vSwitch in the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the vSwitch in the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public ShardingNetworkPrivateAddressNetworkAddressArgs build() {
            return $;
        }
    }

}
