// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.alicloud.ecs.inputs.ImageDiskDeviceMappingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageState extends com.pulumi.resources.ResourceArgs {

    public static final ImageState Empty = new ImageState();

    /**
     * Specifies the architecture of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `i386` , Default is `x86_64`.
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<String> architecture;

    /**
     * @return Specifies the architecture of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `i386` , Default is `x86_64`.
     * 
     */
    public Optional<Output<String>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    @Import(name="deleteAutoSnapshot")
    private @Nullable Output<Boolean> deleteAutoSnapshot;

    public Optional<Output<Boolean>> deleteAutoSnapshot() {
        return Optional.ofNullable(this.deleteAutoSnapshot);
    }

    /**
     * The description of the image. It must be 2 to 256 characters in length and must not start with http:// or https://. Default value: null.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the image. It must be 2 to 256 characters in length and must not start with http:// or https://. Default value: null.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Description of the system with disks and snapshots under the image.
     * 
     */
    @Import(name="diskDeviceMappings")
    private @Nullable Output<List<ImageDiskDeviceMappingArgs>> diskDeviceMappings;

    /**
     * @return Description of the system with disks and snapshots under the image.
     * 
     */
    public Optional<Output<List<ImageDiskDeviceMappingArgs>>> diskDeviceMappings() {
        return Optional.ofNullable(this.diskDeviceMappings);
    }

    /**
     * Indicates whether to force delete the custom image, Default is `false`.
     * - true：Force deletes the custom image, regardless of whether the image is currently being used by other instances.
     * - false：Verifies that the image is not currently in use by any other instances before deleting the image.
     * 
     */
    @Import(name="force")
    private @Nullable Output<Boolean> force;

    /**
     * @return Indicates whether to force delete the custom image, Default is `false`.
     * - true：Force deletes the custom image, regardless of whether the image is currently being used by other instances.
     * - false：Verifies that the image is not currently in use by any other instances before deleting the image.
     * 
     */
    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * The image name. It must be 2 to 128 characters in length, and must begin with a letter or Chinese character (beginning with http:// or https:// is not allowed). It can contain digits, colons (:), underscores (_), or hyphens (-). Default value: null.
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return The image name. It must be 2 to 128 characters in length, and must begin with a letter or Chinese character (beginning with http:// or https:// is not allowed). It can contain digits, colons (:), underscores (_), or hyphens (-). Default value: null.
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * The instance ID.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The instance ID.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * @deprecated
     * Attribute &#39;name&#39; has been deprecated from version 1.69.0. Use `image_name` instead.
     * 
     */
    @Deprecated /* Attribute 'name' has been deprecated from version 1.69.0. Use `image_name` instead. */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @deprecated
     * Attribute &#39;name&#39; has been deprecated from version 1.69.0. Use `image_name` instead.
     * 
     */
    @Deprecated /* Attribute 'name' has been deprecated from version 1.69.0. Use `image_name` instead. */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The distribution of the operating system for the system disk in the custom image.
     * If you specify a data disk snapshot to create the system disk of the custom image, you must use the Platform parameter
     * to specify the distribution of the operating system for the system disk. Default value: Others Linux.
     * More valid values refer to [CreateImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/createimage)
     * **NOTE**: It&#39;s default value is Ubuntu before version 1.197.0.
     * 
     */
    @Import(name="platform")
    private @Nullable Output<String> platform;

    /**
     * @return The distribution of the operating system for the system disk in the custom image.
     * If you specify a data disk snapshot to create the system disk of the custom image, you must use the Platform parameter
     * to specify the distribution of the operating system for the system disk. Default value: Others Linux.
     * More valid values refer to [CreateImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/createimage)
     * **NOTE**: It&#39;s default value is Ubuntu before version 1.197.0.
     * 
     */
    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * The ID of the enterprise resource group to which a custom image belongs
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the enterprise resource group to which a custom image belongs
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Specifies a snapshot that is used to create a combined custom image.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return Specifies a snapshot that is used to create a combined custom image.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * The tag value of an image. The value of N ranges from 1 to 20.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return The tag value of an image. The value of N ranges from 1 to 20.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ImageState() {}

    private ImageState(ImageState $) {
        this.architecture = $.architecture;
        this.deleteAutoSnapshot = $.deleteAutoSnapshot;
        this.description = $.description;
        this.diskDeviceMappings = $.diskDeviceMappings;
        this.force = $.force;
        this.imageName = $.imageName;
        this.instanceId = $.instanceId;
        this.name = $.name;
        this.platform = $.platform;
        this.resourceGroupId = $.resourceGroupId;
        this.snapshotId = $.snapshotId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageState $;

        public Builder() {
            $ = new ImageState();
        }

        public Builder(ImageState defaults) {
            $ = new ImageState(Objects.requireNonNull(defaults));
        }

        /**
         * @param architecture Specifies the architecture of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `i386` , Default is `x86_64`.
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture Specifies the architecture of the system disk after you specify a data disk snapshot as the data source of the system disk for creating an image. Valid values: `i386` , Default is `x86_64`.
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        public Builder deleteAutoSnapshot(@Nullable Output<Boolean> deleteAutoSnapshot) {
            $.deleteAutoSnapshot = deleteAutoSnapshot;
            return this;
        }

        public Builder deleteAutoSnapshot(Boolean deleteAutoSnapshot) {
            return deleteAutoSnapshot(Output.of(deleteAutoSnapshot));
        }

        /**
         * @param description The description of the image. It must be 2 to 256 characters in length and must not start with http:// or https://. Default value: null.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the image. It must be 2 to 256 characters in length and must not start with http:// or https://. Default value: null.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diskDeviceMappings Description of the system with disks and snapshots under the image.
         * 
         * @return builder
         * 
         */
        public Builder diskDeviceMappings(@Nullable Output<List<ImageDiskDeviceMappingArgs>> diskDeviceMappings) {
            $.diskDeviceMappings = diskDeviceMappings;
            return this;
        }

        /**
         * @param diskDeviceMappings Description of the system with disks and snapshots under the image.
         * 
         * @return builder
         * 
         */
        public Builder diskDeviceMappings(List<ImageDiskDeviceMappingArgs> diskDeviceMappings) {
            return diskDeviceMappings(Output.of(diskDeviceMappings));
        }

        /**
         * @param diskDeviceMappings Description of the system with disks and snapshots under the image.
         * 
         * @return builder
         * 
         */
        public Builder diskDeviceMappings(ImageDiskDeviceMappingArgs... diskDeviceMappings) {
            return diskDeviceMappings(List.of(diskDeviceMappings));
        }

        /**
         * @param force Indicates whether to force delete the custom image, Default is `false`.
         * - true：Force deletes the custom image, regardless of whether the image is currently being used by other instances.
         * - false：Verifies that the image is not currently in use by any other instances before deleting the image.
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force Indicates whether to force delete the custom image, Default is `false`.
         * - true：Force deletes the custom image, regardless of whether the image is currently being used by other instances.
         * - false：Verifies that the image is not currently in use by any other instances before deleting the image.
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        /**
         * @param imageName The image name. It must be 2 to 128 characters in length, and must begin with a letter or Chinese character (beginning with http:// or https:// is not allowed). It can contain digits, colons (:), underscores (_), or hyphens (-). Default value: null.
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName The image name. It must be 2 to 128 characters in length, and must begin with a letter or Chinese character (beginning with http:// or https:// is not allowed). It can contain digits, colons (:), underscores (_), or hyphens (-). Default value: null.
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param instanceId The instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;name&#39; has been deprecated from version 1.69.0. Use `image_name` instead.
         * 
         */
        @Deprecated /* Attribute 'name' has been deprecated from version 1.69.0. Use `image_name` instead. */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Attribute &#39;name&#39; has been deprecated from version 1.69.0. Use `image_name` instead.
         * 
         */
        @Deprecated /* Attribute 'name' has been deprecated from version 1.69.0. Use `image_name` instead. */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param platform The distribution of the operating system for the system disk in the custom image.
         * If you specify a data disk snapshot to create the system disk of the custom image, you must use the Platform parameter
         * to specify the distribution of the operating system for the system disk. Default value: Others Linux.
         * More valid values refer to [CreateImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/createimage)
         * **NOTE**: It&#39;s default value is Ubuntu before version 1.197.0.
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform The distribution of the operating system for the system disk in the custom image.
         * If you specify a data disk snapshot to create the system disk of the custom image, you must use the Platform parameter
         * to specify the distribution of the operating system for the system disk. Default value: Others Linux.
         * More valid values refer to [CreateImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/createimage)
         * **NOTE**: It&#39;s default value is Ubuntu before version 1.197.0.
         * 
         * @return builder
         * 
         */
        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param resourceGroupId The ID of the enterprise resource group to which a custom image belongs
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the enterprise resource group to which a custom image belongs
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param snapshotId Specifies a snapshot that is used to create a combined custom image.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId Specifies a snapshot that is used to create a combined custom image.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param tags The tag value of an image. The value of N ranges from 1 to 20.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag value of an image. The value of N ranges from 1 to 20.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        public ImageState build() {
            return $;
        }
    }

}
