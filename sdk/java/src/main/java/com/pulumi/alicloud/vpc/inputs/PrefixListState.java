// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.inputs;

import com.pulumi.alicloud.vpc.inputs.PrefixListEntryArgs;
import com.pulumi.alicloud.vpc.inputs.PrefixListPrefixListAssociationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrefixListState extends com.pulumi.resources.ResourceArgs {

    public static final PrefixListState Empty = new PrefixListState();

    /**
     * The time when the prefix list was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The time when the prefix list was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The CIDR address block list of the prefix list.See the following `Block Entrys`.
     * 
     */
    @Import(name="entrys")
    private @Nullable Output<List<PrefixListEntryArgs>> entrys;

    /**
     * @return The CIDR address block list of the prefix list.See the following `Block Entrys`.
     * 
     */
    public Optional<Output<List<PrefixListEntryArgs>>> entrys() {
        return Optional.ofNullable(this.entrys);
    }

    /**
     * The IP version of the prefix list. Value:-**IPV4**:IPv4 version.-**IPV6**:IPv6 version.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<String> ipVersion;

    /**
     * @return The IP version of the prefix list. Value:-**IPV4**:IPv4 version.-**IPV6**:IPv6 version.
     * 
     */
    public Optional<Output<String>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The maximum number of entries for CIDR address blocks in the prefix list.
     * 
     */
    @Import(name="maxEntries")
    private @Nullable Output<Integer> maxEntries;

    /**
     * @return The maximum number of entries for CIDR address blocks in the prefix list.
     * 
     */
    public Optional<Output<Integer>> maxEntries() {
        return Optional.ofNullable(this.maxEntries);
    }

    /**
     * The association list information of the prefix list.
     * 
     */
    @Import(name="prefixListAssociations")
    private @Nullable Output<List<PrefixListPrefixListAssociationArgs>> prefixListAssociations;

    /**
     * @return The association list information of the prefix list.
     * 
     */
    public Optional<Output<List<PrefixListPrefixListAssociationArgs>>> prefixListAssociations() {
        return Optional.ofNullable(this.prefixListAssociations);
    }

    /**
     * The description of the prefix list.It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with `http://` or `https://`.
     * 
     */
    @Import(name="prefixListDescription")
    private @Nullable Output<String> prefixListDescription;

    /**
     * @return The description of the prefix list.It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> prefixListDescription() {
        return Optional.ofNullable(this.prefixListDescription);
    }

    /**
     * The ID of the query Prefix List.
     * 
     */
    @Import(name="prefixListId")
    private @Nullable Output<String> prefixListId;

    /**
     * @return The ID of the query Prefix List.
     * 
     */
    public Optional<Output<String>> prefixListId() {
        return Optional.ofNullable(this.prefixListId);
    }

    /**
     * The name of the prefix list. The name must be 2 to 128 characters in length, and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
     * 
     */
    @Import(name="prefixListName")
    private @Nullable Output<String> prefixListName;

    /**
     * @return The name of the prefix list. The name must be 2 to 128 characters in length, and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
     * 
     */
    public Optional<Output<String>> prefixListName() {
        return Optional.ofNullable(this.prefixListName);
    }

    /**
     * The ID of the resource group to which the PrefixList belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group to which the PrefixList belongs.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The share type of the prefix list. Value:-**Shared**: indicates that the prefix list is a Shared prefix list.-Null: indicates that the prefix list is not a shared prefix list.
     * 
     */
    @Import(name="shareType")
    private @Nullable Output<String> shareType;

    /**
     * @return The share type of the prefix list. Value:-**Shared**: indicates that the prefix list is a Shared prefix list.-Null: indicates that the prefix list is not a shared prefix list.
     * 
     */
    public Optional<Output<String>> shareType() {
        return Optional.ofNullable(this.shareType);
    }

    /**
     * Resource attribute fields that represent the status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Resource attribute fields that represent the status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tags of PrefixList.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tags of PrefixList.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PrefixListState() {}

    private PrefixListState(PrefixListState $) {
        this.createTime = $.createTime;
        this.entrys = $.entrys;
        this.ipVersion = $.ipVersion;
        this.maxEntries = $.maxEntries;
        this.prefixListAssociations = $.prefixListAssociations;
        this.prefixListDescription = $.prefixListDescription;
        this.prefixListId = $.prefixListId;
        this.prefixListName = $.prefixListName;
        this.resourceGroupId = $.resourceGroupId;
        this.shareType = $.shareType;
        this.status = $.status;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrefixListState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrefixListState $;

        public Builder() {
            $ = new PrefixListState();
        }

        public Builder(PrefixListState defaults) {
            $ = new PrefixListState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The time when the prefix list was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The time when the prefix list was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param entrys The CIDR address block list of the prefix list.See the following `Block Entrys`.
         * 
         * @return builder
         * 
         */
        public Builder entrys(@Nullable Output<List<PrefixListEntryArgs>> entrys) {
            $.entrys = entrys;
            return this;
        }

        /**
         * @param entrys The CIDR address block list of the prefix list.See the following `Block Entrys`.
         * 
         * @return builder
         * 
         */
        public Builder entrys(List<PrefixListEntryArgs> entrys) {
            return entrys(Output.of(entrys));
        }

        /**
         * @param entrys The CIDR address block list of the prefix list.See the following `Block Entrys`.
         * 
         * @return builder
         * 
         */
        public Builder entrys(PrefixListEntryArgs... entrys) {
            return entrys(List.of(entrys));
        }

        /**
         * @param ipVersion The IP version of the prefix list. Value:-**IPV4**:IPv4 version.-**IPV6**:IPv6 version.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<String> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP version of the prefix list. Value:-**IPV4**:IPv4 version.-**IPV6**:IPv6 version.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(String ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param maxEntries The maximum number of entries for CIDR address blocks in the prefix list.
         * 
         * @return builder
         * 
         */
        public Builder maxEntries(@Nullable Output<Integer> maxEntries) {
            $.maxEntries = maxEntries;
            return this;
        }

        /**
         * @param maxEntries The maximum number of entries for CIDR address blocks in the prefix list.
         * 
         * @return builder
         * 
         */
        public Builder maxEntries(Integer maxEntries) {
            return maxEntries(Output.of(maxEntries));
        }

        /**
         * @param prefixListAssociations The association list information of the prefix list.
         * 
         * @return builder
         * 
         */
        public Builder prefixListAssociations(@Nullable Output<List<PrefixListPrefixListAssociationArgs>> prefixListAssociations) {
            $.prefixListAssociations = prefixListAssociations;
            return this;
        }

        /**
         * @param prefixListAssociations The association list information of the prefix list.
         * 
         * @return builder
         * 
         */
        public Builder prefixListAssociations(List<PrefixListPrefixListAssociationArgs> prefixListAssociations) {
            return prefixListAssociations(Output.of(prefixListAssociations));
        }

        /**
         * @param prefixListAssociations The association list information of the prefix list.
         * 
         * @return builder
         * 
         */
        public Builder prefixListAssociations(PrefixListPrefixListAssociationArgs... prefixListAssociations) {
            return prefixListAssociations(List.of(prefixListAssociations));
        }

        /**
         * @param prefixListDescription The description of the prefix list.It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder prefixListDescription(@Nullable Output<String> prefixListDescription) {
            $.prefixListDescription = prefixListDescription;
            return this;
        }

        /**
         * @param prefixListDescription The description of the prefix list.It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder prefixListDescription(String prefixListDescription) {
            return prefixListDescription(Output.of(prefixListDescription));
        }

        /**
         * @param prefixListId The ID of the query Prefix List.
         * 
         * @return builder
         * 
         */
        public Builder prefixListId(@Nullable Output<String> prefixListId) {
            $.prefixListId = prefixListId;
            return this;
        }

        /**
         * @param prefixListId The ID of the query Prefix List.
         * 
         * @return builder
         * 
         */
        public Builder prefixListId(String prefixListId) {
            return prefixListId(Output.of(prefixListId));
        }

        /**
         * @param prefixListName The name of the prefix list. The name must be 2 to 128 characters in length, and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder prefixListName(@Nullable Output<String> prefixListName) {
            $.prefixListName = prefixListName;
            return this;
        }

        /**
         * @param prefixListName The name of the prefix list. The name must be 2 to 128 characters in length, and must start with a letter. It can contain digits, periods (.), underscores (_), and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder prefixListName(String prefixListName) {
            return prefixListName(Output.of(prefixListName));
        }

        /**
         * @param resourceGroupId The ID of the resource group to which the PrefixList belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group to which the PrefixList belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param shareType The share type of the prefix list. Value:-**Shared**: indicates that the prefix list is a Shared prefix list.-Null: indicates that the prefix list is not a shared prefix list.
         * 
         * @return builder
         * 
         */
        public Builder shareType(@Nullable Output<String> shareType) {
            $.shareType = shareType;
            return this;
        }

        /**
         * @param shareType The share type of the prefix list. Value:-**Shared**: indicates that the prefix list is a Shared prefix list.-Null: indicates that the prefix list is not a shared prefix list.
         * 
         * @return builder
         * 
         */
        public Builder shareType(String shareType) {
            return shareType(Output.of(shareType));
        }

        /**
         * @param status Resource attribute fields that represent the status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Resource attribute fields that represent the status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags The tags of PrefixList.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags of PrefixList.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public PrefixListState build() {
            return $;
        }
    }

}
