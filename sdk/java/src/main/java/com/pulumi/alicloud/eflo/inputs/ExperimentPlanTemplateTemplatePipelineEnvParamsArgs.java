// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExperimentPlanTemplateTemplatePipelineEnvParamsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExperimentPlanTemplateTemplatePipelineEnvParamsArgs Empty = new ExperimentPlanTemplateTemplatePipelineEnvParamsArgs();

    /**
     * Number of central processing units (CPUs) allocated. This parameter affects the processing power of the computation, especially in tasks that require a large amount of parallel processing.
     * 
     */
    @Import(name="cpuPerWorker", required=true)
    private Output<Integer> cpuPerWorker;

    /**
     * @return Number of central processing units (CPUs) allocated. This parameter affects the processing power of the computation, especially in tasks that require a large amount of parallel processing.
     * 
     */
    public Output<Integer> cpuPerWorker() {
        return this.cpuPerWorker;
    }

    /**
     * The version of CUDA(Compute Unified Device Architecture) used. CUDA is a parallel computing platform and programming model provided by NVIDIA. A specific version may affect the available GPU functions and performance optimization.
     * 
     */
    @Import(name="cudaVersion")
    private @Nullable Output<String> cudaVersion;

    /**
     * @return The version of CUDA(Compute Unified Device Architecture) used. CUDA is a parallel computing platform and programming model provided by NVIDIA. A specific version may affect the available GPU functions and performance optimization.
     * 
     */
    public Optional<Output<String>> cudaVersion() {
        return Optional.ofNullable(this.cudaVersion);
    }

    /**
     * The version of the GPU driver used. Driver version may affect GPU performance and compatibility, so it is important to ensure that the correct version is used
     * 
     */
    @Import(name="gpuDriverVersion")
    private @Nullable Output<String> gpuDriverVersion;

    /**
     * @return The version of the GPU driver used. Driver version may affect GPU performance and compatibility, so it is important to ensure that the correct version is used
     * 
     */
    public Optional<Output<String>> gpuDriverVersion() {
        return Optional.ofNullable(this.gpuDriverVersion);
    }

    /**
     * Number of graphics processing units (GPUs). GPUs are a key component in deep learning and large-scale data processing, so this parameter is very important for tasks that require graphics-accelerated computing.
     * 
     */
    @Import(name="gpuPerWorker", required=true)
    private Output<Integer> gpuPerWorker;

    /**
     * @return Number of graphics processing units (GPUs). GPUs are a key component in deep learning and large-scale data processing, so this parameter is very important for tasks that require graphics-accelerated computing.
     * 
     */
    public Output<Integer> gpuPerWorker() {
        return this.gpuPerWorker;
    }

    /**
     * The amount of memory available. Memory size has an important impact on the performance and stability of the program, especially when dealing with large data sets or high-dimensional data.
     * 
     */
    @Import(name="memoryPerWorker", required=true)
    private Output<Integer> memoryPerWorker;

    /**
     * @return The amount of memory available. Memory size has an important impact on the performance and stability of the program, especially when dealing with large data sets or high-dimensional data.
     * 
     */
    public Output<Integer> memoryPerWorker() {
        return this.memoryPerWorker;
    }

    /**
     * The NVIDIA Collective Communications Library(NCCL) version used. NCCL is a library for multi-GPU and multi-node communication. This parameter is particularly important for optimizing data transmission in distributed computing.
     * 
     */
    @Import(name="ncclVersion")
    private @Nullable Output<String> ncclVersion;

    /**
     * @return The NVIDIA Collective Communications Library(NCCL) version used. NCCL is a library for multi-GPU and multi-node communication. This parameter is particularly important for optimizing data transmission in distributed computing.
     * 
     */
    public Optional<Output<String>> ncclVersion() {
        return Optional.ofNullable(this.ncclVersion);
    }

    /**
     * The version of the PyTorch framework used. PyTorch is a widely used deep learning library, and differences between versions may affect the performance and functional support of model training and inference.
     * 
     */
    @Import(name="pyTorchVersion")
    private @Nullable Output<String> pyTorchVersion;

    /**
     * @return The version of the PyTorch framework used. PyTorch is a widely used deep learning library, and differences between versions may affect the performance and functional support of model training and inference.
     * 
     */
    public Optional<Output<String>> pyTorchVersion() {
        return Optional.ofNullable(this.pyTorchVersion);
    }

    /**
     * Shared memory GB allocation
     * 
     */
    @Import(name="shareMemory", required=true)
    private Output<Integer> shareMemory;

    /**
     * @return Shared memory GB allocation
     * 
     */
    public Output<Integer> shareMemory() {
        return this.shareMemory;
    }

    /**
     * The total number of nodes. This parameter directly affects the parallelism and computing speed of the task, and a higher number of working nodes usually accelerates the completion of the task.
     * 
     */
    @Import(name="workerNum", required=true)
    private Output<Integer> workerNum;

    /**
     * @return The total number of nodes. This parameter directly affects the parallelism and computing speed of the task, and a higher number of working nodes usually accelerates the completion of the task.
     * 
     */
    public Output<Integer> workerNum() {
        return this.workerNum;
    }

    private ExperimentPlanTemplateTemplatePipelineEnvParamsArgs() {}

    private ExperimentPlanTemplateTemplatePipelineEnvParamsArgs(ExperimentPlanTemplateTemplatePipelineEnvParamsArgs $) {
        this.cpuPerWorker = $.cpuPerWorker;
        this.cudaVersion = $.cudaVersion;
        this.gpuDriverVersion = $.gpuDriverVersion;
        this.gpuPerWorker = $.gpuPerWorker;
        this.memoryPerWorker = $.memoryPerWorker;
        this.ncclVersion = $.ncclVersion;
        this.pyTorchVersion = $.pyTorchVersion;
        this.shareMemory = $.shareMemory;
        this.workerNum = $.workerNum;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExperimentPlanTemplateTemplatePipelineEnvParamsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExperimentPlanTemplateTemplatePipelineEnvParamsArgs $;

        public Builder() {
            $ = new ExperimentPlanTemplateTemplatePipelineEnvParamsArgs();
        }

        public Builder(ExperimentPlanTemplateTemplatePipelineEnvParamsArgs defaults) {
            $ = new ExperimentPlanTemplateTemplatePipelineEnvParamsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpuPerWorker Number of central processing units (CPUs) allocated. This parameter affects the processing power of the computation, especially in tasks that require a large amount of parallel processing.
         * 
         * @return builder
         * 
         */
        public Builder cpuPerWorker(Output<Integer> cpuPerWorker) {
            $.cpuPerWorker = cpuPerWorker;
            return this;
        }

        /**
         * @param cpuPerWorker Number of central processing units (CPUs) allocated. This parameter affects the processing power of the computation, especially in tasks that require a large amount of parallel processing.
         * 
         * @return builder
         * 
         */
        public Builder cpuPerWorker(Integer cpuPerWorker) {
            return cpuPerWorker(Output.of(cpuPerWorker));
        }

        /**
         * @param cudaVersion The version of CUDA(Compute Unified Device Architecture) used. CUDA is a parallel computing platform and programming model provided by NVIDIA. A specific version may affect the available GPU functions and performance optimization.
         * 
         * @return builder
         * 
         */
        public Builder cudaVersion(@Nullable Output<String> cudaVersion) {
            $.cudaVersion = cudaVersion;
            return this;
        }

        /**
         * @param cudaVersion The version of CUDA(Compute Unified Device Architecture) used. CUDA is a parallel computing platform and programming model provided by NVIDIA. A specific version may affect the available GPU functions and performance optimization.
         * 
         * @return builder
         * 
         */
        public Builder cudaVersion(String cudaVersion) {
            return cudaVersion(Output.of(cudaVersion));
        }

        /**
         * @param gpuDriverVersion The version of the GPU driver used. Driver version may affect GPU performance and compatibility, so it is important to ensure that the correct version is used
         * 
         * @return builder
         * 
         */
        public Builder gpuDriverVersion(@Nullable Output<String> gpuDriverVersion) {
            $.gpuDriverVersion = gpuDriverVersion;
            return this;
        }

        /**
         * @param gpuDriverVersion The version of the GPU driver used. Driver version may affect GPU performance and compatibility, so it is important to ensure that the correct version is used
         * 
         * @return builder
         * 
         */
        public Builder gpuDriverVersion(String gpuDriverVersion) {
            return gpuDriverVersion(Output.of(gpuDriverVersion));
        }

        /**
         * @param gpuPerWorker Number of graphics processing units (GPUs). GPUs are a key component in deep learning and large-scale data processing, so this parameter is very important for tasks that require graphics-accelerated computing.
         * 
         * @return builder
         * 
         */
        public Builder gpuPerWorker(Output<Integer> gpuPerWorker) {
            $.gpuPerWorker = gpuPerWorker;
            return this;
        }

        /**
         * @param gpuPerWorker Number of graphics processing units (GPUs). GPUs are a key component in deep learning and large-scale data processing, so this parameter is very important for tasks that require graphics-accelerated computing.
         * 
         * @return builder
         * 
         */
        public Builder gpuPerWorker(Integer gpuPerWorker) {
            return gpuPerWorker(Output.of(gpuPerWorker));
        }

        /**
         * @param memoryPerWorker The amount of memory available. Memory size has an important impact on the performance and stability of the program, especially when dealing with large data sets or high-dimensional data.
         * 
         * @return builder
         * 
         */
        public Builder memoryPerWorker(Output<Integer> memoryPerWorker) {
            $.memoryPerWorker = memoryPerWorker;
            return this;
        }

        /**
         * @param memoryPerWorker The amount of memory available. Memory size has an important impact on the performance and stability of the program, especially when dealing with large data sets or high-dimensional data.
         * 
         * @return builder
         * 
         */
        public Builder memoryPerWorker(Integer memoryPerWorker) {
            return memoryPerWorker(Output.of(memoryPerWorker));
        }

        /**
         * @param ncclVersion The NVIDIA Collective Communications Library(NCCL) version used. NCCL is a library for multi-GPU and multi-node communication. This parameter is particularly important for optimizing data transmission in distributed computing.
         * 
         * @return builder
         * 
         */
        public Builder ncclVersion(@Nullable Output<String> ncclVersion) {
            $.ncclVersion = ncclVersion;
            return this;
        }

        /**
         * @param ncclVersion The NVIDIA Collective Communications Library(NCCL) version used. NCCL is a library for multi-GPU and multi-node communication. This parameter is particularly important for optimizing data transmission in distributed computing.
         * 
         * @return builder
         * 
         */
        public Builder ncclVersion(String ncclVersion) {
            return ncclVersion(Output.of(ncclVersion));
        }

        /**
         * @param pyTorchVersion The version of the PyTorch framework used. PyTorch is a widely used deep learning library, and differences between versions may affect the performance and functional support of model training and inference.
         * 
         * @return builder
         * 
         */
        public Builder pyTorchVersion(@Nullable Output<String> pyTorchVersion) {
            $.pyTorchVersion = pyTorchVersion;
            return this;
        }

        /**
         * @param pyTorchVersion The version of the PyTorch framework used. PyTorch is a widely used deep learning library, and differences between versions may affect the performance and functional support of model training and inference.
         * 
         * @return builder
         * 
         */
        public Builder pyTorchVersion(String pyTorchVersion) {
            return pyTorchVersion(Output.of(pyTorchVersion));
        }

        /**
         * @param shareMemory Shared memory GB allocation
         * 
         * @return builder
         * 
         */
        public Builder shareMemory(Output<Integer> shareMemory) {
            $.shareMemory = shareMemory;
            return this;
        }

        /**
         * @param shareMemory Shared memory GB allocation
         * 
         * @return builder
         * 
         */
        public Builder shareMemory(Integer shareMemory) {
            return shareMemory(Output.of(shareMemory));
        }

        /**
         * @param workerNum The total number of nodes. This parameter directly affects the parallelism and computing speed of the task, and a higher number of working nodes usually accelerates the completion of the task.
         * 
         * @return builder
         * 
         */
        public Builder workerNum(Output<Integer> workerNum) {
            $.workerNum = workerNum;
            return this;
        }

        /**
         * @param workerNum The total number of nodes. This parameter directly affects the parallelism and computing speed of the task, and a higher number of working nodes usually accelerates the completion of the task.
         * 
         * @return builder
         * 
         */
        public Builder workerNum(Integer workerNum) {
            return workerNum(Output.of(workerNum));
        }

        public ExperimentPlanTemplateTemplatePipelineEnvParamsArgs build() {
            if ($.cpuPerWorker == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateTemplatePipelineEnvParamsArgs", "cpuPerWorker");
            }
            if ($.gpuPerWorker == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateTemplatePipelineEnvParamsArgs", "gpuPerWorker");
            }
            if ($.memoryPerWorker == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateTemplatePipelineEnvParamsArgs", "memoryPerWorker");
            }
            if ($.shareMemory == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateTemplatePipelineEnvParamsArgs", "shareMemory");
            }
            if ($.workerNum == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateTemplatePipelineEnvParamsArgs", "workerNum");
            }
            return $;
        }
    }

}
