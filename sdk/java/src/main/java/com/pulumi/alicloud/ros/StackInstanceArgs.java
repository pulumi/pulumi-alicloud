// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ros;

import com.pulumi.alicloud.ros.inputs.StackInstanceParameterOverrideArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StackInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final StackInstanceArgs Empty = new StackInstanceArgs();

    /**
     * The operation description.
     * 
     */
    @Import(name="operationDescription")
    private @Nullable Output<String> operationDescription;

    /**
     * @return The operation description.
     * 
     */
    public Optional<Output<String>> operationDescription() {
        return Optional.ofNullable(this.operationDescription);
    }

    /**
     * The operation preferences. The operation settings. The following fields are supported:
     * 
     */
    @Import(name="operationPreferences")
    private @Nullable Output<String> operationPreferences;

    /**
     * @return The operation preferences. The operation settings. The following fields are supported:
     * 
     */
    public Optional<Output<String>> operationPreferences() {
        return Optional.ofNullable(this.operationPreferences);
    }

    /**
     * ParameterOverrides. See the following `Block parameter_overrides`.
     * 
     */
    @Import(name="parameterOverrides")
    private @Nullable Output<List<StackInstanceParameterOverrideArgs>> parameterOverrides;

    /**
     * @return ParameterOverrides. See the following `Block parameter_overrides`.
     * 
     */
    public Optional<Output<List<StackInstanceParameterOverrideArgs>>> parameterOverrides() {
        return Optional.ofNullable(this.parameterOverrides);
    }

    /**
     * Specifies whether to retain the stack corresponding to the stack instance.Default value `false`. **NOTE:** When `retain_stacks` is `true`, the stack is retained. If the stack is retained, the corresponding stack is not deleted when the stack instance is deleted from the stack group.
     * 
     */
    @Import(name="retainStacks")
    private @Nullable Output<Boolean> retainStacks;

    /**
     * @return Specifies whether to retain the stack corresponding to the stack instance.Default value `false`. **NOTE:** When `retain_stacks` is `true`, the stack is retained. If the stack is retained, the corresponding stack is not deleted when the stack instance is deleted from the stack group.
     * 
     */
    public Optional<Output<Boolean>> retainStacks() {
        return Optional.ofNullable(this.retainStacks);
    }

    /**
     * The name of the stack group.
     * 
     */
    @Import(name="stackGroupName", required=true)
    private Output<String> stackGroupName;

    /**
     * @return The name of the stack group.
     * 
     */
    public Output<String> stackGroupName() {
        return this.stackGroupName;
    }

    /**
     * The account to which the stack instance belongs.
     * 
     */
    @Import(name="stackInstanceAccountId", required=true)
    private Output<String> stackInstanceAccountId;

    /**
     * @return The account to which the stack instance belongs.
     * 
     */
    public Output<String> stackInstanceAccountId() {
        return this.stackInstanceAccountId;
    }

    /**
     * The region of the stack instance.
     * 
     */
    @Import(name="stackInstanceRegionId", required=true)
    private Output<String> stackInstanceRegionId;

    /**
     * @return The region of the stack instance.
     * 
     */
    public Output<String> stackInstanceRegionId() {
        return this.stackInstanceRegionId;
    }

    /**
     * The timeout period that is specified for the stack creation request. Default value: `60`. Unit: `minutes`.
     * 
     */
    @Import(name="timeoutInMinutes")
    private @Nullable Output<String> timeoutInMinutes;

    /**
     * @return The timeout period that is specified for the stack creation request. Default value: `60`. Unit: `minutes`.
     * 
     */
    public Optional<Output<String>> timeoutInMinutes() {
        return Optional.ofNullable(this.timeoutInMinutes);
    }

    private StackInstanceArgs() {}

    private StackInstanceArgs(StackInstanceArgs $) {
        this.operationDescription = $.operationDescription;
        this.operationPreferences = $.operationPreferences;
        this.parameterOverrides = $.parameterOverrides;
        this.retainStacks = $.retainStacks;
        this.stackGroupName = $.stackGroupName;
        this.stackInstanceAccountId = $.stackInstanceAccountId;
        this.stackInstanceRegionId = $.stackInstanceRegionId;
        this.timeoutInMinutes = $.timeoutInMinutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StackInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StackInstanceArgs $;

        public Builder() {
            $ = new StackInstanceArgs();
        }

        public Builder(StackInstanceArgs defaults) {
            $ = new StackInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param operationDescription The operation description.
         * 
         * @return builder
         * 
         */
        public Builder operationDescription(@Nullable Output<String> operationDescription) {
            $.operationDescription = operationDescription;
            return this;
        }

        /**
         * @param operationDescription The operation description.
         * 
         * @return builder
         * 
         */
        public Builder operationDescription(String operationDescription) {
            return operationDescription(Output.of(operationDescription));
        }

        /**
         * @param operationPreferences The operation preferences. The operation settings. The following fields are supported:
         * 
         * @return builder
         * 
         */
        public Builder operationPreferences(@Nullable Output<String> operationPreferences) {
            $.operationPreferences = operationPreferences;
            return this;
        }

        /**
         * @param operationPreferences The operation preferences. The operation settings. The following fields are supported:
         * 
         * @return builder
         * 
         */
        public Builder operationPreferences(String operationPreferences) {
            return operationPreferences(Output.of(operationPreferences));
        }

        /**
         * @param parameterOverrides ParameterOverrides. See the following `Block parameter_overrides`.
         * 
         * @return builder
         * 
         */
        public Builder parameterOverrides(@Nullable Output<List<StackInstanceParameterOverrideArgs>> parameterOverrides) {
            $.parameterOverrides = parameterOverrides;
            return this;
        }

        /**
         * @param parameterOverrides ParameterOverrides. See the following `Block parameter_overrides`.
         * 
         * @return builder
         * 
         */
        public Builder parameterOverrides(List<StackInstanceParameterOverrideArgs> parameterOverrides) {
            return parameterOverrides(Output.of(parameterOverrides));
        }

        /**
         * @param parameterOverrides ParameterOverrides. See the following `Block parameter_overrides`.
         * 
         * @return builder
         * 
         */
        public Builder parameterOverrides(StackInstanceParameterOverrideArgs... parameterOverrides) {
            return parameterOverrides(List.of(parameterOverrides));
        }

        /**
         * @param retainStacks Specifies whether to retain the stack corresponding to the stack instance.Default value `false`. **NOTE:** When `retain_stacks` is `true`, the stack is retained. If the stack is retained, the corresponding stack is not deleted when the stack instance is deleted from the stack group.
         * 
         * @return builder
         * 
         */
        public Builder retainStacks(@Nullable Output<Boolean> retainStacks) {
            $.retainStacks = retainStacks;
            return this;
        }

        /**
         * @param retainStacks Specifies whether to retain the stack corresponding to the stack instance.Default value `false`. **NOTE:** When `retain_stacks` is `true`, the stack is retained. If the stack is retained, the corresponding stack is not deleted when the stack instance is deleted from the stack group.
         * 
         * @return builder
         * 
         */
        public Builder retainStacks(Boolean retainStacks) {
            return retainStacks(Output.of(retainStacks));
        }

        /**
         * @param stackGroupName The name of the stack group.
         * 
         * @return builder
         * 
         */
        public Builder stackGroupName(Output<String> stackGroupName) {
            $.stackGroupName = stackGroupName;
            return this;
        }

        /**
         * @param stackGroupName The name of the stack group.
         * 
         * @return builder
         * 
         */
        public Builder stackGroupName(String stackGroupName) {
            return stackGroupName(Output.of(stackGroupName));
        }

        /**
         * @param stackInstanceAccountId The account to which the stack instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder stackInstanceAccountId(Output<String> stackInstanceAccountId) {
            $.stackInstanceAccountId = stackInstanceAccountId;
            return this;
        }

        /**
         * @param stackInstanceAccountId The account to which the stack instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder stackInstanceAccountId(String stackInstanceAccountId) {
            return stackInstanceAccountId(Output.of(stackInstanceAccountId));
        }

        /**
         * @param stackInstanceRegionId The region of the stack instance.
         * 
         * @return builder
         * 
         */
        public Builder stackInstanceRegionId(Output<String> stackInstanceRegionId) {
            $.stackInstanceRegionId = stackInstanceRegionId;
            return this;
        }

        /**
         * @param stackInstanceRegionId The region of the stack instance.
         * 
         * @return builder
         * 
         */
        public Builder stackInstanceRegionId(String stackInstanceRegionId) {
            return stackInstanceRegionId(Output.of(stackInstanceRegionId));
        }

        /**
         * @param timeoutInMinutes The timeout period that is specified for the stack creation request. Default value: `60`. Unit: `minutes`.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInMinutes(@Nullable Output<String> timeoutInMinutes) {
            $.timeoutInMinutes = timeoutInMinutes;
            return this;
        }

        /**
         * @param timeoutInMinutes The timeout period that is specified for the stack creation request. Default value: `60`. Unit: `minutes`.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInMinutes(String timeoutInMinutes) {
            return timeoutInMinutes(Output.of(timeoutInMinutes));
        }

        public StackInstanceArgs build() {
            if ($.stackGroupName == null) {
                throw new MissingRequiredPropertyException("StackInstanceArgs", "stackGroupName");
            }
            if ($.stackInstanceAccountId == null) {
                throw new MissingRequiredPropertyException("StackInstanceArgs", "stackInstanceAccountId");
            }
            if ($.stackInstanceRegionId == null) {
                throw new MissingRequiredPropertyException("StackInstanceArgs", "stackInstanceRegionId");
            }
            return $;
        }
    }

}
