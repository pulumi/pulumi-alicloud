// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticTaskMonitorConfWebsiteArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticTaskMonitorConfWebsiteArgs Empty = new SyntheticTaskMonitorConfWebsiteArgs();

    @Import(name="automaticScrolling")
    private @Nullable Output<Integer> automaticScrolling;

    public Optional<Output<Integer>> automaticScrolling() {
        return Optional.ofNullable(this.automaticScrolling);
    }

    @Import(name="customHeader")
    private @Nullable Output<Integer> customHeader;

    public Optional<Output<Integer>> customHeader() {
        return Optional.ofNullable(this.customHeader);
    }

    @Import(name="customHeaderContent")
    private @Nullable Output<Map<String,Object>> customHeaderContent;

    public Optional<Output<Map<String,Object>>> customHeaderContent() {
        return Optional.ofNullable(this.customHeaderContent);
    }

    @Import(name="disableCache")
    private @Nullable Output<Integer> disableCache;

    public Optional<Output<Integer>> disableCache() {
        return Optional.ofNullable(this.disableCache);
    }

    @Import(name="disableCompression")
    private @Nullable Output<Integer> disableCompression;

    public Optional<Output<Integer>> disableCompression() {
        return Optional.ofNullable(this.disableCompression);
    }

    @Import(name="dnsHijackWhitelist")
    private @Nullable Output<String> dnsHijackWhitelist;

    public Optional<Output<String>> dnsHijackWhitelist() {
        return Optional.ofNullable(this.dnsHijackWhitelist);
    }

    @Import(name="elementBlacklist")
    private @Nullable Output<String> elementBlacklist;

    public Optional<Output<String>> elementBlacklist() {
        return Optional.ofNullable(this.elementBlacklist);
    }

    @Import(name="filterInvalidIp")
    private @Nullable Output<Integer> filterInvalidIp;

    public Optional<Output<Integer>> filterInvalidIp() {
        return Optional.ofNullable(this.filterInvalidIp);
    }

    @Import(name="flowHijackJumpTimes")
    private @Nullable Output<Integer> flowHijackJumpTimes;

    public Optional<Output<Integer>> flowHijackJumpTimes() {
        return Optional.ofNullable(this.flowHijackJumpTimes);
    }

    @Import(name="flowHijackLogo")
    private @Nullable Output<String> flowHijackLogo;

    public Optional<Output<String>> flowHijackLogo() {
        return Optional.ofNullable(this.flowHijackLogo);
    }

    @Import(name="ignoreCertificateError")
    private @Nullable Output<Integer> ignoreCertificateError;

    public Optional<Output<Integer>> ignoreCertificateError() {
        return Optional.ofNullable(this.ignoreCertificateError);
    }

    @Import(name="monitorTimeout")
    private @Nullable Output<Integer> monitorTimeout;

    public Optional<Output<Integer>> monitorTimeout() {
        return Optional.ofNullable(this.monitorTimeout);
    }

    @Import(name="pageTamper")
    private @Nullable Output<String> pageTamper;

    public Optional<Output<String>> pageTamper() {
        return Optional.ofNullable(this.pageTamper);
    }

    @Import(name="redirection")
    private @Nullable Output<Integer> redirection;

    public Optional<Output<Integer>> redirection() {
        return Optional.ofNullable(this.redirection);
    }

    @Import(name="slowElementThreshold")
    private @Nullable Output<Integer> slowElementThreshold;

    public Optional<Output<Integer>> slowElementThreshold() {
        return Optional.ofNullable(this.slowElementThreshold);
    }

    @Import(name="targetUrl", required=true)
    private Output<String> targetUrl;

    public Output<String> targetUrl() {
        return this.targetUrl;
    }

    @Import(name="verifyStringBlacklist")
    private @Nullable Output<String> verifyStringBlacklist;

    public Optional<Output<String>> verifyStringBlacklist() {
        return Optional.ofNullable(this.verifyStringBlacklist);
    }

    @Import(name="verifyStringWhitelist")
    private @Nullable Output<String> verifyStringWhitelist;

    public Optional<Output<String>> verifyStringWhitelist() {
        return Optional.ofNullable(this.verifyStringWhitelist);
    }

    @Import(name="waitCompletionTime")
    private @Nullable Output<Integer> waitCompletionTime;

    public Optional<Output<Integer>> waitCompletionTime() {
        return Optional.ofNullable(this.waitCompletionTime);
    }

    private SyntheticTaskMonitorConfWebsiteArgs() {}

    private SyntheticTaskMonitorConfWebsiteArgs(SyntheticTaskMonitorConfWebsiteArgs $) {
        this.automaticScrolling = $.automaticScrolling;
        this.customHeader = $.customHeader;
        this.customHeaderContent = $.customHeaderContent;
        this.disableCache = $.disableCache;
        this.disableCompression = $.disableCompression;
        this.dnsHijackWhitelist = $.dnsHijackWhitelist;
        this.elementBlacklist = $.elementBlacklist;
        this.filterInvalidIp = $.filterInvalidIp;
        this.flowHijackJumpTimes = $.flowHijackJumpTimes;
        this.flowHijackLogo = $.flowHijackLogo;
        this.ignoreCertificateError = $.ignoreCertificateError;
        this.monitorTimeout = $.monitorTimeout;
        this.pageTamper = $.pageTamper;
        this.redirection = $.redirection;
        this.slowElementThreshold = $.slowElementThreshold;
        this.targetUrl = $.targetUrl;
        this.verifyStringBlacklist = $.verifyStringBlacklist;
        this.verifyStringWhitelist = $.verifyStringWhitelist;
        this.waitCompletionTime = $.waitCompletionTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticTaskMonitorConfWebsiteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticTaskMonitorConfWebsiteArgs $;

        public Builder() {
            $ = new SyntheticTaskMonitorConfWebsiteArgs();
        }

        public Builder(SyntheticTaskMonitorConfWebsiteArgs defaults) {
            $ = new SyntheticTaskMonitorConfWebsiteArgs(Objects.requireNonNull(defaults));
        }

        public Builder automaticScrolling(@Nullable Output<Integer> automaticScrolling) {
            $.automaticScrolling = automaticScrolling;
            return this;
        }

        public Builder automaticScrolling(Integer automaticScrolling) {
            return automaticScrolling(Output.of(automaticScrolling));
        }

        public Builder customHeader(@Nullable Output<Integer> customHeader) {
            $.customHeader = customHeader;
            return this;
        }

        public Builder customHeader(Integer customHeader) {
            return customHeader(Output.of(customHeader));
        }

        public Builder customHeaderContent(@Nullable Output<Map<String,Object>> customHeaderContent) {
            $.customHeaderContent = customHeaderContent;
            return this;
        }

        public Builder customHeaderContent(Map<String,Object> customHeaderContent) {
            return customHeaderContent(Output.of(customHeaderContent));
        }

        public Builder disableCache(@Nullable Output<Integer> disableCache) {
            $.disableCache = disableCache;
            return this;
        }

        public Builder disableCache(Integer disableCache) {
            return disableCache(Output.of(disableCache));
        }

        public Builder disableCompression(@Nullable Output<Integer> disableCompression) {
            $.disableCompression = disableCompression;
            return this;
        }

        public Builder disableCompression(Integer disableCompression) {
            return disableCompression(Output.of(disableCompression));
        }

        public Builder dnsHijackWhitelist(@Nullable Output<String> dnsHijackWhitelist) {
            $.dnsHijackWhitelist = dnsHijackWhitelist;
            return this;
        }

        public Builder dnsHijackWhitelist(String dnsHijackWhitelist) {
            return dnsHijackWhitelist(Output.of(dnsHijackWhitelist));
        }

        public Builder elementBlacklist(@Nullable Output<String> elementBlacklist) {
            $.elementBlacklist = elementBlacklist;
            return this;
        }

        public Builder elementBlacklist(String elementBlacklist) {
            return elementBlacklist(Output.of(elementBlacklist));
        }

        public Builder filterInvalidIp(@Nullable Output<Integer> filterInvalidIp) {
            $.filterInvalidIp = filterInvalidIp;
            return this;
        }

        public Builder filterInvalidIp(Integer filterInvalidIp) {
            return filterInvalidIp(Output.of(filterInvalidIp));
        }

        public Builder flowHijackJumpTimes(@Nullable Output<Integer> flowHijackJumpTimes) {
            $.flowHijackJumpTimes = flowHijackJumpTimes;
            return this;
        }

        public Builder flowHijackJumpTimes(Integer flowHijackJumpTimes) {
            return flowHijackJumpTimes(Output.of(flowHijackJumpTimes));
        }

        public Builder flowHijackLogo(@Nullable Output<String> flowHijackLogo) {
            $.flowHijackLogo = flowHijackLogo;
            return this;
        }

        public Builder flowHijackLogo(String flowHijackLogo) {
            return flowHijackLogo(Output.of(flowHijackLogo));
        }

        public Builder ignoreCertificateError(@Nullable Output<Integer> ignoreCertificateError) {
            $.ignoreCertificateError = ignoreCertificateError;
            return this;
        }

        public Builder ignoreCertificateError(Integer ignoreCertificateError) {
            return ignoreCertificateError(Output.of(ignoreCertificateError));
        }

        public Builder monitorTimeout(@Nullable Output<Integer> monitorTimeout) {
            $.monitorTimeout = monitorTimeout;
            return this;
        }

        public Builder monitorTimeout(Integer monitorTimeout) {
            return monitorTimeout(Output.of(monitorTimeout));
        }

        public Builder pageTamper(@Nullable Output<String> pageTamper) {
            $.pageTamper = pageTamper;
            return this;
        }

        public Builder pageTamper(String pageTamper) {
            return pageTamper(Output.of(pageTamper));
        }

        public Builder redirection(@Nullable Output<Integer> redirection) {
            $.redirection = redirection;
            return this;
        }

        public Builder redirection(Integer redirection) {
            return redirection(Output.of(redirection));
        }

        public Builder slowElementThreshold(@Nullable Output<Integer> slowElementThreshold) {
            $.slowElementThreshold = slowElementThreshold;
            return this;
        }

        public Builder slowElementThreshold(Integer slowElementThreshold) {
            return slowElementThreshold(Output.of(slowElementThreshold));
        }

        public Builder targetUrl(Output<String> targetUrl) {
            $.targetUrl = targetUrl;
            return this;
        }

        public Builder targetUrl(String targetUrl) {
            return targetUrl(Output.of(targetUrl));
        }

        public Builder verifyStringBlacklist(@Nullable Output<String> verifyStringBlacklist) {
            $.verifyStringBlacklist = verifyStringBlacklist;
            return this;
        }

        public Builder verifyStringBlacklist(String verifyStringBlacklist) {
            return verifyStringBlacklist(Output.of(verifyStringBlacklist));
        }

        public Builder verifyStringWhitelist(@Nullable Output<String> verifyStringWhitelist) {
            $.verifyStringWhitelist = verifyStringWhitelist;
            return this;
        }

        public Builder verifyStringWhitelist(String verifyStringWhitelist) {
            return verifyStringWhitelist(Output.of(verifyStringWhitelist));
        }

        public Builder waitCompletionTime(@Nullable Output<Integer> waitCompletionTime) {
            $.waitCompletionTime = waitCompletionTime;
            return this;
        }

        public Builder waitCompletionTime(Integer waitCompletionTime) {
            return waitCompletionTime(Output.of(waitCompletionTime));
        }

        public SyntheticTaskMonitorConfWebsiteArgs build() {
            if ($.targetUrl == null) {
                throw new MissingRequiredPropertyException("SyntheticTaskMonitorConfWebsiteArgs", "targetUrl");
            }
            return $;
        }
    }

}
