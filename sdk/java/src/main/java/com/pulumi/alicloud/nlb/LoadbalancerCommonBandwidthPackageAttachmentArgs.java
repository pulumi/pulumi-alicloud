// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class LoadbalancerCommonBandwidthPackageAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerCommonBandwidthPackageAttachmentArgs Empty = new LoadbalancerCommonBandwidthPackageAttachmentArgs();

    /**
     * Specifies whether only to precheck the request. Valid values:
     * 
     */
    @Import(name="bandwidthPackageId", required=true)
    private Output<String> bandwidthPackageId;

    /**
     * @return Specifies whether only to precheck the request. Valid values:
     * 
     */
    public Output<String> bandwidthPackageId() {
        return this.bandwidthPackageId;
    }

    /**
     * The ID of the EIP bandwidth plan.
     * 
     */
    @Import(name="loadBalancerId", required=true)
    private Output<String> loadBalancerId;

    /**
     * @return The ID of the EIP bandwidth plan.
     * 
     */
    public Output<String> loadBalancerId() {
        return this.loadBalancerId;
    }

    private LoadbalancerCommonBandwidthPackageAttachmentArgs() {}

    private LoadbalancerCommonBandwidthPackageAttachmentArgs(LoadbalancerCommonBandwidthPackageAttachmentArgs $) {
        this.bandwidthPackageId = $.bandwidthPackageId;
        this.loadBalancerId = $.loadBalancerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerCommonBandwidthPackageAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerCommonBandwidthPackageAttachmentArgs $;

        public Builder() {
            $ = new LoadbalancerCommonBandwidthPackageAttachmentArgs();
        }

        public Builder(LoadbalancerCommonBandwidthPackageAttachmentArgs defaults) {
            $ = new LoadbalancerCommonBandwidthPackageAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidthPackageId Specifies whether only to precheck the request. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageId(Output<String> bandwidthPackageId) {
            $.bandwidthPackageId = bandwidthPackageId;
            return this;
        }

        /**
         * @param bandwidthPackageId Specifies whether only to precheck the request. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageId(String bandwidthPackageId) {
            return bandwidthPackageId(Output.of(bandwidthPackageId));
        }

        /**
         * @param loadBalancerId The ID of the EIP bandwidth plan.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId The ID of the EIP bandwidth plan.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        public LoadbalancerCommonBandwidthPackageAttachmentArgs build() {
            if ($.bandwidthPackageId == null) {
                throw new MissingRequiredPropertyException("LoadbalancerCommonBandwidthPackageAttachmentArgs", "bandwidthPackageId");
            }
            if ($.loadBalancerId == null) {
                throw new MissingRequiredPropertyException("LoadbalancerCommonBandwidthPackageAttachmentArgs", "loadBalancerId");
            }
            return $;
        }
    }

}
