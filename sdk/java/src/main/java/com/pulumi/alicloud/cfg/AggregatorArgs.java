// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cfg;

import com.pulumi.alicloud.cfg.inputs.AggregatorAggregatorAccountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AggregatorArgs extends com.pulumi.resources.ResourceArgs {

    public static final AggregatorArgs Empty = new AggregatorArgs();

    /**
     * The member accounts of the account group. See `aggregatorAccounts` below.
     * &gt; **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
     * 
     */
    @Import(name="aggregatorAccounts")
    private @Nullable Output<List<AggregatorAggregatorAccountArgs>> aggregatorAccounts;

    /**
     * @return The member accounts of the account group. See `aggregatorAccounts` below.
     * &gt; **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
     * 
     */
    public Optional<Output<List<AggregatorAggregatorAccountArgs>>> aggregatorAccounts() {
        return Optional.ofNullable(this.aggregatorAccounts);
    }

    /**
     * The name of the account group.
     * 
     */
    @Import(name="aggregatorName", required=true)
    private Output<String> aggregatorName;

    /**
     * @return The name of the account group.
     * 
     */
    public Output<String> aggregatorName() {
        return this.aggregatorName;
    }

    /**
     * The type of the account group. Default value: `CUSTOM`. Valid values:
     * - `RD`: Global account group.
     * - `FOLDER`: Folder account group.
     * - `CUSTOM`: Custom account group.
     * 
     */
    @Import(name="aggregatorType")
    private @Nullable Output<String> aggregatorType;

    /**
     * @return The type of the account group. Default value: `CUSTOM`. Valid values:
     * - `RD`: Global account group.
     * - `FOLDER`: Folder account group.
     * - `CUSTOM`: Custom account group.
     * 
     */
    public Optional<Output<String>> aggregatorType() {
        return Optional.ofNullable(this.aggregatorType);
    }

    /**
     * The description of the account group.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the account group.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The ID of the attached folder. You can specify multiple folder IDs. Separate the IDs with commas (,). **NOTE:** If `aggregatorType` is set to `FOLDER`, `folderId` is required.
     * 
     */
    @Import(name="folderId")
    private @Nullable Output<String> folderId;

    /**
     * @return The ID of the attached folder. You can specify multiple folder IDs. Separate the IDs with commas (,). **NOTE:** If `aggregatorType` is set to `FOLDER`, `folderId` is required.
     * 
     */
    public Optional<Output<String>> folderId() {
        return Optional.ofNullable(this.folderId);
    }

    private AggregatorArgs() {}

    private AggregatorArgs(AggregatorArgs $) {
        this.aggregatorAccounts = $.aggregatorAccounts;
        this.aggregatorName = $.aggregatorName;
        this.aggregatorType = $.aggregatorType;
        this.description = $.description;
        this.folderId = $.folderId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AggregatorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AggregatorArgs $;

        public Builder() {
            $ = new AggregatorArgs();
        }

        public Builder(AggregatorArgs defaults) {
            $ = new AggregatorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregatorAccounts The member accounts of the account group. See `aggregatorAccounts` below.
         * &gt; **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorAccounts(@Nullable Output<List<AggregatorAggregatorAccountArgs>> aggregatorAccounts) {
            $.aggregatorAccounts = aggregatorAccounts;
            return this;
        }

        /**
         * @param aggregatorAccounts The member accounts of the account group. See `aggregatorAccounts` below.
         * &gt; **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorAccounts(List<AggregatorAggregatorAccountArgs> aggregatorAccounts) {
            return aggregatorAccounts(Output.of(aggregatorAccounts));
        }

        /**
         * @param aggregatorAccounts The member accounts of the account group. See `aggregatorAccounts` below.
         * &gt; **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorAccounts(AggregatorAggregatorAccountArgs... aggregatorAccounts) {
            return aggregatorAccounts(List.of(aggregatorAccounts));
        }

        /**
         * @param aggregatorName The name of the account group.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorName(Output<String> aggregatorName) {
            $.aggregatorName = aggregatorName;
            return this;
        }

        /**
         * @param aggregatorName The name of the account group.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorName(String aggregatorName) {
            return aggregatorName(Output.of(aggregatorName));
        }

        /**
         * @param aggregatorType The type of the account group. Default value: `CUSTOM`. Valid values:
         * - `RD`: Global account group.
         * - `FOLDER`: Folder account group.
         * - `CUSTOM`: Custom account group.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorType(@Nullable Output<String> aggregatorType) {
            $.aggregatorType = aggregatorType;
            return this;
        }

        /**
         * @param aggregatorType The type of the account group. Default value: `CUSTOM`. Valid values:
         * - `RD`: Global account group.
         * - `FOLDER`: Folder account group.
         * - `CUSTOM`: Custom account group.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorType(String aggregatorType) {
            return aggregatorType(Output.of(aggregatorType));
        }

        /**
         * @param description The description of the account group.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the account group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param folderId The ID of the attached folder. You can specify multiple folder IDs. Separate the IDs with commas (,). **NOTE:** If `aggregatorType` is set to `FOLDER`, `folderId` is required.
         * 
         * @return builder
         * 
         */
        public Builder folderId(@Nullable Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        /**
         * @param folderId The ID of the attached folder. You can specify multiple folder IDs. Separate the IDs with commas (,). **NOTE:** If `aggregatorType` is set to `FOLDER`, `folderId` is required.
         * 
         * @return builder
         * 
         */
        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        public AggregatorArgs build() {
            if ($.aggregatorName == null) {
                throw new MissingRequiredPropertyException("AggregatorArgs", "aggregatorName");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("AggregatorArgs", "description");
            }
            return $;
        }
    }

}
