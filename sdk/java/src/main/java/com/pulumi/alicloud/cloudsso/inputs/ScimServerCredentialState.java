// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudsso.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScimServerCredentialState extends com.pulumi.resources.ResourceArgs {

    public static final ScimServerCredentialState Empty = new ScimServerCredentialState();

    /**
     * (Available since v1.245.0) The time when the SCIM credential was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return (Available since v1.245.0) The time when the SCIM credential was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The ID of the SCIM credential.
     * 
     */
    @Import(name="credentialId")
    private @Nullable Output<String> credentialId;

    /**
     * @return The ID of the SCIM credential.
     * 
     */
    public Optional<Output<String>> credentialId() {
        return Optional.ofNullable(this.credentialId);
    }

    /**
     * The name of file that can save Credential ID and Credential Secret. Strongly suggest you to specified it when you creating credential, otherwise, you wouldn&#39;t get its secret ever.
     * 
     */
    @Import(name="credentialSecretFile")
    private @Nullable Output<String> credentialSecretFile;

    /**
     * @return The name of file that can save Credential ID and Credential Secret. Strongly suggest you to specified it when you creating credential, otherwise, you wouldn&#39;t get its secret ever.
     * 
     */
    public Optional<Output<String>> credentialSecretFile() {
        return Optional.ofNullable(this.credentialSecretFile);
    }

    /**
     * (Available since v1.245.0) The type of the SCIM credential.
     * 
     */
    @Import(name="credentialType")
    private @Nullable Output<String> credentialType;

    /**
     * @return (Available since v1.245.0) The type of the SCIM credential.
     * 
     */
    public Optional<Output<String>> credentialType() {
        return Optional.ofNullable(this.credentialType);
    }

    /**
     * The ID of the Directory.
     * 
     */
    @Import(name="directoryId")
    private @Nullable Output<String> directoryId;

    /**
     * @return The ID of the Directory.
     * 
     */
    public Optional<Output<String>> directoryId() {
        return Optional.ofNullable(this.directoryId);
    }

    /**
     * (Available since v1.245.0) The time when the SCIM credential expires.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    /**
     * @return (Available since v1.245.0) The time when the SCIM credential expires.
     * 
     */
    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * The status of the SCIM Server Credential. Valid values: `Enabled`, `Disabled`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the SCIM Server Credential. Valid values: `Enabled`, `Disabled`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ScimServerCredentialState() {}

    private ScimServerCredentialState(ScimServerCredentialState $) {
        this.createTime = $.createTime;
        this.credentialId = $.credentialId;
        this.credentialSecretFile = $.credentialSecretFile;
        this.credentialType = $.credentialType;
        this.directoryId = $.directoryId;
        this.expireTime = $.expireTime;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScimServerCredentialState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScimServerCredentialState $;

        public Builder() {
            $ = new ScimServerCredentialState();
        }

        public Builder(ScimServerCredentialState defaults) {
            $ = new ScimServerCredentialState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime (Available since v1.245.0) The time when the SCIM credential was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime (Available since v1.245.0) The time when the SCIM credential was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param credentialId The ID of the SCIM credential.
         * 
         * @return builder
         * 
         */
        public Builder credentialId(@Nullable Output<String> credentialId) {
            $.credentialId = credentialId;
            return this;
        }

        /**
         * @param credentialId The ID of the SCIM credential.
         * 
         * @return builder
         * 
         */
        public Builder credentialId(String credentialId) {
            return credentialId(Output.of(credentialId));
        }

        /**
         * @param credentialSecretFile The name of file that can save Credential ID and Credential Secret. Strongly suggest you to specified it when you creating credential, otherwise, you wouldn&#39;t get its secret ever.
         * 
         * @return builder
         * 
         */
        public Builder credentialSecretFile(@Nullable Output<String> credentialSecretFile) {
            $.credentialSecretFile = credentialSecretFile;
            return this;
        }

        /**
         * @param credentialSecretFile The name of file that can save Credential ID and Credential Secret. Strongly suggest you to specified it when you creating credential, otherwise, you wouldn&#39;t get its secret ever.
         * 
         * @return builder
         * 
         */
        public Builder credentialSecretFile(String credentialSecretFile) {
            return credentialSecretFile(Output.of(credentialSecretFile));
        }

        /**
         * @param credentialType (Available since v1.245.0) The type of the SCIM credential.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(@Nullable Output<String> credentialType) {
            $.credentialType = credentialType;
            return this;
        }

        /**
         * @param credentialType (Available since v1.245.0) The type of the SCIM credential.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(String credentialType) {
            return credentialType(Output.of(credentialType));
        }

        /**
         * @param directoryId The ID of the Directory.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(@Nullable Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        /**
         * @param directoryId The ID of the Directory.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        /**
         * @param expireTime (Available since v1.245.0) The time when the SCIM credential expires.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        /**
         * @param expireTime (Available since v1.245.0) The time when the SCIM credential expires.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        /**
         * @param status The status of the SCIM Server Credential. Valid values: `Enabled`, `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the SCIM Server Credential. Valid values: `Enabled`, `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ScimServerCredentialState build() {
            return $;
        }
    }

}
