// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CollectionPolicyCentralizeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final CollectionPolicyCentralizeConfigArgs Empty = new CollectionPolicyCentralizeConfigArgs();

    /**
     * When the central logstore is transferred to the destination logstore, its geographical attribute should be consistent with the destRegion and belong to the destProject.
     * 
     */
    @Import(name="destLogstore")
    private @Nullable Output<String> destLogstore;

    /**
     * @return When the central logstore is transferred to the destination logstore, its geographical attribute should be consistent with the destRegion and belong to the destProject.
     * 
     */
    public Optional<Output<String>> destLogstore() {
        return Optional.ofNullable(this.destLogstore);
    }

    /**
     * The geographical attributes of the centralized transfer project should be consistent with the destRegion.
     * 
     */
    @Import(name="destProject")
    private @Nullable Output<String> destProject;

    /**
     * @return The geographical attributes of the centralized transfer project should be consistent with the destRegion.
     * 
     */
    public Optional<Output<String>> destProject() {
        return Optional.ofNullable(this.destProject);
    }

    /**
     * Centralized transfer destination area.
     * 
     */
    @Import(name="destRegion")
    private @Nullable Output<String> destRegion;

    /**
     * @return Centralized transfer destination area.
     * 
     */
    public Optional<Output<String>> destRegion() {
        return Optional.ofNullable(this.destRegion);
    }

    /**
     * The number of days for the central transfer destination. This is valid only if the central transfer destination log store is not created for the first time.
     * 
     */
    @Import(name="destTtl")
    private @Nullable Output<Integer> destTtl;

    /**
     * @return The number of days for the central transfer destination. This is valid only if the central transfer destination log store is not created for the first time.
     * 
     */
    public Optional<Output<Integer>> destTtl() {
        return Optional.ofNullable(this.destTtl);
    }

    private CollectionPolicyCentralizeConfigArgs() {}

    private CollectionPolicyCentralizeConfigArgs(CollectionPolicyCentralizeConfigArgs $) {
        this.destLogstore = $.destLogstore;
        this.destProject = $.destProject;
        this.destRegion = $.destRegion;
        this.destTtl = $.destTtl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CollectionPolicyCentralizeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CollectionPolicyCentralizeConfigArgs $;

        public Builder() {
            $ = new CollectionPolicyCentralizeConfigArgs();
        }

        public Builder(CollectionPolicyCentralizeConfigArgs defaults) {
            $ = new CollectionPolicyCentralizeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destLogstore When the central logstore is transferred to the destination logstore, its geographical attribute should be consistent with the destRegion and belong to the destProject.
         * 
         * @return builder
         * 
         */
        public Builder destLogstore(@Nullable Output<String> destLogstore) {
            $.destLogstore = destLogstore;
            return this;
        }

        /**
         * @param destLogstore When the central logstore is transferred to the destination logstore, its geographical attribute should be consistent with the destRegion and belong to the destProject.
         * 
         * @return builder
         * 
         */
        public Builder destLogstore(String destLogstore) {
            return destLogstore(Output.of(destLogstore));
        }

        /**
         * @param destProject The geographical attributes of the centralized transfer project should be consistent with the destRegion.
         * 
         * @return builder
         * 
         */
        public Builder destProject(@Nullable Output<String> destProject) {
            $.destProject = destProject;
            return this;
        }

        /**
         * @param destProject The geographical attributes of the centralized transfer project should be consistent with the destRegion.
         * 
         * @return builder
         * 
         */
        public Builder destProject(String destProject) {
            return destProject(Output.of(destProject));
        }

        /**
         * @param destRegion Centralized transfer destination area.
         * 
         * @return builder
         * 
         */
        public Builder destRegion(@Nullable Output<String> destRegion) {
            $.destRegion = destRegion;
            return this;
        }

        /**
         * @param destRegion Centralized transfer destination area.
         * 
         * @return builder
         * 
         */
        public Builder destRegion(String destRegion) {
            return destRegion(Output.of(destRegion));
        }

        /**
         * @param destTtl The number of days for the central transfer destination. This is valid only if the central transfer destination log store is not created for the first time.
         * 
         * @return builder
         * 
         */
        public Builder destTtl(@Nullable Output<Integer> destTtl) {
            $.destTtl = destTtl;
            return this;
        }

        /**
         * @param destTtl The number of days for the central transfer destination. This is valid only if the central transfer destination log store is not created for the first time.
         * 
         * @return builder
         * 
         */
        public Builder destTtl(Integer destTtl) {
            return destTtl(Output.of(destTtl));
        }

        public CollectionPolicyCentralizeConfigArgs build() {
            return $;
        }
    }

}
