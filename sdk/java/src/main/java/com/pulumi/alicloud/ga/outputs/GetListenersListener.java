// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ga.outputs;

import com.pulumi.alicloud.ga.outputs.GetListenersListenerCertificate;
import com.pulumi.alicloud.ga.outputs.GetListenersListenerPortRange;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetListenersListener {
    /**
     * @return The certificates of the listener.
     * 
     */
    private List<GetListenersListenerCertificate> certificates;
    /**
     * @return The clientAffinity of the listener.
     * 
     */
    private String clientAffinity;
    /**
     * @return The description of the listener.
     * 
     */
    private String description;
    /**
     * @return The ID of the Listener.
     * 
     */
    private String id;
    /**
     * @return The listenerId of the listener.
     * 
     */
    private String listenerId;
    /**
     * @return The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
     * 
     */
    private String name;
    /**
     * @return The portRanges of the listener.
     * 
     */
    private List<GetListenersListenerPortRange> portRanges;
    /**
     * @return Type of network transport protocol monitored.
     * 
     */
    private String protocol;
    /**
     * @return The status of the listener.
     * 
     */
    private String status;

    private GetListenersListener() {}
    /**
     * @return The certificates of the listener.
     * 
     */
    public List<GetListenersListenerCertificate> certificates() {
        return this.certificates;
    }
    /**
     * @return The clientAffinity of the listener.
     * 
     */
    public String clientAffinity() {
        return this.clientAffinity;
    }
    /**
     * @return The description of the listener.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of the Listener.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The listenerId of the listener.
     * 
     */
    public String listenerId() {
        return this.listenerId;
    }
    /**
     * @return The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The portRanges of the listener.
     * 
     */
    public List<GetListenersListenerPortRange> portRanges() {
        return this.portRanges;
    }
    /**
     * @return Type of network transport protocol monitored.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The status of the listener.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListenersListener defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetListenersListenerCertificate> certificates;
        private String clientAffinity;
        private String description;
        private String id;
        private String listenerId;
        private String name;
        private List<GetListenersListenerPortRange> portRanges;
        private String protocol;
        private String status;
        public Builder() {}
        public Builder(GetListenersListener defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificates = defaults.certificates;
    	      this.clientAffinity = defaults.clientAffinity;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.listenerId = defaults.listenerId;
    	      this.name = defaults.name;
    	      this.portRanges = defaults.portRanges;
    	      this.protocol = defaults.protocol;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder certificates(List<GetListenersListenerCertificate> certificates) {
            if (certificates == null) {
              throw new MissingRequiredPropertyException("GetListenersListener", "certificates");
            }
            this.certificates = certificates;
            return this;
        }
        public Builder certificates(GetListenersListenerCertificate... certificates) {
            return certificates(List.of(certificates));
        }
        @CustomType.Setter
        public Builder clientAffinity(String clientAffinity) {
            if (clientAffinity == null) {
              throw new MissingRequiredPropertyException("GetListenersListener", "clientAffinity");
            }
            this.clientAffinity = clientAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetListenersListener", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetListenersListener", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder listenerId(String listenerId) {
            if (listenerId == null) {
              throw new MissingRequiredPropertyException("GetListenersListener", "listenerId");
            }
            this.listenerId = listenerId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetListenersListener", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder portRanges(List<GetListenersListenerPortRange> portRanges) {
            if (portRanges == null) {
              throw new MissingRequiredPropertyException("GetListenersListener", "portRanges");
            }
            this.portRanges = portRanges;
            return this;
        }
        public Builder portRanges(GetListenersListenerPortRange... portRanges) {
            return portRanges(List.of(portRanges));
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetListenersListener", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetListenersListener", "status");
            }
            this.status = status;
            return this;
        }
        public GetListenersListener build() {
            final var _resultValue = new GetListenersListener();
            _resultValue.certificates = certificates;
            _resultValue.clientAffinity = clientAffinity;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.listenerId = listenerId;
            _resultValue.name = name;
            _resultValue.portRanges = portRanges;
            _resultValue.protocol = protocol;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
