// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.eflo.NodeGroupArgs;
import com.pulumi.alicloud.eflo.inputs.NodeGroupState;
import com.pulumi.alicloud.eflo.outputs.NodeGroupIpAllocationPolicy;
import com.pulumi.alicloud.eflo.outputs.NodeGroupNode;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Eflo Node Group resource.
 * 
 * Node group. Divide a cluster into multiple node groups, each containing multiple nodes.
 * 
 * For information about Eflo Node Group and how to use it, see [What is Node Group](https://next.api.alibabacloud.com/document/eflo-controller/2022-12-15/CreateNodeGroup).
 * 
 * &gt; **NOTE:** Available since v1.246.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
 * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
 * import com.pulumi.alicloud.vpc.Network;
 * import com.pulumi.alicloud.vpc.NetworkArgs;
 * import com.pulumi.alicloud.vpc.Switch;
 * import com.pulumi.alicloud.vpc.SwitchArgs;
 * import com.pulumi.alicloud.ecs.SecurityGroup;
 * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
 * import com.pulumi.alicloud.eflo.Cluster;
 * import com.pulumi.alicloud.eflo.ClusterArgs;
 * import com.pulumi.alicloud.eflo.inputs.ClusterNodeGroupArgs;
 * import com.pulumi.alicloud.eflo.inputs.ClusterNetworksArgs;
 * import com.pulumi.alicloud.eflo.inputs.ClusterNetworksNewVpdInfoArgs;
 * import com.pulumi.alicloud.eflo.inputs.ClusterNetworksVpdInfoArgs;
 * import com.pulumi.alicloud.eflo.Node;
 * import com.pulumi.alicloud.eflo.NodeArgs;
 * import com.pulumi.alicloud.eflo.NodeGroup;
 * import com.pulumi.alicloud.eflo.NodeGroupArgs;
 * import com.pulumi.alicloud.eflo.inputs.NodeGroupNodeArgs;
 * import com.pulumi.alicloud.eflo.inputs.NodeGroupIpAllocationPolicyArgs;
 * import com.pulumi.alicloud.eflo.inputs.NodeGroupIpAllocationPolicyBondPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("terraform-example");
 *         final var default = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
 *             .build());
 * 
 *         var createVpc = new Network("createVpc", NetworkArgs.builder()
 *             .cidrBlock("192.168.0.0/16")
 *             .vpcName("cluster-resoure-example")
 *             .build());
 * 
 *         var createVswitch = new Switch("createVswitch", SwitchArgs.builder()
 *             .vpcId(createVpc.id())
 *             .zoneId("cn-hangzhou-b")
 *             .cidrBlock("192.168.0.0/24")
 *             .vswitchName("cluster-resoure-example")
 *             .build());
 * 
 *         var createSecurityGroup = new SecurityGroup("createSecurityGroup", SecurityGroupArgs.builder()
 *             .description("sg")
 *             .securityGroupName("cluster-resoure-example")
 *             .securityGroupType("normal")
 *             .vpcId(createVpc.id())
 *             .build());
 * 
 *         var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
 *             .clusterDescription("cluster-resource-example")
 *             .openEniJumboFrame(false)
 *             .hpnZone("B1")
 *             .nimizVswitches("1111")
 *             .ignoreFailedNodeTasks(true)
 *             .resourceGroupId(default_.ids()[1])
 *             .nodeGroups(ClusterNodeGroupArgs.builder()
 *                 .imageId("i198448731735114628708")
 *                 .zoneId("cn-hangzhou-b")
 *                 .nodeGroupName("cluster-resource-example")
 *                 .nodeGroupDescription("cluster-resource-example")
 *                 .machineType("efg2.C48cA3sen")
 *                 .build())
 *             .networks(ClusterNetworksArgs.builder()
 *                 .tailIpVersion("ipv4")
 *                 .newVpdInfo(ClusterNetworksNewVpdInfoArgs.builder()
 *                     .monitorVpcId(createVpc.id())
 *                     .monitorVswitchId(createVswitch.id())
 *                     .cenId("11111")
 *                     .cloudLinkId("1111")
 *                     .vpdCidr("111")
 *                     .vpdSubnets(ClusterNetworksNewVpdInfoVpdSubnetArgs.builder()
 *                         .zoneId("1111")
 *                         .subnetCidr("111")
 *                         .subnetType("111")
 *                         .build())
 *                     .cloudLinkCidr("169.254.128.0/23")
 *                     .build())
 *                 .securityGroupId(createSecurityGroup.id())
 *                 .vswitchZoneId("cn-hangzhou-b")
 *                 .vpcId(createVpc.id())
 *                 .vswitchId(createVswitch.id())
 *                 .vpdInfo(ClusterNetworksVpdInfoArgs.builder()
 *                     .vpdId("111")
 *                     .vpdSubnets("111")
 *                     .build())
 *                 .ipAllocationPolicies(ClusterNetworksIpAllocationPolicyArgs.builder()
 *                     .bondPolicy(ClusterNetworksIpAllocationPolicyBondPolicyArgs.builder()
 *                         .bondDefaultSubnet("111")
 *                         .bonds(ClusterNetworksIpAllocationPolicyBondPolicyBondArgs.builder()
 *                             .name("111")
 *                             .subnet("111")
 *                             .build())
 *                         .build())
 *                     .machineTypePolicies(ClusterNetworksIpAllocationPolicyMachineTypePolicyArgs.builder()
 *                         .bonds(ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgs.builder()
 *                             .name("111")
 *                             .subnet("111")
 *                             .build())
 *                         .machineType("111")
 *                         .build())
 *                     .nodePolicies(ClusterNetworksIpAllocationPolicyNodePolicyArgs.builder()
 *                         .bonds(ClusterNetworksIpAllocationPolicyNodePolicyBondArgs.builder()
 *                             .name("111")
 *                             .subnet("111")
 *                             .build())
 *                         .nodeId("111")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .clusterName("tfacceflo7165")
 *             .clusterType("Lite")
 *             .build());
 * 
 *         var defaultNode = new Node("defaultNode", NodeArgs.builder()
 *             .period(36)
 *             .discountLevel("36")
 *             .billingCycle("1month")
 *             .classify("gpuserver")
 *             .zone("cn-hangzhou-b")
 *             .productForm("instance")
 *             .paymentRatio("0")
 *             .hpnZone("B1")
 *             .serverArch("bmserver")
 *             .computingServer("efg1.nvga1n")
 *             .stageNum("36")
 *             .renewalStatus("AutoRenewal")
 *             .renewPeriod(36)
 *             .status("Unused")
 *             .build());
 * 
 *         var defaultNodeGroup = new NodeGroup("defaultNodeGroup", NodeGroupArgs.builder()
 *             .nodes(NodeGroupNodeArgs.builder()
 *                 .nodeId(defaultNode.id())
 *                 .vpcId(createVpc.id())
 *                 .vswitchId(createVswitch.id())
 *                 .hostname("jxyhostname")
 *                 .loginPassword("Alibaba}{@literal @}{@code 2025")
 *                 .build())
 *             .ignoreFailedNodeTasks(true)
 *             .clusterId(defaultCluster.id())
 *             .imageId("i195048661660874208657")
 *             .zoneId("cn-hangzhou-b")
 *             .vpdSubnets("example")
 *             .userData("YWxpLGFsaSxhbGliYWJh")
 *             .vswitchZoneId("cn-hangzhou-b")
 *             .ipAllocationPolicies(NodeGroupIpAllocationPolicyArgs.builder()
 *                 .bondPolicy(NodeGroupIpAllocationPolicyBondPolicyArgs.builder()
 *                     .bondDefaultSubnet("example")
 *                     .bonds(NodeGroupIpAllocationPolicyBondPolicyBondArgs.builder()
 *                         .name("example")
 *                         .subnet("example")
 *                         .build())
 *                     .build())
 *                 .machineTypePolicies(NodeGroupIpAllocationPolicyMachineTypePolicyArgs.builder()
 *                     .bonds(NodeGroupIpAllocationPolicyMachineTypePolicyBondArgs.builder()
 *                         .name("example")
 *                         .subnet("example")
 *                         .build())
 *                     .machineType("example")
 *                     .build())
 *                 .nodePolicies(NodeGroupIpAllocationPolicyNodePolicyArgs.builder()
 *                     .nodeId(defaultNode.id())
 *                     .bonds(NodeGroupIpAllocationPolicyNodePolicyBondArgs.builder()
 *                         .name("example")
 *                         .subnet("example")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .machineType("efg1.nvga1")
 *             .az("cn-hangzhou-b")
 *             .nodeGroupDescription("resource-example1")
 *             .nodeGroupName("tfacceflo63657_update")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Eflo Node Group can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:eflo/nodeGroup:NodeGroup example &lt;cluster_id&gt;:&lt;node_group_id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:eflo/nodeGroup:NodeGroup")
public class NodeGroup extends com.pulumi.resources.CustomResource {
    /**
     * Az
     * 
     */
    @Export(name="az", refs={String.class}, tree="[0]")
    private Output<String> az;

    /**
     * @return Az
     * 
     */
    public Output<String> az() {
        return this.az;
    }
    /**
     * Cluster ID
     * 
     */
    @Export(name="clusterId", refs={String.class}, tree="[0]")
    private Output<String> clusterId;

    /**
     * @return Cluster ID
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }
    /**
     * Create time
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Create time
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Whether to allow skipping failed nodes. Default value: False
     * 
     */
    @Export(name="ignoreFailedNodeTasks", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ignoreFailedNodeTasks;

    /**
     * @return Whether to allow skipping failed nodes. Default value: False
     * 
     */
    public Output<Optional<Boolean>> ignoreFailedNodeTasks() {
        return Codegen.optional(this.ignoreFailedNodeTasks);
    }
    /**
     * Image ID. You can modify the image ID since v1.252.0.
     * 
     */
    @Export(name="imageId", refs={String.class}, tree="[0]")
    private Output<String> imageId;

    /**
     * @return Image ID. You can modify the image ID since v1.252.0.
     * 
     */
    public Output<String> imageId() {
        return this.imageId;
    }
    /**
     * IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ip_allocation_policy` below.
     * 
     */
    @Export(name="ipAllocationPolicies", refs={List.class,NodeGroupIpAllocationPolicy.class}, tree="[0,1]")
    private Output</* @Nullable */ List<NodeGroupIpAllocationPolicy>> ipAllocationPolicies;

    /**
     * @return IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ip_allocation_policy` below.
     * 
     */
    public Output<Optional<List<NodeGroupIpAllocationPolicy>>> ipAllocationPolicies() {
        return Codegen.optional(this.ipAllocationPolicies);
    }
    /**
     * key pair name
     * 
     */
    @Export(name="keyPairName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> keyPairName;

    /**
     * @return key pair name
     * 
     */
    public Output<Optional<String>> keyPairName() {
        return Codegen.optional(this.keyPairName);
    }
    /**
     * Login Password
     * 
     */
    @Export(name="loginPassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> loginPassword;

    /**
     * @return Login Password
     * 
     */
    public Output<Optional<String>> loginPassword() {
        return Codegen.optional(this.loginPassword);
    }
    /**
     * Machine type
     * 
     */
    @Export(name="machineType", refs={String.class}, tree="[0]")
    private Output<String> machineType;

    /**
     * @return Machine type
     * 
     */
    public Output<String> machineType() {
        return this.machineType;
    }
    /**
     * NodeGroupDescription
     * 
     */
    @Export(name="nodeGroupDescription", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nodeGroupDescription;

    /**
     * @return NodeGroupDescription
     * 
     */
    public Output<Optional<String>> nodeGroupDescription() {
        return Codegen.optional(this.nodeGroupDescription);
    }
    /**
     * The first ID of the resource
     * 
     */
    @Export(name="nodeGroupId", refs={String.class}, tree="[0]")
    private Output<String> nodeGroupId;

    /**
     * @return The first ID of the resource
     * 
     */
    public Output<String> nodeGroupId() {
        return this.nodeGroupId;
    }
    /**
     * The name of the resource
     * 
     */
    @Export(name="nodeGroupName", refs={String.class}, tree="[0]")
    private Output<String> nodeGroupName;

    /**
     * @return The name of the resource
     * 
     */
    public Output<String> nodeGroupName() {
        return this.nodeGroupName;
    }
    /**
     * Node List See `nodes` below.
     * 
     */
    @Export(name="nodes", refs={List.class,NodeGroupNode.class}, tree="[0,1]")
    private Output</* @Nullable */ List<NodeGroupNode>> nodes;

    /**
     * @return Node List See `nodes` below.
     * 
     */
    public Output<Optional<List<NodeGroupNode>>> nodes() {
        return Codegen.optional(this.nodes);
    }
    /**
     * Custom Data
     * 
     */
    @Export(name="userData", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userData;

    /**
     * @return Custom Data
     * 
     */
    public Output<Optional<String>> userData() {
        return Codegen.optional(this.userData);
    }
    /**
     * Cluster subnet list
     * 
     */
    @Export(name="vpdSubnets", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> vpdSubnets;

    /**
     * @return Cluster subnet list
     * 
     */
    public Output<Optional<List<String>>> vpdSubnets() {
        return Codegen.optional(this.vpdSubnets);
    }
    /**
     * Zone ID of the switch
     * 
     */
    @Export(name="vswitchZoneId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vswitchZoneId;

    /**
     * @return Zone ID of the switch
     * 
     */
    public Output<Optional<String>> vswitchZoneId() {
        return Codegen.optional(this.vswitchZoneId);
    }
    /**
     * Zone ID
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> zoneId;

    /**
     * @return Zone ID
     * 
     */
    public Output<Optional<String>> zoneId() {
        return Codegen.optional(this.zoneId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NodeGroup(java.lang.String name) {
        this(name, NodeGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NodeGroup(java.lang.String name, NodeGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NodeGroup(java.lang.String name, NodeGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:eflo/nodeGroup:NodeGroup", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NodeGroup(java.lang.String name, Output<java.lang.String> id, @Nullable NodeGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:eflo/nodeGroup:NodeGroup", name, state, makeResourceOptions(options, id), false);
    }

    private static NodeGroupArgs makeArgs(NodeGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NodeGroupArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "loginPassword"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NodeGroup get(java.lang.String name, Output<java.lang.String> id, @Nullable NodeGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NodeGroup(name, id, state, options);
    }
}
