// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.expressconnect;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EcFailoverTestJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final EcFailoverTestJobArgs Empty = new EcFailoverTestJobArgs();

    /**
     * Job description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Job description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Job name.
     * 
     */
    @Import(name="ecFailoverTestJobName")
    private @Nullable Output<String> ecFailoverTestJobName;

    /**
     * @return Job name.
     * 
     */
    public Optional<Output<String>> ecFailoverTestJobName() {
        return Optional.ofNullable(this.ecFailoverTestJobName);
    }

    /**
     * Job duration.
     * 
     */
    @Import(name="jobDuration", required=true)
    private Output<Integer> jobDuration;

    /**
     * @return Job duration.
     * 
     */
    public Output<Integer> jobDuration() {
        return this.jobDuration;
    }

    /**
     * Job type.
     * 
     */
    @Import(name="jobType", required=true)
    private Output<String> jobType;

    /**
     * @return Job type.
     * 
     */
    public Output<String> jobType() {
        return this.jobType;
    }

    /**
     * Resource id list.
     * 
     */
    @Import(name="resourceIds", required=true)
    private Output<List<String>> resourceIds;

    /**
     * @return Resource id list.
     * 
     */
    public Output<List<String>> resourceIds() {
        return this.resourceIds;
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return Resource type.
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    /**
     * The status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private EcFailoverTestJobArgs() {}

    private EcFailoverTestJobArgs(EcFailoverTestJobArgs $) {
        this.description = $.description;
        this.ecFailoverTestJobName = $.ecFailoverTestJobName;
        this.jobDuration = $.jobDuration;
        this.jobType = $.jobType;
        this.resourceIds = $.resourceIds;
        this.resourceType = $.resourceType;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EcFailoverTestJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EcFailoverTestJobArgs $;

        public Builder() {
            $ = new EcFailoverTestJobArgs();
        }

        public Builder(EcFailoverTestJobArgs defaults) {
            $ = new EcFailoverTestJobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Job description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Job description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ecFailoverTestJobName Job name.
         * 
         * @return builder
         * 
         */
        public Builder ecFailoverTestJobName(@Nullable Output<String> ecFailoverTestJobName) {
            $.ecFailoverTestJobName = ecFailoverTestJobName;
            return this;
        }

        /**
         * @param ecFailoverTestJobName Job name.
         * 
         * @return builder
         * 
         */
        public Builder ecFailoverTestJobName(String ecFailoverTestJobName) {
            return ecFailoverTestJobName(Output.of(ecFailoverTestJobName));
        }

        /**
         * @param jobDuration Job duration.
         * 
         * @return builder
         * 
         */
        public Builder jobDuration(Output<Integer> jobDuration) {
            $.jobDuration = jobDuration;
            return this;
        }

        /**
         * @param jobDuration Job duration.
         * 
         * @return builder
         * 
         */
        public Builder jobDuration(Integer jobDuration) {
            return jobDuration(Output.of(jobDuration));
        }

        /**
         * @param jobType Job type.
         * 
         * @return builder
         * 
         */
        public Builder jobType(Output<String> jobType) {
            $.jobType = jobType;
            return this;
        }

        /**
         * @param jobType Job type.
         * 
         * @return builder
         * 
         */
        public Builder jobType(String jobType) {
            return jobType(Output.of(jobType));
        }

        /**
         * @param resourceIds Resource id list.
         * 
         * @return builder
         * 
         */
        public Builder resourceIds(Output<List<String>> resourceIds) {
            $.resourceIds = resourceIds;
            return this;
        }

        /**
         * @param resourceIds Resource id list.
         * 
         * @return builder
         * 
         */
        public Builder resourceIds(List<String> resourceIds) {
            return resourceIds(Output.of(resourceIds));
        }

        /**
         * @param resourceIds Resource id list.
         * 
         * @return builder
         * 
         */
        public Builder resourceIds(String... resourceIds) {
            return resourceIds(List.of(resourceIds));
        }

        /**
         * @param resourceType Resource type.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType Resource type.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public EcFailoverTestJobArgs build() {
            if ($.jobDuration == null) {
                throw new MissingRequiredPropertyException("EcFailoverTestJobArgs", "jobDuration");
            }
            if ($.jobType == null) {
                throw new MissingRequiredPropertyException("EcFailoverTestJobArgs", "jobType");
            }
            if ($.resourceIds == null) {
                throw new MissingRequiredPropertyException("EcFailoverTestJobArgs", "resourceIds");
            }
            if ($.resourceType == null) {
                throw new MissingRequiredPropertyException("EcFailoverTestJobArgs", "resourceType");
            }
            return $;
        }
    }

}
