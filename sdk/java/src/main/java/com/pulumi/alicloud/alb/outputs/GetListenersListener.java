// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.alicloud.alb.outputs.GetListenersListenerAccessLogTracingConfig;
import com.pulumi.alicloud.alb.outputs.GetListenersListenerAclConfig;
import com.pulumi.alicloud.alb.outputs.GetListenersListenerCertificate;
import com.pulumi.alicloud.alb.outputs.GetListenersListenerDefaultAction;
import com.pulumi.alicloud.alb.outputs.GetListenersListenerQuicConfig;
import com.pulumi.alicloud.alb.outputs.GetListenersListenerXforwardedForConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetListenersListener {
    /**
     * @return Indicates whether the access log has a custom header field. Valid values: true and false. Default value: false.
     * 
     */
    private Boolean accessLogRecordCustomizedHeadersEnabled;
    /**
     * @return Xtrace Configuration Information.
     * 
     */
    private List<GetListenersListenerAccessLogTracingConfig> accessLogTracingConfigs;
    /**
     * @return The configurations of the access control lists (ACLs).
     * 
     */
    private List<GetListenersListenerAclConfig> aclConfigs;
    /**
     * @return The Certificate List.
     * 
     */
    private List<GetListenersListenerCertificate> certificates;
    /**
     * @return The Default Rule Action List.
     * 
     */
    private List<GetListenersListenerDefaultAction> defaultActions;
    /**
     * @return Whether to Enable Gzip Compression, as a Specific File Type on a Compression. Valid Values: `True` Or `False`. Default Value: `True`.
     * 
     */
    private Boolean gzipEnabled;
    /**
     * @return Whether to Enable HTTP/2 Features. Valid Values: `True` Or `False`. Default Value: `True`.
     * 
     */
    private Boolean http2Enabled;
    /**
     * @return The ID of the Listener.
     * 
     */
    private String id;
    /**
     * @return Specify the Connection Idle Timeout Value: `1` to `60`. Unit: Seconds.
     * 
     */
    private Integer idleTimeout;
    /**
     * @return Set the IP Address of the Listened Description. Length Is from 2 to 256 Characters.
     * 
     */
    private String listenerDescription;
    /**
     * @return on Behalf of the Resource Level Id of the Resources Property Fields.
     * 
     */
    private String listenerId;
    /**
     * @return The ALB Instance Front-End, and Those of the Ports Used. Value: `1~65535`.
     * 
     */
    private Integer listenerPort;
    /**
     * @return Snooping Protocols. Valid Values: `HTTP`, `HTTPS` Or `QUIC`.
     * 
     */
    private String listenerProtocol;
    /**
     * @return The ALB Instance Id.
     * 
     */
    private String loadBalancerId;
    /**
     * @return This Request Returned by the Maximum Number of Records.
     * 
     */
    private String maxResults;
    /**
     * @return The Current Call Returns to the Position of the Set to Null Represents the Data Has Been Read to the End of.
     * 
     */
    private String nextToken;
    /**
     * @return Configuration Associated with the QuIC Listening.
     * 
     */
    private List<GetListenersListenerQuicConfig> quicConfigs;
    /**
     * @return The Specified Request Timeout Time. Value: `1` to `180`. Unit: Seconds. Default Value: 60. If the Timeout Time Within the Back-End Server Has Not Answered the ALB Will Give up Waiting, the Client Returns the HTTP 504 Error Code.
     * 
     */
    private Integer requestTimeout;
    /**
     * @return Security Policy.
     * 
     */
    private String securityPolicyId;
    /**
     * @return The association status between the ACL and the listener.  Valid values: `Associating`, `Associated` Or `Dissociating`. `Associating`: The ACL is being associated with the listener. `Associated`: The ACL is associated with the listener. `Dissociating`: The ACL is being disassociated from the listener.
     * 
     */
    private String status;
    /**
     * @return xforwardfor Related Attribute Configuration.
     * 
     */
    private List<GetListenersListenerXforwardedForConfig> xforwardedForConfigs;

    private GetListenersListener() {}
    /**
     * @return Indicates whether the access log has a custom header field. Valid values: true and false. Default value: false.
     * 
     */
    public Boolean accessLogRecordCustomizedHeadersEnabled() {
        return this.accessLogRecordCustomizedHeadersEnabled;
    }
    /**
     * @return Xtrace Configuration Information.
     * 
     */
    public List<GetListenersListenerAccessLogTracingConfig> accessLogTracingConfigs() {
        return this.accessLogTracingConfigs;
    }
    /**
     * @return The configurations of the access control lists (ACLs).
     * 
     */
    public List<GetListenersListenerAclConfig> aclConfigs() {
        return this.aclConfigs;
    }
    /**
     * @return The Certificate List.
     * 
     */
    public List<GetListenersListenerCertificate> certificates() {
        return this.certificates;
    }
    /**
     * @return The Default Rule Action List.
     * 
     */
    public List<GetListenersListenerDefaultAction> defaultActions() {
        return this.defaultActions;
    }
    /**
     * @return Whether to Enable Gzip Compression, as a Specific File Type on a Compression. Valid Values: `True` Or `False`. Default Value: `True`.
     * 
     */
    public Boolean gzipEnabled() {
        return this.gzipEnabled;
    }
    /**
     * @return Whether to Enable HTTP/2 Features. Valid Values: `True` Or `False`. Default Value: `True`.
     * 
     */
    public Boolean http2Enabled() {
        return this.http2Enabled;
    }
    /**
     * @return The ID of the Listener.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specify the Connection Idle Timeout Value: `1` to `60`. Unit: Seconds.
     * 
     */
    public Integer idleTimeout() {
        return this.idleTimeout;
    }
    /**
     * @return Set the IP Address of the Listened Description. Length Is from 2 to 256 Characters.
     * 
     */
    public String listenerDescription() {
        return this.listenerDescription;
    }
    /**
     * @return on Behalf of the Resource Level Id of the Resources Property Fields.
     * 
     */
    public String listenerId() {
        return this.listenerId;
    }
    /**
     * @return The ALB Instance Front-End, and Those of the Ports Used. Value: `1~65535`.
     * 
     */
    public Integer listenerPort() {
        return this.listenerPort;
    }
    /**
     * @return Snooping Protocols. Valid Values: `HTTP`, `HTTPS` Or `QUIC`.
     * 
     */
    public String listenerProtocol() {
        return this.listenerProtocol;
    }
    /**
     * @return The ALB Instance Id.
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return This Request Returned by the Maximum Number of Records.
     * 
     */
    public String maxResults() {
        return this.maxResults;
    }
    /**
     * @return The Current Call Returns to the Position of the Set to Null Represents the Data Has Been Read to the End of.
     * 
     */
    public String nextToken() {
        return this.nextToken;
    }
    /**
     * @return Configuration Associated with the QuIC Listening.
     * 
     */
    public List<GetListenersListenerQuicConfig> quicConfigs() {
        return this.quicConfigs;
    }
    /**
     * @return The Specified Request Timeout Time. Value: `1` to `180`. Unit: Seconds. Default Value: 60. If the Timeout Time Within the Back-End Server Has Not Answered the ALB Will Give up Waiting, the Client Returns the HTTP 504 Error Code.
     * 
     */
    public Integer requestTimeout() {
        return this.requestTimeout;
    }
    /**
     * @return Security Policy.
     * 
     */
    public String securityPolicyId() {
        return this.securityPolicyId;
    }
    /**
     * @return The association status between the ACL and the listener.  Valid values: `Associating`, `Associated` Or `Dissociating`. `Associating`: The ACL is being associated with the listener. `Associated`: The ACL is associated with the listener. `Dissociating`: The ACL is being disassociated from the listener.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return xforwardfor Related Attribute Configuration.
     * 
     */
    public List<GetListenersListenerXforwardedForConfig> xforwardedForConfigs() {
        return this.xforwardedForConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListenersListener defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean accessLogRecordCustomizedHeadersEnabled;
        private List<GetListenersListenerAccessLogTracingConfig> accessLogTracingConfigs;
        private List<GetListenersListenerAclConfig> aclConfigs;
        private List<GetListenersListenerCertificate> certificates;
        private List<GetListenersListenerDefaultAction> defaultActions;
        private Boolean gzipEnabled;
        private Boolean http2Enabled;
        private String id;
        private Integer idleTimeout;
        private String listenerDescription;
        private String listenerId;
        private Integer listenerPort;
        private String listenerProtocol;
        private String loadBalancerId;
        private String maxResults;
        private String nextToken;
        private List<GetListenersListenerQuicConfig> quicConfigs;
        private Integer requestTimeout;
        private String securityPolicyId;
        private String status;
        private List<GetListenersListenerXforwardedForConfig> xforwardedForConfigs;
        public Builder() {}
        public Builder(GetListenersListener defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLogRecordCustomizedHeadersEnabled = defaults.accessLogRecordCustomizedHeadersEnabled;
    	      this.accessLogTracingConfigs = defaults.accessLogTracingConfigs;
    	      this.aclConfigs = defaults.aclConfigs;
    	      this.certificates = defaults.certificates;
    	      this.defaultActions = defaults.defaultActions;
    	      this.gzipEnabled = defaults.gzipEnabled;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.id = defaults.id;
    	      this.idleTimeout = defaults.idleTimeout;
    	      this.listenerDescription = defaults.listenerDescription;
    	      this.listenerId = defaults.listenerId;
    	      this.listenerPort = defaults.listenerPort;
    	      this.listenerProtocol = defaults.listenerProtocol;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.maxResults = defaults.maxResults;
    	      this.nextToken = defaults.nextToken;
    	      this.quicConfigs = defaults.quicConfigs;
    	      this.requestTimeout = defaults.requestTimeout;
    	      this.securityPolicyId = defaults.securityPolicyId;
    	      this.status = defaults.status;
    	      this.xforwardedForConfigs = defaults.xforwardedForConfigs;
        }

        @CustomType.Setter
        public Builder accessLogRecordCustomizedHeadersEnabled(Boolean accessLogRecordCustomizedHeadersEnabled) {
            this.accessLogRecordCustomizedHeadersEnabled = Objects.requireNonNull(accessLogRecordCustomizedHeadersEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder accessLogTracingConfigs(List<GetListenersListenerAccessLogTracingConfig> accessLogTracingConfigs) {
            this.accessLogTracingConfigs = Objects.requireNonNull(accessLogTracingConfigs);
            return this;
        }
        public Builder accessLogTracingConfigs(GetListenersListenerAccessLogTracingConfig... accessLogTracingConfigs) {
            return accessLogTracingConfigs(List.of(accessLogTracingConfigs));
        }
        @CustomType.Setter
        public Builder aclConfigs(List<GetListenersListenerAclConfig> aclConfigs) {
            this.aclConfigs = Objects.requireNonNull(aclConfigs);
            return this;
        }
        public Builder aclConfigs(GetListenersListenerAclConfig... aclConfigs) {
            return aclConfigs(List.of(aclConfigs));
        }
        @CustomType.Setter
        public Builder certificates(List<GetListenersListenerCertificate> certificates) {
            this.certificates = Objects.requireNonNull(certificates);
            return this;
        }
        public Builder certificates(GetListenersListenerCertificate... certificates) {
            return certificates(List.of(certificates));
        }
        @CustomType.Setter
        public Builder defaultActions(List<GetListenersListenerDefaultAction> defaultActions) {
            this.defaultActions = Objects.requireNonNull(defaultActions);
            return this;
        }
        public Builder defaultActions(GetListenersListenerDefaultAction... defaultActions) {
            return defaultActions(List.of(defaultActions));
        }
        @CustomType.Setter
        public Builder gzipEnabled(Boolean gzipEnabled) {
            this.gzipEnabled = Objects.requireNonNull(gzipEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder http2Enabled(Boolean http2Enabled) {
            this.http2Enabled = Objects.requireNonNull(http2Enabled);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder idleTimeout(Integer idleTimeout) {
            this.idleTimeout = Objects.requireNonNull(idleTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder listenerDescription(String listenerDescription) {
            this.listenerDescription = Objects.requireNonNull(listenerDescription);
            return this;
        }
        @CustomType.Setter
        public Builder listenerId(String listenerId) {
            this.listenerId = Objects.requireNonNull(listenerId);
            return this;
        }
        @CustomType.Setter
        public Builder listenerPort(Integer listenerPort) {
            this.listenerPort = Objects.requireNonNull(listenerPort);
            return this;
        }
        @CustomType.Setter
        public Builder listenerProtocol(String listenerProtocol) {
            this.listenerProtocol = Objects.requireNonNull(listenerProtocol);
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            this.loadBalancerId = Objects.requireNonNull(loadBalancerId);
            return this;
        }
        @CustomType.Setter
        public Builder maxResults(String maxResults) {
            this.maxResults = Objects.requireNonNull(maxResults);
            return this;
        }
        @CustomType.Setter
        public Builder nextToken(String nextToken) {
            this.nextToken = Objects.requireNonNull(nextToken);
            return this;
        }
        @CustomType.Setter
        public Builder quicConfigs(List<GetListenersListenerQuicConfig> quicConfigs) {
            this.quicConfigs = Objects.requireNonNull(quicConfigs);
            return this;
        }
        public Builder quicConfigs(GetListenersListenerQuicConfig... quicConfigs) {
            return quicConfigs(List.of(quicConfigs));
        }
        @CustomType.Setter
        public Builder requestTimeout(Integer requestTimeout) {
            this.requestTimeout = Objects.requireNonNull(requestTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder securityPolicyId(String securityPolicyId) {
            this.securityPolicyId = Objects.requireNonNull(securityPolicyId);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder xforwardedForConfigs(List<GetListenersListenerXforwardedForConfig> xforwardedForConfigs) {
            this.xforwardedForConfigs = Objects.requireNonNull(xforwardedForConfigs);
            return this;
        }
        public Builder xforwardedForConfigs(GetListenersListenerXforwardedForConfig... xforwardedForConfigs) {
            return xforwardedForConfigs(List.of(xforwardedForConfigs));
        }
        public GetListenersListener build() {
            final var o = new GetListenersListener();
            o.accessLogRecordCustomizedHeadersEnabled = accessLogRecordCustomizedHeadersEnabled;
            o.accessLogTracingConfigs = accessLogTracingConfigs;
            o.aclConfigs = aclConfigs;
            o.certificates = certificates;
            o.defaultActions = defaultActions;
            o.gzipEnabled = gzipEnabled;
            o.http2Enabled = http2Enabled;
            o.id = id;
            o.idleTimeout = idleTimeout;
            o.listenerDescription = listenerDescription;
            o.listenerId = listenerId;
            o.listenerPort = listenerPort;
            o.listenerProtocol = listenerProtocol;
            o.loadBalancerId = loadBalancerId;
            o.maxResults = maxResults;
            o.nextToken = nextToken;
            o.quicConfigs = quicConfigs;
            o.requestTimeout = requestTimeout;
            o.securityPolicyId = securityPolicyId;
            o.status = status;
            o.xforwardedForConfigs = xforwardedForConfigs;
            return o;
        }
    }
}
