// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sddp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataLimitArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataLimitArgs Empty = new DataLimitArgs();

    /**
     * Whether to enable the log auditing feature. Valid values: `0`, `1`.
     * 
     */
    @Import(name="auditStatus")
    private @Nullable Output<Integer> auditStatus;

    /**
     * @return Whether to enable the log auditing feature. Valid values: `0`, `1`.
     * 
     */
    public Optional<Output<Integer>> auditStatus() {
        return Optional.ofNullable(this.auditStatus);
    }

    /**
     * The type of the database. Valid values: `MySQL`, `SQLServer`.
     * 
     */
    @Import(name="engineType")
    private @Nullable Output<String> engineType;

    /**
     * @return The type of the database. Valid values: `MySQL`, `SQLServer`.
     * 
     */
    public Optional<Output<String>> engineType() {
        return Optional.ofNullable(this.engineType);
    }

    /**
     * The lang.
     * 
     */
    @Import(name="lang")
    private @Nullable Output<String> lang;

    /**
     * @return The lang.
     * 
     */
    public Optional<Output<String>> lang() {
        return Optional.ofNullable(this.lang);
    }

    /**
     * The retention period of raw logs after you enable the log auditing feature. Unit: day. Valid values: `180`, `30`, `365`, `90`. **NOTE:** The`log_store_day` is valid when the `audit_status` is `1`.
     * 
     */
    @Import(name="logStoreDay")
    private @Nullable Output<Integer> logStoreDay;

    /**
     * @return The retention period of raw logs after you enable the log auditing feature. Unit: day. Valid values: `180`, `30`, `365`, `90`. **NOTE:** The`log_store_day` is valid when the `audit_status` is `1`.
     * 
     */
    public Optional<Output<Integer>> logStoreDay() {
        return Optional.ofNullable(this.logStoreDay);
    }

    /**
     * The ID of the data asset.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return The ID of the data asset.
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    /**
     * The password that is used to connect to the database.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password that is used to connect to the database.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The port that is used to connect to the database.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port that is used to connect to the database.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The type of the service to which the data asset belongs. Valid values: `MaxCompute`, `OSS`, `RDS`.
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return The type of the service to which the data asset belongs. Valid values: `MaxCompute`, `OSS`, `RDS`.
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    /**
     * The region ID of the data asset.
     * 
     */
    @Import(name="serviceRegionId")
    private @Nullable Output<String> serviceRegionId;

    /**
     * @return The region ID of the data asset.
     * 
     */
    public Optional<Output<String>> serviceRegionId() {
        return Optional.ofNullable(this.serviceRegionId);
    }

    /**
     * The name of the service to which the data asset belongs.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return The name of the service to which the data asset belongs.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private DataLimitArgs() {}

    private DataLimitArgs(DataLimitArgs $) {
        this.auditStatus = $.auditStatus;
        this.engineType = $.engineType;
        this.lang = $.lang;
        this.logStoreDay = $.logStoreDay;
        this.parentId = $.parentId;
        this.password = $.password;
        this.port = $.port;
        this.resourceType = $.resourceType;
        this.serviceRegionId = $.serviceRegionId;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataLimitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataLimitArgs $;

        public Builder() {
            $ = new DataLimitArgs();
        }

        public Builder(DataLimitArgs defaults) {
            $ = new DataLimitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auditStatus Whether to enable the log auditing feature. Valid values: `0`, `1`.
         * 
         * @return builder
         * 
         */
        public Builder auditStatus(@Nullable Output<Integer> auditStatus) {
            $.auditStatus = auditStatus;
            return this;
        }

        /**
         * @param auditStatus Whether to enable the log auditing feature. Valid values: `0`, `1`.
         * 
         * @return builder
         * 
         */
        public Builder auditStatus(Integer auditStatus) {
            return auditStatus(Output.of(auditStatus));
        }

        /**
         * @param engineType The type of the database. Valid values: `MySQL`, `SQLServer`.
         * 
         * @return builder
         * 
         */
        public Builder engineType(@Nullable Output<String> engineType) {
            $.engineType = engineType;
            return this;
        }

        /**
         * @param engineType The type of the database. Valid values: `MySQL`, `SQLServer`.
         * 
         * @return builder
         * 
         */
        public Builder engineType(String engineType) {
            return engineType(Output.of(engineType));
        }

        /**
         * @param lang The lang.
         * 
         * @return builder
         * 
         */
        public Builder lang(@Nullable Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang The lang.
         * 
         * @return builder
         * 
         */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param logStoreDay The retention period of raw logs after you enable the log auditing feature. Unit: day. Valid values: `180`, `30`, `365`, `90`. **NOTE:** The`log_store_day` is valid when the `audit_status` is `1`.
         * 
         * @return builder
         * 
         */
        public Builder logStoreDay(@Nullable Output<Integer> logStoreDay) {
            $.logStoreDay = logStoreDay;
            return this;
        }

        /**
         * @param logStoreDay The retention period of raw logs after you enable the log auditing feature. Unit: day. Valid values: `180`, `30`, `365`, `90`. **NOTE:** The`log_store_day` is valid when the `audit_status` is `1`.
         * 
         * @return builder
         * 
         */
        public Builder logStoreDay(Integer logStoreDay) {
            return logStoreDay(Output.of(logStoreDay));
        }

        /**
         * @param parentId The ID of the data asset.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId The ID of the data asset.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param password The password that is used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password that is used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port The port that is used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port that is used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param resourceType The type of the service to which the data asset belongs. Valid values: `MaxCompute`, `OSS`, `RDS`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The type of the service to which the data asset belongs. Valid values: `MaxCompute`, `OSS`, `RDS`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param serviceRegionId The region ID of the data asset.
         * 
         * @return builder
         * 
         */
        public Builder serviceRegionId(@Nullable Output<String> serviceRegionId) {
            $.serviceRegionId = serviceRegionId;
            return this;
        }

        /**
         * @param serviceRegionId The region ID of the data asset.
         * 
         * @return builder
         * 
         */
        public Builder serviceRegionId(String serviceRegionId) {
            return serviceRegionId(Output.of(serviceRegionId));
        }

        /**
         * @param userName The name of the service to which the data asset belongs.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The name of the service to which the data asset belongs.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public DataLimitArgs build() {
            if ($.resourceType == null) {
                throw new MissingRequiredPropertyException("DataLimitArgs", "resourceType");
            }
            return $;
        }
    }

}
