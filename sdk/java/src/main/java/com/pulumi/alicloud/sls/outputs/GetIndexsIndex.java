// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.outputs;

import com.pulumi.alicloud.sls.outputs.GetIndexsIndexLine;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetIndexsIndex {
    /**
     * @return The ID of the resource supplied above.
     * 
     */
    private String id;
    /**
     * @return Field index
     * 
     */
    private String keys;
    /**
     * @return Full-text index
     * 
     */
    private GetIndexsIndexLine line;
    /**
     * @return The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
     * 
     */
    private List<String> logReduceBlackLists;
    /**
     * @return The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
     * 
     */
    private List<String> logReduceWhiteLists;
    /**
     * @return Maximum length of statistical field
     * 
     */
    private Integer maxTextLen;
    /**
     * @return Log index storage time
     * 
     */
    private Integer ttl;

    private GetIndexsIndex() {}
    /**
     * @return The ID of the resource supplied above.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Field index
     * 
     */
    public String keys() {
        return this.keys;
    }
    /**
     * @return Full-text index
     * 
     */
    public GetIndexsIndexLine line() {
        return this.line;
    }
    /**
     * @return The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
     * 
     */
    public List<String> logReduceBlackLists() {
        return this.logReduceBlackLists;
    }
    /**
     * @return The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
     * 
     */
    public List<String> logReduceWhiteLists() {
        return this.logReduceWhiteLists;
    }
    /**
     * @return Maximum length of statistical field
     * 
     */
    public Integer maxTextLen() {
        return this.maxTextLen;
    }
    /**
     * @return Log index storage time
     * 
     */
    public Integer ttl() {
        return this.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIndexsIndex defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String keys;
        private GetIndexsIndexLine line;
        private List<String> logReduceBlackLists;
        private List<String> logReduceWhiteLists;
        private Integer maxTextLen;
        private Integer ttl;
        public Builder() {}
        public Builder(GetIndexsIndex defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.keys = defaults.keys;
    	      this.line = defaults.line;
    	      this.logReduceBlackLists = defaults.logReduceBlackLists;
    	      this.logReduceWhiteLists = defaults.logReduceWhiteLists;
    	      this.maxTextLen = defaults.maxTextLen;
    	      this.ttl = defaults.ttl;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetIndexsIndex", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keys(String keys) {
            if (keys == null) {
              throw new MissingRequiredPropertyException("GetIndexsIndex", "keys");
            }
            this.keys = keys;
            return this;
        }
        @CustomType.Setter
        public Builder line(GetIndexsIndexLine line) {
            if (line == null) {
              throw new MissingRequiredPropertyException("GetIndexsIndex", "line");
            }
            this.line = line;
            return this;
        }
        @CustomType.Setter
        public Builder logReduceBlackLists(List<String> logReduceBlackLists) {
            if (logReduceBlackLists == null) {
              throw new MissingRequiredPropertyException("GetIndexsIndex", "logReduceBlackLists");
            }
            this.logReduceBlackLists = logReduceBlackLists;
            return this;
        }
        public Builder logReduceBlackLists(String... logReduceBlackLists) {
            return logReduceBlackLists(List.of(logReduceBlackLists));
        }
        @CustomType.Setter
        public Builder logReduceWhiteLists(List<String> logReduceWhiteLists) {
            if (logReduceWhiteLists == null) {
              throw new MissingRequiredPropertyException("GetIndexsIndex", "logReduceWhiteLists");
            }
            this.logReduceWhiteLists = logReduceWhiteLists;
            return this;
        }
        public Builder logReduceWhiteLists(String... logReduceWhiteLists) {
            return logReduceWhiteLists(List.of(logReduceWhiteLists));
        }
        @CustomType.Setter
        public Builder maxTextLen(Integer maxTextLen) {
            if (maxTextLen == null) {
              throw new MissingRequiredPropertyException("GetIndexsIndex", "maxTextLen");
            }
            this.maxTextLen = maxTextLen;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(Integer ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetIndexsIndex", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        public GetIndexsIndex build() {
            final var _resultValue = new GetIndexsIndex();
            _resultValue.id = id;
            _resultValue.keys = keys;
            _resultValue.line = line;
            _resultValue.logReduceBlackLists = logReduceBlackLists;
            _resultValue.logReduceWhiteLists = logReduceWhiteLists;
            _resultValue.maxTextLen = maxTextLen;
            _resultValue.ttl = ttl;
            return _resultValue;
        }
    }
}
