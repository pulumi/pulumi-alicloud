// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.alicloud.cms.inputs.MetricRuleBlackListMetricArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricRuleBlackListState extends com.pulumi.resources.ResourceArgs {

    public static final MetricRuleBlackListState Empty = new MetricRuleBlackListState();

    /**
     * Cloud service classification. For example, Redis includes kvstore_standard, kvstore_sharding, and kvstore_splitrw.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Cloud service classification. For example, Redis includes kvstore_standard, kvstore_sharding, and kvstore_splitrw.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * The timestamp for creating an alert blacklist policy.Unit: milliseconds.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The timestamp for creating an alert blacklist policy.Unit: milliseconds.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The effective time range of the alert blacklist policy.
     * 
     */
    @Import(name="effectiveTime")
    private @Nullable Output<String> effectiveTime;

    /**
     * @return The effective time range of the alert blacklist policy.
     * 
     */
    public Optional<Output<String>> effectiveTime() {
        return Optional.ofNullable(this.effectiveTime);
    }

    /**
     * The start timestamp of the alert blacklist policy.Unit: milliseconds.
     * 
     */
    @Import(name="enableEndTime")
    private @Nullable Output<String> enableEndTime;

    /**
     * @return The start timestamp of the alert blacklist policy.Unit: milliseconds.
     * 
     */
    public Optional<Output<String>> enableEndTime() {
        return Optional.ofNullable(this.enableEndTime);
    }

    /**
     * The end timestamp of the alert blacklist policy.Unit: milliseconds.
     * 
     */
    @Import(name="enableStartTime")
    private @Nullable Output<String> enableStartTime;

    /**
     * @return The end timestamp of the alert blacklist policy.Unit: milliseconds.
     * 
     */
    public Optional<Output<String>> enableStartTime() {
        return Optional.ofNullable(this.enableStartTime);
    }

    /**
     * The list of instances of cloud services specified in the alert blacklist policy.
     * 
     */
    @Import(name="instances")
    private @Nullable Output<List<String>> instances;

    /**
     * @return The list of instances of cloud services specified in the alert blacklist policy.
     * 
     */
    public Optional<Output<List<String>>> instances() {
        return Optional.ofNullable(this.instances);
    }

    /**
     * The status of the alert blacklist policy. Value:-true: enabled.-false: disabled.
     * 
     */
    @Import(name="isEnable")
    private @Nullable Output<Boolean> isEnable;

    /**
     * @return The status of the alert blacklist policy. Value:-true: enabled.-false: disabled.
     * 
     */
    public Optional<Output<Boolean>> isEnable() {
        return Optional.ofNullable(this.isEnable);
    }

    /**
     * The ID of the blacklist policy.
     * 
     */
    @Import(name="metricRuleBlackListId")
    private @Nullable Output<String> metricRuleBlackListId;

    /**
     * @return The ID of the blacklist policy.
     * 
     */
    public Optional<Output<String>> metricRuleBlackListId() {
        return Optional.ofNullable(this.metricRuleBlackListId);
    }

    /**
     * The name of the alert blacklist policy.
     * 
     */
    @Import(name="metricRuleBlackListName")
    private @Nullable Output<String> metricRuleBlackListName;

    /**
     * @return The name of the alert blacklist policy.
     * 
     */
    public Optional<Output<String>> metricRuleBlackListName() {
        return Optional.ofNullable(this.metricRuleBlackListName);
    }

    /**
     * Monitoring metrics in the instance. See `metrics` below.
     * 
     */
    @Import(name="metrics")
    private @Nullable Output<List<MetricRuleBlackListMetricArgs>> metrics;

    /**
     * @return Monitoring metrics in the instance. See `metrics` below.
     * 
     */
    public Optional<Output<List<MetricRuleBlackListMetricArgs>>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    /**
     * The data namespace of the cloud service.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The data namespace of the cloud service.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The effective range of the alert blacklist policy. Value:-USER: The alert blacklist policy only takes effect in the current Alibaba cloud account.-GROUP: The alert blacklist policy takes effect in the specified application GROUP.
     * 
     */
    @Import(name="scopeType")
    private @Nullable Output<String> scopeType;

    /**
     * @return The effective range of the alert blacklist policy. Value:-USER: The alert blacklist policy only takes effect in the current Alibaba cloud account.-GROUP: The alert blacklist policy takes effect in the specified application GROUP.
     * 
     */
    public Optional<Output<String>> scopeType() {
        return Optional.ofNullable(this.scopeType);
    }

    /**
     * Application Group ID list. The format is JSON Array.&gt; This parameter is displayed only when &#39;ScopeType&#39; is &#39;GROUP.
     * 
     */
    @Import(name="scopeValues")
    private @Nullable Output<List<String>> scopeValues;

    /**
     * @return Application Group ID list. The format is JSON Array.&gt; This parameter is displayed only when &#39;ScopeType&#39; is &#39;GROUP.
     * 
     */
    public Optional<Output<List<String>>> scopeValues() {
        return Optional.ofNullable(this.scopeValues);
    }

    /**
     * Modify the timestamp of the alert blacklist policy.Unit: milliseconds.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Modify the timestamp of the alert blacklist policy.Unit: milliseconds.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private MetricRuleBlackListState() {}

    private MetricRuleBlackListState(MetricRuleBlackListState $) {
        this.category = $.category;
        this.createTime = $.createTime;
        this.effectiveTime = $.effectiveTime;
        this.enableEndTime = $.enableEndTime;
        this.enableStartTime = $.enableStartTime;
        this.instances = $.instances;
        this.isEnable = $.isEnable;
        this.metricRuleBlackListId = $.metricRuleBlackListId;
        this.metricRuleBlackListName = $.metricRuleBlackListName;
        this.metrics = $.metrics;
        this.namespace = $.namespace;
        this.scopeType = $.scopeType;
        this.scopeValues = $.scopeValues;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricRuleBlackListState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricRuleBlackListState $;

        public Builder() {
            $ = new MetricRuleBlackListState();
        }

        public Builder(MetricRuleBlackListState defaults) {
            $ = new MetricRuleBlackListState(Objects.requireNonNull(defaults));
        }

        /**
         * @param category Cloud service classification. For example, Redis includes kvstore_standard, kvstore_sharding, and kvstore_splitrw.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Cloud service classification. For example, Redis includes kvstore_standard, kvstore_sharding, and kvstore_splitrw.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param createTime The timestamp for creating an alert blacklist policy.Unit: milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The timestamp for creating an alert blacklist policy.Unit: milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param effectiveTime The effective time range of the alert blacklist policy.
         * 
         * @return builder
         * 
         */
        public Builder effectiveTime(@Nullable Output<String> effectiveTime) {
            $.effectiveTime = effectiveTime;
            return this;
        }

        /**
         * @param effectiveTime The effective time range of the alert blacklist policy.
         * 
         * @return builder
         * 
         */
        public Builder effectiveTime(String effectiveTime) {
            return effectiveTime(Output.of(effectiveTime));
        }

        /**
         * @param enableEndTime The start timestamp of the alert blacklist policy.Unit: milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder enableEndTime(@Nullable Output<String> enableEndTime) {
            $.enableEndTime = enableEndTime;
            return this;
        }

        /**
         * @param enableEndTime The start timestamp of the alert blacklist policy.Unit: milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder enableEndTime(String enableEndTime) {
            return enableEndTime(Output.of(enableEndTime));
        }

        /**
         * @param enableStartTime The end timestamp of the alert blacklist policy.Unit: milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder enableStartTime(@Nullable Output<String> enableStartTime) {
            $.enableStartTime = enableStartTime;
            return this;
        }

        /**
         * @param enableStartTime The end timestamp of the alert blacklist policy.Unit: milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder enableStartTime(String enableStartTime) {
            return enableStartTime(Output.of(enableStartTime));
        }

        /**
         * @param instances The list of instances of cloud services specified in the alert blacklist policy.
         * 
         * @return builder
         * 
         */
        public Builder instances(@Nullable Output<List<String>> instances) {
            $.instances = instances;
            return this;
        }

        /**
         * @param instances The list of instances of cloud services specified in the alert blacklist policy.
         * 
         * @return builder
         * 
         */
        public Builder instances(List<String> instances) {
            return instances(Output.of(instances));
        }

        /**
         * @param instances The list of instances of cloud services specified in the alert blacklist policy.
         * 
         * @return builder
         * 
         */
        public Builder instances(String... instances) {
            return instances(List.of(instances));
        }

        /**
         * @param isEnable The status of the alert blacklist policy. Value:-true: enabled.-false: disabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnable(@Nullable Output<Boolean> isEnable) {
            $.isEnable = isEnable;
            return this;
        }

        /**
         * @param isEnable The status of the alert blacklist policy. Value:-true: enabled.-false: disabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnable(Boolean isEnable) {
            return isEnable(Output.of(isEnable));
        }

        /**
         * @param metricRuleBlackListId The ID of the blacklist policy.
         * 
         * @return builder
         * 
         */
        public Builder metricRuleBlackListId(@Nullable Output<String> metricRuleBlackListId) {
            $.metricRuleBlackListId = metricRuleBlackListId;
            return this;
        }

        /**
         * @param metricRuleBlackListId The ID of the blacklist policy.
         * 
         * @return builder
         * 
         */
        public Builder metricRuleBlackListId(String metricRuleBlackListId) {
            return metricRuleBlackListId(Output.of(metricRuleBlackListId));
        }

        /**
         * @param metricRuleBlackListName The name of the alert blacklist policy.
         * 
         * @return builder
         * 
         */
        public Builder metricRuleBlackListName(@Nullable Output<String> metricRuleBlackListName) {
            $.metricRuleBlackListName = metricRuleBlackListName;
            return this;
        }

        /**
         * @param metricRuleBlackListName The name of the alert blacklist policy.
         * 
         * @return builder
         * 
         */
        public Builder metricRuleBlackListName(String metricRuleBlackListName) {
            return metricRuleBlackListName(Output.of(metricRuleBlackListName));
        }

        /**
         * @param metrics Monitoring metrics in the instance. See `metrics` below.
         * 
         * @return builder
         * 
         */
        public Builder metrics(@Nullable Output<List<MetricRuleBlackListMetricArgs>> metrics) {
            $.metrics = metrics;
            return this;
        }

        /**
         * @param metrics Monitoring metrics in the instance. See `metrics` below.
         * 
         * @return builder
         * 
         */
        public Builder metrics(List<MetricRuleBlackListMetricArgs> metrics) {
            return metrics(Output.of(metrics));
        }

        /**
         * @param metrics Monitoring metrics in the instance. See `metrics` below.
         * 
         * @return builder
         * 
         */
        public Builder metrics(MetricRuleBlackListMetricArgs... metrics) {
            return metrics(List.of(metrics));
        }

        /**
         * @param namespace The data namespace of the cloud service.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The data namespace of the cloud service.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param scopeType The effective range of the alert blacklist policy. Value:-USER: The alert blacklist policy only takes effect in the current Alibaba cloud account.-GROUP: The alert blacklist policy takes effect in the specified application GROUP.
         * 
         * @return builder
         * 
         */
        public Builder scopeType(@Nullable Output<String> scopeType) {
            $.scopeType = scopeType;
            return this;
        }

        /**
         * @param scopeType The effective range of the alert blacklist policy. Value:-USER: The alert blacklist policy only takes effect in the current Alibaba cloud account.-GROUP: The alert blacklist policy takes effect in the specified application GROUP.
         * 
         * @return builder
         * 
         */
        public Builder scopeType(String scopeType) {
            return scopeType(Output.of(scopeType));
        }

        /**
         * @param scopeValues Application Group ID list. The format is JSON Array.&gt; This parameter is displayed only when &#39;ScopeType&#39; is &#39;GROUP.
         * 
         * @return builder
         * 
         */
        public Builder scopeValues(@Nullable Output<List<String>> scopeValues) {
            $.scopeValues = scopeValues;
            return this;
        }

        /**
         * @param scopeValues Application Group ID list. The format is JSON Array.&gt; This parameter is displayed only when &#39;ScopeType&#39; is &#39;GROUP.
         * 
         * @return builder
         * 
         */
        public Builder scopeValues(List<String> scopeValues) {
            return scopeValues(Output.of(scopeValues));
        }

        /**
         * @param scopeValues Application Group ID list. The format is JSON Array.&gt; This parameter is displayed only when &#39;ScopeType&#39; is &#39;GROUP.
         * 
         * @return builder
         * 
         */
        public Builder scopeValues(String... scopeValues) {
            return scopeValues(List.of(scopeValues));
        }

        /**
         * @param updateTime Modify the timestamp of the alert blacklist policy.Unit: milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Modify the timestamp of the alert blacklist policy.Unit: milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public MetricRuleBlackListState build() {
            return $;
        }
    }

}
