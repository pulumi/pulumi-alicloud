// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ram;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.ram.SecurityPreferenceArgs;
import com.pulumi.alicloud.ram.inputs.SecurityPreferenceState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * RAM Security Preference can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:ram/securityPreference:SecurityPreference example 
 * ```
 * 
 */
@ResourceType(type="alicloud:ram/securityPreference:SecurityPreference")
public class SecurityPreference extends com.pulumi.resources.CustomResource {
    /**
     * Whether to allow RAM users to manage their own passwords. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    @Export(name="allowUserToChangePassword", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> allowUserToChangePassword;

    /**
     * @return Whether to allow RAM users to manage their own passwords. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    public Output<Boolean> allowUserToChangePassword() {
        return this.allowUserToChangePassword;
    }
    /**
     * Whether to allow RAM users to log on using a passkey. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    @Export(name="allowUserToLoginWithPasskey", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> allowUserToLoginWithPasskey;

    /**
     * @return Whether to allow RAM users to log on using a passkey. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    public Output<Boolean> allowUserToLoginWithPasskey() {
        return this.allowUserToLoginWithPasskey;
    }
    /**
     * Whether to allow RAM users to manage their own access keys. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     * 
     */
    @Export(name="allowUserToManageAccessKeys", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> allowUserToManageAccessKeys;

    /**
     * @return Whether to allow RAM users to manage their own access keys. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     * 
     */
    public Output<Boolean> allowUserToManageAccessKeys() {
        return this.allowUserToManageAccessKeys;
    }
    /**
     * Whether to allow RAM users to manage multi-factor authentication devices. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    @Export(name="allowUserToManageMfaDevices", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> allowUserToManageMfaDevices;

    /**
     * @return Whether to allow RAM users to manage multi-factor authentication devices. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    public Output<Boolean> allowUserToManageMfaDevices() {
        return this.allowUserToManageMfaDevices;
    }
    /**
     * Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    @Export(name="allowUserToManagePersonalDingTalk", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> allowUserToManagePersonalDingTalk;

    /**
     * @return Whether to allow RAM users to independently manage the binding and unbinding of personal DingTalk. Value:
     * - true (default): Allowed.
     * - false: not allowed.
     * 
     */
    public Output<Boolean> allowUserToManagePersonalDingTalk() {
        return this.allowUserToManagePersonalDingTalk;
    }
    /**
     * Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     * 
     */
    @Export(name="enableSaveMfaTicket", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableSaveMfaTicket;

    /**
     * @return Whether to save the verification status of a RAM user after logging in using multi-factor authentication. The validity period is 7 days. Value:
     * - true: Allow.
     * - false (default): Not allowed.
     * 
     */
    public Output<Boolean> enableSaveMfaTicket() {
        return this.enableSaveMfaTicket;
    }
    /**
     * Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead.
     * Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
     * 
     */
    @Export(name="enforceMfaForLogin", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enforceMfaForLogin;

    /**
     * @return Field `enforceMfaForLogin` has been deprecated from provider version 1.248.0. New field `mfaOperationForLogin` instead.
     * Specifies whether MFA is required for all RAM users when they log on to the Alibaba Cloud Management Console by using usernames and passwords. Valid values: `true` and `false`
     * 
     */
    public Output<Boolean> enforceMfaForLogin() {
        return this.enforceMfaForLogin;
    }
    /**
     * The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
     * - If the mask is specified, RAM users can only log on from the specified IP address.
     * - If you do not specify any mask, the login console function will apply to the entire network.
     * 
     * When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
     * 
     * Configure a maximum of 40 logon masks, with a total length of 512 characters.
     * 
     */
    @Export(name="loginNetworkMasks", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> loginNetworkMasks;

    /**
     * @return The login mask. The logon mask determines which IP addresses are affected by the logon console, including password logon and single sign-on (SSO), but API calls made using the access key are not affected.
     * - If the mask is specified, RAM users can only log on from the specified IP address.
     * - If you do not specify any mask, the login console function will apply to the entire network.
     * 
     * When you need to configure multiple login masks, use a semicolon (;) to separate them, for example: 192.168.0.0/16;10.0.0.0/8.
     * 
     * Configure a maximum of 40 logon masks, with a total length of 512 characters.
     * 
     */
    public Output<Optional<String>> loginNetworkMasks() {
        return Codegen.optional(this.loginNetworkMasks);
    }
    /**
     * The validity period of the logon session of RAM users.
     * Valid values: 1 to 24. Unit: hours.
     * Default value: 6.
     * 
     */
    @Export(name="loginSessionDuration", refs={Integer.class}, tree="[0]")
    private Output<Integer> loginSessionDuration;

    /**
     * @return The validity period of the logon session of RAM users.
     * Valid values: 1 to 24. Unit: hours.
     * Default value: 6.
     * 
     */
    public Output<Integer> loginSessionDuration() {
        return this.loginSessionDuration;
    }
    /**
     * MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
     * - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
     * - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
     * - adaptive: Used only during abnormal login.
     * 
     */
    @Export(name="mfaOperationForLogin", refs={String.class}, tree="[0]")
    private Output<String> mfaOperationForLogin;

    /**
     * @return MFA must be used during logon (replace the original EnforceMFAForLogin parameter, the original parameter is still valid, we recommend that you update it to a new parameter). Value:
     * - mandatory: mandatory for all RAM users. The original value of EnforceMFAForLogin is true.
     * - independent (default): depends on the independent configuration of each RAM user. The original value of EnforceMFAForLogin is false.
     * - adaptive: Used only during abnormal login.
     * 
     */
    public Output<String> mfaOperationForLogin() {
        return this.mfaOperationForLogin;
    }
    /**
     * Whether MFA is verified twice during abnormal logon. Value:
     * - autonomous (default): Skip, do not force binding.
     * - enforceVerify: Force binding validation.
     * 
     */
    @Export(name="operationForRiskLogin", refs={String.class}, tree="[0]")
    private Output<String> operationForRiskLogin;

    /**
     * @return Whether MFA is verified twice during abnormal logon. Value:
     * - autonomous (default): Skip, do not force binding.
     * - enforceVerify: Force binding validation.
     * 
     */
    public Output<String> operationForRiskLogin() {
        return this.operationForRiskLogin;
    }
    /**
     * Means of multi-factor authentication. Value:
     * - sms: secure phone.
     * - email: Secure mailbox.
     * 
     * The following arguments will be discarded. Please use new fields as soon as possible:
     * 
     */
    @Export(name="verificationTypes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> verificationTypes;

    /**
     * @return Means of multi-factor authentication. Value:
     * - sms: secure phone.
     * - email: Secure mailbox.
     * 
     * The following arguments will be discarded. Please use new fields as soon as possible:
     * 
     */
    public Output<Optional<List<String>>> verificationTypes() {
        return Codegen.optional(this.verificationTypes);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SecurityPreference(java.lang.String name) {
        this(name, SecurityPreferenceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SecurityPreference(java.lang.String name, @Nullable SecurityPreferenceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SecurityPreference(java.lang.String name, @Nullable SecurityPreferenceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:ram/securityPreference:SecurityPreference", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SecurityPreference(java.lang.String name, Output<java.lang.String> id, @Nullable SecurityPreferenceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:ram/securityPreference:SecurityPreference", name, state, makeResourceOptions(options, id), false);
    }

    private static SecurityPreferenceArgs makeArgs(@Nullable SecurityPreferenceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SecurityPreferenceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SecurityPreference get(java.lang.String name, Output<java.lang.String> id, @Nullable SecurityPreferenceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SecurityPreference(name, id, state, options);
    }
}
