// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticTaskMonitorConfWebsite {
    private @Nullable Integer automaticScrolling;
    private @Nullable Integer customHeader;
    private @Nullable Map<String,Object> customHeaderContent;
    private @Nullable Integer disableCache;
    private @Nullable Integer disableCompression;
    private @Nullable String dnsHijackWhitelist;
    private @Nullable String elementBlacklist;
    private @Nullable Integer filterInvalidIp;
    private @Nullable Integer flowHijackJumpTimes;
    private @Nullable String flowHijackLogo;
    private @Nullable Integer ignoreCertificateError;
    private @Nullable Integer monitorTimeout;
    private @Nullable String pageTamper;
    private @Nullable Integer redirection;
    private @Nullable Integer slowElementThreshold;
    private String targetUrl;
    private @Nullable String verifyStringBlacklist;
    private @Nullable String verifyStringWhitelist;
    private @Nullable Integer waitCompletionTime;

    private SyntheticTaskMonitorConfWebsite() {}
    public Optional<Integer> automaticScrolling() {
        return Optional.ofNullable(this.automaticScrolling);
    }
    public Optional<Integer> customHeader() {
        return Optional.ofNullable(this.customHeader);
    }
    public Map<String,Object> customHeaderContent() {
        return this.customHeaderContent == null ? Map.of() : this.customHeaderContent;
    }
    public Optional<Integer> disableCache() {
        return Optional.ofNullable(this.disableCache);
    }
    public Optional<Integer> disableCompression() {
        return Optional.ofNullable(this.disableCompression);
    }
    public Optional<String> dnsHijackWhitelist() {
        return Optional.ofNullable(this.dnsHijackWhitelist);
    }
    public Optional<String> elementBlacklist() {
        return Optional.ofNullable(this.elementBlacklist);
    }
    public Optional<Integer> filterInvalidIp() {
        return Optional.ofNullable(this.filterInvalidIp);
    }
    public Optional<Integer> flowHijackJumpTimes() {
        return Optional.ofNullable(this.flowHijackJumpTimes);
    }
    public Optional<String> flowHijackLogo() {
        return Optional.ofNullable(this.flowHijackLogo);
    }
    public Optional<Integer> ignoreCertificateError() {
        return Optional.ofNullable(this.ignoreCertificateError);
    }
    public Optional<Integer> monitorTimeout() {
        return Optional.ofNullable(this.monitorTimeout);
    }
    public Optional<String> pageTamper() {
        return Optional.ofNullable(this.pageTamper);
    }
    public Optional<Integer> redirection() {
        return Optional.ofNullable(this.redirection);
    }
    public Optional<Integer> slowElementThreshold() {
        return Optional.ofNullable(this.slowElementThreshold);
    }
    public String targetUrl() {
        return this.targetUrl;
    }
    public Optional<String> verifyStringBlacklist() {
        return Optional.ofNullable(this.verifyStringBlacklist);
    }
    public Optional<String> verifyStringWhitelist() {
        return Optional.ofNullable(this.verifyStringWhitelist);
    }
    public Optional<Integer> waitCompletionTime() {
        return Optional.ofNullable(this.waitCompletionTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticTaskMonitorConfWebsite defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer automaticScrolling;
        private @Nullable Integer customHeader;
        private @Nullable Map<String,Object> customHeaderContent;
        private @Nullable Integer disableCache;
        private @Nullable Integer disableCompression;
        private @Nullable String dnsHijackWhitelist;
        private @Nullable String elementBlacklist;
        private @Nullable Integer filterInvalidIp;
        private @Nullable Integer flowHijackJumpTimes;
        private @Nullable String flowHijackLogo;
        private @Nullable Integer ignoreCertificateError;
        private @Nullable Integer monitorTimeout;
        private @Nullable String pageTamper;
        private @Nullable Integer redirection;
        private @Nullable Integer slowElementThreshold;
        private String targetUrl;
        private @Nullable String verifyStringBlacklist;
        private @Nullable String verifyStringWhitelist;
        private @Nullable Integer waitCompletionTime;
        public Builder() {}
        public Builder(SyntheticTaskMonitorConfWebsite defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticScrolling = defaults.automaticScrolling;
    	      this.customHeader = defaults.customHeader;
    	      this.customHeaderContent = defaults.customHeaderContent;
    	      this.disableCache = defaults.disableCache;
    	      this.disableCompression = defaults.disableCompression;
    	      this.dnsHijackWhitelist = defaults.dnsHijackWhitelist;
    	      this.elementBlacklist = defaults.elementBlacklist;
    	      this.filterInvalidIp = defaults.filterInvalidIp;
    	      this.flowHijackJumpTimes = defaults.flowHijackJumpTimes;
    	      this.flowHijackLogo = defaults.flowHijackLogo;
    	      this.ignoreCertificateError = defaults.ignoreCertificateError;
    	      this.monitorTimeout = defaults.monitorTimeout;
    	      this.pageTamper = defaults.pageTamper;
    	      this.redirection = defaults.redirection;
    	      this.slowElementThreshold = defaults.slowElementThreshold;
    	      this.targetUrl = defaults.targetUrl;
    	      this.verifyStringBlacklist = defaults.verifyStringBlacklist;
    	      this.verifyStringWhitelist = defaults.verifyStringWhitelist;
    	      this.waitCompletionTime = defaults.waitCompletionTime;
        }

        @CustomType.Setter
        public Builder automaticScrolling(@Nullable Integer automaticScrolling) {

            this.automaticScrolling = automaticScrolling;
            return this;
        }
        @CustomType.Setter
        public Builder customHeader(@Nullable Integer customHeader) {

            this.customHeader = customHeader;
            return this;
        }
        @CustomType.Setter
        public Builder customHeaderContent(@Nullable Map<String,Object> customHeaderContent) {

            this.customHeaderContent = customHeaderContent;
            return this;
        }
        @CustomType.Setter
        public Builder disableCache(@Nullable Integer disableCache) {

            this.disableCache = disableCache;
            return this;
        }
        @CustomType.Setter
        public Builder disableCompression(@Nullable Integer disableCompression) {

            this.disableCompression = disableCompression;
            return this;
        }
        @CustomType.Setter
        public Builder dnsHijackWhitelist(@Nullable String dnsHijackWhitelist) {

            this.dnsHijackWhitelist = dnsHijackWhitelist;
            return this;
        }
        @CustomType.Setter
        public Builder elementBlacklist(@Nullable String elementBlacklist) {

            this.elementBlacklist = elementBlacklist;
            return this;
        }
        @CustomType.Setter
        public Builder filterInvalidIp(@Nullable Integer filterInvalidIp) {

            this.filterInvalidIp = filterInvalidIp;
            return this;
        }
        @CustomType.Setter
        public Builder flowHijackJumpTimes(@Nullable Integer flowHijackJumpTimes) {

            this.flowHijackJumpTimes = flowHijackJumpTimes;
            return this;
        }
        @CustomType.Setter
        public Builder flowHijackLogo(@Nullable String flowHijackLogo) {

            this.flowHijackLogo = flowHijackLogo;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreCertificateError(@Nullable Integer ignoreCertificateError) {

            this.ignoreCertificateError = ignoreCertificateError;
            return this;
        }
        @CustomType.Setter
        public Builder monitorTimeout(@Nullable Integer monitorTimeout) {

            this.monitorTimeout = monitorTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder pageTamper(@Nullable String pageTamper) {

            this.pageTamper = pageTamper;
            return this;
        }
        @CustomType.Setter
        public Builder redirection(@Nullable Integer redirection) {

            this.redirection = redirection;
            return this;
        }
        @CustomType.Setter
        public Builder slowElementThreshold(@Nullable Integer slowElementThreshold) {

            this.slowElementThreshold = slowElementThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder targetUrl(String targetUrl) {
            if (targetUrl == null) {
              throw new MissingRequiredPropertyException("SyntheticTaskMonitorConfWebsite", "targetUrl");
            }
            this.targetUrl = targetUrl;
            return this;
        }
        @CustomType.Setter
        public Builder verifyStringBlacklist(@Nullable String verifyStringBlacklist) {

            this.verifyStringBlacklist = verifyStringBlacklist;
            return this;
        }
        @CustomType.Setter
        public Builder verifyStringWhitelist(@Nullable String verifyStringWhitelist) {

            this.verifyStringWhitelist = verifyStringWhitelist;
            return this;
        }
        @CustomType.Setter
        public Builder waitCompletionTime(@Nullable Integer waitCompletionTime) {

            this.waitCompletionTime = waitCompletionTime;
            return this;
        }
        public SyntheticTaskMonitorConfWebsite build() {
            final var _resultValue = new SyntheticTaskMonitorConfWebsite();
            _resultValue.automaticScrolling = automaticScrolling;
            _resultValue.customHeader = customHeader;
            _resultValue.customHeaderContent = customHeaderContent;
            _resultValue.disableCache = disableCache;
            _resultValue.disableCompression = disableCompression;
            _resultValue.dnsHijackWhitelist = dnsHijackWhitelist;
            _resultValue.elementBlacklist = elementBlacklist;
            _resultValue.filterInvalidIp = filterInvalidIp;
            _resultValue.flowHijackJumpTimes = flowHijackJumpTimes;
            _resultValue.flowHijackLogo = flowHijackLogo;
            _resultValue.ignoreCertificateError = ignoreCertificateError;
            _resultValue.monitorTimeout = monitorTimeout;
            _resultValue.pageTamper = pageTamper;
            _resultValue.redirection = redirection;
            _resultValue.slowElementThreshold = slowElementThreshold;
            _resultValue.targetUrl = targetUrl;
            _resultValue.verifyStringBlacklist = verifyStringBlacklist;
            _resultValue.verifyStringWhitelist = verifyStringWhitelist;
            _resultValue.waitCompletionTime = waitCompletionTime;
            return _resultValue;
        }
    }
}
