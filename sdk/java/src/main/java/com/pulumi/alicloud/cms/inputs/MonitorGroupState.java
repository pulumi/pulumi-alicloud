// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorGroupState extends com.pulumi.resources.ResourceArgs {

    public static final MonitorGroupState Empty = new MonitorGroupState();

    /**
     * The alert group to which alert notifications will be sent.
     * 
     */
    @Import(name="contactGroups")
    private @Nullable Output<List<String>> contactGroups;

    /**
     * @return The alert group to which alert notifications will be sent.
     * 
     */
    public Optional<Output<List<String>>> contactGroups() {
        return Optional.ofNullable(this.contactGroups);
    }

    /**
     * The name of the application group.
     * 
     */
    @Import(name="monitorGroupName")
    private @Nullable Output<String> monitorGroupName;

    /**
     * @return The name of the application group.
     * 
     */
    public Optional<Output<String>> monitorGroupName() {
        return Optional.ofNullable(this.monitorGroupName);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private MonitorGroupState() {}

    private MonitorGroupState(MonitorGroupState $) {
        this.contactGroups = $.contactGroups;
        this.monitorGroupName = $.monitorGroupName;
        this.resourceGroupId = $.resourceGroupId;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorGroupState $;

        public Builder() {
            $ = new MonitorGroupState();
        }

        public Builder(MonitorGroupState defaults) {
            $ = new MonitorGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactGroups The alert group to which alert notifications will be sent.
         * 
         * @return builder
         * 
         */
        public Builder contactGroups(@Nullable Output<List<String>> contactGroups) {
            $.contactGroups = contactGroups;
            return this;
        }

        /**
         * @param contactGroups The alert group to which alert notifications will be sent.
         * 
         * @return builder
         * 
         */
        public Builder contactGroups(List<String> contactGroups) {
            return contactGroups(Output.of(contactGroups));
        }

        /**
         * @param contactGroups The alert group to which alert notifications will be sent.
         * 
         * @return builder
         * 
         */
        public Builder contactGroups(String... contactGroups) {
            return contactGroups(List.of(contactGroups));
        }

        /**
         * @param monitorGroupName The name of the application group.
         * 
         * @return builder
         * 
         */
        public Builder monitorGroupName(@Nullable Output<String> monitorGroupName) {
            $.monitorGroupName = monitorGroupName;
            return this;
        }

        /**
         * @param monitorGroupName The name of the application group.
         * 
         * @return builder
         * 
         */
        public Builder monitorGroupName(String monitorGroupName) {
            return monitorGroupName(Output.of(monitorGroupName));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public MonitorGroupState build() {
            return $;
        }
    }

}
