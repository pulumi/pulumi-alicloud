// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EcsDiskAttachmentState extends com.pulumi.resources.ResourceArgs {

    public static final EcsDiskAttachmentState Empty = new EcsDiskAttachmentState();

    /**
     * Whether to mount as a system disk. Default to: `false`.
     * 
     */
    @Import(name="bootable")
    private @Nullable Output<Boolean> bootable;

    /**
     * @return Whether to mount as a system disk. Default to: `false`.
     * 
     */
    public Optional<Output<Boolean>> bootable() {
        return Optional.ofNullable(this.bootable);
    }

    /**
     * Indicates whether the disk is released together with the instance. Default to: `false`.
     * 
     */
    @Import(name="deleteWithInstance")
    private @Nullable Output<Boolean> deleteWithInstance;

    /**
     * @return Indicates whether the disk is released together with the instance. Default to: `false`.
     * 
     */
    public Optional<Output<Boolean>> deleteWithInstance() {
        return Optional.ofNullable(this.deleteWithInstance);
    }

    /**
     * The name of the cloud disk device.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return The name of the cloud disk device.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * ID of the Disk to be attached.
     * 
     */
    @Import(name="diskId")
    private @Nullable Output<String> diskId;

    /**
     * @return ID of the Disk to be attached.
     * 
     */
    public Optional<Output<String>> diskId() {
        return Optional.ofNullable(this.diskId);
    }

    /**
     * ID of the Instance to attach to.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return ID of the Instance to attach to.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The name of key pair
     * 
     */
    @Import(name="keyPairName")
    private @Nullable Output<String> keyPairName;

    /**
     * @return The name of key pair
     * 
     */
    public Optional<Output<String>> keyPairName() {
        return Optional.ofNullable(this.keyPairName);
    }

    /**
     * When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    private EcsDiskAttachmentState() {}

    private EcsDiskAttachmentState(EcsDiskAttachmentState $) {
        this.bootable = $.bootable;
        this.deleteWithInstance = $.deleteWithInstance;
        this.device = $.device;
        this.diskId = $.diskId;
        this.instanceId = $.instanceId;
        this.keyPairName = $.keyPairName;
        this.password = $.password;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EcsDiskAttachmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EcsDiskAttachmentState $;

        public Builder() {
            $ = new EcsDiskAttachmentState();
        }

        public Builder(EcsDiskAttachmentState defaults) {
            $ = new EcsDiskAttachmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootable Whether to mount as a system disk. Default to: `false`.
         * 
         * @return builder
         * 
         */
        public Builder bootable(@Nullable Output<Boolean> bootable) {
            $.bootable = bootable;
            return this;
        }

        /**
         * @param bootable Whether to mount as a system disk. Default to: `false`.
         * 
         * @return builder
         * 
         */
        public Builder bootable(Boolean bootable) {
            return bootable(Output.of(bootable));
        }

        /**
         * @param deleteWithInstance Indicates whether the disk is released together with the instance. Default to: `false`.
         * 
         * @return builder
         * 
         */
        public Builder deleteWithInstance(@Nullable Output<Boolean> deleteWithInstance) {
            $.deleteWithInstance = deleteWithInstance;
            return this;
        }

        /**
         * @param deleteWithInstance Indicates whether the disk is released together with the instance. Default to: `false`.
         * 
         * @return builder
         * 
         */
        public Builder deleteWithInstance(Boolean deleteWithInstance) {
            return deleteWithInstance(Output.of(deleteWithInstance));
        }

        /**
         * @param device The name of the cloud disk device.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device The name of the cloud disk device.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param diskId ID of the Disk to be attached.
         * 
         * @return builder
         * 
         */
        public Builder diskId(@Nullable Output<String> diskId) {
            $.diskId = diskId;
            return this;
        }

        /**
         * @param diskId ID of the Disk to be attached.
         * 
         * @return builder
         * 
         */
        public Builder diskId(String diskId) {
            return diskId(Output.of(diskId));
        }

        /**
         * @param instanceId ID of the Instance to attach to.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId ID of the Instance to attach to.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param keyPairName The name of key pair
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(@Nullable Output<String> keyPairName) {
            $.keyPairName = keyPairName;
            return this;
        }

        /**
         * @param keyPairName The name of key pair
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(String keyPairName) {
            return keyPairName(Output.of(keyPairName));
        }

        /**
         * @param password When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        public EcsDiskAttachmentState build() {
            return $;
        }
    }

}
