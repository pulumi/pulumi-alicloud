// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HoneypotNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final HoneypotNodeArgs Empty = new HoneypotNodeArgs();

    /**
     * Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
     * 
     */
    @Import(name="allowHoneypotAccessInternet")
    private @Nullable Output<Boolean> allowHoneypotAccessInternet;

    /**
     * @return Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
     * 
     */
    public Optional<Output<Boolean>> allowHoneypotAccessInternet() {
        return Optional.ofNullable(this.allowHoneypotAccessInternet);
    }

    /**
     * Number of probes available.
     * 
     */
    @Import(name="availableProbeNum", required=true)
    private Output<Integer> availableProbeNum;

    /**
     * @return Number of probes available.
     * 
     */
    public Output<Integer> availableProbeNum() {
        return this.availableProbeNum;
    }

    /**
     * Management node name.
     * 
     */
    @Import(name="nodeName", required=true)
    private Output<String> nodeName;

    /**
     * @return Management node name.
     * 
     */
    public Output<String> nodeName() {
        return this.nodeName;
    }

    /**
     * Release the collection of network segments.
     * 
     */
    @Import(name="securityGroupProbeIpLists")
    private @Nullable Output<List<String>> securityGroupProbeIpLists;

    /**
     * @return Release the collection of network segments.
     * 
     */
    public Optional<Output<List<String>>> securityGroupProbeIpLists() {
        return Optional.ofNullable(this.securityGroupProbeIpLists);
    }

    private HoneypotNodeArgs() {}

    private HoneypotNodeArgs(HoneypotNodeArgs $) {
        this.allowHoneypotAccessInternet = $.allowHoneypotAccessInternet;
        this.availableProbeNum = $.availableProbeNum;
        this.nodeName = $.nodeName;
        this.securityGroupProbeIpLists = $.securityGroupProbeIpLists;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HoneypotNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HoneypotNodeArgs $;

        public Builder() {
            $ = new HoneypotNodeArgs();
        }

        public Builder(HoneypotNodeArgs defaults) {
            $ = new HoneypotNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowHoneypotAccessInternet Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
         * 
         * @return builder
         * 
         */
        public Builder allowHoneypotAccessInternet(@Nullable Output<Boolean> allowHoneypotAccessInternet) {
            $.allowHoneypotAccessInternet = allowHoneypotAccessInternet;
            return this;
        }

        /**
         * @param allowHoneypotAccessInternet Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
         * 
         * @return builder
         * 
         */
        public Builder allowHoneypotAccessInternet(Boolean allowHoneypotAccessInternet) {
            return allowHoneypotAccessInternet(Output.of(allowHoneypotAccessInternet));
        }

        /**
         * @param availableProbeNum Number of probes available.
         * 
         * @return builder
         * 
         */
        public Builder availableProbeNum(Output<Integer> availableProbeNum) {
            $.availableProbeNum = availableProbeNum;
            return this;
        }

        /**
         * @param availableProbeNum Number of probes available.
         * 
         * @return builder
         * 
         */
        public Builder availableProbeNum(Integer availableProbeNum) {
            return availableProbeNum(Output.of(availableProbeNum));
        }

        /**
         * @param nodeName Management node name.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName Management node name.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param securityGroupProbeIpLists Release the collection of network segments.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupProbeIpLists(@Nullable Output<List<String>> securityGroupProbeIpLists) {
            $.securityGroupProbeIpLists = securityGroupProbeIpLists;
            return this;
        }

        /**
         * @param securityGroupProbeIpLists Release the collection of network segments.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupProbeIpLists(List<String> securityGroupProbeIpLists) {
            return securityGroupProbeIpLists(Output.of(securityGroupProbeIpLists));
        }

        /**
         * @param securityGroupProbeIpLists Release the collection of network segments.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupProbeIpLists(String... securityGroupProbeIpLists) {
            return securityGroupProbeIpLists(List.of(securityGroupProbeIpLists));
        }

        public HoneypotNodeArgs build() {
            if ($.availableProbeNum == null) {
                throw new MissingRequiredPropertyException("HoneypotNodeArgs", "availableProbeNum");
            }
            if ($.nodeName == null) {
                throw new MissingRequiredPropertyException("HoneypotNodeArgs", "nodeName");
            }
            return $;
        }
    }

}
