// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNatIpsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNatIpsArgs Empty = new GetNatIpsArgs();

    /**
     * A list of Nat Ip IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of Nat Ip IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * A regex string to filter results by Nat Ip name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable Output<String> nameRegex;

    /**
     * @return A regex string to filter results by Nat Ip name.
     * 
     */
    public Optional<Output<String>> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * The ID of the Virtual Private Cloud (VPC) NAT gateway to which the NAT IP address belongs.
     * 
     */
    @Import(name="natGatewayId", required=true)
    private Output<String> natGatewayId;

    /**
     * @return The ID of the Virtual Private Cloud (VPC) NAT gateway to which the NAT IP address belongs.
     * 
     */
    public Output<String> natGatewayId() {
        return this.natGatewayId;
    }

    /**
     * The CIDR block to which the NAT IP address belongs.
     * 
     */
    @Import(name="natIpCidr")
    private @Nullable Output<String> natIpCidr;

    /**
     * @return The CIDR block to which the NAT IP address belongs.
     * 
     */
    public Optional<Output<String>> natIpCidr() {
        return Optional.ofNullable(this.natIpCidr);
    }

    @Import(name="natIpIds")
    private @Nullable Output<List<String>> natIpIds;

    public Optional<Output<List<String>>> natIpIds() {
        return Optional.ofNullable(this.natIpIds);
    }

    /**
     * The name of the NAT IP address.
     * 
     */
    @Import(name="natIpNames")
    private @Nullable Output<List<String>> natIpNames;

    /**
     * @return The name of the NAT IP address.
     * 
     */
    public Optional<Output<List<String>>> natIpNames() {
        return Optional.ofNullable(this.natIpNames);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The status of the NAT IP address. Valid values: `Available`, `Deleting` and `Creating`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the NAT IP address. Valid values: `Available`, `Deleting` and `Creating`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private GetNatIpsArgs() {}

    private GetNatIpsArgs(GetNatIpsArgs $) {
        this.ids = $.ids;
        this.nameRegex = $.nameRegex;
        this.natGatewayId = $.natGatewayId;
        this.natIpCidr = $.natIpCidr;
        this.natIpIds = $.natIpIds;
        this.natIpNames = $.natIpNames;
        this.outputFile = $.outputFile;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNatIpsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNatIpsArgs $;

        public Builder() {
            $ = new GetNatIpsArgs();
        }

        public Builder(GetNatIpsArgs defaults) {
            $ = new GetNatIpsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ids A list of Nat Ip IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Nat Ip IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of Nat Ip IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param nameRegex A regex string to filter results by Nat Ip name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable Output<String> nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter results by Nat Ip name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(String nameRegex) {
            return nameRegex(Output.of(nameRegex));
        }

        /**
         * @param natGatewayId The ID of the Virtual Private Cloud (VPC) NAT gateway to which the NAT IP address belongs.
         * 
         * @return builder
         * 
         */
        public Builder natGatewayId(Output<String> natGatewayId) {
            $.natGatewayId = natGatewayId;
            return this;
        }

        /**
         * @param natGatewayId The ID of the Virtual Private Cloud (VPC) NAT gateway to which the NAT IP address belongs.
         * 
         * @return builder
         * 
         */
        public Builder natGatewayId(String natGatewayId) {
            return natGatewayId(Output.of(natGatewayId));
        }

        /**
         * @param natIpCidr The CIDR block to which the NAT IP address belongs.
         * 
         * @return builder
         * 
         */
        public Builder natIpCidr(@Nullable Output<String> natIpCidr) {
            $.natIpCidr = natIpCidr;
            return this;
        }

        /**
         * @param natIpCidr The CIDR block to which the NAT IP address belongs.
         * 
         * @return builder
         * 
         */
        public Builder natIpCidr(String natIpCidr) {
            return natIpCidr(Output.of(natIpCidr));
        }

        public Builder natIpIds(@Nullable Output<List<String>> natIpIds) {
            $.natIpIds = natIpIds;
            return this;
        }

        public Builder natIpIds(List<String> natIpIds) {
            return natIpIds(Output.of(natIpIds));
        }

        public Builder natIpIds(String... natIpIds) {
            return natIpIds(List.of(natIpIds));
        }

        /**
         * @param natIpNames The name of the NAT IP address.
         * 
         * @return builder
         * 
         */
        public Builder natIpNames(@Nullable Output<List<String>> natIpNames) {
            $.natIpNames = natIpNames;
            return this;
        }

        /**
         * @param natIpNames The name of the NAT IP address.
         * 
         * @return builder
         * 
         */
        public Builder natIpNames(List<String> natIpNames) {
            return natIpNames(Output.of(natIpNames));
        }

        /**
         * @param natIpNames The name of the NAT IP address.
         * 
         * @return builder
         * 
         */
        public Builder natIpNames(String... natIpNames) {
            return natIpNames(List.of(natIpNames));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param status The status of the NAT IP address. Valid values: `Available`, `Deleting` and `Creating`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the NAT IP address. Valid values: `Available`, `Deleting` and `Creating`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GetNatIpsArgs build() {
            if ($.natGatewayId == null) {
                throw new MissingRequiredPropertyException("GetNatIpsArgs", "natGatewayId");
            }
            return $;
        }
    }

}
