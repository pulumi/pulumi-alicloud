// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.edas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceArgs Empty = new NamespaceArgs();

    /**
     * Specifies whether to enable remote debugging.
     * 
     */
    @Import(name="debugEnable")
    private @Nullable Output<Boolean> debugEnable;

    /**
     * @return Specifies whether to enable remote debugging.
     * 
     */
    public Optional<Output<Boolean>> debugEnable() {
        return Optional.ofNullable(this.debugEnable);
    }

    /**
     * The description of the namespace, The description can be up to `128` characters in length.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the namespace, The description can be up to `128` characters in length.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the namespace.
     * - The ID of a custom namespace is in the `region ID:namespace identifier` format. An example is `cn-beijing:tdy218`.
     * - The ID of the default namespace is in the `region ID` format. An example is cn-beijing.
     * 
     */
    @Import(name="namespaceLogicalId", required=true)
    private Output<String> namespaceLogicalId;

    /**
     * @return The ID of the namespace.
     * - The ID of a custom namespace is in the `region ID:namespace identifier` format. An example is `cn-beijing:tdy218`.
     * - The ID of the default namespace is in the `region ID` format. An example is cn-beijing.
     * 
     */
    public Output<String> namespaceLogicalId() {
        return this.namespaceLogicalId;
    }

    /**
     * The name of the namespace, The name can be up to `63` characters in length.
     * 
     */
    @Import(name="namespaceName", required=true)
    private Output<String> namespaceName;

    /**
     * @return The name of the namespace, The name can be up to `63` characters in length.
     * 
     */
    public Output<String> namespaceName() {
        return this.namespaceName;
    }

    private NamespaceArgs() {}

    private NamespaceArgs(NamespaceArgs $) {
        this.debugEnable = $.debugEnable;
        this.description = $.description;
        this.namespaceLogicalId = $.namespaceLogicalId;
        this.namespaceName = $.namespaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceArgs $;

        public Builder() {
            $ = new NamespaceArgs();
        }

        public Builder(NamespaceArgs defaults) {
            $ = new NamespaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param debugEnable Specifies whether to enable remote debugging.
         * 
         * @return builder
         * 
         */
        public Builder debugEnable(@Nullable Output<Boolean> debugEnable) {
            $.debugEnable = debugEnable;
            return this;
        }

        /**
         * @param debugEnable Specifies whether to enable remote debugging.
         * 
         * @return builder
         * 
         */
        public Builder debugEnable(Boolean debugEnable) {
            return debugEnable(Output.of(debugEnable));
        }

        /**
         * @param description The description of the namespace, The description can be up to `128` characters in length.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the namespace, The description can be up to `128` characters in length.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param namespaceLogicalId The ID of the namespace.
         * - The ID of a custom namespace is in the `region ID:namespace identifier` format. An example is `cn-beijing:tdy218`.
         * - The ID of the default namespace is in the `region ID` format. An example is cn-beijing.
         * 
         * @return builder
         * 
         */
        public Builder namespaceLogicalId(Output<String> namespaceLogicalId) {
            $.namespaceLogicalId = namespaceLogicalId;
            return this;
        }

        /**
         * @param namespaceLogicalId The ID of the namespace.
         * - The ID of a custom namespace is in the `region ID:namespace identifier` format. An example is `cn-beijing:tdy218`.
         * - The ID of the default namespace is in the `region ID` format. An example is cn-beijing.
         * 
         * @return builder
         * 
         */
        public Builder namespaceLogicalId(String namespaceLogicalId) {
            return namespaceLogicalId(Output.of(namespaceLogicalId));
        }

        /**
         * @param namespaceName The name of the namespace, The name can be up to `63` characters in length.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        /**
         * @param namespaceName The name of the namespace, The name can be up to `63` characters in length.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        public NamespaceArgs build() {
            if ($.namespaceLogicalId == null) {
                throw new MissingRequiredPropertyException("NamespaceArgs", "namespaceLogicalId");
            }
            if ($.namespaceName == null) {
                throw new MissingRequiredPropertyException("NamespaceArgs", "namespaceName");
            }
            return $;
        }
    }

}
