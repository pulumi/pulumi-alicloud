// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceCertificateArgs Empty = new ServiceCertificateArgs();

    /**
     * The content of a non-SM certificate in PEM format.
     * 
     */
    @Import(name="cert")
    private @Nullable Output<String> cert;

    /**
     * @return The content of a non-SM certificate in PEM format.
     * 
     */
    public Optional<Output<String>> cert() {
        return Optional.ofNullable(this.cert);
    }

    /**
     * A custom name for the certificate. The name can be up to 64 characters long and can contain any character type, such as letters, numbers, and underscores. **NOTE:** From version 1.260.1, `certificate_name` can be modified.
     * 
     */
    @Import(name="certificateName")
    private @Nullable Output<String> certificateName;

    /**
     * @return A custom name for the certificate. The name can be up to 64 characters long and can contain any character type, such as letters, numbers, and underscores. **NOTE:** From version 1.260.1, `certificate_name` can be modified.
     * 
     */
    public Optional<Output<String>> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }

    /**
     * The content of an SM encryption certificate in PEM format.
     * 
     */
    @Import(name="encryptCert")
    private @Nullable Output<String> encryptCert;

    /**
     * @return The content of an SM encryption certificate in PEM format.
     * 
     */
    public Optional<Output<String>> encryptCert() {
        return Optional.ofNullable(this.encryptCert);
    }

    /**
     * The private key of an SM encryption certificate in PEM format.
     * 
     */
    @Import(name="encryptPrivateKey")
    private @Nullable Output<String> encryptPrivateKey;

    /**
     * @return The private key of an SM encryption certificate in PEM format.
     * 
     */
    public Optional<Output<String>> encryptPrivateKey() {
        return Optional.ofNullable(this.encryptPrivateKey);
    }

    /**
     * The private key of a non-SM certificate in PEM format.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The private key of a non-SM certificate in PEM format.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Field `lang` has been deprecated from provider version 1.260.1 and it will be removed in the future version.
     * 
     * @deprecated
     * Field &#39;lang&#39; has been deprecated from provider version 1.260.1 and it will be removed in the future version.
     * 
     */
    @Deprecated /* Field 'lang' has been deprecated from provider version 1.260.1 and it will be removed in the future version. */
    @Import(name="lang")
    private @Nullable Output<String> lang;

    /**
     * @return Field `lang` has been deprecated from provider version 1.260.1 and it will be removed in the future version.
     * 
     * @deprecated
     * Field &#39;lang&#39; has been deprecated from provider version 1.260.1 and it will be removed in the future version.
     * 
     */
    @Deprecated /* Field 'lang' has been deprecated from provider version 1.260.1 and it will be removed in the future version. */
    public Optional<Output<String>> lang() {
        return Optional.ofNullable(this.lang);
    }

    /**
     * Field `name` has been deprecated from provider version 1.129.0 and it will be removed in the future version. Please use the new attribute `certificate_name` instead.
     * 
     * @deprecated
     * Field &#39;name&#39; has been deprecated from provider version 1.129.0 and it will be removed in the future version. Please use the new attribute &#39;certificate_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'name' has been deprecated from provider version 1.129.0 and it will be removed in the future version. Please use the new attribute 'certificate_name' instead. */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Field `name` has been deprecated from provider version 1.129.0 and it will be removed in the future version. Please use the new attribute `certificate_name` instead.
     * 
     * @deprecated
     * Field &#39;name&#39; has been deprecated from provider version 1.129.0 and it will be removed in the future version. Please use the new attribute &#39;certificate_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'name' has been deprecated from provider version 1.129.0 and it will be removed in the future version. Please use the new attribute 'certificate_name' instead. */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The content of an SM signing certificate in PEM format.
     * 
     */
    @Import(name="signCert")
    private @Nullable Output<String> signCert;

    /**
     * @return The content of an SM signing certificate in PEM format.
     * 
     */
    public Optional<Output<String>> signCert() {
        return Optional.ofNullable(this.signCert);
    }

    /**
     * The private key of an SM signing certificate in PEM format.
     * 
     */
    @Import(name="signPrivateKey")
    private @Nullable Output<String> signPrivateKey;

    /**
     * @return The private key of an SM signing certificate in PEM format.
     * 
     */
    public Optional<Output<String>> signPrivateKey() {
        return Optional.ofNullable(this.signPrivateKey);
    }

    /**
     * The tag of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tag of the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ServiceCertificateArgs() {}

    private ServiceCertificateArgs(ServiceCertificateArgs $) {
        this.cert = $.cert;
        this.certificateName = $.certificateName;
        this.encryptCert = $.encryptCert;
        this.encryptPrivateKey = $.encryptPrivateKey;
        this.key = $.key;
        this.lang = $.lang;
        this.name = $.name;
        this.resourceGroupId = $.resourceGroupId;
        this.signCert = $.signCert;
        this.signPrivateKey = $.signPrivateKey;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceCertificateArgs $;

        public Builder() {
            $ = new ServiceCertificateArgs();
        }

        public Builder(ServiceCertificateArgs defaults) {
            $ = new ServiceCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cert The content of a non-SM certificate in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder cert(@Nullable Output<String> cert) {
            $.cert = cert;
            return this;
        }

        /**
         * @param cert The content of a non-SM certificate in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder cert(String cert) {
            return cert(Output.of(cert));
        }

        /**
         * @param certificateName A custom name for the certificate. The name can be up to 64 characters long and can contain any character type, such as letters, numbers, and underscores. **NOTE:** From version 1.260.1, `certificate_name` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(@Nullable Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        /**
         * @param certificateName A custom name for the certificate. The name can be up to 64 characters long and can contain any character type, such as letters, numbers, and underscores. **NOTE:** From version 1.260.1, `certificate_name` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        /**
         * @param encryptCert The content of an SM encryption certificate in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder encryptCert(@Nullable Output<String> encryptCert) {
            $.encryptCert = encryptCert;
            return this;
        }

        /**
         * @param encryptCert The content of an SM encryption certificate in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder encryptCert(String encryptCert) {
            return encryptCert(Output.of(encryptCert));
        }

        /**
         * @param encryptPrivateKey The private key of an SM encryption certificate in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder encryptPrivateKey(@Nullable Output<String> encryptPrivateKey) {
            $.encryptPrivateKey = encryptPrivateKey;
            return this;
        }

        /**
         * @param encryptPrivateKey The private key of an SM encryption certificate in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder encryptPrivateKey(String encryptPrivateKey) {
            return encryptPrivateKey(Output.of(encryptPrivateKey));
        }

        /**
         * @param key The private key of a non-SM certificate in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The private key of a non-SM certificate in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param lang Field `lang` has been deprecated from provider version 1.260.1 and it will be removed in the future version.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;lang&#39; has been deprecated from provider version 1.260.1 and it will be removed in the future version.
         * 
         */
        @Deprecated /* Field 'lang' has been deprecated from provider version 1.260.1 and it will be removed in the future version. */
        public Builder lang(@Nullable Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang Field `lang` has been deprecated from provider version 1.260.1 and it will be removed in the future version.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;lang&#39; has been deprecated from provider version 1.260.1 and it will be removed in the future version.
         * 
         */
        @Deprecated /* Field 'lang' has been deprecated from provider version 1.260.1 and it will be removed in the future version. */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param name Field `name` has been deprecated from provider version 1.129.0 and it will be removed in the future version. Please use the new attribute `certificate_name` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;name&#39; has been deprecated from provider version 1.129.0 and it will be removed in the future version. Please use the new attribute &#39;certificate_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'name' has been deprecated from provider version 1.129.0 and it will be removed in the future version. Please use the new attribute 'certificate_name' instead. */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Field `name` has been deprecated from provider version 1.129.0 and it will be removed in the future version. Please use the new attribute `certificate_name` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;name&#39; has been deprecated from provider version 1.129.0 and it will be removed in the future version. Please use the new attribute &#39;certificate_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'name' has been deprecated from provider version 1.129.0 and it will be removed in the future version. Please use the new attribute 'certificate_name' instead. */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param signCert The content of an SM signing certificate in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder signCert(@Nullable Output<String> signCert) {
            $.signCert = signCert;
            return this;
        }

        /**
         * @param signCert The content of an SM signing certificate in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder signCert(String signCert) {
            return signCert(Output.of(signCert));
        }

        /**
         * @param signPrivateKey The private key of an SM signing certificate in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder signPrivateKey(@Nullable Output<String> signPrivateKey) {
            $.signPrivateKey = signPrivateKey;
            return this;
        }

        /**
         * @param signPrivateKey The private key of an SM signing certificate in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder signPrivateKey(String signPrivateKey) {
            return signPrivateKey(Output.of(signPrivateKey));
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ServiceCertificateArgs build() {
            return $;
        }
    }

}
