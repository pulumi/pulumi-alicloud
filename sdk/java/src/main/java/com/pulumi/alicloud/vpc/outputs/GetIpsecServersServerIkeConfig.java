// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetIpsecServersServerIkeConfig {
    /**
     * @return The IKE authentication algorithm.
     * 
     */
    private String ikeAuthAlg;
    /**
     * @return The IKE encryption algorithm.
     * 
     */
    private String ikeEncAlg;
    /**
     * @return The IKE lifetime. Unit: seconds.
     * 
     */
    private Integer ikeLifetime;
    /**
     * @return The IKE negotiation mode.
     * 
     */
    private String ikeMode;
    /**
     * @return Diffie-Hellman key exchange algorithm.
     * 
     */
    private String ikePfs;
    /**
     * @return The IKE version.
     * 
     */
    private String ikeVersion;
    /**
     * @return IPsec server identifier. Supports the format of FQDN and IP address. The public IP address of the VPN gateway is selected by default.
     * 
     */
    private String localId;
    /**
     * @return The peer identifier. Supports the format of FQDN and IP address, which is empty by default.
     * 
     */
    private String remoteId;

    private GetIpsecServersServerIkeConfig() {}
    /**
     * @return The IKE authentication algorithm.
     * 
     */
    public String ikeAuthAlg() {
        return this.ikeAuthAlg;
    }
    /**
     * @return The IKE encryption algorithm.
     * 
     */
    public String ikeEncAlg() {
        return this.ikeEncAlg;
    }
    /**
     * @return The IKE lifetime. Unit: seconds.
     * 
     */
    public Integer ikeLifetime() {
        return this.ikeLifetime;
    }
    /**
     * @return The IKE negotiation mode.
     * 
     */
    public String ikeMode() {
        return this.ikeMode;
    }
    /**
     * @return Diffie-Hellman key exchange algorithm.
     * 
     */
    public String ikePfs() {
        return this.ikePfs;
    }
    /**
     * @return The IKE version.
     * 
     */
    public String ikeVersion() {
        return this.ikeVersion;
    }
    /**
     * @return IPsec server identifier. Supports the format of FQDN and IP address. The public IP address of the VPN gateway is selected by default.
     * 
     */
    public String localId() {
        return this.localId;
    }
    /**
     * @return The peer identifier. Supports the format of FQDN and IP address, which is empty by default.
     * 
     */
    public String remoteId() {
        return this.remoteId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIpsecServersServerIkeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ikeAuthAlg;
        private String ikeEncAlg;
        private Integer ikeLifetime;
        private String ikeMode;
        private String ikePfs;
        private String ikeVersion;
        private String localId;
        private String remoteId;
        public Builder() {}
        public Builder(GetIpsecServersServerIkeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ikeAuthAlg = defaults.ikeAuthAlg;
    	      this.ikeEncAlg = defaults.ikeEncAlg;
    	      this.ikeLifetime = defaults.ikeLifetime;
    	      this.ikeMode = defaults.ikeMode;
    	      this.ikePfs = defaults.ikePfs;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.localId = defaults.localId;
    	      this.remoteId = defaults.remoteId;
        }

        @CustomType.Setter
        public Builder ikeAuthAlg(String ikeAuthAlg) {
            this.ikeAuthAlg = Objects.requireNonNull(ikeAuthAlg);
            return this;
        }
        @CustomType.Setter
        public Builder ikeEncAlg(String ikeEncAlg) {
            this.ikeEncAlg = Objects.requireNonNull(ikeEncAlg);
            return this;
        }
        @CustomType.Setter
        public Builder ikeLifetime(Integer ikeLifetime) {
            this.ikeLifetime = Objects.requireNonNull(ikeLifetime);
            return this;
        }
        @CustomType.Setter
        public Builder ikeMode(String ikeMode) {
            this.ikeMode = Objects.requireNonNull(ikeMode);
            return this;
        }
        @CustomType.Setter
        public Builder ikePfs(String ikePfs) {
            this.ikePfs = Objects.requireNonNull(ikePfs);
            return this;
        }
        @CustomType.Setter
        public Builder ikeVersion(String ikeVersion) {
            this.ikeVersion = Objects.requireNonNull(ikeVersion);
            return this;
        }
        @CustomType.Setter
        public Builder localId(String localId) {
            this.localId = Objects.requireNonNull(localId);
            return this;
        }
        @CustomType.Setter
        public Builder remoteId(String remoteId) {
            this.remoteId = Objects.requireNonNull(remoteId);
            return this;
        }
        public GetIpsecServersServerIkeConfig build() {
            final var o = new GetIpsecServersServerIkeConfig();
            o.ikeAuthAlg = ikeAuthAlg;
            o.ikeEncAlg = ikeEncAlg;
            o.ikeLifetime = ikeLifetime;
            o.ikeMode = ikeMode;
            o.ikePfs = ikePfs;
            o.ikeVersion = ikeVersion;
            o.localId = localId;
            o.remoteId = remoteId;
            return o;
        }
    }
}
