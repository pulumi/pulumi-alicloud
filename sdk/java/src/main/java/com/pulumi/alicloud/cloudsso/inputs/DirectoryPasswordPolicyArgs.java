// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudsso.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DirectoryPasswordPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DirectoryPasswordPolicyArgs Empty = new DirectoryPasswordPolicyArgs();

    /**
     * Whether to restrict login after Password Expiration
     * 
     */
    @Import(name="hardExpire")
    private @Nullable Output<Boolean> hardExpire;

    /**
     * @return Whether to restrict login after Password Expiration
     * 
     */
    public Optional<Output<Boolean>> hardExpire() {
        return Optional.ofNullable(this.hardExpire);
    }

    /**
     * Number of password retries.
     * 
     */
    @Import(name="maxLoginAttempts")
    private @Nullable Output<Integer> maxLoginAttempts;

    /**
     * @return Number of password retries.
     * 
     */
    public Optional<Output<Integer>> maxLoginAttempts() {
        return Optional.ofNullable(this.maxLoginAttempts);
    }

    /**
     * Password validity period.
     * 
     */
    @Import(name="maxPasswordAge")
    private @Nullable Output<Integer> maxPasswordAge;

    /**
     * @return Password validity period.
     * 
     */
    public Optional<Output<Integer>> maxPasswordAge() {
        return Optional.ofNullable(this.maxPasswordAge);
    }

    /**
     * Maximum password length.
     * 
     */
    @Import(name="maxPasswordLength")
    private @Nullable Output<Integer> maxPasswordLength;

    /**
     * @return Maximum password length.
     * 
     */
    public Optional<Output<Integer>> maxPasswordLength() {
        return Optional.ofNullable(this.maxPasswordLength);
    }

    /**
     * The minimum number of different characters in a password.
     * 
     */
    @Import(name="minPasswordDifferentChars")
    private @Nullable Output<Integer> minPasswordDifferentChars;

    /**
     * @return The minimum number of different characters in a password.
     * 
     */
    public Optional<Output<Integer>> minPasswordDifferentChars() {
        return Optional.ofNullable(this.minPasswordDifferentChars);
    }

    /**
     * Minimum password length.
     * 
     */
    @Import(name="minPasswordLength")
    private @Nullable Output<Integer> minPasswordLength;

    /**
     * @return Minimum password length.
     * 
     */
    public Optional<Output<Integer>> minPasswordLength() {
        return Optional.ofNullable(this.minPasswordLength);
    }

    /**
     * Whether the user name is not allowed in the password.
     * 
     */
    @Import(name="passwordNotContainUsername")
    private @Nullable Output<Boolean> passwordNotContainUsername;

    /**
     * @return Whether the user name is not allowed in the password.
     * 
     */
    public Optional<Output<Boolean>> passwordNotContainUsername() {
        return Optional.ofNullable(this.passwordNotContainUsername);
    }

    /**
     * Historical password check policy.
     * 
     */
    @Import(name="passwordReusePrevention")
    private @Nullable Output<Integer> passwordReusePrevention;

    /**
     * @return Historical password check policy.
     * 
     */
    public Optional<Output<Integer>> passwordReusePrevention() {
        return Optional.ofNullable(this.passwordReusePrevention);
    }

    /**
     * Whether lowercase letters are required in the password.
     * 
     */
    @Import(name="requireLowerCaseChars")
    private @Nullable Output<Boolean> requireLowerCaseChars;

    /**
     * @return Whether lowercase letters are required in the password.
     * 
     */
    public Optional<Output<Boolean>> requireLowerCaseChars() {
        return Optional.ofNullable(this.requireLowerCaseChars);
    }

    /**
     * Whether numbers are required in the password.
     * 
     */
    @Import(name="requireNumbers")
    private @Nullable Output<Boolean> requireNumbers;

    /**
     * @return Whether numbers are required in the password.
     * 
     */
    public Optional<Output<Boolean>> requireNumbers() {
        return Optional.ofNullable(this.requireNumbers);
    }

    /**
     * Whether symbols are required in the password.
     * 
     */
    @Import(name="requireSymbols")
    private @Nullable Output<Boolean> requireSymbols;

    /**
     * @return Whether symbols are required in the password.
     * 
     */
    public Optional<Output<Boolean>> requireSymbols() {
        return Optional.ofNullable(this.requireSymbols);
    }

    /**
     * Whether uppercase letters are required in the password.
     * 
     */
    @Import(name="requireUpperCaseChars")
    private @Nullable Output<Boolean> requireUpperCaseChars;

    /**
     * @return Whether uppercase letters are required in the password.
     * 
     */
    public Optional<Output<Boolean>> requireUpperCaseChars() {
        return Optional.ofNullable(this.requireUpperCaseChars);
    }

    private DirectoryPasswordPolicyArgs() {}

    private DirectoryPasswordPolicyArgs(DirectoryPasswordPolicyArgs $) {
        this.hardExpire = $.hardExpire;
        this.maxLoginAttempts = $.maxLoginAttempts;
        this.maxPasswordAge = $.maxPasswordAge;
        this.maxPasswordLength = $.maxPasswordLength;
        this.minPasswordDifferentChars = $.minPasswordDifferentChars;
        this.minPasswordLength = $.minPasswordLength;
        this.passwordNotContainUsername = $.passwordNotContainUsername;
        this.passwordReusePrevention = $.passwordReusePrevention;
        this.requireLowerCaseChars = $.requireLowerCaseChars;
        this.requireNumbers = $.requireNumbers;
        this.requireSymbols = $.requireSymbols;
        this.requireUpperCaseChars = $.requireUpperCaseChars;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirectoryPasswordPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirectoryPasswordPolicyArgs $;

        public Builder() {
            $ = new DirectoryPasswordPolicyArgs();
        }

        public Builder(DirectoryPasswordPolicyArgs defaults) {
            $ = new DirectoryPasswordPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hardExpire Whether to restrict login after Password Expiration
         * 
         * @return builder
         * 
         */
        public Builder hardExpire(@Nullable Output<Boolean> hardExpire) {
            $.hardExpire = hardExpire;
            return this;
        }

        /**
         * @param hardExpire Whether to restrict login after Password Expiration
         * 
         * @return builder
         * 
         */
        public Builder hardExpire(Boolean hardExpire) {
            return hardExpire(Output.of(hardExpire));
        }

        /**
         * @param maxLoginAttempts Number of password retries.
         * 
         * @return builder
         * 
         */
        public Builder maxLoginAttempts(@Nullable Output<Integer> maxLoginAttempts) {
            $.maxLoginAttempts = maxLoginAttempts;
            return this;
        }

        /**
         * @param maxLoginAttempts Number of password retries.
         * 
         * @return builder
         * 
         */
        public Builder maxLoginAttempts(Integer maxLoginAttempts) {
            return maxLoginAttempts(Output.of(maxLoginAttempts));
        }

        /**
         * @param maxPasswordAge Password validity period.
         * 
         * @return builder
         * 
         */
        public Builder maxPasswordAge(@Nullable Output<Integer> maxPasswordAge) {
            $.maxPasswordAge = maxPasswordAge;
            return this;
        }

        /**
         * @param maxPasswordAge Password validity period.
         * 
         * @return builder
         * 
         */
        public Builder maxPasswordAge(Integer maxPasswordAge) {
            return maxPasswordAge(Output.of(maxPasswordAge));
        }

        /**
         * @param maxPasswordLength Maximum password length.
         * 
         * @return builder
         * 
         */
        public Builder maxPasswordLength(@Nullable Output<Integer> maxPasswordLength) {
            $.maxPasswordLength = maxPasswordLength;
            return this;
        }

        /**
         * @param maxPasswordLength Maximum password length.
         * 
         * @return builder
         * 
         */
        public Builder maxPasswordLength(Integer maxPasswordLength) {
            return maxPasswordLength(Output.of(maxPasswordLength));
        }

        /**
         * @param minPasswordDifferentChars The minimum number of different characters in a password.
         * 
         * @return builder
         * 
         */
        public Builder minPasswordDifferentChars(@Nullable Output<Integer> minPasswordDifferentChars) {
            $.minPasswordDifferentChars = minPasswordDifferentChars;
            return this;
        }

        /**
         * @param minPasswordDifferentChars The minimum number of different characters in a password.
         * 
         * @return builder
         * 
         */
        public Builder minPasswordDifferentChars(Integer minPasswordDifferentChars) {
            return minPasswordDifferentChars(Output.of(minPasswordDifferentChars));
        }

        /**
         * @param minPasswordLength Minimum password length.
         * 
         * @return builder
         * 
         */
        public Builder minPasswordLength(@Nullable Output<Integer> minPasswordLength) {
            $.minPasswordLength = minPasswordLength;
            return this;
        }

        /**
         * @param minPasswordLength Minimum password length.
         * 
         * @return builder
         * 
         */
        public Builder minPasswordLength(Integer minPasswordLength) {
            return minPasswordLength(Output.of(minPasswordLength));
        }

        /**
         * @param passwordNotContainUsername Whether the user name is not allowed in the password.
         * 
         * @return builder
         * 
         */
        public Builder passwordNotContainUsername(@Nullable Output<Boolean> passwordNotContainUsername) {
            $.passwordNotContainUsername = passwordNotContainUsername;
            return this;
        }

        /**
         * @param passwordNotContainUsername Whether the user name is not allowed in the password.
         * 
         * @return builder
         * 
         */
        public Builder passwordNotContainUsername(Boolean passwordNotContainUsername) {
            return passwordNotContainUsername(Output.of(passwordNotContainUsername));
        }

        /**
         * @param passwordReusePrevention Historical password check policy.
         * 
         * @return builder
         * 
         */
        public Builder passwordReusePrevention(@Nullable Output<Integer> passwordReusePrevention) {
            $.passwordReusePrevention = passwordReusePrevention;
            return this;
        }

        /**
         * @param passwordReusePrevention Historical password check policy.
         * 
         * @return builder
         * 
         */
        public Builder passwordReusePrevention(Integer passwordReusePrevention) {
            return passwordReusePrevention(Output.of(passwordReusePrevention));
        }

        /**
         * @param requireLowerCaseChars Whether lowercase letters are required in the password.
         * 
         * @return builder
         * 
         */
        public Builder requireLowerCaseChars(@Nullable Output<Boolean> requireLowerCaseChars) {
            $.requireLowerCaseChars = requireLowerCaseChars;
            return this;
        }

        /**
         * @param requireLowerCaseChars Whether lowercase letters are required in the password.
         * 
         * @return builder
         * 
         */
        public Builder requireLowerCaseChars(Boolean requireLowerCaseChars) {
            return requireLowerCaseChars(Output.of(requireLowerCaseChars));
        }

        /**
         * @param requireNumbers Whether numbers are required in the password.
         * 
         * @return builder
         * 
         */
        public Builder requireNumbers(@Nullable Output<Boolean> requireNumbers) {
            $.requireNumbers = requireNumbers;
            return this;
        }

        /**
         * @param requireNumbers Whether numbers are required in the password.
         * 
         * @return builder
         * 
         */
        public Builder requireNumbers(Boolean requireNumbers) {
            return requireNumbers(Output.of(requireNumbers));
        }

        /**
         * @param requireSymbols Whether symbols are required in the password.
         * 
         * @return builder
         * 
         */
        public Builder requireSymbols(@Nullable Output<Boolean> requireSymbols) {
            $.requireSymbols = requireSymbols;
            return this;
        }

        /**
         * @param requireSymbols Whether symbols are required in the password.
         * 
         * @return builder
         * 
         */
        public Builder requireSymbols(Boolean requireSymbols) {
            return requireSymbols(Output.of(requireSymbols));
        }

        /**
         * @param requireUpperCaseChars Whether uppercase letters are required in the password.
         * 
         * @return builder
         * 
         */
        public Builder requireUpperCaseChars(@Nullable Output<Boolean> requireUpperCaseChars) {
            $.requireUpperCaseChars = requireUpperCaseChars;
            return this;
        }

        /**
         * @param requireUpperCaseChars Whether uppercase letters are required in the password.
         * 
         * @return builder
         * 
         */
        public Builder requireUpperCaseChars(Boolean requireUpperCaseChars) {
            return requireUpperCaseChars(Output.of(requireUpperCaseChars));
        }

        public DirectoryPasswordPolicyArgs build() {
            return $;
        }
    }

}
