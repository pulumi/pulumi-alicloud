// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAlertsAlertConfigurationTemplateConfiguration {
    /**
     * @return Template Annotations.
     * 
     */
    private Map<String,String> annotations;
    /**
     * @return Template Language.
     * 
     */
    private String lang;
    /**
     * @return Template ID.
     * 
     */
    private String templateId;
    /**
     * @return Template Variables.
     * 
     */
    private Map<String,String> tokens;
    /**
     * @return Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows:Fixedate: checks query and analysis results at regular intervals.Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
     * 
     */
    private String type;
    /**
     * @return Fixed as 2.0.
     * 
     */
    private String version;

    private GetAlertsAlertConfigurationTemplateConfiguration() {}
    /**
     * @return Template Annotations.
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return Template Language.
     * 
     */
    public String lang() {
        return this.lang;
    }
    /**
     * @return Template ID.
     * 
     */
    public String templateId() {
        return this.templateId;
    }
    /**
     * @return Template Variables.
     * 
     */
    public Map<String,String> tokens() {
        return this.tokens;
    }
    /**
     * @return Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows:Fixedate: checks query and analysis results at regular intervals.Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Fixed as 2.0.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlertsAlertConfigurationTemplateConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private String lang;
        private String templateId;
        private Map<String,String> tokens;
        private String type;
        private String version;
        public Builder() {}
        public Builder(GetAlertsAlertConfigurationTemplateConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.lang = defaults.lang;
    	      this.templateId = defaults.templateId;
    	      this.tokens = defaults.tokens;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationTemplateConfiguration", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder lang(String lang) {
            if (lang == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationTemplateConfiguration", "lang");
            }
            this.lang = lang;
            return this;
        }
        @CustomType.Setter
        public Builder templateId(String templateId) {
            if (templateId == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationTemplateConfiguration", "templateId");
            }
            this.templateId = templateId;
            return this;
        }
        @CustomType.Setter
        public Builder tokens(Map<String,String> tokens) {
            if (tokens == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationTemplateConfiguration", "tokens");
            }
            this.tokens = tokens;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationTemplateConfiguration", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationTemplateConfiguration", "version");
            }
            this.version = version;
            return this;
        }
        public GetAlertsAlertConfigurationTemplateConfiguration build() {
            final var _resultValue = new GetAlertsAlertConfigurationTemplateConfiguration();
            _resultValue.annotations = annotations;
            _resultValue.lang = lang;
            _resultValue.templateId = templateId;
            _resultValue.tokens = tokens;
            _resultValue.type = type;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
