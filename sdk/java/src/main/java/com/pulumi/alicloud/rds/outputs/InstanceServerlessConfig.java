// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceServerlessConfig {
    /**
     * @return Specifies whether to enable the smart startup and stop feature for the serverless instance. Valid values:
     * - true: enables the feature.
     * - false: disables the feature. This is the default value.
     * &gt; - Only MySQL Serverless instances need to set this parameter. If there is no connection within 10 minutes, it will enter a paused state and automatically wake up when the connection enters.
     * 
     */
    private @Nullable Boolean autoPause;
    /**
     * @return The maximum number of RDS Capacity Units (RCUs). The value of this parameter must be greater than or equal to `min_capacity` and only supports passing integers. Valid values:
     * - MySQL: 1~8
     * - SQLServer: 2~8
     * - PostgreSQL: 1~12
     * 
     */
    private Double maxCapacity;
    /**
     * @return The minimum number of RCUs. The value of this parameter must be less than or equal to `max_capacity`. Valid values:
     * - MySQL: 0.5~8
     * - SQLServer: 2~8 \(Supports integers only\).
     * - PostgreSQL: 0.5~12
     * 
     */
    private Double minCapacity;
    /**
     * @return Specifies whether to enable the forced scaling feature for the serverless instance. Valid values:
     * - true: enables the feature.
     * - false: disables the feature. This is the default value.
     * &gt; - Only MySQL Serverless instances need to set this parameter. After enabling this parameter, there will be a flash break within 1 minute when the instance is forced to expand or shrink. Please use it with caution according to the actual situation.
     * &gt; - The elastic scaling of an instance RCU usually takes effect immediately, but in some special circumstances (such as during large transaction execution), it is not possible to complete scaling immediately. In this case, this parameter can be enabled to force scaling.
     * 
     */
    private @Nullable Boolean switchForce;

    private InstanceServerlessConfig() {}
    /**
     * @return Specifies whether to enable the smart startup and stop feature for the serverless instance. Valid values:
     * - true: enables the feature.
     * - false: disables the feature. This is the default value.
     * &gt; - Only MySQL Serverless instances need to set this parameter. If there is no connection within 10 minutes, it will enter a paused state and automatically wake up when the connection enters.
     * 
     */
    public Optional<Boolean> autoPause() {
        return Optional.ofNullable(this.autoPause);
    }
    /**
     * @return The maximum number of RDS Capacity Units (RCUs). The value of this parameter must be greater than or equal to `min_capacity` and only supports passing integers. Valid values:
     * - MySQL: 1~8
     * - SQLServer: 2~8
     * - PostgreSQL: 1~12
     * 
     */
    public Double maxCapacity() {
        return this.maxCapacity;
    }
    /**
     * @return The minimum number of RCUs. The value of this parameter must be less than or equal to `max_capacity`. Valid values:
     * - MySQL: 0.5~8
     * - SQLServer: 2~8 \(Supports integers only\).
     * - PostgreSQL: 0.5~12
     * 
     */
    public Double minCapacity() {
        return this.minCapacity;
    }
    /**
     * @return Specifies whether to enable the forced scaling feature for the serverless instance. Valid values:
     * - true: enables the feature.
     * - false: disables the feature. This is the default value.
     * &gt; - Only MySQL Serverless instances need to set this parameter. After enabling this parameter, there will be a flash break within 1 minute when the instance is forced to expand or shrink. Please use it with caution according to the actual situation.
     * &gt; - The elastic scaling of an instance RCU usually takes effect immediately, but in some special circumstances (such as during large transaction execution), it is not possible to complete scaling immediately. In this case, this parameter can be enabled to force scaling.
     * 
     */
    public Optional<Boolean> switchForce() {
        return Optional.ofNullable(this.switchForce);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceServerlessConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean autoPause;
        private Double maxCapacity;
        private Double minCapacity;
        private @Nullable Boolean switchForce;
        public Builder() {}
        public Builder(InstanceServerlessConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoPause = defaults.autoPause;
    	      this.maxCapacity = defaults.maxCapacity;
    	      this.minCapacity = defaults.minCapacity;
    	      this.switchForce = defaults.switchForce;
        }

        @CustomType.Setter
        public Builder autoPause(@Nullable Boolean autoPause) {
            this.autoPause = autoPause;
            return this;
        }
        @CustomType.Setter
        public Builder maxCapacity(Double maxCapacity) {
            this.maxCapacity = Objects.requireNonNull(maxCapacity);
            return this;
        }
        @CustomType.Setter
        public Builder minCapacity(Double minCapacity) {
            this.minCapacity = Objects.requireNonNull(minCapacity);
            return this;
        }
        @CustomType.Setter
        public Builder switchForce(@Nullable Boolean switchForce) {
            this.switchForce = switchForce;
            return this;
        }
        public InstanceServerlessConfig build() {
            final var _resultValue = new InstanceServerlessConfig();
            _resultValue.autoPause = autoPause;
            _resultValue.maxCapacity = maxCapacity;
            _resultValue.minCapacity = minCapacity;
            _resultValue.switchForce = switchForce;
            return _resultValue;
        }
    }
}
