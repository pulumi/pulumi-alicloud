// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EcsDeploymentSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final EcsDeploymentSetArgs Empty = new EcsDeploymentSetArgs();

    /**
     * The name of the deployment set. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
     * 
     */
    @Import(name="deploymentSetName")
    private @Nullable Output<String> deploymentSetName;

    /**
     * @return The name of the deployment set. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> deploymentSetName() {
        return Optional.ofNullable(this.deploymentSetName);
    }

    /**
     * The description of the deployment set. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the deployment set. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The deployment domain. Valid values: `Default`.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The deployment domain. Valid values: `Default`.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * The deployment granularity. Valid values: `Host`.
     * 
     */
    @Import(name="granularity")
    private @Nullable Output<String> granularity;

    /**
     * @return The deployment granularity. Valid values: `Host`.
     * 
     */
    public Optional<Output<String>> granularity() {
        return Optional.ofNullable(this.granularity);
    }

    /**
     * The on unable to redeploy failed instance. Valid values: `CancelMembershipAndStart`, `KeepStopped`.
     * * `CancelMembershipAndStart` - Removes the instances from the deployment set and restarts the instances immediately after the failover is complete.
     * * `KeepStopped`- Keeps the instances in the abnormal state and restarts them after ECS resources are replenished.
     * 
     */
    @Import(name="onUnableToRedeployFailedInstance")
    private @Nullable Output<String> onUnableToRedeployFailedInstance;

    /**
     * @return The on unable to redeploy failed instance. Valid values: `CancelMembershipAndStart`, `KeepStopped`.
     * * `CancelMembershipAndStart` - Removes the instances from the deployment set and restarts the instances immediately after the failover is complete.
     * * `KeepStopped`- Keeps the instances in the abnormal state and restarts them after ECS resources are replenished.
     * 
     */
    public Optional<Output<String>> onUnableToRedeployFailedInstance() {
        return Optional.ofNullable(this.onUnableToRedeployFailedInstance);
    }

    /**
     * The deployment strategy. Valid values: `Availability`.
     * 
     */
    @Import(name="strategy")
    private @Nullable Output<String> strategy;

    /**
     * @return The deployment strategy. Valid values: `Availability`.
     * 
     */
    public Optional<Output<String>> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    private EcsDeploymentSetArgs() {}

    private EcsDeploymentSetArgs(EcsDeploymentSetArgs $) {
        this.deploymentSetName = $.deploymentSetName;
        this.description = $.description;
        this.domain = $.domain;
        this.granularity = $.granularity;
        this.onUnableToRedeployFailedInstance = $.onUnableToRedeployFailedInstance;
        this.strategy = $.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EcsDeploymentSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EcsDeploymentSetArgs $;

        public Builder() {
            $ = new EcsDeploymentSetArgs();
        }

        public Builder(EcsDeploymentSetArgs defaults) {
            $ = new EcsDeploymentSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deploymentSetName The name of the deployment set. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentSetName(@Nullable Output<String> deploymentSetName) {
            $.deploymentSetName = deploymentSetName;
            return this;
        }

        /**
         * @param deploymentSetName The name of the deployment set. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentSetName(String deploymentSetName) {
            return deploymentSetName(Output.of(deploymentSetName));
        }

        /**
         * @param description The description of the deployment set. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the deployment set. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domain The deployment domain. Valid values: `Default`.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The deployment domain. Valid values: `Default`.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param granularity The deployment granularity. Valid values: `Host`.
         * 
         * @return builder
         * 
         */
        public Builder granularity(@Nullable Output<String> granularity) {
            $.granularity = granularity;
            return this;
        }

        /**
         * @param granularity The deployment granularity. Valid values: `Host`.
         * 
         * @return builder
         * 
         */
        public Builder granularity(String granularity) {
            return granularity(Output.of(granularity));
        }

        /**
         * @param onUnableToRedeployFailedInstance The on unable to redeploy failed instance. Valid values: `CancelMembershipAndStart`, `KeepStopped`.
         * * `CancelMembershipAndStart` - Removes the instances from the deployment set and restarts the instances immediately after the failover is complete.
         * * `KeepStopped`- Keeps the instances in the abnormal state and restarts them after ECS resources are replenished.
         * 
         * @return builder
         * 
         */
        public Builder onUnableToRedeployFailedInstance(@Nullable Output<String> onUnableToRedeployFailedInstance) {
            $.onUnableToRedeployFailedInstance = onUnableToRedeployFailedInstance;
            return this;
        }

        /**
         * @param onUnableToRedeployFailedInstance The on unable to redeploy failed instance. Valid values: `CancelMembershipAndStart`, `KeepStopped`.
         * * `CancelMembershipAndStart` - Removes the instances from the deployment set and restarts the instances immediately after the failover is complete.
         * * `KeepStopped`- Keeps the instances in the abnormal state and restarts them after ECS resources are replenished.
         * 
         * @return builder
         * 
         */
        public Builder onUnableToRedeployFailedInstance(String onUnableToRedeployFailedInstance) {
            return onUnableToRedeployFailedInstance(Output.of(onUnableToRedeployFailedInstance));
        }

        /**
         * @param strategy The deployment strategy. Valid values: `Availability`.
         * 
         * @return builder
         * 
         */
        public Builder strategy(@Nullable Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy The deployment strategy. Valid values: `Availability`.
         * 
         * @return builder
         * 
         */
        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        public EcsDeploymentSetArgs build() {
            return $;
        }
    }

}
