// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticTaskMonitorConfNetTcp {
    /**
     * @return The number of TCP connections established. The minimum value is 1, the maximum value is 16, and the default is 4.
     * 
     */
    private @Nullable Integer connectTimes;
    /**
     * @return The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
     * 
     */
    private @Nullable Integer interval;
    /**
     * @return The target URL.
     * 
     */
    private String targetUrl;
    /**
     * @return TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
     * 
     */
    private @Nullable Integer timeout;
    /**
     * @return Whether to enable tracert. The default is true.
     * 
     */
    private @Nullable Boolean tracertEnable;
    /**
     * @return The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
     * 
     */
    private @Nullable Integer tracertNumMax;
    /**
     * @return The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
     * 
     */
    private @Nullable Integer tracertTimeout;

    private SyntheticTaskMonitorConfNetTcp() {}
    /**
     * @return The number of TCP connections established. The minimum value is 1, the maximum value is 16, and the default is 4.
     * 
     */
    public Optional<Integer> connectTimes() {
        return Optional.ofNullable(this.connectTimes);
    }
    /**
     * @return The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
     * 
     */
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return The target URL.
     * 
     */
    public String targetUrl() {
        return this.targetUrl;
    }
    /**
     * @return TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return Whether to enable tracert. The default is true.
     * 
     */
    public Optional<Boolean> tracertEnable() {
        return Optional.ofNullable(this.tracertEnable);
    }
    /**
     * @return The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
     * 
     */
    public Optional<Integer> tracertNumMax() {
        return Optional.ofNullable(this.tracertNumMax);
    }
    /**
     * @return The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
     * 
     */
    public Optional<Integer> tracertTimeout() {
        return Optional.ofNullable(this.tracertTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticTaskMonitorConfNetTcp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer connectTimes;
        private @Nullable Integer interval;
        private String targetUrl;
        private @Nullable Integer timeout;
        private @Nullable Boolean tracertEnable;
        private @Nullable Integer tracertNumMax;
        private @Nullable Integer tracertTimeout;
        public Builder() {}
        public Builder(SyntheticTaskMonitorConfNetTcp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectTimes = defaults.connectTimes;
    	      this.interval = defaults.interval;
    	      this.targetUrl = defaults.targetUrl;
    	      this.timeout = defaults.timeout;
    	      this.tracertEnable = defaults.tracertEnable;
    	      this.tracertNumMax = defaults.tracertNumMax;
    	      this.tracertTimeout = defaults.tracertTimeout;
        }

        @CustomType.Setter
        public Builder connectTimes(@Nullable Integer connectTimes) {

            this.connectTimes = connectTimes;
            return this;
        }
        @CustomType.Setter
        public Builder interval(@Nullable Integer interval) {

            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder targetUrl(String targetUrl) {
            if (targetUrl == null) {
              throw new MissingRequiredPropertyException("SyntheticTaskMonitorConfNetTcp", "targetUrl");
            }
            this.targetUrl = targetUrl;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder tracertEnable(@Nullable Boolean tracertEnable) {

            this.tracertEnable = tracertEnable;
            return this;
        }
        @CustomType.Setter
        public Builder tracertNumMax(@Nullable Integer tracertNumMax) {

            this.tracertNumMax = tracertNumMax;
            return this;
        }
        @CustomType.Setter
        public Builder tracertTimeout(@Nullable Integer tracertTimeout) {

            this.tracertTimeout = tracertTimeout;
            return this;
        }
        public SyntheticTaskMonitorConfNetTcp build() {
            final var _resultValue = new SyntheticTaskMonitorConfNetTcp();
            _resultValue.connectTimes = connectTimes;
            _resultValue.interval = interval;
            _resultValue.targetUrl = targetUrl;
            _resultValue.timeout = timeout;
            _resultValue.tracertEnable = tracertEnable;
            _resultValue.tracertNumMax = tracertNumMax;
            _resultValue.tracertTimeout = tracertTimeout;
            return _resultValue;
        }
    }
}
