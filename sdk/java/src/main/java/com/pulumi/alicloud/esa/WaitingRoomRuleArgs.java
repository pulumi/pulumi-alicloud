// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class WaitingRoomRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final WaitingRoomRuleArgs Empty = new WaitingRoomRuleArgs();

    /**
     * The content of the rule, the implemented policy or conditional expression.
     * 
     */
    @Import(name="rule", required=true)
    private Output<String> rule;

    /**
     * @return The content of the rule, the implemented policy or conditional expression.
     * 
     */
    public Output<String> rule() {
        return this.rule;
    }

    /**
     * Rule name, optional, used to query by waiting room bypass rule name.
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return Rule name, optional, used to query by waiting room bypass rule name.
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    /**
     * The site ID, which can be obtained by calling the ListSites API.
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return The site ID, which can be obtained by calling the ListSites API.
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    /**
     * Rule enabled status, supporting:
     * -&#39;on&#39;: means enabled.
     * -&#39;off&#39;: means disabled.
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return Rule enabled status, supporting:
     * -&#39;on&#39;: means enabled.
     * -&#39;off&#39;: means disabled.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     * Waiting room ID, used to identify a specific waiting room. It can be obtained by calling the [listwaitingroom](https://help.aliyun.com/document_detail/2850279.html) interface.
     * 
     */
    @Import(name="waitingRoomId", required=true)
    private Output<String> waitingRoomId;

    /**
     * @return Waiting room ID, used to identify a specific waiting room. It can be obtained by calling the [listwaitingroom](https://help.aliyun.com/document_detail/2850279.html) interface.
     * 
     */
    public Output<String> waitingRoomId() {
        return this.waitingRoomId;
    }

    private WaitingRoomRuleArgs() {}

    private WaitingRoomRuleArgs(WaitingRoomRuleArgs $) {
        this.rule = $.rule;
        this.ruleName = $.ruleName;
        this.siteId = $.siteId;
        this.status = $.status;
        this.waitingRoomId = $.waitingRoomId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WaitingRoomRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WaitingRoomRuleArgs $;

        public Builder() {
            $ = new WaitingRoomRuleArgs();
        }

        public Builder(WaitingRoomRuleArgs defaults) {
            $ = new WaitingRoomRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rule The content of the rule, the implemented policy or conditional expression.
         * 
         * @return builder
         * 
         */
        public Builder rule(Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule The content of the rule, the implemented policy or conditional expression.
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param ruleName Rule name, optional, used to query by waiting room bypass rule name.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name, optional, used to query by waiting room bypass rule name.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the ListSites API.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the ListSites API.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param status Rule enabled status, supporting:
         * -&#39;on&#39;: means enabled.
         * -&#39;off&#39;: means disabled.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Rule enabled status, supporting:
         * -&#39;on&#39;: means enabled.
         * -&#39;off&#39;: means disabled.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param waitingRoomId Waiting room ID, used to identify a specific waiting room. It can be obtained by calling the [listwaitingroom](https://help.aliyun.com/document_detail/2850279.html) interface.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomId(Output<String> waitingRoomId) {
            $.waitingRoomId = waitingRoomId;
            return this;
        }

        /**
         * @param waitingRoomId Waiting room ID, used to identify a specific waiting room. It can be obtained by calling the [listwaitingroom](https://help.aliyun.com/document_detail/2850279.html) interface.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomId(String waitingRoomId) {
            return waitingRoomId(Output.of(waitingRoomId));
        }

        public WaitingRoomRuleArgs build() {
            if ($.rule == null) {
                throw new MissingRequiredPropertyException("WaitingRoomRuleArgs", "rule");
            }
            if ($.ruleName == null) {
                throw new MissingRequiredPropertyException("WaitingRoomRuleArgs", "ruleName");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("WaitingRoomRuleArgs", "siteId");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("WaitingRoomRuleArgs", "status");
            }
            if ($.waitingRoomId == null) {
                throw new MissingRequiredPropertyException("WaitingRoomRuleArgs", "waitingRoomId");
            }
            return $;
        }
    }

}
