// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudphone.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyNetRedirectPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyNetRedirectPolicyArgs Empty = new PolicyNetRedirectPolicyArgs();

    /**
     * Whether to manually configure the transparent proxy.
     * 
     */
    @Import(name="customProxy")
    private @Nullable Output<String> customProxy;

    /**
     * @return Whether to manually configure the transparent proxy.
     * 
     */
    public Optional<Output<String>> customProxy() {
        return Optional.ofNullable(this.customProxy);
    }

    /**
     * The transparent proxy IP address. The format is IPv4 address.
     * 
     */
    @Import(name="hostAddr")
    private @Nullable Output<String> hostAddr;

    /**
     * @return The transparent proxy IP address. The format is IPv4 address.
     * 
     */
    public Optional<Output<String>> hostAddr() {
        return Optional.ofNullable(this.hostAddr);
    }

    /**
     * Whether to enable network redirection.
     * 
     */
    @Import(name="netRedirect")
    private @Nullable Output<String> netRedirect;

    /**
     * @return Whether to enable network redirection.
     * 
     */
    public Optional<Output<String>> netRedirect() {
        return Optional.ofNullable(this.netRedirect);
    }

    /**
     * Transparent proxy port. The Port value range is 1\~ 65535.
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return Transparent proxy port. The Port value range is 1\~ 65535.
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The proxy password. The length range is 1\~ 256. Chinese characters and white space characters are not allowed.
     * 
     */
    @Import(name="proxyPassword")
    private @Nullable Output<String> proxyPassword;

    /**
     * @return The proxy password. The length range is 1\~ 256. Chinese characters and white space characters are not allowed.
     * 
     */
    public Optional<Output<String>> proxyPassword() {
        return Optional.ofNullable(this.proxyPassword);
    }

    /**
     * Agent protocol type.
     * 
     */
    @Import(name="proxyType")
    private @Nullable Output<String> proxyType;

    /**
     * @return Agent protocol type.
     * 
     */
    public Optional<Output<String>> proxyType() {
        return Optional.ofNullable(this.proxyType);
    }

    /**
     * The proxy user name. The length range is 1\~ 256. Chinese characters and white space characters are not allowed.
     * 
     */
    @Import(name="proxyUserName")
    private @Nullable Output<String> proxyUserName;

    /**
     * @return The proxy user name. The length range is 1\~ 256. Chinese characters and white space characters are not allowed.
     * 
     */
    public Optional<Output<String>> proxyUserName() {
        return Optional.ofNullable(this.proxyUserName);
    }

    private PolicyNetRedirectPolicyArgs() {}

    private PolicyNetRedirectPolicyArgs(PolicyNetRedirectPolicyArgs $) {
        this.customProxy = $.customProxy;
        this.hostAddr = $.hostAddr;
        this.netRedirect = $.netRedirect;
        this.port = $.port;
        this.proxyPassword = $.proxyPassword;
        this.proxyType = $.proxyType;
        this.proxyUserName = $.proxyUserName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyNetRedirectPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyNetRedirectPolicyArgs $;

        public Builder() {
            $ = new PolicyNetRedirectPolicyArgs();
        }

        public Builder(PolicyNetRedirectPolicyArgs defaults) {
            $ = new PolicyNetRedirectPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customProxy Whether to manually configure the transparent proxy.
         * 
         * @return builder
         * 
         */
        public Builder customProxy(@Nullable Output<String> customProxy) {
            $.customProxy = customProxy;
            return this;
        }

        /**
         * @param customProxy Whether to manually configure the transparent proxy.
         * 
         * @return builder
         * 
         */
        public Builder customProxy(String customProxy) {
            return customProxy(Output.of(customProxy));
        }

        /**
         * @param hostAddr The transparent proxy IP address. The format is IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder hostAddr(@Nullable Output<String> hostAddr) {
            $.hostAddr = hostAddr;
            return this;
        }

        /**
         * @param hostAddr The transparent proxy IP address. The format is IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder hostAddr(String hostAddr) {
            return hostAddr(Output.of(hostAddr));
        }

        /**
         * @param netRedirect Whether to enable network redirection.
         * 
         * @return builder
         * 
         */
        public Builder netRedirect(@Nullable Output<String> netRedirect) {
            $.netRedirect = netRedirect;
            return this;
        }

        /**
         * @param netRedirect Whether to enable network redirection.
         * 
         * @return builder
         * 
         */
        public Builder netRedirect(String netRedirect) {
            return netRedirect(Output.of(netRedirect));
        }

        /**
         * @param port Transparent proxy port. The Port value range is 1\~ 65535.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Transparent proxy port. The Port value range is 1\~ 65535.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param proxyPassword The proxy password. The length range is 1\~ 256. Chinese characters and white space characters are not allowed.
         * 
         * @return builder
         * 
         */
        public Builder proxyPassword(@Nullable Output<String> proxyPassword) {
            $.proxyPassword = proxyPassword;
            return this;
        }

        /**
         * @param proxyPassword The proxy password. The length range is 1\~ 256. Chinese characters and white space characters are not allowed.
         * 
         * @return builder
         * 
         */
        public Builder proxyPassword(String proxyPassword) {
            return proxyPassword(Output.of(proxyPassword));
        }

        /**
         * @param proxyType Agent protocol type.
         * 
         * @return builder
         * 
         */
        public Builder proxyType(@Nullable Output<String> proxyType) {
            $.proxyType = proxyType;
            return this;
        }

        /**
         * @param proxyType Agent protocol type.
         * 
         * @return builder
         * 
         */
        public Builder proxyType(String proxyType) {
            return proxyType(Output.of(proxyType));
        }

        /**
         * @param proxyUserName The proxy user name. The length range is 1\~ 256. Chinese characters and white space characters are not allowed.
         * 
         * @return builder
         * 
         */
        public Builder proxyUserName(@Nullable Output<String> proxyUserName) {
            $.proxyUserName = proxyUserName;
            return this;
        }

        /**
         * @param proxyUserName The proxy user name. The length range is 1\~ 256. Chinese characters and white space characters are not allowed.
         * 
         * @return builder
         * 
         */
        public Builder proxyUserName(String proxyUserName) {
            return proxyUserName(Output.of(proxyUserName));
        }

        public PolicyNetRedirectPolicyArgs build() {
            return $;
        }
    }

}
