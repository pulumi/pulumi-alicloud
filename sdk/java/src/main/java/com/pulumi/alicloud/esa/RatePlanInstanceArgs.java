// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RatePlanInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RatePlanInstanceArgs Empty = new RatePlanInstanceArgs();

    /**
     * Whether to pay automatically.
     * 
     */
    @Import(name="autoPay")
    private @Nullable Output<Boolean> autoPay;

    /**
     * @return Whether to pay automatically.
     * 
     */
    public Optional<Output<Boolean>> autoPay() {
        return Optional.ofNullable(this.autoPay);
    }

    /**
     * Auto Renew:
     * 
     * true: Automatic renewal.
     * 
     * false: Do not renew automatically.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Auto Renew:
     * 
     * true: Automatic renewal.
     * 
     * false: Do not renew automatically.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * Acceleration area:
     * 
     * domestic: Mainland China only.
     * 
     * global: global.
     * 
     * overseas: Global (excluding Mainland China).
     * 
     */
    @Import(name="coverage")
    private @Nullable Output<String> coverage;

    /**
     * @return Acceleration area:
     * 
     * domestic: Mainland China only.
     * 
     * global: global.
     * 
     * overseas: Global (excluding Mainland China).
     * 
     */
    public Optional<Output<String>> coverage() {
        return Optional.ofNullable(this.coverage);
    }

    /**
     * The payment type of the resource
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The payment type of the resource
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * Purchase cycle (in months).
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return Purchase cycle (in months).
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The plan name, which is obtained from the DescribeRatePlanPrice interface.
     * 
     */
    @Import(name="planName")
    private @Nullable Output<String> planName;

    /**
     * @return The plan name, which is obtained from the DescribeRatePlanPrice interface.
     * 
     */
    public Optional<Output<String>> planName() {
        return Optional.ofNullable(this.planName);
    }

    /**
     * Site access type:
     * 
     * NS:NS access.
     * 
     * CNAME:CNAME access.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Site access type:
     * 
     * NS:NS access.
     * 
     * CNAME:CNAME access.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RatePlanInstanceArgs() {}

    private RatePlanInstanceArgs(RatePlanInstanceArgs $) {
        this.autoPay = $.autoPay;
        this.autoRenew = $.autoRenew;
        this.coverage = $.coverage;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.planName = $.planName;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RatePlanInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RatePlanInstanceArgs $;

        public Builder() {
            $ = new RatePlanInstanceArgs();
        }

        public Builder(RatePlanInstanceArgs defaults) {
            $ = new RatePlanInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoPay Whether to pay automatically.
         * 
         * @return builder
         * 
         */
        public Builder autoPay(@Nullable Output<Boolean> autoPay) {
            $.autoPay = autoPay;
            return this;
        }

        /**
         * @param autoPay Whether to pay automatically.
         * 
         * @return builder
         * 
         */
        public Builder autoPay(Boolean autoPay) {
            return autoPay(Output.of(autoPay));
        }

        /**
         * @param autoRenew Auto Renew:
         * 
         * true: Automatic renewal.
         * 
         * false: Do not renew automatically.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Auto Renew:
         * 
         * true: Automatic renewal.
         * 
         * false: Do not renew automatically.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param coverage Acceleration area:
         * 
         * domestic: Mainland China only.
         * 
         * global: global.
         * 
         * overseas: Global (excluding Mainland China).
         * 
         * @return builder
         * 
         */
        public Builder coverage(@Nullable Output<String> coverage) {
            $.coverage = coverage;
            return this;
        }

        /**
         * @param coverage Acceleration area:
         * 
         * domestic: Mainland China only.
         * 
         * global: global.
         * 
         * overseas: Global (excluding Mainland China).
         * 
         * @return builder
         * 
         */
        public Builder coverage(String coverage) {
            return coverage(Output.of(coverage));
        }

        /**
         * @param paymentType The payment type of the resource
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period Purchase cycle (in months).
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Purchase cycle (in months).
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param planName The plan name, which is obtained from the DescribeRatePlanPrice interface.
         * 
         * @return builder
         * 
         */
        public Builder planName(@Nullable Output<String> planName) {
            $.planName = planName;
            return this;
        }

        /**
         * @param planName The plan name, which is obtained from the DescribeRatePlanPrice interface.
         * 
         * @return builder
         * 
         */
        public Builder planName(String planName) {
            return planName(Output.of(planName));
        }

        /**
         * @param type Site access type:
         * 
         * NS:NS access.
         * 
         * CNAME:CNAME access.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Site access type:
         * 
         * NS:NS access.
         * 
         * CNAME:CNAME access.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RatePlanInstanceArgs build() {
            return $;
        }
    }

}
