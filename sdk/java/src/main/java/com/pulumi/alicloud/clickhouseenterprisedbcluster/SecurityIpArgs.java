// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.clickhouseenterprisedbcluster;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class SecurityIpArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityIpArgs Empty = new SecurityIpArgs();

    /**
     * The cluster ID.
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return The cluster ID.
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    /**
     * The whitelist name.
     * 
     */
    @Import(name="groupName", required=true)
    private Output<String> groupName;

    /**
     * @return The whitelist name.
     * 
     */
    public Output<String> groupName() {
        return this.groupName;
    }

    /**
     * The IP address list under the whitelist group.
     * 
     */
    @Import(name="securityIpList", required=true)
    private Output<String> securityIpList;

    /**
     * @return The IP address list under the whitelist group.
     * 
     */
    public Output<String> securityIpList() {
        return this.securityIpList;
    }

    private SecurityIpArgs() {}

    private SecurityIpArgs(SecurityIpArgs $) {
        this.dbInstanceId = $.dbInstanceId;
        this.groupName = $.groupName;
        this.securityIpList = $.securityIpList;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityIpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityIpArgs $;

        public Builder() {
            $ = new SecurityIpArgs();
        }

        public Builder(SecurityIpArgs defaults) {
            $ = new SecurityIpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbInstanceId The cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param groupName The whitelist name.
         * 
         * @return builder
         * 
         */
        public Builder groupName(Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        /**
         * @param groupName The whitelist name.
         * 
         * @return builder
         * 
         */
        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        /**
         * @param securityIpList The IP address list under the whitelist group.
         * 
         * @return builder
         * 
         */
        public Builder securityIpList(Output<String> securityIpList) {
            $.securityIpList = securityIpList;
            return this;
        }

        /**
         * @param securityIpList The IP address list under the whitelist group.
         * 
         * @return builder
         * 
         */
        public Builder securityIpList(String securityIpList) {
            return securityIpList(Output.of(securityIpList));
        }

        public SecurityIpArgs build() {
            if ($.dbInstanceId == null) {
                throw new MissingRequiredPropertyException("SecurityIpArgs", "dbInstanceId");
            }
            if ($.groupName == null) {
                throw new MissingRequiredPropertyException("SecurityIpArgs", "groupName");
            }
            if ($.securityIpList == null) {
                throw new MissingRequiredPropertyException("SecurityIpArgs", "securityIpList");
            }
            return $;
        }
    }

}
