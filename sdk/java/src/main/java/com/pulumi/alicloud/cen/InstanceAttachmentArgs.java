// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceAttachmentArgs Empty = new InstanceAttachmentArgs();

    /**
     * The account ID to which the CEN instance belongs.
     * 
     * -&gt;**NOTE:** Ensure that the child instance is not used in Express Connect.
     * 
     */
    @Import(name="cenOwnerId")
    private @Nullable Output<Integer> cenOwnerId;

    /**
     * @return The account ID to which the CEN instance belongs.
     * 
     * -&gt;**NOTE:** Ensure that the child instance is not used in Express Connect.
     * 
     */
    public Optional<Output<Integer>> cenOwnerId() {
        return Optional.ofNullable(this.cenOwnerId);
    }

    /**
     * The ID of the child instance to attach.
     * 
     */
    @Import(name="childInstanceId", required=true)
    private Output<String> childInstanceId;

    /**
     * @return The ID of the child instance to attach.
     * 
     */
    public Output<String> childInstanceId() {
        return this.childInstanceId;
    }

    /**
     * The uid of the child instance. Only used when attach a child instance of other account.
     * 
     */
    @Import(name="childInstanceOwnerId")
    private @Nullable Output<Integer> childInstanceOwnerId;

    /**
     * @return The uid of the child instance. Only used when attach a child instance of other account.
     * 
     */
    public Optional<Output<Integer>> childInstanceOwnerId() {
        return Optional.ofNullable(this.childInstanceOwnerId);
    }

    /**
     * The region ID of the child instance to attach.
     * 
     */
    @Import(name="childInstanceRegionId", required=true)
    private Output<String> childInstanceRegionId;

    /**
     * @return The region ID of the child instance to attach.
     * 
     */
    public Output<String> childInstanceRegionId() {
        return this.childInstanceRegionId;
    }

    /**
     * The type of the associated network. Valid values: `VPC`, `VBR` and `CCN`.
     * 
     */
    @Import(name="childInstanceType", required=true)
    private Output<String> childInstanceType;

    /**
     * @return The type of the associated network. Valid values: `VPC`, `VBR` and `CCN`.
     * 
     */
    public Output<String> childInstanceType() {
        return this.childInstanceType;
    }

    /**
     * The ID of the CEN.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The ID of the CEN.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    private InstanceAttachmentArgs() {}

    private InstanceAttachmentArgs(InstanceAttachmentArgs $) {
        this.cenOwnerId = $.cenOwnerId;
        this.childInstanceId = $.childInstanceId;
        this.childInstanceOwnerId = $.childInstanceOwnerId;
        this.childInstanceRegionId = $.childInstanceRegionId;
        this.childInstanceType = $.childInstanceType;
        this.instanceId = $.instanceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceAttachmentArgs $;

        public Builder() {
            $ = new InstanceAttachmentArgs();
        }

        public Builder(InstanceAttachmentArgs defaults) {
            $ = new InstanceAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cenOwnerId The account ID to which the CEN instance belongs.
         * 
         * -&gt;**NOTE:** Ensure that the child instance is not used in Express Connect.
         * 
         * @return builder
         * 
         */
        public Builder cenOwnerId(@Nullable Output<Integer> cenOwnerId) {
            $.cenOwnerId = cenOwnerId;
            return this;
        }

        /**
         * @param cenOwnerId The account ID to which the CEN instance belongs.
         * 
         * -&gt;**NOTE:** Ensure that the child instance is not used in Express Connect.
         * 
         * @return builder
         * 
         */
        public Builder cenOwnerId(Integer cenOwnerId) {
            return cenOwnerId(Output.of(cenOwnerId));
        }

        /**
         * @param childInstanceId The ID of the child instance to attach.
         * 
         * @return builder
         * 
         */
        public Builder childInstanceId(Output<String> childInstanceId) {
            $.childInstanceId = childInstanceId;
            return this;
        }

        /**
         * @param childInstanceId The ID of the child instance to attach.
         * 
         * @return builder
         * 
         */
        public Builder childInstanceId(String childInstanceId) {
            return childInstanceId(Output.of(childInstanceId));
        }

        /**
         * @param childInstanceOwnerId The uid of the child instance. Only used when attach a child instance of other account.
         * 
         * @return builder
         * 
         */
        public Builder childInstanceOwnerId(@Nullable Output<Integer> childInstanceOwnerId) {
            $.childInstanceOwnerId = childInstanceOwnerId;
            return this;
        }

        /**
         * @param childInstanceOwnerId The uid of the child instance. Only used when attach a child instance of other account.
         * 
         * @return builder
         * 
         */
        public Builder childInstanceOwnerId(Integer childInstanceOwnerId) {
            return childInstanceOwnerId(Output.of(childInstanceOwnerId));
        }

        /**
         * @param childInstanceRegionId The region ID of the child instance to attach.
         * 
         * @return builder
         * 
         */
        public Builder childInstanceRegionId(Output<String> childInstanceRegionId) {
            $.childInstanceRegionId = childInstanceRegionId;
            return this;
        }

        /**
         * @param childInstanceRegionId The region ID of the child instance to attach.
         * 
         * @return builder
         * 
         */
        public Builder childInstanceRegionId(String childInstanceRegionId) {
            return childInstanceRegionId(Output.of(childInstanceRegionId));
        }

        /**
         * @param childInstanceType The type of the associated network. Valid values: `VPC`, `VBR` and `CCN`.
         * 
         * @return builder
         * 
         */
        public Builder childInstanceType(Output<String> childInstanceType) {
            $.childInstanceType = childInstanceType;
            return this;
        }

        /**
         * @param childInstanceType The type of the associated network. Valid values: `VPC`, `VBR` and `CCN`.
         * 
         * @return builder
         * 
         */
        public Builder childInstanceType(String childInstanceType) {
            return childInstanceType(Output.of(childInstanceType));
        }

        /**
         * @param instanceId The ID of the CEN.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the CEN.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        public InstanceAttachmentArgs build() {
            if ($.childInstanceId == null) {
                throw new MissingRequiredPropertyException("InstanceAttachmentArgs", "childInstanceId");
            }
            if ($.childInstanceRegionId == null) {
                throw new MissingRequiredPropertyException("InstanceAttachmentArgs", "childInstanceRegionId");
            }
            if ($.childInstanceType == null) {
                throw new MissingRequiredPropertyException("InstanceAttachmentArgs", "childInstanceType");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("InstanceAttachmentArgs", "instanceId");
            }
            return $;
        }
    }

}
