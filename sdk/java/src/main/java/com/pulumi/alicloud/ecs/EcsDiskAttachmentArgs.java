// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EcsDiskAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final EcsDiskAttachmentArgs Empty = new EcsDiskAttachmentArgs();

    /**
     * Whether to mount as a system disk. Default to: `false`.
     * 
     */
    @Import(name="bootable")
    private @Nullable Output<Boolean> bootable;

    /**
     * @return Whether to mount as a system disk. Default to: `false`.
     * 
     */
    public Optional<Output<Boolean>> bootable() {
        return Optional.ofNullable(this.bootable);
    }

    /**
     * Indicates whether the disk is released together with the instance. Default to: `false`.
     * 
     */
    @Import(name="deleteWithInstance")
    private @Nullable Output<Boolean> deleteWithInstance;

    /**
     * @return Indicates whether the disk is released together with the instance. Default to: `false`.
     * 
     */
    public Optional<Output<Boolean>> deleteWithInstance() {
        return Optional.ofNullable(this.deleteWithInstance);
    }

    /**
     * ID of the Disk to be attached.
     * 
     */
    @Import(name="diskId", required=true)
    private Output<String> diskId;

    /**
     * @return ID of the Disk to be attached.
     * 
     */
    public Output<String> diskId() {
        return this.diskId;
    }

    /**
     * ID of the Instance to attach to.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return ID of the Instance to attach to.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The name of key pair
     * 
     */
    @Import(name="keyPairName")
    private @Nullable Output<String> keyPairName;

    /**
     * @return The name of key pair
     * 
     */
    public Optional<Output<String>> keyPairName() {
        return Optional.ofNullable(this.keyPairName);
    }

    /**
     * When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    private EcsDiskAttachmentArgs() {}

    private EcsDiskAttachmentArgs(EcsDiskAttachmentArgs $) {
        this.bootable = $.bootable;
        this.deleteWithInstance = $.deleteWithInstance;
        this.diskId = $.diskId;
        this.instanceId = $.instanceId;
        this.keyPairName = $.keyPairName;
        this.password = $.password;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EcsDiskAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EcsDiskAttachmentArgs $;

        public Builder() {
            $ = new EcsDiskAttachmentArgs();
        }

        public Builder(EcsDiskAttachmentArgs defaults) {
            $ = new EcsDiskAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootable Whether to mount as a system disk. Default to: `false`.
         * 
         * @return builder
         * 
         */
        public Builder bootable(@Nullable Output<Boolean> bootable) {
            $.bootable = bootable;
            return this;
        }

        /**
         * @param bootable Whether to mount as a system disk. Default to: `false`.
         * 
         * @return builder
         * 
         */
        public Builder bootable(Boolean bootable) {
            return bootable(Output.of(bootable));
        }

        /**
         * @param deleteWithInstance Indicates whether the disk is released together with the instance. Default to: `false`.
         * 
         * @return builder
         * 
         */
        public Builder deleteWithInstance(@Nullable Output<Boolean> deleteWithInstance) {
            $.deleteWithInstance = deleteWithInstance;
            return this;
        }

        /**
         * @param deleteWithInstance Indicates whether the disk is released together with the instance. Default to: `false`.
         * 
         * @return builder
         * 
         */
        public Builder deleteWithInstance(Boolean deleteWithInstance) {
            return deleteWithInstance(Output.of(deleteWithInstance));
        }

        /**
         * @param diskId ID of the Disk to be attached.
         * 
         * @return builder
         * 
         */
        public Builder diskId(Output<String> diskId) {
            $.diskId = diskId;
            return this;
        }

        /**
         * @param diskId ID of the Disk to be attached.
         * 
         * @return builder
         * 
         */
        public Builder diskId(String diskId) {
            return diskId(Output.of(diskId));
        }

        /**
         * @param instanceId ID of the Instance to attach to.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId ID of the Instance to attach to.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param keyPairName The name of key pair
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(@Nullable Output<String> keyPairName) {
            $.keyPairName = keyPairName;
            return this;
        }

        /**
         * @param keyPairName The name of key pair
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(String keyPairName) {
            return keyPairName(Output.of(keyPairName));
        }

        /**
         * @param password When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        public EcsDiskAttachmentArgs build() {
            if ($.diskId == null) {
                throw new MissingRequiredPropertyException("EcsDiskAttachmentArgs", "diskId");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("EcsDiskAttachmentArgs", "instanceId");
            }
            return $;
        }
    }

}
