// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoutineRouteState extends com.pulumi.resources.ResourceArgs {

    public static final RoutineRouteState Empty = new RoutineRouteState();

    /**
     * Bypass mode. Value range:
     * - on: Open
     * - off: off
     * 
     */
    @Import(name="bypass")
    private @Nullable Output<String> bypass;

    /**
     * @return Bypass mode. Value range:
     * - on: Open
     * - off: off
     * 
     */
    public Optional<Output<String>> bypass() {
        return Optional.ofNullable(this.bypass);
    }

    /**
     * Config Id
     * 
     */
    @Import(name="configId")
    private @Nullable Output<Integer> configId;

    /**
     * @return Config Id
     * 
     */
    public Optional<Output<Integer>> configId() {
        return Optional.ofNullable(this.configId);
    }

    /**
     * Routing switch. Value range:
     * - on: Open
     * - off: off
     * 
     */
    @Import(name="routeEnable")
    private @Nullable Output<String> routeEnable;

    /**
     * @return Routing switch. Value range:
     * - on: Open
     * - off: off
     * 
     */
    public Optional<Output<String>> routeEnable() {
        return Optional.ofNullable(this.routeEnable);
    }

    /**
     * The route name.
     * 
     */
    @Import(name="routeName")
    private @Nullable Output<String> routeName;

    /**
     * @return The route name.
     * 
     */
    public Optional<Output<String>> routeName() {
        return Optional.ofNullable(this.routeName);
    }

    /**
     * The edge function Routine name.
     * 
     */
    @Import(name="routineName")
    private @Nullable Output<String> routineName;

    /**
     * @return The edge function Routine name.
     * 
     */
    public Optional<Output<String>> routineName() {
        return Optional.ofNullable(this.routineName);
    }

    /**
     * The rule content.
     * 
     */
    @Import(name="rule")
    private @Nullable Output<String> rule;

    /**
     * @return The rule content.
     * 
     */
    public Optional<Output<String>> rule() {
        return Optional.ofNullable(this.rule);
    }

    /**
     * Rule execution order.
     * 
     */
    @Import(name="sequence")
    private @Nullable Output<Integer> sequence;

    /**
     * @return Rule execution order.
     * 
     */
    public Optional<Output<Integer>> sequence() {
        return Optional.ofNullable(this.sequence);
    }

    /**
     * Site Id
     * 
     */
    @Import(name="siteId")
    private @Nullable Output<Integer> siteId;

    /**
     * @return Site Id
     * 
     */
    public Optional<Output<Integer>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    private RoutineRouteState() {}

    private RoutineRouteState(RoutineRouteState $) {
        this.bypass = $.bypass;
        this.configId = $.configId;
        this.routeEnable = $.routeEnable;
        this.routeName = $.routeName;
        this.routineName = $.routineName;
        this.rule = $.rule;
        this.sequence = $.sequence;
        this.siteId = $.siteId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoutineRouteState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoutineRouteState $;

        public Builder() {
            $ = new RoutineRouteState();
        }

        public Builder(RoutineRouteState defaults) {
            $ = new RoutineRouteState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bypass Bypass mode. Value range:
         * - on: Open
         * - off: off
         * 
         * @return builder
         * 
         */
        public Builder bypass(@Nullable Output<String> bypass) {
            $.bypass = bypass;
            return this;
        }

        /**
         * @param bypass Bypass mode. Value range:
         * - on: Open
         * - off: off
         * 
         * @return builder
         * 
         */
        public Builder bypass(String bypass) {
            return bypass(Output.of(bypass));
        }

        /**
         * @param configId Config Id
         * 
         * @return builder
         * 
         */
        public Builder configId(@Nullable Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId Config Id
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param routeEnable Routing switch. Value range:
         * - on: Open
         * - off: off
         * 
         * @return builder
         * 
         */
        public Builder routeEnable(@Nullable Output<String> routeEnable) {
            $.routeEnable = routeEnable;
            return this;
        }

        /**
         * @param routeEnable Routing switch. Value range:
         * - on: Open
         * - off: off
         * 
         * @return builder
         * 
         */
        public Builder routeEnable(String routeEnable) {
            return routeEnable(Output.of(routeEnable));
        }

        /**
         * @param routeName The route name.
         * 
         * @return builder
         * 
         */
        public Builder routeName(@Nullable Output<String> routeName) {
            $.routeName = routeName;
            return this;
        }

        /**
         * @param routeName The route name.
         * 
         * @return builder
         * 
         */
        public Builder routeName(String routeName) {
            return routeName(Output.of(routeName));
        }

        /**
         * @param routineName The edge function Routine name.
         * 
         * @return builder
         * 
         */
        public Builder routineName(@Nullable Output<String> routineName) {
            $.routineName = routineName;
            return this;
        }

        /**
         * @param routineName The edge function Routine name.
         * 
         * @return builder
         * 
         */
        public Builder routineName(String routineName) {
            return routineName(Output.of(routineName));
        }

        /**
         * @param rule The rule content.
         * 
         * @return builder
         * 
         */
        public Builder rule(@Nullable Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule The rule content.
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param sequence Rule execution order.
         * 
         * @return builder
         * 
         */
        public Builder sequence(@Nullable Output<Integer> sequence) {
            $.sequence = sequence;
            return this;
        }

        /**
         * @param sequence Rule execution order.
         * 
         * @return builder
         * 
         */
        public Builder sequence(Integer sequence) {
            return sequence(Output.of(sequence));
        }

        /**
         * @param siteId Site Id
         * 
         * @return builder
         * 
         */
        public Builder siteId(@Nullable Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId Site Id
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        public RoutineRouteState build() {
            return $;
        }
    }

}
