// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEipsEip {
    /**
     * @return EIP internet max bandwidth in Mbps.
     * 
     */
    private String bandwidth;
    /**
     * @return Time of creation.
     * 
     */
    private String creationTime;
    /**
     * @return (Optional, Available in v1.124.4+) Whether enable the deletion protection or not.
     * 
     */
    private Boolean deletionProtection;
    /**
     * @return ID of the EIP.
     * 
     */
    private String id;
    /**
     * @return The ID of the instance that is being bound.
     * 
     */
    private String instanceId;
    /**
     * @return The instance type of that the EIP is bound.
     * 
     */
    private String instanceType;
    /**
     * @return EIP internet charge type.
     * 
     */
    private String internetChargeType;
    /**
     * @return Public IP Address of the the EIP.
     * 
     */
    private String ipAddress;
    /**
     * @return EIP status. Possible values are: `Associating`, `Unassociating`, `InUse` and `Available`.
     * 
     */
    private String status;

    private GetEipsEip() {}
    /**
     * @return EIP internet max bandwidth in Mbps.
     * 
     */
    public String bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return Time of creation.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return (Optional, Available in v1.124.4+) Whether enable the deletion protection or not.
     * 
     */
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    /**
     * @return ID of the EIP.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the instance that is being bound.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The instance type of that the EIP is bound.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return EIP internet charge type.
     * 
     */
    public String internetChargeType() {
        return this.internetChargeType;
    }
    /**
     * @return Public IP Address of the the EIP.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return EIP status. Possible values are: `Associating`, `Unassociating`, `InUse` and `Available`.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEipsEip defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bandwidth;
        private String creationTime;
        private Boolean deletionProtection;
        private String id;
        private String instanceId;
        private String instanceType;
        private String internetChargeType;
        private String ipAddress;
        private String status;
        public Builder() {}
        public Builder(GetEipsEip defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidth = defaults.bandwidth;
    	      this.creationTime = defaults.creationTime;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceType = defaults.instanceType;
    	      this.internetChargeType = defaults.internetChargeType;
    	      this.ipAddress = defaults.ipAddress;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder bandwidth(String bandwidth) {
            if (bandwidth == null) {
              throw new MissingRequiredPropertyException("GetEipsEip", "bandwidth");
            }
            this.bandwidth = bandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetEipsEip", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetEipsEip", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEipsEip", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetEipsEip", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            if (instanceType == null) {
              throw new MissingRequiredPropertyException("GetEipsEip", "instanceType");
            }
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder internetChargeType(String internetChargeType) {
            if (internetChargeType == null) {
              throw new MissingRequiredPropertyException("GetEipsEip", "internetChargeType");
            }
            this.internetChargeType = internetChargeType;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetEipsEip", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetEipsEip", "status");
            }
            this.status = status;
            return this;
        }
        public GetEipsEip build() {
            final var _resultValue = new GetEipsEip();
            _resultValue.bandwidth = bandwidth;
            _resultValue.creationTime = creationTime;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.instanceType = instanceType;
            _resultValue.internetChargeType = internetChargeType;
            _resultValue.ipAddress = ipAddress;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
