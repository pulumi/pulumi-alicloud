// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.nlb.ServerGroupArgs;
import com.pulumi.alicloud.nlb.inputs.ServerGroupState;
import com.pulumi.alicloud.nlb.outputs.ServerGroupHealthCheck;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Network Load Balancer (NLB) Server Group resource.
 * 
 * For information about Network Load Balancer (NLB) Server Group and how to use it, see [What is Server Group](https://www.alibabacloud.com/help/en/server-load-balancer/latest/createservergroup-nlb).
 * 
 * &gt; **NOTE:** Available since v1.186.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
 * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
 * import com.pulumi.alicloud.vpc.Network;
 * import com.pulumi.alicloud.vpc.NetworkArgs;
 * import com.pulumi.alicloud.nlb.ServerGroup;
 * import com.pulumi.alicloud.nlb.ServerGroupArgs;
 * import com.pulumi.alicloud.nlb.inputs.ServerGroupHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("tf-example");
 *         final var default = ResourcemanagerFunctions.getResourceGroups(GetResourceGroupsArgs.builder()
 *             .build());
 * 
 *         var defaultNetwork = new Network("defaultNetwork", NetworkArgs.builder()
 *             .vpcName(name)
 *             .cidrBlock("10.4.0.0/16")
 *             .build());
 * 
 *         var defaultServerGroup = new ServerGroup("defaultServerGroup", ServerGroupArgs.builder()
 *             .resourceGroupId(default_.ids()[0])
 *             .serverGroupName(name)
 *             .serverGroupType("Instance")
 *             .vpcId(defaultNetwork.id())
 *             .scheduler("Wrr")
 *             .protocol("TCP")
 *             .connectionDrainEnabled(true)
 *             .connectionDrainTimeout(60)
 *             .addressIpVersion("Ipv4")
 *             .healthCheck(ServerGroupHealthCheckArgs.builder()
 *                 .healthCheckEnabled(true)
 *                 .healthCheckType("TCP")
 *                 .healthCheckConnectPort(0)
 *                 .healthyThreshold(2)
 *                 .unhealthyThreshold(2)
 *                 .healthCheckConnectTimeout(5)
 *                 .healthCheckInterval(10)
 *                 .httpCheckMethod("GET")
 *                 .healthCheckHttpCodes(                
 *                     "http_2xx",
 *                     "http_3xx",
 *                     "http_4xx")
 *                 .build())
 *             .tags(Map.ofEntries(
 *                 Map.entry("Created", "TF"),
 *                 Map.entry("For", "example")
 *             ))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Network Load Balancer (NLB) Server Group can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:nlb/serverGroup:ServerGroup example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:nlb/serverGroup:ServerGroup")
public class ServerGroup extends com.pulumi.resources.CustomResource {
    /**
     * The protocol version. Valid values:
     * 
     */
    @Export(name="addressIpVersion", refs={String.class}, tree="[0]")
    private Output<String> addressIpVersion;

    /**
     * @return The protocol version. Valid values:
     * 
     */
    public Output<String> addressIpVersion() {
        return this.addressIpVersion;
    }
    /**
     * Specifies whether to enable all-port forwarding. Valid values:
     * 
     */
    @Export(name="anyPortEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> anyPortEnabled;

    /**
     * @return Specifies whether to enable all-port forwarding. Valid values:
     * 
     */
    public Output<Boolean> anyPortEnabled() {
        return this.anyPortEnabled;
    }
    /**
     * . Field &#39;connection_drain&#39; has been deprecated from provider version 1.231.0. New field &#39;connection_drain_enabled&#39; instead.
     * 
     * @deprecated
     * Field &#39;connection_drain&#39; has been deprecated since provider version 1.214.0. New field &#39;connection_drain_enabled&#39; instead.
     * 
     */
    @Deprecated /* Field 'connection_drain' has been deprecated since provider version 1.214.0. New field 'connection_drain_enabled' instead. */
    @Export(name="connectionDrain", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> connectionDrain;

    /**
     * @return . Field &#39;connection_drain&#39; has been deprecated from provider version 1.231.0. New field &#39;connection_drain_enabled&#39; instead.
     * 
     */
    public Output<Boolean> connectionDrain() {
        return this.connectionDrain;
    }
    /**
     * Specifies whether to enable connection draining. Valid values:
     * 
     */
    @Export(name="connectionDrainEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> connectionDrainEnabled;

    /**
     * @return Specifies whether to enable connection draining. Valid values:
     * 
     */
    public Output<Boolean> connectionDrainEnabled() {
        return this.connectionDrainEnabled;
    }
    /**
     * The timeout period of connection draining. Unit: seconds. Valid values: `10` to `900`.
     * 
     */
    @Export(name="connectionDrainTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> connectionDrainTimeout;

    /**
     * @return The timeout period of connection draining. Unit: seconds. Valid values: `10` to `900`.
     * 
     */
    public Output<Integer> connectionDrainTimeout() {
        return this.connectionDrainTimeout;
    }
    /**
     * Health check configuration information. See `health_check` below.
     * 
     */
    @Export(name="healthCheck", refs={ServerGroupHealthCheck.class}, tree="[0]")
    private Output<ServerGroupHealthCheck> healthCheck;

    /**
     * @return Health check configuration information. See `health_check` below.
     * 
     */
    public Output<ServerGroupHealthCheck> healthCheck() {
        return this.healthCheck;
    }
    /**
     * Specifies whether to enable client IP preservation. Valid values:
     * 
     */
    @Export(name="preserveClientIpEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> preserveClientIpEnabled;

    /**
     * @return Specifies whether to enable client IP preservation. Valid values:
     * 
     */
    public Output<Boolean> preserveClientIpEnabled() {
        return this.preserveClientIpEnabled;
    }
    /**
     * The protocol used to forward requests to the backend servers. Valid values:
     * 
     * - `TCP` (default)
     * - `UDP`
     * - `TCPSSL`
     * 
     */
    @Export(name="protocol", refs={String.class}, tree="[0]")
    private Output<String> protocol;

    /**
     * @return The protocol used to forward requests to the backend servers. Valid values:
     * 
     * - `TCP` (default)
     * - `UDP`
     * - `TCPSSL`
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }
    /**
     * The ID of the region where the NLB instance is deployed.
     * 
     */
    @Export(name="regionId", refs={String.class}, tree="[0]")
    private Output<String> regionId;

    /**
     * @return The ID of the region where the NLB instance is deployed.
     * 
     */
    public Output<String> regionId() {
        return this.regionId;
    }
    /**
     * The ID of the new resource group.
     * You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) to view resource group IDs.
     * 
     */
    @Export(name="resourceGroupId", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupId;

    /**
     * @return The ID of the new resource group.
     * You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) to view resource group IDs.
     * 
     */
    public Output<String> resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * The scheduling algorithm. Valid values:
     * 
     * - **Wrr:** The weighted round-robin algorithm is used. Backend servers with higher weights receive more requests than backend servers with lower weights. This is the default value.
     * - **rr:** The round-robin algorithm is used. Requests are forwarded to backend servers in sequence.
     * - **sch:** Source IP hashing is used. Requests from the same source IP address are forwarded to the same backend server.
     * - **tch:** Four-element hashing is used. It specifies consistent hashing that is based on four factors: source IP address, destination IP address, source port, and destination port. Requests that contain the same information based on the four factors are forwarded to the same backend server.
     * 
     */
    @Export(name="scheduler", refs={String.class}, tree="[0]")
    private Output<String> scheduler;

    /**
     * @return The scheduling algorithm. Valid values:
     * 
     * - **Wrr:** The weighted round-robin algorithm is used. Backend servers with higher weights receive more requests than backend servers with lower weights. This is the default value.
     * - **rr:** The round-robin algorithm is used. Requests are forwarded to backend servers in sequence.
     * - **sch:** Source IP hashing is used. Requests from the same source IP address are forwarded to the same backend server.
     * - **tch:** Four-element hashing is used. It specifies consistent hashing that is based on four factors: source IP address, destination IP address, source port, and destination port. Requests that contain the same information based on the four factors are forwarded to the same backend server.
     * 
     */
    public Output<String> scheduler() {
        return this.scheduler;
    }
    /**
     * The new name of the server group.
     * The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
     * 
     */
    @Export(name="serverGroupName", refs={String.class}, tree="[0]")
    private Output<String> serverGroupName;

    /**
     * @return The new name of the server group.
     * The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
     * 
     */
    public Output<String> serverGroupName() {
        return this.serverGroupName;
    }
    /**
     * The type of server group. Valid values:
     * 
     * - `Instance`: allows you to add servers of the `Ecs`, `Eni`, or `Eci` type. This is the default value.
     * - `Ip`: allows you to add servers by specifying IP addresses.
     * 
     */
    @Export(name="serverGroupType", refs={String.class}, tree="[0]")
    private Output<String> serverGroupType;

    /**
     * @return The type of server group. Valid values:
     * 
     * - `Instance`: allows you to add servers of the `Ecs`, `Eni`, or `Eci` type. This is the default value.
     * - `Ip`: allows you to add servers by specifying IP addresses.
     * 
     */
    public Output<String> serverGroupType() {
        return this.serverGroupType;
    }
    /**
     * Server group status. Value:
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Server group status. Value:
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Label.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Label.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The ID of the virtual private cloud (VPC) to which the server group belongs.
     * 
     * &gt; **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
     * 
     * The following arguments will be discarded. Please use new fields as soon as possible:
     * 
     */
    @Export(name="vpcId", refs={String.class}, tree="[0]")
    private Output<String> vpcId;

    /**
     * @return The ID of the virtual private cloud (VPC) to which the server group belongs.
     * 
     * &gt; **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
     * 
     * The following arguments will be discarded. Please use new fields as soon as possible:
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServerGroup(java.lang.String name) {
        this(name, ServerGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServerGroup(java.lang.String name, ServerGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServerGroup(java.lang.String name, ServerGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:nlb/serverGroup:ServerGroup", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ServerGroup(java.lang.String name, Output<java.lang.String> id, @Nullable ServerGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:nlb/serverGroup:ServerGroup", name, state, makeResourceOptions(options, id), false);
    }

    private static ServerGroupArgs makeArgs(ServerGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ServerGroupArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServerGroup get(java.lang.String name, Output<java.lang.String> id, @Nullable ServerGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServerGroup(name, id, state, options);
    }
}
