// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodePoolPrivatePoolOptions {
    /**
     * @return The ID of the private node pool.
     * 
     */
    private @Nullable String privatePoolOptionsId;
    /**
     * @return The type of private node pool. This parameter specifies the type of the private pool that you want to use to create instances. A private node pool is generated when an elasticity assurance or a capacity reservation service takes effect. The system selects a private node pool to launch instances. Valid values: `Open`: specifies an open private node pool. The system selects an open private node pool to launch instances. If no matching open private node pool is available, the resources in the public node pool are used. `Target`: specifies a private node pool. The system uses the resources of the specified private node pool to launch instances. If the specified private node pool is unavailable, instances cannot be started. `None`: no private node pool is used. The resources of private node pools are not used to launch the instances.
     * 
     */
    private @Nullable String privatePoolOptionsMatchCriteria;

    private NodePoolPrivatePoolOptions() {}
    /**
     * @return The ID of the private node pool.
     * 
     */
    public Optional<String> privatePoolOptionsId() {
        return Optional.ofNullable(this.privatePoolOptionsId);
    }
    /**
     * @return The type of private node pool. This parameter specifies the type of the private pool that you want to use to create instances. A private node pool is generated when an elasticity assurance or a capacity reservation service takes effect. The system selects a private node pool to launch instances. Valid values: `Open`: specifies an open private node pool. The system selects an open private node pool to launch instances. If no matching open private node pool is available, the resources in the public node pool are used. `Target`: specifies a private node pool. The system uses the resources of the specified private node pool to launch instances. If the specified private node pool is unavailable, instances cannot be started. `None`: no private node pool is used. The resources of private node pools are not used to launch the instances.
     * 
     */
    public Optional<String> privatePoolOptionsMatchCriteria() {
        return Optional.ofNullable(this.privatePoolOptionsMatchCriteria);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodePoolPrivatePoolOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String privatePoolOptionsId;
        private @Nullable String privatePoolOptionsMatchCriteria;
        public Builder() {}
        public Builder(NodePoolPrivatePoolOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.privatePoolOptionsId = defaults.privatePoolOptionsId;
    	      this.privatePoolOptionsMatchCriteria = defaults.privatePoolOptionsMatchCriteria;
        }

        @CustomType.Setter
        public Builder privatePoolOptionsId(@Nullable String privatePoolOptionsId) {

            this.privatePoolOptionsId = privatePoolOptionsId;
            return this;
        }
        @CustomType.Setter
        public Builder privatePoolOptionsMatchCriteria(@Nullable String privatePoolOptionsMatchCriteria) {

            this.privatePoolOptionsMatchCriteria = privatePoolOptionsMatchCriteria;
            return this;
        }
        public NodePoolPrivatePoolOptions build() {
            final var _resultValue = new NodePoolPrivatePoolOptions();
            _resultValue.privatePoolOptionsId = privatePoolOptionsId;
            _resultValue.privatePoolOptionsMatchCriteria = privatePoolOptionsMatchCriteria;
            return _resultValue;
        }
    }
}
