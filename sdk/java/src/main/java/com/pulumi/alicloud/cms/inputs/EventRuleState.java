// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.alicloud.cms.inputs.EventRuleEventPatternArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventRuleState extends com.pulumi.resources.ResourceArgs {

    public static final EventRuleState Empty = new EventRuleState();

    /**
     * The description of the event-triggered alert rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the event-triggered alert rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Event mode, used to describe the trigger conditions for this event. See `event_pattern` below.
     * 
     */
    @Import(name="eventPattern")
    private @Nullable Output<EventRuleEventPatternArgs> eventPattern;

    /**
     * @return Event mode, used to describe the trigger conditions for this event. See `event_pattern` below.
     * 
     */
    public Optional<Output<EventRuleEventPatternArgs>> eventPattern() {
        return Optional.ofNullable(this.eventPattern);
    }

    /**
     * The ID of the application group to which the event-triggered alert rule belongs.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return The ID of the application group to which the event-triggered alert rule belongs.
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * The name of the event-triggered alert rule.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return The name of the event-triggered alert rule.
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * The silence time.
     * 
     */
    @Import(name="silenceTime")
    private @Nullable Output<Integer> silenceTime;

    /**
     * @return The silence time.
     * 
     */
    public Optional<Output<Integer>> silenceTime() {
        return Optional.ofNullable(this.silenceTime);
    }

    /**
     * The status of the resource. Valid values: `ENABLED`, `DISABLED`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource. Valid values: `ENABLED`, `DISABLED`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private EventRuleState() {}

    private EventRuleState(EventRuleState $) {
        this.description = $.description;
        this.eventPattern = $.eventPattern;
        this.groupId = $.groupId;
        this.ruleName = $.ruleName;
        this.silenceTime = $.silenceTime;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventRuleState $;

        public Builder() {
            $ = new EventRuleState();
        }

        public Builder(EventRuleState defaults) {
            $ = new EventRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the event-triggered alert rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the event-triggered alert rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param eventPattern Event mode, used to describe the trigger conditions for this event. See `event_pattern` below.
         * 
         * @return builder
         * 
         */
        public Builder eventPattern(@Nullable Output<EventRuleEventPatternArgs> eventPattern) {
            $.eventPattern = eventPattern;
            return this;
        }

        /**
         * @param eventPattern Event mode, used to describe the trigger conditions for this event. See `event_pattern` below.
         * 
         * @return builder
         * 
         */
        public Builder eventPattern(EventRuleEventPatternArgs eventPattern) {
            return eventPattern(Output.of(eventPattern));
        }

        /**
         * @param groupId The ID of the application group to which the event-triggered alert rule belongs.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The ID of the application group to which the event-triggered alert rule belongs.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param ruleName The name of the event-triggered alert rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName The name of the event-triggered alert rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param silenceTime The silence time.
         * 
         * @return builder
         * 
         */
        public Builder silenceTime(@Nullable Output<Integer> silenceTime) {
            $.silenceTime = silenceTime;
            return this;
        }

        /**
         * @param silenceTime The silence time.
         * 
         * @return builder
         * 
         */
        public Builder silenceTime(Integer silenceTime) {
            return silenceTime(Output.of(silenceTime));
        }

        /**
         * @param status The status of the resource. Valid values: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource. Valid values: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public EventRuleState build() {
            return $;
        }
    }

}
