// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.resourcemanager.inputs;

import com.pulumi.alicloud.resourcemanager.inputs.AutoGroupingRuleRuleContentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutoGroupingRuleState extends com.pulumi.resources.ResourceArgs {

    public static final AutoGroupingRuleState Empty = new AutoGroupingRuleState();

    /**
     * The IDs of regions to be excluded. Separate multiple IDs with commas (,).
     * 
     */
    @Import(name="excludeRegionIdsScope")
    private @Nullable Output<String> excludeRegionIdsScope;

    /**
     * @return The IDs of regions to be excluded. Separate multiple IDs with commas (,).
     * 
     */
    public Optional<Output<String>> excludeRegionIdsScope() {
        return Optional.ofNullable(this.excludeRegionIdsScope);
    }

    /**
     * The IDs of resource groups to be excluded. Separate multiple IDs with commas (,).
     * 
     */
    @Import(name="excludeResourceGroupIdsScope")
    private @Nullable Output<String> excludeResourceGroupIdsScope;

    /**
     * @return The IDs of resource groups to be excluded. Separate multiple IDs with commas (,).
     * 
     */
    public Optional<Output<String>> excludeResourceGroupIdsScope() {
        return Optional.ofNullable(this.excludeResourceGroupIdsScope);
    }

    /**
     * The IDs of resources to be excluded. Separate multiple IDs with commas (,).
     * 
     */
    @Import(name="excludeResourceIdsScope")
    private @Nullable Output<String> excludeResourceIdsScope;

    /**
     * @return The IDs of resources to be excluded. Separate multiple IDs with commas (,).
     * 
     */
    public Optional<Output<String>> excludeResourceIdsScope() {
        return Optional.ofNullable(this.excludeResourceIdsScope);
    }

    /**
     * The resource types to be excluded. Separate multiple resource types with commas (,).
     * 
     */
    @Import(name="excludeResourceTypesScope")
    private @Nullable Output<String> excludeResourceTypesScope;

    /**
     * @return The resource types to be excluded. Separate multiple resource types with commas (,).
     * 
     */
    public Optional<Output<String>> excludeResourceTypesScope() {
        return Optional.ofNullable(this.excludeResourceTypesScope);
    }

    /**
     * The IDs of regions. Separate multiple IDs with commas (,).
     * 
     */
    @Import(name="regionIdsScope")
    private @Nullable Output<String> regionIdsScope;

    /**
     * @return The IDs of regions. Separate multiple IDs with commas (,).
     * 
     */
    public Optional<Output<String>> regionIdsScope() {
        return Optional.ofNullable(this.regionIdsScope);
    }

    /**
     * The IDs of resource groups. Separate multiple IDs with commas (,).
     * 
     */
    @Import(name="resourceGroupIdsScope")
    private @Nullable Output<String> resourceGroupIdsScope;

    /**
     * @return The IDs of resource groups. Separate multiple IDs with commas (,).
     * 
     */
    public Optional<Output<String>> resourceGroupIdsScope() {
        return Optional.ofNullable(this.resourceGroupIdsScope);
    }

    /**
     * The IDs of resources. Separate multiple IDs with commas (,).
     * 
     */
    @Import(name="resourceIdsScope")
    private @Nullable Output<String> resourceIdsScope;

    /**
     * @return The IDs of resources. Separate multiple IDs with commas (,).
     * 
     */
    public Optional<Output<String>> resourceIdsScope() {
        return Optional.ofNullable(this.resourceIdsScope);
    }

    /**
     * The resource types. Separate multiple resource types with commas (,).
     * 
     */
    @Import(name="resourceTypesScope")
    private @Nullable Output<String> resourceTypesScope;

    /**
     * @return The resource types. Separate multiple resource types with commas (,).
     * 
     */
    public Optional<Output<String>> resourceTypesScope() {
        return Optional.ofNullable(this.resourceTypesScope);
    }

    /**
     * The content records of the rule. See `rule_contents` below.
     * 
     */
    @Import(name="ruleContents")
    private @Nullable Output<List<AutoGroupingRuleRuleContentArgs>> ruleContents;

    /**
     * @return The content records of the rule. See `rule_contents` below.
     * 
     */
    public Optional<Output<List<AutoGroupingRuleRuleContentArgs>>> ruleContents() {
        return Optional.ofNullable(this.ruleContents);
    }

    /**
     * The description of the rule.
     * 
     */
    @Import(name="ruleDesc")
    private @Nullable Output<String> ruleDesc;

    /**
     * @return The description of the rule.
     * 
     */
    public Optional<Output<String>> ruleDesc() {
        return Optional.ofNullable(this.ruleDesc);
    }

    /**
     * The name of the rule.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return The name of the rule.
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * The type of the rule. Valid values:
     * 
     */
    @Import(name="ruleType")
    private @Nullable Output<String> ruleType;

    /**
     * @return The type of the rule. Valid values:
     * 
     */
    public Optional<Output<String>> ruleType() {
        return Optional.ofNullable(this.ruleType);
    }

    private AutoGroupingRuleState() {}

    private AutoGroupingRuleState(AutoGroupingRuleState $) {
        this.excludeRegionIdsScope = $.excludeRegionIdsScope;
        this.excludeResourceGroupIdsScope = $.excludeResourceGroupIdsScope;
        this.excludeResourceIdsScope = $.excludeResourceIdsScope;
        this.excludeResourceTypesScope = $.excludeResourceTypesScope;
        this.regionIdsScope = $.regionIdsScope;
        this.resourceGroupIdsScope = $.resourceGroupIdsScope;
        this.resourceIdsScope = $.resourceIdsScope;
        this.resourceTypesScope = $.resourceTypesScope;
        this.ruleContents = $.ruleContents;
        this.ruleDesc = $.ruleDesc;
        this.ruleName = $.ruleName;
        this.ruleType = $.ruleType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoGroupingRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoGroupingRuleState $;

        public Builder() {
            $ = new AutoGroupingRuleState();
        }

        public Builder(AutoGroupingRuleState defaults) {
            $ = new AutoGroupingRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludeRegionIdsScope The IDs of regions to be excluded. Separate multiple IDs with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder excludeRegionIdsScope(@Nullable Output<String> excludeRegionIdsScope) {
            $.excludeRegionIdsScope = excludeRegionIdsScope;
            return this;
        }

        /**
         * @param excludeRegionIdsScope The IDs of regions to be excluded. Separate multiple IDs with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder excludeRegionIdsScope(String excludeRegionIdsScope) {
            return excludeRegionIdsScope(Output.of(excludeRegionIdsScope));
        }

        /**
         * @param excludeResourceGroupIdsScope The IDs of resource groups to be excluded. Separate multiple IDs with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder excludeResourceGroupIdsScope(@Nullable Output<String> excludeResourceGroupIdsScope) {
            $.excludeResourceGroupIdsScope = excludeResourceGroupIdsScope;
            return this;
        }

        /**
         * @param excludeResourceGroupIdsScope The IDs of resource groups to be excluded. Separate multiple IDs with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder excludeResourceGroupIdsScope(String excludeResourceGroupIdsScope) {
            return excludeResourceGroupIdsScope(Output.of(excludeResourceGroupIdsScope));
        }

        /**
         * @param excludeResourceIdsScope The IDs of resources to be excluded. Separate multiple IDs with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder excludeResourceIdsScope(@Nullable Output<String> excludeResourceIdsScope) {
            $.excludeResourceIdsScope = excludeResourceIdsScope;
            return this;
        }

        /**
         * @param excludeResourceIdsScope The IDs of resources to be excluded. Separate multiple IDs with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder excludeResourceIdsScope(String excludeResourceIdsScope) {
            return excludeResourceIdsScope(Output.of(excludeResourceIdsScope));
        }

        /**
         * @param excludeResourceTypesScope The resource types to be excluded. Separate multiple resource types with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder excludeResourceTypesScope(@Nullable Output<String> excludeResourceTypesScope) {
            $.excludeResourceTypesScope = excludeResourceTypesScope;
            return this;
        }

        /**
         * @param excludeResourceTypesScope The resource types to be excluded. Separate multiple resource types with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder excludeResourceTypesScope(String excludeResourceTypesScope) {
            return excludeResourceTypesScope(Output.of(excludeResourceTypesScope));
        }

        /**
         * @param regionIdsScope The IDs of regions. Separate multiple IDs with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder regionIdsScope(@Nullable Output<String> regionIdsScope) {
            $.regionIdsScope = regionIdsScope;
            return this;
        }

        /**
         * @param regionIdsScope The IDs of regions. Separate multiple IDs with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder regionIdsScope(String regionIdsScope) {
            return regionIdsScope(Output.of(regionIdsScope));
        }

        /**
         * @param resourceGroupIdsScope The IDs of resource groups. Separate multiple IDs with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupIdsScope(@Nullable Output<String> resourceGroupIdsScope) {
            $.resourceGroupIdsScope = resourceGroupIdsScope;
            return this;
        }

        /**
         * @param resourceGroupIdsScope The IDs of resource groups. Separate multiple IDs with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupIdsScope(String resourceGroupIdsScope) {
            return resourceGroupIdsScope(Output.of(resourceGroupIdsScope));
        }

        /**
         * @param resourceIdsScope The IDs of resources. Separate multiple IDs with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder resourceIdsScope(@Nullable Output<String> resourceIdsScope) {
            $.resourceIdsScope = resourceIdsScope;
            return this;
        }

        /**
         * @param resourceIdsScope The IDs of resources. Separate multiple IDs with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder resourceIdsScope(String resourceIdsScope) {
            return resourceIdsScope(Output.of(resourceIdsScope));
        }

        /**
         * @param resourceTypesScope The resource types. Separate multiple resource types with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder resourceTypesScope(@Nullable Output<String> resourceTypesScope) {
            $.resourceTypesScope = resourceTypesScope;
            return this;
        }

        /**
         * @param resourceTypesScope The resource types. Separate multiple resource types with commas (,).
         * 
         * @return builder
         * 
         */
        public Builder resourceTypesScope(String resourceTypesScope) {
            return resourceTypesScope(Output.of(resourceTypesScope));
        }

        /**
         * @param ruleContents The content records of the rule. See `rule_contents` below.
         * 
         * @return builder
         * 
         */
        public Builder ruleContents(@Nullable Output<List<AutoGroupingRuleRuleContentArgs>> ruleContents) {
            $.ruleContents = ruleContents;
            return this;
        }

        /**
         * @param ruleContents The content records of the rule. See `rule_contents` below.
         * 
         * @return builder
         * 
         */
        public Builder ruleContents(List<AutoGroupingRuleRuleContentArgs> ruleContents) {
            return ruleContents(Output.of(ruleContents));
        }

        /**
         * @param ruleContents The content records of the rule. See `rule_contents` below.
         * 
         * @return builder
         * 
         */
        public Builder ruleContents(AutoGroupingRuleRuleContentArgs... ruleContents) {
            return ruleContents(List.of(ruleContents));
        }

        /**
         * @param ruleDesc The description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleDesc(@Nullable Output<String> ruleDesc) {
            $.ruleDesc = ruleDesc;
            return this;
        }

        /**
         * @param ruleDesc The description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleDesc(String ruleDesc) {
            return ruleDesc(Output.of(ruleDesc));
        }

        /**
         * @param ruleName The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param ruleType The type of the rule. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder ruleType(@Nullable Output<String> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param ruleType The type of the rule. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder ruleType(String ruleType) {
            return ruleType(Output.of(ruleType));
        }

        public AutoGroupingRuleState build() {
            return $;
        }
    }

}
