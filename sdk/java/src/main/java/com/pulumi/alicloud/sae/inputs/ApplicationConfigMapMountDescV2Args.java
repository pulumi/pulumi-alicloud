// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sae.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationConfigMapMountDescV2Args extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationConfigMapMountDescV2Args Empty = new ApplicationConfigMapMountDescV2Args();

    /**
     * The ID of the ConfigMap.
     * 
     */
    @Import(name="configMapId")
    private @Nullable Output<String> configMapId;

    /**
     * @return The ID of the ConfigMap.
     * 
     */
    public Optional<Output<String>> configMapId() {
        return Optional.ofNullable(this.configMapId);
    }

    /**
     * The key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The path of the container in SAE.
     * 
     */
    @Import(name="mountPath")
    private @Nullable Output<String> mountPath;

    /**
     * @return The path of the container in SAE.
     * 
     */
    public Optional<Output<String>> mountPath() {
        return Optional.ofNullable(this.mountPath);
    }

    private ApplicationConfigMapMountDescV2Args() {}

    private ApplicationConfigMapMountDescV2Args(ApplicationConfigMapMountDescV2Args $) {
        this.configMapId = $.configMapId;
        this.key = $.key;
        this.mountPath = $.mountPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationConfigMapMountDescV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationConfigMapMountDescV2Args $;

        public Builder() {
            $ = new ApplicationConfigMapMountDescV2Args();
        }

        public Builder(ApplicationConfigMapMountDescV2Args defaults) {
            $ = new ApplicationConfigMapMountDescV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param configMapId The ID of the ConfigMap.
         * 
         * @return builder
         * 
         */
        public Builder configMapId(@Nullable Output<String> configMapId) {
            $.configMapId = configMapId;
            return this;
        }

        /**
         * @param configMapId The ID of the ConfigMap.
         * 
         * @return builder
         * 
         */
        public Builder configMapId(String configMapId) {
            return configMapId(Output.of(configMapId));
        }

        /**
         * @param key The key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param mountPath The path of the container in SAE.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(@Nullable Output<String> mountPath) {
            $.mountPath = mountPath;
            return this;
        }

        /**
         * @param mountPath The path of the container in SAE.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(String mountPath) {
            return mountPath(Output.of(mountPath));
        }

        public ApplicationConfigMapMountDescV2Args build() {
            return $;
        }
    }

}
