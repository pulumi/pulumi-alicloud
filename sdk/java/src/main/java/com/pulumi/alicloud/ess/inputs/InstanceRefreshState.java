// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.inputs;

import com.pulumi.alicloud.ess.inputs.InstanceRefreshCheckpointArgs;
import com.pulumi.alicloud.ess.inputs.InstanceRefreshDesiredConfigurationContainerArgs;
import com.pulumi.alicloud.ess.inputs.InstanceRefreshDesiredConfigurationLaunchTemplateOverrideArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceRefreshState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceRefreshState Empty = new InstanceRefreshState();

    /**
     * The duration of the pause when the task reaches a checkpoint. Unit: minutes.
     * 
     */
    @Import(name="checkpointPauseTime")
    private @Nullable Output<Integer> checkpointPauseTime;

    /**
     * @return The duration of the pause when the task reaches a checkpoint. Unit: minutes.
     * 
     */
    public Optional<Output<Integer>> checkpointPauseTime() {
        return Optional.ofNullable(this.checkpointPauseTime);
    }

    /**
     * The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `checkpoints` below for details.
     * 
     */
    @Import(name="checkpoints")
    private @Nullable Output<List<InstanceRefreshCheckpointArgs>> checkpoints;

    /**
     * @return The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `checkpoints` below for details.
     * 
     */
    public Optional<Output<List<InstanceRefreshCheckpointArgs>>> checkpoints() {
        return Optional.ofNullable(this.checkpoints);
    }

    /**
     * The list of containers in the instance. See `desiredConfigurationContainers` below for details.
     * 
     */
    @Import(name="desiredConfigurationContainers")
    private @Nullable Output<List<InstanceRefreshDesiredConfigurationContainerArgs>> desiredConfigurationContainers;

    /**
     * @return The list of containers in the instance. See `desiredConfigurationContainers` below for details.
     * 
     */
    public Optional<Output<List<InstanceRefreshDesiredConfigurationContainerArgs>>> desiredConfigurationContainers() {
        return Optional.ofNullable(this.desiredConfigurationContainers);
    }

    /**
     * The ID of the image file. This is the image resource used for automatic instance creation.
     * 
     */
    @Import(name="desiredConfigurationImageId")
    private @Nullable Output<String> desiredConfigurationImageId;

    /**
     * @return The ID of the image file. This is the image resource used for automatic instance creation.
     * 
     */
    public Optional<Output<String>> desiredConfigurationImageId() {
        return Optional.ofNullable(this.desiredConfigurationImageId);
    }

    /**
     * The ID of the launch template. The scaling group uses this template to obtain launch configuration information.
     * 
     */
    @Import(name="desiredConfigurationLaunchTemplateId")
    private @Nullable Output<String> desiredConfigurationLaunchTemplateId;

    /**
     * @return The ID of the launch template. The scaling group uses this template to obtain launch configuration information.
     * 
     */
    public Optional<Output<String>> desiredConfigurationLaunchTemplateId() {
        return Optional.ofNullable(this.desiredConfigurationLaunchTemplateId);
    }

    /**
     * The instance type information in the launch template overrides. See `desiredConfigurationLaunchTemplateOverrides` below for details.
     * 
     */
    @Import(name="desiredConfigurationLaunchTemplateOverrides")
    private @Nullable Output<List<InstanceRefreshDesiredConfigurationLaunchTemplateOverrideArgs>> desiredConfigurationLaunchTemplateOverrides;

    /**
     * @return The instance type information in the launch template overrides. See `desiredConfigurationLaunchTemplateOverrides` below for details.
     * 
     */
    public Optional<Output<List<InstanceRefreshDesiredConfigurationLaunchTemplateOverrideArgs>>> desiredConfigurationLaunchTemplateOverrides() {
        return Optional.ofNullable(this.desiredConfigurationLaunchTemplateOverrides);
    }

    /**
     * The version of the launch template.
     * 
     */
    @Import(name="desiredConfigurationLaunchTemplateVersion")
    private @Nullable Output<String> desiredConfigurationLaunchTemplateVersion;

    /**
     * @return The version of the launch template.
     * 
     */
    public Optional<Output<String>> desiredConfigurationLaunchTemplateVersion() {
        return Optional.ofNullable(this.desiredConfigurationLaunchTemplateVersion);
    }

    /**
     * The percentage by which the number of instances in the scaling group can exceed the group&#39;s capacity during the instance refresh.
     * 
     */
    @Import(name="maxHealthyPercentage")
    private @Nullable Output<Integer> maxHealthyPercentage;

    /**
     * @return The percentage by which the number of instances in the scaling group can exceed the group&#39;s capacity during the instance refresh.
     * 
     */
    public Optional<Output<Integer>> maxHealthyPercentage() {
        return Optional.ofNullable(this.maxHealthyPercentage);
    }

    /**
     * The percentage of instances that must be healthy in the scaling group during the instance refresh. The value is a percentage of the scaling group&#39;s capacity.
     * 
     */
    @Import(name="minHealthyPercentage")
    private @Nullable Output<Integer> minHealthyPercentage;

    /**
     * @return The percentage of instances that must be healthy in the scaling group during the instance refresh. The value is a percentage of the scaling group&#39;s capacity.
     * 
     */
    public Optional<Output<Integer>> minHealthyPercentage() {
        return Optional.ofNullable(this.minHealthyPercentage);
    }

    /**
     * The ID of the scaling group.
     * 
     */
    @Import(name="scalingGroupId")
    private @Nullable Output<String> scalingGroupId;

    /**
     * @return The ID of the scaling group.
     * 
     */
    public Optional<Output<String>> scalingGroupId() {
        return Optional.ofNullable(this.scalingGroupId);
    }

    /**
     * Indicates whether to skip instances that match the desired configuration.
     * 
     */
    @Import(name="skipMatching")
    private @Nullable Output<Boolean> skipMatching;

    /**
     * @return Indicates whether to skip instances that match the desired configuration.
     * 
     */
    public Optional<Output<Boolean>> skipMatching() {
        return Optional.ofNullable(this.skipMatching);
    }

    /**
     * The current status of the instance refresh task. Possible values:
     * - Pending: The instance refresh task is created and waiting to be scheduled.
     * - InProgress: The instance refresh task is in progress.
     * - Paused: The instance refresh task is paused.
     * - CheckpointPause: The task is paused because it has reached a checkpoint (Checkpoint.Percentage).
     * - Failed: The instance refresh task failed.
     * - Successful: The instance refresh task was successful.
     * - Cancelling: The instance refresh task is being canceled.
     * - RollbackInProgress: The instance refresh task is being rolled back.
     * - RollbackSuccessful: The instance refresh task was rolled back successfully. Set RollbackSuccessful to rollback the instance refresh task.
     * - RollbackFailed: The rollback of the instance refresh task failed.
     * - Cancelled:  The instance refresh task is canceled. Set Cancelled to cancel the instance refresh task.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The current status of the instance refresh task. Possible values:
     * - Pending: The instance refresh task is created and waiting to be scheduled.
     * - InProgress: The instance refresh task is in progress.
     * - Paused: The instance refresh task is paused.
     * - CheckpointPause: The task is paused because it has reached a checkpoint (Checkpoint.Percentage).
     * - Failed: The instance refresh task failed.
     * - Successful: The instance refresh task was successful.
     * - Cancelling: The instance refresh task is being canceled.
     * - RollbackInProgress: The instance refresh task is being rolled back.
     * - RollbackSuccessful: The instance refresh task was rolled back successfully. Set RollbackSuccessful to rollback the instance refresh task.
     * - RollbackFailed: The rollback of the instance refresh task failed.
     * - Cancelled:  The instance refresh task is canceled. Set Cancelled to cancel the instance refresh task.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private InstanceRefreshState() {}

    private InstanceRefreshState(InstanceRefreshState $) {
        this.checkpointPauseTime = $.checkpointPauseTime;
        this.checkpoints = $.checkpoints;
        this.desiredConfigurationContainers = $.desiredConfigurationContainers;
        this.desiredConfigurationImageId = $.desiredConfigurationImageId;
        this.desiredConfigurationLaunchTemplateId = $.desiredConfigurationLaunchTemplateId;
        this.desiredConfigurationLaunchTemplateOverrides = $.desiredConfigurationLaunchTemplateOverrides;
        this.desiredConfigurationLaunchTemplateVersion = $.desiredConfigurationLaunchTemplateVersion;
        this.maxHealthyPercentage = $.maxHealthyPercentage;
        this.minHealthyPercentage = $.minHealthyPercentage;
        this.scalingGroupId = $.scalingGroupId;
        this.skipMatching = $.skipMatching;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceRefreshState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceRefreshState $;

        public Builder() {
            $ = new InstanceRefreshState();
        }

        public Builder(InstanceRefreshState defaults) {
            $ = new InstanceRefreshState(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkpointPauseTime The duration of the pause when the task reaches a checkpoint. Unit: minutes.
         * 
         * @return builder
         * 
         */
        public Builder checkpointPauseTime(@Nullable Output<Integer> checkpointPauseTime) {
            $.checkpointPauseTime = checkpointPauseTime;
            return this;
        }

        /**
         * @param checkpointPauseTime The duration of the pause when the task reaches a checkpoint. Unit: minutes.
         * 
         * @return builder
         * 
         */
        public Builder checkpointPauseTime(Integer checkpointPauseTime) {
            return checkpointPauseTime(Output.of(checkpointPauseTime));
        }

        /**
         * @param checkpoints The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `checkpoints` below for details.
         * 
         * @return builder
         * 
         */
        public Builder checkpoints(@Nullable Output<List<InstanceRefreshCheckpointArgs>> checkpoints) {
            $.checkpoints = checkpoints;
            return this;
        }

        /**
         * @param checkpoints The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `checkpoints` below for details.
         * 
         * @return builder
         * 
         */
        public Builder checkpoints(List<InstanceRefreshCheckpointArgs> checkpoints) {
            return checkpoints(Output.of(checkpoints));
        }

        /**
         * @param checkpoints The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `checkpoints` below for details.
         * 
         * @return builder
         * 
         */
        public Builder checkpoints(InstanceRefreshCheckpointArgs... checkpoints) {
            return checkpoints(List.of(checkpoints));
        }

        /**
         * @param desiredConfigurationContainers The list of containers in the instance. See `desiredConfigurationContainers` below for details.
         * 
         * @return builder
         * 
         */
        public Builder desiredConfigurationContainers(@Nullable Output<List<InstanceRefreshDesiredConfigurationContainerArgs>> desiredConfigurationContainers) {
            $.desiredConfigurationContainers = desiredConfigurationContainers;
            return this;
        }

        /**
         * @param desiredConfigurationContainers The list of containers in the instance. See `desiredConfigurationContainers` below for details.
         * 
         * @return builder
         * 
         */
        public Builder desiredConfigurationContainers(List<InstanceRefreshDesiredConfigurationContainerArgs> desiredConfigurationContainers) {
            return desiredConfigurationContainers(Output.of(desiredConfigurationContainers));
        }

        /**
         * @param desiredConfigurationContainers The list of containers in the instance. See `desiredConfigurationContainers` below for details.
         * 
         * @return builder
         * 
         */
        public Builder desiredConfigurationContainers(InstanceRefreshDesiredConfigurationContainerArgs... desiredConfigurationContainers) {
            return desiredConfigurationContainers(List.of(desiredConfigurationContainers));
        }

        /**
         * @param desiredConfigurationImageId The ID of the image file. This is the image resource used for automatic instance creation.
         * 
         * @return builder
         * 
         */
        public Builder desiredConfigurationImageId(@Nullable Output<String> desiredConfigurationImageId) {
            $.desiredConfigurationImageId = desiredConfigurationImageId;
            return this;
        }

        /**
         * @param desiredConfigurationImageId The ID of the image file. This is the image resource used for automatic instance creation.
         * 
         * @return builder
         * 
         */
        public Builder desiredConfigurationImageId(String desiredConfigurationImageId) {
            return desiredConfigurationImageId(Output.of(desiredConfigurationImageId));
        }

        /**
         * @param desiredConfigurationLaunchTemplateId The ID of the launch template. The scaling group uses this template to obtain launch configuration information.
         * 
         * @return builder
         * 
         */
        public Builder desiredConfigurationLaunchTemplateId(@Nullable Output<String> desiredConfigurationLaunchTemplateId) {
            $.desiredConfigurationLaunchTemplateId = desiredConfigurationLaunchTemplateId;
            return this;
        }

        /**
         * @param desiredConfigurationLaunchTemplateId The ID of the launch template. The scaling group uses this template to obtain launch configuration information.
         * 
         * @return builder
         * 
         */
        public Builder desiredConfigurationLaunchTemplateId(String desiredConfigurationLaunchTemplateId) {
            return desiredConfigurationLaunchTemplateId(Output.of(desiredConfigurationLaunchTemplateId));
        }

        /**
         * @param desiredConfigurationLaunchTemplateOverrides The instance type information in the launch template overrides. See `desiredConfigurationLaunchTemplateOverrides` below for details.
         * 
         * @return builder
         * 
         */
        public Builder desiredConfigurationLaunchTemplateOverrides(@Nullable Output<List<InstanceRefreshDesiredConfigurationLaunchTemplateOverrideArgs>> desiredConfigurationLaunchTemplateOverrides) {
            $.desiredConfigurationLaunchTemplateOverrides = desiredConfigurationLaunchTemplateOverrides;
            return this;
        }

        /**
         * @param desiredConfigurationLaunchTemplateOverrides The instance type information in the launch template overrides. See `desiredConfigurationLaunchTemplateOverrides` below for details.
         * 
         * @return builder
         * 
         */
        public Builder desiredConfigurationLaunchTemplateOverrides(List<InstanceRefreshDesiredConfigurationLaunchTemplateOverrideArgs> desiredConfigurationLaunchTemplateOverrides) {
            return desiredConfigurationLaunchTemplateOverrides(Output.of(desiredConfigurationLaunchTemplateOverrides));
        }

        /**
         * @param desiredConfigurationLaunchTemplateOverrides The instance type information in the launch template overrides. See `desiredConfigurationLaunchTemplateOverrides` below for details.
         * 
         * @return builder
         * 
         */
        public Builder desiredConfigurationLaunchTemplateOverrides(InstanceRefreshDesiredConfigurationLaunchTemplateOverrideArgs... desiredConfigurationLaunchTemplateOverrides) {
            return desiredConfigurationLaunchTemplateOverrides(List.of(desiredConfigurationLaunchTemplateOverrides));
        }

        /**
         * @param desiredConfigurationLaunchTemplateVersion The version of the launch template.
         * 
         * @return builder
         * 
         */
        public Builder desiredConfigurationLaunchTemplateVersion(@Nullable Output<String> desiredConfigurationLaunchTemplateVersion) {
            $.desiredConfigurationLaunchTemplateVersion = desiredConfigurationLaunchTemplateVersion;
            return this;
        }

        /**
         * @param desiredConfigurationLaunchTemplateVersion The version of the launch template.
         * 
         * @return builder
         * 
         */
        public Builder desiredConfigurationLaunchTemplateVersion(String desiredConfigurationLaunchTemplateVersion) {
            return desiredConfigurationLaunchTemplateVersion(Output.of(desiredConfigurationLaunchTemplateVersion));
        }

        /**
         * @param maxHealthyPercentage The percentage by which the number of instances in the scaling group can exceed the group&#39;s capacity during the instance refresh.
         * 
         * @return builder
         * 
         */
        public Builder maxHealthyPercentage(@Nullable Output<Integer> maxHealthyPercentage) {
            $.maxHealthyPercentage = maxHealthyPercentage;
            return this;
        }

        /**
         * @param maxHealthyPercentage The percentage by which the number of instances in the scaling group can exceed the group&#39;s capacity during the instance refresh.
         * 
         * @return builder
         * 
         */
        public Builder maxHealthyPercentage(Integer maxHealthyPercentage) {
            return maxHealthyPercentage(Output.of(maxHealthyPercentage));
        }

        /**
         * @param minHealthyPercentage The percentage of instances that must be healthy in the scaling group during the instance refresh. The value is a percentage of the scaling group&#39;s capacity.
         * 
         * @return builder
         * 
         */
        public Builder minHealthyPercentage(@Nullable Output<Integer> minHealthyPercentage) {
            $.minHealthyPercentage = minHealthyPercentage;
            return this;
        }

        /**
         * @param minHealthyPercentage The percentage of instances that must be healthy in the scaling group during the instance refresh. The value is a percentage of the scaling group&#39;s capacity.
         * 
         * @return builder
         * 
         */
        public Builder minHealthyPercentage(Integer minHealthyPercentage) {
            return minHealthyPercentage(Output.of(minHealthyPercentage));
        }

        /**
         * @param scalingGroupId The ID of the scaling group.
         * 
         * @return builder
         * 
         */
        public Builder scalingGroupId(@Nullable Output<String> scalingGroupId) {
            $.scalingGroupId = scalingGroupId;
            return this;
        }

        /**
         * @param scalingGroupId The ID of the scaling group.
         * 
         * @return builder
         * 
         */
        public Builder scalingGroupId(String scalingGroupId) {
            return scalingGroupId(Output.of(scalingGroupId));
        }

        /**
         * @param skipMatching Indicates whether to skip instances that match the desired configuration.
         * 
         * @return builder
         * 
         */
        public Builder skipMatching(@Nullable Output<Boolean> skipMatching) {
            $.skipMatching = skipMatching;
            return this;
        }

        /**
         * @param skipMatching Indicates whether to skip instances that match the desired configuration.
         * 
         * @return builder
         * 
         */
        public Builder skipMatching(Boolean skipMatching) {
            return skipMatching(Output.of(skipMatching));
        }

        /**
         * @param status The current status of the instance refresh task. Possible values:
         * - Pending: The instance refresh task is created and waiting to be scheduled.
         * - InProgress: The instance refresh task is in progress.
         * - Paused: The instance refresh task is paused.
         * - CheckpointPause: The task is paused because it has reached a checkpoint (Checkpoint.Percentage).
         * - Failed: The instance refresh task failed.
         * - Successful: The instance refresh task was successful.
         * - Cancelling: The instance refresh task is being canceled.
         * - RollbackInProgress: The instance refresh task is being rolled back.
         * - RollbackSuccessful: The instance refresh task was rolled back successfully. Set RollbackSuccessful to rollback the instance refresh task.
         * - RollbackFailed: The rollback of the instance refresh task failed.
         * - Cancelled:  The instance refresh task is canceled. Set Cancelled to cancel the instance refresh task.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current status of the instance refresh task. Possible values:
         * - Pending: The instance refresh task is created and waiting to be scheduled.
         * - InProgress: The instance refresh task is in progress.
         * - Paused: The instance refresh task is paused.
         * - CheckpointPause: The task is paused because it has reached a checkpoint (Checkpoint.Percentage).
         * - Failed: The instance refresh task failed.
         * - Successful: The instance refresh task was successful.
         * - Cancelling: The instance refresh task is being canceled.
         * - RollbackInProgress: The instance refresh task is being rolled back.
         * - RollbackSuccessful: The instance refresh task was rolled back successfully. Set RollbackSuccessful to rollback the instance refresh task.
         * - RollbackFailed: The rollback of the instance refresh task failed.
         * - Cancelled:  The instance refresh task is canceled. Set Cancelled to cancel the instance refresh task.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public InstanceRefreshState build() {
            return $;
        }
    }

}
