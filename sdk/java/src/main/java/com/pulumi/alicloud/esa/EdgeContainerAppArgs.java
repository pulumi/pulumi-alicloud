// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EdgeContainerAppArgs extends com.pulumi.resources.ResourceArgs {

    public static final EdgeContainerAppArgs Empty = new EdgeContainerAppArgs();

    /**
     * The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
     * 
     */
    @Import(name="edgeContainerAppName", required=true)
    private Output<String> edgeContainerAppName;

    /**
     * @return The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
     * 
     */
    public Output<String> edgeContainerAppName() {
        return this.edgeContainerAppName;
    }

    /**
     * The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
     * 
     */
    @Import(name="healthCheckFailTimes")
    private @Nullable Output<Integer> healthCheckFailTimes;

    /**
     * @return The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
     * 
     */
    public Optional<Output<Integer>> healthCheckFailTimes() {
        return Optional.ofNullable(this.healthCheckFailTimes);
    }

    /**
     * The health check type. By default, this parameter is left empty.
     * 
     * Valid values:
     * 
     */
    @Import(name="healthCheckHost")
    private @Nullable Output<String> healthCheckHost;

    /**
     * @return The health check type. By default, this parameter is left empty.
     * 
     * Valid values:
     * 
     */
    public Optional<Output<String>> healthCheckHost() {
        return Optional.ofNullable(this.healthCheckHost);
    }

    /**
     * The domain name that is used for health checks. This parameter is empty by default.
     * 
     */
    @Import(name="healthCheckHttpCode")
    private @Nullable Output<String> healthCheckHttpCode;

    /**
     * @return The domain name that is used for health checks. This parameter is empty by default.
     * 
     */
    public Optional<Output<String>> healthCheckHttpCode() {
        return Optional.ofNullable(this.healthCheckHttpCode);
    }

    /**
     * The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
     * Valid values: `1` to `100`.
     * Default value: `3`.
     * 
     */
    @Import(name="healthCheckInterval")
    private @Nullable Output<Integer> healthCheckInterval;

    /**
     * @return The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
     * Valid values: `1` to `100`.
     * Default value: `3`.
     * 
     */
    public Optional<Output<Integer>> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }

    /**
     * The HTTP status code returned for a successful health check. Valid values:
     * 
     * - **http\_2xx** (default)
     * - **http\_3xx**
     * 
     */
    @Import(name="healthCheckMethod")
    private @Nullable Output<String> healthCheckMethod;

    /**
     * @return The HTTP status code returned for a successful health check. Valid values:
     * 
     * - **http\_2xx** (default)
     * - **http\_3xx**
     * 
     */
    public Optional<Output<String>> healthCheckMethod() {
        return Optional.ofNullable(this.healthCheckMethod);
    }

    /**
     * The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: &#34;/&#34;.
     * 
     */
    @Import(name="healthCheckPort")
    private @Nullable Output<Integer> healthCheckPort;

    /**
     * @return The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: &#34;/&#34;.
     * 
     */
    public Optional<Output<Integer>> healthCheckPort() {
        return Optional.ofNullable(this.healthCheckPort);
    }

    /**
     * The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
     * 
     */
    @Import(name="healthCheckSuccTimes")
    private @Nullable Output<Integer> healthCheckSuccTimes;

    /**
     * @return The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
     * 
     */
    public Optional<Output<Integer>> healthCheckSuccTimes() {
        return Optional.ofNullable(this.healthCheckSuccTimes);
    }

    /**
     * The port used for health checks. Valid values: 1 to 65535. Default value: 80.
     * 
     */
    @Import(name="healthCheckTimeout")
    private @Nullable Output<Integer> healthCheckTimeout;

    /**
     * @return The port used for health checks. Valid values: 1 to 65535. Default value: 80.
     * 
     */
    public Optional<Output<Integer>> healthCheckTimeout() {
        return Optional.ofNullable(this.healthCheckTimeout);
    }

    /**
     * The remarks. This parameter is empty by default.
     * 
     */
    @Import(name="healthCheckType")
    private @Nullable Output<String> healthCheckType;

    /**
     * @return The remarks. This parameter is empty by default.
     * 
     */
    public Optional<Output<String>> healthCheckType() {
        return Optional.ofNullable(this.healthCheckType);
    }

    /**
     * The HTTP request method for health checks. Valid values:
     * 
     * - `HEAD` (default): requests the headers of the resource.
     * - `GET`: requests the specified resource and returns both the headers and entity body.
     * 
     */
    @Import(name="healthCheckUri")
    private @Nullable Output<String> healthCheckUri;

    /**
     * @return The HTTP request method for health checks. Valid values:
     * 
     * - `HEAD` (default): requests the headers of the resource.
     * - `GET`: requests the specified resource and returns both the headers and entity body.
     * 
     */
    public Optional<Output<String>> healthCheckUri() {
        return Optional.ofNullable(this.healthCheckUri);
    }

    /**
     * The backend port, which is also the service port of the application. Valid values: 1 to 65535.
     * 
     */
    @Import(name="remarks")
    private @Nullable Output<String> remarks;

    /**
     * @return The backend port, which is also the service port of the application. Valid values: 1 to 65535.
     * 
     */
    public Optional<Output<String>> remarks() {
        return Optional.ofNullable(this.remarks);
    }

    /**
     * The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
     * 
     */
    @Import(name="servicePort", required=true)
    private Output<Integer> servicePort;

    /**
     * @return The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
     * 
     */
    public Output<Integer> servicePort() {
        return this.servicePort;
    }

    /**
     * The server port. Valid values: 1 to 65535.
     * 
     */
    @Import(name="targetPort", required=true)
    private Output<Integer> targetPort;

    /**
     * @return The server port. Valid values: 1 to 65535.
     * 
     */
    public Output<Integer> targetPort() {
        return this.targetPort;
    }

    private EdgeContainerAppArgs() {}

    private EdgeContainerAppArgs(EdgeContainerAppArgs $) {
        this.edgeContainerAppName = $.edgeContainerAppName;
        this.healthCheckFailTimes = $.healthCheckFailTimes;
        this.healthCheckHost = $.healthCheckHost;
        this.healthCheckHttpCode = $.healthCheckHttpCode;
        this.healthCheckInterval = $.healthCheckInterval;
        this.healthCheckMethod = $.healthCheckMethod;
        this.healthCheckPort = $.healthCheckPort;
        this.healthCheckSuccTimes = $.healthCheckSuccTimes;
        this.healthCheckTimeout = $.healthCheckTimeout;
        this.healthCheckType = $.healthCheckType;
        this.healthCheckUri = $.healthCheckUri;
        this.remarks = $.remarks;
        this.servicePort = $.servicePort;
        this.targetPort = $.targetPort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EdgeContainerAppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EdgeContainerAppArgs $;

        public Builder() {
            $ = new EdgeContainerAppArgs();
        }

        public Builder(EdgeContainerAppArgs defaults) {
            $ = new EdgeContainerAppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param edgeContainerAppName The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
         * 
         * @return builder
         * 
         */
        public Builder edgeContainerAppName(Output<String> edgeContainerAppName) {
            $.edgeContainerAppName = edgeContainerAppName;
            return this;
        }

        /**
         * @param edgeContainerAppName The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
         * 
         * @return builder
         * 
         */
        public Builder edgeContainerAppName(String edgeContainerAppName) {
            return edgeContainerAppName(Output.of(edgeContainerAppName));
        }

        /**
         * @param healthCheckFailTimes The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckFailTimes(@Nullable Output<Integer> healthCheckFailTimes) {
            $.healthCheckFailTimes = healthCheckFailTimes;
            return this;
        }

        /**
         * @param healthCheckFailTimes The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckFailTimes(Integer healthCheckFailTimes) {
            return healthCheckFailTimes(Output.of(healthCheckFailTimes));
        }

        /**
         * @param healthCheckHost The health check type. By default, this parameter is left empty.
         * 
         * Valid values:
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHost(@Nullable Output<String> healthCheckHost) {
            $.healthCheckHost = healthCheckHost;
            return this;
        }

        /**
         * @param healthCheckHost The health check type. By default, this parameter is left empty.
         * 
         * Valid values:
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHost(String healthCheckHost) {
            return healthCheckHost(Output.of(healthCheckHost));
        }

        /**
         * @param healthCheckHttpCode The domain name that is used for health checks. This parameter is empty by default.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCode(@Nullable Output<String> healthCheckHttpCode) {
            $.healthCheckHttpCode = healthCheckHttpCode;
            return this;
        }

        /**
         * @param healthCheckHttpCode The domain name that is used for health checks. This parameter is empty by default.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCode(String healthCheckHttpCode) {
            return healthCheckHttpCode(Output.of(healthCheckHttpCode));
        }

        /**
         * @param healthCheckInterval The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
         * Valid values: `1` to `100`.
         * Default value: `3`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(@Nullable Output<Integer> healthCheckInterval) {
            $.healthCheckInterval = healthCheckInterval;
            return this;
        }

        /**
         * @param healthCheckInterval The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
         * Valid values: `1` to `100`.
         * Default value: `3`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(Integer healthCheckInterval) {
            return healthCheckInterval(Output.of(healthCheckInterval));
        }

        /**
         * @param healthCheckMethod The HTTP status code returned for a successful health check. Valid values:
         * 
         * - **http\_2xx** (default)
         * - **http\_3xx**
         * 
         * @return builder
         * 
         */
        public Builder healthCheckMethod(@Nullable Output<String> healthCheckMethod) {
            $.healthCheckMethod = healthCheckMethod;
            return this;
        }

        /**
         * @param healthCheckMethod The HTTP status code returned for a successful health check. Valid values:
         * 
         * - **http\_2xx** (default)
         * - **http\_3xx**
         * 
         * @return builder
         * 
         */
        public Builder healthCheckMethod(String healthCheckMethod) {
            return healthCheckMethod(Output.of(healthCheckMethod));
        }

        /**
         * @param healthCheckPort The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: &#34;/&#34;.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPort(@Nullable Output<Integer> healthCheckPort) {
            $.healthCheckPort = healthCheckPort;
            return this;
        }

        /**
         * @param healthCheckPort The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: &#34;/&#34;.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPort(Integer healthCheckPort) {
            return healthCheckPort(Output.of(healthCheckPort));
        }

        /**
         * @param healthCheckSuccTimes The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckSuccTimes(@Nullable Output<Integer> healthCheckSuccTimes) {
            $.healthCheckSuccTimes = healthCheckSuccTimes;
            return this;
        }

        /**
         * @param healthCheckSuccTimes The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckSuccTimes(Integer healthCheckSuccTimes) {
            return healthCheckSuccTimes(Output.of(healthCheckSuccTimes));
        }

        /**
         * @param healthCheckTimeout The port used for health checks. Valid values: 1 to 65535. Default value: 80.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTimeout(@Nullable Output<Integer> healthCheckTimeout) {
            $.healthCheckTimeout = healthCheckTimeout;
            return this;
        }

        /**
         * @param healthCheckTimeout The port used for health checks. Valid values: 1 to 65535. Default value: 80.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTimeout(Integer healthCheckTimeout) {
            return healthCheckTimeout(Output.of(healthCheckTimeout));
        }

        /**
         * @param healthCheckType The remarks. This parameter is empty by default.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckType(@Nullable Output<String> healthCheckType) {
            $.healthCheckType = healthCheckType;
            return this;
        }

        /**
         * @param healthCheckType The remarks. This parameter is empty by default.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckType(String healthCheckType) {
            return healthCheckType(Output.of(healthCheckType));
        }

        /**
         * @param healthCheckUri The HTTP request method for health checks. Valid values:
         * 
         * - `HEAD` (default): requests the headers of the resource.
         * - `GET`: requests the specified resource and returns both the headers and entity body.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckUri(@Nullable Output<String> healthCheckUri) {
            $.healthCheckUri = healthCheckUri;
            return this;
        }

        /**
         * @param healthCheckUri The HTTP request method for health checks. Valid values:
         * 
         * - `HEAD` (default): requests the headers of the resource.
         * - `GET`: requests the specified resource and returns both the headers and entity body.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckUri(String healthCheckUri) {
            return healthCheckUri(Output.of(healthCheckUri));
        }

        /**
         * @param remarks The backend port, which is also the service port of the application. Valid values: 1 to 65535.
         * 
         * @return builder
         * 
         */
        public Builder remarks(@Nullable Output<String> remarks) {
            $.remarks = remarks;
            return this;
        }

        /**
         * @param remarks The backend port, which is also the service port of the application. Valid values: 1 to 65535.
         * 
         * @return builder
         * 
         */
        public Builder remarks(String remarks) {
            return remarks(Output.of(remarks));
        }

        /**
         * @param servicePort The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder servicePort(Output<Integer> servicePort) {
            $.servicePort = servicePort;
            return this;
        }

        /**
         * @param servicePort The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder servicePort(Integer servicePort) {
            return servicePort(Output.of(servicePort));
        }

        /**
         * @param targetPort The server port. Valid values: 1 to 65535.
         * 
         * @return builder
         * 
         */
        public Builder targetPort(Output<Integer> targetPort) {
            $.targetPort = targetPort;
            return this;
        }

        /**
         * @param targetPort The server port. Valid values: 1 to 65535.
         * 
         * @return builder
         * 
         */
        public Builder targetPort(Integer targetPort) {
            return targetPort(Output.of(targetPort));
        }

        public EdgeContainerAppArgs build() {
            if ($.edgeContainerAppName == null) {
                throw new MissingRequiredPropertyException("EdgeContainerAppArgs", "edgeContainerAppName");
            }
            if ($.servicePort == null) {
                throw new MissingRequiredPropertyException("EdgeContainerAppArgs", "servicePort");
            }
            if ($.targetPort == null) {
                throw new MissingRequiredPropertyException("EdgeContainerAppArgs", "targetPort");
            }
            return $;
        }
    }

}
