// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class EnvFeatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvFeatureArgs Empty = new EnvFeatureArgs();

    /**
     * The name of the resource.
     * 
     */
    @Import(name="envFeatureName", required=true)
    private Output<String> envFeatureName;

    /**
     * @return The name of the resource.
     * 
     */
    public Output<String> envFeatureName() {
        return this.envFeatureName;
    }

    /**
     * The first ID of the resource.
     * 
     */
    @Import(name="environmentId", required=true)
    private Output<String> environmentId;

    /**
     * @return The first ID of the resource.
     * 
     */
    public Output<String> environmentId() {
        return this.environmentId;
    }

    /**
     * Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
     * 
     */
    @Import(name="featureVersion", required=true)
    private Output<String> featureVersion;

    /**
     * @return Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
     * 
     */
    public Output<String> featureVersion() {
        return this.featureVersion;
    }

    private EnvFeatureArgs() {}

    private EnvFeatureArgs(EnvFeatureArgs $) {
        this.envFeatureName = $.envFeatureName;
        this.environmentId = $.environmentId;
        this.featureVersion = $.featureVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvFeatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvFeatureArgs $;

        public Builder() {
            $ = new EnvFeatureArgs();
        }

        public Builder(EnvFeatureArgs defaults) {
            $ = new EnvFeatureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param envFeatureName The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder envFeatureName(Output<String> envFeatureName) {
            $.envFeatureName = envFeatureName;
            return this;
        }

        /**
         * @param envFeatureName The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder envFeatureName(String envFeatureName) {
            return envFeatureName(Output.of(envFeatureName));
        }

        /**
         * @param environmentId The first ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId The first ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param featureVersion Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
         * 
         * @return builder
         * 
         */
        public Builder featureVersion(Output<String> featureVersion) {
            $.featureVersion = featureVersion;
            return this;
        }

        /**
         * @param featureVersion Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
         * 
         * @return builder
         * 
         */
        public Builder featureVersion(String featureVersion) {
            return featureVersion(Output.of(featureVersion));
        }

        public EnvFeatureArgs build() {
            if ($.envFeatureName == null) {
                throw new MissingRequiredPropertyException("EnvFeatureArgs", "envFeatureName");
            }
            if ($.environmentId == null) {
                throw new MissingRequiredPropertyException("EnvFeatureArgs", "environmentId");
            }
            if ($.featureVersion == null) {
                throw new MissingRequiredPropertyException("EnvFeatureArgs", "featureVersion");
            }
            return $;
        }
    }

}
