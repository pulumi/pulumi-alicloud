// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ddos.inputs;

import com.pulumi.alicloud.ddos.inputs.BgpPolicyContentFingerPrintRuleListArgs;
import com.pulumi.alicloud.ddos.inputs.BgpPolicyContentLayer4RuleListArgs;
import com.pulumi.alicloud.ddos.inputs.BgpPolicyContentPortRuleListArgs;
import com.pulumi.alicloud.ddos.inputs.BgpPolicyContentSourceBlockListArgs;
import com.pulumi.alicloud.ddos.inputs.BgpPolicyContentSourceLimitArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BgpPolicyContentArgs extends com.pulumi.resources.ResourceArgs {

    public static final BgpPolicyContentArgs Empty = new BgpPolicyContentArgs();

    /**
     * Blacklist and whitelist timeout.
     * 
     */
    @Import(name="blackIpListExpireAt")
    private @Nullable Output<Integer> blackIpListExpireAt;

    /**
     * @return Blacklist and whitelist timeout.
     * 
     */
    public Optional<Output<Integer>> blackIpListExpireAt() {
        return Optional.ofNullable(this.blackIpListExpireAt);
    }

    /**
     * Whether to enable L4 protection.
     * 
     */
    @Import(name="enableDefense")
    private @Nullable Output<Boolean> enableDefense;

    /**
     * @return Whether to enable L4 protection.
     * 
     */
    public Optional<Output<Boolean>> enableDefense() {
        return Optional.ofNullable(this.enableDefense);
    }

    /**
     * Switch to discard ICMP.
     * 
     */
    @Import(name="enableDropIcmp")
    private @Nullable Output<Boolean> enableDropIcmp;

    /**
     * @return Switch to discard ICMP.
     * 
     */
    public Optional<Output<Boolean>> enableDropIcmp() {
        return Optional.ofNullable(this.enableDropIcmp);
    }

    /**
     * Whether the intelligent switch is on.
     * 
     */
    @Import(name="enableIntelligence")
    private @Nullable Output<Boolean> enableIntelligence;

    /**
     * @return Whether the intelligent switch is on.
     * 
     */
    public Optional<Output<Boolean>> enableIntelligence() {
        return Optional.ofNullable(this.enableIntelligence);
    }

    /**
     * Fingerprint Rules. See `finger_print_rule_list` below.
     * 
     */
    @Import(name="fingerPrintRuleLists")
    private @Nullable Output<List<BgpPolicyContentFingerPrintRuleListArgs>> fingerPrintRuleLists;

    /**
     * @return Fingerprint Rules. See `finger_print_rule_list` below.
     * 
     */
    public Optional<Output<List<BgpPolicyContentFingerPrintRuleListArgs>>> fingerPrintRuleLists() {
        return Optional.ofNullable(this.fingerPrintRuleLists);
    }

    /**
     * Smart mode. Valid values: weak, hard, and default.
     * 
     */
    @Import(name="intelligenceLevel")
    private @Nullable Output<String> intelligenceLevel;

    /**
     * @return Smart mode. Valid values: weak, hard, and default.
     * 
     */
    public Optional<Output<String>> intelligenceLevel() {
        return Optional.ofNullable(this.intelligenceLevel);
    }

    /**
     * L4 protection rules. See `layer4_rule_list` below.
     * 
     */
    @Import(name="layer4RuleLists")
    private @Nullable Output<List<BgpPolicyContentLayer4RuleListArgs>> layer4RuleLists;

    /**
     * @return L4 protection rules. See `layer4_rule_list` below.
     * 
     */
    public Optional<Output<List<BgpPolicyContentLayer4RuleListArgs>>> layer4RuleLists() {
        return Optional.ofNullable(this.layer4RuleLists);
    }

    /**
     * Port Rule List. See `port_rule_list` below.
     * 
     */
    @Import(name="portRuleLists")
    private @Nullable Output<List<BgpPolicyContentPortRuleListArgs>> portRuleLists;

    /**
     * @return Port Rule List. See `port_rule_list` below.
     * 
     */
    public Optional<Output<List<BgpPolicyContentPortRuleListArgs>>> portRuleLists() {
        return Optional.ofNullable(this.portRuleLists);
    }

    /**
     * Reflective port filtering.
     * 
     */
    @Import(name="reflectBlockUdpPortLists")
    private @Nullable Output<List<Integer>> reflectBlockUdpPortLists;

    /**
     * @return Reflective port filtering.
     * 
     */
    public Optional<Output<List<Integer>>> reflectBlockUdpPortLists() {
        return Optional.ofNullable(this.reflectBlockUdpPortLists);
    }

    /**
     * List of Regional Banned Countries.
     * 
     */
    @Import(name="regionBlockCountryLists")
    private @Nullable Output<List<Integer>> regionBlockCountryLists;

    /**
     * @return List of Regional Banned Countries.
     * 
     */
    public Optional<Output<List<Integer>>> regionBlockCountryLists() {
        return Optional.ofNullable(this.regionBlockCountryLists);
    }

    /**
     * List of Prohibited Provinces by Region.
     * 
     */
    @Import(name="regionBlockProvinceLists")
    private @Nullable Output<List<Integer>> regionBlockProvinceLists;

    /**
     * @return List of Prohibited Provinces by Region.
     * 
     */
    public Optional<Output<List<Integer>>> regionBlockProvinceLists() {
        return Optional.ofNullable(this.regionBlockProvinceLists);
    }

    /**
     * Source pull Black. See `source_block_list` below.
     * 
     */
    @Import(name="sourceBlockLists")
    private @Nullable Output<List<BgpPolicyContentSourceBlockListArgs>> sourceBlockLists;

    /**
     * @return Source pull Black. See `source_block_list` below.
     * 
     */
    public Optional<Output<List<BgpPolicyContentSourceBlockListArgs>>> sourceBlockLists() {
        return Optional.ofNullable(this.sourceBlockLists);
    }

    /**
     * Do not fill in when the source speed limit is deleted. See `source_limit` below.
     * 
     */
    @Import(name="sourceLimit")
    private @Nullable Output<BgpPolicyContentSourceLimitArgs> sourceLimit;

    /**
     * @return Do not fill in when the source speed limit is deleted. See `source_limit` below.
     * 
     */
    public Optional<Output<BgpPolicyContentSourceLimitArgs>> sourceLimit() {
        return Optional.ofNullable(this.sourceLimit);
    }

    /**
     * Add white high protection back to source network segment switch.
     * 
     */
    @Import(name="whitenGfbrNets")
    private @Nullable Output<Boolean> whitenGfbrNets;

    /**
     * @return Add white high protection back to source network segment switch.
     * 
     */
    public Optional<Output<Boolean>> whitenGfbrNets() {
        return Optional.ofNullable(this.whitenGfbrNets);
    }

    private BgpPolicyContentArgs() {}

    private BgpPolicyContentArgs(BgpPolicyContentArgs $) {
        this.blackIpListExpireAt = $.blackIpListExpireAt;
        this.enableDefense = $.enableDefense;
        this.enableDropIcmp = $.enableDropIcmp;
        this.enableIntelligence = $.enableIntelligence;
        this.fingerPrintRuleLists = $.fingerPrintRuleLists;
        this.intelligenceLevel = $.intelligenceLevel;
        this.layer4RuleLists = $.layer4RuleLists;
        this.portRuleLists = $.portRuleLists;
        this.reflectBlockUdpPortLists = $.reflectBlockUdpPortLists;
        this.regionBlockCountryLists = $.regionBlockCountryLists;
        this.regionBlockProvinceLists = $.regionBlockProvinceLists;
        this.sourceBlockLists = $.sourceBlockLists;
        this.sourceLimit = $.sourceLimit;
        this.whitenGfbrNets = $.whitenGfbrNets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BgpPolicyContentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BgpPolicyContentArgs $;

        public Builder() {
            $ = new BgpPolicyContentArgs();
        }

        public Builder(BgpPolicyContentArgs defaults) {
            $ = new BgpPolicyContentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blackIpListExpireAt Blacklist and whitelist timeout.
         * 
         * @return builder
         * 
         */
        public Builder blackIpListExpireAt(@Nullable Output<Integer> blackIpListExpireAt) {
            $.blackIpListExpireAt = blackIpListExpireAt;
            return this;
        }

        /**
         * @param blackIpListExpireAt Blacklist and whitelist timeout.
         * 
         * @return builder
         * 
         */
        public Builder blackIpListExpireAt(Integer blackIpListExpireAt) {
            return blackIpListExpireAt(Output.of(blackIpListExpireAt));
        }

        /**
         * @param enableDefense Whether to enable L4 protection.
         * 
         * @return builder
         * 
         */
        public Builder enableDefense(@Nullable Output<Boolean> enableDefense) {
            $.enableDefense = enableDefense;
            return this;
        }

        /**
         * @param enableDefense Whether to enable L4 protection.
         * 
         * @return builder
         * 
         */
        public Builder enableDefense(Boolean enableDefense) {
            return enableDefense(Output.of(enableDefense));
        }

        /**
         * @param enableDropIcmp Switch to discard ICMP.
         * 
         * @return builder
         * 
         */
        public Builder enableDropIcmp(@Nullable Output<Boolean> enableDropIcmp) {
            $.enableDropIcmp = enableDropIcmp;
            return this;
        }

        /**
         * @param enableDropIcmp Switch to discard ICMP.
         * 
         * @return builder
         * 
         */
        public Builder enableDropIcmp(Boolean enableDropIcmp) {
            return enableDropIcmp(Output.of(enableDropIcmp));
        }

        /**
         * @param enableIntelligence Whether the intelligent switch is on.
         * 
         * @return builder
         * 
         */
        public Builder enableIntelligence(@Nullable Output<Boolean> enableIntelligence) {
            $.enableIntelligence = enableIntelligence;
            return this;
        }

        /**
         * @param enableIntelligence Whether the intelligent switch is on.
         * 
         * @return builder
         * 
         */
        public Builder enableIntelligence(Boolean enableIntelligence) {
            return enableIntelligence(Output.of(enableIntelligence));
        }

        /**
         * @param fingerPrintRuleLists Fingerprint Rules. See `finger_print_rule_list` below.
         * 
         * @return builder
         * 
         */
        public Builder fingerPrintRuleLists(@Nullable Output<List<BgpPolicyContentFingerPrintRuleListArgs>> fingerPrintRuleLists) {
            $.fingerPrintRuleLists = fingerPrintRuleLists;
            return this;
        }

        /**
         * @param fingerPrintRuleLists Fingerprint Rules. See `finger_print_rule_list` below.
         * 
         * @return builder
         * 
         */
        public Builder fingerPrintRuleLists(List<BgpPolicyContentFingerPrintRuleListArgs> fingerPrintRuleLists) {
            return fingerPrintRuleLists(Output.of(fingerPrintRuleLists));
        }

        /**
         * @param fingerPrintRuleLists Fingerprint Rules. See `finger_print_rule_list` below.
         * 
         * @return builder
         * 
         */
        public Builder fingerPrintRuleLists(BgpPolicyContentFingerPrintRuleListArgs... fingerPrintRuleLists) {
            return fingerPrintRuleLists(List.of(fingerPrintRuleLists));
        }

        /**
         * @param intelligenceLevel Smart mode. Valid values: weak, hard, and default.
         * 
         * @return builder
         * 
         */
        public Builder intelligenceLevel(@Nullable Output<String> intelligenceLevel) {
            $.intelligenceLevel = intelligenceLevel;
            return this;
        }

        /**
         * @param intelligenceLevel Smart mode. Valid values: weak, hard, and default.
         * 
         * @return builder
         * 
         */
        public Builder intelligenceLevel(String intelligenceLevel) {
            return intelligenceLevel(Output.of(intelligenceLevel));
        }

        /**
         * @param layer4RuleLists L4 protection rules. See `layer4_rule_list` below.
         * 
         * @return builder
         * 
         */
        public Builder layer4RuleLists(@Nullable Output<List<BgpPolicyContentLayer4RuleListArgs>> layer4RuleLists) {
            $.layer4RuleLists = layer4RuleLists;
            return this;
        }

        /**
         * @param layer4RuleLists L4 protection rules. See `layer4_rule_list` below.
         * 
         * @return builder
         * 
         */
        public Builder layer4RuleLists(List<BgpPolicyContentLayer4RuleListArgs> layer4RuleLists) {
            return layer4RuleLists(Output.of(layer4RuleLists));
        }

        /**
         * @param layer4RuleLists L4 protection rules. See `layer4_rule_list` below.
         * 
         * @return builder
         * 
         */
        public Builder layer4RuleLists(BgpPolicyContentLayer4RuleListArgs... layer4RuleLists) {
            return layer4RuleLists(List.of(layer4RuleLists));
        }

        /**
         * @param portRuleLists Port Rule List. See `port_rule_list` below.
         * 
         * @return builder
         * 
         */
        public Builder portRuleLists(@Nullable Output<List<BgpPolicyContentPortRuleListArgs>> portRuleLists) {
            $.portRuleLists = portRuleLists;
            return this;
        }

        /**
         * @param portRuleLists Port Rule List. See `port_rule_list` below.
         * 
         * @return builder
         * 
         */
        public Builder portRuleLists(List<BgpPolicyContentPortRuleListArgs> portRuleLists) {
            return portRuleLists(Output.of(portRuleLists));
        }

        /**
         * @param portRuleLists Port Rule List. See `port_rule_list` below.
         * 
         * @return builder
         * 
         */
        public Builder portRuleLists(BgpPolicyContentPortRuleListArgs... portRuleLists) {
            return portRuleLists(List.of(portRuleLists));
        }

        /**
         * @param reflectBlockUdpPortLists Reflective port filtering.
         * 
         * @return builder
         * 
         */
        public Builder reflectBlockUdpPortLists(@Nullable Output<List<Integer>> reflectBlockUdpPortLists) {
            $.reflectBlockUdpPortLists = reflectBlockUdpPortLists;
            return this;
        }

        /**
         * @param reflectBlockUdpPortLists Reflective port filtering.
         * 
         * @return builder
         * 
         */
        public Builder reflectBlockUdpPortLists(List<Integer> reflectBlockUdpPortLists) {
            return reflectBlockUdpPortLists(Output.of(reflectBlockUdpPortLists));
        }

        /**
         * @param reflectBlockUdpPortLists Reflective port filtering.
         * 
         * @return builder
         * 
         */
        public Builder reflectBlockUdpPortLists(Integer... reflectBlockUdpPortLists) {
            return reflectBlockUdpPortLists(List.of(reflectBlockUdpPortLists));
        }

        /**
         * @param regionBlockCountryLists List of Regional Banned Countries.
         * 
         * @return builder
         * 
         */
        public Builder regionBlockCountryLists(@Nullable Output<List<Integer>> regionBlockCountryLists) {
            $.regionBlockCountryLists = regionBlockCountryLists;
            return this;
        }

        /**
         * @param regionBlockCountryLists List of Regional Banned Countries.
         * 
         * @return builder
         * 
         */
        public Builder regionBlockCountryLists(List<Integer> regionBlockCountryLists) {
            return regionBlockCountryLists(Output.of(regionBlockCountryLists));
        }

        /**
         * @param regionBlockCountryLists List of Regional Banned Countries.
         * 
         * @return builder
         * 
         */
        public Builder regionBlockCountryLists(Integer... regionBlockCountryLists) {
            return regionBlockCountryLists(List.of(regionBlockCountryLists));
        }

        /**
         * @param regionBlockProvinceLists List of Prohibited Provinces by Region.
         * 
         * @return builder
         * 
         */
        public Builder regionBlockProvinceLists(@Nullable Output<List<Integer>> regionBlockProvinceLists) {
            $.regionBlockProvinceLists = regionBlockProvinceLists;
            return this;
        }

        /**
         * @param regionBlockProvinceLists List of Prohibited Provinces by Region.
         * 
         * @return builder
         * 
         */
        public Builder regionBlockProvinceLists(List<Integer> regionBlockProvinceLists) {
            return regionBlockProvinceLists(Output.of(regionBlockProvinceLists));
        }

        /**
         * @param regionBlockProvinceLists List of Prohibited Provinces by Region.
         * 
         * @return builder
         * 
         */
        public Builder regionBlockProvinceLists(Integer... regionBlockProvinceLists) {
            return regionBlockProvinceLists(List.of(regionBlockProvinceLists));
        }

        /**
         * @param sourceBlockLists Source pull Black. See `source_block_list` below.
         * 
         * @return builder
         * 
         */
        public Builder sourceBlockLists(@Nullable Output<List<BgpPolicyContentSourceBlockListArgs>> sourceBlockLists) {
            $.sourceBlockLists = sourceBlockLists;
            return this;
        }

        /**
         * @param sourceBlockLists Source pull Black. See `source_block_list` below.
         * 
         * @return builder
         * 
         */
        public Builder sourceBlockLists(List<BgpPolicyContentSourceBlockListArgs> sourceBlockLists) {
            return sourceBlockLists(Output.of(sourceBlockLists));
        }

        /**
         * @param sourceBlockLists Source pull Black. See `source_block_list` below.
         * 
         * @return builder
         * 
         */
        public Builder sourceBlockLists(BgpPolicyContentSourceBlockListArgs... sourceBlockLists) {
            return sourceBlockLists(List.of(sourceBlockLists));
        }

        /**
         * @param sourceLimit Do not fill in when the source speed limit is deleted. See `source_limit` below.
         * 
         * @return builder
         * 
         */
        public Builder sourceLimit(@Nullable Output<BgpPolicyContentSourceLimitArgs> sourceLimit) {
            $.sourceLimit = sourceLimit;
            return this;
        }

        /**
         * @param sourceLimit Do not fill in when the source speed limit is deleted. See `source_limit` below.
         * 
         * @return builder
         * 
         */
        public Builder sourceLimit(BgpPolicyContentSourceLimitArgs sourceLimit) {
            return sourceLimit(Output.of(sourceLimit));
        }

        /**
         * @param whitenGfbrNets Add white high protection back to source network segment switch.
         * 
         * @return builder
         * 
         */
        public Builder whitenGfbrNets(@Nullable Output<Boolean> whitenGfbrNets) {
            $.whitenGfbrNets = whitenGfbrNets;
            return this;
        }

        /**
         * @param whitenGfbrNets Add white high protection back to source network segment switch.
         * 
         * @return builder
         * 
         */
        public Builder whitenGfbrNets(Boolean whitenGfbrNets) {
            return whitenGfbrNets(Output.of(whitenGfbrNets));
        }

        public BgpPolicyContentArgs build() {
            return $;
        }
    }

}
