// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnterpriseLogicDatabaseState extends com.pulumi.resources.ResourceArgs {

    public static final EnterpriseLogicDatabaseState Empty = new EnterpriseLogicDatabaseState();

    /**
     * Logical Library alias.
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return Logical Library alias.
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * Sub-Database ID
     * 
     */
    @Import(name="databaseIds")
    private @Nullable Output<List<String>> databaseIds;

    /**
     * @return Sub-Database ID
     * 
     */
    public Optional<Output<List<String>>> databaseIds() {
        return Optional.ofNullable(this.databaseIds);
    }

    /**
     * Database type.
     * 
     */
    @Import(name="dbType")
    private @Nullable Output<String> dbType;

    /**
     * @return Database type.
     * 
     */
    public Optional<Output<String>> dbType() {
        return Optional.ofNullable(this.dbType);
    }

    /**
     * Environment type, return value is as follows:-product: production environment-dev: development environment-pre: Advance Environment-test: test environment-sit:SIT environment-uat:UAT environment-pet: Pressure measurement environment-stag:STAG environment
     * 
     */
    @Import(name="envType")
    private @Nullable Output<String> envType;

    /**
     * @return Environment type, return value is as follows:-product: production environment-dev: development environment-pre: Advance Environment-test: test environment-sit:SIT environment-uat:UAT environment-pet: Pressure measurement environment-stag:STAG environment
     * 
     */
    public Optional<Output<String>> envType() {
        return Optional.ofNullable(this.envType);
    }

    /**
     * Whether it is a logical Library, the return value is true.
     * 
     */
    @Import(name="logic")
    private @Nullable Output<Boolean> logic;

    /**
     * @return Whether it is a logical Library, the return value is true.
     * 
     */
    public Optional<Output<Boolean>> logic() {
        return Optional.ofNullable(this.logic);
    }

    /**
     * The ID of the logical Library.
     * 
     */
    @Import(name="logicDatabaseId")
    private @Nullable Output<String> logicDatabaseId;

    /**
     * @return The ID of the logical Library.
     * 
     */
    public Optional<Output<String>> logicDatabaseId() {
        return Optional.ofNullable(this.logicDatabaseId);
    }

    /**
     * The user ID list of the logical library Owner.
     * 
     */
    @Import(name="ownerIdLists")
    private @Nullable Output<List<String>> ownerIdLists;

    /**
     * @return The user ID list of the logical library Owner.
     * 
     */
    public Optional<Output<List<String>>> ownerIdLists() {
        return Optional.ofNullable(this.ownerIdLists);
    }

    /**
     * The nickname list of the logical library Owner.
     * 
     */
    @Import(name="ownerNameLists")
    private @Nullable Output<List<String>> ownerNameLists;

    /**
     * @return The nickname list of the logical library Owner.
     * 
     */
    public Optional<Output<List<String>>> ownerNameLists() {
        return Optional.ofNullable(this.ownerNameLists);
    }

    /**
     * Logical Library name.
     * 
     */
    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    /**
     * @return Logical Library name.
     * 
     */
    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    /**
     * Logical library search name.
     * 
     */
    @Import(name="searchName")
    private @Nullable Output<String> searchName;

    /**
     * @return Logical library search name.
     * 
     */
    public Optional<Output<String>> searchName() {
        return Optional.ofNullable(this.searchName);
    }

    private EnterpriseLogicDatabaseState() {}

    private EnterpriseLogicDatabaseState(EnterpriseLogicDatabaseState $) {
        this.alias = $.alias;
        this.databaseIds = $.databaseIds;
        this.dbType = $.dbType;
        this.envType = $.envType;
        this.logic = $.logic;
        this.logicDatabaseId = $.logicDatabaseId;
        this.ownerIdLists = $.ownerIdLists;
        this.ownerNameLists = $.ownerNameLists;
        this.schemaName = $.schemaName;
        this.searchName = $.searchName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnterpriseLogicDatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnterpriseLogicDatabaseState $;

        public Builder() {
            $ = new EnterpriseLogicDatabaseState();
        }

        public Builder(EnterpriseLogicDatabaseState defaults) {
            $ = new EnterpriseLogicDatabaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alias Logical Library alias.
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias Logical Library alias.
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param databaseIds Sub-Database ID
         * 
         * @return builder
         * 
         */
        public Builder databaseIds(@Nullable Output<List<String>> databaseIds) {
            $.databaseIds = databaseIds;
            return this;
        }

        /**
         * @param databaseIds Sub-Database ID
         * 
         * @return builder
         * 
         */
        public Builder databaseIds(List<String> databaseIds) {
            return databaseIds(Output.of(databaseIds));
        }

        /**
         * @param databaseIds Sub-Database ID
         * 
         * @return builder
         * 
         */
        public Builder databaseIds(String... databaseIds) {
            return databaseIds(List.of(databaseIds));
        }

        /**
         * @param dbType Database type.
         * 
         * @return builder
         * 
         */
        public Builder dbType(@Nullable Output<String> dbType) {
            $.dbType = dbType;
            return this;
        }

        /**
         * @param dbType Database type.
         * 
         * @return builder
         * 
         */
        public Builder dbType(String dbType) {
            return dbType(Output.of(dbType));
        }

        /**
         * @param envType Environment type, return value is as follows:-product: production environment-dev: development environment-pre: Advance Environment-test: test environment-sit:SIT environment-uat:UAT environment-pet: Pressure measurement environment-stag:STAG environment
         * 
         * @return builder
         * 
         */
        public Builder envType(@Nullable Output<String> envType) {
            $.envType = envType;
            return this;
        }

        /**
         * @param envType Environment type, return value is as follows:-product: production environment-dev: development environment-pre: Advance Environment-test: test environment-sit:SIT environment-uat:UAT environment-pet: Pressure measurement environment-stag:STAG environment
         * 
         * @return builder
         * 
         */
        public Builder envType(String envType) {
            return envType(Output.of(envType));
        }

        /**
         * @param logic Whether it is a logical Library, the return value is true.
         * 
         * @return builder
         * 
         */
        public Builder logic(@Nullable Output<Boolean> logic) {
            $.logic = logic;
            return this;
        }

        /**
         * @param logic Whether it is a logical Library, the return value is true.
         * 
         * @return builder
         * 
         */
        public Builder logic(Boolean logic) {
            return logic(Output.of(logic));
        }

        /**
         * @param logicDatabaseId The ID of the logical Library.
         * 
         * @return builder
         * 
         */
        public Builder logicDatabaseId(@Nullable Output<String> logicDatabaseId) {
            $.logicDatabaseId = logicDatabaseId;
            return this;
        }

        /**
         * @param logicDatabaseId The ID of the logical Library.
         * 
         * @return builder
         * 
         */
        public Builder logicDatabaseId(String logicDatabaseId) {
            return logicDatabaseId(Output.of(logicDatabaseId));
        }

        /**
         * @param ownerIdLists The user ID list of the logical library Owner.
         * 
         * @return builder
         * 
         */
        public Builder ownerIdLists(@Nullable Output<List<String>> ownerIdLists) {
            $.ownerIdLists = ownerIdLists;
            return this;
        }

        /**
         * @param ownerIdLists The user ID list of the logical library Owner.
         * 
         * @return builder
         * 
         */
        public Builder ownerIdLists(List<String> ownerIdLists) {
            return ownerIdLists(Output.of(ownerIdLists));
        }

        /**
         * @param ownerIdLists The user ID list of the logical library Owner.
         * 
         * @return builder
         * 
         */
        public Builder ownerIdLists(String... ownerIdLists) {
            return ownerIdLists(List.of(ownerIdLists));
        }

        /**
         * @param ownerNameLists The nickname list of the logical library Owner.
         * 
         * @return builder
         * 
         */
        public Builder ownerNameLists(@Nullable Output<List<String>> ownerNameLists) {
            $.ownerNameLists = ownerNameLists;
            return this;
        }

        /**
         * @param ownerNameLists The nickname list of the logical library Owner.
         * 
         * @return builder
         * 
         */
        public Builder ownerNameLists(List<String> ownerNameLists) {
            return ownerNameLists(Output.of(ownerNameLists));
        }

        /**
         * @param ownerNameLists The nickname list of the logical library Owner.
         * 
         * @return builder
         * 
         */
        public Builder ownerNameLists(String... ownerNameLists) {
            return ownerNameLists(List.of(ownerNameLists));
        }

        /**
         * @param schemaName Logical Library name.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        /**
         * @param schemaName Logical Library name.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        /**
         * @param searchName Logical library search name.
         * 
         * @return builder
         * 
         */
        public Builder searchName(@Nullable Output<String> searchName) {
            $.searchName = searchName;
            return this;
        }

        /**
         * @param searchName Logical library search name.
         * 
         * @return builder
         * 
         */
        public Builder searchName(String searchName) {
            return searchName(Output.of(searchName));
        }

        public EnterpriseLogicDatabaseState build() {
            return $;
        }
    }

}
