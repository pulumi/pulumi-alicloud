// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ddos;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.ddos.DomainResourceArgs;
import com.pulumi.alicloud.ddos.inputs.DomainResourceState;
import com.pulumi.alicloud.ddos.outputs.DomainResourceProxyType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Ddos Coo Domain Resource resource.
 * 
 * For information about Ddos Coo Domain Resource and how to use it, see [What is Domain Resource](https://www.alibabacloud.com/help/en/anti-ddos/anti-ddos-pro-and-premium/developer-reference/api-ddoscoo-2020-01-01-createdomainresource).
 * 
 * &gt; **NOTE:** Available since v1.123.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.ddos.DdosCooInstance;
 * import com.pulumi.alicloud.ddos.DdosCooInstanceArgs;
 * import com.pulumi.alicloud.ddos.DomainResource;
 * import com.pulumi.alicloud.ddos.DomainResourceArgs;
 * import com.pulumi.alicloud.ddos.inputs.DomainResourceProxyTypeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("tf-example");
 *         final var domain = config.get("domain").orElse("tf-example.alibaba.com");
 *         var default_ = new DdosCooInstance("default", DdosCooInstanceArgs.builder()
 *             .name(name)
 *             .bandwidth("30")
 *             .baseBandwidth("30")
 *             .serviceBandwidth("100")
 *             .portCount("50")
 *             .domainCount("50")
 *             .period(1)
 *             .productType("ddoscoo")
 *             .build());
 * 
 *         var defaultDomainResource = new DomainResource("defaultDomainResource", DomainResourceArgs.builder()
 *             .domain(domain)
 *             .rsType(0)
 *             .instanceIds(default_.id())
 *             .realServers("177.167.32.11")
 *             .httpsExt("""
 *     {
 *     \"Http2\": 1,
 *     \"Http2https\": 0,
 *     \"Https2http\": 0
 *   }
 *             """)
 *             .proxyTypes(DomainResourceProxyTypeArgs.builder()
 *                 .proxyPorts(443)
 *                 .proxyType("https")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Ddos Coo Domain Resource can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:ddos/domainResource:DomainResource example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:ddos/domainResource:DomainResource")
public class DomainResource extends com.pulumi.resources.CustomResource {
    /**
     * The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
     * 
     * &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     * 
     */
    @Export(name="cert", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cert;

    /**
     * @return The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
     * 
     * &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     * 
     */
    public Output<Optional<String>> cert() {
        return Codegen.optional(this.cert);
    }
    /**
     * The name of the certificate.
     * 
     * &gt; **NOTE:**   You can specify the name of the certificate that you want to associate. From version 1.249.0, `certIdentifier` is in the &#34;CertificateID-RegionId&#34; format. For example, if the ID of the certificateId is `123`, and the region ID is `cn-hangzhou`, the value of the `certIdentifier` is `123-cn-hangzhou`.
     * 
     */
    @Export(name="certIdentifier", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> certIdentifier;

    /**
     * @return The name of the certificate.
     * 
     * &gt; **NOTE:**   You can specify the name of the certificate that you want to associate. From version 1.249.0, `certIdentifier` is in the &#34;CertificateID-RegionId&#34; format. For example, if the ID of the certificateId is `123`, and the region ID is `cn-hangzhou`, the value of the `certIdentifier` is `123-cn-hangzhou`.
     * 
     */
    public Output<Optional<String>> certIdentifier() {
        return Codegen.optional(this.certIdentifier);
    }
    /**
     * The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
     * 
     * &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     * 
     */
    @Export(name="certName", refs={String.class}, tree="[0]")
    private Output<String> certName;

    /**
     * @return The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
     * 
     * &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     * 
     */
    public Output<String> certName() {
        return this.certName;
    }
    /**
     * The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
     * 
     */
    @Export(name="certRegion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> certRegion;

    /**
     * @return The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
     * 
     */
    public Output<Optional<String>> certRegion() {
        return Codegen.optional(this.certRegion);
    }
    /**
     * The CNAME address to query.
     * 
     */
    @Export(name="cname", refs={String.class}, tree="[0]")
    private Output<String> cname;

    /**
     * @return The CNAME address to query.
     * 
     */
    public Output<String> cname() {
        return this.cname;
    }
    /**
     * The domain name for which you want to configure the Static Page Caching policy.
     * 
     * &gt; **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
     * 
     */
    @Export(name="domain", refs={String.class}, tree="[0]")
    private Output<String> domain;

    /**
     * @return The domain name for which you want to configure the Static Page Caching policy.
     * 
     * &gt; **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }
    /**
     * The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
     * 
     * - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
     * 
     * If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
     * 
     * - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
     * 
     * If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
     * 
     * - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
     * 
     * After you turn on the switch, HTTP/2 is used.
     * 
     */
    @Export(name="httpsExt", refs={String.class}, tree="[0]")
    private Output<String> httpsExt;

    /**
     * @return The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
     * 
     * - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
     * 
     * If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
     * 
     * - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
     * 
     * If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
     * 
     * - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
     * 
     * After you turn on the switch, HTTP/2 is used.
     * 
     */
    public Output<String> httpsExt() {
        return this.httpsExt;
    }
    /**
     * InstanceIds
     * 
     */
    @Export(name="instanceIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> instanceIds;

    /**
     * @return InstanceIds
     * 
     */
    public Output<List<String>> instanceIds() {
        return this.instanceIds;
    }
    /**
     * The globally unique ID of the certificate. The value is in the &#34;Certificate ID-cn-hangzhou&#34; format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
     * 
     * &gt; **NOTE:**   You can specify only one of this parameter and the CertId parameter.
     * 
     */
    @Export(name="key", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> key;

    /**
     * @return The globally unique ID of the certificate. The value is in the &#34;Certificate ID-cn-hangzhou&#34; format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
     * 
     * &gt; **NOTE:**   You can specify only one of this parameter and the CertId parameter.
     * 
     */
    public Output<Optional<String>> key() {
        return Codegen.optional(this.key);
    }
    /**
     * Specifies whether to enable the OCSP feature. Valid values:
     * 
     */
    @Export(name="ocspEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ocspEnabled;

    /**
     * @return Specifies whether to enable the OCSP feature. Valid values:
     * 
     */
    public Output<Optional<Boolean>> ocspEnabled() {
        return Codegen.optional(this.ocspEnabled);
    }
    /**
     * Protocol type and port number information. See `proxyTypes` below.
     * 
     */
    @Export(name="proxyTypes", refs={List.class,DomainResourceProxyType.class}, tree="[0,1]")
    private Output<List<DomainResourceProxyType>> proxyTypes;

    /**
     * @return Protocol type and port number information. See `proxyTypes` below.
     * 
     */
    public Output<List<DomainResourceProxyType>> proxyTypes() {
        return this.proxyTypes;
    }
    /**
     * Server address information of the source station.
     * 
     */
    @Export(name="realServers", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> realServers;

    /**
     * @return Server address information of the source station.
     * 
     */
    public Output<List<String>> realServers() {
        return this.realServers;
    }
    /**
     * The address type of the origin server. Valid values:
     * 
     */
    @Export(name="rsType", refs={Integer.class}, tree="[0]")
    private Output<Integer> rsType;

    /**
     * @return The address type of the origin server. Valid values:
     * 
     */
    public Output<Integer> rsType() {
        return this.rsType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DomainResource(java.lang.String name) {
        this(name, DomainResourceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DomainResource(java.lang.String name, DomainResourceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DomainResource(java.lang.String name, DomainResourceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:ddos/domainResource:DomainResource", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DomainResource(java.lang.String name, Output<java.lang.String> id, @Nullable DomainResourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:ddos/domainResource:DomainResource", name, state, makeResourceOptions(options, id), false);
    }

    private static DomainResourceArgs makeArgs(DomainResourceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DomainResourceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "cert",
                "certRegion",
                "key"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DomainResource get(java.lang.String name, Output<java.lang.String> id, @Nullable DomainResourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DomainResource(name, id, state, options);
    }
}
