// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetForwardEntriesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetForwardEntriesArgs Empty = new GetForwardEntriesArgs();

    /**
     * The public IP address.
     * 
     */
    @Import(name="externalIp")
    private @Nullable Output<String> externalIp;

    /**
     * @return The public IP address.
     * 
     */
    public Optional<Output<String>> externalIp() {
        return Optional.ofNullable(this.externalIp);
    }

    /**
     * The public port.
     * 
     */
    @Import(name="externalPort")
    private @Nullable Output<String> externalPort;

    /**
     * @return The public port.
     * 
     */
    public Optional<Output<String>> externalPort() {
        return Optional.ofNullable(this.externalPort);
    }

    /**
     * The name of forward entry.
     * 
     */
    @Import(name="forwardEntryName")
    private @Nullable Output<String> forwardEntryName;

    /**
     * @return The name of forward entry.
     * 
     */
    public Optional<Output<String>> forwardEntryName() {
        return Optional.ofNullable(this.forwardEntryName);
    }

    /**
     * The ID of the Forward table.
     * 
     */
    @Import(name="forwardTableId", required=true)
    private Output<String> forwardTableId;

    /**
     * @return The ID of the Forward table.
     * 
     */
    public Output<String> forwardTableId() {
        return this.forwardTableId;
    }

    /**
     * A list of Forward Entries IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of Forward Entries IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * The private IP address.
     * 
     */
    @Import(name="internalIp")
    private @Nullable Output<String> internalIp;

    /**
     * @return The private IP address.
     * 
     */
    public Optional<Output<String>> internalIp() {
        return Optional.ofNullable(this.internalIp);
    }

    /**
     * The internal port.
     * 
     */
    @Import(name="internalPort")
    private @Nullable Output<String> internalPort;

    /**
     * @return The internal port.
     * 
     */
    public Optional<Output<String>> internalPort() {
        return Optional.ofNullable(this.internalPort);
    }

    /**
     * The ip protocol. Valid values: `any`,`tcp` and `udp`.
     * 
     */
    @Import(name="ipProtocol")
    private @Nullable Output<String> ipProtocol;

    /**
     * @return The ip protocol. Valid values: `any`,`tcp` and `udp`.
     * 
     */
    public Optional<Output<String>> ipProtocol() {
        return Optional.ofNullable(this.ipProtocol);
    }

    /**
     * A regex string to filter results by forward entry name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable Output<String> nameRegex;

    /**
     * @return A regex string to filter results by forward entry name.
     * 
     */
    public Optional<Output<String>> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The status of farward entry. Valid value `Available`, `Deleting` and `Pending`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of farward entry. Valid value `Available`, `Deleting` and `Pending`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private GetForwardEntriesArgs() {}

    private GetForwardEntriesArgs(GetForwardEntriesArgs $) {
        this.externalIp = $.externalIp;
        this.externalPort = $.externalPort;
        this.forwardEntryName = $.forwardEntryName;
        this.forwardTableId = $.forwardTableId;
        this.ids = $.ids;
        this.internalIp = $.internalIp;
        this.internalPort = $.internalPort;
        this.ipProtocol = $.ipProtocol;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetForwardEntriesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetForwardEntriesArgs $;

        public Builder() {
            $ = new GetForwardEntriesArgs();
        }

        public Builder(GetForwardEntriesArgs defaults) {
            $ = new GetForwardEntriesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalIp The public IP address.
         * 
         * @return builder
         * 
         */
        public Builder externalIp(@Nullable Output<String> externalIp) {
            $.externalIp = externalIp;
            return this;
        }

        /**
         * @param externalIp The public IP address.
         * 
         * @return builder
         * 
         */
        public Builder externalIp(String externalIp) {
            return externalIp(Output.of(externalIp));
        }

        /**
         * @param externalPort The public port.
         * 
         * @return builder
         * 
         */
        public Builder externalPort(@Nullable Output<String> externalPort) {
            $.externalPort = externalPort;
            return this;
        }

        /**
         * @param externalPort The public port.
         * 
         * @return builder
         * 
         */
        public Builder externalPort(String externalPort) {
            return externalPort(Output.of(externalPort));
        }

        /**
         * @param forwardEntryName The name of forward entry.
         * 
         * @return builder
         * 
         */
        public Builder forwardEntryName(@Nullable Output<String> forwardEntryName) {
            $.forwardEntryName = forwardEntryName;
            return this;
        }

        /**
         * @param forwardEntryName The name of forward entry.
         * 
         * @return builder
         * 
         */
        public Builder forwardEntryName(String forwardEntryName) {
            return forwardEntryName(Output.of(forwardEntryName));
        }

        /**
         * @param forwardTableId The ID of the Forward table.
         * 
         * @return builder
         * 
         */
        public Builder forwardTableId(Output<String> forwardTableId) {
            $.forwardTableId = forwardTableId;
            return this;
        }

        /**
         * @param forwardTableId The ID of the Forward table.
         * 
         * @return builder
         * 
         */
        public Builder forwardTableId(String forwardTableId) {
            return forwardTableId(Output.of(forwardTableId));
        }

        /**
         * @param ids A list of Forward Entries IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Forward Entries IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of Forward Entries IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param internalIp The private IP address.
         * 
         * @return builder
         * 
         */
        public Builder internalIp(@Nullable Output<String> internalIp) {
            $.internalIp = internalIp;
            return this;
        }

        /**
         * @param internalIp The private IP address.
         * 
         * @return builder
         * 
         */
        public Builder internalIp(String internalIp) {
            return internalIp(Output.of(internalIp));
        }

        /**
         * @param internalPort The internal port.
         * 
         * @return builder
         * 
         */
        public Builder internalPort(@Nullable Output<String> internalPort) {
            $.internalPort = internalPort;
            return this;
        }

        /**
         * @param internalPort The internal port.
         * 
         * @return builder
         * 
         */
        public Builder internalPort(String internalPort) {
            return internalPort(Output.of(internalPort));
        }

        /**
         * @param ipProtocol The ip protocol. Valid values: `any`,`tcp` and `udp`.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(@Nullable Output<String> ipProtocol) {
            $.ipProtocol = ipProtocol;
            return this;
        }

        /**
         * @param ipProtocol The ip protocol. Valid values: `any`,`tcp` and `udp`.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(String ipProtocol) {
            return ipProtocol(Output.of(ipProtocol));
        }

        /**
         * @param nameRegex A regex string to filter results by forward entry name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable Output<String> nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter results by forward entry name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(String nameRegex) {
            return nameRegex(Output.of(nameRegex));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param status The status of farward entry. Valid value `Available`, `Deleting` and `Pending`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of farward entry. Valid value `Available`, `Deleting` and `Pending`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GetForwardEntriesArgs build() {
            if ($.forwardTableId == null) {
                throw new MissingRequiredPropertyException("GetForwardEntriesArgs", "forwardTableId");
            }
            return $;
        }
    }

}
