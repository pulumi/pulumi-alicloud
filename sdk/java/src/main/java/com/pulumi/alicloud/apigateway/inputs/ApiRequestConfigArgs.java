// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.apigateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiRequestConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiRequestConfigArgs Empty = new ApiRequestConfigArgs();

    /**
     * The body format of the api, which support the values of &#39;STREAM&#39; and &#39;FORM&#39;.
     * 
     */
    @Import(name="bodyFormat")
    private @Nullable Output<String> bodyFormat;

    /**
     * @return The body format of the api, which support the values of &#39;STREAM&#39; and &#39;FORM&#39;.
     * 
     */
    public Optional<Output<String>> bodyFormat() {
        return Optional.ofNullable(this.bodyFormat);
    }

    /**
     * The method of the api, including &#39;GET&#39;,&#39;POST&#39;,&#39;PUT&#39; etc.
     * 
     */
    @Import(name="method", required=true)
    private Output<String> method;

    /**
     * @return The method of the api, including &#39;GET&#39;,&#39;POST&#39;,&#39;PUT&#39; etc.
     * 
     */
    public Output<String> method() {
        return this.method;
    }

    /**
     * The mode of the parameters between request parameters and service parameters, which support the values of &#39;MAPPING&#39; and &#39;PASSTHROUGH&#39;.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return The mode of the parameters between request parameters and service parameters, which support the values of &#39;MAPPING&#39; and &#39;PASSTHROUGH&#39;.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * The request path of the api.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The request path of the api.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * The protocol of api which supports values of &#39;HTTP&#39;,&#39;HTTPS&#39; or &#39;HTTP,HTTPS&#39;.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The protocol of api which supports values of &#39;HTTP&#39;,&#39;HTTPS&#39; or &#39;HTTP,HTTPS&#39;.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    private ApiRequestConfigArgs() {}

    private ApiRequestConfigArgs(ApiRequestConfigArgs $) {
        this.bodyFormat = $.bodyFormat;
        this.method = $.method;
        this.mode = $.mode;
        this.path = $.path;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiRequestConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiRequestConfigArgs $;

        public Builder() {
            $ = new ApiRequestConfigArgs();
        }

        public Builder(ApiRequestConfigArgs defaults) {
            $ = new ApiRequestConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bodyFormat The body format of the api, which support the values of &#39;STREAM&#39; and &#39;FORM&#39;.
         * 
         * @return builder
         * 
         */
        public Builder bodyFormat(@Nullable Output<String> bodyFormat) {
            $.bodyFormat = bodyFormat;
            return this;
        }

        /**
         * @param bodyFormat The body format of the api, which support the values of &#39;STREAM&#39; and &#39;FORM&#39;.
         * 
         * @return builder
         * 
         */
        public Builder bodyFormat(String bodyFormat) {
            return bodyFormat(Output.of(bodyFormat));
        }

        /**
         * @param method The method of the api, including &#39;GET&#39;,&#39;POST&#39;,&#39;PUT&#39; etc.
         * 
         * @return builder
         * 
         */
        public Builder method(Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method The method of the api, including &#39;GET&#39;,&#39;POST&#39;,&#39;PUT&#39; etc.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param mode The mode of the parameters between request parameters and service parameters, which support the values of &#39;MAPPING&#39; and &#39;PASSTHROUGH&#39;.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The mode of the parameters between request parameters and service parameters, which support the values of &#39;MAPPING&#39; and &#39;PASSTHROUGH&#39;.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param path The request path of the api.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The request path of the api.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param protocol The protocol of api which supports values of &#39;HTTP&#39;,&#39;HTTPS&#39; or &#39;HTTP,HTTPS&#39;.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol of api which supports values of &#39;HTTP&#39;,&#39;HTTPS&#39; or &#39;HTTP,HTTPS&#39;.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public ApiRequestConfigArgs build() {
            if ($.method == null) {
                throw new MissingRequiredPropertyException("ApiRequestConfigArgs", "method");
            }
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("ApiRequestConfigArgs", "mode");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("ApiRequestConfigArgs", "path");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("ApiRequestConfigArgs", "protocol");
            }
            return $;
        }
    }

}
