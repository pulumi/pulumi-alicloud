// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.log;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.log.StoreArgs;
import com.pulumi.alicloud.log.inputs.StoreState;
import com.pulumi.alicloud.log.outputs.StoreEncryptConf;
import com.pulumi.alicloud.log.outputs.StoreShard;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * Log store can be imported using the id, e.g.
 * 
 * ```sh
 *  $ pulumi import alicloud:log/store:Store example tf-log:tf-log-store
 * ```
 * 
 */
@ResourceType(type="alicloud:log/store:Store")
public class Store extends com.pulumi.resources.CustomResource {
    /**
     * Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
     * 
     */
    @Export(name="appendMeta", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> appendMeta;

    /**
     * @return Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
     * 
     */
    public Output<Optional<Boolean>> appendMeta() {
        return Codegen.optional(this.appendMeta);
    }
    /**
     * Determines whether to automatically split a shard. Default to `false`.
     * 
     */
    @Export(name="autoSplit", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> autoSplit;

    /**
     * @return Determines whether to automatically split a shard. Default to `false`.
     * 
     */
    public Output<Optional<Boolean>> autoSplit() {
        return Codegen.optional(this.autoSplit);
    }
    /**
     * Determines whether to enable Web Tracking. Default `false`.
     * 
     */
    @Export(name="enableWebTracking", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableWebTracking;

    /**
     * @return Determines whether to enable Web Tracking. Default `false`.
     * 
     */
    public Output<Optional<Boolean>> enableWebTracking() {
        return Codegen.optional(this.enableWebTracking);
    }
    /**
     * Encrypted storage of data, providing data static protection capability, `encrypt_conf` can be updated since 1.188.0+ (only `enable` change is supported when updating logstore)
     * 
     */
    @Export(name="encryptConf", type=StoreEncryptConf.class, parameters={})
    private Output</* @Nullable */ StoreEncryptConf> encryptConf;

    /**
     * @return Encrypted storage of data, providing data static protection capability, `encrypt_conf` can be updated since 1.188.0+ (only `enable` change is supported when updating logstore)
     * 
     */
    public Output<Optional<StoreEncryptConf>> encryptConf() {
        return Codegen.optional(this.encryptConf);
    }
    /**
     * The ttl of hot storage. Default to `30`, at least `30`, hot storage ttl must be less than ttl.
     * 
     */
    @Export(name="hotTtl", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> hotTtl;

    /**
     * @return The ttl of hot storage. Default to `30`, at least `30`, hot storage ttl must be less than ttl.
     * 
     */
    public Output<Optional<Integer>> hotTtl() {
        return Codegen.optional(this.hotTtl);
    }
    /**
     * The maximum number of shards for automatic split, which is in the range of 1 to 64. You must specify this parameter when autoSplit is true.
     * 
     */
    @Export(name="maxSplitShardCount", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> maxSplitShardCount;

    /**
     * @return The maximum number of shards for automatic split, which is in the range of 1 to 64. You must specify this parameter when autoSplit is true.
     * 
     */
    public Output<Optional<Integer>> maxSplitShardCount() {
        return Codegen.optional(this.maxSplitShardCount);
    }
    /**
     * The mode of storage. Default to `standard`, must be `standard` or `query`, `mode` is only valid when creating, can&#39;t be changed after created.
     * 
     */
    @Export(name="mode", type=String.class, parameters={})
    private Output<String> mode;

    /**
     * @return The mode of storage. Default to `standard`, must be `standard` or `query`, `mode` is only valid when creating, can&#39;t be changed after created.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }
    /**
     * The log store, which is unique in the same project.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The log store, which is unique in the same project.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The project name to the log store belongs.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The project name to the log store belongs.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The data retention time (in days). Valid values: [1-3650]. Default to `30`. Log store data will be stored permanently when the value is `3650`.
     * 
     */
    @Export(name="retentionPeriod", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> retentionPeriod;

    /**
     * @return The data retention time (in days). Valid values: [1-3650]. Default to `30`. Log store data will be stored permanently when the value is `3650`.
     * 
     */
    public Output<Optional<Integer>> retentionPeriod() {
        return Codegen.optional(this.retentionPeriod);
    }
    /**
     * The number of shards in this log store. Default to 2. You can modify it by &#34;Split&#34; or &#34;Merge&#34; operations. [Refer to details](https://www.alibabacloud.com/help/doc-detail/28976.htm)
     * 
     */
    @Export(name="shardCount", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> shardCount;

    /**
     * @return The number of shards in this log store. Default to 2. You can modify it by &#34;Split&#34; or &#34;Merge&#34; operations. [Refer to details](https://www.alibabacloud.com/help/doc-detail/28976.htm)
     * 
     */
    public Output<Optional<Integer>> shardCount() {
        return Codegen.optional(this.shardCount);
    }
    /**
     * The shard attribute.
     * 
     */
    @Export(name="shards", type=List.class, parameters={StoreShard.class})
    private Output<List<StoreShard>> shards;

    /**
     * @return The shard attribute.
     * 
     */
    public Output<List<StoreShard>> shards() {
        return this.shards;
    }
    /**
     * Determines whether store type is metric. `Metrics` means metric store, empty means log store.
     * 
     */
    @Export(name="telemetryType", type=String.class, parameters={})
    private Output</* @Nullable */ String> telemetryType;

    /**
     * @return Determines whether store type is metric. `Metrics` means metric store, empty means log store.
     * 
     */
    public Output<Optional<String>> telemetryType() {
        return Codegen.optional(this.telemetryType);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Store(String name) {
        this(name, StoreArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Store(String name, StoreArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Store(String name, StoreArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:log/store:Store", name, args == null ? StoreArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Store(String name, Output<String> id, @Nullable StoreState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:log/store:Store", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Store get(String name, Output<String> id, @Nullable StoreState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Store(name, id, state, options);
    }
}
