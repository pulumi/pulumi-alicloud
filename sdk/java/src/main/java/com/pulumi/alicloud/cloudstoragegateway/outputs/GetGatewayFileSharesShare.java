// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudstoragegateway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGatewayFileSharesShare {
    /**
     * @return The set up gateway file share Server Message Block (SMB) protocol, whether to enable Windows ABE, the prime minister, need windowsAcl parameter is set to true in the entry into force of. Default value: `false`. **NOTE:** Gateway version &gt;= 1.0.45 above support.
     * 
     */
    private Boolean accessBasedEnumeration;
    /**
     * @return Share the private IP address of the RDS instance.
     * 
     */
    private String address;
    /**
     * @return The set up gateway file share Max upload speed. Unit: `MB/s`, `0` means unlimited. Value range: `0` ~ `1280`. Default value: `0`. **NOTE:** at the same time if you have to limit the maximum write speed, maximum upload speed is no less than the maximum write speed.
     * 
     */
    private Integer backendLimit;
    /**
     * @return The set up gateway file share Server Message Block (SMB) protocol whether browsable (that is, in the network neighborhood of whether you can find). The parameters in the NFS protocol not valid under. Default value: `true`.
     * 
     */
    private Boolean browsable;
    /**
     * @return Multi-Bucket information.
     * 
     */
    private String bucketInfos;
    /**
     * @return Whether there are multiple buckets.
     * 
     */
    private Boolean bucketsStub;
    /**
     * @return Direct reading OSS of the gateway file share.
     * 
     */
    private Boolean bypassCacheRead;
    /**
     * @return The cache mode of the gateway file share. Value range: Cache: cached mode. Sync: replication mode are available.
     * 
     */
    private String cacheMode;
    /**
     * @return File share is enabled to client-side encryption, the encryption by the use of the KMS key. **NOTE:** note: This KMS key must be the gateway and is in the same Region.
     * 
     */
    private String clientSideCmk;
    /**
     * @return Whether to enabled to client-side encryption of the gateway file share. Default value: `false`. **NOTE:** need to contact us open whitelist before you can the settings, and only supports enhanced more than online gateway, at the same time, server-side encryption and to client-side encryption can not simultaneously configuration.
     * 
     */
    private Boolean clientSideEncryption;
    /**
     * @return Whether directio (direct I/O data transfer) is enabled for file share. Default: `false`.
     * 
     */
    private Boolean directIo;
    /**
     * @return The ID of the disk.
     * 
     */
    private String diskId;
    /**
     * @return The cache disk type. Valid values: `cloud_efficiency`: Ultra cloud disk. `cloud_ssd`:SSD cloud disk.
     * 
     */
    private String diskType;
    /**
     * @return The set up gateway file share maximum download speed. Unit: `MB/s`. `0` means unlimited. Value range: `0` ~ `1280`. **NOTE:** only in copy mode and enable download file data can be set. only when the shared opens the reverse synchronization or acceded to by the speed synchronization Group when, this parameter will not take effect. Gateway version &gt;= 1.3.0 above support.
     * 
     */
    private Integer downloadLimit;
    /**
     * @return Shared whether the changes take effect.
     * 
     */
    private Boolean enabled;
    /**
     * @return Speed synchronization group ID.
     * 
     */
    private String expressSyncId;
    /**
     * @return The set up gateway file share whether to enable Upload optimization, which is suitable for data pure backup migration scenarios. Default value: `false`. **NOTE:** Gateway version &gt;= 1.0.39 above support.
     * 
     */
    private Boolean fastReclaim;
    /**
     * @return The set up gateway file share and the maximum write speed. Unit: `MB/s`, `0` means unlimited. Value range: `0` ~ `1280`. Default value: `0`.
     * 
     */
    private Integer feLimit;
    /**
     * @return Supported by the file system file number.
     * 
     */
    private String fileNumLimit;
    /**
     * @return File system capacity. Unit: `B`.
     * 
     */
    private String fsSizeLimit;
    /**
     * @return The name of the file share. Length from `1` to `255` characters can contain lowercase letters, digits, (.), (_) Or (-), at the same time, must start with a lowercase letter.
     * 
     */
    private String gatewayFileShareName;
    /**
     * @return The ID of the gateway.
     * 
     */
    private String gatewayId;
    /**
     * @return The ID of the Gateway File Share.
     * 
     */
    private String id;
    /**
     * @return Whether to ignore deleted of the gateway file share. After the opening of the Gateway side delete file or delete cloud (OSS) corresponding to the file. Default value: `false`. **NOTE:** Gateway version &gt;= 1.0.40 above support.
     * 
     */
    private Boolean ignoreDelete;
    /**
     * @return Whether debris optimization of the gateway file share. Default value: `false`.
     * 
     */
    private Boolean inPlace;
    /**
     * @return Cache growth. Unit: `B/s`.
     * 
     */
    private String inRate;
    /**
     * @return The ID of the file share.
     * 
     */
    private String indexId;
    /**
     * @return File share is enabled to client-side encryption, key rotation period of time. Seconds. 0 represents no rotation. Rotation of the value range: `3600` ~ `86400`. Default value: `0`.
     * 
     */
    private Integer kmsRotatePeriod;
    /**
     * @return The synchronization delay, I.e. gateway local cache sync to Alibaba Cloud Object Storage Service (oss) of the delay time. Unit: `Seconds`. Value range: `5` ~ `120`. Default value: `5`. **NOTE:** Gateway version &gt;= 1.0.40 above support.
     * 
     */
    private String lagPeriod;
    /**
     * @return The cache disk inside the device name.
     * 
     */
    private String localPath;
    /**
     * @return The messages from the queue health types. Valid values: `TopicAndQueueFailure`: A Message Queuing message theme can be accessed during the black hole period. `TopicFailure`: a message theme can be accessed during the black hole period. `MNSFullSyncInit`: full synchronization wait. `MNSFullSyncing`: full synchronization in progress. `QueueFailure`: a message queue can be accessed during the black hole period. `MNSNotEnabled`: Top speed synchronization is not enabled. `MNSHealthy`: sync fine.
     * 
     */
    private String mnsHealth;
    /**
     * @return The set up gateway file share NFS protocol, whether to enable NFS v4 optimization improve Mount Upload efficiency. Default value: `false`. **NOTE:** turns on after I will not support NFS v3 mount the filesystem on a. Gateway version &gt;= 1.2.0 above support.
     * 
     */
    private Boolean nfsV4Optimization;
    /**
     * @return Multi-Bucket, removing the Bucket.
     * 
     */
    private String obsoleteBuckets;
    /**
     * @return The name of the Bucket.
     * 
     */
    private String ossBucketName;
    /**
     * @return Whether they are using SSL connect to OSS Bucket.
     * 
     */
    private Boolean ossBucketSsl;
    /**
     * @return The set up gateway file share corresponds to the Object Storage SERVICE (OSS), Bucket Endpoint. **NOTE:** distinguish between intranet and internet Endpoint. We recommend that if the OSS Bucket and the gateway is in the same Region is use the RDS intranet IP Endpoint:oss-cn-hangzhou-internal.aliyuncs.com.
     * 
     */
    private String ossEndpoint;
    /**
     * @return The OSS Bucket of type. Valid values: `BucketHealthy`: OSS connectivity. `BucketAccessDenied`: OBJECT STORAGE Service (OSS) access to an exception. `BucketMiscFailure`: OBJECT STORAGE Service (OSS) access to additional exception. `BucketNetworkFailure`: OBJECT STORAGE Service (OSS) access network an exception. `BucketNotExist`: OSS Bucket does not exist. `Nothing returns`: We may not have ever known existed.
     * 
     */
    private String ossHealth;
    /**
     * @return For a cloud-based data is. Unit: `B`.
     * 
     */
    private String ossUsed;
    /**
     * @return Upload speed. Unit: `B/s`.
     * 
     */
    private String outRate;
    /**
     * @return In part mode, the directory path group JSON format.
     * 
     */
    private String partialSyncPaths;
    /**
     * @return The prefix of the OSS.
     * 
     */
    private String pathPrefix;
    /**
     * @return The reverse synchronization time intervals of the gateway file share. Value range: `15` ~ `36000`. **NOTE:** in copy mode + reverse synchronization is enabled Download file data, value range: `3600` ~ `36000`.
     * 
     */
    private Integer pollingInterval;
    /**
     * @return Share types. Valid values: `SMB`, `NFS`.
     * 
     */
    private String protocol;
    /**
     * @return You can use the metadata space. Unit: `B`.
     * 
     */
    private String remainingMetaSpace;
    /**
     * @return Whether to enable reverse synchronization of the gateway file share. Default value: `false`.
     * 
     */
    private Boolean remoteSync;
    /**
     * @return Copy mode, whether to download the file data. Default value: `false`. **NOTE:** only when the shared opens the reverse synchronization or acceded to by the speed synchronization group, this parameter will not take effect.
     * 
     */
    private Boolean remoteSyncDownload;
    /**
     * @return The read-only client list. When Protocol NFS is returned when the status is.
     * 
     */
    private String roClientList;
    /**
     * @return The read-only client list. When Protocol for Server Message Block (SMB) to go back to.
     * 
     */
    private String roUserList;
    /**
     * @return Read and write the client list. When Protocol NFS is returned when the status is.
     * 
     */
    private String rwClientList;
    /**
     * @return Read-write user list. When Protocol for Server Message Block (SMB) to go back to.
     * 
     */
    private String rwUserList;
    /**
     * @return File share is enabled server-side encryption, encryption used by the KMS key.
     * 
     */
    private String serverSideCmk;
    /**
     * @return If the OSS Bucket side encryption.
     * 
     */
    private Boolean serverSideEncryption;
    /**
     * @return The caching capacity. Unit: `B`.
     * 
     */
    private String size;
    /**
     * @return The set up gateway file share NFS protocol user mapping. Valid values: `none`, `root_squash`, `all_squash`, `all_anonymous`. Default value: `none`.
     * 
     */
    private String squash;
    /**
     * @return File synchronization types. Valid values: `clean`, `dirty`. `clean`: synchronization is complete. `dirty`: synchronization has not been completed.
     * 
     */
    private String state;
    /**
     * @return Whether to support the archive transparent read.
     * 
     */
    private Boolean supportArchive;
    /**
     * @return Full synchronization progress. When the share has been added for a synchronization group, the return parameters are valid, that shared full synchronization progress (0~100). `-2`: indicates that share the Gateway version does not support this feature. `-1`: the share does not occur full synchronization.
     * 
     */
    private Integer syncProgress;
    /**
     * @return The OSS Bucket to the Gateway total downloads. Unit: `B`.
     * 
     */
    private String totalDownload;
    /**
     * @return The OSS Bucket to the Gateway total Upload amount. Unit: `B`.
     * 
     */
    private String totalUpload;
    /**
     * @return The set up gateway file share whether to enable transmission acceleration needs corresponding OSS Bucket enabled transport acceleration. **NOTE:** Gateway version &gt;= 1.3.0 above support.
     * 
     */
    private Boolean transferAcceleration;
    /**
     * @return Used cache. Unit: `B`.
     * 
     */
    private String used;
    /**
     * @return The set up gateway file share Server Message Block (SMB) protocol, whether to enable by Windows access list (requires AD domain) the permissions control. Default value: `false`. **NOTE:** Gateway version &gt;= 1.0.45 above support.
     * 
     */
    private Boolean windowsAcl;

    private GetGatewayFileSharesShare() {}
    /**
     * @return The set up gateway file share Server Message Block (SMB) protocol, whether to enable Windows ABE, the prime minister, need windowsAcl parameter is set to true in the entry into force of. Default value: `false`. **NOTE:** Gateway version &gt;= 1.0.45 above support.
     * 
     */
    public Boolean accessBasedEnumeration() {
        return this.accessBasedEnumeration;
    }
    /**
     * @return Share the private IP address of the RDS instance.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return The set up gateway file share Max upload speed. Unit: `MB/s`, `0` means unlimited. Value range: `0` ~ `1280`. Default value: `0`. **NOTE:** at the same time if you have to limit the maximum write speed, maximum upload speed is no less than the maximum write speed.
     * 
     */
    public Integer backendLimit() {
        return this.backendLimit;
    }
    /**
     * @return The set up gateway file share Server Message Block (SMB) protocol whether browsable (that is, in the network neighborhood of whether you can find). The parameters in the NFS protocol not valid under. Default value: `true`.
     * 
     */
    public Boolean browsable() {
        return this.browsable;
    }
    /**
     * @return Multi-Bucket information.
     * 
     */
    public String bucketInfos() {
        return this.bucketInfos;
    }
    /**
     * @return Whether there are multiple buckets.
     * 
     */
    public Boolean bucketsStub() {
        return this.bucketsStub;
    }
    /**
     * @return Direct reading OSS of the gateway file share.
     * 
     */
    public Boolean bypassCacheRead() {
        return this.bypassCacheRead;
    }
    /**
     * @return The cache mode of the gateway file share. Value range: Cache: cached mode. Sync: replication mode are available.
     * 
     */
    public String cacheMode() {
        return this.cacheMode;
    }
    /**
     * @return File share is enabled to client-side encryption, the encryption by the use of the KMS key. **NOTE:** note: This KMS key must be the gateway and is in the same Region.
     * 
     */
    public String clientSideCmk() {
        return this.clientSideCmk;
    }
    /**
     * @return Whether to enabled to client-side encryption of the gateway file share. Default value: `false`. **NOTE:** need to contact us open whitelist before you can the settings, and only supports enhanced more than online gateway, at the same time, server-side encryption and to client-side encryption can not simultaneously configuration.
     * 
     */
    public Boolean clientSideEncryption() {
        return this.clientSideEncryption;
    }
    /**
     * @return Whether directio (direct I/O data transfer) is enabled for file share. Default: `false`.
     * 
     */
    public Boolean directIo() {
        return this.directIo;
    }
    /**
     * @return The ID of the disk.
     * 
     */
    public String diskId() {
        return this.diskId;
    }
    /**
     * @return The cache disk type. Valid values: `cloud_efficiency`: Ultra cloud disk. `cloud_ssd`:SSD cloud disk.
     * 
     */
    public String diskType() {
        return this.diskType;
    }
    /**
     * @return The set up gateway file share maximum download speed. Unit: `MB/s`. `0` means unlimited. Value range: `0` ~ `1280`. **NOTE:** only in copy mode and enable download file data can be set. only when the shared opens the reverse synchronization or acceded to by the speed synchronization Group when, this parameter will not take effect. Gateway version &gt;= 1.3.0 above support.
     * 
     */
    public Integer downloadLimit() {
        return this.downloadLimit;
    }
    /**
     * @return Shared whether the changes take effect.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Speed synchronization group ID.
     * 
     */
    public String expressSyncId() {
        return this.expressSyncId;
    }
    /**
     * @return The set up gateway file share whether to enable Upload optimization, which is suitable for data pure backup migration scenarios. Default value: `false`. **NOTE:** Gateway version &gt;= 1.0.39 above support.
     * 
     */
    public Boolean fastReclaim() {
        return this.fastReclaim;
    }
    /**
     * @return The set up gateway file share and the maximum write speed. Unit: `MB/s`, `0` means unlimited. Value range: `0` ~ `1280`. Default value: `0`.
     * 
     */
    public Integer feLimit() {
        return this.feLimit;
    }
    /**
     * @return Supported by the file system file number.
     * 
     */
    public String fileNumLimit() {
        return this.fileNumLimit;
    }
    /**
     * @return File system capacity. Unit: `B`.
     * 
     */
    public String fsSizeLimit() {
        return this.fsSizeLimit;
    }
    /**
     * @return The name of the file share. Length from `1` to `255` characters can contain lowercase letters, digits, (.), (_) Or (-), at the same time, must start with a lowercase letter.
     * 
     */
    public String gatewayFileShareName() {
        return this.gatewayFileShareName;
    }
    /**
     * @return The ID of the gateway.
     * 
     */
    public String gatewayId() {
        return this.gatewayId;
    }
    /**
     * @return The ID of the Gateway File Share.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether to ignore deleted of the gateway file share. After the opening of the Gateway side delete file or delete cloud (OSS) corresponding to the file. Default value: `false`. **NOTE:** Gateway version &gt;= 1.0.40 above support.
     * 
     */
    public Boolean ignoreDelete() {
        return this.ignoreDelete;
    }
    /**
     * @return Whether debris optimization of the gateway file share. Default value: `false`.
     * 
     */
    public Boolean inPlace() {
        return this.inPlace;
    }
    /**
     * @return Cache growth. Unit: `B/s`.
     * 
     */
    public String inRate() {
        return this.inRate;
    }
    /**
     * @return The ID of the file share.
     * 
     */
    public String indexId() {
        return this.indexId;
    }
    /**
     * @return File share is enabled to client-side encryption, key rotation period of time. Seconds. 0 represents no rotation. Rotation of the value range: `3600` ~ `86400`. Default value: `0`.
     * 
     */
    public Integer kmsRotatePeriod() {
        return this.kmsRotatePeriod;
    }
    /**
     * @return The synchronization delay, I.e. gateway local cache sync to Alibaba Cloud Object Storage Service (oss) of the delay time. Unit: `Seconds`. Value range: `5` ~ `120`. Default value: `5`. **NOTE:** Gateway version &gt;= 1.0.40 above support.
     * 
     */
    public String lagPeriod() {
        return this.lagPeriod;
    }
    /**
     * @return The cache disk inside the device name.
     * 
     */
    public String localPath() {
        return this.localPath;
    }
    /**
     * @return The messages from the queue health types. Valid values: `TopicAndQueueFailure`: A Message Queuing message theme can be accessed during the black hole period. `TopicFailure`: a message theme can be accessed during the black hole period. `MNSFullSyncInit`: full synchronization wait. `MNSFullSyncing`: full synchronization in progress. `QueueFailure`: a message queue can be accessed during the black hole period. `MNSNotEnabled`: Top speed synchronization is not enabled. `MNSHealthy`: sync fine.
     * 
     */
    public String mnsHealth() {
        return this.mnsHealth;
    }
    /**
     * @return The set up gateway file share NFS protocol, whether to enable NFS v4 optimization improve Mount Upload efficiency. Default value: `false`. **NOTE:** turns on after I will not support NFS v3 mount the filesystem on a. Gateway version &gt;= 1.2.0 above support.
     * 
     */
    public Boolean nfsV4Optimization() {
        return this.nfsV4Optimization;
    }
    /**
     * @return Multi-Bucket, removing the Bucket.
     * 
     */
    public String obsoleteBuckets() {
        return this.obsoleteBuckets;
    }
    /**
     * @return The name of the Bucket.
     * 
     */
    public String ossBucketName() {
        return this.ossBucketName;
    }
    /**
     * @return Whether they are using SSL connect to OSS Bucket.
     * 
     */
    public Boolean ossBucketSsl() {
        return this.ossBucketSsl;
    }
    /**
     * @return The set up gateway file share corresponds to the Object Storage SERVICE (OSS), Bucket Endpoint. **NOTE:** distinguish between intranet and internet Endpoint. We recommend that if the OSS Bucket and the gateway is in the same Region is use the RDS intranet IP Endpoint:oss-cn-hangzhou-internal.aliyuncs.com.
     * 
     */
    public String ossEndpoint() {
        return this.ossEndpoint;
    }
    /**
     * @return The OSS Bucket of type. Valid values: `BucketHealthy`: OSS connectivity. `BucketAccessDenied`: OBJECT STORAGE Service (OSS) access to an exception. `BucketMiscFailure`: OBJECT STORAGE Service (OSS) access to additional exception. `BucketNetworkFailure`: OBJECT STORAGE Service (OSS) access network an exception. `BucketNotExist`: OSS Bucket does not exist. `Nothing returns`: We may not have ever known existed.
     * 
     */
    public String ossHealth() {
        return this.ossHealth;
    }
    /**
     * @return For a cloud-based data is. Unit: `B`.
     * 
     */
    public String ossUsed() {
        return this.ossUsed;
    }
    /**
     * @return Upload speed. Unit: `B/s`.
     * 
     */
    public String outRate() {
        return this.outRate;
    }
    /**
     * @return In part mode, the directory path group JSON format.
     * 
     */
    public String partialSyncPaths() {
        return this.partialSyncPaths;
    }
    /**
     * @return The prefix of the OSS.
     * 
     */
    public String pathPrefix() {
        return this.pathPrefix;
    }
    /**
     * @return The reverse synchronization time intervals of the gateway file share. Value range: `15` ~ `36000`. **NOTE:** in copy mode + reverse synchronization is enabled Download file data, value range: `3600` ~ `36000`.
     * 
     */
    public Integer pollingInterval() {
        return this.pollingInterval;
    }
    /**
     * @return Share types. Valid values: `SMB`, `NFS`.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return You can use the metadata space. Unit: `B`.
     * 
     */
    public String remainingMetaSpace() {
        return this.remainingMetaSpace;
    }
    /**
     * @return Whether to enable reverse synchronization of the gateway file share. Default value: `false`.
     * 
     */
    public Boolean remoteSync() {
        return this.remoteSync;
    }
    /**
     * @return Copy mode, whether to download the file data. Default value: `false`. **NOTE:** only when the shared opens the reverse synchronization or acceded to by the speed synchronization group, this parameter will not take effect.
     * 
     */
    public Boolean remoteSyncDownload() {
        return this.remoteSyncDownload;
    }
    /**
     * @return The read-only client list. When Protocol NFS is returned when the status is.
     * 
     */
    public String roClientList() {
        return this.roClientList;
    }
    /**
     * @return The read-only client list. When Protocol for Server Message Block (SMB) to go back to.
     * 
     */
    public String roUserList() {
        return this.roUserList;
    }
    /**
     * @return Read and write the client list. When Protocol NFS is returned when the status is.
     * 
     */
    public String rwClientList() {
        return this.rwClientList;
    }
    /**
     * @return Read-write user list. When Protocol for Server Message Block (SMB) to go back to.
     * 
     */
    public String rwUserList() {
        return this.rwUserList;
    }
    /**
     * @return File share is enabled server-side encryption, encryption used by the KMS key.
     * 
     */
    public String serverSideCmk() {
        return this.serverSideCmk;
    }
    /**
     * @return If the OSS Bucket side encryption.
     * 
     */
    public Boolean serverSideEncryption() {
        return this.serverSideEncryption;
    }
    /**
     * @return The caching capacity. Unit: `B`.
     * 
     */
    public String size() {
        return this.size;
    }
    /**
     * @return The set up gateway file share NFS protocol user mapping. Valid values: `none`, `root_squash`, `all_squash`, `all_anonymous`. Default value: `none`.
     * 
     */
    public String squash() {
        return this.squash;
    }
    /**
     * @return File synchronization types. Valid values: `clean`, `dirty`. `clean`: synchronization is complete. `dirty`: synchronization has not been completed.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Whether to support the archive transparent read.
     * 
     */
    public Boolean supportArchive() {
        return this.supportArchive;
    }
    /**
     * @return Full synchronization progress. When the share has been added for a synchronization group, the return parameters are valid, that shared full synchronization progress (0~100). `-2`: indicates that share the Gateway version does not support this feature. `-1`: the share does not occur full synchronization.
     * 
     */
    public Integer syncProgress() {
        return this.syncProgress;
    }
    /**
     * @return The OSS Bucket to the Gateway total downloads. Unit: `B`.
     * 
     */
    public String totalDownload() {
        return this.totalDownload;
    }
    /**
     * @return The OSS Bucket to the Gateway total Upload amount. Unit: `B`.
     * 
     */
    public String totalUpload() {
        return this.totalUpload;
    }
    /**
     * @return The set up gateway file share whether to enable transmission acceleration needs corresponding OSS Bucket enabled transport acceleration. **NOTE:** Gateway version &gt;= 1.3.0 above support.
     * 
     */
    public Boolean transferAcceleration() {
        return this.transferAcceleration;
    }
    /**
     * @return Used cache. Unit: `B`.
     * 
     */
    public String used() {
        return this.used;
    }
    /**
     * @return The set up gateway file share Server Message Block (SMB) protocol, whether to enable by Windows access list (requires AD domain) the permissions control. Default value: `false`. **NOTE:** Gateway version &gt;= 1.0.45 above support.
     * 
     */
    public Boolean windowsAcl() {
        return this.windowsAcl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayFileSharesShare defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean accessBasedEnumeration;
        private String address;
        private Integer backendLimit;
        private Boolean browsable;
        private String bucketInfos;
        private Boolean bucketsStub;
        private Boolean bypassCacheRead;
        private String cacheMode;
        private String clientSideCmk;
        private Boolean clientSideEncryption;
        private Boolean directIo;
        private String diskId;
        private String diskType;
        private Integer downloadLimit;
        private Boolean enabled;
        private String expressSyncId;
        private Boolean fastReclaim;
        private Integer feLimit;
        private String fileNumLimit;
        private String fsSizeLimit;
        private String gatewayFileShareName;
        private String gatewayId;
        private String id;
        private Boolean ignoreDelete;
        private Boolean inPlace;
        private String inRate;
        private String indexId;
        private Integer kmsRotatePeriod;
        private String lagPeriod;
        private String localPath;
        private String mnsHealth;
        private Boolean nfsV4Optimization;
        private String obsoleteBuckets;
        private String ossBucketName;
        private Boolean ossBucketSsl;
        private String ossEndpoint;
        private String ossHealth;
        private String ossUsed;
        private String outRate;
        private String partialSyncPaths;
        private String pathPrefix;
        private Integer pollingInterval;
        private String protocol;
        private String remainingMetaSpace;
        private Boolean remoteSync;
        private Boolean remoteSyncDownload;
        private String roClientList;
        private String roUserList;
        private String rwClientList;
        private String rwUserList;
        private String serverSideCmk;
        private Boolean serverSideEncryption;
        private String size;
        private String squash;
        private String state;
        private Boolean supportArchive;
        private Integer syncProgress;
        private String totalDownload;
        private String totalUpload;
        private Boolean transferAcceleration;
        private String used;
        private Boolean windowsAcl;
        public Builder() {}
        public Builder(GetGatewayFileSharesShare defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessBasedEnumeration = defaults.accessBasedEnumeration;
    	      this.address = defaults.address;
    	      this.backendLimit = defaults.backendLimit;
    	      this.browsable = defaults.browsable;
    	      this.bucketInfos = defaults.bucketInfos;
    	      this.bucketsStub = defaults.bucketsStub;
    	      this.bypassCacheRead = defaults.bypassCacheRead;
    	      this.cacheMode = defaults.cacheMode;
    	      this.clientSideCmk = defaults.clientSideCmk;
    	      this.clientSideEncryption = defaults.clientSideEncryption;
    	      this.directIo = defaults.directIo;
    	      this.diskId = defaults.diskId;
    	      this.diskType = defaults.diskType;
    	      this.downloadLimit = defaults.downloadLimit;
    	      this.enabled = defaults.enabled;
    	      this.expressSyncId = defaults.expressSyncId;
    	      this.fastReclaim = defaults.fastReclaim;
    	      this.feLimit = defaults.feLimit;
    	      this.fileNumLimit = defaults.fileNumLimit;
    	      this.fsSizeLimit = defaults.fsSizeLimit;
    	      this.gatewayFileShareName = defaults.gatewayFileShareName;
    	      this.gatewayId = defaults.gatewayId;
    	      this.id = defaults.id;
    	      this.ignoreDelete = defaults.ignoreDelete;
    	      this.inPlace = defaults.inPlace;
    	      this.inRate = defaults.inRate;
    	      this.indexId = defaults.indexId;
    	      this.kmsRotatePeriod = defaults.kmsRotatePeriod;
    	      this.lagPeriod = defaults.lagPeriod;
    	      this.localPath = defaults.localPath;
    	      this.mnsHealth = defaults.mnsHealth;
    	      this.nfsV4Optimization = defaults.nfsV4Optimization;
    	      this.obsoleteBuckets = defaults.obsoleteBuckets;
    	      this.ossBucketName = defaults.ossBucketName;
    	      this.ossBucketSsl = defaults.ossBucketSsl;
    	      this.ossEndpoint = defaults.ossEndpoint;
    	      this.ossHealth = defaults.ossHealth;
    	      this.ossUsed = defaults.ossUsed;
    	      this.outRate = defaults.outRate;
    	      this.partialSyncPaths = defaults.partialSyncPaths;
    	      this.pathPrefix = defaults.pathPrefix;
    	      this.pollingInterval = defaults.pollingInterval;
    	      this.protocol = defaults.protocol;
    	      this.remainingMetaSpace = defaults.remainingMetaSpace;
    	      this.remoteSync = defaults.remoteSync;
    	      this.remoteSyncDownload = defaults.remoteSyncDownload;
    	      this.roClientList = defaults.roClientList;
    	      this.roUserList = defaults.roUserList;
    	      this.rwClientList = defaults.rwClientList;
    	      this.rwUserList = defaults.rwUserList;
    	      this.serverSideCmk = defaults.serverSideCmk;
    	      this.serverSideEncryption = defaults.serverSideEncryption;
    	      this.size = defaults.size;
    	      this.squash = defaults.squash;
    	      this.state = defaults.state;
    	      this.supportArchive = defaults.supportArchive;
    	      this.syncProgress = defaults.syncProgress;
    	      this.totalDownload = defaults.totalDownload;
    	      this.totalUpload = defaults.totalUpload;
    	      this.transferAcceleration = defaults.transferAcceleration;
    	      this.used = defaults.used;
    	      this.windowsAcl = defaults.windowsAcl;
        }

        @CustomType.Setter
        public Builder accessBasedEnumeration(Boolean accessBasedEnumeration) {
            this.accessBasedEnumeration = Objects.requireNonNull(accessBasedEnumeration);
            return this;
        }
        @CustomType.Setter
        public Builder address(String address) {
            this.address = Objects.requireNonNull(address);
            return this;
        }
        @CustomType.Setter
        public Builder backendLimit(Integer backendLimit) {
            this.backendLimit = Objects.requireNonNull(backendLimit);
            return this;
        }
        @CustomType.Setter
        public Builder browsable(Boolean browsable) {
            this.browsable = Objects.requireNonNull(browsable);
            return this;
        }
        @CustomType.Setter
        public Builder bucketInfos(String bucketInfos) {
            this.bucketInfos = Objects.requireNonNull(bucketInfos);
            return this;
        }
        @CustomType.Setter
        public Builder bucketsStub(Boolean bucketsStub) {
            this.bucketsStub = Objects.requireNonNull(bucketsStub);
            return this;
        }
        @CustomType.Setter
        public Builder bypassCacheRead(Boolean bypassCacheRead) {
            this.bypassCacheRead = Objects.requireNonNull(bypassCacheRead);
            return this;
        }
        @CustomType.Setter
        public Builder cacheMode(String cacheMode) {
            this.cacheMode = Objects.requireNonNull(cacheMode);
            return this;
        }
        @CustomType.Setter
        public Builder clientSideCmk(String clientSideCmk) {
            this.clientSideCmk = Objects.requireNonNull(clientSideCmk);
            return this;
        }
        @CustomType.Setter
        public Builder clientSideEncryption(Boolean clientSideEncryption) {
            this.clientSideEncryption = Objects.requireNonNull(clientSideEncryption);
            return this;
        }
        @CustomType.Setter
        public Builder directIo(Boolean directIo) {
            this.directIo = Objects.requireNonNull(directIo);
            return this;
        }
        @CustomType.Setter
        public Builder diskId(String diskId) {
            this.diskId = Objects.requireNonNull(diskId);
            return this;
        }
        @CustomType.Setter
        public Builder diskType(String diskType) {
            this.diskType = Objects.requireNonNull(diskType);
            return this;
        }
        @CustomType.Setter
        public Builder downloadLimit(Integer downloadLimit) {
            this.downloadLimit = Objects.requireNonNull(downloadLimit);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder expressSyncId(String expressSyncId) {
            this.expressSyncId = Objects.requireNonNull(expressSyncId);
            return this;
        }
        @CustomType.Setter
        public Builder fastReclaim(Boolean fastReclaim) {
            this.fastReclaim = Objects.requireNonNull(fastReclaim);
            return this;
        }
        @CustomType.Setter
        public Builder feLimit(Integer feLimit) {
            this.feLimit = Objects.requireNonNull(feLimit);
            return this;
        }
        @CustomType.Setter
        public Builder fileNumLimit(String fileNumLimit) {
            this.fileNumLimit = Objects.requireNonNull(fileNumLimit);
            return this;
        }
        @CustomType.Setter
        public Builder fsSizeLimit(String fsSizeLimit) {
            this.fsSizeLimit = Objects.requireNonNull(fsSizeLimit);
            return this;
        }
        @CustomType.Setter
        public Builder gatewayFileShareName(String gatewayFileShareName) {
            this.gatewayFileShareName = Objects.requireNonNull(gatewayFileShareName);
            return this;
        }
        @CustomType.Setter
        public Builder gatewayId(String gatewayId) {
            this.gatewayId = Objects.requireNonNull(gatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ignoreDelete(Boolean ignoreDelete) {
            this.ignoreDelete = Objects.requireNonNull(ignoreDelete);
            return this;
        }
        @CustomType.Setter
        public Builder inPlace(Boolean inPlace) {
            this.inPlace = Objects.requireNonNull(inPlace);
            return this;
        }
        @CustomType.Setter
        public Builder inRate(String inRate) {
            this.inRate = Objects.requireNonNull(inRate);
            return this;
        }
        @CustomType.Setter
        public Builder indexId(String indexId) {
            this.indexId = Objects.requireNonNull(indexId);
            return this;
        }
        @CustomType.Setter
        public Builder kmsRotatePeriod(Integer kmsRotatePeriod) {
            this.kmsRotatePeriod = Objects.requireNonNull(kmsRotatePeriod);
            return this;
        }
        @CustomType.Setter
        public Builder lagPeriod(String lagPeriod) {
            this.lagPeriod = Objects.requireNonNull(lagPeriod);
            return this;
        }
        @CustomType.Setter
        public Builder localPath(String localPath) {
            this.localPath = Objects.requireNonNull(localPath);
            return this;
        }
        @CustomType.Setter
        public Builder mnsHealth(String mnsHealth) {
            this.mnsHealth = Objects.requireNonNull(mnsHealth);
            return this;
        }
        @CustomType.Setter
        public Builder nfsV4Optimization(Boolean nfsV4Optimization) {
            this.nfsV4Optimization = Objects.requireNonNull(nfsV4Optimization);
            return this;
        }
        @CustomType.Setter
        public Builder obsoleteBuckets(String obsoleteBuckets) {
            this.obsoleteBuckets = Objects.requireNonNull(obsoleteBuckets);
            return this;
        }
        @CustomType.Setter
        public Builder ossBucketName(String ossBucketName) {
            this.ossBucketName = Objects.requireNonNull(ossBucketName);
            return this;
        }
        @CustomType.Setter
        public Builder ossBucketSsl(Boolean ossBucketSsl) {
            this.ossBucketSsl = Objects.requireNonNull(ossBucketSsl);
            return this;
        }
        @CustomType.Setter
        public Builder ossEndpoint(String ossEndpoint) {
            this.ossEndpoint = Objects.requireNonNull(ossEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder ossHealth(String ossHealth) {
            this.ossHealth = Objects.requireNonNull(ossHealth);
            return this;
        }
        @CustomType.Setter
        public Builder ossUsed(String ossUsed) {
            this.ossUsed = Objects.requireNonNull(ossUsed);
            return this;
        }
        @CustomType.Setter
        public Builder outRate(String outRate) {
            this.outRate = Objects.requireNonNull(outRate);
            return this;
        }
        @CustomType.Setter
        public Builder partialSyncPaths(String partialSyncPaths) {
            this.partialSyncPaths = Objects.requireNonNull(partialSyncPaths);
            return this;
        }
        @CustomType.Setter
        public Builder pathPrefix(String pathPrefix) {
            this.pathPrefix = Objects.requireNonNull(pathPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder pollingInterval(Integer pollingInterval) {
            this.pollingInterval = Objects.requireNonNull(pollingInterval);
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder remainingMetaSpace(String remainingMetaSpace) {
            this.remainingMetaSpace = Objects.requireNonNull(remainingMetaSpace);
            return this;
        }
        @CustomType.Setter
        public Builder remoteSync(Boolean remoteSync) {
            this.remoteSync = Objects.requireNonNull(remoteSync);
            return this;
        }
        @CustomType.Setter
        public Builder remoteSyncDownload(Boolean remoteSyncDownload) {
            this.remoteSyncDownload = Objects.requireNonNull(remoteSyncDownload);
            return this;
        }
        @CustomType.Setter
        public Builder roClientList(String roClientList) {
            this.roClientList = Objects.requireNonNull(roClientList);
            return this;
        }
        @CustomType.Setter
        public Builder roUserList(String roUserList) {
            this.roUserList = Objects.requireNonNull(roUserList);
            return this;
        }
        @CustomType.Setter
        public Builder rwClientList(String rwClientList) {
            this.rwClientList = Objects.requireNonNull(rwClientList);
            return this;
        }
        @CustomType.Setter
        public Builder rwUserList(String rwUserList) {
            this.rwUserList = Objects.requireNonNull(rwUserList);
            return this;
        }
        @CustomType.Setter
        public Builder serverSideCmk(String serverSideCmk) {
            this.serverSideCmk = Objects.requireNonNull(serverSideCmk);
            return this;
        }
        @CustomType.Setter
        public Builder serverSideEncryption(Boolean serverSideEncryption) {
            this.serverSideEncryption = Objects.requireNonNull(serverSideEncryption);
            return this;
        }
        @CustomType.Setter
        public Builder size(String size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        @CustomType.Setter
        public Builder squash(String squash) {
            this.squash = Objects.requireNonNull(squash);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder supportArchive(Boolean supportArchive) {
            this.supportArchive = Objects.requireNonNull(supportArchive);
            return this;
        }
        @CustomType.Setter
        public Builder syncProgress(Integer syncProgress) {
            this.syncProgress = Objects.requireNonNull(syncProgress);
            return this;
        }
        @CustomType.Setter
        public Builder totalDownload(String totalDownload) {
            this.totalDownload = Objects.requireNonNull(totalDownload);
            return this;
        }
        @CustomType.Setter
        public Builder totalUpload(String totalUpload) {
            this.totalUpload = Objects.requireNonNull(totalUpload);
            return this;
        }
        @CustomType.Setter
        public Builder transferAcceleration(Boolean transferAcceleration) {
            this.transferAcceleration = Objects.requireNonNull(transferAcceleration);
            return this;
        }
        @CustomType.Setter
        public Builder used(String used) {
            this.used = Objects.requireNonNull(used);
            return this;
        }
        @CustomType.Setter
        public Builder windowsAcl(Boolean windowsAcl) {
            this.windowsAcl = Objects.requireNonNull(windowsAcl);
            return this;
        }
        public GetGatewayFileSharesShare build() {
            final var o = new GetGatewayFileSharesShare();
            o.accessBasedEnumeration = accessBasedEnumeration;
            o.address = address;
            o.backendLimit = backendLimit;
            o.browsable = browsable;
            o.bucketInfos = bucketInfos;
            o.bucketsStub = bucketsStub;
            o.bypassCacheRead = bypassCacheRead;
            o.cacheMode = cacheMode;
            o.clientSideCmk = clientSideCmk;
            o.clientSideEncryption = clientSideEncryption;
            o.directIo = directIo;
            o.diskId = diskId;
            o.diskType = diskType;
            o.downloadLimit = downloadLimit;
            o.enabled = enabled;
            o.expressSyncId = expressSyncId;
            o.fastReclaim = fastReclaim;
            o.feLimit = feLimit;
            o.fileNumLimit = fileNumLimit;
            o.fsSizeLimit = fsSizeLimit;
            o.gatewayFileShareName = gatewayFileShareName;
            o.gatewayId = gatewayId;
            o.id = id;
            o.ignoreDelete = ignoreDelete;
            o.inPlace = inPlace;
            o.inRate = inRate;
            o.indexId = indexId;
            o.kmsRotatePeriod = kmsRotatePeriod;
            o.lagPeriod = lagPeriod;
            o.localPath = localPath;
            o.mnsHealth = mnsHealth;
            o.nfsV4Optimization = nfsV4Optimization;
            o.obsoleteBuckets = obsoleteBuckets;
            o.ossBucketName = ossBucketName;
            o.ossBucketSsl = ossBucketSsl;
            o.ossEndpoint = ossEndpoint;
            o.ossHealth = ossHealth;
            o.ossUsed = ossUsed;
            o.outRate = outRate;
            o.partialSyncPaths = partialSyncPaths;
            o.pathPrefix = pathPrefix;
            o.pollingInterval = pollingInterval;
            o.protocol = protocol;
            o.remainingMetaSpace = remainingMetaSpace;
            o.remoteSync = remoteSync;
            o.remoteSyncDownload = remoteSyncDownload;
            o.roClientList = roClientList;
            o.roUserList = roUserList;
            o.rwClientList = rwClientList;
            o.rwUserList = rwUserList;
            o.serverSideCmk = serverSideCmk;
            o.serverSideEncryption = serverSideEncryption;
            o.size = size;
            o.squash = squash;
            o.state = state;
            o.supportArchive = supportArchive;
            o.syncProgress = syncProgress;
            o.totalDownload = totalDownload;
            o.totalUpload = totalUpload;
            o.transferAcceleration = transferAcceleration;
            o.used = used;
            o.windowsAcl = windowsAcl;
            return o;
        }
    }
}
