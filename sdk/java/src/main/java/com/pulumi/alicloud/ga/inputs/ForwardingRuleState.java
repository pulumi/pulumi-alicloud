// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ga.inputs;

import com.pulumi.alicloud.ga.inputs.ForwardingRuleRuleActionArgs;
import com.pulumi.alicloud.ga.inputs.ForwardingRuleRuleConditionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ForwardingRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ForwardingRuleState Empty = new ForwardingRuleState();

    /**
     * The ID of the Global Accelerator instance.
     * 
     */
    @Import(name="acceleratorId")
    private @Nullable Output<String> acceleratorId;

    /**
     * @return The ID of the Global Accelerator instance.
     * 
     */
    public Optional<Output<String>> acceleratorId() {
        return Optional.ofNullable(this.acceleratorId);
    }

    /**
     * Forwarding Policy ID.
     * 
     */
    @Import(name="forwardingRuleId")
    private @Nullable Output<String> forwardingRuleId;

    /**
     * @return Forwarding Policy ID.
     * 
     */
    public Optional<Output<String>> forwardingRuleId() {
        return Optional.ofNullable(this.forwardingRuleId);
    }

    /**
     * Forwarding policy name. The length of the name is 2-128 English or Chinese characters. It must start with uppercase and lowercase letters or Chinese characters. It can contain numbers, half width period (.), underscores (_) And dash (-).
     * 
     */
    @Import(name="forwardingRuleName")
    private @Nullable Output<String> forwardingRuleName;

    /**
     * @return Forwarding policy name. The length of the name is 2-128 English or Chinese characters. It must start with uppercase and lowercase letters or Chinese characters. It can contain numbers, half width period (.), underscores (_) And dash (-).
     * 
     */
    public Optional<Output<String>> forwardingRuleName() {
        return Optional.ofNullable(this.forwardingRuleName);
    }

    /**
     * Forwarding Policy Status.
     * 
     */
    @Import(name="forwardingRuleStatus")
    private @Nullable Output<String> forwardingRuleStatus;

    /**
     * @return Forwarding Policy Status.
     * 
     */
    public Optional<Output<String>> forwardingRuleStatus() {
        return Optional.ofNullable(this.forwardingRuleStatus);
    }

    /**
     * The ID of the listener.
     * 
     */
    @Import(name="listenerId")
    private @Nullable Output<String> listenerId;

    /**
     * @return The ID of the listener.
     * 
     */
    public Optional<Output<String>> listenerId() {
        return Optional.ofNullable(this.listenerId);
    }

    /**
     * Forwarding policy priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Forwarding policy priority.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Forward action. See `rule_actions` below.
     * 
     */
    @Import(name="ruleActions")
    private @Nullable Output<List<ForwardingRuleRuleActionArgs>> ruleActions;

    /**
     * @return Forward action. See `rule_actions` below.
     * 
     */
    public Optional<Output<List<ForwardingRuleRuleActionArgs>>> ruleActions() {
        return Optional.ofNullable(this.ruleActions);
    }

    /**
     * Forwarding condition list. See `rule_conditions` below.
     * 
     */
    @Import(name="ruleConditions")
    private @Nullable Output<List<ForwardingRuleRuleConditionArgs>> ruleConditions;

    /**
     * @return Forwarding condition list. See `rule_conditions` below.
     * 
     */
    public Optional<Output<List<ForwardingRuleRuleConditionArgs>>> ruleConditions() {
        return Optional.ofNullable(this.ruleConditions);
    }

    private ForwardingRuleState() {}

    private ForwardingRuleState(ForwardingRuleState $) {
        this.acceleratorId = $.acceleratorId;
        this.forwardingRuleId = $.forwardingRuleId;
        this.forwardingRuleName = $.forwardingRuleName;
        this.forwardingRuleStatus = $.forwardingRuleStatus;
        this.listenerId = $.listenerId;
        this.priority = $.priority;
        this.ruleActions = $.ruleActions;
        this.ruleConditions = $.ruleConditions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForwardingRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForwardingRuleState $;

        public Builder() {
            $ = new ForwardingRuleState();
        }

        public Builder(ForwardingRuleState defaults) {
            $ = new ForwardingRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceleratorId The ID of the Global Accelerator instance.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorId(@Nullable Output<String> acceleratorId) {
            $.acceleratorId = acceleratorId;
            return this;
        }

        /**
         * @param acceleratorId The ID of the Global Accelerator instance.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorId(String acceleratorId) {
            return acceleratorId(Output.of(acceleratorId));
        }

        /**
         * @param forwardingRuleId Forwarding Policy ID.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRuleId(@Nullable Output<String> forwardingRuleId) {
            $.forwardingRuleId = forwardingRuleId;
            return this;
        }

        /**
         * @param forwardingRuleId Forwarding Policy ID.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRuleId(String forwardingRuleId) {
            return forwardingRuleId(Output.of(forwardingRuleId));
        }

        /**
         * @param forwardingRuleName Forwarding policy name. The length of the name is 2-128 English or Chinese characters. It must start with uppercase and lowercase letters or Chinese characters. It can contain numbers, half width period (.), underscores (_) And dash (-).
         * 
         * @return builder
         * 
         */
        public Builder forwardingRuleName(@Nullable Output<String> forwardingRuleName) {
            $.forwardingRuleName = forwardingRuleName;
            return this;
        }

        /**
         * @param forwardingRuleName Forwarding policy name. The length of the name is 2-128 English or Chinese characters. It must start with uppercase and lowercase letters or Chinese characters. It can contain numbers, half width period (.), underscores (_) And dash (-).
         * 
         * @return builder
         * 
         */
        public Builder forwardingRuleName(String forwardingRuleName) {
            return forwardingRuleName(Output.of(forwardingRuleName));
        }

        /**
         * @param forwardingRuleStatus Forwarding Policy Status.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRuleStatus(@Nullable Output<String> forwardingRuleStatus) {
            $.forwardingRuleStatus = forwardingRuleStatus;
            return this;
        }

        /**
         * @param forwardingRuleStatus Forwarding Policy Status.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRuleStatus(String forwardingRuleStatus) {
            return forwardingRuleStatus(Output.of(forwardingRuleStatus));
        }

        /**
         * @param listenerId The ID of the listener.
         * 
         * @return builder
         * 
         */
        public Builder listenerId(@Nullable Output<String> listenerId) {
            $.listenerId = listenerId;
            return this;
        }

        /**
         * @param listenerId The ID of the listener.
         * 
         * @return builder
         * 
         */
        public Builder listenerId(String listenerId) {
            return listenerId(Output.of(listenerId));
        }

        /**
         * @param priority Forwarding policy priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Forwarding policy priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param ruleActions Forward action. See `rule_actions` below.
         * 
         * @return builder
         * 
         */
        public Builder ruleActions(@Nullable Output<List<ForwardingRuleRuleActionArgs>> ruleActions) {
            $.ruleActions = ruleActions;
            return this;
        }

        /**
         * @param ruleActions Forward action. See `rule_actions` below.
         * 
         * @return builder
         * 
         */
        public Builder ruleActions(List<ForwardingRuleRuleActionArgs> ruleActions) {
            return ruleActions(Output.of(ruleActions));
        }

        /**
         * @param ruleActions Forward action. See `rule_actions` below.
         * 
         * @return builder
         * 
         */
        public Builder ruleActions(ForwardingRuleRuleActionArgs... ruleActions) {
            return ruleActions(List.of(ruleActions));
        }

        /**
         * @param ruleConditions Forwarding condition list. See `rule_conditions` below.
         * 
         * @return builder
         * 
         */
        public Builder ruleConditions(@Nullable Output<List<ForwardingRuleRuleConditionArgs>> ruleConditions) {
            $.ruleConditions = ruleConditions;
            return this;
        }

        /**
         * @param ruleConditions Forwarding condition list. See `rule_conditions` below.
         * 
         * @return builder
         * 
         */
        public Builder ruleConditions(List<ForwardingRuleRuleConditionArgs> ruleConditions) {
            return ruleConditions(Output.of(ruleConditions));
        }

        /**
         * @param ruleConditions Forwarding condition list. See `rule_conditions` below.
         * 
         * @return builder
         * 
         */
        public Builder ruleConditions(ForwardingRuleRuleConditionArgs... ruleConditions) {
            return ruleConditions(List.of(ruleConditions));
        }

        public ForwardingRuleState build() {
            return $;
        }
    }

}
