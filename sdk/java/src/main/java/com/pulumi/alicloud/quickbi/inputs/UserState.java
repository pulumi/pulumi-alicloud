// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.quickbi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * Alibaba Cloud account ID.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Alibaba Cloud account ID.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * An Alibaba Cloud account, Alibaba Cloud name.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return An Alibaba Cloud account, Alibaba Cloud name.
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * Whether it is the administrator. Valid values: `true` and `false`.
     * 
     */
    @Import(name="adminUser")
    private @Nullable Output<Boolean> adminUser;

    /**
     * @return Whether it is the administrator. Valid values: `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> adminUser() {
        return Optional.ofNullable(this.adminUser);
    }

    /**
     * Whether this is a permissions administrator. Valid values: `false`, `true`.
     * 
     */
    @Import(name="authAdminUser")
    private @Nullable Output<Boolean> authAdminUser;

    /**
     * @return Whether this is a permissions administrator. Valid values: `false`, `true`.
     * 
     */
    public Optional<Output<Boolean>> authAdminUser() {
        return Optional.ofNullable(this.authAdminUser);
    }

    /**
     * The nickname of the user.
     * 
     */
    @Import(name="nickName")
    private @Nullable Output<String> nickName;

    /**
     * @return The nickname of the user.
     * 
     */
    public Optional<Output<String>> nickName() {
        return Optional.ofNullable(this.nickName);
    }

    /**
     * The members of the organization of the type of role separately. Valid values: `Analyst`, `Developer` and `Visitor`.
     * 
     */
    @Import(name="userType")
    private @Nullable Output<String> userType;

    /**
     * @return The members of the organization of the type of role separately. Valid values: `Analyst`, `Developer` and `Visitor`.
     * 
     */
    public Optional<Output<String>> userType() {
        return Optional.ofNullable(this.userType);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.accountId = $.accountId;
        this.accountName = $.accountName;
        this.adminUser = $.adminUser;
        this.authAdminUser = $.authAdminUser;
        this.nickName = $.nickName;
        this.userType = $.userType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Alibaba Cloud account ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Alibaba Cloud account ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param accountName An Alibaba Cloud account, Alibaba Cloud name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName An Alibaba Cloud account, Alibaba Cloud name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param adminUser Whether it is the administrator. Valid values: `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder adminUser(@Nullable Output<Boolean> adminUser) {
            $.adminUser = adminUser;
            return this;
        }

        /**
         * @param adminUser Whether it is the administrator. Valid values: `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder adminUser(Boolean adminUser) {
            return adminUser(Output.of(adminUser));
        }

        /**
         * @param authAdminUser Whether this is a permissions administrator. Valid values: `false`, `true`.
         * 
         * @return builder
         * 
         */
        public Builder authAdminUser(@Nullable Output<Boolean> authAdminUser) {
            $.authAdminUser = authAdminUser;
            return this;
        }

        /**
         * @param authAdminUser Whether this is a permissions administrator. Valid values: `false`, `true`.
         * 
         * @return builder
         * 
         */
        public Builder authAdminUser(Boolean authAdminUser) {
            return authAdminUser(Output.of(authAdminUser));
        }

        /**
         * @param nickName The nickname of the user.
         * 
         * @return builder
         * 
         */
        public Builder nickName(@Nullable Output<String> nickName) {
            $.nickName = nickName;
            return this;
        }

        /**
         * @param nickName The nickname of the user.
         * 
         * @return builder
         * 
         */
        public Builder nickName(String nickName) {
            return nickName(Output.of(nickName));
        }

        /**
         * @param userType The members of the organization of the type of role separately. Valid values: `Analyst`, `Developer` and `Visitor`.
         * 
         * @return builder
         * 
         */
        public Builder userType(@Nullable Output<String> userType) {
            $.userType = userType;
            return this;
        }

        /**
         * @param userType The members of the organization of the type of role separately. Valid values: `Analyst`, `Developer` and `Visitor`.
         * 
         * @return builder
         * 
         */
        public Builder userType(String userType) {
            return userType(Output.of(userType));
        }

        public UserState build() {
            return $;
        }
    }

}
