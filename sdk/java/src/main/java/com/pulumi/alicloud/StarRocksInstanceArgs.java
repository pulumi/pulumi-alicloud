// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud;

import com.pulumi.alicloud.inputs.StarRocksInstanceBackendNodeGroupArgs;
import com.pulumi.alicloud.inputs.StarRocksInstanceFrontendNodeGroupArgs;
import com.pulumi.alicloud.inputs.StarRocksInstanceObserverNodeGroupArgs;
import com.pulumi.alicloud.inputs.StarRocksInstanceVswitchArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StarRocksInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final StarRocksInstanceArgs Empty = new StarRocksInstanceArgs();

    /**
     * Password of admin user.
     * 
     */
    @Import(name="adminPassword", required=true)
    private Output<String> adminPassword;

    /**
     * @return Password of admin user.
     * 
     */
    public Output<String> adminPassword() {
        return this.adminPassword;
    }

    /**
     * Whether to enable automatic renewal. This is only meaningful when payType is set to PrePaid. Disabled by default.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Whether to enable automatic renewal. This is only meaningful when payType is set to PrePaid. Disabled by default.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * BackendNodeGroups See `backendNodeGroups` below.
     * 
     */
    @Import(name="backendNodeGroups")
    private @Nullable Output<List<StarRocksInstanceBackendNodeGroupArgs>> backendNodeGroups;

    /**
     * @return BackendNodeGroups See `backendNodeGroups` below.
     * 
     */
    public Optional<Output<List<StarRocksInstanceBackendNodeGroupArgs>>> backendNodeGroups() {
        return Optional.ofNullable(this.backendNodeGroups);
    }

    /**
     * ZoneId of instance.
     * 
     */
    @Import(name="clusterZoneId", required=true)
    private Output<String> clusterZoneId;

    /**
     * @return ZoneId of instance.
     * 
     */
    public Output<String> clusterZoneId() {
        return this.clusterZoneId;
    }

    /**
     * Duration of purchase. It is only meaningful when payType is set to PrePaid.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return Duration of purchase. It is only meaningful when payType is set to PrePaid.
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * Whether encrypted
     * 
     */
    @Import(name="encrypted")
    private @Nullable Output<Boolean> encrypted;

    /**
     * @return Whether encrypted
     * 
     */
    public Optional<Output<Boolean>> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }

    /**
     * FrontendNodeGroups See `frontendNodeGroups` below.
     * 
     */
    @Import(name="frontendNodeGroups")
    private @Nullable Output<List<StarRocksInstanceFrontendNodeGroupArgs>> frontendNodeGroups;

    /**
     * @return FrontendNodeGroups See `frontendNodeGroups` below.
     * 
     */
    public Optional<Output<List<StarRocksInstanceFrontendNodeGroupArgs>>> frontendNodeGroups() {
        return Optional.ofNullable(this.frontendNodeGroups);
    }

    /**
     * The name of the instance.
     * 
     */
    @Import(name="instanceName", required=true)
    private Output<String> instanceName;

    /**
     * @return The name of the instance.
     * 
     */
    public Output<String> instanceName() {
        return this.instanceName;
    }

    /**
     * KmsKeyId
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return KmsKeyId
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * ObserverNodeGroups See `observerNodeGroups` below.
     * 
     */
    @Import(name="observerNodeGroups")
    private @Nullable Output<List<StarRocksInstanceObserverNodeGroupArgs>> observerNodeGroups;

    /**
     * @return ObserverNodeGroups See `observerNodeGroups` below.
     * 
     */
    public Optional<Output<List<StarRocksInstanceObserverNodeGroupArgs>>> observerNodeGroups() {
        return Optional.ofNullable(this.observerNodeGroups);
    }

    /**
     * Role name used for password-free access to OSS.
     * 
     */
    @Import(name="ossAccessingRoleName")
    private @Nullable Output<String> ossAccessingRoleName;

    /**
     * @return Role name used for password-free access to OSS.
     * 
     */
    public Optional<Output<String>> ossAccessingRoleName() {
        return Optional.ofNullable(this.ossAccessingRoleName);
    }

    /**
     * The package type of the instance:
     * - trial
     * - official
     * 
     */
    @Import(name="packageType", required=true)
    private Output<String> packageType;

    /**
     * @return The package type of the instance:
     * - trial
     * - official
     * 
     */
    public Output<String> packageType() {
        return this.packageType;
    }

    /**
     * The pay type of the instance:
     * - prePaid
     * - postPaid
     * 
     */
    @Import(name="payType", required=true)
    private Output<String> payType;

    /**
     * @return The pay type of the instance:
     * - prePaid
     * - postPaid
     * 
     */
    public Output<String> payType() {
        return this.payType;
    }

    /**
     * The duration unit for purchasing:
     * - Month
     * - Year
     *   This is only meaningful when PayType is set to PrePaid.
     * 
     */
    @Import(name="pricingCycle")
    private @Nullable Output<String> pricingCycle;

    /**
     * @return The duration unit for purchasing:
     * - Month
     * - Year
     *   This is only meaningful when PayType is set to PrePaid.
     * 
     */
    public Optional<Output<String>> pricingCycle() {
        return Optional.ofNullable(this.pricingCycle);
    }

    /**
     * Promotion
     * 
     */
    @Import(name="promotionOptionNo")
    private @Nullable Output<String> promotionOptionNo;

    /**
     * @return Promotion
     * 
     */
    public Optional<Output<String>> promotionOptionNo() {
        return Optional.ofNullable(this.promotionOptionNo);
    }

    /**
     * ResourceGroupId
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return ResourceGroupId
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The run mode of the instance:
     * - sharedNothing
     * - sharedData
     * - lakehouse
     * 
     */
    @Import(name="runMode", required=true)
    private Output<String> runMode;

    /**
     * @return The run mode of the instance:
     * - sharedNothing
     * - sharedData
     * - lakehouse
     * 
     */
    public Output<String> runMode() {
        return this.runMode;
    }

    /**
     * Tag list of the instance.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Tag list of the instance.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The version of the instance.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return The version of the instance.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     * The VPC ID of the instance.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The VPC ID of the instance.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * The VSwitches info of the instance. See `vswitches` below.
     * 
     */
    @Import(name="vswitches")
    private @Nullable Output<List<StarRocksInstanceVswitchArgs>> vswitches;

    /**
     * @return The VSwitches info of the instance. See `vswitches` below.
     * 
     */
    public Optional<Output<List<StarRocksInstanceVswitchArgs>>> vswitches() {
        return Optional.ofNullable(this.vswitches);
    }

    private StarRocksInstanceArgs() {}

    private StarRocksInstanceArgs(StarRocksInstanceArgs $) {
        this.adminPassword = $.adminPassword;
        this.autoRenew = $.autoRenew;
        this.backendNodeGroups = $.backendNodeGroups;
        this.clusterZoneId = $.clusterZoneId;
        this.duration = $.duration;
        this.encrypted = $.encrypted;
        this.frontendNodeGroups = $.frontendNodeGroups;
        this.instanceName = $.instanceName;
        this.kmsKeyId = $.kmsKeyId;
        this.observerNodeGroups = $.observerNodeGroups;
        this.ossAccessingRoleName = $.ossAccessingRoleName;
        this.packageType = $.packageType;
        this.payType = $.payType;
        this.pricingCycle = $.pricingCycle;
        this.promotionOptionNo = $.promotionOptionNo;
        this.resourceGroupId = $.resourceGroupId;
        this.runMode = $.runMode;
        this.tags = $.tags;
        this.version = $.version;
        this.vpcId = $.vpcId;
        this.vswitches = $.vswitches;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StarRocksInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StarRocksInstanceArgs $;

        public Builder() {
            $ = new StarRocksInstanceArgs();
        }

        public Builder(StarRocksInstanceArgs defaults) {
            $ = new StarRocksInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminPassword Password of admin user.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword Password of admin user.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param autoRenew Whether to enable automatic renewal. This is only meaningful when payType is set to PrePaid. Disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Whether to enable automatic renewal. This is only meaningful when payType is set to PrePaid. Disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param backendNodeGroups BackendNodeGroups See `backendNodeGroups` below.
         * 
         * @return builder
         * 
         */
        public Builder backendNodeGroups(@Nullable Output<List<StarRocksInstanceBackendNodeGroupArgs>> backendNodeGroups) {
            $.backendNodeGroups = backendNodeGroups;
            return this;
        }

        /**
         * @param backendNodeGroups BackendNodeGroups See `backendNodeGroups` below.
         * 
         * @return builder
         * 
         */
        public Builder backendNodeGroups(List<StarRocksInstanceBackendNodeGroupArgs> backendNodeGroups) {
            return backendNodeGroups(Output.of(backendNodeGroups));
        }

        /**
         * @param backendNodeGroups BackendNodeGroups See `backendNodeGroups` below.
         * 
         * @return builder
         * 
         */
        public Builder backendNodeGroups(StarRocksInstanceBackendNodeGroupArgs... backendNodeGroups) {
            return backendNodeGroups(List.of(backendNodeGroups));
        }

        /**
         * @param clusterZoneId ZoneId of instance.
         * 
         * @return builder
         * 
         */
        public Builder clusterZoneId(Output<String> clusterZoneId) {
            $.clusterZoneId = clusterZoneId;
            return this;
        }

        /**
         * @param clusterZoneId ZoneId of instance.
         * 
         * @return builder
         * 
         */
        public Builder clusterZoneId(String clusterZoneId) {
            return clusterZoneId(Output.of(clusterZoneId));
        }

        /**
         * @param duration Duration of purchase. It is only meaningful when payType is set to PrePaid.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration Duration of purchase. It is only meaningful when payType is set to PrePaid.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param encrypted Whether encrypted
         * 
         * @return builder
         * 
         */
        public Builder encrypted(@Nullable Output<Boolean> encrypted) {
            $.encrypted = encrypted;
            return this;
        }

        /**
         * @param encrypted Whether encrypted
         * 
         * @return builder
         * 
         */
        public Builder encrypted(Boolean encrypted) {
            return encrypted(Output.of(encrypted));
        }

        /**
         * @param frontendNodeGroups FrontendNodeGroups See `frontendNodeGroups` below.
         * 
         * @return builder
         * 
         */
        public Builder frontendNodeGroups(@Nullable Output<List<StarRocksInstanceFrontendNodeGroupArgs>> frontendNodeGroups) {
            $.frontendNodeGroups = frontendNodeGroups;
            return this;
        }

        /**
         * @param frontendNodeGroups FrontendNodeGroups See `frontendNodeGroups` below.
         * 
         * @return builder
         * 
         */
        public Builder frontendNodeGroups(List<StarRocksInstanceFrontendNodeGroupArgs> frontendNodeGroups) {
            return frontendNodeGroups(Output.of(frontendNodeGroups));
        }

        /**
         * @param frontendNodeGroups FrontendNodeGroups See `frontendNodeGroups` below.
         * 
         * @return builder
         * 
         */
        public Builder frontendNodeGroups(StarRocksInstanceFrontendNodeGroupArgs... frontendNodeGroups) {
            return frontendNodeGroups(List.of(frontendNodeGroups));
        }

        /**
         * @param instanceName The name of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName The name of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param kmsKeyId KmsKeyId
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId KmsKeyId
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param observerNodeGroups ObserverNodeGroups See `observerNodeGroups` below.
         * 
         * @return builder
         * 
         */
        public Builder observerNodeGroups(@Nullable Output<List<StarRocksInstanceObserverNodeGroupArgs>> observerNodeGroups) {
            $.observerNodeGroups = observerNodeGroups;
            return this;
        }

        /**
         * @param observerNodeGroups ObserverNodeGroups See `observerNodeGroups` below.
         * 
         * @return builder
         * 
         */
        public Builder observerNodeGroups(List<StarRocksInstanceObserverNodeGroupArgs> observerNodeGroups) {
            return observerNodeGroups(Output.of(observerNodeGroups));
        }

        /**
         * @param observerNodeGroups ObserverNodeGroups See `observerNodeGroups` below.
         * 
         * @return builder
         * 
         */
        public Builder observerNodeGroups(StarRocksInstanceObserverNodeGroupArgs... observerNodeGroups) {
            return observerNodeGroups(List.of(observerNodeGroups));
        }

        /**
         * @param ossAccessingRoleName Role name used for password-free access to OSS.
         * 
         * @return builder
         * 
         */
        public Builder ossAccessingRoleName(@Nullable Output<String> ossAccessingRoleName) {
            $.ossAccessingRoleName = ossAccessingRoleName;
            return this;
        }

        /**
         * @param ossAccessingRoleName Role name used for password-free access to OSS.
         * 
         * @return builder
         * 
         */
        public Builder ossAccessingRoleName(String ossAccessingRoleName) {
            return ossAccessingRoleName(Output.of(ossAccessingRoleName));
        }

        /**
         * @param packageType The package type of the instance:
         * - trial
         * - official
         * 
         * @return builder
         * 
         */
        public Builder packageType(Output<String> packageType) {
            $.packageType = packageType;
            return this;
        }

        /**
         * @param packageType The package type of the instance:
         * - trial
         * - official
         * 
         * @return builder
         * 
         */
        public Builder packageType(String packageType) {
            return packageType(Output.of(packageType));
        }

        /**
         * @param payType The pay type of the instance:
         * - prePaid
         * - postPaid
         * 
         * @return builder
         * 
         */
        public Builder payType(Output<String> payType) {
            $.payType = payType;
            return this;
        }

        /**
         * @param payType The pay type of the instance:
         * - prePaid
         * - postPaid
         * 
         * @return builder
         * 
         */
        public Builder payType(String payType) {
            return payType(Output.of(payType));
        }

        /**
         * @param pricingCycle The duration unit for purchasing:
         * - Month
         * - Year
         *   This is only meaningful when PayType is set to PrePaid.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(@Nullable Output<String> pricingCycle) {
            $.pricingCycle = pricingCycle;
            return this;
        }

        /**
         * @param pricingCycle The duration unit for purchasing:
         * - Month
         * - Year
         *   This is only meaningful when PayType is set to PrePaid.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(String pricingCycle) {
            return pricingCycle(Output.of(pricingCycle));
        }

        /**
         * @param promotionOptionNo Promotion
         * 
         * @return builder
         * 
         */
        public Builder promotionOptionNo(@Nullable Output<String> promotionOptionNo) {
            $.promotionOptionNo = promotionOptionNo;
            return this;
        }

        /**
         * @param promotionOptionNo Promotion
         * 
         * @return builder
         * 
         */
        public Builder promotionOptionNo(String promotionOptionNo) {
            return promotionOptionNo(Output.of(promotionOptionNo));
        }

        /**
         * @param resourceGroupId ResourceGroupId
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId ResourceGroupId
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param runMode The run mode of the instance:
         * - sharedNothing
         * - sharedData
         * - lakehouse
         * 
         * @return builder
         * 
         */
        public Builder runMode(Output<String> runMode) {
            $.runMode = runMode;
            return this;
        }

        /**
         * @param runMode The run mode of the instance:
         * - sharedNothing
         * - sharedData
         * - lakehouse
         * 
         * @return builder
         * 
         */
        public Builder runMode(String runMode) {
            return runMode(Output.of(runMode));
        }

        /**
         * @param tags Tag list of the instance.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tag list of the instance.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param version The version of the instance.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the instance.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param vpcId The VPC ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The VPC ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitches The VSwitches info of the instance. See `vswitches` below.
         * 
         * @return builder
         * 
         */
        public Builder vswitches(@Nullable Output<List<StarRocksInstanceVswitchArgs>> vswitches) {
            $.vswitches = vswitches;
            return this;
        }

        /**
         * @param vswitches The VSwitches info of the instance. See `vswitches` below.
         * 
         * @return builder
         * 
         */
        public Builder vswitches(List<StarRocksInstanceVswitchArgs> vswitches) {
            return vswitches(Output.of(vswitches));
        }

        /**
         * @param vswitches The VSwitches info of the instance. See `vswitches` below.
         * 
         * @return builder
         * 
         */
        public Builder vswitches(StarRocksInstanceVswitchArgs... vswitches) {
            return vswitches(List.of(vswitches));
        }

        public StarRocksInstanceArgs build() {
            if ($.adminPassword == null) {
                throw new MissingRequiredPropertyException("StarRocksInstanceArgs", "adminPassword");
            }
            if ($.clusterZoneId == null) {
                throw new MissingRequiredPropertyException("StarRocksInstanceArgs", "clusterZoneId");
            }
            if ($.instanceName == null) {
                throw new MissingRequiredPropertyException("StarRocksInstanceArgs", "instanceName");
            }
            if ($.packageType == null) {
                throw new MissingRequiredPropertyException("StarRocksInstanceArgs", "packageType");
            }
            if ($.payType == null) {
                throw new MissingRequiredPropertyException("StarRocksInstanceArgs", "payType");
            }
            if ($.runMode == null) {
                throw new MissingRequiredPropertyException("StarRocksInstanceArgs", "runMode");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("StarRocksInstanceArgs", "version");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("StarRocksInstanceArgs", "vpcId");
            }
            return $;
        }
    }

}
