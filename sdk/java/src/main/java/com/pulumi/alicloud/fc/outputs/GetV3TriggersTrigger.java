// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc.outputs;

import com.pulumi.alicloud.fc.outputs.GetV3TriggersTriggerHttpTrigger;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetV3TriggersTrigger {
    /**
     * @return Creation time
     * 
     */
    private String createTime;
    /**
     * @return Description of the trigger
     * 
     */
    private String description;
    /**
     * @return HTTP trigger information
     * 
     */
    private GetV3TriggersTriggerHttpTrigger httpTrigger;
    /**
     * @return The ID of the resource supplied above.
     * 
     */
    private String id;
    /**
     * @return The role required by the event source (such as OSS) to call the function.
     * 
     */
    private String invocationRole;
    /**
     * @return The last modified time of the trigger
     * 
     */
    private String lastModifiedTime;
    /**
     * @return The version or alias of the function
     * 
     */
    private String qualifier;
    /**
     * @return Trigger Event source ARN
     * 
     */
    private String sourceArn;
    /**
     * @return The state of the trigger
     * 
     */
    private String status;
    /**
     * @return Resource identity of the function
     * 
     */
    private String targetArn;
    /**
     * @return Trigger configuration. The configuration varies for different types of triggers.
     * 
     */
    private String triggerConfig;
    /**
     * @return Trigger ID
     * 
     */
    private String triggerId;
    /**
     * @return Trigger Name
     * 
     */
    private String triggerName;
    /**
     * @return The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mns_topic and eventbridge.
     * 
     */
    private String triggerType;

    private GetV3TriggersTrigger() {}
    /**
     * @return Creation time
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Description of the trigger
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return HTTP trigger information
     * 
     */
    public GetV3TriggersTriggerHttpTrigger httpTrigger() {
        return this.httpTrigger;
    }
    /**
     * @return The ID of the resource supplied above.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The role required by the event source (such as OSS) to call the function.
     * 
     */
    public String invocationRole() {
        return this.invocationRole;
    }
    /**
     * @return The last modified time of the trigger
     * 
     */
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }
    /**
     * @return The version or alias of the function
     * 
     */
    public String qualifier() {
        return this.qualifier;
    }
    /**
     * @return Trigger Event source ARN
     * 
     */
    public String sourceArn() {
        return this.sourceArn;
    }
    /**
     * @return The state of the trigger
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Resource identity of the function
     * 
     */
    public String targetArn() {
        return this.targetArn;
    }
    /**
     * @return Trigger configuration. The configuration varies for different types of triggers.
     * 
     */
    public String triggerConfig() {
        return this.triggerConfig;
    }
    /**
     * @return Trigger ID
     * 
     */
    public String triggerId() {
        return this.triggerId;
    }
    /**
     * @return Trigger Name
     * 
     */
    public String triggerName() {
        return this.triggerName;
    }
    /**
     * @return The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mns_topic and eventbridge.
     * 
     */
    public String triggerType() {
        return this.triggerType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetV3TriggersTrigger defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String description;
        private GetV3TriggersTriggerHttpTrigger httpTrigger;
        private String id;
        private String invocationRole;
        private String lastModifiedTime;
        private String qualifier;
        private String sourceArn;
        private String status;
        private String targetArn;
        private String triggerConfig;
        private String triggerId;
        private String triggerName;
        private String triggerType;
        public Builder() {}
        public Builder(GetV3TriggersTrigger defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.httpTrigger = defaults.httpTrigger;
    	      this.id = defaults.id;
    	      this.invocationRole = defaults.invocationRole;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.qualifier = defaults.qualifier;
    	      this.sourceArn = defaults.sourceArn;
    	      this.status = defaults.status;
    	      this.targetArn = defaults.targetArn;
    	      this.triggerConfig = defaults.triggerConfig;
    	      this.triggerId = defaults.triggerId;
    	      this.triggerName = defaults.triggerName;
    	      this.triggerType = defaults.triggerType;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder httpTrigger(GetV3TriggersTriggerHttpTrigger httpTrigger) {
            if (httpTrigger == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "httpTrigger");
            }
            this.httpTrigger = httpTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder invocationRole(String invocationRole) {
            if (invocationRole == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "invocationRole");
            }
            this.invocationRole = invocationRole;
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedTime(String lastModifiedTime) {
            if (lastModifiedTime == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "lastModifiedTime");
            }
            this.lastModifiedTime = lastModifiedTime;
            return this;
        }
        @CustomType.Setter
        public Builder qualifier(String qualifier) {
            if (qualifier == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "qualifier");
            }
            this.qualifier = qualifier;
            return this;
        }
        @CustomType.Setter
        public Builder sourceArn(String sourceArn) {
            if (sourceArn == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "sourceArn");
            }
            this.sourceArn = sourceArn;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder targetArn(String targetArn) {
            if (targetArn == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "targetArn");
            }
            this.targetArn = targetArn;
            return this;
        }
        @CustomType.Setter
        public Builder triggerConfig(String triggerConfig) {
            if (triggerConfig == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "triggerConfig");
            }
            this.triggerConfig = triggerConfig;
            return this;
        }
        @CustomType.Setter
        public Builder triggerId(String triggerId) {
            if (triggerId == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "triggerId");
            }
            this.triggerId = triggerId;
            return this;
        }
        @CustomType.Setter
        public Builder triggerName(String triggerName) {
            if (triggerName == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "triggerName");
            }
            this.triggerName = triggerName;
            return this;
        }
        @CustomType.Setter
        public Builder triggerType(String triggerType) {
            if (triggerType == null) {
              throw new MissingRequiredPropertyException("GetV3TriggersTrigger", "triggerType");
            }
            this.triggerType = triggerType;
            return this;
        }
        public GetV3TriggersTrigger build() {
            final var _resultValue = new GetV3TriggersTrigger();
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.httpTrigger = httpTrigger;
            _resultValue.id = id;
            _resultValue.invocationRole = invocationRole;
            _resultValue.lastModifiedTime = lastModifiedTime;
            _resultValue.qualifier = qualifier;
            _resultValue.sourceArn = sourceArn;
            _resultValue.status = status;
            _resultValue.targetArn = targetArn;
            _resultValue.triggerConfig = triggerConfig;
            _resultValue.triggerId = triggerId;
            _resultValue.triggerName = triggerName;
            _resultValue.triggerType = triggerType;
            return _resultValue;
        }
    }
}
