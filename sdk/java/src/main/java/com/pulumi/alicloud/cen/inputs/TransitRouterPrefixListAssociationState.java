// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransitRouterPrefixListAssociationState extends com.pulumi.resources.ResourceArgs {

    public static final TransitRouterPrefixListAssociationState Empty = new TransitRouterPrefixListAssociationState();

    /**
     * The ID of the next hop. **NOTE:** If `nextHop` is set to `BlackHole`, you must set this parameter to `BlackHole`.
     * 
     */
    @Import(name="nextHop")
    private @Nullable Output<String> nextHop;

    /**
     * @return The ID of the next hop. **NOTE:** If `nextHop` is set to `BlackHole`, you must set this parameter to `BlackHole`.
     * 
     */
    public Optional<Output<String>> nextHop() {
        return Optional.ofNullable(this.nextHop);
    }

    /**
     * The type of the next hop. Valid values:
     * - `BlackHole`: Specifies that all the CIDR blocks in the prefix list are blackhole routes. Packets destined for the CIDR blocks are dropped.
     * - `VPC`: Specifies that the next hop of the CIDR blocks in the prefix list is a virtual private cloud (VPC) connection.
     * - `VBR`: Specifies that the next hop of the CIDR blocks in the prefix list is a virtual border router (VBR) connection.
     * - `TR`: Specifies that the next hop of the CIDR blocks in the prefix list is an inter-region connection.
     * 
     */
    @Import(name="nextHopType")
    private @Nullable Output<String> nextHopType;

    /**
     * @return The type of the next hop. Valid values:
     * - `BlackHole`: Specifies that all the CIDR blocks in the prefix list are blackhole routes. Packets destined for the CIDR blocks are dropped.
     * - `VPC`: Specifies that the next hop of the CIDR blocks in the prefix list is a virtual private cloud (VPC) connection.
     * - `VBR`: Specifies that the next hop of the CIDR blocks in the prefix list is a virtual border router (VBR) connection.
     * - `TR`: Specifies that the next hop of the CIDR blocks in the prefix list is an inter-region connection.
     * 
     */
    public Optional<Output<String>> nextHopType() {
        return Optional.ofNullable(this.nextHopType);
    }

    /**
     * The ID of the Alibaba Cloud account to which the prefix list belongs.
     * 
     */
    @Import(name="ownerUid")
    private @Nullable Output<Integer> ownerUid;

    /**
     * @return The ID of the Alibaba Cloud account to which the prefix list belongs.
     * 
     */
    public Optional<Output<Integer>> ownerUid() {
        return Optional.ofNullable(this.ownerUid);
    }

    /**
     * The ID of the prefix list.
     * 
     */
    @Import(name="prefixListId")
    private @Nullable Output<String> prefixListId;

    /**
     * @return The ID of the prefix list.
     * 
     */
    public Optional<Output<String>> prefixListId() {
        return Optional.ofNullable(this.prefixListId);
    }

    /**
     * The status of the prefix list.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the prefix list.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID of the transit router.
     * 
     */
    @Import(name="transitRouterId")
    private @Nullable Output<String> transitRouterId;

    /**
     * @return The ID of the transit router.
     * 
     */
    public Optional<Output<String>> transitRouterId() {
        return Optional.ofNullable(this.transitRouterId);
    }

    /**
     * The ID of the route table of the transit router.
     * 
     */
    @Import(name="transitRouterTableId")
    private @Nullable Output<String> transitRouterTableId;

    /**
     * @return The ID of the route table of the transit router.
     * 
     */
    public Optional<Output<String>> transitRouterTableId() {
        return Optional.ofNullable(this.transitRouterTableId);
    }

    private TransitRouterPrefixListAssociationState() {}

    private TransitRouterPrefixListAssociationState(TransitRouterPrefixListAssociationState $) {
        this.nextHop = $.nextHop;
        this.nextHopType = $.nextHopType;
        this.ownerUid = $.ownerUid;
        this.prefixListId = $.prefixListId;
        this.status = $.status;
        this.transitRouterId = $.transitRouterId;
        this.transitRouterTableId = $.transitRouterTableId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransitRouterPrefixListAssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransitRouterPrefixListAssociationState $;

        public Builder() {
            $ = new TransitRouterPrefixListAssociationState();
        }

        public Builder(TransitRouterPrefixListAssociationState defaults) {
            $ = new TransitRouterPrefixListAssociationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param nextHop The ID of the next hop. **NOTE:** If `nextHop` is set to `BlackHole`, you must set this parameter to `BlackHole`.
         * 
         * @return builder
         * 
         */
        public Builder nextHop(@Nullable Output<String> nextHop) {
            $.nextHop = nextHop;
            return this;
        }

        /**
         * @param nextHop The ID of the next hop. **NOTE:** If `nextHop` is set to `BlackHole`, you must set this parameter to `BlackHole`.
         * 
         * @return builder
         * 
         */
        public Builder nextHop(String nextHop) {
            return nextHop(Output.of(nextHop));
        }

        /**
         * @param nextHopType The type of the next hop. Valid values:
         * - `BlackHole`: Specifies that all the CIDR blocks in the prefix list are blackhole routes. Packets destined for the CIDR blocks are dropped.
         * - `VPC`: Specifies that the next hop of the CIDR blocks in the prefix list is a virtual private cloud (VPC) connection.
         * - `VBR`: Specifies that the next hop of the CIDR blocks in the prefix list is a virtual border router (VBR) connection.
         * - `TR`: Specifies that the next hop of the CIDR blocks in the prefix list is an inter-region connection.
         * 
         * @return builder
         * 
         */
        public Builder nextHopType(@Nullable Output<String> nextHopType) {
            $.nextHopType = nextHopType;
            return this;
        }

        /**
         * @param nextHopType The type of the next hop. Valid values:
         * - `BlackHole`: Specifies that all the CIDR blocks in the prefix list are blackhole routes. Packets destined for the CIDR blocks are dropped.
         * - `VPC`: Specifies that the next hop of the CIDR blocks in the prefix list is a virtual private cloud (VPC) connection.
         * - `VBR`: Specifies that the next hop of the CIDR blocks in the prefix list is a virtual border router (VBR) connection.
         * - `TR`: Specifies that the next hop of the CIDR blocks in the prefix list is an inter-region connection.
         * 
         * @return builder
         * 
         */
        public Builder nextHopType(String nextHopType) {
            return nextHopType(Output.of(nextHopType));
        }

        /**
         * @param ownerUid The ID of the Alibaba Cloud account to which the prefix list belongs.
         * 
         * @return builder
         * 
         */
        public Builder ownerUid(@Nullable Output<Integer> ownerUid) {
            $.ownerUid = ownerUid;
            return this;
        }

        /**
         * @param ownerUid The ID of the Alibaba Cloud account to which the prefix list belongs.
         * 
         * @return builder
         * 
         */
        public Builder ownerUid(Integer ownerUid) {
            return ownerUid(Output.of(ownerUid));
        }

        /**
         * @param prefixListId The ID of the prefix list.
         * 
         * @return builder
         * 
         */
        public Builder prefixListId(@Nullable Output<String> prefixListId) {
            $.prefixListId = prefixListId;
            return this;
        }

        /**
         * @param prefixListId The ID of the prefix list.
         * 
         * @return builder
         * 
         */
        public Builder prefixListId(String prefixListId) {
            return prefixListId(Output.of(prefixListId));
        }

        /**
         * @param status The status of the prefix list.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the prefix list.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param transitRouterId The ID of the transit router.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterId(@Nullable Output<String> transitRouterId) {
            $.transitRouterId = transitRouterId;
            return this;
        }

        /**
         * @param transitRouterId The ID of the transit router.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterId(String transitRouterId) {
            return transitRouterId(Output.of(transitRouterId));
        }

        /**
         * @param transitRouterTableId The ID of the route table of the transit router.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterTableId(@Nullable Output<String> transitRouterTableId) {
            $.transitRouterTableId = transitRouterTableId;
            return this;
        }

        /**
         * @param transitRouterTableId The ID of the route table of the transit router.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterTableId(String transitRouterTableId) {
            return transitRouterTableId(Output.of(transitRouterTableId));
        }

        public TransitRouterPrefixListAssociationState build() {
            return $;
        }
    }

}
