// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChartRepositoryState extends com.pulumi.resources.ResourceArgs {

    public static final ChartRepositoryState Empty = new ChartRepositoryState();

    /**
     * The ID of the Container Registry instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The ID of the Container Registry instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The name of the repository that you want to create.
     * 
     */
    @Import(name="repoName")
    private @Nullable Output<String> repoName;

    /**
     * @return The name of the repository that you want to create.
     * 
     */
    public Optional<Output<String>> repoName() {
        return Optional.ofNullable(this.repoName);
    }

    /**
     * The namespace to which the repository belongs.
     * 
     */
    @Import(name="repoNamespaceName")
    private @Nullable Output<String> repoNamespaceName;

    /**
     * @return The namespace to which the repository belongs.
     * 
     */
    public Optional<Output<String>> repoNamespaceName() {
        return Optional.ofNullable(this.repoNamespaceName);
    }

    /**
     * The default repository type. Valid values: `PUBLIC`,`PRIVATE`.
     * 
     */
    @Import(name="repoType")
    private @Nullable Output<String> repoType;

    /**
     * @return The default repository type. Valid values: `PUBLIC`,`PRIVATE`.
     * 
     */
    public Optional<Output<String>> repoType() {
        return Optional.ofNullable(this.repoType);
    }

    /**
     * The summary about the repository.
     * 
     */
    @Import(name="summary")
    private @Nullable Output<String> summary;

    /**
     * @return The summary about the repository.
     * 
     */
    public Optional<Output<String>> summary() {
        return Optional.ofNullable(this.summary);
    }

    private ChartRepositoryState() {}

    private ChartRepositoryState(ChartRepositoryState $) {
        this.instanceId = $.instanceId;
        this.repoName = $.repoName;
        this.repoNamespaceName = $.repoNamespaceName;
        this.repoType = $.repoType;
        this.summary = $.summary;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChartRepositoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChartRepositoryState $;

        public Builder() {
            $ = new ChartRepositoryState();
        }

        public Builder(ChartRepositoryState defaults) {
            $ = new ChartRepositoryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId The ID of the Container Registry instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the Container Registry instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param repoName The name of the repository that you want to create.
         * 
         * @return builder
         * 
         */
        public Builder repoName(@Nullable Output<String> repoName) {
            $.repoName = repoName;
            return this;
        }

        /**
         * @param repoName The name of the repository that you want to create.
         * 
         * @return builder
         * 
         */
        public Builder repoName(String repoName) {
            return repoName(Output.of(repoName));
        }

        /**
         * @param repoNamespaceName The namespace to which the repository belongs.
         * 
         * @return builder
         * 
         */
        public Builder repoNamespaceName(@Nullable Output<String> repoNamespaceName) {
            $.repoNamespaceName = repoNamespaceName;
            return this;
        }

        /**
         * @param repoNamespaceName The namespace to which the repository belongs.
         * 
         * @return builder
         * 
         */
        public Builder repoNamespaceName(String repoNamespaceName) {
            return repoNamespaceName(Output.of(repoNamespaceName));
        }

        /**
         * @param repoType The default repository type. Valid values: `PUBLIC`,`PRIVATE`.
         * 
         * @return builder
         * 
         */
        public Builder repoType(@Nullable Output<String> repoType) {
            $.repoType = repoType;
            return this;
        }

        /**
         * @param repoType The default repository type. Valid values: `PUBLIC`,`PRIVATE`.
         * 
         * @return builder
         * 
         */
        public Builder repoType(String repoType) {
            return repoType(Output.of(repoType));
        }

        /**
         * @param summary The summary about the repository.
         * 
         * @return builder
         * 
         */
        public Builder summary(@Nullable Output<String> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary The summary about the repository.
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        public ChartRepositoryState build() {
            return $;
        }
    }

}
