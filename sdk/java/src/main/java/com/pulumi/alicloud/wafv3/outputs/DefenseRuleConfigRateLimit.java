// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3.outputs;

import com.pulumi.alicloud.wafv3.outputs.DefenseRuleConfigRateLimitStatus;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DefenseRuleConfigRateLimit {
    /**
     * @return The statistical period, in seconds. This parameter specifies the period during which access counts are collected, and works with the Threshold parameter.
     * Valid values: 1 to 1800 seconds.
     * 
     */
    private @Nullable Integer interval;
    /**
     * @return Response code frequency setting. The description is in the JSON string format. See `status` below.
     * 
     */
    private @Nullable DefenseRuleConfigRateLimitStatus status;
    /**
     * @return The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
     * 
     */
    private @Nullable String subKey;
    /**
     * @return The type of the statistical object. Valid values:
     * - remote_addr (default): indicates IP.
     * - cookie.acw_tc: indicates session.
     * - header: indicates custom header. If you use custom headers, you must specify the headers in subkey.
     * - queryarg: indicates custom parameters. If you use custom parameters, you must specify the parameters in subkey.
     * - cookie: indicates custom cookies. If you use custom cookies, you must specify the cookies in subkey.
     * 
     */
    private @Nullable String target;
    /**
     * @return The maximum number of requests that can be sent from a statistical object.
     * 
     */
    private @Nullable Integer threshold;
    /**
     * @return The period of time during which you want the specified action to be valid. Unit: seconds.
     * Valid values: 60 to 86400.
     * 
     */
    private @Nullable Integer ttl;

    private DefenseRuleConfigRateLimit() {}
    /**
     * @return The statistical period, in seconds. This parameter specifies the period during which access counts are collected, and works with the Threshold parameter.
     * Valid values: 1 to 1800 seconds.
     * 
     */
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return Response code frequency setting. The description is in the JSON string format. See `status` below.
     * 
     */
    public Optional<DefenseRuleConfigRateLimitStatus> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
     * 
     */
    public Optional<String> subKey() {
        return Optional.ofNullable(this.subKey);
    }
    /**
     * @return The type of the statistical object. Valid values:
     * - remote_addr (default): indicates IP.
     * - cookie.acw_tc: indicates session.
     * - header: indicates custom header. If you use custom headers, you must specify the headers in subkey.
     * - queryarg: indicates custom parameters. If you use custom parameters, you must specify the parameters in subkey.
     * - cookie: indicates custom cookies. If you use custom cookies, you must specify the cookies in subkey.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return The maximum number of requests that can be sent from a statistical object.
     * 
     */
    public Optional<Integer> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    /**
     * @return The period of time during which you want the specified action to be valid. Unit: seconds.
     * Valid values: 60 to 86400.
     * 
     */
    public Optional<Integer> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DefenseRuleConfigRateLimit defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer interval;
        private @Nullable DefenseRuleConfigRateLimitStatus status;
        private @Nullable String subKey;
        private @Nullable String target;
        private @Nullable Integer threshold;
        private @Nullable Integer ttl;
        public Builder() {}
        public Builder(DefenseRuleConfigRateLimit defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interval = defaults.interval;
    	      this.status = defaults.status;
    	      this.subKey = defaults.subKey;
    	      this.target = defaults.target;
    	      this.threshold = defaults.threshold;
    	      this.ttl = defaults.ttl;
        }

        @CustomType.Setter
        public Builder interval(@Nullable Integer interval) {

            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable DefenseRuleConfigRateLimitStatus status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subKey(@Nullable String subKey) {

            this.subKey = subKey;
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable String target) {

            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable Integer threshold) {

            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(@Nullable Integer ttl) {

            this.ttl = ttl;
            return this;
        }
        public DefenseRuleConfigRateLimit build() {
            final var _resultValue = new DefenseRuleConfigRateLimit();
            _resultValue.interval = interval;
            _resultValue.status = status;
            _resultValue.subKey = subKey;
            _resultValue.target = target;
            _resultValue.threshold = threshold;
            _resultValue.ttl = ttl;
            return _resultValue;
        }
    }
}
