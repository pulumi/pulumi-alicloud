// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eci;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.eci.ImageCacheArgs;
import com.pulumi.alicloud.eci.inputs.ImageCacheState;
import com.pulumi.alicloud.eci.outputs.ImageCacheImageRegistryCredential;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * An ECI Image Cache can help user to solve the time-consuming problem of image pull. For information about Alicloud ECI Image Cache and how to use it, see [What is Resource Alicloud ECI Image Cache](https://www.alibabacloud.com/help/doc-detail/146891.htm).
 * 
 * &gt; **NOTE:** Available since v1.89.0.
 * 
 * &gt; **NOTE:** Each image cache corresponds to a snapshot, and the user does not delete the snapshot directly, otherwise the cache will fail.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.eci.EciFunctions;
 * import com.pulumi.alicloud.eci.inputs.GetZonesArgs;
 * import com.pulumi.alicloud.vpc.Network;
 * import com.pulumi.alicloud.vpc.NetworkArgs;
 * import com.pulumi.alicloud.vpc.Switch;
 * import com.pulumi.alicloud.vpc.SwitchArgs;
 * import com.pulumi.alicloud.ecs.SecurityGroup;
 * import com.pulumi.alicloud.ecs.SecurityGroupArgs;
 * import com.pulumi.alicloud.ecs.EipAddress;
 * import com.pulumi.alicloud.ecs.EipAddressArgs;
 * import com.pulumi.alicloud.AlicloudFunctions;
 * import com.pulumi.alicloud.inputs.GetRegionsArgs;
 * import com.pulumi.alicloud.eci.ImageCache;
 * import com.pulumi.alicloud.eci.ImageCacheArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("tf-example");
 *         final var default = EciFunctions.getZones(GetZonesArgs.builder()
 *             .build());
 * 
 *         var defaultNetwork = new Network("defaultNetwork", NetworkArgs.builder()
 *             .vpcName(name)
 *             .cidrBlock("10.0.0.0/8")
 *             .build());
 * 
 *         var defaultSwitch = new Switch("defaultSwitch", SwitchArgs.builder()
 *             .vswitchName(name)
 *             .cidrBlock("10.1.0.0/16")
 *             .vpcId(defaultNetwork.id())
 *             .zoneId(default_.zones()[0].zoneIds()[0])
 *             .build());
 * 
 *         var defaultSecurityGroup = new SecurityGroup("defaultSecurityGroup", SecurityGroupArgs.builder()
 *             .name(name)
 *             .vpcId(defaultNetwork.id())
 *             .build());
 * 
 *         var defaultEipAddress = new EipAddress("defaultEipAddress", EipAddressArgs.builder()
 *             .isp("BGP")
 *             .addressName(name)
 *             .netmode("public")
 *             .bandwidth("1")
 *             .securityProtectionTypes("AntiDDoS_Enhanced")
 *             .paymentType("PayAsYouGo")
 *             .build());
 * 
 *         final var defaultGetRegions = AlicloudFunctions.getRegions(GetRegionsArgs.builder()
 *             .current(true)
 *             .build());
 * 
 *         var defaultImageCache = new ImageCache("defaultImageCache", ImageCacheArgs.builder()
 *             .imageCacheName(name)
 *             .images(String.format("registry-vpc.%s.aliyuncs.com/eci_open/nginx:alpine", defaultGetRegions.regions()[0].id()))
 *             .securityGroupId(defaultSecurityGroup.id())
 *             .vswitchId(defaultSwitch.id())
 *             .eipInstanceId(defaultEipAddress.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ECI Image Cache can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:eci/imageCache:ImageCache example abc123456
 * ```
 * 
 */
@ResourceType(type="alicloud:eci/imageCache:ImageCache")
public class ImageCache extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the container group job that is used to create the image cache.
     * 
     */
    @Export(name="containerGroupId", refs={String.class}, tree="[0]")
    private Output<String> containerGroupId;

    /**
     * @return The ID of the container group job that is used to create the image cache.
     * 
     */
    public Output<String> containerGroupId() {
        return this.containerGroupId;
    }
    /**
     * The instance ID of the Elastic IP Address (EIP). If you want to pull images from the Internet, you must specify an EIP to make sure that the container group can access the Internet. You can also configure the network address translation (NAT) gateway. We recommend that you configure the NAT gateway for the Internet access. Refer to [Public Network Access Method](https://help.aliyun.com/document_detail/99146.html)
     * 
     */
    @Export(name="eipInstanceId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> eipInstanceId;

    /**
     * @return The instance ID of the Elastic IP Address (EIP). If you want to pull images from the Internet, you must specify an EIP to make sure that the container group can access the Internet. You can also configure the network address translation (NAT) gateway. We recommend that you configure the NAT gateway for the Internet access. Refer to [Public Network Access Method](https://help.aliyun.com/document_detail/99146.html)
     * 
     */
    public Output<Optional<String>> eipInstanceId() {
        return Codegen.optional(this.eipInstanceId);
    }
    /**
     * The name of the image cache.
     * 
     */
    @Export(name="imageCacheName", refs={String.class}, tree="[0]")
    private Output<String> imageCacheName;

    /**
     * @return The name of the image cache.
     * 
     */
    public Output<String> imageCacheName() {
        return this.imageCacheName;
    }
    /**
     * The size of the image cache. Default to `20`. Unit: GiB.
     * 
     */
    @Export(name="imageCacheSize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> imageCacheSize;

    /**
     * @return The size of the image cache. Default to `20`. Unit: GiB.
     * 
     */
    public Output<Optional<Integer>> imageCacheSize() {
        return Codegen.optional(this.imageCacheSize);
    }
    /**
     * The Image Registry parameters about the image to be cached. See `imageRegistryCredential` below.
     * 
     */
    @Export(name="imageRegistryCredentials", refs={List.class,ImageCacheImageRegistryCredential.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ImageCacheImageRegistryCredential>> imageRegistryCredentials;

    /**
     * @return The Image Registry parameters about the image to be cached. See `imageRegistryCredential` below.
     * 
     */
    public Output<Optional<List<ImageCacheImageRegistryCredential>>> imageRegistryCredentials() {
        return Codegen.optional(this.imageRegistryCredentials);
    }
    /**
     * The images to be cached. The image name must be versioned.
     * 
     */
    @Export(name="images", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> images;

    /**
     * @return The images to be cached. The image name must be versioned.
     * 
     */
    public Output<List<String>> images() {
        return this.images;
    }
    /**
     * The ID of the resource group.
     * 
     */
    @Export(name="resourceGroupId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Output<Optional<String>> resourceGroupId() {
        return Codegen.optional(this.resourceGroupId);
    }
    /**
     * The retention days of the image cache. Once the image cache expires, it will be cleared. By default, the image cache never expires. Note: The image cache that fails to be created is retained for only one day.
     * 
     */
    @Export(name="retentionDays", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> retentionDays;

    /**
     * @return The retention days of the image cache. Once the image cache expires, it will be cleared. By default, the image cache never expires. Note: The image cache that fails to be created is retained for only one day.
     * 
     */
    public Output<Optional<Integer>> retentionDays() {
        return Codegen.optional(this.retentionDays);
    }
    /**
     * The ID of the security group. You do not need to specify the same security group as the container group.
     * 
     */
    @Export(name="securityGroupId", refs={String.class}, tree="[0]")
    private Output<String> securityGroupId;

    /**
     * @return The ID of the security group. You do not need to specify the same security group as the container group.
     * 
     */
    public Output<String> securityGroupId() {
        return this.securityGroupId;
    }
    /**
     * The status of the image cache.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The status of the image cache.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The ID of the VSwitch. You do not need to specify the same VSwitch as the container group.
     * 
     */
    @Export(name="vswitchId", refs={String.class}, tree="[0]")
    private Output<String> vswitchId;

    /**
     * @return The ID of the VSwitch. You do not need to specify the same VSwitch as the container group.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }
    /**
     * The zone id to cache image.
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> zoneId;

    /**
     * @return The zone id to cache image.
     * 
     */
    public Output<Optional<String>> zoneId() {
        return Codegen.optional(this.zoneId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ImageCache(java.lang.String name) {
        this(name, ImageCacheArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ImageCache(java.lang.String name, ImageCacheArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ImageCache(java.lang.String name, ImageCacheArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:eci/imageCache:ImageCache", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ImageCache(java.lang.String name, Output<java.lang.String> id, @Nullable ImageCacheState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:eci/imageCache:ImageCache", name, state, makeResourceOptions(options, id), false);
    }

    private static ImageCacheArgs makeArgs(ImageCacheArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ImageCacheArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ImageCache get(java.lang.String name, Output<java.lang.String> id, @Nullable ImageCacheState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ImageCache(name, id, state, options);
    }
}
