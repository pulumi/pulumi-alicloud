// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.apigateway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcAccessArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcAccessArgs Empty = new VpcAccessArgs();

    /**
     * ID of the instance in VPC (ECS/Server Load Balance).
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return ID of the instance in VPC (ECS/Server Load Balance).
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The name of the vpc authorization.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the vpc authorization.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ID of the port corresponding to the instance.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return ID of the port corresponding to the instance.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The vpc id of the vpc authorization.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The vpc id of the vpc authorization.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    private VpcAccessArgs() {}

    private VpcAccessArgs(VpcAccessArgs $) {
        this.instanceId = $.instanceId;
        this.name = $.name;
        this.port = $.port;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcAccessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcAccessArgs $;

        public Builder() {
            $ = new VpcAccessArgs();
        }

        public Builder(VpcAccessArgs defaults) {
            $ = new VpcAccessArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId ID of the instance in VPC (ECS/Server Load Balance).
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId ID of the instance in VPC (ECS/Server Load Balance).
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param name The name of the vpc authorization.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the vpc authorization.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port ID of the port corresponding to the instance.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port ID of the port corresponding to the instance.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param vpcId The vpc id of the vpc authorization.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The vpc id of the vpc authorization.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public VpcAccessArgs build() {
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("VpcAccessArgs", "instanceId");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("VpcAccessArgs", "port");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("VpcAccessArgs", "vpcId");
            }
            return $;
        }
    }

}
