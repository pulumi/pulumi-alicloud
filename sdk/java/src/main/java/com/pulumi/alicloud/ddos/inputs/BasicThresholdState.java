// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ddos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BasicThresholdState extends com.pulumi.resources.ResourceArgs {

    public static final BasicThresholdState Empty = new BasicThresholdState();

    /**
     * Specifies the traffic scrubbing threshold. Unit: Mbit/s. The traffic scrubbing threshold cannot exceed the peak inbound or outbound Internet traffic, whichever is larger, of the asset.
     * 
     */
    @Import(name="bps")
    private @Nullable Output<Integer> bps;

    /**
     * @return Specifies the traffic scrubbing threshold. Unit: Mbit/s. The traffic scrubbing threshold cannot exceed the peak inbound or outbound Internet traffic, whichever is larger, of the asset.
     * 
     */
    public Optional<Output<Integer>> bps() {
        return Optional.ofNullable(this.bps);
    }

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The type of the Instance. Valid values: `ecs`,`slb`,`eip`.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return The type of the Instance. Valid values: `ecs`,`slb`,`eip`.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * The IP address of the public IP address asset.
     * 
     */
    @Import(name="internetIp")
    private @Nullable Output<String> internetIp;

    /**
     * @return The IP address of the public IP address asset.
     * 
     */
    public Optional<Output<String>> internetIp() {
        return Optional.ofNullable(this.internetIp);
    }

    /**
     * Maximum flow cleaning threshold. Unit: Mbps.
     * 
     */
    @Import(name="maxBps")
    private @Nullable Output<Integer> maxBps;

    /**
     * @return Maximum flow cleaning threshold. Unit: Mbps.
     * 
     */
    public Optional<Output<Integer>> maxBps() {
        return Optional.ofNullable(this.maxBps);
    }

    /**
     * The maximum number of messages cleaning threshold. Unit: pps.
     * 
     */
    @Import(name="maxPps")
    private @Nullable Output<Integer> maxPps;

    /**
     * @return The maximum number of messages cleaning threshold. Unit: pps.
     * 
     */
    public Optional<Output<Integer>> maxPps() {
        return Optional.ofNullable(this.maxPps);
    }

    /**
     * The current message number cleaning threshold. Unit: pps.
     * 
     */
    @Import(name="pps")
    private @Nullable Output<Integer> pps;

    /**
     * @return The current message number cleaning threshold. Unit: pps.
     * 
     */
    public Optional<Output<Integer>> pps() {
        return Optional.ofNullable(this.pps);
    }

    private BasicThresholdState() {}

    private BasicThresholdState(BasicThresholdState $) {
        this.bps = $.bps;
        this.instanceId = $.instanceId;
        this.instanceType = $.instanceType;
        this.internetIp = $.internetIp;
        this.maxBps = $.maxBps;
        this.maxPps = $.maxPps;
        this.pps = $.pps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BasicThresholdState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BasicThresholdState $;

        public Builder() {
            $ = new BasicThresholdState();
        }

        public Builder(BasicThresholdState defaults) {
            $ = new BasicThresholdState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bps Specifies the traffic scrubbing threshold. Unit: Mbit/s. The traffic scrubbing threshold cannot exceed the peak inbound or outbound Internet traffic, whichever is larger, of the asset.
         * 
         * @return builder
         * 
         */
        public Builder bps(@Nullable Output<Integer> bps) {
            $.bps = bps;
            return this;
        }

        /**
         * @param bps Specifies the traffic scrubbing threshold. Unit: Mbit/s. The traffic scrubbing threshold cannot exceed the peak inbound or outbound Internet traffic, whichever is larger, of the asset.
         * 
         * @return builder
         * 
         */
        public Builder bps(Integer bps) {
            return bps(Output.of(bps));
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param instanceType The type of the Instance. Valid values: `ecs`,`slb`,`eip`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The type of the Instance. Valid values: `ecs`,`slb`,`eip`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param internetIp The IP address of the public IP address asset.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(@Nullable Output<String> internetIp) {
            $.internetIp = internetIp;
            return this;
        }

        /**
         * @param internetIp The IP address of the public IP address asset.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(String internetIp) {
            return internetIp(Output.of(internetIp));
        }

        /**
         * @param maxBps Maximum flow cleaning threshold. Unit: Mbps.
         * 
         * @return builder
         * 
         */
        public Builder maxBps(@Nullable Output<Integer> maxBps) {
            $.maxBps = maxBps;
            return this;
        }

        /**
         * @param maxBps Maximum flow cleaning threshold. Unit: Mbps.
         * 
         * @return builder
         * 
         */
        public Builder maxBps(Integer maxBps) {
            return maxBps(Output.of(maxBps));
        }

        /**
         * @param maxPps The maximum number of messages cleaning threshold. Unit: pps.
         * 
         * @return builder
         * 
         */
        public Builder maxPps(@Nullable Output<Integer> maxPps) {
            $.maxPps = maxPps;
            return this;
        }

        /**
         * @param maxPps The maximum number of messages cleaning threshold. Unit: pps.
         * 
         * @return builder
         * 
         */
        public Builder maxPps(Integer maxPps) {
            return maxPps(Output.of(maxPps));
        }

        /**
         * @param pps The current message number cleaning threshold. Unit: pps.
         * 
         * @return builder
         * 
         */
        public Builder pps(@Nullable Output<Integer> pps) {
            $.pps = pps;
            return this;
        }

        /**
         * @param pps The current message number cleaning threshold. Unit: pps.
         * 
         * @return builder
         * 
         */
        public Builder pps(Integer pps) {
            return pps(Output.of(pps));
        }

        public BasicThresholdState build() {
            return $;
        }
    }

}
