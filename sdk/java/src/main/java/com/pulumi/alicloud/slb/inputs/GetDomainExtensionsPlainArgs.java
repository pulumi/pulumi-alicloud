// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.slb.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainExtensionsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainExtensionsPlainArgs Empty = new GetDomainExtensionsPlainArgs();

    /**
     * The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
     * 
     */
    @Import(name="frontendPort", required=true)
    private Integer frontendPort;

    /**
     * @return The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
     * 
     */
    public Integer frontendPort() {
        return this.frontendPort;
    }

    /**
     * IDs of the SLB domain extensions.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return IDs of the SLB domain extensions.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * The ID of the SLB instance.
     * 
     */
    @Import(name="loadBalancerId", required=true)
    private String loadBalancerId;

    /**
     * @return The ID of the SLB instance.
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }

    @Import(name="outputFile")
    private @Nullable String outputFile;

    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    private GetDomainExtensionsPlainArgs() {}

    private GetDomainExtensionsPlainArgs(GetDomainExtensionsPlainArgs $) {
        this.frontendPort = $.frontendPort;
        this.ids = $.ids;
        this.loadBalancerId = $.loadBalancerId;
        this.outputFile = $.outputFile;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainExtensionsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainExtensionsPlainArgs $;

        public Builder() {
            $ = new GetDomainExtensionsPlainArgs();
        }

        public Builder(GetDomainExtensionsPlainArgs defaults) {
            $ = new GetDomainExtensionsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param frontendPort The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(Integer frontendPort) {
            $.frontendPort = frontendPort;
            return this;
        }

        /**
         * @param ids IDs of the SLB domain extensions.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids IDs of the SLB domain extensions.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param loadBalancerId The ID of the SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        public GetDomainExtensionsPlainArgs build() {
            if ($.frontendPort == null) {
                throw new MissingRequiredPropertyException("GetDomainExtensionsPlainArgs", "frontendPort");
            }
            if ($.loadBalancerId == null) {
                throw new MissingRequiredPropertyException("GetDomainExtensionsPlainArgs", "loadBalancerId");
            }
            return $;
        }
    }

}
