// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.apigateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiHttpVpcServiceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiHttpVpcServiceConfigArgs Empty = new ApiHttpVpcServiceConfigArgs();

    /**
     * The name of aone.
     * 
     */
    @Import(name="aoneName")
    private @Nullable Output<String> aoneName;

    /**
     * @return The name of aone.
     * 
     */
    public Optional<Output<String>> aoneName() {
        return Optional.ofNullable(this.aoneName);
    }

    /**
     * The content type category of backend service which supports values of &#39;DEFAULT&#39;,&#39;CUSTOM&#39; and &#39;CLIENT&#39;.
     * 
     */
    @Import(name="contentTypeCategory")
    private @Nullable Output<String> contentTypeCategory;

    /**
     * @return The content type category of backend service which supports values of &#39;DEFAULT&#39;,&#39;CUSTOM&#39; and &#39;CLIENT&#39;.
     * 
     */
    public Optional<Output<String>> contentTypeCategory() {
        return Optional.ofNullable(this.contentTypeCategory);
    }

    /**
     * The content type value of backend service.
     * 
     */
    @Import(name="contentTypeValue")
    private @Nullable Output<String> contentTypeValue;

    /**
     * @return The content type value of backend service.
     * 
     */
    public Optional<Output<String>> contentTypeValue() {
        return Optional.ofNullable(this.contentTypeValue);
    }

    /**
     * The http method of backend service.
     * 
     */
    @Import(name="method", required=true)
    private Output<String> method;

    /**
     * @return The http method of backend service.
     * 
     */
    public Output<String> method() {
        return this.method;
    }

    /**
     * The name of vpc instance.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of vpc instance.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The path of backend service.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path of backend service.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Backend service time-out time. Unit: millisecond.
     * 
     */
    @Import(name="timeout", required=true)
    private Output<Integer> timeout;

    /**
     * @return Backend service time-out time. Unit: millisecond.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }

    /**
     * The vpc scheme of backend service which supports values of `HTTP` and `HTTPS`.
     * 
     */
    @Import(name="vpcScheme")
    private @Nullable Output<String> vpcScheme;

    /**
     * @return The vpc scheme of backend service which supports values of `HTTP` and `HTTPS`.
     * 
     */
    public Optional<Output<String>> vpcScheme() {
        return Optional.ofNullable(this.vpcScheme);
    }

    private ApiHttpVpcServiceConfigArgs() {}

    private ApiHttpVpcServiceConfigArgs(ApiHttpVpcServiceConfigArgs $) {
        this.aoneName = $.aoneName;
        this.contentTypeCategory = $.contentTypeCategory;
        this.contentTypeValue = $.contentTypeValue;
        this.method = $.method;
        this.name = $.name;
        this.path = $.path;
        this.timeout = $.timeout;
        this.vpcScheme = $.vpcScheme;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiHttpVpcServiceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiHttpVpcServiceConfigArgs $;

        public Builder() {
            $ = new ApiHttpVpcServiceConfigArgs();
        }

        public Builder(ApiHttpVpcServiceConfigArgs defaults) {
            $ = new ApiHttpVpcServiceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aoneName The name of aone.
         * 
         * @return builder
         * 
         */
        public Builder aoneName(@Nullable Output<String> aoneName) {
            $.aoneName = aoneName;
            return this;
        }

        /**
         * @param aoneName The name of aone.
         * 
         * @return builder
         * 
         */
        public Builder aoneName(String aoneName) {
            return aoneName(Output.of(aoneName));
        }

        /**
         * @param contentTypeCategory The content type category of backend service which supports values of &#39;DEFAULT&#39;,&#39;CUSTOM&#39; and &#39;CLIENT&#39;.
         * 
         * @return builder
         * 
         */
        public Builder contentTypeCategory(@Nullable Output<String> contentTypeCategory) {
            $.contentTypeCategory = contentTypeCategory;
            return this;
        }

        /**
         * @param contentTypeCategory The content type category of backend service which supports values of &#39;DEFAULT&#39;,&#39;CUSTOM&#39; and &#39;CLIENT&#39;.
         * 
         * @return builder
         * 
         */
        public Builder contentTypeCategory(String contentTypeCategory) {
            return contentTypeCategory(Output.of(contentTypeCategory));
        }

        /**
         * @param contentTypeValue The content type value of backend service.
         * 
         * @return builder
         * 
         */
        public Builder contentTypeValue(@Nullable Output<String> contentTypeValue) {
            $.contentTypeValue = contentTypeValue;
            return this;
        }

        /**
         * @param contentTypeValue The content type value of backend service.
         * 
         * @return builder
         * 
         */
        public Builder contentTypeValue(String contentTypeValue) {
            return contentTypeValue(Output.of(contentTypeValue));
        }

        /**
         * @param method The http method of backend service.
         * 
         * @return builder
         * 
         */
        public Builder method(Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method The http method of backend service.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param name The name of vpc instance.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of vpc instance.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param path The path of backend service.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path of backend service.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param timeout Backend service time-out time. Unit: millisecond.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Backend service time-out time. Unit: millisecond.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param vpcScheme The vpc scheme of backend service which supports values of `HTTP` and `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder vpcScheme(@Nullable Output<String> vpcScheme) {
            $.vpcScheme = vpcScheme;
            return this;
        }

        /**
         * @param vpcScheme The vpc scheme of backend service which supports values of `HTTP` and `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder vpcScheme(String vpcScheme) {
            return vpcScheme(Output.of(vpcScheme));
        }

        public ApiHttpVpcServiceConfigArgs build() {
            if ($.method == null) {
                throw new MissingRequiredPropertyException("ApiHttpVpcServiceConfigArgs", "method");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ApiHttpVpcServiceConfigArgs", "name");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("ApiHttpVpcServiceConfigArgs", "path");
            }
            if ($.timeout == null) {
                throw new MissingRequiredPropertyException("ApiHttpVpcServiceConfigArgs", "timeout");
            }
            return $;
        }
    }

}
