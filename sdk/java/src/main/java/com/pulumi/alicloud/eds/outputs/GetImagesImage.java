// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetImagesImage {
    /**
     * @return The creation time of the image.
     * 
     */
    private String createTime;
    /**
     * @return The size of data disk of the image.
     * 
     */
    private Integer dataDiskSize;
    /**
     * @return The description of the image.
     * 
     */
    private String description;
    /**
     * @return The Gpu Category of the image.
     * 
     */
    private Boolean gpuCategory;
    /**
     * @return The ID of the Image.
     * 
     */
    private String id;
    /**
     * @return The image id of the image.
     * 
     */
    private String imageId;
    /**
     * @return The image name.
     * 
     */
    private String imageName;
    /**
     * @return The image type of the image. Valid values: `SYSTEM`, `CUSTOM`.
     * 
     */
    private String imageType;
    /**
     * @return The os type of the image.
     * 
     */
    private String osType;
    /**
     * @return The progress of the image.
     * 
     */
    private String progress;
    /**
     * @return The size of the image.
     * 
     */
    private Integer size;
    /**
     * @return The status of the image. Valid values: `Creating`, `Available`, `CreateFailed`.
     * 
     */
    private String status;

    private GetImagesImage() {}
    /**
     * @return The creation time of the image.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The size of data disk of the image.
     * 
     */
    public Integer dataDiskSize() {
        return this.dataDiskSize;
    }
    /**
     * @return The description of the image.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The Gpu Category of the image.
     * 
     */
    public Boolean gpuCategory() {
        return this.gpuCategory;
    }
    /**
     * @return The ID of the Image.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The image id of the image.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return The image name.
     * 
     */
    public String imageName() {
        return this.imageName;
    }
    /**
     * @return The image type of the image. Valid values: `SYSTEM`, `CUSTOM`.
     * 
     */
    public String imageType() {
        return this.imageType;
    }
    /**
     * @return The os type of the image.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return The progress of the image.
     * 
     */
    public String progress() {
        return this.progress;
    }
    /**
     * @return The size of the image.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return The status of the image. Valid values: `Creating`, `Available`, `CreateFailed`.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagesImage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private Integer dataDiskSize;
        private String description;
        private Boolean gpuCategory;
        private String id;
        private String imageId;
        private String imageName;
        private String imageType;
        private String osType;
        private String progress;
        private Integer size;
        private String status;
        public Builder() {}
        public Builder(GetImagesImage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.dataDiskSize = defaults.dataDiskSize;
    	      this.description = defaults.description;
    	      this.gpuCategory = defaults.gpuCategory;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.imageName = defaults.imageName;
    	      this.imageType = defaults.imageType;
    	      this.osType = defaults.osType;
    	      this.progress = defaults.progress;
    	      this.size = defaults.size;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder dataDiskSize(Integer dataDiskSize) {
            this.dataDiskSize = Objects.requireNonNull(dataDiskSize);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder gpuCategory(Boolean gpuCategory) {
            this.gpuCategory = Objects.requireNonNull(gpuCategory);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            this.imageId = Objects.requireNonNull(imageId);
            return this;
        }
        @CustomType.Setter
        public Builder imageName(String imageName) {
            this.imageName = Objects.requireNonNull(imageName);
            return this;
        }
        @CustomType.Setter
        public Builder imageType(String imageType) {
            this.imageType = Objects.requireNonNull(imageType);
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        @CustomType.Setter
        public Builder progress(String progress) {
            this.progress = Objects.requireNonNull(progress);
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public GetImagesImage build() {
            final var o = new GetImagesImage();
            o.createTime = createTime;
            o.dataDiskSize = dataDiskSize;
            o.description = description;
            o.gpuCategory = gpuCategory;
            o.id = id;
            o.imageId = imageId;
            o.imageName = imageName;
            o.imageType = imageType;
            o.osType = osType;
            o.progress = progress;
            o.size = size;
            o.status = status;
            return o;
        }
    }
}
