// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.resourcemanager.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFoldersPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFoldersPlainArgs Empty = new GetFoldersPlainArgs();

    /**
     * Whether to query the detailed list of resource attributes. Default value: `false`.
     * 
     */
    @Import(name="enableDetails")
    private @Nullable Boolean enableDetails;

    /**
     * @return Whether to query the detailed list of resource attributes. Default value: `false`.
     * 
     */
    public Optional<Boolean> enableDetails() {
        return Optional.ofNullable(this.enableDetails);
    }

    /**
     * A list of Folders IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return A list of Folders IDs.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * A regex string to filter results by Folder name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    /**
     * @return A regex string to filter results by Folder name.
     * 
     */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable String outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The ID of the parent folder. **NOTE:** If `parentFolderId` is not set, the information of the first-level subfolders of the Root folder is queried.
     * 
     */
    @Import(name="parentFolderId")
    private @Nullable String parentFolderId;

    /**
     * @return The ID of the parent folder. **NOTE:** If `parentFolderId` is not set, the information of the first-level subfolders of the Root folder is queried.
     * 
     */
    public Optional<String> parentFolderId() {
        return Optional.ofNullable(this.parentFolderId);
    }

    /**
     * The keyword used for the query, such as a folder name. Fuzzy match is supported.
     * 
     */
    @Import(name="queryKeyword")
    private @Nullable String queryKeyword;

    /**
     * @return The keyword used for the query, such as a folder name. Fuzzy match is supported.
     * 
     */
    public Optional<String> queryKeyword() {
        return Optional.ofNullable(this.queryKeyword);
    }

    private GetFoldersPlainArgs() {}

    private GetFoldersPlainArgs(GetFoldersPlainArgs $) {
        this.enableDetails = $.enableDetails;
        this.ids = $.ids;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.parentFolderId = $.parentFolderId;
        this.queryKeyword = $.queryKeyword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFoldersPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFoldersPlainArgs $;

        public Builder() {
            $ = new GetFoldersPlainArgs();
        }

        public Builder(GetFoldersPlainArgs defaults) {
            $ = new GetFoldersPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableDetails Whether to query the detailed list of resource attributes. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableDetails(@Nullable Boolean enableDetails) {
            $.enableDetails = enableDetails;
            return this;
        }

        /**
         * @param ids A list of Folders IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Folders IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param nameRegex A regex string to filter results by Folder name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param parentFolderId The ID of the parent folder. **NOTE:** If `parentFolderId` is not set, the information of the first-level subfolders of the Root folder is queried.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderId(@Nullable String parentFolderId) {
            $.parentFolderId = parentFolderId;
            return this;
        }

        /**
         * @param queryKeyword The keyword used for the query, such as a folder name. Fuzzy match is supported.
         * 
         * @return builder
         * 
         */
        public Builder queryKeyword(@Nullable String queryKeyword) {
            $.queryKeyword = queryKeyword;
            return this;
        }

        public GetFoldersPlainArgs build() {
            return $;
        }
    }

}
