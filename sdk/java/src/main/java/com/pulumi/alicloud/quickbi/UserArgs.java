// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.quickbi;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * Alibaba Cloud account ID.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Alibaba Cloud account ID.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * An Alibaba Cloud account, Alibaba Cloud name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return An Alibaba Cloud account, Alibaba Cloud name.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Whether it is the administrator. Valid values: `true` and `false`.
     * 
     */
    @Import(name="adminUser", required=true)
    private Output<Boolean> adminUser;

    /**
     * @return Whether it is the administrator. Valid values: `true` and `false`.
     * 
     */
    public Output<Boolean> adminUser() {
        return this.adminUser;
    }

    /**
     * Whether this is a permissions administrator. Valid values: `false`, `true`.
     * 
     */
    @Import(name="authAdminUser", required=true)
    private Output<Boolean> authAdminUser;

    /**
     * @return Whether this is a permissions administrator. Valid values: `false`, `true`.
     * 
     */
    public Output<Boolean> authAdminUser() {
        return this.authAdminUser;
    }

    /**
     * The nickname of the user.
     * 
     */
    @Import(name="nickName", required=true)
    private Output<String> nickName;

    /**
     * @return The nickname of the user.
     * 
     */
    public Output<String> nickName() {
        return this.nickName;
    }

    /**
     * The members of the organization of the type of role separately. Valid values: `Analyst`, `Developer` and `Visitor`.
     * 
     */
    @Import(name="userType", required=true)
    private Output<String> userType;

    /**
     * @return The members of the organization of the type of role separately. Valid values: `Analyst`, `Developer` and `Visitor`.
     * 
     */
    public Output<String> userType() {
        return this.userType;
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.accountId = $.accountId;
        this.accountName = $.accountName;
        this.adminUser = $.adminUser;
        this.authAdminUser = $.authAdminUser;
        this.nickName = $.nickName;
        this.userType = $.userType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Alibaba Cloud account ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Alibaba Cloud account ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param accountName An Alibaba Cloud account, Alibaba Cloud name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName An Alibaba Cloud account, Alibaba Cloud name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param adminUser Whether it is the administrator. Valid values: `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder adminUser(Output<Boolean> adminUser) {
            $.adminUser = adminUser;
            return this;
        }

        /**
         * @param adminUser Whether it is the administrator. Valid values: `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder adminUser(Boolean adminUser) {
            return adminUser(Output.of(adminUser));
        }

        /**
         * @param authAdminUser Whether this is a permissions administrator. Valid values: `false`, `true`.
         * 
         * @return builder
         * 
         */
        public Builder authAdminUser(Output<Boolean> authAdminUser) {
            $.authAdminUser = authAdminUser;
            return this;
        }

        /**
         * @param authAdminUser Whether this is a permissions administrator. Valid values: `false`, `true`.
         * 
         * @return builder
         * 
         */
        public Builder authAdminUser(Boolean authAdminUser) {
            return authAdminUser(Output.of(authAdminUser));
        }

        /**
         * @param nickName The nickname of the user.
         * 
         * @return builder
         * 
         */
        public Builder nickName(Output<String> nickName) {
            $.nickName = nickName;
            return this;
        }

        /**
         * @param nickName The nickname of the user.
         * 
         * @return builder
         * 
         */
        public Builder nickName(String nickName) {
            return nickName(Output.of(nickName));
        }

        /**
         * @param userType The members of the organization of the type of role separately. Valid values: `Analyst`, `Developer` and `Visitor`.
         * 
         * @return builder
         * 
         */
        public Builder userType(Output<String> userType) {
            $.userType = userType;
            return this;
        }

        /**
         * @param userType The members of the organization of the type of role separately. Valid values: `Analyst`, `Developer` and `Visitor`.
         * 
         * @return builder
         * 
         */
        public Builder userType(String userType) {
            return userType(Output.of(userType));
        }

        public UserArgs build() {
            if ($.accountName == null) {
                throw new MissingRequiredPropertyException("UserArgs", "accountName");
            }
            if ($.adminUser == null) {
                throw new MissingRequiredPropertyException("UserArgs", "adminUser");
            }
            if ($.authAdminUser == null) {
                throw new MissingRequiredPropertyException("UserArgs", "authAdminUser");
            }
            if ($.nickName == null) {
                throw new MissingRequiredPropertyException("UserArgs", "nickName");
            }
            if ($.userType == null) {
                throw new MissingRequiredPropertyException("UserArgs", "userType");
            }
            return $;
        }
    }

}
