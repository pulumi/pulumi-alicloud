// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.brain;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IndustrialPidLoopArgs extends com.pulumi.resources.ResourceArgs {

    public static final IndustrialPidLoopArgs Empty = new IndustrialPidLoopArgs();

    /**
     * The Pid Loop Configuration.
     * 
     */
    @Import(name="pidLoopConfiguration", required=true)
    private Output<String> pidLoopConfiguration;

    /**
     * @return The Pid Loop Configuration.
     * 
     */
    public Output<String> pidLoopConfiguration() {
        return this.pidLoopConfiguration;
    }

    /**
     * The dcs type of Pid Loop. Valid values: `standard`.
     * 
     */
    @Import(name="pidLoopDcsType", required=true)
    private Output<String> pidLoopDcsType;

    /**
     * @return The dcs type of Pid Loop. Valid values: `standard`.
     * 
     */
    public Output<String> pidLoopDcsType() {
        return this.pidLoopDcsType;
    }

    /**
     * The desc of Pid Loop.
     * 
     */
    @Import(name="pidLoopDesc")
    private @Nullable Output<String> pidLoopDesc;

    /**
     * @return The desc of Pid Loop.
     * 
     */
    public Optional<Output<String>> pidLoopDesc() {
        return Optional.ofNullable(this.pidLoopDesc);
    }

    /**
     * Whether is crucial Pid Loop.
     * 
     */
    @Import(name="pidLoopIsCrucial", required=true)
    private Output<Boolean> pidLoopIsCrucial;

    /**
     * @return Whether is crucial Pid Loop.
     * 
     */
    public Output<Boolean> pidLoopIsCrucial() {
        return this.pidLoopIsCrucial;
    }

    /**
     * The name of Pid Loop.
     * 
     */
    @Import(name="pidLoopName", required=true)
    private Output<String> pidLoopName;

    /**
     * @return The name of Pid Loop.
     * 
     */
    public Output<String> pidLoopName() {
        return this.pidLoopName;
    }

    /**
     * The type of Pid Loop. Valid values: `0`, `1`, `2`, `3`, `4`, `5`.
     * 
     */
    @Import(name="pidLoopType", required=true)
    private Output<String> pidLoopType;

    /**
     * @return The type of Pid Loop. Valid values: `0`, `1`, `2`, `3`, `4`, `5`.
     * 
     */
    public Output<String> pidLoopType() {
        return this.pidLoopType;
    }

    /**
     * The pid project id.
     * 
     */
    @Import(name="pidProjectId", required=true)
    private Output<String> pidProjectId;

    /**
     * @return The pid project id.
     * 
     */
    public Output<String> pidProjectId() {
        return this.pidProjectId;
    }

    private IndustrialPidLoopArgs() {}

    private IndustrialPidLoopArgs(IndustrialPidLoopArgs $) {
        this.pidLoopConfiguration = $.pidLoopConfiguration;
        this.pidLoopDcsType = $.pidLoopDcsType;
        this.pidLoopDesc = $.pidLoopDesc;
        this.pidLoopIsCrucial = $.pidLoopIsCrucial;
        this.pidLoopName = $.pidLoopName;
        this.pidLoopType = $.pidLoopType;
        this.pidProjectId = $.pidProjectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IndustrialPidLoopArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IndustrialPidLoopArgs $;

        public Builder() {
            $ = new IndustrialPidLoopArgs();
        }

        public Builder(IndustrialPidLoopArgs defaults) {
            $ = new IndustrialPidLoopArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param pidLoopConfiguration The Pid Loop Configuration.
         * 
         * @return builder
         * 
         */
        public Builder pidLoopConfiguration(Output<String> pidLoopConfiguration) {
            $.pidLoopConfiguration = pidLoopConfiguration;
            return this;
        }

        /**
         * @param pidLoopConfiguration The Pid Loop Configuration.
         * 
         * @return builder
         * 
         */
        public Builder pidLoopConfiguration(String pidLoopConfiguration) {
            return pidLoopConfiguration(Output.of(pidLoopConfiguration));
        }

        /**
         * @param pidLoopDcsType The dcs type of Pid Loop. Valid values: `standard`.
         * 
         * @return builder
         * 
         */
        public Builder pidLoopDcsType(Output<String> pidLoopDcsType) {
            $.pidLoopDcsType = pidLoopDcsType;
            return this;
        }

        /**
         * @param pidLoopDcsType The dcs type of Pid Loop. Valid values: `standard`.
         * 
         * @return builder
         * 
         */
        public Builder pidLoopDcsType(String pidLoopDcsType) {
            return pidLoopDcsType(Output.of(pidLoopDcsType));
        }

        /**
         * @param pidLoopDesc The desc of Pid Loop.
         * 
         * @return builder
         * 
         */
        public Builder pidLoopDesc(@Nullable Output<String> pidLoopDesc) {
            $.pidLoopDesc = pidLoopDesc;
            return this;
        }

        /**
         * @param pidLoopDesc The desc of Pid Loop.
         * 
         * @return builder
         * 
         */
        public Builder pidLoopDesc(String pidLoopDesc) {
            return pidLoopDesc(Output.of(pidLoopDesc));
        }

        /**
         * @param pidLoopIsCrucial Whether is crucial Pid Loop.
         * 
         * @return builder
         * 
         */
        public Builder pidLoopIsCrucial(Output<Boolean> pidLoopIsCrucial) {
            $.pidLoopIsCrucial = pidLoopIsCrucial;
            return this;
        }

        /**
         * @param pidLoopIsCrucial Whether is crucial Pid Loop.
         * 
         * @return builder
         * 
         */
        public Builder pidLoopIsCrucial(Boolean pidLoopIsCrucial) {
            return pidLoopIsCrucial(Output.of(pidLoopIsCrucial));
        }

        /**
         * @param pidLoopName The name of Pid Loop.
         * 
         * @return builder
         * 
         */
        public Builder pidLoopName(Output<String> pidLoopName) {
            $.pidLoopName = pidLoopName;
            return this;
        }

        /**
         * @param pidLoopName The name of Pid Loop.
         * 
         * @return builder
         * 
         */
        public Builder pidLoopName(String pidLoopName) {
            return pidLoopName(Output.of(pidLoopName));
        }

        /**
         * @param pidLoopType The type of Pid Loop. Valid values: `0`, `1`, `2`, `3`, `4`, `5`.
         * 
         * @return builder
         * 
         */
        public Builder pidLoopType(Output<String> pidLoopType) {
            $.pidLoopType = pidLoopType;
            return this;
        }

        /**
         * @param pidLoopType The type of Pid Loop. Valid values: `0`, `1`, `2`, `3`, `4`, `5`.
         * 
         * @return builder
         * 
         */
        public Builder pidLoopType(String pidLoopType) {
            return pidLoopType(Output.of(pidLoopType));
        }

        /**
         * @param pidProjectId The pid project id.
         * 
         * @return builder
         * 
         */
        public Builder pidProjectId(Output<String> pidProjectId) {
            $.pidProjectId = pidProjectId;
            return this;
        }

        /**
         * @param pidProjectId The pid project id.
         * 
         * @return builder
         * 
         */
        public Builder pidProjectId(String pidProjectId) {
            return pidProjectId(Output.of(pidProjectId));
        }

        public IndustrialPidLoopArgs build() {
            if ($.pidLoopConfiguration == null) {
                throw new MissingRequiredPropertyException("IndustrialPidLoopArgs", "pidLoopConfiguration");
            }
            if ($.pidLoopDcsType == null) {
                throw new MissingRequiredPropertyException("IndustrialPidLoopArgs", "pidLoopDcsType");
            }
            if ($.pidLoopIsCrucial == null) {
                throw new MissingRequiredPropertyException("IndustrialPidLoopArgs", "pidLoopIsCrucial");
            }
            if ($.pidLoopName == null) {
                throw new MissingRequiredPropertyException("IndustrialPidLoopArgs", "pidLoopName");
            }
            if ($.pidLoopType == null) {
                throw new MissingRequiredPropertyException("IndustrialPidLoopArgs", "pidLoopType");
            }
            if ($.pidProjectId == null) {
                throw new MissingRequiredPropertyException("IndustrialPidLoopArgs", "pidProjectId");
            }
            return $;
        }
    }

}
