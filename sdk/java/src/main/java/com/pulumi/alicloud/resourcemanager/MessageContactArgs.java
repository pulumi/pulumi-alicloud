// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.resourcemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MessageContactArgs extends com.pulumi.resources.ResourceArgs {

    public static final MessageContactArgs Empty = new MessageContactArgs();

    /**
     * The email address of the contact.
     * After you specify an email address, you need to call SendEmailVerificationForMessageContact to send verification information to the email address. After the verification is passed, the email address takes effect.
     * 
     */
    @Import(name="emailAddress", required=true)
    private Output<String> emailAddress;

    /**
     * @return The email address of the contact.
     * After you specify an email address, you need to call SendEmailVerificationForMessageContact to send verification information to the email address. After the verification is passed, the email address takes effect.
     * 
     */
    public Output<String> emailAddress() {
        return this.emailAddress;
    }

    /**
     * The name of the contact.
     * The name must be unique in your resource directory.
     * The name must be 2 to 12 characters in length and can contain only letters.
     * 
     */
    @Import(name="messageContactName", required=true)
    private Output<String> messageContactName;

    /**
     * @return The name of the contact.
     * The name must be unique in your resource directory.
     * The name must be 2 to 12 characters in length and can contain only letters.
     * 
     */
    public Output<String> messageContactName() {
        return this.messageContactName;
    }

    /**
     * The types of messages received by the contact.
     * 
     */
    @Import(name="messageTypes", required=true)
    private Output<List<String>> messageTypes;

    /**
     * @return The types of messages received by the contact.
     * 
     */
    public Output<List<String>> messageTypes() {
        return this.messageTypes;
    }

    /**
     * The mobile phone number of the contact.
     * 
     * Specify the mobile phone number in the `-` format.
     * 
     * &gt; **NOTE:**  Only mobile phone numbers in the `86-` format in the Chinese mainland are supported.
     * 
     * After you specify a mobile phone number, you need to call SendPhoneVerificationForMessageContact to send verification information to the mobile phone number. After the verification is passed, the mobile phone number takes effect.
     * 
     */
    @Import(name="phoneNumber")
    private @Nullable Output<String> phoneNumber;

    /**
     * @return The mobile phone number of the contact.
     * 
     * Specify the mobile phone number in the `-` format.
     * 
     * &gt; **NOTE:**  Only mobile phone numbers in the `86-` format in the Chinese mainland are supported.
     * 
     * After you specify a mobile phone number, you need to call SendPhoneVerificationForMessageContact to send verification information to the mobile phone number. After the verification is passed, the mobile phone number takes effect.
     * 
     */
    public Optional<Output<String>> phoneNumber() {
        return Optional.ofNullable(this.phoneNumber);
    }

    /**
     * The job title of the contact.Valid values:
     * - FinanceDirector
     * - TechnicalDirector
     * - MaintenanceDirector
     * - CEO
     * - ProjectDirector
     * - Other
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return The job title of the contact.Valid values:
     * - FinanceDirector
     * - TechnicalDirector
     * - MaintenanceDirector
     * - CEO
     * - ProjectDirector
     * - Other
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    private MessageContactArgs() {}

    private MessageContactArgs(MessageContactArgs $) {
        this.emailAddress = $.emailAddress;
        this.messageContactName = $.messageContactName;
        this.messageTypes = $.messageTypes;
        this.phoneNumber = $.phoneNumber;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MessageContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MessageContactArgs $;

        public Builder() {
            $ = new MessageContactArgs();
        }

        public Builder(MessageContactArgs defaults) {
            $ = new MessageContactArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param emailAddress The email address of the contact.
         * After you specify an email address, you need to call SendEmailVerificationForMessageContact to send verification information to the email address. After the verification is passed, the email address takes effect.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(Output<String> emailAddress) {
            $.emailAddress = emailAddress;
            return this;
        }

        /**
         * @param emailAddress The email address of the contact.
         * After you specify an email address, you need to call SendEmailVerificationForMessageContact to send verification information to the email address. After the verification is passed, the email address takes effect.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(String emailAddress) {
            return emailAddress(Output.of(emailAddress));
        }

        /**
         * @param messageContactName The name of the contact.
         * The name must be unique in your resource directory.
         * The name must be 2 to 12 characters in length and can contain only letters.
         * 
         * @return builder
         * 
         */
        public Builder messageContactName(Output<String> messageContactName) {
            $.messageContactName = messageContactName;
            return this;
        }

        /**
         * @param messageContactName The name of the contact.
         * The name must be unique in your resource directory.
         * The name must be 2 to 12 characters in length and can contain only letters.
         * 
         * @return builder
         * 
         */
        public Builder messageContactName(String messageContactName) {
            return messageContactName(Output.of(messageContactName));
        }

        /**
         * @param messageTypes The types of messages received by the contact.
         * 
         * @return builder
         * 
         */
        public Builder messageTypes(Output<List<String>> messageTypes) {
            $.messageTypes = messageTypes;
            return this;
        }

        /**
         * @param messageTypes The types of messages received by the contact.
         * 
         * @return builder
         * 
         */
        public Builder messageTypes(List<String> messageTypes) {
            return messageTypes(Output.of(messageTypes));
        }

        /**
         * @param messageTypes The types of messages received by the contact.
         * 
         * @return builder
         * 
         */
        public Builder messageTypes(String... messageTypes) {
            return messageTypes(List.of(messageTypes));
        }

        /**
         * @param phoneNumber The mobile phone number of the contact.
         * 
         * Specify the mobile phone number in the `-` format.
         * 
         * &gt; **NOTE:**  Only mobile phone numbers in the `86-` format in the Chinese mainland are supported.
         * 
         * After you specify a mobile phone number, you need to call SendPhoneVerificationForMessageContact to send verification information to the mobile phone number. After the verification is passed, the mobile phone number takes effect.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(@Nullable Output<String> phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * @param phoneNumber The mobile phone number of the contact.
         * 
         * Specify the mobile phone number in the `-` format.
         * 
         * &gt; **NOTE:**  Only mobile phone numbers in the `86-` format in the Chinese mainland are supported.
         * 
         * After you specify a mobile phone number, you need to call SendPhoneVerificationForMessageContact to send verification information to the mobile phone number. After the verification is passed, the mobile phone number takes effect.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(String phoneNumber) {
            return phoneNumber(Output.of(phoneNumber));
        }

        /**
         * @param title The job title of the contact.Valid values:
         * - FinanceDirector
         * - TechnicalDirector
         * - MaintenanceDirector
         * - CEO
         * - ProjectDirector
         * - Other
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The job title of the contact.Valid values:
         * - FinanceDirector
         * - TechnicalDirector
         * - MaintenanceDirector
         * - CEO
         * - ProjectDirector
         * - Other
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public MessageContactArgs build() {
            if ($.emailAddress == null) {
                throw new MissingRequiredPropertyException("MessageContactArgs", "emailAddress");
            }
            if ($.messageContactName == null) {
                throw new MissingRequiredPropertyException("MessageContactArgs", "messageContactName");
            }
            if ($.messageTypes == null) {
                throw new MissingRequiredPropertyException("MessageContactArgs", "messageTypes");
            }
            if ($.title == null) {
                throw new MissingRequiredPropertyException("MessageContactArgs", "title");
            }
            return $;
        }
    }

}
