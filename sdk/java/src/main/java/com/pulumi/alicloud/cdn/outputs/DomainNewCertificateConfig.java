// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cdn.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainNewCertificateConfig {
    /**
     * @return The ID of the certificate. It takes effect only when CertType = cas.
     * 
     */
    private @Nullable String certId;
    /**
     * @return Certificate name, only flyer names are supported.
     * 
     */
    private @Nullable String certName;
    /**
     * @return The certificate region, which takes effect only when CertType = cas, supports cn-hangzhou (domestic) and ap-southeast-1 (International), and is cn-hangzhou by default.
     * 
     */
    private @Nullable String certRegion;
    /**
     * @return Certificate type. Value:
     * - **upload**: upload certificate.
     * - **cas**: Cloud Shield certificate.
     * - **free**: free certificate.
     * &gt; If the certificate type is **cas**, **PrivateKey** does not need to pass parameters.
     * 
     */
    private @Nullable String certType;
    /**
     * @return The force set of the security certificate.
     * 
     */
    private @Nullable String forceSet;
    /**
     * @return The content of the private key. If the certificate is not enabled, you do not need to enter the content of the private key. To configure the certificate, enter the content of the private key.
     * 
     */
    private @Nullable String privateKey;
    /**
     * @return The content of the security certificate. If the certificate is not enabled, you do not need to enter the content of the security certificate. Please enter the content of the certificate to configure the certificate.
     * 
     */
    private @Nullable String serverCertificate;
    /**
     * @return Whether the HTTPS certificate is enabled. Value:
     * - **on**(default): enabled.
     * - **off** : not enabled.
     * 
     */
    private @Nullable String serverCertificateStatus;

    private DomainNewCertificateConfig() {}
    /**
     * @return The ID of the certificate. It takes effect only when CertType = cas.
     * 
     */
    public Optional<String> certId() {
        return Optional.ofNullable(this.certId);
    }
    /**
     * @return Certificate name, only flyer names are supported.
     * 
     */
    public Optional<String> certName() {
        return Optional.ofNullable(this.certName);
    }
    /**
     * @return The certificate region, which takes effect only when CertType = cas, supports cn-hangzhou (domestic) and ap-southeast-1 (International), and is cn-hangzhou by default.
     * 
     */
    public Optional<String> certRegion() {
        return Optional.ofNullable(this.certRegion);
    }
    /**
     * @return Certificate type. Value:
     * - **upload**: upload certificate.
     * - **cas**: Cloud Shield certificate.
     * - **free**: free certificate.
     * &gt; If the certificate type is **cas**, **PrivateKey** does not need to pass parameters.
     * 
     */
    public Optional<String> certType() {
        return Optional.ofNullable(this.certType);
    }
    /**
     * @return The force set of the security certificate.
     * 
     */
    public Optional<String> forceSet() {
        return Optional.ofNullable(this.forceSet);
    }
    /**
     * @return The content of the private key. If the certificate is not enabled, you do not need to enter the content of the private key. To configure the certificate, enter the content of the private key.
     * 
     */
    public Optional<String> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }
    /**
     * @return The content of the security certificate. If the certificate is not enabled, you do not need to enter the content of the security certificate. Please enter the content of the certificate to configure the certificate.
     * 
     */
    public Optional<String> serverCertificate() {
        return Optional.ofNullable(this.serverCertificate);
    }
    /**
     * @return Whether the HTTPS certificate is enabled. Value:
     * - **on**(default): enabled.
     * - **off** : not enabled.
     * 
     */
    public Optional<String> serverCertificateStatus() {
        return Optional.ofNullable(this.serverCertificateStatus);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainNewCertificateConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certId;
        private @Nullable String certName;
        private @Nullable String certRegion;
        private @Nullable String certType;
        private @Nullable String forceSet;
        private @Nullable String privateKey;
        private @Nullable String serverCertificate;
        private @Nullable String serverCertificateStatus;
        public Builder() {}
        public Builder(DomainNewCertificateConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certId = defaults.certId;
    	      this.certName = defaults.certName;
    	      this.certRegion = defaults.certRegion;
    	      this.certType = defaults.certType;
    	      this.forceSet = defaults.forceSet;
    	      this.privateKey = defaults.privateKey;
    	      this.serverCertificate = defaults.serverCertificate;
    	      this.serverCertificateStatus = defaults.serverCertificateStatus;
        }

        @CustomType.Setter
        public Builder certId(@Nullable String certId) {
            this.certId = certId;
            return this;
        }
        @CustomType.Setter
        public Builder certName(@Nullable String certName) {
            this.certName = certName;
            return this;
        }
        @CustomType.Setter
        public Builder certRegion(@Nullable String certRegion) {
            this.certRegion = certRegion;
            return this;
        }
        @CustomType.Setter
        public Builder certType(@Nullable String certType) {
            this.certType = certType;
            return this;
        }
        @CustomType.Setter
        public Builder forceSet(@Nullable String forceSet) {
            this.forceSet = forceSet;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(@Nullable String privateKey) {
            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder serverCertificate(@Nullable String serverCertificate) {
            this.serverCertificate = serverCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder serverCertificateStatus(@Nullable String serverCertificateStatus) {
            this.serverCertificateStatus = serverCertificateStatus;
            return this;
        }
        public DomainNewCertificateConfig build() {
            final var _resultValue = new DomainNewCertificateConfig();
            _resultValue.certId = certId;
            _resultValue.certName = certName;
            _resultValue.certRegion = certRegion;
            _resultValue.certType = certType;
            _resultValue.forceSet = forceSet;
            _resultValue.privateKey = privateKey;
            _resultValue.serverCertificate = serverCertificate;
            _resultValue.serverCertificateStatus = serverCertificateStatus;
            return _resultValue;
        }
    }
}
