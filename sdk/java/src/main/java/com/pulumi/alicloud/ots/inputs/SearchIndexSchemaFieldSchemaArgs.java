// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ots.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SearchIndexSchemaFieldSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final SearchIndexSchemaFieldSchemaArgs Empty = new SearchIndexSchemaFieldSchemaArgs();

    @Import(name="analyzer")
    private @Nullable Output<String> analyzer;

    public Optional<Output<String>> analyzer() {
        return Optional.ofNullable(this.analyzer);
    }

    @Import(name="enableSortAndAgg")
    private @Nullable Output<Boolean> enableSortAndAgg;

    public Optional<Output<Boolean>> enableSortAndAgg() {
        return Optional.ofNullable(this.enableSortAndAgg);
    }

    @Import(name="fieldName", required=true)
    private Output<String> fieldName;

    public Output<String> fieldName() {
        return this.fieldName;
    }

    @Import(name="fieldType", required=true)
    private Output<String> fieldType;

    public Output<String> fieldType() {
        return this.fieldType;
    }

    @Import(name="index")
    private @Nullable Output<Boolean> index;

    public Optional<Output<Boolean>> index() {
        return Optional.ofNullable(this.index);
    }

    @Import(name="isArray")
    private @Nullable Output<Boolean> isArray;

    public Optional<Output<Boolean>> isArray() {
        return Optional.ofNullable(this.isArray);
    }

    @Import(name="store")
    private @Nullable Output<Boolean> store;

    public Optional<Output<Boolean>> store() {
        return Optional.ofNullable(this.store);
    }

    private SearchIndexSchemaFieldSchemaArgs() {}

    private SearchIndexSchemaFieldSchemaArgs(SearchIndexSchemaFieldSchemaArgs $) {
        this.analyzer = $.analyzer;
        this.enableSortAndAgg = $.enableSortAndAgg;
        this.fieldName = $.fieldName;
        this.fieldType = $.fieldType;
        this.index = $.index;
        this.isArray = $.isArray;
        this.store = $.store;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SearchIndexSchemaFieldSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SearchIndexSchemaFieldSchemaArgs $;

        public Builder() {
            $ = new SearchIndexSchemaFieldSchemaArgs();
        }

        public Builder(SearchIndexSchemaFieldSchemaArgs defaults) {
            $ = new SearchIndexSchemaFieldSchemaArgs(Objects.requireNonNull(defaults));
        }

        public Builder analyzer(@Nullable Output<String> analyzer) {
            $.analyzer = analyzer;
            return this;
        }

        public Builder analyzer(String analyzer) {
            return analyzer(Output.of(analyzer));
        }

        public Builder enableSortAndAgg(@Nullable Output<Boolean> enableSortAndAgg) {
            $.enableSortAndAgg = enableSortAndAgg;
            return this;
        }

        public Builder enableSortAndAgg(Boolean enableSortAndAgg) {
            return enableSortAndAgg(Output.of(enableSortAndAgg));
        }

        public Builder fieldName(Output<String> fieldName) {
            $.fieldName = fieldName;
            return this;
        }

        public Builder fieldName(String fieldName) {
            return fieldName(Output.of(fieldName));
        }

        public Builder fieldType(Output<String> fieldType) {
            $.fieldType = fieldType;
            return this;
        }

        public Builder fieldType(String fieldType) {
            return fieldType(Output.of(fieldType));
        }

        public Builder index(@Nullable Output<Boolean> index) {
            $.index = index;
            return this;
        }

        public Builder index(Boolean index) {
            return index(Output.of(index));
        }

        public Builder isArray(@Nullable Output<Boolean> isArray) {
            $.isArray = isArray;
            return this;
        }

        public Builder isArray(Boolean isArray) {
            return isArray(Output.of(isArray));
        }

        public Builder store(@Nullable Output<Boolean> store) {
            $.store = store;
            return this;
        }

        public Builder store(Boolean store) {
            return store(Output.of(store));
        }

        public SearchIndexSchemaFieldSchemaArgs build() {
            if ($.fieldName == null) {
                throw new MissingRequiredPropertyException("SearchIndexSchemaFieldSchemaArgs", "fieldName");
            }
            if ($.fieldType == null) {
                throw new MissingRequiredPropertyException("SearchIndexSchemaFieldSchemaArgs", "fieldType");
            }
            return $;
        }
    }

}
