// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.databasefilesystem.outputs;

import com.pulumi.alicloud.databasefilesystem.outputs.GetInstancesInstanceEcsList;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstancesInstance {
    /**
     * @return the number of nodes of the Database file system.
     * 
     */
    private Integer attachNodeNumber;
    /**
     * @return The type of the Database file system. Valid values: `standard`.
     * 
     */
    private String category;
    /**
     * @return The create time of the Database file system.
     * 
     */
    private String createTime;
    /**
     * @return The cluster ID of the Database file system.
     * 
     */
    private String dbfsClusterId;
    /**
     * @return The collection of ECS instances mounted to the Database file system.
     * 
     */
    private List<GetInstancesInstanceEcsList> ecsLists;
    /**
     * @return Whether to create the Database file system in RAID way. Valid values : `true` anf `false`.
     * 
     */
    private Boolean enableRaid;
    /**
     * @return Whether to encrypt the Database file system. Valid values: `true` and `false`.
     * 
     */
    private Boolean encryption;
    /**
     * @return The ID of the Instance.
     * 
     */
    private String id;
    /**
     * @return The ID of the Database File System
     * 
     */
    private String instanceId;
    /**
     * @return The name of the Database file system.
     * 
     */
    private String instanceName;
    /**
     * @return The KMS key ID of the Database file system used. This parameter is valid When `encryption` parameter is set to `true`.
     * 
     */
    private String kmsKeyId;
    /**
     * @return Thr payment type of the Database file system. Valid value: `PayAsYouGo`.
     * 
     */
    private String paymentType;
    /**
     * @return The performance level of the Database file system. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
     * 
     */
    private String performanceLevel;
    /**
     * @return The number of strip . When `enable_raid` parameter is set to `true` will transfer. This parameter is valid When `enable_raid` parameter is set to `true`.
     * 
     */
    private String raidStripeUnitNumber;
    /**
     * @return The size Of the Database file system. Unit: GiB.
     * 
     */
    private Integer size;
    /**
     * @return The status of the Database file system.
     * 
     */
    private String status;
    /**
     * @return The Zone ID of the Database file system.
     * 
     */
    private String zoneId;

    private GetInstancesInstance() {}
    /**
     * @return the number of nodes of the Database file system.
     * 
     */
    public Integer attachNodeNumber() {
        return this.attachNodeNumber;
    }
    /**
     * @return The type of the Database file system. Valid values: `standard`.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return The create time of the Database file system.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The cluster ID of the Database file system.
     * 
     */
    public String dbfsClusterId() {
        return this.dbfsClusterId;
    }
    /**
     * @return The collection of ECS instances mounted to the Database file system.
     * 
     */
    public List<GetInstancesInstanceEcsList> ecsLists() {
        return this.ecsLists;
    }
    /**
     * @return Whether to create the Database file system in RAID way. Valid values : `true` anf `false`.
     * 
     */
    public Boolean enableRaid() {
        return this.enableRaid;
    }
    /**
     * @return Whether to encrypt the Database file system. Valid values: `true` and `false`.
     * 
     */
    public Boolean encryption() {
        return this.encryption;
    }
    /**
     * @return The ID of the Instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the Database File System
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The name of the Database file system.
     * 
     */
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return The KMS key ID of the Database file system used. This parameter is valid When `encryption` parameter is set to `true`.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return Thr payment type of the Database file system. Valid value: `PayAsYouGo`.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The performance level of the Database file system. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
     * 
     */
    public String performanceLevel() {
        return this.performanceLevel;
    }
    /**
     * @return The number of strip . When `enable_raid` parameter is set to `true` will transfer. This parameter is valid When `enable_raid` parameter is set to `true`.
     * 
     */
    public String raidStripeUnitNumber() {
        return this.raidStripeUnitNumber;
    }
    /**
     * @return The size Of the Database file system. Unit: GiB.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return The status of the Database file system.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The Zone ID of the Database file system.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer attachNodeNumber;
        private String category;
        private String createTime;
        private String dbfsClusterId;
        private List<GetInstancesInstanceEcsList> ecsLists;
        private Boolean enableRaid;
        private Boolean encryption;
        private String id;
        private String instanceId;
        private String instanceName;
        private String kmsKeyId;
        private String paymentType;
        private String performanceLevel;
        private String raidStripeUnitNumber;
        private Integer size;
        private String status;
        private String zoneId;
        public Builder() {}
        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachNodeNumber = defaults.attachNodeNumber;
    	      this.category = defaults.category;
    	      this.createTime = defaults.createTime;
    	      this.dbfsClusterId = defaults.dbfsClusterId;
    	      this.ecsLists = defaults.ecsLists;
    	      this.enableRaid = defaults.enableRaid;
    	      this.encryption = defaults.encryption;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceName = defaults.instanceName;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.paymentType = defaults.paymentType;
    	      this.performanceLevel = defaults.performanceLevel;
    	      this.raidStripeUnitNumber = defaults.raidStripeUnitNumber;
    	      this.size = defaults.size;
    	      this.status = defaults.status;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder attachNodeNumber(Integer attachNodeNumber) {
            this.attachNodeNumber = Objects.requireNonNull(attachNodeNumber);
            return this;
        }
        @CustomType.Setter
        public Builder category(String category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder dbfsClusterId(String dbfsClusterId) {
            this.dbfsClusterId = Objects.requireNonNull(dbfsClusterId);
            return this;
        }
        @CustomType.Setter
        public Builder ecsLists(List<GetInstancesInstanceEcsList> ecsLists) {
            this.ecsLists = Objects.requireNonNull(ecsLists);
            return this;
        }
        public Builder ecsLists(GetInstancesInstanceEcsList... ecsLists) {
            return ecsLists(List.of(ecsLists));
        }
        @CustomType.Setter
        public Builder enableRaid(Boolean enableRaid) {
            this.enableRaid = Objects.requireNonNull(enableRaid);
            return this;
        }
        @CustomType.Setter
        public Builder encryption(Boolean encryption) {
            this.encryption = Objects.requireNonNull(encryption);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(String instanceName) {
            this.instanceName = Objects.requireNonNull(instanceName);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        @CustomType.Setter
        public Builder performanceLevel(String performanceLevel) {
            this.performanceLevel = Objects.requireNonNull(performanceLevel);
            return this;
        }
        @CustomType.Setter
        public Builder raidStripeUnitNumber(String raidStripeUnitNumber) {
            this.raidStripeUnitNumber = Objects.requireNonNull(raidStripeUnitNumber);
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }
        public GetInstancesInstance build() {
            final var o = new GetInstancesInstance();
            o.attachNodeNumber = attachNodeNumber;
            o.category = category;
            o.createTime = createTime;
            o.dbfsClusterId = dbfsClusterId;
            o.ecsLists = ecsLists;
            o.enableRaid = enableRaid;
            o.encryption = encryption;
            o.id = id;
            o.instanceId = instanceId;
            o.instanceName = instanceName;
            o.kmsKeyId = kmsKeyId;
            o.paymentType = paymentType;
            o.performanceLevel = performanceLevel;
            o.raidStripeUnitNumber = raidStripeUnitNumber;
            o.size = size;
            o.status = status;
            o.zoneId = zoneId;
            return o;
        }
    }
}
