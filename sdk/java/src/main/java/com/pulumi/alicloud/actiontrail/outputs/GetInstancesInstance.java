// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.actiontrail.outputs;

import com.pulumi.alicloud.actiontrail.outputs.GetInstancesInstanceAllowedList;
import com.pulumi.alicloud.actiontrail.outputs.GetInstancesInstanceUpgradeServiceDetailInfo;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetInstancesInstance {
    /**
     * @return The allowed list of the instance.
     * 
     */
    private List<GetInstancesInstanceAllowedList> allowedLists;
    /**
     * @return The config the instance.
     * 
     */
    private String config;
    /**
     * @return The create time of the instance.
     * 
     */
    private String createTime;
    /**
     * @return The deployed type of the instance.
     * 
     */
    private Integer deployType;
    /**
     * @return The disk size of the instance.
     * 
     */
    private Integer diskSize;
    /**
     * @return The disk type of the instance. 0: efficient cloud disk , 1: SSD.
     * 
     */
    private Integer diskType;
    /**
     * @return The domain point of the instance.
     * 
     */
    private String domainEndpoint;
    /**
     * @return The peak bandwidth of the instance.
     * 
     */
    private Integer eipMax;
    /**
     * @return The endPoint to access the instance.
     * 
     */
    private String endPoint;
    /**
     * @return The expired time  of the instance.
     * 
     */
    private Integer expiredTime;
    /**
     * @return ID of the instance.
     * 
     */
    private String id;
    /**
     * @return The peak value of io of the instance.
     * 
     */
    private Integer ioMax;
    /**
     * @return The msg retain of the instance.
     * 
     */
    private Integer msgRetain;
    /**
     * @return Name of the instance.
     * 
     */
    private String name;
    /**
     * @return The paid type of the instance.
     * 
     */
    private String paidType;
    /**
     * @return The SASL domain point of the instance.
     * 
     */
    private String saslDomainEndpoint;
    /**
     * @return The security group of the instance.
     * 
     */
    private String securityGroup;
    /**
     * @return The current status of the instance. -1: unknown status, 0: wait deploy, 1: initializing, 2: preparing, 3 starting, 5: in service, 7: wait upgrade, 8: upgrading, 10: released, 15: freeze, 101: deploy error, 102: upgrade error.
     * 
     */
    private Integer serviceStatus;
    /**
     * @return The kafka openSource version of the instance.
     * 
     */
    private String serviceVersion;
    /**
     * @return The spec type of the instance.
     * 
     */
    private String specType;
    /**
     * @return The SSL domain point of the instance.
     * 
     */
    private String sslDomainEndpoint;
    /**
     * @return The SSL end point of the instance.
     * 
     */
    private String sslEndPoint;
    /**
     * @return A mapping of tags to assign to the instance.
     * 
     */
    private @Nullable Map<String,Object> tags;
    /**
     * @return The max num of topic can be create of the instance.
     * 
     */
    private Integer topicQuota;
    /**
     * @return The UpgradeServiceDetailInfo List.
     * 
     */
    private List<GetInstancesInstanceUpgradeServiceDetailInfo> upgradeServiceDetailInfos;
    /**
     * @return The ID of attaching VPC to instance.
     * 
     */
    private String vpcId;
    /**
     * @return The ID of attaching vswitch to instance.
     * 
     */
    private String vswitchId;
    /**
     * @return The ID of attaching zone to instance.
     * 
     */
    private String zoneId;

    private GetInstancesInstance() {}
    /**
     * @return The allowed list of the instance.
     * 
     */
    public List<GetInstancesInstanceAllowedList> allowedLists() {
        return this.allowedLists;
    }
    /**
     * @return The config the instance.
     * 
     */
    public String config() {
        return this.config;
    }
    /**
     * @return The create time of the instance.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The deployed type of the instance.
     * 
     */
    public Integer deployType() {
        return this.deployType;
    }
    /**
     * @return The disk size of the instance.
     * 
     */
    public Integer diskSize() {
        return this.diskSize;
    }
    /**
     * @return The disk type of the instance. 0: efficient cloud disk , 1: SSD.
     * 
     */
    public Integer diskType() {
        return this.diskType;
    }
    /**
     * @return The domain point of the instance.
     * 
     */
    public String domainEndpoint() {
        return this.domainEndpoint;
    }
    /**
     * @return The peak bandwidth of the instance.
     * 
     */
    public Integer eipMax() {
        return this.eipMax;
    }
    /**
     * @return The endPoint to access the instance.
     * 
     */
    public String endPoint() {
        return this.endPoint;
    }
    /**
     * @return The expired time  of the instance.
     * 
     */
    public Integer expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return ID of the instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The peak value of io of the instance.
     * 
     */
    public Integer ioMax() {
        return this.ioMax;
    }
    /**
     * @return The msg retain of the instance.
     * 
     */
    public Integer msgRetain() {
        return this.msgRetain;
    }
    /**
     * @return Name of the instance.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The paid type of the instance.
     * 
     */
    public String paidType() {
        return this.paidType;
    }
    /**
     * @return The SASL domain point of the instance.
     * 
     */
    public String saslDomainEndpoint() {
        return this.saslDomainEndpoint;
    }
    /**
     * @return The security group of the instance.
     * 
     */
    public String securityGroup() {
        return this.securityGroup;
    }
    /**
     * @return The current status of the instance. -1: unknown status, 0: wait deploy, 1: initializing, 2: preparing, 3 starting, 5: in service, 7: wait upgrade, 8: upgrading, 10: released, 15: freeze, 101: deploy error, 102: upgrade error.
     * 
     */
    public Integer serviceStatus() {
        return this.serviceStatus;
    }
    /**
     * @return The kafka openSource version of the instance.
     * 
     */
    public String serviceVersion() {
        return this.serviceVersion;
    }
    /**
     * @return The spec type of the instance.
     * 
     */
    public String specType() {
        return this.specType;
    }
    /**
     * @return The SSL domain point of the instance.
     * 
     */
    public String sslDomainEndpoint() {
        return this.sslDomainEndpoint;
    }
    /**
     * @return The SSL end point of the instance.
     * 
     */
    public String sslEndPoint() {
        return this.sslEndPoint;
    }
    /**
     * @return A mapping of tags to assign to the instance.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The max num of topic can be create of the instance.
     * 
     */
    public Integer topicQuota() {
        return this.topicQuota;
    }
    /**
     * @return The UpgradeServiceDetailInfo List.
     * 
     */
    public List<GetInstancesInstanceUpgradeServiceDetailInfo> upgradeServiceDetailInfos() {
        return this.upgradeServiceDetailInfos;
    }
    /**
     * @return The ID of attaching VPC to instance.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The ID of attaching vswitch to instance.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The ID of attaching zone to instance.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetInstancesInstanceAllowedList> allowedLists;
        private String config;
        private String createTime;
        private Integer deployType;
        private Integer diskSize;
        private Integer diskType;
        private String domainEndpoint;
        private Integer eipMax;
        private String endPoint;
        private Integer expiredTime;
        private String id;
        private Integer ioMax;
        private Integer msgRetain;
        private String name;
        private String paidType;
        private String saslDomainEndpoint;
        private String securityGroup;
        private Integer serviceStatus;
        private String serviceVersion;
        private String specType;
        private String sslDomainEndpoint;
        private String sslEndPoint;
        private @Nullable Map<String,Object> tags;
        private Integer topicQuota;
        private List<GetInstancesInstanceUpgradeServiceDetailInfo> upgradeServiceDetailInfos;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedLists = defaults.allowedLists;
    	      this.config = defaults.config;
    	      this.createTime = defaults.createTime;
    	      this.deployType = defaults.deployType;
    	      this.diskSize = defaults.diskSize;
    	      this.diskType = defaults.diskType;
    	      this.domainEndpoint = defaults.domainEndpoint;
    	      this.eipMax = defaults.eipMax;
    	      this.endPoint = defaults.endPoint;
    	      this.expiredTime = defaults.expiredTime;
    	      this.id = defaults.id;
    	      this.ioMax = defaults.ioMax;
    	      this.msgRetain = defaults.msgRetain;
    	      this.name = defaults.name;
    	      this.paidType = defaults.paidType;
    	      this.saslDomainEndpoint = defaults.saslDomainEndpoint;
    	      this.securityGroup = defaults.securityGroup;
    	      this.serviceStatus = defaults.serviceStatus;
    	      this.serviceVersion = defaults.serviceVersion;
    	      this.specType = defaults.specType;
    	      this.sslDomainEndpoint = defaults.sslDomainEndpoint;
    	      this.sslEndPoint = defaults.sslEndPoint;
    	      this.tags = defaults.tags;
    	      this.topicQuota = defaults.topicQuota;
    	      this.upgradeServiceDetailInfos = defaults.upgradeServiceDetailInfos;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder allowedLists(List<GetInstancesInstanceAllowedList> allowedLists) {
            this.allowedLists = Objects.requireNonNull(allowedLists);
            return this;
        }
        public Builder allowedLists(GetInstancesInstanceAllowedList... allowedLists) {
            return allowedLists(List.of(allowedLists));
        }
        @CustomType.Setter
        public Builder config(String config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder deployType(Integer deployType) {
            this.deployType = Objects.requireNonNull(deployType);
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(Integer diskSize) {
            this.diskSize = Objects.requireNonNull(diskSize);
            return this;
        }
        @CustomType.Setter
        public Builder diskType(Integer diskType) {
            this.diskType = Objects.requireNonNull(diskType);
            return this;
        }
        @CustomType.Setter
        public Builder domainEndpoint(String domainEndpoint) {
            this.domainEndpoint = Objects.requireNonNull(domainEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder eipMax(Integer eipMax) {
            this.eipMax = Objects.requireNonNull(eipMax);
            return this;
        }
        @CustomType.Setter
        public Builder endPoint(String endPoint) {
            this.endPoint = Objects.requireNonNull(endPoint);
            return this;
        }
        @CustomType.Setter
        public Builder expiredTime(Integer expiredTime) {
            this.expiredTime = Objects.requireNonNull(expiredTime);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ioMax(Integer ioMax) {
            this.ioMax = Objects.requireNonNull(ioMax);
            return this;
        }
        @CustomType.Setter
        public Builder msgRetain(Integer msgRetain) {
            this.msgRetain = Objects.requireNonNull(msgRetain);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder paidType(String paidType) {
            this.paidType = Objects.requireNonNull(paidType);
            return this;
        }
        @CustomType.Setter
        public Builder saslDomainEndpoint(String saslDomainEndpoint) {
            this.saslDomainEndpoint = Objects.requireNonNull(saslDomainEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder securityGroup(String securityGroup) {
            this.securityGroup = Objects.requireNonNull(securityGroup);
            return this;
        }
        @CustomType.Setter
        public Builder serviceStatus(Integer serviceStatus) {
            this.serviceStatus = Objects.requireNonNull(serviceStatus);
            return this;
        }
        @CustomType.Setter
        public Builder serviceVersion(String serviceVersion) {
            this.serviceVersion = Objects.requireNonNull(serviceVersion);
            return this;
        }
        @CustomType.Setter
        public Builder specType(String specType) {
            this.specType = Objects.requireNonNull(specType);
            return this;
        }
        @CustomType.Setter
        public Builder sslDomainEndpoint(String sslDomainEndpoint) {
            this.sslDomainEndpoint = Objects.requireNonNull(sslDomainEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder sslEndPoint(String sslEndPoint) {
            this.sslEndPoint = Objects.requireNonNull(sslEndPoint);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder topicQuota(Integer topicQuota) {
            this.topicQuota = Objects.requireNonNull(topicQuota);
            return this;
        }
        @CustomType.Setter
        public Builder upgradeServiceDetailInfos(List<GetInstancesInstanceUpgradeServiceDetailInfo> upgradeServiceDetailInfos) {
            this.upgradeServiceDetailInfos = Objects.requireNonNull(upgradeServiceDetailInfos);
            return this;
        }
        public Builder upgradeServiceDetailInfos(GetInstancesInstanceUpgradeServiceDetailInfo... upgradeServiceDetailInfos) {
            return upgradeServiceDetailInfos(List.of(upgradeServiceDetailInfos));
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }
        public GetInstancesInstance build() {
            final var o = new GetInstancesInstance();
            o.allowedLists = allowedLists;
            o.config = config;
            o.createTime = createTime;
            o.deployType = deployType;
            o.diskSize = diskSize;
            o.diskType = diskType;
            o.domainEndpoint = domainEndpoint;
            o.eipMax = eipMax;
            o.endPoint = endPoint;
            o.expiredTime = expiredTime;
            o.id = id;
            o.ioMax = ioMax;
            o.msgRetain = msgRetain;
            o.name = name;
            o.paidType = paidType;
            o.saslDomainEndpoint = saslDomainEndpoint;
            o.securityGroup = securityGroup;
            o.serviceStatus = serviceStatus;
            o.serviceVersion = serviceVersion;
            o.specType = specType;
            o.sslDomainEndpoint = sslDomainEndpoint;
            o.sslEndPoint = sslEndPoint;
            o.tags = tags;
            o.topicQuota = topicQuota;
            o.upgradeServiceDetailInfos = upgradeServiceDetailInfos;
            o.vpcId = vpcId;
            o.vswitchId = vswitchId;
            o.zoneId = zoneId;
            return o;
        }
    }
}
