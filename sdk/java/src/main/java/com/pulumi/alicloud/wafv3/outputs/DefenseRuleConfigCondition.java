// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DefenseRuleConfigCondition {
    /**
     * @return Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
     * 
     * &gt; **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
     * 
     */
    private @Nullable String key;
    /**
     * @return Logical character. Value:
     * - not-contain: does not contain.
     * - contain: Indicates to contain.
     * - none: It does not exist.
     * - ne: means not equal.
     * - eq: means equal.
     * - lt: indicates that the value is less.
     * - gt: indicates that the value is greater.
     * - len-lt: indicates that the length is less.
     * - len-eq: indicates that the length is equal.
     * - len-gt: indicates that the length is greater.
     * - not-match: indicates a mismatch.
     * - match-one: means equal to one of the multiple values.
     * - all-not-match: means not equal to any value.
     * - all-not-contain: does not contain any value.
     * - contain-one: Indicates that one of the multiple values is contained.
     * - not-regex: Indicates a regular mismatch.
     * - regex: Indicates a regular match.
     * - all-not-regex: indicates that the regular expressions do not match.
     * - regex-one: Represents a regular match for one of them.
     * - prefix-match: Indicates a prefix match.
     * - suffix-match: indicates a suffix match.
     * - mpty: Indicates that the content is empty.
     * - exists: Indicates that the field exists.
     * - inl: indicates in the list.
     * 
     * &gt; **NOTE:**  Not all logical characters (opvalues) can be configured for the match field (key) of each custom rule. For the logical characters supported by different matching fields, please refer to the association relationship between the matching fields and the logical characters in the custom rules of the WAF console.
     * 
     */
    private @Nullable String opValue;
    /**
     * @return The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
     * 
     */
    private @Nullable String subKey;
    /**
     * @return Match the content and fill in the corresponding content as needed.
     * 
     * &gt; **NOTE:**  The value range of the logical (opValue) and matching content (values) parameters in the matching condition parameter is related to the specified matching field (key).
     * 
     */
    private @Nullable String values;

    private DefenseRuleConfigCondition() {}
    /**
     * @return Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
     * 
     * &gt; **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return Logical character. Value:
     * - not-contain: does not contain.
     * - contain: Indicates to contain.
     * - none: It does not exist.
     * - ne: means not equal.
     * - eq: means equal.
     * - lt: indicates that the value is less.
     * - gt: indicates that the value is greater.
     * - len-lt: indicates that the length is less.
     * - len-eq: indicates that the length is equal.
     * - len-gt: indicates that the length is greater.
     * - not-match: indicates a mismatch.
     * - match-one: means equal to one of the multiple values.
     * - all-not-match: means not equal to any value.
     * - all-not-contain: does not contain any value.
     * - contain-one: Indicates that one of the multiple values is contained.
     * - not-regex: Indicates a regular mismatch.
     * - regex: Indicates a regular match.
     * - all-not-regex: indicates that the regular expressions do not match.
     * - regex-one: Represents a regular match for one of them.
     * - prefix-match: Indicates a prefix match.
     * - suffix-match: indicates a suffix match.
     * - mpty: Indicates that the content is empty.
     * - exists: Indicates that the field exists.
     * - inl: indicates in the list.
     * 
     * &gt; **NOTE:**  Not all logical characters (opvalues) can be configured for the match field (key) of each custom rule. For the logical characters supported by different matching fields, please refer to the association relationship between the matching fields and the logical characters in the custom rules of the WAF console.
     * 
     */
    public Optional<String> opValue() {
        return Optional.ofNullable(this.opValue);
    }
    /**
     * @return The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
     * 
     */
    public Optional<String> subKey() {
        return Optional.ofNullable(this.subKey);
    }
    /**
     * @return Match the content and fill in the corresponding content as needed.
     * 
     * &gt; **NOTE:**  The value range of the logical (opValue) and matching content (values) parameters in the matching condition parameter is related to the specified matching field (key).
     * 
     */
    public Optional<String> values() {
        return Optional.ofNullable(this.values);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DefenseRuleConfigCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String key;
        private @Nullable String opValue;
        private @Nullable String subKey;
        private @Nullable String values;
        public Builder() {}
        public Builder(DefenseRuleConfigCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.key = defaults.key;
    	      this.opValue = defaults.opValue;
    	      this.subKey = defaults.subKey;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder opValue(@Nullable String opValue) {

            this.opValue = opValue;
            return this;
        }
        @CustomType.Setter
        public Builder subKey(@Nullable String subKey) {

            this.subKey = subKey;
            return this;
        }
        @CustomType.Setter
        public Builder values(@Nullable String values) {

            this.values = values;
            return this;
        }
        public DefenseRuleConfigCondition build() {
            final var _resultValue = new DefenseRuleConfigCondition();
            _resultValue.key = key;
            _resultValue.opValue = opValue;
            _resultValue.subKey = subKey;
            _resultValue.values = values;
            return _resultValue;
        }
    }
}
