// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayArgs Empty = new GatewayArgs();

    /**
     * Whether to pay automatically. Default value: `true`. Valid values:
     * 
     */
    @Import(name="autoPay")
    private @Nullable Output<Boolean> autoPay;

    /**
     * @return Whether to pay automatically. Default value: `true`. Valid values:
     * 
     */
    public Optional<Output<Boolean>> autoPay() {
        return Optional.ofNullable(this.autoPay);
    }

    /**
     * Whether to automatically propagate the BGP route to the VPC. Value:  true: Propagate automatically.  false: does not propagate automatically.
     * 
     */
    @Import(name="autoPropagate")
    private @Nullable Output<Boolean> autoPropagate;

    /**
     * @return Whether to automatically propagate the BGP route to the VPC. Value:  true: Propagate automatically.  false: does not propagate automatically.
     * 
     */
    public Optional<Output<Boolean>> autoPropagate() {
        return Optional.ofNullable(this.autoPropagate);
    }

    /**
     * The Bandwidth specification of the VPN gateway. Unit: Mbps.  If you want to create a public VPN gateway, the value is 5, 10, 20, 50, 100, 200, 500, or 1000. If you want to create a private VPN gateway, the value is 200 or 1000.
     * 
     */
    @Import(name="bandwidth", required=true)
    private Output<Integer> bandwidth;

    /**
     * @return The Bandwidth specification of the VPN gateway. Unit: Mbps.  If you want to create a public VPN gateway, the value is 5, 10, 20, 50, 100, 200, 500, or 1000. If you want to create a private VPN gateway, the value is 200 or 1000.
     * 
     */
    public Output<Integer> bandwidth() {
        return this.bandwidth;
    }

    /**
     * The description of the VPN gateway.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the VPN gateway.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the backup VSwitch to which the VPN gateway is attached.
     * 
     */
    @Import(name="disasterRecoveryVswitchId")
    private @Nullable Output<String> disasterRecoveryVswitchId;

    /**
     * @return The ID of the backup VSwitch to which the VPN gateway is attached.
     * 
     */
    public Optional<Output<String>> disasterRecoveryVswitchId() {
        return Optional.ofNullable(this.disasterRecoveryVswitchId);
    }

    /**
     * Enable or Disable IPSec VPN. At least one type of VPN should be enabled.
     * 
     */
    @Import(name="enableIpsec")
    private @Nullable Output<Boolean> enableIpsec;

    /**
     * @return Enable or Disable IPSec VPN. At least one type of VPN should be enabled.
     * 
     */
    public Optional<Output<Boolean>> enableIpsec() {
        return Optional.ofNullable(this.enableIpsec);
    }

    /**
     * Enable or Disable SSL VPN.  At least one type of VPN should be enabled.
     * 
     * The following arguments will be discarded. Please use new fields as soon as possible:
     * 
     */
    @Import(name="enableSsl")
    private @Nullable Output<Boolean> enableSsl;

    /**
     * @return Enable or Disable SSL VPN.  At least one type of VPN should be enabled.
     * 
     * The following arguments will be discarded. Please use new fields as soon as possible:
     * 
     */
    public Optional<Output<Boolean>> enableSsl() {
        return Optional.ofNullable(this.enableSsl);
    }

    /**
     * . Field &#39;instance_charge_type&#39; has been deprecated from provider version 1.216.0. New field &#39;payment_type&#39; instead.
     * 
     * @deprecated
     * Field &#39;instance_charge_type&#39; has been deprecated since provider version 1.215.0. New field &#39;payment_type&#39; instead.
     * 
     */
    @Deprecated /* Field 'instance_charge_type' has been deprecated since provider version 1.215.0. New field 'payment_type' instead. */
    @Import(name="instanceChargeType")
    private @Nullable Output<String> instanceChargeType;

    /**
     * @return . Field &#39;instance_charge_type&#39; has been deprecated from provider version 1.216.0. New field &#39;payment_type&#39; instead.
     * 
     * @deprecated
     * Field &#39;instance_charge_type&#39; has been deprecated since provider version 1.215.0. New field &#39;payment_type&#39; instead.
     * 
     */
    @Deprecated /* Field 'instance_charge_type' has been deprecated since provider version 1.215.0. New field 'payment_type' instead. */
    public Optional<Output<String>> instanceChargeType() {
        return Optional.ofNullable(this.instanceChargeType);
    }

    /**
     * . Field &#39;name&#39; has been deprecated from provider version 1.216.0. New field &#39;vpn_gateway_name&#39; instead.
     * 
     * @deprecated
     * Field &#39;name&#39; has been deprecated since provider version 1.215.0. New field &#39;vpn_gateway_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'name' has been deprecated since provider version 1.215.0. New field 'vpn_gateway_name' instead. */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return . Field &#39;name&#39; has been deprecated from provider version 1.216.0. New field &#39;vpn_gateway_name&#39; instead.
     * 
     * @deprecated
     * Field &#39;name&#39; has been deprecated since provider version 1.215.0. New field &#39;vpn_gateway_name&#39; instead.
     * 
     */
    @Deprecated /* Field 'name' has been deprecated since provider version 1.215.0. New field 'vpn_gateway_name' instead. */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The network type of the VPN gateway. Value:  public (default): public VPN gateway. private: private network VPN gateway.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return The network type of the VPN gateway. Value:  public (default): public VPN gateway. private: private network VPN gateway.
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * Type of payment. Value: Subscription: prepaid PayAsYouGo: Post-paid.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return Type of payment. Value: Subscription: prepaid PayAsYouGo: Post-paid.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * The filed is only required while the InstanceChargeType is PrePaid. Valid values: [1-9, 12, 24, 36]. Default to 1.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The filed is only required while the InstanceChargeType is PrePaid. Valid values: [1-9, 12, 24, 36]. Default to 1.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Maximum number of clients.
     * 
     */
    @Import(name="sslConnections")
    private @Nullable Output<Integer> sslConnections;

    /**
     * @return Maximum number of clients.
     * 
     */
    public Optional<Output<Integer>> sslConnections() {
        return Optional.ofNullable(this.sslConnections);
    }

    /**
     * The Tag of.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return The Tag of.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the VPC to which the VPN gateway belongs.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The ID of the VPC to which the VPN gateway belongs.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * The name of the VPN gateway.
     * 
     */
    @Import(name="vpnGatewayName")
    private @Nullable Output<String> vpnGatewayName;

    /**
     * @return The name of the VPN gateway.
     * 
     */
    public Optional<Output<String>> vpnGatewayName() {
        return Optional.ofNullable(this.vpnGatewayName);
    }

    /**
     * The VPN gateway type. Value:  Normal (default): Normal type. NationalStandard: National Secret type.
     * 
     */
    @Import(name="vpnType")
    private @Nullable Output<String> vpnType;

    /**
     * @return The VPN gateway type. Value:  Normal (default): Normal type. NationalStandard: National Secret type.
     * 
     */
    public Optional<Output<String>> vpnType() {
        return Optional.ofNullable(this.vpnType);
    }

    /**
     * The ID of the VSwitch to which the VPN gateway is attached.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of the VSwitch to which the VPN gateway is attached.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private GatewayArgs() {}

    private GatewayArgs(GatewayArgs $) {
        this.autoPay = $.autoPay;
        this.autoPropagate = $.autoPropagate;
        this.bandwidth = $.bandwidth;
        this.description = $.description;
        this.disasterRecoveryVswitchId = $.disasterRecoveryVswitchId;
        this.enableIpsec = $.enableIpsec;
        this.enableSsl = $.enableSsl;
        this.instanceChargeType = $.instanceChargeType;
        this.name = $.name;
        this.networkType = $.networkType;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.resourceGroupId = $.resourceGroupId;
        this.sslConnections = $.sslConnections;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
        this.vpnGatewayName = $.vpnGatewayName;
        this.vpnType = $.vpnType;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayArgs $;

        public Builder() {
            $ = new GatewayArgs();
        }

        public Builder(GatewayArgs defaults) {
            $ = new GatewayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoPay Whether to pay automatically. Default value: `true`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder autoPay(@Nullable Output<Boolean> autoPay) {
            $.autoPay = autoPay;
            return this;
        }

        /**
         * @param autoPay Whether to pay automatically. Default value: `true`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder autoPay(Boolean autoPay) {
            return autoPay(Output.of(autoPay));
        }

        /**
         * @param autoPropagate Whether to automatically propagate the BGP route to the VPC. Value:  true: Propagate automatically.  false: does not propagate automatically.
         * 
         * @return builder
         * 
         */
        public Builder autoPropagate(@Nullable Output<Boolean> autoPropagate) {
            $.autoPropagate = autoPropagate;
            return this;
        }

        /**
         * @param autoPropagate Whether to automatically propagate the BGP route to the VPC. Value:  true: Propagate automatically.  false: does not propagate automatically.
         * 
         * @return builder
         * 
         */
        public Builder autoPropagate(Boolean autoPropagate) {
            return autoPropagate(Output.of(autoPropagate));
        }

        /**
         * @param bandwidth The Bandwidth specification of the VPN gateway. Unit: Mbps.  If you want to create a public VPN gateway, the value is 5, 10, 20, 50, 100, 200, 500, or 1000. If you want to create a private VPN gateway, the value is 200 or 1000.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth The Bandwidth specification of the VPN gateway. Unit: Mbps.  If you want to create a public VPN gateway, the value is 5, 10, 20, 50, 100, 200, 500, or 1000. If you want to create a private VPN gateway, the value is 200 or 1000.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param description The description of the VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disasterRecoveryVswitchId The ID of the backup VSwitch to which the VPN gateway is attached.
         * 
         * @return builder
         * 
         */
        public Builder disasterRecoveryVswitchId(@Nullable Output<String> disasterRecoveryVswitchId) {
            $.disasterRecoveryVswitchId = disasterRecoveryVswitchId;
            return this;
        }

        /**
         * @param disasterRecoveryVswitchId The ID of the backup VSwitch to which the VPN gateway is attached.
         * 
         * @return builder
         * 
         */
        public Builder disasterRecoveryVswitchId(String disasterRecoveryVswitchId) {
            return disasterRecoveryVswitchId(Output.of(disasterRecoveryVswitchId));
        }

        /**
         * @param enableIpsec Enable or Disable IPSec VPN. At least one type of VPN should be enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableIpsec(@Nullable Output<Boolean> enableIpsec) {
            $.enableIpsec = enableIpsec;
            return this;
        }

        /**
         * @param enableIpsec Enable or Disable IPSec VPN. At least one type of VPN should be enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableIpsec(Boolean enableIpsec) {
            return enableIpsec(Output.of(enableIpsec));
        }

        /**
         * @param enableSsl Enable or Disable SSL VPN.  At least one type of VPN should be enabled.
         * 
         * The following arguments will be discarded. Please use new fields as soon as possible:
         * 
         * @return builder
         * 
         */
        public Builder enableSsl(@Nullable Output<Boolean> enableSsl) {
            $.enableSsl = enableSsl;
            return this;
        }

        /**
         * @param enableSsl Enable or Disable SSL VPN.  At least one type of VPN should be enabled.
         * 
         * The following arguments will be discarded. Please use new fields as soon as possible:
         * 
         * @return builder
         * 
         */
        public Builder enableSsl(Boolean enableSsl) {
            return enableSsl(Output.of(enableSsl));
        }

        /**
         * @param instanceChargeType . Field &#39;instance_charge_type&#39; has been deprecated from provider version 1.216.0. New field &#39;payment_type&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;instance_charge_type&#39; has been deprecated since provider version 1.215.0. New field &#39;payment_type&#39; instead.
         * 
         */
        @Deprecated /* Field 'instance_charge_type' has been deprecated since provider version 1.215.0. New field 'payment_type' instead. */
        public Builder instanceChargeType(@Nullable Output<String> instanceChargeType) {
            $.instanceChargeType = instanceChargeType;
            return this;
        }

        /**
         * @param instanceChargeType . Field &#39;instance_charge_type&#39; has been deprecated from provider version 1.216.0. New field &#39;payment_type&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;instance_charge_type&#39; has been deprecated since provider version 1.215.0. New field &#39;payment_type&#39; instead.
         * 
         */
        @Deprecated /* Field 'instance_charge_type' has been deprecated since provider version 1.215.0. New field 'payment_type' instead. */
        public Builder instanceChargeType(String instanceChargeType) {
            return instanceChargeType(Output.of(instanceChargeType));
        }

        /**
         * @param name . Field &#39;name&#39; has been deprecated from provider version 1.216.0. New field &#39;vpn_gateway_name&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;name&#39; has been deprecated since provider version 1.215.0. New field &#39;vpn_gateway_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'name' has been deprecated since provider version 1.215.0. New field 'vpn_gateway_name' instead. */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name . Field &#39;name&#39; has been deprecated from provider version 1.216.0. New field &#39;vpn_gateway_name&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;name&#39; has been deprecated since provider version 1.215.0. New field &#39;vpn_gateway_name&#39; instead.
         * 
         */
        @Deprecated /* Field 'name' has been deprecated since provider version 1.215.0. New field 'vpn_gateway_name' instead. */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkType The network type of the VPN gateway. Value:  public (default): public VPN gateway. private: private network VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The network type of the VPN gateway. Value:  public (default): public VPN gateway. private: private network VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param paymentType Type of payment. Value: Subscription: prepaid PayAsYouGo: Post-paid.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType Type of payment. Value: Subscription: prepaid PayAsYouGo: Post-paid.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period The filed is only required while the InstanceChargeType is PrePaid. Valid values: [1-9, 12, 24, 36]. Default to 1.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The filed is only required while the InstanceChargeType is PrePaid. Valid values: [1-9, 12, 24, 36]. Default to 1.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param sslConnections Maximum number of clients.
         * 
         * @return builder
         * 
         */
        public Builder sslConnections(@Nullable Output<Integer> sslConnections) {
            $.sslConnections = sslConnections;
            return this;
        }

        /**
         * @param sslConnections Maximum number of clients.
         * 
         * @return builder
         * 
         */
        public Builder sslConnections(Integer sslConnections) {
            return sslConnections(Output.of(sslConnections));
        }

        /**
         * @param tags The Tag of.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The Tag of.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vpcId The ID of the VPC to which the VPN gateway belongs.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC to which the VPN gateway belongs.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vpnGatewayName The name of the VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder vpnGatewayName(@Nullable Output<String> vpnGatewayName) {
            $.vpnGatewayName = vpnGatewayName;
            return this;
        }

        /**
         * @param vpnGatewayName The name of the VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder vpnGatewayName(String vpnGatewayName) {
            return vpnGatewayName(Output.of(vpnGatewayName));
        }

        /**
         * @param vpnType The VPN gateway type. Value:  Normal (default): Normal type. NationalStandard: National Secret type.
         * 
         * @return builder
         * 
         */
        public Builder vpnType(@Nullable Output<String> vpnType) {
            $.vpnType = vpnType;
            return this;
        }

        /**
         * @param vpnType The VPN gateway type. Value:  Normal (default): Normal type. NationalStandard: National Secret type.
         * 
         * @return builder
         * 
         */
        public Builder vpnType(String vpnType) {
            return vpnType(Output.of(vpnType));
        }

        /**
         * @param vswitchId The ID of the VSwitch to which the VPN gateway is attached.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the VSwitch to which the VPN gateway is attached.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public GatewayArgs build() {
            if ($.bandwidth == null) {
                throw new MissingRequiredPropertyException("GatewayArgs", "bandwidth");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("GatewayArgs", "vpcId");
            }
            return $;
        }
    }

}
