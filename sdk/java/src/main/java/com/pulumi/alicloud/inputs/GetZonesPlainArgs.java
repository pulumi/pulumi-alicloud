// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetZonesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetZonesPlainArgs Empty = new GetZonesPlainArgs();

    /**
     * Filter the results by a specific disk category. Can be either `cloud`, `cloud_efficiency`, `cloud_ssd`, `ephemeral_ssd`.
     * 
     */
    @Import(name="availableDiskCategory")
    private @Nullable String availableDiskCategory;

    /**
     * @return Filter the results by a specific disk category. Can be either `cloud`, `cloud_efficiency`, `cloud_ssd`, `ephemeral_ssd`.
     * 
     */
    public Optional<String> availableDiskCategory() {
        return Optional.ofNullable(this.availableDiskCategory);
    }

    /**
     * Filter the results by a specific instance type.
     * 
     */
    @Import(name="availableInstanceType")
    private @Nullable String availableInstanceType;

    /**
     * @return Filter the results by a specific instance type.
     * 
     */
    public Optional<String> availableInstanceType() {
        return Optional.ofNullable(this.availableInstanceType);
    }

    /**
     * Filter the results by a specific resource type.
     * Valid values: `Instance`, `Disk`, `VSwitch`, `Rds`, `KVStore`, `FunctionCompute`, `Elasticsearch`, `Slb`.
     * 
     * &gt; **NOTE:** From version 1.134.0, the `available_resource_creation` value &#34;Rds&#34; has been deprecated.
     * If you want to fetch the available zones for RDS instance, you can use datasource alicloud_db_zones
     * 
     */
    @Import(name="availableResourceCreation")
    private @Nullable String availableResourceCreation;

    /**
     * @return Filter the results by a specific resource type.
     * Valid values: `Instance`, `Disk`, `VSwitch`, `Rds`, `KVStore`, `FunctionCompute`, `Elasticsearch`, `Slb`.
     * 
     * &gt; **NOTE:** From version 1.134.0, the `available_resource_creation` value &#34;Rds&#34; has been deprecated.
     * If you want to fetch the available zones for RDS instance, you can use datasource alicloud_db_zones
     * 
     */
    public Optional<String> availableResourceCreation() {
        return Optional.ofNullable(this.availableResourceCreation);
    }

    /**
     * Filter the results by a slb instance address version. Can be either `ipv4`, or `ipv6`.
     * 
     * &gt; **NOTE:** The disk category `cloud` has been outdated and can only be used by non-I/O Optimized ECS instances. Many availability zones don&#39;t support it. It is recommended to use `cloud_efficiency` or `cloud_ssd`.
     * 
     */
    @Import(name="availableSlbAddressIpVersion")
    private @Nullable String availableSlbAddressIpVersion;

    /**
     * @return Filter the results by a slb instance address version. Can be either `ipv4`, or `ipv6`.
     * 
     * &gt; **NOTE:** The disk category `cloud` has been outdated and can only be used by non-I/O Optimized ECS instances. Many availability zones don&#39;t support it. It is recommended to use `cloud_efficiency` or `cloud_ssd`.
     * 
     */
    public Optional<String> availableSlbAddressIpVersion() {
        return Optional.ofNullable(this.availableSlbAddressIpVersion);
    }

    /**
     * Filter the results by a slb instance address type. Can be either `Vpc`, `classic_internet` or `classic_intranet`
     * 
     */
    @Import(name="availableSlbAddressType")
    private @Nullable String availableSlbAddressType;

    /**
     * @return Filter the results by a slb instance address type. Can be either `Vpc`, `classic_internet` or `classic_intranet`
     * 
     */
    public Optional<String> availableSlbAddressType() {
        return Optional.ofNullable(this.availableSlbAddressType);
    }

    /**
     * Default to false and only output `id` in the `zones` block. Set it to true can output more details.
     * 
     */
    @Import(name="enableDetails")
    private @Nullable Boolean enableDetails;

    /**
     * @return Default to false and only output `id` in the `zones` block. Set it to true can output more details.
     * 
     */
    public Optional<Boolean> enableDetails() {
        return Optional.ofNullable(this.enableDetails);
    }

    /**
     * Filter the results by a specific ECS instance charge type. Valid values: `PrePaid` and `PostPaid`. Default to `PostPaid`.
     * 
     */
    @Import(name="instanceChargeType")
    private @Nullable String instanceChargeType;

    /**
     * @return Filter the results by a specific ECS instance charge type. Valid values: `PrePaid` and `PostPaid`. Default to `PostPaid`.
     * 
     */
    public Optional<String> instanceChargeType() {
        return Optional.ofNullable(this.instanceChargeType);
    }

    /**
     * Indicate whether the zones can be used in a multi AZ configuration. Default to `false`. Multi AZ is usually used to launch RDS instances.
     * 
     */
    @Import(name="multi")
    private @Nullable Boolean multi;

    /**
     * @return Indicate whether the zones can be used in a multi AZ configuration. Default to `false`. Multi AZ is usually used to launch RDS instances.
     * 
     */
    public Optional<Boolean> multi() {
        return Optional.ofNullable(this.multi);
    }

    /**
     * Filter the results by a specific network type. Valid values: `Classic` and `Vpc`.
     * 
     */
    @Import(name="networkType")
    private @Nullable String networkType;

    /**
     * @return Filter the results by a specific network type. Valid values: `Classic` and `Vpc`.
     * 
     */
    public Optional<String> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable String outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * - (Optional) Filter the results by a specific ECS spot type. Valid values: `NoSpot`, `SpotWithPriceLimit` and `SpotAsPriceGo`. Default to `NoSpot`.
     * 
     */
    @Import(name="spotStrategy")
    private @Nullable String spotStrategy;

    /**
     * @return - (Optional) Filter the results by a specific ECS spot type. Valid values: `NoSpot`, `SpotWithPriceLimit` and `SpotAsPriceGo`. Default to `NoSpot`.
     * 
     */
    public Optional<String> spotStrategy() {
        return Optional.ofNullable(this.spotStrategy);
    }

    private GetZonesPlainArgs() {}

    private GetZonesPlainArgs(GetZonesPlainArgs $) {
        this.availableDiskCategory = $.availableDiskCategory;
        this.availableInstanceType = $.availableInstanceType;
        this.availableResourceCreation = $.availableResourceCreation;
        this.availableSlbAddressIpVersion = $.availableSlbAddressIpVersion;
        this.availableSlbAddressType = $.availableSlbAddressType;
        this.enableDetails = $.enableDetails;
        this.instanceChargeType = $.instanceChargeType;
        this.multi = $.multi;
        this.networkType = $.networkType;
        this.outputFile = $.outputFile;
        this.spotStrategy = $.spotStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetZonesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetZonesPlainArgs $;

        public Builder() {
            $ = new GetZonesPlainArgs();
        }

        public Builder(GetZonesPlainArgs defaults) {
            $ = new GetZonesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availableDiskCategory Filter the results by a specific disk category. Can be either `cloud`, `cloud_efficiency`, `cloud_ssd`, `ephemeral_ssd`.
         * 
         * @return builder
         * 
         */
        public Builder availableDiskCategory(@Nullable String availableDiskCategory) {
            $.availableDiskCategory = availableDiskCategory;
            return this;
        }

        /**
         * @param availableInstanceType Filter the results by a specific instance type.
         * 
         * @return builder
         * 
         */
        public Builder availableInstanceType(@Nullable String availableInstanceType) {
            $.availableInstanceType = availableInstanceType;
            return this;
        }

        /**
         * @param availableResourceCreation Filter the results by a specific resource type.
         * Valid values: `Instance`, `Disk`, `VSwitch`, `Rds`, `KVStore`, `FunctionCompute`, `Elasticsearch`, `Slb`.
         * 
         * &gt; **NOTE:** From version 1.134.0, the `available_resource_creation` value &#34;Rds&#34; has been deprecated.
         * If you want to fetch the available zones for RDS instance, you can use datasource alicloud_db_zones
         * 
         * @return builder
         * 
         */
        public Builder availableResourceCreation(@Nullable String availableResourceCreation) {
            $.availableResourceCreation = availableResourceCreation;
            return this;
        }

        /**
         * @param availableSlbAddressIpVersion Filter the results by a slb instance address version. Can be either `ipv4`, or `ipv6`.
         * 
         * &gt; **NOTE:** The disk category `cloud` has been outdated and can only be used by non-I/O Optimized ECS instances. Many availability zones don&#39;t support it. It is recommended to use `cloud_efficiency` or `cloud_ssd`.
         * 
         * @return builder
         * 
         */
        public Builder availableSlbAddressIpVersion(@Nullable String availableSlbAddressIpVersion) {
            $.availableSlbAddressIpVersion = availableSlbAddressIpVersion;
            return this;
        }

        /**
         * @param availableSlbAddressType Filter the results by a slb instance address type. Can be either `Vpc`, `classic_internet` or `classic_intranet`
         * 
         * @return builder
         * 
         */
        public Builder availableSlbAddressType(@Nullable String availableSlbAddressType) {
            $.availableSlbAddressType = availableSlbAddressType;
            return this;
        }

        /**
         * @param enableDetails Default to false and only output `id` in the `zones` block. Set it to true can output more details.
         * 
         * @return builder
         * 
         */
        public Builder enableDetails(@Nullable Boolean enableDetails) {
            $.enableDetails = enableDetails;
            return this;
        }

        /**
         * @param instanceChargeType Filter the results by a specific ECS instance charge type. Valid values: `PrePaid` and `PostPaid`. Default to `PostPaid`.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(@Nullable String instanceChargeType) {
            $.instanceChargeType = instanceChargeType;
            return this;
        }

        /**
         * @param multi Indicate whether the zones can be used in a multi AZ configuration. Default to `false`. Multi AZ is usually used to launch RDS instances.
         * 
         * @return builder
         * 
         */
        public Builder multi(@Nullable Boolean multi) {
            $.multi = multi;
            return this;
        }

        /**
         * @param networkType Filter the results by a specific network type. Valid values: `Classic` and `Vpc`.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable String networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param spotStrategy - (Optional) Filter the results by a specific ECS spot type. Valid values: `NoSpot`, `SpotWithPriceLimit` and `SpotAsPriceGo`. Default to `NoSpot`.
         * 
         * @return builder
         * 
         */
        public Builder spotStrategy(@Nullable String spotStrategy) {
            $.spotStrategy = spotStrategy;
            return this;
        }

        public GetZonesPlainArgs build() {
            return $;
        }
    }

}
