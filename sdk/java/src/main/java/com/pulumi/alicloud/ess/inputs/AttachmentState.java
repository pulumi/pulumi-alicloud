// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttachmentState extends com.pulumi.resources.ResourceArgs {

    public static final AttachmentState Empty = new AttachmentState();

    /**
     * Specifies whether the scaling group manages the lifecycles of the instances that are manually added to the scaling group.
     * 
     */
    @Import(name="entrusted")
    private @Nullable Output<Boolean> entrusted;

    /**
     * @return Specifies whether the scaling group manages the lifecycles of the instances that are manually added to the scaling group.
     * 
     */
    public Optional<Output<Boolean>> entrusted() {
        return Optional.ofNullable(this.entrusted);
    }

    /**
     * Whether to remove forcibly &#34;AutoCreated&#34; ECS instances in order to release scaling group capacity &#34;MaxSize&#34; for attaching ECS instances. Default to false.
     * 
     */
    @Import(name="force")
    private @Nullable Output<Boolean> force;

    /**
     * @return Whether to remove forcibly &#34;AutoCreated&#34; ECS instances in order to release scaling group capacity &#34;MaxSize&#34; for attaching ECS instances. Default to false.
     * 
     */
    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * ID of the ECS instance to be attached to the scaling group. You can input up to 20 IDs.
     * 
     */
    @Import(name="instanceIds")
    private @Nullable Output<List<String>> instanceIds;

    /**
     * @return ID of the ECS instance to be attached to the scaling group. You can input up to 20 IDs.
     * 
     */
    public Optional<Output<List<String>>> instanceIds() {
        return Optional.ofNullable(this.instanceIds);
    }

    /**
     * Specifies whether to trigger a lifecycle hook for the scaling group to which instances are being added.
     * 
     */
    @Import(name="lifecycleHook")
    private @Nullable Output<Boolean> lifecycleHook;

    /**
     * @return Specifies whether to trigger a lifecycle hook for the scaling group to which instances are being added.
     * 
     */
    public Optional<Output<Boolean>> lifecycleHook() {
        return Optional.ofNullable(this.lifecycleHook);
    }

    /**
     * The weight of ECS instance N or elastic container instance N as a backend server of the associated Server Load Balancer (SLB) instance. Valid values of N: 1 to 20. Valid values of this parameter: 1 to 100.
     * 
     * &gt; **NOTE:** &#34;AutoCreated&#34; ECS instance will be deleted after it is removed from scaling group, but &#34;Attached&#34; will be not.
     * 
     * &gt; **NOTE:** Restrictions on attaching ECS instances:
     * 
     * - The attached ECS instances and the scaling group must have the same region and network type(`Classic` or `VPC`).
     * - The attached ECS instances and the instance with active scaling configurations must have the same instance type.
     * - The attached ECS instances must in the running state.
     * - The attached ECS instances has not been attached to other scaling groups.
     * - The attached ECS instances supports Subscription and Pay-As-You-Go payment methods.
     * 
     */
    @Import(name="loadBalancerWeights")
    private @Nullable Output<List<Integer>> loadBalancerWeights;

    /**
     * @return The weight of ECS instance N or elastic container instance N as a backend server of the associated Server Load Balancer (SLB) instance. Valid values of N: 1 to 20. Valid values of this parameter: 1 to 100.
     * 
     * &gt; **NOTE:** &#34;AutoCreated&#34; ECS instance will be deleted after it is removed from scaling group, but &#34;Attached&#34; will be not.
     * 
     * &gt; **NOTE:** Restrictions on attaching ECS instances:
     * 
     * - The attached ECS instances and the scaling group must have the same region and network type(`Classic` or `VPC`).
     * - The attached ECS instances and the instance with active scaling configurations must have the same instance type.
     * - The attached ECS instances must in the running state.
     * - The attached ECS instances has not been attached to other scaling groups.
     * - The attached ECS instances supports Subscription and Pay-As-You-Go payment methods.
     * 
     */
    public Optional<Output<List<Integer>>> loadBalancerWeights() {
        return Optional.ofNullable(this.loadBalancerWeights);
    }

    /**
     * ID of the scaling group of a scaling configuration.
     * 
     */
    @Import(name="scalingGroupId")
    private @Nullable Output<String> scalingGroupId;

    /**
     * @return ID of the scaling group of a scaling configuration.
     * 
     */
    public Optional<Output<String>> scalingGroupId() {
        return Optional.ofNullable(this.scalingGroupId);
    }

    private AttachmentState() {}

    private AttachmentState(AttachmentState $) {
        this.entrusted = $.entrusted;
        this.force = $.force;
        this.instanceIds = $.instanceIds;
        this.lifecycleHook = $.lifecycleHook;
        this.loadBalancerWeights = $.loadBalancerWeights;
        this.scalingGroupId = $.scalingGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttachmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttachmentState $;

        public Builder() {
            $ = new AttachmentState();
        }

        public Builder(AttachmentState defaults) {
            $ = new AttachmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param entrusted Specifies whether the scaling group manages the lifecycles of the instances that are manually added to the scaling group.
         * 
         * @return builder
         * 
         */
        public Builder entrusted(@Nullable Output<Boolean> entrusted) {
            $.entrusted = entrusted;
            return this;
        }

        /**
         * @param entrusted Specifies whether the scaling group manages the lifecycles of the instances that are manually added to the scaling group.
         * 
         * @return builder
         * 
         */
        public Builder entrusted(Boolean entrusted) {
            return entrusted(Output.of(entrusted));
        }

        /**
         * @param force Whether to remove forcibly &#34;AutoCreated&#34; ECS instances in order to release scaling group capacity &#34;MaxSize&#34; for attaching ECS instances. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force Whether to remove forcibly &#34;AutoCreated&#34; ECS instances in order to release scaling group capacity &#34;MaxSize&#34; for attaching ECS instances. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        /**
         * @param instanceIds ID of the ECS instance to be attached to the scaling group. You can input up to 20 IDs.
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(@Nullable Output<List<String>> instanceIds) {
            $.instanceIds = instanceIds;
            return this;
        }

        /**
         * @param instanceIds ID of the ECS instance to be attached to the scaling group. You can input up to 20 IDs.
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(List<String> instanceIds) {
            return instanceIds(Output.of(instanceIds));
        }

        /**
         * @param instanceIds ID of the ECS instance to be attached to the scaling group. You can input up to 20 IDs.
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(String... instanceIds) {
            return instanceIds(List.of(instanceIds));
        }

        /**
         * @param lifecycleHook Specifies whether to trigger a lifecycle hook for the scaling group to which instances are being added.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleHook(@Nullable Output<Boolean> lifecycleHook) {
            $.lifecycleHook = lifecycleHook;
            return this;
        }

        /**
         * @param lifecycleHook Specifies whether to trigger a lifecycle hook for the scaling group to which instances are being added.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleHook(Boolean lifecycleHook) {
            return lifecycleHook(Output.of(lifecycleHook));
        }

        /**
         * @param loadBalancerWeights The weight of ECS instance N or elastic container instance N as a backend server of the associated Server Load Balancer (SLB) instance. Valid values of N: 1 to 20. Valid values of this parameter: 1 to 100.
         * 
         * &gt; **NOTE:** &#34;AutoCreated&#34; ECS instance will be deleted after it is removed from scaling group, but &#34;Attached&#34; will be not.
         * 
         * &gt; **NOTE:** Restrictions on attaching ECS instances:
         * 
         * - The attached ECS instances and the scaling group must have the same region and network type(`Classic` or `VPC`).
         * - The attached ECS instances and the instance with active scaling configurations must have the same instance type.
         * - The attached ECS instances must in the running state.
         * - The attached ECS instances has not been attached to other scaling groups.
         * - The attached ECS instances supports Subscription and Pay-As-You-Go payment methods.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerWeights(@Nullable Output<List<Integer>> loadBalancerWeights) {
            $.loadBalancerWeights = loadBalancerWeights;
            return this;
        }

        /**
         * @param loadBalancerWeights The weight of ECS instance N or elastic container instance N as a backend server of the associated Server Load Balancer (SLB) instance. Valid values of N: 1 to 20. Valid values of this parameter: 1 to 100.
         * 
         * &gt; **NOTE:** &#34;AutoCreated&#34; ECS instance will be deleted after it is removed from scaling group, but &#34;Attached&#34; will be not.
         * 
         * &gt; **NOTE:** Restrictions on attaching ECS instances:
         * 
         * - The attached ECS instances and the scaling group must have the same region and network type(`Classic` or `VPC`).
         * - The attached ECS instances and the instance with active scaling configurations must have the same instance type.
         * - The attached ECS instances must in the running state.
         * - The attached ECS instances has not been attached to other scaling groups.
         * - The attached ECS instances supports Subscription and Pay-As-You-Go payment methods.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerWeights(List<Integer> loadBalancerWeights) {
            return loadBalancerWeights(Output.of(loadBalancerWeights));
        }

        /**
         * @param loadBalancerWeights The weight of ECS instance N or elastic container instance N as a backend server of the associated Server Load Balancer (SLB) instance. Valid values of N: 1 to 20. Valid values of this parameter: 1 to 100.
         * 
         * &gt; **NOTE:** &#34;AutoCreated&#34; ECS instance will be deleted after it is removed from scaling group, but &#34;Attached&#34; will be not.
         * 
         * &gt; **NOTE:** Restrictions on attaching ECS instances:
         * 
         * - The attached ECS instances and the scaling group must have the same region and network type(`Classic` or `VPC`).
         * - The attached ECS instances and the instance with active scaling configurations must have the same instance type.
         * - The attached ECS instances must in the running state.
         * - The attached ECS instances has not been attached to other scaling groups.
         * - The attached ECS instances supports Subscription and Pay-As-You-Go payment methods.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerWeights(Integer... loadBalancerWeights) {
            return loadBalancerWeights(List.of(loadBalancerWeights));
        }

        /**
         * @param scalingGroupId ID of the scaling group of a scaling configuration.
         * 
         * @return builder
         * 
         */
        public Builder scalingGroupId(@Nullable Output<String> scalingGroupId) {
            $.scalingGroupId = scalingGroupId;
            return this;
        }

        /**
         * @param scalingGroupId ID of the scaling group of a scaling configuration.
         * 
         * @return builder
         * 
         */
        public Builder scalingGroupId(String scalingGroupId) {
            return scalingGroupId(Output.of(scalingGroupId));
        }

        public AttachmentState build() {
            return $;
        }
    }

}
