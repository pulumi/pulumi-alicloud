// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudfirewall.inputs;

import com.pulumi.alicloud.cloudfirewall.inputs.NatFirewallNatRouteEntryListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NatFirewallState extends com.pulumi.resources.ResourceArgs {

    public static final NatFirewallState Empty = new NatFirewallState();

    /**
     * Safety protection switch. Value:-**open**: open-**close**: close.
     * 
     */
    @Import(name="firewallSwitch")
    private @Nullable Output<String> firewallSwitch;

    /**
     * @return Safety protection switch. Value:-**open**: open-**close**: close.
     * 
     */
    public Optional<Output<String>> firewallSwitch() {
        return Optional.ofNullable(this.firewallSwitch);
    }

    /**
     * Lang.
     * 
     */
    @Import(name="lang")
    private @Nullable Output<String> lang;

    /**
     * @return Lang.
     * 
     */
    public Optional<Output<String>> lang() {
        return Optional.ofNullable(this.lang);
    }

    /**
     * NAT gateway ID.
     * 
     */
    @Import(name="natGatewayId")
    private @Nullable Output<String> natGatewayId;

    /**
     * @return NAT gateway ID.
     * 
     */
    public Optional<Output<String>> natGatewayId() {
        return Optional.ofNullable(this.natGatewayId);
    }

    /**
     * The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
     * 
     */
    @Import(name="natRouteEntryLists")
    private @Nullable Output<List<NatFirewallNatRouteEntryListArgs>> natRouteEntryLists;

    /**
     * @return The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
     * 
     */
    public Optional<Output<List<NatFirewallNatRouteEntryListArgs>>> natRouteEntryLists() {
        return Optional.ofNullable(this.natRouteEntryLists);
    }

    /**
     * NAT firewall name.
     * 
     */
    @Import(name="proxyName")
    private @Nullable Output<String> proxyName;

    /**
     * @return NAT firewall name.
     * 
     */
    public Optional<Output<String>> proxyName() {
        return Optional.ofNullable(this.proxyName);
    }

    /**
     * Region.
     * 
     */
    @Import(name="regionNo")
    private @Nullable Output<String> regionNo;

    /**
     * @return Region.
     * 
     */
    public Optional<Output<String>> regionNo() {
        return Optional.ofNullable(this.regionNo);
    }

    /**
     * The status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
     * 
     */
    @Import(name="strictMode")
    private @Nullable Output<Integer> strictMode;

    /**
     * @return Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
     * 
     */
    public Optional<Output<Integer>> strictMode() {
        return Optional.ofNullable(this.strictMode);
    }

    /**
     * The ID of the VPC instance.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The ID of the VPC instance.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
     * 
     */
    @Import(name="vswitchAuto")
    private @Nullable Output<String> vswitchAuto;

    /**
     * @return Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
     * 
     */
    public Optional<Output<String>> vswitchAuto() {
        return Optional.ofNullable(this.vswitchAuto);
    }

    /**
     * The network segment of the virtual switch. Required for Switch automatic mode.
     * 
     */
    @Import(name="vswitchCidr")
    private @Nullable Output<String> vswitchCidr;

    /**
     * @return The network segment of the virtual switch. Required for Switch automatic mode.
     * 
     */
    public Optional<Output<String>> vswitchCidr() {
        return Optional.ofNullable(this.vswitchCidr);
    }

    /**
     * The switch ID. Required for switch manual mode.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The switch ID. Required for switch manual mode.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private NatFirewallState() {}

    private NatFirewallState(NatFirewallState $) {
        this.firewallSwitch = $.firewallSwitch;
        this.lang = $.lang;
        this.natGatewayId = $.natGatewayId;
        this.natRouteEntryLists = $.natRouteEntryLists;
        this.proxyName = $.proxyName;
        this.regionNo = $.regionNo;
        this.status = $.status;
        this.strictMode = $.strictMode;
        this.vpcId = $.vpcId;
        this.vswitchAuto = $.vswitchAuto;
        this.vswitchCidr = $.vswitchCidr;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NatFirewallState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NatFirewallState $;

        public Builder() {
            $ = new NatFirewallState();
        }

        public Builder(NatFirewallState defaults) {
            $ = new NatFirewallState(Objects.requireNonNull(defaults));
        }

        /**
         * @param firewallSwitch Safety protection switch. Value:-**open**: open-**close**: close.
         * 
         * @return builder
         * 
         */
        public Builder firewallSwitch(@Nullable Output<String> firewallSwitch) {
            $.firewallSwitch = firewallSwitch;
            return this;
        }

        /**
         * @param firewallSwitch Safety protection switch. Value:-**open**: open-**close**: close.
         * 
         * @return builder
         * 
         */
        public Builder firewallSwitch(String firewallSwitch) {
            return firewallSwitch(Output.of(firewallSwitch));
        }

        /**
         * @param lang Lang.
         * 
         * @return builder
         * 
         */
        public Builder lang(@Nullable Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang Lang.
         * 
         * @return builder
         * 
         */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param natGatewayId NAT gateway ID.
         * 
         * @return builder
         * 
         */
        public Builder natGatewayId(@Nullable Output<String> natGatewayId) {
            $.natGatewayId = natGatewayId;
            return this;
        }

        /**
         * @param natGatewayId NAT gateway ID.
         * 
         * @return builder
         * 
         */
        public Builder natGatewayId(String natGatewayId) {
            return natGatewayId(Output.of(natGatewayId));
        }

        /**
         * @param natRouteEntryLists The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
         * 
         * @return builder
         * 
         */
        public Builder natRouteEntryLists(@Nullable Output<List<NatFirewallNatRouteEntryListArgs>> natRouteEntryLists) {
            $.natRouteEntryLists = natRouteEntryLists;
            return this;
        }

        /**
         * @param natRouteEntryLists The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
         * 
         * @return builder
         * 
         */
        public Builder natRouteEntryLists(List<NatFirewallNatRouteEntryListArgs> natRouteEntryLists) {
            return natRouteEntryLists(Output.of(natRouteEntryLists));
        }

        /**
         * @param natRouteEntryLists The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
         * 
         * @return builder
         * 
         */
        public Builder natRouteEntryLists(NatFirewallNatRouteEntryListArgs... natRouteEntryLists) {
            return natRouteEntryLists(List.of(natRouteEntryLists));
        }

        /**
         * @param proxyName NAT firewall name.
         * 
         * @return builder
         * 
         */
        public Builder proxyName(@Nullable Output<String> proxyName) {
            $.proxyName = proxyName;
            return this;
        }

        /**
         * @param proxyName NAT firewall name.
         * 
         * @return builder
         * 
         */
        public Builder proxyName(String proxyName) {
            return proxyName(Output.of(proxyName));
        }

        /**
         * @param regionNo Region.
         * 
         * @return builder
         * 
         */
        public Builder regionNo(@Nullable Output<String> regionNo) {
            $.regionNo = regionNo;
            return this;
        }

        /**
         * @param regionNo Region.
         * 
         * @return builder
         * 
         */
        public Builder regionNo(String regionNo) {
            return regionNo(Output.of(regionNo));
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param strictMode Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
         * 
         * @return builder
         * 
         */
        public Builder strictMode(@Nullable Output<Integer> strictMode) {
            $.strictMode = strictMode;
            return this;
        }

        /**
         * @param strictMode Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
         * 
         * @return builder
         * 
         */
        public Builder strictMode(Integer strictMode) {
            return strictMode(Output.of(strictMode));
        }

        /**
         * @param vpcId The ID of the VPC instance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC instance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchAuto Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
         * 
         * @return builder
         * 
         */
        public Builder vswitchAuto(@Nullable Output<String> vswitchAuto) {
            $.vswitchAuto = vswitchAuto;
            return this;
        }

        /**
         * @param vswitchAuto Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
         * 
         * @return builder
         * 
         */
        public Builder vswitchAuto(String vswitchAuto) {
            return vswitchAuto(Output.of(vswitchAuto));
        }

        /**
         * @param vswitchCidr The network segment of the virtual switch. Required for Switch automatic mode.
         * 
         * @return builder
         * 
         */
        public Builder vswitchCidr(@Nullable Output<String> vswitchCidr) {
            $.vswitchCidr = vswitchCidr;
            return this;
        }

        /**
         * @param vswitchCidr The network segment of the virtual switch. Required for Switch automatic mode.
         * 
         * @return builder
         * 
         */
        public Builder vswitchCidr(String vswitchCidr) {
            return vswitchCidr(Output.of(vswitchCidr));
        }

        /**
         * @param vswitchId The switch ID. Required for switch manual mode.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The switch ID. Required for switch manual mode.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public NatFirewallState build() {
            return $;
        }
    }

}
