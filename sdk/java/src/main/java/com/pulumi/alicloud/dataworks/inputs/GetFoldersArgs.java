// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dataworks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFoldersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFoldersArgs Empty = new GetFoldersArgs();

    /**
     * A list of Folder IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of Folder IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The parent folder path.
     * 
     */
    @Import(name="parentFolderPath", required=true)
    private Output<String> parentFolderPath;

    /**
     * @return The parent folder path.
     * 
     */
    public Output<String> parentFolderPath() {
        return this.parentFolderPath;
    }

    /**
     * The ID of the project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The ID of the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    private GetFoldersArgs() {}

    private GetFoldersArgs(GetFoldersArgs $) {
        this.ids = $.ids;
        this.outputFile = $.outputFile;
        this.parentFolderPath = $.parentFolderPath;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFoldersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFoldersArgs $;

        public Builder() {
            $ = new GetFoldersArgs();
        }

        public Builder(GetFoldersArgs defaults) {
            $ = new GetFoldersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ids A list of Folder IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Folder IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of Folder IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param parentFolderPath The parent folder path.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderPath(Output<String> parentFolderPath) {
            $.parentFolderPath = parentFolderPath;
            return this;
        }

        /**
         * @param parentFolderPath The parent folder path.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderPath(String parentFolderPath) {
            return parentFolderPath(Output.of(parentFolderPath));
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public GetFoldersArgs build() {
            if ($.parentFolderPath == null) {
                throw new MissingRequiredPropertyException("GetFoldersArgs", "parentFolderPath");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetFoldersArgs", "projectId");
            }
            return $;
        }
    }

}
