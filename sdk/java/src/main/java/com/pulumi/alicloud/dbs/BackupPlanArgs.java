// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dbs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupPlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupPlanArgs Empty = new BackupPlanArgs();

    /**
     * The ID of the backup gateway. This parameter is required when the `source_endpoint_instance_type` is `Agent`.
     * 
     */
    @Import(name="backupGatewayId")
    private @Nullable Output<String> backupGatewayId;

    /**
     * @return The ID of the backup gateway. This parameter is required when the `source_endpoint_instance_type` is `Agent`.
     * 
     */
    public Optional<Output<String>> backupGatewayId() {
        return Optional.ofNullable(this.backupGatewayId);
    }

    /**
     * The backup log interval seconds.
     * 
     */
    @Import(name="backupLogIntervalSeconds")
    private @Nullable Output<Integer> backupLogIntervalSeconds;

    /**
     * @return The backup log interval seconds.
     * 
     */
    public Optional<Output<Integer>> backupLogIntervalSeconds() {
        return Optional.ofNullable(this.backupLogIntervalSeconds);
    }

    /**
     * Backup method. Valid values: `duplication`, `logical`, `physical`.
     * 
     */
    @Import(name="backupMethod", required=true)
    private Output<String> backupMethod;

    /**
     * @return Backup method. Valid values: `duplication`, `logical`, `physical`.
     * 
     */
    public Output<String> backupMethod() {
        return this.backupMethod;
    }

    /**
     * The backup object.
     * 
     */
    @Import(name="backupObjects")
    private @Nullable Output<String> backupObjects;

    /**
     * @return The backup object.
     * 
     */
    public Optional<Output<String>> backupObjects() {
        return Optional.ofNullable(this.backupObjects);
    }

    /**
     * Full backup cycle, Valid values: `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. supports the selection of multiple fetch values, separated by English commas (,).
     * 
     */
    @Import(name="backupPeriod")
    private @Nullable Output<String> backupPeriod;

    /**
     * @return Full backup cycle, Valid values: `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. supports the selection of multiple fetch values, separated by English commas (,).
     * 
     */
    public Optional<Output<String>> backupPeriod() {
        return Optional.ofNullable(this.backupPeriod);
    }

    /**
     * The name of the resource.
     * 
     */
    @Import(name="backupPlanName", required=true)
    private Output<String> backupPlanName;

    /**
     * @return The name of the resource.
     * 
     */
    public Output<String> backupPlanName() {
        return this.backupPlanName;
    }

    /**
     * The backup rate limit.
     * 
     */
    @Import(name="backupRateLimit")
    private @Nullable Output<String> backupRateLimit;

    /**
     * @return The backup rate limit.
     * 
     */
    public Optional<Output<String>> backupRateLimit() {
        return Optional.ofNullable(this.backupRateLimit);
    }

    /**
     * The retention time of backup data. Valid values: 0 to 1825. Default value: 730 days.
     * 
     */
    @Import(name="backupRetentionPeriod")
    private @Nullable Output<Integer> backupRetentionPeriod;

    /**
     * @return The retention time of backup data. Valid values: 0 to 1825. Default value: 730 days.
     * 
     */
    public Optional<Output<Integer>> backupRetentionPeriod() {
        return Optional.ofNullable(this.backupRetentionPeriod);
    }

    /**
     * The backup speed limit.
     * 
     */
    @Import(name="backupSpeedLimit")
    private @Nullable Output<String> backupSpeedLimit;

    /**
     * @return The backup speed limit.
     * 
     */
    public Optional<Output<String>> backupSpeedLimit() {
        return Optional.ofNullable(this.backupSpeedLimit);
    }

    /**
     * The start time of full Backup. The format is `&lt;I&gt; HH:mm&lt;/I&gt;` Z(UTC time).
     * 
     */
    @Import(name="backupStartTime")
    private @Nullable Output<String> backupStartTime;

    /**
     * @return The start time of full Backup. The format is `&lt;I&gt; HH:mm&lt;/I&gt;` Z(UTC time).
     * 
     */
    public Optional<Output<String>> backupStartTime() {
        return Optional.ofNullable(this.backupStartTime);
    }

    /**
     * Built-in storage type, Valid values: `system`.
     * 
     */
    @Import(name="backupStorageType")
    private @Nullable Output<String> backupStorageType;

    /**
     * @return Built-in storage type, Valid values: `system`.
     * 
     */
    public Optional<Output<String>> backupStorageType() {
        return Optional.ofNullable(this.backupStorageType);
    }

    /**
     * The backup strategy type. Valid values: `simple`, `manual`.
     * 
     */
    @Import(name="backupStrategyType")
    private @Nullable Output<String> backupStrategyType;

    /**
     * @return The backup strategy type. Valid values: `simple`, `manual`.
     * 
     */
    public Optional<Output<String>> backupStrategyType() {
        return Optional.ofNullable(this.backupStrategyType);
    }

    /**
     * The UID that is backed up across Alibaba cloud accounts.
     * 
     */
    @Import(name="crossAliyunId")
    private @Nullable Output<String> crossAliyunId;

    /**
     * @return The UID that is backed up across Alibaba cloud accounts.
     * 
     */
    public Optional<Output<String>> crossAliyunId() {
        return Optional.ofNullable(this.crossAliyunId);
    }

    /**
     * The name of the RAM role that is backed up across Alibaba cloud accounts.
     * 
     */
    @Import(name="crossRoleName")
    private @Nullable Output<String> crossRoleName;

    /**
     * @return The name of the RAM role that is backed up across Alibaba cloud accounts.
     * 
     */
    public Optional<Output<String>> crossRoleName() {
        return Optional.ofNullable(this.crossRoleName);
    }

    /**
     * The database region.
     * 
     */
    @Import(name="databaseRegion")
    private @Nullable Output<String> databaseRegion;

    /**
     * @return The database region.
     * 
     */
    public Optional<Output<String>> databaseRegion() {
        return Optional.ofNullable(this.databaseRegion);
    }

    /**
     * Database type. Valid values: `DRDS`, `FIle`, `MSSQL`, `MariaDB`, `MongoDB`, `MySQL`, `Oracle`, `PPAS`, `PostgreSQL`, `Redis`.
     * 
     */
    @Import(name="databaseType", required=true)
    private Output<String> databaseType;

    /**
     * @return Database type. Valid values: `DRDS`, `FIle`, `MSSQL`, `MariaDB`, `MongoDB`, `MySQL`, `Oracle`, `PPAS`, `PostgreSQL`, `Redis`.
     * 
     */
    public Output<String> databaseType() {
        return this.databaseType;
    }

    /**
     * The storage time for conversion to archive cold standby is 365 days by default.
     * 
     */
    @Import(name="duplicationArchivePeriod")
    private @Nullable Output<Integer> duplicationArchivePeriod;

    /**
     * @return The storage time for conversion to archive cold standby is 365 days by default.
     * 
     */
    public Optional<Output<Integer>> duplicationArchivePeriod() {
        return Optional.ofNullable(this.duplicationArchivePeriod);
    }

    /**
     * The storage time is converted to low-frequency access. The default time is 180 days.
     * 
     */
    @Import(name="duplicationInfrequentAccessPeriod")
    private @Nullable Output<Integer> duplicationInfrequentAccessPeriod;

    /**
     * @return The storage time is converted to low-frequency access. The default time is 180 days.
     * 
     */
    public Optional<Output<Integer>> duplicationInfrequentAccessPeriod() {
        return Optional.ofNullable(this.duplicationInfrequentAccessPeriod);
    }

    /**
     * Whether to enable incremental log Backup.
     * 
     */
    @Import(name="enableBackupLog")
    private @Nullable Output<Boolean> enableBackupLog;

    /**
     * @return Whether to enable incremental log Backup.
     * 
     */
    public Optional<Output<Boolean>> enableBackupLog() {
        return Optional.ofNullable(this.enableBackupLog);
    }

    /**
     * The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`.
     * 
     */
    @Import(name="instanceClass", required=true)
    private Output<String> instanceClass;

    /**
     * @return The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`.
     * 
     */
    public Output<String> instanceClass() {
        return this.instanceClass;
    }

    /**
     * The instance type. Valid values: `RDS`, `PolarDB`, `DDS`, `Kvstore`, `Other`.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return The instance type. Valid values: `RDS`, `PolarDB`, `DDS`, `Kvstore`, `Other`.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * The OSS Bucket name. The system automatically generates a new name by default.
     * 
     */
    @Import(name="ossBucketName")
    private @Nullable Output<String> ossBucketName;

    /**
     * @return The OSS Bucket name. The system automatically generates a new name by default.
     * 
     */
    public Optional<Output<String>> ossBucketName() {
        return Optional.ofNullable(this.ossBucketName);
    }

    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`, `Subscription`.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`, `Subscription`.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * Specify that the prepaid instance is of the package year or monthly type. Valid values: `Month`, `Year`.
     * 
     */
    @Import(name="period")
    private @Nullable Output<String> period;

    /**
     * @return Specify that the prepaid instance is of the package year or monthly type. Valid values: `Month`, `Year`.
     * 
     */
    public Optional<Output<String>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The name of the database. This parameter is required when the `database_type` is `PostgreSQL` or `MongoDB`.
     * 
     */
    @Import(name="sourceEndpointDatabaseName")
    private @Nullable Output<String> sourceEndpointDatabaseName;

    /**
     * @return The name of the database. This parameter is required when the `database_type` is `PostgreSQL` or `MongoDB`.
     * 
     */
    public Optional<Output<String>> sourceEndpointDatabaseName() {
        return Optional.ofNullable(this.sourceEndpointDatabaseName);
    }

    /**
     * The ID of the database instance. This parameter is required when the `source_endpoint_instance_type` is `RDS`, `ECS`, `DDS`, or `Express`.
     * 
     */
    @Import(name="sourceEndpointInstanceId")
    private @Nullable Output<String> sourceEndpointInstanceId;

    /**
     * @return The ID of the database instance. This parameter is required when the `source_endpoint_instance_type` is `RDS`, `ECS`, `DDS`, or `Express`.
     * 
     */
    public Optional<Output<String>> sourceEndpointInstanceId() {
        return Optional.ofNullable(this.sourceEndpointInstanceId);
    }

    /**
     * The location of the database. Valid values: `RDS`, `ECS`, `Express`, `Agent`, `DDS`, `Other`.
     * 
     */
    @Import(name="sourceEndpointInstanceType", required=true)
    private Output<String> sourceEndpointInstanceType;

    /**
     * @return The location of the database. Valid values: `RDS`, `ECS`, `Express`, `Agent`, `DDS`, `Other`.
     * 
     */
    public Output<String> sourceEndpointInstanceType() {
        return this.sourceEndpointInstanceType;
    }

    /**
     * The source endpoint ip.
     * 
     */
    @Import(name="sourceEndpointIp")
    private @Nullable Output<String> sourceEndpointIp;

    /**
     * @return The source endpoint ip.
     * 
     */
    public Optional<Output<String>> sourceEndpointIp() {
        return Optional.ofNullable(this.sourceEndpointIp);
    }

    /**
     * Oracle SID name. This parameter is required when the `database_type` is `Oracle`.
     * 
     */
    @Import(name="sourceEndpointOracleSid")
    private @Nullable Output<String> sourceEndpointOracleSid;

    /**
     * @return Oracle SID name. This parameter is required when the `database_type` is `Oracle`.
     * 
     */
    public Optional<Output<String>> sourceEndpointOracleSid() {
        return Optional.ofNullable(this.sourceEndpointOracleSid);
    }

    /**
     * The source endpoint password.  This parameter is not required when the `database_type` is `Redis`, or when the `source_endpoint_instance_type` is `Agent` and the `database_type` is `MSSQL`. This parameter is required in other scenarios.
     * 
     */
    @Import(name="sourceEndpointPassword")
    private @Nullable Output<String> sourceEndpointPassword;

    /**
     * @return The source endpoint password.  This parameter is not required when the `database_type` is `Redis`, or when the `source_endpoint_instance_type` is `Agent` and the `database_type` is `MSSQL`. This parameter is required in other scenarios.
     * 
     */
    public Optional<Output<String>> sourceEndpointPassword() {
        return Optional.ofNullable(this.sourceEndpointPassword);
    }

    /**
     * The source endpoint port.
     * 
     */
    @Import(name="sourceEndpointPort")
    private @Nullable Output<Integer> sourceEndpointPort;

    /**
     * @return The source endpoint port.
     * 
     */
    public Optional<Output<Integer>> sourceEndpointPort() {
        return Optional.ofNullable(this.sourceEndpointPort);
    }

    /**
     * The region of the database. This parameter is required when the `source_endpoint_instance_type` is `RDS`, `ECS`, `DDS`, `Express`, or `Agent`.
     * 
     */
    @Import(name="sourceEndpointRegion")
    private @Nullable Output<String> sourceEndpointRegion;

    /**
     * @return The region of the database. This parameter is required when the `source_endpoint_instance_type` is `RDS`, `ECS`, `DDS`, `Express`, or `Agent`.
     * 
     */
    public Optional<Output<String>> sourceEndpointRegion() {
        return Optional.ofNullable(this.sourceEndpointRegion);
    }

    /**
     * Oracle SID name. This parameter is required when the `database_type` is `Oracle`.
     * 
     */
    @Import(name="sourceEndpointSid")
    private @Nullable Output<String> sourceEndpointSid;

    /**
     * @return Oracle SID name. This parameter is required when the `database_type` is `Oracle`.
     * 
     */
    public Optional<Output<String>> sourceEndpointSid() {
        return Optional.ofNullable(this.sourceEndpointSid);
    }

    /**
     * The source endpoint username. This parameter is not required when the `database_type` is `Redis`, or when the `source_endpoint_instance_type` is `Agent` and the `database_type` is `MSSQL`. This parameter is required in other scenarios.
     * 
     */
    @Import(name="sourceEndpointUserName")
    private @Nullable Output<String> sourceEndpointUserName;

    /**
     * @return The source endpoint username. This parameter is not required when the `database_type` is `Redis`, or when the `source_endpoint_instance_type` is `Agent` and the `database_type` is `MSSQL`. This parameter is required in other scenarios.
     * 
     */
    public Optional<Output<String>> sourceEndpointUserName() {
        return Optional.ofNullable(this.sourceEndpointUserName);
    }

    /**
     * The status of the resource. Valid values: `pause`, `running`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource. Valid values: `pause`, `running`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The storage region.
     * 
     */
    @Import(name="storageRegion")
    private @Nullable Output<String> storageRegion;

    /**
     * @return The storage region.
     * 
     */
    public Optional<Output<String>> storageRegion() {
        return Optional.ofNullable(this.storageRegion);
    }

    /**
     * Specify purchase duration. When the parameter `period` is `Year`, the `used_time` value is 1 to 9. When the parameter `period` is `Month`, the `used_time` value is 1 to 11.
     * 
     */
    @Import(name="usedTime")
    private @Nullable Output<Integer> usedTime;

    /**
     * @return Specify purchase duration. When the parameter `period` is `Year`, the `used_time` value is 1 to 9. When the parameter `period` is `Month`, the `used_time` value is 1 to 11.
     * 
     */
    public Optional<Output<Integer>> usedTime() {
        return Optional.ofNullable(this.usedTime);
    }

    private BackupPlanArgs() {}

    private BackupPlanArgs(BackupPlanArgs $) {
        this.backupGatewayId = $.backupGatewayId;
        this.backupLogIntervalSeconds = $.backupLogIntervalSeconds;
        this.backupMethod = $.backupMethod;
        this.backupObjects = $.backupObjects;
        this.backupPeriod = $.backupPeriod;
        this.backupPlanName = $.backupPlanName;
        this.backupRateLimit = $.backupRateLimit;
        this.backupRetentionPeriod = $.backupRetentionPeriod;
        this.backupSpeedLimit = $.backupSpeedLimit;
        this.backupStartTime = $.backupStartTime;
        this.backupStorageType = $.backupStorageType;
        this.backupStrategyType = $.backupStrategyType;
        this.crossAliyunId = $.crossAliyunId;
        this.crossRoleName = $.crossRoleName;
        this.databaseRegion = $.databaseRegion;
        this.databaseType = $.databaseType;
        this.duplicationArchivePeriod = $.duplicationArchivePeriod;
        this.duplicationInfrequentAccessPeriod = $.duplicationInfrequentAccessPeriod;
        this.enableBackupLog = $.enableBackupLog;
        this.instanceClass = $.instanceClass;
        this.instanceType = $.instanceType;
        this.ossBucketName = $.ossBucketName;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.resourceGroupId = $.resourceGroupId;
        this.sourceEndpointDatabaseName = $.sourceEndpointDatabaseName;
        this.sourceEndpointInstanceId = $.sourceEndpointInstanceId;
        this.sourceEndpointInstanceType = $.sourceEndpointInstanceType;
        this.sourceEndpointIp = $.sourceEndpointIp;
        this.sourceEndpointOracleSid = $.sourceEndpointOracleSid;
        this.sourceEndpointPassword = $.sourceEndpointPassword;
        this.sourceEndpointPort = $.sourceEndpointPort;
        this.sourceEndpointRegion = $.sourceEndpointRegion;
        this.sourceEndpointSid = $.sourceEndpointSid;
        this.sourceEndpointUserName = $.sourceEndpointUserName;
        this.status = $.status;
        this.storageRegion = $.storageRegion;
        this.usedTime = $.usedTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupPlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupPlanArgs $;

        public Builder() {
            $ = new BackupPlanArgs();
        }

        public Builder(BackupPlanArgs defaults) {
            $ = new BackupPlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupGatewayId The ID of the backup gateway. This parameter is required when the `source_endpoint_instance_type` is `Agent`.
         * 
         * @return builder
         * 
         */
        public Builder backupGatewayId(@Nullable Output<String> backupGatewayId) {
            $.backupGatewayId = backupGatewayId;
            return this;
        }

        /**
         * @param backupGatewayId The ID of the backup gateway. This parameter is required when the `source_endpoint_instance_type` is `Agent`.
         * 
         * @return builder
         * 
         */
        public Builder backupGatewayId(String backupGatewayId) {
            return backupGatewayId(Output.of(backupGatewayId));
        }

        /**
         * @param backupLogIntervalSeconds The backup log interval seconds.
         * 
         * @return builder
         * 
         */
        public Builder backupLogIntervalSeconds(@Nullable Output<Integer> backupLogIntervalSeconds) {
            $.backupLogIntervalSeconds = backupLogIntervalSeconds;
            return this;
        }

        /**
         * @param backupLogIntervalSeconds The backup log interval seconds.
         * 
         * @return builder
         * 
         */
        public Builder backupLogIntervalSeconds(Integer backupLogIntervalSeconds) {
            return backupLogIntervalSeconds(Output.of(backupLogIntervalSeconds));
        }

        /**
         * @param backupMethod Backup method. Valid values: `duplication`, `logical`, `physical`.
         * 
         * @return builder
         * 
         */
        public Builder backupMethod(Output<String> backupMethod) {
            $.backupMethod = backupMethod;
            return this;
        }

        /**
         * @param backupMethod Backup method. Valid values: `duplication`, `logical`, `physical`.
         * 
         * @return builder
         * 
         */
        public Builder backupMethod(String backupMethod) {
            return backupMethod(Output.of(backupMethod));
        }

        /**
         * @param backupObjects The backup object.
         * 
         * @return builder
         * 
         */
        public Builder backupObjects(@Nullable Output<String> backupObjects) {
            $.backupObjects = backupObjects;
            return this;
        }

        /**
         * @param backupObjects The backup object.
         * 
         * @return builder
         * 
         */
        public Builder backupObjects(String backupObjects) {
            return backupObjects(Output.of(backupObjects));
        }

        /**
         * @param backupPeriod Full backup cycle, Valid values: `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. supports the selection of multiple fetch values, separated by English commas (,).
         * 
         * @return builder
         * 
         */
        public Builder backupPeriod(@Nullable Output<String> backupPeriod) {
            $.backupPeriod = backupPeriod;
            return this;
        }

        /**
         * @param backupPeriod Full backup cycle, Valid values: `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. supports the selection of multiple fetch values, separated by English commas (,).
         * 
         * @return builder
         * 
         */
        public Builder backupPeriod(String backupPeriod) {
            return backupPeriod(Output.of(backupPeriod));
        }

        /**
         * @param backupPlanName The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder backupPlanName(Output<String> backupPlanName) {
            $.backupPlanName = backupPlanName;
            return this;
        }

        /**
         * @param backupPlanName The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder backupPlanName(String backupPlanName) {
            return backupPlanName(Output.of(backupPlanName));
        }

        /**
         * @param backupRateLimit The backup rate limit.
         * 
         * @return builder
         * 
         */
        public Builder backupRateLimit(@Nullable Output<String> backupRateLimit) {
            $.backupRateLimit = backupRateLimit;
            return this;
        }

        /**
         * @param backupRateLimit The backup rate limit.
         * 
         * @return builder
         * 
         */
        public Builder backupRateLimit(String backupRateLimit) {
            return backupRateLimit(Output.of(backupRateLimit));
        }

        /**
         * @param backupRetentionPeriod The retention time of backup data. Valid values: 0 to 1825. Default value: 730 days.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionPeriod(@Nullable Output<Integer> backupRetentionPeriod) {
            $.backupRetentionPeriod = backupRetentionPeriod;
            return this;
        }

        /**
         * @param backupRetentionPeriod The retention time of backup data. Valid values: 0 to 1825. Default value: 730 days.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionPeriod(Integer backupRetentionPeriod) {
            return backupRetentionPeriod(Output.of(backupRetentionPeriod));
        }

        /**
         * @param backupSpeedLimit The backup speed limit.
         * 
         * @return builder
         * 
         */
        public Builder backupSpeedLimit(@Nullable Output<String> backupSpeedLimit) {
            $.backupSpeedLimit = backupSpeedLimit;
            return this;
        }

        /**
         * @param backupSpeedLimit The backup speed limit.
         * 
         * @return builder
         * 
         */
        public Builder backupSpeedLimit(String backupSpeedLimit) {
            return backupSpeedLimit(Output.of(backupSpeedLimit));
        }

        /**
         * @param backupStartTime The start time of full Backup. The format is `&lt;I&gt; HH:mm&lt;/I&gt;` Z(UTC time).
         * 
         * @return builder
         * 
         */
        public Builder backupStartTime(@Nullable Output<String> backupStartTime) {
            $.backupStartTime = backupStartTime;
            return this;
        }

        /**
         * @param backupStartTime The start time of full Backup. The format is `&lt;I&gt; HH:mm&lt;/I&gt;` Z(UTC time).
         * 
         * @return builder
         * 
         */
        public Builder backupStartTime(String backupStartTime) {
            return backupStartTime(Output.of(backupStartTime));
        }

        /**
         * @param backupStorageType Built-in storage type, Valid values: `system`.
         * 
         * @return builder
         * 
         */
        public Builder backupStorageType(@Nullable Output<String> backupStorageType) {
            $.backupStorageType = backupStorageType;
            return this;
        }

        /**
         * @param backupStorageType Built-in storage type, Valid values: `system`.
         * 
         * @return builder
         * 
         */
        public Builder backupStorageType(String backupStorageType) {
            return backupStorageType(Output.of(backupStorageType));
        }

        /**
         * @param backupStrategyType The backup strategy type. Valid values: `simple`, `manual`.
         * 
         * @return builder
         * 
         */
        public Builder backupStrategyType(@Nullable Output<String> backupStrategyType) {
            $.backupStrategyType = backupStrategyType;
            return this;
        }

        /**
         * @param backupStrategyType The backup strategy type. Valid values: `simple`, `manual`.
         * 
         * @return builder
         * 
         */
        public Builder backupStrategyType(String backupStrategyType) {
            return backupStrategyType(Output.of(backupStrategyType));
        }

        /**
         * @param crossAliyunId The UID that is backed up across Alibaba cloud accounts.
         * 
         * @return builder
         * 
         */
        public Builder crossAliyunId(@Nullable Output<String> crossAliyunId) {
            $.crossAliyunId = crossAliyunId;
            return this;
        }

        /**
         * @param crossAliyunId The UID that is backed up across Alibaba cloud accounts.
         * 
         * @return builder
         * 
         */
        public Builder crossAliyunId(String crossAliyunId) {
            return crossAliyunId(Output.of(crossAliyunId));
        }

        /**
         * @param crossRoleName The name of the RAM role that is backed up across Alibaba cloud accounts.
         * 
         * @return builder
         * 
         */
        public Builder crossRoleName(@Nullable Output<String> crossRoleName) {
            $.crossRoleName = crossRoleName;
            return this;
        }

        /**
         * @param crossRoleName The name of the RAM role that is backed up across Alibaba cloud accounts.
         * 
         * @return builder
         * 
         */
        public Builder crossRoleName(String crossRoleName) {
            return crossRoleName(Output.of(crossRoleName));
        }

        /**
         * @param databaseRegion The database region.
         * 
         * @return builder
         * 
         */
        public Builder databaseRegion(@Nullable Output<String> databaseRegion) {
            $.databaseRegion = databaseRegion;
            return this;
        }

        /**
         * @param databaseRegion The database region.
         * 
         * @return builder
         * 
         */
        public Builder databaseRegion(String databaseRegion) {
            return databaseRegion(Output.of(databaseRegion));
        }

        /**
         * @param databaseType Database type. Valid values: `DRDS`, `FIle`, `MSSQL`, `MariaDB`, `MongoDB`, `MySQL`, `Oracle`, `PPAS`, `PostgreSQL`, `Redis`.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(Output<String> databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        /**
         * @param databaseType Database type. Valid values: `DRDS`, `FIle`, `MSSQL`, `MariaDB`, `MongoDB`, `MySQL`, `Oracle`, `PPAS`, `PostgreSQL`, `Redis`.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(String databaseType) {
            return databaseType(Output.of(databaseType));
        }

        /**
         * @param duplicationArchivePeriod The storage time for conversion to archive cold standby is 365 days by default.
         * 
         * @return builder
         * 
         */
        public Builder duplicationArchivePeriod(@Nullable Output<Integer> duplicationArchivePeriod) {
            $.duplicationArchivePeriod = duplicationArchivePeriod;
            return this;
        }

        /**
         * @param duplicationArchivePeriod The storage time for conversion to archive cold standby is 365 days by default.
         * 
         * @return builder
         * 
         */
        public Builder duplicationArchivePeriod(Integer duplicationArchivePeriod) {
            return duplicationArchivePeriod(Output.of(duplicationArchivePeriod));
        }

        /**
         * @param duplicationInfrequentAccessPeriod The storage time is converted to low-frequency access. The default time is 180 days.
         * 
         * @return builder
         * 
         */
        public Builder duplicationInfrequentAccessPeriod(@Nullable Output<Integer> duplicationInfrequentAccessPeriod) {
            $.duplicationInfrequentAccessPeriod = duplicationInfrequentAccessPeriod;
            return this;
        }

        /**
         * @param duplicationInfrequentAccessPeriod The storage time is converted to low-frequency access. The default time is 180 days.
         * 
         * @return builder
         * 
         */
        public Builder duplicationInfrequentAccessPeriod(Integer duplicationInfrequentAccessPeriod) {
            return duplicationInfrequentAccessPeriod(Output.of(duplicationInfrequentAccessPeriod));
        }

        /**
         * @param enableBackupLog Whether to enable incremental log Backup.
         * 
         * @return builder
         * 
         */
        public Builder enableBackupLog(@Nullable Output<Boolean> enableBackupLog) {
            $.enableBackupLog = enableBackupLog;
            return this;
        }

        /**
         * @param enableBackupLog Whether to enable incremental log Backup.
         * 
         * @return builder
         * 
         */
        public Builder enableBackupLog(Boolean enableBackupLog) {
            return enableBackupLog(Output.of(enableBackupLog));
        }

        /**
         * @param instanceClass The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder instanceClass(Output<String> instanceClass) {
            $.instanceClass = instanceClass;
            return this;
        }

        /**
         * @param instanceClass The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder instanceClass(String instanceClass) {
            return instanceClass(Output.of(instanceClass));
        }

        /**
         * @param instanceType The instance type. Valid values: `RDS`, `PolarDB`, `DDS`, `Kvstore`, `Other`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The instance type. Valid values: `RDS`, `PolarDB`, `DDS`, `Kvstore`, `Other`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param ossBucketName The OSS Bucket name. The system automatically generates a new name by default.
         * 
         * @return builder
         * 
         */
        public Builder ossBucketName(@Nullable Output<String> ossBucketName) {
            $.ossBucketName = ossBucketName;
            return this;
        }

        /**
         * @param ossBucketName The OSS Bucket name. The system automatically generates a new name by default.
         * 
         * @return builder
         * 
         */
        public Builder ossBucketName(String ossBucketName) {
            return ossBucketName(Output.of(ossBucketName));
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`, `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`, `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period Specify that the prepaid instance is of the package year or monthly type. Valid values: `Month`, `Year`.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<String> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Specify that the prepaid instance is of the package year or monthly type. Valid values: `Month`, `Year`.
         * 
         * @return builder
         * 
         */
        public Builder period(String period) {
            return period(Output.of(period));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param sourceEndpointDatabaseName The name of the database. This parameter is required when the `database_type` is `PostgreSQL` or `MongoDB`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointDatabaseName(@Nullable Output<String> sourceEndpointDatabaseName) {
            $.sourceEndpointDatabaseName = sourceEndpointDatabaseName;
            return this;
        }

        /**
         * @param sourceEndpointDatabaseName The name of the database. This parameter is required when the `database_type` is `PostgreSQL` or `MongoDB`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointDatabaseName(String sourceEndpointDatabaseName) {
            return sourceEndpointDatabaseName(Output.of(sourceEndpointDatabaseName));
        }

        /**
         * @param sourceEndpointInstanceId The ID of the database instance. This parameter is required when the `source_endpoint_instance_type` is `RDS`, `ECS`, `DDS`, or `Express`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointInstanceId(@Nullable Output<String> sourceEndpointInstanceId) {
            $.sourceEndpointInstanceId = sourceEndpointInstanceId;
            return this;
        }

        /**
         * @param sourceEndpointInstanceId The ID of the database instance. This parameter is required when the `source_endpoint_instance_type` is `RDS`, `ECS`, `DDS`, or `Express`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointInstanceId(String sourceEndpointInstanceId) {
            return sourceEndpointInstanceId(Output.of(sourceEndpointInstanceId));
        }

        /**
         * @param sourceEndpointInstanceType The location of the database. Valid values: `RDS`, `ECS`, `Express`, `Agent`, `DDS`, `Other`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointInstanceType(Output<String> sourceEndpointInstanceType) {
            $.sourceEndpointInstanceType = sourceEndpointInstanceType;
            return this;
        }

        /**
         * @param sourceEndpointInstanceType The location of the database. Valid values: `RDS`, `ECS`, `Express`, `Agent`, `DDS`, `Other`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointInstanceType(String sourceEndpointInstanceType) {
            return sourceEndpointInstanceType(Output.of(sourceEndpointInstanceType));
        }

        /**
         * @param sourceEndpointIp The source endpoint ip.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointIp(@Nullable Output<String> sourceEndpointIp) {
            $.sourceEndpointIp = sourceEndpointIp;
            return this;
        }

        /**
         * @param sourceEndpointIp The source endpoint ip.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointIp(String sourceEndpointIp) {
            return sourceEndpointIp(Output.of(sourceEndpointIp));
        }

        /**
         * @param sourceEndpointOracleSid Oracle SID name. This parameter is required when the `database_type` is `Oracle`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointOracleSid(@Nullable Output<String> sourceEndpointOracleSid) {
            $.sourceEndpointOracleSid = sourceEndpointOracleSid;
            return this;
        }

        /**
         * @param sourceEndpointOracleSid Oracle SID name. This parameter is required when the `database_type` is `Oracle`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointOracleSid(String sourceEndpointOracleSid) {
            return sourceEndpointOracleSid(Output.of(sourceEndpointOracleSid));
        }

        /**
         * @param sourceEndpointPassword The source endpoint password.  This parameter is not required when the `database_type` is `Redis`, or when the `source_endpoint_instance_type` is `Agent` and the `database_type` is `MSSQL`. This parameter is required in other scenarios.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointPassword(@Nullable Output<String> sourceEndpointPassword) {
            $.sourceEndpointPassword = sourceEndpointPassword;
            return this;
        }

        /**
         * @param sourceEndpointPassword The source endpoint password.  This parameter is not required when the `database_type` is `Redis`, or when the `source_endpoint_instance_type` is `Agent` and the `database_type` is `MSSQL`. This parameter is required in other scenarios.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointPassword(String sourceEndpointPassword) {
            return sourceEndpointPassword(Output.of(sourceEndpointPassword));
        }

        /**
         * @param sourceEndpointPort The source endpoint port.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointPort(@Nullable Output<Integer> sourceEndpointPort) {
            $.sourceEndpointPort = sourceEndpointPort;
            return this;
        }

        /**
         * @param sourceEndpointPort The source endpoint port.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointPort(Integer sourceEndpointPort) {
            return sourceEndpointPort(Output.of(sourceEndpointPort));
        }

        /**
         * @param sourceEndpointRegion The region of the database. This parameter is required when the `source_endpoint_instance_type` is `RDS`, `ECS`, `DDS`, `Express`, or `Agent`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointRegion(@Nullable Output<String> sourceEndpointRegion) {
            $.sourceEndpointRegion = sourceEndpointRegion;
            return this;
        }

        /**
         * @param sourceEndpointRegion The region of the database. This parameter is required when the `source_endpoint_instance_type` is `RDS`, `ECS`, `DDS`, `Express`, or `Agent`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointRegion(String sourceEndpointRegion) {
            return sourceEndpointRegion(Output.of(sourceEndpointRegion));
        }

        /**
         * @param sourceEndpointSid Oracle SID name. This parameter is required when the `database_type` is `Oracle`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointSid(@Nullable Output<String> sourceEndpointSid) {
            $.sourceEndpointSid = sourceEndpointSid;
            return this;
        }

        /**
         * @param sourceEndpointSid Oracle SID name. This parameter is required when the `database_type` is `Oracle`.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointSid(String sourceEndpointSid) {
            return sourceEndpointSid(Output.of(sourceEndpointSid));
        }

        /**
         * @param sourceEndpointUserName The source endpoint username. This parameter is not required when the `database_type` is `Redis`, or when the `source_endpoint_instance_type` is `Agent` and the `database_type` is `MSSQL`. This parameter is required in other scenarios.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointUserName(@Nullable Output<String> sourceEndpointUserName) {
            $.sourceEndpointUserName = sourceEndpointUserName;
            return this;
        }

        /**
         * @param sourceEndpointUserName The source endpoint username. This parameter is not required when the `database_type` is `Redis`, or when the `source_endpoint_instance_type` is `Agent` and the `database_type` is `MSSQL`. This parameter is required in other scenarios.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointUserName(String sourceEndpointUserName) {
            return sourceEndpointUserName(Output.of(sourceEndpointUserName));
        }

        /**
         * @param status The status of the resource. Valid values: `pause`, `running`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource. Valid values: `pause`, `running`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param storageRegion The storage region.
         * 
         * @return builder
         * 
         */
        public Builder storageRegion(@Nullable Output<String> storageRegion) {
            $.storageRegion = storageRegion;
            return this;
        }

        /**
         * @param storageRegion The storage region.
         * 
         * @return builder
         * 
         */
        public Builder storageRegion(String storageRegion) {
            return storageRegion(Output.of(storageRegion));
        }

        /**
         * @param usedTime Specify purchase duration. When the parameter `period` is `Year`, the `used_time` value is 1 to 9. When the parameter `period` is `Month`, the `used_time` value is 1 to 11.
         * 
         * @return builder
         * 
         */
        public Builder usedTime(@Nullable Output<Integer> usedTime) {
            $.usedTime = usedTime;
            return this;
        }

        /**
         * @param usedTime Specify purchase duration. When the parameter `period` is `Year`, the `used_time` value is 1 to 9. When the parameter `period` is `Month`, the `used_time` value is 1 to 11.
         * 
         * @return builder
         * 
         */
        public Builder usedTime(Integer usedTime) {
            return usedTime(Output.of(usedTime));
        }

        public BackupPlanArgs build() {
            if ($.backupMethod == null) {
                throw new MissingRequiredPropertyException("BackupPlanArgs", "backupMethod");
            }
            if ($.backupPlanName == null) {
                throw new MissingRequiredPropertyException("BackupPlanArgs", "backupPlanName");
            }
            if ($.databaseType == null) {
                throw new MissingRequiredPropertyException("BackupPlanArgs", "databaseType");
            }
            if ($.instanceClass == null) {
                throw new MissingRequiredPropertyException("BackupPlanArgs", "instanceClass");
            }
            if ($.sourceEndpointInstanceType == null) {
                throw new MissingRequiredPropertyException("BackupPlanArgs", "sourceEndpointInstanceType");
            }
            return $;
        }
    }

}
