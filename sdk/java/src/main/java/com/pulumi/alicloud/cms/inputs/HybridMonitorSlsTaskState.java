// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.alicloud.cms.inputs.HybridMonitorSlsTaskAttachLabelArgs;
import com.pulumi.alicloud.cms.inputs.HybridMonitorSlsTaskSlsProcessConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HybridMonitorSlsTaskState extends com.pulumi.resources.ResourceArgs {

    public static final HybridMonitorSlsTaskState Empty = new HybridMonitorSlsTaskState();

    /**
     * The label of the monitoring task. See `attach_labels` below.
     * 
     */
    @Import(name="attachLabels")
    private @Nullable Output<List<HybridMonitorSlsTaskAttachLabelArgs>> attachLabels;

    /**
     * @return The label of the monitoring task. See `attach_labels` below.
     * 
     */
    public Optional<Output<List<HybridMonitorSlsTaskAttachLabelArgs>>> attachLabels() {
        return Optional.ofNullable(this.attachLabels);
    }

    /**
     * The interval at which metrics are collected. Valid values: `15`, `60`(default value). Unit: seconds.
     * 
     */
    @Import(name="collectInterval")
    private @Nullable Output<Integer> collectInterval;

    /**
     * @return The interval at which metrics are collected. Valid values: `15`, `60`(default value). Unit: seconds.
     * 
     */
    public Optional<Output<Integer>> collectInterval() {
        return Optional.ofNullable(this.collectInterval);
    }

    /**
     * The type of the collection target, enter the name of the Logstore group.
     * 
     */
    @Import(name="collectTargetType")
    private @Nullable Output<String> collectTargetType;

    /**
     * @return The type of the collection target, enter the name of the Logstore group.
     * 
     */
    public Optional<Output<String>> collectTargetType() {
        return Optional.ofNullable(this.collectTargetType);
    }

    /**
     * The description of the metric import task.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the metric import task.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the namespace.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The name of the namespace.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The configurations of the logs that are imported from Log Service. See `sls_process_config` below.
     * 
     */
    @Import(name="slsProcessConfig")
    private @Nullable Output<HybridMonitorSlsTaskSlsProcessConfigArgs> slsProcessConfig;

    /**
     * @return The configurations of the logs that are imported from Log Service. See `sls_process_config` below.
     * 
     */
    public Optional<Output<HybridMonitorSlsTaskSlsProcessConfigArgs>> slsProcessConfig() {
        return Optional.ofNullable(this.slsProcessConfig);
    }

    /**
     * The name of the metric import task, enter the name of the metric for logs imported from Log Service.
     * 
     */
    @Import(name="taskName")
    private @Nullable Output<String> taskName;

    /**
     * @return The name of the metric import task, enter the name of the metric for logs imported from Log Service.
     * 
     */
    public Optional<Output<String>> taskName() {
        return Optional.ofNullable(this.taskName);
    }

    private HybridMonitorSlsTaskState() {}

    private HybridMonitorSlsTaskState(HybridMonitorSlsTaskState $) {
        this.attachLabels = $.attachLabels;
        this.collectInterval = $.collectInterval;
        this.collectTargetType = $.collectTargetType;
        this.description = $.description;
        this.namespace = $.namespace;
        this.slsProcessConfig = $.slsProcessConfig;
        this.taskName = $.taskName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HybridMonitorSlsTaskState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HybridMonitorSlsTaskState $;

        public Builder() {
            $ = new HybridMonitorSlsTaskState();
        }

        public Builder(HybridMonitorSlsTaskState defaults) {
            $ = new HybridMonitorSlsTaskState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachLabels The label of the monitoring task. See `attach_labels` below.
         * 
         * @return builder
         * 
         */
        public Builder attachLabels(@Nullable Output<List<HybridMonitorSlsTaskAttachLabelArgs>> attachLabels) {
            $.attachLabels = attachLabels;
            return this;
        }

        /**
         * @param attachLabels The label of the monitoring task. See `attach_labels` below.
         * 
         * @return builder
         * 
         */
        public Builder attachLabels(List<HybridMonitorSlsTaskAttachLabelArgs> attachLabels) {
            return attachLabels(Output.of(attachLabels));
        }

        /**
         * @param attachLabels The label of the monitoring task. See `attach_labels` below.
         * 
         * @return builder
         * 
         */
        public Builder attachLabels(HybridMonitorSlsTaskAttachLabelArgs... attachLabels) {
            return attachLabels(List.of(attachLabels));
        }

        /**
         * @param collectInterval The interval at which metrics are collected. Valid values: `15`, `60`(default value). Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder collectInterval(@Nullable Output<Integer> collectInterval) {
            $.collectInterval = collectInterval;
            return this;
        }

        /**
         * @param collectInterval The interval at which metrics are collected. Valid values: `15`, `60`(default value). Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder collectInterval(Integer collectInterval) {
            return collectInterval(Output.of(collectInterval));
        }

        /**
         * @param collectTargetType The type of the collection target, enter the name of the Logstore group.
         * 
         * @return builder
         * 
         */
        public Builder collectTargetType(@Nullable Output<String> collectTargetType) {
            $.collectTargetType = collectTargetType;
            return this;
        }

        /**
         * @param collectTargetType The type of the collection target, enter the name of the Logstore group.
         * 
         * @return builder
         * 
         */
        public Builder collectTargetType(String collectTargetType) {
            return collectTargetType(Output.of(collectTargetType));
        }

        /**
         * @param description The description of the metric import task.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the metric import task.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param namespace The name of the namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The name of the namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param slsProcessConfig The configurations of the logs that are imported from Log Service. See `sls_process_config` below.
         * 
         * @return builder
         * 
         */
        public Builder slsProcessConfig(@Nullable Output<HybridMonitorSlsTaskSlsProcessConfigArgs> slsProcessConfig) {
            $.slsProcessConfig = slsProcessConfig;
            return this;
        }

        /**
         * @param slsProcessConfig The configurations of the logs that are imported from Log Service. See `sls_process_config` below.
         * 
         * @return builder
         * 
         */
        public Builder slsProcessConfig(HybridMonitorSlsTaskSlsProcessConfigArgs slsProcessConfig) {
            return slsProcessConfig(Output.of(slsProcessConfig));
        }

        /**
         * @param taskName The name of the metric import task, enter the name of the metric for logs imported from Log Service.
         * 
         * @return builder
         * 
         */
        public Builder taskName(@Nullable Output<String> taskName) {
            $.taskName = taskName;
            return this;
        }

        /**
         * @param taskName The name of the metric import task, enter the name of the metric for logs imported from Log Service.
         * 
         * @return builder
         * 
         */
        public Builder taskName(String taskName) {
            return taskName(Output.of(taskName));
        }

        public HybridMonitorSlsTaskState build() {
            return $;
        }
    }

}
