// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dcdn;

import com.pulumi.alicloud.dcdn.inputs.IpaDomainSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpaDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpaDomainArgs Empty = new IpaDomainArgs();

    /**
     * The domain name to be added to IPA. Wildcard domain names are supported. A wildcard domain name must start with a period (.).
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return The domain name to be added to IPA. Wildcard domain names are supported. A wildcard domain name must start with a period (.).
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The ID of the resource group. If you do not set this parameter, the system automatically assigns the ID of the default resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group. If you do not set this parameter, the system automatically assigns the ID of the default resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The accelerated region. Valid values: `domestic`, `global`, `overseas`.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The accelerated region. Valid values: `domestic`, `global`, `overseas`.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Sources. See `sources` below.
     * 
     */
    @Import(name="sources", required=true)
    private Output<List<IpaDomainSourceArgs>> sources;

    /**
     * @return Sources. See `sources` below.
     * 
     */
    public Output<List<IpaDomainSourceArgs>> sources() {
        return this.sources;
    }

    /**
     * The status of DCDN Ipa Domain. Valid values: `online`, `offline`. Default to `online`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of DCDN Ipa Domain. Valid values: `online`, `offline`. Default to `online`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private IpaDomainArgs() {}

    private IpaDomainArgs(IpaDomainArgs $) {
        this.domainName = $.domainName;
        this.resourceGroupId = $.resourceGroupId;
        this.scope = $.scope;
        this.sources = $.sources;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpaDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpaDomainArgs $;

        public Builder() {
            $ = new IpaDomainArgs();
        }

        public Builder(IpaDomainArgs defaults) {
            $ = new IpaDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName The domain name to be added to IPA. Wildcard domain names are supported. A wildcard domain name must start with a period (.).
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The domain name to be added to IPA. Wildcard domain names are supported. A wildcard domain name must start with a period (.).
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param resourceGroupId The ID of the resource group. If you do not set this parameter, the system automatically assigns the ID of the default resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group. If you do not set this parameter, the system automatically assigns the ID of the default resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param scope The accelerated region. Valid values: `domestic`, `global`, `overseas`.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The accelerated region. Valid values: `domestic`, `global`, `overseas`.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param sources Sources. See `sources` below.
         * 
         * @return builder
         * 
         */
        public Builder sources(Output<List<IpaDomainSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources Sources. See `sources` below.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<IpaDomainSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources Sources. See `sources` below.
         * 
         * @return builder
         * 
         */
        public Builder sources(IpaDomainSourceArgs... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param status The status of DCDN Ipa Domain. Valid values: `online`, `offline`. Default to `online`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of DCDN Ipa Domain. Valid values: `online`, `offline`. Default to `online`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public IpaDomainArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            $.sources = Objects.requireNonNull($.sources, "expected parameter 'sources' to be non-null");
            return $;
        }
    }

}
