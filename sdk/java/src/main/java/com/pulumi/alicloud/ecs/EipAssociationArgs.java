// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EipAssociationArgs extends com.pulumi.resources.ResourceArgs {

    public static final EipAssociationArgs Empty = new EipAssociationArgs();

    /**
     * The ID of the EIP instance.
     * 
     */
    @Import(name="allocationId", required=true)
    private Output<String> allocationId;

    /**
     * @return The ID of the EIP instance.
     * 
     */
    public Output<String> allocationId() {
        return this.allocationId;
    }

    /**
     * Specifies whether to disassociate the EIP from a NAT gateway if a DNAT or SNAT entry is added to the NAT gateway. Valid values:
     * 
     */
    @Import(name="force")
    private @Nullable Output<Boolean> force;

    /**
     * @return Specifies whether to disassociate the EIP from a NAT gateway if a DNAT or SNAT entry is added to the NAT gateway. Valid values:
     * 
     */
    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * The ID of the instance with which you want to associate the EIP. You can enter the ID of a NAT gateway, CLB instance, ECS instance, secondary ENI, HAVIP, or IP address.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The ID of the instance with which you want to associate the EIP. You can enter the ID of a NAT gateway, CLB instance, ECS instance, secondary ENI, HAVIP, or IP address.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The type of the instance with which you want to associate the EIP. Valid values:
     * - `Nat`: NAT gateway
     * - `SlbInstance`: CLB instance
     * - `EcsInstance` (default): ECS instance
     * - `NetworkInterface`: secondary ENI
     * - `HaVip`: HAVIP
     * - `IpAddress`: IP address
     * 
     * &gt; **NOTE:**   The default value is `EcsInstance`. If the instance with which you want to associate the EIP is not an ECS instance, this parameter is required.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return The type of the instance with which you want to associate the EIP. Valid values:
     * - `Nat`: NAT gateway
     * - `SlbInstance`: CLB instance
     * - `EcsInstance` (default): ECS instance
     * - `NetworkInterface`: secondary ENI
     * - `HaVip`: HAVIP
     * - `IpAddress`: IP address
     * 
     * &gt; **NOTE:**   The default value is `EcsInstance`. If the instance with which you want to associate the EIP is not an ECS instance, this parameter is required.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * The association mode. Valid values:
     * - `NAT` (default): NAT mode
     * - `MULTI_BINDED`: multi-EIP-to-ENI mode
     * - `BINDED`: cut-network interface controller mode
     * 
     * &gt; **NOTE:**   This parameter is required only when `instance_type` is set to `NetworkInterface`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The association mode. Valid values:
     * - `NAT` (default): NAT mode
     * - `MULTI_BINDED`: multi-EIP-to-ENI mode
     * - `BINDED`: cut-network interface controller mode
     * 
     * &gt; **NOTE:**   This parameter is required only when `instance_type` is set to `NetworkInterface`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The IP address in the CIDR block of the vSwitch.
     * 
     * If you leave this parameter empty, the system allocates a private IP address based on the VPC ID and vSwitch ID.
     * 
     * &gt; **NOTE:**   This parameter is required if `instance_type` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
     * 
     */
    @Import(name="privateIpAddress")
    private @Nullable Output<String> privateIpAddress;

    /**
     * @return The IP address in the CIDR block of the vSwitch.
     * 
     * If you leave this parameter empty, the system allocates a private IP address based on the VPC ID and vSwitch ID.
     * 
     * &gt; **NOTE:**   This parameter is required if `instance_type` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
     * 
     */
    public Optional<Output<String>> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }

    /**
     * The ID of the VPC in which an IPv4 gateway is created. The VPC and the EIP must be in the same region.
     * 
     * When you associate an EIP with an IP address, the system can enable the IP address to access the Internet based on VPC route configurations.
     * 
     * &gt; **NOTE:**   This parameter is required if `instance_type` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The ID of the VPC in which an IPv4 gateway is created. The VPC and the EIP must be in the same region.
     * 
     * When you associate an EIP with an IP address, the system can enable the IP address to access the Internet based on VPC route configurations.
     * 
     * &gt; **NOTE:**   This parameter is required if `instance_type` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private EipAssociationArgs() {}

    private EipAssociationArgs(EipAssociationArgs $) {
        this.allocationId = $.allocationId;
        this.force = $.force;
        this.instanceId = $.instanceId;
        this.instanceType = $.instanceType;
        this.mode = $.mode;
        this.privateIpAddress = $.privateIpAddress;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EipAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EipAssociationArgs $;

        public Builder() {
            $ = new EipAssociationArgs();
        }

        public Builder(EipAssociationArgs defaults) {
            $ = new EipAssociationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationId The ID of the EIP instance.
         * 
         * @return builder
         * 
         */
        public Builder allocationId(Output<String> allocationId) {
            $.allocationId = allocationId;
            return this;
        }

        /**
         * @param allocationId The ID of the EIP instance.
         * 
         * @return builder
         * 
         */
        public Builder allocationId(String allocationId) {
            return allocationId(Output.of(allocationId));
        }

        /**
         * @param force Specifies whether to disassociate the EIP from a NAT gateway if a DNAT or SNAT entry is added to the NAT gateway. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force Specifies whether to disassociate the EIP from a NAT gateway if a DNAT or SNAT entry is added to the NAT gateway. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        /**
         * @param instanceId The ID of the instance with which you want to associate the EIP. You can enter the ID of a NAT gateway, CLB instance, ECS instance, secondary ENI, HAVIP, or IP address.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance with which you want to associate the EIP. You can enter the ID of a NAT gateway, CLB instance, ECS instance, secondary ENI, HAVIP, or IP address.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param instanceType The type of the instance with which you want to associate the EIP. Valid values:
         * - `Nat`: NAT gateway
         * - `SlbInstance`: CLB instance
         * - `EcsInstance` (default): ECS instance
         * - `NetworkInterface`: secondary ENI
         * - `HaVip`: HAVIP
         * - `IpAddress`: IP address
         * 
         * &gt; **NOTE:**   The default value is `EcsInstance`. If the instance with which you want to associate the EIP is not an ECS instance, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The type of the instance with which you want to associate the EIP. Valid values:
         * - `Nat`: NAT gateway
         * - `SlbInstance`: CLB instance
         * - `EcsInstance` (default): ECS instance
         * - `NetworkInterface`: secondary ENI
         * - `HaVip`: HAVIP
         * - `IpAddress`: IP address
         * 
         * &gt; **NOTE:**   The default value is `EcsInstance`. If the instance with which you want to associate the EIP is not an ECS instance, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param mode The association mode. Valid values:
         * - `NAT` (default): NAT mode
         * - `MULTI_BINDED`: multi-EIP-to-ENI mode
         * - `BINDED`: cut-network interface controller mode
         * 
         * &gt; **NOTE:**   This parameter is required only when `instance_type` is set to `NetworkInterface`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The association mode. Valid values:
         * - `NAT` (default): NAT mode
         * - `MULTI_BINDED`: multi-EIP-to-ENI mode
         * - `BINDED`: cut-network interface controller mode
         * 
         * &gt; **NOTE:**   This parameter is required only when `instance_type` is set to `NetworkInterface`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param privateIpAddress The IP address in the CIDR block of the vSwitch.
         * 
         * If you leave this parameter empty, the system allocates a private IP address based on the VPC ID and vSwitch ID.
         * 
         * &gt; **NOTE:**   This parameter is required if `instance_type` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(@Nullable Output<String> privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        /**
         * @param privateIpAddress The IP address in the CIDR block of the vSwitch.
         * 
         * If you leave this parameter empty, the system allocates a private IP address based on the VPC ID and vSwitch ID.
         * 
         * &gt; **NOTE:**   This parameter is required if `instance_type` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(String privateIpAddress) {
            return privateIpAddress(Output.of(privateIpAddress));
        }

        /**
         * @param vpcId The ID of the VPC in which an IPv4 gateway is created. The VPC and the EIP must be in the same region.
         * 
         * When you associate an EIP with an IP address, the system can enable the IP address to access the Internet based on VPC route configurations.
         * 
         * &gt; **NOTE:**   This parameter is required if `instance_type` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC in which an IPv4 gateway is created. The VPC and the EIP must be in the same region.
         * 
         * When you associate an EIP with an IP address, the system can enable the IP address to access the Internet based on VPC route configurations.
         * 
         * &gt; **NOTE:**   This parameter is required if `instance_type` is set to `IpAddress`, which indicates that the EIP is to be associated with an IP address.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public EipAssociationArgs build() {
            if ($.allocationId == null) {
                throw new MissingRequiredPropertyException("EipAssociationArgs", "allocationId");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("EipAssociationArgs", "instanceId");
            }
            return $;
        }
    }

}
