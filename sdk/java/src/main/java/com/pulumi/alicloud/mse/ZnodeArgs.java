// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mse;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZnodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZnodeArgs Empty = new ZnodeArgs();

    /**
     * The language type of the returned information. Valid values: `zh` or `en`.
     * 
     */
    @Import(name="acceptLanguage")
    private @Nullable Output<String> acceptLanguage;

    /**
     * @return The language type of the returned information. Valid values: `zh` or `en`.
     * 
     */
    public Optional<Output<String>> acceptLanguage() {
        return Optional.ofNullable(this.acceptLanguage);
    }

    /**
     * The ID of the Cluster.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return The ID of the Cluster.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * The Node data.
     * 
     */
    @Import(name="data")
    private @Nullable Output<String> data;

    /**
     * @return The Node data.
     * 
     */
    public Optional<Output<String>> data() {
        return Optional.ofNullable(this.data);
    }

    /**
     * The Node path. The value must start with a forward slash (/).
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The Node path. The value must start with a forward slash (/).
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    private ZnodeArgs() {}

    private ZnodeArgs(ZnodeArgs $) {
        this.acceptLanguage = $.acceptLanguage;
        this.clusterId = $.clusterId;
        this.data = $.data;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZnodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZnodeArgs $;

        public Builder() {
            $ = new ZnodeArgs();
        }

        public Builder(ZnodeArgs defaults) {
            $ = new ZnodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptLanguage The language type of the returned information. Valid values: `zh` or `en`.
         * 
         * @return builder
         * 
         */
        public Builder acceptLanguage(@Nullable Output<String> acceptLanguage) {
            $.acceptLanguage = acceptLanguage;
            return this;
        }

        /**
         * @param acceptLanguage The language type of the returned information. Valid values: `zh` or `en`.
         * 
         * @return builder
         * 
         */
        public Builder acceptLanguage(String acceptLanguage) {
            return acceptLanguage(Output.of(acceptLanguage));
        }

        /**
         * @param clusterId The ID of the Cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the Cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param data The Node data.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data The Node data.
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        /**
         * @param path The Node path. The value must start with a forward slash (/).
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The Node path. The value must start with a forward slash (/).
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public ZnodeArgs build() {
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("ZnodeArgs", "clusterId");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("ZnodeArgs", "path");
            }
            return $;
        }
    }

}
