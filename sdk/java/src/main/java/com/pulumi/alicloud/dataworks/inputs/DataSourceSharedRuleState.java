// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dataworks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceSharedRuleState extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceSharedRuleState Empty = new DataSourceSharedRuleState();

    /**
     * The creation time of the data source sharing rule.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<Integer> createTime;

    /**
     * @return The creation time of the data source sharing rule.
     * 
     */
    public Optional<Output<Integer>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The ID of the data source, that is, the unique identifier of the data source.
     * 
     */
    @Import(name="dataSourceId")
    private @Nullable Output<Integer> dataSourceId;

    /**
     * @return The ID of the data source, that is, the unique identifier of the data source.
     * 
     */
    public Optional<Output<Integer>> dataSourceId() {
        return Optional.ofNullable(this.dataSourceId);
    }

    /**
     * The data source sharing rule ID, that is, the unique identifier of the data source sharing rule.
     * 
     */
    @Import(name="dataSourceSharedRuleId")
    private @Nullable Output<String> dataSourceSharedRuleId;

    /**
     * @return The data source sharing rule ID, that is, the unique identifier of the data source sharing rule.
     * 
     */
    public Optional<Output<String>> dataSourceSharedRuleId() {
        return Optional.ofNullable(this.dataSourceSharedRuleId);
    }

    /**
     * The environment type of the data source shared to the target project, such as Dev (Development Environment) and Prod (production environment).
     * 
     */
    @Import(name="envType")
    private @Nullable Output<String> envType;

    /**
     * @return The environment type of the data source shared to the target project, such as Dev (Development Environment) and Prod (production environment).
     * 
     */
    public Optional<Output<String>> envType() {
        return Optional.ofNullable(this.envType);
    }

    /**
     * The target user of the data source permission policy, which is null to share to the project.
     * 
     */
    @Import(name="sharedUser")
    private @Nullable Output<String> sharedUser;

    /**
     * @return The target user of the data source permission policy, which is null to share to the project.
     * 
     */
    public Optional<Output<String>> sharedUser() {
        return Optional.ofNullable(this.sharedUser);
    }

    /**
     * The ID of the project to which the data source is shared.
     * 
     */
    @Import(name="targetProjectId")
    private @Nullable Output<Integer> targetProjectId;

    /**
     * @return The ID of the project to which the data source is shared.
     * 
     */
    public Optional<Output<Integer>> targetProjectId() {
        return Optional.ofNullable(this.targetProjectId);
    }

    private DataSourceSharedRuleState() {}

    private DataSourceSharedRuleState(DataSourceSharedRuleState $) {
        this.createTime = $.createTime;
        this.dataSourceId = $.dataSourceId;
        this.dataSourceSharedRuleId = $.dataSourceSharedRuleId;
        this.envType = $.envType;
        this.sharedUser = $.sharedUser;
        this.targetProjectId = $.targetProjectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceSharedRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceSharedRuleState $;

        public Builder() {
            $ = new DataSourceSharedRuleState();
        }

        public Builder(DataSourceSharedRuleState defaults) {
            $ = new DataSourceSharedRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The creation time of the data source sharing rule.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<Integer> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the data source sharing rule.
         * 
         * @return builder
         * 
         */
        public Builder createTime(Integer createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dataSourceId The ID of the data source, that is, the unique identifier of the data source.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(@Nullable Output<Integer> dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        /**
         * @param dataSourceId The ID of the data source, that is, the unique identifier of the data source.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(Integer dataSourceId) {
            return dataSourceId(Output.of(dataSourceId));
        }

        /**
         * @param dataSourceSharedRuleId The data source sharing rule ID, that is, the unique identifier of the data source sharing rule.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceSharedRuleId(@Nullable Output<String> dataSourceSharedRuleId) {
            $.dataSourceSharedRuleId = dataSourceSharedRuleId;
            return this;
        }

        /**
         * @param dataSourceSharedRuleId The data source sharing rule ID, that is, the unique identifier of the data source sharing rule.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceSharedRuleId(String dataSourceSharedRuleId) {
            return dataSourceSharedRuleId(Output.of(dataSourceSharedRuleId));
        }

        /**
         * @param envType The environment type of the data source shared to the target project, such as Dev (Development Environment) and Prod (production environment).
         * 
         * @return builder
         * 
         */
        public Builder envType(@Nullable Output<String> envType) {
            $.envType = envType;
            return this;
        }

        /**
         * @param envType The environment type of the data source shared to the target project, such as Dev (Development Environment) and Prod (production environment).
         * 
         * @return builder
         * 
         */
        public Builder envType(String envType) {
            return envType(Output.of(envType));
        }

        /**
         * @param sharedUser The target user of the data source permission policy, which is null to share to the project.
         * 
         * @return builder
         * 
         */
        public Builder sharedUser(@Nullable Output<String> sharedUser) {
            $.sharedUser = sharedUser;
            return this;
        }

        /**
         * @param sharedUser The target user of the data source permission policy, which is null to share to the project.
         * 
         * @return builder
         * 
         */
        public Builder sharedUser(String sharedUser) {
            return sharedUser(Output.of(sharedUser));
        }

        /**
         * @param targetProjectId The ID of the project to which the data source is shared.
         * 
         * @return builder
         * 
         */
        public Builder targetProjectId(@Nullable Output<Integer> targetProjectId) {
            $.targetProjectId = targetProjectId;
            return this;
        }

        /**
         * @param targetProjectId The ID of the project to which the data source is shared.
         * 
         * @return builder
         * 
         */
        public Builder targetProjectId(Integer targetProjectId) {
            return targetProjectId(Output.of(targetProjectId));
        }

        public DataSourceSharedRuleState build() {
            return $;
        }
    }

}
