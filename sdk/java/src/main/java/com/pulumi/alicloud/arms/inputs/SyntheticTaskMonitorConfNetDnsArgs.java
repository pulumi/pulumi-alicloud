// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticTaskMonitorConfNetDnsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticTaskMonitorConfNetDnsArgs Empty = new SyntheticTaskMonitorConfNetDnsArgs();

    @Import(name="dnsServerIpType")
    private @Nullable Output<Integer> dnsServerIpType;

    public Optional<Output<Integer>> dnsServerIpType() {
        return Optional.ofNullable(this.dnsServerIpType);
    }

    @Import(name="nsServer")
    private @Nullable Output<String> nsServer;

    public Optional<Output<String>> nsServer() {
        return Optional.ofNullable(this.nsServer);
    }

    @Import(name="queryMethod")
    private @Nullable Output<Integer> queryMethod;

    public Optional<Output<Integer>> queryMethod() {
        return Optional.ofNullable(this.queryMethod);
    }

    @Import(name="targetUrl", required=true)
    private Output<String> targetUrl;

    public Output<String> targetUrl() {
        return this.targetUrl;
    }

    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private SyntheticTaskMonitorConfNetDnsArgs() {}

    private SyntheticTaskMonitorConfNetDnsArgs(SyntheticTaskMonitorConfNetDnsArgs $) {
        this.dnsServerIpType = $.dnsServerIpType;
        this.nsServer = $.nsServer;
        this.queryMethod = $.queryMethod;
        this.targetUrl = $.targetUrl;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticTaskMonitorConfNetDnsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticTaskMonitorConfNetDnsArgs $;

        public Builder() {
            $ = new SyntheticTaskMonitorConfNetDnsArgs();
        }

        public Builder(SyntheticTaskMonitorConfNetDnsArgs defaults) {
            $ = new SyntheticTaskMonitorConfNetDnsArgs(Objects.requireNonNull(defaults));
        }

        public Builder dnsServerIpType(@Nullable Output<Integer> dnsServerIpType) {
            $.dnsServerIpType = dnsServerIpType;
            return this;
        }

        public Builder dnsServerIpType(Integer dnsServerIpType) {
            return dnsServerIpType(Output.of(dnsServerIpType));
        }

        public Builder nsServer(@Nullable Output<String> nsServer) {
            $.nsServer = nsServer;
            return this;
        }

        public Builder nsServer(String nsServer) {
            return nsServer(Output.of(nsServer));
        }

        public Builder queryMethod(@Nullable Output<Integer> queryMethod) {
            $.queryMethod = queryMethod;
            return this;
        }

        public Builder queryMethod(Integer queryMethod) {
            return queryMethod(Output.of(queryMethod));
        }

        public Builder targetUrl(Output<String> targetUrl) {
            $.targetUrl = targetUrl;
            return this;
        }

        public Builder targetUrl(String targetUrl) {
            return targetUrl(Output.of(targetUrl));
        }

        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public SyntheticTaskMonitorConfNetDnsArgs build() {
            if ($.targetUrl == null) {
                throw new MissingRequiredPropertyException("SyntheticTaskMonitorConfNetDnsArgs", "targetUrl");
            }
            return $;
        }
    }

}
