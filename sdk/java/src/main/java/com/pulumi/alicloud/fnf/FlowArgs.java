// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fnf;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowArgs Empty = new FlowArgs();

    /**
     * The definition of the flow. It must comply with the Flow Definition Language (FDL) syntax.
     * 
     */
    @Import(name="definition", required=true)
    private Output<String> definition;

    /**
     * @return The definition of the flow. It must comply with the Flow Definition Language (FDL) syntax.
     * 
     */
    public Output<String> definition() {
        return this.definition;
    }

    /**
     * The description of the flow.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the flow.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The name of the flow. The name must be unique in an Alibaba Cloud account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the flow. The name must be unique in an Alibaba Cloud account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ARN of the specified RAM role that Serverless Workflow uses to assume the role when Serverless Workflow executes a flow.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return The ARN of the specified RAM role that Serverless Workflow uses to assume the role when Serverless Workflow executes a flow.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * The type of the flow. Valid values are `FDL` or `DEFAULT`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the flow. Valid values are `FDL` or `DEFAULT`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private FlowArgs() {}

    private FlowArgs(FlowArgs $) {
        this.definition = $.definition;
        this.description = $.description;
        this.name = $.name;
        this.roleArn = $.roleArn;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowArgs $;

        public Builder() {
            $ = new FlowArgs();
        }

        public Builder(FlowArgs defaults) {
            $ = new FlowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param definition The definition of the flow. It must comply with the Flow Definition Language (FDL) syntax.
         * 
         * @return builder
         * 
         */
        public Builder definition(Output<String> definition) {
            $.definition = definition;
            return this;
        }

        /**
         * @param definition The definition of the flow. It must comply with the Flow Definition Language (FDL) syntax.
         * 
         * @return builder
         * 
         */
        public Builder definition(String definition) {
            return definition(Output.of(definition));
        }

        /**
         * @param description The description of the flow.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the flow.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the flow. The name must be unique in an Alibaba Cloud account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the flow. The name must be unique in an Alibaba Cloud account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param roleArn The ARN of the specified RAM role that Serverless Workflow uses to assume the role when Serverless Workflow executes a flow.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The ARN of the specified RAM role that Serverless Workflow uses to assume the role when Serverless Workflow executes a flow.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param type The type of the flow. Valid values are `FDL` or `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the flow. Valid values are `FDL` or `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public FlowArgs build() {
            if ($.definition == null) {
                throw new MissingRequiredPropertyException("FlowArgs", "definition");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("FlowArgs", "description");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("FlowArgs", "type");
            }
            return $;
        }
    }

}
