// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketCnameCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketCnameCertificateArgs Empty = new BucketCnameCertificateArgs();

    /**
     * Certificate Identifier
     * 
     */
    @Import(name="certId")
    private @Nullable Output<String> certId;

    /**
     * @return Certificate Identifier
     * 
     */
    public Optional<Output<String>> certId() {
        return Optional.ofNullable(this.certId);
    }

    /**
     * The certificate public key.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return The certificate public key.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Certificate creation time
     * 
     */
    @Import(name="creationDate")
    private @Nullable Output<String> creationDate;

    /**
     * @return Certificate creation time
     * 
     */
    public Optional<Output<String>> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    /**
     * Certificate Fingerprint
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return Certificate Fingerprint
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * The certificate private key.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The certificate private key.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * Cname status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Cname status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Certificate Type
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Certificate Type
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Certificate validity period end time
     * 
     */
    @Import(name="validEndDate")
    private @Nullable Output<String> validEndDate;

    /**
     * @return Certificate validity period end time
     * 
     */
    public Optional<Output<String>> validEndDate() {
        return Optional.ofNullable(this.validEndDate);
    }

    /**
     * Certificate validity period start time
     * 
     */
    @Import(name="validStartDate")
    private @Nullable Output<String> validStartDate;

    /**
     * @return Certificate validity period start time
     * 
     */
    public Optional<Output<String>> validStartDate() {
        return Optional.ofNullable(this.validStartDate);
    }

    private BucketCnameCertificateArgs() {}

    private BucketCnameCertificateArgs(BucketCnameCertificateArgs $) {
        this.certId = $.certId;
        this.certificate = $.certificate;
        this.creationDate = $.creationDate;
        this.fingerprint = $.fingerprint;
        this.privateKey = $.privateKey;
        this.status = $.status;
        this.type = $.type;
        this.validEndDate = $.validEndDate;
        this.validStartDate = $.validStartDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketCnameCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketCnameCertificateArgs $;

        public Builder() {
            $ = new BucketCnameCertificateArgs();
        }

        public Builder(BucketCnameCertificateArgs defaults) {
            $ = new BucketCnameCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certId Certificate Identifier
         * 
         * @return builder
         * 
         */
        public Builder certId(@Nullable Output<String> certId) {
            $.certId = certId;
            return this;
        }

        /**
         * @param certId Certificate Identifier
         * 
         * @return builder
         * 
         */
        public Builder certId(String certId) {
            return certId(Output.of(certId));
        }

        /**
         * @param certificate The certificate public key.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The certificate public key.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param creationDate Certificate creation time
         * 
         * @return builder
         * 
         */
        public Builder creationDate(@Nullable Output<String> creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        /**
         * @param creationDate Certificate creation time
         * 
         * @return builder
         * 
         */
        public Builder creationDate(String creationDate) {
            return creationDate(Output.of(creationDate));
        }

        /**
         * @param fingerprint Certificate Fingerprint
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint Certificate Fingerprint
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param privateKey The certificate private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The certificate private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param status Cname status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Cname status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type Certificate Type
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Certificate Type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param validEndDate Certificate validity period end time
         * 
         * @return builder
         * 
         */
        public Builder validEndDate(@Nullable Output<String> validEndDate) {
            $.validEndDate = validEndDate;
            return this;
        }

        /**
         * @param validEndDate Certificate validity period end time
         * 
         * @return builder
         * 
         */
        public Builder validEndDate(String validEndDate) {
            return validEndDate(Output.of(validEndDate));
        }

        /**
         * @param validStartDate Certificate validity period start time
         * 
         * @return builder
         * 
         */
        public Builder validStartDate(@Nullable Output<String> validStartDate) {
            $.validStartDate = validStartDate;
            return this;
        }

        /**
         * @param validStartDate Certificate validity period start time
         * 
         * @return builder
         * 
         */
        public Builder validStartDate(String validStartDate) {
            return validStartDate(Output.of(validStartDate));
        }

        public BucketCnameCertificateArgs build() {
            return $;
        }
    }

}
