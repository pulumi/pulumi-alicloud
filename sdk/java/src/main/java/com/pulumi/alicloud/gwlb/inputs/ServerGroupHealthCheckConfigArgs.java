// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gwlb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerGroupHealthCheckConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerGroupHealthCheckConfigArgs Empty = new ServerGroupHealthCheckConfigArgs();

    /**
     * The backend server port that is used for health checks.
     * 
     * Valid values: `1` to `65535`.
     * 
     * Default value: `80`.
     * 
     */
    @Import(name="healthCheckConnectPort")
    private @Nullable Output<Integer> healthCheckConnectPort;

    /**
     * @return The backend server port that is used for health checks.
     * 
     * Valid values: `1` to `65535`.
     * 
     * Default value: `80`.
     * 
     */
    public Optional<Output<Integer>> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }

    /**
     * The maximum timeout period of a health check response.
     * 
     * Unit: seconds
     * 
     * Valid values: `1` to `300`.
     * 
     * Default value: `5`.
     * 
     */
    @Import(name="healthCheckConnectTimeout")
    private @Nullable Output<Integer> healthCheckConnectTimeout;

    /**
     * @return The maximum timeout period of a health check response.
     * 
     * Unit: seconds
     * 
     * Valid values: `1` to `300`.
     * 
     * Default value: `5`.
     * 
     */
    public Optional<Output<Integer>> healthCheckConnectTimeout() {
        return Optional.ofNullable(this.healthCheckConnectTimeout);
    }

    /**
     * The domain name that you want to use for health checks. Valid values:
     * 
     * *   **$SERVER_IP** (default): the private IP address of a backend server.
     * 
     */
    @Import(name="healthCheckDomain")
    private @Nullable Output<String> healthCheckDomain;

    /**
     * @return The domain name that you want to use for health checks. Valid values:
     * 
     * *   **$SERVER_IP** (default): the private IP address of a backend server.
     * 
     */
    public Optional<Output<String>> healthCheckDomain() {
        return Optional.ofNullable(this.healthCheckDomain);
    }

    /**
     * Specifies whether to enable the health check feature. Valid values:
     * 
     */
    @Import(name="healthCheckEnabled")
    private @Nullable Output<Boolean> healthCheckEnabled;

    /**
     * @return Specifies whether to enable the health check feature. Valid values:
     * 
     */
    public Optional<Output<Boolean>> healthCheckEnabled() {
        return Optional.ofNullable(this.healthCheckEnabled);
    }

    /**
     * The HTTP status codes that the system returns for health checks.
     * 
     */
    @Import(name="healthCheckHttpCodes")
    private @Nullable Output<List<String>> healthCheckHttpCodes;

    /**
     * @return The HTTP status codes that the system returns for health checks.
     * 
     */
    public Optional<Output<List<String>>> healthCheckHttpCodes() {
        return Optional.ofNullable(this.healthCheckHttpCodes);
    }

    /**
     * The interval at which health checks are performed.
     * 
     * Unit: seconds
     * 
     * Valid values: `1` to `50`.
     * 
     * Default value: `10`.
     * 
     */
    @Import(name="healthCheckInterval")
    private @Nullable Output<Integer> healthCheckInterval;

    /**
     * @return The interval at which health checks are performed.
     * 
     * Unit: seconds
     * 
     * Valid values: `1` to `50`.
     * 
     * Default value: `10`.
     * 
     */
    public Optional<Output<Integer>> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }

    /**
     * The URL that is used for health checks.
     * 
     * The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: \_ ; ~ ! ( ) \* \[ ] {@literal @} $ ^ : &#39; , + =
     * 
     * The URL must start with a forward slash (/).
     * 
     * &gt; **NOTE:**  This parameter takes effect only if you set `HealthCheckProtocol` to `HTTP`.
     * 
     */
    @Import(name="healthCheckPath")
    private @Nullable Output<String> healthCheckPath;

    /**
     * @return The URL that is used for health checks.
     * 
     * The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: \_ ; ~ ! ( ) \* \[ ] {@literal @} $ ^ : &#39; , + =
     * 
     * The URL must start with a forward slash (/).
     * 
     * &gt; **NOTE:**  This parameter takes effect only if you set `HealthCheckProtocol` to `HTTP`.
     * 
     */
    public Optional<Output<String>> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }

    /**
     * The protocol that is used for health checks. Valid values:
     * 
     * - `TCP`: TCP health checks send TCP SYN packets to a backend server to check whether the port of the backend server is reachable.
     * - `HTTP`: HTTP health checks simulate a process that uses a web browser to access resources by sending HEAD or GET requests to an instance. These requests are used to check whether the instance is healthy.
     * 
     */
    @Import(name="healthCheckProtocol")
    private @Nullable Output<String> healthCheckProtocol;

    /**
     * @return The protocol that is used for health checks. Valid values:
     * 
     * - `TCP`: TCP health checks send TCP SYN packets to a backend server to check whether the port of the backend server is reachable.
     * - `HTTP`: HTTP health checks simulate a process that uses a web browser to access resources by sending HEAD or GET requests to an instance. These requests are used to check whether the instance is healthy.
     * 
     */
    public Optional<Output<String>> healthCheckProtocol() {
        return Optional.ofNullable(this.healthCheckProtocol);
    }

    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `2`.
     * 
     */
    @Import(name="healthyThreshold")
    private @Nullable Output<Integer> healthyThreshold;

    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `2`.
     * 
     */
    public Optional<Output<Integer>> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }

    /**
     * The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `2`.
     * 
     */
    @Import(name="unhealthyThreshold")
    private @Nullable Output<Integer> unhealthyThreshold;

    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `2`.
     * 
     */
    public Optional<Output<Integer>> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    private ServerGroupHealthCheckConfigArgs() {}

    private ServerGroupHealthCheckConfigArgs(ServerGroupHealthCheckConfigArgs $) {
        this.healthCheckConnectPort = $.healthCheckConnectPort;
        this.healthCheckConnectTimeout = $.healthCheckConnectTimeout;
        this.healthCheckDomain = $.healthCheckDomain;
        this.healthCheckEnabled = $.healthCheckEnabled;
        this.healthCheckHttpCodes = $.healthCheckHttpCodes;
        this.healthCheckInterval = $.healthCheckInterval;
        this.healthCheckPath = $.healthCheckPath;
        this.healthCheckProtocol = $.healthCheckProtocol;
        this.healthyThreshold = $.healthyThreshold;
        this.unhealthyThreshold = $.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerGroupHealthCheckConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerGroupHealthCheckConfigArgs $;

        public Builder() {
            $ = new ServerGroupHealthCheckConfigArgs();
        }

        public Builder(ServerGroupHealthCheckConfigArgs defaults) {
            $ = new ServerGroupHealthCheckConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param healthCheckConnectPort The backend server port that is used for health checks.
         * 
         * Valid values: `1` to `65535`.
         * 
         * Default value: `80`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(@Nullable Output<Integer> healthCheckConnectPort) {
            $.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }

        /**
         * @param healthCheckConnectPort The backend server port that is used for health checks.
         * 
         * Valid values: `1` to `65535`.
         * 
         * Default value: `80`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(Integer healthCheckConnectPort) {
            return healthCheckConnectPort(Output.of(healthCheckConnectPort));
        }

        /**
         * @param healthCheckConnectTimeout The maximum timeout period of a health check response.
         * 
         * Unit: seconds
         * 
         * Valid values: `1` to `300`.
         * 
         * Default value: `5`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectTimeout(@Nullable Output<Integer> healthCheckConnectTimeout) {
            $.healthCheckConnectTimeout = healthCheckConnectTimeout;
            return this;
        }

        /**
         * @param healthCheckConnectTimeout The maximum timeout period of a health check response.
         * 
         * Unit: seconds
         * 
         * Valid values: `1` to `300`.
         * 
         * Default value: `5`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectTimeout(Integer healthCheckConnectTimeout) {
            return healthCheckConnectTimeout(Output.of(healthCheckConnectTimeout));
        }

        /**
         * @param healthCheckDomain The domain name that you want to use for health checks. Valid values:
         * 
         * *   **$SERVER_IP** (default): the private IP address of a backend server.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckDomain(@Nullable Output<String> healthCheckDomain) {
            $.healthCheckDomain = healthCheckDomain;
            return this;
        }

        /**
         * @param healthCheckDomain The domain name that you want to use for health checks. Valid values:
         * 
         * *   **$SERVER_IP** (default): the private IP address of a backend server.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckDomain(String healthCheckDomain) {
            return healthCheckDomain(Output.of(healthCheckDomain));
        }

        /**
         * @param healthCheckEnabled Specifies whether to enable the health check feature. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEnabled(@Nullable Output<Boolean> healthCheckEnabled) {
            $.healthCheckEnabled = healthCheckEnabled;
            return this;
        }

        /**
         * @param healthCheckEnabled Specifies whether to enable the health check feature. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEnabled(Boolean healthCheckEnabled) {
            return healthCheckEnabled(Output.of(healthCheckEnabled));
        }

        /**
         * @param healthCheckHttpCodes The HTTP status codes that the system returns for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCodes(@Nullable Output<List<String>> healthCheckHttpCodes) {
            $.healthCheckHttpCodes = healthCheckHttpCodes;
            return this;
        }

        /**
         * @param healthCheckHttpCodes The HTTP status codes that the system returns for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCodes(List<String> healthCheckHttpCodes) {
            return healthCheckHttpCodes(Output.of(healthCheckHttpCodes));
        }

        /**
         * @param healthCheckHttpCodes The HTTP status codes that the system returns for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCodes(String... healthCheckHttpCodes) {
            return healthCheckHttpCodes(List.of(healthCheckHttpCodes));
        }

        /**
         * @param healthCheckInterval The interval at which health checks are performed.
         * 
         * Unit: seconds
         * 
         * Valid values: `1` to `50`.
         * 
         * Default value: `10`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(@Nullable Output<Integer> healthCheckInterval) {
            $.healthCheckInterval = healthCheckInterval;
            return this;
        }

        /**
         * @param healthCheckInterval The interval at which health checks are performed.
         * 
         * Unit: seconds
         * 
         * Valid values: `1` to `50`.
         * 
         * Default value: `10`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(Integer healthCheckInterval) {
            return healthCheckInterval(Output.of(healthCheckInterval));
        }

        /**
         * @param healthCheckPath The URL that is used for health checks.
         * 
         * The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: \_ ; ~ ! ( ) \* \[ ] {@literal @} $ ^ : &#39; , + =
         * 
         * The URL must start with a forward slash (/).
         * 
         * &gt; **NOTE:**  This parameter takes effect only if you set `HealthCheckProtocol` to `HTTP`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(@Nullable Output<String> healthCheckPath) {
            $.healthCheckPath = healthCheckPath;
            return this;
        }

        /**
         * @param healthCheckPath The URL that is used for health checks.
         * 
         * The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: \_ ; ~ ! ( ) \* \[ ] {@literal @} $ ^ : &#39; , + =
         * 
         * The URL must start with a forward slash (/).
         * 
         * &gt; **NOTE:**  This parameter takes effect only if you set `HealthCheckProtocol` to `HTTP`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(String healthCheckPath) {
            return healthCheckPath(Output.of(healthCheckPath));
        }

        /**
         * @param healthCheckProtocol The protocol that is used for health checks. Valid values:
         * 
         * - `TCP`: TCP health checks send TCP SYN packets to a backend server to check whether the port of the backend server is reachable.
         * - `HTTP`: HTTP health checks simulate a process that uses a web browser to access resources by sending HEAD or GET requests to an instance. These requests are used to check whether the instance is healthy.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckProtocol(@Nullable Output<String> healthCheckProtocol) {
            $.healthCheckProtocol = healthCheckProtocol;
            return this;
        }

        /**
         * @param healthCheckProtocol The protocol that is used for health checks. Valid values:
         * 
         * - `TCP`: TCP health checks send TCP SYN packets to a backend server to check whether the port of the backend server is reachable.
         * - `HTTP`: HTTP health checks simulate a process that uses a web browser to access resources by sending HEAD or GET requests to an instance. These requests are used to check whether the instance is healthy.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckProtocol(String healthCheckProtocol) {
            return healthCheckProtocol(Output.of(healthCheckProtocol));
        }

        /**
         * @param healthyThreshold The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
         * 
         * Valid values: `2` to `10`.
         * 
         * Default value: `2`.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(@Nullable Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param healthyThreshold The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
         * 
         * Valid values: `2` to `10`.
         * 
         * Default value: `2`.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        /**
         * @param unhealthyThreshold The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
         * 
         * Valid values: `2` to `10`.
         * 
         * Default value: `2`.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(@Nullable Output<Integer> unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        /**
         * @param unhealthyThreshold The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
         * 
         * Valid values: `2` to `10`.
         * 
         * Default value: `2`.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            return unhealthyThreshold(Output.of(unhealthyThreshold));
        }

        public ServerGroupHealthCheckConfigArgs build() {
            return $;
        }
    }

}
