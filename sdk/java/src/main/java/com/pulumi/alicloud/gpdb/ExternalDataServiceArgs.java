// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalDataServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalDataServiceArgs Empty = new ExternalDataServiceArgs();

    /**
     * Instance ID
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return Instance ID
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    /**
     * Service Description
     * 
     */
    @Import(name="serviceDescription")
    private @Nullable Output<String> serviceDescription;

    /**
     * @return Service Description
     * 
     */
    public Optional<Output<String>> serviceDescription() {
        return Optional.ofNullable(this.serviceDescription);
    }

    /**
     * Service Name
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return Service Name
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Service Specifications
     * 
     */
    @Import(name="serviceSpec", required=true)
    private Output<String> serviceSpec;

    /**
     * @return Service Specifications
     * 
     */
    public Output<String> serviceSpec() {
        return this.serviceSpec;
    }

    private ExternalDataServiceArgs() {}

    private ExternalDataServiceArgs(ExternalDataServiceArgs $) {
        this.dbInstanceId = $.dbInstanceId;
        this.serviceDescription = $.serviceDescription;
        this.serviceName = $.serviceName;
        this.serviceSpec = $.serviceSpec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalDataServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalDataServiceArgs $;

        public Builder() {
            $ = new ExternalDataServiceArgs();
        }

        public Builder(ExternalDataServiceArgs defaults) {
            $ = new ExternalDataServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbInstanceId Instance ID
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId Instance ID
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param serviceDescription Service Description
         * 
         * @return builder
         * 
         */
        public Builder serviceDescription(@Nullable Output<String> serviceDescription) {
            $.serviceDescription = serviceDescription;
            return this;
        }

        /**
         * @param serviceDescription Service Description
         * 
         * @return builder
         * 
         */
        public Builder serviceDescription(String serviceDescription) {
            return serviceDescription(Output.of(serviceDescription));
        }

        /**
         * @param serviceName Service Name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Service Name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param serviceSpec Service Specifications
         * 
         * @return builder
         * 
         */
        public Builder serviceSpec(Output<String> serviceSpec) {
            $.serviceSpec = serviceSpec;
            return this;
        }

        /**
         * @param serviceSpec Service Specifications
         * 
         * @return builder
         * 
         */
        public Builder serviceSpec(String serviceSpec) {
            return serviceSpec(Output.of(serviceSpec));
        }

        public ExternalDataServiceArgs build() {
            if ($.dbInstanceId == null) {
                throw new MissingRequiredPropertyException("ExternalDataServiceArgs", "dbInstanceId");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("ExternalDataServiceArgs", "serviceName");
            }
            if ($.serviceSpec == null) {
                throw new MissingRequiredPropertyException("ExternalDataServiceArgs", "serviceSpec");
            }
            return $;
        }
    }

}
