// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CycleTaskState extends com.pulumi.resources.ResourceArgs {

    public static final CycleTaskState Empty = new CycleTaskState();

    /**
     * Whether to enable. Value:
     * 
     */
    @Import(name="enable")
    private @Nullable Output<Integer> enable;

    /**
     * @return Whether to enable. Value:
     * 
     */
    public Optional<Output<Integer>> enable() {
        return Optional.ofNullable(this.enable);
    }

    /**
     * First execution time.
     * 
     */
    @Import(name="firstDateStr")
    private @Nullable Output<Integer> firstDateStr;

    /**
     * @return First execution time.
     * 
     */
    public Optional<Output<Integer>> firstDateStr() {
        return Optional.ofNullable(this.firstDateStr);
    }

    /**
     * Interval period.
     * 
     */
    @Import(name="intervalPeriod")
    private @Nullable Output<Integer> intervalPeriod;

    /**
     * @return Interval period.
     * 
     */
    public Optional<Output<Integer>> intervalPeriod() {
        return Optional.ofNullable(this.intervalPeriod);
    }

    /**
     * Extended information field.
     * 
     */
    @Import(name="param")
    private @Nullable Output<String> param;

    /**
     * @return Extended information field.
     * 
     */
    public Optional<Output<String>> param() {
        return Optional.ofNullable(this.param);
    }

    /**
     * Unit of scan cycle, value:
     * 
     */
    @Import(name="periodUnit")
    private @Nullable Output<String> periodUnit;

    /**
     * @return Unit of scan cycle, value:
     * 
     */
    public Optional<Output<String>> periodUnit() {
        return Optional.ofNullable(this.periodUnit);
    }

    /**
     * Added the source of the task.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Added the source of the task.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Task end time (hours).
     * 
     */
    @Import(name="targetEndTime")
    private @Nullable Output<Integer> targetEndTime;

    /**
     * @return Task end time (hours).
     * 
     */
    public Optional<Output<Integer>> targetEndTime() {
        return Optional.ofNullable(this.targetEndTime);
    }

    /**
     * Task start time (hours).
     * 
     */
    @Import(name="targetStartTime")
    private @Nullable Output<Integer> targetStartTime;

    /**
     * @return Task start time (hours).
     * 
     */
    public Optional<Output<Integer>> targetStartTime() {
        return Optional.ofNullable(this.targetStartTime);
    }

    /**
     * The task name.
     * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
     * - **IMAGE_SCAN**: Image scan.
     * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
     * 
     */
    @Import(name="taskName")
    private @Nullable Output<String> taskName;

    /**
     * @return The task name.
     * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
     * - **IMAGE_SCAN**: Image scan.
     * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
     * 
     */
    public Optional<Output<String>> taskName() {
        return Optional.ofNullable(this.taskName);
    }

    /**
     * The task type.
     * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
     * - **IMAGE_SCAN**: Image scan.
     * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
     * 
     */
    @Import(name="taskType")
    private @Nullable Output<String> taskType;

    /**
     * @return The task type.
     * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
     * - **IMAGE_SCAN**: Image scan.
     * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
     * 
     */
    public Optional<Output<String>> taskType() {
        return Optional.ofNullable(this.taskType);
    }

    private CycleTaskState() {}

    private CycleTaskState(CycleTaskState $) {
        this.enable = $.enable;
        this.firstDateStr = $.firstDateStr;
        this.intervalPeriod = $.intervalPeriod;
        this.param = $.param;
        this.periodUnit = $.periodUnit;
        this.source = $.source;
        this.targetEndTime = $.targetEndTime;
        this.targetStartTime = $.targetStartTime;
        this.taskName = $.taskName;
        this.taskType = $.taskType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CycleTaskState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CycleTaskState $;

        public Builder() {
            $ = new CycleTaskState();
        }

        public Builder(CycleTaskState defaults) {
            $ = new CycleTaskState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enable Whether to enable. Value:
         * 
         * @return builder
         * 
         */
        public Builder enable(@Nullable Output<Integer> enable) {
            $.enable = enable;
            return this;
        }

        /**
         * @param enable Whether to enable. Value:
         * 
         * @return builder
         * 
         */
        public Builder enable(Integer enable) {
            return enable(Output.of(enable));
        }

        /**
         * @param firstDateStr First execution time.
         * 
         * @return builder
         * 
         */
        public Builder firstDateStr(@Nullable Output<Integer> firstDateStr) {
            $.firstDateStr = firstDateStr;
            return this;
        }

        /**
         * @param firstDateStr First execution time.
         * 
         * @return builder
         * 
         */
        public Builder firstDateStr(Integer firstDateStr) {
            return firstDateStr(Output.of(firstDateStr));
        }

        /**
         * @param intervalPeriod Interval period.
         * 
         * @return builder
         * 
         */
        public Builder intervalPeriod(@Nullable Output<Integer> intervalPeriod) {
            $.intervalPeriod = intervalPeriod;
            return this;
        }

        /**
         * @param intervalPeriod Interval period.
         * 
         * @return builder
         * 
         */
        public Builder intervalPeriod(Integer intervalPeriod) {
            return intervalPeriod(Output.of(intervalPeriod));
        }

        /**
         * @param param Extended information field.
         * 
         * @return builder
         * 
         */
        public Builder param(@Nullable Output<String> param) {
            $.param = param;
            return this;
        }

        /**
         * @param param Extended information field.
         * 
         * @return builder
         * 
         */
        public Builder param(String param) {
            return param(Output.of(param));
        }

        /**
         * @param periodUnit Unit of scan cycle, value:
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(@Nullable Output<String> periodUnit) {
            $.periodUnit = periodUnit;
            return this;
        }

        /**
         * @param periodUnit Unit of scan cycle, value:
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(String periodUnit) {
            return periodUnit(Output.of(periodUnit));
        }

        /**
         * @param source Added the source of the task.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Added the source of the task.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param targetEndTime Task end time (hours).
         * 
         * @return builder
         * 
         */
        public Builder targetEndTime(@Nullable Output<Integer> targetEndTime) {
            $.targetEndTime = targetEndTime;
            return this;
        }

        /**
         * @param targetEndTime Task end time (hours).
         * 
         * @return builder
         * 
         */
        public Builder targetEndTime(Integer targetEndTime) {
            return targetEndTime(Output.of(targetEndTime));
        }

        /**
         * @param targetStartTime Task start time (hours).
         * 
         * @return builder
         * 
         */
        public Builder targetStartTime(@Nullable Output<Integer> targetStartTime) {
            $.targetStartTime = targetStartTime;
            return this;
        }

        /**
         * @param targetStartTime Task start time (hours).
         * 
         * @return builder
         * 
         */
        public Builder targetStartTime(Integer targetStartTime) {
            return targetStartTime(Output.of(targetStartTime));
        }

        /**
         * @param taskName The task name.
         * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
         * - **IMAGE_SCAN**: Image scan.
         * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
         * 
         * @return builder
         * 
         */
        public Builder taskName(@Nullable Output<String> taskName) {
            $.taskName = taskName;
            return this;
        }

        /**
         * @param taskName The task name.
         * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
         * - **IMAGE_SCAN**: Image scan.
         * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
         * 
         * @return builder
         * 
         */
        public Builder taskName(String taskName) {
            return taskName(Output.of(taskName));
        }

        /**
         * @param taskType The task type.
         * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
         * - **IMAGE_SCAN**: Image scan.
         * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
         * 
         * @return builder
         * 
         */
        public Builder taskType(@Nullable Output<String> taskType) {
            $.taskType = taskType;
            return this;
        }

        /**
         * @param taskType The task type.
         * - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
         * - **IMAGE_SCAN**: Image scan.
         * - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
         * 
         * @return builder
         * 
         */
        public Builder taskType(String taskType) {
            return taskType(Output.of(taskType));
        }

        public CycleTaskState build() {
            return $;
        }
    }

}
