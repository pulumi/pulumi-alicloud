// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNasFileSystemsSystem {
    /**
     * @return The capacity of nas file system.
     * 
     */
    private String capacity;
    /**
     * @return The create time of nas file system.
     * 
     */
    private String createTime;
    /**
     * @return The description of nas file system.
     * 
     */
    private String description;
    /**
     * @return The filesystem id of nas file system.
     * 
     */
    private String fileSystemId;
    /**
     * @return The type of nas file system.
     * 
     */
    private String fileSystemType;
    /**
     * @return The ID of the Nas File System.
     * 
     */
    private String id;
    /**
     * @return The size of metered.
     * 
     */
    private String meteredSize;
    /**
     * @return The domain of mount target.
     * 
     */
    private String mountTargetDomain;
    /**
     * @return The status of mount target. Valid values: `Pending`, `Active`, `Inactive`,`Deleting`,`Invalid`.
     * 
     */
    private String mountTargetStatus;
    /**
     * @return The name of nas file system.
     * 
     */
    private String nasFileSystemName;
    /**
     * @return The ID of office site.
     * 
     */
    private String officeSiteId;
    /**
     * @return The name of office site.
     * 
     */
    private String officeSiteName;
    /**
     * @return The status of nas file system. Valid values: `Pending`, `Running`, `Stopped`,`Deleting`, `Deleted`, `Invalid`.
     * 
     */
    private String status;
    /**
     * @return The storage type of nas file system.
     * 
     */
    private String storageType;
    /**
     * @return Whether to support Acl.
     * 
     */
    private Boolean supportAcl;
    /**
     * @return The zone id of nas file system.
     * 
     */
    private String zoneId;

    private GetNasFileSystemsSystem() {}
    /**
     * @return The capacity of nas file system.
     * 
     */
    public String capacity() {
        return this.capacity;
    }
    /**
     * @return The create time of nas file system.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The description of nas file system.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The filesystem id of nas file system.
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return The type of nas file system.
     * 
     */
    public String fileSystemType() {
        return this.fileSystemType;
    }
    /**
     * @return The ID of the Nas File System.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The size of metered.
     * 
     */
    public String meteredSize() {
        return this.meteredSize;
    }
    /**
     * @return The domain of mount target.
     * 
     */
    public String mountTargetDomain() {
        return this.mountTargetDomain;
    }
    /**
     * @return The status of mount target. Valid values: `Pending`, `Active`, `Inactive`,`Deleting`,`Invalid`.
     * 
     */
    public String mountTargetStatus() {
        return this.mountTargetStatus;
    }
    /**
     * @return The name of nas file system.
     * 
     */
    public String nasFileSystemName() {
        return this.nasFileSystemName;
    }
    /**
     * @return The ID of office site.
     * 
     */
    public String officeSiteId() {
        return this.officeSiteId;
    }
    /**
     * @return The name of office site.
     * 
     */
    public String officeSiteName() {
        return this.officeSiteName;
    }
    /**
     * @return The status of nas file system. Valid values: `Pending`, `Running`, `Stopped`,`Deleting`, `Deleted`, `Invalid`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The storage type of nas file system.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return Whether to support Acl.
     * 
     */
    public Boolean supportAcl() {
        return this.supportAcl;
    }
    /**
     * @return The zone id of nas file system.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNasFileSystemsSystem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String capacity;
        private String createTime;
        private String description;
        private String fileSystemId;
        private String fileSystemType;
        private String id;
        private String meteredSize;
        private String mountTargetDomain;
        private String mountTargetStatus;
        private String nasFileSystemName;
        private String officeSiteId;
        private String officeSiteName;
        private String status;
        private String storageType;
        private Boolean supportAcl;
        private String zoneId;
        public Builder() {}
        public Builder(GetNasFileSystemsSystem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacity = defaults.capacity;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.fileSystemType = defaults.fileSystemType;
    	      this.id = defaults.id;
    	      this.meteredSize = defaults.meteredSize;
    	      this.mountTargetDomain = defaults.mountTargetDomain;
    	      this.mountTargetStatus = defaults.mountTargetStatus;
    	      this.nasFileSystemName = defaults.nasFileSystemName;
    	      this.officeSiteId = defaults.officeSiteId;
    	      this.officeSiteName = defaults.officeSiteName;
    	      this.status = defaults.status;
    	      this.storageType = defaults.storageType;
    	      this.supportAcl = defaults.supportAcl;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder capacity(String capacity) {
            if (capacity == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "capacity");
            }
            this.capacity = capacity;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemId(String fileSystemId) {
            if (fileSystemId == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "fileSystemId");
            }
            this.fileSystemId = fileSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemType(String fileSystemType) {
            if (fileSystemType == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "fileSystemType");
            }
            this.fileSystemType = fileSystemType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder meteredSize(String meteredSize) {
            if (meteredSize == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "meteredSize");
            }
            this.meteredSize = meteredSize;
            return this;
        }
        @CustomType.Setter
        public Builder mountTargetDomain(String mountTargetDomain) {
            if (mountTargetDomain == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "mountTargetDomain");
            }
            this.mountTargetDomain = mountTargetDomain;
            return this;
        }
        @CustomType.Setter
        public Builder mountTargetStatus(String mountTargetStatus) {
            if (mountTargetStatus == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "mountTargetStatus");
            }
            this.mountTargetStatus = mountTargetStatus;
            return this;
        }
        @CustomType.Setter
        public Builder nasFileSystemName(String nasFileSystemName) {
            if (nasFileSystemName == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "nasFileSystemName");
            }
            this.nasFileSystemName = nasFileSystemName;
            return this;
        }
        @CustomType.Setter
        public Builder officeSiteId(String officeSiteId) {
            if (officeSiteId == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "officeSiteId");
            }
            this.officeSiteId = officeSiteId;
            return this;
        }
        @CustomType.Setter
        public Builder officeSiteName(String officeSiteName) {
            if (officeSiteName == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "officeSiteName");
            }
            this.officeSiteName = officeSiteName;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder supportAcl(Boolean supportAcl) {
            if (supportAcl == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "supportAcl");
            }
            this.supportAcl = supportAcl;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetNasFileSystemsSystem", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetNasFileSystemsSystem build() {
            final var _resultValue = new GetNasFileSystemsSystem();
            _resultValue.capacity = capacity;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.fileSystemId = fileSystemId;
            _resultValue.fileSystemType = fileSystemType;
            _resultValue.id = id;
            _resultValue.meteredSize = meteredSize;
            _resultValue.mountTargetDomain = mountTargetDomain;
            _resultValue.mountTargetStatus = mountTargetStatus;
            _resultValue.nasFileSystemName = nasFileSystemName;
            _resultValue.officeSiteId = officeSiteId;
            _resultValue.officeSiteName = officeSiteName;
            _resultValue.status = status;
            _resultValue.storageType = storageType;
            _resultValue.supportAcl = supportAcl;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
