// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ga.outputs;

import com.pulumi.alicloud.ga.outputs.GetEndpointGroupsGroupEndpointConfiguration;
import com.pulumi.alicloud.ga.outputs.GetEndpointGroupsGroupPortOverride;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEndpointGroupsGroup {
    /**
     * @return The description of the endpoint group.
     * 
     */
    private String description;
    /**
     * @return The endpointConfigurations of the endpoint group.
     * 
     */
    private List<GetEndpointGroupsGroupEndpointConfiguration> endpointConfigurations;
    /**
     * @return The endpoint_group_id of the Endpoint Group.
     * 
     */
    private String endpointGroupId;
    /**
     * @return (Available since v1.213.1) The list of endpoint group IP addresses.
     * 
     */
    private List<String> endpointGroupIpLists;
    /**
     * @return The ID of the region where the endpoint group is deployed.
     * 
     */
    private String endpointGroupRegion;
    /**
     * @return The interval between two consecutive health checks. Unit: seconds.
     * 
     */
    private Integer healthCheckIntervalSeconds;
    /**
     * @return The path specified as the destination of the targets for health checks.
     * 
     */
    private String healthCheckPath;
    /**
     * @return The port that is used for health checks.
     * 
     */
    private Integer healthCheckPort;
    /**
     * @return The protocol that is used to connect to the targets for health checks.
     * 
     */
    private String healthCheckProtocol;
    /**
     * @return The ID of the Endpoint Group.
     * 
     */
    private String id;
    /**
     * @return The ID of the listener that is associated with the endpoint group.
     * 
     */
    private String listenerId;
    /**
     * @return The name of the endpoint group.
     * 
     */
    private String name;
    /**
     * @return Mapping between listening port and forwarding port of boarding point.
     * 
     */
    private List<GetEndpointGroupsGroupPortOverride> portOverrides;
    /**
     * @return The status of the endpoint group. Valid values: `active`, `configuring`, `creating`, `init`.
     * 
     */
    private String status;
    /**
     * @return The number of consecutive failed heath checks that must occur before the endpoint is deemed unhealthy.
     * 
     */
    private Integer thresholdCount;
    /**
     * @return The weight of the endpoint group when the corresponding listener is associated with multiple endpoint groups.
     * 
     */
    private Integer trafficPercentage;

    private GetEndpointGroupsGroup() {}
    /**
     * @return The description of the endpoint group.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The endpointConfigurations of the endpoint group.
     * 
     */
    public List<GetEndpointGroupsGroupEndpointConfiguration> endpointConfigurations() {
        return this.endpointConfigurations;
    }
    /**
     * @return The endpoint_group_id of the Endpoint Group.
     * 
     */
    public String endpointGroupId() {
        return this.endpointGroupId;
    }
    /**
     * @return (Available since v1.213.1) The list of endpoint group IP addresses.
     * 
     */
    public List<String> endpointGroupIpLists() {
        return this.endpointGroupIpLists;
    }
    /**
     * @return The ID of the region where the endpoint group is deployed.
     * 
     */
    public String endpointGroupRegion() {
        return this.endpointGroupRegion;
    }
    /**
     * @return The interval between two consecutive health checks. Unit: seconds.
     * 
     */
    public Integer healthCheckIntervalSeconds() {
        return this.healthCheckIntervalSeconds;
    }
    /**
     * @return The path specified as the destination of the targets for health checks.
     * 
     */
    public String healthCheckPath() {
        return this.healthCheckPath;
    }
    /**
     * @return The port that is used for health checks.
     * 
     */
    public Integer healthCheckPort() {
        return this.healthCheckPort;
    }
    /**
     * @return The protocol that is used to connect to the targets for health checks.
     * 
     */
    public String healthCheckProtocol() {
        return this.healthCheckProtocol;
    }
    /**
     * @return The ID of the Endpoint Group.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the listener that is associated with the endpoint group.
     * 
     */
    public String listenerId() {
        return this.listenerId;
    }
    /**
     * @return The name of the endpoint group.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Mapping between listening port and forwarding port of boarding point.
     * 
     */
    public List<GetEndpointGroupsGroupPortOverride> portOverrides() {
        return this.portOverrides;
    }
    /**
     * @return The status of the endpoint group. Valid values: `active`, `configuring`, `creating`, `init`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The number of consecutive failed heath checks that must occur before the endpoint is deemed unhealthy.
     * 
     */
    public Integer thresholdCount() {
        return this.thresholdCount;
    }
    /**
     * @return The weight of the endpoint group when the corresponding listener is associated with multiple endpoint groups.
     * 
     */
    public Integer trafficPercentage() {
        return this.trafficPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEndpointGroupsGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private List<GetEndpointGroupsGroupEndpointConfiguration> endpointConfigurations;
        private String endpointGroupId;
        private List<String> endpointGroupIpLists;
        private String endpointGroupRegion;
        private Integer healthCheckIntervalSeconds;
        private String healthCheckPath;
        private Integer healthCheckPort;
        private String healthCheckProtocol;
        private String id;
        private String listenerId;
        private String name;
        private List<GetEndpointGroupsGroupPortOverride> portOverrides;
        private String status;
        private Integer thresholdCount;
        private Integer trafficPercentage;
        public Builder() {}
        public Builder(GetEndpointGroupsGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.endpointConfigurations = defaults.endpointConfigurations;
    	      this.endpointGroupId = defaults.endpointGroupId;
    	      this.endpointGroupIpLists = defaults.endpointGroupIpLists;
    	      this.endpointGroupRegion = defaults.endpointGroupRegion;
    	      this.healthCheckIntervalSeconds = defaults.healthCheckIntervalSeconds;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.healthCheckPort = defaults.healthCheckPort;
    	      this.healthCheckProtocol = defaults.healthCheckProtocol;
    	      this.id = defaults.id;
    	      this.listenerId = defaults.listenerId;
    	      this.name = defaults.name;
    	      this.portOverrides = defaults.portOverrides;
    	      this.status = defaults.status;
    	      this.thresholdCount = defaults.thresholdCount;
    	      this.trafficPercentage = defaults.trafficPercentage;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder endpointConfigurations(List<GetEndpointGroupsGroupEndpointConfiguration> endpointConfigurations) {
            if (endpointConfigurations == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "endpointConfigurations");
            }
            this.endpointConfigurations = endpointConfigurations;
            return this;
        }
        public Builder endpointConfigurations(GetEndpointGroupsGroupEndpointConfiguration... endpointConfigurations) {
            return endpointConfigurations(List.of(endpointConfigurations));
        }
        @CustomType.Setter
        public Builder endpointGroupId(String endpointGroupId) {
            if (endpointGroupId == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "endpointGroupId");
            }
            this.endpointGroupId = endpointGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder endpointGroupIpLists(List<String> endpointGroupIpLists) {
            if (endpointGroupIpLists == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "endpointGroupIpLists");
            }
            this.endpointGroupIpLists = endpointGroupIpLists;
            return this;
        }
        public Builder endpointGroupIpLists(String... endpointGroupIpLists) {
            return endpointGroupIpLists(List.of(endpointGroupIpLists));
        }
        @CustomType.Setter
        public Builder endpointGroupRegion(String endpointGroupRegion) {
            if (endpointGroupRegion == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "endpointGroupRegion");
            }
            this.endpointGroupRegion = endpointGroupRegion;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckIntervalSeconds(Integer healthCheckIntervalSeconds) {
            if (healthCheckIntervalSeconds == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "healthCheckIntervalSeconds");
            }
            this.healthCheckIntervalSeconds = healthCheckIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPath(String healthCheckPath) {
            if (healthCheckPath == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "healthCheckPath");
            }
            this.healthCheckPath = healthCheckPath;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPort(Integer healthCheckPort) {
            if (healthCheckPort == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "healthCheckPort");
            }
            this.healthCheckPort = healthCheckPort;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckProtocol(String healthCheckProtocol) {
            if (healthCheckProtocol == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "healthCheckProtocol");
            }
            this.healthCheckProtocol = healthCheckProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder listenerId(String listenerId) {
            if (listenerId == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "listenerId");
            }
            this.listenerId = listenerId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder portOverrides(List<GetEndpointGroupsGroupPortOverride> portOverrides) {
            if (portOverrides == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "portOverrides");
            }
            this.portOverrides = portOverrides;
            return this;
        }
        public Builder portOverrides(GetEndpointGroupsGroupPortOverride... portOverrides) {
            return portOverrides(List.of(portOverrides));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder thresholdCount(Integer thresholdCount) {
            if (thresholdCount == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "thresholdCount");
            }
            this.thresholdCount = thresholdCount;
            return this;
        }
        @CustomType.Setter
        public Builder trafficPercentage(Integer trafficPercentage) {
            if (trafficPercentage == null) {
              throw new MissingRequiredPropertyException("GetEndpointGroupsGroup", "trafficPercentage");
            }
            this.trafficPercentage = trafficPercentage;
            return this;
        }
        public GetEndpointGroupsGroup build() {
            final var _resultValue = new GetEndpointGroupsGroup();
            _resultValue.description = description;
            _resultValue.endpointConfigurations = endpointConfigurations;
            _resultValue.endpointGroupId = endpointGroupId;
            _resultValue.endpointGroupIpLists = endpointGroupIpLists;
            _resultValue.endpointGroupRegion = endpointGroupRegion;
            _resultValue.healthCheckIntervalSeconds = healthCheckIntervalSeconds;
            _resultValue.healthCheckPath = healthCheckPath;
            _resultValue.healthCheckPort = healthCheckPort;
            _resultValue.healthCheckProtocol = healthCheckProtocol;
            _resultValue.id = id;
            _resultValue.listenerId = listenerId;
            _resultValue.name = name;
            _resultValue.portOverrides = portOverrides;
            _resultValue.status = status;
            _resultValue.thresholdCount = thresholdCount;
            _resultValue.trafficPercentage = trafficPercentage;
            return _resultValue;
        }
    }
}
