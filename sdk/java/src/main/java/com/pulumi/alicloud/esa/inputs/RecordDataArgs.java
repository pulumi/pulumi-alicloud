// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecordDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecordDataArgs Empty = new RecordDataArgs();

    /**
     * The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<Integer> algorithm;

    /**
     * @return The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.
     * 
     */
    public Optional<Output<Integer>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * The public key fingerprint of the record. This parameter is required when you add a SSHFP record.
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return The public key fingerprint of the record. This parameter is required when you add a SSHFP record.
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.
     * 
     */
    @Import(name="flag")
    private @Nullable Output<Integer> flag;

    /**
     * @return The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.
     * 
     */
    public Optional<Output<Integer>> flag() {
        return Optional.ofNullable(this.flag);
    }

    /**
     * The public key identification for the record, specified within the range of 0 to 65,535. This parameter is required when you add a CAA record.
     * 
     */
    @Import(name="keyTag")
    private @Nullable Output<Integer> keyTag;

    /**
     * @return The public key identification for the record, specified within the range of 0 to 65,535. This parameter is required when you add a CAA record.
     * 
     */
    public Optional<Output<Integer>> keyTag() {
        return Optional.ofNullable(this.keyTag);
    }

    /**
     * The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
     * 
     */
    @Import(name="matchingType")
    private @Nullable Output<Integer> matchingType;

    /**
     * @return The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
     * 
     */
    public Optional<Output<Integer>> matchingType() {
        return Optional.ofNullable(this.matchingType);
    }

    /**
     * The port of the record, specified within the range of 0 to 65,535. This parameter is required when you add an SRV record.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port of the record, specified within the range of 0 to 65,535. This parameter is required when you add an SRV record.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The priority of the record, specified within the range of 0 to 65,535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The priority of the record, specified within the range of 0 to 65,535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The type of certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
     * 
     */
    @Import(name="selector")
    private @Nullable Output<Integer> selector;

    /**
     * @return The type of certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
     * 
     */
    public Optional<Output<Integer>> selector() {
        return Optional.ofNullable(this.selector);
    }

    /**
     * The label of the record. The Tag of a CAA record indicate its specific type and usage. This parameter is required when you add a CAA record.
     * 
     */
    @Import(name="tag")
    private @Nullable Output<String> tag;

    /**
     * @return The label of the record. The Tag of a CAA record indicate its specific type and usage. This parameter is required when you add a CAA record.
     * 
     */
    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    /**
     * The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Integer> type;

    /**
     * @return The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.
     * 
     */
    public Optional<Output<Integer>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
     * 
     */
    @Import(name="usage")
    private @Nullable Output<Integer> usage;

    /**
     * @return The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
     * 
     */
    public Optional<Output<Integer>> usage() {
        return Optional.ofNullable(this.usage);
    }

    /**
     * The record value or part of the record content. This parameter is required when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on different types of records:
     * 
     * - **A/AAAA**: the IP address(es). Separate multiple IPs with commas (,). You must have at least one IPv4 address.
     * - `CNAME`: the target domain name.
     * - `NS`: the name servers for the domain name.
     * - `MX`: a valid domain name of the target mail server.
     * - `TXT`: a valid text string.
     * - `CAA`: a valid domain name of the certificate authority.
     * - `SRV`: a valid domain name of the target host.
     * - `URI`: a valid URI string.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The record value or part of the record content. This parameter is required when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on different types of records:
     * 
     * - **A/AAAA**: the IP address(es). Separate multiple IPs with commas (,). You must have at least one IPv4 address.
     * - `CNAME`: the target domain name.
     * - `NS`: the name servers for the domain name.
     * - `MX`: a valid domain name of the target mail server.
     * - `TXT`: a valid text string.
     * - `CAA`: a valid domain name of the certificate authority.
     * - `SRV`: a valid domain name of the target host.
     * - `URI`: a valid URI string.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * The weight of the record, specified within the range of 0 to 65,535. This parameter is required when you add SRV or URI records.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return The weight of the record, specified within the range of 0 to 65,535. This parameter is required when you add SRV or URI records.
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private RecordDataArgs() {}

    private RecordDataArgs(RecordDataArgs $) {
        this.algorithm = $.algorithm;
        this.certificate = $.certificate;
        this.fingerprint = $.fingerprint;
        this.flag = $.flag;
        this.keyTag = $.keyTag;
        this.matchingType = $.matchingType;
        this.port = $.port;
        this.priority = $.priority;
        this.selector = $.selector;
        this.tag = $.tag;
        this.type = $.type;
        this.usage = $.usage;
        this.value = $.value;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecordDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecordDataArgs $;

        public Builder() {
            $ = new RecordDataArgs();
        }

        public Builder(RecordDataArgs defaults) {
            $ = new RecordDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<Integer> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Integer algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param certificate The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param fingerprint The public key fingerprint of the record. This parameter is required when you add a SSHFP record.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint The public key fingerprint of the record. This parameter is required when you add a SSHFP record.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param flag The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.
         * 
         * @return builder
         * 
         */
        public Builder flag(@Nullable Output<Integer> flag) {
            $.flag = flag;
            return this;
        }

        /**
         * @param flag The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.
         * 
         * @return builder
         * 
         */
        public Builder flag(Integer flag) {
            return flag(Output.of(flag));
        }

        /**
         * @param keyTag The public key identification for the record, specified within the range of 0 to 65,535. This parameter is required when you add a CAA record.
         * 
         * @return builder
         * 
         */
        public Builder keyTag(@Nullable Output<Integer> keyTag) {
            $.keyTag = keyTag;
            return this;
        }

        /**
         * @param keyTag The public key identification for the record, specified within the range of 0 to 65,535. This parameter is required when you add a CAA record.
         * 
         * @return builder
         * 
         */
        public Builder keyTag(Integer keyTag) {
            return keyTag(Output.of(keyTag));
        }

        /**
         * @param matchingType The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
         * 
         * @return builder
         * 
         */
        public Builder matchingType(@Nullable Output<Integer> matchingType) {
            $.matchingType = matchingType;
            return this;
        }

        /**
         * @param matchingType The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
         * 
         * @return builder
         * 
         */
        public Builder matchingType(Integer matchingType) {
            return matchingType(Output.of(matchingType));
        }

        /**
         * @param port The port of the record, specified within the range of 0 to 65,535. This parameter is required when you add an SRV record.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port of the record, specified within the range of 0 to 65,535. This parameter is required when you add an SRV record.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param priority The priority of the record, specified within the range of 0 to 65,535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the record, specified within the range of 0 to 65,535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param selector The type of certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
         * 
         * @return builder
         * 
         */
        public Builder selector(@Nullable Output<Integer> selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param selector The type of certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
         * 
         * @return builder
         * 
         */
        public Builder selector(Integer selector) {
            return selector(Output.of(selector));
        }

        /**
         * @param tag The label of the record. The Tag of a CAA record indicate its specific type and usage. This parameter is required when you add a CAA record.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag The label of the record. The Tag of a CAA record indicate its specific type and usage. This parameter is required when you add a CAA record.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        /**
         * @param type The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Integer> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.
         * 
         * @return builder
         * 
         */
        public Builder type(Integer type) {
            return type(Output.of(type));
        }

        /**
         * @param usage The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
         * 
         * @return builder
         * 
         */
        public Builder usage(@Nullable Output<Integer> usage) {
            $.usage = usage;
            return this;
        }

        /**
         * @param usage The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
         * 
         * @return builder
         * 
         */
        public Builder usage(Integer usage) {
            return usage(Output.of(usage));
        }

        /**
         * @param value The record value or part of the record content. This parameter is required when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on different types of records:
         * 
         * - **A/AAAA**: the IP address(es). Separate multiple IPs with commas (,). You must have at least one IPv4 address.
         * - `CNAME`: the target domain name.
         * - `NS`: the name servers for the domain name.
         * - `MX`: a valid domain name of the target mail server.
         * - `TXT`: a valid text string.
         * - `CAA`: a valid domain name of the certificate authority.
         * - `SRV`: a valid domain name of the target host.
         * - `URI`: a valid URI string.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The record value or part of the record content. This parameter is required when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on different types of records:
         * 
         * - **A/AAAA**: the IP address(es). Separate multiple IPs with commas (,). You must have at least one IPv4 address.
         * - `CNAME`: the target domain name.
         * - `NS`: the name servers for the domain name.
         * - `MX`: a valid domain name of the target mail server.
         * - `TXT`: a valid text string.
         * - `CAA`: a valid domain name of the certificate authority.
         * - `SRV`: a valid domain name of the target host.
         * - `URI`: a valid URI string.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param weight The weight of the record, specified within the range of 0 to 65,535. This parameter is required when you add SRV or URI records.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight The weight of the record, specified within the range of 0 to 65,535. This parameter is required when you add SRV or URI records.
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public RecordDataArgs build() {
            return $;
        }
    }

}
