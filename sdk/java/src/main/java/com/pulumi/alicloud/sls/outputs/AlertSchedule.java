// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AlertSchedule {
    /**
     * @return Cron expression, the minimum accuracy is minutes, 24 hours. For example, 0 0/1 * * * means that the check is conducted every 1 hour from 00:00. When type is set to Cron, cronExpression must be set.
     * 
     */
    private @Nullable String cronExpression;
    /**
     * @return Timed task execution delay (unit: s).
     * 
     */
    private @Nullable Integer delay;
    /**
     * @return Fixed interval for scheduling.
     * 
     */
    private @Nullable String interval;
    /**
     * @return Dispatch immediately.
     * 
     */
    private @Nullable Boolean runImmdiately;
    /**
     * @return The time zone where the Cron expression is located. The default value is null, indicating the eighth zone in the east.
     * 
     */
    private @Nullable String timeZone;
    /**
     * @return Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows: Fixedate: checks query and analysis results at regular intervals. Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
     * 
     */
    private @Nullable String type;

    private AlertSchedule() {}
    /**
     * @return Cron expression, the minimum accuracy is minutes, 24 hours. For example, 0 0/1 * * * means that the check is conducted every 1 hour from 00:00. When type is set to Cron, cronExpression must be set.
     * 
     */
    public Optional<String> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }
    /**
     * @return Timed task execution delay (unit: s).
     * 
     */
    public Optional<Integer> delay() {
        return Optional.ofNullable(this.delay);
    }
    /**
     * @return Fixed interval for scheduling.
     * 
     */
    public Optional<String> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return Dispatch immediately.
     * 
     */
    public Optional<Boolean> runImmdiately() {
        return Optional.ofNullable(this.runImmdiately);
    }
    /**
     * @return The time zone where the Cron expression is located. The default value is null, indicating the eighth zone in the east.
     * 
     */
    public Optional<String> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }
    /**
     * @return Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows: Fixedate: checks query and analysis results at regular intervals. Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cronExpression;
        private @Nullable Integer delay;
        private @Nullable String interval;
        private @Nullable Boolean runImmdiately;
        private @Nullable String timeZone;
        private @Nullable String type;
        public Builder() {}
        public Builder(AlertSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cronExpression = defaults.cronExpression;
    	      this.delay = defaults.delay;
    	      this.interval = defaults.interval;
    	      this.runImmdiately = defaults.runImmdiately;
    	      this.timeZone = defaults.timeZone;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder cronExpression(@Nullable String cronExpression) {

            this.cronExpression = cronExpression;
            return this;
        }
        @CustomType.Setter
        public Builder delay(@Nullable Integer delay) {

            this.delay = delay;
            return this;
        }
        @CustomType.Setter
        public Builder interval(@Nullable String interval) {

            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder runImmdiately(@Nullable Boolean runImmdiately) {

            this.runImmdiately = runImmdiately;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(@Nullable String timeZone) {

            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public AlertSchedule build() {
            final var _resultValue = new AlertSchedule();
            _resultValue.cronExpression = cronExpression;
            _resultValue.delay = delay;
            _resultValue.interval = interval;
            _resultValue.runImmdiately = runImmdiately;
            _resultValue.timeZone = timeZone;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
