// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection;

import com.pulumi.alicloud.threatdetection.inputs.HoneypotProbeHoneypotBindListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HoneypotProbeArgs extends com.pulumi.resources.ResourceArgs {

    public static final HoneypotProbeArgs Empty = new HoneypotProbeArgs();

    /**
     * ARP spoofing detection.**true**: Enable **false**: Disabled
     * 
     */
    @Import(name="arp")
    private @Nullable Output<Boolean> arp;

    /**
     * @return ARP spoofing detection.**true**: Enable **false**: Disabled
     * 
     */
    public Optional<Output<Boolean>> arp() {
        return Optional.ofNullable(this.arp);
    }

    /**
     * The ID of the management node.
     * 
     */
    @Import(name="controlNodeId", required=true)
    private Output<String> controlNodeId;

    /**
     * @return The ID of the management node.
     * 
     */
    public Output<String> controlNodeId() {
        return this.controlNodeId;
    }

    /**
     * Probe display name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Probe display name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Configure the service.See the following `Block HoneypotBindList`.
     * 
     */
    @Import(name="honeypotBindLists")
    private @Nullable Output<List<HoneypotProbeHoneypotBindListArgs>> honeypotBindLists;

    /**
     * @return Configure the service.See the following `Block HoneypotBindList`.
     * 
     */
    public Optional<Output<List<HoneypotProbeHoneypotBindListArgs>>> honeypotBindLists() {
        return Optional.ofNullable(this.honeypotBindLists);
    }

    /**
     * Ping scan detection. Value: **true**: Enable **false**: Disabled
     * 
     */
    @Import(name="ping")
    private @Nullable Output<Boolean> ping;

    /**
     * @return Ping scan detection. Value: **true**: Enable **false**: Disabled
     * 
     */
    public Optional<Output<Boolean>> ping() {
        return Optional.ofNullable(this.ping);
    }

    /**
     * Probe type, support `host_probe` and `vpc_black_hole_probe`.
     * 
     */
    @Import(name="probeType", required=true)
    private Output<String> probeType;

    /**
     * @return Probe type, support `host_probe` and `vpc_black_hole_probe`.
     * 
     */
    public Output<String> probeType() {
        return this.probeType;
    }

    /**
     * The version of the probe.
     * 
     */
    @Import(name="probeVersion")
    private @Nullable Output<String> probeVersion;

    /**
     * @return The version of the probe.
     * 
     */
    public Optional<Output<String>> probeVersion() {
        return Optional.ofNullable(this.probeVersion);
    }

    /**
     * The IP address of the proxy.
     * 
     */
    @Import(name="proxyIp")
    private @Nullable Output<String> proxyIp;

    /**
     * @return The IP address of the proxy.
     * 
     */
    public Optional<Output<String>> proxyIp() {
        return Optional.ofNullable(this.proxyIp);
    }

    /**
     * Listen to the IP address list.
     * 
     */
    @Import(name="serviceIpLists")
    private @Nullable Output<List<String>> serviceIpLists;

    /**
     * @return Listen to the IP address list.
     * 
     */
    public Optional<Output<List<String>>> serviceIpLists() {
        return Optional.ofNullable(this.serviceIpLists);
    }

    /**
     * Machine uuid, **probe_type** is `host_probe`. This value cannot be empty.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Machine uuid, **probe_type** is `host_probe`. This value cannot be empty.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * The ID of the VPC. **probe_type** is `vpc_black_hole_probe`. This value cannot be empty.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The ID of the VPC. **probe_type** is `vpc_black_hole_probe`. This value cannot be empty.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private HoneypotProbeArgs() {}

    private HoneypotProbeArgs(HoneypotProbeArgs $) {
        this.arp = $.arp;
        this.controlNodeId = $.controlNodeId;
        this.displayName = $.displayName;
        this.honeypotBindLists = $.honeypotBindLists;
        this.ping = $.ping;
        this.probeType = $.probeType;
        this.probeVersion = $.probeVersion;
        this.proxyIp = $.proxyIp;
        this.serviceIpLists = $.serviceIpLists;
        this.uuid = $.uuid;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HoneypotProbeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HoneypotProbeArgs $;

        public Builder() {
            $ = new HoneypotProbeArgs();
        }

        public Builder(HoneypotProbeArgs defaults) {
            $ = new HoneypotProbeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arp ARP spoofing detection.**true**: Enable **false**: Disabled
         * 
         * @return builder
         * 
         */
        public Builder arp(@Nullable Output<Boolean> arp) {
            $.arp = arp;
            return this;
        }

        /**
         * @param arp ARP spoofing detection.**true**: Enable **false**: Disabled
         * 
         * @return builder
         * 
         */
        public Builder arp(Boolean arp) {
            return arp(Output.of(arp));
        }

        /**
         * @param controlNodeId The ID of the management node.
         * 
         * @return builder
         * 
         */
        public Builder controlNodeId(Output<String> controlNodeId) {
            $.controlNodeId = controlNodeId;
            return this;
        }

        /**
         * @param controlNodeId The ID of the management node.
         * 
         * @return builder
         * 
         */
        public Builder controlNodeId(String controlNodeId) {
            return controlNodeId(Output.of(controlNodeId));
        }

        /**
         * @param displayName Probe display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Probe display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param honeypotBindLists Configure the service.See the following `Block HoneypotBindList`.
         * 
         * @return builder
         * 
         */
        public Builder honeypotBindLists(@Nullable Output<List<HoneypotProbeHoneypotBindListArgs>> honeypotBindLists) {
            $.honeypotBindLists = honeypotBindLists;
            return this;
        }

        /**
         * @param honeypotBindLists Configure the service.See the following `Block HoneypotBindList`.
         * 
         * @return builder
         * 
         */
        public Builder honeypotBindLists(List<HoneypotProbeHoneypotBindListArgs> honeypotBindLists) {
            return honeypotBindLists(Output.of(honeypotBindLists));
        }

        /**
         * @param honeypotBindLists Configure the service.See the following `Block HoneypotBindList`.
         * 
         * @return builder
         * 
         */
        public Builder honeypotBindLists(HoneypotProbeHoneypotBindListArgs... honeypotBindLists) {
            return honeypotBindLists(List.of(honeypotBindLists));
        }

        /**
         * @param ping Ping scan detection. Value: **true**: Enable **false**: Disabled
         * 
         * @return builder
         * 
         */
        public Builder ping(@Nullable Output<Boolean> ping) {
            $.ping = ping;
            return this;
        }

        /**
         * @param ping Ping scan detection. Value: **true**: Enable **false**: Disabled
         * 
         * @return builder
         * 
         */
        public Builder ping(Boolean ping) {
            return ping(Output.of(ping));
        }

        /**
         * @param probeType Probe type, support `host_probe` and `vpc_black_hole_probe`.
         * 
         * @return builder
         * 
         */
        public Builder probeType(Output<String> probeType) {
            $.probeType = probeType;
            return this;
        }

        /**
         * @param probeType Probe type, support `host_probe` and `vpc_black_hole_probe`.
         * 
         * @return builder
         * 
         */
        public Builder probeType(String probeType) {
            return probeType(Output.of(probeType));
        }

        /**
         * @param probeVersion The version of the probe.
         * 
         * @return builder
         * 
         */
        public Builder probeVersion(@Nullable Output<String> probeVersion) {
            $.probeVersion = probeVersion;
            return this;
        }

        /**
         * @param probeVersion The version of the probe.
         * 
         * @return builder
         * 
         */
        public Builder probeVersion(String probeVersion) {
            return probeVersion(Output.of(probeVersion));
        }

        /**
         * @param proxyIp The IP address of the proxy.
         * 
         * @return builder
         * 
         */
        public Builder proxyIp(@Nullable Output<String> proxyIp) {
            $.proxyIp = proxyIp;
            return this;
        }

        /**
         * @param proxyIp The IP address of the proxy.
         * 
         * @return builder
         * 
         */
        public Builder proxyIp(String proxyIp) {
            return proxyIp(Output.of(proxyIp));
        }

        /**
         * @param serviceIpLists Listen to the IP address list.
         * 
         * @return builder
         * 
         */
        public Builder serviceIpLists(@Nullable Output<List<String>> serviceIpLists) {
            $.serviceIpLists = serviceIpLists;
            return this;
        }

        /**
         * @param serviceIpLists Listen to the IP address list.
         * 
         * @return builder
         * 
         */
        public Builder serviceIpLists(List<String> serviceIpLists) {
            return serviceIpLists(Output.of(serviceIpLists));
        }

        /**
         * @param serviceIpLists Listen to the IP address list.
         * 
         * @return builder
         * 
         */
        public Builder serviceIpLists(String... serviceIpLists) {
            return serviceIpLists(List.of(serviceIpLists));
        }

        /**
         * @param uuid Machine uuid, **probe_type** is `host_probe`. This value cannot be empty.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Machine uuid, **probe_type** is `host_probe`. This value cannot be empty.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        /**
         * @param vpcId The ID of the VPC. **probe_type** is `vpc_black_hole_probe`. This value cannot be empty.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC. **probe_type** is `vpc_black_hole_probe`. This value cannot be empty.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public HoneypotProbeArgs build() {
            if ($.controlNodeId == null) {
                throw new MissingRequiredPropertyException("HoneypotProbeArgs", "controlNodeId");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("HoneypotProbeArgs", "displayName");
            }
            if ($.probeType == null) {
                throw new MissingRequiredPropertyException("HoneypotProbeArgs", "probeType");
            }
            return $;
        }
    }

}
