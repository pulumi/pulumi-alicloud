// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DispatchRuleGroupRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DispatchRuleGroupRuleArgs Empty = new DispatchRuleGroupRuleArgs();

    /**
     * The ID of the group rule.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<Integer> groupId;

    /**
     * @return The ID of the group rule.
     * 
     */
    public Optional<Output<Integer>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
     * 
     */
    @Import(name="groupInterval", required=true)
    private Output<Integer> groupInterval;

    /**
     * @return The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
     * 
     */
    public Output<Integer> groupInterval() {
        return this.groupInterval;
    }

    /**
     * The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
     * 
     */
    @Import(name="groupWaitTime", required=true)
    private Output<Integer> groupWaitTime;

    /**
     * @return The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
     * 
     */
    public Output<Integer> groupWaitTime() {
        return this.groupWaitTime;
    }

    /**
     * The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
     * 
     */
    @Import(name="groupingFields", required=true)
    private Output<List<String>> groupingFields;

    /**
     * @return The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
     * 
     */
    public Output<List<String>> groupingFields() {
        return this.groupingFields;
    }

    /**
     * The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. The minimum value is 61. Default to 600.
     * 
     */
    @Import(name="repeatInterval")
    private @Nullable Output<Integer> repeatInterval;

    /**
     * @return The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. The minimum value is 61. Default to 600.
     * 
     */
    public Optional<Output<Integer>> repeatInterval() {
        return Optional.ofNullable(this.repeatInterval);
    }

    private DispatchRuleGroupRuleArgs() {}

    private DispatchRuleGroupRuleArgs(DispatchRuleGroupRuleArgs $) {
        this.groupId = $.groupId;
        this.groupInterval = $.groupInterval;
        this.groupWaitTime = $.groupWaitTime;
        this.groupingFields = $.groupingFields;
        this.repeatInterval = $.repeatInterval;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DispatchRuleGroupRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DispatchRuleGroupRuleArgs $;

        public Builder() {
            $ = new DispatchRuleGroupRuleArgs();
        }

        public Builder(DispatchRuleGroupRuleArgs defaults) {
            $ = new DispatchRuleGroupRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupId The ID of the group rule.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The ID of the group rule.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param groupInterval The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
         * 
         * @return builder
         * 
         */
        public Builder groupInterval(Output<Integer> groupInterval) {
            $.groupInterval = groupInterval;
            return this;
        }

        /**
         * @param groupInterval The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
         * 
         * @return builder
         * 
         */
        public Builder groupInterval(Integer groupInterval) {
            return groupInterval(Output.of(groupInterval));
        }

        /**
         * @param groupWaitTime The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
         * 
         * @return builder
         * 
         */
        public Builder groupWaitTime(Output<Integer> groupWaitTime) {
            $.groupWaitTime = groupWaitTime;
            return this;
        }

        /**
         * @param groupWaitTime The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
         * 
         * @return builder
         * 
         */
        public Builder groupWaitTime(Integer groupWaitTime) {
            return groupWaitTime(Output.of(groupWaitTime));
        }

        /**
         * @param groupingFields The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
         * 
         * @return builder
         * 
         */
        public Builder groupingFields(Output<List<String>> groupingFields) {
            $.groupingFields = groupingFields;
            return this;
        }

        /**
         * @param groupingFields The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
         * 
         * @return builder
         * 
         */
        public Builder groupingFields(List<String> groupingFields) {
            return groupingFields(Output.of(groupingFields));
        }

        /**
         * @param groupingFields The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
         * 
         * @return builder
         * 
         */
        public Builder groupingFields(String... groupingFields) {
            return groupingFields(List.of(groupingFields));
        }

        /**
         * @param repeatInterval The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. The minimum value is 61. Default to 600.
         * 
         * @return builder
         * 
         */
        public Builder repeatInterval(@Nullable Output<Integer> repeatInterval) {
            $.repeatInterval = repeatInterval;
            return this;
        }

        /**
         * @param repeatInterval The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. The minimum value is 61. Default to 600.
         * 
         * @return builder
         * 
         */
        public Builder repeatInterval(Integer repeatInterval) {
            return repeatInterval(Output.of(repeatInterval));
        }

        public DispatchRuleGroupRuleArgs build() {
            if ($.groupInterval == null) {
                throw new MissingRequiredPropertyException("DispatchRuleGroupRuleArgs", "groupInterval");
            }
            if ($.groupWaitTime == null) {
                throw new MissingRequiredPropertyException("DispatchRuleGroupRuleArgs", "groupWaitTime");
            }
            if ($.groupingFields == null) {
                throw new MissingRequiredPropertyException("DispatchRuleGroupRuleArgs", "groupingFields");
            }
            return $;
        }
    }

}
