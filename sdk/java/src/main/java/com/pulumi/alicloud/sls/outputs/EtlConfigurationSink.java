// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class EtlConfigurationSink {
    /**
     * @return Write Result Set.
     * 
     */
    private List<String> datasets;
    /**
     * @return The endpoint of the region where the target Project is located.
     * 
     */
    private String endpoint;
    /**
     * @return Destination Logstore Name.
     * 
     */
    private String logstore;
    /**
     * @return Output Destination Name.
     * 
     */
    private String name;
    /**
     * @return Project Name.
     * 
     */
    private String project;
    /**
     * @return The ARN role that authorizes writing to the target Logstore.
     * 
     */
    private String roleArn;

    private EtlConfigurationSink() {}
    /**
     * @return Write Result Set.
     * 
     */
    public List<String> datasets() {
        return this.datasets;
    }
    /**
     * @return The endpoint of the region where the target Project is located.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return Destination Logstore Name.
     * 
     */
    public String logstore() {
        return this.logstore;
    }
    /**
     * @return Output Destination Name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Project Name.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The ARN role that authorizes writing to the target Logstore.
     * 
     */
    public String roleArn() {
        return this.roleArn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EtlConfigurationSink defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> datasets;
        private String endpoint;
        private String logstore;
        private String name;
        private String project;
        private String roleArn;
        public Builder() {}
        public Builder(EtlConfigurationSink defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasets = defaults.datasets;
    	      this.endpoint = defaults.endpoint;
    	      this.logstore = defaults.logstore;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.roleArn = defaults.roleArn;
        }

        @CustomType.Setter
        public Builder datasets(List<String> datasets) {
            if (datasets == null) {
              throw new MissingRequiredPropertyException("EtlConfigurationSink", "datasets");
            }
            this.datasets = datasets;
            return this;
        }
        public Builder datasets(String... datasets) {
            return datasets(List.of(datasets));
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("EtlConfigurationSink", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder logstore(String logstore) {
            if (logstore == null) {
              throw new MissingRequiredPropertyException("EtlConfigurationSink", "logstore");
            }
            this.logstore = logstore;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("EtlConfigurationSink", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("EtlConfigurationSink", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            if (roleArn == null) {
              throw new MissingRequiredPropertyException("EtlConfigurationSink", "roleArn");
            }
            this.roleArn = roleArn;
            return this;
        }
        public EtlConfigurationSink build() {
            final var _resultValue = new EtlConfigurationSink();
            _resultValue.datasets = datasets;
            _resultValue.endpoint = endpoint;
            _resultValue.logstore = logstore;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.roleArn = roleArn;
            return _resultValue;
        }
    }
}
