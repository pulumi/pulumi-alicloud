// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEnvironmentsEnvironment {
    /**
     * @return The ID of the resource bound to the environment instance.
     * 
     */
    private String bindResourceId;
    /**
     * @return The resource type.
     * 
     */
    private String bindResourceType;
    /**
     * @return The CIDR block that is bound to the VPC.
     * 
     */
    private String bindVpcCidr;
    /**
     * @return The ID of the environment instance.
     * 
     */
    private String environmentId;
    /**
     * @return The name of the environment instance.
     * 
     */
    private String environmentName;
    /**
     * @return The environment type. Valid values: `CS`, `ECS`, `Cloud`.
     * 
     */
    private String environmentType;
    /**
     * @return The unique ID of the Grafana data source.
     * 
     */
    private String grafanaDatasourceUid;
    /**
     * @return The unique ID of the Grafana directory.
     * 
     */
    private String grafanaFolderUid;
    /**
     * @return The ID of the environment instance.
     * 
     */
    private String id;
    /**
     * @return Indicates whether agents or exporters are managed.
     * 
     */
    private String managedType;
    /**
     * @return The ID of the Prometheus instance.
     * 
     */
    private String prometheusInstanceId;
    /**
     * @return The region ID.
     * 
     */
    private String regionId;
    /**
     * @return The ID of the resource group.
     * 
     */
    private String resourceGroupId;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The user ID.
     * 
     */
    private String userId;

    private GetEnvironmentsEnvironment() {}
    /**
     * @return The ID of the resource bound to the environment instance.
     * 
     */
    public String bindResourceId() {
        return this.bindResourceId;
    }
    /**
     * @return The resource type.
     * 
     */
    public String bindResourceType() {
        return this.bindResourceType;
    }
    /**
     * @return The CIDR block that is bound to the VPC.
     * 
     */
    public String bindVpcCidr() {
        return this.bindVpcCidr;
    }
    /**
     * @return The ID of the environment instance.
     * 
     */
    public String environmentId() {
        return this.environmentId;
    }
    /**
     * @return The name of the environment instance.
     * 
     */
    public String environmentName() {
        return this.environmentName;
    }
    /**
     * @return The environment type. Valid values: `CS`, `ECS`, `Cloud`.
     * 
     */
    public String environmentType() {
        return this.environmentType;
    }
    /**
     * @return The unique ID of the Grafana data source.
     * 
     */
    public String grafanaDatasourceUid() {
        return this.grafanaDatasourceUid;
    }
    /**
     * @return The unique ID of the Grafana directory.
     * 
     */
    public String grafanaFolderUid() {
        return this.grafanaFolderUid;
    }
    /**
     * @return The ID of the environment instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether agents or exporters are managed.
     * 
     */
    public String managedType() {
        return this.managedType;
    }
    /**
     * @return The ID of the Prometheus instance.
     * 
     */
    public String prometheusInstanceId() {
        return this.prometheusInstanceId;
    }
    /**
     * @return The region ID.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return The ID of the resource group.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The user ID.
     * 
     */
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentsEnvironment defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bindResourceId;
        private String bindResourceType;
        private String bindVpcCidr;
        private String environmentId;
        private String environmentName;
        private String environmentType;
        private String grafanaDatasourceUid;
        private String grafanaFolderUid;
        private String id;
        private String managedType;
        private String prometheusInstanceId;
        private String regionId;
        private String resourceGroupId;
        private Map<String,String> tags;
        private String userId;
        public Builder() {}
        public Builder(GetEnvironmentsEnvironment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bindResourceId = defaults.bindResourceId;
    	      this.bindResourceType = defaults.bindResourceType;
    	      this.bindVpcCidr = defaults.bindVpcCidr;
    	      this.environmentId = defaults.environmentId;
    	      this.environmentName = defaults.environmentName;
    	      this.environmentType = defaults.environmentType;
    	      this.grafanaDatasourceUid = defaults.grafanaDatasourceUid;
    	      this.grafanaFolderUid = defaults.grafanaFolderUid;
    	      this.id = defaults.id;
    	      this.managedType = defaults.managedType;
    	      this.prometheusInstanceId = defaults.prometheusInstanceId;
    	      this.regionId = defaults.regionId;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.tags = defaults.tags;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder bindResourceId(String bindResourceId) {
            if (bindResourceId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "bindResourceId");
            }
            this.bindResourceId = bindResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder bindResourceType(String bindResourceType) {
            if (bindResourceType == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "bindResourceType");
            }
            this.bindResourceType = bindResourceType;
            return this;
        }
        @CustomType.Setter
        public Builder bindVpcCidr(String bindVpcCidr) {
            if (bindVpcCidr == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "bindVpcCidr");
            }
            this.bindVpcCidr = bindVpcCidr;
            return this;
        }
        @CustomType.Setter
        public Builder environmentId(String environmentId) {
            if (environmentId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "environmentId");
            }
            this.environmentId = environmentId;
            return this;
        }
        @CustomType.Setter
        public Builder environmentName(String environmentName) {
            if (environmentName == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "environmentName");
            }
            this.environmentName = environmentName;
            return this;
        }
        @CustomType.Setter
        public Builder environmentType(String environmentType) {
            if (environmentType == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "environmentType");
            }
            this.environmentType = environmentType;
            return this;
        }
        @CustomType.Setter
        public Builder grafanaDatasourceUid(String grafanaDatasourceUid) {
            if (grafanaDatasourceUid == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "grafanaDatasourceUid");
            }
            this.grafanaDatasourceUid = grafanaDatasourceUid;
            return this;
        }
        @CustomType.Setter
        public Builder grafanaFolderUid(String grafanaFolderUid) {
            if (grafanaFolderUid == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "grafanaFolderUid");
            }
            this.grafanaFolderUid = grafanaFolderUid;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedType(String managedType) {
            if (managedType == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "managedType");
            }
            this.managedType = managedType;
            return this;
        }
        @CustomType.Setter
        public Builder prometheusInstanceId(String prometheusInstanceId) {
            if (prometheusInstanceId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "prometheusInstanceId");
            }
            this.prometheusInstanceId = prometheusInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder regionId(String regionId) {
            if (regionId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "regionId");
            }
            this.regionId = regionId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            if (resourceGroupId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "resourceGroupId");
            }
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentsEnvironment", "userId");
            }
            this.userId = userId;
            return this;
        }
        public GetEnvironmentsEnvironment build() {
            final var _resultValue = new GetEnvironmentsEnvironment();
            _resultValue.bindResourceId = bindResourceId;
            _resultValue.bindResourceType = bindResourceType;
            _resultValue.bindVpcCidr = bindVpcCidr;
            _resultValue.environmentId = environmentId;
            _resultValue.environmentName = environmentName;
            _resultValue.environmentType = environmentType;
            _resultValue.grafanaDatasourceUid = grafanaDatasourceUid;
            _resultValue.grafanaFolderUid = grafanaFolderUid;
            _resultValue.id = id;
            _resultValue.managedType = managedType;
            _resultValue.prometheusInstanceId = prometheusInstanceId;
            _resultValue.regionId = regionId;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.tags = tags;
            _resultValue.userId = userId;
            return _resultValue;
        }
    }
}
