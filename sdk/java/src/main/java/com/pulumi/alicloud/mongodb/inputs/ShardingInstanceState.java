// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mongodb.inputs;

import com.pulumi.alicloud.mongodb.inputs.ShardingInstanceConfigServerListArgs;
import com.pulumi.alicloud.mongodb.inputs.ShardingInstanceMongoListArgs;
import com.pulumi.alicloud.mongodb.inputs.ShardingInstanceShardListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShardingInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final ShardingInstanceState Empty = new ShardingInstanceState();

    /**
     * Password of the root account. It is a string of 6 to 32 characters and is composed of letters, numbers, and underlines.
     * 
     */
    @Import(name="accountPassword")
    private @Nullable Output<String> accountPassword;

    /**
     * @return Password of the root account. It is a string of 6 to 32 characters and is composed of letters, numbers, and underlines.
     * 
     */
    public Optional<Output<String>> accountPassword() {
        return Optional.ofNullable(this.accountPassword);
    }

    /**
     * Auto renew for prepaid. Default value: `false`. Valid values: `true`, `false`.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Auto renew for prepaid. Default value: `false`. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * The frequency at which high-frequency backups are created. Valid values: `-1`, `15`, `30`, `60`, `120`, `180`, `240`, `360`, `480`, `720`.
     * 
     */
    @Import(name="backupInterval")
    private @Nullable Output<String> backupInterval;

    /**
     * @return The frequency at which high-frequency backups are created. Valid values: `-1`, `15`, `30`, `60`, `120`, `180`, `240`, `360`, `480`, `720`.
     * 
     */
    public Optional<Output<String>> backupInterval() {
        return Optional.ofNullable(this.backupInterval);
    }

    /**
     * MongoDB Instance backup period. It is required when `backup_time` was existed. Valid values: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]. Default to [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
     * 
     */
    @Import(name="backupPeriods")
    private @Nullable Output<List<String>> backupPeriods;

    /**
     * @return MongoDB Instance backup period. It is required when `backup_time` was existed. Valid values: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]. Default to [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
     * 
     */
    public Optional<Output<List<String>>> backupPeriods() {
        return Optional.ofNullable(this.backupPeriods);
    }

    /**
     * The backup retention policy configured for the instance. Valid values:
     * 
     */
    @Import(name="backupRetentionPolicyOnClusterDeletion")
    private @Nullable Output<Integer> backupRetentionPolicyOnClusterDeletion;

    /**
     * @return The backup retention policy configured for the instance. Valid values:
     * 
     */
    public Optional<Output<Integer>> backupRetentionPolicyOnClusterDeletion() {
        return Optional.ofNullable(this.backupRetentionPolicyOnClusterDeletion);
    }

    /**
     * Sharding Instance backup time. It is required when `backup_period` was existed. In the format of HH:mmZ- HH:mmZ. Time setting interval is one hour. If not set, the system will return a default, like &#34;23:00Z-24:00Z&#34;.
     * 
     */
    @Import(name="backupTime")
    private @Nullable Output<String> backupTime;

    /**
     * @return Sharding Instance backup time. It is required when `backup_period` was existed. In the format of HH:mmZ- HH:mmZ. Time setting interval is one hour. If not set, the system will return a default, like &#34;23:00Z-24:00Z&#34;.
     * 
     */
    public Optional<Output<String>> backupTime() {
        return Optional.ofNullable(this.backupTime);
    }

    /**
     * The ConfigServer nodes of the instance. See `config_server_list` below.
     * 
     */
    @Import(name="configServerLists")
    private @Nullable Output<List<ShardingInstanceConfigServerListArgs>> configServerLists;

    /**
     * @return The ConfigServer nodes of the instance. See `config_server_list` below.
     * 
     */
    public Optional<Output<List<ShardingInstanceConfigServerListArgs>>> configServerLists() {
        return Optional.ofNullable(this.configServerLists);
    }

    /**
     * Indicates whether release protection is enabled for the instance. Valid values: `true`, `false`.
     * 
     */
    @Import(name="dbInstanceReleaseProtection")
    private @Nullable Output<Boolean> dbInstanceReleaseProtection;

    /**
     * @return Indicates whether release protection is enabled for the instance. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<Boolean>> dbInstanceReleaseProtection() {
        return Optional.ofNullable(this.dbInstanceReleaseProtection);
    }

    /**
     * Database version. Value options can refer to the latest docs [CreateDBInstance](https://www.alibabacloud.com/help/en/doc-detail/61884.htm) `EngineVersion`. **NOTE:** From version 1.225.1, `engine_version` can be modified.
     * 
     */
    @Import(name="engineVersion")
    private @Nullable Output<String> engineVersion;

    /**
     * @return Database version. Value options can refer to the latest docs [CreateDBInstance](https://www.alibabacloud.com/help/en/doc-detail/61884.htm) `EngineVersion`. **NOTE:** From version 1.225.1, `engine_version` can be modified.
     * 
     */
    public Optional<Output<String>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    /**
     * The list of Global Security Group Ids.
     * 
     */
    @Import(name="globalSecurityGroupLists")
    private @Nullable Output<List<String>> globalSecurityGroupLists;

    /**
     * @return The list of Global Security Group Ids.
     * 
     */
    public Optional<Output<List<String>>> globalSecurityGroupLists() {
        return Optional.ofNullable(this.globalSecurityGroupLists);
    }

    /**
     * Configure the zone where the hidden node is located to deploy multiple zones. **NOTE:** This parameter value cannot be the same as `zone_id` and `secondary_zone_id` parameter values.
     * 
     */
    @Import(name="hiddenZoneId")
    private @Nullable Output<String> hiddenZoneId;

    /**
     * @return Configure the zone where the hidden node is located to deploy multiple zones. **NOTE:** This parameter value cannot be the same as `zone_id` and `secondary_zone_id` parameter values.
     * 
     */
    public Optional<Output<String>> hiddenZoneId() {
        return Optional.ofNullable(this.hiddenZoneId);
    }

    /**
     * The billing method of the instance. Default value: `PostPaid`. Valid values: `PrePaid`, `PostPaid`. **NOTE:** It can be modified from `PostPaid` to `PrePaid` after version v1.141.0.
     * 
     */
    @Import(name="instanceChargeType")
    private @Nullable Output<String> instanceChargeType;

    /**
     * @return The billing method of the instance. Default value: `PostPaid`. Valid values: `PrePaid`, `PostPaid`. **NOTE:** It can be modified from `PostPaid` to `PrePaid` after version v1.141.0.
     * 
     */
    public Optional<Output<String>> instanceChargeType() {
        return Optional.ofNullable(this.instanceChargeType);
    }

    /**
     * An KMS encrypts password used to a instance. If the `account_password` is filled in, this field will be ignored.
     * 
     */
    @Import(name="kmsEncryptedPassword")
    private @Nullable Output<String> kmsEncryptedPassword;

    /**
     * @return An KMS encrypts password used to a instance. If the `account_password` is filled in, this field will be ignored.
     * 
     */
    public Optional<Output<String>> kmsEncryptedPassword() {
        return Optional.ofNullable(this.kmsEncryptedPassword);
    }

    /**
     * An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating instance with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
     * 
     */
    @Import(name="kmsEncryptionContext")
    private @Nullable Output<Map<String,String>> kmsEncryptionContext;

    /**
     * @return An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating instance with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
     * 
     */
    public Optional<Output<Map<String,String>>> kmsEncryptionContext() {
        return Optional.ofNullable(this.kmsEncryptionContext);
    }

    /**
     * The Mongo nodes of the instance. The mongo-node count can be purchased is in range of [2, 32]. See `mongo_list` below.
     * 
     */
    @Import(name="mongoLists")
    private @Nullable Output<List<ShardingInstanceMongoListArgs>> mongoLists;

    /**
     * @return The Mongo nodes of the instance. The mongo-node count can be purchased is in range of [2, 32]. See `mongo_list` below.
     * 
     */
    public Optional<Output<List<ShardingInstanceMongoListArgs>>> mongoLists() {
        return Optional.ofNullable(this.mongoLists);
    }

    /**
     * The name of DB instance. It must be 2 to 256 characters in length.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of DB instance. It must be 2 to 256 characters in length.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The network type of the instance. Valid values:`Classic` or `VPC`.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return The network type of the instance. Valid values:`Classic` or `VPC`.
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * The type of configuration changes performed. Default value: `DOWNGRADE`. Valid values:
     * - `UPGRADE`: The specifications are upgraded.
     * - `DOWNGRADE`: The specifications are downgraded.
     *   **NOTE:** `order_type` is only applicable to instances when `instance_charge_type` is `PrePaid`.
     * 
     */
    @Import(name="orderType")
    private @Nullable Output<String> orderType;

    /**
     * @return The type of configuration changes performed. Default value: `DOWNGRADE`. Valid values:
     * - `UPGRADE`: The specifications are upgraded.
     * - `DOWNGRADE`: The specifications are downgraded.
     *   **NOTE:** `order_type` is only applicable to instances when `instance_charge_type` is `PrePaid`.
     * 
     */
    public Optional<Output<String>> orderType() {
        return Optional.ofNullable(this.orderType);
    }

    /**
     * The duration that you will buy DB instance (in month). It is valid when `instance_charge_type` is `PrePaid`. Default value: `1`. Valid values: [1~9], 12, 24, 36.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The duration that you will buy DB instance (in month). It is valid when `instance_charge_type` is `PrePaid`. Default value: `1`. Valid values: [1~9], 12, 24, 36.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The type of the access protocol. Valid values: `mongodb` or `dynamodb`.
     * 
     */
    @Import(name="protocolType")
    private @Nullable Output<String> protocolType;

    /**
     * @return The type of the access protocol. Valid values: `mongodb` or `dynamodb`.
     * 
     */
    public Optional<Output<String>> protocolType() {
        return Optional.ofNullable(this.protocolType);
    }

    /**
     * The provisioned IOPS. Valid values: `0` to `50000`.
     * 
     */
    @Import(name="provisionedIops")
    private @Nullable Output<Integer> provisionedIops;

    /**
     * @return The provisioned IOPS. Valid values: `0` to `50000`.
     * 
     */
    public Optional<Output<Integer>> provisionedIops() {
        return Optional.ofNullable(this.provisionedIops);
    }

    /**
     * The ID of the Resource Group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the Resource Group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * (Available since v1.42.0) Instance data backup retention days.
     * 
     */
    @Import(name="retentionPeriod")
    private @Nullable Output<Integer> retentionPeriod;

    /**
     * @return (Available since v1.42.0) Instance data backup retention days.
     * 
     */
    public Optional<Output<Integer>> retentionPeriod() {
        return Optional.ofNullable(this.retentionPeriod);
    }

    /**
     * Configure the available area where the slave node (Secondary node) is located to realize multi-available area deployment. **NOTE:** This parameter value cannot be the same as `zone_id` and `hidden_zone_id` parameter values.
     * 
     */
    @Import(name="secondaryZoneId")
    private @Nullable Output<String> secondaryZoneId;

    /**
     * @return Configure the available area where the slave node (Secondary node) is located to realize multi-available area deployment. **NOTE:** This parameter value cannot be the same as `zone_id` and `hidden_zone_id` parameter values.
     * 
     */
    public Optional<Output<String>> secondaryZoneId() {
        return Optional.ofNullable(this.secondaryZoneId);
    }

    /**
     * The Security Group ID of ECS.
     * 
     */
    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    /**
     * @return The Security Group ID of ECS.
     * 
     */
    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    /**
     * List of IP addresses allowed to access all databases of an instance. The list contains up to 1,000 IP addresses, separated by commas. Supported formats include 0.0.0.0/0, 10.23.12.24 (IP), and 10.23.12.24/24 (Classless Inter-Domain Routing (CIDR) mode. /24 represents the length of the prefix in an IP address. The range of the prefix length is [1,32]). System default to `[&#34;127.0.0.1&#34;]`.
     * 
     */
    @Import(name="securityIpLists")
    private @Nullable Output<List<String>> securityIpLists;

    /**
     * @return List of IP addresses allowed to access all databases of an instance. The list contains up to 1,000 IP addresses, separated by commas. Supported formats include 0.0.0.0/0, 10.23.12.24 (IP), and 10.23.12.24/24 (Classless Inter-Domain Routing (CIDR) mode. /24 represents the length of the prefix in an IP address. The range of the prefix length is [1,32]). System default to `[&#34;127.0.0.1&#34;]`.
     * 
     */
    public Optional<Output<List<String>>> securityIpLists() {
        return Optional.ofNullable(this.securityIpLists);
    }

    /**
     * The Shard nodes of the instance. The shard-node count can be purchased is in range of [2, 32]. See `shard_list` below.
     * 
     */
    @Import(name="shardLists")
    private @Nullable Output<List<ShardingInstanceShardListArgs>> shardLists;

    /**
     * @return The Shard nodes of the instance. The shard-node count can be purchased is in range of [2, 32]. See `shard_list` below.
     * 
     */
    public Optional<Output<List<ShardingInstanceShardListArgs>>> shardLists() {
        return Optional.ofNullable(this.shardLists);
    }

    /**
     * The snapshot backup type. Default value: `Standard`. Valid values:
     * - `Standard`: Standard backup.
     * - ` Flash  `: Single-digit second backup.
     * 
     */
    @Import(name="snapshotBackupType")
    private @Nullable Output<String> snapshotBackupType;

    /**
     * @return The snapshot backup type. Default value: `Standard`. Valid values:
     * - `Standard`: Standard backup.
     * - ` Flash  `: Single-digit second backup.
     * 
     */
    public Optional<Output<String>> snapshotBackupType() {
        return Optional.ofNullable(this.snapshotBackupType);
    }

    /**
     * The storage engine of the instance. Default value: `WiredTiger`. Valid values: `WiredTiger`, `RocksDB`.
     * 
     */
    @Import(name="storageEngine")
    private @Nullable Output<String> storageEngine;

    /**
     * @return The storage engine of the instance. Default value: `WiredTiger`. Valid values: `WiredTiger`, `RocksDB`.
     * 
     */
    public Optional<Output<String>> storageEngine() {
        return Optional.ofNullable(this.storageEngine);
    }

    /**
     * The storage type of the instance. Valid values: `cloud_essd1`, `cloud_essd2`, `cloud_essd3`, `cloud_auto`, `local_ssd`. **NOTE:** From version 1.229.0, `storage_type` can be modified. However, `storage_type` can only be modified to `cloud_auto`.
     * 
     */
    @Import(name="storageType")
    private @Nullable Output<String> storageType;

    /**
     * @return The storage type of the instance. Valid values: `cloud_essd1`, `cloud_essd2`, `cloud_essd3`, `cloud_auto`, `local_ssd`. **NOTE:** From version 1.229.0, `storage_type` can be modified. However, `storage_type` can only be modified to `cloud_auto`.
     * 
     */
    public Optional<Output<String>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The TDE(Transparent Data Encryption) status. It can be updated from version 1.160.0.
     * 
     */
    @Import(name="tdeStatus")
    private @Nullable Output<String> tdeStatus;

    /**
     * @return The TDE(Transparent Data Encryption) status. It can be updated from version 1.160.0.
     * 
     */
    public Optional<Output<String>> tdeStatus() {
        return Optional.ofNullable(this.tdeStatus);
    }

    /**
     * The ID of the VPC. &gt; **NOTE:** `vpc_id` is valid only when `network_type` is set to `VPC`.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The ID of the VPC. &gt; **NOTE:** `vpc_id` is valid only when `network_type` is set to `VPC`.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The virtual switch ID to launch DB instances in one VPC.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The virtual switch ID to launch DB instances in one VPC.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    /**
     * The Zone to launch the DB instance. MongoDB Sharding Instance does not support multiple-zone.
     * If it is a multi-zone and `vswitch_id` is specified, the vswitch must in one of them.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The Zone to launch the DB instance. MongoDB Sharding Instance does not support multiple-zone.
     * If it is a multi-zone and `vswitch_id` is specified, the vswitch must in one of them.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private ShardingInstanceState() {}

    private ShardingInstanceState(ShardingInstanceState $) {
        this.accountPassword = $.accountPassword;
        this.autoRenew = $.autoRenew;
        this.backupInterval = $.backupInterval;
        this.backupPeriods = $.backupPeriods;
        this.backupRetentionPolicyOnClusterDeletion = $.backupRetentionPolicyOnClusterDeletion;
        this.backupTime = $.backupTime;
        this.configServerLists = $.configServerLists;
        this.dbInstanceReleaseProtection = $.dbInstanceReleaseProtection;
        this.engineVersion = $.engineVersion;
        this.globalSecurityGroupLists = $.globalSecurityGroupLists;
        this.hiddenZoneId = $.hiddenZoneId;
        this.instanceChargeType = $.instanceChargeType;
        this.kmsEncryptedPassword = $.kmsEncryptedPassword;
        this.kmsEncryptionContext = $.kmsEncryptionContext;
        this.mongoLists = $.mongoLists;
        this.name = $.name;
        this.networkType = $.networkType;
        this.orderType = $.orderType;
        this.period = $.period;
        this.protocolType = $.protocolType;
        this.provisionedIops = $.provisionedIops;
        this.resourceGroupId = $.resourceGroupId;
        this.retentionPeriod = $.retentionPeriod;
        this.secondaryZoneId = $.secondaryZoneId;
        this.securityGroupId = $.securityGroupId;
        this.securityIpLists = $.securityIpLists;
        this.shardLists = $.shardLists;
        this.snapshotBackupType = $.snapshotBackupType;
        this.storageEngine = $.storageEngine;
        this.storageType = $.storageType;
        this.tags = $.tags;
        this.tdeStatus = $.tdeStatus;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShardingInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShardingInstanceState $;

        public Builder() {
            $ = new ShardingInstanceState();
        }

        public Builder(ShardingInstanceState defaults) {
            $ = new ShardingInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountPassword Password of the root account. It is a string of 6 to 32 characters and is composed of letters, numbers, and underlines.
         * 
         * @return builder
         * 
         */
        public Builder accountPassword(@Nullable Output<String> accountPassword) {
            $.accountPassword = accountPassword;
            return this;
        }

        /**
         * @param accountPassword Password of the root account. It is a string of 6 to 32 characters and is composed of letters, numbers, and underlines.
         * 
         * @return builder
         * 
         */
        public Builder accountPassword(String accountPassword) {
            return accountPassword(Output.of(accountPassword));
        }

        /**
         * @param autoRenew Auto renew for prepaid. Default value: `false`. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Auto renew for prepaid. Default value: `false`. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param backupInterval The frequency at which high-frequency backups are created. Valid values: `-1`, `15`, `30`, `60`, `120`, `180`, `240`, `360`, `480`, `720`.
         * 
         * @return builder
         * 
         */
        public Builder backupInterval(@Nullable Output<String> backupInterval) {
            $.backupInterval = backupInterval;
            return this;
        }

        /**
         * @param backupInterval The frequency at which high-frequency backups are created. Valid values: `-1`, `15`, `30`, `60`, `120`, `180`, `240`, `360`, `480`, `720`.
         * 
         * @return builder
         * 
         */
        public Builder backupInterval(String backupInterval) {
            return backupInterval(Output.of(backupInterval));
        }

        /**
         * @param backupPeriods MongoDB Instance backup period. It is required when `backup_time` was existed. Valid values: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]. Default to [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
         * 
         * @return builder
         * 
         */
        public Builder backupPeriods(@Nullable Output<List<String>> backupPeriods) {
            $.backupPeriods = backupPeriods;
            return this;
        }

        /**
         * @param backupPeriods MongoDB Instance backup period. It is required when `backup_time` was existed. Valid values: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]. Default to [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
         * 
         * @return builder
         * 
         */
        public Builder backupPeriods(List<String> backupPeriods) {
            return backupPeriods(Output.of(backupPeriods));
        }

        /**
         * @param backupPeriods MongoDB Instance backup period. It is required when `backup_time` was existed. Valid values: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]. Default to [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
         * 
         * @return builder
         * 
         */
        public Builder backupPeriods(String... backupPeriods) {
            return backupPeriods(List.of(backupPeriods));
        }

        /**
         * @param backupRetentionPolicyOnClusterDeletion The backup retention policy configured for the instance. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionPolicyOnClusterDeletion(@Nullable Output<Integer> backupRetentionPolicyOnClusterDeletion) {
            $.backupRetentionPolicyOnClusterDeletion = backupRetentionPolicyOnClusterDeletion;
            return this;
        }

        /**
         * @param backupRetentionPolicyOnClusterDeletion The backup retention policy configured for the instance. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionPolicyOnClusterDeletion(Integer backupRetentionPolicyOnClusterDeletion) {
            return backupRetentionPolicyOnClusterDeletion(Output.of(backupRetentionPolicyOnClusterDeletion));
        }

        /**
         * @param backupTime Sharding Instance backup time. It is required when `backup_period` was existed. In the format of HH:mmZ- HH:mmZ. Time setting interval is one hour. If not set, the system will return a default, like &#34;23:00Z-24:00Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder backupTime(@Nullable Output<String> backupTime) {
            $.backupTime = backupTime;
            return this;
        }

        /**
         * @param backupTime Sharding Instance backup time. It is required when `backup_period` was existed. In the format of HH:mmZ- HH:mmZ. Time setting interval is one hour. If not set, the system will return a default, like &#34;23:00Z-24:00Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder backupTime(String backupTime) {
            return backupTime(Output.of(backupTime));
        }

        /**
         * @param configServerLists The ConfigServer nodes of the instance. See `config_server_list` below.
         * 
         * @return builder
         * 
         */
        public Builder configServerLists(@Nullable Output<List<ShardingInstanceConfigServerListArgs>> configServerLists) {
            $.configServerLists = configServerLists;
            return this;
        }

        /**
         * @param configServerLists The ConfigServer nodes of the instance. See `config_server_list` below.
         * 
         * @return builder
         * 
         */
        public Builder configServerLists(List<ShardingInstanceConfigServerListArgs> configServerLists) {
            return configServerLists(Output.of(configServerLists));
        }

        /**
         * @param configServerLists The ConfigServer nodes of the instance. See `config_server_list` below.
         * 
         * @return builder
         * 
         */
        public Builder configServerLists(ShardingInstanceConfigServerListArgs... configServerLists) {
            return configServerLists(List.of(configServerLists));
        }

        /**
         * @param dbInstanceReleaseProtection Indicates whether release protection is enabled for the instance. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceReleaseProtection(@Nullable Output<Boolean> dbInstanceReleaseProtection) {
            $.dbInstanceReleaseProtection = dbInstanceReleaseProtection;
            return this;
        }

        /**
         * @param dbInstanceReleaseProtection Indicates whether release protection is enabled for the instance. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceReleaseProtection(Boolean dbInstanceReleaseProtection) {
            return dbInstanceReleaseProtection(Output.of(dbInstanceReleaseProtection));
        }

        /**
         * @param engineVersion Database version. Value options can refer to the latest docs [CreateDBInstance](https://www.alibabacloud.com/help/en/doc-detail/61884.htm) `EngineVersion`. **NOTE:** From version 1.225.1, `engine_version` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        /**
         * @param engineVersion Database version. Value options can refer to the latest docs [CreateDBInstance](https://www.alibabacloud.com/help/en/doc-detail/61884.htm) `EngineVersion`. **NOTE:** From version 1.225.1, `engine_version` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        /**
         * @param globalSecurityGroupLists The list of Global Security Group Ids.
         * 
         * @return builder
         * 
         */
        public Builder globalSecurityGroupLists(@Nullable Output<List<String>> globalSecurityGroupLists) {
            $.globalSecurityGroupLists = globalSecurityGroupLists;
            return this;
        }

        /**
         * @param globalSecurityGroupLists The list of Global Security Group Ids.
         * 
         * @return builder
         * 
         */
        public Builder globalSecurityGroupLists(List<String> globalSecurityGroupLists) {
            return globalSecurityGroupLists(Output.of(globalSecurityGroupLists));
        }

        /**
         * @param globalSecurityGroupLists The list of Global Security Group Ids.
         * 
         * @return builder
         * 
         */
        public Builder globalSecurityGroupLists(String... globalSecurityGroupLists) {
            return globalSecurityGroupLists(List.of(globalSecurityGroupLists));
        }

        /**
         * @param hiddenZoneId Configure the zone where the hidden node is located to deploy multiple zones. **NOTE:** This parameter value cannot be the same as `zone_id` and `secondary_zone_id` parameter values.
         * 
         * @return builder
         * 
         */
        public Builder hiddenZoneId(@Nullable Output<String> hiddenZoneId) {
            $.hiddenZoneId = hiddenZoneId;
            return this;
        }

        /**
         * @param hiddenZoneId Configure the zone where the hidden node is located to deploy multiple zones. **NOTE:** This parameter value cannot be the same as `zone_id` and `secondary_zone_id` parameter values.
         * 
         * @return builder
         * 
         */
        public Builder hiddenZoneId(String hiddenZoneId) {
            return hiddenZoneId(Output.of(hiddenZoneId));
        }

        /**
         * @param instanceChargeType The billing method of the instance. Default value: `PostPaid`. Valid values: `PrePaid`, `PostPaid`. **NOTE:** It can be modified from `PostPaid` to `PrePaid` after version v1.141.0.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(@Nullable Output<String> instanceChargeType) {
            $.instanceChargeType = instanceChargeType;
            return this;
        }

        /**
         * @param instanceChargeType The billing method of the instance. Default value: `PostPaid`. Valid values: `PrePaid`, `PostPaid`. **NOTE:** It can be modified from `PostPaid` to `PrePaid` after version v1.141.0.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(String instanceChargeType) {
            return instanceChargeType(Output.of(instanceChargeType));
        }

        /**
         * @param kmsEncryptedPassword An KMS encrypts password used to a instance. If the `account_password` is filled in, this field will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder kmsEncryptedPassword(@Nullable Output<String> kmsEncryptedPassword) {
            $.kmsEncryptedPassword = kmsEncryptedPassword;
            return this;
        }

        /**
         * @param kmsEncryptedPassword An KMS encrypts password used to a instance. If the `account_password` is filled in, this field will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder kmsEncryptedPassword(String kmsEncryptedPassword) {
            return kmsEncryptedPassword(Output.of(kmsEncryptedPassword));
        }

        /**
         * @param kmsEncryptionContext An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating instance with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
         * 
         * @return builder
         * 
         */
        public Builder kmsEncryptionContext(@Nullable Output<Map<String,String>> kmsEncryptionContext) {
            $.kmsEncryptionContext = kmsEncryptionContext;
            return this;
        }

        /**
         * @param kmsEncryptionContext An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating instance with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
         * 
         * @return builder
         * 
         */
        public Builder kmsEncryptionContext(Map<String,String> kmsEncryptionContext) {
            return kmsEncryptionContext(Output.of(kmsEncryptionContext));
        }

        /**
         * @param mongoLists The Mongo nodes of the instance. The mongo-node count can be purchased is in range of [2, 32]. See `mongo_list` below.
         * 
         * @return builder
         * 
         */
        public Builder mongoLists(@Nullable Output<List<ShardingInstanceMongoListArgs>> mongoLists) {
            $.mongoLists = mongoLists;
            return this;
        }

        /**
         * @param mongoLists The Mongo nodes of the instance. The mongo-node count can be purchased is in range of [2, 32]. See `mongo_list` below.
         * 
         * @return builder
         * 
         */
        public Builder mongoLists(List<ShardingInstanceMongoListArgs> mongoLists) {
            return mongoLists(Output.of(mongoLists));
        }

        /**
         * @param mongoLists The Mongo nodes of the instance. The mongo-node count can be purchased is in range of [2, 32]. See `mongo_list` below.
         * 
         * @return builder
         * 
         */
        public Builder mongoLists(ShardingInstanceMongoListArgs... mongoLists) {
            return mongoLists(List.of(mongoLists));
        }

        /**
         * @param name The name of DB instance. It must be 2 to 256 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of DB instance. It must be 2 to 256 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkType The network type of the instance. Valid values:`Classic` or `VPC`.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The network type of the instance. Valid values:`Classic` or `VPC`.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param orderType The type of configuration changes performed. Default value: `DOWNGRADE`. Valid values:
         * - `UPGRADE`: The specifications are upgraded.
         * - `DOWNGRADE`: The specifications are downgraded.
         *   **NOTE:** `order_type` is only applicable to instances when `instance_charge_type` is `PrePaid`.
         * 
         * @return builder
         * 
         */
        public Builder orderType(@Nullable Output<String> orderType) {
            $.orderType = orderType;
            return this;
        }

        /**
         * @param orderType The type of configuration changes performed. Default value: `DOWNGRADE`. Valid values:
         * - `UPGRADE`: The specifications are upgraded.
         * - `DOWNGRADE`: The specifications are downgraded.
         *   **NOTE:** `order_type` is only applicable to instances when `instance_charge_type` is `PrePaid`.
         * 
         * @return builder
         * 
         */
        public Builder orderType(String orderType) {
            return orderType(Output.of(orderType));
        }

        /**
         * @param period The duration that you will buy DB instance (in month). It is valid when `instance_charge_type` is `PrePaid`. Default value: `1`. Valid values: [1~9], 12, 24, 36.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The duration that you will buy DB instance (in month). It is valid when `instance_charge_type` is `PrePaid`. Default value: `1`. Valid values: [1~9], 12, 24, 36.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param protocolType The type of the access protocol. Valid values: `mongodb` or `dynamodb`.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(@Nullable Output<String> protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param protocolType The type of the access protocol. Valid values: `mongodb` or `dynamodb`.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(String protocolType) {
            return protocolType(Output.of(protocolType));
        }

        /**
         * @param provisionedIops The provisioned IOPS. Valid values: `0` to `50000`.
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(@Nullable Output<Integer> provisionedIops) {
            $.provisionedIops = provisionedIops;
            return this;
        }

        /**
         * @param provisionedIops The provisioned IOPS. Valid values: `0` to `50000`.
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(Integer provisionedIops) {
            return provisionedIops(Output.of(provisionedIops));
        }

        /**
         * @param resourceGroupId The ID of the Resource Group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the Resource Group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param retentionPeriod (Available since v1.42.0) Instance data backup retention days.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(@Nullable Output<Integer> retentionPeriod) {
            $.retentionPeriod = retentionPeriod;
            return this;
        }

        /**
         * @param retentionPeriod (Available since v1.42.0) Instance data backup retention days.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(Integer retentionPeriod) {
            return retentionPeriod(Output.of(retentionPeriod));
        }

        /**
         * @param secondaryZoneId Configure the available area where the slave node (Secondary node) is located to realize multi-available area deployment. **NOTE:** This parameter value cannot be the same as `zone_id` and `hidden_zone_id` parameter values.
         * 
         * @return builder
         * 
         */
        public Builder secondaryZoneId(@Nullable Output<String> secondaryZoneId) {
            $.secondaryZoneId = secondaryZoneId;
            return this;
        }

        /**
         * @param secondaryZoneId Configure the available area where the slave node (Secondary node) is located to realize multi-available area deployment. **NOTE:** This parameter value cannot be the same as `zone_id` and `hidden_zone_id` parameter values.
         * 
         * @return builder
         * 
         */
        public Builder secondaryZoneId(String secondaryZoneId) {
            return secondaryZoneId(Output.of(secondaryZoneId));
        }

        /**
         * @param securityGroupId The Security Group ID of ECS.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId The Security Group ID of ECS.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param securityIpLists List of IP addresses allowed to access all databases of an instance. The list contains up to 1,000 IP addresses, separated by commas. Supported formats include 0.0.0.0/0, 10.23.12.24 (IP), and 10.23.12.24/24 (Classless Inter-Domain Routing (CIDR) mode. /24 represents the length of the prefix in an IP address. The range of the prefix length is [1,32]). System default to `[&#34;127.0.0.1&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder securityIpLists(@Nullable Output<List<String>> securityIpLists) {
            $.securityIpLists = securityIpLists;
            return this;
        }

        /**
         * @param securityIpLists List of IP addresses allowed to access all databases of an instance. The list contains up to 1,000 IP addresses, separated by commas. Supported formats include 0.0.0.0/0, 10.23.12.24 (IP), and 10.23.12.24/24 (Classless Inter-Domain Routing (CIDR) mode. /24 represents the length of the prefix in an IP address. The range of the prefix length is [1,32]). System default to `[&#34;127.0.0.1&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder securityIpLists(List<String> securityIpLists) {
            return securityIpLists(Output.of(securityIpLists));
        }

        /**
         * @param securityIpLists List of IP addresses allowed to access all databases of an instance. The list contains up to 1,000 IP addresses, separated by commas. Supported formats include 0.0.0.0/0, 10.23.12.24 (IP), and 10.23.12.24/24 (Classless Inter-Domain Routing (CIDR) mode. /24 represents the length of the prefix in an IP address. The range of the prefix length is [1,32]). System default to `[&#34;127.0.0.1&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder securityIpLists(String... securityIpLists) {
            return securityIpLists(List.of(securityIpLists));
        }

        /**
         * @param shardLists The Shard nodes of the instance. The shard-node count can be purchased is in range of [2, 32]. See `shard_list` below.
         * 
         * @return builder
         * 
         */
        public Builder shardLists(@Nullable Output<List<ShardingInstanceShardListArgs>> shardLists) {
            $.shardLists = shardLists;
            return this;
        }

        /**
         * @param shardLists The Shard nodes of the instance. The shard-node count can be purchased is in range of [2, 32]. See `shard_list` below.
         * 
         * @return builder
         * 
         */
        public Builder shardLists(List<ShardingInstanceShardListArgs> shardLists) {
            return shardLists(Output.of(shardLists));
        }

        /**
         * @param shardLists The Shard nodes of the instance. The shard-node count can be purchased is in range of [2, 32]. See `shard_list` below.
         * 
         * @return builder
         * 
         */
        public Builder shardLists(ShardingInstanceShardListArgs... shardLists) {
            return shardLists(List.of(shardLists));
        }

        /**
         * @param snapshotBackupType The snapshot backup type. Default value: `Standard`. Valid values:
         * - `Standard`: Standard backup.
         * - ` Flash  `: Single-digit second backup.
         * 
         * @return builder
         * 
         */
        public Builder snapshotBackupType(@Nullable Output<String> snapshotBackupType) {
            $.snapshotBackupType = snapshotBackupType;
            return this;
        }

        /**
         * @param snapshotBackupType The snapshot backup type. Default value: `Standard`. Valid values:
         * - `Standard`: Standard backup.
         * - ` Flash  `: Single-digit second backup.
         * 
         * @return builder
         * 
         */
        public Builder snapshotBackupType(String snapshotBackupType) {
            return snapshotBackupType(Output.of(snapshotBackupType));
        }

        /**
         * @param storageEngine The storage engine of the instance. Default value: `WiredTiger`. Valid values: `WiredTiger`, `RocksDB`.
         * 
         * @return builder
         * 
         */
        public Builder storageEngine(@Nullable Output<String> storageEngine) {
            $.storageEngine = storageEngine;
            return this;
        }

        /**
         * @param storageEngine The storage engine of the instance. Default value: `WiredTiger`. Valid values: `WiredTiger`, `RocksDB`.
         * 
         * @return builder
         * 
         */
        public Builder storageEngine(String storageEngine) {
            return storageEngine(Output.of(storageEngine));
        }

        /**
         * @param storageType The storage type of the instance. Valid values: `cloud_essd1`, `cloud_essd2`, `cloud_essd3`, `cloud_auto`, `local_ssd`. **NOTE:** From version 1.229.0, `storage_type` can be modified. However, `storage_type` can only be modified to `cloud_auto`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(@Nullable Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType The storage type of the instance. Valid values: `cloud_essd1`, `cloud_essd2`, `cloud_essd3`, `cloud_auto`, `local_ssd`. **NOTE:** From version 1.229.0, `storage_type` can be modified. However, `storage_type` can only be modified to `cloud_auto`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tdeStatus The TDE(Transparent Data Encryption) status. It can be updated from version 1.160.0.
         * 
         * @return builder
         * 
         */
        public Builder tdeStatus(@Nullable Output<String> tdeStatus) {
            $.tdeStatus = tdeStatus;
            return this;
        }

        /**
         * @param tdeStatus The TDE(Transparent Data Encryption) status. It can be updated from version 1.160.0.
         * 
         * @return builder
         * 
         */
        public Builder tdeStatus(String tdeStatus) {
            return tdeStatus(Output.of(tdeStatus));
        }

        /**
         * @param vpcId The ID of the VPC. &gt; **NOTE:** `vpc_id` is valid only when `network_type` is set to `VPC`.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC. &gt; **NOTE:** `vpc_id` is valid only when `network_type` is set to `VPC`.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The virtual switch ID to launch DB instances in one VPC.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The virtual switch ID to launch DB instances in one VPC.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The Zone to launch the DB instance. MongoDB Sharding Instance does not support multiple-zone.
         * If it is a multi-zone and `vswitch_id` is specified, the vswitch must in one of them.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The Zone to launch the DB instance. MongoDB Sharding Instance does not support multiple-zone.
         * If it is a multi-zone and `vswitch_id` is specified, the vswitch must in one of them.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ShardingInstanceState build() {
            return $;
        }
    }

}
