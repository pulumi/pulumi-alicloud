// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerModificationProtectionConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerModificationProtectionConfigArgs Empty = new LoadBalancerModificationProtectionConfigArgs();

    /**
     * Opening time of the configuration read-only mode.
     * 
     */
    @Import(name="enabledTime")
    private @Nullable Output<String> enabledTime;

    /**
     * @return Opening time of the configuration read-only mode.
     * 
     */
    public Optional<Output<String>> enabledTime() {
        return Optional.ofNullable(this.enabledTime);
    }

    /**
     * The reason why the configuration read-only mode is enabled. The value must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The value must start with a letter.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if the `status` parameter is set to `ConsoleProtection`.
     * 
     */
    @Import(name="reason")
    private @Nullable Output<String> reason;

    /**
     * @return The reason why the configuration read-only mode is enabled. The value must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The value must start with a letter.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if the `status` parameter is set to `ConsoleProtection`.
     * 
     */
    public Optional<Output<String>> reason() {
        return Optional.ofNullable(this.reason);
    }

    /**
     * Specifies whether to enable the configuration read-only mode. Valid values:
     * - `NonProtection`: disables the configuration read-only mode. In this case, you cannot set the `ModificationProtectionReason` parameter. If you specify `ModificationProtectionReason`, the value is cleared.
     * - `ConsoleProtection`: enables the configuration read-only mode. In this case, you can specify `ModificationProtectionReason`.
     * 
     * &gt; **NOTE:**  If you set this parameter to `ConsoleProtection`, you cannot use the NLB console to modify instance configurations. However, you can call API operations to modify instance configurations.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Specifies whether to enable the configuration read-only mode. Valid values:
     * - `NonProtection`: disables the configuration read-only mode. In this case, you cannot set the `ModificationProtectionReason` parameter. If you specify `ModificationProtectionReason`, the value is cleared.
     * - `ConsoleProtection`: enables the configuration read-only mode. In this case, you can specify `ModificationProtectionReason`.
     * 
     * &gt; **NOTE:**  If you set this parameter to `ConsoleProtection`, you cannot use the NLB console to modify instance configurations. However, you can call API operations to modify instance configurations.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private LoadBalancerModificationProtectionConfigArgs() {}

    private LoadBalancerModificationProtectionConfigArgs(LoadBalancerModificationProtectionConfigArgs $) {
        this.enabledTime = $.enabledTime;
        this.reason = $.reason;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerModificationProtectionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerModificationProtectionConfigArgs $;

        public Builder() {
            $ = new LoadBalancerModificationProtectionConfigArgs();
        }

        public Builder(LoadBalancerModificationProtectionConfigArgs defaults) {
            $ = new LoadBalancerModificationProtectionConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabledTime Opening time of the configuration read-only mode.
         * 
         * @return builder
         * 
         */
        public Builder enabledTime(@Nullable Output<String> enabledTime) {
            $.enabledTime = enabledTime;
            return this;
        }

        /**
         * @param enabledTime Opening time of the configuration read-only mode.
         * 
         * @return builder
         * 
         */
        public Builder enabledTime(String enabledTime) {
            return enabledTime(Output.of(enabledTime));
        }

        /**
         * @param reason The reason why the configuration read-only mode is enabled. The value must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The value must start with a letter.
         * 
         * &gt; **NOTE:**   This parameter takes effect only if the `status` parameter is set to `ConsoleProtection`.
         * 
         * @return builder
         * 
         */
        public Builder reason(@Nullable Output<String> reason) {
            $.reason = reason;
            return this;
        }

        /**
         * @param reason The reason why the configuration read-only mode is enabled. The value must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The value must start with a letter.
         * 
         * &gt; **NOTE:**   This parameter takes effect only if the `status` parameter is set to `ConsoleProtection`.
         * 
         * @return builder
         * 
         */
        public Builder reason(String reason) {
            return reason(Output.of(reason));
        }

        /**
         * @param status Specifies whether to enable the configuration read-only mode. Valid values:
         * - `NonProtection`: disables the configuration read-only mode. In this case, you cannot set the `ModificationProtectionReason` parameter. If you specify `ModificationProtectionReason`, the value is cleared.
         * - `ConsoleProtection`: enables the configuration read-only mode. In this case, you can specify `ModificationProtectionReason`.
         * 
         * &gt; **NOTE:**  If you set this parameter to `ConsoleProtection`, you cannot use the NLB console to modify instance configurations. However, you can call API operations to modify instance configurations.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Specifies whether to enable the configuration read-only mode. Valid values:
         * - `NonProtection`: disables the configuration read-only mode. In this case, you cannot set the `ModificationProtectionReason` parameter. If you specify `ModificationProtectionReason`, the value is cleared.
         * - `ConsoleProtection`: enables the configuration read-only mode. In this case, you can specify `ModificationProtectionReason`.
         * 
         * &gt; **NOTE:**  If you set this parameter to `ConsoleProtection`, you cannot use the NLB console to modify instance configurations. However, you can call API operations to modify instance configurations.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public LoadBalancerModificationProtectionConfigArgs build() {
            return $;
        }
    }

}
