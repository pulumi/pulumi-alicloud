// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ens;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskInstanceAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskInstanceAttachmentArgs Empty = new DiskInstanceAttachmentArgs();

    /**
     * Whether the cloud disk to be mounted is released with the instance  Value: true: When the instance is released, the cloud disk is released together with the instance. false: When the instance is released, the cloud disk is retained and is not released together with the instance. Empty means false by default.
     * 
     */
    @Import(name="deleteWithInstance")
    private @Nullable Output<String> deleteWithInstance;

    /**
     * @return Whether the cloud disk to be mounted is released with the instance  Value: true: When the instance is released, the cloud disk is released together with the instance. false: When the instance is released, the cloud disk is retained and is not released together with the instance. Empty means false by default.
     * 
     */
    public Optional<Output<String>> deleteWithInstance() {
        return Optional.ofNullable(this.deleteWithInstance);
    }

    /**
     * The ID of the cloud disk to be mounted. The Cloud Disk (DiskId) and the instance (InstanceId) must be on the same node.
     * 
     */
    @Import(name="diskId", required=true)
    private Output<String> diskId;

    /**
     * @return The ID of the cloud disk to be mounted. The Cloud Disk (DiskId) and the instance (InstanceId) must be on the same node.
     * 
     */
    public Output<String> diskId() {
        return this.diskId;
    }

    /**
     * Instance ID.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return Instance ID.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    private DiskInstanceAttachmentArgs() {}

    private DiskInstanceAttachmentArgs(DiskInstanceAttachmentArgs $) {
        this.deleteWithInstance = $.deleteWithInstance;
        this.diskId = $.diskId;
        this.instanceId = $.instanceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskInstanceAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskInstanceAttachmentArgs $;

        public Builder() {
            $ = new DiskInstanceAttachmentArgs();
        }

        public Builder(DiskInstanceAttachmentArgs defaults) {
            $ = new DiskInstanceAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteWithInstance Whether the cloud disk to be mounted is released with the instance  Value: true: When the instance is released, the cloud disk is released together with the instance. false: When the instance is released, the cloud disk is retained and is not released together with the instance. Empty means false by default.
         * 
         * @return builder
         * 
         */
        public Builder deleteWithInstance(@Nullable Output<String> deleteWithInstance) {
            $.deleteWithInstance = deleteWithInstance;
            return this;
        }

        /**
         * @param deleteWithInstance Whether the cloud disk to be mounted is released with the instance  Value: true: When the instance is released, the cloud disk is released together with the instance. false: When the instance is released, the cloud disk is retained and is not released together with the instance. Empty means false by default.
         * 
         * @return builder
         * 
         */
        public Builder deleteWithInstance(String deleteWithInstance) {
            return deleteWithInstance(Output.of(deleteWithInstance));
        }

        /**
         * @param diskId The ID of the cloud disk to be mounted. The Cloud Disk (DiskId) and the instance (InstanceId) must be on the same node.
         * 
         * @return builder
         * 
         */
        public Builder diskId(Output<String> diskId) {
            $.diskId = diskId;
            return this;
        }

        /**
         * @param diskId The ID of the cloud disk to be mounted. The Cloud Disk (DiskId) and the instance (InstanceId) must be on the same node.
         * 
         * @return builder
         * 
         */
        public Builder diskId(String diskId) {
            return diskId(Output.of(diskId));
        }

        /**
         * @param instanceId Instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId Instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        public DiskInstanceAttachmentArgs build() {
            if ($.diskId == null) {
                throw new MissingRequiredPropertyException("DiskInstanceAttachmentArgs", "diskId");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("DiskInstanceAttachmentArgs", "instanceId");
            }
            return $;
        }
    }

}
