// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientCertificateArgs Empty = new ClientCertificateArgs();

    /**
     * Certificate signing request content.
     * 
     */
    @Import(name="csr")
    private @Nullable Output<String> csr;

    /**
     * @return Certificate signing request content.
     * 
     */
    public Optional<Output<String>> csr() {
        return Optional.ofNullable(this.csr);
    }

    /**
     * The private key algorithm type.
     * 
     */
    @Import(name="pkeyType")
    private @Nullable Output<String> pkeyType;

    /**
     * @return The private key algorithm type.
     * 
     */
    public Optional<Output<String>> pkeyType() {
        return Optional.ofNullable(this.pkeyType);
    }

    /**
     * Site Id
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return Site Id
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    /**
     * The certificate status. Valid values: `revoked`, `active`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The certificate status. Valid values: `revoked`, `active`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Certificate validity period.
     * 
     */
    @Import(name="validityDays", required=true)
    private Output<String> validityDays;

    /**
     * @return Certificate validity period.
     * 
     */
    public Output<String> validityDays() {
        return this.validityDays;
    }

    private ClientCertificateArgs() {}

    private ClientCertificateArgs(ClientCertificateArgs $) {
        this.csr = $.csr;
        this.pkeyType = $.pkeyType;
        this.siteId = $.siteId;
        this.status = $.status;
        this.validityDays = $.validityDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientCertificateArgs $;

        public Builder() {
            $ = new ClientCertificateArgs();
        }

        public Builder(ClientCertificateArgs defaults) {
            $ = new ClientCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param csr Certificate signing request content.
         * 
         * @return builder
         * 
         */
        public Builder csr(@Nullable Output<String> csr) {
            $.csr = csr;
            return this;
        }

        /**
         * @param csr Certificate signing request content.
         * 
         * @return builder
         * 
         */
        public Builder csr(String csr) {
            return csr(Output.of(csr));
        }

        /**
         * @param pkeyType The private key algorithm type.
         * 
         * @return builder
         * 
         */
        public Builder pkeyType(@Nullable Output<String> pkeyType) {
            $.pkeyType = pkeyType;
            return this;
        }

        /**
         * @param pkeyType The private key algorithm type.
         * 
         * @return builder
         * 
         */
        public Builder pkeyType(String pkeyType) {
            return pkeyType(Output.of(pkeyType));
        }

        /**
         * @param siteId Site Id
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId Site Id
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param status The certificate status. Valid values: `revoked`, `active`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The certificate status. Valid values: `revoked`, `active`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param validityDays Certificate validity period.
         * 
         * @return builder
         * 
         */
        public Builder validityDays(Output<String> validityDays) {
            $.validityDays = validityDays;
            return this;
        }

        /**
         * @param validityDays Certificate validity period.
         * 
         * @return builder
         * 
         */
        public Builder validityDays(String validityDays) {
            return validityDays(Output.of(validityDays));
        }

        public ClientCertificateArgs build() {
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("ClientCertificateArgs", "siteId");
            }
            if ($.validityDays == null) {
                throw new MissingRequiredPropertyException("ClientCertificateArgs", "validityDays");
            }
            return $;
        }
    }

}
