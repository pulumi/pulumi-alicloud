// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileSystemSmbAclArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileSystemSmbAclArgs Empty = new FileSystemSmbAclArgs();

    /**
     * Whether to allow anonymous access.
     * - true: Allow anonymous access.
     * - false (default): Anonymous access is not allowed.
     * 
     */
    @Import(name="enableAnonymousAccess")
    private @Nullable Output<Boolean> enableAnonymousAccess;

    /**
     * @return Whether to allow anonymous access.
     * - true: Allow anonymous access.
     * - false (default): Anonymous access is not allowed.
     * 
     */
    public Optional<Output<Boolean>> enableAnonymousAccess() {
        return Optional.ofNullable(this.enableAnonymousAccess);
    }

    /**
     * Whether SMB ACL is enabled
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether SMB ACL is enabled
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Whether transmission encryption is enabled.
     * - true: Enables encryption in transit.
     * - false (default): Transport encryption is not enabled.
     * 
     */
    @Import(name="encryptData")
    private @Nullable Output<Boolean> encryptData;

    /**
     * @return Whether transmission encryption is enabled.
     * - true: Enables encryption in transit.
     * - false (default): Transport encryption is not enabled.
     * 
     */
    public Optional<Output<Boolean>> encryptData() {
        return Optional.ofNullable(this.encryptData);
    }

    /**
     * The user directory home path for each user. The file path format is as follows:
     * - A forward slash (/) or backslash (\) as a separator.
     * - Each paragraph cannot contain &#34;:|? *.
     * - The length of each segment ranges from 0 to 255.
     * - The total length range is 0~32767.
     * 
     * For example, if the user directory is/home, the file system will automatically create A directory of/home/A when user A logs in. Skip if/home/A already exists.
     * 
     * &gt; **NOTE:**  Explain that user A needs to have the permission to create A directory, otherwise the/home/A directory cannot be created.
     * 
     */
    @Import(name="homeDirPath")
    private @Nullable Output<String> homeDirPath;

    /**
     * @return The user directory home path for each user. The file path format is as follows:
     * - A forward slash (/) or backslash (\) as a separator.
     * - Each paragraph cannot contain &#34;:|? *.
     * - The length of each segment ranges from 0 to 255.
     * - The total length range is 0~32767.
     * 
     * For example, if the user directory is/home, the file system will automatically create A directory of/home/A when user A logs in. Skip if/home/A already exists.
     * 
     * &gt; **NOTE:**  Explain that user A needs to have the permission to create A directory, otherwise the/home/A directory cannot be created.
     * 
     */
    public Optional<Output<String>> homeDirPath() {
        return Optional.ofNullable(this.homeDirPath);
    }

    /**
     * Whether to reject non-encrypted clients.
     * - true: Deny non-encrypted clients.
     * - false (default): Non-encrypted clients are not rejected.
     * 
     */
    @Import(name="rejectUnencryptedAccess")
    private @Nullable Output<Boolean> rejectUnencryptedAccess;

    /**
     * @return Whether to reject non-encrypted clients.
     * - true: Deny non-encrypted clients.
     * - false (default): Non-encrypted clients are not rejected.
     * 
     */
    public Optional<Output<Boolean>> rejectUnencryptedAccess() {
        return Optional.ofNullable(this.rejectUnencryptedAccess);
    }

    /**
     * The ID of the Super User. The ID rules are as follows:
     * - Must start with S and no other letters can appear after the S at the beginning.
     * - At least three dashes (-) apart.
     * 
     * Such as S-1-5-22 or S-1-5-22-23.
     * 
     */
    @Import(name="superAdminSid")
    private @Nullable Output<String> superAdminSid;

    /**
     * @return The ID of the Super User. The ID rules are as follows:
     * - Must start with S and no other letters can appear after the S at the beginning.
     * - At least three dashes (-) apart.
     * 
     * Such as S-1-5-22 or S-1-5-22-23.
     * 
     */
    public Optional<Output<String>> superAdminSid() {
        return Optional.ofNullable(this.superAdminSid);
    }

    private FileSystemSmbAclArgs() {}

    private FileSystemSmbAclArgs(FileSystemSmbAclArgs $) {
        this.enableAnonymousAccess = $.enableAnonymousAccess;
        this.enabled = $.enabled;
        this.encryptData = $.encryptData;
        this.homeDirPath = $.homeDirPath;
        this.rejectUnencryptedAccess = $.rejectUnencryptedAccess;
        this.superAdminSid = $.superAdminSid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileSystemSmbAclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileSystemSmbAclArgs $;

        public Builder() {
            $ = new FileSystemSmbAclArgs();
        }

        public Builder(FileSystemSmbAclArgs defaults) {
            $ = new FileSystemSmbAclArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableAnonymousAccess Whether to allow anonymous access.
         * - true: Allow anonymous access.
         * - false (default): Anonymous access is not allowed.
         * 
         * @return builder
         * 
         */
        public Builder enableAnonymousAccess(@Nullable Output<Boolean> enableAnonymousAccess) {
            $.enableAnonymousAccess = enableAnonymousAccess;
            return this;
        }

        /**
         * @param enableAnonymousAccess Whether to allow anonymous access.
         * - true: Allow anonymous access.
         * - false (default): Anonymous access is not allowed.
         * 
         * @return builder
         * 
         */
        public Builder enableAnonymousAccess(Boolean enableAnonymousAccess) {
            return enableAnonymousAccess(Output.of(enableAnonymousAccess));
        }

        /**
         * @param enabled Whether SMB ACL is enabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether SMB ACL is enabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param encryptData Whether transmission encryption is enabled.
         * - true: Enables encryption in transit.
         * - false (default): Transport encryption is not enabled.
         * 
         * @return builder
         * 
         */
        public Builder encryptData(@Nullable Output<Boolean> encryptData) {
            $.encryptData = encryptData;
            return this;
        }

        /**
         * @param encryptData Whether transmission encryption is enabled.
         * - true: Enables encryption in transit.
         * - false (default): Transport encryption is not enabled.
         * 
         * @return builder
         * 
         */
        public Builder encryptData(Boolean encryptData) {
            return encryptData(Output.of(encryptData));
        }

        /**
         * @param homeDirPath The user directory home path for each user. The file path format is as follows:
         * - A forward slash (/) or backslash (\) as a separator.
         * - Each paragraph cannot contain &#34;:|? *.
         * - The length of each segment ranges from 0 to 255.
         * - The total length range is 0~32767.
         * 
         * For example, if the user directory is/home, the file system will automatically create A directory of/home/A when user A logs in. Skip if/home/A already exists.
         * 
         * &gt; **NOTE:**  Explain that user A needs to have the permission to create A directory, otherwise the/home/A directory cannot be created.
         * 
         * @return builder
         * 
         */
        public Builder homeDirPath(@Nullable Output<String> homeDirPath) {
            $.homeDirPath = homeDirPath;
            return this;
        }

        /**
         * @param homeDirPath The user directory home path for each user. The file path format is as follows:
         * - A forward slash (/) or backslash (\) as a separator.
         * - Each paragraph cannot contain &#34;:|? *.
         * - The length of each segment ranges from 0 to 255.
         * - The total length range is 0~32767.
         * 
         * For example, if the user directory is/home, the file system will automatically create A directory of/home/A when user A logs in. Skip if/home/A already exists.
         * 
         * &gt; **NOTE:**  Explain that user A needs to have the permission to create A directory, otherwise the/home/A directory cannot be created.
         * 
         * @return builder
         * 
         */
        public Builder homeDirPath(String homeDirPath) {
            return homeDirPath(Output.of(homeDirPath));
        }

        /**
         * @param rejectUnencryptedAccess Whether to reject non-encrypted clients.
         * - true: Deny non-encrypted clients.
         * - false (default): Non-encrypted clients are not rejected.
         * 
         * @return builder
         * 
         */
        public Builder rejectUnencryptedAccess(@Nullable Output<Boolean> rejectUnencryptedAccess) {
            $.rejectUnencryptedAccess = rejectUnencryptedAccess;
            return this;
        }

        /**
         * @param rejectUnencryptedAccess Whether to reject non-encrypted clients.
         * - true: Deny non-encrypted clients.
         * - false (default): Non-encrypted clients are not rejected.
         * 
         * @return builder
         * 
         */
        public Builder rejectUnencryptedAccess(Boolean rejectUnencryptedAccess) {
            return rejectUnencryptedAccess(Output.of(rejectUnencryptedAccess));
        }

        /**
         * @param superAdminSid The ID of the Super User. The ID rules are as follows:
         * - Must start with S and no other letters can appear after the S at the beginning.
         * - At least three dashes (-) apart.
         * 
         * Such as S-1-5-22 or S-1-5-22-23.
         * 
         * @return builder
         * 
         */
        public Builder superAdminSid(@Nullable Output<String> superAdminSid) {
            $.superAdminSid = superAdminSid;
            return this;
        }

        /**
         * @param superAdminSid The ID of the Super User. The ID rules are as follows:
         * - Must start with S and no other letters can appear after the S at the beginning.
         * - At least three dashes (-) apart.
         * 
         * Such as S-1-5-22 or S-1-5-22-23.
         * 
         * @return builder
         * 
         */
        public Builder superAdminSid(String superAdminSid) {
            return superAdminSid(Output.of(superAdminSid));
        }

        public FileSystemSmbAclArgs build() {
            return $;
        }
    }

}
