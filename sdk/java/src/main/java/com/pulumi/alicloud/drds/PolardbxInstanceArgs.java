// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.drds;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolardbxInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolardbxInstanceArgs Empty = new PolardbxInstanceArgs();

    /**
     * Compute node specifications.
     * 
     */
    @Import(name="cnClass", required=true)
    private Output<String> cnClass;

    /**
     * @return Compute node specifications.
     * 
     */
    public Output<String> cnClass() {
        return this.cnClass;
    }

    /**
     * Number of computing nodes.
     * 
     */
    @Import(name="cnNodeCount", required=true)
    private Output<Integer> cnNodeCount;

    /**
     * @return Number of computing nodes.
     * 
     */
    public Output<Integer> cnNodeCount() {
        return this.cnNodeCount;
    }

    /**
     * Storage node specifications.
     * 
     */
    @Import(name="dnClass", required=true)
    private Output<String> dnClass;

    /**
     * @return Storage node specifications.
     * 
     */
    public Output<String> dnClass() {
        return this.dnClass;
    }

    /**
     * The number of storage nodes.
     * 
     */
    @Import(name="dnNodeCount", required=true)
    private Output<Integer> dnNodeCount;

    /**
     * @return The number of storage nodes.
     * 
     */
    public Output<Integer> dnNodeCount() {
        return this.dnNodeCount;
    }

    /**
     * Primary Availability Zone.
     * 
     */
    @Import(name="primaryZone", required=true)
    private Output<String> primaryZone;

    /**
     * @return Primary Availability Zone.
     * 
     */
    public Output<String> primaryZone() {
        return this.primaryZone;
    }

    /**
     * The resource group ID can be empty. This parameter is not supported for the time being.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The resource group ID can be empty. This parameter is not supported for the time being.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Secondary availability zone.
     * 
     */
    @Import(name="secondaryZone")
    private @Nullable Output<String> secondaryZone;

    /**
     * @return Secondary availability zone.
     * 
     */
    public Optional<Output<String>> secondaryZone() {
        return Optional.ofNullable(this.secondaryZone);
    }

    /**
     * Third Availability Zone.
     * 
     */
    @Import(name="tertiaryZone")
    private @Nullable Output<String> tertiaryZone;

    /**
     * @return Third Availability Zone.
     * 
     */
    public Optional<Output<String>> tertiaryZone() {
        return Optional.ofNullable(this.tertiaryZone);
    }

    /**
     * Topology type:
     * - **3azones**: three available areas;
     * - **1azone**: Single zone.
     * 
     */
    @Import(name="topologyType", required=true)
    private Output<String> topologyType;

    /**
     * @return Topology type:
     * - **3azones**: three available areas;
     * - **1azone**: Single zone.
     * 
     */
    public Output<String> topologyType() {
        return this.topologyType;
    }

    /**
     * The VPC ID.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The VPC ID.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * The ID of the virtual switch.
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return The ID of the virtual switch.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    private PolardbxInstanceArgs() {}

    private PolardbxInstanceArgs(PolardbxInstanceArgs $) {
        this.cnClass = $.cnClass;
        this.cnNodeCount = $.cnNodeCount;
        this.dnClass = $.dnClass;
        this.dnNodeCount = $.dnNodeCount;
        this.primaryZone = $.primaryZone;
        this.resourceGroupId = $.resourceGroupId;
        this.secondaryZone = $.secondaryZone;
        this.tertiaryZone = $.tertiaryZone;
        this.topologyType = $.topologyType;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolardbxInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolardbxInstanceArgs $;

        public Builder() {
            $ = new PolardbxInstanceArgs();
        }

        public Builder(PolardbxInstanceArgs defaults) {
            $ = new PolardbxInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cnClass Compute node specifications.
         * 
         * @return builder
         * 
         */
        public Builder cnClass(Output<String> cnClass) {
            $.cnClass = cnClass;
            return this;
        }

        /**
         * @param cnClass Compute node specifications.
         * 
         * @return builder
         * 
         */
        public Builder cnClass(String cnClass) {
            return cnClass(Output.of(cnClass));
        }

        /**
         * @param cnNodeCount Number of computing nodes.
         * 
         * @return builder
         * 
         */
        public Builder cnNodeCount(Output<Integer> cnNodeCount) {
            $.cnNodeCount = cnNodeCount;
            return this;
        }

        /**
         * @param cnNodeCount Number of computing nodes.
         * 
         * @return builder
         * 
         */
        public Builder cnNodeCount(Integer cnNodeCount) {
            return cnNodeCount(Output.of(cnNodeCount));
        }

        /**
         * @param dnClass Storage node specifications.
         * 
         * @return builder
         * 
         */
        public Builder dnClass(Output<String> dnClass) {
            $.dnClass = dnClass;
            return this;
        }

        /**
         * @param dnClass Storage node specifications.
         * 
         * @return builder
         * 
         */
        public Builder dnClass(String dnClass) {
            return dnClass(Output.of(dnClass));
        }

        /**
         * @param dnNodeCount The number of storage nodes.
         * 
         * @return builder
         * 
         */
        public Builder dnNodeCount(Output<Integer> dnNodeCount) {
            $.dnNodeCount = dnNodeCount;
            return this;
        }

        /**
         * @param dnNodeCount The number of storage nodes.
         * 
         * @return builder
         * 
         */
        public Builder dnNodeCount(Integer dnNodeCount) {
            return dnNodeCount(Output.of(dnNodeCount));
        }

        /**
         * @param primaryZone Primary Availability Zone.
         * 
         * @return builder
         * 
         */
        public Builder primaryZone(Output<String> primaryZone) {
            $.primaryZone = primaryZone;
            return this;
        }

        /**
         * @param primaryZone Primary Availability Zone.
         * 
         * @return builder
         * 
         */
        public Builder primaryZone(String primaryZone) {
            return primaryZone(Output.of(primaryZone));
        }

        /**
         * @param resourceGroupId The resource group ID can be empty. This parameter is not supported for the time being.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The resource group ID can be empty. This parameter is not supported for the time being.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param secondaryZone Secondary availability zone.
         * 
         * @return builder
         * 
         */
        public Builder secondaryZone(@Nullable Output<String> secondaryZone) {
            $.secondaryZone = secondaryZone;
            return this;
        }

        /**
         * @param secondaryZone Secondary availability zone.
         * 
         * @return builder
         * 
         */
        public Builder secondaryZone(String secondaryZone) {
            return secondaryZone(Output.of(secondaryZone));
        }

        /**
         * @param tertiaryZone Third Availability Zone.
         * 
         * @return builder
         * 
         */
        public Builder tertiaryZone(@Nullable Output<String> tertiaryZone) {
            $.tertiaryZone = tertiaryZone;
            return this;
        }

        /**
         * @param tertiaryZone Third Availability Zone.
         * 
         * @return builder
         * 
         */
        public Builder tertiaryZone(String tertiaryZone) {
            return tertiaryZone(Output.of(tertiaryZone));
        }

        /**
         * @param topologyType Topology type:
         * - **3azones**: three available areas;
         * - **1azone**: Single zone.
         * 
         * @return builder
         * 
         */
        public Builder topologyType(Output<String> topologyType) {
            $.topologyType = topologyType;
            return this;
        }

        /**
         * @param topologyType Topology type:
         * - **3azones**: three available areas;
         * - **1azone**: Single zone.
         * 
         * @return builder
         * 
         */
        public Builder topologyType(String topologyType) {
            return topologyType(Output.of(topologyType));
        }

        /**
         * @param vpcId The VPC ID.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The VPC ID.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of the virtual switch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the virtual switch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public PolardbxInstanceArgs build() {
            if ($.cnClass == null) {
                throw new MissingRequiredPropertyException("PolardbxInstanceArgs", "cnClass");
            }
            if ($.cnNodeCount == null) {
                throw new MissingRequiredPropertyException("PolardbxInstanceArgs", "cnNodeCount");
            }
            if ($.dnClass == null) {
                throw new MissingRequiredPropertyException("PolardbxInstanceArgs", "dnClass");
            }
            if ($.dnNodeCount == null) {
                throw new MissingRequiredPropertyException("PolardbxInstanceArgs", "dnNodeCount");
            }
            if ($.primaryZone == null) {
                throw new MissingRequiredPropertyException("PolardbxInstanceArgs", "primaryZone");
            }
            if ($.topologyType == null) {
                throw new MissingRequiredPropertyException("PolardbxInstanceArgs", "topologyType");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("PolardbxInstanceArgs", "vpcId");
            }
            if ($.vswitchId == null) {
                throw new MissingRequiredPropertyException("PolardbxInstanceArgs", "vswitchId");
            }
            return $;
        }
    }

}
