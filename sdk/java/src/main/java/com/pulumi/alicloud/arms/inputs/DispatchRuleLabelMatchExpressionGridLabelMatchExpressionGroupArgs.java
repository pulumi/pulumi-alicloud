// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.inputs;

import com.pulumi.alicloud.arms.inputs.DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;


public final class DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs Empty = new DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs();

    @Import(name="labelMatchExpressions", required=true)
    private Output<List<DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs>> labelMatchExpressions;

    public Output<List<DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs>> labelMatchExpressions() {
        return this.labelMatchExpressions;
    }

    private DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs() {}

    private DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs $) {
        this.labelMatchExpressions = $.labelMatchExpressions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs $;

        public Builder() {
            $ = new DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs();
        }

        public Builder(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs defaults) {
            $ = new DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs(Objects.requireNonNull(defaults));
        }

        public Builder labelMatchExpressions(Output<List<DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs>> labelMatchExpressions) {
            $.labelMatchExpressions = labelMatchExpressions;
            return this;
        }

        public Builder labelMatchExpressions(List<DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs> labelMatchExpressions) {
            return labelMatchExpressions(Output.of(labelMatchExpressions));
        }

        public Builder labelMatchExpressions(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs... labelMatchExpressions) {
            return labelMatchExpressions(List.of(labelMatchExpressions));
        }

        public DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs build() {
            if ($.labelMatchExpressions == null) {
                throw new MissingRequiredPropertyException("DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs", "labelMatchExpressions");
            }
            return $;
        }
    }

}
