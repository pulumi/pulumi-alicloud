// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.inputs;

import com.pulumi.alicloud.alb.inputs.RuleRuleConditionCookieConfigArgs;
import com.pulumi.alicloud.alb.inputs.RuleRuleConditionHeaderConfigArgs;
import com.pulumi.alicloud.alb.inputs.RuleRuleConditionHostConfigArgs;
import com.pulumi.alicloud.alb.inputs.RuleRuleConditionMethodConfigArgs;
import com.pulumi.alicloud.alb.inputs.RuleRuleConditionPathConfigArgs;
import com.pulumi.alicloud.alb.inputs.RuleRuleConditionQueryStringConfigArgs;
import com.pulumi.alicloud.alb.inputs.RuleRuleConditionResponseHeaderConfigArgs;
import com.pulumi.alicloud.alb.inputs.RuleRuleConditionResponseStatusCodeConfigArgs;
import com.pulumi.alicloud.alb.inputs.RuleRuleConditionSourceIpConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleRuleConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleRuleConditionArgs Empty = new RuleRuleConditionArgs();

    /**
     * The configuration of the cookie. See See `cookie_config` below.
     * 
     */
    @Import(name="cookieConfig")
    private @Nullable Output<RuleRuleConditionCookieConfigArgs> cookieConfig;

    /**
     * @return The configuration of the cookie. See See `cookie_config` below.
     * 
     */
    public Optional<Output<RuleRuleConditionCookieConfigArgs>> cookieConfig() {
        return Optional.ofNullable(this.cookieConfig);
    }

    /**
     * The configuration of the header field. See `header_config` below.
     * 
     */
    @Import(name="headerConfig")
    private @Nullable Output<RuleRuleConditionHeaderConfigArgs> headerConfig;

    /**
     * @return The configuration of the header field. See `header_config` below.
     * 
     */
    public Optional<Output<RuleRuleConditionHeaderConfigArgs>> headerConfig() {
        return Optional.ofNullable(this.headerConfig);
    }

    /**
     * The configuration of the host field. See `host_config` below.
     * 
     */
    @Import(name="hostConfig")
    private @Nullable Output<RuleRuleConditionHostConfigArgs> hostConfig;

    /**
     * @return The configuration of the host field. See `host_config` below.
     * 
     */
    public Optional<Output<RuleRuleConditionHostConfigArgs>> hostConfig() {
        return Optional.ofNullable(this.hostConfig);
    }

    /**
     * The configuration of the request method. See `method_config` below.
     * 
     */
    @Import(name="methodConfig")
    private @Nullable Output<RuleRuleConditionMethodConfigArgs> methodConfig;

    /**
     * @return The configuration of the request method. See `method_config` below.
     * 
     */
    public Optional<Output<RuleRuleConditionMethodConfigArgs>> methodConfig() {
        return Optional.ofNullable(this.methodConfig);
    }

    /**
     * The configuration of the path for the request to be forwarded. See `path_config` below.
     * 
     */
    @Import(name="pathConfig")
    private @Nullable Output<RuleRuleConditionPathConfigArgs> pathConfig;

    /**
     * @return The configuration of the path for the request to be forwarded. See `path_config` below.
     * 
     */
    public Optional<Output<RuleRuleConditionPathConfigArgs>> pathConfig() {
        return Optional.ofNullable(this.pathConfig);
    }

    /**
     * The configuration of the query string. See `query_string_config` below.
     * 
     */
    @Import(name="queryStringConfig")
    private @Nullable Output<RuleRuleConditionQueryStringConfigArgs> queryStringConfig;

    /**
     * @return The configuration of the query string. See `query_string_config` below.
     * 
     */
    public Optional<Output<RuleRuleConditionQueryStringConfigArgs>> queryStringConfig() {
        return Optional.ofNullable(this.queryStringConfig);
    }

    /**
     * The configuration of the header field. See `response_header_config` below.
     * 
     */
    @Import(name="responseHeaderConfig")
    private @Nullable Output<RuleRuleConditionResponseHeaderConfigArgs> responseHeaderConfig;

    /**
     * @return The configuration of the header field. See `response_header_config` below.
     * 
     */
    public Optional<Output<RuleRuleConditionResponseHeaderConfigArgs>> responseHeaderConfig() {
        return Optional.ofNullable(this.responseHeaderConfig);
    }

    /**
     * The configuration of the header field. See `response_status_code_config` below.
     * 
     */
    @Import(name="responseStatusCodeConfig")
    private @Nullable Output<RuleRuleConditionResponseStatusCodeConfigArgs> responseStatusCodeConfig;

    /**
     * @return The configuration of the header field. See `response_status_code_config` below.
     * 
     */
    public Optional<Output<RuleRuleConditionResponseStatusCodeConfigArgs>> responseStatusCodeConfig() {
        return Optional.ofNullable(this.responseStatusCodeConfig);
    }

    /**
     * The Based on source IP traffic matching. Required and valid when Type is SourceIP. See `source_ip_config` below.
     * 
     */
    @Import(name="sourceIpConfig")
    private @Nullable Output<RuleRuleConditionSourceIpConfigArgs> sourceIpConfig;

    /**
     * @return The Based on source IP traffic matching. Required and valid when Type is SourceIP. See `source_ip_config` below.
     * 
     */
    public Optional<Output<RuleRuleConditionSourceIpConfigArgs>> sourceIpConfig() {
        return Optional.ofNullable(this.sourceIpConfig);
    }

    /**
     * The type of the forwarding rule. Valid values:
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the forwarding rule. Valid values:
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private RuleRuleConditionArgs() {}

    private RuleRuleConditionArgs(RuleRuleConditionArgs $) {
        this.cookieConfig = $.cookieConfig;
        this.headerConfig = $.headerConfig;
        this.hostConfig = $.hostConfig;
        this.methodConfig = $.methodConfig;
        this.pathConfig = $.pathConfig;
        this.queryStringConfig = $.queryStringConfig;
        this.responseHeaderConfig = $.responseHeaderConfig;
        this.responseStatusCodeConfig = $.responseStatusCodeConfig;
        this.sourceIpConfig = $.sourceIpConfig;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleRuleConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleRuleConditionArgs $;

        public Builder() {
            $ = new RuleRuleConditionArgs();
        }

        public Builder(RuleRuleConditionArgs defaults) {
            $ = new RuleRuleConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cookieConfig The configuration of the cookie. See See `cookie_config` below.
         * 
         * @return builder
         * 
         */
        public Builder cookieConfig(@Nullable Output<RuleRuleConditionCookieConfigArgs> cookieConfig) {
            $.cookieConfig = cookieConfig;
            return this;
        }

        /**
         * @param cookieConfig The configuration of the cookie. See See `cookie_config` below.
         * 
         * @return builder
         * 
         */
        public Builder cookieConfig(RuleRuleConditionCookieConfigArgs cookieConfig) {
            return cookieConfig(Output.of(cookieConfig));
        }

        /**
         * @param headerConfig The configuration of the header field. See `header_config` below.
         * 
         * @return builder
         * 
         */
        public Builder headerConfig(@Nullable Output<RuleRuleConditionHeaderConfigArgs> headerConfig) {
            $.headerConfig = headerConfig;
            return this;
        }

        /**
         * @param headerConfig The configuration of the header field. See `header_config` below.
         * 
         * @return builder
         * 
         */
        public Builder headerConfig(RuleRuleConditionHeaderConfigArgs headerConfig) {
            return headerConfig(Output.of(headerConfig));
        }

        /**
         * @param hostConfig The configuration of the host field. See `host_config` below.
         * 
         * @return builder
         * 
         */
        public Builder hostConfig(@Nullable Output<RuleRuleConditionHostConfigArgs> hostConfig) {
            $.hostConfig = hostConfig;
            return this;
        }

        /**
         * @param hostConfig The configuration of the host field. See `host_config` below.
         * 
         * @return builder
         * 
         */
        public Builder hostConfig(RuleRuleConditionHostConfigArgs hostConfig) {
            return hostConfig(Output.of(hostConfig));
        }

        /**
         * @param methodConfig The configuration of the request method. See `method_config` below.
         * 
         * @return builder
         * 
         */
        public Builder methodConfig(@Nullable Output<RuleRuleConditionMethodConfigArgs> methodConfig) {
            $.methodConfig = methodConfig;
            return this;
        }

        /**
         * @param methodConfig The configuration of the request method. See `method_config` below.
         * 
         * @return builder
         * 
         */
        public Builder methodConfig(RuleRuleConditionMethodConfigArgs methodConfig) {
            return methodConfig(Output.of(methodConfig));
        }

        /**
         * @param pathConfig The configuration of the path for the request to be forwarded. See `path_config` below.
         * 
         * @return builder
         * 
         */
        public Builder pathConfig(@Nullable Output<RuleRuleConditionPathConfigArgs> pathConfig) {
            $.pathConfig = pathConfig;
            return this;
        }

        /**
         * @param pathConfig The configuration of the path for the request to be forwarded. See `path_config` below.
         * 
         * @return builder
         * 
         */
        public Builder pathConfig(RuleRuleConditionPathConfigArgs pathConfig) {
            return pathConfig(Output.of(pathConfig));
        }

        /**
         * @param queryStringConfig The configuration of the query string. See `query_string_config` below.
         * 
         * @return builder
         * 
         */
        public Builder queryStringConfig(@Nullable Output<RuleRuleConditionQueryStringConfigArgs> queryStringConfig) {
            $.queryStringConfig = queryStringConfig;
            return this;
        }

        /**
         * @param queryStringConfig The configuration of the query string. See `query_string_config` below.
         * 
         * @return builder
         * 
         */
        public Builder queryStringConfig(RuleRuleConditionQueryStringConfigArgs queryStringConfig) {
            return queryStringConfig(Output.of(queryStringConfig));
        }

        /**
         * @param responseHeaderConfig The configuration of the header field. See `response_header_config` below.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaderConfig(@Nullable Output<RuleRuleConditionResponseHeaderConfigArgs> responseHeaderConfig) {
            $.responseHeaderConfig = responseHeaderConfig;
            return this;
        }

        /**
         * @param responseHeaderConfig The configuration of the header field. See `response_header_config` below.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaderConfig(RuleRuleConditionResponseHeaderConfigArgs responseHeaderConfig) {
            return responseHeaderConfig(Output.of(responseHeaderConfig));
        }

        /**
         * @param responseStatusCodeConfig The configuration of the header field. See `response_status_code_config` below.
         * 
         * @return builder
         * 
         */
        public Builder responseStatusCodeConfig(@Nullable Output<RuleRuleConditionResponseStatusCodeConfigArgs> responseStatusCodeConfig) {
            $.responseStatusCodeConfig = responseStatusCodeConfig;
            return this;
        }

        /**
         * @param responseStatusCodeConfig The configuration of the header field. See `response_status_code_config` below.
         * 
         * @return builder
         * 
         */
        public Builder responseStatusCodeConfig(RuleRuleConditionResponseStatusCodeConfigArgs responseStatusCodeConfig) {
            return responseStatusCodeConfig(Output.of(responseStatusCodeConfig));
        }

        /**
         * @param sourceIpConfig The Based on source IP traffic matching. Required and valid when Type is SourceIP. See `source_ip_config` below.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpConfig(@Nullable Output<RuleRuleConditionSourceIpConfigArgs> sourceIpConfig) {
            $.sourceIpConfig = sourceIpConfig;
            return this;
        }

        /**
         * @param sourceIpConfig The Based on source IP traffic matching. Required and valid when Type is SourceIP. See `source_ip_config` below.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpConfig(RuleRuleConditionSourceIpConfigArgs sourceIpConfig) {
            return sourceIpConfig(Output.of(sourceIpConfig));
        }

        /**
         * @param type The type of the forwarding rule. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the forwarding rule. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RuleRuleConditionArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("RuleRuleConditionArgs", "type");
            }
            return $;
        }
    }

}
