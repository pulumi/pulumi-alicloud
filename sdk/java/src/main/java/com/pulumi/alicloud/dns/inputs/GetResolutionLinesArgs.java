// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetResolutionLinesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetResolutionLinesArgs Empty = new GetResolutionLinesArgs();

    /**
     * Domain Name.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return Domain Name.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * language.
     * 
     */
    @Import(name="lang")
    private @Nullable Output<String> lang;

    /**
     * @return language.
     * 
     */
    public Optional<Output<String>> lang() {
        return Optional.ofNullable(this.lang);
    }

    /**
     * A list of lines codes.
     * 
     */
    @Import(name="lineCodes")
    private @Nullable Output<List<String>> lineCodes;

    /**
     * @return A list of lines codes.
     * 
     */
    public Optional<Output<List<String>>> lineCodes() {
        return Optional.ofNullable(this.lineCodes);
    }

    /**
     * A list of line display names.
     * 
     */
    @Import(name="lineDisplayNames")
    private @Nullable Output<List<String>> lineDisplayNames;

    /**
     * @return A list of line display names.
     * 
     */
    public Optional<Output<List<String>>> lineDisplayNames() {
        return Optional.ofNullable(this.lineDisplayNames);
    }

    @Import(name="lineNames")
    private @Nullable Output<List<String>> lineNames;

    public Optional<Output<List<String>>> lineNames() {
        return Optional.ofNullable(this.lineNames);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The ip of user client.
     * 
     */
    @Import(name="userClientIp")
    private @Nullable Output<String> userClientIp;

    /**
     * @return The ip of user client.
     * 
     */
    public Optional<Output<String>> userClientIp() {
        return Optional.ofNullable(this.userClientIp);
    }

    private GetResolutionLinesArgs() {}

    private GetResolutionLinesArgs(GetResolutionLinesArgs $) {
        this.domainName = $.domainName;
        this.lang = $.lang;
        this.lineCodes = $.lineCodes;
        this.lineDisplayNames = $.lineDisplayNames;
        this.lineNames = $.lineNames;
        this.outputFile = $.outputFile;
        this.userClientIp = $.userClientIp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetResolutionLinesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetResolutionLinesArgs $;

        public Builder() {
            $ = new GetResolutionLinesArgs();
        }

        public Builder(GetResolutionLinesArgs defaults) {
            $ = new GetResolutionLinesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName Domain Name.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Domain Name.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param lang language.
         * 
         * @return builder
         * 
         */
        public Builder lang(@Nullable Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang language.
         * 
         * @return builder
         * 
         */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param lineCodes A list of lines codes.
         * 
         * @return builder
         * 
         */
        public Builder lineCodes(@Nullable Output<List<String>> lineCodes) {
            $.lineCodes = lineCodes;
            return this;
        }

        /**
         * @param lineCodes A list of lines codes.
         * 
         * @return builder
         * 
         */
        public Builder lineCodes(List<String> lineCodes) {
            return lineCodes(Output.of(lineCodes));
        }

        /**
         * @param lineCodes A list of lines codes.
         * 
         * @return builder
         * 
         */
        public Builder lineCodes(String... lineCodes) {
            return lineCodes(List.of(lineCodes));
        }

        /**
         * @param lineDisplayNames A list of line display names.
         * 
         * @return builder
         * 
         */
        public Builder lineDisplayNames(@Nullable Output<List<String>> lineDisplayNames) {
            $.lineDisplayNames = lineDisplayNames;
            return this;
        }

        /**
         * @param lineDisplayNames A list of line display names.
         * 
         * @return builder
         * 
         */
        public Builder lineDisplayNames(List<String> lineDisplayNames) {
            return lineDisplayNames(Output.of(lineDisplayNames));
        }

        /**
         * @param lineDisplayNames A list of line display names.
         * 
         * @return builder
         * 
         */
        public Builder lineDisplayNames(String... lineDisplayNames) {
            return lineDisplayNames(List.of(lineDisplayNames));
        }

        public Builder lineNames(@Nullable Output<List<String>> lineNames) {
            $.lineNames = lineNames;
            return this;
        }

        public Builder lineNames(List<String> lineNames) {
            return lineNames(Output.of(lineNames));
        }

        public Builder lineNames(String... lineNames) {
            return lineNames(List.of(lineNames));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param userClientIp The ip of user client.
         * 
         * @return builder
         * 
         */
        public Builder userClientIp(@Nullable Output<String> userClientIp) {
            $.userClientIp = userClientIp;
            return this;
        }

        /**
         * @param userClientIp The ip of user client.
         * 
         * @return builder
         * 
         */
        public Builder userClientIp(String userClientIp) {
            return userClientIp(Output.of(userClientIp));
        }

        public GetResolutionLinesArgs build() {
            return $;
        }
    }

}
