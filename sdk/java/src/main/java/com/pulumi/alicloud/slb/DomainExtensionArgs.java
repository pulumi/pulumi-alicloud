// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.slb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainExtensionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainExtensionArgs Empty = new DomainExtensionArgs();

    /**
     * Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
     * 
     */
    @Import(name="deleteProtectionValidation")
    private @Nullable Output<Boolean> deleteProtectionValidation;

    /**
     * @return Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
     * 
     */
    public Optional<Output<Boolean>> deleteProtectionValidation() {
        return Optional.ofNullable(this.deleteProtectionValidation);
    }

    /**
     * The domain name.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return The domain name.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
     * 
     */
    @Import(name="frontendPort", required=true)
    private Output<Integer> frontendPort;

    /**
     * @return The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
     * 
     */
    public Output<Integer> frontendPort() {
        return this.frontendPort;
    }

    /**
     * The ID of the SLB instance.
     * 
     */
    @Import(name="loadBalancerId", required=true)
    private Output<String> loadBalancerId;

    /**
     * @return The ID of the SLB instance.
     * 
     */
    public Output<String> loadBalancerId() {
        return this.loadBalancerId;
    }

    /**
     * The ID of the certificate used by the domain name.
     * 
     */
    @Import(name="serverCertificateId", required=true)
    private Output<String> serverCertificateId;

    /**
     * @return The ID of the certificate used by the domain name.
     * 
     */
    public Output<String> serverCertificateId() {
        return this.serverCertificateId;
    }

    private DomainExtensionArgs() {}

    private DomainExtensionArgs(DomainExtensionArgs $) {
        this.deleteProtectionValidation = $.deleteProtectionValidation;
        this.domain = $.domain;
        this.frontendPort = $.frontendPort;
        this.loadBalancerId = $.loadBalancerId;
        this.serverCertificateId = $.serverCertificateId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainExtensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainExtensionArgs $;

        public Builder() {
            $ = new DomainExtensionArgs();
        }

        public Builder(DomainExtensionArgs defaults) {
            $ = new DomainExtensionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteProtectionValidation Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder deleteProtectionValidation(@Nullable Output<Boolean> deleteProtectionValidation) {
            $.deleteProtectionValidation = deleteProtectionValidation;
            return this;
        }

        /**
         * @param deleteProtectionValidation Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder deleteProtectionValidation(Boolean deleteProtectionValidation) {
            return deleteProtectionValidation(Output.of(deleteProtectionValidation));
        }

        /**
         * @param domain The domain name.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain name.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param frontendPort The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(Output<Integer> frontendPort) {
            $.frontendPort = frontendPort;
            return this;
        }

        /**
         * @param frontendPort The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(Integer frontendPort) {
            return frontendPort(Output.of(frontendPort));
        }

        /**
         * @param loadBalancerId The ID of the SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId The ID of the SLB instance.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param serverCertificateId The ID of the certificate used by the domain name.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateId(Output<String> serverCertificateId) {
            $.serverCertificateId = serverCertificateId;
            return this;
        }

        /**
         * @param serverCertificateId The ID of the certificate used by the domain name.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateId(String serverCertificateId) {
            return serverCertificateId(Output.of(serverCertificateId));
        }

        public DomainExtensionArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("DomainExtensionArgs", "domain");
            }
            if ($.frontendPort == null) {
                throw new MissingRequiredPropertyException("DomainExtensionArgs", "frontendPort");
            }
            if ($.loadBalancerId == null) {
                throw new MissingRequiredPropertyException("DomainExtensionArgs", "loadBalancerId");
            }
            if ($.serverCertificateId == null) {
                throw new MissingRequiredPropertyException("DomainExtensionArgs", "serverCertificateId");
            }
            return $;
        }
    }

}
