// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.yundun.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BastionHostInstanceAdAuthServer {
    private String account;
    private String baseDn;
    private String domain;
    private @Nullable String emailMapping;
    private @Nullable String filter;
    private Boolean isSsl;
    private @Nullable String mobileMapping;
    private @Nullable String nameMapping;
    private String password;
    private Integer port;
    private String server;
    private @Nullable String standbyServer;

    private BastionHostInstanceAdAuthServer() {}
    public String account() {
        return this.account;
    }
    public String baseDn() {
        return this.baseDn;
    }
    public String domain() {
        return this.domain;
    }
    public Optional<String> emailMapping() {
        return Optional.ofNullable(this.emailMapping);
    }
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    public Boolean isSsl() {
        return this.isSsl;
    }
    public Optional<String> mobileMapping() {
        return Optional.ofNullable(this.mobileMapping);
    }
    public Optional<String> nameMapping() {
        return Optional.ofNullable(this.nameMapping);
    }
    public String password() {
        return this.password;
    }
    public Integer port() {
        return this.port;
    }
    public String server() {
        return this.server;
    }
    public Optional<String> standbyServer() {
        return Optional.ofNullable(this.standbyServer);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BastionHostInstanceAdAuthServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String account;
        private String baseDn;
        private String domain;
        private @Nullable String emailMapping;
        private @Nullable String filter;
        private Boolean isSsl;
        private @Nullable String mobileMapping;
        private @Nullable String nameMapping;
        private String password;
        private Integer port;
        private String server;
        private @Nullable String standbyServer;
        public Builder() {}
        public Builder(BastionHostInstanceAdAuthServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.account = defaults.account;
    	      this.baseDn = defaults.baseDn;
    	      this.domain = defaults.domain;
    	      this.emailMapping = defaults.emailMapping;
    	      this.filter = defaults.filter;
    	      this.isSsl = defaults.isSsl;
    	      this.mobileMapping = defaults.mobileMapping;
    	      this.nameMapping = defaults.nameMapping;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.server = defaults.server;
    	      this.standbyServer = defaults.standbyServer;
        }

        @CustomType.Setter
        public Builder account(String account) {
            this.account = Objects.requireNonNull(account);
            return this;
        }
        @CustomType.Setter
        public Builder baseDn(String baseDn) {
            this.baseDn = Objects.requireNonNull(baseDn);
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        @CustomType.Setter
        public Builder emailMapping(@Nullable String emailMapping) {
            this.emailMapping = emailMapping;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable String filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder isSsl(Boolean isSsl) {
            this.isSsl = Objects.requireNonNull(isSsl);
            return this;
        }
        @CustomType.Setter
        public Builder mobileMapping(@Nullable String mobileMapping) {
            this.mobileMapping = mobileMapping;
            return this;
        }
        @CustomType.Setter
        public Builder nameMapping(@Nullable String nameMapping) {
            this.nameMapping = nameMapping;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder server(String server) {
            this.server = Objects.requireNonNull(server);
            return this;
        }
        @CustomType.Setter
        public Builder standbyServer(@Nullable String standbyServer) {
            this.standbyServer = standbyServer;
            return this;
        }
        public BastionHostInstanceAdAuthServer build() {
            final var o = new BastionHostInstanceAdAuthServer();
            o.account = account;
            o.baseDn = baseDn;
            o.domain = domain;
            o.emailMapping = emailMapping;
            o.filter = filter;
            o.isSsl = isSsl;
            o.mobileMapping = mobileMapping;
            o.nameMapping = nameMapping;
            o.password = password;
            o.port = port;
            o.server = server;
            o.standbyServer = standbyServer;
            return o;
        }
    }
}
