// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.expressconnect.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPhysicalConnectionsConnection {
    /**
     * @return The Physical Leased Line Access Point ID.
     * 
     */
    private String accessPointId;
    /**
     * @return To Connect a Device Physical Location.
     * 
     */
    private String adLocation;
    /**
     * @return On the Bandwidth of the ECC Service and Physical Connection.
     * 
     */
    private String bandwidth;
    /**
     * @return The Physical Connection to Which the Payment Status: Normal, financiallocked, securitylocked.
     * 
     */
    private String businessStatus;
    /**
     * @return Operators for Physical Connection Circuit Provided Coding.
     * 
     */
    private String circuitCode;
    /**
     * @return The Representative of the Creation Time Resources Attribute Field.
     * 
     */
    private String createTime;
    /**
     * @return The Physical Connection to Which the Description.
     * 
     */
    private String description;
    /**
     * @return The Physical Connection to Which the Activation Time.
     * 
     */
    private String enabledTime;
    /**
     * @return The Expiration Time.
     * 
     */
    private String endTime;
    /**
     * @return HasReservationData.
     * 
     */
    private String hasReservationData;
    /**
     * @return The ID of the Physical Connection.
     * 
     */
    private String id;
    /**
     * @return Provides Access to the Physical Line Operator Value CT: China Telecom, CU: China Unicom, CM: china Mobile, CO: Other Chinese, Equinix:Equinix, Other: Other Overseas.
     * 
     */
    private String lineOperator;
    /**
     * @return Loa State.
     * 
     */
    private String loaStatus;
    /**
     * @return on Behalf of the Pay-as-You-Type of Resource Attribute Field.
     * 
     */
    private String paymentType;
    /**
     * @return and an on-Premises Data Center Location.
     * 
     */
    private String peerLocation;
    /**
     * @return on Behalf of the Resource Level Id of the Resources Property Fields.
     * 
     */
    private String physicalConnectionId;
    /**
     * @return on Behalf of the Resource Name of the Resources-Attribute Field.
     * 
     */
    private String physicalConnectionName;
    /**
     * @return To Connect a Device Port: The Port Number of.
     * 
     */
    private String portNumber;
    /**
     * @return The Physical Leased Line Access Port Type Value 100Base-T: Fast Electrical Ports, 1000Base-T (the Default): gigabit Electrical Ports, 1000Base-LX: Gigabit Singlemode Optical Ports (10Km), 10GBase-T: Gigabit Electrical Port, 10GBase-LR: Gigabit Singlemode Optical Ports (10Km).
     * 
     */
    private String portType;
    /**
     * @return Redundant Physical Connection to Which the ID.
     * 
     */
    private String redundantPhysicalConnectionId;
    /**
     * @return The Renewal of the Entry into Force of the Time.
     * 
     */
    private String reservationActiveTime;
    /**
     * @return Renewal Type.
     * 
     */
    private String reservationInternetChargeType;
    /**
     * @return Renewal Order Type.
     * 
     */
    private String reservationOrderType;
    /**
     * @return The Physical Connection to Which the Specifications.
     * 
     */
    private String spec;
    /**
     * @return Resources on Behalf of a State of the Resource Attribute Field.
     * 
     */
    private String status;
    /**
     * @return Physical Private Line of Type. Default Value: VPC.
     * 
     */
    private String type;

    private GetPhysicalConnectionsConnection() {}
    /**
     * @return The Physical Leased Line Access Point ID.
     * 
     */
    public String accessPointId() {
        return this.accessPointId;
    }
    /**
     * @return To Connect a Device Physical Location.
     * 
     */
    public String adLocation() {
        return this.adLocation;
    }
    /**
     * @return On the Bandwidth of the ECC Service and Physical Connection.
     * 
     */
    public String bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return The Physical Connection to Which the Payment Status: Normal, financiallocked, securitylocked.
     * 
     */
    public String businessStatus() {
        return this.businessStatus;
    }
    /**
     * @return Operators for Physical Connection Circuit Provided Coding.
     * 
     */
    public String circuitCode() {
        return this.circuitCode;
    }
    /**
     * @return The Representative of the Creation Time Resources Attribute Field.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The Physical Connection to Which the Description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The Physical Connection to Which the Activation Time.
     * 
     */
    public String enabledTime() {
        return this.enabledTime;
    }
    /**
     * @return The Expiration Time.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return HasReservationData.
     * 
     */
    public String hasReservationData() {
        return this.hasReservationData;
    }
    /**
     * @return The ID of the Physical Connection.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Provides Access to the Physical Line Operator Value CT: China Telecom, CU: China Unicom, CM: china Mobile, CO: Other Chinese, Equinix:Equinix, Other: Other Overseas.
     * 
     */
    public String lineOperator() {
        return this.lineOperator;
    }
    /**
     * @return Loa State.
     * 
     */
    public String loaStatus() {
        return this.loaStatus;
    }
    /**
     * @return on Behalf of the Pay-as-You-Type of Resource Attribute Field.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return and an on-Premises Data Center Location.
     * 
     */
    public String peerLocation() {
        return this.peerLocation;
    }
    /**
     * @return on Behalf of the Resource Level Id of the Resources Property Fields.
     * 
     */
    public String physicalConnectionId() {
        return this.physicalConnectionId;
    }
    /**
     * @return on Behalf of the Resource Name of the Resources-Attribute Field.
     * 
     */
    public String physicalConnectionName() {
        return this.physicalConnectionName;
    }
    /**
     * @return To Connect a Device Port: The Port Number of.
     * 
     */
    public String portNumber() {
        return this.portNumber;
    }
    /**
     * @return The Physical Leased Line Access Port Type Value 100Base-T: Fast Electrical Ports, 1000Base-T (the Default): gigabit Electrical Ports, 1000Base-LX: Gigabit Singlemode Optical Ports (10Km), 10GBase-T: Gigabit Electrical Port, 10GBase-LR: Gigabit Singlemode Optical Ports (10Km).
     * 
     */
    public String portType() {
        return this.portType;
    }
    /**
     * @return Redundant Physical Connection to Which the ID.
     * 
     */
    public String redundantPhysicalConnectionId() {
        return this.redundantPhysicalConnectionId;
    }
    /**
     * @return The Renewal of the Entry into Force of the Time.
     * 
     */
    public String reservationActiveTime() {
        return this.reservationActiveTime;
    }
    /**
     * @return Renewal Type.
     * 
     */
    public String reservationInternetChargeType() {
        return this.reservationInternetChargeType;
    }
    /**
     * @return Renewal Order Type.
     * 
     */
    public String reservationOrderType() {
        return this.reservationOrderType;
    }
    /**
     * @return The Physical Connection to Which the Specifications.
     * 
     */
    public String spec() {
        return this.spec;
    }
    /**
     * @return Resources on Behalf of a State of the Resource Attribute Field.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Physical Private Line of Type. Default Value: VPC.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPhysicalConnectionsConnection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessPointId;
        private String adLocation;
        private String bandwidth;
        private String businessStatus;
        private String circuitCode;
        private String createTime;
        private String description;
        private String enabledTime;
        private String endTime;
        private String hasReservationData;
        private String id;
        private String lineOperator;
        private String loaStatus;
        private String paymentType;
        private String peerLocation;
        private String physicalConnectionId;
        private String physicalConnectionName;
        private String portNumber;
        private String portType;
        private String redundantPhysicalConnectionId;
        private String reservationActiveTime;
        private String reservationInternetChargeType;
        private String reservationOrderType;
        private String spec;
        private String status;
        private String type;
        public Builder() {}
        public Builder(GetPhysicalConnectionsConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPointId = defaults.accessPointId;
    	      this.adLocation = defaults.adLocation;
    	      this.bandwidth = defaults.bandwidth;
    	      this.businessStatus = defaults.businessStatus;
    	      this.circuitCode = defaults.circuitCode;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.enabledTime = defaults.enabledTime;
    	      this.endTime = defaults.endTime;
    	      this.hasReservationData = defaults.hasReservationData;
    	      this.id = defaults.id;
    	      this.lineOperator = defaults.lineOperator;
    	      this.loaStatus = defaults.loaStatus;
    	      this.paymentType = defaults.paymentType;
    	      this.peerLocation = defaults.peerLocation;
    	      this.physicalConnectionId = defaults.physicalConnectionId;
    	      this.physicalConnectionName = defaults.physicalConnectionName;
    	      this.portNumber = defaults.portNumber;
    	      this.portType = defaults.portType;
    	      this.redundantPhysicalConnectionId = defaults.redundantPhysicalConnectionId;
    	      this.reservationActiveTime = defaults.reservationActiveTime;
    	      this.reservationInternetChargeType = defaults.reservationInternetChargeType;
    	      this.reservationOrderType = defaults.reservationOrderType;
    	      this.spec = defaults.spec;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder accessPointId(String accessPointId) {
            this.accessPointId = Objects.requireNonNull(accessPointId);
            return this;
        }
        @CustomType.Setter
        public Builder adLocation(String adLocation) {
            this.adLocation = Objects.requireNonNull(adLocation);
            return this;
        }
        @CustomType.Setter
        public Builder bandwidth(String bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder businessStatus(String businessStatus) {
            this.businessStatus = Objects.requireNonNull(businessStatus);
            return this;
        }
        @CustomType.Setter
        public Builder circuitCode(String circuitCode) {
            this.circuitCode = Objects.requireNonNull(circuitCode);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder enabledTime(String enabledTime) {
            this.enabledTime = Objects.requireNonNull(enabledTime);
            return this;
        }
        @CustomType.Setter
        public Builder endTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }
        @CustomType.Setter
        public Builder hasReservationData(String hasReservationData) {
            this.hasReservationData = Objects.requireNonNull(hasReservationData);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lineOperator(String lineOperator) {
            this.lineOperator = Objects.requireNonNull(lineOperator);
            return this;
        }
        @CustomType.Setter
        public Builder loaStatus(String loaStatus) {
            this.loaStatus = Objects.requireNonNull(loaStatus);
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        @CustomType.Setter
        public Builder peerLocation(String peerLocation) {
            this.peerLocation = Objects.requireNonNull(peerLocation);
            return this;
        }
        @CustomType.Setter
        public Builder physicalConnectionId(String physicalConnectionId) {
            this.physicalConnectionId = Objects.requireNonNull(physicalConnectionId);
            return this;
        }
        @CustomType.Setter
        public Builder physicalConnectionName(String physicalConnectionName) {
            this.physicalConnectionName = Objects.requireNonNull(physicalConnectionName);
            return this;
        }
        @CustomType.Setter
        public Builder portNumber(String portNumber) {
            this.portNumber = Objects.requireNonNull(portNumber);
            return this;
        }
        @CustomType.Setter
        public Builder portType(String portType) {
            this.portType = Objects.requireNonNull(portType);
            return this;
        }
        @CustomType.Setter
        public Builder redundantPhysicalConnectionId(String redundantPhysicalConnectionId) {
            this.redundantPhysicalConnectionId = Objects.requireNonNull(redundantPhysicalConnectionId);
            return this;
        }
        @CustomType.Setter
        public Builder reservationActiveTime(String reservationActiveTime) {
            this.reservationActiveTime = Objects.requireNonNull(reservationActiveTime);
            return this;
        }
        @CustomType.Setter
        public Builder reservationInternetChargeType(String reservationInternetChargeType) {
            this.reservationInternetChargeType = Objects.requireNonNull(reservationInternetChargeType);
            return this;
        }
        @CustomType.Setter
        public Builder reservationOrderType(String reservationOrderType) {
            this.reservationOrderType = Objects.requireNonNull(reservationOrderType);
            return this;
        }
        @CustomType.Setter
        public Builder spec(String spec) {
            this.spec = Objects.requireNonNull(spec);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetPhysicalConnectionsConnection build() {
            final var o = new GetPhysicalConnectionsConnection();
            o.accessPointId = accessPointId;
            o.adLocation = adLocation;
            o.bandwidth = bandwidth;
            o.businessStatus = businessStatus;
            o.circuitCode = circuitCode;
            o.createTime = createTime;
            o.description = description;
            o.enabledTime = enabledTime;
            o.endTime = endTime;
            o.hasReservationData = hasReservationData;
            o.id = id;
            o.lineOperator = lineOperator;
            o.loaStatus = loaStatus;
            o.paymentType = paymentType;
            o.peerLocation = peerLocation;
            o.physicalConnectionId = physicalConnectionId;
            o.physicalConnectionName = physicalConnectionName;
            o.portNumber = portNumber;
            o.portType = portType;
            o.redundantPhysicalConnectionId = redundantPhysicalConnectionId;
            o.reservationActiveTime = reservationActiveTime;
            o.reservationInternetChargeType = reservationInternetChargeType;
            o.reservationOrderType = reservationOrderType;
            o.spec = spec;
            o.status = status;
            o.type = type;
            return o;
        }
    }
}
