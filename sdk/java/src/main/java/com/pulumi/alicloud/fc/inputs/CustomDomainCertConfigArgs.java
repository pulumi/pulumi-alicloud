// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class CustomDomainCertConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomDomainCertConfigArgs Empty = new CustomDomainCertConfigArgs();

    /**
     * The name of the certificate, used to distinguish different certificates.
     * 
     */
    @Import(name="certName", required=true)
    private Output<String> certName;

    /**
     * @return The name of the certificate, used to distinguish different certificates.
     * 
     */
    public Output<String> certName() {
        return this.certName;
    }

    /**
     * Certificate data of the HTTPS certificates, follow the &#39;pem&#39; format.
     * 
     */
    @Import(name="certificate", required=true)
    private Output<String> certificate;

    /**
     * @return Certificate data of the HTTPS certificates, follow the &#39;pem&#39; format.
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }

    /**
     * Private key of the HTTPS certificates, follow the &#39;pem&#39; format.
     * 
     */
    @Import(name="privateKey", required=true)
    private Output<String> privateKey;

    /**
     * @return Private key of the HTTPS certificates, follow the &#39;pem&#39; format.
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }

    private CustomDomainCertConfigArgs() {}

    private CustomDomainCertConfigArgs(CustomDomainCertConfigArgs $) {
        this.certName = $.certName;
        this.certificate = $.certificate;
        this.privateKey = $.privateKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomDomainCertConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomDomainCertConfigArgs $;

        public Builder() {
            $ = new CustomDomainCertConfigArgs();
        }

        public Builder(CustomDomainCertConfigArgs defaults) {
            $ = new CustomDomainCertConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certName The name of the certificate, used to distinguish different certificates.
         * 
         * @return builder
         * 
         */
        public Builder certName(Output<String> certName) {
            $.certName = certName;
            return this;
        }

        /**
         * @param certName The name of the certificate, used to distinguish different certificates.
         * 
         * @return builder
         * 
         */
        public Builder certName(String certName) {
            return certName(Output.of(certName));
        }

        /**
         * @param certificate Certificate data of the HTTPS certificates, follow the &#39;pem&#39; format.
         * 
         * @return builder
         * 
         */
        public Builder certificate(Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Certificate data of the HTTPS certificates, follow the &#39;pem&#39; format.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param privateKey Private key of the HTTPS certificates, follow the &#39;pem&#39; format.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey Private key of the HTTPS certificates, follow the &#39;pem&#39; format.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        public CustomDomainCertConfigArgs build() {
            if ($.certName == null) {
                throw new MissingRequiredPropertyException("CustomDomainCertConfigArgs", "certName");
            }
            if ($.certificate == null) {
                throw new MissingRequiredPropertyException("CustomDomainCertConfigArgs", "certificate");
            }
            if ($.privateKey == null) {
                throw new MissingRequiredPropertyException("CustomDomainCertConfigArgs", "privateKey");
            }
            return $;
        }
    }

}
