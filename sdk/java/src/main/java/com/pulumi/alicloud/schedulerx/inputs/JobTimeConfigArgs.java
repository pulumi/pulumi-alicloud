// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.schedulerx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobTimeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobTimeConfigArgs Empty = new JobTimeConfigArgs();

    /**
     * The cron type can optionally fill in a custom calendar.
     * 
     */
    @Import(name="calendar")
    private @Nullable Output<String> calendar;

    /**
     * @return The cron type can optionally fill in a custom calendar.
     * 
     */
    public Optional<Output<String>> calendar() {
        return Optional.ofNullable(this.calendar);
    }

    /**
     * Cron type can choose time offset, unit s.
     * 
     */
    @Import(name="dataOffset")
    private @Nullable Output<Integer> dataOffset;

    /**
     * @return Cron type can choose time offset, unit s.
     * 
     */
    public Optional<Output<Integer>> dataOffset() {
        return Optional.ofNullable(this.dataOffset);
    }

    /**
     * Time expressions. Currently, the following types of time expressions are supported:
     * 
     */
    @Import(name="timeExpression")
    private @Nullable Output<String> timeExpression;

    /**
     * @return Time expressions. Currently, the following types of time expressions are supported:
     * 
     */
    public Optional<Output<String>> timeExpression() {
        return Optional.ofNullable(this.timeExpression);
    }

    /**
     * Time configuration type. Currently, the following time types are supported:
     * 
     */
    @Import(name="timeType", required=true)
    private Output<Integer> timeType;

    /**
     * @return Time configuration type. Currently, the following time types are supported:
     * 
     */
    public Output<Integer> timeType() {
        return this.timeType;
    }

    private JobTimeConfigArgs() {}

    private JobTimeConfigArgs(JobTimeConfigArgs $) {
        this.calendar = $.calendar;
        this.dataOffset = $.dataOffset;
        this.timeExpression = $.timeExpression;
        this.timeType = $.timeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobTimeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobTimeConfigArgs $;

        public Builder() {
            $ = new JobTimeConfigArgs();
        }

        public Builder(JobTimeConfigArgs defaults) {
            $ = new JobTimeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param calendar The cron type can optionally fill in a custom calendar.
         * 
         * @return builder
         * 
         */
        public Builder calendar(@Nullable Output<String> calendar) {
            $.calendar = calendar;
            return this;
        }

        /**
         * @param calendar The cron type can optionally fill in a custom calendar.
         * 
         * @return builder
         * 
         */
        public Builder calendar(String calendar) {
            return calendar(Output.of(calendar));
        }

        /**
         * @param dataOffset Cron type can choose time offset, unit s.
         * 
         * @return builder
         * 
         */
        public Builder dataOffset(@Nullable Output<Integer> dataOffset) {
            $.dataOffset = dataOffset;
            return this;
        }

        /**
         * @param dataOffset Cron type can choose time offset, unit s.
         * 
         * @return builder
         * 
         */
        public Builder dataOffset(Integer dataOffset) {
            return dataOffset(Output.of(dataOffset));
        }

        /**
         * @param timeExpression Time expressions. Currently, the following types of time expressions are supported:
         * 
         * @return builder
         * 
         */
        public Builder timeExpression(@Nullable Output<String> timeExpression) {
            $.timeExpression = timeExpression;
            return this;
        }

        /**
         * @param timeExpression Time expressions. Currently, the following types of time expressions are supported:
         * 
         * @return builder
         * 
         */
        public Builder timeExpression(String timeExpression) {
            return timeExpression(Output.of(timeExpression));
        }

        /**
         * @param timeType Time configuration type. Currently, the following time types are supported:
         * 
         * @return builder
         * 
         */
        public Builder timeType(Output<Integer> timeType) {
            $.timeType = timeType;
            return this;
        }

        /**
         * @param timeType Time configuration type. Currently, the following time types are supported:
         * 
         * @return builder
         * 
         */
        public Builder timeType(Integer timeType) {
            return timeType(Output.of(timeType));
        }

        public JobTimeConfigArgs build() {
            if ($.timeType == null) {
                throw new MissingRequiredPropertyException("JobTimeConfigArgs", "timeType");
            }
            return $;
        }
    }

}
