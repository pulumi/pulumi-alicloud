// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ram;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountPasswordPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountPasswordPolicyArgs Empty = new AccountPasswordPolicyArgs();

    /**
     * Specifies if a password can expire in a hard way. Default to false.
     * 
     */
    @Import(name="hardExpiry")
    private @Nullable Output<Boolean> hardExpiry;

    /**
     * @return Specifies if a password can expire in a hard way. Default to false.
     * 
     */
    public Optional<Output<Boolean>> hardExpiry() {
        return Optional.ofNullable(this.hardExpiry);
    }

    /**
     * Maximum logon attempts with an incorrect password within an hour. Valid value range: [0-32]. Default to 5.
     * 
     */
    @Import(name="maxLoginAttempts")
    private @Nullable Output<Integer> maxLoginAttempts;

    /**
     * @return Maximum logon attempts with an incorrect password within an hour. Valid value range: [0-32]. Default to 5.
     * 
     */
    public Optional<Output<Integer>> maxLoginAttempts() {
        return Optional.ofNullable(this.maxLoginAttempts);
    }

    /**
     * The number of days after which password expires. A value of 0 indicates that the password never expires. Valid value range: [0-1095]. Default to 0.
     * 
     */
    @Import(name="maxPasswordAge")
    private @Nullable Output<Integer> maxPasswordAge;

    /**
     * @return The number of days after which password expires. A value of 0 indicates that the password never expires. Valid value range: [0-1095]. Default to 0.
     * 
     */
    public Optional<Output<Integer>> maxPasswordAge() {
        return Optional.ofNullable(this.maxPasswordAge);
    }

    /**
     * Minimal required length of password for a user. Valid value range: [8-32]. Default to 12.
     * 
     */
    @Import(name="minimumPasswordLength")
    private @Nullable Output<Integer> minimumPasswordLength;

    /**
     * @return Minimal required length of password for a user. Valid value range: [8-32]. Default to 12.
     * 
     */
    public Optional<Output<Integer>> minimumPasswordLength() {
        return Optional.ofNullable(this.minimumPasswordLength);
    }

    /**
     * User is not allowed to use the latest number of passwords specified in this parameter. A value of 0 indicates the password history check policy is disabled. Valid value range: [0-24]. Default to 0.
     * 
     */
    @Import(name="passwordReusePrevention")
    private @Nullable Output<Integer> passwordReusePrevention;

    /**
     * @return User is not allowed to use the latest number of passwords specified in this parameter. A value of 0 indicates the password history check policy is disabled. Valid value range: [0-24]. Default to 0.
     * 
     */
    public Optional<Output<Integer>> passwordReusePrevention() {
        return Optional.ofNullable(this.passwordReusePrevention);
    }

    /**
     * Specifies if the occurrence of a lowercase character in the password is mandatory. Default to true.
     * 
     */
    @Import(name="requireLowercaseCharacters")
    private @Nullable Output<Boolean> requireLowercaseCharacters;

    /**
     * @return Specifies if the occurrence of a lowercase character in the password is mandatory. Default to true.
     * 
     */
    public Optional<Output<Boolean>> requireLowercaseCharacters() {
        return Optional.ofNullable(this.requireLowercaseCharacters);
    }

    /**
     * Specifies if the occurrence of a number in the password is mandatory. Default to true.
     * 
     */
    @Import(name="requireNumbers")
    private @Nullable Output<Boolean> requireNumbers;

    /**
     * @return Specifies if the occurrence of a number in the password is mandatory. Default to true.
     * 
     */
    public Optional<Output<Boolean>> requireNumbers() {
        return Optional.ofNullable(this.requireNumbers);
    }

    /**
     * Specifies if the occurrence of a special character in the password is mandatory. Default to true.
     * 
     */
    @Import(name="requireSymbols")
    private @Nullable Output<Boolean> requireSymbols;

    /**
     * @return Specifies if the occurrence of a special character in the password is mandatory. Default to true.
     * 
     */
    public Optional<Output<Boolean>> requireSymbols() {
        return Optional.ofNullable(this.requireSymbols);
    }

    /**
     * Specifies if the occurrence of an uppercase character in the password is mandatory. Default to true.
     * 
     */
    @Import(name="requireUppercaseCharacters")
    private @Nullable Output<Boolean> requireUppercaseCharacters;

    /**
     * @return Specifies if the occurrence of an uppercase character in the password is mandatory. Default to true.
     * 
     */
    public Optional<Output<Boolean>> requireUppercaseCharacters() {
        return Optional.ofNullable(this.requireUppercaseCharacters);
    }

    private AccountPasswordPolicyArgs() {}

    private AccountPasswordPolicyArgs(AccountPasswordPolicyArgs $) {
        this.hardExpiry = $.hardExpiry;
        this.maxLoginAttempts = $.maxLoginAttempts;
        this.maxPasswordAge = $.maxPasswordAge;
        this.minimumPasswordLength = $.minimumPasswordLength;
        this.passwordReusePrevention = $.passwordReusePrevention;
        this.requireLowercaseCharacters = $.requireLowercaseCharacters;
        this.requireNumbers = $.requireNumbers;
        this.requireSymbols = $.requireSymbols;
        this.requireUppercaseCharacters = $.requireUppercaseCharacters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountPasswordPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountPasswordPolicyArgs $;

        public Builder() {
            $ = new AccountPasswordPolicyArgs();
        }

        public Builder(AccountPasswordPolicyArgs defaults) {
            $ = new AccountPasswordPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hardExpiry Specifies if a password can expire in a hard way. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder hardExpiry(@Nullable Output<Boolean> hardExpiry) {
            $.hardExpiry = hardExpiry;
            return this;
        }

        /**
         * @param hardExpiry Specifies if a password can expire in a hard way. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder hardExpiry(Boolean hardExpiry) {
            return hardExpiry(Output.of(hardExpiry));
        }

        /**
         * @param maxLoginAttempts Maximum logon attempts with an incorrect password within an hour. Valid value range: [0-32]. Default to 5.
         * 
         * @return builder
         * 
         */
        public Builder maxLoginAttempts(@Nullable Output<Integer> maxLoginAttempts) {
            $.maxLoginAttempts = maxLoginAttempts;
            return this;
        }

        /**
         * @param maxLoginAttempts Maximum logon attempts with an incorrect password within an hour. Valid value range: [0-32]. Default to 5.
         * 
         * @return builder
         * 
         */
        public Builder maxLoginAttempts(Integer maxLoginAttempts) {
            return maxLoginAttempts(Output.of(maxLoginAttempts));
        }

        /**
         * @param maxPasswordAge The number of days after which password expires. A value of 0 indicates that the password never expires. Valid value range: [0-1095]. Default to 0.
         * 
         * @return builder
         * 
         */
        public Builder maxPasswordAge(@Nullable Output<Integer> maxPasswordAge) {
            $.maxPasswordAge = maxPasswordAge;
            return this;
        }

        /**
         * @param maxPasswordAge The number of days after which password expires. A value of 0 indicates that the password never expires. Valid value range: [0-1095]. Default to 0.
         * 
         * @return builder
         * 
         */
        public Builder maxPasswordAge(Integer maxPasswordAge) {
            return maxPasswordAge(Output.of(maxPasswordAge));
        }

        /**
         * @param minimumPasswordLength Minimal required length of password for a user. Valid value range: [8-32]. Default to 12.
         * 
         * @return builder
         * 
         */
        public Builder minimumPasswordLength(@Nullable Output<Integer> minimumPasswordLength) {
            $.minimumPasswordLength = minimumPasswordLength;
            return this;
        }

        /**
         * @param minimumPasswordLength Minimal required length of password for a user. Valid value range: [8-32]. Default to 12.
         * 
         * @return builder
         * 
         */
        public Builder minimumPasswordLength(Integer minimumPasswordLength) {
            return minimumPasswordLength(Output.of(minimumPasswordLength));
        }

        /**
         * @param passwordReusePrevention User is not allowed to use the latest number of passwords specified in this parameter. A value of 0 indicates the password history check policy is disabled. Valid value range: [0-24]. Default to 0.
         * 
         * @return builder
         * 
         */
        public Builder passwordReusePrevention(@Nullable Output<Integer> passwordReusePrevention) {
            $.passwordReusePrevention = passwordReusePrevention;
            return this;
        }

        /**
         * @param passwordReusePrevention User is not allowed to use the latest number of passwords specified in this parameter. A value of 0 indicates the password history check policy is disabled. Valid value range: [0-24]. Default to 0.
         * 
         * @return builder
         * 
         */
        public Builder passwordReusePrevention(Integer passwordReusePrevention) {
            return passwordReusePrevention(Output.of(passwordReusePrevention));
        }

        /**
         * @param requireLowercaseCharacters Specifies if the occurrence of a lowercase character in the password is mandatory. Default to true.
         * 
         * @return builder
         * 
         */
        public Builder requireLowercaseCharacters(@Nullable Output<Boolean> requireLowercaseCharacters) {
            $.requireLowercaseCharacters = requireLowercaseCharacters;
            return this;
        }

        /**
         * @param requireLowercaseCharacters Specifies if the occurrence of a lowercase character in the password is mandatory. Default to true.
         * 
         * @return builder
         * 
         */
        public Builder requireLowercaseCharacters(Boolean requireLowercaseCharacters) {
            return requireLowercaseCharacters(Output.of(requireLowercaseCharacters));
        }

        /**
         * @param requireNumbers Specifies if the occurrence of a number in the password is mandatory. Default to true.
         * 
         * @return builder
         * 
         */
        public Builder requireNumbers(@Nullable Output<Boolean> requireNumbers) {
            $.requireNumbers = requireNumbers;
            return this;
        }

        /**
         * @param requireNumbers Specifies if the occurrence of a number in the password is mandatory. Default to true.
         * 
         * @return builder
         * 
         */
        public Builder requireNumbers(Boolean requireNumbers) {
            return requireNumbers(Output.of(requireNumbers));
        }

        /**
         * @param requireSymbols Specifies if the occurrence of a special character in the password is mandatory. Default to true.
         * 
         * @return builder
         * 
         */
        public Builder requireSymbols(@Nullable Output<Boolean> requireSymbols) {
            $.requireSymbols = requireSymbols;
            return this;
        }

        /**
         * @param requireSymbols Specifies if the occurrence of a special character in the password is mandatory. Default to true.
         * 
         * @return builder
         * 
         */
        public Builder requireSymbols(Boolean requireSymbols) {
            return requireSymbols(Output.of(requireSymbols));
        }

        /**
         * @param requireUppercaseCharacters Specifies if the occurrence of an uppercase character in the password is mandatory. Default to true.
         * 
         * @return builder
         * 
         */
        public Builder requireUppercaseCharacters(@Nullable Output<Boolean> requireUppercaseCharacters) {
            $.requireUppercaseCharacters = requireUppercaseCharacters;
            return this;
        }

        /**
         * @param requireUppercaseCharacters Specifies if the occurrence of an uppercase character in the password is mandatory. Default to true.
         * 
         * @return builder
         * 
         */
        public Builder requireUppercaseCharacters(Boolean requireUppercaseCharacters) {
            return requireUppercaseCharacters(Output.of(requireUppercaseCharacters));
        }

        public AccountPasswordPolicyArgs build() {
            return $;
        }
    }

}
