// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceParameter {
    /**
     * @return (Available since v1.231.0) The default value of the parameter.
     * 
     */
    private @Nullable String defaultValue;
    /**
     * @return (Available since v1.231.0) Whether to force restart the instance to config the parameter.
     * 
     */
    private @Nullable String forceRestartInstance;
    /**
     * @return (Available since v1.231.0) Whether the parameter is changeable.
     * 
     */
    private @Nullable String isChangeableConfig;
    /**
     * @return The name of the parameter.
     * 
     */
    private String name;
    /**
     * @return (Available since v1.231.0) The optional range of the parameter.
     * 
     */
    private @Nullable String optionalRange;
    /**
     * @return (Available since v1.231.0) The description of the parameter.
     * 
     */
    private @Nullable String parameterDescription;
    /**
     * @return The value of the parameter.
     * 
     */
    private String value;

    private InstanceParameter() {}
    /**
     * @return (Available since v1.231.0) The default value of the parameter.
     * 
     */
    public Optional<String> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }
    /**
     * @return (Available since v1.231.0) Whether to force restart the instance to config the parameter.
     * 
     */
    public Optional<String> forceRestartInstance() {
        return Optional.ofNullable(this.forceRestartInstance);
    }
    /**
     * @return (Available since v1.231.0) Whether the parameter is changeable.
     * 
     */
    public Optional<String> isChangeableConfig() {
        return Optional.ofNullable(this.isChangeableConfig);
    }
    /**
     * @return The name of the parameter.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Available since v1.231.0) The optional range of the parameter.
     * 
     */
    public Optional<String> optionalRange() {
        return Optional.ofNullable(this.optionalRange);
    }
    /**
     * @return (Available since v1.231.0) The description of the parameter.
     * 
     */
    public Optional<String> parameterDescription() {
        return Optional.ofNullable(this.parameterDescription);
    }
    /**
     * @return The value of the parameter.
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String defaultValue;
        private @Nullable String forceRestartInstance;
        private @Nullable String isChangeableConfig;
        private String name;
        private @Nullable String optionalRange;
        private @Nullable String parameterDescription;
        private String value;
        public Builder() {}
        public Builder(InstanceParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultValue = defaults.defaultValue;
    	      this.forceRestartInstance = defaults.forceRestartInstance;
    	      this.isChangeableConfig = defaults.isChangeableConfig;
    	      this.name = defaults.name;
    	      this.optionalRange = defaults.optionalRange;
    	      this.parameterDescription = defaults.parameterDescription;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder defaultValue(@Nullable String defaultValue) {

            this.defaultValue = defaultValue;
            return this;
        }
        @CustomType.Setter
        public Builder forceRestartInstance(@Nullable String forceRestartInstance) {

            this.forceRestartInstance = forceRestartInstance;
            return this;
        }
        @CustomType.Setter
        public Builder isChangeableConfig(@Nullable String isChangeableConfig) {

            this.isChangeableConfig = isChangeableConfig;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("InstanceParameter", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder optionalRange(@Nullable String optionalRange) {

            this.optionalRange = optionalRange;
            return this;
        }
        @CustomType.Setter
        public Builder parameterDescription(@Nullable String parameterDescription) {

            this.parameterDescription = parameterDescription;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("InstanceParameter", "value");
            }
            this.value = value;
            return this;
        }
        public InstanceParameter build() {
            final var _resultValue = new InstanceParameter();
            _resultValue.defaultValue = defaultValue;
            _resultValue.forceRestartInstance = forceRestartInstance;
            _resultValue.isChangeableConfig = isChangeableConfig;
            _resultValue.name = name;
            _resultValue.optionalRange = optionalRange;
            _resultValue.parameterDescription = parameterDescription;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
