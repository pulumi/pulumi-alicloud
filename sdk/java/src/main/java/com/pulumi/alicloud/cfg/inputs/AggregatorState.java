// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cfg.inputs;

import com.pulumi.alicloud.cfg.inputs.AggregatorAggregatorAccountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AggregatorState extends com.pulumi.resources.ResourceArgs {

    public static final AggregatorState Empty = new AggregatorState();

    /**
     * The member accounts of the account group. See `aggregatorAccounts` below.
     * &gt; **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
     * 
     */
    @Import(name="aggregatorAccounts")
    private @Nullable Output<List<AggregatorAggregatorAccountArgs>> aggregatorAccounts;

    /**
     * @return The member accounts of the account group. See `aggregatorAccounts` below.
     * &gt; **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
     * 
     */
    public Optional<Output<List<AggregatorAggregatorAccountArgs>>> aggregatorAccounts() {
        return Optional.ofNullable(this.aggregatorAccounts);
    }

    /**
     * The name of the account group.
     * 
     */
    @Import(name="aggregatorName")
    private @Nullable Output<String> aggregatorName;

    /**
     * @return The name of the account group.
     * 
     */
    public Optional<Output<String>> aggregatorName() {
        return Optional.ofNullable(this.aggregatorName);
    }

    /**
     * The type of the account group. Default value: `CUSTOM`. Valid values:
     * - `RD`: Global account group.
     * - `FOLDER`: Folder account group.
     * - `CUSTOM`: Custom account group.
     * 
     */
    @Import(name="aggregatorType")
    private @Nullable Output<String> aggregatorType;

    /**
     * @return The type of the account group. Default value: `CUSTOM`. Valid values:
     * - `RD`: Global account group.
     * - `FOLDER`: Folder account group.
     * - `CUSTOM`: Custom account group.
     * 
     */
    public Optional<Output<String>> aggregatorType() {
        return Optional.ofNullable(this.aggregatorType);
    }

    /**
     * (Available since v1.262.0) The timestamp when the account group was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<Integer> createTime;

    /**
     * @return (Available since v1.262.0) The timestamp when the account group was created.
     * 
     */
    public Optional<Output<Integer>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The description of the account group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the account group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the attached folder. You can specify multiple folder IDs. Separate the IDs with commas (,). **NOTE:** If `aggregatorType` is set to `FOLDER`, `folderId` is required.
     * 
     */
    @Import(name="folderId")
    private @Nullable Output<String> folderId;

    /**
     * @return The ID of the attached folder. You can specify multiple folder IDs. Separate the IDs with commas (,). **NOTE:** If `aggregatorType` is set to `FOLDER`, `folderId` is required.
     * 
     */
    public Optional<Output<String>> folderId() {
        return Optional.ofNullable(this.folderId);
    }

    /**
     * The status of the account group.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the account group.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private AggregatorState() {}

    private AggregatorState(AggregatorState $) {
        this.aggregatorAccounts = $.aggregatorAccounts;
        this.aggregatorName = $.aggregatorName;
        this.aggregatorType = $.aggregatorType;
        this.createTime = $.createTime;
        this.description = $.description;
        this.folderId = $.folderId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AggregatorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AggregatorState $;

        public Builder() {
            $ = new AggregatorState();
        }

        public Builder(AggregatorState defaults) {
            $ = new AggregatorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregatorAccounts The member accounts of the account group. See `aggregatorAccounts` below.
         * &gt; **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorAccounts(@Nullable Output<List<AggregatorAggregatorAccountArgs>> aggregatorAccounts) {
            $.aggregatorAccounts = aggregatorAccounts;
            return this;
        }

        /**
         * @param aggregatorAccounts The member accounts of the account group. See `aggregatorAccounts` below.
         * &gt; **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorAccounts(List<AggregatorAggregatorAccountArgs> aggregatorAccounts) {
            return aggregatorAccounts(Output.of(aggregatorAccounts));
        }

        /**
         * @param aggregatorAccounts The member accounts of the account group. See `aggregatorAccounts` below.
         * &gt; **NOTE:** If `aggregatorType` is set to `CUSTOM`, `aggregatorAccounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorAccounts(AggregatorAggregatorAccountArgs... aggregatorAccounts) {
            return aggregatorAccounts(List.of(aggregatorAccounts));
        }

        /**
         * @param aggregatorName The name of the account group.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorName(@Nullable Output<String> aggregatorName) {
            $.aggregatorName = aggregatorName;
            return this;
        }

        /**
         * @param aggregatorName The name of the account group.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorName(String aggregatorName) {
            return aggregatorName(Output.of(aggregatorName));
        }

        /**
         * @param aggregatorType The type of the account group. Default value: `CUSTOM`. Valid values:
         * - `RD`: Global account group.
         * - `FOLDER`: Folder account group.
         * - `CUSTOM`: Custom account group.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorType(@Nullable Output<String> aggregatorType) {
            $.aggregatorType = aggregatorType;
            return this;
        }

        /**
         * @param aggregatorType The type of the account group. Default value: `CUSTOM`. Valid values:
         * - `RD`: Global account group.
         * - `FOLDER`: Folder account group.
         * - `CUSTOM`: Custom account group.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorType(String aggregatorType) {
            return aggregatorType(Output.of(aggregatorType));
        }

        /**
         * @param createTime (Available since v1.262.0) The timestamp when the account group was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<Integer> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime (Available since v1.262.0) The timestamp when the account group was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(Integer createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description The description of the account group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the account group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param folderId The ID of the attached folder. You can specify multiple folder IDs. Separate the IDs with commas (,). **NOTE:** If `aggregatorType` is set to `FOLDER`, `folderId` is required.
         * 
         * @return builder
         * 
         */
        public Builder folderId(@Nullable Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        /**
         * @param folderId The ID of the attached folder. You can specify multiple folder IDs. Separate the IDs with commas (,). **NOTE:** If `aggregatorType` is set to `FOLDER`, `folderId` is required.
         * 
         * @return builder
         * 
         */
        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        /**
         * @param status The status of the account group.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the account group.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public AggregatorState build() {
            return $;
        }
    }

}
