// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3.outputs;

import com.pulumi.alicloud.wafv3.outputs.DomainRedirectRequestHeader;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainRedirect {
    /**
     * @return The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
     * 
     * - If you specify IP addresses, specify the value in the **\[&#34;ip1&#34;,&#34;ip2&#34;,...]** format. You can enter up to 20 IP addresses.
     * - If you specify domain names, specify the value in the **\[&#34;domain&#34;]** format. You can enter up to 20 domain names.
     * 
     */
    private @Nullable List<String> backends;
    /**
     * @return The secondary IP address or domain name of the origin server.
     * 
     */
    private @Nullable List<String> backupBackends;
    /**
     * @return Connection timeout duration. Unit: seconds.
     * Value range: 1~3600. Default value: 5.
     * 
     */
    private @Nullable Integer connectTimeout;
    /**
     * @return Specifies whether to enable force redirect from HTTPS to HTTP for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    private @Nullable Boolean focusHttpBackend;
    /**
     * @return Specifies whether to enable the persistent connection feature. Valid values:
     * 
     */
    private @Nullable Boolean keepalive;
    /**
     * @return The number of reused persistent connections. Valid values: 60 to 1000. Default value: 1000
     * 
     * &gt; **NOTE:**   This parameter specifies the number of persistent connections that can be reused after you enable the persistent connection feature.
     * 
     */
    private @Nullable Integer keepaliveRequests;
    /**
     * @return Idle long connection timeout, value range: 1~60, default 15, unit: seconds.
     * 
     * &gt; **NOTE:**  How long the multiplexed long connection is idle and then released.
     * 
     */
    private @Nullable Integer keepaliveTimeout;
    /**
     * @return The load balancing algorithm that you want to use to forward requests to the origin server. Valid values:
     * 
     */
    private String loadbalance;
    /**
     * @return The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
     * 
     */
    private @Nullable Integer readTimeout;
    /**
     * @return The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
     * By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `request_headers` below.
     * 
     */
    private @Nullable List<DomainRedirectRequestHeader> requestHeaders;
    /**
     * @return Specifies whether WAF retries if WAF fails to forward requests to the origin server. Valid values:
     * 
     */
    private @Nullable Boolean retry;
    /**
     * @return Specifies whether to enable the Server Name Indication (SNI) feature for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    private @Nullable Boolean sniEnabled;
    /**
     * @return The custom value of the SNI field. If you do not specify this parameter, the value of the `Host` header field is automatically used. In most cases, you do not need to specify a custom value for the SNI field. However, if you want WAF to use an SNI field whose value is different from the value of the Host header field in back-to-origin requests, you can specify a custom value for the SNI field.
     * 
     * &gt; **NOTE:**   This parameter is required only if you set `SniEnabled` to true.
     * 
     */
    private @Nullable String sniHost;
    /**
     * @return The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
     * 
     */
    private @Nullable Integer writeTimeout;
    /**
     * @return Specifies whether to use the X-Forward-For-Proto header field to pass the protocol used by WAF to forward requests to the origin server. Valid values:
     * 
     */
    private @Nullable Boolean xffProto;

    private DomainRedirect() {}
    /**
     * @return The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
     * 
     * - If you specify IP addresses, specify the value in the **\[&#34;ip1&#34;,&#34;ip2&#34;,...]** format. You can enter up to 20 IP addresses.
     * - If you specify domain names, specify the value in the **\[&#34;domain&#34;]** format. You can enter up to 20 domain names.
     * 
     */
    public List<String> backends() {
        return this.backends == null ? List.of() : this.backends;
    }
    /**
     * @return The secondary IP address or domain name of the origin server.
     * 
     */
    public List<String> backupBackends() {
        return this.backupBackends == null ? List.of() : this.backupBackends;
    }
    /**
     * @return Connection timeout duration. Unit: seconds.
     * Value range: 1~3600. Default value: 5.
     * 
     */
    public Optional<Integer> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }
    /**
     * @return Specifies whether to enable force redirect from HTTPS to HTTP for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    public Optional<Boolean> focusHttpBackend() {
        return Optional.ofNullable(this.focusHttpBackend);
    }
    /**
     * @return Specifies whether to enable the persistent connection feature. Valid values:
     * 
     */
    public Optional<Boolean> keepalive() {
        return Optional.ofNullable(this.keepalive);
    }
    /**
     * @return The number of reused persistent connections. Valid values: 60 to 1000. Default value: 1000
     * 
     * &gt; **NOTE:**   This parameter specifies the number of persistent connections that can be reused after you enable the persistent connection feature.
     * 
     */
    public Optional<Integer> keepaliveRequests() {
        return Optional.ofNullable(this.keepaliveRequests);
    }
    /**
     * @return Idle long connection timeout, value range: 1~60, default 15, unit: seconds.
     * 
     * &gt; **NOTE:**  How long the multiplexed long connection is idle and then released.
     * 
     */
    public Optional<Integer> keepaliveTimeout() {
        return Optional.ofNullable(this.keepaliveTimeout);
    }
    /**
     * @return The load balancing algorithm that you want to use to forward requests to the origin server. Valid values:
     * 
     */
    public String loadbalance() {
        return this.loadbalance;
    }
    /**
     * @return The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
     * 
     */
    public Optional<Integer> readTimeout() {
        return Optional.ofNullable(this.readTimeout);
    }
    /**
     * @return The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
     * By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `request_headers` below.
     * 
     */
    public List<DomainRedirectRequestHeader> requestHeaders() {
        return this.requestHeaders == null ? List.of() : this.requestHeaders;
    }
    /**
     * @return Specifies whether WAF retries if WAF fails to forward requests to the origin server. Valid values:
     * 
     */
    public Optional<Boolean> retry() {
        return Optional.ofNullable(this.retry);
    }
    /**
     * @return Specifies whether to enable the Server Name Indication (SNI) feature for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    public Optional<Boolean> sniEnabled() {
        return Optional.ofNullable(this.sniEnabled);
    }
    /**
     * @return The custom value of the SNI field. If you do not specify this parameter, the value of the `Host` header field is automatically used. In most cases, you do not need to specify a custom value for the SNI field. However, if you want WAF to use an SNI field whose value is different from the value of the Host header field in back-to-origin requests, you can specify a custom value for the SNI field.
     * 
     * &gt; **NOTE:**   This parameter is required only if you set `SniEnabled` to true.
     * 
     */
    public Optional<String> sniHost() {
        return Optional.ofNullable(this.sniHost);
    }
    /**
     * @return The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
     * 
     */
    public Optional<Integer> writeTimeout() {
        return Optional.ofNullable(this.writeTimeout);
    }
    /**
     * @return Specifies whether to use the X-Forward-For-Proto header field to pass the protocol used by WAF to forward requests to the origin server. Valid values:
     * 
     */
    public Optional<Boolean> xffProto() {
        return Optional.ofNullable(this.xffProto);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainRedirect defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> backends;
        private @Nullable List<String> backupBackends;
        private @Nullable Integer connectTimeout;
        private @Nullable Boolean focusHttpBackend;
        private @Nullable Boolean keepalive;
        private @Nullable Integer keepaliveRequests;
        private @Nullable Integer keepaliveTimeout;
        private String loadbalance;
        private @Nullable Integer readTimeout;
        private @Nullable List<DomainRedirectRequestHeader> requestHeaders;
        private @Nullable Boolean retry;
        private @Nullable Boolean sniEnabled;
        private @Nullable String sniHost;
        private @Nullable Integer writeTimeout;
        private @Nullable Boolean xffProto;
        public Builder() {}
        public Builder(DomainRedirect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backends = defaults.backends;
    	      this.backupBackends = defaults.backupBackends;
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.focusHttpBackend = defaults.focusHttpBackend;
    	      this.keepalive = defaults.keepalive;
    	      this.keepaliveRequests = defaults.keepaliveRequests;
    	      this.keepaliveTimeout = defaults.keepaliveTimeout;
    	      this.loadbalance = defaults.loadbalance;
    	      this.readTimeout = defaults.readTimeout;
    	      this.requestHeaders = defaults.requestHeaders;
    	      this.retry = defaults.retry;
    	      this.sniEnabled = defaults.sniEnabled;
    	      this.sniHost = defaults.sniHost;
    	      this.writeTimeout = defaults.writeTimeout;
    	      this.xffProto = defaults.xffProto;
        }

        @CustomType.Setter
        public Builder backends(@Nullable List<String> backends) {

            this.backends = backends;
            return this;
        }
        public Builder backends(String... backends) {
            return backends(List.of(backends));
        }
        @CustomType.Setter
        public Builder backupBackends(@Nullable List<String> backupBackends) {

            this.backupBackends = backupBackends;
            return this;
        }
        public Builder backupBackends(String... backupBackends) {
            return backupBackends(List.of(backupBackends));
        }
        @CustomType.Setter
        public Builder connectTimeout(@Nullable Integer connectTimeout) {

            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder focusHttpBackend(@Nullable Boolean focusHttpBackend) {

            this.focusHttpBackend = focusHttpBackend;
            return this;
        }
        @CustomType.Setter
        public Builder keepalive(@Nullable Boolean keepalive) {

            this.keepalive = keepalive;
            return this;
        }
        @CustomType.Setter
        public Builder keepaliveRequests(@Nullable Integer keepaliveRequests) {

            this.keepaliveRequests = keepaliveRequests;
            return this;
        }
        @CustomType.Setter
        public Builder keepaliveTimeout(@Nullable Integer keepaliveTimeout) {

            this.keepaliveTimeout = keepaliveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder loadbalance(String loadbalance) {
            if (loadbalance == null) {
              throw new MissingRequiredPropertyException("DomainRedirect", "loadbalance");
            }
            this.loadbalance = loadbalance;
            return this;
        }
        @CustomType.Setter
        public Builder readTimeout(@Nullable Integer readTimeout) {

            this.readTimeout = readTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder requestHeaders(@Nullable List<DomainRedirectRequestHeader> requestHeaders) {

            this.requestHeaders = requestHeaders;
            return this;
        }
        public Builder requestHeaders(DomainRedirectRequestHeader... requestHeaders) {
            return requestHeaders(List.of(requestHeaders));
        }
        @CustomType.Setter
        public Builder retry(@Nullable Boolean retry) {

            this.retry = retry;
            return this;
        }
        @CustomType.Setter
        public Builder sniEnabled(@Nullable Boolean sniEnabled) {

            this.sniEnabled = sniEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder sniHost(@Nullable String sniHost) {

            this.sniHost = sniHost;
            return this;
        }
        @CustomType.Setter
        public Builder writeTimeout(@Nullable Integer writeTimeout) {

            this.writeTimeout = writeTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder xffProto(@Nullable Boolean xffProto) {

            this.xffProto = xffProto;
            return this;
        }
        public DomainRedirect build() {
            final var _resultValue = new DomainRedirect();
            _resultValue.backends = backends;
            _resultValue.backupBackends = backupBackends;
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.focusHttpBackend = focusHttpBackend;
            _resultValue.keepalive = keepalive;
            _resultValue.keepaliveRequests = keepaliveRequests;
            _resultValue.keepaliveTimeout = keepaliveTimeout;
            _resultValue.loadbalance = loadbalance;
            _resultValue.readTimeout = readTimeout;
            _resultValue.requestHeaders = requestHeaders;
            _resultValue.retry = retry;
            _resultValue.sniEnabled = sniEnabled;
            _resultValue.sniHost = sniHost;
            _resultValue.writeTimeout = writeTimeout;
            _resultValue.xffProto = xffProto;
            return _resultValue;
        }
    }
}
