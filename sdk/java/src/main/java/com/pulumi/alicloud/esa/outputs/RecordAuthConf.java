// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RecordAuthConf {
    /**
     * @return The access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.
     * 
     */
    private @Nullable String accessKey;
    /**
     * @return The authentication type of the origin server. Different origins support different authentication types. The type of origin refers to the SourceType parameter in this operation. If the type of origin is OSS or S3, you must specify the authentication type of the origin. Valid values:
     * 
     */
    private @Nullable String authType;
    /**
     * @return The version of the signature algorithm. This parameter is required when the origin type is S3 and AuthType is private. The following two types are supported:
     * 
     */
    private @Nullable String region;
    /**
     * @return The secret access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.
     * 
     */
    private @Nullable String secretKey;
    /**
     * @return The region of the origin. If the origin type is S3, you must specify this value. You can get the region information from the official website of S3.
     * 
     */
    private @Nullable String version;

    private RecordAuthConf() {}
    /**
     * @return The access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.
     * 
     */
    public Optional<String> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }
    /**
     * @return The authentication type of the origin server. Different origins support different authentication types. The type of origin refers to the SourceType parameter in this operation. If the type of origin is OSS or S3, you must specify the authentication type of the origin. Valid values:
     * 
     */
    public Optional<String> authType() {
        return Optional.ofNullable(this.authType);
    }
    /**
     * @return The version of the signature algorithm. This parameter is required when the origin type is S3 and AuthType is private. The following two types are supported:
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return The secret access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.
     * 
     */
    public Optional<String> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }
    /**
     * @return The region of the origin. If the origin type is S3, you must specify this value. You can get the region information from the official website of S3.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecordAuthConf defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessKey;
        private @Nullable String authType;
        private @Nullable String region;
        private @Nullable String secretKey;
        private @Nullable String version;
        public Builder() {}
        public Builder(RecordAuthConf defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKey = defaults.accessKey;
    	      this.authType = defaults.authType;
    	      this.region = defaults.region;
    	      this.secretKey = defaults.secretKey;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder accessKey(@Nullable String accessKey) {

            this.accessKey = accessKey;
            return this;
        }
        @CustomType.Setter
        public Builder authType(@Nullable String authType) {

            this.authType = authType;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(@Nullable String secretKey) {

            this.secretKey = secretKey;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {

            this.version = version;
            return this;
        }
        public RecordAuthConf build() {
            final var _resultValue = new RecordAuthConf();
            _resultValue.accessKey = accessKey;
            _resultValue.authType = authType;
            _resultValue.region = region;
            _resultValue.secretKey = secretKey;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
