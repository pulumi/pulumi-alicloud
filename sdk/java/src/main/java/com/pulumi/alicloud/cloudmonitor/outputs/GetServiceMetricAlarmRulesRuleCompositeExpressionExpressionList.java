// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudmonitor.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceMetricAlarmRulesRuleCompositeExpressionExpressionList {
    /**
     * @return The comparison operator that is used to compare the metric value with the threshold.
     * 
     */
    private String comparisonOperator;
    /**
     * @return The name of the metric.
     * 
     */
    private String metricName;
    /**
     * @return The aggregation period of the metric.
     * 
     */
    private Integer period;
    /**
     * @return The statistical methods for Warn-level alerts.
     * 
     */
    private String statistics;
    /**
     * @return The threshold for Warn-level alerts.
     * 
     */
    private String threshold;

    private GetServiceMetricAlarmRulesRuleCompositeExpressionExpressionList() {}
    /**
     * @return The comparison operator that is used to compare the metric value with the threshold.
     * 
     */
    public String comparisonOperator() {
        return this.comparisonOperator;
    }
    /**
     * @return The name of the metric.
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return The aggregation period of the metric.
     * 
     */
    public Integer period() {
        return this.period;
    }
    /**
     * @return The statistical methods for Warn-level alerts.
     * 
     */
    public String statistics() {
        return this.statistics;
    }
    /**
     * @return The threshold for Warn-level alerts.
     * 
     */
    public String threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceMetricAlarmRulesRuleCompositeExpressionExpressionList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comparisonOperator;
        private String metricName;
        private Integer period;
        private String statistics;
        private String threshold;
        public Builder() {}
        public Builder(GetServiceMetricAlarmRulesRuleCompositeExpressionExpressionList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comparisonOperator = defaults.comparisonOperator;
    	      this.metricName = defaults.metricName;
    	      this.period = defaults.period;
    	      this.statistics = defaults.statistics;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder comparisonOperator(String comparisonOperator) {
            if (comparisonOperator == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRuleCompositeExpressionExpressionList", "comparisonOperator");
            }
            this.comparisonOperator = comparisonOperator;
            return this;
        }
        @CustomType.Setter
        public Builder metricName(String metricName) {
            if (metricName == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRuleCompositeExpressionExpressionList", "metricName");
            }
            this.metricName = metricName;
            return this;
        }
        @CustomType.Setter
        public Builder period(Integer period) {
            if (period == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRuleCompositeExpressionExpressionList", "period");
            }
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder statistics(String statistics) {
            if (statistics == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRuleCompositeExpressionExpressionList", "statistics");
            }
            this.statistics = statistics;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(String threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetServiceMetricAlarmRulesRuleCompositeExpressionExpressionList", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        public GetServiceMetricAlarmRulesRuleCompositeExpressionExpressionList build() {
            final var _resultValue = new GetServiceMetricAlarmRulesRuleCompositeExpressionExpressionList();
            _resultValue.comparisonOperator = comparisonOperator;
            _resultValue.metricName = metricName;
            _resultValue.period = period;
            _resultValue.statistics = statistics;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
