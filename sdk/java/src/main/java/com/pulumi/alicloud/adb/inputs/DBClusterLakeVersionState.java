// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.adb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DBClusterLakeVersionState extends com.pulumi.resources.ResourceArgs {

    public static final DBClusterLakeVersionState Empty = new DBClusterLakeVersionState();

    /**
     * The ID of the backup set that you want to use to restore data.
     * 
     */
    @Import(name="backupSetId")
    private @Nullable Output<String> backupSetId;

    /**
     * @return The ID of the backup set that you want to use to restore data.
     * 
     */
    public Optional<Output<String>> backupSetId() {
        return Optional.ofNullable(this.backupSetId);
    }

    /**
     * The name of the service.
     * 
     */
    @Import(name="commodityCode")
    private @Nullable Output<String> commodityCode;

    /**
     * @return The name of the service.
     * 
     */
    public Optional<Output<String>> commodityCode() {
        return Optional.ofNullable(this.commodityCode);
    }

    /**
     * The computing resources of the cluster.
     * 
     */
    @Import(name="computeResource")
    private @Nullable Output<String> computeResource;

    /**
     * @return The computing resources of the cluster.
     * 
     */
    public Optional<Output<String>> computeResource() {
        return Optional.ofNullable(this.computeResource);
    }

    /**
     * The endpoint of the cluster.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Output<String> connectionString;

    /**
     * @return The endpoint of the cluster.
     * 
     */
    public Optional<Output<String>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * The createTime of the cluster.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The createTime of the cluster.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The description of the cluster.
     * 
     */
    @Import(name="dbClusterDescription")
    private @Nullable Output<String> dbClusterDescription;

    /**
     * @return The description of the cluster.
     * 
     */
    public Optional<Output<String>> dbClusterDescription() {
        return Optional.ofNullable(this.dbClusterDescription);
    }

    /**
     * The version of the cluster. Valid values: `5.0`.
     * 
     */
    @Import(name="dbClusterVersion")
    private @Nullable Output<String> dbClusterVersion;

    /**
     * @return The version of the cluster. Valid values: `5.0`.
     * 
     */
    public Optional<Output<String>> dbClusterVersion() {
        return Optional.ofNullable(this.dbClusterVersion);
    }

    /**
     * Whether to enable default allocation of resources to user_default resource groups.
     * 
     */
    @Import(name="enableDefaultResourceGroup")
    private @Nullable Output<Boolean> enableDefaultResourceGroup;

    /**
     * @return Whether to enable default allocation of resources to user_default resource groups.
     * 
     */
    public Optional<Output<Boolean>> enableDefaultResourceGroup() {
        return Optional.ofNullable(this.enableDefaultResourceGroup);
    }

    /**
     * The engine of the database.
     * 
     */
    @Import(name="engine")
    private @Nullable Output<String> engine;

    /**
     * @return The engine of the database.
     * 
     */
    public Optional<Output<String>> engine() {
        return Optional.ofNullable(this.engine);
    }

    /**
     * The engine version of the database.
     * 
     */
    @Import(name="engineVersion")
    private @Nullable Output<String> engineVersion;

    /**
     * @return The engine version of the database.
     * 
     */
    public Optional<Output<String>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    /**
     * The time when the cluster expires.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    /**
     * @return The time when the cluster expires.
     * 
     */
    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * Indicates whether the cluster has expired.
     * 
     */
    @Import(name="expired")
    private @Nullable Output<String> expired;

    /**
     * @return Indicates whether the cluster has expired.
     * 
     */
    public Optional<Output<String>> expired() {
        return Optional.ofNullable(this.expired);
    }

    /**
     * The lock mode of the cluster.
     * 
     */
    @Import(name="lockMode")
    private @Nullable Output<String> lockMode;

    /**
     * @return The lock mode of the cluster.
     * 
     */
    public Optional<Output<String>> lockMode() {
        return Optional.ofNullable(this.lockMode);
    }

    /**
     * The reason why the cluster is locked.
     * 
     */
    @Import(name="lockReason")
    private @Nullable Output<String> lockReason;

    /**
     * @return The reason why the cluster is locked.
     * 
     */
    public Optional<Output<String>> lockReason() {
        return Optional.ofNullable(this.lockReason);
    }

    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * The port that is used to access the cluster.
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return The port that is used to access the cluster.
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The point in time to which you want to restore data from the backup set.
     * 
     */
    @Import(name="restoreToTime")
    private @Nullable Output<String> restoreToTime;

    /**
     * @return The point in time to which you want to restore data from the backup set.
     * 
     */
    public Optional<Output<String>> restoreToTime() {
        return Optional.ofNullable(this.restoreToTime);
    }

    /**
     * The method that you want to use to restore data. Valid values:
     * 
     */
    @Import(name="restoreType")
    private @Nullable Output<String> restoreType;

    /**
     * @return The method that you want to use to restore data. Valid values:
     * 
     */
    public Optional<Output<String>> restoreType() {
        return Optional.ofNullable(this.restoreType);
    }

    /**
     * The IP addresses in an IP address whitelist of a cluster. Separate multiple IP addresses with commas (,). You can add a maximum of 500 different IP addresses to a whitelist. The entries in the IP address whitelist must be in one of the following formats:
     * - IP addresses, such as 10.23.XX.XX.
     * - CIDR blocks, such as 10.23.xx.xx/24. In this example, 24 indicates that the prefix of each IP address in the IP whitelist is 24 bits in length. You can replace 24 with a value within the range of 1 to 32.
     * 
     */
    @Import(name="securityIps")
    private @Nullable Output<String> securityIps;

    /**
     * @return The IP addresses in an IP address whitelist of a cluster. Separate multiple IP addresses with commas (,). You can add a maximum of 500 different IP addresses to a whitelist. The entries in the IP address whitelist must be in one of the following formats:
     * - IP addresses, such as 10.23.XX.XX.
     * - CIDR blocks, such as 10.23.xx.xx/24. In this example, 24 indicates that the prefix of each IP address in the IP whitelist is 24 bits in length. You can replace 24 with a value within the range of 1 to 32.
     * 
     */
    public Optional<Output<String>> securityIps() {
        return Optional.ofNullable(this.securityIps);
    }

    /**
     * The ID of the source AnalyticDB for MySQL Data Warehouse Edition cluster.
     * 
     */
    @Import(name="sourceDbClusterId")
    private @Nullable Output<String> sourceDbClusterId;

    /**
     * @return The ID of the source AnalyticDB for MySQL Data Warehouse Edition cluster.
     * 
     */
    public Optional<Output<String>> sourceDbClusterId() {
        return Optional.ofNullable(this.sourceDbClusterId);
    }

    /**
     * The status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The storage resources of the cluster.
     * 
     */
    @Import(name="storageResource")
    private @Nullable Output<String> storageResource;

    /**
     * @return The storage resources of the cluster.
     * 
     */
    public Optional<Output<String>> storageResource() {
        return Optional.ofNullable(this.storageResource);
    }

    /**
     * The vpc ID of the resource.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The vpc ID of the resource.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The ID of the vSwitch.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of the vSwitch.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    /**
     * The zone ID of the resource.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone ID of the resource.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private DBClusterLakeVersionState() {}

    private DBClusterLakeVersionState(DBClusterLakeVersionState $) {
        this.backupSetId = $.backupSetId;
        this.commodityCode = $.commodityCode;
        this.computeResource = $.computeResource;
        this.connectionString = $.connectionString;
        this.createTime = $.createTime;
        this.dbClusterDescription = $.dbClusterDescription;
        this.dbClusterVersion = $.dbClusterVersion;
        this.enableDefaultResourceGroup = $.enableDefaultResourceGroup;
        this.engine = $.engine;
        this.engineVersion = $.engineVersion;
        this.expireTime = $.expireTime;
        this.expired = $.expired;
        this.lockMode = $.lockMode;
        this.lockReason = $.lockReason;
        this.paymentType = $.paymentType;
        this.port = $.port;
        this.resourceGroupId = $.resourceGroupId;
        this.restoreToTime = $.restoreToTime;
        this.restoreType = $.restoreType;
        this.securityIps = $.securityIps;
        this.sourceDbClusterId = $.sourceDbClusterId;
        this.status = $.status;
        this.storageResource = $.storageResource;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DBClusterLakeVersionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DBClusterLakeVersionState $;

        public Builder() {
            $ = new DBClusterLakeVersionState();
        }

        public Builder(DBClusterLakeVersionState defaults) {
            $ = new DBClusterLakeVersionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupSetId The ID of the backup set that you want to use to restore data.
         * 
         * @return builder
         * 
         */
        public Builder backupSetId(@Nullable Output<String> backupSetId) {
            $.backupSetId = backupSetId;
            return this;
        }

        /**
         * @param backupSetId The ID of the backup set that you want to use to restore data.
         * 
         * @return builder
         * 
         */
        public Builder backupSetId(String backupSetId) {
            return backupSetId(Output.of(backupSetId));
        }

        /**
         * @param commodityCode The name of the service.
         * 
         * @return builder
         * 
         */
        public Builder commodityCode(@Nullable Output<String> commodityCode) {
            $.commodityCode = commodityCode;
            return this;
        }

        /**
         * @param commodityCode The name of the service.
         * 
         * @return builder
         * 
         */
        public Builder commodityCode(String commodityCode) {
            return commodityCode(Output.of(commodityCode));
        }

        /**
         * @param computeResource The computing resources of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder computeResource(@Nullable Output<String> computeResource) {
            $.computeResource = computeResource;
            return this;
        }

        /**
         * @param computeResource The computing resources of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder computeResource(String computeResource) {
            return computeResource(Output.of(computeResource));
        }

        /**
         * @param connectionString The endpoint of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(@Nullable Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        /**
         * @param connectionString The endpoint of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        /**
         * @param createTime The createTime of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The createTime of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dbClusterDescription The description of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterDescription(@Nullable Output<String> dbClusterDescription) {
            $.dbClusterDescription = dbClusterDescription;
            return this;
        }

        /**
         * @param dbClusterDescription The description of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterDescription(String dbClusterDescription) {
            return dbClusterDescription(Output.of(dbClusterDescription));
        }

        /**
         * @param dbClusterVersion The version of the cluster. Valid values: `5.0`.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterVersion(@Nullable Output<String> dbClusterVersion) {
            $.dbClusterVersion = dbClusterVersion;
            return this;
        }

        /**
         * @param dbClusterVersion The version of the cluster. Valid values: `5.0`.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterVersion(String dbClusterVersion) {
            return dbClusterVersion(Output.of(dbClusterVersion));
        }

        /**
         * @param enableDefaultResourceGroup Whether to enable default allocation of resources to user_default resource groups.
         * 
         * @return builder
         * 
         */
        public Builder enableDefaultResourceGroup(@Nullable Output<Boolean> enableDefaultResourceGroup) {
            $.enableDefaultResourceGroup = enableDefaultResourceGroup;
            return this;
        }

        /**
         * @param enableDefaultResourceGroup Whether to enable default allocation of resources to user_default resource groups.
         * 
         * @return builder
         * 
         */
        public Builder enableDefaultResourceGroup(Boolean enableDefaultResourceGroup) {
            return enableDefaultResourceGroup(Output.of(enableDefaultResourceGroup));
        }

        /**
         * @param engine The engine of the database.
         * 
         * @return builder
         * 
         */
        public Builder engine(@Nullable Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine The engine of the database.
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param engineVersion The engine version of the database.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        /**
         * @param engineVersion The engine version of the database.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        /**
         * @param expireTime The time when the cluster expires.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        /**
         * @param expireTime The time when the cluster expires.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        /**
         * @param expired Indicates whether the cluster has expired.
         * 
         * @return builder
         * 
         */
        public Builder expired(@Nullable Output<String> expired) {
            $.expired = expired;
            return this;
        }

        /**
         * @param expired Indicates whether the cluster has expired.
         * 
         * @return builder
         * 
         */
        public Builder expired(String expired) {
            return expired(Output.of(expired));
        }

        /**
         * @param lockMode The lock mode of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder lockMode(@Nullable Output<String> lockMode) {
            $.lockMode = lockMode;
            return this;
        }

        /**
         * @param lockMode The lock mode of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder lockMode(String lockMode) {
            return lockMode(Output.of(lockMode));
        }

        /**
         * @param lockReason The reason why the cluster is locked.
         * 
         * @return builder
         * 
         */
        public Builder lockReason(@Nullable Output<String> lockReason) {
            $.lockReason = lockReason;
            return this;
        }

        /**
         * @param lockReason The reason why the cluster is locked.
         * 
         * @return builder
         * 
         */
        public Builder lockReason(String lockReason) {
            return lockReason(Output.of(lockReason));
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param port The port that is used to access the cluster.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port that is used to access the cluster.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param restoreToTime The point in time to which you want to restore data from the backup set.
         * 
         * @return builder
         * 
         */
        public Builder restoreToTime(@Nullable Output<String> restoreToTime) {
            $.restoreToTime = restoreToTime;
            return this;
        }

        /**
         * @param restoreToTime The point in time to which you want to restore data from the backup set.
         * 
         * @return builder
         * 
         */
        public Builder restoreToTime(String restoreToTime) {
            return restoreToTime(Output.of(restoreToTime));
        }

        /**
         * @param restoreType The method that you want to use to restore data. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder restoreType(@Nullable Output<String> restoreType) {
            $.restoreType = restoreType;
            return this;
        }

        /**
         * @param restoreType The method that you want to use to restore data. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder restoreType(String restoreType) {
            return restoreType(Output.of(restoreType));
        }

        /**
         * @param securityIps The IP addresses in an IP address whitelist of a cluster. Separate multiple IP addresses with commas (,). You can add a maximum of 500 different IP addresses to a whitelist. The entries in the IP address whitelist must be in one of the following formats:
         * - IP addresses, such as 10.23.XX.XX.
         * - CIDR blocks, such as 10.23.xx.xx/24. In this example, 24 indicates that the prefix of each IP address in the IP whitelist is 24 bits in length. You can replace 24 with a value within the range of 1 to 32.
         * 
         * @return builder
         * 
         */
        public Builder securityIps(@Nullable Output<String> securityIps) {
            $.securityIps = securityIps;
            return this;
        }

        /**
         * @param securityIps The IP addresses in an IP address whitelist of a cluster. Separate multiple IP addresses with commas (,). You can add a maximum of 500 different IP addresses to a whitelist. The entries in the IP address whitelist must be in one of the following formats:
         * - IP addresses, such as 10.23.XX.XX.
         * - CIDR blocks, such as 10.23.xx.xx/24. In this example, 24 indicates that the prefix of each IP address in the IP whitelist is 24 bits in length. You can replace 24 with a value within the range of 1 to 32.
         * 
         * @return builder
         * 
         */
        public Builder securityIps(String securityIps) {
            return securityIps(Output.of(securityIps));
        }

        /**
         * @param sourceDbClusterId The ID of the source AnalyticDB for MySQL Data Warehouse Edition cluster.
         * 
         * @return builder
         * 
         */
        public Builder sourceDbClusterId(@Nullable Output<String> sourceDbClusterId) {
            $.sourceDbClusterId = sourceDbClusterId;
            return this;
        }

        /**
         * @param sourceDbClusterId The ID of the source AnalyticDB for MySQL Data Warehouse Edition cluster.
         * 
         * @return builder
         * 
         */
        public Builder sourceDbClusterId(String sourceDbClusterId) {
            return sourceDbClusterId(Output.of(sourceDbClusterId));
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param storageResource The storage resources of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder storageResource(@Nullable Output<String> storageResource) {
            $.storageResource = storageResource;
            return this;
        }

        /**
         * @param storageResource The storage resources of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder storageResource(String storageResource) {
            return storageResource(Output.of(storageResource));
        }

        /**
         * @param vpcId The vpc ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The vpc ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of the vSwitch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the vSwitch.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The zone ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public DBClusterLakeVersionState build() {
            return $;
        }
    }

}
