// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.starrocks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodeGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeGroupArgs Empty = new NodeGroupArgs();

    /**
     * Whether auto-renewal is enabled.
     * 
     * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Whether auto-renewal is enabled.
     * 
     * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
     * 
     */
    @Import(name="cu")
    private @Nullable Output<Integer> cu;

    /**
     * @return Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
     * 
     */
    public Optional<Output<Integer>> cu() {
        return Optional.ofNullable(this.cu);
    }

    /**
     * Description of node group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of node group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Number of disks.
     * 
     */
    @Import(name="diskNumber")
    private @Nullable Output<Integer> diskNumber;

    /**
     * @return Number of disks.
     * 
     */
    public Optional<Output<Integer>> diskNumber() {
        return Optional.ofNullable(this.diskNumber);
    }

    /**
     * Duration of node group.
     * 
     * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return Duration of node group.
     * 
     * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * Whether to restart in fast restart mode. The default is false.
     * - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
     * - false: Restarts the compute node in rolling restart mode.
     * 
     * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     * 
     */
    @Import(name="fastMode")
    private @Nullable Output<Boolean> fastMode;

    /**
     * @return Whether to restart in fast restart mode. The default is false.
     * - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
     * - false: Restarts the compute node in rolling restart mode.
     * 
     * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     * 
     */
    public Optional<Output<Boolean>> fastMode() {
        return Optional.ofNullable(this.fastMode);
    }

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
     * 
     */
    @Import(name="localStorageInstanceType")
    private @Nullable Output<String> localStorageInstanceType;

    /**
     * @return Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
     * 
     */
    public Optional<Output<String>> localStorageInstanceType() {
        return Optional.ofNullable(this.localStorageInstanceType);
    }

    /**
     * The name of the node group.
     * 
     */
    @Import(name="nodeGroupName")
    private @Nullable Output<String> nodeGroupName;

    /**
     * @return The name of the node group.
     * 
     */
    public Optional<Output<String>> nodeGroupName() {
        return Optional.ofNullable(this.nodeGroupName);
    }

    /**
     * Payment type:
     * - PrePaid: Subscription (prepaid).
     * - PostPaid: Pay-as-you-go (postpaid).
     * 
     */
    @Import(name="payType")
    private @Nullable Output<String> payType;

    /**
     * @return Payment type:
     * - PrePaid: Subscription (prepaid).
     * - PostPaid: Pay-as-you-go (postpaid).
     * 
     */
    public Optional<Output<String>> payType() {
        return Optional.ofNullable(this.payType);
    }

    /**
     * Unit of purchase duration:
     * - Month
     * - Year
     * 
     * This is only applicable when payType is set to PrePaid.
     * 
     * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     * 
     */
    @Import(name="pricingCycle")
    private @Nullable Output<String> pricingCycle;

    /**
     * @return Unit of purchase duration:
     * - Month
     * - Year
     * 
     * This is only applicable when payType is set to PrePaid.
     * 
     * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
     * 
     */
    public Optional<Output<String>> pricingCycle() {
        return Optional.ofNullable(this.pricingCycle);
    }

    @Import(name="promotionOptionNo")
    private @Nullable Output<String> promotionOptionNo;

    public Optional<Output<String>> promotionOptionNo() {
        return Optional.ofNullable(this.promotionOptionNo);
    }

    /**
     * Number of nodes.
     * 
     */
    @Import(name="residentNodeNumber")
    private @Nullable Output<Integer> residentNodeNumber;

    /**
     * @return Number of nodes.
     * 
     */
    public Optional<Output<Integer>> residentNodeNumber() {
        return Optional.ofNullable(this.residentNodeNumber);
    }

    /**
     * Node group spec types include the following:
     * - standard: Standard edition.
     * - localSSD: Local SSD.
     * - bigData: Large-scale storage.
     * - ramEnhanced: Memory-enhanced type.
     * - networkEnhanced: Network-enhanced type.
     * 
     */
    @Import(name="specType")
    private @Nullable Output<String> specType;

    /**
     * @return Node group spec types include the following:
     * - standard: Standard edition.
     * - localSSD: Local SSD.
     * - bigData: Large-scale storage.
     * - ramEnhanced: Memory-enhanced type.
     * - networkEnhanced: Network-enhanced type.
     * 
     */
    public Optional<Output<String>> specType() {
        return Optional.ofNullable(this.specType);
    }

    /**
     * Performance levels of the cloud disk. Includes the following values:
     * - pl0: Maximum random read/write IOPS of a single disk is 10,000.
     * - pl1: Maximum random read/write IOPS of a single disk is 50,000.
     * - pl2: Maximum random read/write IOPS of a single disk is 100,000.
     * - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
     * 
     */
    @Import(name="storagePerformanceLevel")
    private @Nullable Output<String> storagePerformanceLevel;

    /**
     * @return Performance levels of the cloud disk. Includes the following values:
     * - pl0: Maximum random read/write IOPS of a single disk is 10,000.
     * - pl1: Maximum random read/write IOPS of a single disk is 50,000.
     * - pl2: Maximum random read/write IOPS of a single disk is 100,000.
     * - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
     * 
     */
    public Optional<Output<String>> storagePerformanceLevel() {
        return Optional.ofNullable(this.storagePerformanceLevel);
    }

    /**
     * Storage size, measured in GiB.
     * 
     */
    @Import(name="storageSize")
    private @Nullable Output<Integer> storageSize;

    /**
     * @return Storage size, measured in GiB.
     * 
     */
    public Optional<Output<Integer>> storageSize() {
        return Optional.ofNullable(this.storageSize);
    }

    private NodeGroupArgs() {}

    private NodeGroupArgs(NodeGroupArgs $) {
        this.autoRenew = $.autoRenew;
        this.cu = $.cu;
        this.description = $.description;
        this.diskNumber = $.diskNumber;
        this.duration = $.duration;
        this.fastMode = $.fastMode;
        this.instanceId = $.instanceId;
        this.localStorageInstanceType = $.localStorageInstanceType;
        this.nodeGroupName = $.nodeGroupName;
        this.payType = $.payType;
        this.pricingCycle = $.pricingCycle;
        this.promotionOptionNo = $.promotionOptionNo;
        this.residentNodeNumber = $.residentNodeNumber;
        this.specType = $.specType;
        this.storagePerformanceLevel = $.storagePerformanceLevel;
        this.storageSize = $.storageSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeGroupArgs $;

        public Builder() {
            $ = new NodeGroupArgs();
        }

        public Builder(NodeGroupArgs defaults) {
            $ = new NodeGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRenew Whether auto-renewal is enabled.
         * 
         * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Whether auto-renewal is enabled.
         * 
         * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param cu Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
         * 
         * @return builder
         * 
         */
        public Builder cu(@Nullable Output<Integer> cu) {
            $.cu = cu;
            return this;
        }

        /**
         * @param cu Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
         * 
         * @return builder
         * 
         */
        public Builder cu(Integer cu) {
            return cu(Output.of(cu));
        }

        /**
         * @param description Description of node group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of node group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diskNumber Number of disks.
         * 
         * @return builder
         * 
         */
        public Builder diskNumber(@Nullable Output<Integer> diskNumber) {
            $.diskNumber = diskNumber;
            return this;
        }

        /**
         * @param diskNumber Number of disks.
         * 
         * @return builder
         * 
         */
        public Builder diskNumber(Integer diskNumber) {
            return diskNumber(Output.of(diskNumber));
        }

        /**
         * @param duration Duration of node group.
         * 
         * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration Duration of node group.
         * 
         * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param fastMode Whether to restart in fast restart mode. The default is false.
         * - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
         * - false: Restarts the compute node in rolling restart mode.
         * 
         * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
         * 
         * @return builder
         * 
         */
        public Builder fastMode(@Nullable Output<Boolean> fastMode) {
            $.fastMode = fastMode;
            return this;
        }

        /**
         * @param fastMode Whether to restart in fast restart mode. The default is false.
         * - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
         * - false: Restarts the compute node in rolling restart mode.
         * 
         * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
         * 
         * @return builder
         * 
         */
        public Builder fastMode(Boolean fastMode) {
            return fastMode(Output.of(fastMode));
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param localStorageInstanceType Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
         * 
         * @return builder
         * 
         */
        public Builder localStorageInstanceType(@Nullable Output<String> localStorageInstanceType) {
            $.localStorageInstanceType = localStorageInstanceType;
            return this;
        }

        /**
         * @param localStorageInstanceType Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
         * 
         * @return builder
         * 
         */
        public Builder localStorageInstanceType(String localStorageInstanceType) {
            return localStorageInstanceType(Output.of(localStorageInstanceType));
        }

        /**
         * @param nodeGroupName The name of the node group.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupName(@Nullable Output<String> nodeGroupName) {
            $.nodeGroupName = nodeGroupName;
            return this;
        }

        /**
         * @param nodeGroupName The name of the node group.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupName(String nodeGroupName) {
            return nodeGroupName(Output.of(nodeGroupName));
        }

        /**
         * @param payType Payment type:
         * - PrePaid: Subscription (prepaid).
         * - PostPaid: Pay-as-you-go (postpaid).
         * 
         * @return builder
         * 
         */
        public Builder payType(@Nullable Output<String> payType) {
            $.payType = payType;
            return this;
        }

        /**
         * @param payType Payment type:
         * - PrePaid: Subscription (prepaid).
         * - PostPaid: Pay-as-you-go (postpaid).
         * 
         * @return builder
         * 
         */
        public Builder payType(String payType) {
            return payType(Output.of(payType));
        }

        /**
         * @param pricingCycle Unit of purchase duration:
         * - Month
         * - Year
         * 
         * This is only applicable when payType is set to PrePaid.
         * 
         * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(@Nullable Output<String> pricingCycle) {
            $.pricingCycle = pricingCycle;
            return this;
        }

        /**
         * @param pricingCycle Unit of purchase duration:
         * - Month
         * - Year
         * 
         * This is only applicable when payType is set to PrePaid.
         * 
         * &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(String pricingCycle) {
            return pricingCycle(Output.of(pricingCycle));
        }

        public Builder promotionOptionNo(@Nullable Output<String> promotionOptionNo) {
            $.promotionOptionNo = promotionOptionNo;
            return this;
        }

        public Builder promotionOptionNo(String promotionOptionNo) {
            return promotionOptionNo(Output.of(promotionOptionNo));
        }

        /**
         * @param residentNodeNumber Number of nodes.
         * 
         * @return builder
         * 
         */
        public Builder residentNodeNumber(@Nullable Output<Integer> residentNodeNumber) {
            $.residentNodeNumber = residentNodeNumber;
            return this;
        }

        /**
         * @param residentNodeNumber Number of nodes.
         * 
         * @return builder
         * 
         */
        public Builder residentNodeNumber(Integer residentNodeNumber) {
            return residentNodeNumber(Output.of(residentNodeNumber));
        }

        /**
         * @param specType Node group spec types include the following:
         * - standard: Standard edition.
         * - localSSD: Local SSD.
         * - bigData: Large-scale storage.
         * - ramEnhanced: Memory-enhanced type.
         * - networkEnhanced: Network-enhanced type.
         * 
         * @return builder
         * 
         */
        public Builder specType(@Nullable Output<String> specType) {
            $.specType = specType;
            return this;
        }

        /**
         * @param specType Node group spec types include the following:
         * - standard: Standard edition.
         * - localSSD: Local SSD.
         * - bigData: Large-scale storage.
         * - ramEnhanced: Memory-enhanced type.
         * - networkEnhanced: Network-enhanced type.
         * 
         * @return builder
         * 
         */
        public Builder specType(String specType) {
            return specType(Output.of(specType));
        }

        /**
         * @param storagePerformanceLevel Performance levels of the cloud disk. Includes the following values:
         * - pl0: Maximum random read/write IOPS of a single disk is 10,000.
         * - pl1: Maximum random read/write IOPS of a single disk is 50,000.
         * - pl2: Maximum random read/write IOPS of a single disk is 100,000.
         * - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
         * 
         * @return builder
         * 
         */
        public Builder storagePerformanceLevel(@Nullable Output<String> storagePerformanceLevel) {
            $.storagePerformanceLevel = storagePerformanceLevel;
            return this;
        }

        /**
         * @param storagePerformanceLevel Performance levels of the cloud disk. Includes the following values:
         * - pl0: Maximum random read/write IOPS of a single disk is 10,000.
         * - pl1: Maximum random read/write IOPS of a single disk is 50,000.
         * - pl2: Maximum random read/write IOPS of a single disk is 100,000.
         * - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
         * 
         * @return builder
         * 
         */
        public Builder storagePerformanceLevel(String storagePerformanceLevel) {
            return storagePerformanceLevel(Output.of(storagePerformanceLevel));
        }

        /**
         * @param storageSize Storage size, measured in GiB.
         * 
         * @return builder
         * 
         */
        public Builder storageSize(@Nullable Output<Integer> storageSize) {
            $.storageSize = storageSize;
            return this;
        }

        /**
         * @param storageSize Storage size, measured in GiB.
         * 
         * @return builder
         * 
         */
        public Builder storageSize(Integer storageSize) {
            return storageSize(Output.of(storageSize));
        }

        public NodeGroupArgs build() {
            return $;
        }
    }

}
