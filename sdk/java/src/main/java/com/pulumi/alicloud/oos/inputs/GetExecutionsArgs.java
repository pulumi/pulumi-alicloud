// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetExecutionsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetExecutionsArgs Empty = new GetExecutionsArgs();

    /**
     * The category of template. Valid: `AlarmTrigger`, `EventTrigger`, `Other` and `TimerTrigger`.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return The category of template. Valid: `AlarmTrigger`, `EventTrigger`, `Other` and `TimerTrigger`.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * The time when the execution was ended.
     * 
     */
    @Import(name="endDate")
    private @Nullable Output<String> endDate;

    /**
     * @return The time when the execution was ended.
     * 
     */
    public Optional<Output<String>> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * Execution whose end time is less than or equal to the specified time.
     * 
     */
    @Import(name="endDateAfter")
    private @Nullable Output<String> endDateAfter;

    /**
     * @return Execution whose end time is less than or equal to the specified time.
     * 
     */
    public Optional<Output<String>> endDateAfter() {
        return Optional.ofNullable(this.endDateAfter);
    }

    /**
     * The user who execute the template.
     * 
     */
    @Import(name="executedBy")
    private @Nullable Output<String> executedBy;

    /**
     * @return The user who execute the template.
     * 
     */
    public Optional<Output<String>> executedBy() {
        return Optional.ofNullable(this.executedBy);
    }

    /**
     * A list of OOS Execution ids.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of OOS Execution ids.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * Whether to include sub-execution.
     * 
     */
    @Import(name="includeChildExecution")
    private @Nullable Output<Boolean> includeChildExecution;

    /**
     * @return Whether to include sub-execution.
     * 
     */
    public Optional<Output<Boolean>> includeChildExecution() {
        return Optional.ofNullable(this.includeChildExecution);
    }

    /**
     * The mode of OOS Execution. Valid: `Automatic`, `Debug`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The mode of OOS Execution. Valid: `Automatic`, `Debug`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The id of parent OOS Execution.
     * 
     */
    @Import(name="parentExecutionId")
    private @Nullable Output<String> parentExecutionId;

    /**
     * @return The id of parent OOS Execution.
     * 
     */
    public Optional<Output<String>> parentExecutionId() {
        return Optional.ofNullable(this.parentExecutionId);
    }

    /**
     * The role that executes the current template.
     * 
     */
    @Import(name="ramRole")
    private @Nullable Output<String> ramRole;

    /**
     * @return The role that executes the current template.
     * 
     */
    public Optional<Output<String>> ramRole() {
        return Optional.ofNullable(this.ramRole);
    }

    /**
     * The sort field.
     * 
     */
    @Import(name="sortField")
    private @Nullable Output<String> sortField;

    /**
     * @return The sort field.
     * 
     */
    public Optional<Output<String>> sortField() {
        return Optional.ofNullable(this.sortField);
    }

    /**
     * The sort order.
     * 
     */
    @Import(name="sortOrder")
    private @Nullable Output<String> sortOrder;

    /**
     * @return The sort order.
     * 
     */
    public Optional<Output<String>> sortOrder() {
        return Optional.ofNullable(this.sortOrder);
    }

    /**
     * The execution whose start time is greater than or equal to the specified time.
     * 
     */
    @Import(name="startDateAfter")
    private @Nullable Output<String> startDateAfter;

    /**
     * @return The execution whose start time is greater than or equal to the specified time.
     * 
     */
    public Optional<Output<String>> startDateAfter() {
        return Optional.ofNullable(this.startDateAfter);
    }

    /**
     * The execution with start time less than or equal to the specified time.
     * 
     */
    @Import(name="startDateBefore")
    private @Nullable Output<String> startDateBefore;

    /**
     * @return The execution with start time less than or equal to the specified time.
     * 
     */
    public Optional<Output<String>> startDateBefore() {
        return Optional.ofNullable(this.startDateBefore);
    }

    /**
     * The Status of OOS Execution. Valid: `Cancelled`, `Failed`, `Queued`, `Running`, `Started`, `Success`, `Waiting`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The Status of OOS Execution. Valid: `Cancelled`, `Failed`, `Queued`, `Running`, `Started`, `Success`, `Waiting`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of execution template.
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return The name of execution template.
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    private GetExecutionsArgs() {}

    private GetExecutionsArgs(GetExecutionsArgs $) {
        this.category = $.category;
        this.endDate = $.endDate;
        this.endDateAfter = $.endDateAfter;
        this.executedBy = $.executedBy;
        this.ids = $.ids;
        this.includeChildExecution = $.includeChildExecution;
        this.mode = $.mode;
        this.outputFile = $.outputFile;
        this.parentExecutionId = $.parentExecutionId;
        this.ramRole = $.ramRole;
        this.sortField = $.sortField;
        this.sortOrder = $.sortOrder;
        this.startDateAfter = $.startDateAfter;
        this.startDateBefore = $.startDateBefore;
        this.status = $.status;
        this.tags = $.tags;
        this.templateName = $.templateName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetExecutionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetExecutionsArgs $;

        public Builder() {
            $ = new GetExecutionsArgs();
        }

        public Builder(GetExecutionsArgs defaults) {
            $ = new GetExecutionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category The category of template. Valid: `AlarmTrigger`, `EventTrigger`, `Other` and `TimerTrigger`.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The category of template. Valid: `AlarmTrigger`, `EventTrigger`, `Other` and `TimerTrigger`.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param endDate The time when the execution was ended.
         * 
         * @return builder
         * 
         */
        public Builder endDate(@Nullable Output<String> endDate) {
            $.endDate = endDate;
            return this;
        }

        /**
         * @param endDate The time when the execution was ended.
         * 
         * @return builder
         * 
         */
        public Builder endDate(String endDate) {
            return endDate(Output.of(endDate));
        }

        /**
         * @param endDateAfter Execution whose end time is less than or equal to the specified time.
         * 
         * @return builder
         * 
         */
        public Builder endDateAfter(@Nullable Output<String> endDateAfter) {
            $.endDateAfter = endDateAfter;
            return this;
        }

        /**
         * @param endDateAfter Execution whose end time is less than or equal to the specified time.
         * 
         * @return builder
         * 
         */
        public Builder endDateAfter(String endDateAfter) {
            return endDateAfter(Output.of(endDateAfter));
        }

        /**
         * @param executedBy The user who execute the template.
         * 
         * @return builder
         * 
         */
        public Builder executedBy(@Nullable Output<String> executedBy) {
            $.executedBy = executedBy;
            return this;
        }

        /**
         * @param executedBy The user who execute the template.
         * 
         * @return builder
         * 
         */
        public Builder executedBy(String executedBy) {
            return executedBy(Output.of(executedBy));
        }

        /**
         * @param ids A list of OOS Execution ids.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of OOS Execution ids.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of OOS Execution ids.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param includeChildExecution Whether to include sub-execution.
         * 
         * @return builder
         * 
         */
        public Builder includeChildExecution(@Nullable Output<Boolean> includeChildExecution) {
            $.includeChildExecution = includeChildExecution;
            return this;
        }

        /**
         * @param includeChildExecution Whether to include sub-execution.
         * 
         * @return builder
         * 
         */
        public Builder includeChildExecution(Boolean includeChildExecution) {
            return includeChildExecution(Output.of(includeChildExecution));
        }

        /**
         * @param mode The mode of OOS Execution. Valid: `Automatic`, `Debug`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The mode of OOS Execution. Valid: `Automatic`, `Debug`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param parentExecutionId The id of parent OOS Execution.
         * 
         * @return builder
         * 
         */
        public Builder parentExecutionId(@Nullable Output<String> parentExecutionId) {
            $.parentExecutionId = parentExecutionId;
            return this;
        }

        /**
         * @param parentExecutionId The id of parent OOS Execution.
         * 
         * @return builder
         * 
         */
        public Builder parentExecutionId(String parentExecutionId) {
            return parentExecutionId(Output.of(parentExecutionId));
        }

        /**
         * @param ramRole The role that executes the current template.
         * 
         * @return builder
         * 
         */
        public Builder ramRole(@Nullable Output<String> ramRole) {
            $.ramRole = ramRole;
            return this;
        }

        /**
         * @param ramRole The role that executes the current template.
         * 
         * @return builder
         * 
         */
        public Builder ramRole(String ramRole) {
            return ramRole(Output.of(ramRole));
        }

        /**
         * @param sortField The sort field.
         * 
         * @return builder
         * 
         */
        public Builder sortField(@Nullable Output<String> sortField) {
            $.sortField = sortField;
            return this;
        }

        /**
         * @param sortField The sort field.
         * 
         * @return builder
         * 
         */
        public Builder sortField(String sortField) {
            return sortField(Output.of(sortField));
        }

        /**
         * @param sortOrder The sort order.
         * 
         * @return builder
         * 
         */
        public Builder sortOrder(@Nullable Output<String> sortOrder) {
            $.sortOrder = sortOrder;
            return this;
        }

        /**
         * @param sortOrder The sort order.
         * 
         * @return builder
         * 
         */
        public Builder sortOrder(String sortOrder) {
            return sortOrder(Output.of(sortOrder));
        }

        /**
         * @param startDateAfter The execution whose start time is greater than or equal to the specified time.
         * 
         * @return builder
         * 
         */
        public Builder startDateAfter(@Nullable Output<String> startDateAfter) {
            $.startDateAfter = startDateAfter;
            return this;
        }

        /**
         * @param startDateAfter The execution whose start time is greater than or equal to the specified time.
         * 
         * @return builder
         * 
         */
        public Builder startDateAfter(String startDateAfter) {
            return startDateAfter(Output.of(startDateAfter));
        }

        /**
         * @param startDateBefore The execution with start time less than or equal to the specified time.
         * 
         * @return builder
         * 
         */
        public Builder startDateBefore(@Nullable Output<String> startDateBefore) {
            $.startDateBefore = startDateBefore;
            return this;
        }

        /**
         * @param startDateBefore The execution with start time less than or equal to the specified time.
         * 
         * @return builder
         * 
         */
        public Builder startDateBefore(String startDateBefore) {
            return startDateBefore(Output.of(startDateBefore));
        }

        /**
         * @param status The Status of OOS Execution. Valid: `Cancelled`, `Failed`, `Queued`, `Running`, `Started`, `Success`, `Waiting`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The Status of OOS Execution. Valid: `Cancelled`, `Failed`, `Queued`, `Running`, `Started`, `Success`, `Waiting`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param templateName The name of execution template.
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName The name of execution template.
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        public GetExecutionsArgs build() {
            return $;
        }
    }

}
