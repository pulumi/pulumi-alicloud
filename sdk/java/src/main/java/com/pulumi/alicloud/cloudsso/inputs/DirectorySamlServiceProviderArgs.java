// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudsso.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DirectorySamlServiceProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final DirectorySamlServiceProviderArgs Empty = new DirectorySamlServiceProviderArgs();

    /**
     * ACS URL of SP.
     * 
     */
    @Import(name="acsUrl")
    private @Nullable Output<String> acsUrl;

    /**
     * @return ACS URL of SP.
     * 
     */
    public Optional<Output<String>> acsUrl() {
        return Optional.ofNullable(this.acsUrl);
    }

    /**
     * Signature algorithms supported by AuthNRequest
     * 
     */
    @Import(name="authnSignAlgo")
    private @Nullable Output<String> authnSignAlgo;

    /**
     * @return Signature algorithms supported by AuthNRequest
     * 
     */
    public Optional<Output<String>> authnSignAlgo() {
        return Optional.ofNullable(this.authnSignAlgo);
    }

    /**
     * Type of certificate used for signing in the SSO process
     * 
     */
    @Import(name="certificateType")
    private @Nullable Output<String> certificateType;

    /**
     * @return Type of certificate used for signing in the SSO process
     * 
     */
    public Optional<Output<String>> certificateType() {
        return Optional.ofNullable(this.certificateType);
    }

    /**
     * SP metadata document (Base64 encoding).
     * 
     */
    @Import(name="encodedMetadataDocument")
    private @Nullable Output<String> encodedMetadataDocument;

    /**
     * @return SP metadata document (Base64 encoding).
     * 
     */
    public Optional<Output<String>> encodedMetadataDocument() {
        return Optional.ofNullable(this.encodedMetadataDocument);
    }

    /**
     * SP identity.
     * 
     */
    @Import(name="entityId")
    private @Nullable Output<String> entityId;

    /**
     * @return SP identity.
     * 
     */
    public Optional<Output<String>> entityId() {
        return Optional.ofNullable(this.entityId);
    }

    /**
     * Whether IdP-side encryption of Assertion is supported.
     * 
     */
    @Import(name="supportEncryptedAssertion")
    private @Nullable Output<Boolean> supportEncryptedAssertion;

    /**
     * @return Whether IdP-side encryption of Assertion is supported.
     * 
     */
    public Optional<Output<Boolean>> supportEncryptedAssertion() {
        return Optional.ofNullable(this.supportEncryptedAssertion);
    }

    private DirectorySamlServiceProviderArgs() {}

    private DirectorySamlServiceProviderArgs(DirectorySamlServiceProviderArgs $) {
        this.acsUrl = $.acsUrl;
        this.authnSignAlgo = $.authnSignAlgo;
        this.certificateType = $.certificateType;
        this.encodedMetadataDocument = $.encodedMetadataDocument;
        this.entityId = $.entityId;
        this.supportEncryptedAssertion = $.supportEncryptedAssertion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirectorySamlServiceProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirectorySamlServiceProviderArgs $;

        public Builder() {
            $ = new DirectorySamlServiceProviderArgs();
        }

        public Builder(DirectorySamlServiceProviderArgs defaults) {
            $ = new DirectorySamlServiceProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acsUrl ACS URL of SP.
         * 
         * @return builder
         * 
         */
        public Builder acsUrl(@Nullable Output<String> acsUrl) {
            $.acsUrl = acsUrl;
            return this;
        }

        /**
         * @param acsUrl ACS URL of SP.
         * 
         * @return builder
         * 
         */
        public Builder acsUrl(String acsUrl) {
            return acsUrl(Output.of(acsUrl));
        }

        /**
         * @param authnSignAlgo Signature algorithms supported by AuthNRequest
         * 
         * @return builder
         * 
         */
        public Builder authnSignAlgo(@Nullable Output<String> authnSignAlgo) {
            $.authnSignAlgo = authnSignAlgo;
            return this;
        }

        /**
         * @param authnSignAlgo Signature algorithms supported by AuthNRequest
         * 
         * @return builder
         * 
         */
        public Builder authnSignAlgo(String authnSignAlgo) {
            return authnSignAlgo(Output.of(authnSignAlgo));
        }

        /**
         * @param certificateType Type of certificate used for signing in the SSO process
         * 
         * @return builder
         * 
         */
        public Builder certificateType(@Nullable Output<String> certificateType) {
            $.certificateType = certificateType;
            return this;
        }

        /**
         * @param certificateType Type of certificate used for signing in the SSO process
         * 
         * @return builder
         * 
         */
        public Builder certificateType(String certificateType) {
            return certificateType(Output.of(certificateType));
        }

        /**
         * @param encodedMetadataDocument SP metadata document (Base64 encoding).
         * 
         * @return builder
         * 
         */
        public Builder encodedMetadataDocument(@Nullable Output<String> encodedMetadataDocument) {
            $.encodedMetadataDocument = encodedMetadataDocument;
            return this;
        }

        /**
         * @param encodedMetadataDocument SP metadata document (Base64 encoding).
         * 
         * @return builder
         * 
         */
        public Builder encodedMetadataDocument(String encodedMetadataDocument) {
            return encodedMetadataDocument(Output.of(encodedMetadataDocument));
        }

        /**
         * @param entityId SP identity.
         * 
         * @return builder
         * 
         */
        public Builder entityId(@Nullable Output<String> entityId) {
            $.entityId = entityId;
            return this;
        }

        /**
         * @param entityId SP identity.
         * 
         * @return builder
         * 
         */
        public Builder entityId(String entityId) {
            return entityId(Output.of(entityId));
        }

        /**
         * @param supportEncryptedAssertion Whether IdP-side encryption of Assertion is supported.
         * 
         * @return builder
         * 
         */
        public Builder supportEncryptedAssertion(@Nullable Output<Boolean> supportEncryptedAssertion) {
            $.supportEncryptedAssertion = supportEncryptedAssertion;
            return this;
        }

        /**
         * @param supportEncryptedAssertion Whether IdP-side encryption of Assertion is supported.
         * 
         * @return builder
         * 
         */
        public Builder supportEncryptedAssertion(Boolean supportEncryptedAssertion) {
            return supportEncryptedAssertion(Output.of(supportEncryptedAssertion));
        }

        public DirectorySamlServiceProviderArgs build() {
            return $;
        }
    }

}
