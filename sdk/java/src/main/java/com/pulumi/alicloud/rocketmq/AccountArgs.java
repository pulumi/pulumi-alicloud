// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rocketmq;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountArgs Empty = new AccountArgs();

    /**
     * The status of the account. Valid values: `DISABLE`, `ENABLE`.
     * 
     */
    @Import(name="accountStatus")
    private @Nullable Output<String> accountStatus;

    /**
     * @return The status of the account. Valid values: `DISABLE`, `ENABLE`.
     * 
     */
    public Optional<Output<String>> accountStatus() {
        return Optional.ofNullable(this.accountStatus);
    }

    /**
     * The instance ID.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The instance ID.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The password of the account.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return The password of the account.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * The username of the account.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username of the account.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private AccountArgs() {}

    private AccountArgs(AccountArgs $) {
        this.accountStatus = $.accountStatus;
        this.instanceId = $.instanceId;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountArgs $;

        public Builder() {
            $ = new AccountArgs();
        }

        public Builder(AccountArgs defaults) {
            $ = new AccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountStatus The status of the account. Valid values: `DISABLE`, `ENABLE`.
         * 
         * @return builder
         * 
         */
        public Builder accountStatus(@Nullable Output<String> accountStatus) {
            $.accountStatus = accountStatus;
            return this;
        }

        /**
         * @param accountStatus The status of the account. Valid values: `DISABLE`, `ENABLE`.
         * 
         * @return builder
         * 
         */
        public Builder accountStatus(String accountStatus) {
            return accountStatus(Output.of(accountStatus));
        }

        /**
         * @param instanceId The instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param password The password of the account.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of the account.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param username The username of the account.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username of the account.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public AccountArgs build() {
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "instanceId");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "password");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("AccountArgs", "username");
            }
            return $;
        }
    }

}
