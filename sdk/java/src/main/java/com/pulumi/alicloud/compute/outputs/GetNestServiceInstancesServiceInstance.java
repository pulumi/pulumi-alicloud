// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.compute.outputs;

import com.pulumi.alicloud.compute.outputs.GetNestServiceInstancesServiceInstanceService;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNestServiceInstancesServiceInstance {
    /**
     * @return Whether the service instance has the O&amp;M function.
     * 
     */
    private Boolean enableInstanceOps;
    /**
     * @return The ID of the Service Instance.
     * 
     */
    private String id;
    /**
     * @return The ID of the imported service instance.
     * 
     */
    private String operatedServiceInstanceId;
    /**
     * @return The end time of O&amp;M.
     * 
     */
    private String operationEndTime;
    /**
     * @return The start time of O&amp;M.
     * 
     */
    private String operationStartTime;
    /**
     * @return The parameters entered by the deployment service instance.
     * 
     */
    private String parameters;
    /**
     * @return The list of imported resources.
     * 
     */
    private String resources;
    /**
     * @return The ID of the Service Instance.
     * 
     */
    private String serviceInstanceId;
    /**
     * @return The name of the Service Instance.
     * 
     */
    private String serviceInstanceName;
    /**
     * @return Service details.
     * 
     */
    private List<GetNestServiceInstancesServiceInstanceService> services;
    /**
     * @return The source of the Service Instance.
     * 
     */
    private String source;
    /**
     * @return The status of the Service Instance. Valid Values: `Created`, `Deploying`, `DeployedFailed`, `Deployed`, `Upgrading`, `Deleting`, `Deleted`, `DeletedFailed`.
     * 
     */
    private String status;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return The name of the template.
     * 
     */
    private String templateName;

    private GetNestServiceInstancesServiceInstance() {}
    /**
     * @return Whether the service instance has the O&amp;M function.
     * 
     */
    public Boolean enableInstanceOps() {
        return this.enableInstanceOps;
    }
    /**
     * @return The ID of the Service Instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the imported service instance.
     * 
     */
    public String operatedServiceInstanceId() {
        return this.operatedServiceInstanceId;
    }
    /**
     * @return The end time of O&amp;M.
     * 
     */
    public String operationEndTime() {
        return this.operationEndTime;
    }
    /**
     * @return The start time of O&amp;M.
     * 
     */
    public String operationStartTime() {
        return this.operationStartTime;
    }
    /**
     * @return The parameters entered by the deployment service instance.
     * 
     */
    public String parameters() {
        return this.parameters;
    }
    /**
     * @return The list of imported resources.
     * 
     */
    public String resources() {
        return this.resources;
    }
    /**
     * @return The ID of the Service Instance.
     * 
     */
    public String serviceInstanceId() {
        return this.serviceInstanceId;
    }
    /**
     * @return The name of the Service Instance.
     * 
     */
    public String serviceInstanceName() {
        return this.serviceInstanceName;
    }
    /**
     * @return Service details.
     * 
     */
    public List<GetNestServiceInstancesServiceInstanceService> services() {
        return this.services;
    }
    /**
     * @return The source of the Service Instance.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return The status of the Service Instance. Valid Values: `Created`, `Deploying`, `DeployedFailed`, `Deployed`, `Upgrading`, `Deleting`, `Deleted`, `DeletedFailed`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The name of the template.
     * 
     */
    public String templateName() {
        return this.templateName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNestServiceInstancesServiceInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enableInstanceOps;
        private String id;
        private String operatedServiceInstanceId;
        private String operationEndTime;
        private String operationStartTime;
        private String parameters;
        private String resources;
        private String serviceInstanceId;
        private String serviceInstanceName;
        private List<GetNestServiceInstancesServiceInstanceService> services;
        private String source;
        private String status;
        private Map<String,Object> tags;
        private String templateName;
        public Builder() {}
        public Builder(GetNestServiceInstancesServiceInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableInstanceOps = defaults.enableInstanceOps;
    	      this.id = defaults.id;
    	      this.operatedServiceInstanceId = defaults.operatedServiceInstanceId;
    	      this.operationEndTime = defaults.operationEndTime;
    	      this.operationStartTime = defaults.operationStartTime;
    	      this.parameters = defaults.parameters;
    	      this.resources = defaults.resources;
    	      this.serviceInstanceId = defaults.serviceInstanceId;
    	      this.serviceInstanceName = defaults.serviceInstanceName;
    	      this.services = defaults.services;
    	      this.source = defaults.source;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.templateName = defaults.templateName;
        }

        @CustomType.Setter
        public Builder enableInstanceOps(Boolean enableInstanceOps) {
            if (enableInstanceOps == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "enableInstanceOps");
            }
            this.enableInstanceOps = enableInstanceOps;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder operatedServiceInstanceId(String operatedServiceInstanceId) {
            if (operatedServiceInstanceId == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "operatedServiceInstanceId");
            }
            this.operatedServiceInstanceId = operatedServiceInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder operationEndTime(String operationEndTime) {
            if (operationEndTime == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "operationEndTime");
            }
            this.operationEndTime = operationEndTime;
            return this;
        }
        @CustomType.Setter
        public Builder operationStartTime(String operationStartTime) {
            if (operationStartTime == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "operationStartTime");
            }
            this.operationStartTime = operationStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(String parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder resources(String resources) {
            if (resources == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "resources");
            }
            this.resources = resources;
            return this;
        }
        @CustomType.Setter
        public Builder serviceInstanceId(String serviceInstanceId) {
            if (serviceInstanceId == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "serviceInstanceId");
            }
            this.serviceInstanceId = serviceInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceInstanceName(String serviceInstanceName) {
            if (serviceInstanceName == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "serviceInstanceName");
            }
            this.serviceInstanceName = serviceInstanceName;
            return this;
        }
        @CustomType.Setter
        public Builder services(List<GetNestServiceInstancesServiceInstanceService> services) {
            if (services == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "services");
            }
            this.services = services;
            return this;
        }
        public Builder services(GetNestServiceInstancesServiceInstanceService... services) {
            return services(List.of(services));
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder templateName(String templateName) {
            if (templateName == null) {
              throw new MissingRequiredPropertyException("GetNestServiceInstancesServiceInstance", "templateName");
            }
            this.templateName = templateName;
            return this;
        }
        public GetNestServiceInstancesServiceInstance build() {
            final var _resultValue = new GetNestServiceInstancesServiceInstance();
            _resultValue.enableInstanceOps = enableInstanceOps;
            _resultValue.id = id;
            _resultValue.operatedServiceInstanceId = operatedServiceInstanceId;
            _resultValue.operationEndTime = operationEndTime;
            _resultValue.operationStartTime = operationStartTime;
            _resultValue.parameters = parameters;
            _resultValue.resources = resources;
            _resultValue.serviceInstanceId = serviceInstanceId;
            _resultValue.serviceInstanceName = serviceInstanceName;
            _resultValue.services = services;
            _resultValue.source = source;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.templateName = templateName;
            return _resultValue;
        }
    }
}
