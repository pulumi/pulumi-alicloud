// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduledPreloadExecutionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledPreloadExecutionArgs Empty = new ScheduledPreloadExecutionArgs();

    /**
     * The end time of the prefetch plan.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return The end time of the prefetch plan.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The time interval between each batch execution. Unit: seconds.
     * 
     */
    @Import(name="interval", required=true)
    private Output<Integer> interval;

    /**
     * @return The time interval between each batch execution. Unit: seconds.
     * 
     */
    public Output<Integer> interval() {
        return this.interval;
    }

    /**
     * The ID of the prefetch task.
     * 
     */
    @Import(name="scheduledPreloadJobId", required=true)
    private Output<String> scheduledPreloadJobId;

    /**
     * @return The ID of the prefetch task.
     * 
     */
    public Output<String> scheduledPreloadJobId() {
        return this.scheduledPreloadJobId;
    }

    /**
     * The number of URLs prefetched in each batch.
     * 
     */
    @Import(name="sliceLen", required=true)
    private Output<Integer> sliceLen;

    /**
     * @return The number of URLs prefetched in each batch.
     * 
     */
    public Output<Integer> sliceLen() {
        return this.sliceLen;
    }

    /**
     * The start time of the prefetch plan.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The start time of the prefetch plan.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    private ScheduledPreloadExecutionArgs() {}

    private ScheduledPreloadExecutionArgs(ScheduledPreloadExecutionArgs $) {
        this.endTime = $.endTime;
        this.interval = $.interval;
        this.scheduledPreloadJobId = $.scheduledPreloadJobId;
        this.sliceLen = $.sliceLen;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledPreloadExecutionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledPreloadExecutionArgs $;

        public Builder() {
            $ = new ScheduledPreloadExecutionArgs();
        }

        public Builder(ScheduledPreloadExecutionArgs defaults) {
            $ = new ScheduledPreloadExecutionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime The end time of the prefetch plan.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The end time of the prefetch plan.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param interval The time interval between each batch execution. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder interval(Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The time interval between each batch execution. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param scheduledPreloadJobId The ID of the prefetch task.
         * 
         * @return builder
         * 
         */
        public Builder scheduledPreloadJobId(Output<String> scheduledPreloadJobId) {
            $.scheduledPreloadJobId = scheduledPreloadJobId;
            return this;
        }

        /**
         * @param scheduledPreloadJobId The ID of the prefetch task.
         * 
         * @return builder
         * 
         */
        public Builder scheduledPreloadJobId(String scheduledPreloadJobId) {
            return scheduledPreloadJobId(Output.of(scheduledPreloadJobId));
        }

        /**
         * @param sliceLen The number of URLs prefetched in each batch.
         * 
         * @return builder
         * 
         */
        public Builder sliceLen(Output<Integer> sliceLen) {
            $.sliceLen = sliceLen;
            return this;
        }

        /**
         * @param sliceLen The number of URLs prefetched in each batch.
         * 
         * @return builder
         * 
         */
        public Builder sliceLen(Integer sliceLen) {
            return sliceLen(Output.of(sliceLen));
        }

        /**
         * @param startTime The start time of the prefetch plan.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The start time of the prefetch plan.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public ScheduledPreloadExecutionArgs build() {
            if ($.interval == null) {
                throw new MissingRequiredPropertyException("ScheduledPreloadExecutionArgs", "interval");
            }
            if ($.scheduledPreloadJobId == null) {
                throw new MissingRequiredPropertyException("ScheduledPreloadExecutionArgs", "scheduledPreloadJobId");
            }
            if ($.sliceLen == null) {
                throw new MissingRequiredPropertyException("ScheduledPreloadExecutionArgs", "sliceLen");
            }
            return $;
        }
    }

}
