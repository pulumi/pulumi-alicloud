// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SmbAclAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final SmbAclAttachmentArgs Empty = new SmbAclAttachmentArgs();

    /**
     * Specifies whether to allow anonymous access. Valid values:
     * true: The file system allows anonymous access.
     * false: The file system denies anonymous access. Default value: false.
     * 
     */
    @Import(name="enableAnonymousAccess")
    private @Nullable Output<Boolean> enableAnonymousAccess;

    /**
     * @return Specifies whether to allow anonymous access. Valid values:
     * true: The file system allows anonymous access.
     * false: The file system denies anonymous access. Default value: false.
     * 
     */
    public Optional<Output<Boolean>> enableAnonymousAccess() {
        return Optional.ofNullable(this.enableAnonymousAccess);
    }

    /**
     * Specifies whether to enable encryption in transit. Valid values:
     * true: enables encryption in transit.
     * false: disables encryption in transit. Default value: false.
     * 
     */
    @Import(name="encryptData")
    private @Nullable Output<Boolean> encryptData;

    /**
     * @return Specifies whether to enable encryption in transit. Valid values:
     * true: enables encryption in transit.
     * false: disables encryption in transit. Default value: false.
     * 
     */
    public Optional<Output<Boolean>> encryptData() {
        return Optional.ofNullable(this.encryptData);
    }

    /**
     * The ID of the file system.
     * 
     */
    @Import(name="fileSystemId", required=true)
    private Output<String> fileSystemId;

    /**
     * @return The ID of the file system.
     * 
     */
    public Output<String> fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * The home directory of each user. Each user-specific home directory must meet the following requirements:\
     * Each segment starts with a forward slash (/) or a backslash (\).
     * Each segment does not contain the following special characters: &lt;&gt;&#34;:?*.
     * Each segment is 0 to 255 characters in length.
     * The total length is 0 to 32,767 characters.
     * For example, if you create a user named A and the home directory is /home, the file system automatically creates a directory named /home/A when User A logs on to the file system. If the /home/A directory already exists, the file system does not create the directory.
     * 
     */
    @Import(name="homeDirPath")
    private @Nullable Output<String> homeDirPath;

    /**
     * @return The home directory of each user. Each user-specific home directory must meet the following requirements:\
     * Each segment starts with a forward slash (/) or a backslash (\).
     * Each segment does not contain the following special characters: &lt;&gt;&#34;:?*.
     * Each segment is 0 to 255 characters in length.
     * The total length is 0 to 32,767 characters.
     * For example, if you create a user named A and the home directory is /home, the file system automatically creates a directory named /home/A when User A logs on to the file system. If the /home/A directory already exists, the file system does not create the directory.
     * 
     */
    public Optional<Output<String>> homeDirPath() {
        return Optional.ofNullable(this.homeDirPath);
    }

    /**
     * The string that is generated after the system encodes the keytab file by using Base64.
     * 
     */
    @Import(name="keytab", required=true)
    private Output<String> keytab;

    /**
     * @return The string that is generated after the system encodes the keytab file by using Base64.
     * 
     */
    public Output<String> keytab() {
        return this.keytab;
    }

    /**
     * RThe string that is generated after the system encodes the keytab file by using MD5.
     * 
     */
    @Import(name="keytabMd5", required=true)
    private Output<String> keytabMd5;

    /**
     * @return RThe string that is generated after the system encodes the keytab file by using MD5.
     * 
     */
    public Output<String> keytabMd5() {
        return this.keytabMd5;
    }

    /**
     * Specifies whether to deny access from non-encrypted clients. Valid values:
     * true: The file system denies access from non-encrypted clients.
     * false: The file system allows access from non-encrypted clients. Default value: false.
     * 
     */
    @Import(name="rejectUnencryptedAccess")
    private @Nullable Output<Boolean> rejectUnencryptedAccess;

    /**
     * @return Specifies whether to deny access from non-encrypted clients. Valid values:
     * true: The file system denies access from non-encrypted clients.
     * false: The file system allows access from non-encrypted clients. Default value: false.
     * 
     */
    public Optional<Output<Boolean>> rejectUnencryptedAccess() {
        return Optional.ofNullable(this.rejectUnencryptedAccess);
    }

    /**
     * The ID of a super admin. The ID must meet the following requirements:
     * The ID starts with S and does not contain letters except S.
     * The ID contains at least three hyphens (-) as delimiters.
     * Example: S-1-5-22 and S-1-5-22-23.
     * 
     */
    @Import(name="superAdminSid")
    private @Nullable Output<String> superAdminSid;

    /**
     * @return The ID of a super admin. The ID must meet the following requirements:
     * The ID starts with S and does not contain letters except S.
     * The ID contains at least three hyphens (-) as delimiters.
     * Example: S-1-5-22 and S-1-5-22-23.
     * 
     */
    public Optional<Output<String>> superAdminSid() {
        return Optional.ofNullable(this.superAdminSid);
    }

    private SmbAclAttachmentArgs() {}

    private SmbAclAttachmentArgs(SmbAclAttachmentArgs $) {
        this.enableAnonymousAccess = $.enableAnonymousAccess;
        this.encryptData = $.encryptData;
        this.fileSystemId = $.fileSystemId;
        this.homeDirPath = $.homeDirPath;
        this.keytab = $.keytab;
        this.keytabMd5 = $.keytabMd5;
        this.rejectUnencryptedAccess = $.rejectUnencryptedAccess;
        this.superAdminSid = $.superAdminSid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SmbAclAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SmbAclAttachmentArgs $;

        public Builder() {
            $ = new SmbAclAttachmentArgs();
        }

        public Builder(SmbAclAttachmentArgs defaults) {
            $ = new SmbAclAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableAnonymousAccess Specifies whether to allow anonymous access. Valid values:
         * true: The file system allows anonymous access.
         * false: The file system denies anonymous access. Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder enableAnonymousAccess(@Nullable Output<Boolean> enableAnonymousAccess) {
            $.enableAnonymousAccess = enableAnonymousAccess;
            return this;
        }

        /**
         * @param enableAnonymousAccess Specifies whether to allow anonymous access. Valid values:
         * true: The file system allows anonymous access.
         * false: The file system denies anonymous access. Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder enableAnonymousAccess(Boolean enableAnonymousAccess) {
            return enableAnonymousAccess(Output.of(enableAnonymousAccess));
        }

        /**
         * @param encryptData Specifies whether to enable encryption in transit. Valid values:
         * true: enables encryption in transit.
         * false: disables encryption in transit. Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder encryptData(@Nullable Output<Boolean> encryptData) {
            $.encryptData = encryptData;
            return this;
        }

        /**
         * @param encryptData Specifies whether to enable encryption in transit. Valid values:
         * true: enables encryption in transit.
         * false: disables encryption in transit. Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder encryptData(Boolean encryptData) {
            return encryptData(Output.of(encryptData));
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param homeDirPath The home directory of each user. Each user-specific home directory must meet the following requirements:\
         * Each segment starts with a forward slash (/) or a backslash (\).
         * Each segment does not contain the following special characters: &lt;&gt;&#34;:?*.
         * Each segment is 0 to 255 characters in length.
         * The total length is 0 to 32,767 characters.
         * For example, if you create a user named A and the home directory is /home, the file system automatically creates a directory named /home/A when User A logs on to the file system. If the /home/A directory already exists, the file system does not create the directory.
         * 
         * @return builder
         * 
         */
        public Builder homeDirPath(@Nullable Output<String> homeDirPath) {
            $.homeDirPath = homeDirPath;
            return this;
        }

        /**
         * @param homeDirPath The home directory of each user. Each user-specific home directory must meet the following requirements:\
         * Each segment starts with a forward slash (/) or a backslash (\).
         * Each segment does not contain the following special characters: &lt;&gt;&#34;:?*.
         * Each segment is 0 to 255 characters in length.
         * The total length is 0 to 32,767 characters.
         * For example, if you create a user named A and the home directory is /home, the file system automatically creates a directory named /home/A when User A logs on to the file system. If the /home/A directory already exists, the file system does not create the directory.
         * 
         * @return builder
         * 
         */
        public Builder homeDirPath(String homeDirPath) {
            return homeDirPath(Output.of(homeDirPath));
        }

        /**
         * @param keytab The string that is generated after the system encodes the keytab file by using Base64.
         * 
         * @return builder
         * 
         */
        public Builder keytab(Output<String> keytab) {
            $.keytab = keytab;
            return this;
        }

        /**
         * @param keytab The string that is generated after the system encodes the keytab file by using Base64.
         * 
         * @return builder
         * 
         */
        public Builder keytab(String keytab) {
            return keytab(Output.of(keytab));
        }

        /**
         * @param keytabMd5 RThe string that is generated after the system encodes the keytab file by using MD5.
         * 
         * @return builder
         * 
         */
        public Builder keytabMd5(Output<String> keytabMd5) {
            $.keytabMd5 = keytabMd5;
            return this;
        }

        /**
         * @param keytabMd5 RThe string that is generated after the system encodes the keytab file by using MD5.
         * 
         * @return builder
         * 
         */
        public Builder keytabMd5(String keytabMd5) {
            return keytabMd5(Output.of(keytabMd5));
        }

        /**
         * @param rejectUnencryptedAccess Specifies whether to deny access from non-encrypted clients. Valid values:
         * true: The file system denies access from non-encrypted clients.
         * false: The file system allows access from non-encrypted clients. Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder rejectUnencryptedAccess(@Nullable Output<Boolean> rejectUnencryptedAccess) {
            $.rejectUnencryptedAccess = rejectUnencryptedAccess;
            return this;
        }

        /**
         * @param rejectUnencryptedAccess Specifies whether to deny access from non-encrypted clients. Valid values:
         * true: The file system denies access from non-encrypted clients.
         * false: The file system allows access from non-encrypted clients. Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder rejectUnencryptedAccess(Boolean rejectUnencryptedAccess) {
            return rejectUnencryptedAccess(Output.of(rejectUnencryptedAccess));
        }

        /**
         * @param superAdminSid The ID of a super admin. The ID must meet the following requirements:
         * The ID starts with S and does not contain letters except S.
         * The ID contains at least three hyphens (-) as delimiters.
         * Example: S-1-5-22 and S-1-5-22-23.
         * 
         * @return builder
         * 
         */
        public Builder superAdminSid(@Nullable Output<String> superAdminSid) {
            $.superAdminSid = superAdminSid;
            return this;
        }

        /**
         * @param superAdminSid The ID of a super admin. The ID must meet the following requirements:
         * The ID starts with S and does not contain letters except S.
         * The ID contains at least three hyphens (-) as delimiters.
         * Example: S-1-5-22 and S-1-5-22-23.
         * 
         * @return builder
         * 
         */
        public Builder superAdminSid(String superAdminSid) {
            return superAdminSid(Output.of(superAdminSid));
        }

        public SmbAclAttachmentArgs build() {
            if ($.fileSystemId == null) {
                throw new MissingRequiredPropertyException("SmbAclAttachmentArgs", "fileSystemId");
            }
            if ($.keytab == null) {
                throw new MissingRequiredPropertyException("SmbAclAttachmentArgs", "keytab");
            }
            if ($.keytabMd5 == null) {
                throw new MissingRequiredPropertyException("SmbAclAttachmentArgs", "keytabMd5");
            }
            return $;
        }
    }

}
