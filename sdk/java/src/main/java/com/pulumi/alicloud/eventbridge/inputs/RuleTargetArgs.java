// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eventbridge.inputs;

import com.pulumi.alicloud.eventbridge.inputs.RuleTargetDeadLetterQueueArgs;
import com.pulumi.alicloud.eventbridge.inputs.RuleTargetParamListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleTargetArgs Empty = new RuleTargetArgs();

    /**
     * The dead letter queue. Events that are not processed or exceed the number of retries will be written to the dead letter. Support message service MNS and message queue RocketMQ. See `dead_letter_queue` below.
     * 
     */
    @Import(name="deadLetterQueue")
    private @Nullable Output<RuleTargetDeadLetterQueueArgs> deadLetterQueue;

    /**
     * @return The dead letter queue. Events that are not processed or exceed the number of retries will be written to the dead letter. Support message service MNS and message queue RocketMQ. See `dead_letter_queue` below.
     * 
     */
    public Optional<Output<RuleTargetDeadLetterQueueArgs>> deadLetterQueue() {
        return Optional.ofNullable(this.deadLetterQueue);
    }

    /**
     * The endpoint of the event target.
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return The endpoint of the event target.
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    /**
     * The parameters that are configured for the event target. See `param_list` below.
     * 
     */
    @Import(name="paramLists", required=true)
    private Output<List<RuleTargetParamListArgs>> paramLists;

    /**
     * @return The parameters that are configured for the event target. See `param_list` below.
     * 
     */
    public Output<List<RuleTargetParamListArgs>> paramLists() {
        return this.paramLists;
    }

    /**
     * The retry policy that is used to push the event. Valid values:
     * - `BACKOFF_RETRY`: Backoff retry. The request can be retried up to three times. The interval between two consecutive retries is a random value between 10 and 20 seconds.
     * - `EXPONENTIAL_DECAY_RETRY`: Exponential decay retry. The request can be retried up to 176 times. The interval between two consecutive retries exponentially increases to 512 seconds, and the total retry time is one day. The specific retry intervals are 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 512, ..., and 512 seconds, including a maximum of one hundred and sixty-seven 512 seconds in total.
     * 
     */
    @Import(name="pushRetryStrategy")
    private @Nullable Output<String> pushRetryStrategy;

    /**
     * @return The retry policy that is used to push the event. Valid values:
     * - `BACKOFF_RETRY`: Backoff retry. The request can be retried up to three times. The interval between two consecutive retries is a random value between 10 and 20 seconds.
     * - `EXPONENTIAL_DECAY_RETRY`: Exponential decay retry. The request can be retried up to 176 times. The interval between two consecutive retries exponentially increases to 512 seconds, and the total retry time is one day. The specific retry intervals are 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 512, ..., and 512 seconds, including a maximum of one hundred and sixty-seven 512 seconds in total.
     * 
     */
    public Optional<Output<String>> pushRetryStrategy() {
        return Optional.ofNullable(this.pushRetryStrategy);
    }

    /**
     * The ID of the custom event target.
     * 
     */
    @Import(name="targetId", required=true)
    private Output<String> targetId;

    /**
     * @return The ID of the custom event target.
     * 
     */
    public Output<String> targetId() {
        return this.targetId;
    }

    /**
     * The type of the event target. Valid values: `acs.alikafka`, `acs.api.destination`, `acs.arms.loki`, `acs.datahub`, `acs.dingtalk`, `acs.eventbridge`, `acs.eventbridge.olap`, `acs.eventbus.SLSCloudLens`, `acs.fc.function`, `acs.fnf`, `acs.k8s`, `acs.mail`, `acs.mns.queue`, `acs.mns.topic`, `acs.openapi`, `acs.rabbitmq`, `acs.rds.mysql`, `acs.rocketmq`, `acs.sae`, `acs.sls`, `acs.sms`, `http`,`https` and `mysql`.
     * **NOTE:** From version 1.208.1, `type` can be set to `acs.alikafka`, `acs.api.destination`, `acs.arms.loki`, `acs.datahub`, `acs.eventbridge.olap`, `acs.eventbus.SLSCloudLens`, `acs.fnf`, `acs.k8s`, `acs.openapi`, `acs.rds.mysql`, `acs.sae`, `acs.sls`, `mysql`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the event target. Valid values: `acs.alikafka`, `acs.api.destination`, `acs.arms.loki`, `acs.datahub`, `acs.dingtalk`, `acs.eventbridge`, `acs.eventbridge.olap`, `acs.eventbus.SLSCloudLens`, `acs.fc.function`, `acs.fnf`, `acs.k8s`, `acs.mail`, `acs.mns.queue`, `acs.mns.topic`, `acs.openapi`, `acs.rabbitmq`, `acs.rds.mysql`, `acs.rocketmq`, `acs.sae`, `acs.sls`, `acs.sms`, `http`,`https` and `mysql`.
     * **NOTE:** From version 1.208.1, `type` can be set to `acs.alikafka`, `acs.api.destination`, `acs.arms.loki`, `acs.datahub`, `acs.eventbridge.olap`, `acs.eventbus.SLSCloudLens`, `acs.fnf`, `acs.k8s`, `acs.openapi`, `acs.rds.mysql`, `acs.sae`, `acs.sls`, `mysql`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private RuleTargetArgs() {}

    private RuleTargetArgs(RuleTargetArgs $) {
        this.deadLetterQueue = $.deadLetterQueue;
        this.endpoint = $.endpoint;
        this.paramLists = $.paramLists;
        this.pushRetryStrategy = $.pushRetryStrategy;
        this.targetId = $.targetId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleTargetArgs $;

        public Builder() {
            $ = new RuleTargetArgs();
        }

        public Builder(RuleTargetArgs defaults) {
            $ = new RuleTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deadLetterQueue The dead letter queue. Events that are not processed or exceed the number of retries will be written to the dead letter. Support message service MNS and message queue RocketMQ. See `dead_letter_queue` below.
         * 
         * @return builder
         * 
         */
        public Builder deadLetterQueue(@Nullable Output<RuleTargetDeadLetterQueueArgs> deadLetterQueue) {
            $.deadLetterQueue = deadLetterQueue;
            return this;
        }

        /**
         * @param deadLetterQueue The dead letter queue. Events that are not processed or exceed the number of retries will be written to the dead letter. Support message service MNS and message queue RocketMQ. See `dead_letter_queue` below.
         * 
         * @return builder
         * 
         */
        public Builder deadLetterQueue(RuleTargetDeadLetterQueueArgs deadLetterQueue) {
            return deadLetterQueue(Output.of(deadLetterQueue));
        }

        /**
         * @param endpoint The endpoint of the event target.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The endpoint of the event target.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param paramLists The parameters that are configured for the event target. See `param_list` below.
         * 
         * @return builder
         * 
         */
        public Builder paramLists(Output<List<RuleTargetParamListArgs>> paramLists) {
            $.paramLists = paramLists;
            return this;
        }

        /**
         * @param paramLists The parameters that are configured for the event target. See `param_list` below.
         * 
         * @return builder
         * 
         */
        public Builder paramLists(List<RuleTargetParamListArgs> paramLists) {
            return paramLists(Output.of(paramLists));
        }

        /**
         * @param paramLists The parameters that are configured for the event target. See `param_list` below.
         * 
         * @return builder
         * 
         */
        public Builder paramLists(RuleTargetParamListArgs... paramLists) {
            return paramLists(List.of(paramLists));
        }

        /**
         * @param pushRetryStrategy The retry policy that is used to push the event. Valid values:
         * - `BACKOFF_RETRY`: Backoff retry. The request can be retried up to three times. The interval between two consecutive retries is a random value between 10 and 20 seconds.
         * - `EXPONENTIAL_DECAY_RETRY`: Exponential decay retry. The request can be retried up to 176 times. The interval between two consecutive retries exponentially increases to 512 seconds, and the total retry time is one day. The specific retry intervals are 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 512, ..., and 512 seconds, including a maximum of one hundred and sixty-seven 512 seconds in total.
         * 
         * @return builder
         * 
         */
        public Builder pushRetryStrategy(@Nullable Output<String> pushRetryStrategy) {
            $.pushRetryStrategy = pushRetryStrategy;
            return this;
        }

        /**
         * @param pushRetryStrategy The retry policy that is used to push the event. Valid values:
         * - `BACKOFF_RETRY`: Backoff retry. The request can be retried up to three times. The interval between two consecutive retries is a random value between 10 and 20 seconds.
         * - `EXPONENTIAL_DECAY_RETRY`: Exponential decay retry. The request can be retried up to 176 times. The interval between two consecutive retries exponentially increases to 512 seconds, and the total retry time is one day. The specific retry intervals are 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 512, ..., and 512 seconds, including a maximum of one hundred and sixty-seven 512 seconds in total.
         * 
         * @return builder
         * 
         */
        public Builder pushRetryStrategy(String pushRetryStrategy) {
            return pushRetryStrategy(Output.of(pushRetryStrategy));
        }

        /**
         * @param targetId The ID of the custom event target.
         * 
         * @return builder
         * 
         */
        public Builder targetId(Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId The ID of the custom event target.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param type The type of the event target. Valid values: `acs.alikafka`, `acs.api.destination`, `acs.arms.loki`, `acs.datahub`, `acs.dingtalk`, `acs.eventbridge`, `acs.eventbridge.olap`, `acs.eventbus.SLSCloudLens`, `acs.fc.function`, `acs.fnf`, `acs.k8s`, `acs.mail`, `acs.mns.queue`, `acs.mns.topic`, `acs.openapi`, `acs.rabbitmq`, `acs.rds.mysql`, `acs.rocketmq`, `acs.sae`, `acs.sls`, `acs.sms`, `http`,`https` and `mysql`.
         * **NOTE:** From version 1.208.1, `type` can be set to `acs.alikafka`, `acs.api.destination`, `acs.arms.loki`, `acs.datahub`, `acs.eventbridge.olap`, `acs.eventbus.SLSCloudLens`, `acs.fnf`, `acs.k8s`, `acs.openapi`, `acs.rds.mysql`, `acs.sae`, `acs.sls`, `mysql`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the event target. Valid values: `acs.alikafka`, `acs.api.destination`, `acs.arms.loki`, `acs.datahub`, `acs.dingtalk`, `acs.eventbridge`, `acs.eventbridge.olap`, `acs.eventbus.SLSCloudLens`, `acs.fc.function`, `acs.fnf`, `acs.k8s`, `acs.mail`, `acs.mns.queue`, `acs.mns.topic`, `acs.openapi`, `acs.rabbitmq`, `acs.rds.mysql`, `acs.rocketmq`, `acs.sae`, `acs.sls`, `acs.sms`, `http`,`https` and `mysql`.
         * **NOTE:** From version 1.208.1, `type` can be set to `acs.alikafka`, `acs.api.destination`, `acs.arms.loki`, `acs.datahub`, `acs.eventbridge.olap`, `acs.eventbus.SLSCloudLens`, `acs.fnf`, `acs.k8s`, `acs.openapi`, `acs.rds.mysql`, `acs.sae`, `acs.sls`, `mysql`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RuleTargetArgs build() {
            if ($.endpoint == null) {
                throw new MissingRequiredPropertyException("RuleTargetArgs", "endpoint");
            }
            if ($.paramLists == null) {
                throw new MissingRequiredPropertyException("RuleTargetArgs", "paramLists");
            }
            if ($.targetId == null) {
                throw new MissingRequiredPropertyException("RuleTargetArgs", "targetId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("RuleTargetArgs", "type");
            }
            return $;
        }
    }

}
