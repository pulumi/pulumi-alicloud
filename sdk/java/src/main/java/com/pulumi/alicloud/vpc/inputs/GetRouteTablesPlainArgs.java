// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRouteTablesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRouteTablesPlainArgs Empty = new GetRouteTablesPlainArgs();

    /**
     * A list of Route Tables IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return A list of Route Tables IDs.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * A regex string to filter route tables by name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    /**
     * @return A regex string to filter route tables by name.
     * 
     */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable String outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    @Import(name="pageNumber")
    private @Nullable Integer pageNumber;

    public Optional<Integer> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }

    @Import(name="pageSize")
    private @Nullable Integer pageSize;

    public Optional<Integer> pageSize() {
        return Optional.ofNullable(this.pageSize);
    }

    /**
     * The Id of resource group which route tables belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable String resourceGroupId;

    /**
     * @return The Id of resource group which route tables belongs.
     * 
     */
    public Optional<String> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The route table name.
     * 
     */
    @Import(name="routeTableName")
    private @Nullable String routeTableName;

    /**
     * @return The route table name.
     * 
     */
    public Optional<String> routeTableName() {
        return Optional.ofNullable(this.routeTableName);
    }

    /**
     * The route table type.
     * 
     */
    @Import(name="routeTableType")
    private @Nullable String routeTableType;

    /**
     * @return The route table type.
     * 
     */
    public Optional<String> routeTableType() {
        return Optional.ofNullable(this.routeTableType);
    }

    /**
     * The router ID.
     * 
     */
    @Import(name="routerId")
    private @Nullable String routerId;

    /**
     * @return The router ID.
     * 
     */
    public Optional<String> routerId() {
        return Optional.ofNullable(this.routerId);
    }

    /**
     * The route type of route table. Valid values: `VRouter` and `VBR`.
     * 
     */
    @Import(name="routerType")
    private @Nullable String routerType;

    /**
     * @return The route type of route table. Valid values: `VRouter` and `VBR`.
     * 
     */
    public Optional<String> routerType() {
        return Optional.ofNullable(this.routerType);
    }

    /**
     * The status of resource. Valid values: `Available` and `Pending`.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of resource. Valid values: `Available` and `Pending`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Vpc id of the route table.
     * 
     */
    @Import(name="vpcId")
    private @Nullable String vpcId;

    /**
     * @return Vpc id of the route table.
     * 
     */
    public Optional<String> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private GetRouteTablesPlainArgs() {}

    private GetRouteTablesPlainArgs(GetRouteTablesPlainArgs $) {
        this.ids = $.ids;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.pageNumber = $.pageNumber;
        this.pageSize = $.pageSize;
        this.resourceGroupId = $.resourceGroupId;
        this.routeTableName = $.routeTableName;
        this.routeTableType = $.routeTableType;
        this.routerId = $.routerId;
        this.routerType = $.routerType;
        this.status = $.status;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRouteTablesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRouteTablesPlainArgs $;

        public Builder() {
            $ = new GetRouteTablesPlainArgs();
        }

        public Builder(GetRouteTablesPlainArgs defaults) {
            $ = new GetRouteTablesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ids A list of Route Tables IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Route Tables IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param nameRegex A regex string to filter route tables by name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        public Builder pageNumber(@Nullable Integer pageNumber) {
            $.pageNumber = pageNumber;
            return this;
        }

        public Builder pageSize(@Nullable Integer pageSize) {
            $.pageSize = pageSize;
            return this;
        }

        /**
         * @param resourceGroupId The Id of resource group which route tables belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable String resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param routeTableName The route table name.
         * 
         * @return builder
         * 
         */
        public Builder routeTableName(@Nullable String routeTableName) {
            $.routeTableName = routeTableName;
            return this;
        }

        /**
         * @param routeTableType The route table type.
         * 
         * @return builder
         * 
         */
        public Builder routeTableType(@Nullable String routeTableType) {
            $.routeTableType = routeTableType;
            return this;
        }

        /**
         * @param routerId The router ID.
         * 
         * @return builder
         * 
         */
        public Builder routerId(@Nullable String routerId) {
            $.routerId = routerId;
            return this;
        }

        /**
         * @param routerType The route type of route table. Valid values: `VRouter` and `VBR`.
         * 
         * @return builder
         * 
         */
        public Builder routerType(@Nullable String routerType) {
            $.routerType = routerType;
            return this;
        }

        /**
         * @param status The status of resource. Valid values: `Available` and `Pending`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param vpcId Vpc id of the route table.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable String vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        public GetRouteTablesPlainArgs build() {
            return $;
        }
    }

}
