// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ddos;

import com.pulumi.alicloud.ddos.inputs.DomainResourceProxyTypeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainResourceArgs Empty = new DomainResourceArgs();

    /**
     * The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
     * 
     * &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     * 
     */
    @Import(name="cert")
    private @Nullable Output<String> cert;

    /**
     * @return The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
     * 
     * &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     * 
     */
    public Optional<Output<String>> cert() {
        return Optional.ofNullable(this.cert);
    }

    /**
     * The name of the certificate.
     * 
     * &gt; **NOTE:**   You can specify the name of the certificate that you want to associate. From version 1.249.0, `cert_identifier` is in the &#34;CertificateID-RegionId&#34; format. For example, if the ID of the certificateId is `123`, and the region ID is `cn-hangzhou`, the value of the `cert_identifier` is `123-cn-hangzhou`.
     * 
     */
    @Import(name="certIdentifier")
    private @Nullable Output<String> certIdentifier;

    /**
     * @return The name of the certificate.
     * 
     * &gt; **NOTE:**   You can specify the name of the certificate that you want to associate. From version 1.249.0, `cert_identifier` is in the &#34;CertificateID-RegionId&#34; format. For example, if the ID of the certificateId is `123`, and the region ID is `cn-hangzhou`, the value of the `cert_identifier` is `123-cn-hangzhou`.
     * 
     */
    public Optional<Output<String>> certIdentifier() {
        return Optional.ofNullable(this.certIdentifier);
    }

    /**
     * The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
     * 
     * &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     * 
     */
    @Import(name="certName")
    private @Nullable Output<String> certName;

    /**
     * @return The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
     * 
     * &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
     * 
     */
    public Optional<Output<String>> certName() {
        return Optional.ofNullable(this.certName);
    }

    /**
     * The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
     * 
     */
    @Import(name="certRegion")
    private @Nullable Output<String> certRegion;

    /**
     * @return The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
     * 
     */
    public Optional<Output<String>> certRegion() {
        return Optional.ofNullable(this.certRegion);
    }

    /**
     * The domain name for which you want to configure the Static Page Caching policy.
     * 
     * &gt; **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return The domain name for which you want to configure the Static Page Caching policy.
     * 
     * &gt; **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
     * 
     * - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
     * 
     * If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
     * 
     * - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
     * 
     * If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
     * 
     * - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
     * 
     * After you turn on the switch, HTTP/2 is used.
     * 
     */
    @Import(name="httpsExt")
    private @Nullable Output<String> httpsExt;

    /**
     * @return The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
     * 
     * - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
     * 
     * If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
     * 
     * - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
     * 
     * If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
     * 
     * - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
     * 
     * After you turn on the switch, HTTP/2 is used.
     * 
     */
    public Optional<Output<String>> httpsExt() {
        return Optional.ofNullable(this.httpsExt);
    }

    /**
     * InstanceIds
     * 
     */
    @Import(name="instanceIds", required=true)
    private Output<List<String>> instanceIds;

    /**
     * @return InstanceIds
     * 
     */
    public Output<List<String>> instanceIds() {
        return this.instanceIds;
    }

    /**
     * The globally unique ID of the certificate. The value is in the &#34;Certificate ID-cn-hangzhou&#34; format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
     * 
     * &gt; **NOTE:**   You can specify only one of this parameter and the CertId parameter.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The globally unique ID of the certificate. The value is in the &#34;Certificate ID-cn-hangzhou&#34; format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
     * 
     * &gt; **NOTE:**   You can specify only one of this parameter and the CertId parameter.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Specifies whether to enable the OCSP feature. Valid values:
     * 
     */
    @Import(name="ocspEnabled")
    private @Nullable Output<Boolean> ocspEnabled;

    /**
     * @return Specifies whether to enable the OCSP feature. Valid values:
     * 
     */
    public Optional<Output<Boolean>> ocspEnabled() {
        return Optional.ofNullable(this.ocspEnabled);
    }

    /**
     * Protocol type and port number information. See `proxy_types` below.
     * 
     */
    @Import(name="proxyTypes", required=true)
    private Output<List<DomainResourceProxyTypeArgs>> proxyTypes;

    /**
     * @return Protocol type and port number information. See `proxy_types` below.
     * 
     */
    public Output<List<DomainResourceProxyTypeArgs>> proxyTypes() {
        return this.proxyTypes;
    }

    /**
     * Server address information of the source station.
     * 
     */
    @Import(name="realServers", required=true)
    private Output<List<String>> realServers;

    /**
     * @return Server address information of the source station.
     * 
     */
    public Output<List<String>> realServers() {
        return this.realServers;
    }

    /**
     * The address type of the origin server. Valid values:
     * 
     */
    @Import(name="rsType", required=true)
    private Output<Integer> rsType;

    /**
     * @return The address type of the origin server. Valid values:
     * 
     */
    public Output<Integer> rsType() {
        return this.rsType;
    }

    private DomainResourceArgs() {}

    private DomainResourceArgs(DomainResourceArgs $) {
        this.cert = $.cert;
        this.certIdentifier = $.certIdentifier;
        this.certName = $.certName;
        this.certRegion = $.certRegion;
        this.domain = $.domain;
        this.httpsExt = $.httpsExt;
        this.instanceIds = $.instanceIds;
        this.key = $.key;
        this.ocspEnabled = $.ocspEnabled;
        this.proxyTypes = $.proxyTypes;
        this.realServers = $.realServers;
        this.rsType = $.rsType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainResourceArgs $;

        public Builder() {
            $ = new DomainResourceArgs();
        }

        public Builder(DomainResourceArgs defaults) {
            $ = new DomainResourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cert The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
         * 
         * &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
         * 
         * @return builder
         * 
         */
        public Builder cert(@Nullable Output<String> cert) {
            $.cert = cert;
            return this;
        }

        /**
         * @param cert The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
         * 
         * &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
         * 
         * @return builder
         * 
         */
        public Builder cert(String cert) {
            return cert(Output.of(cert));
        }

        /**
         * @param certIdentifier The name of the certificate.
         * 
         * &gt; **NOTE:**   You can specify the name of the certificate that you want to associate. From version 1.249.0, `cert_identifier` is in the &#34;CertificateID-RegionId&#34; format. For example, if the ID of the certificateId is `123`, and the region ID is `cn-hangzhou`, the value of the `cert_identifier` is `123-cn-hangzhou`.
         * 
         * @return builder
         * 
         */
        public Builder certIdentifier(@Nullable Output<String> certIdentifier) {
            $.certIdentifier = certIdentifier;
            return this;
        }

        /**
         * @param certIdentifier The name of the certificate.
         * 
         * &gt; **NOTE:**   You can specify the name of the certificate that you want to associate. From version 1.249.0, `cert_identifier` is in the &#34;CertificateID-RegionId&#34; format. For example, if the ID of the certificateId is `123`, and the region ID is `cn-hangzhou`, the value of the `cert_identifier` is `123-cn-hangzhou`.
         * 
         * @return builder
         * 
         */
        public Builder certIdentifier(String certIdentifier) {
            return certIdentifier(Output.of(certIdentifier));
        }

        /**
         * @param certName The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
         * 
         * &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
         * 
         * @return builder
         * 
         */
        public Builder certName(@Nullable Output<String> certName) {
            $.certName = certName;
            return this;
        }

        /**
         * @param certName The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
         * 
         * &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
         * 
         * @return builder
         * 
         */
        public Builder certName(String certName) {
            return certName(Output.of(certName));
        }

        /**
         * @param certRegion The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
         * 
         * @return builder
         * 
         */
        public Builder certRegion(@Nullable Output<String> certRegion) {
            $.certRegion = certRegion;
            return this;
        }

        /**
         * @param certRegion The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
         * 
         * @return builder
         * 
         */
        public Builder certRegion(String certRegion) {
            return certRegion(Output.of(certRegion));
        }

        /**
         * @param domain The domain name for which you want to configure the Static Page Caching policy.
         * 
         * &gt; **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain name for which you want to configure the Static Page Caching policy.
         * 
         * &gt; **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param httpsExt The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
         * 
         * - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
         * 
         * If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
         * 
         * - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
         * 
         * If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
         * 
         * - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
         * 
         * After you turn on the switch, HTTP/2 is used.
         * 
         * @return builder
         * 
         */
        public Builder httpsExt(@Nullable Output<String> httpsExt) {
            $.httpsExt = httpsExt;
            return this;
        }

        /**
         * @param httpsExt The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
         * 
         * - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
         * 
         * If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
         * 
         * - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
         * 
         * If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
         * 
         * - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
         * 
         * After you turn on the switch, HTTP/2 is used.
         * 
         * @return builder
         * 
         */
        public Builder httpsExt(String httpsExt) {
            return httpsExt(Output.of(httpsExt));
        }

        /**
         * @param instanceIds InstanceIds
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(Output<List<String>> instanceIds) {
            $.instanceIds = instanceIds;
            return this;
        }

        /**
         * @param instanceIds InstanceIds
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(List<String> instanceIds) {
            return instanceIds(Output.of(instanceIds));
        }

        /**
         * @param instanceIds InstanceIds
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(String... instanceIds) {
            return instanceIds(List.of(instanceIds));
        }

        /**
         * @param key The globally unique ID of the certificate. The value is in the &#34;Certificate ID-cn-hangzhou&#34; format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
         * 
         * &gt; **NOTE:**   You can specify only one of this parameter and the CertId parameter.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The globally unique ID of the certificate. The value is in the &#34;Certificate ID-cn-hangzhou&#34; format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
         * 
         * &gt; **NOTE:**   You can specify only one of this parameter and the CertId parameter.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param ocspEnabled Specifies whether to enable the OCSP feature. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder ocspEnabled(@Nullable Output<Boolean> ocspEnabled) {
            $.ocspEnabled = ocspEnabled;
            return this;
        }

        /**
         * @param ocspEnabled Specifies whether to enable the OCSP feature. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder ocspEnabled(Boolean ocspEnabled) {
            return ocspEnabled(Output.of(ocspEnabled));
        }

        /**
         * @param proxyTypes Protocol type and port number information. See `proxy_types` below.
         * 
         * @return builder
         * 
         */
        public Builder proxyTypes(Output<List<DomainResourceProxyTypeArgs>> proxyTypes) {
            $.proxyTypes = proxyTypes;
            return this;
        }

        /**
         * @param proxyTypes Protocol type and port number information. See `proxy_types` below.
         * 
         * @return builder
         * 
         */
        public Builder proxyTypes(List<DomainResourceProxyTypeArgs> proxyTypes) {
            return proxyTypes(Output.of(proxyTypes));
        }

        /**
         * @param proxyTypes Protocol type and port number information. See `proxy_types` below.
         * 
         * @return builder
         * 
         */
        public Builder proxyTypes(DomainResourceProxyTypeArgs... proxyTypes) {
            return proxyTypes(List.of(proxyTypes));
        }

        /**
         * @param realServers Server address information of the source station.
         * 
         * @return builder
         * 
         */
        public Builder realServers(Output<List<String>> realServers) {
            $.realServers = realServers;
            return this;
        }

        /**
         * @param realServers Server address information of the source station.
         * 
         * @return builder
         * 
         */
        public Builder realServers(List<String> realServers) {
            return realServers(Output.of(realServers));
        }

        /**
         * @param realServers Server address information of the source station.
         * 
         * @return builder
         * 
         */
        public Builder realServers(String... realServers) {
            return realServers(List.of(realServers));
        }

        /**
         * @param rsType The address type of the origin server. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder rsType(Output<Integer> rsType) {
            $.rsType = rsType;
            return this;
        }

        /**
         * @param rsType The address type of the origin server. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder rsType(Integer rsType) {
            return rsType(Output.of(rsType));
        }

        public DomainResourceArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("DomainResourceArgs", "domain");
            }
            if ($.instanceIds == null) {
                throw new MissingRequiredPropertyException("DomainResourceArgs", "instanceIds");
            }
            if ($.proxyTypes == null) {
                throw new MissingRequiredPropertyException("DomainResourceArgs", "proxyTypes");
            }
            if ($.realServers == null) {
                throw new MissingRequiredPropertyException("DomainResourceArgs", "realServers");
            }
            if ($.rsType == null) {
                throw new MissingRequiredPropertyException("DomainResourceArgs", "rsType");
            }
            return $;
        }
    }

}
