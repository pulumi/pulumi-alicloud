// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.mongodb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicaSetRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicaSetRoleArgs Empty = new ReplicaSetRoleArgs();

    /**
     * The port of the connection string, will be computed if not specified.`
     * 
     */
    @Import(name="connectionPort")
    private @Nullable Output<Integer> connectionPort;

    /**
     * @return The port of the connection string, will be computed if not specified.`
     * 
     */
    public Optional<Output<Integer>> connectionPort() {
        return Optional.ofNullable(this.connectionPort);
    }

    /**
     * The prefix of the connection string, will be computed if not specified.
     * 
     */
    @Import(name="connectionPrefix")
    private @Nullable Output<String> connectionPrefix;

    /**
     * @return The prefix of the connection string, will be computed if not specified.
     * 
     */
    public Optional<Output<String>> connectionPrefix() {
        return Optional.ofNullable(this.connectionPrefix);
    }

    /**
     * The instance ID.
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return The instance ID.
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    /**
     * The network type of the connection string. Valid values:
     * - `VPC`: private network address.
     * - `Public`: public network address.
     * 
     */
    @Import(name="networkType", required=true)
    private Output<String> networkType;

    /**
     * @return The network type of the connection string. Valid values:
     * - `VPC`: private network address.
     * - `Public`: public network address.
     * 
     */
    public Output<String> networkType() {
        return this.networkType;
    }

    /**
     * The role ID in the replica set.
     * 
     */
    @Import(name="roleId", required=true)
    private Output<String> roleId;

    /**
     * @return The role ID in the replica set.
     * 
     */
    public Output<String> roleId() {
        return this.roleId;
    }

    private ReplicaSetRoleArgs() {}

    private ReplicaSetRoleArgs(ReplicaSetRoleArgs $) {
        this.connectionPort = $.connectionPort;
        this.connectionPrefix = $.connectionPrefix;
        this.dbInstanceId = $.dbInstanceId;
        this.networkType = $.networkType;
        this.roleId = $.roleId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicaSetRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicaSetRoleArgs $;

        public Builder() {
            $ = new ReplicaSetRoleArgs();
        }

        public Builder(ReplicaSetRoleArgs defaults) {
            $ = new ReplicaSetRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionPort The port of the connection string, will be computed if not specified.`
         * 
         * @return builder
         * 
         */
        public Builder connectionPort(@Nullable Output<Integer> connectionPort) {
            $.connectionPort = connectionPort;
            return this;
        }

        /**
         * @param connectionPort The port of the connection string, will be computed if not specified.`
         * 
         * @return builder
         * 
         */
        public Builder connectionPort(Integer connectionPort) {
            return connectionPort(Output.of(connectionPort));
        }

        /**
         * @param connectionPrefix The prefix of the connection string, will be computed if not specified.
         * 
         * @return builder
         * 
         */
        public Builder connectionPrefix(@Nullable Output<String> connectionPrefix) {
            $.connectionPrefix = connectionPrefix;
            return this;
        }

        /**
         * @param connectionPrefix The prefix of the connection string, will be computed if not specified.
         * 
         * @return builder
         * 
         */
        public Builder connectionPrefix(String connectionPrefix) {
            return connectionPrefix(Output.of(connectionPrefix));
        }

        /**
         * @param dbInstanceId The instance ID.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The instance ID.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param networkType The network type of the connection string. Valid values:
         * - `VPC`: private network address.
         * - `Public`: public network address.
         * 
         * @return builder
         * 
         */
        public Builder networkType(Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The network type of the connection string. Valid values:
         * - `VPC`: private network address.
         * - `Public`: public network address.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param roleId The role ID in the replica set.
         * 
         * @return builder
         * 
         */
        public Builder roleId(Output<String> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId The role ID in the replica set.
         * 
         * @return builder
         * 
         */
        public Builder roleId(String roleId) {
            return roleId(Output.of(roleId));
        }

        public ReplicaSetRoleArgs build() {
            if ($.dbInstanceId == null) {
                throw new MissingRequiredPropertyException("ReplicaSetRoleArgs", "dbInstanceId");
            }
            if ($.networkType == null) {
                throw new MissingRequiredPropertyException("ReplicaSetRoleArgs", "networkType");
            }
            if ($.roleId == null) {
                throw new MissingRequiredPropertyException("ReplicaSetRoleArgs", "roleId");
            }
            return $;
        }
    }

}
