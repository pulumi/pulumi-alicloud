// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExperimentPlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExperimentPlanArgs Empty = new ExperimentPlanArgs();

    /**
     * Additional operating parameters. You can include information about the specified node.
     * 
     */
    @Import(name="externalParams")
    private @Nullable Output<Map<String,String>> externalParams;

    /**
     * @return Additional operating parameters. You can include information about the specified node.
     * 
     */
    public Optional<Output<Map<String,String>>> externalParams() {
        return Optional.ofNullable(this.externalParams);
    }

    /**
     * Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
     * 
     */
    @Import(name="planName")
    private @Nullable Output<String> planName;

    /**
     * @return Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
     * 
     */
    public Optional<Output<String>> planName() {
        return Optional.ofNullable(this.planName);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The ID of the resource.
     * 
     */
    @Import(name="resourceId", required=true)
    private Output<Integer> resourceId;

    /**
     * @return The ID of the resource.
     * 
     */
    public Output<Integer> resourceId() {
        return this.resourceId;
    }

    /**
     * The tag of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tag of the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the template.
     * 
     */
    @Import(name="templateId", required=true)
    private Output<Integer> templateId;

    /**
     * @return The ID of the template.
     * 
     */
    public Output<Integer> templateId() {
        return this.templateId;
    }

    private ExperimentPlanArgs() {}

    private ExperimentPlanArgs(ExperimentPlanArgs $) {
        this.externalParams = $.externalParams;
        this.planName = $.planName;
        this.resourceGroupId = $.resourceGroupId;
        this.resourceId = $.resourceId;
        this.tags = $.tags;
        this.templateId = $.templateId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExperimentPlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExperimentPlanArgs $;

        public Builder() {
            $ = new ExperimentPlanArgs();
        }

        public Builder(ExperimentPlanArgs defaults) {
            $ = new ExperimentPlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalParams Additional operating parameters. You can include information about the specified node.
         * 
         * @return builder
         * 
         */
        public Builder externalParams(@Nullable Output<Map<String,String>> externalParams) {
            $.externalParams = externalParams;
            return this;
        }

        /**
         * @param externalParams Additional operating parameters. You can include information about the specified node.
         * 
         * @return builder
         * 
         */
        public Builder externalParams(Map<String,String> externalParams) {
            return externalParams(Output.of(externalParams));
        }

        /**
         * @param planName Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
         * 
         * @return builder
         * 
         */
        public Builder planName(@Nullable Output<String> planName) {
            $.planName = planName;
            return this;
        }

        /**
         * @param planName Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
         * 
         * @return builder
         * 
         */
        public Builder planName(String planName) {
            return planName(Output.of(planName));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param resourceId The ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(Output<Integer> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(Integer resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param templateId The ID of the template.
         * 
         * @return builder
         * 
         */
        public Builder templateId(Output<Integer> templateId) {
            $.templateId = templateId;
            return this;
        }

        /**
         * @param templateId The ID of the template.
         * 
         * @return builder
         * 
         */
        public Builder templateId(Integer templateId) {
            return templateId(Output.of(templateId));
        }

        public ExperimentPlanArgs build() {
            if ($.resourceId == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanArgs", "resourceId");
            }
            if ($.templateId == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanArgs", "templateId");
            }
            return $;
        }
    }

}
