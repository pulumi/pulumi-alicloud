// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.slb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttachmentArgs Empty = new AttachmentArgs();

    /**
     * The backend servers of the load balancer.
     * 
     */
    @Import(name="backendServers")
    private @Nullable Output<String> backendServers;

    /**
     * @return The backend servers of the load balancer.
     * 
     */
    public Optional<Output<String>> backendServers() {
        return Optional.ofNullable(this.backendServers);
    }

    /**
     * Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
     * 
     */
    @Import(name="deleteProtectionValidation")
    private @Nullable Output<Boolean> deleteProtectionValidation;

    /**
     * @return Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
     * 
     */
    public Optional<Output<Boolean>> deleteProtectionValidation() {
        return Optional.ofNullable(this.deleteProtectionValidation);
    }

    /**
     * A list of instance ids to added backend server in the SLB.
     * 
     */
    @Import(name="instanceIds", required=true)
    private Output<List<String>> instanceIds;

    /**
     * @return A list of instance ids to added backend server in the SLB.
     * 
     */
    public Output<List<String>> instanceIds() {
        return this.instanceIds;
    }

    /**
     * ID of the load balancer.
     * 
     */
    @Import(name="loadBalancerId", required=true)
    private Output<String> loadBalancerId;

    /**
     * @return ID of the load balancer.
     * 
     */
    public Output<String> loadBalancerId() {
        return this.loadBalancerId;
    }

    /**
     * Type of the instances. Valid value ecs, eni. Default to ecs.
     * 
     */
    @Import(name="serverType")
    private @Nullable Output<String> serverType;

    /**
     * @return Type of the instances. Valid value ecs, eni. Default to ecs.
     * 
     */
    public Optional<Output<String>> serverType() {
        return Optional.ofNullable(this.serverType);
    }

    /**
     * Weight of the instances. Valid value range: [0-100]. Default to 100.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return Weight of the instances. Valid value range: [0-100]. Default to 100.
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private AttachmentArgs() {}

    private AttachmentArgs(AttachmentArgs $) {
        this.backendServers = $.backendServers;
        this.deleteProtectionValidation = $.deleteProtectionValidation;
        this.instanceIds = $.instanceIds;
        this.loadBalancerId = $.loadBalancerId;
        this.serverType = $.serverType;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttachmentArgs $;

        public Builder() {
            $ = new AttachmentArgs();
        }

        public Builder(AttachmentArgs defaults) {
            $ = new AttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendServers The backend servers of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendServers(@Nullable Output<String> backendServers) {
            $.backendServers = backendServers;
            return this;
        }

        /**
         * @param backendServers The backend servers of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendServers(String backendServers) {
            return backendServers(Output.of(backendServers));
        }

        /**
         * @param deleteProtectionValidation Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder deleteProtectionValidation(@Nullable Output<Boolean> deleteProtectionValidation) {
            $.deleteProtectionValidation = deleteProtectionValidation;
            return this;
        }

        /**
         * @param deleteProtectionValidation Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder deleteProtectionValidation(Boolean deleteProtectionValidation) {
            return deleteProtectionValidation(Output.of(deleteProtectionValidation));
        }

        /**
         * @param instanceIds A list of instance ids to added backend server in the SLB.
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(Output<List<String>> instanceIds) {
            $.instanceIds = instanceIds;
            return this;
        }

        /**
         * @param instanceIds A list of instance ids to added backend server in the SLB.
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(List<String> instanceIds) {
            return instanceIds(Output.of(instanceIds));
        }

        /**
         * @param instanceIds A list of instance ids to added backend server in the SLB.
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(String... instanceIds) {
            return instanceIds(List.of(instanceIds));
        }

        /**
         * @param loadBalancerId ID of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId ID of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param serverType Type of the instances. Valid value ecs, eni. Default to ecs.
         * 
         * @return builder
         * 
         */
        public Builder serverType(@Nullable Output<String> serverType) {
            $.serverType = serverType;
            return this;
        }

        /**
         * @param serverType Type of the instances. Valid value ecs, eni. Default to ecs.
         * 
         * @return builder
         * 
         */
        public Builder serverType(String serverType) {
            return serverType(Output.of(serverType));
        }

        /**
         * @param weight Weight of the instances. Valid value range: [0-100]. Default to 100.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight Weight of the instances. Valid value range: [0-100]. Default to 100.
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public AttachmentArgs build() {
            if ($.instanceIds == null) {
                throw new MissingRequiredPropertyException("AttachmentArgs", "instanceIds");
            }
            if ($.loadBalancerId == null) {
                throw new MissingRequiredPropertyException("AttachmentArgs", "loadBalancerId");
            }
            return $;
        }
    }

}
