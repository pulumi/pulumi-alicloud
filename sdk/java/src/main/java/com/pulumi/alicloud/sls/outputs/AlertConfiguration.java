// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.outputs;

import com.pulumi.alicloud.sls.outputs.AlertConfigurationAnnotation;
import com.pulumi.alicloud.sls.outputs.AlertConfigurationConditionConfiguration;
import com.pulumi.alicloud.sls.outputs.AlertConfigurationGroupConfiguration;
import com.pulumi.alicloud.sls.outputs.AlertConfigurationJoinConfiguration;
import com.pulumi.alicloud.sls.outputs.AlertConfigurationLabel;
import com.pulumi.alicloud.sls.outputs.AlertConfigurationPolicyConfiguration;
import com.pulumi.alicloud.sls.outputs.AlertConfigurationQueryList;
import com.pulumi.alicloud.sls.outputs.AlertConfigurationSeverityConfiguration;
import com.pulumi.alicloud.sls.outputs.AlertConfigurationSinkAlerthub;
import com.pulumi.alicloud.sls.outputs.AlertConfigurationSinkCms;
import com.pulumi.alicloud.sls.outputs.AlertConfigurationSinkEventStore;
import com.pulumi.alicloud.sls.outputs.AlertConfigurationTemplateConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AlertConfiguration {
    /**
     * @return Template Annotations.
     * 
     */
    private @Nullable List<AlertConfigurationAnnotation> annotations;
    /**
     * @return Whether to turn on automatic labeling. true (default): The automatic annotation function is enabled, and the system automatically adds information such as__county__to the alarm. For more information, see Automatic Labeling. false: Turn off the automatic annotation function.
     * 
     */
    private @Nullable Boolean autoAnnotation;
    /**
     * @return Alarm trigger condition. See `condition_configuration` below.
     * 
     */
    private @Nullable AlertConfigurationConditionConfiguration conditionConfiguration;
    /**
     * @return The instrument cluster associated with the alarm. It is recommended to set to internal-alert-analysis.
     * 
     */
    private @Nullable String dashboard;
    /**
     * @return Group evaluation configuration. See `group_configuration` below.
     * 
     */
    private @Nullable AlertConfigurationGroupConfiguration groupConfiguration;
    /**
     * @return Set operation configuration. See `join_configurations` below.
     * 
     */
    private @Nullable List<AlertConfigurationJoinConfiguration> joinConfigurations;
    /**
     * @return Label. See `labels` below.
     * 
     */
    private @Nullable List<AlertConfigurationLabel> labels;
    /**
     * @return Second-level timestamp representing the temporary shutdown deadline.
     * 
     */
    private @Nullable Integer muteUntil;
    /**
     * @return Whether no data triggers an alarm. true: If the number of times the query and analysis results (if there are multiple results, the result after the collection operation) is no data exceeds the continuous trigger threshold, an alarm is generated. false (default): Turn off the no data alarm function.
     * 
     */
    private @Nullable Boolean noDataFire;
    /**
     * @return Alarm severity when no data triggers an alarm.
     * 
     */
    private @Nullable Integer noDataSeverity;
    /**
     * @return Alert policy configuration. See `policy_configuration` below.
     * 
     */
    private @Nullable AlertConfigurationPolicyConfiguration policyConfiguration;
    /**
     * @return Query the statistical list. See `query_list` below.
     * 
     */
    private @Nullable List<AlertConfigurationQueryList> queryLists;
    /**
     * @return Whether to send a recovery notification. true: A recovery alarm is triggered when the alarm is restored. false (default): Turn off the alarm recovery notification function.
     * 
     */
    private @Nullable Boolean sendResolved;
    /**
     * @return Trigger condition, set at least one trigger condition. See `severity_configurations` below.
     * 
     */
    private @Nullable List<AlertConfigurationSeverityConfiguration> severityConfigurations;
    /**
     * @return Configuration of Alerts Sent to Alerthub. See `sink_alerthub` below.
     * 
     */
    private @Nullable AlertConfigurationSinkAlerthub sinkAlerthub;
    /**
     * @return Configure alerts sent to CloudMonitor. See `sink_cms` below.
     * 
     */
    private @Nullable AlertConfigurationSinkCms sinkCms;
    /**
     * @return Configuration of sending alarms to EventStore. See `sink_event_store` below.
     * 
     */
    private @Nullable AlertConfigurationSinkEventStore sinkEventStore;
    /**
     * @return Customize the category of alarm monitoring rules.
     * 
     */
    private @Nullable List<String> tags;
    /**
     * @return Alarm rule template configuration. See `template_configuration` below.
     * 
     */
    private @Nullable AlertConfigurationTemplateConfiguration templateConfiguration;
    /**
     * @return Set the continuous trigger threshold. When the cumulative number of triggers reaches this value, an alarm is generated. The statistics are not counted when the trigger condition is not met.
     * 
     */
    private @Nullable Integer threshold;
    /**
     * @return Template Type.
     * 
     */
    private @Nullable String type;
    /**
     * @return Template Version.
     * 
     */
    private @Nullable String version;

    private AlertConfiguration() {}
    /**
     * @return Template Annotations.
     * 
     */
    public List<AlertConfigurationAnnotation> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * @return Whether to turn on automatic labeling. true (default): The automatic annotation function is enabled, and the system automatically adds information such as__county__to the alarm. For more information, see Automatic Labeling. false: Turn off the automatic annotation function.
     * 
     */
    public Optional<Boolean> autoAnnotation() {
        return Optional.ofNullable(this.autoAnnotation);
    }
    /**
     * @return Alarm trigger condition. See `condition_configuration` below.
     * 
     */
    public Optional<AlertConfigurationConditionConfiguration> conditionConfiguration() {
        return Optional.ofNullable(this.conditionConfiguration);
    }
    /**
     * @return The instrument cluster associated with the alarm. It is recommended to set to internal-alert-analysis.
     * 
     */
    public Optional<String> dashboard() {
        return Optional.ofNullable(this.dashboard);
    }
    /**
     * @return Group evaluation configuration. See `group_configuration` below.
     * 
     */
    public Optional<AlertConfigurationGroupConfiguration> groupConfiguration() {
        return Optional.ofNullable(this.groupConfiguration);
    }
    /**
     * @return Set operation configuration. See `join_configurations` below.
     * 
     */
    public List<AlertConfigurationJoinConfiguration> joinConfigurations() {
        return this.joinConfigurations == null ? List.of() : this.joinConfigurations;
    }
    /**
     * @return Label. See `labels` below.
     * 
     */
    public List<AlertConfigurationLabel> labels() {
        return this.labels == null ? List.of() : this.labels;
    }
    /**
     * @return Second-level timestamp representing the temporary shutdown deadline.
     * 
     */
    public Optional<Integer> muteUntil() {
        return Optional.ofNullable(this.muteUntil);
    }
    /**
     * @return Whether no data triggers an alarm. true: If the number of times the query and analysis results (if there are multiple results, the result after the collection operation) is no data exceeds the continuous trigger threshold, an alarm is generated. false (default): Turn off the no data alarm function.
     * 
     */
    public Optional<Boolean> noDataFire() {
        return Optional.ofNullable(this.noDataFire);
    }
    /**
     * @return Alarm severity when no data triggers an alarm.
     * 
     */
    public Optional<Integer> noDataSeverity() {
        return Optional.ofNullable(this.noDataSeverity);
    }
    /**
     * @return Alert policy configuration. See `policy_configuration` below.
     * 
     */
    public Optional<AlertConfigurationPolicyConfiguration> policyConfiguration() {
        return Optional.ofNullable(this.policyConfiguration);
    }
    /**
     * @return Query the statistical list. See `query_list` below.
     * 
     */
    public List<AlertConfigurationQueryList> queryLists() {
        return this.queryLists == null ? List.of() : this.queryLists;
    }
    /**
     * @return Whether to send a recovery notification. true: A recovery alarm is triggered when the alarm is restored. false (default): Turn off the alarm recovery notification function.
     * 
     */
    public Optional<Boolean> sendResolved() {
        return Optional.ofNullable(this.sendResolved);
    }
    /**
     * @return Trigger condition, set at least one trigger condition. See `severity_configurations` below.
     * 
     */
    public List<AlertConfigurationSeverityConfiguration> severityConfigurations() {
        return this.severityConfigurations == null ? List.of() : this.severityConfigurations;
    }
    /**
     * @return Configuration of Alerts Sent to Alerthub. See `sink_alerthub` below.
     * 
     */
    public Optional<AlertConfigurationSinkAlerthub> sinkAlerthub() {
        return Optional.ofNullable(this.sinkAlerthub);
    }
    /**
     * @return Configure alerts sent to CloudMonitor. See `sink_cms` below.
     * 
     */
    public Optional<AlertConfigurationSinkCms> sinkCms() {
        return Optional.ofNullable(this.sinkCms);
    }
    /**
     * @return Configuration of sending alarms to EventStore. See `sink_event_store` below.
     * 
     */
    public Optional<AlertConfigurationSinkEventStore> sinkEventStore() {
        return Optional.ofNullable(this.sinkEventStore);
    }
    /**
     * @return Customize the category of alarm monitoring rules.
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return Alarm rule template configuration. See `template_configuration` below.
     * 
     */
    public Optional<AlertConfigurationTemplateConfiguration> templateConfiguration() {
        return Optional.ofNullable(this.templateConfiguration);
    }
    /**
     * @return Set the continuous trigger threshold. When the cumulative number of triggers reaches this value, an alarm is generated. The statistics are not counted when the trigger condition is not met.
     * 
     */
    public Optional<Integer> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    /**
     * @return Template Type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Template Version.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<AlertConfigurationAnnotation> annotations;
        private @Nullable Boolean autoAnnotation;
        private @Nullable AlertConfigurationConditionConfiguration conditionConfiguration;
        private @Nullable String dashboard;
        private @Nullable AlertConfigurationGroupConfiguration groupConfiguration;
        private @Nullable List<AlertConfigurationJoinConfiguration> joinConfigurations;
        private @Nullable List<AlertConfigurationLabel> labels;
        private @Nullable Integer muteUntil;
        private @Nullable Boolean noDataFire;
        private @Nullable Integer noDataSeverity;
        private @Nullable AlertConfigurationPolicyConfiguration policyConfiguration;
        private @Nullable List<AlertConfigurationQueryList> queryLists;
        private @Nullable Boolean sendResolved;
        private @Nullable List<AlertConfigurationSeverityConfiguration> severityConfigurations;
        private @Nullable AlertConfigurationSinkAlerthub sinkAlerthub;
        private @Nullable AlertConfigurationSinkCms sinkCms;
        private @Nullable AlertConfigurationSinkEventStore sinkEventStore;
        private @Nullable List<String> tags;
        private @Nullable AlertConfigurationTemplateConfiguration templateConfiguration;
        private @Nullable Integer threshold;
        private @Nullable String type;
        private @Nullable String version;
        public Builder() {}
        public Builder(AlertConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.autoAnnotation = defaults.autoAnnotation;
    	      this.conditionConfiguration = defaults.conditionConfiguration;
    	      this.dashboard = defaults.dashboard;
    	      this.groupConfiguration = defaults.groupConfiguration;
    	      this.joinConfigurations = defaults.joinConfigurations;
    	      this.labels = defaults.labels;
    	      this.muteUntil = defaults.muteUntil;
    	      this.noDataFire = defaults.noDataFire;
    	      this.noDataSeverity = defaults.noDataSeverity;
    	      this.policyConfiguration = defaults.policyConfiguration;
    	      this.queryLists = defaults.queryLists;
    	      this.sendResolved = defaults.sendResolved;
    	      this.severityConfigurations = defaults.severityConfigurations;
    	      this.sinkAlerthub = defaults.sinkAlerthub;
    	      this.sinkCms = defaults.sinkCms;
    	      this.sinkEventStore = defaults.sinkEventStore;
    	      this.tags = defaults.tags;
    	      this.templateConfiguration = defaults.templateConfiguration;
    	      this.threshold = defaults.threshold;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder annotations(@Nullable List<AlertConfigurationAnnotation> annotations) {

            this.annotations = annotations;
            return this;
        }
        public Builder annotations(AlertConfigurationAnnotation... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder autoAnnotation(@Nullable Boolean autoAnnotation) {

            this.autoAnnotation = autoAnnotation;
            return this;
        }
        @CustomType.Setter
        public Builder conditionConfiguration(@Nullable AlertConfigurationConditionConfiguration conditionConfiguration) {

            this.conditionConfiguration = conditionConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder dashboard(@Nullable String dashboard) {

            this.dashboard = dashboard;
            return this;
        }
        @CustomType.Setter
        public Builder groupConfiguration(@Nullable AlertConfigurationGroupConfiguration groupConfiguration) {

            this.groupConfiguration = groupConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder joinConfigurations(@Nullable List<AlertConfigurationJoinConfiguration> joinConfigurations) {

            this.joinConfigurations = joinConfigurations;
            return this;
        }
        public Builder joinConfigurations(AlertConfigurationJoinConfiguration... joinConfigurations) {
            return joinConfigurations(List.of(joinConfigurations));
        }
        @CustomType.Setter
        public Builder labels(@Nullable List<AlertConfigurationLabel> labels) {

            this.labels = labels;
            return this;
        }
        public Builder labels(AlertConfigurationLabel... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder muteUntil(@Nullable Integer muteUntil) {

            this.muteUntil = muteUntil;
            return this;
        }
        @CustomType.Setter
        public Builder noDataFire(@Nullable Boolean noDataFire) {

            this.noDataFire = noDataFire;
            return this;
        }
        @CustomType.Setter
        public Builder noDataSeverity(@Nullable Integer noDataSeverity) {

            this.noDataSeverity = noDataSeverity;
            return this;
        }
        @CustomType.Setter
        public Builder policyConfiguration(@Nullable AlertConfigurationPolicyConfiguration policyConfiguration) {

            this.policyConfiguration = policyConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder queryLists(@Nullable List<AlertConfigurationQueryList> queryLists) {

            this.queryLists = queryLists;
            return this;
        }
        public Builder queryLists(AlertConfigurationQueryList... queryLists) {
            return queryLists(List.of(queryLists));
        }
        @CustomType.Setter
        public Builder sendResolved(@Nullable Boolean sendResolved) {

            this.sendResolved = sendResolved;
            return this;
        }
        @CustomType.Setter
        public Builder severityConfigurations(@Nullable List<AlertConfigurationSeverityConfiguration> severityConfigurations) {

            this.severityConfigurations = severityConfigurations;
            return this;
        }
        public Builder severityConfigurations(AlertConfigurationSeverityConfiguration... severityConfigurations) {
            return severityConfigurations(List.of(severityConfigurations));
        }
        @CustomType.Setter
        public Builder sinkAlerthub(@Nullable AlertConfigurationSinkAlerthub sinkAlerthub) {

            this.sinkAlerthub = sinkAlerthub;
            return this;
        }
        @CustomType.Setter
        public Builder sinkCms(@Nullable AlertConfigurationSinkCms sinkCms) {

            this.sinkCms = sinkCms;
            return this;
        }
        @CustomType.Setter
        public Builder sinkEventStore(@Nullable AlertConfigurationSinkEventStore sinkEventStore) {

            this.sinkEventStore = sinkEventStore;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder templateConfiguration(@Nullable AlertConfigurationTemplateConfiguration templateConfiguration) {

            this.templateConfiguration = templateConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable Integer threshold) {

            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {

            this.version = version;
            return this;
        }
        public AlertConfiguration build() {
            final var _resultValue = new AlertConfiguration();
            _resultValue.annotations = annotations;
            _resultValue.autoAnnotation = autoAnnotation;
            _resultValue.conditionConfiguration = conditionConfiguration;
            _resultValue.dashboard = dashboard;
            _resultValue.groupConfiguration = groupConfiguration;
            _resultValue.joinConfigurations = joinConfigurations;
            _resultValue.labels = labels;
            _resultValue.muteUntil = muteUntil;
            _resultValue.noDataFire = noDataFire;
            _resultValue.noDataSeverity = noDataSeverity;
            _resultValue.policyConfiguration = policyConfiguration;
            _resultValue.queryLists = queryLists;
            _resultValue.sendResolved = sendResolved;
            _resultValue.severityConfigurations = severityConfigurations;
            _resultValue.sinkAlerthub = sinkAlerthub;
            _resultValue.sinkCms = sinkCms;
            _resultValue.sinkEventStore = sinkEventStore;
            _resultValue.tags = tags;
            _resultValue.templateConfiguration = templateConfiguration;
            _resultValue.threshold = threshold;
            _resultValue.type = type;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
