// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.inputs;

import com.pulumi.alicloud.ess.inputs.EciScalingConfigurationInitContainerEnvironmentVarArgs;
import com.pulumi.alicloud.ess.inputs.EciScalingConfigurationInitContainerPortArgs;
import com.pulumi.alicloud.ess.inputs.EciScalingConfigurationInitContainerVolumeMountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EciScalingConfigurationInitContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final EciScalingConfigurationInitContainerArgs Empty = new EciScalingConfigurationInitContainerArgs();

    /**
     * The arguments passed to the commands.
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<String>> args;

    /**
     * @return The arguments passed to the commands.
     * 
     */
    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * The commands run by the init container.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return The commands run by the init container.
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * The amount of CPU resources allocated to the container.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<Double> cpu;

    /**
     * @return The amount of CPU resources allocated to the container.
     * 
     */
    public Optional<Output<Double>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * The structure of environmentVars.
     * See `environment_vars` below for details.
     * 
     */
    @Import(name="environmentVars")
    private @Nullable Output<List<EciScalingConfigurationInitContainerEnvironmentVarArgs>> environmentVars;

    /**
     * @return The structure of environmentVars.
     * See `environment_vars` below for details.
     * 
     */
    public Optional<Output<List<EciScalingConfigurationInitContainerEnvironmentVarArgs>>> environmentVars() {
        return Optional.ofNullable(this.environmentVars);
    }

    /**
     * The number GPUs.
     * 
     */
    @Import(name="gpu")
    private @Nullable Output<Integer> gpu;

    /**
     * @return The number GPUs.
     * 
     */
    public Optional<Output<Integer>> gpu() {
        return Optional.ofNullable(this.gpu);
    }

    /**
     * The image of the container.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return The image of the container.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * The restart policy of the image.
     * 
     */
    @Import(name="imagePullPolicy")
    private @Nullable Output<String> imagePullPolicy;

    /**
     * @return The restart policy of the image.
     * 
     */
    public Optional<Output<String>> imagePullPolicy() {
        return Optional.ofNullable(this.imagePullPolicy);
    }

    /**
     * The amount of memory resources allocated to the container.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Double> memory;

    /**
     * @return The amount of memory resources allocated to the container.
     * 
     */
    public Optional<Output<Double>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * The name of the mounted volume.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the mounted volume.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The structure of port. See `ports` below for details.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<EciScalingConfigurationInitContainerPortArgs>> ports;

    /**
     * @return The structure of port. See `ports` below for details.
     * 
     */
    public Optional<Output<List<EciScalingConfigurationInitContainerPortArgs>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * The structure of volumeMounts. See `volume_mounts` below for details.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable Output<List<EciScalingConfigurationInitContainerVolumeMountArgs>> volumeMounts;

    /**
     * @return The structure of volumeMounts. See `volume_mounts` below for details.
     * 
     */
    public Optional<Output<List<EciScalingConfigurationInitContainerVolumeMountArgs>>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    /**
     * The working directory of the container.
     * 
     */
    @Import(name="workingDir")
    private @Nullable Output<String> workingDir;

    /**
     * @return The working directory of the container.
     * 
     */
    public Optional<Output<String>> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    private EciScalingConfigurationInitContainerArgs() {}

    private EciScalingConfigurationInitContainerArgs(EciScalingConfigurationInitContainerArgs $) {
        this.args = $.args;
        this.commands = $.commands;
        this.cpu = $.cpu;
        this.environmentVars = $.environmentVars;
        this.gpu = $.gpu;
        this.image = $.image;
        this.imagePullPolicy = $.imagePullPolicy;
        this.memory = $.memory;
        this.name = $.name;
        this.ports = $.ports;
        this.volumeMounts = $.volumeMounts;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EciScalingConfigurationInitContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EciScalingConfigurationInitContainerArgs $;

        public Builder() {
            $ = new EciScalingConfigurationInitContainerArgs();
        }

        public Builder(EciScalingConfigurationInitContainerArgs defaults) {
            $ = new EciScalingConfigurationInitContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param args The arguments passed to the commands.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args The arguments passed to the commands.
         * 
         * @return builder
         * 
         */
        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        /**
         * @param args The arguments passed to the commands.
         * 
         * @return builder
         * 
         */
        public Builder args(String... args) {
            return args(List.of(args));
        }

        /**
         * @param commands The commands run by the init container.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands The commands run by the init container.
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands The commands run by the init container.
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param cpu The amount of CPU resources allocated to the container.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<Double> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The amount of CPU resources allocated to the container.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Double cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param environmentVars The structure of environmentVars.
         * See `environment_vars` below for details.
         * 
         * @return builder
         * 
         */
        public Builder environmentVars(@Nullable Output<List<EciScalingConfigurationInitContainerEnvironmentVarArgs>> environmentVars) {
            $.environmentVars = environmentVars;
            return this;
        }

        /**
         * @param environmentVars The structure of environmentVars.
         * See `environment_vars` below for details.
         * 
         * @return builder
         * 
         */
        public Builder environmentVars(List<EciScalingConfigurationInitContainerEnvironmentVarArgs> environmentVars) {
            return environmentVars(Output.of(environmentVars));
        }

        /**
         * @param environmentVars The structure of environmentVars.
         * See `environment_vars` below for details.
         * 
         * @return builder
         * 
         */
        public Builder environmentVars(EciScalingConfigurationInitContainerEnvironmentVarArgs... environmentVars) {
            return environmentVars(List.of(environmentVars));
        }

        /**
         * @param gpu The number GPUs.
         * 
         * @return builder
         * 
         */
        public Builder gpu(@Nullable Output<Integer> gpu) {
            $.gpu = gpu;
            return this;
        }

        /**
         * @param gpu The number GPUs.
         * 
         * @return builder
         * 
         */
        public Builder gpu(Integer gpu) {
            return gpu(Output.of(gpu));
        }

        /**
         * @param image The image of the container.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The image of the container.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param imagePullPolicy The restart policy of the image.
         * 
         * @return builder
         * 
         */
        public Builder imagePullPolicy(@Nullable Output<String> imagePullPolicy) {
            $.imagePullPolicy = imagePullPolicy;
            return this;
        }

        /**
         * @param imagePullPolicy The restart policy of the image.
         * 
         * @return builder
         * 
         */
        public Builder imagePullPolicy(String imagePullPolicy) {
            return imagePullPolicy(Output.of(imagePullPolicy));
        }

        /**
         * @param memory The amount of memory resources allocated to the container.
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<Double> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The amount of memory resources allocated to the container.
         * 
         * @return builder
         * 
         */
        public Builder memory(Double memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param name The name of the mounted volume.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the mounted volume.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ports The structure of port. See `ports` below for details.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<EciScalingConfigurationInitContainerPortArgs>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports The structure of port. See `ports` below for details.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<EciScalingConfigurationInitContainerPortArgs> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports The structure of port. See `ports` below for details.
         * 
         * @return builder
         * 
         */
        public Builder ports(EciScalingConfigurationInitContainerPortArgs... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param volumeMounts The structure of volumeMounts. See `volume_mounts` below for details.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(@Nullable Output<List<EciScalingConfigurationInitContainerVolumeMountArgs>> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        /**
         * @param volumeMounts The structure of volumeMounts. See `volume_mounts` below for details.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(List<EciScalingConfigurationInitContainerVolumeMountArgs> volumeMounts) {
            return volumeMounts(Output.of(volumeMounts));
        }

        /**
         * @param volumeMounts The structure of volumeMounts. See `volume_mounts` below for details.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(EciScalingConfigurationInitContainerVolumeMountArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        /**
         * @param workingDir The working directory of the container.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(@Nullable Output<String> workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        /**
         * @param workingDir The working directory of the container.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(String workingDir) {
            return workingDir(Output.of(workingDir));
        }

        public EciScalingConfigurationInitContainerArgs build() {
            return $;
        }
    }

}
