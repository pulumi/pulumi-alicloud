// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MscSubSubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MscSubSubscriptionArgs Empty = new MscSubSubscriptionArgs();

    /**
     * The ids of subscribed contacts.
     * **NOTE:** There is a potential diff error because of the order of `contact_ids` values indefinite.
     * So, from version 1.161.0, `contact_ids` type has been updated as `set` from `list`,
     * and you can use tolist to convert it to a list.
     * 
     */
    @Import(name="contactIds")
    private @Nullable Output<List<String>> contactIds;

    /**
     * @return The ids of subscribed contacts.
     * **NOTE:** There is a potential diff error because of the order of `contact_ids` values indefinite.
     * So, from version 1.161.0, `contact_ids` type has been updated as `set` from `list`,
     * and you can use tolist to convert it to a list.
     * 
     */
    public Optional<Output<List<String>>> contactIds() {
        return Optional.ofNullable(this.contactIds);
    }

    /**
     * The status of email subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
     * 
     */
    @Import(name="emailStatus")
    private @Nullable Output<Integer> emailStatus;

    /**
     * @return The status of email subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
     * 
     */
    public Optional<Output<Integer>> emailStatus() {
        return Optional.ofNullable(this.emailStatus);
    }

    /**
     * The name of the Subscription. **NOTE:**  You should use the `alicloud.getMscSubSubscriptions` to query the available subscription item name.
     * 
     */
    @Import(name="itemName", required=true)
    private Output<String> itemName;

    /**
     * @return The name of the Subscription. **NOTE:**  You should use the `alicloud.getMscSubSubscriptions` to query the available subscription item name.
     * 
     */
    public Output<String> itemName() {
        return this.itemName;
    }

    /**
     * The status of pmsg subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
     * 
     */
    @Import(name="pmsgStatus")
    private @Nullable Output<Integer> pmsgStatus;

    /**
     * @return The status of pmsg subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
     * 
     */
    public Optional<Output<Integer>> pmsgStatus() {
        return Optional.ofNullable(this.pmsgStatus);
    }

    /**
     * The status of sms subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
     * 
     */
    @Import(name="smsStatus")
    private @Nullable Output<Integer> smsStatus;

    /**
     * @return The status of sms subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
     * 
     */
    public Optional<Output<Integer>> smsStatus() {
        return Optional.ofNullable(this.smsStatus);
    }

    /**
     * The status of tts subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
     * 
     */
    @Import(name="ttsStatus")
    private @Nullable Output<Integer> ttsStatus;

    /**
     * @return The status of tts subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
     * 
     */
    public Optional<Output<Integer>> ttsStatus() {
        return Optional.ofNullable(this.ttsStatus);
    }

    /**
     * The ids of subscribed webhooks.
     * 
     */
    @Import(name="webhookIds")
    private @Nullable Output<List<String>> webhookIds;

    /**
     * @return The ids of subscribed webhooks.
     * 
     */
    public Optional<Output<List<String>>> webhookIds() {
        return Optional.ofNullable(this.webhookIds);
    }

    /**
     * The status of webhook subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
     * 
     */
    @Import(name="webhookStatus")
    private @Nullable Output<Integer> webhookStatus;

    /**
     * @return The status of webhook subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
     * 
     */
    public Optional<Output<Integer>> webhookStatus() {
        return Optional.ofNullable(this.webhookStatus);
    }

    private MscSubSubscriptionArgs() {}

    private MscSubSubscriptionArgs(MscSubSubscriptionArgs $) {
        this.contactIds = $.contactIds;
        this.emailStatus = $.emailStatus;
        this.itemName = $.itemName;
        this.pmsgStatus = $.pmsgStatus;
        this.smsStatus = $.smsStatus;
        this.ttsStatus = $.ttsStatus;
        this.webhookIds = $.webhookIds;
        this.webhookStatus = $.webhookStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MscSubSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MscSubSubscriptionArgs $;

        public Builder() {
            $ = new MscSubSubscriptionArgs();
        }

        public Builder(MscSubSubscriptionArgs defaults) {
            $ = new MscSubSubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactIds The ids of subscribed contacts.
         * **NOTE:** There is a potential diff error because of the order of `contact_ids` values indefinite.
         * So, from version 1.161.0, `contact_ids` type has been updated as `set` from `list`,
         * and you can use tolist to convert it to a list.
         * 
         * @return builder
         * 
         */
        public Builder contactIds(@Nullable Output<List<String>> contactIds) {
            $.contactIds = contactIds;
            return this;
        }

        /**
         * @param contactIds The ids of subscribed contacts.
         * **NOTE:** There is a potential diff error because of the order of `contact_ids` values indefinite.
         * So, from version 1.161.0, `contact_ids` type has been updated as `set` from `list`,
         * and you can use tolist to convert it to a list.
         * 
         * @return builder
         * 
         */
        public Builder contactIds(List<String> contactIds) {
            return contactIds(Output.of(contactIds));
        }

        /**
         * @param contactIds The ids of subscribed contacts.
         * **NOTE:** There is a potential diff error because of the order of `contact_ids` values indefinite.
         * So, from version 1.161.0, `contact_ids` type has been updated as `set` from `list`,
         * and you can use tolist to convert it to a list.
         * 
         * @return builder
         * 
         */
        public Builder contactIds(String... contactIds) {
            return contactIds(List.of(contactIds));
        }

        /**
         * @param emailStatus The status of email subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
         * 
         * @return builder
         * 
         */
        public Builder emailStatus(@Nullable Output<Integer> emailStatus) {
            $.emailStatus = emailStatus;
            return this;
        }

        /**
         * @param emailStatus The status of email subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
         * 
         * @return builder
         * 
         */
        public Builder emailStatus(Integer emailStatus) {
            return emailStatus(Output.of(emailStatus));
        }

        /**
         * @param itemName The name of the Subscription. **NOTE:**  You should use the `alicloud.getMscSubSubscriptions` to query the available subscription item name.
         * 
         * @return builder
         * 
         */
        public Builder itemName(Output<String> itemName) {
            $.itemName = itemName;
            return this;
        }

        /**
         * @param itemName The name of the Subscription. **NOTE:**  You should use the `alicloud.getMscSubSubscriptions` to query the available subscription item name.
         * 
         * @return builder
         * 
         */
        public Builder itemName(String itemName) {
            return itemName(Output.of(itemName));
        }

        /**
         * @param pmsgStatus The status of pmsg subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
         * 
         * @return builder
         * 
         */
        public Builder pmsgStatus(@Nullable Output<Integer> pmsgStatus) {
            $.pmsgStatus = pmsgStatus;
            return this;
        }

        /**
         * @param pmsgStatus The status of pmsg subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
         * 
         * @return builder
         * 
         */
        public Builder pmsgStatus(Integer pmsgStatus) {
            return pmsgStatus(Output.of(pmsgStatus));
        }

        /**
         * @param smsStatus The status of sms subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
         * 
         * @return builder
         * 
         */
        public Builder smsStatus(@Nullable Output<Integer> smsStatus) {
            $.smsStatus = smsStatus;
            return this;
        }

        /**
         * @param smsStatus The status of sms subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
         * 
         * @return builder
         * 
         */
        public Builder smsStatus(Integer smsStatus) {
            return smsStatus(Output.of(smsStatus));
        }

        /**
         * @param ttsStatus The status of tts subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
         * 
         * @return builder
         * 
         */
        public Builder ttsStatus(@Nullable Output<Integer> ttsStatus) {
            $.ttsStatus = ttsStatus;
            return this;
        }

        /**
         * @param ttsStatus The status of tts subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
         * 
         * @return builder
         * 
         */
        public Builder ttsStatus(Integer ttsStatus) {
            return ttsStatus(Output.of(ttsStatus));
        }

        /**
         * @param webhookIds The ids of subscribed webhooks.
         * 
         * @return builder
         * 
         */
        public Builder webhookIds(@Nullable Output<List<String>> webhookIds) {
            $.webhookIds = webhookIds;
            return this;
        }

        /**
         * @param webhookIds The ids of subscribed webhooks.
         * 
         * @return builder
         * 
         */
        public Builder webhookIds(List<String> webhookIds) {
            return webhookIds(Output.of(webhookIds));
        }

        /**
         * @param webhookIds The ids of subscribed webhooks.
         * 
         * @return builder
         * 
         */
        public Builder webhookIds(String... webhookIds) {
            return webhookIds(List.of(webhookIds));
        }

        /**
         * @param webhookStatus The status of webhook subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
         * 
         * @return builder
         * 
         */
        public Builder webhookStatus(@Nullable Output<Integer> webhookStatus) {
            $.webhookStatus = webhookStatus;
            return this;
        }

        /**
         * @param webhookStatus The status of webhook subscription. Valid values: `-1`, `-2`, `0`, `1`. `-1` means required, `-2` means banned; `1` means subscribed; `0` means not subscribed.
         * 
         * @return builder
         * 
         */
        public Builder webhookStatus(Integer webhookStatus) {
            return webhookStatus(Output.of(webhookStatus));
        }

        public MscSubSubscriptionArgs build() {
            if ($.itemName == null) {
                throw new MissingRequiredPropertyException("MscSubSubscriptionArgs", "itemName");
            }
            return $;
        }
    }

}
