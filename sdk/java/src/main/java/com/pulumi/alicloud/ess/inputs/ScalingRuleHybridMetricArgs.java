// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.inputs;

import com.pulumi.alicloud.ess.inputs.ScalingRuleHybridMetricDimensionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScalingRuleHybridMetricArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScalingRuleHybridMetricArgs Empty = new ScalingRuleHybridMetricArgs();

    /**
     * The structure of volumeMounts.
     * See `dimensions` below for details.
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<List<ScalingRuleHybridMetricDimensionArgs>> dimensions;

    /**
     * @return The structure of volumeMounts.
     * See `dimensions` below for details.
     * 
     */
    public Optional<Output<List<ScalingRuleHybridMetricDimensionArgs>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * The metric expression that consists of multiple Hybrid Cloud Monitoring metrics. It calculates a result used to trigger scaling events. The expression must comply with the Reverse Polish Notation (RPN) specification, and the operators can only be + - × /.
     * 
     */
    @Import(name="expression")
    private @Nullable Output<String> expression;

    /**
     * @return The metric expression that consists of multiple Hybrid Cloud Monitoring metrics. It calculates a result used to trigger scaling events. The expression must comply with the Reverse Polish Notation (RPN) specification, and the operators can only be + - × /.
     * 
     */
    public Optional<Output<String>> expression() {
        return Optional.ofNullable(this.expression);
    }

    /**
     * The reference ID of the metric in the metric expression.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The reference ID of the metric in the metric expression.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the Hybrid Cloud Monitoring metric.
     * 
     */
    @Import(name="metricName")
    private @Nullable Output<String> metricName;

    /**
     * @return The name of the Hybrid Cloud Monitoring metric.
     * 
     */
    public Optional<Output<String>> metricName() {
        return Optional.ofNullable(this.metricName);
    }

    /**
     * The statistical method of the metric value. Valid values: Average, Minimum, Maximum.
     * 
     */
    @Import(name="statistic")
    private @Nullable Output<String> statistic;

    /**
     * @return The statistical method of the metric value. Valid values: Average, Minimum, Maximum.
     * 
     */
    public Optional<Output<String>> statistic() {
        return Optional.ofNullable(this.statistic);
    }

    private ScalingRuleHybridMetricArgs() {}

    private ScalingRuleHybridMetricArgs(ScalingRuleHybridMetricArgs $) {
        this.dimensions = $.dimensions;
        this.expression = $.expression;
        this.id = $.id;
        this.metricName = $.metricName;
        this.statistic = $.statistic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScalingRuleHybridMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScalingRuleHybridMetricArgs $;

        public Builder() {
            $ = new ScalingRuleHybridMetricArgs();
        }

        public Builder(ScalingRuleHybridMetricArgs defaults) {
            $ = new ScalingRuleHybridMetricArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dimensions The structure of volumeMounts.
         * See `dimensions` below for details.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(@Nullable Output<List<ScalingRuleHybridMetricDimensionArgs>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        /**
         * @param dimensions The structure of volumeMounts.
         * See `dimensions` below for details.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(List<ScalingRuleHybridMetricDimensionArgs> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        /**
         * @param dimensions The structure of volumeMounts.
         * See `dimensions` below for details.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(ScalingRuleHybridMetricDimensionArgs... dimensions) {
            return dimensions(List.of(dimensions));
        }

        /**
         * @param expression The metric expression that consists of multiple Hybrid Cloud Monitoring metrics. It calculates a result used to trigger scaling events. The expression must comply with the Reverse Polish Notation (RPN) specification, and the operators can only be + - × /.
         * 
         * @return builder
         * 
         */
        public Builder expression(@Nullable Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression The metric expression that consists of multiple Hybrid Cloud Monitoring metrics. It calculates a result used to trigger scaling events. The expression must comply with the Reverse Polish Notation (RPN) specification, and the operators can only be + - × /.
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        /**
         * @param id The reference ID of the metric in the metric expression.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The reference ID of the metric in the metric expression.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param metricName The name of the Hybrid Cloud Monitoring metric.
         * 
         * @return builder
         * 
         */
        public Builder metricName(@Nullable Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName The name of the Hybrid Cloud Monitoring metric.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param statistic The statistical method of the metric value. Valid values: Average, Minimum, Maximum.
         * 
         * @return builder
         * 
         */
        public Builder statistic(@Nullable Output<String> statistic) {
            $.statistic = statistic;
            return this;
        }

        /**
         * @param statistic The statistical method of the metric value. Valid values: Average, Minimum, Maximum.
         * 
         * @return builder
         * 
         */
        public Builder statistic(String statistic) {
            return statistic(Output.of(statistic));
        }

        public ScalingRuleHybridMetricArgs build() {
            return $;
        }
    }

}
