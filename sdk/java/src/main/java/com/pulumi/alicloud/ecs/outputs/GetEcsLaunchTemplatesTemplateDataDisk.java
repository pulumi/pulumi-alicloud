// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEcsLaunchTemplatesTemplateDataDisk {
    /**
     * @return The category of the disk.
     * 
     */
    private String category;
    /**
     * @return Indicates whether the data disk is released with the instance.
     * 
     */
    private Boolean deleteWithInstance;
    /**
     * @return The description of the data disk.
     * 
     */
    private String description;
    /**
     * @return Encrypted the data in this disk.
     * 
     */
    private Boolean encrypted;
    /**
     * @return The name of the data disk.
     * 
     */
    private String name;
    /**
     * @return PerformanceLevel.
     * 
     */
    private String performanceLevel;
    /**
     * @return The performance level of the ESSD used as the data disk.
     * 
     */
    private Integer size;
    /**
     * @return The snapshot ID used to initialize the data disk. If the size specified by snapshot is greater that the size of the disk, use the size specified by snapshot as the size of the data disk.
     * 
     */
    private String snapshotId;

    private GetEcsLaunchTemplatesTemplateDataDisk() {}
    /**
     * @return The category of the disk.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return Indicates whether the data disk is released with the instance.
     * 
     */
    public Boolean deleteWithInstance() {
        return this.deleteWithInstance;
    }
    /**
     * @return The description of the data disk.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Encrypted the data in this disk.
     * 
     */
    public Boolean encrypted() {
        return this.encrypted;
    }
    /**
     * @return The name of the data disk.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return PerformanceLevel.
     * 
     */
    public String performanceLevel() {
        return this.performanceLevel;
    }
    /**
     * @return The performance level of the ESSD used as the data disk.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return The snapshot ID used to initialize the data disk. If the size specified by snapshot is greater that the size of the disk, use the size specified by snapshot as the size of the data disk.
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEcsLaunchTemplatesTemplateDataDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private Boolean deleteWithInstance;
        private String description;
        private Boolean encrypted;
        private String name;
        private String performanceLevel;
        private Integer size;
        private String snapshotId;
        public Builder() {}
        public Builder(GetEcsLaunchTemplatesTemplateDataDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.deleteWithInstance = defaults.deleteWithInstance;
    	      this.description = defaults.description;
    	      this.encrypted = defaults.encrypted;
    	      this.name = defaults.name;
    	      this.performanceLevel = defaults.performanceLevel;
    	      this.size = defaults.size;
    	      this.snapshotId = defaults.snapshotId;
        }

        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetEcsLaunchTemplatesTemplateDataDisk", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder deleteWithInstance(Boolean deleteWithInstance) {
            if (deleteWithInstance == null) {
              throw new MissingRequiredPropertyException("GetEcsLaunchTemplatesTemplateDataDisk", "deleteWithInstance");
            }
            this.deleteWithInstance = deleteWithInstance;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetEcsLaunchTemplatesTemplateDataDisk", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder encrypted(Boolean encrypted) {
            if (encrypted == null) {
              throw new MissingRequiredPropertyException("GetEcsLaunchTemplatesTemplateDataDisk", "encrypted");
            }
            this.encrypted = encrypted;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEcsLaunchTemplatesTemplateDataDisk", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder performanceLevel(String performanceLevel) {
            if (performanceLevel == null) {
              throw new MissingRequiredPropertyException("GetEcsLaunchTemplatesTemplateDataDisk", "performanceLevel");
            }
            this.performanceLevel = performanceLevel;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetEcsLaunchTemplatesTemplateDataDisk", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            if (snapshotId == null) {
              throw new MissingRequiredPropertyException("GetEcsLaunchTemplatesTemplateDataDisk", "snapshotId");
            }
            this.snapshotId = snapshotId;
            return this;
        }
        public GetEcsLaunchTemplatesTemplateDataDisk build() {
            final var _resultValue = new GetEcsLaunchTemplatesTemplateDataDisk();
            _resultValue.category = category;
            _resultValue.deleteWithInstance = deleteWithInstance;
            _resultValue.description = description;
            _resultValue.encrypted = encrypted;
            _resultValue.name = name;
            _resultValue.performanceLevel = performanceLevel;
            _resultValue.size = size;
            _resultValue.snapshotId = snapshotId;
            return _resultValue;
        }
    }
}
