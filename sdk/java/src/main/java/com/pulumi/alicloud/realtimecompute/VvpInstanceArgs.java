// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.realtimecompute;

import com.pulumi.alicloud.realtimecompute.inputs.VvpInstanceResourceSpecArgs;
import com.pulumi.alicloud.realtimecompute.inputs.VvpInstanceStorageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VvpInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VvpInstanceArgs Empty = new VvpInstanceArgs();

    /**
     * The number of subscription periods. If the payment type is PRE, this parameter is required.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return The number of subscription periods. If the payment type is PRE, this parameter is required.
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * The payment type of the resource.
     * 
     */
    @Import(name="paymentType", required=true)
    private Output<String> paymentType;

    /**
     * @return The payment type of the resource.
     * 
     */
    public Output<String> paymentType() {
        return this.paymentType;
    }

    /**
     * The subscription period. If the payment type is PRE, this parameter is required.
     * 
     */
    @Import(name="pricingCycle")
    private @Nullable Output<String> pricingCycle;

    /**
     * @return The subscription period. If the payment type is PRE, this parameter is required.
     * 
     */
    public Optional<Output<String>> pricingCycle() {
        return Optional.ofNullable(this.pricingCycle);
    }

    /**
     * The resource group to which the newly purchased instance belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The resource group to which the newly purchased instance belongs.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Resource specifications. See `resource_spec` below.
     * 
     */
    @Import(name="resourceSpec")
    private @Nullable Output<VvpInstanceResourceSpecArgs> resourceSpec;

    /**
     * @return Resource specifications. See `resource_spec` below.
     * 
     */
    public Optional<Output<VvpInstanceResourceSpecArgs>> resourceSpec() {
        return Optional.ofNullable(this.resourceSpec);
    }

    /**
     * Store information. See `storage` below.
     * 
     */
    @Import(name="storage", required=true)
    private Output<VvpInstanceStorageArgs> storage;

    /**
     * @return Store information. See `storage` below.
     * 
     */
    public Output<VvpInstanceStorageArgs> storage() {
        return this.storage;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return The tags of the resource.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The VPC ID of the user.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The VPC ID of the user.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * Virtual Switch ID.
     * 
     */
    @Import(name="vswitchIds", required=true)
    private Output<List<String>> vswitchIds;

    /**
     * @return Virtual Switch ID.
     * 
     */
    public Output<List<String>> vswitchIds() {
        return this.vswitchIds;
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="vvpInstanceName", required=true)
    private Output<String> vvpInstanceName;

    /**
     * @return The name of the workspace.
     * 
     */
    public Output<String> vvpInstanceName() {
        return this.vvpInstanceName;
    }

    /**
     * The zone ID of the resource.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone ID of the resource.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private VvpInstanceArgs() {}

    private VvpInstanceArgs(VvpInstanceArgs $) {
        this.duration = $.duration;
        this.paymentType = $.paymentType;
        this.pricingCycle = $.pricingCycle;
        this.resourceGroupId = $.resourceGroupId;
        this.resourceSpec = $.resourceSpec;
        this.storage = $.storage;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
        this.vswitchIds = $.vswitchIds;
        this.vvpInstanceName = $.vvpInstanceName;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VvpInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VvpInstanceArgs $;

        public Builder() {
            $ = new VvpInstanceArgs();
        }

        public Builder(VvpInstanceArgs defaults) {
            $ = new VvpInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param duration The number of subscription periods. If the payment type is PRE, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The number of subscription periods. If the payment type is PRE, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param paymentType The payment type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param pricingCycle The subscription period. If the payment type is PRE, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(@Nullable Output<String> pricingCycle) {
            $.pricingCycle = pricingCycle;
            return this;
        }

        /**
         * @param pricingCycle The subscription period. If the payment type is PRE, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(String pricingCycle) {
            return pricingCycle(Output.of(pricingCycle));
        }

        /**
         * @param resourceGroupId The resource group to which the newly purchased instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The resource group to which the newly purchased instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param resourceSpec Resource specifications. See `resource_spec` below.
         * 
         * @return builder
         * 
         */
        public Builder resourceSpec(@Nullable Output<VvpInstanceResourceSpecArgs> resourceSpec) {
            $.resourceSpec = resourceSpec;
            return this;
        }

        /**
         * @param resourceSpec Resource specifications. See `resource_spec` below.
         * 
         * @return builder
         * 
         */
        public Builder resourceSpec(VvpInstanceResourceSpecArgs resourceSpec) {
            return resourceSpec(Output.of(resourceSpec));
        }

        /**
         * @param storage Store information. See `storage` below.
         * 
         * @return builder
         * 
         */
        public Builder storage(Output<VvpInstanceStorageArgs> storage) {
            $.storage = storage;
            return this;
        }

        /**
         * @param storage Store information. See `storage` below.
         * 
         * @return builder
         * 
         */
        public Builder storage(VvpInstanceStorageArgs storage) {
            return storage(Output.of(storage));
        }

        /**
         * @param tags The tags of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vpcId The VPC ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The VPC ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchIds Virtual Switch ID.
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(Output<List<String>> vswitchIds) {
            $.vswitchIds = vswitchIds;
            return this;
        }

        /**
         * @param vswitchIds Virtual Switch ID.
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(List<String> vswitchIds) {
            return vswitchIds(Output.of(vswitchIds));
        }

        /**
         * @param vswitchIds Virtual Switch ID.
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }

        /**
         * @param vvpInstanceName The name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder vvpInstanceName(Output<String> vvpInstanceName) {
            $.vvpInstanceName = vvpInstanceName;
            return this;
        }

        /**
         * @param vvpInstanceName The name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder vvpInstanceName(String vvpInstanceName) {
            return vvpInstanceName(Output.of(vvpInstanceName));
        }

        /**
         * @param zoneId The zone ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public VvpInstanceArgs build() {
            if ($.paymentType == null) {
                throw new MissingRequiredPropertyException("VvpInstanceArgs", "paymentType");
            }
            if ($.storage == null) {
                throw new MissingRequiredPropertyException("VvpInstanceArgs", "storage");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("VvpInstanceArgs", "vpcId");
            }
            if ($.vswitchIds == null) {
                throw new MissingRequiredPropertyException("VvpInstanceArgs", "vswitchIds");
            }
            if ($.vvpInstanceName == null) {
                throw new MissingRequiredPropertyException("VvpInstanceArgs", "vvpInstanceName");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("VvpInstanceArgs", "zoneId");
            }
            return $;
        }
    }

}
