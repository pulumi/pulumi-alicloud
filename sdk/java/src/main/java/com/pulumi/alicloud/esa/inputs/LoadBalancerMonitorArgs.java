// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerMonitorArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerMonitorArgs Empty = new LoadBalancerMonitorArgs();

    /**
     * The number of consecutive failed health checks before the backend is considered down, for example, 5.
     * 
     */
    @Import(name="consecutiveDown")
    private @Nullable Output<Integer> consecutiveDown;

    /**
     * @return The number of consecutive failed health checks before the backend is considered down, for example, 5.
     * 
     */
    public Optional<Output<Integer>> consecutiveDown() {
        return Optional.ofNullable(this.consecutiveDown);
    }

    /**
     * The number of consecutive successful probes required to consider the target as up, e.g., 3.
     * 
     */
    @Import(name="consecutiveUp")
    private @Nullable Output<Integer> consecutiveUp;

    /**
     * @return The number of consecutive successful probes required to consider the target as up, e.g., 3.
     * 
     */
    public Optional<Output<Integer>> consecutiveUp() {
        return Optional.ofNullable(this.consecutiveUp);
    }

    /**
     * Expected status code, such as 200,202, successful HTTP response.
     * 
     */
    @Import(name="expectedCodes")
    private @Nullable Output<String> expectedCodes;

    /**
     * @return Expected status code, such as 200,202, successful HTTP response.
     * 
     */
    public Optional<Output<String>> expectedCodes() {
        return Optional.ofNullable(this.expectedCodes);
    }

    /**
     * Whether to follow the redirect.
     * 
     */
    @Import(name="followRedirects")
    private @Nullable Output<Boolean> followRedirects;

    /**
     * @return Whether to follow the redirect.
     * 
     */
    public Optional<Output<Boolean>> followRedirects() {
        return Optional.ofNullable(this.followRedirects);
    }

    /**
     * The HTTP headers to be included in the health check request.
     * 
     */
    @Import(name="header")
    private @Nullable Output<String> header;

    /**
     * @return The HTTP headers to be included in the health check request.
     * 
     */
    public Optional<Output<String>> header() {
        return Optional.ofNullable(this.header);
    }

    /**
     * The monitoring interval, such as 60 seconds, checks the frequency.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The monitoring interval, such as 60 seconds, checks the frequency.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Monitor request methods, such as GET, methods in the HTTP protocol.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return Monitor request methods, such as GET, methods in the HTTP protocol.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * Probe Point Region, default to Global
     * - `Global`: Global.
     * - `ChineseMainland`: Chinese mainland.
     * - `OutsideChineseMainland`: Global (excluding the Chinese mainland).
     * 
     */
    @Import(name="monitoringRegion")
    private @Nullable Output<String> monitoringRegion;

    /**
     * @return Probe Point Region, default to Global
     * - `Global`: Global.
     * - `ChineseMainland`: Chinese mainland.
     * - `OutsideChineseMainland`: Global (excluding the Chinese mainland).
     * 
     */
    public Optional<Output<String>> monitoringRegion() {
        return Optional.ofNullable(this.monitoringRegion);
    }

    /**
     * The monitor checks the path, such as/healthcheck, the HTTP request path.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The monitor checks the path, such as/healthcheck, the HTTP request path.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The target port.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The target port.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The timeout for the health check, in seconds. The value range is 1-10.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The timeout for the health check, in seconds. The value range is 1-10.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The type of monitor protocol, such as HTTP, used for health checks. When the value is off, it indicates that no check is performed.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of monitor protocol, such as HTTP, used for health checks. When the value is off, it indicates that no check is performed.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private LoadBalancerMonitorArgs() {}

    private LoadBalancerMonitorArgs(LoadBalancerMonitorArgs $) {
        this.consecutiveDown = $.consecutiveDown;
        this.consecutiveUp = $.consecutiveUp;
        this.expectedCodes = $.expectedCodes;
        this.followRedirects = $.followRedirects;
        this.header = $.header;
        this.interval = $.interval;
        this.method = $.method;
        this.monitoringRegion = $.monitoringRegion;
        this.path = $.path;
        this.port = $.port;
        this.timeout = $.timeout;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerMonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerMonitorArgs $;

        public Builder() {
            $ = new LoadBalancerMonitorArgs();
        }

        public Builder(LoadBalancerMonitorArgs defaults) {
            $ = new LoadBalancerMonitorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consecutiveDown The number of consecutive failed health checks before the backend is considered down, for example, 5.
         * 
         * @return builder
         * 
         */
        public Builder consecutiveDown(@Nullable Output<Integer> consecutiveDown) {
            $.consecutiveDown = consecutiveDown;
            return this;
        }

        /**
         * @param consecutiveDown The number of consecutive failed health checks before the backend is considered down, for example, 5.
         * 
         * @return builder
         * 
         */
        public Builder consecutiveDown(Integer consecutiveDown) {
            return consecutiveDown(Output.of(consecutiveDown));
        }

        /**
         * @param consecutiveUp The number of consecutive successful probes required to consider the target as up, e.g., 3.
         * 
         * @return builder
         * 
         */
        public Builder consecutiveUp(@Nullable Output<Integer> consecutiveUp) {
            $.consecutiveUp = consecutiveUp;
            return this;
        }

        /**
         * @param consecutiveUp The number of consecutive successful probes required to consider the target as up, e.g., 3.
         * 
         * @return builder
         * 
         */
        public Builder consecutiveUp(Integer consecutiveUp) {
            return consecutiveUp(Output.of(consecutiveUp));
        }

        /**
         * @param expectedCodes Expected status code, such as 200,202, successful HTTP response.
         * 
         * @return builder
         * 
         */
        public Builder expectedCodes(@Nullable Output<String> expectedCodes) {
            $.expectedCodes = expectedCodes;
            return this;
        }

        /**
         * @param expectedCodes Expected status code, such as 200,202, successful HTTP response.
         * 
         * @return builder
         * 
         */
        public Builder expectedCodes(String expectedCodes) {
            return expectedCodes(Output.of(expectedCodes));
        }

        /**
         * @param followRedirects Whether to follow the redirect.
         * 
         * @return builder
         * 
         */
        public Builder followRedirects(@Nullable Output<Boolean> followRedirects) {
            $.followRedirects = followRedirects;
            return this;
        }

        /**
         * @param followRedirects Whether to follow the redirect.
         * 
         * @return builder
         * 
         */
        public Builder followRedirects(Boolean followRedirects) {
            return followRedirects(Output.of(followRedirects));
        }

        /**
         * @param header The HTTP headers to be included in the health check request.
         * 
         * @return builder
         * 
         */
        public Builder header(@Nullable Output<String> header) {
            $.header = header;
            return this;
        }

        /**
         * @param header The HTTP headers to be included in the health check request.
         * 
         * @return builder
         * 
         */
        public Builder header(String header) {
            return header(Output.of(header));
        }

        /**
         * @param interval The monitoring interval, such as 60 seconds, checks the frequency.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The monitoring interval, such as 60 seconds, checks the frequency.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param method Monitor request methods, such as GET, methods in the HTTP protocol.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method Monitor request methods, such as GET, methods in the HTTP protocol.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param monitoringRegion Probe Point Region, default to Global
         * - `Global`: Global.
         * - `ChineseMainland`: Chinese mainland.
         * - `OutsideChineseMainland`: Global (excluding the Chinese mainland).
         * 
         * @return builder
         * 
         */
        public Builder monitoringRegion(@Nullable Output<String> monitoringRegion) {
            $.monitoringRegion = monitoringRegion;
            return this;
        }

        /**
         * @param monitoringRegion Probe Point Region, default to Global
         * - `Global`: Global.
         * - `ChineseMainland`: Chinese mainland.
         * - `OutsideChineseMainland`: Global (excluding the Chinese mainland).
         * 
         * @return builder
         * 
         */
        public Builder monitoringRegion(String monitoringRegion) {
            return monitoringRegion(Output.of(monitoringRegion));
        }

        /**
         * @param path The monitor checks the path, such as/healthcheck, the HTTP request path.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The monitor checks the path, such as/healthcheck, the HTTP request path.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param port The target port.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The target port.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param timeout The timeout for the health check, in seconds. The value range is 1-10.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The timeout for the health check, in seconds. The value range is 1-10.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param type The type of monitor protocol, such as HTTP, used for health checks. When the value is off, it indicates that no check is performed.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of monitor protocol, such as HTTP, used for health checks. When the value is off, it indicates that no check is performed.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LoadBalancerMonitorArgs build() {
            return $;
        }
    }

}
