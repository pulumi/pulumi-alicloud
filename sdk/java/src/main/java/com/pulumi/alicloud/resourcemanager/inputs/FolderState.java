// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.resourcemanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FolderState extends com.pulumi.resources.ResourceArgs {

    public static final FolderState Empty = new FolderState();

    /**
     * (Available since v1.259.0) The time when the folder was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return (Available since v1.259.0) The time when the folder was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The name of the folder.
     * 
     */
    @Import(name="folderName")
    private @Nullable Output<String> folderName;

    /**
     * @return The name of the folder.
     * 
     */
    public Optional<Output<String>> folderName() {
        return Optional.ofNullable(this.folderName);
    }

    /**
     * The ID of the parent folder.
     * 
     */
    @Import(name="parentFolderId")
    private @Nullable Output<String> parentFolderId;

    /**
     * @return The ID of the parent folder.
     * 
     */
    public Optional<Output<String>> parentFolderId() {
        return Optional.ofNullable(this.parentFolderId);
    }

    /**
     * The tag of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tag of the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private FolderState() {}

    private FolderState(FolderState $) {
        this.createTime = $.createTime;
        this.folderName = $.folderName;
        this.parentFolderId = $.parentFolderId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FolderState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FolderState $;

        public Builder() {
            $ = new FolderState();
        }

        public Builder(FolderState defaults) {
            $ = new FolderState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime (Available since v1.259.0) The time when the folder was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime (Available since v1.259.0) The time when the folder was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param folderName The name of the folder.
         * 
         * @return builder
         * 
         */
        public Builder folderName(@Nullable Output<String> folderName) {
            $.folderName = folderName;
            return this;
        }

        /**
         * @param folderName The name of the folder.
         * 
         * @return builder
         * 
         */
        public Builder folderName(String folderName) {
            return folderName(Output.of(folderName));
        }

        /**
         * @param parentFolderId The ID of the parent folder.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderId(@Nullable Output<String> parentFolderId) {
            $.parentFolderId = parentFolderId;
            return this;
        }

        /**
         * @param parentFolderId The ID of the parent folder.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderId(String parentFolderId) {
            return parentFolderId(Output.of(parentFolderId));
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public FolderState build() {
            return $;
        }
    }

}
