// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.lindorm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PublicNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final PublicNetworkArgs Empty = new PublicNetworkArgs();

    /**
     * Open or close the public connection. Value:
     * 
     */
    @Import(name="enablePublicNetwork")
    private @Nullable Output<Integer> enablePublicNetwork;

    /**
     * @return Open or close the public connection. Value:
     * 
     */
    public Optional<Output<Integer>> enablePublicNetwork() {
        return Optional.ofNullable(this.enablePublicNetwork);
    }

    /**
     * Engine type, value:
     * 
     */
    @Import(name="engineType", required=true)
    private Output<String> engineType;

    /**
     * @return Engine type, value:
     * 
     */
    public Output<String> engineType() {
        return this.engineType;
    }

    /**
     * Instance ID
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return Instance ID
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    private PublicNetworkArgs() {}

    private PublicNetworkArgs(PublicNetworkArgs $) {
        this.enablePublicNetwork = $.enablePublicNetwork;
        this.engineType = $.engineType;
        this.instanceId = $.instanceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PublicNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PublicNetworkArgs $;

        public Builder() {
            $ = new PublicNetworkArgs();
        }

        public Builder(PublicNetworkArgs defaults) {
            $ = new PublicNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enablePublicNetwork Open or close the public connection. Value:
         * 
         * @return builder
         * 
         */
        public Builder enablePublicNetwork(@Nullable Output<Integer> enablePublicNetwork) {
            $.enablePublicNetwork = enablePublicNetwork;
            return this;
        }

        /**
         * @param enablePublicNetwork Open or close the public connection. Value:
         * 
         * @return builder
         * 
         */
        public Builder enablePublicNetwork(Integer enablePublicNetwork) {
            return enablePublicNetwork(Output.of(enablePublicNetwork));
        }

        /**
         * @param engineType Engine type, value:
         * 
         * @return builder
         * 
         */
        public Builder engineType(Output<String> engineType) {
            $.engineType = engineType;
            return this;
        }

        /**
         * @param engineType Engine type, value:
         * 
         * @return builder
         * 
         */
        public Builder engineType(String engineType) {
            return engineType(Output.of(engineType));
        }

        /**
         * @param instanceId Instance ID
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId Instance ID
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        public PublicNetworkArgs build() {
            if ($.engineType == null) {
                throw new MissingRequiredPropertyException("PublicNetworkArgs", "engineType");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("PublicNetworkArgs", "instanceId");
            }
            return $;
        }
    }

}
