// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.privatelink;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcEndpointZoneArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcEndpointZoneArgs Empty = new VpcEndpointZoneArgs();

    /**
     * Specifies whether to perform only a dry run, without performing the actual request. Valid values:
     * - **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
     * - **false (default)**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Specifies whether to perform only a dry run, without performing the actual request. Valid values:
     * - **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
     * - **false (default)**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The endpoint ID.
     * 
     */
    @Import(name="endpointId", required=true)
    private Output<String> endpointId;

    /**
     * @return The endpoint ID.
     * 
     */
    public Output<String> endpointId() {
        return this.endpointId;
    }

    /**
     * The IP address of the endpoint ENI.
     * 
     */
    @Import(name="eniIp")
    private @Nullable Output<String> eniIp;

    /**
     * @return The IP address of the endpoint ENI.
     * 
     */
    public Optional<Output<String>> eniIp() {
        return Optional.ofNullable(this.eniIp);
    }

    /**
     * The ID of the vSwitch in the zone. .
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return The ID of the vSwitch in the zone. .
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    /**
     * The zone ID.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone ID.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private VpcEndpointZoneArgs() {}

    private VpcEndpointZoneArgs(VpcEndpointZoneArgs $) {
        this.dryRun = $.dryRun;
        this.endpointId = $.endpointId;
        this.eniIp = $.eniIp;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcEndpointZoneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcEndpointZoneArgs $;

        public Builder() {
            $ = new VpcEndpointZoneArgs();
        }

        public Builder(VpcEndpointZoneArgs defaults) {
            $ = new VpcEndpointZoneArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dryRun Specifies whether to perform only a dry run, without performing the actual request. Valid values:
         * - **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
         * - **false (default)**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Specifies whether to perform only a dry run, without performing the actual request. Valid values:
         * - **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
         * - **false (default)**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param endpointId The endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder endpointId(Output<String> endpointId) {
            $.endpointId = endpointId;
            return this;
        }

        /**
         * @param endpointId The endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder endpointId(String endpointId) {
            return endpointId(Output.of(endpointId));
        }

        /**
         * @param eniIp The IP address of the endpoint ENI.
         * 
         * @return builder
         * 
         */
        public Builder eniIp(@Nullable Output<String> eniIp) {
            $.eniIp = eniIp;
            return this;
        }

        /**
         * @param eniIp The IP address of the endpoint ENI.
         * 
         * @return builder
         * 
         */
        public Builder eniIp(String eniIp) {
            return eniIp(Output.of(eniIp));
        }

        /**
         * @param vswitchId The ID of the vSwitch in the zone. .
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the vSwitch in the zone. .
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The zone ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public VpcEndpointZoneArgs build() {
            if ($.endpointId == null) {
                throw new MissingRequiredPropertyException("VpcEndpointZoneArgs", "endpointId");
            }
            if ($.vswitchId == null) {
                throw new MissingRequiredPropertyException("VpcEndpointZoneArgs", "vswitchId");
            }
            return $;
        }
    }

}
