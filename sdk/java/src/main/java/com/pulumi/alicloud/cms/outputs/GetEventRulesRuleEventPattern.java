// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.outputs;

import com.pulumi.alicloud.cms.outputs.GetEventRulesRuleEventPatternKeywordFilter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEventRulesRuleEventPattern {
    /**
     * @return The list of event types.
     * 
     */
    private List<String> eventTypeLists;
    /**
     * @return The filter keyword.
     * 
     */
    private List<GetEventRulesRuleEventPatternKeywordFilter> keywordFilters;
    /**
     * @return The list of event levels.
     * 
     */
    private List<String> levelLists;
    /**
     * @return The list of event names.
     * 
     */
    private List<String> nameLists;
    /**
     * @return The type of the cloud service.
     * 
     */
    private String product;
    /**
     * @return The SQL condition that is used to filter events.
     * 
     */
    private String sqlFilter;

    private GetEventRulesRuleEventPattern() {}
    /**
     * @return The list of event types.
     * 
     */
    public List<String> eventTypeLists() {
        return this.eventTypeLists;
    }
    /**
     * @return The filter keyword.
     * 
     */
    public List<GetEventRulesRuleEventPatternKeywordFilter> keywordFilters() {
        return this.keywordFilters;
    }
    /**
     * @return The list of event levels.
     * 
     */
    public List<String> levelLists() {
        return this.levelLists;
    }
    /**
     * @return The list of event names.
     * 
     */
    public List<String> nameLists() {
        return this.nameLists;
    }
    /**
     * @return The type of the cloud service.
     * 
     */
    public String product() {
        return this.product;
    }
    /**
     * @return The SQL condition that is used to filter events.
     * 
     */
    public String sqlFilter() {
        return this.sqlFilter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventRulesRuleEventPattern defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> eventTypeLists;
        private List<GetEventRulesRuleEventPatternKeywordFilter> keywordFilters;
        private List<String> levelLists;
        private List<String> nameLists;
        private String product;
        private String sqlFilter;
        public Builder() {}
        public Builder(GetEventRulesRuleEventPattern defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eventTypeLists = defaults.eventTypeLists;
    	      this.keywordFilters = defaults.keywordFilters;
    	      this.levelLists = defaults.levelLists;
    	      this.nameLists = defaults.nameLists;
    	      this.product = defaults.product;
    	      this.sqlFilter = defaults.sqlFilter;
        }

        @CustomType.Setter
        public Builder eventTypeLists(List<String> eventTypeLists) {
            if (eventTypeLists == null) {
              throw new MissingRequiredPropertyException("GetEventRulesRuleEventPattern", "eventTypeLists");
            }
            this.eventTypeLists = eventTypeLists;
            return this;
        }
        public Builder eventTypeLists(String... eventTypeLists) {
            return eventTypeLists(List.of(eventTypeLists));
        }
        @CustomType.Setter
        public Builder keywordFilters(List<GetEventRulesRuleEventPatternKeywordFilter> keywordFilters) {
            if (keywordFilters == null) {
              throw new MissingRequiredPropertyException("GetEventRulesRuleEventPattern", "keywordFilters");
            }
            this.keywordFilters = keywordFilters;
            return this;
        }
        public Builder keywordFilters(GetEventRulesRuleEventPatternKeywordFilter... keywordFilters) {
            return keywordFilters(List.of(keywordFilters));
        }
        @CustomType.Setter
        public Builder levelLists(List<String> levelLists) {
            if (levelLists == null) {
              throw new MissingRequiredPropertyException("GetEventRulesRuleEventPattern", "levelLists");
            }
            this.levelLists = levelLists;
            return this;
        }
        public Builder levelLists(String... levelLists) {
            return levelLists(List.of(levelLists));
        }
        @CustomType.Setter
        public Builder nameLists(List<String> nameLists) {
            if (nameLists == null) {
              throw new MissingRequiredPropertyException("GetEventRulesRuleEventPattern", "nameLists");
            }
            this.nameLists = nameLists;
            return this;
        }
        public Builder nameLists(String... nameLists) {
            return nameLists(List.of(nameLists));
        }
        @CustomType.Setter
        public Builder product(String product) {
            if (product == null) {
              throw new MissingRequiredPropertyException("GetEventRulesRuleEventPattern", "product");
            }
            this.product = product;
            return this;
        }
        @CustomType.Setter
        public Builder sqlFilter(String sqlFilter) {
            if (sqlFilter == null) {
              throw new MissingRequiredPropertyException("GetEventRulesRuleEventPattern", "sqlFilter");
            }
            this.sqlFilter = sqlFilter;
            return this;
        }
        public GetEventRulesRuleEventPattern build() {
            final var _resultValue = new GetEventRulesRuleEventPattern();
            _resultValue.eventTypeLists = eventTypeLists;
            _resultValue.keywordFilters = keywordFilters;
            _resultValue.levelLists = levelLists;
            _resultValue.nameLists = nameLists;
            _resultValue.product = product;
            _resultValue.sqlFilter = sqlFilter;
            return _resultValue;
        }
    }
}
