// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLogBackupsLogbackup {
    /**
     * @return The ID of the Master node of the instance.
     * 
     */
    private String dbInstanceId;
    /**
     * @return The first ID of the resource
     * 
     */
    private String logBackupId;
    /**
     * @return Log file name (OSS path).
     * 
     */
    private String logFileName;
    /**
     * @return Size of the backup log file. Unit: Byte.
     * 
     */
    private Integer logFileSize;
    /**
     * @return The log timestamp.
     * 
     */
    private String logTime;
    /**
     * @return Total number of records.
     * 
     */
    private Integer recordTotal;
    /**
     * @return The node name.
     * 
     */
    private String segmentName;

    private GetLogBackupsLogbackup() {}
    /**
     * @return The ID of the Master node of the instance.
     * 
     */
    public String dbInstanceId() {
        return this.dbInstanceId;
    }
    /**
     * @return The first ID of the resource
     * 
     */
    public String logBackupId() {
        return this.logBackupId;
    }
    /**
     * @return Log file name (OSS path).
     * 
     */
    public String logFileName() {
        return this.logFileName;
    }
    /**
     * @return Size of the backup log file. Unit: Byte.
     * 
     */
    public Integer logFileSize() {
        return this.logFileSize;
    }
    /**
     * @return The log timestamp.
     * 
     */
    public String logTime() {
        return this.logTime;
    }
    /**
     * @return Total number of records.
     * 
     */
    public Integer recordTotal() {
        return this.recordTotal;
    }
    /**
     * @return The node name.
     * 
     */
    public String segmentName() {
        return this.segmentName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLogBackupsLogbackup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dbInstanceId;
        private String logBackupId;
        private String logFileName;
        private Integer logFileSize;
        private String logTime;
        private Integer recordTotal;
        private String segmentName;
        public Builder() {}
        public Builder(GetLogBackupsLogbackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dbInstanceId = defaults.dbInstanceId;
    	      this.logBackupId = defaults.logBackupId;
    	      this.logFileName = defaults.logFileName;
    	      this.logFileSize = defaults.logFileSize;
    	      this.logTime = defaults.logTime;
    	      this.recordTotal = defaults.recordTotal;
    	      this.segmentName = defaults.segmentName;
        }

        @CustomType.Setter
        public Builder dbInstanceId(String dbInstanceId) {
            if (dbInstanceId == null) {
              throw new MissingRequiredPropertyException("GetLogBackupsLogbackup", "dbInstanceId");
            }
            this.dbInstanceId = dbInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder logBackupId(String logBackupId) {
            if (logBackupId == null) {
              throw new MissingRequiredPropertyException("GetLogBackupsLogbackup", "logBackupId");
            }
            this.logBackupId = logBackupId;
            return this;
        }
        @CustomType.Setter
        public Builder logFileName(String logFileName) {
            if (logFileName == null) {
              throw new MissingRequiredPropertyException("GetLogBackupsLogbackup", "logFileName");
            }
            this.logFileName = logFileName;
            return this;
        }
        @CustomType.Setter
        public Builder logFileSize(Integer logFileSize) {
            if (logFileSize == null) {
              throw new MissingRequiredPropertyException("GetLogBackupsLogbackup", "logFileSize");
            }
            this.logFileSize = logFileSize;
            return this;
        }
        @CustomType.Setter
        public Builder logTime(String logTime) {
            if (logTime == null) {
              throw new MissingRequiredPropertyException("GetLogBackupsLogbackup", "logTime");
            }
            this.logTime = logTime;
            return this;
        }
        @CustomType.Setter
        public Builder recordTotal(Integer recordTotal) {
            if (recordTotal == null) {
              throw new MissingRequiredPropertyException("GetLogBackupsLogbackup", "recordTotal");
            }
            this.recordTotal = recordTotal;
            return this;
        }
        @CustomType.Setter
        public Builder segmentName(String segmentName) {
            if (segmentName == null) {
              throw new MissingRequiredPropertyException("GetLogBackupsLogbackup", "segmentName");
            }
            this.segmentName = segmentName;
            return this;
        }
        public GetLogBackupsLogbackup build() {
            final var _resultValue = new GetLogBackupsLogbackup();
            _resultValue.dbInstanceId = dbInstanceId;
            _resultValue.logBackupId = logBackupId;
            _resultValue.logFileName = logFileName;
            _resultValue.logFileSize = logFileSize;
            _resultValue.logTime = logTime;
            _resultValue.recordTotal = recordTotal;
            _resultValue.segmentName = segmentName;
            return _resultValue;
        }
    }
}
