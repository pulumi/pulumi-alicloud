// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SiteOriginClientCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final SiteOriginClientCertificateArgs Empty = new SiteOriginClientCertificateArgs();

    /**
     * The certificate content.
     * 
     */
    @Import(name="certificate", required=true)
    private Output<String> certificate;

    /**
     * @return The certificate content.
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }

    /**
     * The private key of the certificate.
     * 
     */
    @Import(name="privateKey", required=true)
    private Output<String> privateKey;

    /**
     * @return The private key of the certificate.
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }

    /**
     * Site ID.
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return Site ID.
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    /**
     * The certificate name.
     * 
     */
    @Import(name="siteOriginClientCertificateName")
    private @Nullable Output<String> siteOriginClientCertificateName;

    /**
     * @return The certificate name.
     * 
     */
    public Optional<Output<String>> siteOriginClientCertificateName() {
        return Optional.ofNullable(this.siteOriginClientCertificateName);
    }

    private SiteOriginClientCertificateArgs() {}

    private SiteOriginClientCertificateArgs(SiteOriginClientCertificateArgs $) {
        this.certificate = $.certificate;
        this.privateKey = $.privateKey;
        this.siteId = $.siteId;
        this.siteOriginClientCertificateName = $.siteOriginClientCertificateName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SiteOriginClientCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SiteOriginClientCertificateArgs $;

        public Builder() {
            $ = new SiteOriginClientCertificateArgs();
        }

        public Builder(SiteOriginClientCertificateArgs defaults) {
            $ = new SiteOriginClientCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate The certificate content.
         * 
         * @return builder
         * 
         */
        public Builder certificate(Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The certificate content.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param privateKey The private key of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The private key of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param siteId Site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId Site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param siteOriginClientCertificateName The certificate name.
         * 
         * @return builder
         * 
         */
        public Builder siteOriginClientCertificateName(@Nullable Output<String> siteOriginClientCertificateName) {
            $.siteOriginClientCertificateName = siteOriginClientCertificateName;
            return this;
        }

        /**
         * @param siteOriginClientCertificateName The certificate name.
         * 
         * @return builder
         * 
         */
        public Builder siteOriginClientCertificateName(String siteOriginClientCertificateName) {
            return siteOriginClientCertificateName(Output.of(siteOriginClientCertificateName));
        }

        public SiteOriginClientCertificateArgs build() {
            if ($.certificate == null) {
                throw new MissingRequiredPropertyException("SiteOriginClientCertificateArgs", "certificate");
            }
            if ($.privateKey == null) {
                throw new MissingRequiredPropertyException("SiteOriginClientCertificateArgs", "privateKey");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("SiteOriginClientCertificateArgs", "siteId");
            }
            return $;
        }
    }

}
