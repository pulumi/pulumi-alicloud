// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb;

import com.pulumi.alicloud.gpdb.inputs.DbInstancePlanPlanConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbInstancePlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbInstancePlanArgs Empty = new DbInstancePlanArgs();

    /**
     * The ID of the Database instance.
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return The ID of the Database instance.
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    /**
     * The name of the Plan.
     * 
     */
    @Import(name="dbInstancePlanName", required=true)
    private Output<String> dbInstancePlanName;

    /**
     * @return The name of the Plan.
     * 
     */
    public Output<String> dbInstancePlanName() {
        return this.dbInstancePlanName;
    }

    /**
     * The plan config. See `plan_config` below.
     * 
     */
    @Import(name="planConfigs", required=true)
    private Output<List<DbInstancePlanPlanConfigArgs>> planConfigs;

    /**
     * @return The plan config. See `plan_config` below.
     * 
     */
    public Output<List<DbInstancePlanPlanConfigArgs>> planConfigs() {
        return this.planConfigs;
    }

    /**
     * The description of the Plan.
     * 
     */
    @Import(name="planDesc")
    private @Nullable Output<String> planDesc;

    /**
     * @return The description of the Plan.
     * 
     */
    public Optional<Output<String>> planDesc() {
        return Optional.ofNullable(this.planDesc);
    }

    /**
     * The end time of the Plan.
     * 
     */
    @Import(name="planEndDate")
    private @Nullable Output<String> planEndDate;

    /**
     * @return The end time of the Plan.
     * 
     */
    public Optional<Output<String>> planEndDate() {
        return Optional.ofNullable(this.planEndDate);
    }

    /**
     * Plan scheduling type. Valid values: `Postpone`, `Regular`.
     * 
     */
    @Import(name="planScheduleType", required=true)
    private Output<String> planScheduleType;

    /**
     * @return Plan scheduling type. Valid values: `Postpone`, `Regular`.
     * 
     */
    public Output<String> planScheduleType() {
        return this.planScheduleType;
    }

    /**
     * The start time of the Plan.
     * 
     */
    @Import(name="planStartDate")
    private @Nullable Output<String> planStartDate;

    /**
     * @return The start time of the Plan.
     * 
     */
    public Optional<Output<String>> planStartDate() {
        return Optional.ofNullable(this.planStartDate);
    }

    /**
     * The type of the Plan. Valid values: `PauseResume`, `Resize`.
     * 
     */
    @Import(name="planType", required=true)
    private Output<String> planType;

    /**
     * @return The type of the Plan. Valid values: `PauseResume`, `Resize`.
     * 
     */
    public Output<String> planType() {
        return this.planType;
    }

    /**
     * The Status of the Plan. Valid values: `active`, `cancel`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The Status of the Plan. Valid values: `active`, `cancel`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private DbInstancePlanArgs() {}

    private DbInstancePlanArgs(DbInstancePlanArgs $) {
        this.dbInstanceId = $.dbInstanceId;
        this.dbInstancePlanName = $.dbInstancePlanName;
        this.planConfigs = $.planConfigs;
        this.planDesc = $.planDesc;
        this.planEndDate = $.planEndDate;
        this.planScheduleType = $.planScheduleType;
        this.planStartDate = $.planStartDate;
        this.planType = $.planType;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbInstancePlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbInstancePlanArgs $;

        public Builder() {
            $ = new DbInstancePlanArgs();
        }

        public Builder(DbInstancePlanArgs defaults) {
            $ = new DbInstancePlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbInstanceId The ID of the Database instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The ID of the Database instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param dbInstancePlanName The name of the Plan.
         * 
         * @return builder
         * 
         */
        public Builder dbInstancePlanName(Output<String> dbInstancePlanName) {
            $.dbInstancePlanName = dbInstancePlanName;
            return this;
        }

        /**
         * @param dbInstancePlanName The name of the Plan.
         * 
         * @return builder
         * 
         */
        public Builder dbInstancePlanName(String dbInstancePlanName) {
            return dbInstancePlanName(Output.of(dbInstancePlanName));
        }

        /**
         * @param planConfigs The plan config. See `plan_config` below.
         * 
         * @return builder
         * 
         */
        public Builder planConfigs(Output<List<DbInstancePlanPlanConfigArgs>> planConfigs) {
            $.planConfigs = planConfigs;
            return this;
        }

        /**
         * @param planConfigs The plan config. See `plan_config` below.
         * 
         * @return builder
         * 
         */
        public Builder planConfigs(List<DbInstancePlanPlanConfigArgs> planConfigs) {
            return planConfigs(Output.of(planConfigs));
        }

        /**
         * @param planConfigs The plan config. See `plan_config` below.
         * 
         * @return builder
         * 
         */
        public Builder planConfigs(DbInstancePlanPlanConfigArgs... planConfigs) {
            return planConfigs(List.of(planConfigs));
        }

        /**
         * @param planDesc The description of the Plan.
         * 
         * @return builder
         * 
         */
        public Builder planDesc(@Nullable Output<String> planDesc) {
            $.planDesc = planDesc;
            return this;
        }

        /**
         * @param planDesc The description of the Plan.
         * 
         * @return builder
         * 
         */
        public Builder planDesc(String planDesc) {
            return planDesc(Output.of(planDesc));
        }

        /**
         * @param planEndDate The end time of the Plan.
         * 
         * @return builder
         * 
         */
        public Builder planEndDate(@Nullable Output<String> planEndDate) {
            $.planEndDate = planEndDate;
            return this;
        }

        /**
         * @param planEndDate The end time of the Plan.
         * 
         * @return builder
         * 
         */
        public Builder planEndDate(String planEndDate) {
            return planEndDate(Output.of(planEndDate));
        }

        /**
         * @param planScheduleType Plan scheduling type. Valid values: `Postpone`, `Regular`.
         * 
         * @return builder
         * 
         */
        public Builder planScheduleType(Output<String> planScheduleType) {
            $.planScheduleType = planScheduleType;
            return this;
        }

        /**
         * @param planScheduleType Plan scheduling type. Valid values: `Postpone`, `Regular`.
         * 
         * @return builder
         * 
         */
        public Builder planScheduleType(String planScheduleType) {
            return planScheduleType(Output.of(planScheduleType));
        }

        /**
         * @param planStartDate The start time of the Plan.
         * 
         * @return builder
         * 
         */
        public Builder planStartDate(@Nullable Output<String> planStartDate) {
            $.planStartDate = planStartDate;
            return this;
        }

        /**
         * @param planStartDate The start time of the Plan.
         * 
         * @return builder
         * 
         */
        public Builder planStartDate(String planStartDate) {
            return planStartDate(Output.of(planStartDate));
        }

        /**
         * @param planType The type of the Plan. Valid values: `PauseResume`, `Resize`.
         * 
         * @return builder
         * 
         */
        public Builder planType(Output<String> planType) {
            $.planType = planType;
            return this;
        }

        /**
         * @param planType The type of the Plan. Valid values: `PauseResume`, `Resize`.
         * 
         * @return builder
         * 
         */
        public Builder planType(String planType) {
            return planType(Output.of(planType));
        }

        /**
         * @param status The Status of the Plan. Valid values: `active`, `cancel`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The Status of the Plan. Valid values: `active`, `cancel`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public DbInstancePlanArgs build() {
            if ($.dbInstanceId == null) {
                throw new MissingRequiredPropertyException("DbInstancePlanArgs", "dbInstanceId");
            }
            if ($.dbInstancePlanName == null) {
                throw new MissingRequiredPropertyException("DbInstancePlanArgs", "dbInstancePlanName");
            }
            if ($.planConfigs == null) {
                throw new MissingRequiredPropertyException("DbInstancePlanArgs", "planConfigs");
            }
            if ($.planScheduleType == null) {
                throw new MissingRequiredPropertyException("DbInstancePlanArgs", "planScheduleType");
            }
            if ($.planType == null) {
                throw new MissingRequiredPropertyException("DbInstancePlanArgs", "planType");
            }
            return $;
        }
    }

}
