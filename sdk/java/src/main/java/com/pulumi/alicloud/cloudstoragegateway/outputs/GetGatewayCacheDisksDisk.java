// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudstoragegateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGatewayCacheDisksDisk {
    /**
     * @return The category of eht cache disk.
     * 
     */
    private String cacheDiskCategory;
    /**
     * @return The size of the cache disk.
     * 
     */
    private Integer cacheDiskSizeInGb;
    /**
     * @return The ID of the cache disk.
     * 
     */
    private String cacheId;
    /**
     * @return The expiration time. Time stamp in seconds (s).
     * 
     */
    private Integer expiredTime;
    /**
     * @return The ID of the gateway.
     * 
     */
    private String gatewayId;
    /**
     * @return The ID of the Gateway Cache Disk.
     * 
     */
    private String id;
    /**
     * @return Per second of the input output.
     * 
     */
    private Integer iops;
    /**
     * @return Whether it is used.
     * 
     */
    private Boolean isUsed;
    /**
     * @return The cache disk inside the device name.
     * 
     */
    private String localFilePath;
    /**
     * @return A renewal link of the cache disk.
     * 
     */
    private String renewUrl;
    /**
     * @return The status of the resource.
     * 
     */
    private Integer status;

    private GetGatewayCacheDisksDisk() {}
    /**
     * @return The category of eht cache disk.
     * 
     */
    public String cacheDiskCategory() {
        return this.cacheDiskCategory;
    }
    /**
     * @return The size of the cache disk.
     * 
     */
    public Integer cacheDiskSizeInGb() {
        return this.cacheDiskSizeInGb;
    }
    /**
     * @return The ID of the cache disk.
     * 
     */
    public String cacheId() {
        return this.cacheId;
    }
    /**
     * @return The expiration time. Time stamp in seconds (s).
     * 
     */
    public Integer expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return The ID of the gateway.
     * 
     */
    public String gatewayId() {
        return this.gatewayId;
    }
    /**
     * @return The ID of the Gateway Cache Disk.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Per second of the input output.
     * 
     */
    public Integer iops() {
        return this.iops;
    }
    /**
     * @return Whether it is used.
     * 
     */
    public Boolean isUsed() {
        return this.isUsed;
    }
    /**
     * @return The cache disk inside the device name.
     * 
     */
    public String localFilePath() {
        return this.localFilePath;
    }
    /**
     * @return A renewal link of the cache disk.
     * 
     */
    public String renewUrl() {
        return this.renewUrl;
    }
    /**
     * @return The status of the resource.
     * 
     */
    public Integer status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayCacheDisksDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cacheDiskCategory;
        private Integer cacheDiskSizeInGb;
        private String cacheId;
        private Integer expiredTime;
        private String gatewayId;
        private String id;
        private Integer iops;
        private Boolean isUsed;
        private String localFilePath;
        private String renewUrl;
        private Integer status;
        public Builder() {}
        public Builder(GetGatewayCacheDisksDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheDiskCategory = defaults.cacheDiskCategory;
    	      this.cacheDiskSizeInGb = defaults.cacheDiskSizeInGb;
    	      this.cacheId = defaults.cacheId;
    	      this.expiredTime = defaults.expiredTime;
    	      this.gatewayId = defaults.gatewayId;
    	      this.id = defaults.id;
    	      this.iops = defaults.iops;
    	      this.isUsed = defaults.isUsed;
    	      this.localFilePath = defaults.localFilePath;
    	      this.renewUrl = defaults.renewUrl;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder cacheDiskCategory(String cacheDiskCategory) {
            if (cacheDiskCategory == null) {
              throw new MissingRequiredPropertyException("GetGatewayCacheDisksDisk", "cacheDiskCategory");
            }
            this.cacheDiskCategory = cacheDiskCategory;
            return this;
        }
        @CustomType.Setter
        public Builder cacheDiskSizeInGb(Integer cacheDiskSizeInGb) {
            if (cacheDiskSizeInGb == null) {
              throw new MissingRequiredPropertyException("GetGatewayCacheDisksDisk", "cacheDiskSizeInGb");
            }
            this.cacheDiskSizeInGb = cacheDiskSizeInGb;
            return this;
        }
        @CustomType.Setter
        public Builder cacheId(String cacheId) {
            if (cacheId == null) {
              throw new MissingRequiredPropertyException("GetGatewayCacheDisksDisk", "cacheId");
            }
            this.cacheId = cacheId;
            return this;
        }
        @CustomType.Setter
        public Builder expiredTime(Integer expiredTime) {
            if (expiredTime == null) {
              throw new MissingRequiredPropertyException("GetGatewayCacheDisksDisk", "expiredTime");
            }
            this.expiredTime = expiredTime;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayId(String gatewayId) {
            if (gatewayId == null) {
              throw new MissingRequiredPropertyException("GetGatewayCacheDisksDisk", "gatewayId");
            }
            this.gatewayId = gatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGatewayCacheDisksDisk", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder iops(Integer iops) {
            if (iops == null) {
              throw new MissingRequiredPropertyException("GetGatewayCacheDisksDisk", "iops");
            }
            this.iops = iops;
            return this;
        }
        @CustomType.Setter
        public Builder isUsed(Boolean isUsed) {
            if (isUsed == null) {
              throw new MissingRequiredPropertyException("GetGatewayCacheDisksDisk", "isUsed");
            }
            this.isUsed = isUsed;
            return this;
        }
        @CustomType.Setter
        public Builder localFilePath(String localFilePath) {
            if (localFilePath == null) {
              throw new MissingRequiredPropertyException("GetGatewayCacheDisksDisk", "localFilePath");
            }
            this.localFilePath = localFilePath;
            return this;
        }
        @CustomType.Setter
        public Builder renewUrl(String renewUrl) {
            if (renewUrl == null) {
              throw new MissingRequiredPropertyException("GetGatewayCacheDisksDisk", "renewUrl");
            }
            this.renewUrl = renewUrl;
            return this;
        }
        @CustomType.Setter
        public Builder status(Integer status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetGatewayCacheDisksDisk", "status");
            }
            this.status = status;
            return this;
        }
        public GetGatewayCacheDisksDisk build() {
            final var _resultValue = new GetGatewayCacheDisksDisk();
            _resultValue.cacheDiskCategory = cacheDiskCategory;
            _resultValue.cacheDiskSizeInGb = cacheDiskSizeInGb;
            _resultValue.cacheId = cacheId;
            _resultValue.expiredTime = expiredTime;
            _resultValue.gatewayId = gatewayId;
            _resultValue.id = id;
            _resultValue.iops = iops;
            _resultValue.isUsed = isUsed;
            _resultValue.localFilePath = localFilePath;
            _resultValue.renewUrl = renewUrl;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
