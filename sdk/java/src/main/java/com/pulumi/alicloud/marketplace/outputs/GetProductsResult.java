// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.marketplace.outputs;

import com.pulumi.alicloud.marketplace.outputs.GetProductsProduct;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProductsResult {
    /**
     * @return The category id of the product.
     * 
     */
    private @Nullable String categoryId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of product codes.
     * 
     */
    private List<String> ids;
    private @Nullable String nameRegex;
    private @Nullable String outputFile;
    private @Nullable String productType;
    /**
     * @return A list of products. Each element contains the following attributes:
     * 
     */
    private List<GetProductsProduct> products;
    private @Nullable String searchTerm;
    private @Nullable String sort;
    /**
     * @return The suggested price of the product.
     * 
     */
    private @Nullable Double suggestedPrice;
    /**
     * @return The supplier id of the product.
     * 
     */
    private @Nullable String supplierId;
    private @Nullable String supplierNameKeyword;

    private GetProductsResult() {}
    /**
     * @return The category id of the product.
     * 
     */
    public Optional<String> categoryId() {
        return Optional.ofNullable(this.categoryId);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of product codes.
     * 
     */
    public List<String> ids() {
        return this.ids;
    }
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }
    public Optional<String> productType() {
        return Optional.ofNullable(this.productType);
    }
    /**
     * @return A list of products. Each element contains the following attributes:
     * 
     */
    public List<GetProductsProduct> products() {
        return this.products;
    }
    public Optional<String> searchTerm() {
        return Optional.ofNullable(this.searchTerm);
    }
    public Optional<String> sort() {
        return Optional.ofNullable(this.sort);
    }
    /**
     * @return The suggested price of the product.
     * 
     */
    public Optional<Double> suggestedPrice() {
        return Optional.ofNullable(this.suggestedPrice);
    }
    /**
     * @return The supplier id of the product.
     * 
     */
    public Optional<String> supplierId() {
        return Optional.ofNullable(this.supplierId);
    }
    public Optional<String> supplierNameKeyword() {
        return Optional.ofNullable(this.supplierNameKeyword);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProductsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String categoryId;
        private String id;
        private List<String> ids;
        private @Nullable String nameRegex;
        private @Nullable String outputFile;
        private @Nullable String productType;
        private List<GetProductsProduct> products;
        private @Nullable String searchTerm;
        private @Nullable String sort;
        private @Nullable Double suggestedPrice;
        private @Nullable String supplierId;
        private @Nullable String supplierNameKeyword;
        public Builder() {}
        public Builder(GetProductsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoryId = defaults.categoryId;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.nameRegex = defaults.nameRegex;
    	      this.outputFile = defaults.outputFile;
    	      this.productType = defaults.productType;
    	      this.products = defaults.products;
    	      this.searchTerm = defaults.searchTerm;
    	      this.sort = defaults.sort;
    	      this.suggestedPrice = defaults.suggestedPrice;
    	      this.supplierId = defaults.supplierId;
    	      this.supplierNameKeyword = defaults.supplierNameKeyword;
        }

        @CustomType.Setter
        public Builder categoryId(@Nullable String categoryId) {

            this.categoryId = categoryId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProductsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ids(List<String> ids) {
            if (ids == null) {
              throw new MissingRequiredPropertyException("GetProductsResult", "ids");
            }
            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder nameRegex(@Nullable String nameRegex) {

            this.nameRegex = nameRegex;
            return this;
        }
        @CustomType.Setter
        public Builder outputFile(@Nullable String outputFile) {

            this.outputFile = outputFile;
            return this;
        }
        @CustomType.Setter
        public Builder productType(@Nullable String productType) {

            this.productType = productType;
            return this;
        }
        @CustomType.Setter
        public Builder products(List<GetProductsProduct> products) {
            if (products == null) {
              throw new MissingRequiredPropertyException("GetProductsResult", "products");
            }
            this.products = products;
            return this;
        }
        public Builder products(GetProductsProduct... products) {
            return products(List.of(products));
        }
        @CustomType.Setter
        public Builder searchTerm(@Nullable String searchTerm) {

            this.searchTerm = searchTerm;
            return this;
        }
        @CustomType.Setter
        public Builder sort(@Nullable String sort) {

            this.sort = sort;
            return this;
        }
        @CustomType.Setter
        public Builder suggestedPrice(@Nullable Double suggestedPrice) {

            this.suggestedPrice = suggestedPrice;
            return this;
        }
        @CustomType.Setter
        public Builder supplierId(@Nullable String supplierId) {

            this.supplierId = supplierId;
            return this;
        }
        @CustomType.Setter
        public Builder supplierNameKeyword(@Nullable String supplierNameKeyword) {

            this.supplierNameKeyword = supplierNameKeyword;
            return this;
        }
        public GetProductsResult build() {
            final var _resultValue = new GetProductsResult();
            _resultValue.categoryId = categoryId;
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.nameRegex = nameRegex;
            _resultValue.outputFile = outputFile;
            _resultValue.productType = productType;
            _resultValue.products = products;
            _resultValue.searchTerm = searchTerm;
            _resultValue.sort = sort;
            _resultValue.suggestedPrice = suggestedPrice;
            _resultValue.supplierId = supplierId;
            _resultValue.supplierNameKeyword = supplierNameKeyword;
            return _resultValue;
        }
    }
}
