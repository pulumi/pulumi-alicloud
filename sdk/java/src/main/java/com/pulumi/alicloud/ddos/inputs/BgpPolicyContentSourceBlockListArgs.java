// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ddos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class BgpPolicyContentSourceBlockListArgs extends com.pulumi.resources.ResourceArgs {

    public static final BgpPolicyContentSourceBlockListArgs Empty = new BgpPolicyContentSourceBlockListArgs();

    /**
     * Statistical cycle range 60-1200.
     * 
     */
    @Import(name="blockExpireSeconds", required=true)
    private Output<Integer> blockExpireSeconds;

    /**
     * @return Statistical cycle range 60-1200.
     * 
     */
    public Output<Integer> blockExpireSeconds() {
        return this.blockExpireSeconds;
    }

    /**
     * The time (unit second) for automatically releasing the black after triggering the speed limit is 60~2592000.
     * 
     */
    @Import(name="everySeconds", required=true)
    private Output<Integer> everySeconds;

    /**
     * @return The time (unit second) for automatically releasing the black after triggering the speed limit is 60~2592000.
     * 
     */
    public Output<Integer> everySeconds() {
        return this.everySeconds;
    }

    /**
     * The number of times the speed limit is exceeded in a statistical period ranges from 1 to 1200.
     * 
     */
    @Import(name="exceedLimitTimes", required=true)
    private Output<Integer> exceedLimitTimes;

    /**
     * @return The number of times the speed limit is exceeded in a statistical period ranges from 1 to 1200.
     * 
     */
    public Output<Integer> exceedLimitTimes() {
        return this.exceedLimitTimes;
    }

    /**
     * Type
     * 
     */
    @Import(name="type", required=true)
    private Output<Integer> type;

    /**
     * @return Type
     * 
     */
    public Output<Integer> type() {
        return this.type;
    }

    private BgpPolicyContentSourceBlockListArgs() {}

    private BgpPolicyContentSourceBlockListArgs(BgpPolicyContentSourceBlockListArgs $) {
        this.blockExpireSeconds = $.blockExpireSeconds;
        this.everySeconds = $.everySeconds;
        this.exceedLimitTimes = $.exceedLimitTimes;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BgpPolicyContentSourceBlockListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BgpPolicyContentSourceBlockListArgs $;

        public Builder() {
            $ = new BgpPolicyContentSourceBlockListArgs();
        }

        public Builder(BgpPolicyContentSourceBlockListArgs defaults) {
            $ = new BgpPolicyContentSourceBlockListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockExpireSeconds Statistical cycle range 60-1200.
         * 
         * @return builder
         * 
         */
        public Builder blockExpireSeconds(Output<Integer> blockExpireSeconds) {
            $.blockExpireSeconds = blockExpireSeconds;
            return this;
        }

        /**
         * @param blockExpireSeconds Statistical cycle range 60-1200.
         * 
         * @return builder
         * 
         */
        public Builder blockExpireSeconds(Integer blockExpireSeconds) {
            return blockExpireSeconds(Output.of(blockExpireSeconds));
        }

        /**
         * @param everySeconds The time (unit second) for automatically releasing the black after triggering the speed limit is 60~2592000.
         * 
         * @return builder
         * 
         */
        public Builder everySeconds(Output<Integer> everySeconds) {
            $.everySeconds = everySeconds;
            return this;
        }

        /**
         * @param everySeconds The time (unit second) for automatically releasing the black after triggering the speed limit is 60~2592000.
         * 
         * @return builder
         * 
         */
        public Builder everySeconds(Integer everySeconds) {
            return everySeconds(Output.of(everySeconds));
        }

        /**
         * @param exceedLimitTimes The number of times the speed limit is exceeded in a statistical period ranges from 1 to 1200.
         * 
         * @return builder
         * 
         */
        public Builder exceedLimitTimes(Output<Integer> exceedLimitTimes) {
            $.exceedLimitTimes = exceedLimitTimes;
            return this;
        }

        /**
         * @param exceedLimitTimes The number of times the speed limit is exceeded in a statistical period ranges from 1 to 1200.
         * 
         * @return builder
         * 
         */
        public Builder exceedLimitTimes(Integer exceedLimitTimes) {
            return exceedLimitTimes(Output.of(exceedLimitTimes));
        }

        /**
         * @param type Type
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Integer> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type
         * 
         * @return builder
         * 
         */
        public Builder type(Integer type) {
            return type(Output.of(type));
        }

        public BgpPolicyContentSourceBlockListArgs build() {
            if ($.blockExpireSeconds == null) {
                throw new MissingRequiredPropertyException("BgpPolicyContentSourceBlockListArgs", "blockExpireSeconds");
            }
            if ($.everySeconds == null) {
                throw new MissingRequiredPropertyException("BgpPolicyContentSourceBlockListArgs", "everySeconds");
            }
            if ($.exceedLimitTimes == null) {
                throw new MissingRequiredPropertyException("BgpPolicyContentSourceBlockListArgs", "exceedLimitTimes");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("BgpPolicyContentSourceBlockListArgs", "type");
            }
            return $;
        }
    }

}
