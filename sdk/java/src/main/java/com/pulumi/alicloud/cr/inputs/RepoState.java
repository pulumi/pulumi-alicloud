// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cr.inputs;

import com.pulumi.alicloud.cr.inputs.RepoDomainListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepoState extends com.pulumi.resources.ResourceArgs {

    public static final RepoState Empty = new RepoState();

    /**
     * The repository specific information. MarkDown format is supported, and the length limit is 2000.
     * 
     */
    @Import(name="detail")
    private @Nullable Output<String> detail;

    /**
     * @return The repository specific information. MarkDown format is supported, and the length limit is 2000.
     * 
     */
    public Optional<Output<String>> detail() {
        return Optional.ofNullable(this.detail);
    }

    /**
     * (Optional) The repository domain list.
     * 
     */
    @Import(name="domainList")
    private @Nullable Output<RepoDomainListArgs> domainList;

    /**
     * @return (Optional) The repository domain list.
     * 
     */
    public Optional<Output<RepoDomainListArgs>> domainList() {
        return Optional.ofNullable(this.domainList);
    }

    /**
     * Name of container registry repository.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of container registry repository.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Name of container registry namespace where repository is located.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Name of container registry namespace where repository is located.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * `PUBLIC` or `PRIVATE`, repo&#39;s visibility.
     * 
     */
    @Import(name="repoType")
    private @Nullable Output<String> repoType;

    /**
     * @return `PUBLIC` or `PRIVATE`, repo&#39;s visibility.
     * 
     */
    public Optional<Output<String>> repoType() {
        return Optional.ofNullable(this.repoType);
    }

    /**
     * The repository general information. It can contain 1 to 80 characters.
     * 
     */
    @Import(name="summary")
    private @Nullable Output<String> summary;

    /**
     * @return The repository general information. It can contain 1 to 80 characters.
     * 
     */
    public Optional<Output<String>> summary() {
        return Optional.ofNullable(this.summary);
    }

    private RepoState() {}

    private RepoState(RepoState $) {
        this.detail = $.detail;
        this.domainList = $.domainList;
        this.name = $.name;
        this.namespace = $.namespace;
        this.repoType = $.repoType;
        this.summary = $.summary;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepoState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepoState $;

        public Builder() {
            $ = new RepoState();
        }

        public Builder(RepoState defaults) {
            $ = new RepoState(Objects.requireNonNull(defaults));
        }

        /**
         * @param detail The repository specific information. MarkDown format is supported, and the length limit is 2000.
         * 
         * @return builder
         * 
         */
        public Builder detail(@Nullable Output<String> detail) {
            $.detail = detail;
            return this;
        }

        /**
         * @param detail The repository specific information. MarkDown format is supported, and the length limit is 2000.
         * 
         * @return builder
         * 
         */
        public Builder detail(String detail) {
            return detail(Output.of(detail));
        }

        /**
         * @param domainList (Optional) The repository domain list.
         * 
         * @return builder
         * 
         */
        public Builder domainList(@Nullable Output<RepoDomainListArgs> domainList) {
            $.domainList = domainList;
            return this;
        }

        /**
         * @param domainList (Optional) The repository domain list.
         * 
         * @return builder
         * 
         */
        public Builder domainList(RepoDomainListArgs domainList) {
            return domainList(Output.of(domainList));
        }

        /**
         * @param name Name of container registry repository.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of container registry repository.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Name of container registry namespace where repository is located.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Name of container registry namespace where repository is located.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param repoType `PUBLIC` or `PRIVATE`, repo&#39;s visibility.
         * 
         * @return builder
         * 
         */
        public Builder repoType(@Nullable Output<String> repoType) {
            $.repoType = repoType;
            return this;
        }

        /**
         * @param repoType `PUBLIC` or `PRIVATE`, repo&#39;s visibility.
         * 
         * @return builder
         * 
         */
        public Builder repoType(String repoType) {
            return repoType(Output.of(repoType));
        }

        /**
         * @param summary The repository general information. It can contain 1 to 80 characters.
         * 
         * @return builder
         * 
         */
        public Builder summary(@Nullable Output<String> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary The repository general information. It can contain 1 to 80 characters.
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        public RepoState build() {
            return $;
        }
    }

}
