// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RewriteUrlRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RewriteUrlRuleArgs Empty = new RewriteUrlRuleArgs();

    /**
     * The desired query string to which you want to rewrite the query string in the original request.
     * 
     */
    @Import(name="queryString")
    private @Nullable Output<String> queryString;

    /**
     * @return The desired query string to which you want to rewrite the query string in the original request.
     * 
     */
    public Optional<Output<String>> queryString() {
        return Optional.ofNullable(this.queryString);
    }

    /**
     * The query string rewrite method. Valid value:
     * 
     * - static
     * 
     */
    @Import(name="rewriteQueryStringType")
    private @Nullable Output<String> rewriteQueryStringType;

    /**
     * @return The query string rewrite method. Valid value:
     * 
     * - static
     * 
     */
    public Optional<Output<String>> rewriteQueryStringType() {
        return Optional.ofNullable(this.rewriteQueryStringType);
    }

    /**
     * The path rewrite method. Valid value:
     * 
     * - static
     * 
     */
    @Import(name="rewriteUriType")
    private @Nullable Output<String> rewriteUriType;

    /**
     * @return The path rewrite method. Valid value:
     * 
     * - static
     * 
     */
    public Optional<Output<String>> rewriteUriType() {
        return Optional.ofNullable(this.rewriteUriType);
    }

    /**
     * The rule content.
     * 
     */
    @Import(name="rule")
    private @Nullable Output<String> rule;

    /**
     * @return The rule content.
     * 
     */
    public Optional<Output<String>> rule() {
        return Optional.ofNullable(this.rule);
    }

    /**
     * Indicates whether the rule is enabled. Valid values:
     * 
     * - on
     * - off
     * 
     */
    @Import(name="ruleEnable")
    private @Nullable Output<String> ruleEnable;

    /**
     * @return Indicates whether the rule is enabled. Valid values:
     * 
     * - on
     * - off
     * 
     */
    public Optional<Output<String>> ruleEnable() {
        return Optional.ofNullable(this.ruleEnable);
    }

    /**
     * Rule name. You can find the rule whose field is passed by the rule name. The rule takes effect only if functionName is passed.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return Rule name. You can find the rule whose field is passed by the rule name. The rule takes effect only if functionName is passed.
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * The website ID, which can be obtained by calling the [ListSites](https://www.alibabacloud.com/help/en/doc-detail/2850189.html) operation.
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return The website ID, which can be obtained by calling the [ListSites](https://www.alibabacloud.com/help/en/doc-detail/2850189.html) operation.
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    /**
     * The version number of the website configurations.
     * 
     */
    @Import(name="siteVersion")
    private @Nullable Output<Integer> siteVersion;

    /**
     * @return The version number of the website configurations.
     * 
     */
    public Optional<Output<Integer>> siteVersion() {
        return Optional.ofNullable(this.siteVersion);
    }

    /**
     * The desired URI to which you want to rewrite the path in the original request.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The desired URI to which you want to rewrite the path in the original request.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private RewriteUrlRuleArgs() {}

    private RewriteUrlRuleArgs(RewriteUrlRuleArgs $) {
        this.queryString = $.queryString;
        this.rewriteQueryStringType = $.rewriteQueryStringType;
        this.rewriteUriType = $.rewriteUriType;
        this.rule = $.rule;
        this.ruleEnable = $.ruleEnable;
        this.ruleName = $.ruleName;
        this.siteId = $.siteId;
        this.siteVersion = $.siteVersion;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RewriteUrlRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RewriteUrlRuleArgs $;

        public Builder() {
            $ = new RewriteUrlRuleArgs();
        }

        public Builder(RewriteUrlRuleArgs defaults) {
            $ = new RewriteUrlRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param queryString The desired query string to which you want to rewrite the query string in the original request.
         * 
         * @return builder
         * 
         */
        public Builder queryString(@Nullable Output<String> queryString) {
            $.queryString = queryString;
            return this;
        }

        /**
         * @param queryString The desired query string to which you want to rewrite the query string in the original request.
         * 
         * @return builder
         * 
         */
        public Builder queryString(String queryString) {
            return queryString(Output.of(queryString));
        }

        /**
         * @param rewriteQueryStringType The query string rewrite method. Valid value:
         * 
         * - static
         * 
         * @return builder
         * 
         */
        public Builder rewriteQueryStringType(@Nullable Output<String> rewriteQueryStringType) {
            $.rewriteQueryStringType = rewriteQueryStringType;
            return this;
        }

        /**
         * @param rewriteQueryStringType The query string rewrite method. Valid value:
         * 
         * - static
         * 
         * @return builder
         * 
         */
        public Builder rewriteQueryStringType(String rewriteQueryStringType) {
            return rewriteQueryStringType(Output.of(rewriteQueryStringType));
        }

        /**
         * @param rewriteUriType The path rewrite method. Valid value:
         * 
         * - static
         * 
         * @return builder
         * 
         */
        public Builder rewriteUriType(@Nullable Output<String> rewriteUriType) {
            $.rewriteUriType = rewriteUriType;
            return this;
        }

        /**
         * @param rewriteUriType The path rewrite method. Valid value:
         * 
         * - static
         * 
         * @return builder
         * 
         */
        public Builder rewriteUriType(String rewriteUriType) {
            return rewriteUriType(Output.of(rewriteUriType));
        }

        /**
         * @param rule The rule content.
         * 
         * @return builder
         * 
         */
        public Builder rule(@Nullable Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule The rule content.
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param ruleEnable Indicates whether the rule is enabled. Valid values:
         * 
         * - on
         * - off
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(@Nullable Output<String> ruleEnable) {
            $.ruleEnable = ruleEnable;
            return this;
        }

        /**
         * @param ruleEnable Indicates whether the rule is enabled. Valid values:
         * 
         * - on
         * - off
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(String ruleEnable) {
            return ruleEnable(Output.of(ruleEnable));
        }

        /**
         * @param ruleName Rule name. You can find the rule whose field is passed by the rule name. The rule takes effect only if functionName is passed.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name. You can find the rule whose field is passed by the rule name. The rule takes effect only if functionName is passed.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param siteId The website ID, which can be obtained by calling the [ListSites](https://www.alibabacloud.com/help/en/doc-detail/2850189.html) operation.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The website ID, which can be obtained by calling the [ListSites](https://www.alibabacloud.com/help/en/doc-detail/2850189.html) operation.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param siteVersion The version number of the website configurations.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(@Nullable Output<Integer> siteVersion) {
            $.siteVersion = siteVersion;
            return this;
        }

        /**
         * @param siteVersion The version number of the website configurations.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(Integer siteVersion) {
            return siteVersion(Output.of(siteVersion));
        }

        /**
         * @param uri The desired URI to which you want to rewrite the path in the original request.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The desired URI to which you want to rewrite the path in the original request.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public RewriteUrlRuleArgs build() {
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("RewriteUrlRuleArgs", "siteId");
            }
            return $;
        }
    }

}
