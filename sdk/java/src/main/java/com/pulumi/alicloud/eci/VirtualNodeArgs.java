// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eci;

import com.pulumi.alicloud.eci.inputs.VirtualNodeTaintArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNodeArgs Empty = new VirtualNodeArgs();

    /**
     * The Id of eip.
     * 
     */
    @Import(name="eipInstanceId")
    private @Nullable Output<String> eipInstanceId;

    /**
     * @return The Id of eip.
     * 
     */
    public Optional<Output<String>> eipInstanceId() {
        return Optional.ofNullable(this.eipInstanceId);
    }

    /**
     * Whether to enable public network. **NOTE:** If `eip_instance_id` is not configured and `enable_public_network` is true, the system will create an elastic public network IP.
     * 
     */
    @Import(name="enablePublicNetwork")
    private @Nullable Output<Boolean> enablePublicNetwork;

    /**
     * @return Whether to enable public network. **NOTE:** If `eip_instance_id` is not configured and `enable_public_network` is true, the system will create an elastic public network IP.
     * 
     */
    public Optional<Output<Boolean>> enablePublicNetwork() {
        return Optional.ofNullable(this.enablePublicNetwork);
    }

    /**
     * The kube config for the k8s cluster. It needs to be connected after Base64 encoding.
     * 
     */
    @Import(name="kubeConfig", required=true)
    private Output<String> kubeConfig;

    /**
     * @return The kube config for the k8s cluster. It needs to be connected after Base64 encoding.
     * 
     */
    public Output<String> kubeConfig() {
        return this.kubeConfig;
    }

    /**
     * The resource group ID.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The resource group ID.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The security group ID.
     * 
     */
    @Import(name="securityGroupId", required=true)
    private Output<String> securityGroupId;

    /**
     * @return The security group ID.
     * 
     */
    public Output<String> securityGroupId() {
        return this.securityGroupId;
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The taint. See `taints` below.
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<VirtualNodeTaintArgs>> taints;

    /**
     * @return The taint. See `taints` below.
     * 
     */
    public Optional<Output<List<VirtualNodeTaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    /**
     * The name of the virtual node. The length of the name is limited to `2` to `128` characters. It can contain uppercase and lowercase letters, Chinese characters, numbers, half-width colon (:), underscores (_), or hyphens (-), and must start with letters.
     * 
     */
    @Import(name="virtualNodeName")
    private @Nullable Output<String> virtualNodeName;

    /**
     * @return The name of the virtual node. The length of the name is limited to `2` to `128` characters. It can contain uppercase and lowercase letters, Chinese characters, numbers, half-width colon (:), underscores (_), or hyphens (-), and must start with letters.
     * 
     */
    public Optional<Output<String>> virtualNodeName() {
        return Optional.ofNullable(this.virtualNodeName);
    }

    /**
     * The vswitch id.
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return The vswitch id.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    /**
     * The Zone.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The Zone.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private VirtualNodeArgs() {}

    private VirtualNodeArgs(VirtualNodeArgs $) {
        this.eipInstanceId = $.eipInstanceId;
        this.enablePublicNetwork = $.enablePublicNetwork;
        this.kubeConfig = $.kubeConfig;
        this.resourceGroupId = $.resourceGroupId;
        this.securityGroupId = $.securityGroupId;
        this.tags = $.tags;
        this.taints = $.taints;
        this.virtualNodeName = $.virtualNodeName;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNodeArgs $;

        public Builder() {
            $ = new VirtualNodeArgs();
        }

        public Builder(VirtualNodeArgs defaults) {
            $ = new VirtualNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eipInstanceId The Id of eip.
         * 
         * @return builder
         * 
         */
        public Builder eipInstanceId(@Nullable Output<String> eipInstanceId) {
            $.eipInstanceId = eipInstanceId;
            return this;
        }

        /**
         * @param eipInstanceId The Id of eip.
         * 
         * @return builder
         * 
         */
        public Builder eipInstanceId(String eipInstanceId) {
            return eipInstanceId(Output.of(eipInstanceId));
        }

        /**
         * @param enablePublicNetwork Whether to enable public network. **NOTE:** If `eip_instance_id` is not configured and `enable_public_network` is true, the system will create an elastic public network IP.
         * 
         * @return builder
         * 
         */
        public Builder enablePublicNetwork(@Nullable Output<Boolean> enablePublicNetwork) {
            $.enablePublicNetwork = enablePublicNetwork;
            return this;
        }

        /**
         * @param enablePublicNetwork Whether to enable public network. **NOTE:** If `eip_instance_id` is not configured and `enable_public_network` is true, the system will create an elastic public network IP.
         * 
         * @return builder
         * 
         */
        public Builder enablePublicNetwork(Boolean enablePublicNetwork) {
            return enablePublicNetwork(Output.of(enablePublicNetwork));
        }

        /**
         * @param kubeConfig The kube config for the k8s cluster. It needs to be connected after Base64 encoding.
         * 
         * @return builder
         * 
         */
        public Builder kubeConfig(Output<String> kubeConfig) {
            $.kubeConfig = kubeConfig;
            return this;
        }

        /**
         * @param kubeConfig The kube config for the k8s cluster. It needs to be connected after Base64 encoding.
         * 
         * @return builder
         * 
         */
        public Builder kubeConfig(String kubeConfig) {
            return kubeConfig(Output.of(kubeConfig));
        }

        /**
         * @param resourceGroupId The resource group ID.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The resource group ID.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param securityGroupId The security group ID.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId The security group ID.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param taints The taint. See `taints` below.
         * 
         * @return builder
         * 
         */
        public Builder taints(@Nullable Output<List<VirtualNodeTaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints The taint. See `taints` below.
         * 
         * @return builder
         * 
         */
        public Builder taints(List<VirtualNodeTaintArgs> taints) {
            return taints(Output.of(taints));
        }

        /**
         * @param taints The taint. See `taints` below.
         * 
         * @return builder
         * 
         */
        public Builder taints(VirtualNodeTaintArgs... taints) {
            return taints(List.of(taints));
        }

        /**
         * @param virtualNodeName The name of the virtual node. The length of the name is limited to `2` to `128` characters. It can contain uppercase and lowercase letters, Chinese characters, numbers, half-width colon (:), underscores (_), or hyphens (-), and must start with letters.
         * 
         * @return builder
         * 
         */
        public Builder virtualNodeName(@Nullable Output<String> virtualNodeName) {
            $.virtualNodeName = virtualNodeName;
            return this;
        }

        /**
         * @param virtualNodeName The name of the virtual node. The length of the name is limited to `2` to `128` characters. It can contain uppercase and lowercase letters, Chinese characters, numbers, half-width colon (:), underscores (_), or hyphens (-), and must start with letters.
         * 
         * @return builder
         * 
         */
        public Builder virtualNodeName(String virtualNodeName) {
            return virtualNodeName(Output.of(virtualNodeName));
        }

        /**
         * @param vswitchId The vswitch id.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The vswitch id.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The Zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The Zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public VirtualNodeArgs build() {
            if ($.kubeConfig == null) {
                throw new MissingRequiredPropertyException("VirtualNodeArgs", "kubeConfig");
            }
            if ($.securityGroupId == null) {
                throw new MissingRequiredPropertyException("VirtualNodeArgs", "securityGroupId");
            }
            if ($.vswitchId == null) {
                throw new MissingRequiredPropertyException("VirtualNodeArgs", "vswitchId");
            }
            return $;
        }
    }

}
