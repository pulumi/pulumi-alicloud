// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JdbcDataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final JdbcDataSourceArgs Empty = new JdbcDataSourceArgs();

    /**
     * Data Source Description
     * 
     */
    @Import(name="dataSourceDescription")
    private @Nullable Output<String> dataSourceDescription;

    /**
     * @return Data Source Description
     * 
     */
    public Optional<Output<String>> dataSourceDescription() {
        return Optional.ofNullable(this.dataSourceDescription);
    }

    /**
     * Data Source Name
     * 
     */
    @Import(name="dataSourceName")
    private @Nullable Output<String> dataSourceName;

    /**
     * @return Data Source Name
     * 
     */
    public Optional<Output<String>> dataSourceName() {
        return Optional.ofNullable(this.dataSourceName);
    }

    /**
     * Data Source Type
     * 
     */
    @Import(name="dataSourceType")
    private @Nullable Output<String> dataSourceType;

    /**
     * @return Data Source Type
     * 
     */
    public Optional<Output<String>> dataSourceType() {
        return Optional.ofNullable(this.dataSourceType);
    }

    /**
     * The instance ID.
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return The instance ID.
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    /**
     * The JDBC connection string.
     * 
     */
    @Import(name="jdbcConnectionString")
    private @Nullable Output<String> jdbcConnectionString;

    /**
     * @return The JDBC connection string.
     * 
     */
    public Optional<Output<String>> jdbcConnectionString() {
        return Optional.ofNullable(this.jdbcConnectionString);
    }

    /**
     * The password of the database account.
     * 
     */
    @Import(name="jdbcPassword")
    private @Nullable Output<String> jdbcPassword;

    /**
     * @return The password of the database account.
     * 
     */
    public Optional<Output<String>> jdbcPassword() {
        return Optional.ofNullable(this.jdbcPassword);
    }

    /**
     * The name of the database account.
     * 
     */
    @Import(name="jdbcUserName", required=true)
    private Output<String> jdbcUserName;

    /**
     * @return The name of the database account.
     * 
     */
    public Output<String> jdbcUserName() {
        return this.jdbcUserName;
    }

    private JdbcDataSourceArgs() {}

    private JdbcDataSourceArgs(JdbcDataSourceArgs $) {
        this.dataSourceDescription = $.dataSourceDescription;
        this.dataSourceName = $.dataSourceName;
        this.dataSourceType = $.dataSourceType;
        this.dbInstanceId = $.dbInstanceId;
        this.jdbcConnectionString = $.jdbcConnectionString;
        this.jdbcPassword = $.jdbcPassword;
        this.jdbcUserName = $.jdbcUserName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JdbcDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JdbcDataSourceArgs $;

        public Builder() {
            $ = new JdbcDataSourceArgs();
        }

        public Builder(JdbcDataSourceArgs defaults) {
            $ = new JdbcDataSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataSourceDescription Data Source Description
         * 
         * @return builder
         * 
         */
        public Builder dataSourceDescription(@Nullable Output<String> dataSourceDescription) {
            $.dataSourceDescription = dataSourceDescription;
            return this;
        }

        /**
         * @param dataSourceDescription Data Source Description
         * 
         * @return builder
         * 
         */
        public Builder dataSourceDescription(String dataSourceDescription) {
            return dataSourceDescription(Output.of(dataSourceDescription));
        }

        /**
         * @param dataSourceName Data Source Name
         * 
         * @return builder
         * 
         */
        public Builder dataSourceName(@Nullable Output<String> dataSourceName) {
            $.dataSourceName = dataSourceName;
            return this;
        }

        /**
         * @param dataSourceName Data Source Name
         * 
         * @return builder
         * 
         */
        public Builder dataSourceName(String dataSourceName) {
            return dataSourceName(Output.of(dataSourceName));
        }

        /**
         * @param dataSourceType Data Source Type
         * 
         * @return builder
         * 
         */
        public Builder dataSourceType(@Nullable Output<String> dataSourceType) {
            $.dataSourceType = dataSourceType;
            return this;
        }

        /**
         * @param dataSourceType Data Source Type
         * 
         * @return builder
         * 
         */
        public Builder dataSourceType(String dataSourceType) {
            return dataSourceType(Output.of(dataSourceType));
        }

        /**
         * @param dbInstanceId The instance ID.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The instance ID.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param jdbcConnectionString The JDBC connection string.
         * 
         * @return builder
         * 
         */
        public Builder jdbcConnectionString(@Nullable Output<String> jdbcConnectionString) {
            $.jdbcConnectionString = jdbcConnectionString;
            return this;
        }

        /**
         * @param jdbcConnectionString The JDBC connection string.
         * 
         * @return builder
         * 
         */
        public Builder jdbcConnectionString(String jdbcConnectionString) {
            return jdbcConnectionString(Output.of(jdbcConnectionString));
        }

        /**
         * @param jdbcPassword The password of the database account.
         * 
         * @return builder
         * 
         */
        public Builder jdbcPassword(@Nullable Output<String> jdbcPassword) {
            $.jdbcPassword = jdbcPassword;
            return this;
        }

        /**
         * @param jdbcPassword The password of the database account.
         * 
         * @return builder
         * 
         */
        public Builder jdbcPassword(String jdbcPassword) {
            return jdbcPassword(Output.of(jdbcPassword));
        }

        /**
         * @param jdbcUserName The name of the database account.
         * 
         * @return builder
         * 
         */
        public Builder jdbcUserName(Output<String> jdbcUserName) {
            $.jdbcUserName = jdbcUserName;
            return this;
        }

        /**
         * @param jdbcUserName The name of the database account.
         * 
         * @return builder
         * 
         */
        public Builder jdbcUserName(String jdbcUserName) {
            return jdbcUserName(Output.of(jdbcUserName));
        }

        public JdbcDataSourceArgs build() {
            if ($.dbInstanceId == null) {
                throw new MissingRequiredPropertyException("JdbcDataSourceArgs", "dbInstanceId");
            }
            if ($.jdbcUserName == null) {
                throw new MissingRequiredPropertyException("JdbcDataSourceArgs", "jdbcUserName");
            }
            return $;
        }
    }

}
