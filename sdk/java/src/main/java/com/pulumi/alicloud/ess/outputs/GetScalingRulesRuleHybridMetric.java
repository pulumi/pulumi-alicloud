// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.outputs;

import com.pulumi.alicloud.ess.outputs.GetScalingRulesRuleHybridMetricDimension;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetScalingRulesRuleHybridMetric {
    /**
     * @return (Available since v1.250.0) The metric dimensions. You can use this parameter to specify the monitored resources.
     * 
     */
    private List<GetScalingRulesRuleHybridMetricDimension> dimensions;
    /**
     * @return (Available since v1.250.0) The metric expression that consists of multiple Hybrid Cloud Monitoring metrics. It calculates a result used to trigger scaling events. The expression is written in Reverse Polish Notation (RPN) format and includes only the following operators: +, -, *, /.
     * 
     */
    private String expression;
    /**
     * @return (Available since v1.250.0) The reference ID of the metric in the metric expression.
     * 
     */
    private String id;
    /**
     * @return (Available since v1.250.0) The name of the Hybrid Cloud Monitoring metric.
     * 
     */
    private String metricName;
    /**
     * @return (Available since v1.250.0) The statistical method of the metric data.
     * 
     */
    private String statistic;

    private GetScalingRulesRuleHybridMetric() {}
    /**
     * @return (Available since v1.250.0) The metric dimensions. You can use this parameter to specify the monitored resources.
     * 
     */
    public List<GetScalingRulesRuleHybridMetricDimension> dimensions() {
        return this.dimensions;
    }
    /**
     * @return (Available since v1.250.0) The metric expression that consists of multiple Hybrid Cloud Monitoring metrics. It calculates a result used to trigger scaling events. The expression is written in Reverse Polish Notation (RPN) format and includes only the following operators: +, -, *, /.
     * 
     */
    public String expression() {
        return this.expression;
    }
    /**
     * @return (Available since v1.250.0) The reference ID of the metric in the metric expression.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Available since v1.250.0) The name of the Hybrid Cloud Monitoring metric.
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return (Available since v1.250.0) The statistical method of the metric data.
     * 
     */
    public String statistic() {
        return this.statistic;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScalingRulesRuleHybridMetric defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetScalingRulesRuleHybridMetricDimension> dimensions;
        private String expression;
        private String id;
        private String metricName;
        private String statistic;
        public Builder() {}
        public Builder(GetScalingRulesRuleHybridMetric defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dimensions = defaults.dimensions;
    	      this.expression = defaults.expression;
    	      this.id = defaults.id;
    	      this.metricName = defaults.metricName;
    	      this.statistic = defaults.statistic;
        }

        @CustomType.Setter
        public Builder dimensions(List<GetScalingRulesRuleHybridMetricDimension> dimensions) {
            if (dimensions == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRuleHybridMetric", "dimensions");
            }
            this.dimensions = dimensions;
            return this;
        }
        public Builder dimensions(GetScalingRulesRuleHybridMetricDimension... dimensions) {
            return dimensions(List.of(dimensions));
        }
        @CustomType.Setter
        public Builder expression(String expression) {
            if (expression == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRuleHybridMetric", "expression");
            }
            this.expression = expression;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRuleHybridMetric", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metricName(String metricName) {
            if (metricName == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRuleHybridMetric", "metricName");
            }
            this.metricName = metricName;
            return this;
        }
        @CustomType.Setter
        public Builder statistic(String statistic) {
            if (statistic == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRuleHybridMetric", "statistic");
            }
            this.statistic = statistic;
            return this;
        }
        public GetScalingRulesRuleHybridMetric build() {
            final var _resultValue = new GetScalingRulesRuleHybridMetric();
            _resultValue.dimensions = dimensions;
            _resultValue.expression = expression;
            _resultValue.id = id;
            _resultValue.metricName = metricName;
            _resultValue.statistic = statistic;
            return _resultValue;
        }
    }
}
