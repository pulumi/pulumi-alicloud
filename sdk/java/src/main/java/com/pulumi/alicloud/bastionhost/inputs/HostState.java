// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.bastionhost.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostState extends com.pulumi.resources.ResourceArgs {

    public static final HostState Empty = new HostState();

    /**
     * Specify the new create a host of address types. Valid values: `Public`: the IP address of a Public network. `Private`: Private network address.
     * 
     */
    @Import(name="activeAddressType")
    private @Nullable Output<String> activeAddressType;

    /**
     * @return Specify the new create a host of address types. Valid values: `Public`: the IP address of a Public network. `Private`: Private network address.
     * 
     */
    public Optional<Output<String>> activeAddressType() {
        return Optional.ofNullable(this.activeAddressType);
    }

    /**
     * Specify a host of notes, supports up to 500 characters.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Specify a host of notes, supports up to 500 characters.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The host ID.
     * 
     */
    @Import(name="hostId")
    private @Nullable Output<String> hostId;

    /**
     * @return The host ID.
     * 
     */
    public Optional<Output<String>> hostId() {
        return Optional.ofNullable(this.hostId);
    }

    /**
     * Specify the new create a host name of the supports up to 128 characters.
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    /**
     * @return Specify the new create a host name of the supports up to 128 characters.
     * 
     */
    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * Specify the new create a host of the private network address, it is possible to use the domain name or IP ADDRESS. **NOTE:**  This parameter is required if the `active_address_type` parameter is set to `Private`.
     * 
     */
    @Import(name="hostPrivateAddress")
    private @Nullable Output<String> hostPrivateAddress;

    /**
     * @return Specify the new create a host of the private network address, it is possible to use the domain name or IP ADDRESS. **NOTE:**  This parameter is required if the `active_address_type` parameter is set to `Private`.
     * 
     */
    public Optional<Output<String>> hostPrivateAddress() {
        return Optional.ofNullable(this.hostPrivateAddress);
    }

    /**
     * Specify the new create a host of the IP address of a public network, it is possible to use the domain name or IP ADDRESS.
     * 
     */
    @Import(name="hostPublicAddress")
    private @Nullable Output<String> hostPublicAddress;

    /**
     * @return Specify the new create a host of the IP address of a public network, it is possible to use the domain name or IP ADDRESS.
     * 
     */
    public Optional<Output<String>> hostPublicAddress() {
        return Optional.ofNullable(this.hostPublicAddress);
    }

    /**
     * Specify the new create a host where the Bastion host ID of.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return Specify the new create a host where the Bastion host ID of.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The instance region id.
     * 
     */
    @Import(name="instanceRegionId")
    private @Nullable Output<String> instanceRegionId;

    /**
     * @return The instance region id.
     * 
     */
    public Optional<Output<String>> instanceRegionId() {
        return Optional.ofNullable(this.instanceRegionId);
    }

    /**
     * Specify the new create the host&#39;s operating system. Valid values: `Linux`,`Windows`.
     * 
     */
    @Import(name="osType")
    private @Nullable Output<String> osType;

    /**
     * @return Specify the new create the host&#39;s operating system. Valid values: `Linux`,`Windows`.
     * 
     */
    public Optional<Output<String>> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * Specify the new create a host of source. Valid values:
     * * `Local`: localhost
     * * `Ecs`:ECS instance
     * * `Rds`:RDS exclusive cluster host.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Specify the new create a host of source. Valid values:
     * * `Local`: localhost
     * * `Ecs`:ECS instance
     * * `Rds`:RDS exclusive cluster host.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Specify the newly created ECS instance ID or dedicated cluster host ID. **NOTE:** This parameter is required if the `source` parameter is set to `Ecs` or `Rds`.
     * 
     */
    @Import(name="sourceInstanceId")
    private @Nullable Output<String> sourceInstanceId;

    /**
     * @return Specify the newly created ECS instance ID or dedicated cluster host ID. **NOTE:** This parameter is required if the `source` parameter is set to `Ecs` or `Rds`.
     * 
     */
    public Optional<Output<String>> sourceInstanceId() {
        return Optional.ofNullable(this.sourceInstanceId);
    }

    private HostState() {}

    private HostState(HostState $) {
        this.activeAddressType = $.activeAddressType;
        this.comment = $.comment;
        this.hostId = $.hostId;
        this.hostName = $.hostName;
        this.hostPrivateAddress = $.hostPrivateAddress;
        this.hostPublicAddress = $.hostPublicAddress;
        this.instanceId = $.instanceId;
        this.instanceRegionId = $.instanceRegionId;
        this.osType = $.osType;
        this.source = $.source;
        this.sourceInstanceId = $.sourceInstanceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostState $;

        public Builder() {
            $ = new HostState();
        }

        public Builder(HostState defaults) {
            $ = new HostState(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeAddressType Specify the new create a host of address types. Valid values: `Public`: the IP address of a Public network. `Private`: Private network address.
         * 
         * @return builder
         * 
         */
        public Builder activeAddressType(@Nullable Output<String> activeAddressType) {
            $.activeAddressType = activeAddressType;
            return this;
        }

        /**
         * @param activeAddressType Specify the new create a host of address types. Valid values: `Public`: the IP address of a Public network. `Private`: Private network address.
         * 
         * @return builder
         * 
         */
        public Builder activeAddressType(String activeAddressType) {
            return activeAddressType(Output.of(activeAddressType));
        }

        /**
         * @param comment Specify a host of notes, supports up to 500 characters.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Specify a host of notes, supports up to 500 characters.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param hostId The host ID.
         * 
         * @return builder
         * 
         */
        public Builder hostId(@Nullable Output<String> hostId) {
            $.hostId = hostId;
            return this;
        }

        /**
         * @param hostId The host ID.
         * 
         * @return builder
         * 
         */
        public Builder hostId(String hostId) {
            return hostId(Output.of(hostId));
        }

        /**
         * @param hostName Specify the new create a host name of the supports up to 128 characters.
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName Specify the new create a host name of the supports up to 128 characters.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param hostPrivateAddress Specify the new create a host of the private network address, it is possible to use the domain name or IP ADDRESS. **NOTE:**  This parameter is required if the `active_address_type` parameter is set to `Private`.
         * 
         * @return builder
         * 
         */
        public Builder hostPrivateAddress(@Nullable Output<String> hostPrivateAddress) {
            $.hostPrivateAddress = hostPrivateAddress;
            return this;
        }

        /**
         * @param hostPrivateAddress Specify the new create a host of the private network address, it is possible to use the domain name or IP ADDRESS. **NOTE:**  This parameter is required if the `active_address_type` parameter is set to `Private`.
         * 
         * @return builder
         * 
         */
        public Builder hostPrivateAddress(String hostPrivateAddress) {
            return hostPrivateAddress(Output.of(hostPrivateAddress));
        }

        /**
         * @param hostPublicAddress Specify the new create a host of the IP address of a public network, it is possible to use the domain name or IP ADDRESS.
         * 
         * @return builder
         * 
         */
        public Builder hostPublicAddress(@Nullable Output<String> hostPublicAddress) {
            $.hostPublicAddress = hostPublicAddress;
            return this;
        }

        /**
         * @param hostPublicAddress Specify the new create a host of the IP address of a public network, it is possible to use the domain name or IP ADDRESS.
         * 
         * @return builder
         * 
         */
        public Builder hostPublicAddress(String hostPublicAddress) {
            return hostPublicAddress(Output.of(hostPublicAddress));
        }

        /**
         * @param instanceId Specify the new create a host where the Bastion host ID of.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId Specify the new create a host where the Bastion host ID of.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param instanceRegionId The instance region id.
         * 
         * @return builder
         * 
         */
        public Builder instanceRegionId(@Nullable Output<String> instanceRegionId) {
            $.instanceRegionId = instanceRegionId;
            return this;
        }

        /**
         * @param instanceRegionId The instance region id.
         * 
         * @return builder
         * 
         */
        public Builder instanceRegionId(String instanceRegionId) {
            return instanceRegionId(Output.of(instanceRegionId));
        }

        /**
         * @param osType Specify the new create the host&#39;s operating system. Valid values: `Linux`,`Windows`.
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable Output<String> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType Specify the new create the host&#39;s operating system. Valid values: `Linux`,`Windows`.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param source Specify the new create a host of source. Valid values:
         * * `Local`: localhost
         * * `Ecs`:ECS instance
         * * `Rds`:RDS exclusive cluster host.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Specify the new create a host of source. Valid values:
         * * `Local`: localhost
         * * `Ecs`:ECS instance
         * * `Rds`:RDS exclusive cluster host.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourceInstanceId Specify the newly created ECS instance ID or dedicated cluster host ID. **NOTE:** This parameter is required if the `source` parameter is set to `Ecs` or `Rds`.
         * 
         * @return builder
         * 
         */
        public Builder sourceInstanceId(@Nullable Output<String> sourceInstanceId) {
            $.sourceInstanceId = sourceInstanceId;
            return this;
        }

        /**
         * @param sourceInstanceId Specify the newly created ECS instance ID or dedicated cluster host ID. **NOTE:** This parameter is required if the `source` parameter is set to `Ecs` or `Rds`.
         * 
         * @return builder
         * 
         */
        public Builder sourceInstanceId(String sourceInstanceId) {
            return sourceInstanceId(Output.of(sourceInstanceId));
        }

        public HostState build() {
            return $;
        }
    }

}
