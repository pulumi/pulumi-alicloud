// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerGroupHealthCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerGroupHealthCheckArgs Empty = new ServerGroupHealthCheckArgs();

    /**
     * The port of the backend server for health checks. Valid values: **0** ~ **65535**. **0** indicates that the port of the backend server is used for health check.
     * 
     */
    @Import(name="healthCheckConnectPort")
    private @Nullable Output<Integer> healthCheckConnectPort;

    /**
     * @return The port of the backend server for health checks. Valid values: **0** ~ **65535**. **0** indicates that the port of the backend server is used for health check.
     * 
     */
    public Optional<Output<Integer>> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }

    /**
     * Maximum timeout for health check responses. Unit: seconds. Valid values: **1** ~ **300**.
     * 
     */
    @Import(name="healthCheckConnectTimeout")
    private @Nullable Output<Integer> healthCheckConnectTimeout;

    /**
     * @return Maximum timeout for health check responses. Unit: seconds. Valid values: **1** ~ **300**.
     * 
     */
    public Optional<Output<Integer>> healthCheckConnectTimeout() {
        return Optional.ofNullable(this.healthCheckConnectTimeout);
    }

    /**
     * The domain name used for health check. Valid values:
     * - **$SERVER_IP**: uses the intranet IP of the backend server.
     * - **domain**: Specify a specific domain name. The length is limited to 1 to 80 characters. Only lowercase letters, numbers, dashes (-), and half-width periods (.) can be used.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    @Import(name="healthCheckDomain")
    private @Nullable Output<String> healthCheckDomain;

    /**
     * @return The domain name used for health check. Valid values:
     * - **$SERVER_IP**: uses the intranet IP of the backend server.
     * - **domain**: Specify a specific domain name. The length is limited to 1 to 80 characters. Only lowercase letters, numbers, dashes (-), and half-width periods (.) can be used.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    public Optional<Output<String>> healthCheckDomain() {
        return Optional.ofNullable(this.healthCheckDomain);
    }

    /**
     * Whether to enable health check. Valid values:
     * - **true**: on.
     * - **false**: closed.
     * 
     */
    @Import(name="healthCheckEnabled")
    private @Nullable Output<Boolean> healthCheckEnabled;

    /**
     * @return Whether to enable health check. Valid values:
     * - **true**: on.
     * - **false**: closed.
     * 
     */
    public Optional<Output<Boolean>> healthCheckEnabled() {
        return Optional.ofNullable(this.healthCheckEnabled);
    }

    /**
     * Health status return code. Multiple status codes are separated by commas (,). Valid values: **http\_2xx**, **http\_3xx**, **http\_4xx**, and **http\_5xx**.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    @Import(name="healthCheckHttpCodes")
    private @Nullable Output<List<String>> healthCheckHttpCodes;

    /**
     * @return Health status return code. Multiple status codes are separated by commas (,). Valid values: **http\_2xx**, **http\_3xx**, **http\_4xx**, and **http\_5xx**.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    public Optional<Output<List<String>>> healthCheckHttpCodes() {
        return Optional.ofNullable(this.healthCheckHttpCodes);
    }

    /**
     * Time interval of health examination. Unit: seconds.Valid values: **5** ~ **50**.
     * 
     */
    @Import(name="healthCheckInterval")
    private @Nullable Output<Integer> healthCheckInterval;

    /**
     * @return Time interval of health examination. Unit: seconds.Valid values: **5** ~ **50**.
     * 
     */
    public Optional<Output<Integer>> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }

    /**
     * Health check protocol. Valid values: **TCP** or **HTTP**.
     * 
     */
    @Import(name="healthCheckType")
    private @Nullable Output<String> healthCheckType;

    /**
     * @return Health check protocol. Valid values: **TCP** or **HTTP**.
     * 
     */
    public Optional<Output<String>> healthCheckType() {
        return Optional.ofNullable(this.healthCheckType);
    }

    /**
     * Health check path.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    @Import(name="healthCheckUrl")
    private @Nullable Output<String> healthCheckUrl;

    /**
     * @return Health check path.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    public Optional<Output<String>> healthCheckUrl() {
        return Optional.ofNullable(this.healthCheckUrl);
    }

    /**
     * After the health check is successful, the health check status of the backend server is determined from **failed** to **successful * *.Valid values: **2** to **10 * *.
     * 
     */
    @Import(name="healthyThreshold")
    private @Nullable Output<Integer> healthyThreshold;

    /**
     * @return After the health check is successful, the health check status of the backend server is determined from **failed** to **successful * *.Valid values: **2** to **10 * *.
     * 
     */
    public Optional<Output<Integer>> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }

    /**
     * The health check method. Valid values: **GET** or **HEAD**.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    @Import(name="httpCheckMethod")
    private @Nullable Output<String> httpCheckMethod;

    /**
     * @return The health check method. Valid values: **GET** or **HEAD**.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    public Optional<Output<String>> httpCheckMethod() {
        return Optional.ofNullable(this.httpCheckMethod);
    }

    /**
     * After the health check fails for many times in a row, the health check status of the backend server is determined from **Success** to **Failure**. Valid values: **2** to **10**.
     * 
     */
    @Import(name="unhealthyThreshold")
    private @Nullable Output<Integer> unhealthyThreshold;

    /**
     * @return After the health check fails for many times in a row, the health check status of the backend server is determined from **Success** to **Failure**. Valid values: **2** to **10**.
     * 
     */
    public Optional<Output<Integer>> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    private ServerGroupHealthCheckArgs() {}

    private ServerGroupHealthCheckArgs(ServerGroupHealthCheckArgs $) {
        this.healthCheckConnectPort = $.healthCheckConnectPort;
        this.healthCheckConnectTimeout = $.healthCheckConnectTimeout;
        this.healthCheckDomain = $.healthCheckDomain;
        this.healthCheckEnabled = $.healthCheckEnabled;
        this.healthCheckHttpCodes = $.healthCheckHttpCodes;
        this.healthCheckInterval = $.healthCheckInterval;
        this.healthCheckType = $.healthCheckType;
        this.healthCheckUrl = $.healthCheckUrl;
        this.healthyThreshold = $.healthyThreshold;
        this.httpCheckMethod = $.httpCheckMethod;
        this.unhealthyThreshold = $.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerGroupHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerGroupHealthCheckArgs $;

        public Builder() {
            $ = new ServerGroupHealthCheckArgs();
        }

        public Builder(ServerGroupHealthCheckArgs defaults) {
            $ = new ServerGroupHealthCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param healthCheckConnectPort The port of the backend server for health checks. Valid values: **0** ~ **65535**. **0** indicates that the port of the backend server is used for health check.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(@Nullable Output<Integer> healthCheckConnectPort) {
            $.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }

        /**
         * @param healthCheckConnectPort The port of the backend server for health checks. Valid values: **0** ~ **65535**. **0** indicates that the port of the backend server is used for health check.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(Integer healthCheckConnectPort) {
            return healthCheckConnectPort(Output.of(healthCheckConnectPort));
        }

        /**
         * @param healthCheckConnectTimeout Maximum timeout for health check responses. Unit: seconds. Valid values: **1** ~ **300**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectTimeout(@Nullable Output<Integer> healthCheckConnectTimeout) {
            $.healthCheckConnectTimeout = healthCheckConnectTimeout;
            return this;
        }

        /**
         * @param healthCheckConnectTimeout Maximum timeout for health check responses. Unit: seconds. Valid values: **1** ~ **300**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectTimeout(Integer healthCheckConnectTimeout) {
            return healthCheckConnectTimeout(Output.of(healthCheckConnectTimeout));
        }

        /**
         * @param healthCheckDomain The domain name used for health check. Valid values:
         * - **$SERVER_IP**: uses the intranet IP of the backend server.
         * - **domain**: Specify a specific domain name. The length is limited to 1 to 80 characters. Only lowercase letters, numbers, dashes (-), and half-width periods (.) can be used.
         * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckDomain(@Nullable Output<String> healthCheckDomain) {
            $.healthCheckDomain = healthCheckDomain;
            return this;
        }

        /**
         * @param healthCheckDomain The domain name used for health check. Valid values:
         * - **$SERVER_IP**: uses the intranet IP of the backend server.
         * - **domain**: Specify a specific domain name. The length is limited to 1 to 80 characters. Only lowercase letters, numbers, dashes (-), and half-width periods (.) can be used.
         * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckDomain(String healthCheckDomain) {
            return healthCheckDomain(Output.of(healthCheckDomain));
        }

        /**
         * @param healthCheckEnabled Whether to enable health check. Valid values:
         * - **true**: on.
         * - **false**: closed.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEnabled(@Nullable Output<Boolean> healthCheckEnabled) {
            $.healthCheckEnabled = healthCheckEnabled;
            return this;
        }

        /**
         * @param healthCheckEnabled Whether to enable health check. Valid values:
         * - **true**: on.
         * - **false**: closed.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEnabled(Boolean healthCheckEnabled) {
            return healthCheckEnabled(Output.of(healthCheckEnabled));
        }

        /**
         * @param healthCheckHttpCodes Health status return code. Multiple status codes are separated by commas (,). Valid values: **http\_2xx**, **http\_3xx**, **http\_4xx**, and **http\_5xx**.
         * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCodes(@Nullable Output<List<String>> healthCheckHttpCodes) {
            $.healthCheckHttpCodes = healthCheckHttpCodes;
            return this;
        }

        /**
         * @param healthCheckHttpCodes Health status return code. Multiple status codes are separated by commas (,). Valid values: **http\_2xx**, **http\_3xx**, **http\_4xx**, and **http\_5xx**.
         * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCodes(List<String> healthCheckHttpCodes) {
            return healthCheckHttpCodes(Output.of(healthCheckHttpCodes));
        }

        /**
         * @param healthCheckHttpCodes Health status return code. Multiple status codes are separated by commas (,). Valid values: **http\_2xx**, **http\_3xx**, **http\_4xx**, and **http\_5xx**.
         * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCodes(String... healthCheckHttpCodes) {
            return healthCheckHttpCodes(List.of(healthCheckHttpCodes));
        }

        /**
         * @param healthCheckInterval Time interval of health examination. Unit: seconds.Valid values: **5** ~ **50**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(@Nullable Output<Integer> healthCheckInterval) {
            $.healthCheckInterval = healthCheckInterval;
            return this;
        }

        /**
         * @param healthCheckInterval Time interval of health examination. Unit: seconds.Valid values: **5** ~ **50**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(Integer healthCheckInterval) {
            return healthCheckInterval(Output.of(healthCheckInterval));
        }

        /**
         * @param healthCheckType Health check protocol. Valid values: **TCP** or **HTTP**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckType(@Nullable Output<String> healthCheckType) {
            $.healthCheckType = healthCheckType;
            return this;
        }

        /**
         * @param healthCheckType Health check protocol. Valid values: **TCP** or **HTTP**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckType(String healthCheckType) {
            return healthCheckType(Output.of(healthCheckType));
        }

        /**
         * @param healthCheckUrl Health check path.
         * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckUrl(@Nullable Output<String> healthCheckUrl) {
            $.healthCheckUrl = healthCheckUrl;
            return this;
        }

        /**
         * @param healthCheckUrl Health check path.
         * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckUrl(String healthCheckUrl) {
            return healthCheckUrl(Output.of(healthCheckUrl));
        }

        /**
         * @param healthyThreshold After the health check is successful, the health check status of the backend server is determined from **failed** to **successful * *.Valid values: **2** to **10 * *.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(@Nullable Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param healthyThreshold After the health check is successful, the health check status of the backend server is determined from **failed** to **successful * *.Valid values: **2** to **10 * *.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        /**
         * @param httpCheckMethod The health check method. Valid values: **GET** or **HEAD**.
         * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
         * 
         * @return builder
         * 
         */
        public Builder httpCheckMethod(@Nullable Output<String> httpCheckMethod) {
            $.httpCheckMethod = httpCheckMethod;
            return this;
        }

        /**
         * @param httpCheckMethod The health check method. Valid values: **GET** or **HEAD**.
         * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
         * 
         * @return builder
         * 
         */
        public Builder httpCheckMethod(String httpCheckMethod) {
            return httpCheckMethod(Output.of(httpCheckMethod));
        }

        /**
         * @param unhealthyThreshold After the health check fails for many times in a row, the health check status of the backend server is determined from **Success** to **Failure**. Valid values: **2** to **10**.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(@Nullable Output<Integer> unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        /**
         * @param unhealthyThreshold After the health check fails for many times in a row, the health check status of the backend server is determined from **Success** to **Failure**. Valid values: **2** to **10**.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            return unhealthyThreshold(Output.of(unhealthyThreshold));
        }

        public ServerGroupHealthCheckArgs build() {
            return $;
        }
    }

}
