// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerGroupHealthCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerGroupHealthCheckArgs Empty = new ServerGroupHealthCheckArgs();

    /**
     * The port that you want to use for health checks on backend servers.
     * Valid values: `0` to `65535`.
     * Default value: `0`. If you set the value to 0, the port of the backend server is used for health checks.
     * 
     */
    @Import(name="healthCheckConnectPort")
    private @Nullable Output<Integer> healthCheckConnectPort;

    /**
     * @return The port that you want to use for health checks on backend servers.
     * Valid values: `0` to `65535`.
     * Default value: `0`. If you set the value to 0, the port of the backend server is used for health checks.
     * 
     */
    public Optional<Output<Integer>> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }

    /**
     * The maximum timeout period of a health check. Unit: seconds. Valid values: `1` to `300`. Default value: `5`.
     * 
     */
    @Import(name="healthCheckConnectTimeout")
    private @Nullable Output<Integer> healthCheckConnectTimeout;

    /**
     * @return The maximum timeout period of a health check. Unit: seconds. Valid values: `1` to `300`. Default value: `5`.
     * 
     */
    public Optional<Output<Integer>> healthCheckConnectTimeout() {
        return Optional.ofNullable(this.healthCheckConnectTimeout);
    }

    /**
     * The domain name that you want to use for health checks. Valid values:
     * - `$SERVER_IP`: the private IP address of a backend server.
     * 
     */
    @Import(name="healthCheckDomain")
    private @Nullable Output<String> healthCheckDomain;

    /**
     * @return The domain name that you want to use for health checks. Valid values:
     * - `$SERVER_IP`: the private IP address of a backend server.
     * 
     */
    public Optional<Output<String>> healthCheckDomain() {
        return Optional.ofNullable(this.healthCheckDomain);
    }

    /**
     * Specifies whether to enable the health check feature. Valid values:
     * 
     */
    @Import(name="healthCheckEnabled")
    private @Nullable Output<Boolean> healthCheckEnabled;

    /**
     * @return Specifies whether to enable the health check feature. Valid values:
     * 
     */
    public Optional<Output<Boolean>> healthCheckEnabled() {
        return Optional.ofNullable(this.healthCheckEnabled);
    }

    /**
     * health check response character string. The value contains a maximum of 512 characters
     * 
     */
    @Import(name="healthCheckExp")
    private @Nullable Output<String> healthCheckExp;

    /**
     * @return health check response character string. The value contains a maximum of 512 characters
     * 
     */
    public Optional<Output<String>> healthCheckExp() {
        return Optional.ofNullable(this.healthCheckExp);
    }

    /**
     * The HTTP status codes to return for health checks. Separate multiple HTTP status codes with commas (,). Valid values: `http\_2xx` (default), `http\_3xx`, `http\_4xx`, and `http\_5xx`.
     * 
     * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
     * 
     */
    @Import(name="healthCheckHttpCodes")
    private @Nullable Output<List<String>> healthCheckHttpCodes;

    /**
     * @return The HTTP status codes to return for health checks. Separate multiple HTTP status codes with commas (,). Valid values: `http\_2xx` (default), `http\_3xx`, `http\_4xx`, and `http\_5xx`.
     * 
     * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
     * 
     */
    public Optional<Output<List<String>>> healthCheckHttpCodes() {
        return Optional.ofNullable(this.healthCheckHttpCodes);
    }

    /**
     * The interval at which health checks are performed. Unit: seconds.
     * Valid values: `5` to `50`.
     * Default value: `10`.
     * 
     */
    @Import(name="healthCheckInterval")
    private @Nullable Output<Integer> healthCheckInterval;

    /**
     * @return The interval at which health checks are performed. Unit: seconds.
     * Valid values: `5` to `50`.
     * Default value: `10`.
     * 
     */
    public Optional<Output<Integer>> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }

    /**
     * UDP healthy check request string, the value is a character string of 512 characters
     * 
     */
    @Import(name="healthCheckReq")
    private @Nullable Output<String> healthCheckReq;

    /**
     * @return UDP healthy check request string, the value is a character string of 512 characters
     * 
     */
    public Optional<Output<String>> healthCheckReq() {
        return Optional.ofNullable(this.healthCheckReq);
    }

    /**
     * The protocol that you want to use for health checks. Valid values: `TCP` (default) and `HTTP`.
     * 
     */
    @Import(name="healthCheckType")
    private @Nullable Output<String> healthCheckType;

    /**
     * @return The protocol that you want to use for health checks. Valid values: `TCP` (default) and `HTTP`.
     * 
     */
    public Optional<Output<String>> healthCheckType() {
        return Optional.ofNullable(this.healthCheckType);
    }

    /**
     * The path to which health check requests are sent.
     * 
     * The path must be 1 to 80 characters in length, and can contain only letters, digits, and the following special characters: `- / . % ? # &amp; =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] {@literal @} $ ^ : &#39; , +`. The path must start with a forward slash (/).
     * 
     * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
     * 
     */
    @Import(name="healthCheckUrl")
    private @Nullable Output<String> healthCheckUrl;

    /**
     * @return The path to which health check requests are sent.
     * 
     * The path must be 1 to 80 characters in length, and can contain only letters, digits, and the following special characters: `- / . % ? # &amp; =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] {@literal @} $ ^ : &#39; , +`. The path must start with a forward slash (/).
     * 
     * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
     * 
     */
    public Optional<Output<String>> healthCheckUrl() {
        return Optional.ofNullable(this.healthCheckUrl);
    }

    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
     * Valid values: `2` to `10`.
     * Default value: `2`.
     * 
     */
    @Import(name="healthyThreshold")
    private @Nullable Output<Integer> healthyThreshold;

    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
     * Valid values: `2` to `10`.
     * Default value: `2`.
     * 
     */
    public Optional<Output<Integer>> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }

    /**
     * The HTTP method that is used for health checks. Valid values: `GET` (default) and `HEAD`.
     * 
     * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
     * 
     */
    @Import(name="httpCheckMethod")
    private @Nullable Output<String> httpCheckMethod;

    /**
     * @return The HTTP method that is used for health checks. Valid values: `GET` (default) and `HEAD`.
     * 
     * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
     * 
     */
    public Optional<Output<String>> httpCheckMethod() {
        return Optional.ofNullable(this.httpCheckMethod);
    }

    /**
     * The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
     * Valid values: `2` to `10`.
     * Default value: `2`.
     * 
     */
    @Import(name="unhealthyThreshold")
    private @Nullable Output<Integer> unhealthyThreshold;

    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
     * Valid values: `2` to `10`.
     * Default value: `2`.
     * 
     */
    public Optional<Output<Integer>> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    private ServerGroupHealthCheckArgs() {}

    private ServerGroupHealthCheckArgs(ServerGroupHealthCheckArgs $) {
        this.healthCheckConnectPort = $.healthCheckConnectPort;
        this.healthCheckConnectTimeout = $.healthCheckConnectTimeout;
        this.healthCheckDomain = $.healthCheckDomain;
        this.healthCheckEnabled = $.healthCheckEnabled;
        this.healthCheckExp = $.healthCheckExp;
        this.healthCheckHttpCodes = $.healthCheckHttpCodes;
        this.healthCheckInterval = $.healthCheckInterval;
        this.healthCheckReq = $.healthCheckReq;
        this.healthCheckType = $.healthCheckType;
        this.healthCheckUrl = $.healthCheckUrl;
        this.healthyThreshold = $.healthyThreshold;
        this.httpCheckMethod = $.httpCheckMethod;
        this.unhealthyThreshold = $.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerGroupHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerGroupHealthCheckArgs $;

        public Builder() {
            $ = new ServerGroupHealthCheckArgs();
        }

        public Builder(ServerGroupHealthCheckArgs defaults) {
            $ = new ServerGroupHealthCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param healthCheckConnectPort The port that you want to use for health checks on backend servers.
         * Valid values: `0` to `65535`.
         * Default value: `0`. If you set the value to 0, the port of the backend server is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(@Nullable Output<Integer> healthCheckConnectPort) {
            $.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }

        /**
         * @param healthCheckConnectPort The port that you want to use for health checks on backend servers.
         * Valid values: `0` to `65535`.
         * Default value: `0`. If you set the value to 0, the port of the backend server is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(Integer healthCheckConnectPort) {
            return healthCheckConnectPort(Output.of(healthCheckConnectPort));
        }

        /**
         * @param healthCheckConnectTimeout The maximum timeout period of a health check. Unit: seconds. Valid values: `1` to `300`. Default value: `5`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectTimeout(@Nullable Output<Integer> healthCheckConnectTimeout) {
            $.healthCheckConnectTimeout = healthCheckConnectTimeout;
            return this;
        }

        /**
         * @param healthCheckConnectTimeout The maximum timeout period of a health check. Unit: seconds. Valid values: `1` to `300`. Default value: `5`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectTimeout(Integer healthCheckConnectTimeout) {
            return healthCheckConnectTimeout(Output.of(healthCheckConnectTimeout));
        }

        /**
         * @param healthCheckDomain The domain name that you want to use for health checks. Valid values:
         * - `$SERVER_IP`: the private IP address of a backend server.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckDomain(@Nullable Output<String> healthCheckDomain) {
            $.healthCheckDomain = healthCheckDomain;
            return this;
        }

        /**
         * @param healthCheckDomain The domain name that you want to use for health checks. Valid values:
         * - `$SERVER_IP`: the private IP address of a backend server.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckDomain(String healthCheckDomain) {
            return healthCheckDomain(Output.of(healthCheckDomain));
        }

        /**
         * @param healthCheckEnabled Specifies whether to enable the health check feature. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEnabled(@Nullable Output<Boolean> healthCheckEnabled) {
            $.healthCheckEnabled = healthCheckEnabled;
            return this;
        }

        /**
         * @param healthCheckEnabled Specifies whether to enable the health check feature. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEnabled(Boolean healthCheckEnabled) {
            return healthCheckEnabled(Output.of(healthCheckEnabled));
        }

        /**
         * @param healthCheckExp health check response character string. The value contains a maximum of 512 characters
         * 
         * @return builder
         * 
         */
        public Builder healthCheckExp(@Nullable Output<String> healthCheckExp) {
            $.healthCheckExp = healthCheckExp;
            return this;
        }

        /**
         * @param healthCheckExp health check response character string. The value contains a maximum of 512 characters
         * 
         * @return builder
         * 
         */
        public Builder healthCheckExp(String healthCheckExp) {
            return healthCheckExp(Output.of(healthCheckExp));
        }

        /**
         * @param healthCheckHttpCodes The HTTP status codes to return for health checks. Separate multiple HTTP status codes with commas (,). Valid values: `http\_2xx` (default), `http\_3xx`, `http\_4xx`, and `http\_5xx`.
         * 
         * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCodes(@Nullable Output<List<String>> healthCheckHttpCodes) {
            $.healthCheckHttpCodes = healthCheckHttpCodes;
            return this;
        }

        /**
         * @param healthCheckHttpCodes The HTTP status codes to return for health checks. Separate multiple HTTP status codes with commas (,). Valid values: `http\_2xx` (default), `http\_3xx`, `http\_4xx`, and `http\_5xx`.
         * 
         * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCodes(List<String> healthCheckHttpCodes) {
            return healthCheckHttpCodes(Output.of(healthCheckHttpCodes));
        }

        /**
         * @param healthCheckHttpCodes The HTTP status codes to return for health checks. Separate multiple HTTP status codes with commas (,). Valid values: `http\_2xx` (default), `http\_3xx`, `http\_4xx`, and `http\_5xx`.
         * 
         * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpCodes(String... healthCheckHttpCodes) {
            return healthCheckHttpCodes(List.of(healthCheckHttpCodes));
        }

        /**
         * @param healthCheckInterval The interval at which health checks are performed. Unit: seconds.
         * Valid values: `5` to `50`.
         * Default value: `10`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(@Nullable Output<Integer> healthCheckInterval) {
            $.healthCheckInterval = healthCheckInterval;
            return this;
        }

        /**
         * @param healthCheckInterval The interval at which health checks are performed. Unit: seconds.
         * Valid values: `5` to `50`.
         * Default value: `10`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(Integer healthCheckInterval) {
            return healthCheckInterval(Output.of(healthCheckInterval));
        }

        /**
         * @param healthCheckReq UDP healthy check request string, the value is a character string of 512 characters
         * 
         * @return builder
         * 
         */
        public Builder healthCheckReq(@Nullable Output<String> healthCheckReq) {
            $.healthCheckReq = healthCheckReq;
            return this;
        }

        /**
         * @param healthCheckReq UDP healthy check request string, the value is a character string of 512 characters
         * 
         * @return builder
         * 
         */
        public Builder healthCheckReq(String healthCheckReq) {
            return healthCheckReq(Output.of(healthCheckReq));
        }

        /**
         * @param healthCheckType The protocol that you want to use for health checks. Valid values: `TCP` (default) and `HTTP`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckType(@Nullable Output<String> healthCheckType) {
            $.healthCheckType = healthCheckType;
            return this;
        }

        /**
         * @param healthCheckType The protocol that you want to use for health checks. Valid values: `TCP` (default) and `HTTP`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckType(String healthCheckType) {
            return healthCheckType(Output.of(healthCheckType));
        }

        /**
         * @param healthCheckUrl The path to which health check requests are sent.
         * 
         * The path must be 1 to 80 characters in length, and can contain only letters, digits, and the following special characters: `- / . % ? # &amp; =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] {@literal @} $ ^ : &#39; , +`. The path must start with a forward slash (/).
         * 
         * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckUrl(@Nullable Output<String> healthCheckUrl) {
            $.healthCheckUrl = healthCheckUrl;
            return this;
        }

        /**
         * @param healthCheckUrl The path to which health check requests are sent.
         * 
         * The path must be 1 to 80 characters in length, and can contain only letters, digits, and the following special characters: `- / . % ? # &amp; =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] {@literal @} $ ^ : &#39; , +`. The path must start with a forward slash (/).
         * 
         * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckUrl(String healthCheckUrl) {
            return healthCheckUrl(Output.of(healthCheckUrl));
        }

        /**
         * @param healthyThreshold The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
         * Valid values: `2` to `10`.
         * Default value: `2`.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(@Nullable Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param healthyThreshold The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
         * Valid values: `2` to `10`.
         * Default value: `2`.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        /**
         * @param httpCheckMethod The HTTP method that is used for health checks. Valid values: `GET` (default) and `HEAD`.
         * 
         * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
         * 
         * @return builder
         * 
         */
        public Builder httpCheckMethod(@Nullable Output<String> httpCheckMethod) {
            $.httpCheckMethod = httpCheckMethod;
            return this;
        }

        /**
         * @param httpCheckMethod The HTTP method that is used for health checks. Valid values: `GET` (default) and `HEAD`.
         * 
         * &gt; **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
         * 
         * @return builder
         * 
         */
        public Builder httpCheckMethod(String httpCheckMethod) {
            return httpCheckMethod(Output.of(httpCheckMethod));
        }

        /**
         * @param unhealthyThreshold The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
         * Valid values: `2` to `10`.
         * Default value: `2`.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(@Nullable Output<Integer> unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        /**
         * @param unhealthyThreshold The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
         * Valid values: `2` to `10`.
         * Default value: `2`.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            return unhealthyThreshold(Output.of(unhealthyThreshold));
        }

        public ServerGroupHealthCheckArgs build() {
            return $;
        }
    }

}
