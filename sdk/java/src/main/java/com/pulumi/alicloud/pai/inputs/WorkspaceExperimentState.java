// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.pai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceExperimentState extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceExperimentState Empty = new WorkspaceExperimentState();

    /**
     * Experimental Visibility
     * 
     */
    @Import(name="accessibility")
    private @Nullable Output<String> accessibility;

    /**
     * @return Experimental Visibility
     * 
     */
    public Optional<Output<String>> accessibility() {
        return Optional.ofNullable(this.accessibility);
    }

    /**
     * ArtifactUri is default OSS storage path of the output of trials in the experiment
     * 
     */
    @Import(name="artifactUri")
    private @Nullable Output<String> artifactUri;

    /**
     * @return ArtifactUri is default OSS storage path of the output of trials in the experiment
     * 
     */
    public Optional<Output<String>> artifactUri() {
        return Optional.ofNullable(this.artifactUri);
    }

    /**
     * GmtCreateTime is time when this entity is created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return GmtCreateTime is time when this entity is created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Name is the name of the experiment, unique in a namespace
     * 
     */
    @Import(name="experimentName")
    private @Nullable Output<String> experimentName;

    /**
     * @return Name is the name of the experiment, unique in a namespace
     * 
     */
    public Optional<Output<String>> experimentName() {
        return Optional.ofNullable(this.experimentName);
    }

    /**
     * WorkspaceId is the workspace id which contains the experiment
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return WorkspaceId is the workspace id which contains the experiment
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private WorkspaceExperimentState() {}

    private WorkspaceExperimentState(WorkspaceExperimentState $) {
        this.accessibility = $.accessibility;
        this.artifactUri = $.artifactUri;
        this.createTime = $.createTime;
        this.experimentName = $.experimentName;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceExperimentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceExperimentState $;

        public Builder() {
            $ = new WorkspaceExperimentState();
        }

        public Builder(WorkspaceExperimentState defaults) {
            $ = new WorkspaceExperimentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessibility Experimental Visibility
         * 
         * @return builder
         * 
         */
        public Builder accessibility(@Nullable Output<String> accessibility) {
            $.accessibility = accessibility;
            return this;
        }

        /**
         * @param accessibility Experimental Visibility
         * 
         * @return builder
         * 
         */
        public Builder accessibility(String accessibility) {
            return accessibility(Output.of(accessibility));
        }

        /**
         * @param artifactUri ArtifactUri is default OSS storage path of the output of trials in the experiment
         * 
         * @return builder
         * 
         */
        public Builder artifactUri(@Nullable Output<String> artifactUri) {
            $.artifactUri = artifactUri;
            return this;
        }

        /**
         * @param artifactUri ArtifactUri is default OSS storage path of the output of trials in the experiment
         * 
         * @return builder
         * 
         */
        public Builder artifactUri(String artifactUri) {
            return artifactUri(Output.of(artifactUri));
        }

        /**
         * @param createTime GmtCreateTime is time when this entity is created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime GmtCreateTime is time when this entity is created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param experimentName Name is the name of the experiment, unique in a namespace
         * 
         * @return builder
         * 
         */
        public Builder experimentName(@Nullable Output<String> experimentName) {
            $.experimentName = experimentName;
            return this;
        }

        /**
         * @param experimentName Name is the name of the experiment, unique in a namespace
         * 
         * @return builder
         * 
         */
        public Builder experimentName(String experimentName) {
            return experimentName(Output.of(experimentName));
        }

        /**
         * @param workspaceId WorkspaceId is the workspace id which contains the experiment
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId WorkspaceId is the workspace id which contains the experiment
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public WorkspaceExperimentState build() {
            return $;
        }
    }

}
