// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eci.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerGroupContainerVolumeMountArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerGroupContainerVolumeMountArgs Empty = new ContainerGroupContainerVolumeMountArgs();

    /**
     * The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
     * 
     */
    @Import(name="mountPath")
    private @Nullable Output<String> mountPath;

    /**
     * @return The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
     * 
     */
    public Optional<Output<String>> mountPath() {
        return Optional.ofNullable(this.mountPath);
    }

    /**
     * The name of the volume.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the volume.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies whether the mount path is read-only. Default value: `false`.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    /**
     * @return Specifies whether the mount path is read-only. Default value: `false`.
     * 
     */
    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    private ContainerGroupContainerVolumeMountArgs() {}

    private ContainerGroupContainerVolumeMountArgs(ContainerGroupContainerVolumeMountArgs $) {
        this.mountPath = $.mountPath;
        this.name = $.name;
        this.readOnly = $.readOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerGroupContainerVolumeMountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerGroupContainerVolumeMountArgs $;

        public Builder() {
            $ = new ContainerGroupContainerVolumeMountArgs();
        }

        public Builder(ContainerGroupContainerVolumeMountArgs defaults) {
            $ = new ContainerGroupContainerVolumeMountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mountPath The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(@Nullable Output<String> mountPath) {
            $.mountPath = mountPath;
            return this;
        }

        /**
         * @param mountPath The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(String mountPath) {
            return mountPath(Output.of(mountPath));
        }

        /**
         * @param name The name of the volume.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the volume.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param readOnly Specifies whether the mount path is read-only. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        /**
         * @param readOnly Specifies whether the mount path is read-only. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public ContainerGroupContainerVolumeMountArgs build() {
            return $;
        }
    }

}
