// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NasFileSystemArgs extends com.pulumi.resources.ResourceArgs {

    public static final NasFileSystemArgs Empty = new NasFileSystemArgs();

    /**
     * The description of nas file system.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of nas file system.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The filesystem id of nas file system.
     * 
     */
    @Import(name="fileSystemId")
    private @Nullable Output<String> fileSystemId;

    /**
     * @return The filesystem id of nas file system.
     * 
     */
    public Optional<Output<String>> fileSystemId() {
        return Optional.ofNullable(this.fileSystemId);
    }

    /**
     * The domain of mount target.
     * 
     */
    @Import(name="mountTargetDomain")
    private @Nullable Output<String> mountTargetDomain;

    /**
     * @return The domain of mount target.
     * 
     */
    public Optional<Output<String>> mountTargetDomain() {
        return Optional.ofNullable(this.mountTargetDomain);
    }

    /**
     * The name of nas file system.
     * 
     */
    @Import(name="nasFileSystemName")
    private @Nullable Output<String> nasFileSystemName;

    /**
     * @return The name of nas file system.
     * 
     */
    public Optional<Output<String>> nasFileSystemName() {
        return Optional.ofNullable(this.nasFileSystemName);
    }

    /**
     * The ID of office site.
     * 
     */
    @Import(name="officeSiteId", required=true)
    private Output<String> officeSiteId;

    /**
     * @return The ID of office site.
     * 
     */
    public Output<String> officeSiteId() {
        return this.officeSiteId;
    }

    /**
     * The mount point is in an inactive state, reset the mount point of the NAS file system. Default to `false`.
     * 
     */
    @Import(name="reset")
    private @Nullable Output<Boolean> reset;

    /**
     * @return The mount point is in an inactive state, reset the mount point of the NAS file system. Default to `false`.
     * 
     */
    public Optional<Output<Boolean>> reset() {
        return Optional.ofNullable(this.reset);
    }

    private NasFileSystemArgs() {}

    private NasFileSystemArgs(NasFileSystemArgs $) {
        this.description = $.description;
        this.fileSystemId = $.fileSystemId;
        this.mountTargetDomain = $.mountTargetDomain;
        this.nasFileSystemName = $.nasFileSystemName;
        this.officeSiteId = $.officeSiteId;
        this.reset = $.reset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NasFileSystemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NasFileSystemArgs $;

        public Builder() {
            $ = new NasFileSystemArgs();
        }

        public Builder(NasFileSystemArgs defaults) {
            $ = new NasFileSystemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of nas file system.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of nas file system.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fileSystemId The filesystem id of nas file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(@Nullable Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId The filesystem id of nas file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param mountTargetDomain The domain of mount target.
         * 
         * @return builder
         * 
         */
        public Builder mountTargetDomain(@Nullable Output<String> mountTargetDomain) {
            $.mountTargetDomain = mountTargetDomain;
            return this;
        }

        /**
         * @param mountTargetDomain The domain of mount target.
         * 
         * @return builder
         * 
         */
        public Builder mountTargetDomain(String mountTargetDomain) {
            return mountTargetDomain(Output.of(mountTargetDomain));
        }

        /**
         * @param nasFileSystemName The name of nas file system.
         * 
         * @return builder
         * 
         */
        public Builder nasFileSystemName(@Nullable Output<String> nasFileSystemName) {
            $.nasFileSystemName = nasFileSystemName;
            return this;
        }

        /**
         * @param nasFileSystemName The name of nas file system.
         * 
         * @return builder
         * 
         */
        public Builder nasFileSystemName(String nasFileSystemName) {
            return nasFileSystemName(Output.of(nasFileSystemName));
        }

        /**
         * @param officeSiteId The ID of office site.
         * 
         * @return builder
         * 
         */
        public Builder officeSiteId(Output<String> officeSiteId) {
            $.officeSiteId = officeSiteId;
            return this;
        }

        /**
         * @param officeSiteId The ID of office site.
         * 
         * @return builder
         * 
         */
        public Builder officeSiteId(String officeSiteId) {
            return officeSiteId(Output.of(officeSiteId));
        }

        /**
         * @param reset The mount point is in an inactive state, reset the mount point of the NAS file system. Default to `false`.
         * 
         * @return builder
         * 
         */
        public Builder reset(@Nullable Output<Boolean> reset) {
            $.reset = reset;
            return this;
        }

        /**
         * @param reset The mount point is in an inactive state, reset the mount point of the NAS file system. Default to `false`.
         * 
         * @return builder
         * 
         */
        public Builder reset(Boolean reset) {
            return reset(Output.of(reset));
        }

        public NasFileSystemArgs build() {
            if ($.officeSiteId == null) {
                throw new MissingRequiredPropertyException("NasFileSystemArgs", "officeSiteId");
            }
            return $;
        }
    }

}
