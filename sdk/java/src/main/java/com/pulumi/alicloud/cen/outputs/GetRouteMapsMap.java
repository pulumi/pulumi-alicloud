// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRouteMapsMap {
    /**
     * @return A match statement. It indicates the mode in which the as-path attribute is matched.
     * 
     */
    private String asPathMatchMode;
    /**
     * @return The ID of the CEN instance.
     * 
     */
    private String cenId;
    /**
     * @return The ID of the region to which the CEN instance belongs.
     * 
     */
    private String cenRegionId;
    /**
     * @return A match statement. It indicates the mode in which the prefix attribute is matched.
     * 
     */
    private String cidrMatchMode;
    /**
     * @return A match statement. It indicates the mode in which the community attribute is matched.
     * 
     */
    private String communityMatchMode;
    /**
     * @return An action statement. It indicates the mode in which the community attribute is operated.
     * 
     */
    private String communityOperateMode;
    /**
     * @return The description of the route map.
     * 
     */
    private String description;
    /**
     * @return A match statement that indicates the list of IDs of the destination instances.
     * 
     */
    private List<String> destinationChildInstanceTypes;
    /**
     * @return A match statement that indicates the prefix list.
     * 
     */
    private List<String> destinationCidrBlocks;
    /**
     * @return A match statement that indicates the list of IDs of the destination instances.
     * 
     */
    private List<String> destinationInstanceIds;
    /**
     * @return Indicates whether to enable the reverse match method of the DestinationInstanceIds match condition.
     * 
     */
    private Boolean destinationInstanceIdsReverseMatch;
    /**
     * @return A match statement that indicates the list of IDs of the destination route tables.
     * 
     */
    private List<String> destinationRouteTableIds;
    /**
     * @return The ID of the route map. It formats as `&lt;cen_id&gt;:&lt;route_map_id&gt;`. Before 1.161.0, it is `route_map_id`.
     * 
     */
    private String id;
    /**
     * @return The action that is performed to a route if the route meets all the match conditions.
     * 
     */
    private String mapResult;
    /**
     * @return A match statement that indicates the As path list.
     * 
     */
    private List<String> matchAsns;
    /**
     * @return A match statement that indicates the community set.
     * 
     */
    private List<String> matchCommunitySets;
    /**
     * @return The priority of the next route map that is associated with the current route map.
     * 
     */
    private Integer nextPriority;
    /**
     * @return An action statement that operates the community attribute.
     * 
     */
    private List<String> operateCommunitySets;
    /**
     * @return An action statement that modifies the preference of the route.
     * 
     */
    private Integer preference;
    /**
     * @return Indicates AS Path prepending when a regional gateway receives or publishes a route.
     * 
     */
    private List<String> prependAsPaths;
    /**
     * @return The priority of the route map.
     * 
     */
    private Integer priority;
    /**
     * @return The ID of the route map.
     * 
     */
    private String routeMapId;
    /**
     * @return A match statement that indicates the list of route types.
     * 
     */
    private List<String> routeTypes;
    /**
     * @return A match statement that indicates the list of IDs of the source instances.
     * 
     */
    private List<String> sourceChildInstanceTypes;
    /**
     * @return A match statement that indicates the list of IDs of the source instances.
     * 
     */
    private List<String> sourceInstanceIds;
    /**
     * @return Indicates whether to enable the reverse match method of the SourceInstanceIds match condition.
     * 
     */
    private Boolean sourceInstanceIdsReverseMatch;
    /**
     * @return A match statement that indicates the list of IDs of the source regions.
     * 
     */
    private List<String> sourceRegionIds;
    /**
     * @return A match statement that indicates the list of IDs of the source route tables.
     * 
     */
    private List<String> sourceRouteTableIds;
    /**
     * @return The status of the route map, including `Creating`, `Active` and `Deleting`.
     * 
     */
    private String status;
    /**
     * @return The direction in which the route map is applied, including `RegionIn` and `RegionOut`.
     * 
     */
    private String transmitDirection;

    private GetRouteMapsMap() {}
    /**
     * @return A match statement. It indicates the mode in which the as-path attribute is matched.
     * 
     */
    public String asPathMatchMode() {
        return this.asPathMatchMode;
    }
    /**
     * @return The ID of the CEN instance.
     * 
     */
    public String cenId() {
        return this.cenId;
    }
    /**
     * @return The ID of the region to which the CEN instance belongs.
     * 
     */
    public String cenRegionId() {
        return this.cenRegionId;
    }
    /**
     * @return A match statement. It indicates the mode in which the prefix attribute is matched.
     * 
     */
    public String cidrMatchMode() {
        return this.cidrMatchMode;
    }
    /**
     * @return A match statement. It indicates the mode in which the community attribute is matched.
     * 
     */
    public String communityMatchMode() {
        return this.communityMatchMode;
    }
    /**
     * @return An action statement. It indicates the mode in which the community attribute is operated.
     * 
     */
    public String communityOperateMode() {
        return this.communityOperateMode;
    }
    /**
     * @return The description of the route map.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A match statement that indicates the list of IDs of the destination instances.
     * 
     */
    public List<String> destinationChildInstanceTypes() {
        return this.destinationChildInstanceTypes;
    }
    /**
     * @return A match statement that indicates the prefix list.
     * 
     */
    public List<String> destinationCidrBlocks() {
        return this.destinationCidrBlocks;
    }
    /**
     * @return A match statement that indicates the list of IDs of the destination instances.
     * 
     */
    public List<String> destinationInstanceIds() {
        return this.destinationInstanceIds;
    }
    /**
     * @return Indicates whether to enable the reverse match method of the DestinationInstanceIds match condition.
     * 
     */
    public Boolean destinationInstanceIdsReverseMatch() {
        return this.destinationInstanceIdsReverseMatch;
    }
    /**
     * @return A match statement that indicates the list of IDs of the destination route tables.
     * 
     */
    public List<String> destinationRouteTableIds() {
        return this.destinationRouteTableIds;
    }
    /**
     * @return The ID of the route map. It formats as `&lt;cen_id&gt;:&lt;route_map_id&gt;`. Before 1.161.0, it is `route_map_id`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The action that is performed to a route if the route meets all the match conditions.
     * 
     */
    public String mapResult() {
        return this.mapResult;
    }
    /**
     * @return A match statement that indicates the As path list.
     * 
     */
    public List<String> matchAsns() {
        return this.matchAsns;
    }
    /**
     * @return A match statement that indicates the community set.
     * 
     */
    public List<String> matchCommunitySets() {
        return this.matchCommunitySets;
    }
    /**
     * @return The priority of the next route map that is associated with the current route map.
     * 
     */
    public Integer nextPriority() {
        return this.nextPriority;
    }
    /**
     * @return An action statement that operates the community attribute.
     * 
     */
    public List<String> operateCommunitySets() {
        return this.operateCommunitySets;
    }
    /**
     * @return An action statement that modifies the preference of the route.
     * 
     */
    public Integer preference() {
        return this.preference;
    }
    /**
     * @return Indicates AS Path prepending when a regional gateway receives or publishes a route.
     * 
     */
    public List<String> prependAsPaths() {
        return this.prependAsPaths;
    }
    /**
     * @return The priority of the route map.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return The ID of the route map.
     * 
     */
    public String routeMapId() {
        return this.routeMapId;
    }
    /**
     * @return A match statement that indicates the list of route types.
     * 
     */
    public List<String> routeTypes() {
        return this.routeTypes;
    }
    /**
     * @return A match statement that indicates the list of IDs of the source instances.
     * 
     */
    public List<String> sourceChildInstanceTypes() {
        return this.sourceChildInstanceTypes;
    }
    /**
     * @return A match statement that indicates the list of IDs of the source instances.
     * 
     */
    public List<String> sourceInstanceIds() {
        return this.sourceInstanceIds;
    }
    /**
     * @return Indicates whether to enable the reverse match method of the SourceInstanceIds match condition.
     * 
     */
    public Boolean sourceInstanceIdsReverseMatch() {
        return this.sourceInstanceIdsReverseMatch;
    }
    /**
     * @return A match statement that indicates the list of IDs of the source regions.
     * 
     */
    public List<String> sourceRegionIds() {
        return this.sourceRegionIds;
    }
    /**
     * @return A match statement that indicates the list of IDs of the source route tables.
     * 
     */
    public List<String> sourceRouteTableIds() {
        return this.sourceRouteTableIds;
    }
    /**
     * @return The status of the route map, including `Creating`, `Active` and `Deleting`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The direction in which the route map is applied, including `RegionIn` and `RegionOut`.
     * 
     */
    public String transmitDirection() {
        return this.transmitDirection;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteMapsMap defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String asPathMatchMode;
        private String cenId;
        private String cenRegionId;
        private String cidrMatchMode;
        private String communityMatchMode;
        private String communityOperateMode;
        private String description;
        private List<String> destinationChildInstanceTypes;
        private List<String> destinationCidrBlocks;
        private List<String> destinationInstanceIds;
        private Boolean destinationInstanceIdsReverseMatch;
        private List<String> destinationRouteTableIds;
        private String id;
        private String mapResult;
        private List<String> matchAsns;
        private List<String> matchCommunitySets;
        private Integer nextPriority;
        private List<String> operateCommunitySets;
        private Integer preference;
        private List<String> prependAsPaths;
        private Integer priority;
        private String routeMapId;
        private List<String> routeTypes;
        private List<String> sourceChildInstanceTypes;
        private List<String> sourceInstanceIds;
        private Boolean sourceInstanceIdsReverseMatch;
        private List<String> sourceRegionIds;
        private List<String> sourceRouteTableIds;
        private String status;
        private String transmitDirection;
        public Builder() {}
        public Builder(GetRouteMapsMap defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asPathMatchMode = defaults.asPathMatchMode;
    	      this.cenId = defaults.cenId;
    	      this.cenRegionId = defaults.cenRegionId;
    	      this.cidrMatchMode = defaults.cidrMatchMode;
    	      this.communityMatchMode = defaults.communityMatchMode;
    	      this.communityOperateMode = defaults.communityOperateMode;
    	      this.description = defaults.description;
    	      this.destinationChildInstanceTypes = defaults.destinationChildInstanceTypes;
    	      this.destinationCidrBlocks = defaults.destinationCidrBlocks;
    	      this.destinationInstanceIds = defaults.destinationInstanceIds;
    	      this.destinationInstanceIdsReverseMatch = defaults.destinationInstanceIdsReverseMatch;
    	      this.destinationRouteTableIds = defaults.destinationRouteTableIds;
    	      this.id = defaults.id;
    	      this.mapResult = defaults.mapResult;
    	      this.matchAsns = defaults.matchAsns;
    	      this.matchCommunitySets = defaults.matchCommunitySets;
    	      this.nextPriority = defaults.nextPriority;
    	      this.operateCommunitySets = defaults.operateCommunitySets;
    	      this.preference = defaults.preference;
    	      this.prependAsPaths = defaults.prependAsPaths;
    	      this.priority = defaults.priority;
    	      this.routeMapId = defaults.routeMapId;
    	      this.routeTypes = defaults.routeTypes;
    	      this.sourceChildInstanceTypes = defaults.sourceChildInstanceTypes;
    	      this.sourceInstanceIds = defaults.sourceInstanceIds;
    	      this.sourceInstanceIdsReverseMatch = defaults.sourceInstanceIdsReverseMatch;
    	      this.sourceRegionIds = defaults.sourceRegionIds;
    	      this.sourceRouteTableIds = defaults.sourceRouteTableIds;
    	      this.status = defaults.status;
    	      this.transmitDirection = defaults.transmitDirection;
        }

        @CustomType.Setter
        public Builder asPathMatchMode(String asPathMatchMode) {
            this.asPathMatchMode = Objects.requireNonNull(asPathMatchMode);
            return this;
        }
        @CustomType.Setter
        public Builder cenId(String cenId) {
            this.cenId = Objects.requireNonNull(cenId);
            return this;
        }
        @CustomType.Setter
        public Builder cenRegionId(String cenRegionId) {
            this.cenRegionId = Objects.requireNonNull(cenRegionId);
            return this;
        }
        @CustomType.Setter
        public Builder cidrMatchMode(String cidrMatchMode) {
            this.cidrMatchMode = Objects.requireNonNull(cidrMatchMode);
            return this;
        }
        @CustomType.Setter
        public Builder communityMatchMode(String communityMatchMode) {
            this.communityMatchMode = Objects.requireNonNull(communityMatchMode);
            return this;
        }
        @CustomType.Setter
        public Builder communityOperateMode(String communityOperateMode) {
            this.communityOperateMode = Objects.requireNonNull(communityOperateMode);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder destinationChildInstanceTypes(List<String> destinationChildInstanceTypes) {
            this.destinationChildInstanceTypes = Objects.requireNonNull(destinationChildInstanceTypes);
            return this;
        }
        public Builder destinationChildInstanceTypes(String... destinationChildInstanceTypes) {
            return destinationChildInstanceTypes(List.of(destinationChildInstanceTypes));
        }
        @CustomType.Setter
        public Builder destinationCidrBlocks(List<String> destinationCidrBlocks) {
            this.destinationCidrBlocks = Objects.requireNonNull(destinationCidrBlocks);
            return this;
        }
        public Builder destinationCidrBlocks(String... destinationCidrBlocks) {
            return destinationCidrBlocks(List.of(destinationCidrBlocks));
        }
        @CustomType.Setter
        public Builder destinationInstanceIds(List<String> destinationInstanceIds) {
            this.destinationInstanceIds = Objects.requireNonNull(destinationInstanceIds);
            return this;
        }
        public Builder destinationInstanceIds(String... destinationInstanceIds) {
            return destinationInstanceIds(List.of(destinationInstanceIds));
        }
        @CustomType.Setter
        public Builder destinationInstanceIdsReverseMatch(Boolean destinationInstanceIdsReverseMatch) {
            this.destinationInstanceIdsReverseMatch = Objects.requireNonNull(destinationInstanceIdsReverseMatch);
            return this;
        }
        @CustomType.Setter
        public Builder destinationRouteTableIds(List<String> destinationRouteTableIds) {
            this.destinationRouteTableIds = Objects.requireNonNull(destinationRouteTableIds);
            return this;
        }
        public Builder destinationRouteTableIds(String... destinationRouteTableIds) {
            return destinationRouteTableIds(List.of(destinationRouteTableIds));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder mapResult(String mapResult) {
            this.mapResult = Objects.requireNonNull(mapResult);
            return this;
        }
        @CustomType.Setter
        public Builder matchAsns(List<String> matchAsns) {
            this.matchAsns = Objects.requireNonNull(matchAsns);
            return this;
        }
        public Builder matchAsns(String... matchAsns) {
            return matchAsns(List.of(matchAsns));
        }
        @CustomType.Setter
        public Builder matchCommunitySets(List<String> matchCommunitySets) {
            this.matchCommunitySets = Objects.requireNonNull(matchCommunitySets);
            return this;
        }
        public Builder matchCommunitySets(String... matchCommunitySets) {
            return matchCommunitySets(List.of(matchCommunitySets));
        }
        @CustomType.Setter
        public Builder nextPriority(Integer nextPriority) {
            this.nextPriority = Objects.requireNonNull(nextPriority);
            return this;
        }
        @CustomType.Setter
        public Builder operateCommunitySets(List<String> operateCommunitySets) {
            this.operateCommunitySets = Objects.requireNonNull(operateCommunitySets);
            return this;
        }
        public Builder operateCommunitySets(String... operateCommunitySets) {
            return operateCommunitySets(List.of(operateCommunitySets));
        }
        @CustomType.Setter
        public Builder preference(Integer preference) {
            this.preference = Objects.requireNonNull(preference);
            return this;
        }
        @CustomType.Setter
        public Builder prependAsPaths(List<String> prependAsPaths) {
            this.prependAsPaths = Objects.requireNonNull(prependAsPaths);
            return this;
        }
        public Builder prependAsPaths(String... prependAsPaths) {
            return prependAsPaths(List.of(prependAsPaths));
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        @CustomType.Setter
        public Builder routeMapId(String routeMapId) {
            this.routeMapId = Objects.requireNonNull(routeMapId);
            return this;
        }
        @CustomType.Setter
        public Builder routeTypes(List<String> routeTypes) {
            this.routeTypes = Objects.requireNonNull(routeTypes);
            return this;
        }
        public Builder routeTypes(String... routeTypes) {
            return routeTypes(List.of(routeTypes));
        }
        @CustomType.Setter
        public Builder sourceChildInstanceTypes(List<String> sourceChildInstanceTypes) {
            this.sourceChildInstanceTypes = Objects.requireNonNull(sourceChildInstanceTypes);
            return this;
        }
        public Builder sourceChildInstanceTypes(String... sourceChildInstanceTypes) {
            return sourceChildInstanceTypes(List.of(sourceChildInstanceTypes));
        }
        @CustomType.Setter
        public Builder sourceInstanceIds(List<String> sourceInstanceIds) {
            this.sourceInstanceIds = Objects.requireNonNull(sourceInstanceIds);
            return this;
        }
        public Builder sourceInstanceIds(String... sourceInstanceIds) {
            return sourceInstanceIds(List.of(sourceInstanceIds));
        }
        @CustomType.Setter
        public Builder sourceInstanceIdsReverseMatch(Boolean sourceInstanceIdsReverseMatch) {
            this.sourceInstanceIdsReverseMatch = Objects.requireNonNull(sourceInstanceIdsReverseMatch);
            return this;
        }
        @CustomType.Setter
        public Builder sourceRegionIds(List<String> sourceRegionIds) {
            this.sourceRegionIds = Objects.requireNonNull(sourceRegionIds);
            return this;
        }
        public Builder sourceRegionIds(String... sourceRegionIds) {
            return sourceRegionIds(List.of(sourceRegionIds));
        }
        @CustomType.Setter
        public Builder sourceRouteTableIds(List<String> sourceRouteTableIds) {
            this.sourceRouteTableIds = Objects.requireNonNull(sourceRouteTableIds);
            return this;
        }
        public Builder sourceRouteTableIds(String... sourceRouteTableIds) {
            return sourceRouteTableIds(List.of(sourceRouteTableIds));
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder transmitDirection(String transmitDirection) {
            this.transmitDirection = Objects.requireNonNull(transmitDirection);
            return this;
        }
        public GetRouteMapsMap build() {
            final var o = new GetRouteMapsMap();
            o.asPathMatchMode = asPathMatchMode;
            o.cenId = cenId;
            o.cenRegionId = cenRegionId;
            o.cidrMatchMode = cidrMatchMode;
            o.communityMatchMode = communityMatchMode;
            o.communityOperateMode = communityOperateMode;
            o.description = description;
            o.destinationChildInstanceTypes = destinationChildInstanceTypes;
            o.destinationCidrBlocks = destinationCidrBlocks;
            o.destinationInstanceIds = destinationInstanceIds;
            o.destinationInstanceIdsReverseMatch = destinationInstanceIdsReverseMatch;
            o.destinationRouteTableIds = destinationRouteTableIds;
            o.id = id;
            o.mapResult = mapResult;
            o.matchAsns = matchAsns;
            o.matchCommunitySets = matchCommunitySets;
            o.nextPriority = nextPriority;
            o.operateCommunitySets = operateCommunitySets;
            o.preference = preference;
            o.prependAsPaths = prependAsPaths;
            o.priority = priority;
            o.routeMapId = routeMapId;
            o.routeTypes = routeTypes;
            o.sourceChildInstanceTypes = sourceChildInstanceTypes;
            o.sourceInstanceIds = sourceInstanceIds;
            o.sourceInstanceIdsReverseMatch = sourceInstanceIdsReverseMatch;
            o.sourceRegionIds = sourceRegionIds;
            o.sourceRouteTableIds = sourceRouteTableIds;
            o.status = status;
            o.transmitDirection = transmitDirection;
            return o;
        }
    }
}
