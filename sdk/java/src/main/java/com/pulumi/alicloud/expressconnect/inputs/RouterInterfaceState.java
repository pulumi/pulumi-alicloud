// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.expressconnect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouterInterfaceState extends com.pulumi.resources.ResourceArgs {

    public static final RouterInterfaceState Empty = new RouterInterfaceState();

    /**
     * The access point ID to which the VBR belongs.
     * 
     */
    @Import(name="accessPointId")
    private @Nullable Output<String> accessPointId;

    /**
     * @return The access point ID to which the VBR belongs.
     * 
     */
    public Optional<Output<String>> accessPointId() {
        return Optional.ofNullable(this.accessPointId);
    }

    /**
     * Whether to pay automatically, value:-**false** (default): automatic payment is not enabled. After generating an order, you need to complete the payment at the order center.-**true**: Enable automatic payment to automatically pay for orders.&gt; **InstanceChargeType** is required when the value of the parameter is **PrePaid.
     * 
     */
    @Import(name="autoPay")
    private @Nullable Output<Boolean> autoPay;

    /**
     * @return Whether to pay automatically, value:-**false** (default): automatic payment is not enabled. After generating an order, you need to complete the payment at the order center.-**true**: Enable automatic payment to automatically pay for orders.&gt; **InstanceChargeType** is required when the value of the parameter is **PrePaid.
     * 
     */
    public Optional<Output<Boolean>> autoPay() {
        return Optional.ofNullable(this.autoPay);
    }

    /**
     * The bandwidth of the resource.
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return The bandwidth of the resource.
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * The businessStatus of the resource. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
     * 
     */
    @Import(name="businessStatus")
    private @Nullable Output<String> businessStatus;

    /**
     * @return The businessStatus of the resource. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
     * 
     */
    public Optional<Output<String>> businessStatus() {
        return Optional.ofNullable(this.businessStatus);
    }

    /**
     * The connected time of the resource.
     * 
     */
    @Import(name="connectedTime")
    private @Nullable Output<String> connectedTime;

    /**
     * @return The connected time of the resource.
     * 
     */
    public Optional<Output<String>> connectedTime() {
        return Optional.ofNullable(this.connectedTime);
    }

    /**
     * The creation time of the resource.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The creation time of the resource.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The cross border of the resource.
     * 
     */
    @Import(name="crossBorder")
    private @Nullable Output<Boolean> crossBorder;

    /**
     * @return The cross border of the resource.
     * 
     */
    public Optional<Output<Boolean>> crossBorder() {
        return Optional.ofNullable(this.crossBorder);
    }

    /**
     * Whether to delete the health check IP address configured on the router interface. Value:-**true**: deletes the health check IP address.-**false** (default): does not delete the health check IP address.
     * 
     */
    @Import(name="deleteHealthCheckIp")
    private @Nullable Output<Boolean> deleteHealthCheckIp;

    /**
     * @return Whether to delete the health check IP address configured on the router interface. Value:-**true**: deletes the health check IP address.-**false** (default): does not delete the health check IP address.
     * 
     */
    public Optional<Output<Boolean>> deleteHealthCheckIp() {
        return Optional.ofNullable(this.deleteHealthCheckIp);
    }

    /**
     * The description of the router interface. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the router interface. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The end time of the resource.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return The end time of the resource.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The has reservation data of the resource.
     * 
     */
    @Import(name="hasReservationData")
    private @Nullable Output<String> hasReservationData;

    /**
     * @return The has reservation data of the resource.
     * 
     */
    public Optional<Output<String>> hasReservationData() {
        return Optional.ofNullable(this.hasReservationData);
    }

    /**
     * The health check rate. Unit: seconds. The recommended value is 2. This indicates the interval between successive probe messages sent during the specified health check.
     * 
     */
    @Import(name="hcRate")
    private @Nullable Output<Integer> hcRate;

    /**
     * @return The health check rate. Unit: seconds. The recommended value is 2. This indicates the interval between successive probe messages sent during the specified health check.
     * 
     */
    public Optional<Output<Integer>> hcRate() {
        return Optional.ofNullable(this.hcRate);
    }

    /**
     * The health check thresholds. Unit: pcs. The recommended value is 8. This indicates the number of probe messages to be sent during the specified health check.
     * 
     */
    @Import(name="hcThreshold")
    private @Nullable Output<String> hcThreshold;

    /**
     * @return The health check thresholds. Unit: pcs. The recommended value is 8. This indicates the number of probe messages to be sent during the specified health check.
     * 
     */
    public Optional<Output<String>> hcThreshold() {
        return Optional.ofNullable(this.hcThreshold);
    }

    /**
     * The health check source IP address, must be an unused IP within the local VPC.
     * 
     */
    @Import(name="healthCheckSourceIp")
    private @Nullable Output<String> healthCheckSourceIp;

    /**
     * @return The health check source IP address, must be an unused IP within the local VPC.
     * 
     */
    public Optional<Output<String>> healthCheckSourceIp() {
        return Optional.ofNullable(this.healthCheckSourceIp);
    }

    /**
     * The IP address for health screening purposes.
     * 
     */
    @Import(name="healthCheckTargetIp")
    private @Nullable Output<String> healthCheckTargetIp;

    /**
     * @return The IP address for health screening purposes.
     * 
     */
    public Optional<Output<String>> healthCheckTargetIp() {
        return Optional.ofNullable(this.healthCheckTargetIp);
    }

    /**
     * The Access point ID to which the other end belongs.
     * 
     */
    @Import(name="oppositeAccessPointId")
    private @Nullable Output<String> oppositeAccessPointId;

    /**
     * @return The Access point ID to which the other end belongs.
     * 
     */
    public Optional<Output<String>> oppositeAccessPointId() {
        return Optional.ofNullable(this.oppositeAccessPointId);
    }

    /**
     * The opposite bandwidth of the router on the other side.
     * 
     */
    @Import(name="oppositeBandwidth")
    private @Nullable Output<Integer> oppositeBandwidth;

    /**
     * @return The opposite bandwidth of the router on the other side.
     * 
     */
    public Optional<Output<Integer>> oppositeBandwidth() {
        return Optional.ofNullable(this.oppositeBandwidth);
    }

    /**
     * The opposite interface business status of the router on the other side. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
     * 
     */
    @Import(name="oppositeInterfaceBusinessStatus")
    private @Nullable Output<String> oppositeInterfaceBusinessStatus;

    /**
     * @return The opposite interface business status of the router on the other side. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
     * 
     */
    public Optional<Output<String>> oppositeInterfaceBusinessStatus() {
        return Optional.ofNullable(this.oppositeInterfaceBusinessStatus);
    }

    /**
     * The Interface ID of the router at the other end.
     * 
     */
    @Import(name="oppositeInterfaceId")
    private @Nullable Output<String> oppositeInterfaceId;

    /**
     * @return The Interface ID of the router at the other end.
     * 
     */
    public Optional<Output<String>> oppositeInterfaceId() {
        return Optional.ofNullable(this.oppositeInterfaceId);
    }

    /**
     * The AliCloud account ID of the owner of the router interface on the other end.
     * 
     */
    @Import(name="oppositeInterfaceOwnerId")
    private @Nullable Output<String> oppositeInterfaceOwnerId;

    /**
     * @return The AliCloud account ID of the owner of the router interface on the other end.
     * 
     */
    public Optional<Output<String>> oppositeInterfaceOwnerId() {
        return Optional.ofNullable(this.oppositeInterfaceOwnerId);
    }

    /**
     * The opposite interface spec of the router on the other side. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
     * 
     */
    @Import(name="oppositeInterfaceSpec")
    private @Nullable Output<String> oppositeInterfaceSpec;

    /**
     * @return The opposite interface spec of the router on the other side. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
     * 
     */
    public Optional<Output<String>> oppositeInterfaceSpec() {
        return Optional.ofNullable(this.oppositeInterfaceSpec);
    }

    /**
     * The opposite interface status of the router on the other side. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
     * 
     */
    @Import(name="oppositeInterfaceStatus")
    private @Nullable Output<String> oppositeInterfaceStatus;

    /**
     * @return The opposite interface status of the router on the other side. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
     * 
     */
    public Optional<Output<String>> oppositeInterfaceStatus() {
        return Optional.ofNullable(this.oppositeInterfaceStatus);
    }

    /**
     * The geographical ID of the location of the receiving end of the connection.
     * 
     */
    @Import(name="oppositeRegionId")
    private @Nullable Output<String> oppositeRegionId;

    /**
     * @return The geographical ID of the location of the receiving end of the connection.
     * 
     */
    public Optional<Output<String>> oppositeRegionId() {
        return Optional.ofNullable(this.oppositeRegionId);
    }

    /**
     * The id of the router at the other end.
     * 
     */
    @Import(name="oppositeRouterId")
    private @Nullable Output<String> oppositeRouterId;

    /**
     * @return The id of the router at the other end.
     * 
     */
    public Optional<Output<String>> oppositeRouterId() {
        return Optional.ofNullable(this.oppositeRouterId);
    }

    /**
     * The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
     * 
     */
    @Import(name="oppositeRouterType")
    private @Nullable Output<String> oppositeRouterType;

    /**
     * @return The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
     * 
     */
    public Optional<Output<String>> oppositeRouterType() {
        return Optional.ofNullable(this.oppositeRouterType);
    }

    /**
     * The opposite vpc instance id of the router on the other side.
     * 
     */
    @Import(name="oppositeVpcInstanceId")
    private @Nullable Output<String> oppositeVpcInstanceId;

    /**
     * @return The opposite vpc instance id of the router on the other side.
     * 
     */
    public Optional<Output<String>> oppositeVpcInstanceId() {
        return Optional.ofNullable(this.oppositeVpcInstanceId);
    }

    /**
     * The payment methods for router interfaces. Valid Values: `PayAsYouGo`, `Subscription`.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The payment methods for router interfaces. Valid Values: `PayAsYouGo`, `Subscription`.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * Purchase duration, value:-When you choose to pay on a monthly basis, the value range is **1 to 9 * *.-When you choose to pay per year, the value range is **1 to 3 * *.&gt; **InstanceChargeType** is required when the value of the parameter is **PrePaid.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return Purchase duration, value:-When you choose to pay on a monthly basis, the value range is **1 to 9 * *.-When you choose to pay per year, the value range is **1 to 3 * *.&gt; **InstanceChargeType** is required when the value of the parameter is **PrePaid.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The billing cycle of the prepaid fee. Valid values:-**Month** (default): monthly payment.-**Year**: Pay per Year.&gt; **InstanceChargeType** is required when the value of the parameter is **PrePaid.
     * 
     */
    @Import(name="pricingCycle")
    private @Nullable Output<String> pricingCycle;

    /**
     * @return The billing cycle of the prepaid fee. Valid values:-**Month** (default): monthly payment.-**Year**: Pay per Year.&gt; **InstanceChargeType** is required when the value of the parameter is **PrePaid.
     * 
     */
    public Optional<Output<String>> pricingCycle() {
        return Optional.ofNullable(this.pricingCycle);
    }

    /**
     * The reservation active time of the resource.
     * 
     */
    @Import(name="reservationActiveTime")
    private @Nullable Output<String> reservationActiveTime;

    /**
     * @return The reservation active time of the resource.
     * 
     */
    public Optional<Output<String>> reservationActiveTime() {
        return Optional.ofNullable(this.reservationActiveTime);
    }

    /**
     * The reservation bandwidth of the resource.
     * 
     */
    @Import(name="reservationBandwidth")
    private @Nullable Output<String> reservationBandwidth;

    /**
     * @return The reservation bandwidth of the resource.
     * 
     */
    public Optional<Output<String>> reservationBandwidth() {
        return Optional.ofNullable(this.reservationBandwidth);
    }

    /**
     * The reservation internet charge type of the resource.
     * 
     */
    @Import(name="reservationInternetChargeType")
    private @Nullable Output<String> reservationInternetChargeType;

    /**
     * @return The reservation internet charge type of the resource.
     * 
     */
    public Optional<Output<String>> reservationInternetChargeType() {
        return Optional.ofNullable(this.reservationInternetChargeType);
    }

    /**
     * The reservation order type of the resource.
     * 
     */
    @Import(name="reservationOrderType")
    private @Nullable Output<String> reservationOrderType;

    /**
     * @return The reservation order type of the resource.
     * 
     */
    public Optional<Output<String>> reservationOrderType() {
        return Optional.ofNullable(this.reservationOrderType);
    }

    /**
     * The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The router id associated with the router interface.
     * 
     */
    @Import(name="routerId")
    private @Nullable Output<String> routerId;

    /**
     * @return The router id associated with the router interface.
     * 
     */
    public Optional<Output<String>> routerId() {
        return Optional.ofNullable(this.routerId);
    }

    /**
     * The first ID of the resource.
     * 
     */
    @Import(name="routerInterfaceId")
    private @Nullable Output<String> routerInterfaceId;

    /**
     * @return The first ID of the resource.
     * 
     */
    public Optional<Output<String>> routerInterfaceId() {
        return Optional.ofNullable(this.routerInterfaceId);
    }

    /**
     * The name of the resource.
     * 
     */
    @Import(name="routerInterfaceName")
    private @Nullable Output<String> routerInterfaceName;

    /**
     * @return The name of the resource.
     * 
     */
    public Optional<Output<String>> routerInterfaceName() {
        return Optional.ofNullable(this.routerInterfaceName);
    }

    /**
     * The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
     * 
     */
    @Import(name="routerType")
    private @Nullable Output<String> routerType;

    /**
     * @return The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
     * 
     */
    public Optional<Output<String>> routerType() {
        return Optional.ofNullable(this.routerType);
    }

    /**
     * The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
     * 
     */
    @Import(name="spec")
    private @Nullable Output<String> spec;

    /**
     * @return The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
     * 
     */
    public Optional<Output<String>> spec() {
        return Optional.ofNullable(this.spec);
    }

    /**
     * The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The vpc instance id of the resource.
     * 
     */
    @Import(name="vpcInstanceId")
    private @Nullable Output<String> vpcInstanceId;

    /**
     * @return The vpc instance id of the resource.
     * 
     */
    public Optional<Output<String>> vpcInstanceId() {
        return Optional.ofNullable(this.vpcInstanceId);
    }

    private RouterInterfaceState() {}

    private RouterInterfaceState(RouterInterfaceState $) {
        this.accessPointId = $.accessPointId;
        this.autoPay = $.autoPay;
        this.bandwidth = $.bandwidth;
        this.businessStatus = $.businessStatus;
        this.connectedTime = $.connectedTime;
        this.createTime = $.createTime;
        this.crossBorder = $.crossBorder;
        this.deleteHealthCheckIp = $.deleteHealthCheckIp;
        this.description = $.description;
        this.endTime = $.endTime;
        this.hasReservationData = $.hasReservationData;
        this.hcRate = $.hcRate;
        this.hcThreshold = $.hcThreshold;
        this.healthCheckSourceIp = $.healthCheckSourceIp;
        this.healthCheckTargetIp = $.healthCheckTargetIp;
        this.oppositeAccessPointId = $.oppositeAccessPointId;
        this.oppositeBandwidth = $.oppositeBandwidth;
        this.oppositeInterfaceBusinessStatus = $.oppositeInterfaceBusinessStatus;
        this.oppositeInterfaceId = $.oppositeInterfaceId;
        this.oppositeInterfaceOwnerId = $.oppositeInterfaceOwnerId;
        this.oppositeInterfaceSpec = $.oppositeInterfaceSpec;
        this.oppositeInterfaceStatus = $.oppositeInterfaceStatus;
        this.oppositeRegionId = $.oppositeRegionId;
        this.oppositeRouterId = $.oppositeRouterId;
        this.oppositeRouterType = $.oppositeRouterType;
        this.oppositeVpcInstanceId = $.oppositeVpcInstanceId;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.pricingCycle = $.pricingCycle;
        this.reservationActiveTime = $.reservationActiveTime;
        this.reservationBandwidth = $.reservationBandwidth;
        this.reservationInternetChargeType = $.reservationInternetChargeType;
        this.reservationOrderType = $.reservationOrderType;
        this.role = $.role;
        this.routerId = $.routerId;
        this.routerInterfaceId = $.routerInterfaceId;
        this.routerInterfaceName = $.routerInterfaceName;
        this.routerType = $.routerType;
        this.spec = $.spec;
        this.status = $.status;
        this.vpcInstanceId = $.vpcInstanceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterInterfaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterInterfaceState $;

        public Builder() {
            $ = new RouterInterfaceState();
        }

        public Builder(RouterInterfaceState defaults) {
            $ = new RouterInterfaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessPointId The access point ID to which the VBR belongs.
         * 
         * @return builder
         * 
         */
        public Builder accessPointId(@Nullable Output<String> accessPointId) {
            $.accessPointId = accessPointId;
            return this;
        }

        /**
         * @param accessPointId The access point ID to which the VBR belongs.
         * 
         * @return builder
         * 
         */
        public Builder accessPointId(String accessPointId) {
            return accessPointId(Output.of(accessPointId));
        }

        /**
         * @param autoPay Whether to pay automatically, value:-**false** (default): automatic payment is not enabled. After generating an order, you need to complete the payment at the order center.-**true**: Enable automatic payment to automatically pay for orders.&gt; **InstanceChargeType** is required when the value of the parameter is **PrePaid.
         * 
         * @return builder
         * 
         */
        public Builder autoPay(@Nullable Output<Boolean> autoPay) {
            $.autoPay = autoPay;
            return this;
        }

        /**
         * @param autoPay Whether to pay automatically, value:-**false** (default): automatic payment is not enabled. After generating an order, you need to complete the payment at the order center.-**true**: Enable automatic payment to automatically pay for orders.&gt; **InstanceChargeType** is required when the value of the parameter is **PrePaid.
         * 
         * @return builder
         * 
         */
        public Builder autoPay(Boolean autoPay) {
            return autoPay(Output.of(autoPay));
        }

        /**
         * @param bandwidth The bandwidth of the resource.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth The bandwidth of the resource.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param businessStatus The businessStatus of the resource. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
         * 
         * @return builder
         * 
         */
        public Builder businessStatus(@Nullable Output<String> businessStatus) {
            $.businessStatus = businessStatus;
            return this;
        }

        /**
         * @param businessStatus The businessStatus of the resource. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
         * 
         * @return builder
         * 
         */
        public Builder businessStatus(String businessStatus) {
            return businessStatus(Output.of(businessStatus));
        }

        /**
         * @param connectedTime The connected time of the resource.
         * 
         * @return builder
         * 
         */
        public Builder connectedTime(@Nullable Output<String> connectedTime) {
            $.connectedTime = connectedTime;
            return this;
        }

        /**
         * @param connectedTime The connected time of the resource.
         * 
         * @return builder
         * 
         */
        public Builder connectedTime(String connectedTime) {
            return connectedTime(Output.of(connectedTime));
        }

        /**
         * @param createTime The creation time of the resource.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the resource.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param crossBorder The cross border of the resource.
         * 
         * @return builder
         * 
         */
        public Builder crossBorder(@Nullable Output<Boolean> crossBorder) {
            $.crossBorder = crossBorder;
            return this;
        }

        /**
         * @param crossBorder The cross border of the resource.
         * 
         * @return builder
         * 
         */
        public Builder crossBorder(Boolean crossBorder) {
            return crossBorder(Output.of(crossBorder));
        }

        /**
         * @param deleteHealthCheckIp Whether to delete the health check IP address configured on the router interface. Value:-**true**: deletes the health check IP address.-**false** (default): does not delete the health check IP address.
         * 
         * @return builder
         * 
         */
        public Builder deleteHealthCheckIp(@Nullable Output<Boolean> deleteHealthCheckIp) {
            $.deleteHealthCheckIp = deleteHealthCheckIp;
            return this;
        }

        /**
         * @param deleteHealthCheckIp Whether to delete the health check IP address configured on the router interface. Value:-**true**: deletes the health check IP address.-**false** (default): does not delete the health check IP address.
         * 
         * @return builder
         * 
         */
        public Builder deleteHealthCheckIp(Boolean deleteHealthCheckIp) {
            return deleteHealthCheckIp(Output.of(deleteHealthCheckIp));
        }

        /**
         * @param description The description of the router interface. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the router interface. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endTime The end time of the resource.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The end time of the resource.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param hasReservationData The has reservation data of the resource.
         * 
         * @return builder
         * 
         */
        public Builder hasReservationData(@Nullable Output<String> hasReservationData) {
            $.hasReservationData = hasReservationData;
            return this;
        }

        /**
         * @param hasReservationData The has reservation data of the resource.
         * 
         * @return builder
         * 
         */
        public Builder hasReservationData(String hasReservationData) {
            return hasReservationData(Output.of(hasReservationData));
        }

        /**
         * @param hcRate The health check rate. Unit: seconds. The recommended value is 2. This indicates the interval between successive probe messages sent during the specified health check.
         * 
         * @return builder
         * 
         */
        public Builder hcRate(@Nullable Output<Integer> hcRate) {
            $.hcRate = hcRate;
            return this;
        }

        /**
         * @param hcRate The health check rate. Unit: seconds. The recommended value is 2. This indicates the interval between successive probe messages sent during the specified health check.
         * 
         * @return builder
         * 
         */
        public Builder hcRate(Integer hcRate) {
            return hcRate(Output.of(hcRate));
        }

        /**
         * @param hcThreshold The health check thresholds. Unit: pcs. The recommended value is 8. This indicates the number of probe messages to be sent during the specified health check.
         * 
         * @return builder
         * 
         */
        public Builder hcThreshold(@Nullable Output<String> hcThreshold) {
            $.hcThreshold = hcThreshold;
            return this;
        }

        /**
         * @param hcThreshold The health check thresholds. Unit: pcs. The recommended value is 8. This indicates the number of probe messages to be sent during the specified health check.
         * 
         * @return builder
         * 
         */
        public Builder hcThreshold(String hcThreshold) {
            return hcThreshold(Output.of(hcThreshold));
        }

        /**
         * @param healthCheckSourceIp The health check source IP address, must be an unused IP within the local VPC.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckSourceIp(@Nullable Output<String> healthCheckSourceIp) {
            $.healthCheckSourceIp = healthCheckSourceIp;
            return this;
        }

        /**
         * @param healthCheckSourceIp The health check source IP address, must be an unused IP within the local VPC.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckSourceIp(String healthCheckSourceIp) {
            return healthCheckSourceIp(Output.of(healthCheckSourceIp));
        }

        /**
         * @param healthCheckTargetIp The IP address for health screening purposes.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTargetIp(@Nullable Output<String> healthCheckTargetIp) {
            $.healthCheckTargetIp = healthCheckTargetIp;
            return this;
        }

        /**
         * @param healthCheckTargetIp The IP address for health screening purposes.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTargetIp(String healthCheckTargetIp) {
            return healthCheckTargetIp(Output.of(healthCheckTargetIp));
        }

        /**
         * @param oppositeAccessPointId The Access point ID to which the other end belongs.
         * 
         * @return builder
         * 
         */
        public Builder oppositeAccessPointId(@Nullable Output<String> oppositeAccessPointId) {
            $.oppositeAccessPointId = oppositeAccessPointId;
            return this;
        }

        /**
         * @param oppositeAccessPointId The Access point ID to which the other end belongs.
         * 
         * @return builder
         * 
         */
        public Builder oppositeAccessPointId(String oppositeAccessPointId) {
            return oppositeAccessPointId(Output.of(oppositeAccessPointId));
        }

        /**
         * @param oppositeBandwidth The opposite bandwidth of the router on the other side.
         * 
         * @return builder
         * 
         */
        public Builder oppositeBandwidth(@Nullable Output<Integer> oppositeBandwidth) {
            $.oppositeBandwidth = oppositeBandwidth;
            return this;
        }

        /**
         * @param oppositeBandwidth The opposite bandwidth of the router on the other side.
         * 
         * @return builder
         * 
         */
        public Builder oppositeBandwidth(Integer oppositeBandwidth) {
            return oppositeBandwidth(Output.of(oppositeBandwidth));
        }

        /**
         * @param oppositeInterfaceBusinessStatus The opposite interface business status of the router on the other side. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
         * 
         * @return builder
         * 
         */
        public Builder oppositeInterfaceBusinessStatus(@Nullable Output<String> oppositeInterfaceBusinessStatus) {
            $.oppositeInterfaceBusinessStatus = oppositeInterfaceBusinessStatus;
            return this;
        }

        /**
         * @param oppositeInterfaceBusinessStatus The opposite interface business status of the router on the other side. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
         * 
         * @return builder
         * 
         */
        public Builder oppositeInterfaceBusinessStatus(String oppositeInterfaceBusinessStatus) {
            return oppositeInterfaceBusinessStatus(Output.of(oppositeInterfaceBusinessStatus));
        }

        /**
         * @param oppositeInterfaceId The Interface ID of the router at the other end.
         * 
         * @return builder
         * 
         */
        public Builder oppositeInterfaceId(@Nullable Output<String> oppositeInterfaceId) {
            $.oppositeInterfaceId = oppositeInterfaceId;
            return this;
        }

        /**
         * @param oppositeInterfaceId The Interface ID of the router at the other end.
         * 
         * @return builder
         * 
         */
        public Builder oppositeInterfaceId(String oppositeInterfaceId) {
            return oppositeInterfaceId(Output.of(oppositeInterfaceId));
        }

        /**
         * @param oppositeInterfaceOwnerId The AliCloud account ID of the owner of the router interface on the other end.
         * 
         * @return builder
         * 
         */
        public Builder oppositeInterfaceOwnerId(@Nullable Output<String> oppositeInterfaceOwnerId) {
            $.oppositeInterfaceOwnerId = oppositeInterfaceOwnerId;
            return this;
        }

        /**
         * @param oppositeInterfaceOwnerId The AliCloud account ID of the owner of the router interface on the other end.
         * 
         * @return builder
         * 
         */
        public Builder oppositeInterfaceOwnerId(String oppositeInterfaceOwnerId) {
            return oppositeInterfaceOwnerId(Output.of(oppositeInterfaceOwnerId));
        }

        /**
         * @param oppositeInterfaceSpec The opposite interface spec of the router on the other side. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
         * 
         * @return builder
         * 
         */
        public Builder oppositeInterfaceSpec(@Nullable Output<String> oppositeInterfaceSpec) {
            $.oppositeInterfaceSpec = oppositeInterfaceSpec;
            return this;
        }

        /**
         * @param oppositeInterfaceSpec The opposite interface spec of the router on the other side. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
         * 
         * @return builder
         * 
         */
        public Builder oppositeInterfaceSpec(String oppositeInterfaceSpec) {
            return oppositeInterfaceSpec(Output.of(oppositeInterfaceSpec));
        }

        /**
         * @param oppositeInterfaceStatus The opposite interface status of the router on the other side. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
         * 
         * @return builder
         * 
         */
        public Builder oppositeInterfaceStatus(@Nullable Output<String> oppositeInterfaceStatus) {
            $.oppositeInterfaceStatus = oppositeInterfaceStatus;
            return this;
        }

        /**
         * @param oppositeInterfaceStatus The opposite interface status of the router on the other side. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
         * 
         * @return builder
         * 
         */
        public Builder oppositeInterfaceStatus(String oppositeInterfaceStatus) {
            return oppositeInterfaceStatus(Output.of(oppositeInterfaceStatus));
        }

        /**
         * @param oppositeRegionId The geographical ID of the location of the receiving end of the connection.
         * 
         * @return builder
         * 
         */
        public Builder oppositeRegionId(@Nullable Output<String> oppositeRegionId) {
            $.oppositeRegionId = oppositeRegionId;
            return this;
        }

        /**
         * @param oppositeRegionId The geographical ID of the location of the receiving end of the connection.
         * 
         * @return builder
         * 
         */
        public Builder oppositeRegionId(String oppositeRegionId) {
            return oppositeRegionId(Output.of(oppositeRegionId));
        }

        /**
         * @param oppositeRouterId The id of the router at the other end.
         * 
         * @return builder
         * 
         */
        public Builder oppositeRouterId(@Nullable Output<String> oppositeRouterId) {
            $.oppositeRouterId = oppositeRouterId;
            return this;
        }

        /**
         * @param oppositeRouterId The id of the router at the other end.
         * 
         * @return builder
         * 
         */
        public Builder oppositeRouterId(String oppositeRouterId) {
            return oppositeRouterId(Output.of(oppositeRouterId));
        }

        /**
         * @param oppositeRouterType The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
         * 
         * @return builder
         * 
         */
        public Builder oppositeRouterType(@Nullable Output<String> oppositeRouterType) {
            $.oppositeRouterType = oppositeRouterType;
            return this;
        }

        /**
         * @param oppositeRouterType The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
         * 
         * @return builder
         * 
         */
        public Builder oppositeRouterType(String oppositeRouterType) {
            return oppositeRouterType(Output.of(oppositeRouterType));
        }

        /**
         * @param oppositeVpcInstanceId The opposite vpc instance id of the router on the other side.
         * 
         * @return builder
         * 
         */
        public Builder oppositeVpcInstanceId(@Nullable Output<String> oppositeVpcInstanceId) {
            $.oppositeVpcInstanceId = oppositeVpcInstanceId;
            return this;
        }

        /**
         * @param oppositeVpcInstanceId The opposite vpc instance id of the router on the other side.
         * 
         * @return builder
         * 
         */
        public Builder oppositeVpcInstanceId(String oppositeVpcInstanceId) {
            return oppositeVpcInstanceId(Output.of(oppositeVpcInstanceId));
        }

        /**
         * @param paymentType The payment methods for router interfaces. Valid Values: `PayAsYouGo`, `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment methods for router interfaces. Valid Values: `PayAsYouGo`, `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period Purchase duration, value:-When you choose to pay on a monthly basis, the value range is **1 to 9 * *.-When you choose to pay per year, the value range is **1 to 3 * *.&gt; **InstanceChargeType** is required when the value of the parameter is **PrePaid.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Purchase duration, value:-When you choose to pay on a monthly basis, the value range is **1 to 9 * *.-When you choose to pay per year, the value range is **1 to 3 * *.&gt; **InstanceChargeType** is required when the value of the parameter is **PrePaid.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param pricingCycle The billing cycle of the prepaid fee. Valid values:-**Month** (default): monthly payment.-**Year**: Pay per Year.&gt; **InstanceChargeType** is required when the value of the parameter is **PrePaid.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(@Nullable Output<String> pricingCycle) {
            $.pricingCycle = pricingCycle;
            return this;
        }

        /**
         * @param pricingCycle The billing cycle of the prepaid fee. Valid values:-**Month** (default): monthly payment.-**Year**: Pay per Year.&gt; **InstanceChargeType** is required when the value of the parameter is **PrePaid.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(String pricingCycle) {
            return pricingCycle(Output.of(pricingCycle));
        }

        /**
         * @param reservationActiveTime The reservation active time of the resource.
         * 
         * @return builder
         * 
         */
        public Builder reservationActiveTime(@Nullable Output<String> reservationActiveTime) {
            $.reservationActiveTime = reservationActiveTime;
            return this;
        }

        /**
         * @param reservationActiveTime The reservation active time of the resource.
         * 
         * @return builder
         * 
         */
        public Builder reservationActiveTime(String reservationActiveTime) {
            return reservationActiveTime(Output.of(reservationActiveTime));
        }

        /**
         * @param reservationBandwidth The reservation bandwidth of the resource.
         * 
         * @return builder
         * 
         */
        public Builder reservationBandwidth(@Nullable Output<String> reservationBandwidth) {
            $.reservationBandwidth = reservationBandwidth;
            return this;
        }

        /**
         * @param reservationBandwidth The reservation bandwidth of the resource.
         * 
         * @return builder
         * 
         */
        public Builder reservationBandwidth(String reservationBandwidth) {
            return reservationBandwidth(Output.of(reservationBandwidth));
        }

        /**
         * @param reservationInternetChargeType The reservation internet charge type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder reservationInternetChargeType(@Nullable Output<String> reservationInternetChargeType) {
            $.reservationInternetChargeType = reservationInternetChargeType;
            return this;
        }

        /**
         * @param reservationInternetChargeType The reservation internet charge type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder reservationInternetChargeType(String reservationInternetChargeType) {
            return reservationInternetChargeType(Output.of(reservationInternetChargeType));
        }

        /**
         * @param reservationOrderType The reservation order type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder reservationOrderType(@Nullable Output<String> reservationOrderType) {
            $.reservationOrderType = reservationOrderType;
            return this;
        }

        /**
         * @param reservationOrderType The reservation order type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder reservationOrderType(String reservationOrderType) {
            return reservationOrderType(Output.of(reservationOrderType));
        }

        /**
         * @param role The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param routerId The router id associated with the router interface.
         * 
         * @return builder
         * 
         */
        public Builder routerId(@Nullable Output<String> routerId) {
            $.routerId = routerId;
            return this;
        }

        /**
         * @param routerId The router id associated with the router interface.
         * 
         * @return builder
         * 
         */
        public Builder routerId(String routerId) {
            return routerId(Output.of(routerId));
        }

        /**
         * @param routerInterfaceId The first ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder routerInterfaceId(@Nullable Output<String> routerInterfaceId) {
            $.routerInterfaceId = routerInterfaceId;
            return this;
        }

        /**
         * @param routerInterfaceId The first ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder routerInterfaceId(String routerInterfaceId) {
            return routerInterfaceId(Output.of(routerInterfaceId));
        }

        /**
         * @param routerInterfaceName The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder routerInterfaceName(@Nullable Output<String> routerInterfaceName) {
            $.routerInterfaceName = routerInterfaceName;
            return this;
        }

        /**
         * @param routerInterfaceName The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder routerInterfaceName(String routerInterfaceName) {
            return routerInterfaceName(Output.of(routerInterfaceName));
        }

        /**
         * @param routerType The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
         * 
         * @return builder
         * 
         */
        public Builder routerType(@Nullable Output<String> routerType) {
            $.routerType = routerType;
            return this;
        }

        /**
         * @param routerType The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
         * 
         * @return builder
         * 
         */
        public Builder routerType(String routerType) {
            return routerType(Output.of(routerType));
        }

        /**
         * @param spec The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
         * 
         * @return builder
         * 
         */
        public Builder spec(@Nullable Output<String> spec) {
            $.spec = spec;
            return this;
        }

        /**
         * @param spec The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
         * 
         * @return builder
         * 
         */
        public Builder spec(String spec) {
            return spec(Output.of(spec));
        }

        /**
         * @param status The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param vpcInstanceId The vpc instance id of the resource.
         * 
         * @return builder
         * 
         */
        public Builder vpcInstanceId(@Nullable Output<String> vpcInstanceId) {
            $.vpcInstanceId = vpcInstanceId;
            return this;
        }

        /**
         * @param vpcInstanceId The vpc instance id of the resource.
         * 
         * @return builder
         * 
         */
        public Builder vpcInstanceId(String vpcInstanceId) {
            return vpcInstanceId(Output.of(vpcInstanceId));
        }

        public RouterInterfaceState build() {
            return $;
        }
    }

}
