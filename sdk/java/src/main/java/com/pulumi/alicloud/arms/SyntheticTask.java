// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.arms.SyntheticTaskArgs;
import com.pulumi.alicloud.arms.inputs.SyntheticTaskState;
import com.pulumi.alicloud.arms.outputs.SyntheticTaskAvailableAssertion;
import com.pulumi.alicloud.arms.outputs.SyntheticTaskCommonSetting;
import com.pulumi.alicloud.arms.outputs.SyntheticTaskCustomPeriod;
import com.pulumi.alicloud.arms.outputs.SyntheticTaskMonitor;
import com.pulumi.alicloud.arms.outputs.SyntheticTaskMonitorConf;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a ARMS Synthetic Task resource. Cloud Synthetic task resources.
 * 
 * For information about ARMS Synthetic Task and how to use it, see [What is Synthetic Task](https://next.api.alibabacloud.com/document/ARMS/2019-08-08/CreateTimingSyntheticTask).
 * 
 * &gt; **NOTE:** Available since v1.215.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.resourcemanager.ResourcemanagerFunctions;
 * import com.pulumi.alicloud.resourcemanager.inputs.GetResourceGroupsArgs;
 * import com.pulumi.alicloud.arms.SyntheticTask;
 * import com.pulumi.alicloud.arms.SyntheticTaskArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskCustomPeriodArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskAvailableAssertionArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfNetTcpArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfNetDnsArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfApiHttpArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfApiHttpRequestBodyArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfWebsiteArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfFileDownloadArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfStreamArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskMonitorConfNetIcmpArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskCommonSettingArgs;
 * import com.pulumi.alicloud.arms.inputs.SyntheticTaskCommonSettingCustomHostArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("terraform-example");
 *         final var default = ResourcemanagerFunctions.getResourceGroups();
 * 
 *         var defaultSyntheticTask = new SyntheticTask("defaultSyntheticTask", SyntheticTaskArgs.builder()
 *             .monitors(SyntheticTaskMonitorArgs.builder()
 *                 .cityCode("1200101")
 *                 .operatorCode("246")
 *                 .clientType("4")
 *                 .build())
 *             .syntheticTaskName(name)
 *             .customPeriod(SyntheticTaskCustomPeriodArgs.builder()
 *                 .endHour("12")
 *                 .startHour("11")
 *                 .build())
 *             .availableAssertions(            
 *                 SyntheticTaskAvailableAssertionArgs.builder()
 *                     .type("IcmpPackLoss")
 *                     .operator("neq")
 *                     .expect("200")
 *                     .target("example")
 *                     .build(),
 *                 SyntheticTaskAvailableAssertionArgs.builder()
 *                     .type("IcmpPackAvgLatency")
 *                     .operator("lte")
 *                     .expect("1000")
 *                     .build(),
 *                 SyntheticTaskAvailableAssertionArgs.builder()
 *                     .type("IcmpPackMaxLatency")
 *                     .operator("lte")
 *                     .expect("10000")
 *                     .build())
 *             .tags(Map.ofEntries(
 *                 Map.entry("Created", "TF"),
 *                 Map.entry("For", "example")
 *             ))
 *             .status("RUNNING")
 *             .monitorConf(SyntheticTaskMonitorConfArgs.builder()
 *                 .netTcp(SyntheticTaskMonitorConfNetTcpArgs.builder()
 *                     .tracertTimeout("1050")
 *                     .targetUrl("www.aliyun.com")
 *                     .connectTimes("6")
 *                     .interval("300")
 *                     .timeout("3000")
 *                     .tracertNumMax("2")
 *                     .build())
 *                 .netDns(SyntheticTaskMonitorConfNetDnsArgs.builder()
 *                     .queryMethod("1")
 *                     .timeout("5050")
 *                     .targetUrl("www.aliyun.com")
 *                     .dnsServerIpType("1")
 *                     .nsServer("61.128.114.167")
 *                     .build())
 *                 .apiHttp(SyntheticTaskMonitorConfApiHttpArgs.builder()
 *                     .timeout("10050")
 *                     .targetUrl("https://www.aliyun.com")
 *                     .method("POST")
 *                     .requestHeaders(Map.of("key1", "value1"))
 *                     .requestBody(SyntheticTaskMonitorConfApiHttpRequestBodyArgs.builder()
 *                         .content("example2")
 *                         .type("text/html")
 *                         .build())
 *                     .connectTimeout("6000")
 *                     .build())
 *                 .website(SyntheticTaskMonitorConfWebsiteArgs.builder()
 *                     .slowElementThreshold("5005")
 *                     .verifyStringBlacklist("Failed")
 *                     .elementBlacklist("a.jpg")
 *                     .disableCompression("1")
 *                     .ignoreCertificateError("0")
 *                     .monitorTimeout("20000")
 *                     .redirection("0")
 *                     .dnsHijackWhitelist("www.aliyun.com:203.0.3.55")
 *                     .pageTamper("www.aliyun.com:|/cc/bb/a.gif")
 *                     .flowHijackJumpTimes("10")
 *                     .customHeader("1")
 *                     .disableCache("1")
 *                     .verifyStringWhitelist("Senyuan")
 *                     .targetUrl("http://www.aliyun.com")
 *                     .automaticScrolling("1")
 *                     .waitCompletionTime("5005")
 *                     .flowHijackLogo("senyuan1")
 *                     .customHeaderContent(Map.of("key1", "value1"))
 *                     .filterInvalidIp("0")
 *                     .build())
 *                 .fileDownload(SyntheticTaskMonitorConfFileDownloadArgs.builder()
 *                     .whiteList("www.aliyun.com:203.0.3.55")
 *                     .monitorTimeout("1050")
 *                     .ignoreCertificateUntrustworthyError("0")
 *                     .redirection("0")
 *                     .ignoreCertificateCanceledError("0")
 *                     .ignoreCertificateAuthError("0")
 *                     .ignoreCertificateOutOfDateError("0")
 *                     .ignoreCertificateUsingError("0")
 *                     .connectionTimeout("6090")
 *                     .ignoreInvalidHostError("0")
 *                     .verifyWay("0")
 *                     .customHeaderContent(Map.of("key1", "value1"))
 *                     .targetUrl("https://www.aliyun.com")
 *                     .downloadKernel("0")
 *                     .quickProtocol("2")
 *                     .ignoreCertificateStatusError("1")
 *                     .transmissionSize("128")
 *                     .validateKeywords("senyuan1")
 *                     .build())
 *                 .stream(SyntheticTaskMonitorConfStreamArgs.builder()
 *                     .streamMonitorTimeout("10")
 *                     .streamAddressType("0")
 *                     .playerType("2")
 *                     .customHeaderContent(Map.of("key1", "value1"))
 *                     .whiteList("www.aliyun.com:203.0.3.55")
 *                     .targetUrl("https://acd-assets.alicdn.com:443/2021productweek/week1_s.mp4")
 *                     .streamType("1")
 *                     .build())
 *                 .netIcmp(SyntheticTaskMonitorConfNetIcmpArgs.builder()
 *                     .targetUrl("www.aliyun.com")
 *                     .interval("200")
 *                     .packageNum("36")
 *                     .packageSize("512")
 *                     .timeout("1000")
 *                     .tracertEnable("true")
 *                     .tracertNumMax("1")
 *                     .tracertTimeout("1200")
 *                     .build())
 *                 .build())
 *             .taskType("1")
 *             .frequency("1h")
 *             .monitorCategory("1")
 *             .commonSetting(SyntheticTaskCommonSettingArgs.builder()
 *                 .xtraceRegion("cn-beijing")
 *                 .customHost(SyntheticTaskCommonSettingCustomHostArgs.builder()
 *                     .hosts(                    
 *                         SyntheticTaskCommonSettingCustomHostHostArgs.builder()
 *                             .domain("www.a.aliyun.com")
 *                             .ips("153.3.238.102")
 *                             .ipType("0")
 *                             .build(),
 *                         SyntheticTaskCommonSettingCustomHostHostArgs.builder()
 *                             .domain("www.shifen.com")
 *                             .ips(                            
 *                                 "153.3.238.110",
 *                                 "114.114.114.114",
 *                                 "127.0.0.1")
 *                             .ipType("1")
 *                             .build(),
 *                         SyntheticTaskCommonSettingCustomHostHostArgs.builder()
 *                             .domain("www.aliyun.com")
 *                             .ips(                            
 *                                 "153.3.238.110",
 *                                 "180.101.50.242",
 *                                 "180.101.50.188")
 *                             .ipType("0")
 *                             .build())
 *                     .selectType("1")
 *                     .build())
 *                 .monitorSamples("1")
 *                 .ipType("1")
 *                 .isOpenTrace("true")
 *                 .traceClientType("1")
 *                 .build())
 *             .resourceGroupId(default_.ids()[0])
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ARMS Synthetic Task can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:arms/syntheticTask:SyntheticTask example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:arms/syntheticTask:SyntheticTask")
public class SyntheticTask extends com.pulumi.resources.CustomResource {
    /**
     * Assertion List. See `available_assertions` below.
     * 
     */
    @Export(name="availableAssertions", refs={List.class,SyntheticTaskAvailableAssertion.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticTaskAvailableAssertion>> availableAssertions;

    /**
     * @return Assertion List. See `available_assertions` below.
     * 
     */
    public Output<Optional<List<SyntheticTaskAvailableAssertion>>> availableAssertions() {
        return Codegen.optional(this.availableAssertions);
    }
    /**
     * Common settings. See `common_setting` below.
     * 
     */
    @Export(name="commonSetting", refs={SyntheticTaskCommonSetting.class}, tree="[0]")
    private Output<SyntheticTaskCommonSetting> commonSetting;

    /**
     * @return Common settings. See `common_setting` below.
     * 
     */
    public Output<SyntheticTaskCommonSetting> commonSetting() {
        return this.commonSetting;
    }
    /**
     * Custom Cycle. See `custom_period` below.
     * 
     */
    @Export(name="customPeriod", refs={SyntheticTaskCustomPeriod.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticTaskCustomPeriod> customPeriod;

    /**
     * @return Custom Cycle. See `custom_period` below.
     * 
     */
    public Output<Optional<SyntheticTaskCustomPeriod>> customPeriod() {
        return Codegen.optional(this.customPeriod);
    }
    /**
     * Frequency.
     * 
     */
    @Export(name="frequency", refs={String.class}, tree="[0]")
    private Output<String> frequency;

    /**
     * @return Frequency.
     * 
     */
    public Output<String> frequency() {
        return this.frequency;
    }
    /**
     * Classification of selected monitors.
     * 
     */
    @Export(name="monitorCategory", refs={Integer.class}, tree="[0]")
    private Output<Integer> monitorCategory;

    /**
     * @return Classification of selected monitors.
     * 
     */
    public Output<Integer> monitorCategory() {
        return this.monitorCategory;
    }
    /**
     * Monitoring configuration. See `monitor_conf` below.
     * 
     */
    @Export(name="monitorConf", refs={SyntheticTaskMonitorConf.class}, tree="[0]")
    private Output<SyntheticTaskMonitorConf> monitorConf;

    /**
     * @return Monitoring configuration. See `monitor_conf` below.
     * 
     */
    public Output<SyntheticTaskMonitorConf> monitorConf() {
        return this.monitorConf;
    }
    /**
     * List of selected monitors. See `monitors` below.
     * 
     */
    @Export(name="monitors", refs={List.class,SyntheticTaskMonitor.class}, tree="[0,1]")
    private Output<List<SyntheticTaskMonitor>> monitors;

    /**
     * @return List of selected monitors. See `monitors` below.
     * 
     */
    public Output<List<SyntheticTaskMonitor>> monitors() {
        return this.monitors;
    }
    /**
     * Describes which resource group the resource belongs.
     * 
     */
    @Export(name="resourceGroupId", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupId;

    /**
     * @return Describes which resource group the resource belongs.
     * 
     */
    public Output<String> resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * task status.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return task status.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The name of synthetic task.
     * 
     */
    @Export(name="syntheticTaskName", refs={String.class}, tree="[0]")
    private Output<String> syntheticTaskName;

    /**
     * @return The name of synthetic task.
     * 
     */
    public Output<String> syntheticTaskName() {
        return this.syntheticTaskName;
    }
    /**
     * The list of tags.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> tags;

    /**
     * @return The list of tags.
     * 
     */
    public Output<Optional<Map<String,Object>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The type of synthetic task.
     * 
     */
    @Export(name="taskType", refs={Integer.class}, tree="[0]")
    private Output<Integer> taskType;

    /**
     * @return The type of synthetic task.
     * 
     */
    public Output<Integer> taskType() {
        return this.taskType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SyntheticTask(String name) {
        this(name, SyntheticTaskArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SyntheticTask(String name, SyntheticTaskArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SyntheticTask(String name, SyntheticTaskArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:arms/syntheticTask:SyntheticTask", name, args == null ? SyntheticTaskArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SyntheticTask(String name, Output<String> id, @Nullable SyntheticTaskState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:arms/syntheticTask:SyntheticTask", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SyntheticTask get(String name, Output<String> id, @Nullable SyntheticTaskState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SyntheticTask(name, id, state, options);
    }
}
