// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.sls.ScheduledSqlArgs;
import com.pulumi.alicloud.sls.inputs.ScheduledSqlState;
import com.pulumi.alicloud.sls.outputs.ScheduledSqlSchedule;
import com.pulumi.alicloud.sls.outputs.ScheduledSqlScheduledSqlConfiguration;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a SLS Scheduled SQL resource. Scheduled SQL task.
 * 
 * For information about SLS Scheduled SQL and how to use it, see [What is Scheduled SQL](https://www.alibabacloud.com/help/zh/sls/developer-reference/api-sls-2020-12-30-createscheduledsql).
 * 
 * &gt; **NOTE:** Available since v1.224.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.random.integer;
 * import com.pulumi.random.integerArgs;
 * import com.pulumi.alicloud.log.Project;
 * import com.pulumi.alicloud.log.ProjectArgs;
 * import com.pulumi.alicloud.log.Store;
 * import com.pulumi.alicloud.log.StoreArgs;
 * import com.pulumi.alicloud.sls.ScheduledSql;
 * import com.pulumi.alicloud.sls.ScheduledSqlArgs;
 * import com.pulumi.alicloud.sls.inputs.ScheduledSqlScheduleArgs;
 * import com.pulumi.alicloud.sls.inputs.ScheduledSqlScheduledSqlConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("terraform-example");
 *         var default_ = new Integer("default", IntegerArgs.builder()
 *             .min(10000)
 *             .max(99999)
 *             .build());
 * 
 *         var defaultKIe4KV = new Project("defaultKIe4KV", ProjectArgs.builder()
 *             .description(String.format("%s-%s", name,default_.result()))
 *             .projectName(String.format("%s-%s", name,default_.result()))
 *             .build());
 * 
 *         var default1LI9we = new Store("default1LI9we", StoreArgs.builder()
 *             .hotTtl(8)
 *             .retentionPeriod(30)
 *             .shardCount(2)
 *             .projectName(defaultKIe4KV.projectName())
 *             .logstoreName(String.format("%s-%s", name,default_.result()))
 *             .build());
 * 
 *         var defaultScheduledSql = new ScheduledSql("defaultScheduledSql", ScheduledSqlArgs.builder()
 *             .description("example-tf-scheduled-sql-0006")
 *             .schedule(ScheduledSqlScheduleArgs.builder()
 *                 .type("Cron")
 *                 .timeZone("+0700")
 *                 .delay(20)
 *                 .cronExpression("0 0/1 * * *")
 *                 .build())
 *             .displayName("example-tf-scheduled-sql-0006")
 *             .scheduledSqlConfiguration(ScheduledSqlScheduledSqlConfigurationArgs.builder()
 *                 .script("* | select * from log")
 *                 .sqlType("searchQuery")
 *                 .destEndpoint("ap-northeast-1.log.aliyuncs.com")
 *                 .destProject("job-e2e-project-jj78kur-ap-southeast-1")
 *                 .sourceLogstore(default1LI9we.logstoreName())
 *                 .destLogstore("example-open-api02")
 *                 .roleArn("acs:ram::1395894005868720:role/aliyunlogetlrole")
 *                 .destRoleArn("acs:ram::1395894005868720:role/aliyunlogetlrole")
 *                 .fromTimeExpr("}{@literal @}{@code m-1m")
 *                 .toTimeExpr("}{@literal @}{@code m")
 *                 .maxRunTimeInSeconds(1800)
 *                 .resourcePool("enhanced")
 *                 .maxRetries(5)
 *                 .fromTime(1713196800)
 *                 .toTime(0)
 *                 .dataFormat("log2log")
 *                 .build())
 *             .scheduledSqlName(name)
 *             .project(defaultKIe4KV.projectName())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * SLS Scheduled SQL can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:sls/scheduledSql:ScheduledSql example &lt;project&gt;:&lt;scheduled_sql_name&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:sls/scheduledSql:ScheduledSql")
public class ScheduledSql extends com.pulumi.resources.CustomResource {
    /**
     * Task Description.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Task Description.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Task Display Name.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return Task Display Name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Log project.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return Log project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The scheduling type is generally not required by default. If there is a strong timing requirement, if it must be imported every Monday at 8 o&#39;clock, cron can be used. See `schedule` below.
     * 
     */
    @Export(name="schedule", refs={ScheduledSqlSchedule.class}, tree="[0]")
    private Output<ScheduledSqlSchedule> schedule;

    /**
     * @return The scheduling type is generally not required by default. If there is a strong timing requirement, if it must be imported every Monday at 8 o&#39;clock, cron can be used. See `schedule` below.
     * 
     */
    public Output<ScheduledSqlSchedule> schedule() {
        return this.schedule;
    }
    /**
     * Task Configuration. See `scheduled_sql_configuration` below.
     * 
     */
    @Export(name="scheduledSqlConfiguration", refs={ScheduledSqlScheduledSqlConfiguration.class}, tree="[0]")
    private Output<ScheduledSqlScheduledSqlConfiguration> scheduledSqlConfiguration;

    /**
     * @return Task Configuration. See `scheduled_sql_configuration` below.
     * 
     */
    public Output<ScheduledSqlScheduledSqlConfiguration> scheduledSqlConfiguration() {
        return this.scheduledSqlConfiguration;
    }
    /**
     * Timed SQL name.
     * 
     */
    @Export(name="scheduledSqlName", refs={String.class}, tree="[0]")
    private Output<String> scheduledSqlName;

    /**
     * @return Timed SQL name.
     * 
     */
    public Output<String> scheduledSqlName() {
        return this.scheduledSqlName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ScheduledSql(java.lang.String name) {
        this(name, ScheduledSqlArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ScheduledSql(java.lang.String name, ScheduledSqlArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ScheduledSql(java.lang.String name, ScheduledSqlArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:sls/scheduledSql:ScheduledSql", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ScheduledSql(java.lang.String name, Output<java.lang.String> id, @Nullable ScheduledSqlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:sls/scheduledSql:ScheduledSql", name, state, makeResourceOptions(options, id), false);
    }

    private static ScheduledSqlArgs makeArgs(ScheduledSqlArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ScheduledSqlArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ScheduledSql get(java.lang.String name, Output<java.lang.String> id, @Nullable ScheduledSqlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ScheduledSql(name, id, state, options);
    }
}
