// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerMonitor {
    /**
     * @return The number of consecutive failed health checks before the backend is considered down, for example, 5.
     * 
     */
    private @Nullable Integer consecutiveDown;
    /**
     * @return The number of consecutive successful probes required to consider the target as up, e.g., 3.
     * 
     */
    private @Nullable Integer consecutiveUp;
    /**
     * @return Expected status code, such as 200,202, successful HTTP response.
     * 
     */
    private @Nullable String expectedCodes;
    /**
     * @return Whether to follow the redirect.
     * 
     */
    private @Nullable Boolean followRedirects;
    /**
     * @return The HTTP headers to be included in the health check request.
     * 
     */
    private @Nullable String header;
    /**
     * @return The monitoring interval, such as 60 seconds, checks the frequency.
     * 
     */
    private @Nullable Integer interval;
    /**
     * @return Monitor request methods, such as GET, methods in the HTTP protocol.
     * 
     */
    private @Nullable String method;
    /**
     * @return Probe Point Region, default to Global
     * - `Global`: Global.
     * - `ChineseMainland`: Chinese mainland.
     * - `OutsideChineseMainland`: Global (excluding the Chinese mainland).
     * 
     */
    private @Nullable String monitoringRegion;
    /**
     * @return The monitor checks the path, such as/healthcheck, the HTTP request path.
     * 
     */
    private @Nullable String path;
    /**
     * @return The target port.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return The timeout for the health check, in seconds. The value range is 1-10.
     * 
     */
    private @Nullable Integer timeout;
    /**
     * @return The type of monitor protocol, such as HTTP, used for health checks. When the value is off, it indicates that no check is performed.
     * 
     */
    private @Nullable String type;

    private LoadBalancerMonitor() {}
    /**
     * @return The number of consecutive failed health checks before the backend is considered down, for example, 5.
     * 
     */
    public Optional<Integer> consecutiveDown() {
        return Optional.ofNullable(this.consecutiveDown);
    }
    /**
     * @return The number of consecutive successful probes required to consider the target as up, e.g., 3.
     * 
     */
    public Optional<Integer> consecutiveUp() {
        return Optional.ofNullable(this.consecutiveUp);
    }
    /**
     * @return Expected status code, such as 200,202, successful HTTP response.
     * 
     */
    public Optional<String> expectedCodes() {
        return Optional.ofNullable(this.expectedCodes);
    }
    /**
     * @return Whether to follow the redirect.
     * 
     */
    public Optional<Boolean> followRedirects() {
        return Optional.ofNullable(this.followRedirects);
    }
    /**
     * @return The HTTP headers to be included in the health check request.
     * 
     */
    public Optional<String> header() {
        return Optional.ofNullable(this.header);
    }
    /**
     * @return The monitoring interval, such as 60 seconds, checks the frequency.
     * 
     */
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return Monitor request methods, such as GET, methods in the HTTP protocol.
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }
    /**
     * @return Probe Point Region, default to Global
     * - `Global`: Global.
     * - `ChineseMainland`: Chinese mainland.
     * - `OutsideChineseMainland`: Global (excluding the Chinese mainland).
     * 
     */
    public Optional<String> monitoringRegion() {
        return Optional.ofNullable(this.monitoringRegion);
    }
    /**
     * @return The monitor checks the path, such as/healthcheck, the HTTP request path.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return The target port.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The timeout for the health check, in seconds. The value range is 1-10.
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return The type of monitor protocol, such as HTTP, used for health checks. When the value is off, it indicates that no check is performed.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerMonitor defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer consecutiveDown;
        private @Nullable Integer consecutiveUp;
        private @Nullable String expectedCodes;
        private @Nullable Boolean followRedirects;
        private @Nullable String header;
        private @Nullable Integer interval;
        private @Nullable String method;
        private @Nullable String monitoringRegion;
        private @Nullable String path;
        private @Nullable Integer port;
        private @Nullable Integer timeout;
        private @Nullable String type;
        public Builder() {}
        public Builder(LoadBalancerMonitor defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consecutiveDown = defaults.consecutiveDown;
    	      this.consecutiveUp = defaults.consecutiveUp;
    	      this.expectedCodes = defaults.expectedCodes;
    	      this.followRedirects = defaults.followRedirects;
    	      this.header = defaults.header;
    	      this.interval = defaults.interval;
    	      this.method = defaults.method;
    	      this.monitoringRegion = defaults.monitoringRegion;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.timeout = defaults.timeout;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder consecutiveDown(@Nullable Integer consecutiveDown) {

            this.consecutiveDown = consecutiveDown;
            return this;
        }
        @CustomType.Setter
        public Builder consecutiveUp(@Nullable Integer consecutiveUp) {

            this.consecutiveUp = consecutiveUp;
            return this;
        }
        @CustomType.Setter
        public Builder expectedCodes(@Nullable String expectedCodes) {

            this.expectedCodes = expectedCodes;
            return this;
        }
        @CustomType.Setter
        public Builder followRedirects(@Nullable Boolean followRedirects) {

            this.followRedirects = followRedirects;
            return this;
        }
        @CustomType.Setter
        public Builder header(@Nullable String header) {

            this.header = header;
            return this;
        }
        @CustomType.Setter
        public Builder interval(@Nullable Integer interval) {

            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder method(@Nullable String method) {

            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder monitoringRegion(@Nullable String monitoringRegion) {

            this.monitoringRegion = monitoringRegion;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public LoadBalancerMonitor build() {
            final var _resultValue = new LoadBalancerMonitor();
            _resultValue.consecutiveDown = consecutiveDown;
            _resultValue.consecutiveUp = consecutiveUp;
            _resultValue.expectedCodes = expectedCodes;
            _resultValue.followRedirects = followRedirects;
            _resultValue.header = header;
            _resultValue.interval = interval;
            _resultValue.method = method;
            _resultValue.monitoringRegion = monitoringRegion;
            _resultValue.path = path;
            _resultValue.port = port;
            _resultValue.timeout = timeout;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
