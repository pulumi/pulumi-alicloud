// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.outputs;

import com.pulumi.alicloud.cms.outputs.GetHybridMonitorSlsTasksTaskAttachLabel;
import com.pulumi.alicloud.cms.outputs.GetHybridMonitorSlsTasksTaskMatchExpress;
import com.pulumi.alicloud.cms.outputs.GetHybridMonitorSlsTasksTaskSlsProcessConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetHybridMonitorSlsTasksTask {
    /**
     * @return The tags of the metric import task.
     * 
     */
    private List<GetHybridMonitorSlsTasksTaskAttachLabel> attachLabels;
    /**
     * @return The interval between the cloud monitoring plug-in collecting host monitoring data.
     * 
     */
    private Integer collectInterval;
    /**
     * @return The address where the cloudmonitor Plug-In collects the monitoring data of the host.
     * 
     */
    private String collectTargetEndpoint;
    /**
     * @return When the cloud monitor Agent collects, the relative path of the collection.
     * 
     */
    private String collectTargetPath;
    /**
     * @return The type of the monitoring data. Valid values: Spring, Tomcat, Nginx, Tengine, JVM, Redis, MySQL, and AWS.
     * 
     */
    private String collectTargetType;
    /**
     * @return The timeout period for the cloudmonitor plug-in to collect host monitoring data.
     * 
     */
    private Integer collectTimout;
    /**
     * @return Create the timestamp of the monitoring task. Unit: milliseconds.
     * 
     */
    private String createTime;
    /**
     * @return Monitoring task description.
     * 
     */
    private String description;
    /**
     * @return Additional information for the instance.
     * 
     */
    private String extraInfo;
    /**
     * @return The ID of the application Group.
     * 
     */
    private String groupId;
    /**
     * @return The ID of the monitoring task.
     * 
     */
    private String hybridMonitorSlsTaskId;
    /**
     * @return The ID of the Hybrid Monitor Sls Task.
     * 
     */
    private String id;
    /**
     * @return A list of instances where monitoring data is collected in batches.
     * 
     */
    private List<String> instances;
    /**
     * @return The path where on-premises log data is stored. On-premises log data is stored in the specified path of the host where CloudMonitor is deployed.
     * 
     */
    private String logFilePath;
    /**
     * @return Local Log Monitoring and calculation method.
     * 
     */
    private String logProcess;
    /**
     * @return The sample on-premises log.
     * 
     */
    private String logSample;
    /**
     * @return The local log data is divided according to different matching patterns.
     * 
     */
    private String logSplit;
    /**
     * @return The filter condition of the instance of the monitoring task.
     * 
     */
    private String matchExpressRelation;
    /**
     * @return The matching condition of the instance in the application Group.
     * 
     */
    private List<GetHybridMonitorSlsTasksTaskMatchExpress> matchExpresses;
    /**
     * @return The namespace to which the host belongs.
     * 
     */
    private String namespace;
    /**
     * @return The network type of the host.
     * 
     */
    private String networkType;
    /**
     * @return The configurations of the logs that are imported from Log Service.
     * 
     */
    private String slsProcess;
    /**
     * @return The configurations of the logs that are imported from Log Service.
     * 
     */
    private List<GetHybridMonitorSlsTasksTaskSlsProcessConfig> slsProcessConfigs;
    /**
     * @return The name of the metric import task.
     * 
     */
    private String taskName;
    /**
     * @return Monitoring Task type.
     * 
     */
    private String taskType;
    /**
     * @return The region where the host resides.
     * 
     */
    private String uploadRegion;
    private String yarmConfig;

    private GetHybridMonitorSlsTasksTask() {}
    /**
     * @return The tags of the metric import task.
     * 
     */
    public List<GetHybridMonitorSlsTasksTaskAttachLabel> attachLabels() {
        return this.attachLabels;
    }
    /**
     * @return The interval between the cloud monitoring plug-in collecting host monitoring data.
     * 
     */
    public Integer collectInterval() {
        return this.collectInterval;
    }
    /**
     * @return The address where the cloudmonitor Plug-In collects the monitoring data of the host.
     * 
     */
    public String collectTargetEndpoint() {
        return this.collectTargetEndpoint;
    }
    /**
     * @return When the cloud monitor Agent collects, the relative path of the collection.
     * 
     */
    public String collectTargetPath() {
        return this.collectTargetPath;
    }
    /**
     * @return The type of the monitoring data. Valid values: Spring, Tomcat, Nginx, Tengine, JVM, Redis, MySQL, and AWS.
     * 
     */
    public String collectTargetType() {
        return this.collectTargetType;
    }
    /**
     * @return The timeout period for the cloudmonitor plug-in to collect host monitoring data.
     * 
     */
    public Integer collectTimout() {
        return this.collectTimout;
    }
    /**
     * @return Create the timestamp of the monitoring task. Unit: milliseconds.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Monitoring task description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Additional information for the instance.
     * 
     */
    public String extraInfo() {
        return this.extraInfo;
    }
    /**
     * @return The ID of the application Group.
     * 
     */
    public String groupId() {
        return this.groupId;
    }
    /**
     * @return The ID of the monitoring task.
     * 
     */
    public String hybridMonitorSlsTaskId() {
        return this.hybridMonitorSlsTaskId;
    }
    /**
     * @return The ID of the Hybrid Monitor Sls Task.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of instances where monitoring data is collected in batches.
     * 
     */
    public List<String> instances() {
        return this.instances;
    }
    /**
     * @return The path where on-premises log data is stored. On-premises log data is stored in the specified path of the host where CloudMonitor is deployed.
     * 
     */
    public String logFilePath() {
        return this.logFilePath;
    }
    /**
     * @return Local Log Monitoring and calculation method.
     * 
     */
    public String logProcess() {
        return this.logProcess;
    }
    /**
     * @return The sample on-premises log.
     * 
     */
    public String logSample() {
        return this.logSample;
    }
    /**
     * @return The local log data is divided according to different matching patterns.
     * 
     */
    public String logSplit() {
        return this.logSplit;
    }
    /**
     * @return The filter condition of the instance of the monitoring task.
     * 
     */
    public String matchExpressRelation() {
        return this.matchExpressRelation;
    }
    /**
     * @return The matching condition of the instance in the application Group.
     * 
     */
    public List<GetHybridMonitorSlsTasksTaskMatchExpress> matchExpresses() {
        return this.matchExpresses;
    }
    /**
     * @return The namespace to which the host belongs.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The network type of the host.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return The configurations of the logs that are imported from Log Service.
     * 
     */
    public String slsProcess() {
        return this.slsProcess;
    }
    /**
     * @return The configurations of the logs that are imported from Log Service.
     * 
     */
    public List<GetHybridMonitorSlsTasksTaskSlsProcessConfig> slsProcessConfigs() {
        return this.slsProcessConfigs;
    }
    /**
     * @return The name of the metric import task.
     * 
     */
    public String taskName() {
        return this.taskName;
    }
    /**
     * @return Monitoring Task type.
     * 
     */
    public String taskType() {
        return this.taskType;
    }
    /**
     * @return The region where the host resides.
     * 
     */
    public String uploadRegion() {
        return this.uploadRegion;
    }
    public String yarmConfig() {
        return this.yarmConfig;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHybridMonitorSlsTasksTask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetHybridMonitorSlsTasksTaskAttachLabel> attachLabels;
        private Integer collectInterval;
        private String collectTargetEndpoint;
        private String collectTargetPath;
        private String collectTargetType;
        private Integer collectTimout;
        private String createTime;
        private String description;
        private String extraInfo;
        private String groupId;
        private String hybridMonitorSlsTaskId;
        private String id;
        private List<String> instances;
        private String logFilePath;
        private String logProcess;
        private String logSample;
        private String logSplit;
        private String matchExpressRelation;
        private List<GetHybridMonitorSlsTasksTaskMatchExpress> matchExpresses;
        private String namespace;
        private String networkType;
        private String slsProcess;
        private List<GetHybridMonitorSlsTasksTaskSlsProcessConfig> slsProcessConfigs;
        private String taskName;
        private String taskType;
        private String uploadRegion;
        private String yarmConfig;
        public Builder() {}
        public Builder(GetHybridMonitorSlsTasksTask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachLabels = defaults.attachLabels;
    	      this.collectInterval = defaults.collectInterval;
    	      this.collectTargetEndpoint = defaults.collectTargetEndpoint;
    	      this.collectTargetPath = defaults.collectTargetPath;
    	      this.collectTargetType = defaults.collectTargetType;
    	      this.collectTimout = defaults.collectTimout;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.extraInfo = defaults.extraInfo;
    	      this.groupId = defaults.groupId;
    	      this.hybridMonitorSlsTaskId = defaults.hybridMonitorSlsTaskId;
    	      this.id = defaults.id;
    	      this.instances = defaults.instances;
    	      this.logFilePath = defaults.logFilePath;
    	      this.logProcess = defaults.logProcess;
    	      this.logSample = defaults.logSample;
    	      this.logSplit = defaults.logSplit;
    	      this.matchExpressRelation = defaults.matchExpressRelation;
    	      this.matchExpresses = defaults.matchExpresses;
    	      this.namespace = defaults.namespace;
    	      this.networkType = defaults.networkType;
    	      this.slsProcess = defaults.slsProcess;
    	      this.slsProcessConfigs = defaults.slsProcessConfigs;
    	      this.taskName = defaults.taskName;
    	      this.taskType = defaults.taskType;
    	      this.uploadRegion = defaults.uploadRegion;
    	      this.yarmConfig = defaults.yarmConfig;
        }

        @CustomType.Setter
        public Builder attachLabels(List<GetHybridMonitorSlsTasksTaskAttachLabel> attachLabels) {
            if (attachLabels == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "attachLabels");
            }
            this.attachLabels = attachLabels;
            return this;
        }
        public Builder attachLabels(GetHybridMonitorSlsTasksTaskAttachLabel... attachLabels) {
            return attachLabels(List.of(attachLabels));
        }
        @CustomType.Setter
        public Builder collectInterval(Integer collectInterval) {
            if (collectInterval == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "collectInterval");
            }
            this.collectInterval = collectInterval;
            return this;
        }
        @CustomType.Setter
        public Builder collectTargetEndpoint(String collectTargetEndpoint) {
            if (collectTargetEndpoint == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "collectTargetEndpoint");
            }
            this.collectTargetEndpoint = collectTargetEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder collectTargetPath(String collectTargetPath) {
            if (collectTargetPath == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "collectTargetPath");
            }
            this.collectTargetPath = collectTargetPath;
            return this;
        }
        @CustomType.Setter
        public Builder collectTargetType(String collectTargetType) {
            if (collectTargetType == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "collectTargetType");
            }
            this.collectTargetType = collectTargetType;
            return this;
        }
        @CustomType.Setter
        public Builder collectTimout(Integer collectTimout) {
            if (collectTimout == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "collectTimout");
            }
            this.collectTimout = collectTimout;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder extraInfo(String extraInfo) {
            if (extraInfo == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "extraInfo");
            }
            this.extraInfo = extraInfo;
            return this;
        }
        @CustomType.Setter
        public Builder groupId(String groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder hybridMonitorSlsTaskId(String hybridMonitorSlsTaskId) {
            if (hybridMonitorSlsTaskId == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "hybridMonitorSlsTaskId");
            }
            this.hybridMonitorSlsTaskId = hybridMonitorSlsTaskId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instances(List<String> instances) {
            if (instances == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "instances");
            }
            this.instances = instances;
            return this;
        }
        public Builder instances(String... instances) {
            return instances(List.of(instances));
        }
        @CustomType.Setter
        public Builder logFilePath(String logFilePath) {
            if (logFilePath == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "logFilePath");
            }
            this.logFilePath = logFilePath;
            return this;
        }
        @CustomType.Setter
        public Builder logProcess(String logProcess) {
            if (logProcess == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "logProcess");
            }
            this.logProcess = logProcess;
            return this;
        }
        @CustomType.Setter
        public Builder logSample(String logSample) {
            if (logSample == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "logSample");
            }
            this.logSample = logSample;
            return this;
        }
        @CustomType.Setter
        public Builder logSplit(String logSplit) {
            if (logSplit == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "logSplit");
            }
            this.logSplit = logSplit;
            return this;
        }
        @CustomType.Setter
        public Builder matchExpressRelation(String matchExpressRelation) {
            if (matchExpressRelation == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "matchExpressRelation");
            }
            this.matchExpressRelation = matchExpressRelation;
            return this;
        }
        @CustomType.Setter
        public Builder matchExpresses(List<GetHybridMonitorSlsTasksTaskMatchExpress> matchExpresses) {
            if (matchExpresses == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "matchExpresses");
            }
            this.matchExpresses = matchExpresses;
            return this;
        }
        public Builder matchExpresses(GetHybridMonitorSlsTasksTaskMatchExpress... matchExpresses) {
            return matchExpresses(List.of(matchExpresses));
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            if (networkType == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "networkType");
            }
            this.networkType = networkType;
            return this;
        }
        @CustomType.Setter
        public Builder slsProcess(String slsProcess) {
            if (slsProcess == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "slsProcess");
            }
            this.slsProcess = slsProcess;
            return this;
        }
        @CustomType.Setter
        public Builder slsProcessConfigs(List<GetHybridMonitorSlsTasksTaskSlsProcessConfig> slsProcessConfigs) {
            if (slsProcessConfigs == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "slsProcessConfigs");
            }
            this.slsProcessConfigs = slsProcessConfigs;
            return this;
        }
        public Builder slsProcessConfigs(GetHybridMonitorSlsTasksTaskSlsProcessConfig... slsProcessConfigs) {
            return slsProcessConfigs(List.of(slsProcessConfigs));
        }
        @CustomType.Setter
        public Builder taskName(String taskName) {
            if (taskName == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "taskName");
            }
            this.taskName = taskName;
            return this;
        }
        @CustomType.Setter
        public Builder taskType(String taskType) {
            if (taskType == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "taskType");
            }
            this.taskType = taskType;
            return this;
        }
        @CustomType.Setter
        public Builder uploadRegion(String uploadRegion) {
            if (uploadRegion == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "uploadRegion");
            }
            this.uploadRegion = uploadRegion;
            return this;
        }
        @CustomType.Setter
        public Builder yarmConfig(String yarmConfig) {
            if (yarmConfig == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTask", "yarmConfig");
            }
            this.yarmConfig = yarmConfig;
            return this;
        }
        public GetHybridMonitorSlsTasksTask build() {
            final var _resultValue = new GetHybridMonitorSlsTasksTask();
            _resultValue.attachLabels = attachLabels;
            _resultValue.collectInterval = collectInterval;
            _resultValue.collectTargetEndpoint = collectTargetEndpoint;
            _resultValue.collectTargetPath = collectTargetPath;
            _resultValue.collectTargetType = collectTargetType;
            _resultValue.collectTimout = collectTimout;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.extraInfo = extraInfo;
            _resultValue.groupId = groupId;
            _resultValue.hybridMonitorSlsTaskId = hybridMonitorSlsTaskId;
            _resultValue.id = id;
            _resultValue.instances = instances;
            _resultValue.logFilePath = logFilePath;
            _resultValue.logProcess = logProcess;
            _resultValue.logSample = logSample;
            _resultValue.logSplit = logSplit;
            _resultValue.matchExpressRelation = matchExpressRelation;
            _resultValue.matchExpresses = matchExpresses;
            _resultValue.namespace = namespace;
            _resultValue.networkType = networkType;
            _resultValue.slsProcess = slsProcess;
            _resultValue.slsProcessConfigs = slsProcessConfigs;
            _resultValue.taskName = taskName;
            _resultValue.taskType = taskType;
            _resultValue.uploadRegion = uploadRegion;
            _resultValue.yarmConfig = yarmConfig;
            return _resultValue;
        }
    }
}
