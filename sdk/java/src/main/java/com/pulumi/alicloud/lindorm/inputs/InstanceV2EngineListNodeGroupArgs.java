// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.lindorm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceV2EngineListNodeGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceV2EngineListNodeGroupArgs Empty = new InstanceV2EngineListNodeGroupArgs();

    /**
     * Node Type
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Node Type
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * Number of CPU cores
     * 
     */
    @Import(name="cpuCoreCount")
    private @Nullable Output<Integer> cpuCoreCount;

    /**
     * @return Number of CPU cores
     * 
     */
    public Optional<Output<Integer>> cpuCoreCount() {
        return Optional.ofNullable(this.cpuCoreCount);
    }

    /**
     * Whether to mount  local cloud disks
     * 
     */
    @Import(name="enableAttachLocalDisk")
    private @Nullable Output<Boolean> enableAttachLocalDisk;

    /**
     * @return Whether to mount  local cloud disks
     * 
     */
    public Optional<Output<Boolean>> enableAttachLocalDisk() {
        return Optional.ofNullable(this.enableAttachLocalDisk);
    }

    /**
     * Node memory size
     * 
     */
    @Import(name="memorySizeGiB")
    private @Nullable Output<Integer> memorySizeGiB;

    /**
     * @return Node memory size
     * 
     */
    public Optional<Output<Integer>> memorySizeGiB() {
        return Optional.ofNullable(this.memorySizeGiB);
    }

    /**
     * Number of nodes
     * 
     */
    @Import(name="nodeCount", required=true)
    private Output<Integer> nodeCount;

    /**
     * @return Number of nodes
     * 
     */
    public Output<Integer> nodeCount() {
        return this.nodeCount;
    }

    /**
     * Local cloud disk storage capacity
     * 
     */
    @Import(name="nodeDiskSize")
    private @Nullable Output<Integer> nodeDiskSize;

    /**
     * @return Local cloud disk storage capacity
     * 
     */
    public Optional<Output<Integer>> nodeDiskSize() {
        return Optional.ofNullable(this.nodeDiskSize);
    }

    /**
     * Node Disk Type
     * 
     */
    @Import(name="nodeDiskType")
    private @Nullable Output<String> nodeDiskType;

    /**
     * @return Node Disk Type
     * 
     */
    public Optional<Output<String>> nodeDiskType() {
        return Optional.ofNullable(this.nodeDiskType);
    }

    /**
     * Node Specifications
     * 
     */
    @Import(name="nodeSpec", required=true)
    private Output<String> nodeSpec;

    /**
     * @return Node Specifications
     * 
     */
    public Output<String> nodeSpec() {
        return this.nodeSpec;
    }

    /**
     * Resource group name
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Resource group name
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Spec Id
     * 
     */
    @Import(name="specId")
    private @Nullable Output<String> specId;

    /**
     * @return Spec Id
     * 
     */
    public Optional<Output<String>> specId() {
        return Optional.ofNullable(this.specId);
    }

    /**
     * Node Status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Node Status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private InstanceV2EngineListNodeGroupArgs() {}

    private InstanceV2EngineListNodeGroupArgs(InstanceV2EngineListNodeGroupArgs $) {
        this.category = $.category;
        this.cpuCoreCount = $.cpuCoreCount;
        this.enableAttachLocalDisk = $.enableAttachLocalDisk;
        this.memorySizeGiB = $.memorySizeGiB;
        this.nodeCount = $.nodeCount;
        this.nodeDiskSize = $.nodeDiskSize;
        this.nodeDiskType = $.nodeDiskType;
        this.nodeSpec = $.nodeSpec;
        this.resourceGroupName = $.resourceGroupName;
        this.specId = $.specId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceV2EngineListNodeGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceV2EngineListNodeGroupArgs $;

        public Builder() {
            $ = new InstanceV2EngineListNodeGroupArgs();
        }

        public Builder(InstanceV2EngineListNodeGroupArgs defaults) {
            $ = new InstanceV2EngineListNodeGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category Node Type
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Node Type
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param cpuCoreCount Number of CPU cores
         * 
         * @return builder
         * 
         */
        public Builder cpuCoreCount(@Nullable Output<Integer> cpuCoreCount) {
            $.cpuCoreCount = cpuCoreCount;
            return this;
        }

        /**
         * @param cpuCoreCount Number of CPU cores
         * 
         * @return builder
         * 
         */
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            return cpuCoreCount(Output.of(cpuCoreCount));
        }

        /**
         * @param enableAttachLocalDisk Whether to mount  local cloud disks
         * 
         * @return builder
         * 
         */
        public Builder enableAttachLocalDisk(@Nullable Output<Boolean> enableAttachLocalDisk) {
            $.enableAttachLocalDisk = enableAttachLocalDisk;
            return this;
        }

        /**
         * @param enableAttachLocalDisk Whether to mount  local cloud disks
         * 
         * @return builder
         * 
         */
        public Builder enableAttachLocalDisk(Boolean enableAttachLocalDisk) {
            return enableAttachLocalDisk(Output.of(enableAttachLocalDisk));
        }

        /**
         * @param memorySizeGiB Node memory size
         * 
         * @return builder
         * 
         */
        public Builder memorySizeGiB(@Nullable Output<Integer> memorySizeGiB) {
            $.memorySizeGiB = memorySizeGiB;
            return this;
        }

        /**
         * @param memorySizeGiB Node memory size
         * 
         * @return builder
         * 
         */
        public Builder memorySizeGiB(Integer memorySizeGiB) {
            return memorySizeGiB(Output.of(memorySizeGiB));
        }

        /**
         * @param nodeCount Number of nodes
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount Number of nodes
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param nodeDiskSize Local cloud disk storage capacity
         * 
         * @return builder
         * 
         */
        public Builder nodeDiskSize(@Nullable Output<Integer> nodeDiskSize) {
            $.nodeDiskSize = nodeDiskSize;
            return this;
        }

        /**
         * @param nodeDiskSize Local cloud disk storage capacity
         * 
         * @return builder
         * 
         */
        public Builder nodeDiskSize(Integer nodeDiskSize) {
            return nodeDiskSize(Output.of(nodeDiskSize));
        }

        /**
         * @param nodeDiskType Node Disk Type
         * 
         * @return builder
         * 
         */
        public Builder nodeDiskType(@Nullable Output<String> nodeDiskType) {
            $.nodeDiskType = nodeDiskType;
            return this;
        }

        /**
         * @param nodeDiskType Node Disk Type
         * 
         * @return builder
         * 
         */
        public Builder nodeDiskType(String nodeDiskType) {
            return nodeDiskType(Output.of(nodeDiskType));
        }

        /**
         * @param nodeSpec Node Specifications
         * 
         * @return builder
         * 
         */
        public Builder nodeSpec(Output<String> nodeSpec) {
            $.nodeSpec = nodeSpec;
            return this;
        }

        /**
         * @param nodeSpec Node Specifications
         * 
         * @return builder
         * 
         */
        public Builder nodeSpec(String nodeSpec) {
            return nodeSpec(Output.of(nodeSpec));
        }

        /**
         * @param resourceGroupName Resource group name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Resource group name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param specId Spec Id
         * 
         * @return builder
         * 
         */
        public Builder specId(@Nullable Output<String> specId) {
            $.specId = specId;
            return this;
        }

        /**
         * @param specId Spec Id
         * 
         * @return builder
         * 
         */
        public Builder specId(String specId) {
            return specId(Output.of(specId));
        }

        /**
         * @param status Node Status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Node Status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public InstanceV2EngineListNodeGroupArgs build() {
            if ($.nodeCount == null) {
                throw new MissingRequiredPropertyException("InstanceV2EngineListNodeGroupArgs", "nodeCount");
            }
            if ($.nodeSpec == null) {
                throw new MissingRequiredPropertyException("InstanceV2EngineListNodeGroupArgs", "nodeSpec");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("InstanceV2EngineListNodeGroupArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
