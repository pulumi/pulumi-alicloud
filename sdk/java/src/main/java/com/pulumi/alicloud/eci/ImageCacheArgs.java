// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eci;

import com.pulumi.alicloud.eci.inputs.ImageCacheImageRegistryCredentialArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageCacheArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageCacheArgs Empty = new ImageCacheArgs();

    /**
     * The instance ID of the Elastic IP Address (EIP). If you want to pull images from the Internet, you must specify an EIP to make sure that the container group can access the Internet. You can also configure the network address translation (NAT) gateway. We recommend that you configure the NAT gateway for the Internet access. Refer to [Public Network Access Method](https://help.aliyun.com/document_detail/99146.html)
     * 
     */
    @Import(name="eipInstanceId")
    private @Nullable Output<String> eipInstanceId;

    /**
     * @return The instance ID of the Elastic IP Address (EIP). If you want to pull images from the Internet, you must specify an EIP to make sure that the container group can access the Internet. You can also configure the network address translation (NAT) gateway. We recommend that you configure the NAT gateway for the Internet access. Refer to [Public Network Access Method](https://help.aliyun.com/document_detail/99146.html)
     * 
     */
    public Optional<Output<String>> eipInstanceId() {
        return Optional.ofNullable(this.eipInstanceId);
    }

    /**
     * The name of the image cache.
     * 
     */
    @Import(name="imageCacheName", required=true)
    private Output<String> imageCacheName;

    /**
     * @return The name of the image cache.
     * 
     */
    public Output<String> imageCacheName() {
        return this.imageCacheName;
    }

    /**
     * The size of the image cache. Default to `20`. Unit: GiB.
     * 
     */
    @Import(name="imageCacheSize")
    private @Nullable Output<Integer> imageCacheSize;

    /**
     * @return The size of the image cache. Default to `20`. Unit: GiB.
     * 
     */
    public Optional<Output<Integer>> imageCacheSize() {
        return Optional.ofNullable(this.imageCacheSize);
    }

    /**
     * The Image Registry parameters about the image to be cached. See `image_registry_credential` below.
     * 
     */
    @Import(name="imageRegistryCredentials")
    private @Nullable Output<List<ImageCacheImageRegistryCredentialArgs>> imageRegistryCredentials;

    /**
     * @return The Image Registry parameters about the image to be cached. See `image_registry_credential` below.
     * 
     */
    public Optional<Output<List<ImageCacheImageRegistryCredentialArgs>>> imageRegistryCredentials() {
        return Optional.ofNullable(this.imageRegistryCredentials);
    }

    /**
     * The images to be cached. The image name must be versioned.
     * 
     */
    @Import(name="images", required=true)
    private Output<List<String>> images;

    /**
     * @return The images to be cached. The image name must be versioned.
     * 
     */
    public Output<List<String>> images() {
        return this.images;
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The retention days of the image cache. Once the image cache expires, it will be cleared. By default, the image cache never expires. Note: The image cache that fails to be created is retained for only one day.
     * 
     */
    @Import(name="retentionDays")
    private @Nullable Output<Integer> retentionDays;

    /**
     * @return The retention days of the image cache. Once the image cache expires, it will be cleared. By default, the image cache never expires. Note: The image cache that fails to be created is retained for only one day.
     * 
     */
    public Optional<Output<Integer>> retentionDays() {
        return Optional.ofNullable(this.retentionDays);
    }

    /**
     * The ID of the security group. You do not need to specify the same security group as the container group.
     * 
     */
    @Import(name="securityGroupId", required=true)
    private Output<String> securityGroupId;

    /**
     * @return The ID of the security group. You do not need to specify the same security group as the container group.
     * 
     */
    public Output<String> securityGroupId() {
        return this.securityGroupId;
    }

    /**
     * The ID of the VSwitch. You do not need to specify the same VSwitch as the container group.
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return The ID of the VSwitch. You do not need to specify the same VSwitch as the container group.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    /**
     * The zone id to cache image.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone id to cache image.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private ImageCacheArgs() {}

    private ImageCacheArgs(ImageCacheArgs $) {
        this.eipInstanceId = $.eipInstanceId;
        this.imageCacheName = $.imageCacheName;
        this.imageCacheSize = $.imageCacheSize;
        this.imageRegistryCredentials = $.imageRegistryCredentials;
        this.images = $.images;
        this.resourceGroupId = $.resourceGroupId;
        this.retentionDays = $.retentionDays;
        this.securityGroupId = $.securityGroupId;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageCacheArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageCacheArgs $;

        public Builder() {
            $ = new ImageCacheArgs();
        }

        public Builder(ImageCacheArgs defaults) {
            $ = new ImageCacheArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eipInstanceId The instance ID of the Elastic IP Address (EIP). If you want to pull images from the Internet, you must specify an EIP to make sure that the container group can access the Internet. You can also configure the network address translation (NAT) gateway. We recommend that you configure the NAT gateway for the Internet access. Refer to [Public Network Access Method](https://help.aliyun.com/document_detail/99146.html)
         * 
         * @return builder
         * 
         */
        public Builder eipInstanceId(@Nullable Output<String> eipInstanceId) {
            $.eipInstanceId = eipInstanceId;
            return this;
        }

        /**
         * @param eipInstanceId The instance ID of the Elastic IP Address (EIP). If you want to pull images from the Internet, you must specify an EIP to make sure that the container group can access the Internet. You can also configure the network address translation (NAT) gateway. We recommend that you configure the NAT gateway for the Internet access. Refer to [Public Network Access Method](https://help.aliyun.com/document_detail/99146.html)
         * 
         * @return builder
         * 
         */
        public Builder eipInstanceId(String eipInstanceId) {
            return eipInstanceId(Output.of(eipInstanceId));
        }

        /**
         * @param imageCacheName The name of the image cache.
         * 
         * @return builder
         * 
         */
        public Builder imageCacheName(Output<String> imageCacheName) {
            $.imageCacheName = imageCacheName;
            return this;
        }

        /**
         * @param imageCacheName The name of the image cache.
         * 
         * @return builder
         * 
         */
        public Builder imageCacheName(String imageCacheName) {
            return imageCacheName(Output.of(imageCacheName));
        }

        /**
         * @param imageCacheSize The size of the image cache. Default to `20`. Unit: GiB.
         * 
         * @return builder
         * 
         */
        public Builder imageCacheSize(@Nullable Output<Integer> imageCacheSize) {
            $.imageCacheSize = imageCacheSize;
            return this;
        }

        /**
         * @param imageCacheSize The size of the image cache. Default to `20`. Unit: GiB.
         * 
         * @return builder
         * 
         */
        public Builder imageCacheSize(Integer imageCacheSize) {
            return imageCacheSize(Output.of(imageCacheSize));
        }

        /**
         * @param imageRegistryCredentials The Image Registry parameters about the image to be cached. See `image_registry_credential` below.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistryCredentials(@Nullable Output<List<ImageCacheImageRegistryCredentialArgs>> imageRegistryCredentials) {
            $.imageRegistryCredentials = imageRegistryCredentials;
            return this;
        }

        /**
         * @param imageRegistryCredentials The Image Registry parameters about the image to be cached. See `image_registry_credential` below.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistryCredentials(List<ImageCacheImageRegistryCredentialArgs> imageRegistryCredentials) {
            return imageRegistryCredentials(Output.of(imageRegistryCredentials));
        }

        /**
         * @param imageRegistryCredentials The Image Registry parameters about the image to be cached. See `image_registry_credential` below.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistryCredentials(ImageCacheImageRegistryCredentialArgs... imageRegistryCredentials) {
            return imageRegistryCredentials(List.of(imageRegistryCredentials));
        }

        /**
         * @param images The images to be cached. The image name must be versioned.
         * 
         * @return builder
         * 
         */
        public Builder images(Output<List<String>> images) {
            $.images = images;
            return this;
        }

        /**
         * @param images The images to be cached. The image name must be versioned.
         * 
         * @return builder
         * 
         */
        public Builder images(List<String> images) {
            return images(Output.of(images));
        }

        /**
         * @param images The images to be cached. The image name must be versioned.
         * 
         * @return builder
         * 
         */
        public Builder images(String... images) {
            return images(List.of(images));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param retentionDays The retention days of the image cache. Once the image cache expires, it will be cleared. By default, the image cache never expires. Note: The image cache that fails to be created is retained for only one day.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(@Nullable Output<Integer> retentionDays) {
            $.retentionDays = retentionDays;
            return this;
        }

        /**
         * @param retentionDays The retention days of the image cache. Once the image cache expires, it will be cleared. By default, the image cache never expires. Note: The image cache that fails to be created is retained for only one day.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(Integer retentionDays) {
            return retentionDays(Output.of(retentionDays));
        }

        /**
         * @param securityGroupId The ID of the security group. You do not need to specify the same security group as the container group.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId The ID of the security group. You do not need to specify the same security group as the container group.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param vswitchId The ID of the VSwitch. You do not need to specify the same VSwitch as the container group.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the VSwitch. You do not need to specify the same VSwitch as the container group.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The zone id to cache image.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone id to cache image.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ImageCacheArgs build() {
            if ($.imageCacheName == null) {
                throw new MissingRequiredPropertyException("ImageCacheArgs", "imageCacheName");
            }
            if ($.images == null) {
                throw new MissingRequiredPropertyException("ImageCacheArgs", "images");
            }
            if ($.securityGroupId == null) {
                throw new MissingRequiredPropertyException("ImageCacheArgs", "securityGroupId");
            }
            if ($.vswitchId == null) {
                throw new MissingRequiredPropertyException("ImageCacheArgs", "vswitchId");
            }
            return $;
        }
    }

}
