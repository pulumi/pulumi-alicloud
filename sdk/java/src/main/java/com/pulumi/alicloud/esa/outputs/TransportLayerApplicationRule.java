// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TransportLayerApplicationRule {
    /**
     * @return Client IP pass-through protocol, supporting:
     * 
     */
    private String clientIpPassThroughMode;
    /**
     * @return Comment information for the rule (optional).
     * 
     */
    private @Nullable String comment;
    /**
     * @return Edge port. Supports:
     * - A single port, such as 80.
     * - Port range, such as 81-85, representing ports 81, 82, 83, 84, and 85.
     * - Combination of ports and port ranges, separated by commas, such as 80,81-85,90, representing ports 80, 81, 82, 83, 84, 85, and 90.
     * 
     * Edge ports within a single rule and between multiple rules must not overlap.
     * 
     */
    private String edgePort;
    /**
     * @return Forwarding rule protocol, with values:
     * - `TCP`: TCP protocol.
     * - `UDP`: UDP protocol.
     * 
     */
    private String protocol;
    /**
     * @return Rule ID
     * 
     */
    private @Nullable Integer ruleId;
    /**
     * @return Specific value of the origin, which needs to match the origin type.
     * 
     */
    private String source;
    /**
     * @return Source Port
     * 
     */
    private String sourcePort;
    /**
     * @return Origin type, supporting:
     * 
     */
    private String sourceType;

    private TransportLayerApplicationRule() {}
    /**
     * @return Client IP pass-through protocol, supporting:
     * 
     */
    public String clientIpPassThroughMode() {
        return this.clientIpPassThroughMode;
    }
    /**
     * @return Comment information for the rule (optional).
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    /**
     * @return Edge port. Supports:
     * - A single port, such as 80.
     * - Port range, such as 81-85, representing ports 81, 82, 83, 84, and 85.
     * - Combination of ports and port ranges, separated by commas, such as 80,81-85,90, representing ports 80, 81, 82, 83, 84, 85, and 90.
     * 
     * Edge ports within a single rule and between multiple rules must not overlap.
     * 
     */
    public String edgePort() {
        return this.edgePort;
    }
    /**
     * @return Forwarding rule protocol, with values:
     * - `TCP`: TCP protocol.
     * - `UDP`: UDP protocol.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Rule ID
     * 
     */
    public Optional<Integer> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }
    /**
     * @return Specific value of the origin, which needs to match the origin type.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Source Port
     * 
     */
    public String sourcePort() {
        return this.sourcePort;
    }
    /**
     * @return Origin type, supporting:
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransportLayerApplicationRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientIpPassThroughMode;
        private @Nullable String comment;
        private String edgePort;
        private String protocol;
        private @Nullable Integer ruleId;
        private String source;
        private String sourcePort;
        private String sourceType;
        public Builder() {}
        public Builder(TransportLayerApplicationRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientIpPassThroughMode = defaults.clientIpPassThroughMode;
    	      this.comment = defaults.comment;
    	      this.edgePort = defaults.edgePort;
    	      this.protocol = defaults.protocol;
    	      this.ruleId = defaults.ruleId;
    	      this.source = defaults.source;
    	      this.sourcePort = defaults.sourcePort;
    	      this.sourceType = defaults.sourceType;
        }

        @CustomType.Setter
        public Builder clientIpPassThroughMode(String clientIpPassThroughMode) {
            if (clientIpPassThroughMode == null) {
              throw new MissingRequiredPropertyException("TransportLayerApplicationRule", "clientIpPassThroughMode");
            }
            this.clientIpPassThroughMode = clientIpPassThroughMode;
            return this;
        }
        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder edgePort(String edgePort) {
            if (edgePort == null) {
              throw new MissingRequiredPropertyException("TransportLayerApplicationRule", "edgePort");
            }
            this.edgePort = edgePort;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("TransportLayerApplicationRule", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder ruleId(@Nullable Integer ruleId) {

            this.ruleId = ruleId;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("TransportLayerApplicationRule", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePort(String sourcePort) {
            if (sourcePort == null) {
              throw new MissingRequiredPropertyException("TransportLayerApplicationRule", "sourcePort");
            }
            this.sourcePort = sourcePort;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            if (sourceType == null) {
              throw new MissingRequiredPropertyException("TransportLayerApplicationRule", "sourceType");
            }
            this.sourceType = sourceType;
            return this;
        }
        public TransportLayerApplicationRule build() {
            final var _resultValue = new TransportLayerApplicationRule();
            _resultValue.clientIpPassThroughMode = clientIpPassThroughMode;
            _resultValue.comment = comment;
            _resultValue.edgePort = edgePort;
            _resultValue.protocol = protocol;
            _resultValue.ruleId = ruleId;
            _resultValue.source = source;
            _resultValue.sourcePort = sourcePort;
            _resultValue.sourceType = sourceType;
            return _resultValue;
        }
    }
}
