// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticTaskMonitorConfNetDns {
    private @Nullable Integer dnsServerIpType;
    private @Nullable String nsServer;
    private @Nullable Integer queryMethod;
    private String targetUrl;
    private @Nullable Integer timeout;

    private SyntheticTaskMonitorConfNetDns() {}
    public Optional<Integer> dnsServerIpType() {
        return Optional.ofNullable(this.dnsServerIpType);
    }
    public Optional<String> nsServer() {
        return Optional.ofNullable(this.nsServer);
    }
    public Optional<Integer> queryMethod() {
        return Optional.ofNullable(this.queryMethod);
    }
    public String targetUrl() {
        return this.targetUrl;
    }
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticTaskMonitorConfNetDns defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer dnsServerIpType;
        private @Nullable String nsServer;
        private @Nullable Integer queryMethod;
        private String targetUrl;
        private @Nullable Integer timeout;
        public Builder() {}
        public Builder(SyntheticTaskMonitorConfNetDns defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServerIpType = defaults.dnsServerIpType;
    	      this.nsServer = defaults.nsServer;
    	      this.queryMethod = defaults.queryMethod;
    	      this.targetUrl = defaults.targetUrl;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder dnsServerIpType(@Nullable Integer dnsServerIpType) {

            this.dnsServerIpType = dnsServerIpType;
            return this;
        }
        @CustomType.Setter
        public Builder nsServer(@Nullable String nsServer) {

            this.nsServer = nsServer;
            return this;
        }
        @CustomType.Setter
        public Builder queryMethod(@Nullable Integer queryMethod) {

            this.queryMethod = queryMethod;
            return this;
        }
        @CustomType.Setter
        public Builder targetUrl(String targetUrl) {
            if (targetUrl == null) {
              throw new MissingRequiredPropertyException("SyntheticTaskMonitorConfNetDns", "targetUrl");
            }
            this.targetUrl = targetUrl;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        public SyntheticTaskMonitorConfNetDns build() {
            final var _resultValue = new SyntheticTaskMonitorConfNetDns();
            _resultValue.dnsServerIpType = dnsServerIpType;
            _resultValue.nsServer = nsServer;
            _resultValue.queryMethod = queryMethod;
            _resultValue.targetUrl = targetUrl;
            _resultValue.timeout = timeout;
            return _resultValue;
        }
    }
}
