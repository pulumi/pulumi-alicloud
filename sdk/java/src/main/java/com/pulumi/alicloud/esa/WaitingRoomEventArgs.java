// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WaitingRoomEventArgs extends com.pulumi.resources.ResourceArgs {

    public static final WaitingRoomEventArgs Empty = new WaitingRoomEventArgs();

    /**
     * User-defined waiting room page content, when the waiting room type is custom type, you need to enter. The incoming content needs to be base64 encoded.
     * 
     */
    @Import(name="customPageHtml")
    private @Nullable Output<String> customPageHtml;

    /**
     * @return User-defined waiting room page content, when the waiting room type is custom type, you need to enter. The incoming content needs to be base64 encoded.
     * 
     */
    public Optional<Output<String>> customPageHtml() {
        return Optional.ofNullable(this.customPageHtml);
    }

    /**
     * Waiting room description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Waiting room description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Disable session renewal. Value:
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    @Import(name="disableSessionRenewalEnable")
    private @Nullable Output<String> disableSessionRenewalEnable;

    /**
     * @return Disable session renewal. Value:
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    public Optional<Output<String>> disableSessionRenewalEnable() {
        return Optional.ofNullable(this.disableSessionRenewalEnable);
    }

    /**
     * The timestamp of the end time of the event.
     * 
     */
    @Import(name="endTime", required=true)
    private Output<String> endTime;

    /**
     * @return The timestamp of the end time of the event.
     * 
     */
    public Output<String> endTime() {
        return this.endTime;
    }

    /**
     * JSON response switch. Value:
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    @Import(name="jsonResponseEnable")
    private @Nullable Output<String> jsonResponseEnable;

    /**
     * @return JSON response switch. Value:
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    public Optional<Output<String>> jsonResponseEnable() {
        return Optional.ofNullable(this.jsonResponseEnable);
    }

    /**
     * Default language setting. Values include:
     * -&#39;enus&#39;: English.
     * -&#39;zhcn&#39;: Simplified Chinese.
     * -&#39;zhhk&#39;: Traditional Chinese.
     * 
     */
    @Import(name="language")
    private @Nullable Output<String> language;

    /**
     * @return Default language setting. Values include:
     * -&#39;enus&#39;: English.
     * -&#39;zhcn&#39;: Simplified Chinese.
     * -&#39;zhhk&#39;: Traditional Chinese.
     * 
     */
    public Optional<Output<String>> language() {
        return Optional.ofNullable(this.language);
    }

    /**
     * Number of new users per minute.
     * 
     */
    @Import(name="newUsersPerMinute", required=true)
    private Output<String> newUsersPerMinute;

    /**
     * @return Number of new users per minute.
     * 
     */
    public Output<String> newUsersPerMinute() {
        return this.newUsersPerMinute;
    }

    /**
     * Pre-queue switch.
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    @Import(name="preQueueEnable")
    private @Nullable Output<String> preQueueEnable;

    /**
     * @return Pre-queue switch.
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    public Optional<Output<String>> preQueueEnable() {
        return Optional.ofNullable(this.preQueueEnable);
    }

    /**
     * Pre-queue start time.
     * 
     */
    @Import(name="preQueueStartTime")
    private @Nullable Output<String> preQueueStartTime;

    /**
     * @return Pre-queue start time.
     * 
     */
    public Optional<Output<String>> preQueueStartTime() {
        return Optional.ofNullable(this.preQueueStartTime);
    }

    /**
     * Way of queuing. Value:
     * -&#39;random&#39;: random.
     * -&#39;fifo&#39;: first in, first out.
     * -&#39;passthrough &#39;: through.
     * -&#39;reject-all&#39;: reject all.
     * 
     */
    @Import(name="queuingMethod", required=true)
    private Output<String> queuingMethod;

    /**
     * @return Way of queuing. Value:
     * -&#39;random&#39;: random.
     * -&#39;fifo&#39;: first in, first out.
     * -&#39;passthrough &#39;: through.
     * -&#39;reject-all&#39;: reject all.
     * 
     */
    public Output<String> queuingMethod() {
        return this.queuingMethod;
    }

    /**
     * Waiting room status code. Value:
     * -&#39;200&#39;
     * -&#39;202&#39;
     * -&#39;429&#39;
     * 
     */
    @Import(name="queuingStatusCode", required=true)
    private Output<String> queuingStatusCode;

    /**
     * @return Waiting room status code. Value:
     * -&#39;200&#39;
     * -&#39;202&#39;
     * -&#39;429&#39;
     * 
     */
    public Output<String> queuingStatusCode() {
        return this.queuingStatusCode;
    }

    /**
     * Random queue switch.
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    @Import(name="randomPreQueueEnable")
    private @Nullable Output<String> randomPreQueueEnable;

    /**
     * @return Random queue switch.
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    public Optional<Output<String>> randomPreQueueEnable() {
        return Optional.ofNullable(this.randomPreQueueEnable);
    }

    /**
     * User session duration in minutes.
     * 
     */
    @Import(name="sessionDuration", required=true)
    private Output<String> sessionDuration;

    /**
     * @return User session duration in minutes.
     * 
     */
    public Output<String> sessionDuration() {
        return this.sessionDuration;
    }

    /**
     * The site ID, which can be obtained by calling the ListSites API.
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return The site ID, which can be obtained by calling the ListSites API.
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    /**
     * The timestamp of the event start time.
     * 
     */
    @Import(name="startTime", required=true)
    private Output<String> startTime;

    /**
     * @return The timestamp of the event start time.
     * 
     */
    public Output<String> startTime() {
        return this.startTime;
    }

    /**
     * Enabled status. Value:
     * -&#39;on&#39;: Enable waiting room events
     * -&#39;off&#39;: Disable waiting room events
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return Enabled status. Value:
     * -&#39;on&#39;: Enable waiting room events
     * -&#39;off&#39;: Disable waiting room events
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     * Total number of active users.
     * 
     */
    @Import(name="totalActiveUsers", required=true)
    private Output<String> totalActiveUsers;

    /**
     * @return Total number of active users.
     * 
     */
    public Output<String> totalActiveUsers() {
        return this.totalActiveUsers;
    }

    /**
     * Event name, custom event description.
     * 
     */
    @Import(name="waitingRoomEventName", required=true)
    private Output<String> waitingRoomEventName;

    /**
     * @return Event name, custom event description.
     * 
     */
    public Output<String> waitingRoomEventName() {
        return this.waitingRoomEventName;
    }

    /**
     * Waiting room ID, used to identify a specific waiting room. It can be obtained by calling the [listwaitingroom](https://help.aliyun.com/document_detail/2850279.html) interface.
     * 
     */
    @Import(name="waitingRoomId")
    private @Nullable Output<String> waitingRoomId;

    /**
     * @return Waiting room ID, used to identify a specific waiting room. It can be obtained by calling the [listwaitingroom](https://help.aliyun.com/document_detail/2850279.html) interface.
     * 
     */
    public Optional<Output<String>> waitingRoomId() {
        return Optional.ofNullable(this.waitingRoomId);
    }

    /**
     * Waiting room type. The following types are supported:
     * -&#39;default&#39;: the default type.
     * -&#39;custom&#39;: custom type.
     * 
     */
    @Import(name="waitingRoomType", required=true)
    private Output<String> waitingRoomType;

    /**
     * @return Waiting room type. The following types are supported:
     * -&#39;default&#39;: the default type.
     * -&#39;custom&#39;: custom type.
     * 
     */
    public Output<String> waitingRoomType() {
        return this.waitingRoomType;
    }

    private WaitingRoomEventArgs() {}

    private WaitingRoomEventArgs(WaitingRoomEventArgs $) {
        this.customPageHtml = $.customPageHtml;
        this.description = $.description;
        this.disableSessionRenewalEnable = $.disableSessionRenewalEnable;
        this.endTime = $.endTime;
        this.jsonResponseEnable = $.jsonResponseEnable;
        this.language = $.language;
        this.newUsersPerMinute = $.newUsersPerMinute;
        this.preQueueEnable = $.preQueueEnable;
        this.preQueueStartTime = $.preQueueStartTime;
        this.queuingMethod = $.queuingMethod;
        this.queuingStatusCode = $.queuingStatusCode;
        this.randomPreQueueEnable = $.randomPreQueueEnable;
        this.sessionDuration = $.sessionDuration;
        this.siteId = $.siteId;
        this.startTime = $.startTime;
        this.status = $.status;
        this.totalActiveUsers = $.totalActiveUsers;
        this.waitingRoomEventName = $.waitingRoomEventName;
        this.waitingRoomId = $.waitingRoomId;
        this.waitingRoomType = $.waitingRoomType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WaitingRoomEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WaitingRoomEventArgs $;

        public Builder() {
            $ = new WaitingRoomEventArgs();
        }

        public Builder(WaitingRoomEventArgs defaults) {
            $ = new WaitingRoomEventArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customPageHtml User-defined waiting room page content, when the waiting room type is custom type, you need to enter. The incoming content needs to be base64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder customPageHtml(@Nullable Output<String> customPageHtml) {
            $.customPageHtml = customPageHtml;
            return this;
        }

        /**
         * @param customPageHtml User-defined waiting room page content, when the waiting room type is custom type, you need to enter. The incoming content needs to be base64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder customPageHtml(String customPageHtml) {
            return customPageHtml(Output.of(customPageHtml));
        }

        /**
         * @param description Waiting room description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Waiting room description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableSessionRenewalEnable Disable session renewal. Value:
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder disableSessionRenewalEnable(@Nullable Output<String> disableSessionRenewalEnable) {
            $.disableSessionRenewalEnable = disableSessionRenewalEnable;
            return this;
        }

        /**
         * @param disableSessionRenewalEnable Disable session renewal. Value:
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder disableSessionRenewalEnable(String disableSessionRenewalEnable) {
            return disableSessionRenewalEnable(Output.of(disableSessionRenewalEnable));
        }

        /**
         * @param endTime The timestamp of the end time of the event.
         * 
         * @return builder
         * 
         */
        public Builder endTime(Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The timestamp of the end time of the event.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param jsonResponseEnable JSON response switch. Value:
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder jsonResponseEnable(@Nullable Output<String> jsonResponseEnable) {
            $.jsonResponseEnable = jsonResponseEnable;
            return this;
        }

        /**
         * @param jsonResponseEnable JSON response switch. Value:
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder jsonResponseEnable(String jsonResponseEnable) {
            return jsonResponseEnable(Output.of(jsonResponseEnable));
        }

        /**
         * @param language Default language setting. Values include:
         * -&#39;enus&#39;: English.
         * -&#39;zhcn&#39;: Simplified Chinese.
         * -&#39;zhhk&#39;: Traditional Chinese.
         * 
         * @return builder
         * 
         */
        public Builder language(@Nullable Output<String> language) {
            $.language = language;
            return this;
        }

        /**
         * @param language Default language setting. Values include:
         * -&#39;enus&#39;: English.
         * -&#39;zhcn&#39;: Simplified Chinese.
         * -&#39;zhhk&#39;: Traditional Chinese.
         * 
         * @return builder
         * 
         */
        public Builder language(String language) {
            return language(Output.of(language));
        }

        /**
         * @param newUsersPerMinute Number of new users per minute.
         * 
         * @return builder
         * 
         */
        public Builder newUsersPerMinute(Output<String> newUsersPerMinute) {
            $.newUsersPerMinute = newUsersPerMinute;
            return this;
        }

        /**
         * @param newUsersPerMinute Number of new users per minute.
         * 
         * @return builder
         * 
         */
        public Builder newUsersPerMinute(String newUsersPerMinute) {
            return newUsersPerMinute(Output.of(newUsersPerMinute));
        }

        /**
         * @param preQueueEnable Pre-queue switch.
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder preQueueEnable(@Nullable Output<String> preQueueEnable) {
            $.preQueueEnable = preQueueEnable;
            return this;
        }

        /**
         * @param preQueueEnable Pre-queue switch.
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder preQueueEnable(String preQueueEnable) {
            return preQueueEnable(Output.of(preQueueEnable));
        }

        /**
         * @param preQueueStartTime Pre-queue start time.
         * 
         * @return builder
         * 
         */
        public Builder preQueueStartTime(@Nullable Output<String> preQueueStartTime) {
            $.preQueueStartTime = preQueueStartTime;
            return this;
        }

        /**
         * @param preQueueStartTime Pre-queue start time.
         * 
         * @return builder
         * 
         */
        public Builder preQueueStartTime(String preQueueStartTime) {
            return preQueueStartTime(Output.of(preQueueStartTime));
        }

        /**
         * @param queuingMethod Way of queuing. Value:
         * -&#39;random&#39;: random.
         * -&#39;fifo&#39;: first in, first out.
         * -&#39;passthrough &#39;: through.
         * -&#39;reject-all&#39;: reject all.
         * 
         * @return builder
         * 
         */
        public Builder queuingMethod(Output<String> queuingMethod) {
            $.queuingMethod = queuingMethod;
            return this;
        }

        /**
         * @param queuingMethod Way of queuing. Value:
         * -&#39;random&#39;: random.
         * -&#39;fifo&#39;: first in, first out.
         * -&#39;passthrough &#39;: through.
         * -&#39;reject-all&#39;: reject all.
         * 
         * @return builder
         * 
         */
        public Builder queuingMethod(String queuingMethod) {
            return queuingMethod(Output.of(queuingMethod));
        }

        /**
         * @param queuingStatusCode Waiting room status code. Value:
         * -&#39;200&#39;
         * -&#39;202&#39;
         * -&#39;429&#39;
         * 
         * @return builder
         * 
         */
        public Builder queuingStatusCode(Output<String> queuingStatusCode) {
            $.queuingStatusCode = queuingStatusCode;
            return this;
        }

        /**
         * @param queuingStatusCode Waiting room status code. Value:
         * -&#39;200&#39;
         * -&#39;202&#39;
         * -&#39;429&#39;
         * 
         * @return builder
         * 
         */
        public Builder queuingStatusCode(String queuingStatusCode) {
            return queuingStatusCode(Output.of(queuingStatusCode));
        }

        /**
         * @param randomPreQueueEnable Random queue switch.
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder randomPreQueueEnable(@Nullable Output<String> randomPreQueueEnable) {
            $.randomPreQueueEnable = randomPreQueueEnable;
            return this;
        }

        /**
         * @param randomPreQueueEnable Random queue switch.
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder randomPreQueueEnable(String randomPreQueueEnable) {
            return randomPreQueueEnable(Output.of(randomPreQueueEnable));
        }

        /**
         * @param sessionDuration User session duration in minutes.
         * 
         * @return builder
         * 
         */
        public Builder sessionDuration(Output<String> sessionDuration) {
            $.sessionDuration = sessionDuration;
            return this;
        }

        /**
         * @param sessionDuration User session duration in minutes.
         * 
         * @return builder
         * 
         */
        public Builder sessionDuration(String sessionDuration) {
            return sessionDuration(Output.of(sessionDuration));
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the ListSites API.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the ListSites API.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param startTime The timestamp of the event start time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The timestamp of the event start time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param status Enabled status. Value:
         * -&#39;on&#39;: Enable waiting room events
         * -&#39;off&#39;: Disable waiting room events
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Enabled status. Value:
         * -&#39;on&#39;: Enable waiting room events
         * -&#39;off&#39;: Disable waiting room events
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param totalActiveUsers Total number of active users.
         * 
         * @return builder
         * 
         */
        public Builder totalActiveUsers(Output<String> totalActiveUsers) {
            $.totalActiveUsers = totalActiveUsers;
            return this;
        }

        /**
         * @param totalActiveUsers Total number of active users.
         * 
         * @return builder
         * 
         */
        public Builder totalActiveUsers(String totalActiveUsers) {
            return totalActiveUsers(Output.of(totalActiveUsers));
        }

        /**
         * @param waitingRoomEventName Event name, custom event description.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomEventName(Output<String> waitingRoomEventName) {
            $.waitingRoomEventName = waitingRoomEventName;
            return this;
        }

        /**
         * @param waitingRoomEventName Event name, custom event description.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomEventName(String waitingRoomEventName) {
            return waitingRoomEventName(Output.of(waitingRoomEventName));
        }

        /**
         * @param waitingRoomId Waiting room ID, used to identify a specific waiting room. It can be obtained by calling the [listwaitingroom](https://help.aliyun.com/document_detail/2850279.html) interface.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomId(@Nullable Output<String> waitingRoomId) {
            $.waitingRoomId = waitingRoomId;
            return this;
        }

        /**
         * @param waitingRoomId Waiting room ID, used to identify a specific waiting room. It can be obtained by calling the [listwaitingroom](https://help.aliyun.com/document_detail/2850279.html) interface.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomId(String waitingRoomId) {
            return waitingRoomId(Output.of(waitingRoomId));
        }

        /**
         * @param waitingRoomType Waiting room type. The following types are supported:
         * -&#39;default&#39;: the default type.
         * -&#39;custom&#39;: custom type.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomType(Output<String> waitingRoomType) {
            $.waitingRoomType = waitingRoomType;
            return this;
        }

        /**
         * @param waitingRoomType Waiting room type. The following types are supported:
         * -&#39;default&#39;: the default type.
         * -&#39;custom&#39;: custom type.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomType(String waitingRoomType) {
            return waitingRoomType(Output.of(waitingRoomType));
        }

        public WaitingRoomEventArgs build() {
            if ($.endTime == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "endTime");
            }
            if ($.newUsersPerMinute == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "newUsersPerMinute");
            }
            if ($.queuingMethod == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "queuingMethod");
            }
            if ($.queuingStatusCode == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "queuingStatusCode");
            }
            if ($.sessionDuration == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "sessionDuration");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "siteId");
            }
            if ($.startTime == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "startTime");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "status");
            }
            if ($.totalActiveUsers == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "totalActiveUsers");
            }
            if ($.waitingRoomEventName == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "waitingRoomEventName");
            }
            if ($.waitingRoomType == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "waitingRoomType");
            }
            return $;
        }
    }

}
