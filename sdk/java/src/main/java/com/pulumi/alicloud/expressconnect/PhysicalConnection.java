// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.expressconnect;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.expressconnect.PhysicalConnectionArgs;
import com.pulumi.alicloud.expressconnect.inputs.PhysicalConnectionState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Express Connect Physical Connection resource.
 * 
 * For information about Express Connect Physical Connection and how to use it, see [What is Physical Connection](https://www.alibabacloud.com/help/en/express-connect/developer-reference/api-vpc-2016-04-28-createphysicalconnection-efficiency-channels).
 * 
 * &gt; **NOTE:** Available since v1.132.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.expressconnect.PhysicalConnection;
 * import com.pulumi.alicloud.expressconnect.PhysicalConnectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var domestic = new PhysicalConnection("domestic", PhysicalConnectionArgs.builder()
 *             .accessPointId("ap-cn-hangzhou-yh-B")
 *             .lineOperator("CT")
 *             .peerLocation("example_value")
 *             .physicalConnectionName("example_value")
 *             .type("VPC")
 *             .description("my domestic connection")
 *             .portType("1000Base-LX")
 *             .bandwidth("100")
 *             .build());
 * 
 *         var international = new PhysicalConnection("international", PhysicalConnectionArgs.builder()
 *             .accessPointId("ap-sg-singpore-A")
 *             .lineOperator("Other")
 *             .peerLocation("example_value")
 *             .physicalConnectionName("example_value")
 *             .type("VPC")
 *             .description("my domestic connection")
 *             .portType("1000Base-LX")
 *             .bandwidth("100")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Express Connect Physical Connection can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:expressconnect/physicalConnection:PhysicalConnection example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:expressconnect/physicalConnection:PhysicalConnection")
public class PhysicalConnection extends com.pulumi.resources.CustomResource {
    /**
     * The access point ID of the Express Connect circuit.
     * 
     */
    @Export(name="accessPointId", refs={String.class}, tree="[0]")
    private Output<String> accessPointId;

    /**
     * @return The access point ID of the Express Connect circuit.
     * 
     */
    public Output<String> accessPointId() {
        return this.accessPointId;
    }
    /**
     * The maximum bandwidth of the hosted connection.
     * 
     */
    @Export(name="bandwidth", refs={String.class}, tree="[0]")
    private Output<String> bandwidth;

    /**
     * @return The maximum bandwidth of the hosted connection.
     * 
     */
    public Output<String> bandwidth() {
        return this.bandwidth;
    }
    /**
     * The circuit code of the Express Connect circuit.
     * 
     */
    @Export(name="circuitCode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> circuitCode;

    /**
     * @return The circuit code of the Express Connect circuit.
     * 
     */
    public Output<Optional<String>> circuitCode() {
        return Codegen.optional(this.circuitCode);
    }
    /**
     * The description of the Express Connect circuit.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the Express Connect circuit.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The connectivity provider of the Express Connect circuit. Valid values:
     * - `CT`: China Telecom.
     * - `CU`: China Unicom.
     * - `CM`: China Mobile.
     * - `CO`: Other connectivity providers in the Chinese mainland.
     * - `Equinix`: Equinix.
     * - `Other`: Other connectivity providers outside the Chinese mainland.
     * 
     */
    @Export(name="lineOperator", refs={String.class}, tree="[0]")
    private Output<String> lineOperator;

    /**
     * @return The connectivity provider of the Express Connect circuit. Valid values:
     * - `CT`: China Telecom.
     * - `CU`: China Unicom.
     * - `CM`: China Mobile.
     * - `CO`: Other connectivity providers in the Chinese mainland.
     * - `Equinix`: Equinix.
     * - `Other`: Other connectivity providers outside the Chinese mainland.
     * 
     */
    public Output<String> lineOperator() {
        return this.lineOperator;
    }
    /**
     * The ID of the order that is placed. **Note:** `order_id` takes effect only if `status` is set to `Enabled`.
     * 
     */
    @Export(name="orderId", refs={String.class}, tree="[0]")
    private Output<String> orderId;

    /**
     * @return The ID of the order that is placed. **Note:** `order_id` takes effect only if `status` is set to `Enabled`.
     * 
     */
    public Output<String> orderId() {
        return this.orderId;
    }
    /**
     * The geographical location of the data center.
     * 
     */
    @Export(name="peerLocation", refs={String.class}, tree="[0]")
    private Output<String> peerLocation;

    /**
     * @return The geographical location of the data center.
     * 
     */
    public Output<String> peerLocation() {
        return this.peerLocation;
    }
    /**
     * The subscription duration. Valid values:
     * - If `pricing_cycle` is set to `Month`. Valid values: `1` to `9`.
     * - If `pricing_cycle` is set to `Year`. Valid values: `1` to `5`.
     * 
     */
    @Export(name="period", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> period;

    /**
     * @return The subscription duration. Valid values:
     * - If `pricing_cycle` is set to `Month`. Valid values: `1` to `9`.
     * - If `pricing_cycle` is set to `Year`. Valid values: `1` to `5`.
     * 
     */
    public Output<Optional<Integer>> period() {
        return Codegen.optional(this.period);
    }
    /**
     * The name of the Express Connect circuit.
     * 
     */
    @Export(name="physicalConnectionName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> physicalConnectionName;

    /**
     * @return The name of the Express Connect circuit.
     * 
     */
    public Output<Optional<String>> physicalConnectionName() {
        return Codegen.optional(this.physicalConnectionName);
    }
    /**
     * The port type of the Express Connect circuit. Valid values:
     * - `100Base-T`: 100 Mbit/s copper Ethernet port.
     * - `1000Base-T`: 1000 Mbit/s copper Ethernet port.
     * - `1000Base-LX`: 1000 Mbit/s single-mode optical port (10 km).
     * - `10GBase-T`: 10000 Mbit/s copper Ethernet port.
     * - `10GBase-LR`: 10000 Mbit/s single-mode optical port (10 km).
     * - `40GBase-LR`: 40000 Mbit/s single-mode optical port.
     * - `100GBase-LR`: 100000 Mbit/s single-mode optical port.
     * &gt; **NOTE:** From version 1.185.0, `port_type` can be set to `40GBase-LR`, `100GBase-LR`. From version 1.230.1, `port_type` cannot be modified.
     * 
     */
    @Export(name="portType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> portType;

    /**
     * @return The port type of the Express Connect circuit. Valid values:
     * - `100Base-T`: 100 Mbit/s copper Ethernet port.
     * - `1000Base-T`: 1000 Mbit/s copper Ethernet port.
     * - `1000Base-LX`: 1000 Mbit/s single-mode optical port (10 km).
     * - `10GBase-T`: 10000 Mbit/s copper Ethernet port.
     * - `10GBase-LR`: 10000 Mbit/s single-mode optical port (10 km).
     * - `40GBase-LR`: 40000 Mbit/s single-mode optical port.
     * - `100GBase-LR`: 100000 Mbit/s single-mode optical port.
     * &gt; **NOTE:** From version 1.185.0, `port_type` can be set to `40GBase-LR`, `100GBase-LR`. From version 1.230.1, `port_type` cannot be modified.
     * 
     */
    public Output<Optional<String>> portType() {
        return Codegen.optional(this.portType);
    }
    /**
     * The billing cycle of the subscription. Default value: `Month`. Valid values: `Month`, `Year`.
     * &gt; **NOTE:** `period` and `pricing_cycle` are valid only when `status` is set to `Enabled`.
     * 
     */
    @Export(name="pricingCycle", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> pricingCycle;

    /**
     * @return The billing cycle of the subscription. Default value: `Month`. Valid values: `Month`, `Year`.
     * &gt; **NOTE:** `period` and `pricing_cycle` are valid only when `status` is set to `Enabled`.
     * 
     */
    public Output<Optional<String>> pricingCycle() {
        return Codegen.optional(this.pricingCycle);
    }
    /**
     * The ID of the redundant Express Connect circuit. **NOTE:** From version 1.230.1, `redundant_physical_connection_id` cannot be modified.
     * 
     */
    @Export(name="redundantPhysicalConnectionId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> redundantPhysicalConnectionId;

    /**
     * @return The ID of the redundant Express Connect circuit. **NOTE:** From version 1.230.1, `redundant_physical_connection_id` cannot be modified.
     * 
     */
    public Output<Optional<String>> redundantPhysicalConnectionId() {
        return Codegen.optional(this.redundantPhysicalConnectionId);
    }
    /**
     * The status of the Express Connect circuit. Valid values: `Confirmed`, `Enabled`, `Canceled`, `Terminated`. **NOTE:** From version 1.230.1, `status` can be set to `Confirmed`. If you want to set `status` to `Enabled`, `period` must be set.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The status of the Express Connect circuit. Valid values: `Confirmed`, `Enabled`, `Canceled`, `Terminated`. **NOTE:** From version 1.230.1, `status` can be set to `Confirmed`. If you want to set `status` to `Enabled`, `period` must be set.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The type of Express Connect circuit. Default value: `VPC`. Valid values: `VPC`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of Express Connect circuit. Default value: `VPC`. Valid values: `VPC`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PhysicalConnection(java.lang.String name) {
        this(name, PhysicalConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PhysicalConnection(java.lang.String name, PhysicalConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PhysicalConnection(java.lang.String name, PhysicalConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:expressconnect/physicalConnection:PhysicalConnection", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private PhysicalConnection(java.lang.String name, Output<java.lang.String> id, @Nullable PhysicalConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:expressconnect/physicalConnection:PhysicalConnection", name, state, makeResourceOptions(options, id), false);
    }

    private static PhysicalConnectionArgs makeArgs(PhysicalConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PhysicalConnectionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PhysicalConnection get(java.lang.String name, Output<java.lang.String> id, @Nullable PhysicalConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PhysicalConnection(name, id, state, options);
    }
}
