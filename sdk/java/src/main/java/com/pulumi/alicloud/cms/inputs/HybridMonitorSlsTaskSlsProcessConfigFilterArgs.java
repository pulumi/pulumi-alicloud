// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.alicloud.cms.inputs.HybridMonitorSlsTaskSlsProcessConfigFilterFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HybridMonitorSlsTaskSlsProcessConfigFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final HybridMonitorSlsTaskSlsProcessConfigFilterArgs Empty = new HybridMonitorSlsTaskSlsProcessConfigFilterArgs();

    /**
     * The conditions that are used to filter logs imported from Log Service. See `filters` below.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<HybridMonitorSlsTaskSlsProcessConfigFilterFilterArgs>> filters;

    /**
     * @return The conditions that are used to filter logs imported from Log Service. See `filters` below.
     * 
     */
    public Optional<Output<List<HybridMonitorSlsTaskSlsProcessConfigFilterFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The relationship between multiple filter conditions. Valid values: `and`(default value), `or`.
     * 
     */
    @Import(name="relation")
    private @Nullable Output<String> relation;

    /**
     * @return The relationship between multiple filter conditions. Valid values: `and`(default value), `or`.
     * 
     */
    public Optional<Output<String>> relation() {
        return Optional.ofNullable(this.relation);
    }

    private HybridMonitorSlsTaskSlsProcessConfigFilterArgs() {}

    private HybridMonitorSlsTaskSlsProcessConfigFilterArgs(HybridMonitorSlsTaskSlsProcessConfigFilterArgs $) {
        this.filters = $.filters;
        this.relation = $.relation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HybridMonitorSlsTaskSlsProcessConfigFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HybridMonitorSlsTaskSlsProcessConfigFilterArgs $;

        public Builder() {
            $ = new HybridMonitorSlsTaskSlsProcessConfigFilterArgs();
        }

        public Builder(HybridMonitorSlsTaskSlsProcessConfigFilterArgs defaults) {
            $ = new HybridMonitorSlsTaskSlsProcessConfigFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filters The conditions that are used to filter logs imported from Log Service. See `filters` below.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<HybridMonitorSlsTaskSlsProcessConfigFilterFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters The conditions that are used to filter logs imported from Log Service. See `filters` below.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<HybridMonitorSlsTaskSlsProcessConfigFilterFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters The conditions that are used to filter logs imported from Log Service. See `filters` below.
         * 
         * @return builder
         * 
         */
        public Builder filters(HybridMonitorSlsTaskSlsProcessConfigFilterFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param relation The relationship between multiple filter conditions. Valid values: `and`(default value), `or`.
         * 
         * @return builder
         * 
         */
        public Builder relation(@Nullable Output<String> relation) {
            $.relation = relation;
            return this;
        }

        /**
         * @param relation The relationship between multiple filter conditions. Valid values: `and`(default value), `or`.
         * 
         * @return builder
         * 
         */
        public Builder relation(String relation) {
            return relation(Output.of(relation));
        }

        public HybridMonitorSlsTaskSlsProcessConfigFilterArgs build() {
            return $;
        }
    }

}
