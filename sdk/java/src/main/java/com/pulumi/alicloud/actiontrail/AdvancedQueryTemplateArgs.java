// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.actiontrail;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AdvancedQueryTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final AdvancedQueryTemplateArgs Empty = new AdvancedQueryTemplateArgs();

    /**
     * Distinguish whether the current template is a simple query
     * 
     */
    @Import(name="simpleQuery", required=true)
    private Output<Boolean> simpleQuery;

    /**
     * @return Distinguish whether the current template is a simple query
     * 
     */
    public Output<Boolean> simpleQuery() {
        return this.simpleQuery;
    }

    /**
     * The name of the resource
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return The name of the resource
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    /**
     * SQL content saved on behalf of the current template
     * 
     */
    @Import(name="templateSql", required=true)
    private Output<String> templateSql;

    /**
     * @return SQL content saved on behalf of the current template
     * 
     */
    public Output<String> templateSql() {
        return this.templateSql;
    }

    private AdvancedQueryTemplateArgs() {}

    private AdvancedQueryTemplateArgs(AdvancedQueryTemplateArgs $) {
        this.simpleQuery = $.simpleQuery;
        this.templateName = $.templateName;
        this.templateSql = $.templateSql;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdvancedQueryTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdvancedQueryTemplateArgs $;

        public Builder() {
            $ = new AdvancedQueryTemplateArgs();
        }

        public Builder(AdvancedQueryTemplateArgs defaults) {
            $ = new AdvancedQueryTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param simpleQuery Distinguish whether the current template is a simple query
         * 
         * @return builder
         * 
         */
        public Builder simpleQuery(Output<Boolean> simpleQuery) {
            $.simpleQuery = simpleQuery;
            return this;
        }

        /**
         * @param simpleQuery Distinguish whether the current template is a simple query
         * 
         * @return builder
         * 
         */
        public Builder simpleQuery(Boolean simpleQuery) {
            return simpleQuery(Output.of(simpleQuery));
        }

        /**
         * @param templateName The name of the resource
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName The name of the resource
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        /**
         * @param templateSql SQL content saved on behalf of the current template
         * 
         * @return builder
         * 
         */
        public Builder templateSql(Output<String> templateSql) {
            $.templateSql = templateSql;
            return this;
        }

        /**
         * @param templateSql SQL content saved on behalf of the current template
         * 
         * @return builder
         * 
         */
        public Builder templateSql(String templateSql) {
            return templateSql(Output.of(templateSql));
        }

        public AdvancedQueryTemplateArgs build() {
            if ($.simpleQuery == null) {
                throw new MissingRequiredPropertyException("AdvancedQueryTemplateArgs", "simpleQuery");
            }
            if ($.templateSql == null) {
                throw new MissingRequiredPropertyException("AdvancedQueryTemplateArgs", "templateSql");
            }
            return $;
        }
    }

}
