// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ebs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDiskReplicaPairsPair {
    /**
     * @return The bandwidth for asynchronous data replication between cloud disks. The unit is Kbps. Value range:-10240 Kbps: equal to 10 Mbps.-20480 Kbps: equal to 20 Mbps.-51200 Kbps: equal to 50 Mbps.-102400 Kbps: equal to 100 Mbps.Default value: 10240.This parameter cannot be specified when the ChargeType value is POSTPAY. The system value is 0, which indicates that the disk is dynamically allocated according to data write changes during asynchronous replication.
     * 
     */
    private String bandwidth;
    /**
     * @return The description of the asynchronous replication relationship. 2 to 256 English or Chinese characters in length and cannot start with&#39; http:// &#39;or&#39; https.
     * 
     */
    private String description;
    /**
     * @return The ID of the standby disk.
     * 
     */
    private String destinationDiskId;
    /**
     * @return The ID of the region to which the disaster recovery site belongs.
     * 
     */
    private String destinationRegionId;
    /**
     * @return The ID of the zone to which the disaster recovery site belongs.
     * 
     */
    private String destinationZoneId;
    /**
     * @return The ID of the primary disk.
     * 
     */
    private String diskId;
    private String id;
    /**
     * @return The name of the asynchronous replication relationship. The length must be 2 to 128 characters in length and must start with a letter or Chinese name. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-).
     * 
     */
    private String pairName;
    /**
     * @return The payment type of the resource.
     * 
     */
    private String paymentType;
    /**
     * @return The first ID of the resource
     * 
     */
    private String replicaPairId;
    /**
     * @return The ID of the resource group
     * 
     */
    private String resourceGroupId;
    /**
     * @return The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
     * 
     */
    private String rpo;
    /**
     * @return The ID of the zone to which the production site belongs.
     * 
     */
    private String sourceZoneId;
    /**
     * @return The status of the resource.
     * 
     */
    private String status;

    private GetDiskReplicaPairsPair() {}
    /**
     * @return The bandwidth for asynchronous data replication between cloud disks. The unit is Kbps. Value range:-10240 Kbps: equal to 10 Mbps.-20480 Kbps: equal to 20 Mbps.-51200 Kbps: equal to 50 Mbps.-102400 Kbps: equal to 100 Mbps.Default value: 10240.This parameter cannot be specified when the ChargeType value is POSTPAY. The system value is 0, which indicates that the disk is dynamically allocated according to data write changes during asynchronous replication.
     * 
     */
    public String bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return The description of the asynchronous replication relationship. 2 to 256 English or Chinese characters in length and cannot start with&#39; http:// &#39;or&#39; https.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of the standby disk.
     * 
     */
    public String destinationDiskId() {
        return this.destinationDiskId;
    }
    /**
     * @return The ID of the region to which the disaster recovery site belongs.
     * 
     */
    public String destinationRegionId() {
        return this.destinationRegionId;
    }
    /**
     * @return The ID of the zone to which the disaster recovery site belongs.
     * 
     */
    public String destinationZoneId() {
        return this.destinationZoneId;
    }
    /**
     * @return The ID of the primary disk.
     * 
     */
    public String diskId() {
        return this.diskId;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the asynchronous replication relationship. The length must be 2 to 128 characters in length and must start with a letter or Chinese name. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-).
     * 
     */
    public String pairName() {
        return this.pairName;
    }
    /**
     * @return The payment type of the resource.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The first ID of the resource
     * 
     */
    public String replicaPairId() {
        return this.replicaPairId;
    }
    /**
     * @return The ID of the resource group
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
     * 
     */
    public String rpo() {
        return this.rpo;
    }
    /**
     * @return The ID of the zone to which the production site belongs.
     * 
     */
    public String sourceZoneId() {
        return this.sourceZoneId;
    }
    /**
     * @return The status of the resource.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiskReplicaPairsPair defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bandwidth;
        private String description;
        private String destinationDiskId;
        private String destinationRegionId;
        private String destinationZoneId;
        private String diskId;
        private String id;
        private String pairName;
        private String paymentType;
        private String replicaPairId;
        private String resourceGroupId;
        private String rpo;
        private String sourceZoneId;
        private String status;
        public Builder() {}
        public Builder(GetDiskReplicaPairsPair defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidth = defaults.bandwidth;
    	      this.description = defaults.description;
    	      this.destinationDiskId = defaults.destinationDiskId;
    	      this.destinationRegionId = defaults.destinationRegionId;
    	      this.destinationZoneId = defaults.destinationZoneId;
    	      this.diskId = defaults.diskId;
    	      this.id = defaults.id;
    	      this.pairName = defaults.pairName;
    	      this.paymentType = defaults.paymentType;
    	      this.replicaPairId = defaults.replicaPairId;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.rpo = defaults.rpo;
    	      this.sourceZoneId = defaults.sourceZoneId;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder bandwidth(String bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder destinationDiskId(String destinationDiskId) {
            this.destinationDiskId = Objects.requireNonNull(destinationDiskId);
            return this;
        }
        @CustomType.Setter
        public Builder destinationRegionId(String destinationRegionId) {
            this.destinationRegionId = Objects.requireNonNull(destinationRegionId);
            return this;
        }
        @CustomType.Setter
        public Builder destinationZoneId(String destinationZoneId) {
            this.destinationZoneId = Objects.requireNonNull(destinationZoneId);
            return this;
        }
        @CustomType.Setter
        public Builder diskId(String diskId) {
            this.diskId = Objects.requireNonNull(diskId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder pairName(String pairName) {
            this.pairName = Objects.requireNonNull(pairName);
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        @CustomType.Setter
        public Builder replicaPairId(String replicaPairId) {
            this.replicaPairId = Objects.requireNonNull(replicaPairId);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            this.resourceGroupId = Objects.requireNonNull(resourceGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder rpo(String rpo) {
            this.rpo = Objects.requireNonNull(rpo);
            return this;
        }
        @CustomType.Setter
        public Builder sourceZoneId(String sourceZoneId) {
            this.sourceZoneId = Objects.requireNonNull(sourceZoneId);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public GetDiskReplicaPairsPair build() {
            final var _resultValue = new GetDiskReplicaPairsPair();
            _resultValue.bandwidth = bandwidth;
            _resultValue.description = description;
            _resultValue.destinationDiskId = destinationDiskId;
            _resultValue.destinationRegionId = destinationRegionId;
            _resultValue.destinationZoneId = destinationZoneId;
            _resultValue.diskId = diskId;
            _resultValue.id = id;
            _resultValue.pairName = pairName;
            _resultValue.paymentType = paymentType;
            _resultValue.replicaPairId = replicaPairId;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.rpo = rpo;
            _resultValue.sourceZoneId = sourceZoneId;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
