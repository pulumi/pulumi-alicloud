// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ga.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BasicEndpointState extends com.pulumi.resources.ResourceArgs {

    public static final BasicEndpointState Empty = new BasicEndpointState();

    /**
     * The ID of the Basic GA instance.
     * 
     */
    @Import(name="acceleratorId")
    private @Nullable Output<String> acceleratorId;

    /**
     * @return The ID of the Basic GA instance.
     * 
     */
    public Optional<Output<String>> acceleratorId() {
        return Optional.ofNullable(this.acceleratorId);
    }

    /**
     * The name of the Basic Endpoint.
     * 
     */
    @Import(name="basicEndpointName")
    private @Nullable Output<String> basicEndpointName;

    /**
     * @return The name of the Basic Endpoint.
     * 
     */
    public Optional<Output<String>> basicEndpointName() {
        return Optional.ofNullable(this.basicEndpointName);
    }

    /**
     * The address of the Basic Endpoint.
     * 
     */
    @Import(name="endpointAddress")
    private @Nullable Output<String> endpointAddress;

    /**
     * @return The address of the Basic Endpoint.
     * 
     */
    public Optional<Output<String>> endpointAddress() {
        return Optional.ofNullable(this.endpointAddress);
    }

    /**
     * The ID of the Basic Endpoint Group.
     * 
     */
    @Import(name="endpointGroupId")
    private @Nullable Output<String> endpointGroupId;

    /**
     * @return The ID of the Basic Endpoint Group.
     * 
     */
    public Optional<Output<String>> endpointGroupId() {
        return Optional.ofNullable(this.endpointGroupId);
    }

    /**
     * The ID of the Basic Endpoint.
     * 
     */
    @Import(name="endpointId")
    private @Nullable Output<String> endpointId;

    /**
     * @return The ID of the Basic Endpoint.
     * 
     */
    public Optional<Output<String>> endpointId() {
        return Optional.ofNullable(this.endpointId);
    }

    /**
     * The sub address of the Basic Endpoint.
     * 
     */
    @Import(name="endpointSubAddress")
    private @Nullable Output<String> endpointSubAddress;

    /**
     * @return The sub address of the Basic Endpoint.
     * 
     */
    public Optional<Output<String>> endpointSubAddress() {
        return Optional.ofNullable(this.endpointSubAddress);
    }

    /**
     * The sub address type of the Basic Endpoint. Valid values: `primary`, `secondary`.
     * 
     */
    @Import(name="endpointSubAddressType")
    private @Nullable Output<String> endpointSubAddressType;

    /**
     * @return The sub address type of the Basic Endpoint. Valid values: `primary`, `secondary`.
     * 
     */
    public Optional<Output<String>> endpointSubAddressType() {
        return Optional.ofNullable(this.endpointSubAddressType);
    }

    /**
     * The type of the Basic Endpoint. Valid values: `ENI`, `SLB`, `ECS` and `NLB`.
     * 
     */
    @Import(name="endpointType")
    private @Nullable Output<String> endpointType;

    /**
     * @return The type of the Basic Endpoint. Valid values: `ENI`, `SLB`, `ECS` and `NLB`.
     * 
     */
    public Optional<Output<String>> endpointType() {
        return Optional.ofNullable(this.endpointType);
    }

    /**
     * The zone id of the Basic Endpoint.
     * 
     */
    @Import(name="endpointZoneId")
    private @Nullable Output<String> endpointZoneId;

    /**
     * @return The zone id of the Basic Endpoint.
     * 
     */
    public Optional<Output<String>> endpointZoneId() {
        return Optional.ofNullable(this.endpointZoneId);
    }

    /**
     * The status of the Basic Endpoint.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Basic Endpoint.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private BasicEndpointState() {}

    private BasicEndpointState(BasicEndpointState $) {
        this.acceleratorId = $.acceleratorId;
        this.basicEndpointName = $.basicEndpointName;
        this.endpointAddress = $.endpointAddress;
        this.endpointGroupId = $.endpointGroupId;
        this.endpointId = $.endpointId;
        this.endpointSubAddress = $.endpointSubAddress;
        this.endpointSubAddressType = $.endpointSubAddressType;
        this.endpointType = $.endpointType;
        this.endpointZoneId = $.endpointZoneId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BasicEndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BasicEndpointState $;

        public Builder() {
            $ = new BasicEndpointState();
        }

        public Builder(BasicEndpointState defaults) {
            $ = new BasicEndpointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceleratorId The ID of the Basic GA instance.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorId(@Nullable Output<String> acceleratorId) {
            $.acceleratorId = acceleratorId;
            return this;
        }

        /**
         * @param acceleratorId The ID of the Basic GA instance.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorId(String acceleratorId) {
            return acceleratorId(Output.of(acceleratorId));
        }

        /**
         * @param basicEndpointName The name of the Basic Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder basicEndpointName(@Nullable Output<String> basicEndpointName) {
            $.basicEndpointName = basicEndpointName;
            return this;
        }

        /**
         * @param basicEndpointName The name of the Basic Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder basicEndpointName(String basicEndpointName) {
            return basicEndpointName(Output.of(basicEndpointName));
        }

        /**
         * @param endpointAddress The address of the Basic Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointAddress(@Nullable Output<String> endpointAddress) {
            $.endpointAddress = endpointAddress;
            return this;
        }

        /**
         * @param endpointAddress The address of the Basic Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointAddress(String endpointAddress) {
            return endpointAddress(Output.of(endpointAddress));
        }

        /**
         * @param endpointGroupId The ID of the Basic Endpoint Group.
         * 
         * @return builder
         * 
         */
        public Builder endpointGroupId(@Nullable Output<String> endpointGroupId) {
            $.endpointGroupId = endpointGroupId;
            return this;
        }

        /**
         * @param endpointGroupId The ID of the Basic Endpoint Group.
         * 
         * @return builder
         * 
         */
        public Builder endpointGroupId(String endpointGroupId) {
            return endpointGroupId(Output.of(endpointGroupId));
        }

        /**
         * @param endpointId The ID of the Basic Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointId(@Nullable Output<String> endpointId) {
            $.endpointId = endpointId;
            return this;
        }

        /**
         * @param endpointId The ID of the Basic Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointId(String endpointId) {
            return endpointId(Output.of(endpointId));
        }

        /**
         * @param endpointSubAddress The sub address of the Basic Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointSubAddress(@Nullable Output<String> endpointSubAddress) {
            $.endpointSubAddress = endpointSubAddress;
            return this;
        }

        /**
         * @param endpointSubAddress The sub address of the Basic Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointSubAddress(String endpointSubAddress) {
            return endpointSubAddress(Output.of(endpointSubAddress));
        }

        /**
         * @param endpointSubAddressType The sub address type of the Basic Endpoint. Valid values: `primary`, `secondary`.
         * 
         * @return builder
         * 
         */
        public Builder endpointSubAddressType(@Nullable Output<String> endpointSubAddressType) {
            $.endpointSubAddressType = endpointSubAddressType;
            return this;
        }

        /**
         * @param endpointSubAddressType The sub address type of the Basic Endpoint. Valid values: `primary`, `secondary`.
         * 
         * @return builder
         * 
         */
        public Builder endpointSubAddressType(String endpointSubAddressType) {
            return endpointSubAddressType(Output.of(endpointSubAddressType));
        }

        /**
         * @param endpointType The type of the Basic Endpoint. Valid values: `ENI`, `SLB`, `ECS` and `NLB`.
         * 
         * @return builder
         * 
         */
        public Builder endpointType(@Nullable Output<String> endpointType) {
            $.endpointType = endpointType;
            return this;
        }

        /**
         * @param endpointType The type of the Basic Endpoint. Valid values: `ENI`, `SLB`, `ECS` and `NLB`.
         * 
         * @return builder
         * 
         */
        public Builder endpointType(String endpointType) {
            return endpointType(Output.of(endpointType));
        }

        /**
         * @param endpointZoneId The zone id of the Basic Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointZoneId(@Nullable Output<String> endpointZoneId) {
            $.endpointZoneId = endpointZoneId;
            return this;
        }

        /**
         * @param endpointZoneId The zone id of the Basic Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointZoneId(String endpointZoneId) {
            return endpointZoneId(Output.of(endpointZoneId));
        }

        /**
         * @param status The status of the Basic Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Basic Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public BasicEndpointState build() {
            return $;
        }
    }

}
