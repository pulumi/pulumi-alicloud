// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dns;

import com.pulumi.alicloud.dns.inputs.AccessStrategyDefaultAddrPoolArgs;
import com.pulumi.alicloud.dns.inputs.AccessStrategyFailoverAddrPoolArgs;
import com.pulumi.alicloud.dns.inputs.AccessStrategyLineArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessStrategyArgs Empty = new AccessStrategyArgs();

    /**
     * The primary/secondary switchover policy for address pool groups. Valid values: `AUTO`, `DEFAULT`, `FAILOVER`.
     * 
     */
    @Import(name="accessMode")
    private @Nullable Output<String> accessMode;

    /**
     * @return The primary/secondary switchover policy for address pool groups. Valid values: `AUTO`, `DEFAULT`, `FAILOVER`.
     * 
     */
    public Optional<Output<String>> accessMode() {
        return Optional.ofNullable(this.accessMode);
    }

    /**
     * The type of the primary address pool. Valid values: `IPV4`, `IPV6`, `DOMAIN`.
     * 
     */
    @Import(name="defaultAddrPoolType", required=true)
    private Output<String> defaultAddrPoolType;

    /**
     * @return The type of the primary address pool. Valid values: `IPV4`, `IPV6`, `DOMAIN`.
     * 
     */
    public Output<String> defaultAddrPoolType() {
        return this.defaultAddrPoolType;
    }

    /**
     * List of primary address pool collections. See `default_addr_pools` below for details.
     * 
     */
    @Import(name="defaultAddrPools", required=true)
    private Output<List<AccessStrategyDefaultAddrPoolArgs>> defaultAddrPools;

    /**
     * @return List of primary address pool collections. See `default_addr_pools` below for details.
     * 
     */
    public Output<List<AccessStrategyDefaultAddrPoolArgs>> defaultAddrPools() {
        return this.defaultAddrPools;
    }

    /**
     * Specifies whether to enable scheduling optimization for latency resolution for the primary address pool group. Valid values: `OPEN`, `CLOSE`.
     * 
     */
    @Import(name="defaultLatencyOptimization")
    private @Nullable Output<String> defaultLatencyOptimization;

    /**
     * @return Specifies whether to enable scheduling optimization for latency resolution for the primary address pool group. Valid values: `OPEN`, `CLOSE`.
     * 
     */
    public Optional<Output<String>> defaultLatencyOptimization() {
        return Optional.ofNullable(this.defaultLatencyOptimization);
    }

    /**
     * The load balancing policy of the primary address pool group. Valid values: `ALL_RR`, `RATIO`. **NOTE:** The `default_lba_strategy` is required under the condition that `strategy_mode` is `GEO`.
     * 
     */
    @Import(name="defaultLbaStrategy")
    private @Nullable Output<String> defaultLbaStrategy;

    /**
     * @return The load balancing policy of the primary address pool group. Valid values: `ALL_RR`, `RATIO`. **NOTE:** The `default_lba_strategy` is required under the condition that `strategy_mode` is `GEO`.
     * 
     */
    public Optional<Output<String>> defaultLbaStrategy() {
        return Optional.ofNullable(this.defaultLbaStrategy);
    }

    /**
     * The maximum number of addresses returned by the primary address pool set. **NOTE:** The `default_max_return_addr_num` is required under the condition that `strategy_mode` is `LATENCY`.
     * 
     */
    @Import(name="defaultMaxReturnAddrNum")
    private @Nullable Output<Integer> defaultMaxReturnAddrNum;

    /**
     * @return The maximum number of addresses returned by the primary address pool set. **NOTE:** The `default_max_return_addr_num` is required under the condition that `strategy_mode` is `LATENCY`.
     * 
     */
    public Optional<Output<Integer>> defaultMaxReturnAddrNum() {
        return Optional.ofNullable(this.defaultMaxReturnAddrNum);
    }

    /**
     * The minimum number of available addresses for the primary address pool set.
     * 
     */
    @Import(name="defaultMinAvailableAddrNum", required=true)
    private Output<Integer> defaultMinAvailableAddrNum;

    /**
     * @return The minimum number of available addresses for the primary address pool set.
     * 
     */
    public Output<Integer> defaultMinAvailableAddrNum() {
        return this.defaultMinAvailableAddrNum;
    }

    /**
     * The type of the secondary address pool. Valid values: `IPV4`, `IPV6`, `DOMAIN`.
     * 
     */
    @Import(name="failoverAddrPoolType")
    private @Nullable Output<String> failoverAddrPoolType;

    /**
     * @return The type of the secondary address pool. Valid values: `IPV4`, `IPV6`, `DOMAIN`.
     * 
     */
    public Optional<Output<String>> failoverAddrPoolType() {
        return Optional.ofNullable(this.failoverAddrPoolType);
    }

    /**
     * List of backup address pool sets. See `failover_addr_pools` below for details.
     * 
     */
    @Import(name="failoverAddrPools")
    private @Nullable Output<List<AccessStrategyFailoverAddrPoolArgs>> failoverAddrPools;

    /**
     * @return List of backup address pool sets. See `failover_addr_pools` below for details.
     * 
     */
    public Optional<Output<List<AccessStrategyFailoverAddrPoolArgs>>> failoverAddrPools() {
        return Optional.ofNullable(this.failoverAddrPools);
    }

    /**
     * Specifies whether to enable scheduling optimization for latency resolution for the secondary address pool group. Valid values: `OPEN`, `CLOSE`.
     * 
     */
    @Import(name="failoverLatencyOptimization")
    private @Nullable Output<String> failoverLatencyOptimization;

    /**
     * @return Specifies whether to enable scheduling optimization for latency resolution for the secondary address pool group. Valid values: `OPEN`, `CLOSE`.
     * 
     */
    public Optional<Output<String>> failoverLatencyOptimization() {
        return Optional.ofNullable(this.failoverLatencyOptimization);
    }

    /**
     * The load balancing policy of the secondary address pool group. Valid values: `ALL_RR`, `RATIO`.
     * 
     */
    @Import(name="failoverLbaStrategy")
    private @Nullable Output<String> failoverLbaStrategy;

    /**
     * @return The load balancing policy of the secondary address pool group. Valid values: `ALL_RR`, `RATIO`.
     * 
     */
    public Optional<Output<String>> failoverLbaStrategy() {
        return Optional.ofNullable(this.failoverLbaStrategy);
    }

    /**
     * The maximum number of returned addresses in the standby address pool.
     * 
     */
    @Import(name="failoverMaxReturnAddrNum")
    private @Nullable Output<Integer> failoverMaxReturnAddrNum;

    /**
     * @return The maximum number of returned addresses in the standby address pool.
     * 
     */
    public Optional<Output<Integer>> failoverMaxReturnAddrNum() {
        return Optional.ofNullable(this.failoverMaxReturnAddrNum);
    }

    /**
     * The minimum number of available addresses in the standby address pool.
     * 
     */
    @Import(name="failoverMinAvailableAddrNum")
    private @Nullable Output<Integer> failoverMinAvailableAddrNum;

    /**
     * @return The minimum number of available addresses in the standby address pool.
     * 
     */
    public Optional<Output<Integer>> failoverMinAvailableAddrNum() {
        return Optional.ofNullable(this.failoverMinAvailableAddrNum);
    }

    /**
     * The Id of the associated instance.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The Id of the associated instance.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The lang.
     * 
     */
    @Import(name="lang")
    private @Nullable Output<String> lang;

    /**
     * @return The lang.
     * 
     */
    public Optional<Output<String>> lang() {
        return Optional.ofNullable(this.lang);
    }

    /**
     * The source regions. See `lines` below for details. **NOTE:** The `lines` is required under the condition that `strategy_mode` is `GEO`.
     * 
     */
    @Import(name="lines")
    private @Nullable Output<List<AccessStrategyLineArgs>> lines;

    /**
     * @return The source regions. See `lines` below for details. **NOTE:** The `lines` is required under the condition that `strategy_mode` is `GEO`.
     * 
     */
    public Optional<Output<List<AccessStrategyLineArgs>>> lines() {
        return Optional.ofNullable(this.lines);
    }

    /**
     * The type of the access policy. Valid values: `GEO` or `LATENCY`. `GEO`: based on geographic location. `LATENCY`: Based on delay.
     * 
     */
    @Import(name="strategyMode", required=true)
    private Output<String> strategyMode;

    /**
     * @return The type of the access policy. Valid values: `GEO` or `LATENCY`. `GEO`: based on geographic location. `LATENCY`: Based on delay.
     * 
     */
    public Output<String> strategyMode() {
        return this.strategyMode;
    }

    /**
     * The name of the access policy.
     * 
     */
    @Import(name="strategyName", required=true)
    private Output<String> strategyName;

    /**
     * @return The name of the access policy.
     * 
     */
    public Output<String> strategyName() {
        return this.strategyName;
    }

    private AccessStrategyArgs() {}

    private AccessStrategyArgs(AccessStrategyArgs $) {
        this.accessMode = $.accessMode;
        this.defaultAddrPoolType = $.defaultAddrPoolType;
        this.defaultAddrPools = $.defaultAddrPools;
        this.defaultLatencyOptimization = $.defaultLatencyOptimization;
        this.defaultLbaStrategy = $.defaultLbaStrategy;
        this.defaultMaxReturnAddrNum = $.defaultMaxReturnAddrNum;
        this.defaultMinAvailableAddrNum = $.defaultMinAvailableAddrNum;
        this.failoverAddrPoolType = $.failoverAddrPoolType;
        this.failoverAddrPools = $.failoverAddrPools;
        this.failoverLatencyOptimization = $.failoverLatencyOptimization;
        this.failoverLbaStrategy = $.failoverLbaStrategy;
        this.failoverMaxReturnAddrNum = $.failoverMaxReturnAddrNum;
        this.failoverMinAvailableAddrNum = $.failoverMinAvailableAddrNum;
        this.instanceId = $.instanceId;
        this.lang = $.lang;
        this.lines = $.lines;
        this.strategyMode = $.strategyMode;
        this.strategyName = $.strategyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessStrategyArgs $;

        public Builder() {
            $ = new AccessStrategyArgs();
        }

        public Builder(AccessStrategyArgs defaults) {
            $ = new AccessStrategyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessMode The primary/secondary switchover policy for address pool groups. Valid values: `AUTO`, `DEFAULT`, `FAILOVER`.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(@Nullable Output<String> accessMode) {
            $.accessMode = accessMode;
            return this;
        }

        /**
         * @param accessMode The primary/secondary switchover policy for address pool groups. Valid values: `AUTO`, `DEFAULT`, `FAILOVER`.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(String accessMode) {
            return accessMode(Output.of(accessMode));
        }

        /**
         * @param defaultAddrPoolType The type of the primary address pool. Valid values: `IPV4`, `IPV6`, `DOMAIN`.
         * 
         * @return builder
         * 
         */
        public Builder defaultAddrPoolType(Output<String> defaultAddrPoolType) {
            $.defaultAddrPoolType = defaultAddrPoolType;
            return this;
        }

        /**
         * @param defaultAddrPoolType The type of the primary address pool. Valid values: `IPV4`, `IPV6`, `DOMAIN`.
         * 
         * @return builder
         * 
         */
        public Builder defaultAddrPoolType(String defaultAddrPoolType) {
            return defaultAddrPoolType(Output.of(defaultAddrPoolType));
        }

        /**
         * @param defaultAddrPools List of primary address pool collections. See `default_addr_pools` below for details.
         * 
         * @return builder
         * 
         */
        public Builder defaultAddrPools(Output<List<AccessStrategyDefaultAddrPoolArgs>> defaultAddrPools) {
            $.defaultAddrPools = defaultAddrPools;
            return this;
        }

        /**
         * @param defaultAddrPools List of primary address pool collections. See `default_addr_pools` below for details.
         * 
         * @return builder
         * 
         */
        public Builder defaultAddrPools(List<AccessStrategyDefaultAddrPoolArgs> defaultAddrPools) {
            return defaultAddrPools(Output.of(defaultAddrPools));
        }

        /**
         * @param defaultAddrPools List of primary address pool collections. See `default_addr_pools` below for details.
         * 
         * @return builder
         * 
         */
        public Builder defaultAddrPools(AccessStrategyDefaultAddrPoolArgs... defaultAddrPools) {
            return defaultAddrPools(List.of(defaultAddrPools));
        }

        /**
         * @param defaultLatencyOptimization Specifies whether to enable scheduling optimization for latency resolution for the primary address pool group. Valid values: `OPEN`, `CLOSE`.
         * 
         * @return builder
         * 
         */
        public Builder defaultLatencyOptimization(@Nullable Output<String> defaultLatencyOptimization) {
            $.defaultLatencyOptimization = defaultLatencyOptimization;
            return this;
        }

        /**
         * @param defaultLatencyOptimization Specifies whether to enable scheduling optimization for latency resolution for the primary address pool group. Valid values: `OPEN`, `CLOSE`.
         * 
         * @return builder
         * 
         */
        public Builder defaultLatencyOptimization(String defaultLatencyOptimization) {
            return defaultLatencyOptimization(Output.of(defaultLatencyOptimization));
        }

        /**
         * @param defaultLbaStrategy The load balancing policy of the primary address pool group. Valid values: `ALL_RR`, `RATIO`. **NOTE:** The `default_lba_strategy` is required under the condition that `strategy_mode` is `GEO`.
         * 
         * @return builder
         * 
         */
        public Builder defaultLbaStrategy(@Nullable Output<String> defaultLbaStrategy) {
            $.defaultLbaStrategy = defaultLbaStrategy;
            return this;
        }

        /**
         * @param defaultLbaStrategy The load balancing policy of the primary address pool group. Valid values: `ALL_RR`, `RATIO`. **NOTE:** The `default_lba_strategy` is required under the condition that `strategy_mode` is `GEO`.
         * 
         * @return builder
         * 
         */
        public Builder defaultLbaStrategy(String defaultLbaStrategy) {
            return defaultLbaStrategy(Output.of(defaultLbaStrategy));
        }

        /**
         * @param defaultMaxReturnAddrNum The maximum number of addresses returned by the primary address pool set. **NOTE:** The `default_max_return_addr_num` is required under the condition that `strategy_mode` is `LATENCY`.
         * 
         * @return builder
         * 
         */
        public Builder defaultMaxReturnAddrNum(@Nullable Output<Integer> defaultMaxReturnAddrNum) {
            $.defaultMaxReturnAddrNum = defaultMaxReturnAddrNum;
            return this;
        }

        /**
         * @param defaultMaxReturnAddrNum The maximum number of addresses returned by the primary address pool set. **NOTE:** The `default_max_return_addr_num` is required under the condition that `strategy_mode` is `LATENCY`.
         * 
         * @return builder
         * 
         */
        public Builder defaultMaxReturnAddrNum(Integer defaultMaxReturnAddrNum) {
            return defaultMaxReturnAddrNum(Output.of(defaultMaxReturnAddrNum));
        }

        /**
         * @param defaultMinAvailableAddrNum The minimum number of available addresses for the primary address pool set.
         * 
         * @return builder
         * 
         */
        public Builder defaultMinAvailableAddrNum(Output<Integer> defaultMinAvailableAddrNum) {
            $.defaultMinAvailableAddrNum = defaultMinAvailableAddrNum;
            return this;
        }

        /**
         * @param defaultMinAvailableAddrNum The minimum number of available addresses for the primary address pool set.
         * 
         * @return builder
         * 
         */
        public Builder defaultMinAvailableAddrNum(Integer defaultMinAvailableAddrNum) {
            return defaultMinAvailableAddrNum(Output.of(defaultMinAvailableAddrNum));
        }

        /**
         * @param failoverAddrPoolType The type of the secondary address pool. Valid values: `IPV4`, `IPV6`, `DOMAIN`.
         * 
         * @return builder
         * 
         */
        public Builder failoverAddrPoolType(@Nullable Output<String> failoverAddrPoolType) {
            $.failoverAddrPoolType = failoverAddrPoolType;
            return this;
        }

        /**
         * @param failoverAddrPoolType The type of the secondary address pool. Valid values: `IPV4`, `IPV6`, `DOMAIN`.
         * 
         * @return builder
         * 
         */
        public Builder failoverAddrPoolType(String failoverAddrPoolType) {
            return failoverAddrPoolType(Output.of(failoverAddrPoolType));
        }

        /**
         * @param failoverAddrPools List of backup address pool sets. See `failover_addr_pools` below for details.
         * 
         * @return builder
         * 
         */
        public Builder failoverAddrPools(@Nullable Output<List<AccessStrategyFailoverAddrPoolArgs>> failoverAddrPools) {
            $.failoverAddrPools = failoverAddrPools;
            return this;
        }

        /**
         * @param failoverAddrPools List of backup address pool sets. See `failover_addr_pools` below for details.
         * 
         * @return builder
         * 
         */
        public Builder failoverAddrPools(List<AccessStrategyFailoverAddrPoolArgs> failoverAddrPools) {
            return failoverAddrPools(Output.of(failoverAddrPools));
        }

        /**
         * @param failoverAddrPools List of backup address pool sets. See `failover_addr_pools` below for details.
         * 
         * @return builder
         * 
         */
        public Builder failoverAddrPools(AccessStrategyFailoverAddrPoolArgs... failoverAddrPools) {
            return failoverAddrPools(List.of(failoverAddrPools));
        }

        /**
         * @param failoverLatencyOptimization Specifies whether to enable scheduling optimization for latency resolution for the secondary address pool group. Valid values: `OPEN`, `CLOSE`.
         * 
         * @return builder
         * 
         */
        public Builder failoverLatencyOptimization(@Nullable Output<String> failoverLatencyOptimization) {
            $.failoverLatencyOptimization = failoverLatencyOptimization;
            return this;
        }

        /**
         * @param failoverLatencyOptimization Specifies whether to enable scheduling optimization for latency resolution for the secondary address pool group. Valid values: `OPEN`, `CLOSE`.
         * 
         * @return builder
         * 
         */
        public Builder failoverLatencyOptimization(String failoverLatencyOptimization) {
            return failoverLatencyOptimization(Output.of(failoverLatencyOptimization));
        }

        /**
         * @param failoverLbaStrategy The load balancing policy of the secondary address pool group. Valid values: `ALL_RR`, `RATIO`.
         * 
         * @return builder
         * 
         */
        public Builder failoverLbaStrategy(@Nullable Output<String> failoverLbaStrategy) {
            $.failoverLbaStrategy = failoverLbaStrategy;
            return this;
        }

        /**
         * @param failoverLbaStrategy The load balancing policy of the secondary address pool group. Valid values: `ALL_RR`, `RATIO`.
         * 
         * @return builder
         * 
         */
        public Builder failoverLbaStrategy(String failoverLbaStrategy) {
            return failoverLbaStrategy(Output.of(failoverLbaStrategy));
        }

        /**
         * @param failoverMaxReturnAddrNum The maximum number of returned addresses in the standby address pool.
         * 
         * @return builder
         * 
         */
        public Builder failoverMaxReturnAddrNum(@Nullable Output<Integer> failoverMaxReturnAddrNum) {
            $.failoverMaxReturnAddrNum = failoverMaxReturnAddrNum;
            return this;
        }

        /**
         * @param failoverMaxReturnAddrNum The maximum number of returned addresses in the standby address pool.
         * 
         * @return builder
         * 
         */
        public Builder failoverMaxReturnAddrNum(Integer failoverMaxReturnAddrNum) {
            return failoverMaxReturnAddrNum(Output.of(failoverMaxReturnAddrNum));
        }

        /**
         * @param failoverMinAvailableAddrNum The minimum number of available addresses in the standby address pool.
         * 
         * @return builder
         * 
         */
        public Builder failoverMinAvailableAddrNum(@Nullable Output<Integer> failoverMinAvailableAddrNum) {
            $.failoverMinAvailableAddrNum = failoverMinAvailableAddrNum;
            return this;
        }

        /**
         * @param failoverMinAvailableAddrNum The minimum number of available addresses in the standby address pool.
         * 
         * @return builder
         * 
         */
        public Builder failoverMinAvailableAddrNum(Integer failoverMinAvailableAddrNum) {
            return failoverMinAvailableAddrNum(Output.of(failoverMinAvailableAddrNum));
        }

        /**
         * @param instanceId The Id of the associated instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The Id of the associated instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param lang The lang.
         * 
         * @return builder
         * 
         */
        public Builder lang(@Nullable Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang The lang.
         * 
         * @return builder
         * 
         */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param lines The source regions. See `lines` below for details. **NOTE:** The `lines` is required under the condition that `strategy_mode` is `GEO`.
         * 
         * @return builder
         * 
         */
        public Builder lines(@Nullable Output<List<AccessStrategyLineArgs>> lines) {
            $.lines = lines;
            return this;
        }

        /**
         * @param lines The source regions. See `lines` below for details. **NOTE:** The `lines` is required under the condition that `strategy_mode` is `GEO`.
         * 
         * @return builder
         * 
         */
        public Builder lines(List<AccessStrategyLineArgs> lines) {
            return lines(Output.of(lines));
        }

        /**
         * @param lines The source regions. See `lines` below for details. **NOTE:** The `lines` is required under the condition that `strategy_mode` is `GEO`.
         * 
         * @return builder
         * 
         */
        public Builder lines(AccessStrategyLineArgs... lines) {
            return lines(List.of(lines));
        }

        /**
         * @param strategyMode The type of the access policy. Valid values: `GEO` or `LATENCY`. `GEO`: based on geographic location. `LATENCY`: Based on delay.
         * 
         * @return builder
         * 
         */
        public Builder strategyMode(Output<String> strategyMode) {
            $.strategyMode = strategyMode;
            return this;
        }

        /**
         * @param strategyMode The type of the access policy. Valid values: `GEO` or `LATENCY`. `GEO`: based on geographic location. `LATENCY`: Based on delay.
         * 
         * @return builder
         * 
         */
        public Builder strategyMode(String strategyMode) {
            return strategyMode(Output.of(strategyMode));
        }

        /**
         * @param strategyName The name of the access policy.
         * 
         * @return builder
         * 
         */
        public Builder strategyName(Output<String> strategyName) {
            $.strategyName = strategyName;
            return this;
        }

        /**
         * @param strategyName The name of the access policy.
         * 
         * @return builder
         * 
         */
        public Builder strategyName(String strategyName) {
            return strategyName(Output.of(strategyName));
        }

        public AccessStrategyArgs build() {
            if ($.defaultAddrPoolType == null) {
                throw new MissingRequiredPropertyException("AccessStrategyArgs", "defaultAddrPoolType");
            }
            if ($.defaultAddrPools == null) {
                throw new MissingRequiredPropertyException("AccessStrategyArgs", "defaultAddrPools");
            }
            if ($.defaultMinAvailableAddrNum == null) {
                throw new MissingRequiredPropertyException("AccessStrategyArgs", "defaultMinAvailableAddrNum");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("AccessStrategyArgs", "instanceId");
            }
            if ($.strategyMode == null) {
                throw new MissingRequiredPropertyException("AccessStrategyArgs", "strategyMode");
            }
            if ($.strategyName == null) {
                throw new MissingRequiredPropertyException("AccessStrategyArgs", "strategyName");
            }
            return $;
        }
    }

}
