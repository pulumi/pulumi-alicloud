// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.clickhouse.outputs;

import com.pulumi.alicloud.clickhouse.outputs.GetDbClustersClusterDbClusterAccessWhiteList;
import com.pulumi.alicloud.clickhouse.outputs.GetDbClustersClusterScaleOutStatus;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDbClustersCluster {
    /**
     * @return Alibaba Cloud account Id.
     * 
     */
    private String aliUid;
    /**
     * @return The ID of the business process flow.
     * 
     */
    private String bid;
    /**
     * @return Instance family values include: Basic: Basic edition; HighAvailability: high availability edition.
     * 
     */
    private String category;
    /**
     * @return The Commodity Code of the DBCluster.
     * 
     */
    private String commodityCode;
    /**
     * @return Connection string.
     * 
     */
    private String connectionString;
    /**
     * @return The control version of the DBCluster.
     * 
     */
    private String controlVersion;
    /**
     * @return The creation time of the resource.
     * 
     */
    private String createTime;
    /**
     * @return The db cluster access white list.
     * 
     */
    private List<GetDbClustersClusterDbClusterAccessWhiteList> dbClusterAccessWhiteLists;
    /**
     * @return The DBCluster description.
     * 
     */
    private String dbClusterDescription;
    private String dbClusterId;
    /**
     * @return The DBCluster network type.
     * 
     */
    private String dbClusterNetworkType;
    /**
     * @return The DBCluster type.
     * 
     */
    private String dbClusterType;
    /**
     * @return The node class of the DBCluster.
     * 
     */
    private String dbNodeClass;
    /**
     * @return The node count of the DBCluster.
     * 
     */
    private String dbNodeCount;
    /**
     * @return The node storage of the DBCluster.
     * 
     */
    private String dbNodeStorage;
    /**
     * @return Key management service KMS key ID.
     * 
     */
    private String encryptionKey;
    /**
     * @return Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
     * 
     */
    private String encryptionType;
    /**
     * @return The Engine of the DBCluster.
     * 
     */
    private String engine;
    /**
     * @return The engine version of the DBCluster.
     * 
     */
    private String engineVersion;
    /**
     * @return The expiration time of the DBCluster.
     * 
     */
    private String expireTime;
    /**
     * @return The ID of the DBCluster.
     * 
     */
    private String id;
    /**
     * @return If the instance has expired.
     * 
     */
    private String isExpired;
    /**
     * @return The lock mode of the DBCluster.
     * 
     */
    private String lockMode;
    /**
     * @return Lock reason of the DBCluster.
     * 
     */
    private String lockReason;
    /**
     * @return Examples of the maintenance window, in the format of hh:mmZ-hh:mm Z.
     * 
     */
    private String maintainTime;
    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    private String paymentType;
    /**
     * @return Connection port.
     * 
     */
    private Integer port;
    /**
     * @return A public IP address for the connection.
     * 
     */
    private String publicConnectionString;
    /**
     * @return Public network port.
     * 
     */
    private String publicPort;
    /**
     * @return Scale state.
     * 
     */
    private List<GetDbClustersClusterScaleOutStatus> scaleOutStatuses;
    /**
     * @return The status of the DBCluster. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
     * 
     */
    private String status;
    /**
     * @return Storage type of DBCluster. Valid values: `cloud_essd`, `cloud_efficiency`, `cloud_essd_pl2`, `cloud_essd_pl3`.
     * 
     */
    private String storageType;
    /**
     * @return Support fallback scheme.
     * 
     */
    private Integer supportBackup;
    /**
     * @return The system supports http port number.
     * 
     */
    private Boolean supportHttpsPort;
    /**
     * @return Supports Mysql, and those of the ports.
     * 
     */
    private Boolean supportMysqlPort;
    /**
     * @return Virtual Private Cloud (VPC cloud instance ID.
     * 
     */
    private String vpcCloudInstanceId;
    /**
     * @return The VPC ID of the DBCluster.
     * 
     */
    private String vpcId;
    /**
     * @return The vswitch id of the DBCluster.
     * 
     */
    private String vswitchId;
    /**
     * @return The zone ID of the DBCluster.
     * 
     */
    private String zoneId;

    private GetDbClustersCluster() {}
    /**
     * @return Alibaba Cloud account Id.
     * 
     */
    public String aliUid() {
        return this.aliUid;
    }
    /**
     * @return The ID of the business process flow.
     * 
     */
    public String bid() {
        return this.bid;
    }
    /**
     * @return Instance family values include: Basic: Basic edition; HighAvailability: high availability edition.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return The Commodity Code of the DBCluster.
     * 
     */
    public String commodityCode() {
        return this.commodityCode;
    }
    /**
     * @return Connection string.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return The control version of the DBCluster.
     * 
     */
    public String controlVersion() {
        return this.controlVersion;
    }
    /**
     * @return The creation time of the resource.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The db cluster access white list.
     * 
     */
    public List<GetDbClustersClusterDbClusterAccessWhiteList> dbClusterAccessWhiteLists() {
        return this.dbClusterAccessWhiteLists;
    }
    /**
     * @return The DBCluster description.
     * 
     */
    public String dbClusterDescription() {
        return this.dbClusterDescription;
    }
    public String dbClusterId() {
        return this.dbClusterId;
    }
    /**
     * @return The DBCluster network type.
     * 
     */
    public String dbClusterNetworkType() {
        return this.dbClusterNetworkType;
    }
    /**
     * @return The DBCluster type.
     * 
     */
    public String dbClusterType() {
        return this.dbClusterType;
    }
    /**
     * @return The node class of the DBCluster.
     * 
     */
    public String dbNodeClass() {
        return this.dbNodeClass;
    }
    /**
     * @return The node count of the DBCluster.
     * 
     */
    public String dbNodeCount() {
        return this.dbNodeCount;
    }
    /**
     * @return The node storage of the DBCluster.
     * 
     */
    public String dbNodeStorage() {
        return this.dbNodeStorage;
    }
    /**
     * @return Key management service KMS key ID.
     * 
     */
    public String encryptionKey() {
        return this.encryptionKey;
    }
    /**
     * @return Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
     * 
     */
    public String encryptionType() {
        return this.encryptionType;
    }
    /**
     * @return The Engine of the DBCluster.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The engine version of the DBCluster.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return The expiration time of the DBCluster.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The ID of the DBCluster.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If the instance has expired.
     * 
     */
    public String isExpired() {
        return this.isExpired;
    }
    /**
     * @return The lock mode of the DBCluster.
     * 
     */
    public String lockMode() {
        return this.lockMode;
    }
    /**
     * @return Lock reason of the DBCluster.
     * 
     */
    public String lockReason() {
        return this.lockReason;
    }
    /**
     * @return Examples of the maintenance window, in the format of hh:mmZ-hh:mm Z.
     * 
     */
    public String maintainTime() {
        return this.maintainTime;
    }
    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return Connection port.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return A public IP address for the connection.
     * 
     */
    public String publicConnectionString() {
        return this.publicConnectionString;
    }
    /**
     * @return Public network port.
     * 
     */
    public String publicPort() {
        return this.publicPort;
    }
    /**
     * @return Scale state.
     * 
     */
    public List<GetDbClustersClusterScaleOutStatus> scaleOutStatuses() {
        return this.scaleOutStatuses;
    }
    /**
     * @return The status of the DBCluster. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Storage type of DBCluster. Valid values: `cloud_essd`, `cloud_efficiency`, `cloud_essd_pl2`, `cloud_essd_pl3`.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return Support fallback scheme.
     * 
     */
    public Integer supportBackup() {
        return this.supportBackup;
    }
    /**
     * @return The system supports http port number.
     * 
     */
    public Boolean supportHttpsPort() {
        return this.supportHttpsPort;
    }
    /**
     * @return Supports Mysql, and those of the ports.
     * 
     */
    public Boolean supportMysqlPort() {
        return this.supportMysqlPort;
    }
    /**
     * @return Virtual Private Cloud (VPC cloud instance ID.
     * 
     */
    public String vpcCloudInstanceId() {
        return this.vpcCloudInstanceId;
    }
    /**
     * @return The VPC ID of the DBCluster.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The vswitch id of the DBCluster.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The zone ID of the DBCluster.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbClustersCluster defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aliUid;
        private String bid;
        private String category;
        private String commodityCode;
        private String connectionString;
        private String controlVersion;
        private String createTime;
        private List<GetDbClustersClusterDbClusterAccessWhiteList> dbClusterAccessWhiteLists;
        private String dbClusterDescription;
        private String dbClusterId;
        private String dbClusterNetworkType;
        private String dbClusterType;
        private String dbNodeClass;
        private String dbNodeCount;
        private String dbNodeStorage;
        private String encryptionKey;
        private String encryptionType;
        private String engine;
        private String engineVersion;
        private String expireTime;
        private String id;
        private String isExpired;
        private String lockMode;
        private String lockReason;
        private String maintainTime;
        private String paymentType;
        private Integer port;
        private String publicConnectionString;
        private String publicPort;
        private List<GetDbClustersClusterScaleOutStatus> scaleOutStatuses;
        private String status;
        private String storageType;
        private Integer supportBackup;
        private Boolean supportHttpsPort;
        private Boolean supportMysqlPort;
        private String vpcCloudInstanceId;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetDbClustersCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aliUid = defaults.aliUid;
    	      this.bid = defaults.bid;
    	      this.category = defaults.category;
    	      this.commodityCode = defaults.commodityCode;
    	      this.connectionString = defaults.connectionString;
    	      this.controlVersion = defaults.controlVersion;
    	      this.createTime = defaults.createTime;
    	      this.dbClusterAccessWhiteLists = defaults.dbClusterAccessWhiteLists;
    	      this.dbClusterDescription = defaults.dbClusterDescription;
    	      this.dbClusterId = defaults.dbClusterId;
    	      this.dbClusterNetworkType = defaults.dbClusterNetworkType;
    	      this.dbClusterType = defaults.dbClusterType;
    	      this.dbNodeClass = defaults.dbNodeClass;
    	      this.dbNodeCount = defaults.dbNodeCount;
    	      this.dbNodeStorage = defaults.dbNodeStorage;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.encryptionType = defaults.encryptionType;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.expireTime = defaults.expireTime;
    	      this.id = defaults.id;
    	      this.isExpired = defaults.isExpired;
    	      this.lockMode = defaults.lockMode;
    	      this.lockReason = defaults.lockReason;
    	      this.maintainTime = defaults.maintainTime;
    	      this.paymentType = defaults.paymentType;
    	      this.port = defaults.port;
    	      this.publicConnectionString = defaults.publicConnectionString;
    	      this.publicPort = defaults.publicPort;
    	      this.scaleOutStatuses = defaults.scaleOutStatuses;
    	      this.status = defaults.status;
    	      this.storageType = defaults.storageType;
    	      this.supportBackup = defaults.supportBackup;
    	      this.supportHttpsPort = defaults.supportHttpsPort;
    	      this.supportMysqlPort = defaults.supportMysqlPort;
    	      this.vpcCloudInstanceId = defaults.vpcCloudInstanceId;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder aliUid(String aliUid) {
            this.aliUid = Objects.requireNonNull(aliUid);
            return this;
        }
        @CustomType.Setter
        public Builder bid(String bid) {
            this.bid = Objects.requireNonNull(bid);
            return this;
        }
        @CustomType.Setter
        public Builder category(String category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }
        @CustomType.Setter
        public Builder commodityCode(String commodityCode) {
            this.commodityCode = Objects.requireNonNull(commodityCode);
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        @CustomType.Setter
        public Builder controlVersion(String controlVersion) {
            this.controlVersion = Objects.requireNonNull(controlVersion);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterAccessWhiteLists(List<GetDbClustersClusterDbClusterAccessWhiteList> dbClusterAccessWhiteLists) {
            this.dbClusterAccessWhiteLists = Objects.requireNonNull(dbClusterAccessWhiteLists);
            return this;
        }
        public Builder dbClusterAccessWhiteLists(GetDbClustersClusterDbClusterAccessWhiteList... dbClusterAccessWhiteLists) {
            return dbClusterAccessWhiteLists(List.of(dbClusterAccessWhiteLists));
        }
        @CustomType.Setter
        public Builder dbClusterDescription(String dbClusterDescription) {
            this.dbClusterDescription = Objects.requireNonNull(dbClusterDescription);
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterId(String dbClusterId) {
            this.dbClusterId = Objects.requireNonNull(dbClusterId);
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterNetworkType(String dbClusterNetworkType) {
            this.dbClusterNetworkType = Objects.requireNonNull(dbClusterNetworkType);
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterType(String dbClusterType) {
            this.dbClusterType = Objects.requireNonNull(dbClusterType);
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeClass(String dbNodeClass) {
            this.dbNodeClass = Objects.requireNonNull(dbNodeClass);
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeCount(String dbNodeCount) {
            this.dbNodeCount = Objects.requireNonNull(dbNodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorage(String dbNodeStorage) {
            this.dbNodeStorage = Objects.requireNonNull(dbNodeStorage);
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKey(String encryptionKey) {
            this.encryptionKey = Objects.requireNonNull(encryptionKey);
            return this;
        }
        @CustomType.Setter
        public Builder encryptionType(String encryptionType) {
            this.encryptionType = Objects.requireNonNull(encryptionType);
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            this.engineVersion = Objects.requireNonNull(engineVersion);
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isExpired(String isExpired) {
            this.isExpired = Objects.requireNonNull(isExpired);
            return this;
        }
        @CustomType.Setter
        public Builder lockMode(String lockMode) {
            this.lockMode = Objects.requireNonNull(lockMode);
            return this;
        }
        @CustomType.Setter
        public Builder lockReason(String lockReason) {
            this.lockReason = Objects.requireNonNull(lockReason);
            return this;
        }
        @CustomType.Setter
        public Builder maintainTime(String maintainTime) {
            this.maintainTime = Objects.requireNonNull(maintainTime);
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder publicConnectionString(String publicConnectionString) {
            this.publicConnectionString = Objects.requireNonNull(publicConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder publicPort(String publicPort) {
            this.publicPort = Objects.requireNonNull(publicPort);
            return this;
        }
        @CustomType.Setter
        public Builder scaleOutStatuses(List<GetDbClustersClusterScaleOutStatus> scaleOutStatuses) {
            this.scaleOutStatuses = Objects.requireNonNull(scaleOutStatuses);
            return this;
        }
        public Builder scaleOutStatuses(GetDbClustersClusterScaleOutStatus... scaleOutStatuses) {
            return scaleOutStatuses(List.of(scaleOutStatuses));
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            this.storageType = Objects.requireNonNull(storageType);
            return this;
        }
        @CustomType.Setter
        public Builder supportBackup(Integer supportBackup) {
            this.supportBackup = Objects.requireNonNull(supportBackup);
            return this;
        }
        @CustomType.Setter
        public Builder supportHttpsPort(Boolean supportHttpsPort) {
            this.supportHttpsPort = Objects.requireNonNull(supportHttpsPort);
            return this;
        }
        @CustomType.Setter
        public Builder supportMysqlPort(Boolean supportMysqlPort) {
            this.supportMysqlPort = Objects.requireNonNull(supportMysqlPort);
            return this;
        }
        @CustomType.Setter
        public Builder vpcCloudInstanceId(String vpcCloudInstanceId) {
            this.vpcCloudInstanceId = Objects.requireNonNull(vpcCloudInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }
        public GetDbClustersCluster build() {
            final var o = new GetDbClustersCluster();
            o.aliUid = aliUid;
            o.bid = bid;
            o.category = category;
            o.commodityCode = commodityCode;
            o.connectionString = connectionString;
            o.controlVersion = controlVersion;
            o.createTime = createTime;
            o.dbClusterAccessWhiteLists = dbClusterAccessWhiteLists;
            o.dbClusterDescription = dbClusterDescription;
            o.dbClusterId = dbClusterId;
            o.dbClusterNetworkType = dbClusterNetworkType;
            o.dbClusterType = dbClusterType;
            o.dbNodeClass = dbNodeClass;
            o.dbNodeCount = dbNodeCount;
            o.dbNodeStorage = dbNodeStorage;
            o.encryptionKey = encryptionKey;
            o.encryptionType = encryptionType;
            o.engine = engine;
            o.engineVersion = engineVersion;
            o.expireTime = expireTime;
            o.id = id;
            o.isExpired = isExpired;
            o.lockMode = lockMode;
            o.lockReason = lockReason;
            o.maintainTime = maintainTime;
            o.paymentType = paymentType;
            o.port = port;
            o.publicConnectionString = publicConnectionString;
            o.publicPort = publicPort;
            o.scaleOutStatuses = scaleOutStatuses;
            o.status = status;
            o.storageType = storageType;
            o.supportBackup = supportBackup;
            o.supportHttpsPort = supportHttpsPort;
            o.supportMysqlPort = supportMysqlPort;
            o.vpcCloudInstanceId = vpcCloudInstanceId;
            o.vpcId = vpcId;
            o.vswitchId = vswitchId;
            o.zoneId = zoneId;
            return o;
        }
    }
}
