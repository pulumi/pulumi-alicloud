// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.outputs;

import com.pulumi.alicloud.esa.outputs.LoadBalancerRuleFixedResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerRule {
    /**
     * @return Executes a specified response after matching the rule. See `fixedResponse` below.
     * 
     */
    private @Nullable LoadBalancerRuleFixedResponse fixedResponse;
    /**
     * @return Modifies the load balancer configuration for the corresponding request after matching the rule. The fields in this configuration will override the corresponding fields in the load balancer configuration.
     * 
     */
    private @Nullable String overrides;
    /**
     * @return Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
     * 
     */
    private @Nullable String rule;
    /**
     * @return Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     * - on: open.
     * - off: close.
     * 
     */
    private @Nullable String ruleEnable;
    /**
     * @return Rule name. When adding global configuration, this parameter does not need to be set.
     * 
     */
    private @Nullable String ruleName;
    /**
     * @return Order of rule execution. The smaller the value, the higher the priority for execution.
     * 
     */
    private @Nullable Integer sequence;
    /**
     * @return Whether to terminate the execution of subsequent rules.
     * 
     */
    private @Nullable Boolean terminates;

    private LoadBalancerRule() {}
    /**
     * @return Executes a specified response after matching the rule. See `fixedResponse` below.
     * 
     */
    public Optional<LoadBalancerRuleFixedResponse> fixedResponse() {
        return Optional.ofNullable(this.fixedResponse);
    }
    /**
     * @return Modifies the load balancer configuration for the corresponding request after matching the rule. The fields in this configuration will override the corresponding fields in the load balancer configuration.
     * 
     */
    public Optional<String> overrides() {
        return Optional.ofNullable(this.overrides);
    }
    /**
     * @return Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
     * 
     */
    public Optional<String> rule() {
        return Optional.ofNullable(this.rule);
    }
    /**
     * @return Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     * - on: open.
     * - off: close.
     * 
     */
    public Optional<String> ruleEnable() {
        return Optional.ofNullable(this.ruleEnable);
    }
    /**
     * @return Rule name. When adding global configuration, this parameter does not need to be set.
     * 
     */
    public Optional<String> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }
    /**
     * @return Order of rule execution. The smaller the value, the higher the priority for execution.
     * 
     */
    public Optional<Integer> sequence() {
        return Optional.ofNullable(this.sequence);
    }
    /**
     * @return Whether to terminate the execution of subsequent rules.
     * 
     */
    public Optional<Boolean> terminates() {
        return Optional.ofNullable(this.terminates);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable LoadBalancerRuleFixedResponse fixedResponse;
        private @Nullable String overrides;
        private @Nullable String rule;
        private @Nullable String ruleEnable;
        private @Nullable String ruleName;
        private @Nullable Integer sequence;
        private @Nullable Boolean terminates;
        public Builder() {}
        public Builder(LoadBalancerRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fixedResponse = defaults.fixedResponse;
    	      this.overrides = defaults.overrides;
    	      this.rule = defaults.rule;
    	      this.ruleEnable = defaults.ruleEnable;
    	      this.ruleName = defaults.ruleName;
    	      this.sequence = defaults.sequence;
    	      this.terminates = defaults.terminates;
        }

        @CustomType.Setter
        public Builder fixedResponse(@Nullable LoadBalancerRuleFixedResponse fixedResponse) {

            this.fixedResponse = fixedResponse;
            return this;
        }
        @CustomType.Setter
        public Builder overrides(@Nullable String overrides) {

            this.overrides = overrides;
            return this;
        }
        @CustomType.Setter
        public Builder rule(@Nullable String rule) {

            this.rule = rule;
            return this;
        }
        @CustomType.Setter
        public Builder ruleEnable(@Nullable String ruleEnable) {

            this.ruleEnable = ruleEnable;
            return this;
        }
        @CustomType.Setter
        public Builder ruleName(@Nullable String ruleName) {

            this.ruleName = ruleName;
            return this;
        }
        @CustomType.Setter
        public Builder sequence(@Nullable Integer sequence) {

            this.sequence = sequence;
            return this;
        }
        @CustomType.Setter
        public Builder terminates(@Nullable Boolean terminates) {

            this.terminates = terminates;
            return this;
        }
        public LoadBalancerRule build() {
            final var _resultValue = new LoadBalancerRule();
            _resultValue.fixedResponse = fixedResponse;
            _resultValue.overrides = overrides;
            _resultValue.rule = rule;
            _resultValue.ruleEnable = ruleEnable;
            _resultValue.ruleName = ruleName;
            _resultValue.sequence = sequence;
            _resultValue.terminates = terminates;
            return _resultValue;
        }
    }
}
