// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.outputs;

import com.pulumi.alicloud.alb.outputs.GetServerGroupsGroupHealthCheckConfig;
import com.pulumi.alicloud.alb.outputs.GetServerGroupsGroupServer;
import com.pulumi.alicloud.alb.outputs.GetServerGroupsGroupStickySessionConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServerGroupsGroup {
    /**
     * @return The configuration of health checks.
     * 
     */
    private List<GetServerGroupsGroupHealthCheckConfig> healthCheckConfigs;
    /**
     * @return The ID of the Server Group.
     * 
     */
    private String id;
    /**
     * @return The server protocol. Valid values: `HTTP` and `HTTPS`. Default value: `HTTP`.
     * 
     */
    private String protocol;
    /**
     * @return The scheduling algorithm. Valid values: `Wrr`, `Wlc` and `Sch`.
     * 
     */
    private String scheduler;
    /**
     * @return The first ID of the res ource.
     * 
     */
    private String serverGroupId;
    /**
     * @return The name of the resource.
     * 
     */
    private String serverGroupName;
    /**
     * @return The backend server.
     * 
     */
    private List<GetServerGroupsGroupServer> servers;
    /**
     * @return The status of the resource.
     * 
     */
    private String status;
    /**
     * @return The configuration of the sticky session.
     * 
     */
    private List<GetServerGroupsGroupStickySessionConfig> stickySessionConfigs;
    /**
     * @return A map of tags assigned to the group.
     * 
     */
    private Map<String,Object> tags;
    /**
     * @return The ID of the VPC that you want to access.
     * 
     */
    private String vpcId;

    private GetServerGroupsGroup() {}
    /**
     * @return The configuration of health checks.
     * 
     */
    public List<GetServerGroupsGroupHealthCheckConfig> healthCheckConfigs() {
        return this.healthCheckConfigs;
    }
    /**
     * @return The ID of the Server Group.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The server protocol. Valid values: `HTTP` and `HTTPS`. Default value: `HTTP`.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The scheduling algorithm. Valid values: `Wrr`, `Wlc` and `Sch`.
     * 
     */
    public String scheduler() {
        return this.scheduler;
    }
    /**
     * @return The first ID of the res ource.
     * 
     */
    public String serverGroupId() {
        return this.serverGroupId;
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String serverGroupName() {
        return this.serverGroupName;
    }
    /**
     * @return The backend server.
     * 
     */
    public List<GetServerGroupsGroupServer> servers() {
        return this.servers;
    }
    /**
     * @return The status of the resource.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The configuration of the sticky session.
     * 
     */
    public List<GetServerGroupsGroupStickySessionConfig> stickySessionConfigs() {
        return this.stickySessionConfigs;
    }
    /**
     * @return A map of tags assigned to the group.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The ID of the VPC that you want to access.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerGroupsGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetServerGroupsGroupHealthCheckConfig> healthCheckConfigs;
        private String id;
        private String protocol;
        private String scheduler;
        private String serverGroupId;
        private String serverGroupName;
        private List<GetServerGroupsGroupServer> servers;
        private String status;
        private List<GetServerGroupsGroupStickySessionConfig> stickySessionConfigs;
        private Map<String,Object> tags;
        private String vpcId;
        public Builder() {}
        public Builder(GetServerGroupsGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthCheckConfigs = defaults.healthCheckConfigs;
    	      this.id = defaults.id;
    	      this.protocol = defaults.protocol;
    	      this.scheduler = defaults.scheduler;
    	      this.serverGroupId = defaults.serverGroupId;
    	      this.serverGroupName = defaults.serverGroupName;
    	      this.servers = defaults.servers;
    	      this.status = defaults.status;
    	      this.stickySessionConfigs = defaults.stickySessionConfigs;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder healthCheckConfigs(List<GetServerGroupsGroupHealthCheckConfig> healthCheckConfigs) {
            if (healthCheckConfigs == null) {
              throw new MissingRequiredPropertyException("GetServerGroupsGroup", "healthCheckConfigs");
            }
            this.healthCheckConfigs = healthCheckConfigs;
            return this;
        }
        public Builder healthCheckConfigs(GetServerGroupsGroupHealthCheckConfig... healthCheckConfigs) {
            return healthCheckConfigs(List.of(healthCheckConfigs));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerGroupsGroup", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetServerGroupsGroup", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder scheduler(String scheduler) {
            if (scheduler == null) {
              throw new MissingRequiredPropertyException("GetServerGroupsGroup", "scheduler");
            }
            this.scheduler = scheduler;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupId(String serverGroupId) {
            if (serverGroupId == null) {
              throw new MissingRequiredPropertyException("GetServerGroupsGroup", "serverGroupId");
            }
            this.serverGroupId = serverGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupName(String serverGroupName) {
            if (serverGroupName == null) {
              throw new MissingRequiredPropertyException("GetServerGroupsGroup", "serverGroupName");
            }
            this.serverGroupName = serverGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder servers(List<GetServerGroupsGroupServer> servers) {
            if (servers == null) {
              throw new MissingRequiredPropertyException("GetServerGroupsGroup", "servers");
            }
            this.servers = servers;
            return this;
        }
        public Builder servers(GetServerGroupsGroupServer... servers) {
            return servers(List.of(servers));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetServerGroupsGroup", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder stickySessionConfigs(List<GetServerGroupsGroupStickySessionConfig> stickySessionConfigs) {
            if (stickySessionConfigs == null) {
              throw new MissingRequiredPropertyException("GetServerGroupsGroup", "stickySessionConfigs");
            }
            this.stickySessionConfigs = stickySessionConfigs;
            return this;
        }
        public Builder stickySessionConfigs(GetServerGroupsGroupStickySessionConfig... stickySessionConfigs) {
            return stickySessionConfigs(List.of(stickySessionConfigs));
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServerGroupsGroup", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetServerGroupsGroup", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        public GetServerGroupsGroup build() {
            final var _resultValue = new GetServerGroupsGroup();
            _resultValue.healthCheckConfigs = healthCheckConfigs;
            _resultValue.id = id;
            _resultValue.protocol = protocol;
            _resultValue.scheduler = scheduler;
            _resultValue.serverGroupId = serverGroupId;
            _resultValue.serverGroupName = serverGroupName;
            _resultValue.servers = servers;
            _resultValue.status = status;
            _resultValue.stickySessionConfigs = stickySessionConfigs;
            _resultValue.tags = tags;
            _resultValue.vpcId = vpcId;
            return _resultValue;
        }
    }
}
