// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dns;

import com.pulumi.alicloud.dns.inputs.MonitorConfigIspCityNodeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitorConfigArgs Empty = new MonitorConfigArgs();

    /**
     * The ID of the address pool.
     * 
     */
    @Import(name="addrPoolId", required=true)
    private Output<String> addrPoolId;

    /**
     * @return The ID of the address pool.
     * 
     */
    public Output<String> addrPoolId() {
        return this.addrPoolId;
    }

    /**
     * The number of consecutive times of failed health check attempts. Valid values: `1`, `2`, `3`.
     * 
     */
    @Import(name="evaluationCount", required=true)
    private Output<Integer> evaluationCount;

    /**
     * @return The number of consecutive times of failed health check attempts. Valid values: `1`, `2`, `3`.
     * 
     */
    public Output<Integer> evaluationCount() {
        return this.evaluationCount;
    }

    /**
     * The health check interval. Unit: seconds. Valid values: `60`.
     * 
     */
    @Import(name="interval", required=true)
    private Output<Integer> interval;

    /**
     * @return The health check interval. Unit: seconds. Valid values: `60`.
     * 
     */
    public Output<Integer> interval() {
        return this.interval;
    }

    /**
     * The Monitoring node. See `isp_city_node` below for details.
     * 
     */
    @Import(name="ispCityNodes", required=true)
    private Output<List<MonitorConfigIspCityNodeArgs>> ispCityNodes;

    /**
     * @return The Monitoring node. See `isp_city_node` below for details.
     * 
     */
    public Output<List<MonitorConfigIspCityNodeArgs>> ispCityNodes() {
        return this.ispCityNodes;
    }

    /**
     * The lang.
     * 
     */
    @Import(name="lang")
    private @Nullable Output<String> lang;

    /**
     * @return The lang.
     * 
     */
    public Optional<Output<String>> lang() {
        return Optional.ofNullable(this.lang);
    }

    /**
     * The extended information. This value follows the json format. For more details, see the [description of MonitorExtendInfo in the Request parameters table for details](https://www.alibabacloud.com/help/en/alibaba-cloud-dns/latest/api-alidns-2015-01-09-adddnsgtmmonitor).
     * 
     */
    @Import(name="monitorExtendInfo", required=true)
    private Output<String> monitorExtendInfo;

    /**
     * @return The extended information. This value follows the json format. For more details, see the [description of MonitorExtendInfo in the Request parameters table for details](https://www.alibabacloud.com/help/en/alibaba-cloud-dns/latest/api-alidns-2015-01-09-adddnsgtmmonitor).
     * 
     */
    public Output<String> monitorExtendInfo() {
        return this.monitorExtendInfo;
    }

    /**
     * The health check protocol. Valid values: `HTTP`, `HTTPS`, `PING`, `TCP`.
     * 
     */
    @Import(name="protocolType", required=true)
    private Output<String> protocolType;

    /**
     * @return The health check protocol. Valid values: `HTTP`, `HTTPS`, `PING`, `TCP`.
     * 
     */
    public Output<String> protocolType() {
        return this.protocolType;
    }

    /**
     * The timeout period. Unit: milliseconds. Valid values: `2000`, `3000`, `5000`, `10000`.
     * 
     */
    @Import(name="timeout", required=true)
    private Output<Integer> timeout;

    /**
     * @return The timeout period. Unit: milliseconds. Valid values: `2000`, `3000`, `5000`, `10000`.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }

    private MonitorConfigArgs() {}

    private MonitorConfigArgs(MonitorConfigArgs $) {
        this.addrPoolId = $.addrPoolId;
        this.evaluationCount = $.evaluationCount;
        this.interval = $.interval;
        this.ispCityNodes = $.ispCityNodes;
        this.lang = $.lang;
        this.monitorExtendInfo = $.monitorExtendInfo;
        this.protocolType = $.protocolType;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorConfigArgs $;

        public Builder() {
            $ = new MonitorConfigArgs();
        }

        public Builder(MonitorConfigArgs defaults) {
            $ = new MonitorConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addrPoolId The ID of the address pool.
         * 
         * @return builder
         * 
         */
        public Builder addrPoolId(Output<String> addrPoolId) {
            $.addrPoolId = addrPoolId;
            return this;
        }

        /**
         * @param addrPoolId The ID of the address pool.
         * 
         * @return builder
         * 
         */
        public Builder addrPoolId(String addrPoolId) {
            return addrPoolId(Output.of(addrPoolId));
        }

        /**
         * @param evaluationCount The number of consecutive times of failed health check attempts. Valid values: `1`, `2`, `3`.
         * 
         * @return builder
         * 
         */
        public Builder evaluationCount(Output<Integer> evaluationCount) {
            $.evaluationCount = evaluationCount;
            return this;
        }

        /**
         * @param evaluationCount The number of consecutive times of failed health check attempts. Valid values: `1`, `2`, `3`.
         * 
         * @return builder
         * 
         */
        public Builder evaluationCount(Integer evaluationCount) {
            return evaluationCount(Output.of(evaluationCount));
        }

        /**
         * @param interval The health check interval. Unit: seconds. Valid values: `60`.
         * 
         * @return builder
         * 
         */
        public Builder interval(Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The health check interval. Unit: seconds. Valid values: `60`.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param ispCityNodes The Monitoring node. See `isp_city_node` below for details.
         * 
         * @return builder
         * 
         */
        public Builder ispCityNodes(Output<List<MonitorConfigIspCityNodeArgs>> ispCityNodes) {
            $.ispCityNodes = ispCityNodes;
            return this;
        }

        /**
         * @param ispCityNodes The Monitoring node. See `isp_city_node` below for details.
         * 
         * @return builder
         * 
         */
        public Builder ispCityNodes(List<MonitorConfigIspCityNodeArgs> ispCityNodes) {
            return ispCityNodes(Output.of(ispCityNodes));
        }

        /**
         * @param ispCityNodes The Monitoring node. See `isp_city_node` below for details.
         * 
         * @return builder
         * 
         */
        public Builder ispCityNodes(MonitorConfigIspCityNodeArgs... ispCityNodes) {
            return ispCityNodes(List.of(ispCityNodes));
        }

        /**
         * @param lang The lang.
         * 
         * @return builder
         * 
         */
        public Builder lang(@Nullable Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang The lang.
         * 
         * @return builder
         * 
         */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param monitorExtendInfo The extended information. This value follows the json format. For more details, see the [description of MonitorExtendInfo in the Request parameters table for details](https://www.alibabacloud.com/help/en/alibaba-cloud-dns/latest/api-alidns-2015-01-09-adddnsgtmmonitor).
         * 
         * @return builder
         * 
         */
        public Builder monitorExtendInfo(Output<String> monitorExtendInfo) {
            $.monitorExtendInfo = monitorExtendInfo;
            return this;
        }

        /**
         * @param monitorExtendInfo The extended information. This value follows the json format. For more details, see the [description of MonitorExtendInfo in the Request parameters table for details](https://www.alibabacloud.com/help/en/alibaba-cloud-dns/latest/api-alidns-2015-01-09-adddnsgtmmonitor).
         * 
         * @return builder
         * 
         */
        public Builder monitorExtendInfo(String monitorExtendInfo) {
            return monitorExtendInfo(Output.of(monitorExtendInfo));
        }

        /**
         * @param protocolType The health check protocol. Valid values: `HTTP`, `HTTPS`, `PING`, `TCP`.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(Output<String> protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param protocolType The health check protocol. Valid values: `HTTP`, `HTTPS`, `PING`, `TCP`.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(String protocolType) {
            return protocolType(Output.of(protocolType));
        }

        /**
         * @param timeout The timeout period. Unit: milliseconds. Valid values: `2000`, `3000`, `5000`, `10000`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The timeout period. Unit: milliseconds. Valid values: `2000`, `3000`, `5000`, `10000`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public MonitorConfigArgs build() {
            $.addrPoolId = Objects.requireNonNull($.addrPoolId, "expected parameter 'addrPoolId' to be non-null");
            $.evaluationCount = Objects.requireNonNull($.evaluationCount, "expected parameter 'evaluationCount' to be non-null");
            $.interval = Objects.requireNonNull($.interval, "expected parameter 'interval' to be non-null");
            $.ispCityNodes = Objects.requireNonNull($.ispCityNodes, "expected parameter 'ispCityNodes' to be non-null");
            $.monitorExtendInfo = Objects.requireNonNull($.monitorExtendInfo, "expected parameter 'monitorExtendInfo' to be non-null");
            $.protocolType = Objects.requireNonNull($.protocolType, "expected parameter 'protocolType' to be non-null");
            $.timeout = Objects.requireNonNull($.timeout, "expected parameter 'timeout' to be non-null");
            return $;
        }
    }

}
