// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebLockConfigState extends com.pulumi.resources.ResourceArgs {

    public static final WebLockConfigState Empty = new WebLockConfigState();

    /**
     * Protection mode. Value:-**block**: Intercept-**audit**: Alarm
     * 
     */
    @Import(name="defenceMode")
    private @Nullable Output<String> defenceMode;

    /**
     * @return Protection mode. Value:-**block**: Intercept-**audit**: Alarm
     * 
     */
    public Optional<Output<String>> defenceMode() {
        return Optional.ofNullable(this.defenceMode);
    }

    /**
     * Specify the protection directory.
     * 
     */
    @Import(name="dir")
    private @Nullable Output<String> dir;

    /**
     * @return Specify the protection directory.
     * 
     */
    public Optional<Output<String>> dir() {
        return Optional.ofNullable(this.dir);
    }

    /**
     * Specify a directory address that does not require Web tamper protection (I. E. Excluded directories).&gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     * 
     */
    @Import(name="exclusiveDir")
    private @Nullable Output<String> exclusiveDir;

    /**
     * @return Specify a directory address that does not require Web tamper protection (I. E. Excluded directories).&gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     * 
     */
    public Optional<Output<String>> exclusiveDir() {
        return Optional.ofNullable(this.exclusiveDir);
    }

    /**
     * Specify files that do not need to enable tamper protection for web pages (that is, exclude files).&gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     * 
     */
    @Import(name="exclusiveFile")
    private @Nullable Output<String> exclusiveFile;

    /**
     * @return Specify files that do not need to enable tamper protection for web pages (that is, exclude files).&gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     * 
     */
    public Optional<Output<String>> exclusiveFile() {
        return Optional.ofNullable(this.exclusiveFile);
    }

    /**
     * Specify the type of file that does not require Web tamper protection (that is, the type of excluded file). When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png &gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     * 
     */
    @Import(name="exclusiveFileType")
    private @Nullable Output<String> exclusiveFileType;

    /**
     * @return Specify the type of file that does not require Web tamper protection (that is, the type of excluded file). When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png &gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     * 
     */
    public Optional<Output<String>> exclusiveFileType() {
        return Optional.ofNullable(this.exclusiveFileType);
    }

    /**
     * Specify the type of file that requires tamper protection. When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png&gt; The protection Mode **Mode** is set to **whitelist**, you need to configure this parameter.
     * 
     */
    @Import(name="inclusiveFileType")
    private @Nullable Output<String> inclusiveFileType;

    /**
     * @return Specify the type of file that requires tamper protection. When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png&gt; The protection Mode **Mode** is set to **whitelist**, you need to configure this parameter.
     * 
     */
    public Optional<Output<String>> inclusiveFileType() {
        return Optional.ofNullable(this.inclusiveFileType);
    }

    /**
     * The local backup path is used to protect the safe backup of the Directory.
     * 
     */
    @Import(name="localBackupDir")
    private @Nullable Output<String> localBackupDir;

    /**
     * @return The local backup path is used to protect the safe backup of the Directory.
     * 
     */
    public Optional<Output<String>> localBackupDir() {
        return Optional.ofNullable(this.localBackupDir);
    }

    /**
     * Specify the protected directory mode. Value:-**whitelist**: whitelist mode, which protects the added protected directories and file types.-**blacklist**: blacklist mode, which protects all unexcluded subdirectories, file types, and specified files under the added protection directory.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Specify the protected directory mode. Value:-**whitelist**: whitelist mode, which protects the added protected directories and file types.-**blacklist**: blacklist mode, which protects all unexcluded subdirectories, file types, and specified files under the added protection directory.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Specify the UUID of the server to which you want to add a protection directory.&gt; You can call the DescribeCloudCenterInstances interface to obtain the UUID of the server.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Specify the UUID of the server to which you want to add a protection directory.&gt; You can call the DescribeCloudCenterInstances interface to obtain the UUID of the server.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private WebLockConfigState() {}

    private WebLockConfigState(WebLockConfigState $) {
        this.defenceMode = $.defenceMode;
        this.dir = $.dir;
        this.exclusiveDir = $.exclusiveDir;
        this.exclusiveFile = $.exclusiveFile;
        this.exclusiveFileType = $.exclusiveFileType;
        this.inclusiveFileType = $.inclusiveFileType;
        this.localBackupDir = $.localBackupDir;
        this.mode = $.mode;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebLockConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebLockConfigState $;

        public Builder() {
            $ = new WebLockConfigState();
        }

        public Builder(WebLockConfigState defaults) {
            $ = new WebLockConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defenceMode Protection mode. Value:-**block**: Intercept-**audit**: Alarm
         * 
         * @return builder
         * 
         */
        public Builder defenceMode(@Nullable Output<String> defenceMode) {
            $.defenceMode = defenceMode;
            return this;
        }

        /**
         * @param defenceMode Protection mode. Value:-**block**: Intercept-**audit**: Alarm
         * 
         * @return builder
         * 
         */
        public Builder defenceMode(String defenceMode) {
            return defenceMode(Output.of(defenceMode));
        }

        /**
         * @param dir Specify the protection directory.
         * 
         * @return builder
         * 
         */
        public Builder dir(@Nullable Output<String> dir) {
            $.dir = dir;
            return this;
        }

        /**
         * @param dir Specify the protection directory.
         * 
         * @return builder
         * 
         */
        public Builder dir(String dir) {
            return dir(Output.of(dir));
        }

        /**
         * @param exclusiveDir Specify a directory address that does not require Web tamper protection (I. E. Excluded directories).&gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
         * 
         * @return builder
         * 
         */
        public Builder exclusiveDir(@Nullable Output<String> exclusiveDir) {
            $.exclusiveDir = exclusiveDir;
            return this;
        }

        /**
         * @param exclusiveDir Specify a directory address that does not require Web tamper protection (I. E. Excluded directories).&gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
         * 
         * @return builder
         * 
         */
        public Builder exclusiveDir(String exclusiveDir) {
            return exclusiveDir(Output.of(exclusiveDir));
        }

        /**
         * @param exclusiveFile Specify files that do not need to enable tamper protection for web pages (that is, exclude files).&gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
         * 
         * @return builder
         * 
         */
        public Builder exclusiveFile(@Nullable Output<String> exclusiveFile) {
            $.exclusiveFile = exclusiveFile;
            return this;
        }

        /**
         * @param exclusiveFile Specify files that do not need to enable tamper protection for web pages (that is, exclude files).&gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
         * 
         * @return builder
         * 
         */
        public Builder exclusiveFile(String exclusiveFile) {
            return exclusiveFile(Output.of(exclusiveFile));
        }

        /**
         * @param exclusiveFileType Specify the type of file that does not require Web tamper protection (that is, the type of excluded file). When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png &gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
         * 
         * @return builder
         * 
         */
        public Builder exclusiveFileType(@Nullable Output<String> exclusiveFileType) {
            $.exclusiveFileType = exclusiveFileType;
            return this;
        }

        /**
         * @param exclusiveFileType Specify the type of file that does not require Web tamper protection (that is, the type of excluded file). When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png &gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
         * 
         * @return builder
         * 
         */
        public Builder exclusiveFileType(String exclusiveFileType) {
            return exclusiveFileType(Output.of(exclusiveFileType));
        }

        /**
         * @param inclusiveFileType Specify the type of file that requires tamper protection. When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png&gt; The protection Mode **Mode** is set to **whitelist**, you need to configure this parameter.
         * 
         * @return builder
         * 
         */
        public Builder inclusiveFileType(@Nullable Output<String> inclusiveFileType) {
            $.inclusiveFileType = inclusiveFileType;
            return this;
        }

        /**
         * @param inclusiveFileType Specify the type of file that requires tamper protection. When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png&gt; The protection Mode **Mode** is set to **whitelist**, you need to configure this parameter.
         * 
         * @return builder
         * 
         */
        public Builder inclusiveFileType(String inclusiveFileType) {
            return inclusiveFileType(Output.of(inclusiveFileType));
        }

        /**
         * @param localBackupDir The local backup path is used to protect the safe backup of the Directory.
         * 
         * @return builder
         * 
         */
        public Builder localBackupDir(@Nullable Output<String> localBackupDir) {
            $.localBackupDir = localBackupDir;
            return this;
        }

        /**
         * @param localBackupDir The local backup path is used to protect the safe backup of the Directory.
         * 
         * @return builder
         * 
         */
        public Builder localBackupDir(String localBackupDir) {
            return localBackupDir(Output.of(localBackupDir));
        }

        /**
         * @param mode Specify the protected directory mode. Value:-**whitelist**: whitelist mode, which protects the added protected directories and file types.-**blacklist**: blacklist mode, which protects all unexcluded subdirectories, file types, and specified files under the added protection directory.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Specify the protected directory mode. Value:-**whitelist**: whitelist mode, which protects the added protected directories and file types.-**blacklist**: blacklist mode, which protects all unexcluded subdirectories, file types, and specified files under the added protection directory.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param uuid Specify the UUID of the server to which you want to add a protection directory.&gt; You can call the DescribeCloudCenterInstances interface to obtain the UUID of the server.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Specify the UUID of the server to which you want to add a protection directory.&gt; You can call the DescribeCloudCenterInstances interface to obtain the UUID of the server.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public WebLockConfigState build() {
            return $;
        }
    }

}
