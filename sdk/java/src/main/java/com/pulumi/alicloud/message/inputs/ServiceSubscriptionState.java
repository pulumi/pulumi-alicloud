// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.message.inputs;

import com.pulumi.alicloud.message.inputs.ServiceSubscriptionDlqPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceSubscriptionState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceSubscriptionState Empty = new ServiceSubscriptionState();

    /**
     * (Available since v1.244.0) The time when the subscription was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<Integer> createTime;

    /**
     * @return (Available since v1.244.0) The time when the subscription was created.
     * 
     */
    public Optional<Output<Integer>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The dead-letter queue policy. See `dlq_policy` below.
     * 
     */
    @Import(name="dlqPolicy")
    private @Nullable Output<ServiceSubscriptionDlqPolicyArgs> dlqPolicy;

    /**
     * @return The dead-letter queue policy. See `dlq_policy` below.
     * 
     */
    public Optional<Output<ServiceSubscriptionDlqPolicyArgs>> dlqPolicy() {
        return Optional.ofNullable(this.dlqPolicy);
    }

    /**
     * The endpoint has three format. Available values format:
     * - `HTTP Format`: An HTTP URL that starts with http:// or https://.
     * - `Queue Format`: A queue name.
     * - `MPush Format`: An AppKey.
     * - `Sms Format`: A mobile number
     * - `Email Format`: An email address.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return The endpoint has three format. Available values format:
     * - `HTTP Format`: An HTTP URL that starts with http:// or https://.
     * - `Queue Format`: A queue name.
     * - `MPush Format`: An AppKey.
     * - `Sms Format`: A mobile number
     * - `Email Format`: An email address.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
     * 
     */
    @Import(name="filterTag")
    private @Nullable Output<String> filterTag;

    /**
     * @return The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
     * 
     */
    public Optional<Output<String>> filterTag() {
        return Optional.ofNullable(this.filterTag);
    }

    /**
     * The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
     * 
     */
    @Import(name="notifyContentFormat")
    private @Nullable Output<String> notifyContentFormat;

    /**
     * @return The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
     * 
     */
    public Optional<Output<String>> notifyContentFormat() {
        return Optional.ofNullable(this.notifyContentFormat);
    }

    /**
     * The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
     * - `BACKOFF_RETRY`: retries with a fixed backoff interval.
     * - `EXPONENTIAL_DECAY_RETRY`: retries with exponential backoff.
     * 
     */
    @Import(name="notifyStrategy")
    private @Nullable Output<String> notifyStrategy;

    /**
     * @return The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
     * - `BACKOFF_RETRY`: retries with a fixed backoff interval.
     * - `EXPONENTIAL_DECAY_RETRY`: retries with exponential backoff.
     * 
     */
    public Optional<Output<String>> notifyStrategy() {
        return Optional.ofNullable(this.notifyStrategy);
    }

    /**
     * The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
     * 
     */
    @Import(name="pushType")
    private @Nullable Output<String> pushType;

    /**
     * @return The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
     * 
     */
    public Optional<Output<String>> pushType() {
        return Optional.ofNullable(this.pushType);
    }

    /**
     * The STS RoleArn.
     * 
     */
    @Import(name="stsRoleArn")
    private @Nullable Output<String> stsRoleArn;

    /**
     * @return The STS RoleArn.
     * 
     */
    public Optional<Output<String>> stsRoleArn() {
        return Optional.ofNullable(this.stsRoleArn);
    }

    /**
     * Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
     * 
     */
    @Import(name="subscriptionName")
    private @Nullable Output<String> subscriptionName;

    /**
     * @return Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
     * 
     */
    public Optional<Output<String>> subscriptionName() {
        return Optional.ofNullable(this.subscriptionName);
    }

    /**
     * The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
     * 
     */
    @Import(name="topicName")
    private @Nullable Output<String> topicName;

    /**
     * @return The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
     * 
     */
    public Optional<Output<String>> topicName() {
        return Optional.ofNullable(this.topicName);
    }

    private ServiceSubscriptionState() {}

    private ServiceSubscriptionState(ServiceSubscriptionState $) {
        this.createTime = $.createTime;
        this.dlqPolicy = $.dlqPolicy;
        this.endpoint = $.endpoint;
        this.filterTag = $.filterTag;
        this.notifyContentFormat = $.notifyContentFormat;
        this.notifyStrategy = $.notifyStrategy;
        this.pushType = $.pushType;
        this.stsRoleArn = $.stsRoleArn;
        this.subscriptionName = $.subscriptionName;
        this.topicName = $.topicName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceSubscriptionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceSubscriptionState $;

        public Builder() {
            $ = new ServiceSubscriptionState();
        }

        public Builder(ServiceSubscriptionState defaults) {
            $ = new ServiceSubscriptionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime (Available since v1.244.0) The time when the subscription was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<Integer> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime (Available since v1.244.0) The time when the subscription was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(Integer createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dlqPolicy The dead-letter queue policy. See `dlq_policy` below.
         * 
         * @return builder
         * 
         */
        public Builder dlqPolicy(@Nullable Output<ServiceSubscriptionDlqPolicyArgs> dlqPolicy) {
            $.dlqPolicy = dlqPolicy;
            return this;
        }

        /**
         * @param dlqPolicy The dead-letter queue policy. See `dlq_policy` below.
         * 
         * @return builder
         * 
         */
        public Builder dlqPolicy(ServiceSubscriptionDlqPolicyArgs dlqPolicy) {
            return dlqPolicy(Output.of(dlqPolicy));
        }

        /**
         * @param endpoint The endpoint has three format. Available values format:
         * - `HTTP Format`: An HTTP URL that starts with http:// or https://.
         * - `Queue Format`: A queue name.
         * - `MPush Format`: An AppKey.
         * - `Sms Format`: A mobile number
         * - `Email Format`: An email address.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The endpoint has three format. Available values format:
         * - `HTTP Format`: An HTTP URL that starts with http:// or https://.
         * - `Queue Format`: A queue name.
         * - `MPush Format`: An AppKey.
         * - `Sms Format`: A mobile number
         * - `Email Format`: An email address.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param filterTag The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
         * 
         * @return builder
         * 
         */
        public Builder filterTag(@Nullable Output<String> filterTag) {
            $.filterTag = filterTag;
            return this;
        }

        /**
         * @param filterTag The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
         * 
         * @return builder
         * 
         */
        public Builder filterTag(String filterTag) {
            return filterTag(Output.of(filterTag));
        }

        /**
         * @param notifyContentFormat The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
         * 
         * @return builder
         * 
         */
        public Builder notifyContentFormat(@Nullable Output<String> notifyContentFormat) {
            $.notifyContentFormat = notifyContentFormat;
            return this;
        }

        /**
         * @param notifyContentFormat The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
         * 
         * @return builder
         * 
         */
        public Builder notifyContentFormat(String notifyContentFormat) {
            return notifyContentFormat(Output.of(notifyContentFormat));
        }

        /**
         * @param notifyStrategy The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
         * - `BACKOFF_RETRY`: retries with a fixed backoff interval.
         * - `EXPONENTIAL_DECAY_RETRY`: retries with exponential backoff.
         * 
         * @return builder
         * 
         */
        public Builder notifyStrategy(@Nullable Output<String> notifyStrategy) {
            $.notifyStrategy = notifyStrategy;
            return this;
        }

        /**
         * @param notifyStrategy The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
         * - `BACKOFF_RETRY`: retries with a fixed backoff interval.
         * - `EXPONENTIAL_DECAY_RETRY`: retries with exponential backoff.
         * 
         * @return builder
         * 
         */
        public Builder notifyStrategy(String notifyStrategy) {
            return notifyStrategy(Output.of(notifyStrategy));
        }

        /**
         * @param pushType The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
         * 
         * @return builder
         * 
         */
        public Builder pushType(@Nullable Output<String> pushType) {
            $.pushType = pushType;
            return this;
        }

        /**
         * @param pushType The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
         * 
         * @return builder
         * 
         */
        public Builder pushType(String pushType) {
            return pushType(Output.of(pushType));
        }

        /**
         * @param stsRoleArn The STS RoleArn.
         * 
         * @return builder
         * 
         */
        public Builder stsRoleArn(@Nullable Output<String> stsRoleArn) {
            $.stsRoleArn = stsRoleArn;
            return this;
        }

        /**
         * @param stsRoleArn The STS RoleArn.
         * 
         * @return builder
         * 
         */
        public Builder stsRoleArn(String stsRoleArn) {
            return stsRoleArn(Output.of(stsRoleArn));
        }

        /**
         * @param subscriptionName Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionName(@Nullable Output<String> subscriptionName) {
            $.subscriptionName = subscriptionName;
            return this;
        }

        /**
         * @param subscriptionName Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionName(String subscriptionName) {
            return subscriptionName(Output.of(subscriptionName));
        }

        /**
         * @param topicName The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder topicName(@Nullable Output<String> topicName) {
            $.topicName = topicName;
            return this;
        }

        /**
         * @param topicName The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder topicName(String topicName) {
            return topicName(Output.of(topicName));
        }

        public ServiceSubscriptionState build() {
            return $;
        }
    }

}
