// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.threatdetection.WebLockConfigArgs;
import com.pulumi.alicloud.threatdetection.inputs.WebLockConfigState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Threat Detection Web Lock Config resource.
 * 
 * For information about Threat Detection Web Lock Config and how to use it, see [What is Web Lock Config](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-modifyweblockstart).
 * 
 * &gt; **NOTE:** Available in v1.195.0+.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.threatdetection.ThreatdetectionFunctions;
 * import com.pulumi.alicloud.threatdetection.inputs.GetAssetsArgs;
 * import com.pulumi.alicloud.threatdetection.WebLockConfig;
 * import com.pulumi.alicloud.threatdetection.WebLockConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var defaultAssets = ThreatdetectionFunctions.getAssets(GetAssetsArgs.builder()
 *             .machineTypes(&#34;ecs&#34;)
 *             .build());
 * 
 *         var defaultWebLockConfig = new WebLockConfig(&#34;defaultWebLockConfig&#34;, WebLockConfigArgs.builder()        
 *             .inclusiveFileType(&#34;php;jsp;asp;aspx;js;cgi;html;htm;xml;shtml;shtm;jpg&#34;)
 *             .uuid(defaultAssets.applyValue(getAssetsResult -&gt; getAssetsResult.ids()[0]))
 *             .mode(&#34;whitelist&#34;)
 *             .localBackupDir(&#34;/usr/local/aegis/bak&#34;)
 *             .dir(&#34;/tmp/&#34;)
 *             .defenceMode(&#34;audit&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Threat Detection Web Lock Config can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:threatdetection/webLockConfig:WebLockConfig example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:threatdetection/webLockConfig:WebLockConfig")
public class WebLockConfig extends com.pulumi.resources.CustomResource {
    /**
     * Protection mode. Value:-**block**: Intercept-**audit**: Alarm
     * 
     */
    @Export(name="defenceMode", refs={String.class}, tree="[0]")
    private Output<String> defenceMode;

    /**
     * @return Protection mode. Value:-**block**: Intercept-**audit**: Alarm
     * 
     */
    public Output<String> defenceMode() {
        return this.defenceMode;
    }
    /**
     * Specify the protection directory.
     * 
     */
    @Export(name="dir", refs={String.class}, tree="[0]")
    private Output<String> dir;

    /**
     * @return Specify the protection directory.
     * 
     */
    public Output<String> dir() {
        return this.dir;
    }
    /**
     * Specify a directory address that does not require Web tamper protection (I. E. Excluded directories).&gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     * 
     */
    @Export(name="exclusiveDir", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> exclusiveDir;

    /**
     * @return Specify a directory address that does not require Web tamper protection (I. E. Excluded directories).&gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     * 
     */
    public Output<Optional<String>> exclusiveDir() {
        return Codegen.optional(this.exclusiveDir);
    }
    /**
     * Specify files that do not need to enable tamper protection for web pages (that is, exclude files).&gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     * 
     */
    @Export(name="exclusiveFile", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> exclusiveFile;

    /**
     * @return Specify files that do not need to enable tamper protection for web pages (that is, exclude files).&gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     * 
     */
    public Output<Optional<String>> exclusiveFile() {
        return Codegen.optional(this.exclusiveFile);
    }
    /**
     * Specify the type of file that does not require Web tamper protection (that is, the type of excluded file). When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png &gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     * 
     */
    @Export(name="exclusiveFileType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> exclusiveFileType;

    /**
     * @return Specify the type of file that does not require Web tamper protection (that is, the type of excluded file). When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png &gt; The protection Mode **Mode** is set to **blacklist**, you need to configure this parameter.
     * 
     */
    public Output<Optional<String>> exclusiveFileType() {
        return Codegen.optional(this.exclusiveFileType);
    }
    /**
     * Specify the type of file that requires tamper protection. When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png&gt; The protection Mode **Mode** is set to **whitelist**, you need to configure this parameter.
     * 
     */
    @Export(name="inclusiveFileType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> inclusiveFileType;

    /**
     * @return Specify the type of file that requires tamper protection. When there are multiple file types, use semicolons (;) separation. Value:-php-jsp-asp-aspx-js-cgi-html-htm-xml-shtml-shtm-jpg-gif-png&gt; The protection Mode **Mode** is set to **whitelist**, you need to configure this parameter.
     * 
     */
    public Output<Optional<String>> inclusiveFileType() {
        return Codegen.optional(this.inclusiveFileType);
    }
    /**
     * The local backup path is used to protect the safe backup of the Directory.
     * 
     */
    @Export(name="localBackupDir", refs={String.class}, tree="[0]")
    private Output<String> localBackupDir;

    /**
     * @return The local backup path is used to protect the safe backup of the Directory.
     * 
     */
    public Output<String> localBackupDir() {
        return this.localBackupDir;
    }
    /**
     * Specify the protected directory mode. Value:-**whitelist**: whitelist mode, which protects the added protected directories and file types.-**blacklist**: blacklist mode, which protects all unexcluded subdirectories, file types, and specified files under the added protection directory.
     * 
     */
    @Export(name="mode", refs={String.class}, tree="[0]")
    private Output<String> mode;

    /**
     * @return Specify the protected directory mode. Value:-**whitelist**: whitelist mode, which protects the added protected directories and file types.-**blacklist**: blacklist mode, which protects all unexcluded subdirectories, file types, and specified files under the added protection directory.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }
    /**
     * Specify the UUID of the server to which you want to add a protection directory.&gt; You can call the DescribeCloudCenterInstances interface to obtain the UUID of the server.
     * 
     */
    @Export(name="uuid", refs={String.class}, tree="[0]")
    private Output<String> uuid;

    /**
     * @return Specify the UUID of the server to which you want to add a protection directory.&gt; You can call the DescribeCloudCenterInstances interface to obtain the UUID of the server.
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WebLockConfig(String name) {
        this(name, WebLockConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WebLockConfig(String name, WebLockConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WebLockConfig(String name, WebLockConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:threatdetection/webLockConfig:WebLockConfig", name, args == null ? WebLockConfigArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private WebLockConfig(String name, Output<String> id, @Nullable WebLockConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:threatdetection/webLockConfig:WebLockConfig", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WebLockConfig get(String name, Output<String> id, @Nullable WebLockConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new WebLockConfig(name, id, state, options);
    }
}
