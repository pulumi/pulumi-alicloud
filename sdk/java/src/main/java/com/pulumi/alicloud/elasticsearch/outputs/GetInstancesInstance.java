// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.elasticsearch.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetInstancesInstance {
    private String createdAt;
    private Integer dataNodeAmount;
    private Integer dataNodeDiskSize;
    private String dataNodeDiskType;
    private String dataNodeSpec;
    private String description;
    private String id;
    private String instanceChargeType;
    private String status;
    private Map<String,Object> tags;
    private String updatedAt;
    private String version;
    private String vswitchId;

    private GetInstancesInstance() {}
    public String createdAt() {
        return this.createdAt;
    }
    public Integer dataNodeAmount() {
        return this.dataNodeAmount;
    }
    public Integer dataNodeDiskSize() {
        return this.dataNodeDiskSize;
    }
    public String dataNodeDiskType() {
        return this.dataNodeDiskType;
    }
    public String dataNodeSpec() {
        return this.dataNodeSpec;
    }
    public String description() {
        return this.description;
    }
    public String id() {
        return this.id;
    }
    public String instanceChargeType() {
        return this.instanceChargeType;
    }
    public String status() {
        return this.status;
    }
    public Map<String,Object> tags() {
        return this.tags;
    }
    public String updatedAt() {
        return this.updatedAt;
    }
    public String version() {
        return this.version;
    }
    public String vswitchId() {
        return this.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private Integer dataNodeAmount;
        private Integer dataNodeDiskSize;
        private String dataNodeDiskType;
        private String dataNodeSpec;
        private String description;
        private String id;
        private String instanceChargeType;
        private String status;
        private Map<String,Object> tags;
        private String updatedAt;
        private String version;
        private String vswitchId;
        public Builder() {}
        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.dataNodeAmount = defaults.dataNodeAmount;
    	      this.dataNodeDiskSize = defaults.dataNodeDiskSize;
    	      this.dataNodeDiskType = defaults.dataNodeDiskType;
    	      this.dataNodeSpec = defaults.dataNodeSpec;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.instanceChargeType = defaults.instanceChargeType;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updatedAt = defaults.updatedAt;
    	      this.version = defaults.version;
    	      this.vswitchId = defaults.vswitchId;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder dataNodeAmount(Integer dataNodeAmount) {
            this.dataNodeAmount = Objects.requireNonNull(dataNodeAmount);
            return this;
        }
        @CustomType.Setter
        public Builder dataNodeDiskSize(Integer dataNodeDiskSize) {
            this.dataNodeDiskSize = Objects.requireNonNull(dataNodeDiskSize);
            return this;
        }
        @CustomType.Setter
        public Builder dataNodeDiskType(String dataNodeDiskType) {
            this.dataNodeDiskType = Objects.requireNonNull(dataNodeDiskType);
            return this;
        }
        @CustomType.Setter
        public Builder dataNodeSpec(String dataNodeSpec) {
            this.dataNodeSpec = Objects.requireNonNull(dataNodeSpec);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceChargeType(String instanceChargeType) {
            this.instanceChargeType = Objects.requireNonNull(instanceChargeType);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        public GetInstancesInstance build() {
            final var o = new GetInstancesInstance();
            o.createdAt = createdAt;
            o.dataNodeAmount = dataNodeAmount;
            o.dataNodeDiskSize = dataNodeDiskSize;
            o.dataNodeDiskType = dataNodeDiskType;
            o.dataNodeSpec = dataNodeSpec;
            o.description = description;
            o.id = id;
            o.instanceChargeType = instanceChargeType;
            o.status = status;
            o.tags = tags;
            o.updatedAt = updatedAt;
            o.version = version;
            o.vswitchId = vswitchId;
            return o;
        }
    }
}
