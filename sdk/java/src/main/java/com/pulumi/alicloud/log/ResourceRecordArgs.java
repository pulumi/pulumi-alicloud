// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.log;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ResourceRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceRecordArgs Empty = new ResourceRecordArgs();

    /**
     * The record&#39;s id, should be unique.
     * 
     */
    @Import(name="recordId", required=true)
    private Output<String> recordId;

    /**
     * @return The record&#39;s id, should be unique.
     * 
     */
    public Output<String> recordId() {
        return this.recordId;
    }

    /**
     * The name defined in log_resource, log service have some internal resource, like sls.common.user, sls.common.user_group.
     * 
     */
    @Import(name="resourceName", required=true)
    private Output<String> resourceName;

    /**
     * @return The name defined in log_resource, log service have some internal resource, like sls.common.user, sls.common.user_group.
     * 
     */
    public Output<String> resourceName() {
        return this.resourceName;
    }

    /**
     * The record&#39;s tag, can be used for search.
     * 
     */
    @Import(name="tag", required=true)
    private Output<String> tag;

    /**
     * @return The record&#39;s tag, can be used for search.
     * 
     */
    public Output<String> tag() {
        return this.tag;
    }

    /**
     * The json value of record.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The json value of record.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private ResourceRecordArgs() {}

    private ResourceRecordArgs(ResourceRecordArgs $) {
        this.recordId = $.recordId;
        this.resourceName = $.resourceName;
        this.tag = $.tag;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceRecordArgs $;

        public Builder() {
            $ = new ResourceRecordArgs();
        }

        public Builder(ResourceRecordArgs defaults) {
            $ = new ResourceRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param recordId The record&#39;s id, should be unique.
         * 
         * @return builder
         * 
         */
        public Builder recordId(Output<String> recordId) {
            $.recordId = recordId;
            return this;
        }

        /**
         * @param recordId The record&#39;s id, should be unique.
         * 
         * @return builder
         * 
         */
        public Builder recordId(String recordId) {
            return recordId(Output.of(recordId));
        }

        /**
         * @param resourceName The name defined in log_resource, log service have some internal resource, like sls.common.user, sls.common.user_group.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName The name defined in log_resource, log service have some internal resource, like sls.common.user, sls.common.user_group.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param tag The record&#39;s tag, can be used for search.
         * 
         * @return builder
         * 
         */
        public Builder tag(Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag The record&#39;s tag, can be used for search.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        /**
         * @param value The json value of record.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The json value of record.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public ResourceRecordArgs build() {
            if ($.recordId == null) {
                throw new MissingRequiredPropertyException("ResourceRecordArgs", "recordId");
            }
            if ($.resourceName == null) {
                throw new MissingRequiredPropertyException("ResourceRecordArgs", "resourceName");
            }
            if ($.tag == null) {
                throw new MissingRequiredPropertyException("ResourceRecordArgs", "tag");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("ResourceRecordArgs", "value");
            }
            return $;
        }
    }

}
