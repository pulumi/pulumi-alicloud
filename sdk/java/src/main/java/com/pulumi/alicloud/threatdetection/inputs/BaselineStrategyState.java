// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BaselineStrategyState extends com.pulumi.resources.ResourceArgs {

    public static final BaselineStrategyState Empty = new BaselineStrategyState();

    /**
     * The ID of the baseline check policy.
     * 
     */
    @Import(name="baselineStrategyId")
    private @Nullable Output<String> baselineStrategyId;

    /**
     * @return The ID of the baseline check policy.
     * 
     */
    public Optional<Output<String>> baselineStrategyId() {
        return Optional.ofNullable(this.baselineStrategyId);
    }

    /**
     * Policy name.
     * 
     */
    @Import(name="baselineStrategyName")
    private @Nullable Output<String> baselineStrategyName;

    /**
     * @return Policy name.
     * 
     */
    public Optional<Output<String>> baselineStrategyName() {
        return Optional.ofNullable(this.baselineStrategyName);
    }

    /**
     * The type of policy. Value:
     * * **common**: standard policy
     * * **custom**: custom policy
     * 
     */
    @Import(name="customType")
    private @Nullable Output<String> customType;

    /**
     * @return The type of policy. Value:
     * * **common**: standard policy
     * * **custom**: custom policy
     * 
     */
    public Optional<Output<String>> customType() {
        return Optional.ofNullable(this.customType);
    }

    /**
     * The detection period of the policy.
     * 
     */
    @Import(name="cycleDays")
    private @Nullable Output<Integer> cycleDays;

    /**
     * @return The detection period of the policy.
     * 
     */
    public Optional<Output<Integer>> cycleDays() {
        return Optional.ofNullable(this.cycleDays);
    }

    /**
     * The detection period of the policy. Value:
     * * **0**: 0:00~06:00
     * * **6**: 6:00~12:00
     * * **12**: 12:00~18:00
     * * **18**: 18:00~24:00
     * 
     */
    @Import(name="cycleStartTime")
    private @Nullable Output<Integer> cycleStartTime;

    /**
     * @return The detection period of the policy. Value:
     * * **0**: 0:00~06:00
     * * **6**: 6:00~12:00
     * * **12**: 12:00~18:00
     * * **18**: 18:00~24:00
     * 
     */
    public Optional<Output<Integer>> cycleStartTime() {
        return Optional.ofNullable(this.cycleStartTime);
    }

    /**
     * The baseline check policy execution end time.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return The baseline check policy execution end time.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * Detection item subtype.
     * 
     */
    @Import(name="riskSubTypeName")
    private @Nullable Output<String> riskSubTypeName;

    /**
     * @return Detection item subtype.
     * 
     */
    public Optional<Output<String>> riskSubTypeName() {
        return Optional.ofNullable(this.riskSubTypeName);
    }

    /**
     * The baseline check policy start time.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The baseline check policy start time.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The method of adding assets that take effect from the policy. Value:
     * * **groupId**: Added by asset group.
     * * **uuid**: Add by single asset.
     * 
     */
    @Import(name="targetType")
    private @Nullable Output<String> targetType;

    /**
     * @return The method of adding assets that take effect from the policy. Value:
     * * **groupId**: Added by asset group.
     * * **uuid**: Add by single asset.
     * 
     */
    public Optional<Output<String>> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    private BaselineStrategyState() {}

    private BaselineStrategyState(BaselineStrategyState $) {
        this.baselineStrategyId = $.baselineStrategyId;
        this.baselineStrategyName = $.baselineStrategyName;
        this.customType = $.customType;
        this.cycleDays = $.cycleDays;
        this.cycleStartTime = $.cycleStartTime;
        this.endTime = $.endTime;
        this.riskSubTypeName = $.riskSubTypeName;
        this.startTime = $.startTime;
        this.targetType = $.targetType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BaselineStrategyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BaselineStrategyState $;

        public Builder() {
            $ = new BaselineStrategyState();
        }

        public Builder(BaselineStrategyState defaults) {
            $ = new BaselineStrategyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param baselineStrategyId The ID of the baseline check policy.
         * 
         * @return builder
         * 
         */
        public Builder baselineStrategyId(@Nullable Output<String> baselineStrategyId) {
            $.baselineStrategyId = baselineStrategyId;
            return this;
        }

        /**
         * @param baselineStrategyId The ID of the baseline check policy.
         * 
         * @return builder
         * 
         */
        public Builder baselineStrategyId(String baselineStrategyId) {
            return baselineStrategyId(Output.of(baselineStrategyId));
        }

        /**
         * @param baselineStrategyName Policy name.
         * 
         * @return builder
         * 
         */
        public Builder baselineStrategyName(@Nullable Output<String> baselineStrategyName) {
            $.baselineStrategyName = baselineStrategyName;
            return this;
        }

        /**
         * @param baselineStrategyName Policy name.
         * 
         * @return builder
         * 
         */
        public Builder baselineStrategyName(String baselineStrategyName) {
            return baselineStrategyName(Output.of(baselineStrategyName));
        }

        /**
         * @param customType The type of policy. Value:
         * * **common**: standard policy
         * * **custom**: custom policy
         * 
         * @return builder
         * 
         */
        public Builder customType(@Nullable Output<String> customType) {
            $.customType = customType;
            return this;
        }

        /**
         * @param customType The type of policy. Value:
         * * **common**: standard policy
         * * **custom**: custom policy
         * 
         * @return builder
         * 
         */
        public Builder customType(String customType) {
            return customType(Output.of(customType));
        }

        /**
         * @param cycleDays The detection period of the policy.
         * 
         * @return builder
         * 
         */
        public Builder cycleDays(@Nullable Output<Integer> cycleDays) {
            $.cycleDays = cycleDays;
            return this;
        }

        /**
         * @param cycleDays The detection period of the policy.
         * 
         * @return builder
         * 
         */
        public Builder cycleDays(Integer cycleDays) {
            return cycleDays(Output.of(cycleDays));
        }

        /**
         * @param cycleStartTime The detection period of the policy. Value:
         * * **0**: 0:00~06:00
         * * **6**: 6:00~12:00
         * * **12**: 12:00~18:00
         * * **18**: 18:00~24:00
         * 
         * @return builder
         * 
         */
        public Builder cycleStartTime(@Nullable Output<Integer> cycleStartTime) {
            $.cycleStartTime = cycleStartTime;
            return this;
        }

        /**
         * @param cycleStartTime The detection period of the policy. Value:
         * * **0**: 0:00~06:00
         * * **6**: 6:00~12:00
         * * **12**: 12:00~18:00
         * * **18**: 18:00~24:00
         * 
         * @return builder
         * 
         */
        public Builder cycleStartTime(Integer cycleStartTime) {
            return cycleStartTime(Output.of(cycleStartTime));
        }

        /**
         * @param endTime The baseline check policy execution end time.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The baseline check policy execution end time.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param riskSubTypeName Detection item subtype.
         * 
         * @return builder
         * 
         */
        public Builder riskSubTypeName(@Nullable Output<String> riskSubTypeName) {
            $.riskSubTypeName = riskSubTypeName;
            return this;
        }

        /**
         * @param riskSubTypeName Detection item subtype.
         * 
         * @return builder
         * 
         */
        public Builder riskSubTypeName(String riskSubTypeName) {
            return riskSubTypeName(Output.of(riskSubTypeName));
        }

        /**
         * @param startTime The baseline check policy start time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The baseline check policy start time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param targetType The method of adding assets that take effect from the policy. Value:
         * * **groupId**: Added by asset group.
         * * **uuid**: Add by single asset.
         * 
         * @return builder
         * 
         */
        public Builder targetType(@Nullable Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType The method of adding assets that take effect from the policy. Value:
         * * **groupId**: Added by asset group.
         * * **uuid**: Add by single asset.
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        public BaselineStrategyState build() {
            return $;
        }
    }

}
