// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.adb.inputs;

import com.pulumi.alicloud.adb.inputs.LakeAccountAccountPrivilegeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LakeAccountState extends com.pulumi.resources.ResourceArgs {

    public static final LakeAccountState Empty = new LakeAccountState();

    /**
     * The description of the account.
     * 
     */
    @Import(name="accountDescription")
    private @Nullable Output<String> accountDescription;

    /**
     * @return The description of the account.
     * 
     */
    public Optional<Output<String>> accountDescription() {
        return Optional.ofNullable(this.accountDescription);
    }

    /**
     * The name of the account.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return The name of the account.
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * AccountPassword.
     * 
     */
    @Import(name="accountPassword")
    private @Nullable Output<String> accountPassword;

    /**
     * @return AccountPassword.
     * 
     */
    public Optional<Output<String>> accountPassword() {
        return Optional.ofNullable(this.accountPassword);
    }

    /**
     * List of permissions granted. See `account_privileges` below.
     * 
     */
    @Import(name="accountPrivileges")
    private @Nullable Output<List<LakeAccountAccountPrivilegeArgs>> accountPrivileges;

    /**
     * @return List of permissions granted. See `account_privileges` below.
     * 
     */
    public Optional<Output<List<LakeAccountAccountPrivilegeArgs>>> accountPrivileges() {
        return Optional.ofNullable(this.accountPrivileges);
    }

    /**
     * The type of the account.
     * 
     */
    @Import(name="accountType")
    private @Nullable Output<String> accountType;

    /**
     * @return The type of the account.
     * 
     */
    public Optional<Output<String>> accountType() {
        return Optional.ofNullable(this.accountType);
    }

    /**
     * The DBCluster ID.
     * 
     */
    @Import(name="dbClusterId")
    private @Nullable Output<String> dbClusterId;

    /**
     * @return The DBCluster ID.
     * 
     */
    public Optional<Output<String>> dbClusterId() {
        return Optional.ofNullable(this.dbClusterId);
    }

    /**
     * The status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private LakeAccountState() {}

    private LakeAccountState(LakeAccountState $) {
        this.accountDescription = $.accountDescription;
        this.accountName = $.accountName;
        this.accountPassword = $.accountPassword;
        this.accountPrivileges = $.accountPrivileges;
        this.accountType = $.accountType;
        this.dbClusterId = $.dbClusterId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LakeAccountState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LakeAccountState $;

        public Builder() {
            $ = new LakeAccountState();
        }

        public Builder(LakeAccountState defaults) {
            $ = new LakeAccountState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountDescription The description of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountDescription(@Nullable Output<String> accountDescription) {
            $.accountDescription = accountDescription;
            return this;
        }

        /**
         * @param accountDescription The description of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountDescription(String accountDescription) {
            return accountDescription(Output.of(accountDescription));
        }

        /**
         * @param accountName The name of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param accountPassword AccountPassword.
         * 
         * @return builder
         * 
         */
        public Builder accountPassword(@Nullable Output<String> accountPassword) {
            $.accountPassword = accountPassword;
            return this;
        }

        /**
         * @param accountPassword AccountPassword.
         * 
         * @return builder
         * 
         */
        public Builder accountPassword(String accountPassword) {
            return accountPassword(Output.of(accountPassword));
        }

        /**
         * @param accountPrivileges List of permissions granted. See `account_privileges` below.
         * 
         * @return builder
         * 
         */
        public Builder accountPrivileges(@Nullable Output<List<LakeAccountAccountPrivilegeArgs>> accountPrivileges) {
            $.accountPrivileges = accountPrivileges;
            return this;
        }

        /**
         * @param accountPrivileges List of permissions granted. See `account_privileges` below.
         * 
         * @return builder
         * 
         */
        public Builder accountPrivileges(List<LakeAccountAccountPrivilegeArgs> accountPrivileges) {
            return accountPrivileges(Output.of(accountPrivileges));
        }

        /**
         * @param accountPrivileges List of permissions granted. See `account_privileges` below.
         * 
         * @return builder
         * 
         */
        public Builder accountPrivileges(LakeAccountAccountPrivilegeArgs... accountPrivileges) {
            return accountPrivileges(List.of(accountPrivileges));
        }

        /**
         * @param accountType The type of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountType(@Nullable Output<String> accountType) {
            $.accountType = accountType;
            return this;
        }

        /**
         * @param accountType The type of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountType(String accountType) {
            return accountType(Output.of(accountType));
        }

        /**
         * @param dbClusterId The DBCluster ID.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterId(@Nullable Output<String> dbClusterId) {
            $.dbClusterId = dbClusterId;
            return this;
        }

        /**
         * @param dbClusterId The DBCluster ID.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterId(String dbClusterId) {
            return dbClusterId(Output.of(dbClusterId));
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public LakeAccountState build() {
            return $;
        }
    }

}
