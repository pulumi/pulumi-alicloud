// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.selectdb;

import com.pulumi.alicloud.selectdb.inputs.DbInstanceDesiredSecurityIpListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbInstanceArgs Empty = new DbInstanceArgs();

    /**
     * The cache size in DBInstance on creating default cluster. The number should be divided by 100.
     * 
     */
    @Import(name="cacheSize", required=true)
    private Output<Integer> cacheSize;

    /**
     * @return The cache size in DBInstance on creating default cluster. The number should be divided by 100.
     * 
     */
    public Output<Integer> cacheSize() {
        return this.cacheSize;
    }

    /**
     * The class for default cluster in DBInstance. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     * 
     */
    @Import(name="dbInstanceClass", required=true)
    private Output<String> dbInstanceClass;

    /**
     * @return The class for default cluster in DBInstance. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     * 
     */
    public Output<String> dbInstanceClass() {
        return this.dbInstanceClass;
    }

    /**
     * The DBInstance description.
     * 
     */
    @Import(name="dbInstanceDescription", required=true)
    private Output<String> dbInstanceDescription;

    /**
     * @return The DBInstance description.
     * 
     */
    public Output<String> dbInstanceDescription() {
        return this.dbInstanceDescription;
    }

    /**
     * The modified IP address whitelists. See `desired_security_ip_lists` below.
     * 
     */
    @Import(name="desiredSecurityIpLists")
    private @Nullable Output<List<DbInstanceDesiredSecurityIpListArgs>> desiredSecurityIpLists;

    /**
     * @return The modified IP address whitelists. See `desired_security_ip_lists` below.
     * 
     */
    public Optional<Output<List<DbInstanceDesiredSecurityIpListArgs>>> desiredSecurityIpLists() {
        return Optional.ofNullable(this.desiredSecurityIpLists);
    }

    /**
     * If DBInstance need to open public network, set it to `true`.
     * 
     */
    @Import(name="enablePublicNetwork")
    private @Nullable Output<Boolean> enablePublicNetwork;

    /**
     * @return If DBInstance need to open public network, set it to `true`.
     * 
     */
    public Optional<Output<Boolean>> enablePublicNetwork() {
        return Optional.ofNullable(this.enablePublicNetwork);
    }

    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    @Import(name="paymentType", required=true)
    private Output<String> paymentType;

    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    public Output<String> paymentType() {
        return this.paymentType;
    }

    /**
     * It is valid when payment_type is `Subscription`. Valid values are `Year`, `Month`.
     * 
     */
    @Import(name="period")
    private @Nullable Output<String> period;

    /**
     * @return It is valid when payment_type is `Subscription`. Valid values are `Year`, `Month`.
     * 
     */
    public Optional<Output<String>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The duration that you will buy DBInstance. It is valid when payment_type is `Subscription`. Valid values: [1~9], 12, 24, 36.
     * 
     */
    @Import(name="periodTime")
    private @Nullable Output<Integer> periodTime;

    /**
     * @return The duration that you will buy DBInstance. It is valid when payment_type is `Subscription`. Valid values: [1~9], 12, 24, 36.
     * 
     */
    public Optional<Output<Integer>> periodTime() {
        return Optional.ofNullable(this.periodTime);
    }

    /**
     * A mapping of tags to assign to the resource.
     * - Key: It can be up to 64 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It cannot be a null string.
     * - Value: It can be up to 128 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It can be a null string.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * - Key: It can be up to 64 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It cannot be a null string.
     * - Value: It can be up to 128 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It can be a null string.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The DBInstance minor version want to upgraded to.
     * 
     */
    @Import(name="upgradedEngineMinorVersion")
    private @Nullable Output<String> upgradedEngineMinorVersion;

    /**
     * @return The DBInstance minor version want to upgraded to.
     * 
     */
    public Optional<Output<String>> upgradedEngineMinorVersion() {
        return Optional.ofNullable(this.upgradedEngineMinorVersion);
    }

    /**
     * The ID of the VPC for DBInstance.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The ID of the VPC for DBInstance.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * The ID of vswitch for DBInstance.
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return The ID of vswitch for DBInstance.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    /**
     * The ID of zone for DBInstance.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The ID of zone for DBInstance.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private DbInstanceArgs() {}

    private DbInstanceArgs(DbInstanceArgs $) {
        this.cacheSize = $.cacheSize;
        this.dbInstanceClass = $.dbInstanceClass;
        this.dbInstanceDescription = $.dbInstanceDescription;
        this.desiredSecurityIpLists = $.desiredSecurityIpLists;
        this.enablePublicNetwork = $.enablePublicNetwork;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.periodTime = $.periodTime;
        this.tags = $.tags;
        this.upgradedEngineMinorVersion = $.upgradedEngineMinorVersion;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbInstanceArgs $;

        public Builder() {
            $ = new DbInstanceArgs();
        }

        public Builder(DbInstanceArgs defaults) {
            $ = new DbInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheSize The cache size in DBInstance on creating default cluster. The number should be divided by 100.
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(Output<Integer> cacheSize) {
            $.cacheSize = cacheSize;
            return this;
        }

        /**
         * @param cacheSize The cache size in DBInstance on creating default cluster. The number should be divided by 100.
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(Integer cacheSize) {
            return cacheSize(Output.of(cacheSize));
        }

        /**
         * @param dbInstanceClass The class for default cluster in DBInstance. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceClass(Output<String> dbInstanceClass) {
            $.dbInstanceClass = dbInstanceClass;
            return this;
        }

        /**
         * @param dbInstanceClass The class for default cluster in DBInstance. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceClass(String dbInstanceClass) {
            return dbInstanceClass(Output.of(dbInstanceClass));
        }

        /**
         * @param dbInstanceDescription The DBInstance description.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceDescription(Output<String> dbInstanceDescription) {
            $.dbInstanceDescription = dbInstanceDescription;
            return this;
        }

        /**
         * @param dbInstanceDescription The DBInstance description.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceDescription(String dbInstanceDescription) {
            return dbInstanceDescription(Output.of(dbInstanceDescription));
        }

        /**
         * @param desiredSecurityIpLists The modified IP address whitelists. See `desired_security_ip_lists` below.
         * 
         * @return builder
         * 
         */
        public Builder desiredSecurityIpLists(@Nullable Output<List<DbInstanceDesiredSecurityIpListArgs>> desiredSecurityIpLists) {
            $.desiredSecurityIpLists = desiredSecurityIpLists;
            return this;
        }

        /**
         * @param desiredSecurityIpLists The modified IP address whitelists. See `desired_security_ip_lists` below.
         * 
         * @return builder
         * 
         */
        public Builder desiredSecurityIpLists(List<DbInstanceDesiredSecurityIpListArgs> desiredSecurityIpLists) {
            return desiredSecurityIpLists(Output.of(desiredSecurityIpLists));
        }

        /**
         * @param desiredSecurityIpLists The modified IP address whitelists. See `desired_security_ip_lists` below.
         * 
         * @return builder
         * 
         */
        public Builder desiredSecurityIpLists(DbInstanceDesiredSecurityIpListArgs... desiredSecurityIpLists) {
            return desiredSecurityIpLists(List.of(desiredSecurityIpLists));
        }

        /**
         * @param enablePublicNetwork If DBInstance need to open public network, set it to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enablePublicNetwork(@Nullable Output<Boolean> enablePublicNetwork) {
            $.enablePublicNetwork = enablePublicNetwork;
            return this;
        }

        /**
         * @param enablePublicNetwork If DBInstance need to open public network, set it to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enablePublicNetwork(Boolean enablePublicNetwork) {
            return enablePublicNetwork(Output.of(enablePublicNetwork));
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period It is valid when payment_type is `Subscription`. Valid values are `Year`, `Month`.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<String> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period It is valid when payment_type is `Subscription`. Valid values are `Year`, `Month`.
         * 
         * @return builder
         * 
         */
        public Builder period(String period) {
            return period(Output.of(period));
        }

        /**
         * @param periodTime The duration that you will buy DBInstance. It is valid when payment_type is `Subscription`. Valid values: [1~9], 12, 24, 36.
         * 
         * @return builder
         * 
         */
        public Builder periodTime(@Nullable Output<Integer> periodTime) {
            $.periodTime = periodTime;
            return this;
        }

        /**
         * @param periodTime The duration that you will buy DBInstance. It is valid when payment_type is `Subscription`. Valid values: [1~9], 12, 24, 36.
         * 
         * @return builder
         * 
         */
        public Builder periodTime(Integer periodTime) {
            return periodTime(Output.of(periodTime));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * - Key: It can be up to 64 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It cannot be a null string.
         * - Value: It can be up to 128 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It can be a null string.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * - Key: It can be up to 64 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It cannot be a null string.
         * - Value: It can be up to 128 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It can be a null string.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param upgradedEngineMinorVersion The DBInstance minor version want to upgraded to.
         * 
         * @return builder
         * 
         */
        public Builder upgradedEngineMinorVersion(@Nullable Output<String> upgradedEngineMinorVersion) {
            $.upgradedEngineMinorVersion = upgradedEngineMinorVersion;
            return this;
        }

        /**
         * @param upgradedEngineMinorVersion The DBInstance minor version want to upgraded to.
         * 
         * @return builder
         * 
         */
        public Builder upgradedEngineMinorVersion(String upgradedEngineMinorVersion) {
            return upgradedEngineMinorVersion(Output.of(upgradedEngineMinorVersion));
        }

        /**
         * @param vpcId The ID of the VPC for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of vswitch for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of vswitch for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The ID of zone for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The ID of zone for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public DbInstanceArgs build() {
            if ($.cacheSize == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "cacheSize");
            }
            if ($.dbInstanceClass == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "dbInstanceClass");
            }
            if ($.dbInstanceDescription == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "dbInstanceDescription");
            }
            if ($.paymentType == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "paymentType");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "vpcId");
            }
            if ($.vswitchId == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "vswitchId");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "zoneId");
            }
            return $;
        }
    }

}
