// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.pvtz;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneRecordArgs Empty = new ZoneRecordArgs();

    /**
     * User language.
     * 
     */
    @Import(name="lang")
    private @Nullable Output<String> lang;

    /**
     * @return User language.
     * 
     */
    public Optional<Output<String>> lang() {
        return Optional.ofNullable(this.lang);
    }

    /**
     * The priority of the Private Zone Record. At present, only can &#34;MX&#34; record support it. Valid values: [1-99]. Default to 1.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The priority of the Private Zone Record. At present, only can &#34;MX&#34; record support it. Valid values: [1-99]. Default to 1.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The remark of the Private Zone Record.
     * 
     */
    @Import(name="remark")
    private @Nullable Output<String> remark;

    /**
     * @return The remark of the Private Zone Record.
     * 
     */
    public Optional<Output<String>> remark() {
        return Optional.ofNullable(this.remark);
    }

    /**
     * The resource record of the Private Zone Record.
     * 
     * @deprecated
     * Field &#39;resource_record&#39; has been deprecated from version 1.109.0. Use &#39;rr&#39; instead.
     * 
     */
    @Deprecated /* Field 'resource_record' has been deprecated from version 1.109.0. Use 'rr' instead. */
    @Import(name="resourceRecord")
    private @Nullable Output<String> resourceRecord;

    /**
     * @return The resource record of the Private Zone Record.
     * 
     * @deprecated
     * Field &#39;resource_record&#39; has been deprecated from version 1.109.0. Use &#39;rr&#39; instead.
     * 
     */
    @Deprecated /* Field 'resource_record' has been deprecated from version 1.109.0. Use 'rr' instead. */
    public Optional<Output<String>> resourceRecord() {
        return Optional.ofNullable(this.resourceRecord);
    }

    /**
     * The rr of the Private Zone Record.
     * 
     */
    @Import(name="rr")
    private @Nullable Output<String> rr;

    /**
     * @return The rr of the Private Zone Record.
     * 
     */
    public Optional<Output<String>> rr() {
        return Optional.ofNullable(this.rr);
    }

    /**
     * Resolve record status. Value:
     * - ENABLE: enable resolution.
     * - DISABLE: pause parsing.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Resolve record status. Value:
     * - ENABLE: enable resolution.
     * - DISABLE: pause parsing.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ttl of the Private Zone Record. Default to `60`.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return The ttl of the Private Zone Record. Default to `60`.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * The type of the Private Zone Record. Valid values: A, CNAME, TXT, MX, PTR, SRV.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the Private Zone Record. Valid values: A, CNAME, TXT, MX, PTR, SRV.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    @Import(name="userClientIp")
    private @Nullable Output<String> userClientIp;

    public Optional<Output<String>> userClientIp() {
        return Optional.ofNullable(this.userClientIp);
    }

    /**
     * The value of the Private Zone Record.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The value of the Private Zone Record.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    /**
     * The name of the Private Zone Record.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The name of the Private Zone Record.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private ZoneRecordArgs() {}

    private ZoneRecordArgs(ZoneRecordArgs $) {
        this.lang = $.lang;
        this.priority = $.priority;
        this.remark = $.remark;
        this.resourceRecord = $.resourceRecord;
        this.rr = $.rr;
        this.status = $.status;
        this.ttl = $.ttl;
        this.type = $.type;
        this.userClientIp = $.userClientIp;
        this.value = $.value;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneRecordArgs $;

        public Builder() {
            $ = new ZoneRecordArgs();
        }

        public Builder(ZoneRecordArgs defaults) {
            $ = new ZoneRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lang User language.
         * 
         * @return builder
         * 
         */
        public Builder lang(@Nullable Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang User language.
         * 
         * @return builder
         * 
         */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param priority The priority of the Private Zone Record. At present, only can &#34;MX&#34; record support it. Valid values: [1-99]. Default to 1.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the Private Zone Record. At present, only can &#34;MX&#34; record support it. Valid values: [1-99]. Default to 1.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param remark The remark of the Private Zone Record.
         * 
         * @return builder
         * 
         */
        public Builder remark(@Nullable Output<String> remark) {
            $.remark = remark;
            return this;
        }

        /**
         * @param remark The remark of the Private Zone Record.
         * 
         * @return builder
         * 
         */
        public Builder remark(String remark) {
            return remark(Output.of(remark));
        }

        /**
         * @param resourceRecord The resource record of the Private Zone Record.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;resource_record&#39; has been deprecated from version 1.109.0. Use &#39;rr&#39; instead.
         * 
         */
        @Deprecated /* Field 'resource_record' has been deprecated from version 1.109.0. Use 'rr' instead. */
        public Builder resourceRecord(@Nullable Output<String> resourceRecord) {
            $.resourceRecord = resourceRecord;
            return this;
        }

        /**
         * @param resourceRecord The resource record of the Private Zone Record.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;resource_record&#39; has been deprecated from version 1.109.0. Use &#39;rr&#39; instead.
         * 
         */
        @Deprecated /* Field 'resource_record' has been deprecated from version 1.109.0. Use 'rr' instead. */
        public Builder resourceRecord(String resourceRecord) {
            return resourceRecord(Output.of(resourceRecord));
        }

        /**
         * @param rr The rr of the Private Zone Record.
         * 
         * @return builder
         * 
         */
        public Builder rr(@Nullable Output<String> rr) {
            $.rr = rr;
            return this;
        }

        /**
         * @param rr The rr of the Private Zone Record.
         * 
         * @return builder
         * 
         */
        public Builder rr(String rr) {
            return rr(Output.of(rr));
        }

        /**
         * @param status Resolve record status. Value:
         * - ENABLE: enable resolution.
         * - DISABLE: pause parsing.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Resolve record status. Value:
         * - ENABLE: enable resolution.
         * - DISABLE: pause parsing.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param ttl The ttl of the Private Zone Record. Default to `60`.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The ttl of the Private Zone Record. Default to `60`.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param type The type of the Private Zone Record. Valid values: A, CNAME, TXT, MX, PTR, SRV.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the Private Zone Record. Valid values: A, CNAME, TXT, MX, PTR, SRV.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder userClientIp(@Nullable Output<String> userClientIp) {
            $.userClientIp = userClientIp;
            return this;
        }

        public Builder userClientIp(String userClientIp) {
            return userClientIp(Output.of(userClientIp));
        }

        /**
         * @param value The value of the Private Zone Record.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value of the Private Zone Record.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param zoneId The name of the Private Zone Record.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The name of the Private Zone Record.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ZoneRecordArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ZoneRecordArgs", "type");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("ZoneRecordArgs", "value");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("ZoneRecordArgs", "zoneId");
            }
            return $;
        }
    }

}
