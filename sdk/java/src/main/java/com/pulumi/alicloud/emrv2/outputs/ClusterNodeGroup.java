// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.emrv2.outputs;

import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupAckConfig;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupAutoScalingPolicy;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupCostOptimizedConfig;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupDataDisk;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupPrivatePoolOptions;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupSpotBidPrice;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupSubscriptionConfig;
import com.pulumi.alicloud.emrv2.outputs.ClusterNodeGroupSystemDisk;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterNodeGroup {
    /**
     * @return The node group of ack configuration for emr cluster to deploying on kubernetes. See `ack_config` below.
     * 
     */
    private @Nullable ClusterNodeGroupAckConfig ackConfig;
    /**
     * @return Additional security Group IDS for Cluster, you can also specify this key for each node group. **NOTE:** From version 1.236.0, `additional_security_group_ids` can be modified.
     * 
     */
    private @Nullable List<String> additionalSecurityGroupIds;
    /**
     * @return The node group auto scaling policy for emr cluster. See `auto_scaling_policy` below.
     * 
     */
    private @Nullable ClusterNodeGroupAutoScalingPolicy autoScalingPolicy;
    /**
     * @return The detail cost optimized configuration of emr cluster. See `cost_optimized_config` below. **NOTE:** From version 1.236.0, `cost_optimized_config` can be modified.
     * 
     */
    private @Nullable ClusterNodeGroupCostOptimizedConfig costOptimizedConfig;
    /**
     * @return Host Ecs data disks information in this node group. See `data_disks` below.
     * 
     */
    private List<ClusterNodeGroupDataDisk> dataDisks;
    /**
     * @return Deployment set strategy for this cluster node group. Supported value: NONE, CLUSTER or NODE_GROUP. **NOTE:** From version 1.236.0, `deployment_set_strategy` can be modified.
     * 
     */
    private @Nullable String deploymentSetStrategy;
    /**
     * @return Enable emr cluster of task node graceful decommission, ’true’ or ‘false’ .
     * 
     */
    private @Nullable Boolean gracefulShutdown;
    /**
     * @return Host Ecs instance types. **NOTE:** From version 1.236.0, `instance_types` can be modified.
     * 
     */
    private List<String> instanceTypes;
    /**
     * @return Host Ecs number in this node group.
     * 
     */
    private Integer nodeCount;
    /**
     * @return The node group name of emr cluster.
     * 
     */
    private String nodeGroupName;
    /**
     * @return The node group type of emr cluster, supported value: MASTER, CORE or TASK. Node group type of GATEWAY is available since v1.219.0. Node group type of MASTER-EXTEND is available since v1.243.0.
     * 
     */
    private String nodeGroupType;
    /**
     * @return Node resize strategy for this cluster node group. Supported value: PRIORITY, COST_OPTIMIZED.
     * 
     */
    private @Nullable String nodeResizeStrategy;
    /**
     * @return Payment Type for this cluster. Supported value: PayAsYouGo or Subscription.
     * 
     */
    private @Nullable String paymentType;
    /**
     * @return The node group specific private pool resources. See `private_pool_options` below.
     * 
     */
    private @Nullable ClusterNodeGroupPrivatePoolOptions privatePoolOptions;
    /**
     * @return The spot bid prices of a PayAsYouGo instance. See `spot_bid_prices` below.
     * 
     */
    private @Nullable List<ClusterNodeGroupSpotBidPrice> spotBidPrices;
    /**
     * @return Whether to replace spot instances with newly created spot/onDemand instance when receive a spot recycling message.
     * 
     */
    private @Nullable Boolean spotInstanceRemedy;
    /**
     * @return The spot strategy configuration of emr cluster. Valid values: `NoSpot`, `SpotWithPriceLimit`, `SpotAsPriceGo`.
     * 
     */
    private @Nullable String spotStrategy;
    /**
     * @return The detail configuration of subscription payment type. See `subscription_config` below.
     * 
     */
    private @Nullable ClusterNodeGroupSubscriptionConfig subscriptionConfig;
    /**
     * @return Host Ecs system disk information in this node group. See `system_disk` below.
     * 
     */
    private ClusterNodeGroupSystemDisk systemDisk;
    /**
     * @return Global vSwitch ids, you can also specify it in node group. **NOTE:** From version 1.236.0, `vswitch_ids` can be modified.
     * 
     */
    private @Nullable List<String> vswitchIds;
    /**
     * @return Whether the node has a public IP address enabled. **NOTE:** From version 1.236.0, `with_public_ip` can be modified.
     * 
     */
    private @Nullable Boolean withPublicIp;

    private ClusterNodeGroup() {}
    /**
     * @return The node group of ack configuration for emr cluster to deploying on kubernetes. See `ack_config` below.
     * 
     */
    public Optional<ClusterNodeGroupAckConfig> ackConfig() {
        return Optional.ofNullable(this.ackConfig);
    }
    /**
     * @return Additional security Group IDS for Cluster, you can also specify this key for each node group. **NOTE:** From version 1.236.0, `additional_security_group_ids` can be modified.
     * 
     */
    public List<String> additionalSecurityGroupIds() {
        return this.additionalSecurityGroupIds == null ? List.of() : this.additionalSecurityGroupIds;
    }
    /**
     * @return The node group auto scaling policy for emr cluster. See `auto_scaling_policy` below.
     * 
     */
    public Optional<ClusterNodeGroupAutoScalingPolicy> autoScalingPolicy() {
        return Optional.ofNullable(this.autoScalingPolicy);
    }
    /**
     * @return The detail cost optimized configuration of emr cluster. See `cost_optimized_config` below. **NOTE:** From version 1.236.0, `cost_optimized_config` can be modified.
     * 
     */
    public Optional<ClusterNodeGroupCostOptimizedConfig> costOptimizedConfig() {
        return Optional.ofNullable(this.costOptimizedConfig);
    }
    /**
     * @return Host Ecs data disks information in this node group. See `data_disks` below.
     * 
     */
    public List<ClusterNodeGroupDataDisk> dataDisks() {
        return this.dataDisks;
    }
    /**
     * @return Deployment set strategy for this cluster node group. Supported value: NONE, CLUSTER or NODE_GROUP. **NOTE:** From version 1.236.0, `deployment_set_strategy` can be modified.
     * 
     */
    public Optional<String> deploymentSetStrategy() {
        return Optional.ofNullable(this.deploymentSetStrategy);
    }
    /**
     * @return Enable emr cluster of task node graceful decommission, ’true’ or ‘false’ .
     * 
     */
    public Optional<Boolean> gracefulShutdown() {
        return Optional.ofNullable(this.gracefulShutdown);
    }
    /**
     * @return Host Ecs instance types. **NOTE:** From version 1.236.0, `instance_types` can be modified.
     * 
     */
    public List<String> instanceTypes() {
        return this.instanceTypes;
    }
    /**
     * @return Host Ecs number in this node group.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return The node group name of emr cluster.
     * 
     */
    public String nodeGroupName() {
        return this.nodeGroupName;
    }
    /**
     * @return The node group type of emr cluster, supported value: MASTER, CORE or TASK. Node group type of GATEWAY is available since v1.219.0. Node group type of MASTER-EXTEND is available since v1.243.0.
     * 
     */
    public String nodeGroupType() {
        return this.nodeGroupType;
    }
    /**
     * @return Node resize strategy for this cluster node group. Supported value: PRIORITY, COST_OPTIMIZED.
     * 
     */
    public Optional<String> nodeResizeStrategy() {
        return Optional.ofNullable(this.nodeResizeStrategy);
    }
    /**
     * @return Payment Type for this cluster. Supported value: PayAsYouGo or Subscription.
     * 
     */
    public Optional<String> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }
    /**
     * @return The node group specific private pool resources. See `private_pool_options` below.
     * 
     */
    public Optional<ClusterNodeGroupPrivatePoolOptions> privatePoolOptions() {
        return Optional.ofNullable(this.privatePoolOptions);
    }
    /**
     * @return The spot bid prices of a PayAsYouGo instance. See `spot_bid_prices` below.
     * 
     */
    public List<ClusterNodeGroupSpotBidPrice> spotBidPrices() {
        return this.spotBidPrices == null ? List.of() : this.spotBidPrices;
    }
    /**
     * @return Whether to replace spot instances with newly created spot/onDemand instance when receive a spot recycling message.
     * 
     */
    public Optional<Boolean> spotInstanceRemedy() {
        return Optional.ofNullable(this.spotInstanceRemedy);
    }
    /**
     * @return The spot strategy configuration of emr cluster. Valid values: `NoSpot`, `SpotWithPriceLimit`, `SpotAsPriceGo`.
     * 
     */
    public Optional<String> spotStrategy() {
        return Optional.ofNullable(this.spotStrategy);
    }
    /**
     * @return The detail configuration of subscription payment type. See `subscription_config` below.
     * 
     */
    public Optional<ClusterNodeGroupSubscriptionConfig> subscriptionConfig() {
        return Optional.ofNullable(this.subscriptionConfig);
    }
    /**
     * @return Host Ecs system disk information in this node group. See `system_disk` below.
     * 
     */
    public ClusterNodeGroupSystemDisk systemDisk() {
        return this.systemDisk;
    }
    /**
     * @return Global vSwitch ids, you can also specify it in node group. **NOTE:** From version 1.236.0, `vswitch_ids` can be modified.
     * 
     */
    public List<String> vswitchIds() {
        return this.vswitchIds == null ? List.of() : this.vswitchIds;
    }
    /**
     * @return Whether the node has a public IP address enabled. **NOTE:** From version 1.236.0, `with_public_ip` can be modified.
     * 
     */
    public Optional<Boolean> withPublicIp() {
        return Optional.ofNullable(this.withPublicIp);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterNodeGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ClusterNodeGroupAckConfig ackConfig;
        private @Nullable List<String> additionalSecurityGroupIds;
        private @Nullable ClusterNodeGroupAutoScalingPolicy autoScalingPolicy;
        private @Nullable ClusterNodeGroupCostOptimizedConfig costOptimizedConfig;
        private List<ClusterNodeGroupDataDisk> dataDisks;
        private @Nullable String deploymentSetStrategy;
        private @Nullable Boolean gracefulShutdown;
        private List<String> instanceTypes;
        private Integer nodeCount;
        private String nodeGroupName;
        private String nodeGroupType;
        private @Nullable String nodeResizeStrategy;
        private @Nullable String paymentType;
        private @Nullable ClusterNodeGroupPrivatePoolOptions privatePoolOptions;
        private @Nullable List<ClusterNodeGroupSpotBidPrice> spotBidPrices;
        private @Nullable Boolean spotInstanceRemedy;
        private @Nullable String spotStrategy;
        private @Nullable ClusterNodeGroupSubscriptionConfig subscriptionConfig;
        private ClusterNodeGroupSystemDisk systemDisk;
        private @Nullable List<String> vswitchIds;
        private @Nullable Boolean withPublicIp;
        public Builder() {}
        public Builder(ClusterNodeGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ackConfig = defaults.ackConfig;
    	      this.additionalSecurityGroupIds = defaults.additionalSecurityGroupIds;
    	      this.autoScalingPolicy = defaults.autoScalingPolicy;
    	      this.costOptimizedConfig = defaults.costOptimizedConfig;
    	      this.dataDisks = defaults.dataDisks;
    	      this.deploymentSetStrategy = defaults.deploymentSetStrategy;
    	      this.gracefulShutdown = defaults.gracefulShutdown;
    	      this.instanceTypes = defaults.instanceTypes;
    	      this.nodeCount = defaults.nodeCount;
    	      this.nodeGroupName = defaults.nodeGroupName;
    	      this.nodeGroupType = defaults.nodeGroupType;
    	      this.nodeResizeStrategy = defaults.nodeResizeStrategy;
    	      this.paymentType = defaults.paymentType;
    	      this.privatePoolOptions = defaults.privatePoolOptions;
    	      this.spotBidPrices = defaults.spotBidPrices;
    	      this.spotInstanceRemedy = defaults.spotInstanceRemedy;
    	      this.spotStrategy = defaults.spotStrategy;
    	      this.subscriptionConfig = defaults.subscriptionConfig;
    	      this.systemDisk = defaults.systemDisk;
    	      this.vswitchIds = defaults.vswitchIds;
    	      this.withPublicIp = defaults.withPublicIp;
        }

        @CustomType.Setter
        public Builder ackConfig(@Nullable ClusterNodeGroupAckConfig ackConfig) {

            this.ackConfig = ackConfig;
            return this;
        }
        @CustomType.Setter
        public Builder additionalSecurityGroupIds(@Nullable List<String> additionalSecurityGroupIds) {

            this.additionalSecurityGroupIds = additionalSecurityGroupIds;
            return this;
        }
        public Builder additionalSecurityGroupIds(String... additionalSecurityGroupIds) {
            return additionalSecurityGroupIds(List.of(additionalSecurityGroupIds));
        }
        @CustomType.Setter
        public Builder autoScalingPolicy(@Nullable ClusterNodeGroupAutoScalingPolicy autoScalingPolicy) {

            this.autoScalingPolicy = autoScalingPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder costOptimizedConfig(@Nullable ClusterNodeGroupCostOptimizedConfig costOptimizedConfig) {

            this.costOptimizedConfig = costOptimizedConfig;
            return this;
        }
        @CustomType.Setter
        public Builder dataDisks(List<ClusterNodeGroupDataDisk> dataDisks) {
            if (dataDisks == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroup", "dataDisks");
            }
            this.dataDisks = dataDisks;
            return this;
        }
        public Builder dataDisks(ClusterNodeGroupDataDisk... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }
        @CustomType.Setter
        public Builder deploymentSetStrategy(@Nullable String deploymentSetStrategy) {

            this.deploymentSetStrategy = deploymentSetStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder gracefulShutdown(@Nullable Boolean gracefulShutdown) {

            this.gracefulShutdown = gracefulShutdown;
            return this;
        }
        @CustomType.Setter
        public Builder instanceTypes(List<String> instanceTypes) {
            if (instanceTypes == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroup", "instanceTypes");
            }
            this.instanceTypes = instanceTypes;
            return this;
        }
        public Builder instanceTypes(String... instanceTypes) {
            return instanceTypes(List.of(instanceTypes));
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            if (nodeCount == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroup", "nodeCount");
            }
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder nodeGroupName(String nodeGroupName) {
            if (nodeGroupName == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroup", "nodeGroupName");
            }
            this.nodeGroupName = nodeGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder nodeGroupType(String nodeGroupType) {
            if (nodeGroupType == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroup", "nodeGroupType");
            }
            this.nodeGroupType = nodeGroupType;
            return this;
        }
        @CustomType.Setter
        public Builder nodeResizeStrategy(@Nullable String nodeResizeStrategy) {

            this.nodeResizeStrategy = nodeResizeStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(@Nullable String paymentType) {

            this.paymentType = paymentType;
            return this;
        }
        @CustomType.Setter
        public Builder privatePoolOptions(@Nullable ClusterNodeGroupPrivatePoolOptions privatePoolOptions) {

            this.privatePoolOptions = privatePoolOptions;
            return this;
        }
        @CustomType.Setter
        public Builder spotBidPrices(@Nullable List<ClusterNodeGroupSpotBidPrice> spotBidPrices) {

            this.spotBidPrices = spotBidPrices;
            return this;
        }
        public Builder spotBidPrices(ClusterNodeGroupSpotBidPrice... spotBidPrices) {
            return spotBidPrices(List.of(spotBidPrices));
        }
        @CustomType.Setter
        public Builder spotInstanceRemedy(@Nullable Boolean spotInstanceRemedy) {

            this.spotInstanceRemedy = spotInstanceRemedy;
            return this;
        }
        @CustomType.Setter
        public Builder spotStrategy(@Nullable String spotStrategy) {

            this.spotStrategy = spotStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionConfig(@Nullable ClusterNodeGroupSubscriptionConfig subscriptionConfig) {

            this.subscriptionConfig = subscriptionConfig;
            return this;
        }
        @CustomType.Setter
        public Builder systemDisk(ClusterNodeGroupSystemDisk systemDisk) {
            if (systemDisk == null) {
              throw new MissingRequiredPropertyException("ClusterNodeGroup", "systemDisk");
            }
            this.systemDisk = systemDisk;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchIds(@Nullable List<String> vswitchIds) {

            this.vswitchIds = vswitchIds;
            return this;
        }
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }
        @CustomType.Setter
        public Builder withPublicIp(@Nullable Boolean withPublicIp) {

            this.withPublicIp = withPublicIp;
            return this;
        }
        public ClusterNodeGroup build() {
            final var _resultValue = new ClusterNodeGroup();
            _resultValue.ackConfig = ackConfig;
            _resultValue.additionalSecurityGroupIds = additionalSecurityGroupIds;
            _resultValue.autoScalingPolicy = autoScalingPolicy;
            _resultValue.costOptimizedConfig = costOptimizedConfig;
            _resultValue.dataDisks = dataDisks;
            _resultValue.deploymentSetStrategy = deploymentSetStrategy;
            _resultValue.gracefulShutdown = gracefulShutdown;
            _resultValue.instanceTypes = instanceTypes;
            _resultValue.nodeCount = nodeCount;
            _resultValue.nodeGroupName = nodeGroupName;
            _resultValue.nodeGroupType = nodeGroupType;
            _resultValue.nodeResizeStrategy = nodeResizeStrategy;
            _resultValue.paymentType = paymentType;
            _resultValue.privatePoolOptions = privatePoolOptions;
            _resultValue.spotBidPrices = spotBidPrices;
            _resultValue.spotInstanceRemedy = spotInstanceRemedy;
            _resultValue.spotStrategy = spotStrategy;
            _resultValue.subscriptionConfig = subscriptionConfig;
            _resultValue.systemDisk = systemDisk;
            _resultValue.vswitchIds = vswitchIds;
            _resultValue.withPublicIp = withPublicIp;
            return _resultValue;
        }
    }
}
