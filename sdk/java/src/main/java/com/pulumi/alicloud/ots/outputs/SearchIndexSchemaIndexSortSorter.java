// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ots.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SearchIndexSchemaIndexSortSorter {
    /**
     * @return The name of the field that is used to sort data. only required if sorter_type is FieldSort.
     * 
     */
    private @Nullable String fieldName;
    /**
     * @return The sorting method that is used when the field contains multiple values. valid values: `Min`, `Max`, `Avg`. only required if sorter_type is FieldSort.
     * 
     */
    private @Nullable String mode;
    /**
     * @return The sort order. Data can be sorted in ascending(`Asc`) or descending(`Desc`) order. Default value: `Asc`.
     * 
     */
    private @Nullable String order;
    /**
     * @return Data is sorted by Which fields or keys. valid values: `PrimaryKeySort`, `FieldSort`.
     * 
     */
    private @Nullable String sorterType;

    private SearchIndexSchemaIndexSortSorter() {}
    /**
     * @return The name of the field that is used to sort data. only required if sorter_type is FieldSort.
     * 
     */
    public Optional<String> fieldName() {
        return Optional.ofNullable(this.fieldName);
    }
    /**
     * @return The sorting method that is used when the field contains multiple values. valid values: `Min`, `Max`, `Avg`. only required if sorter_type is FieldSort.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return The sort order. Data can be sorted in ascending(`Asc`) or descending(`Desc`) order. Default value: `Asc`.
     * 
     */
    public Optional<String> order() {
        return Optional.ofNullable(this.order);
    }
    /**
     * @return Data is sorted by Which fields or keys. valid values: `PrimaryKeySort`, `FieldSort`.
     * 
     */
    public Optional<String> sorterType() {
        return Optional.ofNullable(this.sorterType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SearchIndexSchemaIndexSortSorter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String fieldName;
        private @Nullable String mode;
        private @Nullable String order;
        private @Nullable String sorterType;
        public Builder() {}
        public Builder(SearchIndexSchemaIndexSortSorter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fieldName = defaults.fieldName;
    	      this.mode = defaults.mode;
    	      this.order = defaults.order;
    	      this.sorterType = defaults.sorterType;
        }

        @CustomType.Setter
        public Builder fieldName(@Nullable String fieldName) {

            this.fieldName = fieldName;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder order(@Nullable String order) {

            this.order = order;
            return this;
        }
        @CustomType.Setter
        public Builder sorterType(@Nullable String sorterType) {

            this.sorterType = sorterType;
            return this;
        }
        public SearchIndexSchemaIndexSortSorter build() {
            final var _resultValue = new SearchIndexSchemaIndexSortSorter();
            _resultValue.fieldName = fieldName;
            _resultValue.mode = mode;
            _resultValue.order = order;
            _resultValue.sorterType = sorterType;
            return _resultValue;
        }
    }
}
