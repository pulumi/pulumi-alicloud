// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dts;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobMonitorRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobMonitorRuleArgs Empty = new JobMonitorRuleArgs();

    /**
     * Trigger delay alarm threshold, which is measured in seconds.
     * 
     */
    @Import(name="delayRuleTime")
    private @Nullable Output<String> delayRuleTime;

    /**
     * @return Trigger delay alarm threshold, which is measured in seconds.
     * 
     */
    public Optional<Output<String>> delayRuleTime() {
        return Optional.ofNullable(this.delayRuleTime);
    }

    /**
     * Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
     * 
     */
    @Import(name="dtsJobId", required=true)
    private Output<String> dtsJobId;

    /**
     * @return Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
     * 
     */
    public Output<String> dtsJobId() {
        return this.dtsJobId;
    }

    /**
     * The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
     * 
     */
    @Import(name="phone")
    private @Nullable Output<String> phone;

    /**
     * @return The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
     * 
     */
    public Optional<Output<String>> phone() {
        return Optional.ofNullable(this.phone);
    }

    /**
     * Whether to enable monitoring rules, valid values: `Y`, `N`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Whether to enable monitoring rules, valid values: `Y`, `N`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private JobMonitorRuleArgs() {}

    private JobMonitorRuleArgs(JobMonitorRuleArgs $) {
        this.delayRuleTime = $.delayRuleTime;
        this.dtsJobId = $.dtsJobId;
        this.phone = $.phone;
        this.state = $.state;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobMonitorRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobMonitorRuleArgs $;

        public Builder() {
            $ = new JobMonitorRuleArgs();
        }

        public Builder(JobMonitorRuleArgs defaults) {
            $ = new JobMonitorRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delayRuleTime Trigger delay alarm threshold, which is measured in seconds.
         * 
         * @return builder
         * 
         */
        public Builder delayRuleTime(@Nullable Output<String> delayRuleTime) {
            $.delayRuleTime = delayRuleTime;
            return this;
        }

        /**
         * @param delayRuleTime Trigger delay alarm threshold, which is measured in seconds.
         * 
         * @return builder
         * 
         */
        public Builder delayRuleTime(String delayRuleTime) {
            return delayRuleTime(Output.of(delayRuleTime));
        }

        /**
         * @param dtsJobId Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
         * 
         * @return builder
         * 
         */
        public Builder dtsJobId(Output<String> dtsJobId) {
            $.dtsJobId = dtsJobId;
            return this;
        }

        /**
         * @param dtsJobId Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
         * 
         * @return builder
         * 
         */
        public Builder dtsJobId(String dtsJobId) {
            return dtsJobId(Output.of(dtsJobId));
        }

        /**
         * @param phone The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
         * 
         * @return builder
         * 
         */
        public Builder phone(@Nullable Output<String> phone) {
            $.phone = phone;
            return this;
        }

        /**
         * @param phone The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
         * 
         * @return builder
         * 
         */
        public Builder phone(String phone) {
            return phone(Output.of(phone));
        }

        /**
         * @param state Whether to enable monitoring rules, valid values: `Y`, `N`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Whether to enable monitoring rules, valid values: `Y`, `N`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param type Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public JobMonitorRuleArgs build() {
            if ($.dtsJobId == null) {
                throw new MissingRequiredPropertyException("JobMonitorRuleArgs", "dtsJobId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("JobMonitorRuleArgs", "type");
            }
            return $;
        }
    }

}
