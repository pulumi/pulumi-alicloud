// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cassandra.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupPlanState extends com.pulumi.resources.ResourceArgs {

    public static final BackupPlanState Empty = new BackupPlanState();

    /**
     * Specifies whether to activate the backup plan. Valid values: `True`, `False`. Default value: `True`.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Specifies whether to activate the backup plan. Valid values: `True`, `False`. Default value: `True`.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * The backup cycle. Valid values: `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday`, `Wednesday`.
     * 
     */
    @Import(name="backupPeriod")
    private @Nullable Output<String> backupPeriod;

    /**
     * @return The backup cycle. Valid values: `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday`, `Wednesday`.
     * 
     */
    public Optional<Output<String>> backupPeriod() {
        return Optional.ofNullable(this.backupPeriod);
    }

    /**
     * The start time of the backup task each day. The time is displayed in UTC and denoted by Z.
     * 
     */
    @Import(name="backupTime")
    private @Nullable Output<String> backupTime;

    /**
     * @return The start time of the backup task each day. The time is displayed in UTC and denoted by Z.
     * 
     */
    public Optional<Output<String>> backupTime() {
        return Optional.ofNullable(this.backupTime);
    }

    /**
     * The ID of the cluster for the backup.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of the cluster for the backup.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The ID of the data center for the backup in the cluster.
     * 
     */
    @Import(name="dataCenterId")
    private @Nullable Output<String> dataCenterId;

    /**
     * @return The ID of the data center for the backup in the cluster.
     * 
     */
    public Optional<Output<String>> dataCenterId() {
        return Optional.ofNullable(this.dataCenterId);
    }

    /**
     * The duration for which you want to retain the backup. Valid values: 1 to 30. Unit: days. Default value: `30`.
     * 
     */
    @Import(name="retentionPeriod")
    private @Nullable Output<Integer> retentionPeriod;

    /**
     * @return The duration for which you want to retain the backup. Valid values: 1 to 30. Unit: days. Default value: `30`.
     * 
     */
    public Optional<Output<Integer>> retentionPeriod() {
        return Optional.ofNullable(this.retentionPeriod);
    }

    private BackupPlanState() {}

    private BackupPlanState(BackupPlanState $) {
        this.active = $.active;
        this.backupPeriod = $.backupPeriod;
        this.backupTime = $.backupTime;
        this.clusterId = $.clusterId;
        this.dataCenterId = $.dataCenterId;
        this.retentionPeriod = $.retentionPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupPlanState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupPlanState $;

        public Builder() {
            $ = new BackupPlanState();
        }

        public Builder(BackupPlanState defaults) {
            $ = new BackupPlanState(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Specifies whether to activate the backup plan. Valid values: `True`, `False`. Default value: `True`.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Specifies whether to activate the backup plan. Valid values: `True`, `False`. Default value: `True`.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param backupPeriod The backup cycle. Valid values: `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday`, `Wednesday`.
         * 
         * @return builder
         * 
         */
        public Builder backupPeriod(@Nullable Output<String> backupPeriod) {
            $.backupPeriod = backupPeriod;
            return this;
        }

        /**
         * @param backupPeriod The backup cycle. Valid values: `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday`, `Wednesday`.
         * 
         * @return builder
         * 
         */
        public Builder backupPeriod(String backupPeriod) {
            return backupPeriod(Output.of(backupPeriod));
        }

        /**
         * @param backupTime The start time of the backup task each day. The time is displayed in UTC and denoted by Z.
         * 
         * @return builder
         * 
         */
        public Builder backupTime(@Nullable Output<String> backupTime) {
            $.backupTime = backupTime;
            return this;
        }

        /**
         * @param backupTime The start time of the backup task each day. The time is displayed in UTC and denoted by Z.
         * 
         * @return builder
         * 
         */
        public Builder backupTime(String backupTime) {
            return backupTime(Output.of(backupTime));
        }

        /**
         * @param clusterId The ID of the cluster for the backup.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the cluster for the backup.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param dataCenterId The ID of the data center for the backup in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dataCenterId(@Nullable Output<String> dataCenterId) {
            $.dataCenterId = dataCenterId;
            return this;
        }

        /**
         * @param dataCenterId The ID of the data center for the backup in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dataCenterId(String dataCenterId) {
            return dataCenterId(Output.of(dataCenterId));
        }

        /**
         * @param retentionPeriod The duration for which you want to retain the backup. Valid values: 1 to 30. Unit: days. Default value: `30`.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(@Nullable Output<Integer> retentionPeriod) {
            $.retentionPeriod = retentionPeriod;
            return this;
        }

        /**
         * @param retentionPeriod The duration for which you want to retain the backup. Valid values: 1 to 30. Unit: days. Default value: `30`.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(Integer retentionPeriod) {
            return retentionPeriod(Output.of(retentionPeriod));
        }

        public BackupPlanState build() {
            return $;
        }
    }

}
