// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.pai.inputs;

import com.pulumi.alicloud.pai.inputs.WorkspaceModelLabelArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceModelState extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceModelState Empty = new WorkspaceModelState();

    /**
     * The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
     * - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
     * - `PUBLIC`: In this workspace, it is visible to everyone.
     * 
     */
    @Import(name="accessibility")
    private @Nullable Output<String> accessibility;

    /**
     * @return The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
     * - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
     * - `PUBLIC`: In this workspace, it is visible to everyone.
     * 
     */
    public Optional<Output<String>> accessibility() {
        return Optional.ofNullable(this.accessibility);
    }

    /**
     * The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Other information about the model.
     * 
     */
    @Import(name="extraInfo")
    private @Nullable Output<Map<String,String>> extraInfo;

    /**
     * @return Other information about the model.
     * 
     */
    public Optional<Output<Map<String,String>>> extraInfo() {
        return Optional.ofNullable(this.extraInfo);
    }

    /**
     * A list of tags. See `labels` below.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<WorkspaceModelLabelArgs>> labels;

    /**
     * @return A list of tags. See `labels` below.
     * 
     */
    public Optional<Output<List<WorkspaceModelLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The model description, used to distinguish different models.
     * 
     */
    @Import(name="modelDescription")
    private @Nullable Output<String> modelDescription;

    /**
     * @return The model description, used to distinguish different models.
     * 
     */
    public Optional<Output<String>> modelDescription() {
        return Optional.ofNullable(this.modelDescription);
    }

    /**
     * The documentation of the model.
     * 
     */
    @Import(name="modelDoc")
    private @Nullable Output<String> modelDoc;

    /**
     * @return The documentation of the model.
     * 
     */
    public Optional<Output<String>> modelDoc() {
        return Optional.ofNullable(this.modelDoc);
    }

    /**
     * The name of the model. The name must be 1 to 127 characters in length.
     * 
     */
    @Import(name="modelName")
    private @Nullable Output<String> modelName;

    /**
     * @return The name of the model. The name must be 1 to 127 characters in length.
     * 
     */
    public Optional<Output<String>> modelName() {
        return Optional.ofNullable(this.modelName);
    }

    /**
     * The model type. Example: Checkpoint or LoRA.
     * 
     */
    @Import(name="modelType")
    private @Nullable Output<String> modelType;

    /**
     * @return The model type. Example: Checkpoint or LoRA.
     * 
     */
    public Optional<Output<String>> modelType() {
        return Optional.ofNullable(this.modelType);
    }

    /**
     * The sequence number of the model. Can be used for custom sorting.
     * 
     */
    @Import(name="orderNumber")
    private @Nullable Output<Integer> orderNumber;

    /**
     * @return The sequence number of the model. Can be used for custom sorting.
     * 
     */
    public Optional<Output<Integer>> orderNumber() {
        return Optional.ofNullable(this.orderNumber);
    }

    /**
     * The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
     * 
     */
    @Import(name="origin")
    private @Nullable Output<String> origin;

    /**
     * @return The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
     * 
     */
    public Optional<Output<String>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * The task of the model. Describes the specific problem that the model solves. Example: text-classification.
     * 
     */
    @Import(name="task")
    private @Nullable Output<String> task;

    /**
     * @return The task of the model. Describes the specific problem that the model solves. Example: text-classification.
     * 
     */
    public Optional<Output<String>> task() {
        return Optional.ofNullable(this.task);
    }

    /**
     * The ID of the workspace.
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return The ID of the workspace.
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private WorkspaceModelState() {}

    private WorkspaceModelState(WorkspaceModelState $) {
        this.accessibility = $.accessibility;
        this.domain = $.domain;
        this.extraInfo = $.extraInfo;
        this.labels = $.labels;
        this.modelDescription = $.modelDescription;
        this.modelDoc = $.modelDoc;
        this.modelName = $.modelName;
        this.modelType = $.modelType;
        this.orderNumber = $.orderNumber;
        this.origin = $.origin;
        this.task = $.task;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceModelState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceModelState $;

        public Builder() {
            $ = new WorkspaceModelState();
        }

        public Builder(WorkspaceModelState defaults) {
            $ = new WorkspaceModelState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessibility The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
         * - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
         * - `PUBLIC`: In this workspace, it is visible to everyone.
         * 
         * @return builder
         * 
         */
        public Builder accessibility(@Nullable Output<String> accessibility) {
            $.accessibility = accessibility;
            return this;
        }

        /**
         * @param accessibility The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
         * - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
         * - `PUBLIC`: In this workspace, it is visible to everyone.
         * 
         * @return builder
         * 
         */
        public Builder accessibility(String accessibility) {
            return accessibility(Output.of(accessibility));
        }

        /**
         * @param domain The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param extraInfo Other information about the model.
         * 
         * @return builder
         * 
         */
        public Builder extraInfo(@Nullable Output<Map<String,String>> extraInfo) {
            $.extraInfo = extraInfo;
            return this;
        }

        /**
         * @param extraInfo Other information about the model.
         * 
         * @return builder
         * 
         */
        public Builder extraInfo(Map<String,String> extraInfo) {
            return extraInfo(Output.of(extraInfo));
        }

        /**
         * @param labels A list of tags. See `labels` below.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<WorkspaceModelLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels A list of tags. See `labels` below.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<WorkspaceModelLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels A list of tags. See `labels` below.
         * 
         * @return builder
         * 
         */
        public Builder labels(WorkspaceModelLabelArgs... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param modelDescription The model description, used to distinguish different models.
         * 
         * @return builder
         * 
         */
        public Builder modelDescription(@Nullable Output<String> modelDescription) {
            $.modelDescription = modelDescription;
            return this;
        }

        /**
         * @param modelDescription The model description, used to distinguish different models.
         * 
         * @return builder
         * 
         */
        public Builder modelDescription(String modelDescription) {
            return modelDescription(Output.of(modelDescription));
        }

        /**
         * @param modelDoc The documentation of the model.
         * 
         * @return builder
         * 
         */
        public Builder modelDoc(@Nullable Output<String> modelDoc) {
            $.modelDoc = modelDoc;
            return this;
        }

        /**
         * @param modelDoc The documentation of the model.
         * 
         * @return builder
         * 
         */
        public Builder modelDoc(String modelDoc) {
            return modelDoc(Output.of(modelDoc));
        }

        /**
         * @param modelName The name of the model. The name must be 1 to 127 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder modelName(@Nullable Output<String> modelName) {
            $.modelName = modelName;
            return this;
        }

        /**
         * @param modelName The name of the model. The name must be 1 to 127 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder modelName(String modelName) {
            return modelName(Output.of(modelName));
        }

        /**
         * @param modelType The model type. Example: Checkpoint or LoRA.
         * 
         * @return builder
         * 
         */
        public Builder modelType(@Nullable Output<String> modelType) {
            $.modelType = modelType;
            return this;
        }

        /**
         * @param modelType The model type. Example: Checkpoint or LoRA.
         * 
         * @return builder
         * 
         */
        public Builder modelType(String modelType) {
            return modelType(Output.of(modelType));
        }

        /**
         * @param orderNumber The sequence number of the model. Can be used for custom sorting.
         * 
         * @return builder
         * 
         */
        public Builder orderNumber(@Nullable Output<Integer> orderNumber) {
            $.orderNumber = orderNumber;
            return this;
        }

        /**
         * @param orderNumber The sequence number of the model. Can be used for custom sorting.
         * 
         * @return builder
         * 
         */
        public Builder orderNumber(Integer orderNumber) {
            return orderNumber(Output.of(orderNumber));
        }

        /**
         * @param origin The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<String> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
         * 
         * @return builder
         * 
         */
        public Builder origin(String origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param task The task of the model. Describes the specific problem that the model solves. Example: text-classification.
         * 
         * @return builder
         * 
         */
        public Builder task(@Nullable Output<String> task) {
            $.task = task;
            return this;
        }

        /**
         * @param task The task of the model. Describes the specific problem that the model solves. Example: text-classification.
         * 
         * @return builder
         * 
         */
        public Builder task(String task) {
            return task(Output.of(task));
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public WorkspaceModelState build() {
            return $;
        }
    }

}
