// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.polardb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountPrivilegeArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountPrivilegeArgs Empty = new AccountPrivilegeArgs();

    /**
     * A specified account name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return A specified account name.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The privilege of one account access database. Valid values: [&#34;ReadOnly&#34;, &#34;ReadWrite&#34;], [&#34;DMLOnly&#34;, &#34;DDLOnly&#34;] added since version v1.101.0. Default to &#34;ReadOnly&#34;.
     * 
     */
    @Import(name="accountPrivilege")
    private @Nullable Output<String> accountPrivilege;

    /**
     * @return The privilege of one account access database. Valid values: [&#34;ReadOnly&#34;, &#34;ReadWrite&#34;], [&#34;DMLOnly&#34;, &#34;DDLOnly&#34;] added since version v1.101.0. Default to &#34;ReadOnly&#34;.
     * 
     */
    public Optional<Output<String>> accountPrivilege() {
        return Optional.ofNullable(this.accountPrivilege);
    }

    /**
     * The Id of cluster in which account belongs.
     * 
     */
    @Import(name="dbClusterId", required=true)
    private Output<String> dbClusterId;

    /**
     * @return The Id of cluster in which account belongs.
     * 
     */
    public Output<String> dbClusterId() {
        return this.dbClusterId;
    }

    /**
     * List of specified database name.
     * 
     */
    @Import(name="dbNames", required=true)
    private Output<List<String>> dbNames;

    /**
     * @return List of specified database name.
     * 
     */
    public Output<List<String>> dbNames() {
        return this.dbNames;
    }

    private AccountPrivilegeArgs() {}

    private AccountPrivilegeArgs(AccountPrivilegeArgs $) {
        this.accountName = $.accountName;
        this.accountPrivilege = $.accountPrivilege;
        this.dbClusterId = $.dbClusterId;
        this.dbNames = $.dbNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountPrivilegeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountPrivilegeArgs $;

        public Builder() {
            $ = new AccountPrivilegeArgs();
        }

        public Builder(AccountPrivilegeArgs defaults) {
            $ = new AccountPrivilegeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName A specified account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName A specified account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param accountPrivilege The privilege of one account access database. Valid values: [&#34;ReadOnly&#34;, &#34;ReadWrite&#34;], [&#34;DMLOnly&#34;, &#34;DDLOnly&#34;] added since version v1.101.0. Default to &#34;ReadOnly&#34;.
         * 
         * @return builder
         * 
         */
        public Builder accountPrivilege(@Nullable Output<String> accountPrivilege) {
            $.accountPrivilege = accountPrivilege;
            return this;
        }

        /**
         * @param accountPrivilege The privilege of one account access database. Valid values: [&#34;ReadOnly&#34;, &#34;ReadWrite&#34;], [&#34;DMLOnly&#34;, &#34;DDLOnly&#34;] added since version v1.101.0. Default to &#34;ReadOnly&#34;.
         * 
         * @return builder
         * 
         */
        public Builder accountPrivilege(String accountPrivilege) {
            return accountPrivilege(Output.of(accountPrivilege));
        }

        /**
         * @param dbClusterId The Id of cluster in which account belongs.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterId(Output<String> dbClusterId) {
            $.dbClusterId = dbClusterId;
            return this;
        }

        /**
         * @param dbClusterId The Id of cluster in which account belongs.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterId(String dbClusterId) {
            return dbClusterId(Output.of(dbClusterId));
        }

        /**
         * @param dbNames List of specified database name.
         * 
         * @return builder
         * 
         */
        public Builder dbNames(Output<List<String>> dbNames) {
            $.dbNames = dbNames;
            return this;
        }

        /**
         * @param dbNames List of specified database name.
         * 
         * @return builder
         * 
         */
        public Builder dbNames(List<String> dbNames) {
            return dbNames(Output.of(dbNames));
        }

        /**
         * @param dbNames List of specified database name.
         * 
         * @return builder
         * 
         */
        public Builder dbNames(String... dbNames) {
            return dbNames(List.of(dbNames));
        }

        public AccountPrivilegeArgs build() {
            if ($.accountName == null) {
                throw new MissingRequiredPropertyException("AccountPrivilegeArgs", "accountName");
            }
            if ($.dbClusterId == null) {
                throw new MissingRequiredPropertyException("AccountPrivilegeArgs", "dbClusterId");
            }
            if ($.dbNames == null) {
                throw new MissingRequiredPropertyException("AccountPrivilegeArgs", "dbNames");
            }
            return $;
        }
    }

}
