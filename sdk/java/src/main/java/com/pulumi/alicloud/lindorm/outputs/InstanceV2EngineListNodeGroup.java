// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.lindorm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceV2EngineListNodeGroup {
    /**
     * @return Node Type
     * 
     */
    private @Nullable String category;
    /**
     * @return Number of CPU cores
     * 
     */
    private @Nullable Integer cpuCoreCount;
    /**
     * @return Whether to mount  local cloud disks
     * 
     */
    private @Nullable Boolean enableAttachLocalDisk;
    /**
     * @return Node memory size
     * 
     */
    private @Nullable Integer memorySizeGiB;
    /**
     * @return Number of nodes
     * 
     */
    private Integer nodeCount;
    /**
     * @return Local cloud disk storage capacity
     * 
     */
    private @Nullable Integer nodeDiskSize;
    /**
     * @return Node Disk Type
     * 
     */
    private @Nullable String nodeDiskType;
    /**
     * @return Node Specifications
     * 
     */
    private String nodeSpec;
    /**
     * @return Resource group name
     * 
     */
    private String resourceGroupName;
    /**
     * @return Spec Id
     * 
     */
    private @Nullable String specId;
    /**
     * @return Node Status
     * 
     */
    private @Nullable String status;

    private InstanceV2EngineListNodeGroup() {}
    /**
     * @return Node Type
     * 
     */
    public Optional<String> category() {
        return Optional.ofNullable(this.category);
    }
    /**
     * @return Number of CPU cores
     * 
     */
    public Optional<Integer> cpuCoreCount() {
        return Optional.ofNullable(this.cpuCoreCount);
    }
    /**
     * @return Whether to mount  local cloud disks
     * 
     */
    public Optional<Boolean> enableAttachLocalDisk() {
        return Optional.ofNullable(this.enableAttachLocalDisk);
    }
    /**
     * @return Node memory size
     * 
     */
    public Optional<Integer> memorySizeGiB() {
        return Optional.ofNullable(this.memorySizeGiB);
    }
    /**
     * @return Number of nodes
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return Local cloud disk storage capacity
     * 
     */
    public Optional<Integer> nodeDiskSize() {
        return Optional.ofNullable(this.nodeDiskSize);
    }
    /**
     * @return Node Disk Type
     * 
     */
    public Optional<String> nodeDiskType() {
        return Optional.ofNullable(this.nodeDiskType);
    }
    /**
     * @return Node Specifications
     * 
     */
    public String nodeSpec() {
        return this.nodeSpec;
    }
    /**
     * @return Resource group name
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return Spec Id
     * 
     */
    public Optional<String> specId() {
        return Optional.ofNullable(this.specId);
    }
    /**
     * @return Node Status
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceV2EngineListNodeGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String category;
        private @Nullable Integer cpuCoreCount;
        private @Nullable Boolean enableAttachLocalDisk;
        private @Nullable Integer memorySizeGiB;
        private Integer nodeCount;
        private @Nullable Integer nodeDiskSize;
        private @Nullable String nodeDiskType;
        private String nodeSpec;
        private String resourceGroupName;
        private @Nullable String specId;
        private @Nullable String status;
        public Builder() {}
        public Builder(InstanceV2EngineListNodeGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.enableAttachLocalDisk = defaults.enableAttachLocalDisk;
    	      this.memorySizeGiB = defaults.memorySizeGiB;
    	      this.nodeCount = defaults.nodeCount;
    	      this.nodeDiskSize = defaults.nodeDiskSize;
    	      this.nodeDiskType = defaults.nodeDiskType;
    	      this.nodeSpec = defaults.nodeSpec;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.specId = defaults.specId;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder category(@Nullable String category) {

            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(@Nullable Integer cpuCoreCount) {

            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder enableAttachLocalDisk(@Nullable Boolean enableAttachLocalDisk) {

            this.enableAttachLocalDisk = enableAttachLocalDisk;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeGiB(@Nullable Integer memorySizeGiB) {

            this.memorySizeGiB = memorySizeGiB;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            if (nodeCount == null) {
              throw new MissingRequiredPropertyException("InstanceV2EngineListNodeGroup", "nodeCount");
            }
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder nodeDiskSize(@Nullable Integer nodeDiskSize) {

            this.nodeDiskSize = nodeDiskSize;
            return this;
        }
        @CustomType.Setter
        public Builder nodeDiskType(@Nullable String nodeDiskType) {

            this.nodeDiskType = nodeDiskType;
            return this;
        }
        @CustomType.Setter
        public Builder nodeSpec(String nodeSpec) {
            if (nodeSpec == null) {
              throw new MissingRequiredPropertyException("InstanceV2EngineListNodeGroup", "nodeSpec");
            }
            this.nodeSpec = nodeSpec;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("InstanceV2EngineListNodeGroup", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder specId(@Nullable String specId) {

            this.specId = specId;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        public InstanceV2EngineListNodeGroup build() {
            final var _resultValue = new InstanceV2EngineListNodeGroup();
            _resultValue.category = category;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.enableAttachLocalDisk = enableAttachLocalDisk;
            _resultValue.memorySizeGiB = memorySizeGiB;
            _resultValue.nodeCount = nodeCount;
            _resultValue.nodeDiskSize = nodeDiskSize;
            _resultValue.nodeDiskType = nodeDiskType;
            _resultValue.nodeSpec = nodeSpec;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.specId = specId;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
