// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sddp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * Whether the required RAM authorization is configured.
     * 
     */
    @Import(name="authed")
    private @Nullable Output<Boolean> authed;

    /**
     * @return Whether the required RAM authorization is configured.
     * 
     */
    public Optional<Output<Boolean>> authed() {
        return Optional.ofNullable(this.authed);
    }

    /**
     * The dataphin. Valid values: `yes`,`no`.
     * 
     */
    @Import(name="dataphin")
    private @Nullable Output<String> dataphin;

    /**
     * @return The dataphin. Valid values: `yes`,`no`.
     * 
     */
    public Optional<Output<String>> dataphin() {
        return Optional.ofNullable(this.dataphin);
    }

    /**
     * The dataphin count. Valid values: 1 to 20.
     * 
     */
    @Import(name="dataphinCount")
    private @Nullable Output<String> dataphinCount;

    /**
     * @return The dataphin count. Valid values: 1 to 20.
     * 
     */
    public Optional<Output<String>> dataphinCount() {
        return Optional.ofNullable(this.dataphinCount);
    }

    /**
     * The number of instances.
     * 
     */
    @Import(name="instanceNum")
    private @Nullable Output<String> instanceNum;

    /**
     * @return The number of instances.
     * 
     */
    public Optional<Output<String>> instanceNum() {
        return Optional.ofNullable(this.instanceNum);
    }

    /**
     * The logistics.
     * 
     */
    @Import(name="logistics")
    private @Nullable Output<String> logistics;

    /**
     * @return The logistics.
     * 
     */
    public Optional<Output<String>> logistics() {
        return Optional.ofNullable(this.logistics);
    }

    /**
     * The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modifyType` is required when you execute a update operation.
     * 
     */
    @Import(name="modifyType")
    private @Nullable Output<String> modifyType;

    /**
     * @return The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modifyType` is required when you execute a update operation.
     * 
     */
    public Optional<Output<String>> modifyType() {
        return Optional.ofNullable(this.modifyType);
    }

    /**
     * Whether the authorized MaxCompute (ODPS) assets.
     * 
     */
    @Import(name="odpsSet")
    private @Nullable Output<Boolean> odpsSet;

    /**
     * @return Whether the authorized MaxCompute (ODPS) assets.
     * 
     */
    public Optional<Output<Boolean>> odpsSet() {
        return Optional.ofNullable(this.odpsSet);
    }

    /**
     * Whether the authorized oss assets.
     * 
     */
    @Import(name="ossBucketSet")
    private @Nullable Output<Boolean> ossBucketSet;

    /**
     * @return Whether the authorized oss assets.
     * 
     */
    public Optional<Output<Boolean>> ossBucketSet() {
        return Optional.ofNullable(this.ossBucketSet);
    }

    /**
     * The OSS storage capacity.
     * 
     */
    @Import(name="ossSize")
    private @Nullable Output<String> ossSize;

    /**
     * @return The OSS storage capacity.
     * 
     */
    public Optional<Output<String>> ossSize() {
        return Optional.ofNullable(this.ossSize);
    }

    /**
     * The payment type of the resource. Valid values: `Subscription`.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The payment type of the resource. Valid values: `Subscription`.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * The Prepaid period. Valid values: `1`, `2`, `3`, `6`,`12`,`24`.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The Prepaid period. Valid values: `1`, `2`, `3`, `6`,`12`,`24`.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * Whether the authorized rds assets.
     * 
     */
    @Import(name="rdsSet")
    private @Nullable Output<Boolean> rdsSet;

    /**
     * @return Whether the authorized rds assets.
     * 
     */
    public Optional<Output<Boolean>> rdsSet() {
        return Optional.ofNullable(this.rdsSet);
    }

    /**
     * The remaining days of the protection period of the assets in the current login account.
     * 
     */
    @Import(name="remainDays")
    private @Nullable Output<String> remainDays;

    /**
     * @return The remaining days of the protection period of the assets in the current login account.
     * 
     */
    public Optional<Output<String>> remainDays() {
        return Optional.ofNullable(this.remainDays);
    }

    /**
     * Automatic renewal period. **NOTE:** The `renewPeriod` is required under the condition that renewalStatus is `AutoRenewal`,
     * 
     */
    @Import(name="renewPeriod")
    private @Nullable Output<Integer> renewPeriod;

    /**
     * @return Automatic renewal period. **NOTE:** The `renewPeriod` is required under the condition that renewalStatus is `AutoRenewal`,
     * 
     */
    public Optional<Output<Integer>> renewPeriod() {
        return Optional.ofNullable(this.renewPeriod);
    }

    /**
     * Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
     * 
     */
    @Import(name="renewalStatus")
    private @Nullable Output<String> renewalStatus;

    /**
     * @return Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
     * 
     */
    public Optional<Output<String>> renewalStatus() {
        return Optional.ofNullable(this.renewalStatus);
    }

    /**
     * Whether to use the database. Valid values:`yes`,`no`.
     * 
     */
    @Import(name="sdCbool")
    private @Nullable Output<String> sdCbool;

    /**
     * @return Whether to use the database. Valid values:`yes`,`no`.
     * 
     */
    public Optional<Output<String>> sdCbool() {
        return Optional.ofNullable(this.sdCbool);
    }

    /**
     * The number of instances.
     * 
     */
    @Import(name="sdc")
    private @Nullable Output<String> sdc;

    /**
     * @return The number of instances.
     * 
     */
    public Optional<Output<String>> sdc() {
        return Optional.ofNullable(this.sdc);
    }

    /**
     * The sddp version. Valid values: `versionAudit`,`versionCompany`,`versionDlp`.
     * 
     */
    @Import(name="sddpVersion")
    private @Nullable Output<String> sddpVersion;

    /**
     * @return The sddp version. Valid values: `versionAudit`,`versionCompany`,`versionDlp`.
     * 
     */
    public Optional<Output<String>> sddpVersion() {
        return Optional.ofNullable(this.sddpVersion);
    }

    /**
     * The status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Whether to use OSS. Valid values: `yes`,`no`.
     * 
     */
    @Import(name="udCbool")
    private @Nullable Output<String> udCbool;

    /**
     * @return Whether to use OSS. Valid values: `yes`,`no`.
     * 
     */
    public Optional<Output<String>> udCbool() {
        return Optional.ofNullable(this.udCbool);
    }

    /**
     * OSS Size.
     * 
     */
    @Import(name="udc")
    private @Nullable Output<String> udc;

    /**
     * @return OSS Size.
     * 
     */
    public Optional<Output<String>> udc() {
        return Optional.ofNullable(this.udc);
    }

    private InstanceState() {}

    private InstanceState(InstanceState $) {
        this.authed = $.authed;
        this.dataphin = $.dataphin;
        this.dataphinCount = $.dataphinCount;
        this.instanceNum = $.instanceNum;
        this.logistics = $.logistics;
        this.modifyType = $.modifyType;
        this.odpsSet = $.odpsSet;
        this.ossBucketSet = $.ossBucketSet;
        this.ossSize = $.ossSize;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.rdsSet = $.rdsSet;
        this.remainDays = $.remainDays;
        this.renewPeriod = $.renewPeriod;
        this.renewalStatus = $.renewalStatus;
        this.sdCbool = $.sdCbool;
        this.sdc = $.sdc;
        this.sddpVersion = $.sddpVersion;
        this.status = $.status;
        this.udCbool = $.udCbool;
        this.udc = $.udc;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceState $;

        public Builder() {
            $ = new InstanceState();
        }

        public Builder(InstanceState defaults) {
            $ = new InstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authed Whether the required RAM authorization is configured.
         * 
         * @return builder
         * 
         */
        public Builder authed(@Nullable Output<Boolean> authed) {
            $.authed = authed;
            return this;
        }

        /**
         * @param authed Whether the required RAM authorization is configured.
         * 
         * @return builder
         * 
         */
        public Builder authed(Boolean authed) {
            return authed(Output.of(authed));
        }

        /**
         * @param dataphin The dataphin. Valid values: `yes`,`no`.
         * 
         * @return builder
         * 
         */
        public Builder dataphin(@Nullable Output<String> dataphin) {
            $.dataphin = dataphin;
            return this;
        }

        /**
         * @param dataphin The dataphin. Valid values: `yes`,`no`.
         * 
         * @return builder
         * 
         */
        public Builder dataphin(String dataphin) {
            return dataphin(Output.of(dataphin));
        }

        /**
         * @param dataphinCount The dataphin count. Valid values: 1 to 20.
         * 
         * @return builder
         * 
         */
        public Builder dataphinCount(@Nullable Output<String> dataphinCount) {
            $.dataphinCount = dataphinCount;
            return this;
        }

        /**
         * @param dataphinCount The dataphin count. Valid values: 1 to 20.
         * 
         * @return builder
         * 
         */
        public Builder dataphinCount(String dataphinCount) {
            return dataphinCount(Output.of(dataphinCount));
        }

        /**
         * @param instanceNum The number of instances.
         * 
         * @return builder
         * 
         */
        public Builder instanceNum(@Nullable Output<String> instanceNum) {
            $.instanceNum = instanceNum;
            return this;
        }

        /**
         * @param instanceNum The number of instances.
         * 
         * @return builder
         * 
         */
        public Builder instanceNum(String instanceNum) {
            return instanceNum(Output.of(instanceNum));
        }

        /**
         * @param logistics The logistics.
         * 
         * @return builder
         * 
         */
        public Builder logistics(@Nullable Output<String> logistics) {
            $.logistics = logistics;
            return this;
        }

        /**
         * @param logistics The logistics.
         * 
         * @return builder
         * 
         */
        public Builder logistics(String logistics) {
            return logistics(Output.of(logistics));
        }

        /**
         * @param modifyType The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modifyType` is required when you execute a update operation.
         * 
         * @return builder
         * 
         */
        public Builder modifyType(@Nullable Output<String> modifyType) {
            $.modifyType = modifyType;
            return this;
        }

        /**
         * @param modifyType The modify type. Valid values: `Upgrade`, `Downgrade`.  **NOTE:** The `modifyType` is required when you execute a update operation.
         * 
         * @return builder
         * 
         */
        public Builder modifyType(String modifyType) {
            return modifyType(Output.of(modifyType));
        }

        /**
         * @param odpsSet Whether the authorized MaxCompute (ODPS) assets.
         * 
         * @return builder
         * 
         */
        public Builder odpsSet(@Nullable Output<Boolean> odpsSet) {
            $.odpsSet = odpsSet;
            return this;
        }

        /**
         * @param odpsSet Whether the authorized MaxCompute (ODPS) assets.
         * 
         * @return builder
         * 
         */
        public Builder odpsSet(Boolean odpsSet) {
            return odpsSet(Output.of(odpsSet));
        }

        /**
         * @param ossBucketSet Whether the authorized oss assets.
         * 
         * @return builder
         * 
         */
        public Builder ossBucketSet(@Nullable Output<Boolean> ossBucketSet) {
            $.ossBucketSet = ossBucketSet;
            return this;
        }

        /**
         * @param ossBucketSet Whether the authorized oss assets.
         * 
         * @return builder
         * 
         */
        public Builder ossBucketSet(Boolean ossBucketSet) {
            return ossBucketSet(Output.of(ossBucketSet));
        }

        /**
         * @param ossSize The OSS storage capacity.
         * 
         * @return builder
         * 
         */
        public Builder ossSize(@Nullable Output<String> ossSize) {
            $.ossSize = ossSize;
            return this;
        }

        /**
         * @param ossSize The OSS storage capacity.
         * 
         * @return builder
         * 
         */
        public Builder ossSize(String ossSize) {
            return ossSize(Output.of(ossSize));
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period The Prepaid period. Valid values: `1`, `2`, `3`, `6`,`12`,`24`.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The Prepaid period. Valid values: `1`, `2`, `3`, `6`,`12`,`24`.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param rdsSet Whether the authorized rds assets.
         * 
         * @return builder
         * 
         */
        public Builder rdsSet(@Nullable Output<Boolean> rdsSet) {
            $.rdsSet = rdsSet;
            return this;
        }

        /**
         * @param rdsSet Whether the authorized rds assets.
         * 
         * @return builder
         * 
         */
        public Builder rdsSet(Boolean rdsSet) {
            return rdsSet(Output.of(rdsSet));
        }

        /**
         * @param remainDays The remaining days of the protection period of the assets in the current login account.
         * 
         * @return builder
         * 
         */
        public Builder remainDays(@Nullable Output<String> remainDays) {
            $.remainDays = remainDays;
            return this;
        }

        /**
         * @param remainDays The remaining days of the protection period of the assets in the current login account.
         * 
         * @return builder
         * 
         */
        public Builder remainDays(String remainDays) {
            return remainDays(Output.of(remainDays));
        }

        /**
         * @param renewPeriod Automatic renewal period. **NOTE:** The `renewPeriod` is required under the condition that renewalStatus is `AutoRenewal`,
         * 
         * @return builder
         * 
         */
        public Builder renewPeriod(@Nullable Output<Integer> renewPeriod) {
            $.renewPeriod = renewPeriod;
            return this;
        }

        /**
         * @param renewPeriod Automatic renewal period. **NOTE:** The `renewPeriod` is required under the condition that renewalStatus is `AutoRenewal`,
         * 
         * @return builder
         * 
         */
        public Builder renewPeriod(Integer renewPeriod) {
            return renewPeriod(Output.of(renewPeriod));
        }

        /**
         * @param renewalStatus Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
         * 
         * @return builder
         * 
         */
        public Builder renewalStatus(@Nullable Output<String> renewalStatus) {
            $.renewalStatus = renewalStatus;
            return this;
        }

        /**
         * @param renewalStatus Automatic renewal status. Valid values: `AutoRenewal`,`ManualRenewal`. Default Value: `ManualRenewal`.
         * 
         * @return builder
         * 
         */
        public Builder renewalStatus(String renewalStatus) {
            return renewalStatus(Output.of(renewalStatus));
        }

        /**
         * @param sdCbool Whether to use the database. Valid values:`yes`,`no`.
         * 
         * @return builder
         * 
         */
        public Builder sdCbool(@Nullable Output<String> sdCbool) {
            $.sdCbool = sdCbool;
            return this;
        }

        /**
         * @param sdCbool Whether to use the database. Valid values:`yes`,`no`.
         * 
         * @return builder
         * 
         */
        public Builder sdCbool(String sdCbool) {
            return sdCbool(Output.of(sdCbool));
        }

        /**
         * @param sdc The number of instances.
         * 
         * @return builder
         * 
         */
        public Builder sdc(@Nullable Output<String> sdc) {
            $.sdc = sdc;
            return this;
        }

        /**
         * @param sdc The number of instances.
         * 
         * @return builder
         * 
         */
        public Builder sdc(String sdc) {
            return sdc(Output.of(sdc));
        }

        /**
         * @param sddpVersion The sddp version. Valid values: `versionAudit`,`versionCompany`,`versionDlp`.
         * 
         * @return builder
         * 
         */
        public Builder sddpVersion(@Nullable Output<String> sddpVersion) {
            $.sddpVersion = sddpVersion;
            return this;
        }

        /**
         * @param sddpVersion The sddp version. Valid values: `versionAudit`,`versionCompany`,`versionDlp`.
         * 
         * @return builder
         * 
         */
        public Builder sddpVersion(String sddpVersion) {
            return sddpVersion(Output.of(sddpVersion));
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param udCbool Whether to use OSS. Valid values: `yes`,`no`.
         * 
         * @return builder
         * 
         */
        public Builder udCbool(@Nullable Output<String> udCbool) {
            $.udCbool = udCbool;
            return this;
        }

        /**
         * @param udCbool Whether to use OSS. Valid values: `yes`,`no`.
         * 
         * @return builder
         * 
         */
        public Builder udCbool(String udCbool) {
            return udCbool(Output.of(udCbool));
        }

        /**
         * @param udc OSS Size.
         * 
         * @return builder
         * 
         */
        public Builder udc(@Nullable Output<String> udc) {
            $.udc = udc;
            return this;
        }

        /**
         * @param udc OSS Size.
         * 
         * @return builder
         * 
         */
        public Builder udc(String udc) {
            return udc(Output.of(udc));
        }

        public InstanceState build() {
            return $;
        }
    }

}
