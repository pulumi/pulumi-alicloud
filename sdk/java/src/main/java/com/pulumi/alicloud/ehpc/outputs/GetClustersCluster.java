// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ehpc.outputs;

import com.pulumi.alicloud.ehpc.outputs.GetClustersClusterApplication;
import com.pulumi.alicloud.ehpc.outputs.GetClustersClusterPostInstallScript;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClustersCluster {
    /**
     * @return The server type of the account.
     * 
     */
    private String accountType;
    private List<GetClustersClusterApplication> applications;
    /**
     * @return The version number of the client used by the cluster.
     * 
     */
    private String clientVersion;
    private String clusterId;
    private String clusterName;
    private Integer computeCount;
    private String computeInstanceType;
    private String createTime;
    private String deployMode;
    private String description;
    private Boolean haEnable;
    private String id;
    private String imageId;
    private String imageOwnerAlias;
    private Integer loginCount;
    private String loginInstanceType;
    private Integer managerCount;
    private String managerInstanceType;
    private String osTag;
    private List<GetClustersClusterPostInstallScript> postInstallScripts;
    private String remoteDirectory;
    private String sccClusterId;
    private String schedulerType;
    private String securityGroupId;
    /**
     * @return The status of the resource. Valid values:
     * 
     */
    private String status;
    private String volumeId;
    private String volumeMountpoint;
    private String volumeProtocol;
    private String volumeType;
    private String vpcId;
    private String vswitchId;
    private String zoneId;

    private GetClustersCluster() {}
    /**
     * @return The server type of the account.
     * 
     */
    public String accountType() {
        return this.accountType;
    }
    public List<GetClustersClusterApplication> applications() {
        return this.applications;
    }
    /**
     * @return The version number of the client used by the cluster.
     * 
     */
    public String clientVersion() {
        return this.clientVersion;
    }
    public String clusterId() {
        return this.clusterId;
    }
    public String clusterName() {
        return this.clusterName;
    }
    public Integer computeCount() {
        return this.computeCount;
    }
    public String computeInstanceType() {
        return this.computeInstanceType;
    }
    public String createTime() {
        return this.createTime;
    }
    public String deployMode() {
        return this.deployMode;
    }
    public String description() {
        return this.description;
    }
    public Boolean haEnable() {
        return this.haEnable;
    }
    public String id() {
        return this.id;
    }
    public String imageId() {
        return this.imageId;
    }
    public String imageOwnerAlias() {
        return this.imageOwnerAlias;
    }
    public Integer loginCount() {
        return this.loginCount;
    }
    public String loginInstanceType() {
        return this.loginInstanceType;
    }
    public Integer managerCount() {
        return this.managerCount;
    }
    public String managerInstanceType() {
        return this.managerInstanceType;
    }
    public String osTag() {
        return this.osTag;
    }
    public List<GetClustersClusterPostInstallScript> postInstallScripts() {
        return this.postInstallScripts;
    }
    public String remoteDirectory() {
        return this.remoteDirectory;
    }
    public String sccClusterId() {
        return this.sccClusterId;
    }
    public String schedulerType() {
        return this.schedulerType;
    }
    public String securityGroupId() {
        return this.securityGroupId;
    }
    /**
     * @return The status of the resource. Valid values:
     * 
     */
    public String status() {
        return this.status;
    }
    public String volumeId() {
        return this.volumeId;
    }
    public String volumeMountpoint() {
        return this.volumeMountpoint;
    }
    public String volumeProtocol() {
        return this.volumeProtocol;
    }
    public String volumeType() {
        return this.volumeType;
    }
    public String vpcId() {
        return this.vpcId;
    }
    public String vswitchId() {
        return this.vswitchId;
    }
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClustersCluster defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountType;
        private List<GetClustersClusterApplication> applications;
        private String clientVersion;
        private String clusterId;
        private String clusterName;
        private Integer computeCount;
        private String computeInstanceType;
        private String createTime;
        private String deployMode;
        private String description;
        private Boolean haEnable;
        private String id;
        private String imageId;
        private String imageOwnerAlias;
        private Integer loginCount;
        private String loginInstanceType;
        private Integer managerCount;
        private String managerInstanceType;
        private String osTag;
        private List<GetClustersClusterPostInstallScript> postInstallScripts;
        private String remoteDirectory;
        private String sccClusterId;
        private String schedulerType;
        private String securityGroupId;
        private String status;
        private String volumeId;
        private String volumeMountpoint;
        private String volumeProtocol;
        private String volumeType;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetClustersCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountType = defaults.accountType;
    	      this.applications = defaults.applications;
    	      this.clientVersion = defaults.clientVersion;
    	      this.clusterId = defaults.clusterId;
    	      this.clusterName = defaults.clusterName;
    	      this.computeCount = defaults.computeCount;
    	      this.computeInstanceType = defaults.computeInstanceType;
    	      this.createTime = defaults.createTime;
    	      this.deployMode = defaults.deployMode;
    	      this.description = defaults.description;
    	      this.haEnable = defaults.haEnable;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.imageOwnerAlias = defaults.imageOwnerAlias;
    	      this.loginCount = defaults.loginCount;
    	      this.loginInstanceType = defaults.loginInstanceType;
    	      this.managerCount = defaults.managerCount;
    	      this.managerInstanceType = defaults.managerInstanceType;
    	      this.osTag = defaults.osTag;
    	      this.postInstallScripts = defaults.postInstallScripts;
    	      this.remoteDirectory = defaults.remoteDirectory;
    	      this.sccClusterId = defaults.sccClusterId;
    	      this.schedulerType = defaults.schedulerType;
    	      this.securityGroupId = defaults.securityGroupId;
    	      this.status = defaults.status;
    	      this.volumeId = defaults.volumeId;
    	      this.volumeMountpoint = defaults.volumeMountpoint;
    	      this.volumeProtocol = defaults.volumeProtocol;
    	      this.volumeType = defaults.volumeType;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder accountType(String accountType) {
            if (accountType == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "accountType");
            }
            this.accountType = accountType;
            return this;
        }
        @CustomType.Setter
        public Builder applications(List<GetClustersClusterApplication> applications) {
            if (applications == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "applications");
            }
            this.applications = applications;
            return this;
        }
        public Builder applications(GetClustersClusterApplication... applications) {
            return applications(List.of(applications));
        }
        @CustomType.Setter
        public Builder clientVersion(String clientVersion) {
            if (clientVersion == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "clientVersion");
            }
            this.clientVersion = clientVersion;
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            if (clusterId == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "clusterId");
            }
            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder clusterName(String clusterName) {
            if (clusterName == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "clusterName");
            }
            this.clusterName = clusterName;
            return this;
        }
        @CustomType.Setter
        public Builder computeCount(Integer computeCount) {
            if (computeCount == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "computeCount");
            }
            this.computeCount = computeCount;
            return this;
        }
        @CustomType.Setter
        public Builder computeInstanceType(String computeInstanceType) {
            if (computeInstanceType == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "computeInstanceType");
            }
            this.computeInstanceType = computeInstanceType;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder deployMode(String deployMode) {
            if (deployMode == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "deployMode");
            }
            this.deployMode = deployMode;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder haEnable(Boolean haEnable) {
            if (haEnable == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "haEnable");
            }
            this.haEnable = haEnable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            if (imageId == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "imageId");
            }
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder imageOwnerAlias(String imageOwnerAlias) {
            if (imageOwnerAlias == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "imageOwnerAlias");
            }
            this.imageOwnerAlias = imageOwnerAlias;
            return this;
        }
        @CustomType.Setter
        public Builder loginCount(Integer loginCount) {
            if (loginCount == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "loginCount");
            }
            this.loginCount = loginCount;
            return this;
        }
        @CustomType.Setter
        public Builder loginInstanceType(String loginInstanceType) {
            if (loginInstanceType == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "loginInstanceType");
            }
            this.loginInstanceType = loginInstanceType;
            return this;
        }
        @CustomType.Setter
        public Builder managerCount(Integer managerCount) {
            if (managerCount == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "managerCount");
            }
            this.managerCount = managerCount;
            return this;
        }
        @CustomType.Setter
        public Builder managerInstanceType(String managerInstanceType) {
            if (managerInstanceType == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "managerInstanceType");
            }
            this.managerInstanceType = managerInstanceType;
            return this;
        }
        @CustomType.Setter
        public Builder osTag(String osTag) {
            if (osTag == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "osTag");
            }
            this.osTag = osTag;
            return this;
        }
        @CustomType.Setter
        public Builder postInstallScripts(List<GetClustersClusterPostInstallScript> postInstallScripts) {
            if (postInstallScripts == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "postInstallScripts");
            }
            this.postInstallScripts = postInstallScripts;
            return this;
        }
        public Builder postInstallScripts(GetClustersClusterPostInstallScript... postInstallScripts) {
            return postInstallScripts(List.of(postInstallScripts));
        }
        @CustomType.Setter
        public Builder remoteDirectory(String remoteDirectory) {
            if (remoteDirectory == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "remoteDirectory");
            }
            this.remoteDirectory = remoteDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder sccClusterId(String sccClusterId) {
            if (sccClusterId == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "sccClusterId");
            }
            this.sccClusterId = sccClusterId;
            return this;
        }
        @CustomType.Setter
        public Builder schedulerType(String schedulerType) {
            if (schedulerType == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "schedulerType");
            }
            this.schedulerType = schedulerType;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupId(String securityGroupId) {
            if (securityGroupId == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "securityGroupId");
            }
            this.securityGroupId = securityGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder volumeId(String volumeId) {
            if (volumeId == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "volumeId");
            }
            this.volumeId = volumeId;
            return this;
        }
        @CustomType.Setter
        public Builder volumeMountpoint(String volumeMountpoint) {
            if (volumeMountpoint == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "volumeMountpoint");
            }
            this.volumeMountpoint = volumeMountpoint;
            return this;
        }
        @CustomType.Setter
        public Builder volumeProtocol(String volumeProtocol) {
            if (volumeProtocol == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "volumeProtocol");
            }
            this.volumeProtocol = volumeProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(String volumeType) {
            if (volumeType == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "volumeType");
            }
            this.volumeType = volumeType;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            if (vswitchId == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "vswitchId");
            }
            this.vswitchId = vswitchId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetClustersCluster", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetClustersCluster build() {
            final var _resultValue = new GetClustersCluster();
            _resultValue.accountType = accountType;
            _resultValue.applications = applications;
            _resultValue.clientVersion = clientVersion;
            _resultValue.clusterId = clusterId;
            _resultValue.clusterName = clusterName;
            _resultValue.computeCount = computeCount;
            _resultValue.computeInstanceType = computeInstanceType;
            _resultValue.createTime = createTime;
            _resultValue.deployMode = deployMode;
            _resultValue.description = description;
            _resultValue.haEnable = haEnable;
            _resultValue.id = id;
            _resultValue.imageId = imageId;
            _resultValue.imageOwnerAlias = imageOwnerAlias;
            _resultValue.loginCount = loginCount;
            _resultValue.loginInstanceType = loginInstanceType;
            _resultValue.managerCount = managerCount;
            _resultValue.managerInstanceType = managerInstanceType;
            _resultValue.osTag = osTag;
            _resultValue.postInstallScripts = postInstallScripts;
            _resultValue.remoteDirectory = remoteDirectory;
            _resultValue.sccClusterId = sccClusterId;
            _resultValue.schedulerType = schedulerType;
            _resultValue.securityGroupId = securityGroupId;
            _resultValue.status = status;
            _resultValue.volumeId = volumeId;
            _resultValue.volumeMountpoint = volumeMountpoint;
            _resultValue.volumeProtocol = volumeProtocol;
            _resultValue.volumeType = volumeType;
            _resultValue.vpcId = vpcId;
            _resultValue.vswitchId = vswitchId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
