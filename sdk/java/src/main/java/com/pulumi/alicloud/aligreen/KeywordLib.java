// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.aligreen;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.aligreen.KeywordLibArgs;
import com.pulumi.alicloud.aligreen.inputs.KeywordLibState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Aligreen Keyword Lib resource.
 * 
 * Keyword library for text detection.
 * 
 * For information about Aligreen Keyword Lib and how to use it, see [What is Keyword Lib](https://www.alibabacloud.com/help/en/).
 * 
 * &gt; **NOTE:** Available since v1.228.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.random.integer;
 * import com.pulumi.random.IntegerArgs;
 * import com.pulumi.alicloud.aligreen.BizType;
 * import com.pulumi.alicloud.aligreen.BizTypeArgs;
 * import com.pulumi.alicloud.aligreen.KeywordLib;
 * import com.pulumi.alicloud.aligreen.KeywordLibArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("terraform");
 *         var default_ = new Integer("default", IntegerArgs.builder()
 *             .min(10000)
 *             .max(99999)
 *             .build());
 * 
 *         var defaultMn8sVK = new BizType("defaultMn8sVK", BizTypeArgs.builder()
 *             .bizTypeName(String.format("%s%s", name,default_.result()))
 *             .citeTemplate(true)
 *             .industryInfo("社交-注册信息-昵称")
 *             .build());
 * 
 *         var defaultKeywordLib = new KeywordLib("defaultKeywordLib", KeywordLibArgs.builder()
 *             .category("BLACK")
 *             .resourceType("TEXT")
 *             .libType("textKeyword")
 *             .keywordLibName(name)
 *             .matchMode("fuzzy")
 *             .language("cn")
 *             .bizTypes("example_007")
 *             .lang("cn")
 *             .enable(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Aligreen Keyword Lib can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:aligreen/keywordLib:KeywordLib example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:aligreen/keywordLib:KeywordLib")
public class KeywordLib extends com.pulumi.resources.CustomResource {
    /**
     * The business scenario. Example:[&#34;bizTypeA&#34;,&#34;bizTypeB&#34;]
     * 
     */
    @Export(name="bizTypes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> bizTypes;

    /**
     * @return The business scenario. Example:[&#34;bizTypeA&#34;,&#34;bizTypeB&#34;]
     * 
     */
    public Output<Optional<List<String>>> bizTypes() {
        return Codegen.optional(this.bizTypes);
    }
    /**
     * The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
     * 
     */
    @Export(name="category", refs={String.class}, tree="[0]")
    private Output<String> category;

    /**
     * @return The category of the text library. Valid values: BLACK: a blacklist. WHITE: a whitelist. REVIEW: a review list
     * 
     */
    public Output<String> category() {
        return this.category;
    }
    /**
     * Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
     * 
     */
    @Export(name="enable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enable;

    /**
     * @return Specifies whether to enable text library.true: Enable the text library. This is the default value.false: Disable the text library.
     * 
     */
    public Output<Boolean> enable() {
        return this.enable;
    }
    /**
     * The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
     * 
     */
    @Export(name="keywordLibName", refs={String.class}, tree="[0]")
    private Output<String> keywordLibName;

    /**
     * @return The name of the keyword library defined by the customer. It can contain no more than 20 characters in Chinese, English, and underscore (_).
     * 
     */
    public Output<String> keywordLibName() {
        return this.keywordLibName;
    }
    /**
     * Language.
     * 
     */
    @Export(name="lang", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> lang;

    /**
     * @return Language.
     * 
     */
    public Output<Optional<String>> lang() {
        return Codegen.optional(this.lang);
    }
    /**
     * Language used by the text Library
     * 
     */
    @Export(name="language", refs={String.class}, tree="[0]")
    private Output<String> language;

    /**
     * @return Language used by the text Library
     * 
     */
    public Output<String> language() {
        return this.language;
    }
    /**
     * The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
     * 
     */
    @Export(name="libType", refs={String.class}, tree="[0]")
    private Output<String> libType;

    /**
     * @return The category of the text library in each moderation scenario. Valid values: textKeyword: a text library against which terms in text are matched. similarText: a text library against which text patterns are matched. textKeyword: a text library against which terms extracted from images are matched. voiceText: a text library against which terms converted from audio are matched.
     * 
     */
    public Output<String> libType() {
        return this.libType;
    }
    /**
     * The matching method. Valid values:fuzzy: fuzzy match precise: exact match
     * 
     */
    @Export(name="matchMode", refs={String.class}, tree="[0]")
    private Output<String> matchMode;

    /**
     * @return The matching method. Valid values:fuzzy: fuzzy match precise: exact match
     * 
     */
    public Output<String> matchMode() {
        return this.matchMode;
    }
    /**
     * The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
     * 
     */
    @Export(name="resourceType", refs={String.class}, tree="[0]")
    private Output<String> resourceType;

    /**
     * @return The moderation scenario to which the text library applies. Valid values:TEXT: text anti-spam、IMAGE: ad violation detection、VOICE: audio anti-spam
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public KeywordLib(java.lang.String name) {
        this(name, KeywordLibArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public KeywordLib(java.lang.String name, KeywordLibArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public KeywordLib(java.lang.String name, KeywordLibArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:aligreen/keywordLib:KeywordLib", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private KeywordLib(java.lang.String name, Output<java.lang.String> id, @Nullable KeywordLibState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:aligreen/keywordLib:KeywordLib", name, state, makeResourceOptions(options, id), false);
    }

    private static KeywordLibArgs makeArgs(KeywordLibArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? KeywordLibArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static KeywordLib get(java.lang.String name, Output<java.lang.String> id, @Nullable KeywordLibState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new KeywordLib(name, id, state, options);
    }
}
