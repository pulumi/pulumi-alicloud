// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HanaBackupClientState extends com.pulumi.resources.ResourceArgs {

    public static final HanaBackupClientState Empty = new HanaBackupClientState();

    /**
     * The alert settings. Valid value: `INHERITED`.
     * 
     */
    @Import(name="alertSetting")
    private @Nullable Output<String> alertSetting;

    /**
     * @return The alert settings. Valid value: `INHERITED`.
     * 
     */
    public Optional<Output<String>> alertSetting() {
        return Optional.ofNullable(this.alertSetting);
    }

    /**
     * The ID of the backup client.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The ID of the backup client.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The installation information of the HBR clients.
     * 
     */
    @Import(name="clientInfo")
    private @Nullable Output<String> clientInfo;

    /**
     * @return The installation information of the HBR clients.
     * 
     */
    public Optional<Output<String>> clientInfo() {
        return Optional.ofNullable(this.clientInfo);
    }

    /**
     * The ID of the SAP HANA instance.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of the SAP HANA instance.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The status of the Hana Backup Client.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Hana Backup Client.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Specifies whether to transmit data over HTTPS. Valid values: `true`, `false`.
     * 
     */
    @Import(name="useHttps")
    private @Nullable Output<Boolean> useHttps;

    /**
     * @return Specifies whether to transmit data over HTTPS. Valid values: `true`, `false`.
     * 
     */
    public Optional<Output<Boolean>> useHttps() {
        return Optional.ofNullable(this.useHttps);
    }

    /**
     * The ID of the backup vault.
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return The ID of the backup vault.
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    private HanaBackupClientState() {}

    private HanaBackupClientState(HanaBackupClientState $) {
        this.alertSetting = $.alertSetting;
        this.clientId = $.clientId;
        this.clientInfo = $.clientInfo;
        this.clusterId = $.clusterId;
        this.instanceId = $.instanceId;
        this.status = $.status;
        this.useHttps = $.useHttps;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HanaBackupClientState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HanaBackupClientState $;

        public Builder() {
            $ = new HanaBackupClientState();
        }

        public Builder(HanaBackupClientState defaults) {
            $ = new HanaBackupClientState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertSetting The alert settings. Valid value: `INHERITED`.
         * 
         * @return builder
         * 
         */
        public Builder alertSetting(@Nullable Output<String> alertSetting) {
            $.alertSetting = alertSetting;
            return this;
        }

        /**
         * @param alertSetting The alert settings. Valid value: `INHERITED`.
         * 
         * @return builder
         * 
         */
        public Builder alertSetting(String alertSetting) {
            return alertSetting(Output.of(alertSetting));
        }

        /**
         * @param clientId The ID of the backup client.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The ID of the backup client.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientInfo The installation information of the HBR clients.
         * 
         * @return builder
         * 
         */
        public Builder clientInfo(@Nullable Output<String> clientInfo) {
            $.clientInfo = clientInfo;
            return this;
        }

        /**
         * @param clientInfo The installation information of the HBR clients.
         * 
         * @return builder
         * 
         */
        public Builder clientInfo(String clientInfo) {
            return clientInfo(Output.of(clientInfo));
        }

        /**
         * @param clusterId The ID of the SAP HANA instance.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the SAP HANA instance.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param status The status of the Hana Backup Client.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Hana Backup Client.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param useHttps Specifies whether to transmit data over HTTPS. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder useHttps(@Nullable Output<Boolean> useHttps) {
            $.useHttps = useHttps;
            return this;
        }

        /**
         * @param useHttps Specifies whether to transmit data over HTTPS. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder useHttps(Boolean useHttps) {
            return useHttps(Output.of(useHttps));
        }

        /**
         * @param vaultId The ID of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The ID of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public HanaBackupClientState build() {
            return $;
        }
    }

}
