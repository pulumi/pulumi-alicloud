// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerCommonBandwidthPackageAttachmentState extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerCommonBandwidthPackageAttachmentState Empty = new LoadbalancerCommonBandwidthPackageAttachmentState();

    /**
     * The ID of the bound shared bandwidth package.
     * 
     */
    @Import(name="bandwidthPackageId")
    private @Nullable Output<String> bandwidthPackageId;

    /**
     * @return The ID of the bound shared bandwidth package.
     * 
     */
    public Optional<Output<String>> bandwidthPackageId() {
        return Optional.ofNullable(this.bandwidthPackageId);
    }

    /**
     * The ID of the network-based server load balancer instance.
     * 
     */
    @Import(name="loadBalancerId")
    private @Nullable Output<String> loadBalancerId;

    /**
     * @return The ID of the network-based server load balancer instance.
     * 
     */
    public Optional<Output<String>> loadBalancerId() {
        return Optional.ofNullable(this.loadBalancerId);
    }

    /**
     * Network-based load balancing instance status. Value:, indicating that the instance listener will no longer forward traffic.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Network-based load balancing instance status. Value:, indicating that the instance listener will no longer forward traffic.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private LoadbalancerCommonBandwidthPackageAttachmentState() {}

    private LoadbalancerCommonBandwidthPackageAttachmentState(LoadbalancerCommonBandwidthPackageAttachmentState $) {
        this.bandwidthPackageId = $.bandwidthPackageId;
        this.loadBalancerId = $.loadBalancerId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerCommonBandwidthPackageAttachmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerCommonBandwidthPackageAttachmentState $;

        public Builder() {
            $ = new LoadbalancerCommonBandwidthPackageAttachmentState();
        }

        public Builder(LoadbalancerCommonBandwidthPackageAttachmentState defaults) {
            $ = new LoadbalancerCommonBandwidthPackageAttachmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidthPackageId The ID of the bound shared bandwidth package.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageId(@Nullable Output<String> bandwidthPackageId) {
            $.bandwidthPackageId = bandwidthPackageId;
            return this;
        }

        /**
         * @param bandwidthPackageId The ID of the bound shared bandwidth package.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageId(String bandwidthPackageId) {
            return bandwidthPackageId(Output.of(bandwidthPackageId));
        }

        /**
         * @param loadBalancerId The ID of the network-based server load balancer instance.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(@Nullable Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId The ID of the network-based server load balancer instance.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param status Network-based load balancing instance status. Value:, indicating that the instance listener will no longer forward traffic.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Network-based load balancing instance status. Value:, indicating that the instance listener will no longer forward traffic.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public LoadbalancerCommonBandwidthPackageAttachmentState build() {
            return $;
        }
    }

}
