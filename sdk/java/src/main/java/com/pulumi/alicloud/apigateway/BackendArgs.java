// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.apigateway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendArgs Empty = new BackendArgs();

    /**
     * The name of the Backend.
     * 
     */
    @Import(name="backendName", required=true)
    private Output<String> backendName;

    /**
     * @return The name of the Backend.
     * 
     */
    public Output<String> backendName() {
        return this.backendName;
    }

    /**
     * The type of the Backend. Valid values: `HTTP`, `VPC`, `FC_EVENT`, `FC_HTTP`, `OSS`, `MOCK`.
     * 
     */
    @Import(name="backendType", required=true)
    private Output<String> backendType;

    /**
     * @return The type of the Backend. Valid values: `HTTP`, `VPC`, `FC_EVENT`, `FC_HTTP`, `OSS`, `MOCK`.
     * 
     */
    public Output<String> backendType() {
        return this.backendType;
    }

    /**
     * Whether to create an Event bus service association role.
     * 
     */
    @Import(name="createEventBridgeServiceLinkedRole")
    private @Nullable Output<Boolean> createEventBridgeServiceLinkedRole;

    /**
     * @return Whether to create an Event bus service association role.
     * 
     */
    public Optional<Output<Boolean>> createEventBridgeServiceLinkedRole() {
        return Optional.ofNullable(this.createEventBridgeServiceLinkedRole);
    }

    /**
     * The description of the Backend.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Backend.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    private BackendArgs() {}

    private BackendArgs(BackendArgs $) {
        this.backendName = $.backendName;
        this.backendType = $.backendType;
        this.createEventBridgeServiceLinkedRole = $.createEventBridgeServiceLinkedRole;
        this.description = $.description;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendArgs $;

        public Builder() {
            $ = new BackendArgs();
        }

        public Builder(BackendArgs defaults) {
            $ = new BackendArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendName The name of the Backend.
         * 
         * @return builder
         * 
         */
        public Builder backendName(Output<String> backendName) {
            $.backendName = backendName;
            return this;
        }

        /**
         * @param backendName The name of the Backend.
         * 
         * @return builder
         * 
         */
        public Builder backendName(String backendName) {
            return backendName(Output.of(backendName));
        }

        /**
         * @param backendType The type of the Backend. Valid values: `HTTP`, `VPC`, `FC_EVENT`, `FC_HTTP`, `OSS`, `MOCK`.
         * 
         * @return builder
         * 
         */
        public Builder backendType(Output<String> backendType) {
            $.backendType = backendType;
            return this;
        }

        /**
         * @param backendType The type of the Backend. Valid values: `HTTP`, `VPC`, `FC_EVENT`, `FC_HTTP`, `OSS`, `MOCK`.
         * 
         * @return builder
         * 
         */
        public Builder backendType(String backendType) {
            return backendType(Output.of(backendType));
        }

        /**
         * @param createEventBridgeServiceLinkedRole Whether to create an Event bus service association role.
         * 
         * @return builder
         * 
         */
        public Builder createEventBridgeServiceLinkedRole(@Nullable Output<Boolean> createEventBridgeServiceLinkedRole) {
            $.createEventBridgeServiceLinkedRole = createEventBridgeServiceLinkedRole;
            return this;
        }

        /**
         * @param createEventBridgeServiceLinkedRole Whether to create an Event bus service association role.
         * 
         * @return builder
         * 
         */
        public Builder createEventBridgeServiceLinkedRole(Boolean createEventBridgeServiceLinkedRole) {
            return createEventBridgeServiceLinkedRole(Output.of(createEventBridgeServiceLinkedRole));
        }

        /**
         * @param description The description of the Backend.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Backend.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public BackendArgs build() {
            if ($.backendName == null) {
                throw new MissingRequiredPropertyException("BackendArgs", "backendName");
            }
            if ($.backendType == null) {
                throw new MissingRequiredPropertyException("BackendArgs", "backendType");
            }
            return $;
        }
    }

}
