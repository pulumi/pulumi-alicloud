// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class EtlConfigurationSinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final EtlConfigurationSinkArgs Empty = new EtlConfigurationSinkArgs();

    /**
     * Write Result Set.
     * 
     */
    @Import(name="datasets", required=true)
    private Output<List<String>> datasets;

    /**
     * @return Write Result Set.
     * 
     */
    public Output<List<String>> datasets() {
        return this.datasets;
    }

    /**
     * The endpoint of the region where the target Project is located.
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return The endpoint of the region where the target Project is located.
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    /**
     * Destination Logstore Name.
     * 
     */
    @Import(name="logstore", required=true)
    private Output<String> logstore;

    /**
     * @return Destination Logstore Name.
     * 
     */
    public Output<String> logstore() {
        return this.logstore;
    }

    /**
     * Output Destination Name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Output Destination Name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Project Name.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Project Name.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The ARN role that authorizes writing to the target Logstore.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return The ARN role that authorizes writing to the target Logstore.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    private EtlConfigurationSinkArgs() {}

    private EtlConfigurationSinkArgs(EtlConfigurationSinkArgs $) {
        this.datasets = $.datasets;
        this.endpoint = $.endpoint;
        this.logstore = $.logstore;
        this.name = $.name;
        this.project = $.project;
        this.roleArn = $.roleArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EtlConfigurationSinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EtlConfigurationSinkArgs $;

        public Builder() {
            $ = new EtlConfigurationSinkArgs();
        }

        public Builder(EtlConfigurationSinkArgs defaults) {
            $ = new EtlConfigurationSinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datasets Write Result Set.
         * 
         * @return builder
         * 
         */
        public Builder datasets(Output<List<String>> datasets) {
            $.datasets = datasets;
            return this;
        }

        /**
         * @param datasets Write Result Set.
         * 
         * @return builder
         * 
         */
        public Builder datasets(List<String> datasets) {
            return datasets(Output.of(datasets));
        }

        /**
         * @param datasets Write Result Set.
         * 
         * @return builder
         * 
         */
        public Builder datasets(String... datasets) {
            return datasets(List.of(datasets));
        }

        /**
         * @param endpoint The endpoint of the region where the target Project is located.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The endpoint of the region where the target Project is located.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param logstore Destination Logstore Name.
         * 
         * @return builder
         * 
         */
        public Builder logstore(Output<String> logstore) {
            $.logstore = logstore;
            return this;
        }

        /**
         * @param logstore Destination Logstore Name.
         * 
         * @return builder
         * 
         */
        public Builder logstore(String logstore) {
            return logstore(Output.of(logstore));
        }

        /**
         * @param name Output Destination Name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Output Destination Name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project Project Name.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project Name.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param roleArn The ARN role that authorizes writing to the target Logstore.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The ARN role that authorizes writing to the target Logstore.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public EtlConfigurationSinkArgs build() {
            if ($.datasets == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationSinkArgs", "datasets");
            }
            if ($.endpoint == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationSinkArgs", "endpoint");
            }
            if ($.logstore == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationSinkArgs", "logstore");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationSinkArgs", "name");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationSinkArgs", "project");
            }
            if ($.roleArn == null) {
                throw new MissingRequiredPropertyException("EtlConfigurationSinkArgs", "roleArn");
            }
            return $;
        }
    }

}
