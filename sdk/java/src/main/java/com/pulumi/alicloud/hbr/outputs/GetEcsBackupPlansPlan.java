// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEcsBackupPlansPlan {
    /**
     * @return Backup type. Valid values: `COMPLETE`.
     * 
     */
    private String backupType;
    private String createTime;
    /**
     * @return The creation time of the backup plan. UNIX time in seconds.
     * 
     */
    private String createdTime;
    private String detail;
    /**
     * @return Whether to be suspended. Valid values: `true`, `false`.
     * 
     */
    private Boolean disabled;
    /**
     * @return The ID of ecs backup plan.
     * 
     */
    private String ecsBackupPlanId;
    /**
     * @return The name of the backup plan.
     * 
     */
    private String ecsBackupPlanName;
    /**
     * @return Exclude path. String of Json list. Up to 255 characters. e.g. `&#34;[\&#34;/home/work\&#34;]&#34;`
     * 
     */
    private String exclude;
    /**
     * @return The ID of ecs backup plan.
     * 
     */
    private String id;
    /**
     * @return Include path. String of Json list. Up to 255 characters. e.g. `&#34;[\&#34;/var\&#34;]&#34;`
     * 
     */
    private String include;
    /**
     * @return The ID of ECS instance.
     * 
     */
    private String instanceId;
    /**
     * @return Windows operating system with application consistency using VSS. eg: {`UseVSS`:false}.
     * 
     */
    private String options;
    /**
     * @return Backup path. e.g. `[&#34;/home&#34;, &#34;/var&#34;]`
     * 
     */
    private List<String> paths;
    /**
     * @return Backup retention days, the minimum is 1.
     * 
     */
    private String retention;
    /**
     * @return Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
     * 
     */
    private String schedule;
    /**
     * @return The type of backup source.
     * 
     */
    private String sourceType;
    /**
     * @return Flow control. The format is: {start}|{end}|{bandwidth}. Use `|` to separate multiple flow control configurations, multiple flow control configurations not allowed to have overlapping times.
     * 
     */
    private String speedLimit;
    /**
     * @return The update time of the backup plan. UNIX time in seconds.
     * 
     */
    private String updatedTime;
    /**
     * @return The ID of Backup vault.
     * 
     */
    private String vaultId;

    private GetEcsBackupPlansPlan() {}
    /**
     * @return Backup type. Valid values: `COMPLETE`.
     * 
     */
    public String backupType() {
        return this.backupType;
    }
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The creation time of the backup plan. UNIX time in seconds.
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    public String detail() {
        return this.detail;
    }
    /**
     * @return Whether to be suspended. Valid values: `true`, `false`.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return The ID of ecs backup plan.
     * 
     */
    public String ecsBackupPlanId() {
        return this.ecsBackupPlanId;
    }
    /**
     * @return The name of the backup plan.
     * 
     */
    public String ecsBackupPlanName() {
        return this.ecsBackupPlanName;
    }
    /**
     * @return Exclude path. String of Json list. Up to 255 characters. e.g. `&#34;[\&#34;/home/work\&#34;]&#34;`
     * 
     */
    public String exclude() {
        return this.exclude;
    }
    /**
     * @return The ID of ecs backup plan.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Include path. String of Json list. Up to 255 characters. e.g. `&#34;[\&#34;/var\&#34;]&#34;`
     * 
     */
    public String include() {
        return this.include;
    }
    /**
     * @return The ID of ECS instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return Windows operating system with application consistency using VSS. eg: {`UseVSS`:false}.
     * 
     */
    public String options() {
        return this.options;
    }
    /**
     * @return Backup path. e.g. `[&#34;/home&#34;, &#34;/var&#34;]`
     * 
     */
    public List<String> paths() {
        return this.paths;
    }
    /**
     * @return Backup retention days, the minimum is 1.
     * 
     */
    public String retention() {
        return this.retention;
    }
    /**
     * @return Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
     * 
     */
    public String schedule() {
        return this.schedule;
    }
    /**
     * @return The type of backup source.
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return Flow control. The format is: {start}|{end}|{bandwidth}. Use `|` to separate multiple flow control configurations, multiple flow control configurations not allowed to have overlapping times.
     * 
     */
    public String speedLimit() {
        return this.speedLimit;
    }
    /**
     * @return The update time of the backup plan. UNIX time in seconds.
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }
    /**
     * @return The ID of Backup vault.
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEcsBackupPlansPlan defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupType;
        private String createTime;
        private String createdTime;
        private String detail;
        private Boolean disabled;
        private String ecsBackupPlanId;
        private String ecsBackupPlanName;
        private String exclude;
        private String id;
        private String include;
        private String instanceId;
        private String options;
        private List<String> paths;
        private String retention;
        private String schedule;
        private String sourceType;
        private String speedLimit;
        private String updatedTime;
        private String vaultId;
        public Builder() {}
        public Builder(GetEcsBackupPlansPlan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupType = defaults.backupType;
    	      this.createTime = defaults.createTime;
    	      this.createdTime = defaults.createdTime;
    	      this.detail = defaults.detail;
    	      this.disabled = defaults.disabled;
    	      this.ecsBackupPlanId = defaults.ecsBackupPlanId;
    	      this.ecsBackupPlanName = defaults.ecsBackupPlanName;
    	      this.exclude = defaults.exclude;
    	      this.id = defaults.id;
    	      this.include = defaults.include;
    	      this.instanceId = defaults.instanceId;
    	      this.options = defaults.options;
    	      this.paths = defaults.paths;
    	      this.retention = defaults.retention;
    	      this.schedule = defaults.schedule;
    	      this.sourceType = defaults.sourceType;
    	      this.speedLimit = defaults.speedLimit;
    	      this.updatedTime = defaults.updatedTime;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder backupType(String backupType) {
            this.backupType = Objects.requireNonNull(backupType);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            this.createdTime = Objects.requireNonNull(createdTime);
            return this;
        }
        @CustomType.Setter
        public Builder detail(String detail) {
            this.detail = Objects.requireNonNull(detail);
            return this;
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            this.disabled = Objects.requireNonNull(disabled);
            return this;
        }
        @CustomType.Setter
        public Builder ecsBackupPlanId(String ecsBackupPlanId) {
            this.ecsBackupPlanId = Objects.requireNonNull(ecsBackupPlanId);
            return this;
        }
        @CustomType.Setter
        public Builder ecsBackupPlanName(String ecsBackupPlanName) {
            this.ecsBackupPlanName = Objects.requireNonNull(ecsBackupPlanName);
            return this;
        }
        @CustomType.Setter
        public Builder exclude(String exclude) {
            this.exclude = Objects.requireNonNull(exclude);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder include(String include) {
            this.include = Objects.requireNonNull(include);
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder options(String options) {
            this.options = Objects.requireNonNull(options);
            return this;
        }
        @CustomType.Setter
        public Builder paths(List<String> paths) {
            this.paths = Objects.requireNonNull(paths);
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        @CustomType.Setter
        public Builder retention(String retention) {
            this.retention = Objects.requireNonNull(retention);
            return this;
        }
        @CustomType.Setter
        public Builder schedule(String schedule) {
            this.schedule = Objects.requireNonNull(schedule);
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            this.sourceType = Objects.requireNonNull(sourceType);
            return this;
        }
        @CustomType.Setter
        public Builder speedLimit(String speedLimit) {
            this.speedLimit = Objects.requireNonNull(speedLimit);
            return this;
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            this.updatedTime = Objects.requireNonNull(updatedTime);
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(String vaultId) {
            this.vaultId = Objects.requireNonNull(vaultId);
            return this;
        }
        public GetEcsBackupPlansPlan build() {
            final var o = new GetEcsBackupPlansPlan();
            o.backupType = backupType;
            o.createTime = createTime;
            o.createdTime = createdTime;
            o.detail = detail;
            o.disabled = disabled;
            o.ecsBackupPlanId = ecsBackupPlanId;
            o.ecsBackupPlanName = ecsBackupPlanName;
            o.exclude = exclude;
            o.id = id;
            o.include = include;
            o.instanceId = instanceId;
            o.options = options;
            o.paths = paths;
            o.retention = retention;
            o.schedule = schedule;
            o.sourceType = sourceType;
            o.speedLimit = speedLimit;
            o.updatedTime = updatedTime;
            o.vaultId = vaultId;
            return o;
        }
    }
}
