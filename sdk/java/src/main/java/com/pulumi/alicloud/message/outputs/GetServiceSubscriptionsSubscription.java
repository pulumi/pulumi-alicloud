// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.message.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceSubscriptionsSubscription {
    /**
     * @return The time when the subscription was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    private Integer createTime;
    /**
     * @return The endpoint to which the messages are pushed.
     * 
     */
    private String endpoint;
    /**
     * @return The tag that is used to filter messages. Only the messages that are attached with the specified tag can be pushed.
     * 
     */
    private String filterTag;
    /**
     * @return The id of the Subscription.
     * 
     */
    private String id;
    /**
     * @return The time when the subscription was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    private Integer lastModifyTime;
    /**
     * @return The content format of the messages that are pushed to the endpoint.
     * 
     */
    private String notifyContentFormat;
    /**
     * @return The retry policy that is applied if an error occurs when MNS pushes messages to the endpoint.
     * 
     */
    private String notifyStrategy;
    /**
     * @return The name of the subscription.
     * 
     */
    private String subscriptionName;
    /**
     * @return The url of the subscription.
     * 
     */
    private String subscriptionUrl;
    /**
     * @return The name of the topic.
     * 
     */
    private String topicName;
    /**
     * @return The account ID of the topic owner.
     * 
     */
    private String topicOwner;

    private GetServiceSubscriptionsSubscription() {}
    /**
     * @return The time when the subscription was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    public Integer createTime() {
        return this.createTime;
    }
    /**
     * @return The endpoint to which the messages are pushed.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return The tag that is used to filter messages. Only the messages that are attached with the specified tag can be pushed.
     * 
     */
    public String filterTag() {
        return this.filterTag;
    }
    /**
     * @return The id of the Subscription.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The time when the subscription was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    public Integer lastModifyTime() {
        return this.lastModifyTime;
    }
    /**
     * @return The content format of the messages that are pushed to the endpoint.
     * 
     */
    public String notifyContentFormat() {
        return this.notifyContentFormat;
    }
    /**
     * @return The retry policy that is applied if an error occurs when MNS pushes messages to the endpoint.
     * 
     */
    public String notifyStrategy() {
        return this.notifyStrategy;
    }
    /**
     * @return The name of the subscription.
     * 
     */
    public String subscriptionName() {
        return this.subscriptionName;
    }
    /**
     * @return The url of the subscription.
     * 
     */
    public String subscriptionUrl() {
        return this.subscriptionUrl;
    }
    /**
     * @return The name of the topic.
     * 
     */
    public String topicName() {
        return this.topicName;
    }
    /**
     * @return The account ID of the topic owner.
     * 
     */
    public String topicOwner() {
        return this.topicOwner;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceSubscriptionsSubscription defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer createTime;
        private String endpoint;
        private String filterTag;
        private String id;
        private Integer lastModifyTime;
        private String notifyContentFormat;
        private String notifyStrategy;
        private String subscriptionName;
        private String subscriptionUrl;
        private String topicName;
        private String topicOwner;
        public Builder() {}
        public Builder(GetServiceSubscriptionsSubscription defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.endpoint = defaults.endpoint;
    	      this.filterTag = defaults.filterTag;
    	      this.id = defaults.id;
    	      this.lastModifyTime = defaults.lastModifyTime;
    	      this.notifyContentFormat = defaults.notifyContentFormat;
    	      this.notifyStrategy = defaults.notifyStrategy;
    	      this.subscriptionName = defaults.subscriptionName;
    	      this.subscriptionUrl = defaults.subscriptionUrl;
    	      this.topicName = defaults.topicName;
    	      this.topicOwner = defaults.topicOwner;
        }

        @CustomType.Setter
        public Builder createTime(Integer createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetServiceSubscriptionsSubscription", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetServiceSubscriptionsSubscription", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder filterTag(String filterTag) {
            if (filterTag == null) {
              throw new MissingRequiredPropertyException("GetServiceSubscriptionsSubscription", "filterTag");
            }
            this.filterTag = filterTag;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceSubscriptionsSubscription", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastModifyTime(Integer lastModifyTime) {
            if (lastModifyTime == null) {
              throw new MissingRequiredPropertyException("GetServiceSubscriptionsSubscription", "lastModifyTime");
            }
            this.lastModifyTime = lastModifyTime;
            return this;
        }
        @CustomType.Setter
        public Builder notifyContentFormat(String notifyContentFormat) {
            if (notifyContentFormat == null) {
              throw new MissingRequiredPropertyException("GetServiceSubscriptionsSubscription", "notifyContentFormat");
            }
            this.notifyContentFormat = notifyContentFormat;
            return this;
        }
        @CustomType.Setter
        public Builder notifyStrategy(String notifyStrategy) {
            if (notifyStrategy == null) {
              throw new MissingRequiredPropertyException("GetServiceSubscriptionsSubscription", "notifyStrategy");
            }
            this.notifyStrategy = notifyStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionName(String subscriptionName) {
            if (subscriptionName == null) {
              throw new MissingRequiredPropertyException("GetServiceSubscriptionsSubscription", "subscriptionName");
            }
            this.subscriptionName = subscriptionName;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionUrl(String subscriptionUrl) {
            if (subscriptionUrl == null) {
              throw new MissingRequiredPropertyException("GetServiceSubscriptionsSubscription", "subscriptionUrl");
            }
            this.subscriptionUrl = subscriptionUrl;
            return this;
        }
        @CustomType.Setter
        public Builder topicName(String topicName) {
            if (topicName == null) {
              throw new MissingRequiredPropertyException("GetServiceSubscriptionsSubscription", "topicName");
            }
            this.topicName = topicName;
            return this;
        }
        @CustomType.Setter
        public Builder topicOwner(String topicOwner) {
            if (topicOwner == null) {
              throw new MissingRequiredPropertyException("GetServiceSubscriptionsSubscription", "topicOwner");
            }
            this.topicOwner = topicOwner;
            return this;
        }
        public GetServiceSubscriptionsSubscription build() {
            final var _resultValue = new GetServiceSubscriptionsSubscription();
            _resultValue.createTime = createTime;
            _resultValue.endpoint = endpoint;
            _resultValue.filterTag = filterTag;
            _resultValue.id = id;
            _resultValue.lastModifyTime = lastModifyTime;
            _resultValue.notifyContentFormat = notifyContentFormat;
            _resultValue.notifyStrategy = notifyStrategy;
            _resultValue.subscriptionName = subscriptionName;
            _resultValue.subscriptionUrl = subscriptionUrl;
            _resultValue.topicName = topicName;
            _resultValue.topicOwner = topicOwner;
            return _resultValue;
        }
    }
}
