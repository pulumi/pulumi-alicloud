// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc.inputs;

import com.pulumi.alicloud.fc.inputs.V3CustomDomainRouteConfigRouteRewriteConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V3CustomDomainRouteConfigRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final V3CustomDomainRouteConfigRouteArgs Empty = new V3CustomDomainRouteConfigRouteArgs();

    /**
     * Function name
     * 
     */
    @Import(name="functionName")
    private @Nullable Output<String> functionName;

    /**
     * @return Function name
     * 
     */
    public Optional<Output<String>> functionName() {
        return Optional.ofNullable(this.functionName);
    }

    /**
     * List of supported HTTP methods
     * 
     */
    @Import(name="methods")
    private @Nullable Output<List<String>> methods;

    /**
     * @return List of supported HTTP methods
     * 
     */
    public Optional<Output<List<String>>> methods() {
        return Optional.ofNullable(this.methods);
    }

    /**
     * Route matching rule
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Route matching rule
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Version or Alias
     * 
     */
    @Import(name="qualifier")
    private @Nullable Output<String> qualifier;

    /**
     * @return Version or Alias
     * 
     */
    public Optional<Output<String>> qualifier() {
        return Optional.ofNullable(this.qualifier);
    }

    /**
     * Override Configuration See `rewrite_config` below.
     * 
     */
    @Import(name="rewriteConfig")
    private @Nullable Output<V3CustomDomainRouteConfigRouteRewriteConfigArgs> rewriteConfig;

    /**
     * @return Override Configuration See `rewrite_config` below.
     * 
     */
    public Optional<Output<V3CustomDomainRouteConfigRouteRewriteConfigArgs>> rewriteConfig() {
        return Optional.ofNullable(this.rewriteConfig);
    }

    private V3CustomDomainRouteConfigRouteArgs() {}

    private V3CustomDomainRouteConfigRouteArgs(V3CustomDomainRouteConfigRouteArgs $) {
        this.functionName = $.functionName;
        this.methods = $.methods;
        this.path = $.path;
        this.qualifier = $.qualifier;
        this.rewriteConfig = $.rewriteConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V3CustomDomainRouteConfigRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V3CustomDomainRouteConfigRouteArgs $;

        public Builder() {
            $ = new V3CustomDomainRouteConfigRouteArgs();
        }

        public Builder(V3CustomDomainRouteConfigRouteArgs defaults) {
            $ = new V3CustomDomainRouteConfigRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param functionName Function name
         * 
         * @return builder
         * 
         */
        public Builder functionName(@Nullable Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName Function name
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param methods List of supported HTTP methods
         * 
         * @return builder
         * 
         */
        public Builder methods(@Nullable Output<List<String>> methods) {
            $.methods = methods;
            return this;
        }

        /**
         * @param methods List of supported HTTP methods
         * 
         * @return builder
         * 
         */
        public Builder methods(List<String> methods) {
            return methods(Output.of(methods));
        }

        /**
         * @param methods List of supported HTTP methods
         * 
         * @return builder
         * 
         */
        public Builder methods(String... methods) {
            return methods(List.of(methods));
        }

        /**
         * @param path Route matching rule
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Route matching rule
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param qualifier Version or Alias
         * 
         * @return builder
         * 
         */
        public Builder qualifier(@Nullable Output<String> qualifier) {
            $.qualifier = qualifier;
            return this;
        }

        /**
         * @param qualifier Version or Alias
         * 
         * @return builder
         * 
         */
        public Builder qualifier(String qualifier) {
            return qualifier(Output.of(qualifier));
        }

        /**
         * @param rewriteConfig Override Configuration See `rewrite_config` below.
         * 
         * @return builder
         * 
         */
        public Builder rewriteConfig(@Nullable Output<V3CustomDomainRouteConfigRouteRewriteConfigArgs> rewriteConfig) {
            $.rewriteConfig = rewriteConfig;
            return this;
        }

        /**
         * @param rewriteConfig Override Configuration See `rewrite_config` below.
         * 
         * @return builder
         * 
         */
        public Builder rewriteConfig(V3CustomDomainRouteConfigRouteRewriteConfigArgs rewriteConfig) {
            return rewriteConfig(Output.of(rewriteConfig));
        }

        public V3CustomDomainRouteConfigRouteArgs build() {
            return $;
        }
    }

}
