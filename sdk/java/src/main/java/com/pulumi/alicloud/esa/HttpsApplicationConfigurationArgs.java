// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpsApplicationConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpsApplicationConfigurationArgs Empty = new HttpsApplicationConfigurationArgs();

    /**
     * Function switch, default off. Value range:
     * 
     */
    @Import(name="altSvc")
    private @Nullable Output<String> altSvc;

    /**
     * @return Function switch, default off. Value range:
     * 
     */
    public Optional<Output<String>> altSvc() {
        return Optional.ofNullable(this.altSvc);
    }

    /**
     * Alt-Svc whether The header contains the clear parameter. This parameter is disabled by default. Value range:
     * 
     */
    @Import(name="altSvcClear")
    private @Nullable Output<String> altSvcClear;

    /**
     * @return Alt-Svc whether The header contains the clear parameter. This parameter is disabled by default. Value range:
     * 
     */
    public Optional<Output<String>> altSvcClear() {
        return Optional.ofNullable(this.altSvcClear);
    }

    /**
     * The effective time of the Alt-Svc, in seconds. The default value is 86400 seconds.
     * 
     */
    @Import(name="altSvcMa")
    private @Nullable Output<String> altSvcMa;

    /**
     * @return The effective time of the Alt-Svc, in seconds. The default value is 86400 seconds.
     * 
     */
    public Optional<Output<String>> altSvcMa() {
        return Optional.ofNullable(this.altSvcMa);
    }

    /**
     * Alt-Svc whether The header contains the persist parameter. This parameter is disabled by default. Value range:
     * 
     */
    @Import(name="altSvcPersist")
    private @Nullable Output<String> altSvcPersist;

    /**
     * @return Alt-Svc whether The header contains the persist parameter. This parameter is disabled by default. Value range:
     * 
     */
    public Optional<Output<String>> altSvcPersist() {
        return Optional.ofNullable(this.altSvcPersist);
    }

    /**
     * Whether to enable HSTS. It is disabled by default. Value range:
     * 
     */
    @Import(name="hsts")
    private @Nullable Output<String> hsts;

    /**
     * @return Whether to enable HSTS. It is disabled by default. Value range:
     * 
     */
    public Optional<Output<String>> hsts() {
        return Optional.ofNullable(this.hsts);
    }

    /**
     * Whether to include subdomains in HSTS is disabled by default. Value range:
     * 
     */
    @Import(name="hstsIncludeSubdomains")
    private @Nullable Output<String> hstsIncludeSubdomains;

    /**
     * @return Whether to include subdomains in HSTS is disabled by default. Value range:
     * 
     */
    public Optional<Output<String>> hstsIncludeSubdomains() {
        return Optional.ofNullable(this.hstsIncludeSubdomains);
    }

    /**
     * The expiration time of HSTS, in seconds.
     * 
     */
    @Import(name="hstsMaxAge")
    private @Nullable Output<String> hstsMaxAge;

    /**
     * @return The expiration time of HSTS, in seconds.
     * 
     */
    public Optional<Output<String>> hstsMaxAge() {
        return Optional.ofNullable(this.hstsMaxAge);
    }

    /**
     * Whether to enable HSTS preloading. It is disabled by default. Value range:
     * 
     */
    @Import(name="hstsPreload")
    private @Nullable Output<String> hstsPreload;

    /**
     * @return Whether to enable HSTS preloading. It is disabled by default. Value range:
     * 
     */
    public Optional<Output<String>> hstsPreload() {
        return Optional.ofNullable(this.hstsPreload);
    }

    /**
     * Whether to enable forced HTTPS. It is disabled by default. Value range:
     * 
     */
    @Import(name="httpsForce")
    private @Nullable Output<String> httpsForce;

    /**
     * @return Whether to enable forced HTTPS. It is disabled by default. Value range:
     * 
     */
    public Optional<Output<String>> httpsForce() {
        return Optional.ofNullable(this.httpsForce);
    }

    /**
     * Forced HTTPS jump status code, value range:
     * 
     */
    @Import(name="httpsForceCode")
    private @Nullable Output<String> httpsForceCode;

    /**
     * @return Forced HTTPS jump status code, value range:
     * 
     */
    public Optional<Output<String>> httpsForceCode() {
        return Optional.ofNullable(this.httpsForceCode);
    }

    /**
     * Rule Content.
     * 
     */
    @Import(name="rule")
    private @Nullable Output<String> rule;

    /**
     * @return Rule Content.
     * 
     */
    public Optional<Output<String>> rule() {
        return Optional.ofNullable(this.rule);
    }

    /**
     * Rule switch. Value range:
     * 
     */
    @Import(name="ruleEnable")
    private @Nullable Output<String> ruleEnable;

    /**
     * @return Rule switch. Value range:
     * 
     */
    public Optional<Output<String>> ruleEnable() {
        return Optional.ofNullable(this.ruleEnable);
    }

    /**
     * Rule name, you can find out the rule whose rule name is the passed field.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return Rule name, you can find out the rule whose rule name is the passed field.
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * The site ID, which can be obtained by calling the ListSites API.
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return The site ID, which can be obtained by calling the ListSites API.
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    /**
     * The version of the website configurations.
     * 
     */
    @Import(name="siteVersion")
    private @Nullable Output<Integer> siteVersion;

    /**
     * @return The version of the website configurations.
     * 
     */
    public Optional<Output<Integer>> siteVersion() {
        return Optional.ofNullable(this.siteVersion);
    }

    private HttpsApplicationConfigurationArgs() {}

    private HttpsApplicationConfigurationArgs(HttpsApplicationConfigurationArgs $) {
        this.altSvc = $.altSvc;
        this.altSvcClear = $.altSvcClear;
        this.altSvcMa = $.altSvcMa;
        this.altSvcPersist = $.altSvcPersist;
        this.hsts = $.hsts;
        this.hstsIncludeSubdomains = $.hstsIncludeSubdomains;
        this.hstsMaxAge = $.hstsMaxAge;
        this.hstsPreload = $.hstsPreload;
        this.httpsForce = $.httpsForce;
        this.httpsForceCode = $.httpsForceCode;
        this.rule = $.rule;
        this.ruleEnable = $.ruleEnable;
        this.ruleName = $.ruleName;
        this.siteId = $.siteId;
        this.siteVersion = $.siteVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpsApplicationConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpsApplicationConfigurationArgs $;

        public Builder() {
            $ = new HttpsApplicationConfigurationArgs();
        }

        public Builder(HttpsApplicationConfigurationArgs defaults) {
            $ = new HttpsApplicationConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param altSvc Function switch, default off. Value range:
         * 
         * @return builder
         * 
         */
        public Builder altSvc(@Nullable Output<String> altSvc) {
            $.altSvc = altSvc;
            return this;
        }

        /**
         * @param altSvc Function switch, default off. Value range:
         * 
         * @return builder
         * 
         */
        public Builder altSvc(String altSvc) {
            return altSvc(Output.of(altSvc));
        }

        /**
         * @param altSvcClear Alt-Svc whether The header contains the clear parameter. This parameter is disabled by default. Value range:
         * 
         * @return builder
         * 
         */
        public Builder altSvcClear(@Nullable Output<String> altSvcClear) {
            $.altSvcClear = altSvcClear;
            return this;
        }

        /**
         * @param altSvcClear Alt-Svc whether The header contains the clear parameter. This parameter is disabled by default. Value range:
         * 
         * @return builder
         * 
         */
        public Builder altSvcClear(String altSvcClear) {
            return altSvcClear(Output.of(altSvcClear));
        }

        /**
         * @param altSvcMa The effective time of the Alt-Svc, in seconds. The default value is 86400 seconds.
         * 
         * @return builder
         * 
         */
        public Builder altSvcMa(@Nullable Output<String> altSvcMa) {
            $.altSvcMa = altSvcMa;
            return this;
        }

        /**
         * @param altSvcMa The effective time of the Alt-Svc, in seconds. The default value is 86400 seconds.
         * 
         * @return builder
         * 
         */
        public Builder altSvcMa(String altSvcMa) {
            return altSvcMa(Output.of(altSvcMa));
        }

        /**
         * @param altSvcPersist Alt-Svc whether The header contains the persist parameter. This parameter is disabled by default. Value range:
         * 
         * @return builder
         * 
         */
        public Builder altSvcPersist(@Nullable Output<String> altSvcPersist) {
            $.altSvcPersist = altSvcPersist;
            return this;
        }

        /**
         * @param altSvcPersist Alt-Svc whether The header contains the persist parameter. This parameter is disabled by default. Value range:
         * 
         * @return builder
         * 
         */
        public Builder altSvcPersist(String altSvcPersist) {
            return altSvcPersist(Output.of(altSvcPersist));
        }

        /**
         * @param hsts Whether to enable HSTS. It is disabled by default. Value range:
         * 
         * @return builder
         * 
         */
        public Builder hsts(@Nullable Output<String> hsts) {
            $.hsts = hsts;
            return this;
        }

        /**
         * @param hsts Whether to enable HSTS. It is disabled by default. Value range:
         * 
         * @return builder
         * 
         */
        public Builder hsts(String hsts) {
            return hsts(Output.of(hsts));
        }

        /**
         * @param hstsIncludeSubdomains Whether to include subdomains in HSTS is disabled by default. Value range:
         * 
         * @return builder
         * 
         */
        public Builder hstsIncludeSubdomains(@Nullable Output<String> hstsIncludeSubdomains) {
            $.hstsIncludeSubdomains = hstsIncludeSubdomains;
            return this;
        }

        /**
         * @param hstsIncludeSubdomains Whether to include subdomains in HSTS is disabled by default. Value range:
         * 
         * @return builder
         * 
         */
        public Builder hstsIncludeSubdomains(String hstsIncludeSubdomains) {
            return hstsIncludeSubdomains(Output.of(hstsIncludeSubdomains));
        }

        /**
         * @param hstsMaxAge The expiration time of HSTS, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder hstsMaxAge(@Nullable Output<String> hstsMaxAge) {
            $.hstsMaxAge = hstsMaxAge;
            return this;
        }

        /**
         * @param hstsMaxAge The expiration time of HSTS, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder hstsMaxAge(String hstsMaxAge) {
            return hstsMaxAge(Output.of(hstsMaxAge));
        }

        /**
         * @param hstsPreload Whether to enable HSTS preloading. It is disabled by default. Value range:
         * 
         * @return builder
         * 
         */
        public Builder hstsPreload(@Nullable Output<String> hstsPreload) {
            $.hstsPreload = hstsPreload;
            return this;
        }

        /**
         * @param hstsPreload Whether to enable HSTS preloading. It is disabled by default. Value range:
         * 
         * @return builder
         * 
         */
        public Builder hstsPreload(String hstsPreload) {
            return hstsPreload(Output.of(hstsPreload));
        }

        /**
         * @param httpsForce Whether to enable forced HTTPS. It is disabled by default. Value range:
         * 
         * @return builder
         * 
         */
        public Builder httpsForce(@Nullable Output<String> httpsForce) {
            $.httpsForce = httpsForce;
            return this;
        }

        /**
         * @param httpsForce Whether to enable forced HTTPS. It is disabled by default. Value range:
         * 
         * @return builder
         * 
         */
        public Builder httpsForce(String httpsForce) {
            return httpsForce(Output.of(httpsForce));
        }

        /**
         * @param httpsForceCode Forced HTTPS jump status code, value range:
         * 
         * @return builder
         * 
         */
        public Builder httpsForceCode(@Nullable Output<String> httpsForceCode) {
            $.httpsForceCode = httpsForceCode;
            return this;
        }

        /**
         * @param httpsForceCode Forced HTTPS jump status code, value range:
         * 
         * @return builder
         * 
         */
        public Builder httpsForceCode(String httpsForceCode) {
            return httpsForceCode(Output.of(httpsForceCode));
        }

        /**
         * @param rule Rule Content.
         * 
         * @return builder
         * 
         */
        public Builder rule(@Nullable Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule Rule Content.
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param ruleEnable Rule switch. Value range:
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(@Nullable Output<String> ruleEnable) {
            $.ruleEnable = ruleEnable;
            return this;
        }

        /**
         * @param ruleEnable Rule switch. Value range:
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(String ruleEnable) {
            return ruleEnable(Output.of(ruleEnable));
        }

        /**
         * @param ruleName Rule name, you can find out the rule whose rule name is the passed field.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name, you can find out the rule whose rule name is the passed field.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the ListSites API.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the ListSites API.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param siteVersion The version of the website configurations.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(@Nullable Output<Integer> siteVersion) {
            $.siteVersion = siteVersion;
            return this;
        }

        /**
         * @param siteVersion The version of the website configurations.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(Integer siteVersion) {
            return siteVersion(Output.of(siteVersion));
        }

        public HttpsApplicationConfigurationArgs build() {
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("HttpsApplicationConfigurationArgs", "siteId");
            }
            return $;
        }
    }

}
