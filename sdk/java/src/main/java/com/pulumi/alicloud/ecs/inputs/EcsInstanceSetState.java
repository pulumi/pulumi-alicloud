// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.alicloud.ecs.inputs.EcsInstanceSetDataDiskArgs;
import com.pulumi.alicloud.ecs.inputs.EcsInstanceSetExcludeInstanceFilterArgs;
import com.pulumi.alicloud.ecs.inputs.EcsInstanceSetNetworkInterfaceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EcsInstanceSetState extends com.pulumi.resources.ResourceArgs {

    public static final EcsInstanceSetState Empty = new EcsInstanceSetState();

    /**
     * The number of instances that you want to create. Valid values: `1` to `100`.
     * 
     */
    @Import(name="amount")
    private @Nullable Output<Integer> amount;

    /**
     * @return The number of instances that you want to create. Valid values: `1` to `100`.
     * 
     */
    public Optional<Output<Integer>> amount() {
        return Optional.ofNullable(this.amount);
    }

    /**
     * The automatic release time of the `PostPaid` instance.
     * 
     */
    @Import(name="autoReleaseTime")
    private @Nullable Output<String> autoReleaseTime;

    /**
     * @return The automatic release time of the `PostPaid` instance.
     * 
     */
    public Optional<Output<String>> autoReleaseTime() {
        return Optional.ofNullable(this.autoReleaseTime);
    }

    /**
     * Whether to enable auto-renewal for the instance. This parameter is valid only when the `instance_charge_type` is set to `PrePaid`.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Whether to enable auto-renewal for the instance. This parameter is valid only when the `instance_charge_type` is set to `PrePaid`.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * Auto renewal period of an instance, in the unit of month. It is valid when `instance_charge_type` is `PrePaid`.
     * - When `period_unit` is `Month`, Valid values: `1`, `2`, `3`, `6`, `12`.
     * - When `period_unit` is `Week`, Valid values: `1`, `2`, `3`.
     * 
     */
    @Import(name="autoRenewPeriod")
    private @Nullable Output<Integer> autoRenewPeriod;

    /**
     * @return Auto renewal period of an instance, in the unit of month. It is valid when `instance_charge_type` is `PrePaid`.
     * - When `period_unit` is `Month`, Valid values: `1`, `2`, `3`, `6`, `12`.
     * - When `period_unit` is `Week`, Valid values: `1`, `2`, `3`.
     * 
     */
    public Optional<Output<Integer>> autoRenewPeriod() {
        return Optional.ofNullable(this.autoRenewPeriod);
    }

    /**
     * Indicate how to check instance ready to use.
     * 
     */
    @Import(name="bootCheckOsWithAssistant")
    private @Nullable Output<Boolean> bootCheckOsWithAssistant;

    /**
     * @return Indicate how to check instance ready to use.
     * 
     */
    public Optional<Output<Boolean>> bootCheckOsWithAssistant() {
        return Optional.ofNullable(this.bootCheckOsWithAssistant);
    }

    /**
     * The list of data disks created with instance. See `data_disks` below..
     * 
     */
    @Import(name="dataDisks")
    private @Nullable Output<List<EcsInstanceSetDataDiskArgs>> dataDisks;

    /**
     * @return The list of data disks created with instance. See `data_disks` below..
     * 
     */
    public Optional<Output<List<EcsInstanceSetDataDiskArgs>>> dataDisks() {
        return Optional.ofNullable(this.dataDisks);
    }

    /**
     * The ID of the dedicated host on which to create the instance. If the `dedicated_host_id` is specified, the `spot_strategy` and `spot_price_limit`  are ignored. This is because preemptible instances cannot be created on dedicated hosts.
     * 
     */
    @Import(name="dedicatedHostId")
    private @Nullable Output<String> dedicatedHostId;

    /**
     * @return The ID of the dedicated host on which to create the instance. If the `dedicated_host_id` is specified, the `spot_strategy` and `spot_price_limit`  are ignored. This is because preemptible instances cannot be created on dedicated hosts.
     * 
     */
    public Optional<Output<String>> dedicatedHostId() {
        return Optional.ofNullable(this.dedicatedHostId);
    }

    /**
     * Whether to enable release protection for the instance.
     * 
     */
    @Import(name="deletionProtection")
    private @Nullable Output<Boolean> deletionProtection;

    /**
     * @return Whether to enable release protection for the instance.
     * 
     */
    public Optional<Output<Boolean>> deletionProtection() {
        return Optional.ofNullable(this.deletionProtection);
    }

    /**
     * The ID of the deployment set to which to deploy the instance.
     * 
     */
    @Import(name="deploymentSetId")
    private @Nullable Output<String> deploymentSetId;

    /**
     * @return The ID of the deployment set to which to deploy the instance.
     * 
     */
    public Optional<Output<String>> deploymentSetId() {
        return Optional.ofNullable(this.deploymentSetId);
    }

    /**
     * The description of the instance, This description can have a string of 2 to 256 characters, It cannot begin with `http://` or `https://`.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the instance, This description can have a string of 2 to 256 characters, It cannot begin with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The instances that need to be excluded from the Instance Set.  See `exclude_instance_filter` below.
     * 
     */
    @Import(name="excludeInstanceFilter")
    private @Nullable Output<EcsInstanceSetExcludeInstanceFilterArgs> excludeInstanceFilter;

    /**
     * @return The instances that need to be excluded from the Instance Set.  See `exclude_instance_filter` below.
     * 
     */
    public Optional<Output<EcsInstanceSetExcludeInstanceFilterArgs>> excludeInstanceFilter() {
        return Optional.ofNullable(this.excludeInstanceFilter);
    }

    /**
     * The hostname of instance.
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    /**
     * @return The hostname of instance.
     * 
     */
    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * The ID of the Elastic High Performance Computing (E-HPC) cluster to which to assign the instance.
     * 
     */
    @Import(name="hpcClusterId")
    private @Nullable Output<String> hpcClusterId;

    /**
     * @return The ID of the Elastic High Performance Computing (E-HPC) cluster to which to assign the instance.
     * 
     */
    public Optional<Output<String>> hpcClusterId() {
        return Optional.ofNullable(this.hpcClusterId);
    }

    /**
     * The Image to use for the instance.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The Image to use for the instance.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * The billing method of the instance. Valid values: `PrePaid`, `PostPaid`.
     * 
     */
    @Import(name="instanceChargeType")
    private @Nullable Output<String> instanceChargeType;

    /**
     * @return The billing method of the instance. Valid values: `PrePaid`, `PostPaid`.
     * 
     */
    public Optional<Output<String>> instanceChargeType() {
        return Optional.ofNullable(this.instanceChargeType);
    }

    /**
     * A list of ECS Instance ID.
     * 
     */
    @Import(name="instanceIds")
    private @Nullable Output<List<String>> instanceIds;

    /**
     * @return A list of ECS Instance ID.
     * 
     */
    public Optional<Output<List<String>>> instanceIds() {
        return Optional.ofNullable(this.instanceIds);
    }

    /**
     * The name of the ECS. This instance_name can have a string of 2 to 128 characters, must contain only alphanumeric characters or hyphens, such as &#34;-&#34;,&#34;.&#34;,&#34;_&#34;, and must not begin with a hyphen, and must not begin with `http://` or `https://`.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return The name of the ECS. This instance_name can have a string of 2 to 128 characters, must contain only alphanumeric characters or hyphens, such as &#34;-&#34;,&#34;.&#34;,&#34;_&#34;, and must not begin with a hyphen, and must not begin with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * The type of instance to start.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return The type of instance to start.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * The Internet charge type of the instance. Valid values are `PayByBandwidth`, `PayByTraffic`.
     * 
     */
    @Import(name="internetChargeType")
    private @Nullable Output<String> internetChargeType;

    /**
     * @return The Internet charge type of the instance. Valid values are `PayByBandwidth`, `PayByTraffic`.
     * 
     */
    public Optional<Output<String>> internetChargeType() {
        return Optional.ofNullable(this.internetChargeType);
    }

    /**
     * The Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bit per second). Valid values: `1` to `100`.
     * 
     */
    @Import(name="internetMaxBandwidthOut")
    private @Nullable Output<Integer> internetMaxBandwidthOut;

    /**
     * @return The Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bit per second). Valid values: `1` to `100`.
     * 
     */
    public Optional<Output<Integer>> internetMaxBandwidthOut() {
        return Optional.ofNullable(this.internetMaxBandwidthOut);
    }

    /**
     * The name of key pair that can login ECS instance successfully without password.
     * 
     */
    @Import(name="keyPairName")
    private @Nullable Output<String> keyPairName;

    /**
     * @return The name of key pair that can login ECS instance successfully without password.
     * 
     */
    public Optional<Output<String>> keyPairName() {
        return Optional.ofNullable(this.keyPairName);
    }

    /**
     * The ID of the launch template.
     * 
     */
    @Import(name="launchTemplateId")
    private @Nullable Output<String> launchTemplateId;

    /**
     * @return The ID of the launch template.
     * 
     */
    public Optional<Output<String>> launchTemplateId() {
        return Optional.ofNullable(this.launchTemplateId);
    }

    /**
     * The name of the launch template. To use a launch template to create an instance, you must use the `launch_template_id` or `launch_template_name` parameter to specify the launch template.
     * 
     */
    @Import(name="launchTemplateName")
    private @Nullable Output<String> launchTemplateName;

    /**
     * @return The name of the launch template. To use a launch template to create an instance, you must use the `launch_template_id` or `launch_template_name` parameter to specify the launch template.
     * 
     */
    public Optional<Output<String>> launchTemplateName() {
        return Optional.ofNullable(this.launchTemplateName);
    }

    /**
     * The version of the launch template.
     * 
     */
    @Import(name="launchTemplateVersion")
    private @Nullable Output<String> launchTemplateVersion;

    /**
     * @return The version of the launch template.
     * 
     */
    public Optional<Output<String>> launchTemplateVersion() {
        return Optional.ofNullable(this.launchTemplateVersion);
    }

    /**
     * A list of NetworkInterface. See `network_interfaces` below..
     * 
     */
    @Import(name="networkInterfaces")
    private @Nullable Output<List<EcsInstanceSetNetworkInterfaceArgs>> networkInterfaces;

    /**
     * @return A list of NetworkInterface. See `network_interfaces` below..
     * 
     */
    public Optional<Output<List<EcsInstanceSetNetworkInterfaceArgs>>> networkInterfaces() {
        return Optional.ofNullable(this.networkInterfaces);
    }

    /**
     * The password to an instance is a string of 8 to 30 characters. It must contain uppercase/lowercase letters and numerals, but cannot contain special symbols.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password to an instance is a string of 8 to 30 characters. It must contain uppercase/lowercase letters and numerals, but cannot contain special symbols.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Whether to use the password preset in the image.
     * 
     */
    @Import(name="passwordInherit")
    private @Nullable Output<Boolean> passwordInherit;

    /**
     * @return Whether to use the password preset in the image.
     * 
     */
    public Optional<Output<Boolean>> passwordInherit() {
        return Optional.ofNullable(this.passwordInherit);
    }

    /**
     * The duration that you will buy the resource, in month. It is valid when `instance_charge_type` is `PrePaid`.
     * - When `period_unit` is `Month`, Valid values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `12`, `24`, `36`, `48`, `60`.
     * - When `period_unit` is `Week`, Valid values: `1`, `2`, `3`.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The duration that you will buy the resource, in month. It is valid when `instance_charge_type` is `PrePaid`.
     * - When `period_unit` is `Month`, Valid values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `12`, `24`, `36`, `48`, `60`.
     * - When `period_unit` is `Week`, Valid values: `1`, `2`, `3`.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The duration unit that you will buy the resource. It is valid when `instance_charge_type` is &#39;PrePaid&#39;. Valid value: `Week`, `Month`.
     * 
     */
    @Import(name="periodUnit")
    private @Nullable Output<String> periodUnit;

    /**
     * @return The duration unit that you will buy the resource. It is valid when `instance_charge_type` is &#39;PrePaid&#39;. Valid value: `Week`, `Month`.
     * 
     */
    public Optional<Output<String>> periodUnit() {
        return Optional.ofNullable(this.periodUnit);
    }

    /**
     * The Instance RAM role name.
     * 
     */
    @Import(name="ramRoleName")
    private @Nullable Output<String> ramRoleName;

    /**
     * @return The Instance RAM role name.
     * 
     */
    public Optional<Output<String>> ramRoleName() {
        return Optional.ofNullable(this.ramRoleName);
    }

    /**
     * The ID of resource group which the instance belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of resource group which the instance belongs.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The security enhancement strategy.
     * 
     */
    @Import(name="securityEnhancementStrategy")
    private @Nullable Output<String> securityEnhancementStrategy;

    /**
     * @return The security enhancement strategy.
     * 
     */
    public Optional<Output<String>> securityEnhancementStrategy() {
        return Optional.ofNullable(this.securityEnhancementStrategy);
    }

    /**
     * A list of security group ids to associate with.
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    /**
     * @return A list of security group ids to associate with.
     * 
     */
    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * The hourly price threshold of a instance, and it takes effect only when parameter &#39;spot_strategy&#39; is &#39;SpotWithPriceLimit&#39;. Three decimals is allowed at most.
     * 
     */
    @Import(name="spotPriceLimit")
    private @Nullable Output<Double> spotPriceLimit;

    /**
     * @return The hourly price threshold of a instance, and it takes effect only when parameter &#39;spot_strategy&#39; is &#39;SpotWithPriceLimit&#39;. Three decimals is allowed at most.
     * 
     */
    public Optional<Output<Double>> spotPriceLimit() {
        return Optional.ofNullable(this.spotPriceLimit);
    }

    /**
     * The spot strategy of a Pay-As-You-Go instance, and it takes effect only when parameter `instance_charge_type` is &#39;PostPaid&#39;.
     * 
     */
    @Import(name="spotStrategy")
    private @Nullable Output<String> spotStrategy;

    /**
     * @return The spot strategy of a Pay-As-You-Go instance, and it takes effect only when parameter `instance_charge_type` is &#39;PostPaid&#39;.
     * 
     */
    public Optional<Output<String>> spotStrategy() {
        return Optional.ofNullable(this.spotStrategy);
    }

    /**
     * The ID of the automatic snapshot policy applied to the system disk.
     * 
     */
    @Import(name="systemDiskAutoSnapshotPolicyId")
    private @Nullable Output<String> systemDiskAutoSnapshotPolicyId;

    /**
     * @return The ID of the automatic snapshot policy applied to the system disk.
     * 
     */
    public Optional<Output<String>> systemDiskAutoSnapshotPolicyId() {
        return Optional.ofNullable(this.systemDiskAutoSnapshotPolicyId);
    }

    /**
     * The category of the system disk. Valid values are `cloud_efficiency`, `cloud_ssd`, `cloud_essd`, `cloud`.
     * 
     */
    @Import(name="systemDiskCategory")
    private @Nullable Output<String> systemDiskCategory;

    /**
     * @return The category of the system disk. Valid values are `cloud_efficiency`, `cloud_ssd`, `cloud_essd`, `cloud`.
     * 
     */
    public Optional<Output<String>> systemDiskCategory() {
        return Optional.ofNullable(this.systemDiskCategory);
    }

    /**
     * The description of the system disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
     * 
     */
    @Import(name="systemDiskDescription")
    private @Nullable Output<String> systemDiskDescription;

    /**
     * @return The description of the system disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> systemDiskDescription() {
        return Optional.ofNullable(this.systemDiskDescription);
    }

    /**
     * The name of the system disk.
     * 
     */
    @Import(name="systemDiskName")
    private @Nullable Output<String> systemDiskName;

    /**
     * @return The name of the system disk.
     * 
     */
    public Optional<Output<String>> systemDiskName() {
        return Optional.ofNullable(this.systemDiskName);
    }

    /**
     * The performance level of the ESSD used as the system disk. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
     * 
     */
    @Import(name="systemDiskPerformanceLevel")
    private @Nullable Output<String> systemDiskPerformanceLevel;

    /**
     * @return The performance level of the ESSD used as the system disk. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
     * 
     */
    public Optional<Output<String>> systemDiskPerformanceLevel() {
        return Optional.ofNullable(this.systemDiskPerformanceLevel);
    }

    /**
     * The size of the system disk, measured in GiB. Value range:  values: `20` to `500`.
     * 
     */
    @Import(name="systemDiskSize")
    private @Nullable Output<Integer> systemDiskSize;

    /**
     * @return The size of the system disk, measured in GiB. Value range:  values: `20` to `500`.
     * 
     */
    public Optional<Output<Integer>> systemDiskSize() {
        return Optional.ofNullable(this.systemDiskSize);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Whether to automatically append incremental suffixes to the hostname specified by the HostName parameter and to the instance name specified by the InstanceName parameter when you batch create instances. The incremental suffixes can range from `001` to `999`.
     * 
     */
    @Import(name="uniqueSuffix")
    private @Nullable Output<Boolean> uniqueSuffix;

    /**
     * @return Whether to automatically append incremental suffixes to the hostname specified by the HostName parameter and to the instance name specified by the InstanceName parameter when you batch create instances. The incremental suffixes can range from `001` to `999`.
     * 
     */
    public Optional<Output<Boolean>> uniqueSuffix() {
        return Optional.ofNullable(this.uniqueSuffix);
    }

    /**
     * The virtual switch ID to launch in VPC.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The virtual switch ID to launch in VPC.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    /**
     * The ID of the zone in which to create the instance.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The ID of the zone in which to create the instance.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private EcsInstanceSetState() {}

    private EcsInstanceSetState(EcsInstanceSetState $) {
        this.amount = $.amount;
        this.autoReleaseTime = $.autoReleaseTime;
        this.autoRenew = $.autoRenew;
        this.autoRenewPeriod = $.autoRenewPeriod;
        this.bootCheckOsWithAssistant = $.bootCheckOsWithAssistant;
        this.dataDisks = $.dataDisks;
        this.dedicatedHostId = $.dedicatedHostId;
        this.deletionProtection = $.deletionProtection;
        this.deploymentSetId = $.deploymentSetId;
        this.description = $.description;
        this.excludeInstanceFilter = $.excludeInstanceFilter;
        this.hostName = $.hostName;
        this.hpcClusterId = $.hpcClusterId;
        this.imageId = $.imageId;
        this.instanceChargeType = $.instanceChargeType;
        this.instanceIds = $.instanceIds;
        this.instanceName = $.instanceName;
        this.instanceType = $.instanceType;
        this.internetChargeType = $.internetChargeType;
        this.internetMaxBandwidthOut = $.internetMaxBandwidthOut;
        this.keyPairName = $.keyPairName;
        this.launchTemplateId = $.launchTemplateId;
        this.launchTemplateName = $.launchTemplateName;
        this.launchTemplateVersion = $.launchTemplateVersion;
        this.networkInterfaces = $.networkInterfaces;
        this.password = $.password;
        this.passwordInherit = $.passwordInherit;
        this.period = $.period;
        this.periodUnit = $.periodUnit;
        this.ramRoleName = $.ramRoleName;
        this.resourceGroupId = $.resourceGroupId;
        this.securityEnhancementStrategy = $.securityEnhancementStrategy;
        this.securityGroupIds = $.securityGroupIds;
        this.spotPriceLimit = $.spotPriceLimit;
        this.spotStrategy = $.spotStrategy;
        this.systemDiskAutoSnapshotPolicyId = $.systemDiskAutoSnapshotPolicyId;
        this.systemDiskCategory = $.systemDiskCategory;
        this.systemDiskDescription = $.systemDiskDescription;
        this.systemDiskName = $.systemDiskName;
        this.systemDiskPerformanceLevel = $.systemDiskPerformanceLevel;
        this.systemDiskSize = $.systemDiskSize;
        this.tags = $.tags;
        this.uniqueSuffix = $.uniqueSuffix;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EcsInstanceSetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EcsInstanceSetState $;

        public Builder() {
            $ = new EcsInstanceSetState();
        }

        public Builder(EcsInstanceSetState defaults) {
            $ = new EcsInstanceSetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param amount The number of instances that you want to create. Valid values: `1` to `100`.
         * 
         * @return builder
         * 
         */
        public Builder amount(@Nullable Output<Integer> amount) {
            $.amount = amount;
            return this;
        }

        /**
         * @param amount The number of instances that you want to create. Valid values: `1` to `100`.
         * 
         * @return builder
         * 
         */
        public Builder amount(Integer amount) {
            return amount(Output.of(amount));
        }

        /**
         * @param autoReleaseTime The automatic release time of the `PostPaid` instance.
         * 
         * @return builder
         * 
         */
        public Builder autoReleaseTime(@Nullable Output<String> autoReleaseTime) {
            $.autoReleaseTime = autoReleaseTime;
            return this;
        }

        /**
         * @param autoReleaseTime The automatic release time of the `PostPaid` instance.
         * 
         * @return builder
         * 
         */
        public Builder autoReleaseTime(String autoReleaseTime) {
            return autoReleaseTime(Output.of(autoReleaseTime));
        }

        /**
         * @param autoRenew Whether to enable auto-renewal for the instance. This parameter is valid only when the `instance_charge_type` is set to `PrePaid`.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Whether to enable auto-renewal for the instance. This parameter is valid only when the `instance_charge_type` is set to `PrePaid`.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param autoRenewPeriod Auto renewal period of an instance, in the unit of month. It is valid when `instance_charge_type` is `PrePaid`.
         * - When `period_unit` is `Month`, Valid values: `1`, `2`, `3`, `6`, `12`.
         * - When `period_unit` is `Week`, Valid values: `1`, `2`, `3`.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewPeriod(@Nullable Output<Integer> autoRenewPeriod) {
            $.autoRenewPeriod = autoRenewPeriod;
            return this;
        }

        /**
         * @param autoRenewPeriod Auto renewal period of an instance, in the unit of month. It is valid when `instance_charge_type` is `PrePaid`.
         * - When `period_unit` is `Month`, Valid values: `1`, `2`, `3`, `6`, `12`.
         * - When `period_unit` is `Week`, Valid values: `1`, `2`, `3`.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewPeriod(Integer autoRenewPeriod) {
            return autoRenewPeriod(Output.of(autoRenewPeriod));
        }

        /**
         * @param bootCheckOsWithAssistant Indicate how to check instance ready to use.
         * 
         * @return builder
         * 
         */
        public Builder bootCheckOsWithAssistant(@Nullable Output<Boolean> bootCheckOsWithAssistant) {
            $.bootCheckOsWithAssistant = bootCheckOsWithAssistant;
            return this;
        }

        /**
         * @param bootCheckOsWithAssistant Indicate how to check instance ready to use.
         * 
         * @return builder
         * 
         */
        public Builder bootCheckOsWithAssistant(Boolean bootCheckOsWithAssistant) {
            return bootCheckOsWithAssistant(Output.of(bootCheckOsWithAssistant));
        }

        /**
         * @param dataDisks The list of data disks created with instance. See `data_disks` below..
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(@Nullable Output<List<EcsInstanceSetDataDiskArgs>> dataDisks) {
            $.dataDisks = dataDisks;
            return this;
        }

        /**
         * @param dataDisks The list of data disks created with instance. See `data_disks` below..
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(List<EcsInstanceSetDataDiskArgs> dataDisks) {
            return dataDisks(Output.of(dataDisks));
        }

        /**
         * @param dataDisks The list of data disks created with instance. See `data_disks` below..
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(EcsInstanceSetDataDiskArgs... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }

        /**
         * @param dedicatedHostId The ID of the dedicated host on which to create the instance. If the `dedicated_host_id` is specified, the `spot_strategy` and `spot_price_limit`  are ignored. This is because preemptible instances cannot be created on dedicated hosts.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostId(@Nullable Output<String> dedicatedHostId) {
            $.dedicatedHostId = dedicatedHostId;
            return this;
        }

        /**
         * @param dedicatedHostId The ID of the dedicated host on which to create the instance. If the `dedicated_host_id` is specified, the `spot_strategy` and `spot_price_limit`  are ignored. This is because preemptible instances cannot be created on dedicated hosts.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostId(String dedicatedHostId) {
            return dedicatedHostId(Output.of(dedicatedHostId));
        }

        /**
         * @param deletionProtection Whether to enable release protection for the instance.
         * 
         * @return builder
         * 
         */
        public Builder deletionProtection(@Nullable Output<Boolean> deletionProtection) {
            $.deletionProtection = deletionProtection;
            return this;
        }

        /**
         * @param deletionProtection Whether to enable release protection for the instance.
         * 
         * @return builder
         * 
         */
        public Builder deletionProtection(Boolean deletionProtection) {
            return deletionProtection(Output.of(deletionProtection));
        }

        /**
         * @param deploymentSetId The ID of the deployment set to which to deploy the instance.
         * 
         * @return builder
         * 
         */
        public Builder deploymentSetId(@Nullable Output<String> deploymentSetId) {
            $.deploymentSetId = deploymentSetId;
            return this;
        }

        /**
         * @param deploymentSetId The ID of the deployment set to which to deploy the instance.
         * 
         * @return builder
         * 
         */
        public Builder deploymentSetId(String deploymentSetId) {
            return deploymentSetId(Output.of(deploymentSetId));
        }

        /**
         * @param description The description of the instance, This description can have a string of 2 to 256 characters, It cannot begin with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the instance, This description can have a string of 2 to 256 characters, It cannot begin with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param excludeInstanceFilter The instances that need to be excluded from the Instance Set.  See `exclude_instance_filter` below.
         * 
         * @return builder
         * 
         */
        public Builder excludeInstanceFilter(@Nullable Output<EcsInstanceSetExcludeInstanceFilterArgs> excludeInstanceFilter) {
            $.excludeInstanceFilter = excludeInstanceFilter;
            return this;
        }

        /**
         * @param excludeInstanceFilter The instances that need to be excluded from the Instance Set.  See `exclude_instance_filter` below.
         * 
         * @return builder
         * 
         */
        public Builder excludeInstanceFilter(EcsInstanceSetExcludeInstanceFilterArgs excludeInstanceFilter) {
            return excludeInstanceFilter(Output.of(excludeInstanceFilter));
        }

        /**
         * @param hostName The hostname of instance.
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName The hostname of instance.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param hpcClusterId The ID of the Elastic High Performance Computing (E-HPC) cluster to which to assign the instance.
         * 
         * @return builder
         * 
         */
        public Builder hpcClusterId(@Nullable Output<String> hpcClusterId) {
            $.hpcClusterId = hpcClusterId;
            return this;
        }

        /**
         * @param hpcClusterId The ID of the Elastic High Performance Computing (E-HPC) cluster to which to assign the instance.
         * 
         * @return builder
         * 
         */
        public Builder hpcClusterId(String hpcClusterId) {
            return hpcClusterId(Output.of(hpcClusterId));
        }

        /**
         * @param imageId The Image to use for the instance.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The Image to use for the instance.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param instanceChargeType The billing method of the instance. Valid values: `PrePaid`, `PostPaid`.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(@Nullable Output<String> instanceChargeType) {
            $.instanceChargeType = instanceChargeType;
            return this;
        }

        /**
         * @param instanceChargeType The billing method of the instance. Valid values: `PrePaid`, `PostPaid`.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(String instanceChargeType) {
            return instanceChargeType(Output.of(instanceChargeType));
        }

        /**
         * @param instanceIds A list of ECS Instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(@Nullable Output<List<String>> instanceIds) {
            $.instanceIds = instanceIds;
            return this;
        }

        /**
         * @param instanceIds A list of ECS Instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(List<String> instanceIds) {
            return instanceIds(Output.of(instanceIds));
        }

        /**
         * @param instanceIds A list of ECS Instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(String... instanceIds) {
            return instanceIds(List.of(instanceIds));
        }

        /**
         * @param instanceName The name of the ECS. This instance_name can have a string of 2 to 128 characters, must contain only alphanumeric characters or hyphens, such as &#34;-&#34;,&#34;.&#34;,&#34;_&#34;, and must not begin with a hyphen, and must not begin with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName The name of the ECS. This instance_name can have a string of 2 to 128 characters, must contain only alphanumeric characters or hyphens, such as &#34;-&#34;,&#34;.&#34;,&#34;_&#34;, and must not begin with a hyphen, and must not begin with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param instanceType The type of instance to start.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The type of instance to start.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param internetChargeType The Internet charge type of the instance. Valid values are `PayByBandwidth`, `PayByTraffic`.
         * 
         * @return builder
         * 
         */
        public Builder internetChargeType(@Nullable Output<String> internetChargeType) {
            $.internetChargeType = internetChargeType;
            return this;
        }

        /**
         * @param internetChargeType The Internet charge type of the instance. Valid values are `PayByBandwidth`, `PayByTraffic`.
         * 
         * @return builder
         * 
         */
        public Builder internetChargeType(String internetChargeType) {
            return internetChargeType(Output.of(internetChargeType));
        }

        /**
         * @param internetMaxBandwidthOut The Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bit per second). Valid values: `1` to `100`.
         * 
         * @return builder
         * 
         */
        public Builder internetMaxBandwidthOut(@Nullable Output<Integer> internetMaxBandwidthOut) {
            $.internetMaxBandwidthOut = internetMaxBandwidthOut;
            return this;
        }

        /**
         * @param internetMaxBandwidthOut The Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bit per second). Valid values: `1` to `100`.
         * 
         * @return builder
         * 
         */
        public Builder internetMaxBandwidthOut(Integer internetMaxBandwidthOut) {
            return internetMaxBandwidthOut(Output.of(internetMaxBandwidthOut));
        }

        /**
         * @param keyPairName The name of key pair that can login ECS instance successfully without password.
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(@Nullable Output<String> keyPairName) {
            $.keyPairName = keyPairName;
            return this;
        }

        /**
         * @param keyPairName The name of key pair that can login ECS instance successfully without password.
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(String keyPairName) {
            return keyPairName(Output.of(keyPairName));
        }

        /**
         * @param launchTemplateId The ID of the launch template.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateId(@Nullable Output<String> launchTemplateId) {
            $.launchTemplateId = launchTemplateId;
            return this;
        }

        /**
         * @param launchTemplateId The ID of the launch template.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateId(String launchTemplateId) {
            return launchTemplateId(Output.of(launchTemplateId));
        }

        /**
         * @param launchTemplateName The name of the launch template. To use a launch template to create an instance, you must use the `launch_template_id` or `launch_template_name` parameter to specify the launch template.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateName(@Nullable Output<String> launchTemplateName) {
            $.launchTemplateName = launchTemplateName;
            return this;
        }

        /**
         * @param launchTemplateName The name of the launch template. To use a launch template to create an instance, you must use the `launch_template_id` or `launch_template_name` parameter to specify the launch template.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateName(String launchTemplateName) {
            return launchTemplateName(Output.of(launchTemplateName));
        }

        /**
         * @param launchTemplateVersion The version of the launch template.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateVersion(@Nullable Output<String> launchTemplateVersion) {
            $.launchTemplateVersion = launchTemplateVersion;
            return this;
        }

        /**
         * @param launchTemplateVersion The version of the launch template.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateVersion(String launchTemplateVersion) {
            return launchTemplateVersion(Output.of(launchTemplateVersion));
        }

        /**
         * @param networkInterfaces A list of NetworkInterface. See `network_interfaces` below..
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(@Nullable Output<List<EcsInstanceSetNetworkInterfaceArgs>> networkInterfaces) {
            $.networkInterfaces = networkInterfaces;
            return this;
        }

        /**
         * @param networkInterfaces A list of NetworkInterface. See `network_interfaces` below..
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(List<EcsInstanceSetNetworkInterfaceArgs> networkInterfaces) {
            return networkInterfaces(Output.of(networkInterfaces));
        }

        /**
         * @param networkInterfaces A list of NetworkInterface. See `network_interfaces` below..
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(EcsInstanceSetNetworkInterfaceArgs... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }

        /**
         * @param password The password to an instance is a string of 8 to 30 characters. It must contain uppercase/lowercase letters and numerals, but cannot contain special symbols.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password to an instance is a string of 8 to 30 characters. It must contain uppercase/lowercase letters and numerals, but cannot contain special symbols.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordInherit Whether to use the password preset in the image.
         * 
         * @return builder
         * 
         */
        public Builder passwordInherit(@Nullable Output<Boolean> passwordInherit) {
            $.passwordInherit = passwordInherit;
            return this;
        }

        /**
         * @param passwordInherit Whether to use the password preset in the image.
         * 
         * @return builder
         * 
         */
        public Builder passwordInherit(Boolean passwordInherit) {
            return passwordInherit(Output.of(passwordInherit));
        }

        /**
         * @param period The duration that you will buy the resource, in month. It is valid when `instance_charge_type` is `PrePaid`.
         * - When `period_unit` is `Month`, Valid values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `12`, `24`, `36`, `48`, `60`.
         * - When `period_unit` is `Week`, Valid values: `1`, `2`, `3`.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The duration that you will buy the resource, in month. It is valid when `instance_charge_type` is `PrePaid`.
         * - When `period_unit` is `Month`, Valid values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `12`, `24`, `36`, `48`, `60`.
         * - When `period_unit` is `Week`, Valid values: `1`, `2`, `3`.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param periodUnit The duration unit that you will buy the resource. It is valid when `instance_charge_type` is &#39;PrePaid&#39;. Valid value: `Week`, `Month`.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(@Nullable Output<String> periodUnit) {
            $.periodUnit = periodUnit;
            return this;
        }

        /**
         * @param periodUnit The duration unit that you will buy the resource. It is valid when `instance_charge_type` is &#39;PrePaid&#39;. Valid value: `Week`, `Month`.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(String periodUnit) {
            return periodUnit(Output.of(periodUnit));
        }

        /**
         * @param ramRoleName The Instance RAM role name.
         * 
         * @return builder
         * 
         */
        public Builder ramRoleName(@Nullable Output<String> ramRoleName) {
            $.ramRoleName = ramRoleName;
            return this;
        }

        /**
         * @param ramRoleName The Instance RAM role name.
         * 
         * @return builder
         * 
         */
        public Builder ramRoleName(String ramRoleName) {
            return ramRoleName(Output.of(ramRoleName));
        }

        /**
         * @param resourceGroupId The ID of resource group which the instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of resource group which the instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param securityEnhancementStrategy The security enhancement strategy.
         * 
         * @return builder
         * 
         */
        public Builder securityEnhancementStrategy(@Nullable Output<String> securityEnhancementStrategy) {
            $.securityEnhancementStrategy = securityEnhancementStrategy;
            return this;
        }

        /**
         * @param securityEnhancementStrategy The security enhancement strategy.
         * 
         * @return builder
         * 
         */
        public Builder securityEnhancementStrategy(String securityEnhancementStrategy) {
            return securityEnhancementStrategy(Output.of(securityEnhancementStrategy));
        }

        /**
         * @param securityGroupIds A list of security group ids to associate with.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds A list of security group ids to associate with.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds A list of security group ids to associate with.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        /**
         * @param spotPriceLimit The hourly price threshold of a instance, and it takes effect only when parameter &#39;spot_strategy&#39; is &#39;SpotWithPriceLimit&#39;. Three decimals is allowed at most.
         * 
         * @return builder
         * 
         */
        public Builder spotPriceLimit(@Nullable Output<Double> spotPriceLimit) {
            $.spotPriceLimit = spotPriceLimit;
            return this;
        }

        /**
         * @param spotPriceLimit The hourly price threshold of a instance, and it takes effect only when parameter &#39;spot_strategy&#39; is &#39;SpotWithPriceLimit&#39;. Three decimals is allowed at most.
         * 
         * @return builder
         * 
         */
        public Builder spotPriceLimit(Double spotPriceLimit) {
            return spotPriceLimit(Output.of(spotPriceLimit));
        }

        /**
         * @param spotStrategy The spot strategy of a Pay-As-You-Go instance, and it takes effect only when parameter `instance_charge_type` is &#39;PostPaid&#39;.
         * 
         * @return builder
         * 
         */
        public Builder spotStrategy(@Nullable Output<String> spotStrategy) {
            $.spotStrategy = spotStrategy;
            return this;
        }

        /**
         * @param spotStrategy The spot strategy of a Pay-As-You-Go instance, and it takes effect only when parameter `instance_charge_type` is &#39;PostPaid&#39;.
         * 
         * @return builder
         * 
         */
        public Builder spotStrategy(String spotStrategy) {
            return spotStrategy(Output.of(spotStrategy));
        }

        /**
         * @param systemDiskAutoSnapshotPolicyId The ID of the automatic snapshot policy applied to the system disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskAutoSnapshotPolicyId(@Nullable Output<String> systemDiskAutoSnapshotPolicyId) {
            $.systemDiskAutoSnapshotPolicyId = systemDiskAutoSnapshotPolicyId;
            return this;
        }

        /**
         * @param systemDiskAutoSnapshotPolicyId The ID of the automatic snapshot policy applied to the system disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskAutoSnapshotPolicyId(String systemDiskAutoSnapshotPolicyId) {
            return systemDiskAutoSnapshotPolicyId(Output.of(systemDiskAutoSnapshotPolicyId));
        }

        /**
         * @param systemDiskCategory The category of the system disk. Valid values are `cloud_efficiency`, `cloud_ssd`, `cloud_essd`, `cloud`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskCategory(@Nullable Output<String> systemDiskCategory) {
            $.systemDiskCategory = systemDiskCategory;
            return this;
        }

        /**
         * @param systemDiskCategory The category of the system disk. Valid values are `cloud_efficiency`, `cloud_ssd`, `cloud_essd`, `cloud`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskCategory(String systemDiskCategory) {
            return systemDiskCategory(Output.of(systemDiskCategory));
        }

        /**
         * @param systemDiskDescription The description of the system disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskDescription(@Nullable Output<String> systemDiskDescription) {
            $.systemDiskDescription = systemDiskDescription;
            return this;
        }

        /**
         * @param systemDiskDescription The description of the system disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskDescription(String systemDiskDescription) {
            return systemDiskDescription(Output.of(systemDiskDescription));
        }

        /**
         * @param systemDiskName The name of the system disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskName(@Nullable Output<String> systemDiskName) {
            $.systemDiskName = systemDiskName;
            return this;
        }

        /**
         * @param systemDiskName The name of the system disk.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskName(String systemDiskName) {
            return systemDiskName(Output.of(systemDiskName));
        }

        /**
         * @param systemDiskPerformanceLevel The performance level of the ESSD used as the system disk. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskPerformanceLevel(@Nullable Output<String> systemDiskPerformanceLevel) {
            $.systemDiskPerformanceLevel = systemDiskPerformanceLevel;
            return this;
        }

        /**
         * @param systemDiskPerformanceLevel The performance level of the ESSD used as the system disk. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskPerformanceLevel(String systemDiskPerformanceLevel) {
            return systemDiskPerformanceLevel(Output.of(systemDiskPerformanceLevel));
        }

        /**
         * @param systemDiskSize The size of the system disk, measured in GiB. Value range:  values: `20` to `500`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSize(@Nullable Output<Integer> systemDiskSize) {
            $.systemDiskSize = systemDiskSize;
            return this;
        }

        /**
         * @param systemDiskSize The size of the system disk, measured in GiB. Value range:  values: `20` to `500`.
         * 
         * @return builder
         * 
         */
        public Builder systemDiskSize(Integer systemDiskSize) {
            return systemDiskSize(Output.of(systemDiskSize));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param uniqueSuffix Whether to automatically append incremental suffixes to the hostname specified by the HostName parameter and to the instance name specified by the InstanceName parameter when you batch create instances. The incremental suffixes can range from `001` to `999`.
         * 
         * @return builder
         * 
         */
        public Builder uniqueSuffix(@Nullable Output<Boolean> uniqueSuffix) {
            $.uniqueSuffix = uniqueSuffix;
            return this;
        }

        /**
         * @param uniqueSuffix Whether to automatically append incremental suffixes to the hostname specified by the HostName parameter and to the instance name specified by the InstanceName parameter when you batch create instances. The incremental suffixes can range from `001` to `999`.
         * 
         * @return builder
         * 
         */
        public Builder uniqueSuffix(Boolean uniqueSuffix) {
            return uniqueSuffix(Output.of(uniqueSuffix));
        }

        /**
         * @param vswitchId The virtual switch ID to launch in VPC.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The virtual switch ID to launch in VPC.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The ID of the zone in which to create the instance.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The ID of the zone in which to create the instance.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public EcsInstanceSetState build() {
            return $;
        }
    }

}
