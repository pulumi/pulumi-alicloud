// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gwlb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerGroupHealthCheckConfig {
    /**
     * @return The backend server port that is used for health checks.
     * 
     * Valid values: `1` to `65535`.
     * 
     * Default value: `80`.
     * 
     */
    private @Nullable Integer healthCheckConnectPort;
    /**
     * @return The maximum timeout period of a health check response.
     * 
     * Unit: seconds
     * 
     * Valid values: `1` to `300`.
     * 
     * Default value: `5`.
     * 
     */
    private @Nullable Integer healthCheckConnectTimeout;
    /**
     * @return The domain name that you want to use for health checks. Valid values:
     * 
     * *   **$SERVER_IP** (default): the private IP address of a backend server.
     * 
     */
    private @Nullable String healthCheckDomain;
    /**
     * @return Specifies whether to enable the health check feature. Valid values:
     * 
     */
    private @Nullable Boolean healthCheckEnabled;
    /**
     * @return The HTTP status codes that the system returns for health checks.
     * 
     */
    private @Nullable List<String> healthCheckHttpCodes;
    /**
     * @return The interval at which health checks are performed.
     * 
     * Unit: seconds
     * 
     * Valid values: `1` to `50`.
     * 
     * Default value: `10`.
     * 
     */
    private @Nullable Integer healthCheckInterval;
    /**
     * @return The URL that is used for health checks.
     * 
     * The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: \_ ; ~ ! ( ) \* \[ ] {@literal @} $ ^ : &#39; , + =
     * 
     * The URL must start with a forward slash (/).
     * 
     * &gt; **NOTE:**  This parameter takes effect only if you set `HealthCheckProtocol` to `HTTP`.
     * 
     */
    private @Nullable String healthCheckPath;
    /**
     * @return The protocol that is used for health checks. Valid values:
     * 
     * - `TCP`: TCP health checks send TCP SYN packets to a backend server to check whether the port of the backend server is reachable.
     * - `HTTP`: HTTP health checks simulate a process that uses a web browser to access resources by sending HEAD or GET requests to an instance. These requests are used to check whether the instance is healthy.
     * 
     */
    private @Nullable String healthCheckProtocol;
    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `2`.
     * 
     */
    private @Nullable Integer healthyThreshold;
    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `2`.
     * 
     */
    private @Nullable Integer unhealthyThreshold;

    private ServerGroupHealthCheckConfig() {}
    /**
     * @return The backend server port that is used for health checks.
     * 
     * Valid values: `1` to `65535`.
     * 
     * Default value: `80`.
     * 
     */
    public Optional<Integer> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }
    /**
     * @return The maximum timeout period of a health check response.
     * 
     * Unit: seconds
     * 
     * Valid values: `1` to `300`.
     * 
     * Default value: `5`.
     * 
     */
    public Optional<Integer> healthCheckConnectTimeout() {
        return Optional.ofNullable(this.healthCheckConnectTimeout);
    }
    /**
     * @return The domain name that you want to use for health checks. Valid values:
     * 
     * *   **$SERVER_IP** (default): the private IP address of a backend server.
     * 
     */
    public Optional<String> healthCheckDomain() {
        return Optional.ofNullable(this.healthCheckDomain);
    }
    /**
     * @return Specifies whether to enable the health check feature. Valid values:
     * 
     */
    public Optional<Boolean> healthCheckEnabled() {
        return Optional.ofNullable(this.healthCheckEnabled);
    }
    /**
     * @return The HTTP status codes that the system returns for health checks.
     * 
     */
    public List<String> healthCheckHttpCodes() {
        return this.healthCheckHttpCodes == null ? List.of() : this.healthCheckHttpCodes;
    }
    /**
     * @return The interval at which health checks are performed.
     * 
     * Unit: seconds
     * 
     * Valid values: `1` to `50`.
     * 
     * Default value: `10`.
     * 
     */
    public Optional<Integer> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }
    /**
     * @return The URL that is used for health checks.
     * 
     * The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: \_ ; ~ ! ( ) \* \[ ] {@literal @} $ ^ : &#39; , + =
     * 
     * The URL must start with a forward slash (/).
     * 
     * &gt; **NOTE:**  This parameter takes effect only if you set `HealthCheckProtocol` to `HTTP`.
     * 
     */
    public Optional<String> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }
    /**
     * @return The protocol that is used for health checks. Valid values:
     * 
     * - `TCP`: TCP health checks send TCP SYN packets to a backend server to check whether the port of the backend server is reachable.
     * - `HTTP`: HTTP health checks simulate a process that uses a web browser to access resources by sending HEAD or GET requests to an instance. These requests are used to check whether the instance is healthy.
     * 
     */
    public Optional<String> healthCheckProtocol() {
        return Optional.ofNullable(this.healthCheckProtocol);
    }
    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `2`.
     * 
     */
    public Optional<Integer> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }
    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `2`.
     * 
     */
    public Optional<Integer> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerGroupHealthCheckConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer healthCheckConnectPort;
        private @Nullable Integer healthCheckConnectTimeout;
        private @Nullable String healthCheckDomain;
        private @Nullable Boolean healthCheckEnabled;
        private @Nullable List<String> healthCheckHttpCodes;
        private @Nullable Integer healthCheckInterval;
        private @Nullable String healthCheckPath;
        private @Nullable String healthCheckProtocol;
        private @Nullable Integer healthyThreshold;
        private @Nullable Integer unhealthyThreshold;
        public Builder() {}
        public Builder(ServerGroupHealthCheckConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthCheckConnectPort = defaults.healthCheckConnectPort;
    	      this.healthCheckConnectTimeout = defaults.healthCheckConnectTimeout;
    	      this.healthCheckDomain = defaults.healthCheckDomain;
    	      this.healthCheckEnabled = defaults.healthCheckEnabled;
    	      this.healthCheckHttpCodes = defaults.healthCheckHttpCodes;
    	      this.healthCheckInterval = defaults.healthCheckInterval;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.healthCheckProtocol = defaults.healthCheckProtocol;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder healthCheckConnectPort(@Nullable Integer healthCheckConnectPort) {

            this.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckConnectTimeout(@Nullable Integer healthCheckConnectTimeout) {

            this.healthCheckConnectTimeout = healthCheckConnectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckDomain(@Nullable String healthCheckDomain) {

            this.healthCheckDomain = healthCheckDomain;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckEnabled(@Nullable Boolean healthCheckEnabled) {

            this.healthCheckEnabled = healthCheckEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckHttpCodes(@Nullable List<String> healthCheckHttpCodes) {

            this.healthCheckHttpCodes = healthCheckHttpCodes;
            return this;
        }
        public Builder healthCheckHttpCodes(String... healthCheckHttpCodes) {
            return healthCheckHttpCodes(List.of(healthCheckHttpCodes));
        }
        @CustomType.Setter
        public Builder healthCheckInterval(@Nullable Integer healthCheckInterval) {

            this.healthCheckInterval = healthCheckInterval;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPath(@Nullable String healthCheckPath) {

            this.healthCheckPath = healthCheckPath;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckProtocol(@Nullable String healthCheckProtocol) {

            this.healthCheckProtocol = healthCheckProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(@Nullable Integer healthyThreshold) {

            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(@Nullable Integer unhealthyThreshold) {

            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        public ServerGroupHealthCheckConfig build() {
            final var _resultValue = new ServerGroupHealthCheckConfig();
            _resultValue.healthCheckConnectPort = healthCheckConnectPort;
            _resultValue.healthCheckConnectTimeout = healthCheckConnectTimeout;
            _resultValue.healthCheckDomain = healthCheckDomain;
            _resultValue.healthCheckEnabled = healthCheckEnabled;
            _resultValue.healthCheckHttpCodes = healthCheckHttpCodes;
            _resultValue.healthCheckInterval = healthCheckInterval;
            _resultValue.healthCheckPath = healthCheckPath;
            _resultValue.healthCheckProtocol = healthCheckProtocol;
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            return _resultValue;
        }
    }
}
