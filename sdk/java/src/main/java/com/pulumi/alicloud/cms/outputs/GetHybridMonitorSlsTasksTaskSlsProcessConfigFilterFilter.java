// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetHybridMonitorSlsTasksTaskSlsProcessConfigFilterFilter {
    /**
     * @return The method that is used to filter logs imported from Log Service.
     * 
     */
    private String operator;
    /**
     * @return The name of the key that is used to filter logs imported from Log Service.
     * 
     */
    private String slsKeyName;
    /**
     * @return The value of the key that is used to filter logs imported from Log Service.
     * 
     */
    private String value;

    private GetHybridMonitorSlsTasksTaskSlsProcessConfigFilterFilter() {}
    /**
     * @return The method that is used to filter logs imported from Log Service.
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return The name of the key that is used to filter logs imported from Log Service.
     * 
     */
    public String slsKeyName() {
        return this.slsKeyName;
    }
    /**
     * @return The value of the key that is used to filter logs imported from Log Service.
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHybridMonitorSlsTasksTaskSlsProcessConfigFilterFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String operator;
        private String slsKeyName;
        private String value;
        public Builder() {}
        public Builder(GetHybridMonitorSlsTasksTaskSlsProcessConfigFilterFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.operator = defaults.operator;
    	      this.slsKeyName = defaults.slsKeyName;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder operator(String operator) {
            if (operator == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTaskSlsProcessConfigFilterFilter", "operator");
            }
            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder slsKeyName(String slsKeyName) {
            if (slsKeyName == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTaskSlsProcessConfigFilterFilter", "slsKeyName");
            }
            this.slsKeyName = slsKeyName;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetHybridMonitorSlsTasksTaskSlsProcessConfigFilterFilter", "value");
            }
            this.value = value;
            return this;
        }
        public GetHybridMonitorSlsTasksTaskSlsProcessConfigFilterFilter build() {
            final var _resultValue = new GetHybridMonitorSlsTasksTaskSlsProcessConfigFilterFilter();
            _resultValue.operator = operator;
            _resultValue.slsKeyName = slsKeyName;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
