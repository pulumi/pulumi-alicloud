// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudfirewall;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NatFirewallControlPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final NatFirewallControlPolicyArgs Empty = new NatFirewallControlPolicyArgs();

    /**
     * The method (action) of access traffic passing through Cloud Firewall in the security access control policy. Valid values:
     * - **accept**: Release
     * - **drop**: Refused
     * - **log**: Observation.
     * 
     */
    @Import(name="aclAction", required=true)
    private Output<String> aclAction;

    /**
     * @return The method (action) of access traffic passing through Cloud Firewall in the security access control policy. Valid values:
     * - **accept**: Release
     * - **drop**: Refused
     * - **log**: Observation.
     * 
     */
    public Output<String> aclAction() {
        return this.aclAction;
    }

    /**
     * The list of application types supported by the access control policy.
     * 
     */
    @Import(name="applicationNameLists", required=true)
    private Output<List<String>> applicationNameLists;

    /**
     * @return The list of application types supported by the access control policy.
     * 
     */
    public Output<List<String>> applicationNameLists() {
        return this.applicationNameLists;
    }

    /**
     * The description of the access control policy.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the access control policy.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The destination port of traffic access in the access control policy. Value:
     * - When the protocol type is set to ICMP, the value of DestPort is null.
     * &gt; **NOTE:**  When the protocol type is ICMP, access control on the destination port is not supported.
     * - When the protocol type is TCP, UDP, or ANY, and the destination port type (DestPortType) IS group, the value of DestPort is null.
     * &gt; **NOTE:**  When you select group (destination port address book) for the destination port type of the access control policy, you do not need to set a specific destination port number. All ports that need to be controlled by this access control policy are included in the destination port address book.
     * - When the protocol type is TCP, UDP, or ANY, and the destination port type (DestPortType) is port, the value of DestPort is the destination port number.
     * 
     */
    @Import(name="destPort")
    private @Nullable Output<String> destPort;

    /**
     * @return The destination port of traffic access in the access control policy. Value:
     * - When the protocol type is set to ICMP, the value of DestPort is null.
     * &gt; **NOTE:**  When the protocol type is ICMP, access control on the destination port is not supported.
     * - When the protocol type is TCP, UDP, or ANY, and the destination port type (DestPortType) IS group, the value of DestPort is null.
     * &gt; **NOTE:**  When you select group (destination port address book) for the destination port type of the access control policy, you do not need to set a specific destination port number. All ports that need to be controlled by this access control policy are included in the destination port address book.
     * - When the protocol type is TCP, UDP, or ANY, and the destination port type (DestPortType) is port, the value of DestPort is the destination port number.
     * 
     */
    public Optional<Output<String>> destPort() {
        return Optional.ofNullable(this.destPort);
    }

    /**
     * The address book name of the destination port of the access traffic in the access control policy.
     * &gt; **NOTE:**  When DestPortType is set to group, you need to set the destination port address book name.
     * 
     */
    @Import(name="destPortGroup")
    private @Nullable Output<String> destPortGroup;

    /**
     * @return The address book name of the destination port of the access traffic in the access control policy.
     * &gt; **NOTE:**  When DestPortType is set to group, you need to set the destination port address book name.
     * 
     */
    public Optional<Output<String>> destPortGroup() {
        return Optional.ofNullable(this.destPortGroup);
    }

    /**
     * The destination port type of the access traffic in the security access control policy.
     * - **port**: port
     * - **group**: Port Address Book.
     * 
     */
    @Import(name="destPortType")
    private @Nullable Output<String> destPortType;

    /**
     * @return The destination port type of the access traffic in the security access control policy.
     * - **port**: port
     * - **group**: Port Address Book.
     * 
     */
    public Optional<Output<String>> destPortType() {
        return Optional.ofNullable(this.destPortType);
    }

    /**
     * The destination address segment in the access control policy. Valid values:
     * - When DestinationType is net, Destination is the Destination CIDR. For example: 1.2.XX.XX/24
     * - When DestinationType IS group, Destination is the name of the Destination address book. For example: db_group
     * - When DestinationType is domain, Destination is the Destination domain name. For example: * .aliyuncs.com
     * - When DestinationType is location, Destination is the Destination region. For example: \[&#34;BJ11&#34;, &#34;ZB&#34;\].
     * 
     */
    @Import(name="destination", required=true)
    private Output<String> destination;

    /**
     * @return The destination address segment in the access control policy. Valid values:
     * - When DestinationType is net, Destination is the Destination CIDR. For example: 1.2.XX.XX/24
     * - When DestinationType IS group, Destination is the name of the Destination address book. For example: db_group
     * - When DestinationType is domain, Destination is the Destination domain name. For example: * .aliyuncs.com
     * - When DestinationType is location, Destination is the Destination region. For example: \[&#34;BJ11&#34;, &#34;ZB&#34;\].
     * 
     */
    public Output<String> destination() {
        return this.destination;
    }

    /**
     * The destination address type in the access control policy. Valid values:
     * - **net**: Destination Network segment (CIDR address)
     * - **group**: Destination Address Book
     * - **domain**: the destination domain name.
     * 
     */
    @Import(name="destinationType", required=true)
    private Output<String> destinationType;

    /**
     * @return The destination address type in the access control policy. Valid values:
     * - **net**: Destination Network segment (CIDR address)
     * - **group**: Destination Address Book
     * - **domain**: the destination domain name.
     * 
     */
    public Output<String> destinationType() {
        return this.destinationType;
    }

    /**
     * The traffic direction of the access control policy. Valid values:
     * - **out**: Internal and external traffic access control.
     * 
     */
    @Import(name="direction", required=true)
    private Output<String> direction;

    /**
     * @return The traffic direction of the access control policy. Valid values:
     * - **out**: Internal and external traffic access control.
     * 
     */
    public Output<String> direction() {
        return this.direction;
    }

    /**
     * The domain name resolution method of the access control policy. The policy is enabled by default after it is created. Valid values:
     * - **0**: Based on FQDN
     * - **1**: DNS-based dynamic resolution
     * - **2**: dynamic resolution based on FQDN and DNS.
     * 
     */
    @Import(name="domainResolveType")
    private @Nullable Output<Integer> domainResolveType;

    /**
     * @return The domain name resolution method of the access control policy. The policy is enabled by default after it is created. Valid values:
     * - **0**: Based on FQDN
     * - **1**: DNS-based dynamic resolution
     * - **2**: dynamic resolution based on FQDN and DNS.
     * 
     */
    public Optional<Output<Integer>> domainResolveType() {
        return Optional.ofNullable(this.domainResolveType);
    }

    /**
     * The end time of the policy validity period of the access control policy. Expresses using the second-level timestamp format. Must be full or half time and at least half an hour greater than the start time.
     * &gt; **NOTE:**  When RepeatType is set to permit, EndTime is null. When the RepeatType is None, Daily, Weekly, or Monthly, EndTime must have a value and you need to set the end time.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<Integer> endTime;

    /**
     * @return The end time of the policy validity period of the access control policy. Expresses using the second-level timestamp format. Must be full or half time and at least half an hour greater than the start time.
     * &gt; **NOTE:**  When RepeatType is set to permit, EndTime is null. When the RepeatType is None, Daily, Weekly, or Monthly, EndTime must have a value and you need to set the end time.
     * 
     */
    public Optional<Output<Integer>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * Supported IP address version. Value:
     * - **4** (default): indicates the IPv4 address.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<String> ipVersion;

    /**
     * @return Supported IP address version. Value:
     * - **4** (default): indicates the IPv4 address.
     * 
     */
    public Optional<Output<String>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The ID of the NAT gateway instance.
     * 
     */
    @Import(name="natGatewayId", required=true)
    private Output<String> natGatewayId;

    /**
     * @return The ID of the NAT gateway instance.
     * 
     */
    public Output<String> natGatewayId() {
        return this.natGatewayId;
    }

    /**
     * The priority for the access control policy to take effect. The priority number increases sequentially from 1, and the smaller the priority number, the higher the priority.
     * 
     */
    @Import(name="newOrder", required=true)
    private Output<String> newOrder;

    /**
     * @return The priority for the access control policy to take effect. The priority number increases sequentially from 1, and the smaller the priority number, the higher the priority.
     * 
     */
    public Output<String> newOrder() {
        return this.newOrder;
    }

    /**
     * The security protocol type for traffic access in the access control policy. Valid values:
     * - ANY (indicates that all protocol types are queried)
     * - TCP
     * - UDP
     * - ICMP.
     * 
     */
    @Import(name="proto", required=true)
    private Output<String> proto;

    /**
     * @return The security protocol type for traffic access in the access control policy. Valid values:
     * - ANY (indicates that all protocol types are queried)
     * - TCP
     * - UDP
     * - ICMP.
     * 
     */
    public Output<String> proto() {
        return this.proto;
    }

    /**
     * The enabled status of the access control policy. The policy is enabled by default after it is created. Value:
     * - **true**: Enable access control policy
     * - **false**: Do not enable access control policies.
     * 
     */
    @Import(name="release")
    private @Nullable Output<String> release;

    /**
     * @return The enabled status of the access control policy. The policy is enabled by default after it is created. Value:
     * - **true**: Enable access control policy
     * - **false**: Do not enable access control policies.
     * 
     */
    public Optional<Output<String>> release() {
        return Optional.ofNullable(this.release);
    }

    /**
     * Collection of recurring dates for the policy validity period of the access control policy.
     * - When RepeatType is &#39;Permanent&#39;, &#39;None&#39;, &#39;Daily&#39;, RepeatDays is an empty collection. For example:[]
     * - When RepeatType is Weekly, RepeatDays cannot be empty. For example:[&#34;0&#34;, &#34;6&#34;]. When the RepeatType is set to Weekly, RepeatDays cannot be repeated.
     * - RepeatDays cannot be empty when RepeatType is &#39;Monthly. For example:[1, 31]. When RepeatType is set to Monthly, RepeatDays cannot be repeated.
     * 
     */
    @Import(name="repeatDays")
    private @Nullable Output<List<Integer>> repeatDays;

    /**
     * @return Collection of recurring dates for the policy validity period of the access control policy.
     * - When RepeatType is &#39;Permanent&#39;, &#39;None&#39;, &#39;Daily&#39;, RepeatDays is an empty collection. For example:[]
     * - When RepeatType is Weekly, RepeatDays cannot be empty. For example:[&#34;0&#34;, &#34;6&#34;]. When the RepeatType is set to Weekly, RepeatDays cannot be repeated.
     * - RepeatDays cannot be empty when RepeatType is &#39;Monthly. For example:[1, 31]. When RepeatType is set to Monthly, RepeatDays cannot be repeated.
     * 
     */
    public Optional<Output<List<Integer>>> repeatDays() {
        return Optional.ofNullable(this.repeatDays);
    }

    /**
     * The recurring end time of the policy validity period of the access control policy. For example: 23:30, it must be the whole point or half point time, and at least half an hour greater than the repeat start time.
     * &gt; **NOTE:**  When RepeatType is set to normal or None, RepeatEndTime is null. When the RepeatType is Daily, Weekly, or Monthly, the RepeatEndTime must have a value, and you need to set the repeat end time.
     * 
     */
    @Import(name="repeatEndTime")
    private @Nullable Output<String> repeatEndTime;

    /**
     * @return The recurring end time of the policy validity period of the access control policy. For example: 23:30, it must be the whole point or half point time, and at least half an hour greater than the repeat start time.
     * &gt; **NOTE:**  When RepeatType is set to normal or None, RepeatEndTime is null. When the RepeatType is Daily, Weekly, or Monthly, the RepeatEndTime must have a value, and you need to set the repeat end time.
     * 
     */
    public Optional<Output<String>> repeatEndTime() {
        return Optional.ofNullable(this.repeatEndTime);
    }

    /**
     * The recurring start time of the policy validity period of the access control policy. For example: 08:00, it must be the whole point or half point time, and at least half an hour less than the repeat end time.
     * &gt; **NOTE:**  When RepeatType is set to permit or None, RepeatStartTime is empty. When the RepeatType is Daily, Weekly, or Monthly, the RepeatStartTime must have a value and you need to set the repeat start time.
     * 
     */
    @Import(name="repeatStartTime")
    private @Nullable Output<String> repeatStartTime;

    /**
     * @return The recurring start time of the policy validity period of the access control policy. For example: 08:00, it must be the whole point or half point time, and at least half an hour less than the repeat end time.
     * &gt; **NOTE:**  When RepeatType is set to permit or None, RepeatStartTime is empty. When the RepeatType is Daily, Weekly, or Monthly, the RepeatStartTime must have a value and you need to set the repeat start time.
     * 
     */
    public Optional<Output<String>> repeatStartTime() {
        return Optional.ofNullable(this.repeatStartTime);
    }

    /**
     * The type of repetition for the policy validity period of the access control policy. Value:
     * - **Permit** (default): Always
     * - **None**: Specify a single time
     * - **Daily**: Daily
     * - **Weekly**: Weekly
     * - **Monthly**: Monthly.
     * 
     */
    @Import(name="repeatType")
    private @Nullable Output<String> repeatType;

    /**
     * @return The type of repetition for the policy validity period of the access control policy. Value:
     * - **Permit** (default): Always
     * - **None**: Specify a single time
     * - **Daily**: Daily
     * - **Weekly**: Weekly
     * - **Monthly**: Monthly.
     * 
     */
    public Optional<Output<String>> repeatType() {
        return Optional.ofNullable(this.repeatType);
    }

    /**
     * The source address in the access control policy. Valid values:
     * - When **SourceType** is set to &#39;net&#39;, Source is the Source CIDR address. For example: 10.2.4.0/24
     * - When **SourceType** is set to &#39;group&#39;, Source is the name of the Source address book. For example: db_group.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return The source address in the access control policy. Valid values:
     * - When **SourceType** is set to &#39;net&#39;, Source is the Source CIDR address. For example: 10.2.4.0/24
     * - When **SourceType** is set to &#39;group&#39;, Source is the name of the Source address book. For example: db_group.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    /**
     * The source address type in the access control policy. Valid values:
     * - **net**: the source network segment (CIDR address)
     * - **group**: source address book
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return The source address type in the access control policy. Valid values:
     * - **net**: the source network segment (CIDR address)
     * - **group**: source address book
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    /**
     * The start time of the policy validity period of the access control policy. Expresses using the second-level timestamp format. It must be a full or half hour and at least half an hour less than the end time.
     * &gt; **NOTE:**  When RepeatType is set to normal, StartTime is null. When the RepeatType is None, Daily, Weekly, or Monthly, StartTime must have a value and you need to set the start time.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<Integer> startTime;

    /**
     * @return The start time of the policy validity period of the access control policy. Expresses using the second-level timestamp format. It must be a full or half hour and at least half an hour less than the end time.
     * &gt; **NOTE:**  When RepeatType is set to normal, StartTime is null. When the RepeatType is None, Daily, Weekly, or Monthly, StartTime must have a value and you need to set the start time.
     * 
     */
    public Optional<Output<Integer>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    private NatFirewallControlPolicyArgs() {}

    private NatFirewallControlPolicyArgs(NatFirewallControlPolicyArgs $) {
        this.aclAction = $.aclAction;
        this.applicationNameLists = $.applicationNameLists;
        this.description = $.description;
        this.destPort = $.destPort;
        this.destPortGroup = $.destPortGroup;
        this.destPortType = $.destPortType;
        this.destination = $.destination;
        this.destinationType = $.destinationType;
        this.direction = $.direction;
        this.domainResolveType = $.domainResolveType;
        this.endTime = $.endTime;
        this.ipVersion = $.ipVersion;
        this.natGatewayId = $.natGatewayId;
        this.newOrder = $.newOrder;
        this.proto = $.proto;
        this.release = $.release;
        this.repeatDays = $.repeatDays;
        this.repeatEndTime = $.repeatEndTime;
        this.repeatStartTime = $.repeatStartTime;
        this.repeatType = $.repeatType;
        this.source = $.source;
        this.sourceType = $.sourceType;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NatFirewallControlPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NatFirewallControlPolicyArgs $;

        public Builder() {
            $ = new NatFirewallControlPolicyArgs();
        }

        public Builder(NatFirewallControlPolicyArgs defaults) {
            $ = new NatFirewallControlPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclAction The method (action) of access traffic passing through Cloud Firewall in the security access control policy. Valid values:
         * - **accept**: Release
         * - **drop**: Refused
         * - **log**: Observation.
         * 
         * @return builder
         * 
         */
        public Builder aclAction(Output<String> aclAction) {
            $.aclAction = aclAction;
            return this;
        }

        /**
         * @param aclAction The method (action) of access traffic passing through Cloud Firewall in the security access control policy. Valid values:
         * - **accept**: Release
         * - **drop**: Refused
         * - **log**: Observation.
         * 
         * @return builder
         * 
         */
        public Builder aclAction(String aclAction) {
            return aclAction(Output.of(aclAction));
        }

        /**
         * @param applicationNameLists The list of application types supported by the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder applicationNameLists(Output<List<String>> applicationNameLists) {
            $.applicationNameLists = applicationNameLists;
            return this;
        }

        /**
         * @param applicationNameLists The list of application types supported by the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder applicationNameLists(List<String> applicationNameLists) {
            return applicationNameLists(Output.of(applicationNameLists));
        }

        /**
         * @param applicationNameLists The list of application types supported by the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder applicationNameLists(String... applicationNameLists) {
            return applicationNameLists(List.of(applicationNameLists));
        }

        /**
         * @param description The description of the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the access control policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destPort The destination port of traffic access in the access control policy. Value:
         * - When the protocol type is set to ICMP, the value of DestPort is null.
         * &gt; **NOTE:**  When the protocol type is ICMP, access control on the destination port is not supported.
         * - When the protocol type is TCP, UDP, or ANY, and the destination port type (DestPortType) IS group, the value of DestPort is null.
         * &gt; **NOTE:**  When you select group (destination port address book) for the destination port type of the access control policy, you do not need to set a specific destination port number. All ports that need to be controlled by this access control policy are included in the destination port address book.
         * - When the protocol type is TCP, UDP, or ANY, and the destination port type (DestPortType) is port, the value of DestPort is the destination port number.
         * 
         * @return builder
         * 
         */
        public Builder destPort(@Nullable Output<String> destPort) {
            $.destPort = destPort;
            return this;
        }

        /**
         * @param destPort The destination port of traffic access in the access control policy. Value:
         * - When the protocol type is set to ICMP, the value of DestPort is null.
         * &gt; **NOTE:**  When the protocol type is ICMP, access control on the destination port is not supported.
         * - When the protocol type is TCP, UDP, or ANY, and the destination port type (DestPortType) IS group, the value of DestPort is null.
         * &gt; **NOTE:**  When you select group (destination port address book) for the destination port type of the access control policy, you do not need to set a specific destination port number. All ports that need to be controlled by this access control policy are included in the destination port address book.
         * - When the protocol type is TCP, UDP, or ANY, and the destination port type (DestPortType) is port, the value of DestPort is the destination port number.
         * 
         * @return builder
         * 
         */
        public Builder destPort(String destPort) {
            return destPort(Output.of(destPort));
        }

        /**
         * @param destPortGroup The address book name of the destination port of the access traffic in the access control policy.
         * &gt; **NOTE:**  When DestPortType is set to group, you need to set the destination port address book name.
         * 
         * @return builder
         * 
         */
        public Builder destPortGroup(@Nullable Output<String> destPortGroup) {
            $.destPortGroup = destPortGroup;
            return this;
        }

        /**
         * @param destPortGroup The address book name of the destination port of the access traffic in the access control policy.
         * &gt; **NOTE:**  When DestPortType is set to group, you need to set the destination port address book name.
         * 
         * @return builder
         * 
         */
        public Builder destPortGroup(String destPortGroup) {
            return destPortGroup(Output.of(destPortGroup));
        }

        /**
         * @param destPortType The destination port type of the access traffic in the security access control policy.
         * - **port**: port
         * - **group**: Port Address Book.
         * 
         * @return builder
         * 
         */
        public Builder destPortType(@Nullable Output<String> destPortType) {
            $.destPortType = destPortType;
            return this;
        }

        /**
         * @param destPortType The destination port type of the access traffic in the security access control policy.
         * - **port**: port
         * - **group**: Port Address Book.
         * 
         * @return builder
         * 
         */
        public Builder destPortType(String destPortType) {
            return destPortType(Output.of(destPortType));
        }

        /**
         * @param destination The destination address segment in the access control policy. Valid values:
         * - When DestinationType is net, Destination is the Destination CIDR. For example: 1.2.XX.XX/24
         * - When DestinationType IS group, Destination is the name of the Destination address book. For example: db_group
         * - When DestinationType is domain, Destination is the Destination domain name. For example: * .aliyuncs.com
         * - When DestinationType is location, Destination is the Destination region. For example: \[&#34;BJ11&#34;, &#34;ZB&#34;\].
         * 
         * @return builder
         * 
         */
        public Builder destination(Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination The destination address segment in the access control policy. Valid values:
         * - When DestinationType is net, Destination is the Destination CIDR. For example: 1.2.XX.XX/24
         * - When DestinationType IS group, Destination is the name of the Destination address book. For example: db_group
         * - When DestinationType is domain, Destination is the Destination domain name. For example: * .aliyuncs.com
         * - When DestinationType is location, Destination is the Destination region. For example: \[&#34;BJ11&#34;, &#34;ZB&#34;\].
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param destinationType The destination address type in the access control policy. Valid values:
         * - **net**: Destination Network segment (CIDR address)
         * - **group**: Destination Address Book
         * - **domain**: the destination domain name.
         * 
         * @return builder
         * 
         */
        public Builder destinationType(Output<String> destinationType) {
            $.destinationType = destinationType;
            return this;
        }

        /**
         * @param destinationType The destination address type in the access control policy. Valid values:
         * - **net**: Destination Network segment (CIDR address)
         * - **group**: Destination Address Book
         * - **domain**: the destination domain name.
         * 
         * @return builder
         * 
         */
        public Builder destinationType(String destinationType) {
            return destinationType(Output.of(destinationType));
        }

        /**
         * @param direction The traffic direction of the access control policy. Valid values:
         * - **out**: Internal and external traffic access control.
         * 
         * @return builder
         * 
         */
        public Builder direction(Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction The traffic direction of the access control policy. Valid values:
         * - **out**: Internal and external traffic access control.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param domainResolveType The domain name resolution method of the access control policy. The policy is enabled by default after it is created. Valid values:
         * - **0**: Based on FQDN
         * - **1**: DNS-based dynamic resolution
         * - **2**: dynamic resolution based on FQDN and DNS.
         * 
         * @return builder
         * 
         */
        public Builder domainResolveType(@Nullable Output<Integer> domainResolveType) {
            $.domainResolveType = domainResolveType;
            return this;
        }

        /**
         * @param domainResolveType The domain name resolution method of the access control policy. The policy is enabled by default after it is created. Valid values:
         * - **0**: Based on FQDN
         * - **1**: DNS-based dynamic resolution
         * - **2**: dynamic resolution based on FQDN and DNS.
         * 
         * @return builder
         * 
         */
        public Builder domainResolveType(Integer domainResolveType) {
            return domainResolveType(Output.of(domainResolveType));
        }

        /**
         * @param endTime The end time of the policy validity period of the access control policy. Expresses using the second-level timestamp format. Must be full or half time and at least half an hour greater than the start time.
         * &gt; **NOTE:**  When RepeatType is set to permit, EndTime is null. When the RepeatType is None, Daily, Weekly, or Monthly, EndTime must have a value and you need to set the end time.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<Integer> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The end time of the policy validity period of the access control policy. Expresses using the second-level timestamp format. Must be full or half time and at least half an hour greater than the start time.
         * &gt; **NOTE:**  When RepeatType is set to permit, EndTime is null. When the RepeatType is None, Daily, Weekly, or Monthly, EndTime must have a value and you need to set the end time.
         * 
         * @return builder
         * 
         */
        public Builder endTime(Integer endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param ipVersion Supported IP address version. Value:
         * - **4** (default): indicates the IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<String> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion Supported IP address version. Value:
         * - **4** (default): indicates the IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(String ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param natGatewayId The ID of the NAT gateway instance.
         * 
         * @return builder
         * 
         */
        public Builder natGatewayId(Output<String> natGatewayId) {
            $.natGatewayId = natGatewayId;
            return this;
        }

        /**
         * @param natGatewayId The ID of the NAT gateway instance.
         * 
         * @return builder
         * 
         */
        public Builder natGatewayId(String natGatewayId) {
            return natGatewayId(Output.of(natGatewayId));
        }

        /**
         * @param newOrder The priority for the access control policy to take effect. The priority number increases sequentially from 1, and the smaller the priority number, the higher the priority.
         * 
         * @return builder
         * 
         */
        public Builder newOrder(Output<String> newOrder) {
            $.newOrder = newOrder;
            return this;
        }

        /**
         * @param newOrder The priority for the access control policy to take effect. The priority number increases sequentially from 1, and the smaller the priority number, the higher the priority.
         * 
         * @return builder
         * 
         */
        public Builder newOrder(String newOrder) {
            return newOrder(Output.of(newOrder));
        }

        /**
         * @param proto The security protocol type for traffic access in the access control policy. Valid values:
         * - ANY (indicates that all protocol types are queried)
         * - TCP
         * - UDP
         * - ICMP.
         * 
         * @return builder
         * 
         */
        public Builder proto(Output<String> proto) {
            $.proto = proto;
            return this;
        }

        /**
         * @param proto The security protocol type for traffic access in the access control policy. Valid values:
         * - ANY (indicates that all protocol types are queried)
         * - TCP
         * - UDP
         * - ICMP.
         * 
         * @return builder
         * 
         */
        public Builder proto(String proto) {
            return proto(Output.of(proto));
        }

        /**
         * @param release The enabled status of the access control policy. The policy is enabled by default after it is created. Value:
         * - **true**: Enable access control policy
         * - **false**: Do not enable access control policies.
         * 
         * @return builder
         * 
         */
        public Builder release(@Nullable Output<String> release) {
            $.release = release;
            return this;
        }

        /**
         * @param release The enabled status of the access control policy. The policy is enabled by default after it is created. Value:
         * - **true**: Enable access control policy
         * - **false**: Do not enable access control policies.
         * 
         * @return builder
         * 
         */
        public Builder release(String release) {
            return release(Output.of(release));
        }

        /**
         * @param repeatDays Collection of recurring dates for the policy validity period of the access control policy.
         * - When RepeatType is &#39;Permanent&#39;, &#39;None&#39;, &#39;Daily&#39;, RepeatDays is an empty collection. For example:[]
         * - When RepeatType is Weekly, RepeatDays cannot be empty. For example:[&#34;0&#34;, &#34;6&#34;]. When the RepeatType is set to Weekly, RepeatDays cannot be repeated.
         * - RepeatDays cannot be empty when RepeatType is &#39;Monthly. For example:[1, 31]. When RepeatType is set to Monthly, RepeatDays cannot be repeated.
         * 
         * @return builder
         * 
         */
        public Builder repeatDays(@Nullable Output<List<Integer>> repeatDays) {
            $.repeatDays = repeatDays;
            return this;
        }

        /**
         * @param repeatDays Collection of recurring dates for the policy validity period of the access control policy.
         * - When RepeatType is &#39;Permanent&#39;, &#39;None&#39;, &#39;Daily&#39;, RepeatDays is an empty collection. For example:[]
         * - When RepeatType is Weekly, RepeatDays cannot be empty. For example:[&#34;0&#34;, &#34;6&#34;]. When the RepeatType is set to Weekly, RepeatDays cannot be repeated.
         * - RepeatDays cannot be empty when RepeatType is &#39;Monthly. For example:[1, 31]. When RepeatType is set to Monthly, RepeatDays cannot be repeated.
         * 
         * @return builder
         * 
         */
        public Builder repeatDays(List<Integer> repeatDays) {
            return repeatDays(Output.of(repeatDays));
        }

        /**
         * @param repeatDays Collection of recurring dates for the policy validity period of the access control policy.
         * - When RepeatType is &#39;Permanent&#39;, &#39;None&#39;, &#39;Daily&#39;, RepeatDays is an empty collection. For example:[]
         * - When RepeatType is Weekly, RepeatDays cannot be empty. For example:[&#34;0&#34;, &#34;6&#34;]. When the RepeatType is set to Weekly, RepeatDays cannot be repeated.
         * - RepeatDays cannot be empty when RepeatType is &#39;Monthly. For example:[1, 31]. When RepeatType is set to Monthly, RepeatDays cannot be repeated.
         * 
         * @return builder
         * 
         */
        public Builder repeatDays(Integer... repeatDays) {
            return repeatDays(List.of(repeatDays));
        }

        /**
         * @param repeatEndTime The recurring end time of the policy validity period of the access control policy. For example: 23:30, it must be the whole point or half point time, and at least half an hour greater than the repeat start time.
         * &gt; **NOTE:**  When RepeatType is set to normal or None, RepeatEndTime is null. When the RepeatType is Daily, Weekly, or Monthly, the RepeatEndTime must have a value, and you need to set the repeat end time.
         * 
         * @return builder
         * 
         */
        public Builder repeatEndTime(@Nullable Output<String> repeatEndTime) {
            $.repeatEndTime = repeatEndTime;
            return this;
        }

        /**
         * @param repeatEndTime The recurring end time of the policy validity period of the access control policy. For example: 23:30, it must be the whole point or half point time, and at least half an hour greater than the repeat start time.
         * &gt; **NOTE:**  When RepeatType is set to normal or None, RepeatEndTime is null. When the RepeatType is Daily, Weekly, or Monthly, the RepeatEndTime must have a value, and you need to set the repeat end time.
         * 
         * @return builder
         * 
         */
        public Builder repeatEndTime(String repeatEndTime) {
            return repeatEndTime(Output.of(repeatEndTime));
        }

        /**
         * @param repeatStartTime The recurring start time of the policy validity period of the access control policy. For example: 08:00, it must be the whole point or half point time, and at least half an hour less than the repeat end time.
         * &gt; **NOTE:**  When RepeatType is set to permit or None, RepeatStartTime is empty. When the RepeatType is Daily, Weekly, or Monthly, the RepeatStartTime must have a value and you need to set the repeat start time.
         * 
         * @return builder
         * 
         */
        public Builder repeatStartTime(@Nullable Output<String> repeatStartTime) {
            $.repeatStartTime = repeatStartTime;
            return this;
        }

        /**
         * @param repeatStartTime The recurring start time of the policy validity period of the access control policy. For example: 08:00, it must be the whole point or half point time, and at least half an hour less than the repeat end time.
         * &gt; **NOTE:**  When RepeatType is set to permit or None, RepeatStartTime is empty. When the RepeatType is Daily, Weekly, or Monthly, the RepeatStartTime must have a value and you need to set the repeat start time.
         * 
         * @return builder
         * 
         */
        public Builder repeatStartTime(String repeatStartTime) {
            return repeatStartTime(Output.of(repeatStartTime));
        }

        /**
         * @param repeatType The type of repetition for the policy validity period of the access control policy. Value:
         * - **Permit** (default): Always
         * - **None**: Specify a single time
         * - **Daily**: Daily
         * - **Weekly**: Weekly
         * - **Monthly**: Monthly.
         * 
         * @return builder
         * 
         */
        public Builder repeatType(@Nullable Output<String> repeatType) {
            $.repeatType = repeatType;
            return this;
        }

        /**
         * @param repeatType The type of repetition for the policy validity period of the access control policy. Value:
         * - **Permit** (default): Always
         * - **None**: Specify a single time
         * - **Daily**: Daily
         * - **Weekly**: Weekly
         * - **Monthly**: Monthly.
         * 
         * @return builder
         * 
         */
        public Builder repeatType(String repeatType) {
            return repeatType(Output.of(repeatType));
        }

        /**
         * @param source The source address in the access control policy. Valid values:
         * - When **SourceType** is set to &#39;net&#39;, Source is the Source CIDR address. For example: 10.2.4.0/24
         * - When **SourceType** is set to &#39;group&#39;, Source is the name of the Source address book. For example: db_group.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source address in the access control policy. Valid values:
         * - When **SourceType** is set to &#39;net&#39;, Source is the Source CIDR address. For example: 10.2.4.0/24
         * - When **SourceType** is set to &#39;group&#39;, Source is the name of the Source address book. For example: db_group.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourceType The source address type in the access control policy. Valid values:
         * - **net**: the source network segment (CIDR address)
         * - **group**: source address book
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType The source address type in the access control policy. Valid values:
         * - **net**: the source network segment (CIDR address)
         * - **group**: source address book
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param startTime The start time of the policy validity period of the access control policy. Expresses using the second-level timestamp format. It must be a full or half hour and at least half an hour less than the end time.
         * &gt; **NOTE:**  When RepeatType is set to normal, StartTime is null. When the RepeatType is None, Daily, Weekly, or Monthly, StartTime must have a value and you need to set the start time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<Integer> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The start time of the policy validity period of the access control policy. Expresses using the second-level timestamp format. It must be a full or half hour and at least half an hour less than the end time.
         * &gt; **NOTE:**  When RepeatType is set to normal, StartTime is null. When the RepeatType is None, Daily, Weekly, or Monthly, StartTime must have a value and you need to set the start time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(Integer startTime) {
            return startTime(Output.of(startTime));
        }

        public NatFirewallControlPolicyArgs build() {
            if ($.aclAction == null) {
                throw new MissingRequiredPropertyException("NatFirewallControlPolicyArgs", "aclAction");
            }
            if ($.applicationNameLists == null) {
                throw new MissingRequiredPropertyException("NatFirewallControlPolicyArgs", "applicationNameLists");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("NatFirewallControlPolicyArgs", "description");
            }
            if ($.destination == null) {
                throw new MissingRequiredPropertyException("NatFirewallControlPolicyArgs", "destination");
            }
            if ($.destinationType == null) {
                throw new MissingRequiredPropertyException("NatFirewallControlPolicyArgs", "destinationType");
            }
            if ($.direction == null) {
                throw new MissingRequiredPropertyException("NatFirewallControlPolicyArgs", "direction");
            }
            if ($.natGatewayId == null) {
                throw new MissingRequiredPropertyException("NatFirewallControlPolicyArgs", "natGatewayId");
            }
            if ($.newOrder == null) {
                throw new MissingRequiredPropertyException("NatFirewallControlPolicyArgs", "newOrder");
            }
            if ($.proto == null) {
                throw new MissingRequiredPropertyException("NatFirewallControlPolicyArgs", "proto");
            }
            if ($.source == null) {
                throw new MissingRequiredPropertyException("NatFirewallControlPolicyArgs", "source");
            }
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("NatFirewallControlPolicyArgs", "sourceType");
            }
            return $;
        }
    }

}
