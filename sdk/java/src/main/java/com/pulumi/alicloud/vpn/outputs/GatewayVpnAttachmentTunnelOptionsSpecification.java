// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.outputs;

import com.pulumi.alicloud.vpn.outputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfig;
import com.pulumi.alicloud.vpn.outputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfig;
import com.pulumi.alicloud.vpn.outputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GatewayVpnAttachmentTunnelOptionsSpecification {
    /**
     * @return The ID of the user gateway associated with the tunnel.
     * 
     * &gt; **NOTE:**  This parameter is required when creating a dual-tunnel mode IPsec-VPN connection.
     * 
     */
    private String customerGatewayId;
    /**
     * @return Whether the DPD (peer alive detection) function is enabled for the tunnel. Value:
     * 
     */
    private @Nullable Boolean enableDpd;
    /**
     * @return Whether the NAT crossing function is enabled for the tunnel. Value:
     * 
     */
    private @Nullable Boolean enableNatTraversal;
    /**
     * @return The local internet IP in Tunnel.
     * 
     */
    private @Nullable String internetIp;
    /**
     * @return The role of Tunnel.
     * 
     */
    private @Nullable String role;
    /**
     * @return The state of Tunnel.
     * 
     */
    private @Nullable String state;
    /**
     * @return The negotiation status of Tunnel.
     * 
     */
    private @Nullable String status;
    /**
     * @return Add the BGP configuration for the tunnel.
     * 
     * &gt; **NOTE:**  After you enable the BGP function for IPsec connections (that is, specify `EnableTunnelsBgp` as `true`), you must configure this parameter.
     * See `tunnel_bgp_config` below.
     * 
     */
    private @Nullable GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfig tunnelBgpConfig;
    /**
     * @return The tunnel ID of IPsec-VPN connection.
     * 
     */
    private @Nullable String tunnelId;
    /**
     * @return Configuration information for the first phase negotiation. See `tunnel_ike_config` below.
     * 
     */
    private @Nullable GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfig tunnelIkeConfig;
    /**
     * @return The order in which the tunnel was created.
     * 
     */
    private Integer tunnelIndex;
    /**
     * @return Configuration information for the second-stage negotiation. See `tunnel_ipsec_config` below.
     * 
     */
    private @Nullable GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfig tunnelIpsecConfig;
    /**
     * @return The zoneNo of tunnel.
     * 
     */
    private @Nullable String zoneNo;

    private GatewayVpnAttachmentTunnelOptionsSpecification() {}
    /**
     * @return The ID of the user gateway associated with the tunnel.
     * 
     * &gt; **NOTE:**  This parameter is required when creating a dual-tunnel mode IPsec-VPN connection.
     * 
     */
    public String customerGatewayId() {
        return this.customerGatewayId;
    }
    /**
     * @return Whether the DPD (peer alive detection) function is enabled for the tunnel. Value:
     * 
     */
    public Optional<Boolean> enableDpd() {
        return Optional.ofNullable(this.enableDpd);
    }
    /**
     * @return Whether the NAT crossing function is enabled for the tunnel. Value:
     * 
     */
    public Optional<Boolean> enableNatTraversal() {
        return Optional.ofNullable(this.enableNatTraversal);
    }
    /**
     * @return The local internet IP in Tunnel.
     * 
     */
    public Optional<String> internetIp() {
        return Optional.ofNullable(this.internetIp);
    }
    /**
     * @return The role of Tunnel.
     * 
     */
    public Optional<String> role() {
        return Optional.ofNullable(this.role);
    }
    /**
     * @return The state of Tunnel.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The negotiation status of Tunnel.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Add the BGP configuration for the tunnel.
     * 
     * &gt; **NOTE:**  After you enable the BGP function for IPsec connections (that is, specify `EnableTunnelsBgp` as `true`), you must configure this parameter.
     * See `tunnel_bgp_config` below.
     * 
     */
    public Optional<GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfig> tunnelBgpConfig() {
        return Optional.ofNullable(this.tunnelBgpConfig);
    }
    /**
     * @return The tunnel ID of IPsec-VPN connection.
     * 
     */
    public Optional<String> tunnelId() {
        return Optional.ofNullable(this.tunnelId);
    }
    /**
     * @return Configuration information for the first phase negotiation. See `tunnel_ike_config` below.
     * 
     */
    public Optional<GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfig> tunnelIkeConfig() {
        return Optional.ofNullable(this.tunnelIkeConfig);
    }
    /**
     * @return The order in which the tunnel was created.
     * 
     */
    public Integer tunnelIndex() {
        return this.tunnelIndex;
    }
    /**
     * @return Configuration information for the second-stage negotiation. See `tunnel_ipsec_config` below.
     * 
     */
    public Optional<GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfig> tunnelIpsecConfig() {
        return Optional.ofNullable(this.tunnelIpsecConfig);
    }
    /**
     * @return The zoneNo of tunnel.
     * 
     */
    public Optional<String> zoneNo() {
        return Optional.ofNullable(this.zoneNo);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GatewayVpnAttachmentTunnelOptionsSpecification defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String customerGatewayId;
        private @Nullable Boolean enableDpd;
        private @Nullable Boolean enableNatTraversal;
        private @Nullable String internetIp;
        private @Nullable String role;
        private @Nullable String state;
        private @Nullable String status;
        private @Nullable GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfig tunnelBgpConfig;
        private @Nullable String tunnelId;
        private @Nullable GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfig tunnelIkeConfig;
        private Integer tunnelIndex;
        private @Nullable GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfig tunnelIpsecConfig;
        private @Nullable String zoneNo;
        public Builder() {}
        public Builder(GatewayVpnAttachmentTunnelOptionsSpecification defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customerGatewayId = defaults.customerGatewayId;
    	      this.enableDpd = defaults.enableDpd;
    	      this.enableNatTraversal = defaults.enableNatTraversal;
    	      this.internetIp = defaults.internetIp;
    	      this.role = defaults.role;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.tunnelBgpConfig = defaults.tunnelBgpConfig;
    	      this.tunnelId = defaults.tunnelId;
    	      this.tunnelIkeConfig = defaults.tunnelIkeConfig;
    	      this.tunnelIndex = defaults.tunnelIndex;
    	      this.tunnelIpsecConfig = defaults.tunnelIpsecConfig;
    	      this.zoneNo = defaults.zoneNo;
        }

        @CustomType.Setter
        public Builder customerGatewayId(String customerGatewayId) {
            if (customerGatewayId == null) {
              throw new MissingRequiredPropertyException("GatewayVpnAttachmentTunnelOptionsSpecification", "customerGatewayId");
            }
            this.customerGatewayId = customerGatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder enableDpd(@Nullable Boolean enableDpd) {

            this.enableDpd = enableDpd;
            return this;
        }
        @CustomType.Setter
        public Builder enableNatTraversal(@Nullable Boolean enableNatTraversal) {

            this.enableNatTraversal = enableNatTraversal;
            return this;
        }
        @CustomType.Setter
        public Builder internetIp(@Nullable String internetIp) {

            this.internetIp = internetIp;
            return this;
        }
        @CustomType.Setter
        public Builder role(@Nullable String role) {

            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelBgpConfig(@Nullable GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfig tunnelBgpConfig) {

            this.tunnelBgpConfig = tunnelBgpConfig;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelId(@Nullable String tunnelId) {

            this.tunnelId = tunnelId;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelIkeConfig(@Nullable GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfig tunnelIkeConfig) {

            this.tunnelIkeConfig = tunnelIkeConfig;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelIndex(Integer tunnelIndex) {
            if (tunnelIndex == null) {
              throw new MissingRequiredPropertyException("GatewayVpnAttachmentTunnelOptionsSpecification", "tunnelIndex");
            }
            this.tunnelIndex = tunnelIndex;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelIpsecConfig(@Nullable GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfig tunnelIpsecConfig) {

            this.tunnelIpsecConfig = tunnelIpsecConfig;
            return this;
        }
        @CustomType.Setter
        public Builder zoneNo(@Nullable String zoneNo) {

            this.zoneNo = zoneNo;
            return this;
        }
        public GatewayVpnAttachmentTunnelOptionsSpecification build() {
            final var _resultValue = new GatewayVpnAttachmentTunnelOptionsSpecification();
            _resultValue.customerGatewayId = customerGatewayId;
            _resultValue.enableDpd = enableDpd;
            _resultValue.enableNatTraversal = enableNatTraversal;
            _resultValue.internetIp = internetIp;
            _resultValue.role = role;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.tunnelBgpConfig = tunnelBgpConfig;
            _resultValue.tunnelId = tunnelId;
            _resultValue.tunnelIkeConfig = tunnelIkeConfig;
            _resultValue.tunnelIndex = tunnelIndex;
            _resultValue.tunnelIpsecConfig = tunnelIpsecConfig;
            _resultValue.zoneNo = zoneNo;
            return _resultValue;
        }
    }
}
