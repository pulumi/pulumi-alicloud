// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFlowlogsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFlowlogsArgs Empty = new GetFlowlogsArgs();

    /**
     * The ID of Cen instance.
     * 
     */
    @Import(name="cenId")
    private @Nullable Output<String> cenId;

    /**
     * @return The ID of Cen instance.
     * 
     */
    public Optional<Output<String>> cenId() {
        return Optional.ofNullable(this.cenId);
    }

    /**
     * The description of the flowlog.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the flowlog.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of FlowLog.
     * 
     */
    @Import(name="flowLogId")
    private @Nullable Output<String> flowLogId;

    /**
     * @return The ID of FlowLog.
     * 
     */
    public Optional<Output<String>> flowLogId() {
        return Optional.ofNullable(this.flowLogId);
    }

    /**
     * The name of the flowlog.
     * 
     */
    @Import(name="flowLogName")
    private @Nullable Output<String> flowLogName;

    /**
     * @return The name of the flowlog.
     * 
     */
    public Optional<Output<String>> flowLogName() {
        return Optional.ofNullable(this.flowLogName);
    }

    /**
     * Flowlog Version.
     * 
     */
    @Import(name="flowLogVersion")
    private @Nullable Output<String> flowLogVersion;

    /**
     * @return Flowlog Version.
     * 
     */
    public Optional<Output<String>> flowLogVersion() {
        return Optional.ofNullable(this.flowLogVersion);
    }

    /**
     * A list of Flow Log IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return A list of Flow Log IDs.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The LogStore that stores the flowlog.
     * 
     */
    @Import(name="logStoreName")
    private @Nullable Output<String> logStoreName;

    /**
     * @return The LogStore that stores the flowlog.
     * 
     */
    public Optional<Output<String>> logStoreName() {
        return Optional.ofNullable(this.logStoreName);
    }

    /**
     * A regex string to filter results by Group Metric Rule name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable Output<String> nameRegex;

    /**
     * @return A regex string to filter results by Group Metric Rule name.
     * 
     */
    public Optional<Output<String>> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * Current page number.
     * 
     */
    @Import(name="pageNumber")
    private @Nullable Output<Integer> pageNumber;

    /**
     * @return Current page number.
     * 
     */
    public Optional<Output<Integer>> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }

    /**
     * Number of records per page.
     * 
     */
    @Import(name="pageSize")
    private @Nullable Output<Integer> pageSize;

    /**
     * @return Number of records per page.
     * 
     */
    public Optional<Output<Integer>> pageSize() {
        return Optional.ofNullable(this.pageSize);
    }

    /**
     * The Project that stores the flowlog.
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return The Project that stores the flowlog.
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * Region id
     * 
     */
    @Import(name="regionId")
    private @Nullable Output<String> regionId;

    /**
     * @return Region id
     * 
     */
    public Optional<Output<String>> regionId() {
        return Optional.ofNullable(this.regionId);
    }

    /**
     * The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Transit Router ID
     * 
     */
    @Import(name="transitRouterId")
    private @Nullable Output<String> transitRouterId;

    /**
     * @return Transit Router ID
     * 
     */
    public Optional<Output<String>> transitRouterId() {
        return Optional.ofNullable(this.transitRouterId);
    }

    private GetFlowlogsArgs() {}

    private GetFlowlogsArgs(GetFlowlogsArgs $) {
        this.cenId = $.cenId;
        this.description = $.description;
        this.flowLogId = $.flowLogId;
        this.flowLogName = $.flowLogName;
        this.flowLogVersion = $.flowLogVersion;
        this.ids = $.ids;
        this.interval = $.interval;
        this.logStoreName = $.logStoreName;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.pageNumber = $.pageNumber;
        this.pageSize = $.pageSize;
        this.projectName = $.projectName;
        this.regionId = $.regionId;
        this.status = $.status;
        this.transitRouterId = $.transitRouterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFlowlogsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFlowlogsArgs $;

        public Builder() {
            $ = new GetFlowlogsArgs();
        }

        public Builder(GetFlowlogsArgs defaults) {
            $ = new GetFlowlogsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cenId The ID of Cen instance.
         * 
         * @return builder
         * 
         */
        public Builder cenId(@Nullable Output<String> cenId) {
            $.cenId = cenId;
            return this;
        }

        /**
         * @param cenId The ID of Cen instance.
         * 
         * @return builder
         * 
         */
        public Builder cenId(String cenId) {
            return cenId(Output.of(cenId));
        }

        /**
         * @param description The description of the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param flowLogId The ID of FlowLog.
         * 
         * @return builder
         * 
         */
        public Builder flowLogId(@Nullable Output<String> flowLogId) {
            $.flowLogId = flowLogId;
            return this;
        }

        /**
         * @param flowLogId The ID of FlowLog.
         * 
         * @return builder
         * 
         */
        public Builder flowLogId(String flowLogId) {
            return flowLogId(Output.of(flowLogId));
        }

        /**
         * @param flowLogName The name of the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder flowLogName(@Nullable Output<String> flowLogName) {
            $.flowLogName = flowLogName;
            return this;
        }

        /**
         * @param flowLogName The name of the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder flowLogName(String flowLogName) {
            return flowLogName(Output.of(flowLogName));
        }

        /**
         * @param flowLogVersion Flowlog Version.
         * 
         * @return builder
         * 
         */
        public Builder flowLogVersion(@Nullable Output<String> flowLogVersion) {
            $.flowLogVersion = flowLogVersion;
            return this;
        }

        /**
         * @param flowLogVersion Flowlog Version.
         * 
         * @return builder
         * 
         */
        public Builder flowLogVersion(String flowLogVersion) {
            return flowLogVersion(Output.of(flowLogVersion));
        }

        /**
         * @param ids A list of Flow Log IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Flow Log IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids A list of Flow Log IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param interval The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param logStoreName The LogStore that stores the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder logStoreName(@Nullable Output<String> logStoreName) {
            $.logStoreName = logStoreName;
            return this;
        }

        /**
         * @param logStoreName The LogStore that stores the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder logStoreName(String logStoreName) {
            return logStoreName(Output.of(logStoreName));
        }

        /**
         * @param nameRegex A regex string to filter results by Group Metric Rule name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable Output<String> nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter results by Group Metric Rule name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(String nameRegex) {
            return nameRegex(Output.of(nameRegex));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        /**
         * @param pageNumber Current page number.
         * 
         * @return builder
         * 
         */
        public Builder pageNumber(@Nullable Output<Integer> pageNumber) {
            $.pageNumber = pageNumber;
            return this;
        }

        /**
         * @param pageNumber Current page number.
         * 
         * @return builder
         * 
         */
        public Builder pageNumber(Integer pageNumber) {
            return pageNumber(Output.of(pageNumber));
        }

        /**
         * @param pageSize Number of records per page.
         * 
         * @return builder
         * 
         */
        public Builder pageSize(@Nullable Output<Integer> pageSize) {
            $.pageSize = pageSize;
            return this;
        }

        /**
         * @param pageSize Number of records per page.
         * 
         * @return builder
         * 
         */
        public Builder pageSize(Integer pageSize) {
            return pageSize(Output.of(pageSize));
        }

        /**
         * @param projectName The Project that stores the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName The Project that stores the flowlog.
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param regionId Region id
         * 
         * @return builder
         * 
         */
        public Builder regionId(@Nullable Output<String> regionId) {
            $.regionId = regionId;
            return this;
        }

        /**
         * @param regionId Region id
         * 
         * @return builder
         * 
         */
        public Builder regionId(String regionId) {
            return regionId(Output.of(regionId));
        }

        /**
         * @param status The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param transitRouterId Transit Router ID
         * 
         * @return builder
         * 
         */
        public Builder transitRouterId(@Nullable Output<String> transitRouterId) {
            $.transitRouterId = transitRouterId;
            return this;
        }

        /**
         * @param transitRouterId Transit Router ID
         * 
         * @return builder
         * 
         */
        public Builder transitRouterId(String transitRouterId) {
            return transitRouterId(Output.of(transitRouterId));
        }

        public GetFlowlogsArgs build() {
            return $;
        }
    }

}
