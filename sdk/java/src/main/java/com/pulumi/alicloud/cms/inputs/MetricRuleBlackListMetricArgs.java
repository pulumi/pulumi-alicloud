// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricRuleBlackListMetricArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricRuleBlackListMetricArgs Empty = new MetricRuleBlackListMetricArgs();

    /**
     * The name of the monitoring indicator.
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    /**
     * @return The name of the monitoring indicator.
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * The extended dimension information of the instance. For example, &#39;{&#34;device&#34;:&#34;C:&#34;}&#39; indicates that the blacklist policy is applied to all C disks under the ECS instance.
     * 
     */
    @Import(name="resource")
    private @Nullable Output<String> resource;

    /**
     * @return The extended dimension information of the instance. For example, &#39;{&#34;device&#34;:&#34;C:&#34;}&#39; indicates that the blacklist policy is applied to all C disks under the ECS instance.
     * 
     */
    public Optional<Output<String>> resource() {
        return Optional.ofNullable(this.resource);
    }

    private MetricRuleBlackListMetricArgs() {}

    private MetricRuleBlackListMetricArgs(MetricRuleBlackListMetricArgs $) {
        this.metricName = $.metricName;
        this.resource = $.resource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricRuleBlackListMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricRuleBlackListMetricArgs $;

        public Builder() {
            $ = new MetricRuleBlackListMetricArgs();
        }

        public Builder(MetricRuleBlackListMetricArgs defaults) {
            $ = new MetricRuleBlackListMetricArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metricName The name of the monitoring indicator.
         * 
         * @return builder
         * 
         */
        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName The name of the monitoring indicator.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param resource The extended dimension information of the instance. For example, &#39;{&#34;device&#34;:&#34;C:&#34;}&#39; indicates that the blacklist policy is applied to all C disks under the ECS instance.
         * 
         * @return builder
         * 
         */
        public Builder resource(@Nullable Output<String> resource) {
            $.resource = resource;
            return this;
        }

        /**
         * @param resource The extended dimension information of the instance. For example, &#39;{&#34;device&#34;:&#34;C:&#34;}&#39; indicates that the blacklist policy is applied to all C disks under the ECS instance.
         * 
         * @return builder
         * 
         */
        public Builder resource(String resource) {
            return resource(Output.of(resource));
        }

        public MetricRuleBlackListMetricArgs build() {
            if ($.metricName == null) {
                throw new MissingRequiredPropertyException("MetricRuleBlackListMetricArgs", "metricName");
            }
            return $;
        }
    }

}
