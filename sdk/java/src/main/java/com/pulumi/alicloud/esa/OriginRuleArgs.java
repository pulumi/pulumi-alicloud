// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OriginRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final OriginRuleArgs Empty = new OriginRuleArgs();

    /**
     * Overwrite the DNS resolution record of the origin request.
     * 
     */
    @Import(name="dnsRecord")
    private @Nullable Output<String> dnsRecord;

    /**
     * @return Overwrite the DNS resolution record of the origin request.
     * 
     */
    public Optional<Output<String>> dnsRecord() {
        return Optional.ofNullable(this.dnsRecord);
    }

    /**
     * The HOST carried in the back-to-origin request.
     * 
     */
    @Import(name="originHost")
    private @Nullable Output<String> originHost;

    /**
     * @return The HOST carried in the back-to-origin request.
     * 
     */
    public Optional<Output<String>> originHost() {
        return Optional.ofNullable(this.originHost);
    }

    /**
     * The port of the origin station accessed when the HTTP protocol is used to return to the origin.
     * 
     */
    @Import(name="originHttpPort")
    private @Nullable Output<String> originHttpPort;

    /**
     * @return The port of the origin station accessed when the HTTP protocol is used to return to the origin.
     * 
     */
    public Optional<Output<String>> originHttpPort() {
        return Optional.ofNullable(this.originHttpPort);
    }

    /**
     * The port of the origin station accessed when the HTTPS protocol is used to return to the origin.
     * 
     */
    @Import(name="originHttpsPort")
    private @Nullable Output<String> originHttpsPort;

    /**
     * @return The port of the origin station accessed when the HTTPS protocol is used to return to the origin.
     * 
     */
    public Optional<Output<String>> originHttpsPort() {
        return Optional.ofNullable(this.originHttpsPort);
    }

    /**
     * The protocol used by the back-to-origin request. Value range:
     * 
     */
    @Import(name="originScheme")
    private @Nullable Output<String> originScheme;

    /**
     * @return The protocol used by the back-to-origin request. Value range:
     * 
     */
    public Optional<Output<String>> originScheme() {
        return Optional.ofNullable(this.originScheme);
    }

    /**
     * SNI carried in the back-to-origin request.
     * 
     */
    @Import(name="originSni")
    private @Nullable Output<String> originSni;

    /**
     * @return SNI carried in the back-to-origin request.
     * 
     */
    public Optional<Output<String>> originSni() {
        return Optional.ofNullable(this.originSni);
    }

    /**
     * Use the range sharding method to download the file from the source. Value range:
     * 
     */
    @Import(name="range")
    private @Nullable Output<String> range;

    /**
     * @return Use the range sharding method to download the file from the source. Value range:
     * 
     */
    public Optional<Output<String>> range() {
        return Optional.ofNullable(this.range);
    }

    /**
     * Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
     * 
     */
    @Import(name="rule")
    private @Nullable Output<String> rule;

    /**
     * @return Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
     * - Match all incoming requests: value set to true
     * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
     * 
     */
    public Optional<Output<String>> rule() {
        return Optional.ofNullable(this.rule);
    }

    /**
     * Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     * - on: open.
     * - off: close.
     * 
     */
    @Import(name="ruleEnable")
    private @Nullable Output<String> ruleEnable;

    /**
     * @return Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
     * - on: open.
     * - off: close.
     * 
     */
    public Optional<Output<String>> ruleEnable() {
        return Optional.ofNullable(this.ruleEnable);
    }

    /**
     * Rule name. When adding global configuration, this parameter does not need to be set.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return Rule name. When adding global configuration, this parameter does not need to be set.
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * The site ID.
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return The site ID.
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    /**
     * The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
     * 
     */
    @Import(name="siteVersion")
    private @Nullable Output<Integer> siteVersion;

    /**
     * @return The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
     * 
     */
    public Optional<Output<Integer>> siteVersion() {
        return Optional.ofNullable(this.siteVersion);
    }

    private OriginRuleArgs() {}

    private OriginRuleArgs(OriginRuleArgs $) {
        this.dnsRecord = $.dnsRecord;
        this.originHost = $.originHost;
        this.originHttpPort = $.originHttpPort;
        this.originHttpsPort = $.originHttpsPort;
        this.originScheme = $.originScheme;
        this.originSni = $.originSni;
        this.range = $.range;
        this.rule = $.rule;
        this.ruleEnable = $.ruleEnable;
        this.ruleName = $.ruleName;
        this.siteId = $.siteId;
        this.siteVersion = $.siteVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OriginRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OriginRuleArgs $;

        public Builder() {
            $ = new OriginRuleArgs();
        }

        public Builder(OriginRuleArgs defaults) {
            $ = new OriginRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsRecord Overwrite the DNS resolution record of the origin request.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecord(@Nullable Output<String> dnsRecord) {
            $.dnsRecord = dnsRecord;
            return this;
        }

        /**
         * @param dnsRecord Overwrite the DNS resolution record of the origin request.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecord(String dnsRecord) {
            return dnsRecord(Output.of(dnsRecord));
        }

        /**
         * @param originHost The HOST carried in the back-to-origin request.
         * 
         * @return builder
         * 
         */
        public Builder originHost(@Nullable Output<String> originHost) {
            $.originHost = originHost;
            return this;
        }

        /**
         * @param originHost The HOST carried in the back-to-origin request.
         * 
         * @return builder
         * 
         */
        public Builder originHost(String originHost) {
            return originHost(Output.of(originHost));
        }

        /**
         * @param originHttpPort The port of the origin station accessed when the HTTP protocol is used to return to the origin.
         * 
         * @return builder
         * 
         */
        public Builder originHttpPort(@Nullable Output<String> originHttpPort) {
            $.originHttpPort = originHttpPort;
            return this;
        }

        /**
         * @param originHttpPort The port of the origin station accessed when the HTTP protocol is used to return to the origin.
         * 
         * @return builder
         * 
         */
        public Builder originHttpPort(String originHttpPort) {
            return originHttpPort(Output.of(originHttpPort));
        }

        /**
         * @param originHttpsPort The port of the origin station accessed when the HTTPS protocol is used to return to the origin.
         * 
         * @return builder
         * 
         */
        public Builder originHttpsPort(@Nullable Output<String> originHttpsPort) {
            $.originHttpsPort = originHttpsPort;
            return this;
        }

        /**
         * @param originHttpsPort The port of the origin station accessed when the HTTPS protocol is used to return to the origin.
         * 
         * @return builder
         * 
         */
        public Builder originHttpsPort(String originHttpsPort) {
            return originHttpsPort(Output.of(originHttpsPort));
        }

        /**
         * @param originScheme The protocol used by the back-to-origin request. Value range:
         * 
         * @return builder
         * 
         */
        public Builder originScheme(@Nullable Output<String> originScheme) {
            $.originScheme = originScheme;
            return this;
        }

        /**
         * @param originScheme The protocol used by the back-to-origin request. Value range:
         * 
         * @return builder
         * 
         */
        public Builder originScheme(String originScheme) {
            return originScheme(Output.of(originScheme));
        }

        /**
         * @param originSni SNI carried in the back-to-origin request.
         * 
         * @return builder
         * 
         */
        public Builder originSni(@Nullable Output<String> originSni) {
            $.originSni = originSni;
            return this;
        }

        /**
         * @param originSni SNI carried in the back-to-origin request.
         * 
         * @return builder
         * 
         */
        public Builder originSni(String originSni) {
            return originSni(Output.of(originSni));
        }

        /**
         * @param range Use the range sharding method to download the file from the source. Value range:
         * 
         * @return builder
         * 
         */
        public Builder range(@Nullable Output<String> range) {
            $.range = range;
            return this;
        }

        /**
         * @param range Use the range sharding method to download the file from the source. Value range:
         * 
         * @return builder
         * 
         */
        public Builder range(String range) {
            return range(Output.of(range));
        }

        /**
         * @param rule Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
         * - Match all incoming requests: value set to true
         * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
         * 
         * @return builder
         * 
         */
        public Builder rule(@Nullable Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
         * - Match all incoming requests: value set to true
         * - Match specified request: Set the value to a custom expression, for example: (http.host eq \&#34;video.example.com\&#34;)
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param ruleEnable Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
         * - on: open.
         * - off: close.
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(@Nullable Output<String> ruleEnable) {
            $.ruleEnable = ruleEnable;
            return this;
        }

        /**
         * @param ruleEnable Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
         * - on: open.
         * - off: close.
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(String ruleEnable) {
            return ruleEnable(Output.of(ruleEnable));
        }

        /**
         * @param ruleName Rule name. When adding global configuration, this parameter does not need to be set.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name. When adding global configuration, this parameter does not need to be set.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param siteId The site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param siteVersion The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(@Nullable Output<Integer> siteVersion) {
            $.siteVersion = siteVersion;
            return this;
        }

        /**
         * @param siteVersion The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(Integer siteVersion) {
            return siteVersion(Output.of(siteVersion));
        }

        public OriginRuleArgs build() {
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("OriginRuleArgs", "siteId");
            }
            return $;
        }
    }

}
