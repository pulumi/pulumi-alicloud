// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dataworks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceState extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceState Empty = new DataSourceState();

    /**
     * Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
     * 
     */
    @Import(name="connectionProperties")
    private @Nullable Output<String> connectionProperties;

    /**
     * @return Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
     * 
     */
    public Optional<Output<String>> connectionProperties() {
        return Optional.ofNullable(this.connectionProperties);
    }

    /**
     * The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
     * 
     */
    @Import(name="connectionPropertiesMode")
    private @Nullable Output<String> connectionPropertiesMode;

    /**
     * @return The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
     * 
     */
    public Optional<Output<String>> connectionPropertiesMode() {
        return Optional.ofNullable(this.connectionPropertiesMode);
    }

    /**
     * The creation time of the resource
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<Integer> createTime;

    /**
     * @return The creation time of the resource
     * 
     */
    public Optional<Output<Integer>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Creator of the data source
     * 
     */
    @Import(name="createUser")
    private @Nullable Output<String> createUser;

    /**
     * @return Creator of the data source
     * 
     */
    public Optional<Output<String>> createUser() {
        return Optional.ofNullable(this.createUser);
    }

    /**
     * The first ID of the resource
     * 
     */
    @Import(name="dataSourceId")
    private @Nullable Output<Integer> dataSourceId;

    /**
     * @return The first ID of the resource
     * 
     */
    public Optional<Output<Integer>> dataSourceId() {
        return Optional.ofNullable(this.dataSourceId);
    }

    /**
     * The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
     * 
     */
    @Import(name="dataSourceName")
    private @Nullable Output<String> dataSourceName;

    /**
     * @return The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
     * 
     */
    public Optional<Output<String>> dataSourceName() {
        return Optional.ofNullable(this.dataSourceName);
    }

    /**
     * Description of the data source
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the data source
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Modification time
     * 
     */
    @Import(name="modifyTime")
    private @Nullable Output<Integer> modifyTime;

    /**
     * @return Modification time
     * 
     */
    public Optional<Output<Integer>> modifyTime() {
        return Optional.ofNullable(this.modifyTime);
    }

    /**
     * Modifier of the data source
     * 
     */
    @Import(name="modifyUser")
    private @Nullable Output<String> modifyUser;

    /**
     * @return Modifier of the data source
     * 
     */
    public Optional<Output<String>> modifyUser() {
        return Optional.ofNullable(this.modifyUser);
    }

    /**
     * The ID of the project to which the data source belongs.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return The ID of the project to which the data source belongs.
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Business Unique Key of Data Source
     * 
     */
    @Import(name="qualifiedName")
    private @Nullable Output<String> qualifiedName;

    /**
     * @return Business Unique Key of Data Source
     * 
     */
    public Optional<Output<String>> qualifiedName() {
        return Optional.ofNullable(this.qualifiedName);
    }

    /**
     * The type of data source. For a list of data source types, see the values listed in the API documentation.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of data source. For a list of data source types, see the values listed in the API documentation.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DataSourceState() {}

    private DataSourceState(DataSourceState $) {
        this.connectionProperties = $.connectionProperties;
        this.connectionPropertiesMode = $.connectionPropertiesMode;
        this.createTime = $.createTime;
        this.createUser = $.createUser;
        this.dataSourceId = $.dataSourceId;
        this.dataSourceName = $.dataSourceName;
        this.description = $.description;
        this.modifyTime = $.modifyTime;
        this.modifyUser = $.modifyUser;
        this.projectId = $.projectId;
        this.qualifiedName = $.qualifiedName;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceState $;

        public Builder() {
            $ = new DataSourceState();
        }

        public Builder(DataSourceState defaults) {
            $ = new DataSourceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionProperties Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
         * 
         * @return builder
         * 
         */
        public Builder connectionProperties(@Nullable Output<String> connectionProperties) {
            $.connectionProperties = connectionProperties;
            return this;
        }

        /**
         * @param connectionProperties Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
         * 
         * @return builder
         * 
         */
        public Builder connectionProperties(String connectionProperties) {
            return connectionProperties(Output.of(connectionProperties));
        }

        /**
         * @param connectionPropertiesMode The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
         * 
         * @return builder
         * 
         */
        public Builder connectionPropertiesMode(@Nullable Output<String> connectionPropertiesMode) {
            $.connectionPropertiesMode = connectionPropertiesMode;
            return this;
        }

        /**
         * @param connectionPropertiesMode The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
         * 
         * @return builder
         * 
         */
        public Builder connectionPropertiesMode(String connectionPropertiesMode) {
            return connectionPropertiesMode(Output.of(connectionPropertiesMode));
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<Integer> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(Integer createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param createUser Creator of the data source
         * 
         * @return builder
         * 
         */
        public Builder createUser(@Nullable Output<String> createUser) {
            $.createUser = createUser;
            return this;
        }

        /**
         * @param createUser Creator of the data source
         * 
         * @return builder
         * 
         */
        public Builder createUser(String createUser) {
            return createUser(Output.of(createUser));
        }

        /**
         * @param dataSourceId The first ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(@Nullable Output<Integer> dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        /**
         * @param dataSourceId The first ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(Integer dataSourceId) {
            return dataSourceId(Output.of(dataSourceId));
        }

        /**
         * @param dataSourceName The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceName(@Nullable Output<String> dataSourceName) {
            $.dataSourceName = dataSourceName;
            return this;
        }

        /**
         * @param dataSourceName The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceName(String dataSourceName) {
            return dataSourceName(Output.of(dataSourceName));
        }

        /**
         * @param description Description of the data source
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the data source
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param modifyTime Modification time
         * 
         * @return builder
         * 
         */
        public Builder modifyTime(@Nullable Output<Integer> modifyTime) {
            $.modifyTime = modifyTime;
            return this;
        }

        /**
         * @param modifyTime Modification time
         * 
         * @return builder
         * 
         */
        public Builder modifyTime(Integer modifyTime) {
            return modifyTime(Output.of(modifyTime));
        }

        /**
         * @param modifyUser Modifier of the data source
         * 
         * @return builder
         * 
         */
        public Builder modifyUser(@Nullable Output<String> modifyUser) {
            $.modifyUser = modifyUser;
            return this;
        }

        /**
         * @param modifyUser Modifier of the data source
         * 
         * @return builder
         * 
         */
        public Builder modifyUser(String modifyUser) {
            return modifyUser(Output.of(modifyUser));
        }

        /**
         * @param projectId The ID of the project to which the data source belongs.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project to which the data source belongs.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param qualifiedName Business Unique Key of Data Source
         * 
         * @return builder
         * 
         */
        public Builder qualifiedName(@Nullable Output<String> qualifiedName) {
            $.qualifiedName = qualifiedName;
            return this;
        }

        /**
         * @param qualifiedName Business Unique Key of Data Source
         * 
         * @return builder
         * 
         */
        public Builder qualifiedName(String qualifiedName) {
            return qualifiedName(Output.of(qualifiedName));
        }

        /**
         * @param type The type of data source. For a list of data source types, see the values listed in the API documentation.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of data source. For a list of data source types, see the values listed in the API documentation.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DataSourceState build() {
            return $;
        }
    }

}
