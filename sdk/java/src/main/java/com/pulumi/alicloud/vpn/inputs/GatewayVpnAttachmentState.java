// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.inputs;

import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentBgpConfigArgs;
import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentHealthCheckConfigArgs;
import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIkeConfigArgs;
import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIpsecConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayVpnAttachmentState extends com.pulumi.resources.ResourceArgs {

    public static final GatewayVpnAttachmentState Empty = new GatewayVpnAttachmentState();

    /**
     * Bgp configuration information. See `bgp_config` below.
     * 
     */
    @Import(name="bgpConfig")
    private @Nullable Output<GatewayVpnAttachmentBgpConfigArgs> bgpConfig;

    /**
     * @return Bgp configuration information. See `bgp_config` below.
     * 
     */
    public Optional<Output<GatewayVpnAttachmentBgpConfigArgs>> bgpConfig() {
        return Optional.ofNullable(this.bgpConfig);
    }

    /**
     * The ID of the customer gateway. From version 1.196.0, `customer_gateway_id` can be modified.
     * 
     */
    @Import(name="customerGatewayId")
    private @Nullable Output<String> customerGatewayId;

    /**
     * @return The ID of the customer gateway. From version 1.196.0, `customer_gateway_id` can be modified.
     * 
     */
    public Optional<Output<String>> customerGatewayId() {
        return Optional.ofNullable(this.customerGatewayId);
    }

    /**
     * Indicates whether IPsec-VPN negotiations are initiated immediately. Valid values.
     * 
     */
    @Import(name="effectImmediately")
    private @Nullable Output<Boolean> effectImmediately;

    /**
     * @return Indicates whether IPsec-VPN negotiations are initiated immediately. Valid values.
     * 
     */
    public Optional<Output<Boolean>> effectImmediately() {
        return Optional.ofNullable(this.effectImmediately);
    }

    /**
     * Whether to enable the DPD (peer survival detection) function.
     * 
     */
    @Import(name="enableDpd")
    private @Nullable Output<Boolean> enableDpd;

    /**
     * @return Whether to enable the DPD (peer survival detection) function.
     * 
     */
    public Optional<Output<Boolean>> enableDpd() {
        return Optional.ofNullable(this.enableDpd);
    }

    /**
     * Allow NAT penetration.
     * 
     */
    @Import(name="enableNatTraversal")
    private @Nullable Output<Boolean> enableNatTraversal;

    /**
     * @return Allow NAT penetration.
     * 
     */
    public Optional<Output<Boolean>> enableNatTraversal() {
        return Optional.ofNullable(this.enableNatTraversal);
    }

    /**
     * Health check configuration information. See `health_check_config` below.
     * 
     */
    @Import(name="healthCheckConfig")
    private @Nullable Output<GatewayVpnAttachmentHealthCheckConfigArgs> healthCheckConfig;

    /**
     * @return Health check configuration information. See `health_check_config` below.
     * 
     */
    public Optional<Output<GatewayVpnAttachmentHealthCheckConfigArgs>> healthCheckConfig() {
        return Optional.ofNullable(this.healthCheckConfig);
    }

    /**
     * Configuration negotiated in the second stage. See `ike_config` below.
     * 
     */
    @Import(name="ikeConfig")
    private @Nullable Output<GatewayVpnAttachmentIkeConfigArgs> ikeConfig;

    /**
     * @return Configuration negotiated in the second stage. See `ike_config` below.
     * 
     */
    public Optional<Output<GatewayVpnAttachmentIkeConfigArgs>> ikeConfig() {
        return Optional.ofNullable(this.ikeConfig);
    }

    /**
     * The VPN gateway IP.
     * 
     */
    @Import(name="internetIp")
    private @Nullable Output<String> internetIp;

    /**
     * @return The VPN gateway IP.
     * 
     */
    public Optional<Output<String>> internetIp() {
        return Optional.ofNullable(this.internetIp);
    }

    /**
     * Configuration negotiated in the second stage. See `ipsec_config` below.
     * 
     */
    @Import(name="ipsecConfig")
    private @Nullable Output<GatewayVpnAttachmentIpsecConfigArgs> ipsecConfig;

    /**
     * @return Configuration negotiated in the second stage. See `ipsec_config` below.
     * 
     */
    public Optional<Output<GatewayVpnAttachmentIpsecConfigArgs>> ipsecConfig() {
        return Optional.ofNullable(this.ipsecConfig);
    }

    /**
     * The CIDR block of the virtual private cloud (VPC).
     * 
     */
    @Import(name="localSubnet")
    private @Nullable Output<String> localSubnet;

    /**
     * @return The CIDR block of the virtual private cloud (VPC).
     * 
     */
    public Optional<Output<String>> localSubnet() {
        return Optional.ofNullable(this.localSubnet);
    }

    /**
     * The network type of the IPsec connection. Valid values: `public`, `private`.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return The network type of the IPsec connection. Valid values: `public`, `private`.
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * The CIDR block of the on-premises data center.
     * 
     */
    @Import(name="remoteSubnet")
    private @Nullable Output<String> remoteSubnet;

    /**
     * @return The CIDR block of the on-premises data center.
     * 
     */
    public Optional<Output<String>> remoteSubnet() {
        return Optional.ofNullable(this.remoteSubnet);
    }

    /**
     * The status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The name of the vpn attachment.
     * 
     */
    @Import(name="vpnAttachmentName")
    private @Nullable Output<String> vpnAttachmentName;

    /**
     * @return The name of the vpn attachment.
     * 
     */
    public Optional<Output<String>> vpnAttachmentName() {
        return Optional.ofNullable(this.vpnAttachmentName);
    }

    private GatewayVpnAttachmentState() {}

    private GatewayVpnAttachmentState(GatewayVpnAttachmentState $) {
        this.bgpConfig = $.bgpConfig;
        this.customerGatewayId = $.customerGatewayId;
        this.effectImmediately = $.effectImmediately;
        this.enableDpd = $.enableDpd;
        this.enableNatTraversal = $.enableNatTraversal;
        this.healthCheckConfig = $.healthCheckConfig;
        this.ikeConfig = $.ikeConfig;
        this.internetIp = $.internetIp;
        this.ipsecConfig = $.ipsecConfig;
        this.localSubnet = $.localSubnet;
        this.networkType = $.networkType;
        this.remoteSubnet = $.remoteSubnet;
        this.status = $.status;
        this.vpnAttachmentName = $.vpnAttachmentName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayVpnAttachmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayVpnAttachmentState $;

        public Builder() {
            $ = new GatewayVpnAttachmentState();
        }

        public Builder(GatewayVpnAttachmentState defaults) {
            $ = new GatewayVpnAttachmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bgpConfig Bgp configuration information. See `bgp_config` below.
         * 
         * @return builder
         * 
         */
        public Builder bgpConfig(@Nullable Output<GatewayVpnAttachmentBgpConfigArgs> bgpConfig) {
            $.bgpConfig = bgpConfig;
            return this;
        }

        /**
         * @param bgpConfig Bgp configuration information. See `bgp_config` below.
         * 
         * @return builder
         * 
         */
        public Builder bgpConfig(GatewayVpnAttachmentBgpConfigArgs bgpConfig) {
            return bgpConfig(Output.of(bgpConfig));
        }

        /**
         * @param customerGatewayId The ID of the customer gateway. From version 1.196.0, `customer_gateway_id` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder customerGatewayId(@Nullable Output<String> customerGatewayId) {
            $.customerGatewayId = customerGatewayId;
            return this;
        }

        /**
         * @param customerGatewayId The ID of the customer gateway. From version 1.196.0, `customer_gateway_id` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder customerGatewayId(String customerGatewayId) {
            return customerGatewayId(Output.of(customerGatewayId));
        }

        /**
         * @param effectImmediately Indicates whether IPsec-VPN negotiations are initiated immediately. Valid values.
         * 
         * @return builder
         * 
         */
        public Builder effectImmediately(@Nullable Output<Boolean> effectImmediately) {
            $.effectImmediately = effectImmediately;
            return this;
        }

        /**
         * @param effectImmediately Indicates whether IPsec-VPN negotiations are initiated immediately. Valid values.
         * 
         * @return builder
         * 
         */
        public Builder effectImmediately(Boolean effectImmediately) {
            return effectImmediately(Output.of(effectImmediately));
        }

        /**
         * @param enableDpd Whether to enable the DPD (peer survival detection) function.
         * 
         * @return builder
         * 
         */
        public Builder enableDpd(@Nullable Output<Boolean> enableDpd) {
            $.enableDpd = enableDpd;
            return this;
        }

        /**
         * @param enableDpd Whether to enable the DPD (peer survival detection) function.
         * 
         * @return builder
         * 
         */
        public Builder enableDpd(Boolean enableDpd) {
            return enableDpd(Output.of(enableDpd));
        }

        /**
         * @param enableNatTraversal Allow NAT penetration.
         * 
         * @return builder
         * 
         */
        public Builder enableNatTraversal(@Nullable Output<Boolean> enableNatTraversal) {
            $.enableNatTraversal = enableNatTraversal;
            return this;
        }

        /**
         * @param enableNatTraversal Allow NAT penetration.
         * 
         * @return builder
         * 
         */
        public Builder enableNatTraversal(Boolean enableNatTraversal) {
            return enableNatTraversal(Output.of(enableNatTraversal));
        }

        /**
         * @param healthCheckConfig Health check configuration information. See `health_check_config` below.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConfig(@Nullable Output<GatewayVpnAttachmentHealthCheckConfigArgs> healthCheckConfig) {
            $.healthCheckConfig = healthCheckConfig;
            return this;
        }

        /**
         * @param healthCheckConfig Health check configuration information. See `health_check_config` below.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConfig(GatewayVpnAttachmentHealthCheckConfigArgs healthCheckConfig) {
            return healthCheckConfig(Output.of(healthCheckConfig));
        }

        /**
         * @param ikeConfig Configuration negotiated in the second stage. See `ike_config` below.
         * 
         * @return builder
         * 
         */
        public Builder ikeConfig(@Nullable Output<GatewayVpnAttachmentIkeConfigArgs> ikeConfig) {
            $.ikeConfig = ikeConfig;
            return this;
        }

        /**
         * @param ikeConfig Configuration negotiated in the second stage. See `ike_config` below.
         * 
         * @return builder
         * 
         */
        public Builder ikeConfig(GatewayVpnAttachmentIkeConfigArgs ikeConfig) {
            return ikeConfig(Output.of(ikeConfig));
        }

        /**
         * @param internetIp The VPN gateway IP.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(@Nullable Output<String> internetIp) {
            $.internetIp = internetIp;
            return this;
        }

        /**
         * @param internetIp The VPN gateway IP.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(String internetIp) {
            return internetIp(Output.of(internetIp));
        }

        /**
         * @param ipsecConfig Configuration negotiated in the second stage. See `ipsec_config` below.
         * 
         * @return builder
         * 
         */
        public Builder ipsecConfig(@Nullable Output<GatewayVpnAttachmentIpsecConfigArgs> ipsecConfig) {
            $.ipsecConfig = ipsecConfig;
            return this;
        }

        /**
         * @param ipsecConfig Configuration negotiated in the second stage. See `ipsec_config` below.
         * 
         * @return builder
         * 
         */
        public Builder ipsecConfig(GatewayVpnAttachmentIpsecConfigArgs ipsecConfig) {
            return ipsecConfig(Output.of(ipsecConfig));
        }

        /**
         * @param localSubnet The CIDR block of the virtual private cloud (VPC).
         * 
         * @return builder
         * 
         */
        public Builder localSubnet(@Nullable Output<String> localSubnet) {
            $.localSubnet = localSubnet;
            return this;
        }

        /**
         * @param localSubnet The CIDR block of the virtual private cloud (VPC).
         * 
         * @return builder
         * 
         */
        public Builder localSubnet(String localSubnet) {
            return localSubnet(Output.of(localSubnet));
        }

        /**
         * @param networkType The network type of the IPsec connection. Valid values: `public`, `private`.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The network type of the IPsec connection. Valid values: `public`, `private`.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param remoteSubnet The CIDR block of the on-premises data center.
         * 
         * @return builder
         * 
         */
        public Builder remoteSubnet(@Nullable Output<String> remoteSubnet) {
            $.remoteSubnet = remoteSubnet;
            return this;
        }

        /**
         * @param remoteSubnet The CIDR block of the on-premises data center.
         * 
         * @return builder
         * 
         */
        public Builder remoteSubnet(String remoteSubnet) {
            return remoteSubnet(Output.of(remoteSubnet));
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param vpnAttachmentName The name of the vpn attachment.
         * 
         * @return builder
         * 
         */
        public Builder vpnAttachmentName(@Nullable Output<String> vpnAttachmentName) {
            $.vpnAttachmentName = vpnAttachmentName;
            return this;
        }

        /**
         * @param vpnAttachmentName The name of the vpn attachment.
         * 
         * @return builder
         * 
         */
        public Builder vpnAttachmentName(String vpnAttachmentName) {
            return vpnAttachmentName(Output.of(vpnAttachmentName));
        }

        public GatewayVpnAttachmentState build() {
            return $;
        }
    }

}
