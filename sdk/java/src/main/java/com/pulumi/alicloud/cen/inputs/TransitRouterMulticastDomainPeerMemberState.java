// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransitRouterMulticastDomainPeerMemberState extends com.pulumi.resources.ResourceArgs {

    public static final TransitRouterMulticastDomainPeerMemberState Empty = new TransitRouterMulticastDomainPeerMemberState();

    /**
     * Specifies whether only to precheck the request.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Specifies whether only to precheck the request.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The IP address of the multicast group to which the multicast member belongs. Value range: **224.0.0.1** to **239.255.255.254**.If the multicast group you specified does not exist in the current multicast domain, the system will automatically create a new multicast group for you in the current multicast domain.
     * 
     */
    @Import(name="groupIpAddress")
    private @Nullable Output<String> groupIpAddress;

    /**
     * @return The IP address of the multicast group to which the multicast member belongs. Value range: **224.0.0.1** to **239.255.255.254**.If the multicast group you specified does not exist in the current multicast domain, the system will automatically create a new multicast group for you in the current multicast domain.
     * 
     */
    public Optional<Output<String>> groupIpAddress() {
        return Optional.ofNullable(this.groupIpAddress);
    }

    /**
     * The IDs of the inter-region multicast domains.
     * 
     */
    @Import(name="peerTransitRouterMulticastDomainId")
    private @Nullable Output<String> peerTransitRouterMulticastDomainId;

    /**
     * @return The IDs of the inter-region multicast domains.
     * 
     */
    public Optional<Output<String>> peerTransitRouterMulticastDomainId() {
        return Optional.ofNullable(this.peerTransitRouterMulticastDomainId);
    }

    /**
     * The status of the multicast resource. Valid values:
     * - Registering: being created
     * - Registered: available
     * - Deregistering: being deleted
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the multicast resource. Valid values:
     * - Registering: being created
     * - Registered: available
     * - Deregistering: being deleted
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID of the multicast domain to which the multicast member belongs.
     * 
     */
    @Import(name="transitRouterMulticastDomainId")
    private @Nullable Output<String> transitRouterMulticastDomainId;

    /**
     * @return The ID of the multicast domain to which the multicast member belongs.
     * 
     */
    public Optional<Output<String>> transitRouterMulticastDomainId() {
        return Optional.ofNullable(this.transitRouterMulticastDomainId);
    }

    private TransitRouterMulticastDomainPeerMemberState() {}

    private TransitRouterMulticastDomainPeerMemberState(TransitRouterMulticastDomainPeerMemberState $) {
        this.dryRun = $.dryRun;
        this.groupIpAddress = $.groupIpAddress;
        this.peerTransitRouterMulticastDomainId = $.peerTransitRouterMulticastDomainId;
        this.status = $.status;
        this.transitRouterMulticastDomainId = $.transitRouterMulticastDomainId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransitRouterMulticastDomainPeerMemberState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransitRouterMulticastDomainPeerMemberState $;

        public Builder() {
            $ = new TransitRouterMulticastDomainPeerMemberState();
        }

        public Builder(TransitRouterMulticastDomainPeerMemberState defaults) {
            $ = new TransitRouterMulticastDomainPeerMemberState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dryRun Specifies whether only to precheck the request.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Specifies whether only to precheck the request.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param groupIpAddress The IP address of the multicast group to which the multicast member belongs. Value range: **224.0.0.1** to **239.255.255.254**.If the multicast group you specified does not exist in the current multicast domain, the system will automatically create a new multicast group for you in the current multicast domain.
         * 
         * @return builder
         * 
         */
        public Builder groupIpAddress(@Nullable Output<String> groupIpAddress) {
            $.groupIpAddress = groupIpAddress;
            return this;
        }

        /**
         * @param groupIpAddress The IP address of the multicast group to which the multicast member belongs. Value range: **224.0.0.1** to **239.255.255.254**.If the multicast group you specified does not exist in the current multicast domain, the system will automatically create a new multicast group for you in the current multicast domain.
         * 
         * @return builder
         * 
         */
        public Builder groupIpAddress(String groupIpAddress) {
            return groupIpAddress(Output.of(groupIpAddress));
        }

        /**
         * @param peerTransitRouterMulticastDomainId The IDs of the inter-region multicast domains.
         * 
         * @return builder
         * 
         */
        public Builder peerTransitRouterMulticastDomainId(@Nullable Output<String> peerTransitRouterMulticastDomainId) {
            $.peerTransitRouterMulticastDomainId = peerTransitRouterMulticastDomainId;
            return this;
        }

        /**
         * @param peerTransitRouterMulticastDomainId The IDs of the inter-region multicast domains.
         * 
         * @return builder
         * 
         */
        public Builder peerTransitRouterMulticastDomainId(String peerTransitRouterMulticastDomainId) {
            return peerTransitRouterMulticastDomainId(Output.of(peerTransitRouterMulticastDomainId));
        }

        /**
         * @param status The status of the multicast resource. Valid values:
         * - Registering: being created
         * - Registered: available
         * - Deregistering: being deleted
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the multicast resource. Valid values:
         * - Registering: being created
         * - Registered: available
         * - Deregistering: being deleted
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param transitRouterMulticastDomainId The ID of the multicast domain to which the multicast member belongs.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterMulticastDomainId(@Nullable Output<String> transitRouterMulticastDomainId) {
            $.transitRouterMulticastDomainId = transitRouterMulticastDomainId;
            return this;
        }

        /**
         * @param transitRouterMulticastDomainId The ID of the multicast domain to which the multicast member belongs.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterMulticastDomainId(String transitRouterMulticastDomainId) {
            return transitRouterMulticastDomainId(Output.of(transitRouterMulticastDomainId));
        }

        public TransitRouterMulticastDomainPeerMemberState build() {
            return $;
        }
    }

}
