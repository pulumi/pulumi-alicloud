// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.resourcemanager;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.resourcemanager.AutoGroupingRuleArgs;
import com.pulumi.alicloud.resourcemanager.inputs.AutoGroupingRuleState;
import com.pulumi.alicloud.resourcemanager.outputs.AutoGroupingRuleRuleContent;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Resource Manager Auto Grouping Rule resource.
 * 
 * Auto grouping rules of resource group.
 * 
 * For information about Resource Manager Auto Grouping Rule and how to use it, see [What is Auto Grouping Rule](https://www.alibabacloud.com/help/en/resource-management/resource-group/developer-reference/api-resourcemanager-2020-03-31-createautogroupingrule-rg).
 * 
 * &gt; **NOTE:** Available since v1.246.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.resourcemanager.AutoGroupingRule;
 * import com.pulumi.alicloud.resourcemanager.AutoGroupingRuleArgs;
 * import com.pulumi.alicloud.resourcemanager.inputs.AutoGroupingRuleRuleContentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("terraform-example");
 *         var default_ = new AutoGroupingRule("default", AutoGroupingRuleArgs.builder()
 *             .ruleContents(AutoGroupingRuleRuleContentArgs.builder()
 *                 .targetResourceGroupCondition("""
 *     {
 *         "children": [
 *       {
 *         "desired": "rg-aek*****sbvy",
 *         "featurePath": "$.resourceGroupId",
 *         "featureSource": "RESOURCE",
 *         "operator": "StringEquals"
 *       }
 *         ],
 *         "operator": "and"
 *     }
 *                 """)
 *                 .autoGroupingScopeCondition("""
 *     {
 *         "children": [
 *       {
 *         "desired": "name_a",
 *         "featurePath": "$.resourceName",
 *         "featureSource": "RESOURCE",
 *         "operator": "StringEqualsAny"
 *       }
 *         ],
 *         "operator": "and"
 *     }
 *                 """)
 *                 .build())
 *             .ruleDesc(name)
 *             .ruleType("custom_condition")
 *             .regionIdsScope("cn-hangzhou,cn-shanghai")
 *             .resourceIdsScope("imock-xxxxxx")
 *             .resourceGroupIdsScope("rg-aek22*****3sbvz")
 *             .resourceTypesScope("ecs.instance,vpc.vpc")
 *             .ruleName(name)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Resource Manager Auto Grouping Rule can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:resourcemanager/autoGroupingRule:AutoGroupingRule example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:resourcemanager/autoGroupingRule:AutoGroupingRule")
public class AutoGroupingRule extends com.pulumi.resources.CustomResource {
    /**
     * The IDs of regions to be excluded. Separate multiple IDs with commas (,).
     * 
     */
    @Export(name="excludeRegionIdsScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> excludeRegionIdsScope;

    /**
     * @return The IDs of regions to be excluded. Separate multiple IDs with commas (,).
     * 
     */
    public Output<Optional<String>> excludeRegionIdsScope() {
        return Codegen.optional(this.excludeRegionIdsScope);
    }
    /**
     * The IDs of resource groups to be excluded. Separate multiple IDs with commas (,).
     * 
     */
    @Export(name="excludeResourceGroupIdsScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> excludeResourceGroupIdsScope;

    /**
     * @return The IDs of resource groups to be excluded. Separate multiple IDs with commas (,).
     * 
     */
    public Output<Optional<String>> excludeResourceGroupIdsScope() {
        return Codegen.optional(this.excludeResourceGroupIdsScope);
    }
    /**
     * The IDs of resources to be excluded. Separate multiple IDs with commas (,).
     * 
     */
    @Export(name="excludeResourceIdsScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> excludeResourceIdsScope;

    /**
     * @return The IDs of resources to be excluded. Separate multiple IDs with commas (,).
     * 
     */
    public Output<Optional<String>> excludeResourceIdsScope() {
        return Codegen.optional(this.excludeResourceIdsScope);
    }
    /**
     * The resource types to be excluded. Separate multiple resource types with commas (,).
     * 
     */
    @Export(name="excludeResourceTypesScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> excludeResourceTypesScope;

    /**
     * @return The resource types to be excluded. Separate multiple resource types with commas (,).
     * 
     */
    public Output<Optional<String>> excludeResourceTypesScope() {
        return Codegen.optional(this.excludeResourceTypesScope);
    }
    /**
     * The IDs of regions. Separate multiple IDs with commas (,).
     * 
     */
    @Export(name="regionIdsScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> regionIdsScope;

    /**
     * @return The IDs of regions. Separate multiple IDs with commas (,).
     * 
     */
    public Output<Optional<String>> regionIdsScope() {
        return Codegen.optional(this.regionIdsScope);
    }
    /**
     * The IDs of resource groups. Separate multiple IDs with commas (,).
     * 
     */
    @Export(name="resourceGroupIdsScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> resourceGroupIdsScope;

    /**
     * @return The IDs of resource groups. Separate multiple IDs with commas (,).
     * 
     */
    public Output<Optional<String>> resourceGroupIdsScope() {
        return Codegen.optional(this.resourceGroupIdsScope);
    }
    /**
     * The IDs of resources. Separate multiple IDs with commas (,).
     * 
     */
    @Export(name="resourceIdsScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> resourceIdsScope;

    /**
     * @return The IDs of resources. Separate multiple IDs with commas (,).
     * 
     */
    public Output<Optional<String>> resourceIdsScope() {
        return Codegen.optional(this.resourceIdsScope);
    }
    /**
     * The resource types. Separate multiple resource types with commas (,).
     * 
     */
    @Export(name="resourceTypesScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> resourceTypesScope;

    /**
     * @return The resource types. Separate multiple resource types with commas (,).
     * 
     */
    public Output<Optional<String>> resourceTypesScope() {
        return Codegen.optional(this.resourceTypesScope);
    }
    /**
     * The content records of the rule. See `rule_contents` below.
     * 
     */
    @Export(name="ruleContents", refs={List.class,AutoGroupingRuleRuleContent.class}, tree="[0,1]")
    private Output<List<AutoGroupingRuleRuleContent>> ruleContents;

    /**
     * @return The content records of the rule. See `rule_contents` below.
     * 
     */
    public Output<List<AutoGroupingRuleRuleContent>> ruleContents() {
        return this.ruleContents;
    }
    /**
     * The description of the rule.
     * 
     */
    @Export(name="ruleDesc", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ruleDesc;

    /**
     * @return The description of the rule.
     * 
     */
    public Output<Optional<String>> ruleDesc() {
        return Codegen.optional(this.ruleDesc);
    }
    /**
     * The name of the rule.
     * 
     */
    @Export(name="ruleName", refs={String.class}, tree="[0]")
    private Output<String> ruleName;

    /**
     * @return The name of the rule.
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }
    /**
     * The type of the rule. Valid values:
     * 
     */
    @Export(name="ruleType", refs={String.class}, tree="[0]")
    private Output<String> ruleType;

    /**
     * @return The type of the rule. Valid values:
     * 
     */
    public Output<String> ruleType() {
        return this.ruleType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AutoGroupingRule(java.lang.String name) {
        this(name, AutoGroupingRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AutoGroupingRule(java.lang.String name, AutoGroupingRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AutoGroupingRule(java.lang.String name, AutoGroupingRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:resourcemanager/autoGroupingRule:AutoGroupingRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AutoGroupingRule(java.lang.String name, Output<java.lang.String> id, @Nullable AutoGroupingRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:resourcemanager/autoGroupingRule:AutoGroupingRule", name, state, makeResourceOptions(options, id), false);
    }

    private static AutoGroupingRuleArgs makeArgs(AutoGroupingRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AutoGroupingRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AutoGroupingRule get(java.lang.String name, Output<java.lang.String> id, @Nullable AutoGroupingRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AutoGroupingRule(name, id, state, options);
    }
}
