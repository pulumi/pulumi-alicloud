// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CacheRuleState extends com.pulumi.resources.ResourceArgs {

    public static final CacheRuleState Empty = new CacheRuleState();

    /**
     * Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
     * 
     */
    @Import(name="additionalCacheablePorts")
    private @Nullable Output<String> additionalCacheablePorts;

    /**
     * @return Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
     * 
     */
    public Optional<Output<String>> additionalCacheablePorts() {
        return Optional.ofNullable(this.additionalCacheablePorts);
    }

    /**
     * Browser cache mode. value:
     * 
     */
    @Import(name="browserCacheMode")
    private @Nullable Output<String> browserCacheMode;

    /**
     * @return Browser cache mode. value:
     * 
     */
    public Optional<Output<String>> browserCacheMode() {
        return Optional.ofNullable(this.browserCacheMode);
    }

    /**
     * The browser cache expiration time, in seconds.
     * 
     */
    @Import(name="browserCacheTtl")
    private @Nullable Output<String> browserCacheTtl;

    /**
     * @return The browser cache expiration time, in seconds.
     * 
     */
    public Optional<Output<String>> browserCacheTtl() {
        return Optional.ofNullable(this.browserCacheTtl);
    }

    /**
     * Set the cache bypass mode. value:
     * 
     */
    @Import(name="bypassCache")
    private @Nullable Output<String> bypassCache;

    /**
     * @return Set the cache bypass mode. value:
     * 
     */
    public Optional<Output<String>> bypassCache() {
        return Optional.ofNullable(this.bypassCache);
    }

    /**
     * Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
     * 
     */
    @Import(name="cacheDeceptionArmor")
    private @Nullable Output<String> cacheDeceptionArmor;

    /**
     * @return Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
     * 
     */
    public Optional<Output<String>> cacheDeceptionArmor() {
        return Optional.ofNullable(this.cacheDeceptionArmor);
    }

    /**
     * Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
     * 
     */
    @Import(name="cacheReserveEligibility")
    private @Nullable Output<String> cacheReserveEligibility;

    /**
     * @return Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
     * 
     */
    public Optional<Output<String>> cacheReserveEligibility() {
        return Optional.ofNullable(this.cacheReserveEligibility);
    }

    /**
     * The configured ConfigId. You can call the ListCacheRules operation to obtain the ConfigId.
     * 
     */
    @Import(name="cacheRuleId")
    private @Nullable Output<Integer> cacheRuleId;

    /**
     * @return The configured ConfigId. You can call the ListCacheRules operation to obtain the ConfigId.
     * 
     */
    public Optional<Output<Integer>> cacheRuleId() {
        return Optional.ofNullable(this.cacheRuleId);
    }

    /**
     * When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
     * 
     */
    @Import(name="checkPresenceCookie")
    private @Nullable Output<String> checkPresenceCookie;

    /**
     * @return When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
     * 
     */
    public Optional<Output<String>> checkPresenceCookie() {
        return Optional.ofNullable(this.checkPresenceCookie);
    }

    /**
     * When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
     * 
     */
    @Import(name="checkPresenceHeader")
    private @Nullable Output<String> checkPresenceHeader;

    /**
     * @return When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
     * 
     */
    public Optional<Output<String>> checkPresenceHeader() {
        return Optional.ofNullable(this.checkPresenceHeader);
    }

    /**
     * Node cache mode. value:
     * 
     */
    @Import(name="edgeCacheMode")
    private @Nullable Output<String> edgeCacheMode;

    /**
     * @return Node cache mode. value:
     * 
     */
    public Optional<Output<String>> edgeCacheMode() {
        return Optional.ofNullable(this.edgeCacheMode);
    }

    /**
     * The node cache expiration time, in seconds.
     * 
     */
    @Import(name="edgeCacheTtl")
    private @Nullable Output<String> edgeCacheTtl;

    /**
     * @return The node cache expiration time, in seconds.
     * 
     */
    public Optional<Output<String>> edgeCacheTtl() {
        return Optional.ofNullable(this.edgeCacheTtl);
    }

    /**
     * Status code cache expiration time, in seconds.
     * 
     */
    @Import(name="edgeStatusCodeCacheTtl")
    private @Nullable Output<String> edgeStatusCodeCacheTtl;

    /**
     * @return Status code cache expiration time, in seconds.
     * 
     */
    public Optional<Output<String>> edgeStatusCodeCacheTtl() {
        return Optional.ofNullable(this.edgeStatusCodeCacheTtl);
    }

    /**
     * When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
     * 
     */
    @Import(name="includeCookie")
    private @Nullable Output<String> includeCookie;

    /**
     * @return When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
     * 
     */
    public Optional<Output<String>> includeCookie() {
        return Optional.ofNullable(this.includeCookie);
    }

    /**
     * When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
     * 
     */
    @Import(name="includeHeader")
    private @Nullable Output<String> includeHeader;

    /**
     * @return When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
     * 
     */
    public Optional<Output<String>> includeHeader() {
        return Optional.ofNullable(this.includeHeader);
    }

    /**
     * The query string to be retained or deleted. You can enter multiple values separated by spaces.
     * 
     */
    @Import(name="queryString")
    private @Nullable Output<String> queryString;

    /**
     * @return The query string to be retained or deleted. You can enter multiple values separated by spaces.
     * 
     */
    public Optional<Output<String>> queryString() {
        return Optional.ofNullable(this.queryString);
    }

    /**
     * The processing mode for the query string when the cache key is generated. value:
     * 
     */
    @Import(name="queryStringMode")
    private @Nullable Output<String> queryStringMode;

    /**
     * @return The processing mode for the query string when the cache key is generated. value:
     * 
     */
    public Optional<Output<String>> queryStringMode() {
        return Optional.ofNullable(this.queryStringMode);
    }

    /**
     * The rule content.
     * 
     */
    @Import(name="rule")
    private @Nullable Output<String> rule;

    /**
     * @return The rule content.
     * 
     */
    public Optional<Output<String>> rule() {
        return Optional.ofNullable(this.rule);
    }

    /**
     * Rule switch. value:
     * 
     */
    @Import(name="ruleEnable")
    private @Nullable Output<String> ruleEnable;

    /**
     * @return Rule switch. value:
     * 
     */
    public Optional<Output<String>> ruleEnable() {
        return Optional.ofNullable(this.ruleEnable);
    }

    /**
     * Rule name, you can find out the rule whose rule name is the passed field.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return Rule name, you can find out the rule whose rule name is the passed field.
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
     * 
     */
    @Import(name="serveStale")
    private @Nullable Output<String> serveStale;

    /**
     * @return Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
     * 
     */
    public Optional<Output<String>> serveStale() {
        return Optional.ofNullable(this.serveStale);
    }

    /**
     * The site ID, which can be obtained by calling the ListSites API.
     * 
     */
    @Import(name="siteId")
    private @Nullable Output<Integer> siteId;

    /**
     * @return The site ID, which can be obtained by calling the ListSites API.
     * 
     */
    public Optional<Output<Integer>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    /**
     * Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
     * 
     */
    @Import(name="siteVersion")
    private @Nullable Output<Integer> siteVersion;

    /**
     * @return Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
     * 
     */
    public Optional<Output<Integer>> siteVersion() {
        return Optional.ofNullable(this.siteVersion);
    }

    /**
     * Query string sorting, which is disabled by default. value:
     * 
     */
    @Import(name="sortQueryStringForCache")
    private @Nullable Output<String> sortQueryStringForCache;

    /**
     * @return Query string sorting, which is disabled by default. value:
     * 
     */
    public Optional<Output<String>> sortQueryStringForCache() {
        return Optional.ofNullable(this.sortQueryStringForCache);
    }

    /**
     * When generating the cache key, add the client device type. value:
     * 
     */
    @Import(name="userDeviceType")
    private @Nullable Output<String> userDeviceType;

    /**
     * @return When generating the cache key, add the client device type. value:
     * 
     */
    public Optional<Output<String>> userDeviceType() {
        return Optional.ofNullable(this.userDeviceType);
    }

    /**
     * When generating the cache key, add the client geographic location. value:
     * 
     */
    @Import(name="userGeo")
    private @Nullable Output<String> userGeo;

    /**
     * @return When generating the cache key, add the client geographic location. value:
     * 
     */
    public Optional<Output<String>> userGeo() {
        return Optional.ofNullable(this.userGeo);
    }

    /**
     * When generating the cache key, add the client language type. value:
     * 
     */
    @Import(name="userLanguage")
    private @Nullable Output<String> userLanguage;

    /**
     * @return When generating the cache key, add the client language type. value:
     * 
     */
    public Optional<Output<String>> userLanguage() {
        return Optional.ofNullable(this.userLanguage);
    }

    private CacheRuleState() {}

    private CacheRuleState(CacheRuleState $) {
        this.additionalCacheablePorts = $.additionalCacheablePorts;
        this.browserCacheMode = $.browserCacheMode;
        this.browserCacheTtl = $.browserCacheTtl;
        this.bypassCache = $.bypassCache;
        this.cacheDeceptionArmor = $.cacheDeceptionArmor;
        this.cacheReserveEligibility = $.cacheReserveEligibility;
        this.cacheRuleId = $.cacheRuleId;
        this.checkPresenceCookie = $.checkPresenceCookie;
        this.checkPresenceHeader = $.checkPresenceHeader;
        this.edgeCacheMode = $.edgeCacheMode;
        this.edgeCacheTtl = $.edgeCacheTtl;
        this.edgeStatusCodeCacheTtl = $.edgeStatusCodeCacheTtl;
        this.includeCookie = $.includeCookie;
        this.includeHeader = $.includeHeader;
        this.queryString = $.queryString;
        this.queryStringMode = $.queryStringMode;
        this.rule = $.rule;
        this.ruleEnable = $.ruleEnable;
        this.ruleName = $.ruleName;
        this.serveStale = $.serveStale;
        this.siteId = $.siteId;
        this.siteVersion = $.siteVersion;
        this.sortQueryStringForCache = $.sortQueryStringForCache;
        this.userDeviceType = $.userDeviceType;
        this.userGeo = $.userGeo;
        this.userLanguage = $.userLanguage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheRuleState $;

        public Builder() {
            $ = new CacheRuleState();
        }

        public Builder(CacheRuleState defaults) {
            $ = new CacheRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalCacheablePorts Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
         * 
         * @return builder
         * 
         */
        public Builder additionalCacheablePorts(@Nullable Output<String> additionalCacheablePorts) {
            $.additionalCacheablePorts = additionalCacheablePorts;
            return this;
        }

        /**
         * @param additionalCacheablePorts Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
         * 
         * @return builder
         * 
         */
        public Builder additionalCacheablePorts(String additionalCacheablePorts) {
            return additionalCacheablePorts(Output.of(additionalCacheablePorts));
        }

        /**
         * @param browserCacheMode Browser cache mode. value:
         * 
         * @return builder
         * 
         */
        public Builder browserCacheMode(@Nullable Output<String> browserCacheMode) {
            $.browserCacheMode = browserCacheMode;
            return this;
        }

        /**
         * @param browserCacheMode Browser cache mode. value:
         * 
         * @return builder
         * 
         */
        public Builder browserCacheMode(String browserCacheMode) {
            return browserCacheMode(Output.of(browserCacheMode));
        }

        /**
         * @param browserCacheTtl The browser cache expiration time, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder browserCacheTtl(@Nullable Output<String> browserCacheTtl) {
            $.browserCacheTtl = browserCacheTtl;
            return this;
        }

        /**
         * @param browserCacheTtl The browser cache expiration time, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder browserCacheTtl(String browserCacheTtl) {
            return browserCacheTtl(Output.of(browserCacheTtl));
        }

        /**
         * @param bypassCache Set the cache bypass mode. value:
         * 
         * @return builder
         * 
         */
        public Builder bypassCache(@Nullable Output<String> bypassCache) {
            $.bypassCache = bypassCache;
            return this;
        }

        /**
         * @param bypassCache Set the cache bypass mode. value:
         * 
         * @return builder
         * 
         */
        public Builder bypassCache(String bypassCache) {
            return bypassCache(Output.of(bypassCache));
        }

        /**
         * @param cacheDeceptionArmor Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
         * 
         * @return builder
         * 
         */
        public Builder cacheDeceptionArmor(@Nullable Output<String> cacheDeceptionArmor) {
            $.cacheDeceptionArmor = cacheDeceptionArmor;
            return this;
        }

        /**
         * @param cacheDeceptionArmor Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
         * 
         * @return builder
         * 
         */
        public Builder cacheDeceptionArmor(String cacheDeceptionArmor) {
            return cacheDeceptionArmor(Output.of(cacheDeceptionArmor));
        }

        /**
         * @param cacheReserveEligibility Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
         * 
         * @return builder
         * 
         */
        public Builder cacheReserveEligibility(@Nullable Output<String> cacheReserveEligibility) {
            $.cacheReserveEligibility = cacheReserveEligibility;
            return this;
        }

        /**
         * @param cacheReserveEligibility Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
         * 
         * @return builder
         * 
         */
        public Builder cacheReserveEligibility(String cacheReserveEligibility) {
            return cacheReserveEligibility(Output.of(cacheReserveEligibility));
        }

        /**
         * @param cacheRuleId The configured ConfigId. You can call the ListCacheRules operation to obtain the ConfigId.
         * 
         * @return builder
         * 
         */
        public Builder cacheRuleId(@Nullable Output<Integer> cacheRuleId) {
            $.cacheRuleId = cacheRuleId;
            return this;
        }

        /**
         * @param cacheRuleId The configured ConfigId. You can call the ListCacheRules operation to obtain the ConfigId.
         * 
         * @return builder
         * 
         */
        public Builder cacheRuleId(Integer cacheRuleId) {
            return cacheRuleId(Output.of(cacheRuleId));
        }

        /**
         * @param checkPresenceCookie When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
         * 
         * @return builder
         * 
         */
        public Builder checkPresenceCookie(@Nullable Output<String> checkPresenceCookie) {
            $.checkPresenceCookie = checkPresenceCookie;
            return this;
        }

        /**
         * @param checkPresenceCookie When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
         * 
         * @return builder
         * 
         */
        public Builder checkPresenceCookie(String checkPresenceCookie) {
            return checkPresenceCookie(Output.of(checkPresenceCookie));
        }

        /**
         * @param checkPresenceHeader When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
         * 
         * @return builder
         * 
         */
        public Builder checkPresenceHeader(@Nullable Output<String> checkPresenceHeader) {
            $.checkPresenceHeader = checkPresenceHeader;
            return this;
        }

        /**
         * @param checkPresenceHeader When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
         * 
         * @return builder
         * 
         */
        public Builder checkPresenceHeader(String checkPresenceHeader) {
            return checkPresenceHeader(Output.of(checkPresenceHeader));
        }

        /**
         * @param edgeCacheMode Node cache mode. value:
         * 
         * @return builder
         * 
         */
        public Builder edgeCacheMode(@Nullable Output<String> edgeCacheMode) {
            $.edgeCacheMode = edgeCacheMode;
            return this;
        }

        /**
         * @param edgeCacheMode Node cache mode. value:
         * 
         * @return builder
         * 
         */
        public Builder edgeCacheMode(String edgeCacheMode) {
            return edgeCacheMode(Output.of(edgeCacheMode));
        }

        /**
         * @param edgeCacheTtl The node cache expiration time, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder edgeCacheTtl(@Nullable Output<String> edgeCacheTtl) {
            $.edgeCacheTtl = edgeCacheTtl;
            return this;
        }

        /**
         * @param edgeCacheTtl The node cache expiration time, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder edgeCacheTtl(String edgeCacheTtl) {
            return edgeCacheTtl(Output.of(edgeCacheTtl));
        }

        /**
         * @param edgeStatusCodeCacheTtl Status code cache expiration time, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder edgeStatusCodeCacheTtl(@Nullable Output<String> edgeStatusCodeCacheTtl) {
            $.edgeStatusCodeCacheTtl = edgeStatusCodeCacheTtl;
            return this;
        }

        /**
         * @param edgeStatusCodeCacheTtl Status code cache expiration time, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder edgeStatusCodeCacheTtl(String edgeStatusCodeCacheTtl) {
            return edgeStatusCodeCacheTtl(Output.of(edgeStatusCodeCacheTtl));
        }

        /**
         * @param includeCookie When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
         * 
         * @return builder
         * 
         */
        public Builder includeCookie(@Nullable Output<String> includeCookie) {
            $.includeCookie = includeCookie;
            return this;
        }

        /**
         * @param includeCookie When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
         * 
         * @return builder
         * 
         */
        public Builder includeCookie(String includeCookie) {
            return includeCookie(Output.of(includeCookie));
        }

        /**
         * @param includeHeader When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
         * 
         * @return builder
         * 
         */
        public Builder includeHeader(@Nullable Output<String> includeHeader) {
            $.includeHeader = includeHeader;
            return this;
        }

        /**
         * @param includeHeader When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
         * 
         * @return builder
         * 
         */
        public Builder includeHeader(String includeHeader) {
            return includeHeader(Output.of(includeHeader));
        }

        /**
         * @param queryString The query string to be retained or deleted. You can enter multiple values separated by spaces.
         * 
         * @return builder
         * 
         */
        public Builder queryString(@Nullable Output<String> queryString) {
            $.queryString = queryString;
            return this;
        }

        /**
         * @param queryString The query string to be retained or deleted. You can enter multiple values separated by spaces.
         * 
         * @return builder
         * 
         */
        public Builder queryString(String queryString) {
            return queryString(Output.of(queryString));
        }

        /**
         * @param queryStringMode The processing mode for the query string when the cache key is generated. value:
         * 
         * @return builder
         * 
         */
        public Builder queryStringMode(@Nullable Output<String> queryStringMode) {
            $.queryStringMode = queryStringMode;
            return this;
        }

        /**
         * @param queryStringMode The processing mode for the query string when the cache key is generated. value:
         * 
         * @return builder
         * 
         */
        public Builder queryStringMode(String queryStringMode) {
            return queryStringMode(Output.of(queryStringMode));
        }

        /**
         * @param rule The rule content.
         * 
         * @return builder
         * 
         */
        public Builder rule(@Nullable Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule The rule content.
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param ruleEnable Rule switch. value:
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(@Nullable Output<String> ruleEnable) {
            $.ruleEnable = ruleEnable;
            return this;
        }

        /**
         * @param ruleEnable Rule switch. value:
         * 
         * @return builder
         * 
         */
        public Builder ruleEnable(String ruleEnable) {
            return ruleEnable(Output.of(ruleEnable));
        }

        /**
         * @param ruleName Rule name, you can find out the rule whose rule name is the passed field.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name, you can find out the rule whose rule name is the passed field.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param serveStale Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
         * 
         * @return builder
         * 
         */
        public Builder serveStale(@Nullable Output<String> serveStale) {
            $.serveStale = serveStale;
            return this;
        }

        /**
         * @param serveStale Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
         * 
         * @return builder
         * 
         */
        public Builder serveStale(String serveStale) {
            return serveStale(Output.of(serveStale));
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the ListSites API.
         * 
         * @return builder
         * 
         */
        public Builder siteId(@Nullable Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the ListSites API.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param siteVersion Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(@Nullable Output<Integer> siteVersion) {
            $.siteVersion = siteVersion;
            return this;
        }

        /**
         * @param siteVersion Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
         * 
         * @return builder
         * 
         */
        public Builder siteVersion(Integer siteVersion) {
            return siteVersion(Output.of(siteVersion));
        }

        /**
         * @param sortQueryStringForCache Query string sorting, which is disabled by default. value:
         * 
         * @return builder
         * 
         */
        public Builder sortQueryStringForCache(@Nullable Output<String> sortQueryStringForCache) {
            $.sortQueryStringForCache = sortQueryStringForCache;
            return this;
        }

        /**
         * @param sortQueryStringForCache Query string sorting, which is disabled by default. value:
         * 
         * @return builder
         * 
         */
        public Builder sortQueryStringForCache(String sortQueryStringForCache) {
            return sortQueryStringForCache(Output.of(sortQueryStringForCache));
        }

        /**
         * @param userDeviceType When generating the cache key, add the client device type. value:
         * 
         * @return builder
         * 
         */
        public Builder userDeviceType(@Nullable Output<String> userDeviceType) {
            $.userDeviceType = userDeviceType;
            return this;
        }

        /**
         * @param userDeviceType When generating the cache key, add the client device type. value:
         * 
         * @return builder
         * 
         */
        public Builder userDeviceType(String userDeviceType) {
            return userDeviceType(Output.of(userDeviceType));
        }

        /**
         * @param userGeo When generating the cache key, add the client geographic location. value:
         * 
         * @return builder
         * 
         */
        public Builder userGeo(@Nullable Output<String> userGeo) {
            $.userGeo = userGeo;
            return this;
        }

        /**
         * @param userGeo When generating the cache key, add the client geographic location. value:
         * 
         * @return builder
         * 
         */
        public Builder userGeo(String userGeo) {
            return userGeo(Output.of(userGeo));
        }

        /**
         * @param userLanguage When generating the cache key, add the client language type. value:
         * 
         * @return builder
         * 
         */
        public Builder userLanguage(@Nullable Output<String> userLanguage) {
            $.userLanguage = userLanguage;
            return this;
        }

        /**
         * @param userLanguage When generating the cache key, add the client language type. value:
         * 
         * @return builder
         * 
         */
        public Builder userLanguage(String userLanguage) {
            return userLanguage(Output.of(userLanguage));
        }

        public CacheRuleState build() {
            return $;
        }
    }

}
