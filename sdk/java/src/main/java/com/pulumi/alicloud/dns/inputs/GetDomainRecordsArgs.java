// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainRecordsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainRecordsArgs Empty = new GetDomainRecordsArgs();

    @Import(name="domainName", required=true)
    private Output<String> domainName;

    public Output<String> domainName() {
        return this.domainName;
    }

    @Import(name="hostRecordRegex")
    private @Nullable Output<String> hostRecordRegex;

    public Optional<Output<String>> hostRecordRegex() {
        return Optional.ofNullable(this.hostRecordRegex);
    }

    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    @Import(name="isLocked")
    private @Nullable Output<Boolean> isLocked;

    public Optional<Output<Boolean>> isLocked() {
        return Optional.ofNullable(this.isLocked);
    }

    @Import(name="line")
    private @Nullable Output<String> line;

    public Optional<Output<String>> line() {
        return Optional.ofNullable(this.line);
    }

    @Import(name="outputFile")
    private @Nullable Output<String> outputFile;

    public Optional<Output<String>> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="valueRegex")
    private @Nullable Output<String> valueRegex;

    public Optional<Output<String>> valueRegex() {
        return Optional.ofNullable(this.valueRegex);
    }

    private GetDomainRecordsArgs() {}

    private GetDomainRecordsArgs(GetDomainRecordsArgs $) {
        this.domainName = $.domainName;
        this.hostRecordRegex = $.hostRecordRegex;
        this.ids = $.ids;
        this.isLocked = $.isLocked;
        this.line = $.line;
        this.outputFile = $.outputFile;
        this.status = $.status;
        this.type = $.type;
        this.valueRegex = $.valueRegex;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainRecordsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainRecordsArgs $;

        public Builder() {
            $ = new GetDomainRecordsArgs();
        }

        public Builder(GetDomainRecordsArgs defaults) {
            $ = new GetDomainRecordsArgs(Objects.requireNonNull(defaults));
        }

        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder hostRecordRegex(@Nullable Output<String> hostRecordRegex) {
            $.hostRecordRegex = hostRecordRegex;
            return this;
        }

        public Builder hostRecordRegex(String hostRecordRegex) {
            return hostRecordRegex(Output.of(hostRecordRegex));
        }

        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        public Builder isLocked(@Nullable Output<Boolean> isLocked) {
            $.isLocked = isLocked;
            return this;
        }

        public Builder isLocked(Boolean isLocked) {
            return isLocked(Output.of(isLocked));
        }

        public Builder line(@Nullable Output<String> line) {
            $.line = line;
            return this;
        }

        public Builder line(String line) {
            return line(Output.of(line));
        }

        public Builder outputFile(@Nullable Output<String> outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        public Builder outputFile(String outputFile) {
            return outputFile(Output.of(outputFile));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder valueRegex(@Nullable Output<String> valueRegex) {
            $.valueRegex = valueRegex;
            return this;
        }

        public Builder valueRegex(String valueRegex) {
            return valueRegex(Output.of(valueRegex));
        }

        public GetDomainRecordsArgs build() {
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("GetDomainRecordsArgs", "domainName");
            }
            return $;
        }
    }

}
