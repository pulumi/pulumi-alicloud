// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.apigateway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * The time of the instance package. Valid values:
     * - PricingCycle is **Month**, indicating monthly payment. The value range is **1** to **9**.
     * - PricingCycle is **Year**, indicating annual payment. The value range is **1** to **3**.
     * 
     * When the value of&gt; ChargeType is **PrePaid**, this parameter is available and must be passed in.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return The time of the instance package. Valid values:
     * - PricingCycle is **Month**, indicating monthly payment. The value range is **1** to **9**.
     * - PricingCycle is **Year**, indicating annual payment. The value range is **1** to **3**.
     * 
     * When the value of&gt; ChargeType is **PrePaid**, this parameter is available and must be passed in.
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * Does IPV6 Capability Support.
     * 
     */
    @Import(name="egressIpv6Enable")
    private @Nullable Output<Boolean> egressIpv6Enable;

    /**
     * @return Does IPV6 Capability Support.
     * 
     */
    public Optional<Output<Boolean>> egressIpv6Enable() {
        return Optional.ofNullable(this.egressIpv6Enable);
    }

    /**
     * Https policy.
     * 
     */
    @Import(name="httpsPolicy", required=true)
    private Output<String> httpsPolicy;

    /**
     * @return Https policy.
     * 
     */
    public Output<String> httpsPolicy() {
        return this.httpsPolicy;
    }

    /**
     * Instance name.
     * 
     */
    @Import(name="instanceName", required=true)
    private Output<String> instanceName;

    /**
     * @return Instance name.
     * 
     */
    public Output<String> instanceName() {
        return this.instanceName;
    }

    /**
     * Instance type.
     * 
     */
    @Import(name="instanceSpec", required=true)
    private Output<String> instanceSpec;

    /**
     * @return Instance type.
     * 
     */
    public Output<String> instanceSpec() {
        return this.instanceSpec;
    }

    /**
     * Instance type-normal: traditional exclusive instance.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return Instance type-normal: traditional exclusive instance.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * The payment type of the resource.
     * 
     */
    @Import(name="paymentType", required=true)
    private Output<String> paymentType;

    /**
     * @return The payment type of the resource.
     * 
     */
    public Output<String> paymentType() {
        return this.paymentType;
    }

    /**
     * The subscription instance is of the subscription year or month type. The value range is as follows:
     * - **year**: year
     * - **month**: month
     * &gt; **NOTE:**  If the Payment type is PrePaid, this parameter is required.
     * 
     */
    @Import(name="pricingCycle")
    private @Nullable Output<String> pricingCycle;

    /**
     * @return The subscription instance is of the subscription year or month type. The value range is as follows:
     * - **year**: year
     * - **month**: month
     * &gt; **NOTE:**  If the Payment type is PrePaid, this parameter is required.
     * 
     */
    public Optional<Output<String>> pricingCycle() {
        return Optional.ofNullable(this.pricingCycle);
    }

    /**
     * Does ipv6 support.
     * 
     */
    @Import(name="supportIpv6")
    private @Nullable Output<Boolean> supportIpv6;

    /**
     * @return Does ipv6 support.
     * 
     */
    public Optional<Output<Boolean>> supportIpv6() {
        return Optional.ofNullable(this.supportIpv6);
    }

    /**
     * User&#39;s VpcID.
     * 
     */
    @Import(name="userVpcId")
    private @Nullable Output<String> userVpcId;

    /**
     * @return User&#39;s VpcID.
     * 
     */
    public Optional<Output<String>> userVpcId() {
        return Optional.ofNullable(this.userVpcId);
    }

    /**
     * Whether the slb of the Vpc supports.
     * 
     */
    @Import(name="vpcSlbIntranetEnable")
    private @Nullable Output<Boolean> vpcSlbIntranetEnable;

    /**
     * @return Whether the slb of the Vpc supports.
     * 
     */
    public Optional<Output<Boolean>> vpcSlbIntranetEnable() {
        return Optional.ofNullable(this.vpcSlbIntranetEnable);
    }

    /**
     * The zone where the instance is deployed.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone where the instance is deployed.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.duration = $.duration;
        this.egressIpv6Enable = $.egressIpv6Enable;
        this.httpsPolicy = $.httpsPolicy;
        this.instanceName = $.instanceName;
        this.instanceSpec = $.instanceSpec;
        this.instanceType = $.instanceType;
        this.paymentType = $.paymentType;
        this.pricingCycle = $.pricingCycle;
        this.supportIpv6 = $.supportIpv6;
        this.userVpcId = $.userVpcId;
        this.vpcSlbIntranetEnable = $.vpcSlbIntranetEnable;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param duration The time of the instance package. Valid values:
         * - PricingCycle is **Month**, indicating monthly payment. The value range is **1** to **9**.
         * - PricingCycle is **Year**, indicating annual payment. The value range is **1** to **3**.
         * 
         * When the value of&gt; ChargeType is **PrePaid**, this parameter is available and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The time of the instance package. Valid values:
         * - PricingCycle is **Month**, indicating monthly payment. The value range is **1** to **9**.
         * - PricingCycle is **Year**, indicating annual payment. The value range is **1** to **3**.
         * 
         * When the value of&gt; ChargeType is **PrePaid**, this parameter is available and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param egressIpv6Enable Does IPV6 Capability Support.
         * 
         * @return builder
         * 
         */
        public Builder egressIpv6Enable(@Nullable Output<Boolean> egressIpv6Enable) {
            $.egressIpv6Enable = egressIpv6Enable;
            return this;
        }

        /**
         * @param egressIpv6Enable Does IPV6 Capability Support.
         * 
         * @return builder
         * 
         */
        public Builder egressIpv6Enable(Boolean egressIpv6Enable) {
            return egressIpv6Enable(Output.of(egressIpv6Enable));
        }

        /**
         * @param httpsPolicy Https policy.
         * 
         * @return builder
         * 
         */
        public Builder httpsPolicy(Output<String> httpsPolicy) {
            $.httpsPolicy = httpsPolicy;
            return this;
        }

        /**
         * @param httpsPolicy Https policy.
         * 
         * @return builder
         * 
         */
        public Builder httpsPolicy(String httpsPolicy) {
            return httpsPolicy(Output.of(httpsPolicy));
        }

        /**
         * @param instanceName Instance name.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName Instance name.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param instanceSpec Instance type.
         * 
         * @return builder
         * 
         */
        public Builder instanceSpec(Output<String> instanceSpec) {
            $.instanceSpec = instanceSpec;
            return this;
        }

        /**
         * @param instanceSpec Instance type.
         * 
         * @return builder
         * 
         */
        public Builder instanceSpec(String instanceSpec) {
            return instanceSpec(Output.of(instanceSpec));
        }

        /**
         * @param instanceType Instance type-normal: traditional exclusive instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType Instance type-normal: traditional exclusive instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param paymentType The payment type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param pricingCycle The subscription instance is of the subscription year or month type. The value range is as follows:
         * - **year**: year
         * - **month**: month
         * &gt; **NOTE:**  If the Payment type is PrePaid, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(@Nullable Output<String> pricingCycle) {
            $.pricingCycle = pricingCycle;
            return this;
        }

        /**
         * @param pricingCycle The subscription instance is of the subscription year or month type. The value range is as follows:
         * - **year**: year
         * - **month**: month
         * &gt; **NOTE:**  If the Payment type is PrePaid, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(String pricingCycle) {
            return pricingCycle(Output.of(pricingCycle));
        }

        /**
         * @param supportIpv6 Does ipv6 support.
         * 
         * @return builder
         * 
         */
        public Builder supportIpv6(@Nullable Output<Boolean> supportIpv6) {
            $.supportIpv6 = supportIpv6;
            return this;
        }

        /**
         * @param supportIpv6 Does ipv6 support.
         * 
         * @return builder
         * 
         */
        public Builder supportIpv6(Boolean supportIpv6) {
            return supportIpv6(Output.of(supportIpv6));
        }

        /**
         * @param userVpcId User&#39;s VpcID.
         * 
         * @return builder
         * 
         */
        public Builder userVpcId(@Nullable Output<String> userVpcId) {
            $.userVpcId = userVpcId;
            return this;
        }

        /**
         * @param userVpcId User&#39;s VpcID.
         * 
         * @return builder
         * 
         */
        public Builder userVpcId(String userVpcId) {
            return userVpcId(Output.of(userVpcId));
        }

        /**
         * @param vpcSlbIntranetEnable Whether the slb of the Vpc supports.
         * 
         * @return builder
         * 
         */
        public Builder vpcSlbIntranetEnable(@Nullable Output<Boolean> vpcSlbIntranetEnable) {
            $.vpcSlbIntranetEnable = vpcSlbIntranetEnable;
            return this;
        }

        /**
         * @param vpcSlbIntranetEnable Whether the slb of the Vpc supports.
         * 
         * @return builder
         * 
         */
        public Builder vpcSlbIntranetEnable(Boolean vpcSlbIntranetEnable) {
            return vpcSlbIntranetEnable(Output.of(vpcSlbIntranetEnable));
        }

        /**
         * @param zoneId The zone where the instance is deployed.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone where the instance is deployed.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public InstanceArgs build() {
            if ($.httpsPolicy == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "httpsPolicy");
            }
            if ($.instanceName == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "instanceName");
            }
            if ($.instanceSpec == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "instanceSpec");
            }
            if ($.paymentType == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "paymentType");
            }
            return $;
        }
    }

}
