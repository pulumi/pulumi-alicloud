// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dataworks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DiAlarmRuleTriggerCondition {
    /**
     * @return It takes effect only when the DDL notification is issued. The list of effective DDLs is required.
     * 
     */
    private @Nullable List<String> ddlReportTags;
    /**
     * @return Alarm calculation time interval, unit minute
     * 
     */
    private @Nullable Integer duration;
    /**
     * @return Severity, optional enumeration value:
     * 
     * Warning
     * 
     * Critical
     * 
     */
    private @Nullable String severity;
    /**
     * @return Alarm threshold.
     * 
     * Task status alarm: no need to fill in the threshold.
     * 
     * failover alarm: The threshold is the number of failover alarms.
     * 
     * Task Delay Alarm: The threshold is the delay duration, in seconds.
     * 
     */
    private @Nullable Integer threshold;

    private DiAlarmRuleTriggerCondition() {}
    /**
     * @return It takes effect only when the DDL notification is issued. The list of effective DDLs is required.
     * 
     */
    public List<String> ddlReportTags() {
        return this.ddlReportTags == null ? List.of() : this.ddlReportTags;
    }
    /**
     * @return Alarm calculation time interval, unit minute
     * 
     */
    public Optional<Integer> duration() {
        return Optional.ofNullable(this.duration);
    }
    /**
     * @return Severity, optional enumeration value:
     * 
     * Warning
     * 
     * Critical
     * 
     */
    public Optional<String> severity() {
        return Optional.ofNullable(this.severity);
    }
    /**
     * @return Alarm threshold.
     * 
     * Task status alarm: no need to fill in the threshold.
     * 
     * failover alarm: The threshold is the number of failover alarms.
     * 
     * Task Delay Alarm: The threshold is the delay duration, in seconds.
     * 
     */
    public Optional<Integer> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiAlarmRuleTriggerCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> ddlReportTags;
        private @Nullable Integer duration;
        private @Nullable String severity;
        private @Nullable Integer threshold;
        public Builder() {}
        public Builder(DiAlarmRuleTriggerCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ddlReportTags = defaults.ddlReportTags;
    	      this.duration = defaults.duration;
    	      this.severity = defaults.severity;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder ddlReportTags(@Nullable List<String> ddlReportTags) {

            this.ddlReportTags = ddlReportTags;
            return this;
        }
        public Builder ddlReportTags(String... ddlReportTags) {
            return ddlReportTags(List.of(ddlReportTags));
        }
        @CustomType.Setter
        public Builder duration(@Nullable Integer duration) {

            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder severity(@Nullable String severity) {

            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable Integer threshold) {

            this.threshold = threshold;
            return this;
        }
        public DiAlarmRuleTriggerCondition build() {
            final var _resultValue = new DiAlarmRuleTriggerCondition();
            _resultValue.ddlReportTags = ddlReportTags;
            _resultValue.duration = duration;
            _resultValue.severity = severity;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
