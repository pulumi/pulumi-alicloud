// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.expressconnect.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVirtualBorderRoutersRouter {
    /**
     * @return The physical leased line access point ID.
     * 
     */
    private String accessPointId;
    /**
     * @return The first activation time of VBR.
     * 
     */
    private String activationTime;
    /**
     * @return Operators for physical connection circuit provided coding.
     * 
     */
    private String circuitCode;
    /**
     * @return Box Instance Id.
     * 
     */
    private String cloudBoxInstanceId;
    /**
     * @return The representative of the creation time resources attribute field.
     * 
     */
    private String createTime;
    /**
     * @return The description of VBR. Length is from 2 to 256 characters, must start with a letter or the Chinese at the beginning, but not at the http:// Or https:// at the beginning.
     * 
     */
    private String description;
    /**
     * @return Detection time multiplier that recipient allows the sender to send a message of the maximum allowable connections for the number of packets, used to detect whether the link normal. Value: 3~10.
     * 
     */
    private Integer detectMultiplier;
    /**
     * @return High Speed Migration Service Instance Id.
     * 
     */
    private String eccId;
    /**
     * @return Whether to Enable IPv6.
     * 
     */
    private Boolean enableIpv6;
    /**
     * @return The ID of the Virtual Border Router.
     * 
     */
    private String id;
    /**
     * @return Alibaba Cloud-Connected IPv4 address.
     * 
     */
    private String localGatewayIp;
    /**
     * @return Alibaba Cloud-Connected IPv6 Address.
     * 
     */
    private String localIpv6GatewayIp;
    /**
     * @return Configure BFD packet reception interval of values include: 200~1000, unit: ms.
     * 
     */
    private Integer minRxInterval;
    /**
     * @return Configure BFD packet transmission interval maximum value: 200~1000, unit: ms.
     * 
     */
    private Integer minTxInterval;
    /**
     * @return The Billing of the Extended Time.
     * 
     */
    private String paymentVbrExpireTime;
    /**
     * @return The Client-Side Interconnection IPv4 Address.
     * 
     */
    private String peerGatewayIp;
    /**
     * @return The Client-Side Interconnection IPv6 Address.
     * 
     */
    private String peerIpv6GatewayIp;
    /**
     * @return Alibaba Cloud-Connected IPv6 with Client-Side Interconnection IPv6 of Subnet Mask.
     * 
     */
    private String peeringIpv6SubnetMask;
    /**
     * @return Alibaba Cloud-Connected IPv4 and Client-Side Interconnection IPv4 of Subnet Mask.
     * 
     */
    private String peeringSubnetMask;
    /**
     * @return Physical Private Line Service Status Value Normal: Normal, financiallocked: If You Lock.
     * 
     */
    private String physicalConnectionBusinessStatus;
    /**
     * @return The ID of the Physical Connection to Which the ID.
     * 
     */
    private String physicalConnectionId;
    /**
     * @return Physical Private Line Where the Account ID.
     * 
     */
    private String physicalConnectionOwnerUid;
    /**
     * @return Physical Private Line State.
     * 
     */
    private String physicalConnectionStatus;
    /**
     * @return The Last from a Terminated State to the Active State of the Time.
     * 
     */
    private String recoveryTime;
    /**
     * @return Route Table ID.
     * 
     */
    private String routeTableId;
    /**
     * @return The VBR state.
     * 
     */
    private String status;
    /**
     * @return The Most Recent Was Aborted by the Time.
     * 
     */
    private String terminationTime;
    /**
     * @return VBR Type.
     * 
     */
    private String type;
    /**
     * @return The VBR ID.
     * 
     */
    private String virtualBorderRouterId;
    /**
     * @return The name of VBR. Length is from 2 to 128 characters, must start with a letter or the Chinese at the beginning can contain numbers, the underscore character (_) and dash (-). But do not start with http:// or https:// at the beginning.
     * 
     */
    private String virtualBorderRouterName;
    /**
     * @return The VLAN ID of the VBR. Value range: 0~2999.
     * 
     */
    private Integer vlanId;
    /**
     * @return The ID of the Router Interface.
     * 
     */
    private String vlanInterfaceId;

    private GetVirtualBorderRoutersRouter() {}
    /**
     * @return The physical leased line access point ID.
     * 
     */
    public String accessPointId() {
        return this.accessPointId;
    }
    /**
     * @return The first activation time of VBR.
     * 
     */
    public String activationTime() {
        return this.activationTime;
    }
    /**
     * @return Operators for physical connection circuit provided coding.
     * 
     */
    public String circuitCode() {
        return this.circuitCode;
    }
    /**
     * @return Box Instance Id.
     * 
     */
    public String cloudBoxInstanceId() {
        return this.cloudBoxInstanceId;
    }
    /**
     * @return The representative of the creation time resources attribute field.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The description of VBR. Length is from 2 to 256 characters, must start with a letter or the Chinese at the beginning, but not at the http:// Or https:// at the beginning.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Detection time multiplier that recipient allows the sender to send a message of the maximum allowable connections for the number of packets, used to detect whether the link normal. Value: 3~10.
     * 
     */
    public Integer detectMultiplier() {
        return this.detectMultiplier;
    }
    /**
     * @return High Speed Migration Service Instance Id.
     * 
     */
    public String eccId() {
        return this.eccId;
    }
    /**
     * @return Whether to Enable IPv6.
     * 
     */
    public Boolean enableIpv6() {
        return this.enableIpv6;
    }
    /**
     * @return The ID of the Virtual Border Router.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Alibaba Cloud-Connected IPv4 address.
     * 
     */
    public String localGatewayIp() {
        return this.localGatewayIp;
    }
    /**
     * @return Alibaba Cloud-Connected IPv6 Address.
     * 
     */
    public String localIpv6GatewayIp() {
        return this.localIpv6GatewayIp;
    }
    /**
     * @return Configure BFD packet reception interval of values include: 200~1000, unit: ms.
     * 
     */
    public Integer minRxInterval() {
        return this.minRxInterval;
    }
    /**
     * @return Configure BFD packet transmission interval maximum value: 200~1000, unit: ms.
     * 
     */
    public Integer minTxInterval() {
        return this.minTxInterval;
    }
    /**
     * @return The Billing of the Extended Time.
     * 
     */
    public String paymentVbrExpireTime() {
        return this.paymentVbrExpireTime;
    }
    /**
     * @return The Client-Side Interconnection IPv4 Address.
     * 
     */
    public String peerGatewayIp() {
        return this.peerGatewayIp;
    }
    /**
     * @return The Client-Side Interconnection IPv6 Address.
     * 
     */
    public String peerIpv6GatewayIp() {
        return this.peerIpv6GatewayIp;
    }
    /**
     * @return Alibaba Cloud-Connected IPv6 with Client-Side Interconnection IPv6 of Subnet Mask.
     * 
     */
    public String peeringIpv6SubnetMask() {
        return this.peeringIpv6SubnetMask;
    }
    /**
     * @return Alibaba Cloud-Connected IPv4 and Client-Side Interconnection IPv4 of Subnet Mask.
     * 
     */
    public String peeringSubnetMask() {
        return this.peeringSubnetMask;
    }
    /**
     * @return Physical Private Line Service Status Value Normal: Normal, financiallocked: If You Lock.
     * 
     */
    public String physicalConnectionBusinessStatus() {
        return this.physicalConnectionBusinessStatus;
    }
    /**
     * @return The ID of the Physical Connection to Which the ID.
     * 
     */
    public String physicalConnectionId() {
        return this.physicalConnectionId;
    }
    /**
     * @return Physical Private Line Where the Account ID.
     * 
     */
    public String physicalConnectionOwnerUid() {
        return this.physicalConnectionOwnerUid;
    }
    /**
     * @return Physical Private Line State.
     * 
     */
    public String physicalConnectionStatus() {
        return this.physicalConnectionStatus;
    }
    /**
     * @return The Last from a Terminated State to the Active State of the Time.
     * 
     */
    public String recoveryTime() {
        return this.recoveryTime;
    }
    /**
     * @return Route Table ID.
     * 
     */
    public String routeTableId() {
        return this.routeTableId;
    }
    /**
     * @return The VBR state.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The Most Recent Was Aborted by the Time.
     * 
     */
    public String terminationTime() {
        return this.terminationTime;
    }
    /**
     * @return VBR Type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The VBR ID.
     * 
     */
    public String virtualBorderRouterId() {
        return this.virtualBorderRouterId;
    }
    /**
     * @return The name of VBR. Length is from 2 to 128 characters, must start with a letter or the Chinese at the beginning can contain numbers, the underscore character (_) and dash (-). But do not start with http:// or https:// at the beginning.
     * 
     */
    public String virtualBorderRouterName() {
        return this.virtualBorderRouterName;
    }
    /**
     * @return The VLAN ID of the VBR. Value range: 0~2999.
     * 
     */
    public Integer vlanId() {
        return this.vlanId;
    }
    /**
     * @return The ID of the Router Interface.
     * 
     */
    public String vlanInterfaceId() {
        return this.vlanInterfaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualBorderRoutersRouter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessPointId;
        private String activationTime;
        private String circuitCode;
        private String cloudBoxInstanceId;
        private String createTime;
        private String description;
        private Integer detectMultiplier;
        private String eccId;
        private Boolean enableIpv6;
        private String id;
        private String localGatewayIp;
        private String localIpv6GatewayIp;
        private Integer minRxInterval;
        private Integer minTxInterval;
        private String paymentVbrExpireTime;
        private String peerGatewayIp;
        private String peerIpv6GatewayIp;
        private String peeringIpv6SubnetMask;
        private String peeringSubnetMask;
        private String physicalConnectionBusinessStatus;
        private String physicalConnectionId;
        private String physicalConnectionOwnerUid;
        private String physicalConnectionStatus;
        private String recoveryTime;
        private String routeTableId;
        private String status;
        private String terminationTime;
        private String type;
        private String virtualBorderRouterId;
        private String virtualBorderRouterName;
        private Integer vlanId;
        private String vlanInterfaceId;
        public Builder() {}
        public Builder(GetVirtualBorderRoutersRouter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPointId = defaults.accessPointId;
    	      this.activationTime = defaults.activationTime;
    	      this.circuitCode = defaults.circuitCode;
    	      this.cloudBoxInstanceId = defaults.cloudBoxInstanceId;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.detectMultiplier = defaults.detectMultiplier;
    	      this.eccId = defaults.eccId;
    	      this.enableIpv6 = defaults.enableIpv6;
    	      this.id = defaults.id;
    	      this.localGatewayIp = defaults.localGatewayIp;
    	      this.localIpv6GatewayIp = defaults.localIpv6GatewayIp;
    	      this.minRxInterval = defaults.minRxInterval;
    	      this.minTxInterval = defaults.minTxInterval;
    	      this.paymentVbrExpireTime = defaults.paymentVbrExpireTime;
    	      this.peerGatewayIp = defaults.peerGatewayIp;
    	      this.peerIpv6GatewayIp = defaults.peerIpv6GatewayIp;
    	      this.peeringIpv6SubnetMask = defaults.peeringIpv6SubnetMask;
    	      this.peeringSubnetMask = defaults.peeringSubnetMask;
    	      this.physicalConnectionBusinessStatus = defaults.physicalConnectionBusinessStatus;
    	      this.physicalConnectionId = defaults.physicalConnectionId;
    	      this.physicalConnectionOwnerUid = defaults.physicalConnectionOwnerUid;
    	      this.physicalConnectionStatus = defaults.physicalConnectionStatus;
    	      this.recoveryTime = defaults.recoveryTime;
    	      this.routeTableId = defaults.routeTableId;
    	      this.status = defaults.status;
    	      this.terminationTime = defaults.terminationTime;
    	      this.type = defaults.type;
    	      this.virtualBorderRouterId = defaults.virtualBorderRouterId;
    	      this.virtualBorderRouterName = defaults.virtualBorderRouterName;
    	      this.vlanId = defaults.vlanId;
    	      this.vlanInterfaceId = defaults.vlanInterfaceId;
        }

        @CustomType.Setter
        public Builder accessPointId(String accessPointId) {
            this.accessPointId = Objects.requireNonNull(accessPointId);
            return this;
        }
        @CustomType.Setter
        public Builder activationTime(String activationTime) {
            this.activationTime = Objects.requireNonNull(activationTime);
            return this;
        }
        @CustomType.Setter
        public Builder circuitCode(String circuitCode) {
            this.circuitCode = Objects.requireNonNull(circuitCode);
            return this;
        }
        @CustomType.Setter
        public Builder cloudBoxInstanceId(String cloudBoxInstanceId) {
            this.cloudBoxInstanceId = Objects.requireNonNull(cloudBoxInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder detectMultiplier(Integer detectMultiplier) {
            this.detectMultiplier = Objects.requireNonNull(detectMultiplier);
            return this;
        }
        @CustomType.Setter
        public Builder eccId(String eccId) {
            this.eccId = Objects.requireNonNull(eccId);
            return this;
        }
        @CustomType.Setter
        public Builder enableIpv6(Boolean enableIpv6) {
            this.enableIpv6 = Objects.requireNonNull(enableIpv6);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder localGatewayIp(String localGatewayIp) {
            this.localGatewayIp = Objects.requireNonNull(localGatewayIp);
            return this;
        }
        @CustomType.Setter
        public Builder localIpv6GatewayIp(String localIpv6GatewayIp) {
            this.localIpv6GatewayIp = Objects.requireNonNull(localIpv6GatewayIp);
            return this;
        }
        @CustomType.Setter
        public Builder minRxInterval(Integer minRxInterval) {
            this.minRxInterval = Objects.requireNonNull(minRxInterval);
            return this;
        }
        @CustomType.Setter
        public Builder minTxInterval(Integer minTxInterval) {
            this.minTxInterval = Objects.requireNonNull(minTxInterval);
            return this;
        }
        @CustomType.Setter
        public Builder paymentVbrExpireTime(String paymentVbrExpireTime) {
            this.paymentVbrExpireTime = Objects.requireNonNull(paymentVbrExpireTime);
            return this;
        }
        @CustomType.Setter
        public Builder peerGatewayIp(String peerGatewayIp) {
            this.peerGatewayIp = Objects.requireNonNull(peerGatewayIp);
            return this;
        }
        @CustomType.Setter
        public Builder peerIpv6GatewayIp(String peerIpv6GatewayIp) {
            this.peerIpv6GatewayIp = Objects.requireNonNull(peerIpv6GatewayIp);
            return this;
        }
        @CustomType.Setter
        public Builder peeringIpv6SubnetMask(String peeringIpv6SubnetMask) {
            this.peeringIpv6SubnetMask = Objects.requireNonNull(peeringIpv6SubnetMask);
            return this;
        }
        @CustomType.Setter
        public Builder peeringSubnetMask(String peeringSubnetMask) {
            this.peeringSubnetMask = Objects.requireNonNull(peeringSubnetMask);
            return this;
        }
        @CustomType.Setter
        public Builder physicalConnectionBusinessStatus(String physicalConnectionBusinessStatus) {
            this.physicalConnectionBusinessStatus = Objects.requireNonNull(physicalConnectionBusinessStatus);
            return this;
        }
        @CustomType.Setter
        public Builder physicalConnectionId(String physicalConnectionId) {
            this.physicalConnectionId = Objects.requireNonNull(physicalConnectionId);
            return this;
        }
        @CustomType.Setter
        public Builder physicalConnectionOwnerUid(String physicalConnectionOwnerUid) {
            this.physicalConnectionOwnerUid = Objects.requireNonNull(physicalConnectionOwnerUid);
            return this;
        }
        @CustomType.Setter
        public Builder physicalConnectionStatus(String physicalConnectionStatus) {
            this.physicalConnectionStatus = Objects.requireNonNull(physicalConnectionStatus);
            return this;
        }
        @CustomType.Setter
        public Builder recoveryTime(String recoveryTime) {
            this.recoveryTime = Objects.requireNonNull(recoveryTime);
            return this;
        }
        @CustomType.Setter
        public Builder routeTableId(String routeTableId) {
            this.routeTableId = Objects.requireNonNull(routeTableId);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder terminationTime(String terminationTime) {
            this.terminationTime = Objects.requireNonNull(terminationTime);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder virtualBorderRouterId(String virtualBorderRouterId) {
            this.virtualBorderRouterId = Objects.requireNonNull(virtualBorderRouterId);
            return this;
        }
        @CustomType.Setter
        public Builder virtualBorderRouterName(String virtualBorderRouterName) {
            this.virtualBorderRouterName = Objects.requireNonNull(virtualBorderRouterName);
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(Integer vlanId) {
            this.vlanId = Objects.requireNonNull(vlanId);
            return this;
        }
        @CustomType.Setter
        public Builder vlanInterfaceId(String vlanInterfaceId) {
            this.vlanInterfaceId = Objects.requireNonNull(vlanInterfaceId);
            return this;
        }
        public GetVirtualBorderRoutersRouter build() {
            final var o = new GetVirtualBorderRoutersRouter();
            o.accessPointId = accessPointId;
            o.activationTime = activationTime;
            o.circuitCode = circuitCode;
            o.cloudBoxInstanceId = cloudBoxInstanceId;
            o.createTime = createTime;
            o.description = description;
            o.detectMultiplier = detectMultiplier;
            o.eccId = eccId;
            o.enableIpv6 = enableIpv6;
            o.id = id;
            o.localGatewayIp = localGatewayIp;
            o.localIpv6GatewayIp = localIpv6GatewayIp;
            o.minRxInterval = minRxInterval;
            o.minTxInterval = minTxInterval;
            o.paymentVbrExpireTime = paymentVbrExpireTime;
            o.peerGatewayIp = peerGatewayIp;
            o.peerIpv6GatewayIp = peerIpv6GatewayIp;
            o.peeringIpv6SubnetMask = peeringIpv6SubnetMask;
            o.peeringSubnetMask = peeringSubnetMask;
            o.physicalConnectionBusinessStatus = physicalConnectionBusinessStatus;
            o.physicalConnectionId = physicalConnectionId;
            o.physicalConnectionOwnerUid = physicalConnectionOwnerUid;
            o.physicalConnectionStatus = physicalConnectionStatus;
            o.recoveryTime = recoveryTime;
            o.routeTableId = routeTableId;
            o.status = status;
            o.terminationTime = terminationTime;
            o.type = type;
            o.virtualBorderRouterId = virtualBorderRouterId;
            o.virtualBorderRouterName = virtualBorderRouterName;
            o.vlanId = vlanId;
            o.vlanInterfaceId = vlanInterfaceId;
            return o;
        }
    }
}
