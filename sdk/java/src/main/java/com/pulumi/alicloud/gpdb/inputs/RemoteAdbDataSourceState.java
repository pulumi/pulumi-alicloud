// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.gpdb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RemoteAdbDataSourceState extends com.pulumi.resources.ResourceArgs {

    public static final RemoteAdbDataSourceState Empty = new RemoteAdbDataSourceState();

    /**
     * Data Source Name
     * 
     */
    @Import(name="dataSourceName")
    private @Nullable Output<String> dataSourceName;

    /**
     * @return Data Source Name
     * 
     */
    public Optional<Output<String>> dataSourceName() {
        return Optional.ofNullable(this.dataSourceName);
    }

    /**
     * The database of the local instance which connection data.
     * 
     */
    @Import(name="localDatabase")
    private @Nullable Output<String> localDatabase;

    /**
     * @return The database of the local instance which connection data.
     * 
     */
    public Optional<Output<String>> localDatabase() {
        return Optional.ofNullable(this.localDatabase);
    }

    /**
     * The instanceId of the local instance which connection data.
     * 
     */
    @Import(name="localDbInstanceId")
    private @Nullable Output<String> localDbInstanceId;

    /**
     * @return The instanceId of the local instance which connection data.
     * 
     */
    public Optional<Output<String>> localDbInstanceId() {
        return Optional.ofNullable(this.localDbInstanceId);
    }

    /**
     * The Management user name of the local instance.
     * 
     */
    @Import(name="managerUserName")
    private @Nullable Output<String> managerUserName;

    /**
     * @return The Management user name of the local instance.
     * 
     */
    public Optional<Output<String>> managerUserName() {
        return Optional.ofNullable(this.managerUserName);
    }

    /**
     * Password of the Manager user of the local instance
     * 
     */
    @Import(name="managerUserPassword")
    private @Nullable Output<String> managerUserPassword;

    /**
     * @return Password of the Manager user of the local instance
     * 
     */
    public Optional<Output<String>> managerUserPassword() {
        return Optional.ofNullable(this.managerUserPassword);
    }

    /**
     * The first ID of the resource
     * 
     */
    @Import(name="remoteAdbDataSourceId")
    private @Nullable Output<Integer> remoteAdbDataSourceId;

    /**
     * @return The first ID of the resource
     * 
     */
    public Optional<Output<Integer>> remoteAdbDataSourceId() {
        return Optional.ofNullable(this.remoteAdbDataSourceId);
    }

    /**
     * The database of the remote instance which provide data.
     * 
     */
    @Import(name="remoteDatabase")
    private @Nullable Output<String> remoteDatabase;

    /**
     * @return The database of the remote instance which provide data.
     * 
     */
    public Optional<Output<String>> remoteDatabase() {
        return Optional.ofNullable(this.remoteDatabase);
    }

    /**
     * The instanceId of the remote instance which provide data.
     * 
     */
    @Import(name="remoteDbInstanceId")
    private @Nullable Output<String> remoteDbInstanceId;

    /**
     * @return The instanceId of the remote instance which provide data.
     * 
     */
    public Optional<Output<String>> remoteDbInstanceId() {
        return Optional.ofNullable(this.remoteDbInstanceId);
    }

    /**
     * The status of the resource
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The user name used to connect to the remote instance
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return The user name used to connect to the remote instance
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    /**
     * The user password used to connect to the remote instance
     * 
     */
    @Import(name="userPassword")
    private @Nullable Output<String> userPassword;

    /**
     * @return The user password used to connect to the remote instance
     * 
     */
    public Optional<Output<String>> userPassword() {
        return Optional.ofNullable(this.userPassword);
    }

    private RemoteAdbDataSourceState() {}

    private RemoteAdbDataSourceState(RemoteAdbDataSourceState $) {
        this.dataSourceName = $.dataSourceName;
        this.localDatabase = $.localDatabase;
        this.localDbInstanceId = $.localDbInstanceId;
        this.managerUserName = $.managerUserName;
        this.managerUserPassword = $.managerUserPassword;
        this.remoteAdbDataSourceId = $.remoteAdbDataSourceId;
        this.remoteDatabase = $.remoteDatabase;
        this.remoteDbInstanceId = $.remoteDbInstanceId;
        this.status = $.status;
        this.userName = $.userName;
        this.userPassword = $.userPassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RemoteAdbDataSourceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RemoteAdbDataSourceState $;

        public Builder() {
            $ = new RemoteAdbDataSourceState();
        }

        public Builder(RemoteAdbDataSourceState defaults) {
            $ = new RemoteAdbDataSourceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataSourceName Data Source Name
         * 
         * @return builder
         * 
         */
        public Builder dataSourceName(@Nullable Output<String> dataSourceName) {
            $.dataSourceName = dataSourceName;
            return this;
        }

        /**
         * @param dataSourceName Data Source Name
         * 
         * @return builder
         * 
         */
        public Builder dataSourceName(String dataSourceName) {
            return dataSourceName(Output.of(dataSourceName));
        }

        /**
         * @param localDatabase The database of the local instance which connection data.
         * 
         * @return builder
         * 
         */
        public Builder localDatabase(@Nullable Output<String> localDatabase) {
            $.localDatabase = localDatabase;
            return this;
        }

        /**
         * @param localDatabase The database of the local instance which connection data.
         * 
         * @return builder
         * 
         */
        public Builder localDatabase(String localDatabase) {
            return localDatabase(Output.of(localDatabase));
        }

        /**
         * @param localDbInstanceId The instanceId of the local instance which connection data.
         * 
         * @return builder
         * 
         */
        public Builder localDbInstanceId(@Nullable Output<String> localDbInstanceId) {
            $.localDbInstanceId = localDbInstanceId;
            return this;
        }

        /**
         * @param localDbInstanceId The instanceId of the local instance which connection data.
         * 
         * @return builder
         * 
         */
        public Builder localDbInstanceId(String localDbInstanceId) {
            return localDbInstanceId(Output.of(localDbInstanceId));
        }

        /**
         * @param managerUserName The Management user name of the local instance.
         * 
         * @return builder
         * 
         */
        public Builder managerUserName(@Nullable Output<String> managerUserName) {
            $.managerUserName = managerUserName;
            return this;
        }

        /**
         * @param managerUserName The Management user name of the local instance.
         * 
         * @return builder
         * 
         */
        public Builder managerUserName(String managerUserName) {
            return managerUserName(Output.of(managerUserName));
        }

        /**
         * @param managerUserPassword Password of the Manager user of the local instance
         * 
         * @return builder
         * 
         */
        public Builder managerUserPassword(@Nullable Output<String> managerUserPassword) {
            $.managerUserPassword = managerUserPassword;
            return this;
        }

        /**
         * @param managerUserPassword Password of the Manager user of the local instance
         * 
         * @return builder
         * 
         */
        public Builder managerUserPassword(String managerUserPassword) {
            return managerUserPassword(Output.of(managerUserPassword));
        }

        /**
         * @param remoteAdbDataSourceId The first ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder remoteAdbDataSourceId(@Nullable Output<Integer> remoteAdbDataSourceId) {
            $.remoteAdbDataSourceId = remoteAdbDataSourceId;
            return this;
        }

        /**
         * @param remoteAdbDataSourceId The first ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder remoteAdbDataSourceId(Integer remoteAdbDataSourceId) {
            return remoteAdbDataSourceId(Output.of(remoteAdbDataSourceId));
        }

        /**
         * @param remoteDatabase The database of the remote instance which provide data.
         * 
         * @return builder
         * 
         */
        public Builder remoteDatabase(@Nullable Output<String> remoteDatabase) {
            $.remoteDatabase = remoteDatabase;
            return this;
        }

        /**
         * @param remoteDatabase The database of the remote instance which provide data.
         * 
         * @return builder
         * 
         */
        public Builder remoteDatabase(String remoteDatabase) {
            return remoteDatabase(Output.of(remoteDatabase));
        }

        /**
         * @param remoteDbInstanceId The instanceId of the remote instance which provide data.
         * 
         * @return builder
         * 
         */
        public Builder remoteDbInstanceId(@Nullable Output<String> remoteDbInstanceId) {
            $.remoteDbInstanceId = remoteDbInstanceId;
            return this;
        }

        /**
         * @param remoteDbInstanceId The instanceId of the remote instance which provide data.
         * 
         * @return builder
         * 
         */
        public Builder remoteDbInstanceId(String remoteDbInstanceId) {
            return remoteDbInstanceId(Output.of(remoteDbInstanceId));
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param userName The user name used to connect to the remote instance
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The user name used to connect to the remote instance
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        /**
         * @param userPassword The user password used to connect to the remote instance
         * 
         * @return builder
         * 
         */
        public Builder userPassword(@Nullable Output<String> userPassword) {
            $.userPassword = userPassword;
            return this;
        }

        /**
         * @param userPassword The user password used to connect to the remote instance
         * 
         * @return builder
         * 
         */
        public Builder userPassword(String userPassword) {
            return userPassword(Output.of(userPassword));
        }

        public RemoteAdbDataSourceState build() {
            return $;
        }
    }

}
