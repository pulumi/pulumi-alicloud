// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.resourcemanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SharedTargetState extends com.pulumi.resources.ResourceArgs {

    public static final SharedTargetState Empty = new SharedTargetState();

    /**
     * (Available since v1.259.0) The time when the association of the entity was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return (Available since v1.259.0) The time when the association of the entity was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The ID of the resource share.
     * 
     */
    @Import(name="resourceShareId")
    private @Nullable Output<String> resourceShareId;

    /**
     * @return The ID of the resource share.
     * 
     */
    public Optional<Output<String>> resourceShareId() {
        return Optional.ofNullable(this.resourceShareId);
    }

    /**
     * The status of shared target.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of shared target.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID of the principal.
     * 
     */
    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    /**
     * @return The ID of the principal.
     * 
     */
    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    private SharedTargetState() {}

    private SharedTargetState(SharedTargetState $) {
        this.createTime = $.createTime;
        this.resourceShareId = $.resourceShareId;
        this.status = $.status;
        this.targetId = $.targetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SharedTargetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SharedTargetState $;

        public Builder() {
            $ = new SharedTargetState();
        }

        public Builder(SharedTargetState defaults) {
            $ = new SharedTargetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime (Available since v1.259.0) The time when the association of the entity was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime (Available since v1.259.0) The time when the association of the entity was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param resourceShareId The ID of the resource share.
         * 
         * @return builder
         * 
         */
        public Builder resourceShareId(@Nullable Output<String> resourceShareId) {
            $.resourceShareId = resourceShareId;
            return this;
        }

        /**
         * @param resourceShareId The ID of the resource share.
         * 
         * @return builder
         * 
         */
        public Builder resourceShareId(String resourceShareId) {
            return resourceShareId(Output.of(resourceShareId));
        }

        /**
         * @param status The status of shared target.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of shared target.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param targetId The ID of the principal.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId The ID of the principal.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        public SharedTargetState build() {
            return $;
        }
    }

}
