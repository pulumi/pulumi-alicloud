// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cfg.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AggregateConfigRuleState extends com.pulumi.resources.ResourceArgs {

    public static final AggregateConfigRuleState Empty = new AggregateConfigRuleState();

    /**
     * The name of the rule.
     * 
     */
    @Import(name="aggregateConfigRuleName")
    private @Nullable Output<String> aggregateConfigRuleName;

    /**
     * @return The name of the rule.
     * 
     */
    public Optional<Output<String>> aggregateConfigRuleName() {
        return Optional.ofNullable(this.aggregateConfigRuleName);
    }

    /**
     * The Aggregator Id.
     * 
     */
    @Import(name="aggregatorId")
    private @Nullable Output<String> aggregatorId;

    /**
     * @return The Aggregator Id.
     * 
     */
    public Optional<Output<String>> aggregatorId() {
        return Optional.ofNullable(this.aggregatorId);
    }

    /**
     * (Available since v1.141.0) The rule ID of Aggregate Config Rule.
     * 
     */
    @Import(name="configRuleId")
    private @Nullable Output<String> configRuleId;

    /**
     * @return (Available since v1.141.0) The rule ID of Aggregate Config Rule.
     * 
     */
    public Optional<Output<String>> configRuleId() {
        return Optional.ofNullable(this.configRuleId);
    }

    /**
     * The trigger type of the rule. Valid values: `ConfigurationItemChangeNotification`: The rule is triggered upon configuration changes. `ScheduledNotification`: The rule is triggered as scheduled.
     * 
     */
    @Import(name="configRuleTriggerTypes")
    private @Nullable Output<String> configRuleTriggerTypes;

    /**
     * @return The trigger type of the rule. Valid values: `ConfigurationItemChangeNotification`: The rule is triggered upon configuration changes. `ScheduledNotification`: The rule is triggered as scheduled.
     * 
     */
    public Optional<Output<String>> configRuleTriggerTypes() {
        return Optional.ofNullable(this.configRuleTriggerTypes);
    }

    /**
     * The description of the rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The rule monitors excluded resource IDs, multiple of which are separated by commas, only applies to rules created based on managed rules, , custom rule this field is empty.
     * 
     */
    @Import(name="excludeResourceIdsScope")
    private @Nullable Output<String> excludeResourceIdsScope;

    /**
     * @return The rule monitors excluded resource IDs, multiple of which are separated by commas, only applies to rules created based on managed rules, , custom rule this field is empty.
     * 
     */
    public Optional<Output<String>> excludeResourceIdsScope() {
        return Optional.ofNullable(this.excludeResourceIdsScope);
    }

    /**
     * The settings map of the input parameters for the rule.
     * 
     */
    @Import(name="inputParameters")
    private @Nullable Output<Map<String,Object>> inputParameters;

    /**
     * @return The settings map of the input parameters for the rule.
     * 
     */
    public Optional<Output<Map<String,Object>>> inputParameters() {
        return Optional.ofNullable(this.inputParameters);
    }

    /**
     * The frequency of the compliance evaluations. Valid values:  `One_Hour`, `Three_Hours`, `Six_Hours`, `Twelve_Hours`, `TwentyFour_Hours`. System default value is `TwentyFour_Hours` and valid when the `config_rule_trigger_types` is `ScheduledNotification`.
     * 
     */
    @Import(name="maximumExecutionFrequency")
    private @Nullable Output<String> maximumExecutionFrequency;

    /**
     * @return The frequency of the compliance evaluations. Valid values:  `One_Hour`, `Three_Hours`, `Six_Hours`, `Twelve_Hours`, `TwentyFour_Hours`. System default value is `TwentyFour_Hours` and valid when the `config_rule_trigger_types` is `ScheduledNotification`.
     * 
     */
    public Optional<Output<String>> maximumExecutionFrequency() {
        return Optional.ofNullable(this.maximumExecutionFrequency);
    }

    /**
     * The rule monitors region IDs, separated by commas, only applies to rules created based on managed rules.
     * 
     */
    @Import(name="regionIdsScope")
    private @Nullable Output<String> regionIdsScope;

    /**
     * @return The rule monitors region IDs, separated by commas, only applies to rules created based on managed rules.
     * 
     */
    public Optional<Output<String>> regionIdsScope() {
        return Optional.ofNullable(this.regionIdsScope);
    }

    /**
     * The rule monitors resource group IDs, separated by commas, only applies to rules created based on managed rules.
     * 
     */
    @Import(name="resourceGroupIdsScope")
    private @Nullable Output<String> resourceGroupIdsScope;

    /**
     * @return The rule monitors resource group IDs, separated by commas, only applies to rules created based on managed rules.
     * 
     */
    public Optional<Output<String>> resourceGroupIdsScope() {
        return Optional.ofNullable(this.resourceGroupIdsScope);
    }

    /**
     * Resource types to be evaluated. [Alibaba Cloud services that support Cloud Config.](https://www.alibabacloud.com/help/en/doc-detail/127411.htm)
     * 
     */
    @Import(name="resourceTypesScopes")
    private @Nullable Output<List<String>> resourceTypesScopes;

    /**
     * @return Resource types to be evaluated. [Alibaba Cloud services that support Cloud Config.](https://www.alibabacloud.com/help/en/doc-detail/127411.htm)
     * 
     */
    public Optional<Output<List<String>>> resourceTypesScopes() {
        return Optional.ofNullable(this.resourceTypesScopes);
    }

    /**
     * The risk level of the resources that are not compliant with the rule. Valid values:  `1`: critical `2`: warning `3`: info.
     * 
     */
    @Import(name="riskLevel")
    private @Nullable Output<Integer> riskLevel;

    /**
     * @return The risk level of the resources that are not compliant with the rule. Valid values:  `1`: critical `2`: warning `3`: info.
     * 
     */
    public Optional<Output<Integer>> riskLevel() {
        return Optional.ofNullable(this.riskLevel);
    }

    /**
     * The identifier of the rule. For a managed rule, the value is the identifier of the managed rule. For a custom rule, the value is the ARN of the custom rule. Using managed rules, refer to [List of Managed rules.](https://www.alibabacloud.com/help/en/doc-detail/127404.htm)
     * 
     */
    @Import(name="sourceIdentifier")
    private @Nullable Output<String> sourceIdentifier;

    /**
     * @return The identifier of the rule. For a managed rule, the value is the identifier of the managed rule. For a custom rule, the value is the ARN of the custom rule. Using managed rules, refer to [List of Managed rules.](https://www.alibabacloud.com/help/en/doc-detail/127404.htm)
     * 
     */
    public Optional<Output<String>> sourceIdentifier() {
        return Optional.ofNullable(this.sourceIdentifier);
    }

    /**
     * Specifies whether you or Alibaba Cloud owns and manages the rule. Valid values: `CUSTOM_FC`: The rule is a custom rule and you own the rule. `ALIYUN`: The rule is a managed rule and Alibaba Cloud owns the rule.
     * 
     */
    @Import(name="sourceOwner")
    private @Nullable Output<String> sourceOwner;

    /**
     * @return Specifies whether you or Alibaba Cloud owns and manages the rule. Valid values: `CUSTOM_FC`: The rule is a custom rule and you own the rule. `ALIYUN`: The rule is a managed rule and Alibaba Cloud owns the rule.
     * 
     */
    public Optional<Output<String>> sourceOwner() {
        return Optional.ofNullable(this.sourceOwner);
    }

    /**
     * The rule status. The valid values: `ACTIVE`, `INACTIVE`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The rule status. The valid values: `ACTIVE`, `INACTIVE`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The rule monitors the tag key, only applies to rules created based on managed rules.
     * 
     */
    @Import(name="tagKeyScope")
    private @Nullable Output<String> tagKeyScope;

    /**
     * @return The rule monitors the tag key, only applies to rules created based on managed rules.
     * 
     */
    public Optional<Output<String>> tagKeyScope() {
        return Optional.ofNullable(this.tagKeyScope);
    }

    /**
     * The rule monitors the tag value, use with the `tag_key_scope` options. only applies to rules created based on managed rules.
     * 
     */
    @Import(name="tagValueScope")
    private @Nullable Output<String> tagValueScope;

    /**
     * @return The rule monitors the tag value, use with the `tag_key_scope` options. only applies to rules created based on managed rules.
     * 
     */
    public Optional<Output<String>> tagValueScope() {
        return Optional.ofNullable(this.tagValueScope);
    }

    private AggregateConfigRuleState() {}

    private AggregateConfigRuleState(AggregateConfigRuleState $) {
        this.aggregateConfigRuleName = $.aggregateConfigRuleName;
        this.aggregatorId = $.aggregatorId;
        this.configRuleId = $.configRuleId;
        this.configRuleTriggerTypes = $.configRuleTriggerTypes;
        this.description = $.description;
        this.excludeResourceIdsScope = $.excludeResourceIdsScope;
        this.inputParameters = $.inputParameters;
        this.maximumExecutionFrequency = $.maximumExecutionFrequency;
        this.regionIdsScope = $.regionIdsScope;
        this.resourceGroupIdsScope = $.resourceGroupIdsScope;
        this.resourceTypesScopes = $.resourceTypesScopes;
        this.riskLevel = $.riskLevel;
        this.sourceIdentifier = $.sourceIdentifier;
        this.sourceOwner = $.sourceOwner;
        this.status = $.status;
        this.tagKeyScope = $.tagKeyScope;
        this.tagValueScope = $.tagValueScope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AggregateConfigRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AggregateConfigRuleState $;

        public Builder() {
            $ = new AggregateConfigRuleState();
        }

        public Builder(AggregateConfigRuleState defaults) {
            $ = new AggregateConfigRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregateConfigRuleName The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder aggregateConfigRuleName(@Nullable Output<String> aggregateConfigRuleName) {
            $.aggregateConfigRuleName = aggregateConfigRuleName;
            return this;
        }

        /**
         * @param aggregateConfigRuleName The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder aggregateConfigRuleName(String aggregateConfigRuleName) {
            return aggregateConfigRuleName(Output.of(aggregateConfigRuleName));
        }

        /**
         * @param aggregatorId The Aggregator Id.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorId(@Nullable Output<String> aggregatorId) {
            $.aggregatorId = aggregatorId;
            return this;
        }

        /**
         * @param aggregatorId The Aggregator Id.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorId(String aggregatorId) {
            return aggregatorId(Output.of(aggregatorId));
        }

        /**
         * @param configRuleId (Available since v1.141.0) The rule ID of Aggregate Config Rule.
         * 
         * @return builder
         * 
         */
        public Builder configRuleId(@Nullable Output<String> configRuleId) {
            $.configRuleId = configRuleId;
            return this;
        }

        /**
         * @param configRuleId (Available since v1.141.0) The rule ID of Aggregate Config Rule.
         * 
         * @return builder
         * 
         */
        public Builder configRuleId(String configRuleId) {
            return configRuleId(Output.of(configRuleId));
        }

        /**
         * @param configRuleTriggerTypes The trigger type of the rule. Valid values: `ConfigurationItemChangeNotification`: The rule is triggered upon configuration changes. `ScheduledNotification`: The rule is triggered as scheduled.
         * 
         * @return builder
         * 
         */
        public Builder configRuleTriggerTypes(@Nullable Output<String> configRuleTriggerTypes) {
            $.configRuleTriggerTypes = configRuleTriggerTypes;
            return this;
        }

        /**
         * @param configRuleTriggerTypes The trigger type of the rule. Valid values: `ConfigurationItemChangeNotification`: The rule is triggered upon configuration changes. `ScheduledNotification`: The rule is triggered as scheduled.
         * 
         * @return builder
         * 
         */
        public Builder configRuleTriggerTypes(String configRuleTriggerTypes) {
            return configRuleTriggerTypes(Output.of(configRuleTriggerTypes));
        }

        /**
         * @param description The description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param excludeResourceIdsScope The rule monitors excluded resource IDs, multiple of which are separated by commas, only applies to rules created based on managed rules, , custom rule this field is empty.
         * 
         * @return builder
         * 
         */
        public Builder excludeResourceIdsScope(@Nullable Output<String> excludeResourceIdsScope) {
            $.excludeResourceIdsScope = excludeResourceIdsScope;
            return this;
        }

        /**
         * @param excludeResourceIdsScope The rule monitors excluded resource IDs, multiple of which are separated by commas, only applies to rules created based on managed rules, , custom rule this field is empty.
         * 
         * @return builder
         * 
         */
        public Builder excludeResourceIdsScope(String excludeResourceIdsScope) {
            return excludeResourceIdsScope(Output.of(excludeResourceIdsScope));
        }

        /**
         * @param inputParameters The settings map of the input parameters for the rule.
         * 
         * @return builder
         * 
         */
        public Builder inputParameters(@Nullable Output<Map<String,Object>> inputParameters) {
            $.inputParameters = inputParameters;
            return this;
        }

        /**
         * @param inputParameters The settings map of the input parameters for the rule.
         * 
         * @return builder
         * 
         */
        public Builder inputParameters(Map<String,Object> inputParameters) {
            return inputParameters(Output.of(inputParameters));
        }

        /**
         * @param maximumExecutionFrequency The frequency of the compliance evaluations. Valid values:  `One_Hour`, `Three_Hours`, `Six_Hours`, `Twelve_Hours`, `TwentyFour_Hours`. System default value is `TwentyFour_Hours` and valid when the `config_rule_trigger_types` is `ScheduledNotification`.
         * 
         * @return builder
         * 
         */
        public Builder maximumExecutionFrequency(@Nullable Output<String> maximumExecutionFrequency) {
            $.maximumExecutionFrequency = maximumExecutionFrequency;
            return this;
        }

        /**
         * @param maximumExecutionFrequency The frequency of the compliance evaluations. Valid values:  `One_Hour`, `Three_Hours`, `Six_Hours`, `Twelve_Hours`, `TwentyFour_Hours`. System default value is `TwentyFour_Hours` and valid when the `config_rule_trigger_types` is `ScheduledNotification`.
         * 
         * @return builder
         * 
         */
        public Builder maximumExecutionFrequency(String maximumExecutionFrequency) {
            return maximumExecutionFrequency(Output.of(maximumExecutionFrequency));
        }

        /**
         * @param regionIdsScope The rule monitors region IDs, separated by commas, only applies to rules created based on managed rules.
         * 
         * @return builder
         * 
         */
        public Builder regionIdsScope(@Nullable Output<String> regionIdsScope) {
            $.regionIdsScope = regionIdsScope;
            return this;
        }

        /**
         * @param regionIdsScope The rule monitors region IDs, separated by commas, only applies to rules created based on managed rules.
         * 
         * @return builder
         * 
         */
        public Builder regionIdsScope(String regionIdsScope) {
            return regionIdsScope(Output.of(regionIdsScope));
        }

        /**
         * @param resourceGroupIdsScope The rule monitors resource group IDs, separated by commas, only applies to rules created based on managed rules.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupIdsScope(@Nullable Output<String> resourceGroupIdsScope) {
            $.resourceGroupIdsScope = resourceGroupIdsScope;
            return this;
        }

        /**
         * @param resourceGroupIdsScope The rule monitors resource group IDs, separated by commas, only applies to rules created based on managed rules.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupIdsScope(String resourceGroupIdsScope) {
            return resourceGroupIdsScope(Output.of(resourceGroupIdsScope));
        }

        /**
         * @param resourceTypesScopes Resource types to be evaluated. [Alibaba Cloud services that support Cloud Config.](https://www.alibabacloud.com/help/en/doc-detail/127411.htm)
         * 
         * @return builder
         * 
         */
        public Builder resourceTypesScopes(@Nullable Output<List<String>> resourceTypesScopes) {
            $.resourceTypesScopes = resourceTypesScopes;
            return this;
        }

        /**
         * @param resourceTypesScopes Resource types to be evaluated. [Alibaba Cloud services that support Cloud Config.](https://www.alibabacloud.com/help/en/doc-detail/127411.htm)
         * 
         * @return builder
         * 
         */
        public Builder resourceTypesScopes(List<String> resourceTypesScopes) {
            return resourceTypesScopes(Output.of(resourceTypesScopes));
        }

        /**
         * @param resourceTypesScopes Resource types to be evaluated. [Alibaba Cloud services that support Cloud Config.](https://www.alibabacloud.com/help/en/doc-detail/127411.htm)
         * 
         * @return builder
         * 
         */
        public Builder resourceTypesScopes(String... resourceTypesScopes) {
            return resourceTypesScopes(List.of(resourceTypesScopes));
        }

        /**
         * @param riskLevel The risk level of the resources that are not compliant with the rule. Valid values:  `1`: critical `2`: warning `3`: info.
         * 
         * @return builder
         * 
         */
        public Builder riskLevel(@Nullable Output<Integer> riskLevel) {
            $.riskLevel = riskLevel;
            return this;
        }

        /**
         * @param riskLevel The risk level of the resources that are not compliant with the rule. Valid values:  `1`: critical `2`: warning `3`: info.
         * 
         * @return builder
         * 
         */
        public Builder riskLevel(Integer riskLevel) {
            return riskLevel(Output.of(riskLevel));
        }

        /**
         * @param sourceIdentifier The identifier of the rule. For a managed rule, the value is the identifier of the managed rule. For a custom rule, the value is the ARN of the custom rule. Using managed rules, refer to [List of Managed rules.](https://www.alibabacloud.com/help/en/doc-detail/127404.htm)
         * 
         * @return builder
         * 
         */
        public Builder sourceIdentifier(@Nullable Output<String> sourceIdentifier) {
            $.sourceIdentifier = sourceIdentifier;
            return this;
        }

        /**
         * @param sourceIdentifier The identifier of the rule. For a managed rule, the value is the identifier of the managed rule. For a custom rule, the value is the ARN of the custom rule. Using managed rules, refer to [List of Managed rules.](https://www.alibabacloud.com/help/en/doc-detail/127404.htm)
         * 
         * @return builder
         * 
         */
        public Builder sourceIdentifier(String sourceIdentifier) {
            return sourceIdentifier(Output.of(sourceIdentifier));
        }

        /**
         * @param sourceOwner Specifies whether you or Alibaba Cloud owns and manages the rule. Valid values: `CUSTOM_FC`: The rule is a custom rule and you own the rule. `ALIYUN`: The rule is a managed rule and Alibaba Cloud owns the rule.
         * 
         * @return builder
         * 
         */
        public Builder sourceOwner(@Nullable Output<String> sourceOwner) {
            $.sourceOwner = sourceOwner;
            return this;
        }

        /**
         * @param sourceOwner Specifies whether you or Alibaba Cloud owns and manages the rule. Valid values: `CUSTOM_FC`: The rule is a custom rule and you own the rule. `ALIYUN`: The rule is a managed rule and Alibaba Cloud owns the rule.
         * 
         * @return builder
         * 
         */
        public Builder sourceOwner(String sourceOwner) {
            return sourceOwner(Output.of(sourceOwner));
        }

        /**
         * @param status The rule status. The valid values: `ACTIVE`, `INACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The rule status. The valid values: `ACTIVE`, `INACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tagKeyScope The rule monitors the tag key, only applies to rules created based on managed rules.
         * 
         * @return builder
         * 
         */
        public Builder tagKeyScope(@Nullable Output<String> tagKeyScope) {
            $.tagKeyScope = tagKeyScope;
            return this;
        }

        /**
         * @param tagKeyScope The rule monitors the tag key, only applies to rules created based on managed rules.
         * 
         * @return builder
         * 
         */
        public Builder tagKeyScope(String tagKeyScope) {
            return tagKeyScope(Output.of(tagKeyScope));
        }

        /**
         * @param tagValueScope The rule monitors the tag value, use with the `tag_key_scope` options. only applies to rules created based on managed rules.
         * 
         * @return builder
         * 
         */
        public Builder tagValueScope(@Nullable Output<String> tagValueScope) {
            $.tagValueScope = tagValueScope;
            return this;
        }

        /**
         * @param tagValueScope The rule monitors the tag value, use with the `tag_key_scope` options. only applies to rules created based on managed rules.
         * 
         * @return builder
         * 
         */
        public Builder tagValueScope(String tagValueScope) {
            return tagValueScope(Output.of(tagValueScope));
        }

        public AggregateConfigRuleState build() {
            return $;
        }
    }

}
