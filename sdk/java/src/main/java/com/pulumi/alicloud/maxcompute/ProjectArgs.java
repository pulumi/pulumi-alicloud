// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.maxcompute;

import com.pulumi.alicloud.maxcompute.inputs.ProjectIpWhiteListArgs;
import com.pulumi.alicloud.maxcompute.inputs.ProjectPropertiesArgs;
import com.pulumi.alicloud.maxcompute.inputs.ProjectSecurityPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * Comments of project
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Comments of project
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Default Computing Resource Group
     * 
     */
    @Import(name="defaultQuota")
    private @Nullable Output<String> defaultQuota;

    /**
     * @return Default Computing Resource Group
     * 
     */
    public Optional<Output<String>> defaultQuota() {
        return Optional.ofNullable(this.defaultQuota);
    }

    /**
     * IP whitelist. See `ip_white_list` below.
     * 
     */
    @Import(name="ipWhiteList")
    private @Nullable Output<ProjectIpWhiteListArgs> ipWhiteList;

    /**
     * @return IP whitelist. See `ip_white_list` below.
     * 
     */
    public Optional<Output<ProjectIpWhiteListArgs>> ipWhiteList() {
        return Optional.ofNullable(this.ipWhiteList);
    }

    /**
     * Quota payment type, support `PayAsYouGo`, `Subscription`, `Dev`.
     * 
     */
    @Import(name="productType")
    private @Nullable Output<String> productType;

    /**
     * @return Quota payment type, support `PayAsYouGo`, `Subscription`, `Dev`.
     * 
     */
    public Optional<Output<String>> productType() {
        return Optional.ofNullable(this.productType);
    }

    /**
     * The name of the project
     * 
     */
    @Import(name="projectName", required=true)
    private Output<String> projectName;

    /**
     * @return The name of the project
     * 
     */
    public Output<String> projectName() {
        return this.projectName;
    }

    /**
     * Project base attributes. See `properties` below.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<ProjectPropertiesArgs> properties;

    /**
     * @return Project base attributes. See `properties` below.
     * 
     */
    public Optional<Output<ProjectPropertiesArgs>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Security-related attributes. See `security_properties` below.
     * 
     */
    @Import(name="securityProperties")
    private @Nullable Output<ProjectSecurityPropertiesArgs> securityProperties;

    /**
     * @return Security-related attributes. See `security_properties` below.
     * 
     */
    public Optional<Output<ProjectSecurityPropertiesArgs>> securityProperties() {
        return Optional.ofNullable(this.securityProperties);
    }

    private ProjectArgs() {}

    private ProjectArgs(ProjectArgs $) {
        this.comment = $.comment;
        this.defaultQuota = $.defaultQuota;
        this.ipWhiteList = $.ipWhiteList;
        this.productType = $.productType;
        this.projectName = $.projectName;
        this.properties = $.properties;
        this.securityProperties = $.securityProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectArgs $;

        public Builder() {
            $ = new ProjectArgs();
        }

        public Builder(ProjectArgs defaults) {
            $ = new ProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Comments of project
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Comments of project
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param defaultQuota Default Computing Resource Group
         * 
         * @return builder
         * 
         */
        public Builder defaultQuota(@Nullable Output<String> defaultQuota) {
            $.defaultQuota = defaultQuota;
            return this;
        }

        /**
         * @param defaultQuota Default Computing Resource Group
         * 
         * @return builder
         * 
         */
        public Builder defaultQuota(String defaultQuota) {
            return defaultQuota(Output.of(defaultQuota));
        }

        /**
         * @param ipWhiteList IP whitelist. See `ip_white_list` below.
         * 
         * @return builder
         * 
         */
        public Builder ipWhiteList(@Nullable Output<ProjectIpWhiteListArgs> ipWhiteList) {
            $.ipWhiteList = ipWhiteList;
            return this;
        }

        /**
         * @param ipWhiteList IP whitelist. See `ip_white_list` below.
         * 
         * @return builder
         * 
         */
        public Builder ipWhiteList(ProjectIpWhiteListArgs ipWhiteList) {
            return ipWhiteList(Output.of(ipWhiteList));
        }

        /**
         * @param productType Quota payment type, support `PayAsYouGo`, `Subscription`, `Dev`.
         * 
         * @return builder
         * 
         */
        public Builder productType(@Nullable Output<String> productType) {
            $.productType = productType;
            return this;
        }

        /**
         * @param productType Quota payment type, support `PayAsYouGo`, `Subscription`, `Dev`.
         * 
         * @return builder
         * 
         */
        public Builder productType(String productType) {
            return productType(Output.of(productType));
        }

        /**
         * @param projectName The name of the project
         * 
         * @return builder
         * 
         */
        public Builder projectName(Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName The name of the project
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param properties Project base attributes. See `properties` below.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<ProjectPropertiesArgs> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Project base attributes. See `properties` below.
         * 
         * @return builder
         * 
         */
        public Builder properties(ProjectPropertiesArgs properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param securityProperties Security-related attributes. See `security_properties` below.
         * 
         * @return builder
         * 
         */
        public Builder securityProperties(@Nullable Output<ProjectSecurityPropertiesArgs> securityProperties) {
            $.securityProperties = securityProperties;
            return this;
        }

        /**
         * @param securityProperties Security-related attributes. See `security_properties` below.
         * 
         * @return builder
         * 
         */
        public Builder securityProperties(ProjectSecurityPropertiesArgs securityProperties) {
            return securityProperties(Output.of(securityProperties));
        }

        public ProjectArgs build() {
            if ($.projectName == null) {
                throw new MissingRequiredPropertyException("ProjectArgs", "projectName");
            }
            return $;
        }
    }

}
