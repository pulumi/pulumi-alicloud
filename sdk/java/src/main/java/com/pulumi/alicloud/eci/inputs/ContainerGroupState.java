// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eci.inputs;

import com.pulumi.alicloud.eci.inputs.ContainerGroupAcrRegistryInfoArgs;
import com.pulumi.alicloud.eci.inputs.ContainerGroupContainerArgs;
import com.pulumi.alicloud.eci.inputs.ContainerGroupDnsConfigArgs;
import com.pulumi.alicloud.eci.inputs.ContainerGroupHostAliasArgs;
import com.pulumi.alicloud.eci.inputs.ContainerGroupImageRegistryCredentialArgs;
import com.pulumi.alicloud.eci.inputs.ContainerGroupInitContainerArgs;
import com.pulumi.alicloud.eci.inputs.ContainerGroupSecurityContextArgs;
import com.pulumi.alicloud.eci.inputs.ContainerGroupVolumeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerGroupState extends com.pulumi.resources.ResourceArgs {

    public static final ContainerGroupState Empty = new ContainerGroupState();

    /**
     * The ACR enterprise edition example properties. See `acr_registry_info` below.
     * 
     */
    @Import(name="acrRegistryInfos")
    private @Nullable Output<List<ContainerGroupAcrRegistryInfoArgs>> acrRegistryInfos;

    /**
     * @return The ACR enterprise edition example properties. See `acr_registry_info` below.
     * 
     */
    public Optional<Output<List<ContainerGroupAcrRegistryInfoArgs>>> acrRegistryInfos() {
        return Optional.ofNullable(this.acrRegistryInfos);
    }

    /**
     * Specifies whether to automatically create an EIP and bind the EIP to the elastic container instance.
     * 
     */
    @Import(name="autoCreateEip")
    private @Nullable Output<Boolean> autoCreateEip;

    /**
     * @return Specifies whether to automatically create an EIP and bind the EIP to the elastic container instance.
     * 
     */
    public Optional<Output<Boolean>> autoCreateEip() {
        return Optional.ofNullable(this.autoCreateEip);
    }

    /**
     * Specifies whether to automatically match the image cache. Default value: `false`. Valid values: `true` and `false`.
     * 
     */
    @Import(name="autoMatchImageCache")
    private @Nullable Output<Boolean> autoMatchImageCache;

    /**
     * @return Specifies whether to automatically match the image cache. Default value: `false`. Valid values: `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> autoMatchImageCache() {
        return Optional.ofNullable(this.autoMatchImageCache);
    }

    /**
     * The name of the container group.
     * 
     */
    @Import(name="containerGroupName")
    private @Nullable Output<String> containerGroupName;

    /**
     * @return The name of the container group.
     * 
     */
    public Optional<Output<String>> containerGroupName() {
        return Optional.ofNullable(this.containerGroupName);
    }

    /**
     * The list of containers. See `containers` below.
     * 
     */
    @Import(name="containers")
    private @Nullable Output<List<ContainerGroupContainerArgs>> containers;

    /**
     * @return The list of containers. See `containers` below.
     * 
     */
    public Optional<Output<List<ContainerGroupContainerArgs>>> containers() {
        return Optional.ofNullable(this.containers);
    }

    /**
     * The amount of CPU resources allocated to the container group.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<Double> cpu;

    /**
     * @return The amount of CPU resources allocated to the container group.
     * 
     */
    public Optional<Output<Double>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * The structure of dnsConfig. See `dns_config` below.
     * 
     */
    @Import(name="dnsConfig")
    private @Nullable Output<ContainerGroupDnsConfigArgs> dnsConfig;

    /**
     * @return The structure of dnsConfig. See `dns_config` below.
     * 
     */
    public Optional<Output<ContainerGroupDnsConfigArgs>> dnsConfig() {
        return Optional.ofNullable(this.dnsConfig);
    }

    /**
     * The bandwidth of the EIP. Default value: `5`.
     * 
     */
    @Import(name="eipBandwidth")
    private @Nullable Output<Integer> eipBandwidth;

    /**
     * @return The bandwidth of the EIP. Default value: `5`.
     * 
     */
    public Optional<Output<Integer>> eipBandwidth() {
        return Optional.ofNullable(this.eipBandwidth);
    }

    /**
     * The ID of the elastic IP address (EIP).
     * 
     */
    @Import(name="eipInstanceId")
    private @Nullable Output<String> eipInstanceId;

    /**
     * @return The ID of the elastic IP address (EIP).
     * 
     */
    public Optional<Output<String>> eipInstanceId() {
        return Optional.ofNullable(this.eipInstanceId);
    }

    /**
     * HostAliases. See `host_aliases` below.
     * 
     */
    @Import(name="hostAliases")
    private @Nullable Output<List<ContainerGroupHostAliasArgs>> hostAliases;

    /**
     * @return HostAliases. See `host_aliases` below.
     * 
     */
    public Optional<Output<List<ContainerGroupHostAliasArgs>>> hostAliases() {
        return Optional.ofNullable(this.hostAliases);
    }

    /**
     * The image registry credential. See `image_registry_credential` below.
     * 
     */
    @Import(name="imageRegistryCredentials")
    private @Nullable Output<List<ContainerGroupImageRegistryCredentialArgs>> imageRegistryCredentials;

    /**
     * @return The image registry credential. See `image_registry_credential` below.
     * 
     */
    public Optional<Output<List<ContainerGroupImageRegistryCredentialArgs>>> imageRegistryCredentials() {
        return Optional.ofNullable(this.imageRegistryCredentials);
    }

    /**
     * The list of initContainers. See `init_containers` below.
     * 
     */
    @Import(name="initContainers")
    private @Nullable Output<List<ContainerGroupInitContainerArgs>> initContainers;

    /**
     * @return The list of initContainers. See `init_containers` below.
     * 
     */
    public Optional<Output<List<ContainerGroupInitContainerArgs>>> initContainers() {
        return Optional.ofNullable(this.initContainers);
    }

    /**
     * The address of the self-built mirror warehouse. When creating an image cache using an image in a self-built image repository with a self-signed certificate, you need to configure this parameter to skip certificate authentication to avoid image pull failure due to certificate authentication failure.
     * 
     */
    @Import(name="insecureRegistry")
    private @Nullable Output<String> insecureRegistry;

    /**
     * @return The address of the self-built mirror warehouse. When creating an image cache using an image in a self-built image repository with a self-signed certificate, you need to configure this parameter to skip certificate authentication to avoid image pull failure due to certificate authentication failure.
     * 
     */
    public Optional<Output<String>> insecureRegistry() {
        return Optional.ofNullable(this.insecureRegistry);
    }

    /**
     * The type of the ECS instance.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return The type of the ECS instance.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * (Available since v1.170.0) The Public IP of the container group.
     * 
     */
    @Import(name="internetIp")
    private @Nullable Output<String> internetIp;

    /**
     * @return (Available since v1.170.0) The Public IP of the container group.
     * 
     */
    public Optional<Output<String>> internetIp() {
        return Optional.ofNullable(this.internetIp);
    }

    /**
     * (Available since v1.170.0) The Private IP of the container group.
     * 
     */
    @Import(name="intranetIp")
    private @Nullable Output<String> intranetIp;

    /**
     * @return (Available since v1.170.0) The Private IP of the container group.
     * 
     */
    public Optional<Output<String>> intranetIp() {
        return Optional.ofNullable(this.intranetIp);
    }

    /**
     * The amount of memory resources allocated to the container group.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Double> memory;

    /**
     * @return The amount of memory resources allocated to the container group.
     * 
     */
    public Optional<Output<Double>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * The address of the self-built mirror warehouse. When creating an image cache from an image in a self-built image repository using the HTTP protocol, you need to configure this parameter so that the ECI uses the HTTP protocol to pull the image to avoid image pull failure due to different protocols.
     * 
     */
    @Import(name="plainHttpRegistry")
    private @Nullable Output<String> plainHttpRegistry;

    /**
     * @return The address of the self-built mirror warehouse. When creating an image cache from an image in a self-built image repository using the HTTP protocol, you need to configure this parameter so that the ECI uses the HTTP protocol to pull the image to avoid image pull failure due to different protocols.
     * 
     */
    public Optional<Output<String>> plainHttpRegistry() {
        return Optional.ofNullable(this.plainHttpRegistry);
    }

    /**
     * The RAM role that the container group assumes. ECI and ECS share the same RAM role.
     * 
     */
    @Import(name="ramRoleName")
    private @Nullable Output<String> ramRoleName;

    /**
     * @return The RAM role that the container group assumes. ECI and ECS share the same RAM role.
     * 
     */
    public Optional<Output<String>> ramRoleName() {
        return Optional.ofNullable(this.ramRoleName);
    }

    /**
     * The ID of the resource group. **NOTE:** From version 1.208.0, `resource_group_id` can be modified.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group. **NOTE:** From version 1.208.0, `resource_group_id` can be modified.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The restart policy of the container group. Valid values: `Always`, `Never`, `OnFailure`.
     * 
     */
    @Import(name="restartPolicy")
    private @Nullable Output<String> restartPolicy;

    /**
     * @return The restart policy of the container group. Valid values: `Always`, `Never`, `OnFailure`.
     * 
     */
    public Optional<Output<String>> restartPolicy() {
        return Optional.ofNullable(this.restartPolicy);
    }

    /**
     * The security context of the container group. See `security_context` below.
     * 
     */
    @Import(name="securityContext")
    private @Nullable Output<ContainerGroupSecurityContextArgs> securityContext;

    /**
     * @return The security context of the container group. See `security_context` below.
     * 
     */
    public Optional<Output<ContainerGroupSecurityContextArgs>> securityContext() {
        return Optional.ofNullable(this.securityContext);
    }

    /**
     * The ID of the security group to which the container group belongs. Container groups within the same security group can access each other.
     * 
     */
    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    /**
     * @return The ID of the security group to which the container group belongs. Container groups within the same security group can access each other.
     * 
     */
    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    /**
     * The status of container group.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of container group.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A mapping of tags to assign to the resource.
     * - Key: It can be up to 64 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It cannot be a null string.
     * - Value: It can be up to 128 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It can be a null string.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * - Key: It can be up to 64 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It cannot be a null string.
     * - Value: It can be up to 128 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It can be a null string.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The list of volumes. See `volumes` below.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<ContainerGroupVolumeArgs>> volumes;

    /**
     * @return The list of volumes. See `volumes` below.
     * 
     */
    public Optional<Output<List<ContainerGroupVolumeArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    /**
     * The ID of the VSwitch. Currently, container groups can only be deployed in VPC networks. The number of IP addresses in the VSwitch CIDR block determines the maximum number of container groups that can be created in the VSwitch. Before you can create an ECI instance, plan the CIDR block of the VSwitch.
     * **NOTE:** From version 1.208.0, You can specify up to 10 `vswitch_id`. Separate multiple vSwitch IDs with commas (,), such as vsw-***,vsw-***.  attribute `vswitch_id` updating diff will be ignored when you set multiple vSwitchIds, there is only one valid `vswitch_id` exists in the set vSwitchIds.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of the VSwitch. Currently, container groups can only be deployed in VPC networks. The number of IP addresses in the VSwitch CIDR block determines the maximum number of container groups that can be created in the VSwitch. Before you can create an ECI instance, plan the CIDR block of the VSwitch.
     * **NOTE:** From version 1.208.0, You can specify up to 10 `vswitch_id`. Separate multiple vSwitch IDs with commas (,), such as vsw-***,vsw-***.  attribute `vswitch_id` updating diff will be ignored when you set multiple vSwitchIds, there is only one valid `vswitch_id` exists in the set vSwitchIds.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    /**
     * The ID of the zone where you want to deploy the container group. If no value is specified, the system assigns a zone to the container group. By default, no value is specified.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The ID of the zone where you want to deploy the container group. If no value is specified, the system assigns a zone to the container group. By default, no value is specified.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private ContainerGroupState() {}

    private ContainerGroupState(ContainerGroupState $) {
        this.acrRegistryInfos = $.acrRegistryInfos;
        this.autoCreateEip = $.autoCreateEip;
        this.autoMatchImageCache = $.autoMatchImageCache;
        this.containerGroupName = $.containerGroupName;
        this.containers = $.containers;
        this.cpu = $.cpu;
        this.dnsConfig = $.dnsConfig;
        this.eipBandwidth = $.eipBandwidth;
        this.eipInstanceId = $.eipInstanceId;
        this.hostAliases = $.hostAliases;
        this.imageRegistryCredentials = $.imageRegistryCredentials;
        this.initContainers = $.initContainers;
        this.insecureRegistry = $.insecureRegistry;
        this.instanceType = $.instanceType;
        this.internetIp = $.internetIp;
        this.intranetIp = $.intranetIp;
        this.memory = $.memory;
        this.plainHttpRegistry = $.plainHttpRegistry;
        this.ramRoleName = $.ramRoleName;
        this.resourceGroupId = $.resourceGroupId;
        this.restartPolicy = $.restartPolicy;
        this.securityContext = $.securityContext;
        this.securityGroupId = $.securityGroupId;
        this.status = $.status;
        this.tags = $.tags;
        this.volumes = $.volumes;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerGroupState $;

        public Builder() {
            $ = new ContainerGroupState();
        }

        public Builder(ContainerGroupState defaults) {
            $ = new ContainerGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acrRegistryInfos The ACR enterprise edition example properties. See `acr_registry_info` below.
         * 
         * @return builder
         * 
         */
        public Builder acrRegistryInfos(@Nullable Output<List<ContainerGroupAcrRegistryInfoArgs>> acrRegistryInfos) {
            $.acrRegistryInfos = acrRegistryInfos;
            return this;
        }

        /**
         * @param acrRegistryInfos The ACR enterprise edition example properties. See `acr_registry_info` below.
         * 
         * @return builder
         * 
         */
        public Builder acrRegistryInfos(List<ContainerGroupAcrRegistryInfoArgs> acrRegistryInfos) {
            return acrRegistryInfos(Output.of(acrRegistryInfos));
        }

        /**
         * @param acrRegistryInfos The ACR enterprise edition example properties. See `acr_registry_info` below.
         * 
         * @return builder
         * 
         */
        public Builder acrRegistryInfos(ContainerGroupAcrRegistryInfoArgs... acrRegistryInfos) {
            return acrRegistryInfos(List.of(acrRegistryInfos));
        }

        /**
         * @param autoCreateEip Specifies whether to automatically create an EIP and bind the EIP to the elastic container instance.
         * 
         * @return builder
         * 
         */
        public Builder autoCreateEip(@Nullable Output<Boolean> autoCreateEip) {
            $.autoCreateEip = autoCreateEip;
            return this;
        }

        /**
         * @param autoCreateEip Specifies whether to automatically create an EIP and bind the EIP to the elastic container instance.
         * 
         * @return builder
         * 
         */
        public Builder autoCreateEip(Boolean autoCreateEip) {
            return autoCreateEip(Output.of(autoCreateEip));
        }

        /**
         * @param autoMatchImageCache Specifies whether to automatically match the image cache. Default value: `false`. Valid values: `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoMatchImageCache(@Nullable Output<Boolean> autoMatchImageCache) {
            $.autoMatchImageCache = autoMatchImageCache;
            return this;
        }

        /**
         * @param autoMatchImageCache Specifies whether to automatically match the image cache. Default value: `false`. Valid values: `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoMatchImageCache(Boolean autoMatchImageCache) {
            return autoMatchImageCache(Output.of(autoMatchImageCache));
        }

        /**
         * @param containerGroupName The name of the container group.
         * 
         * @return builder
         * 
         */
        public Builder containerGroupName(@Nullable Output<String> containerGroupName) {
            $.containerGroupName = containerGroupName;
            return this;
        }

        /**
         * @param containerGroupName The name of the container group.
         * 
         * @return builder
         * 
         */
        public Builder containerGroupName(String containerGroupName) {
            return containerGroupName(Output.of(containerGroupName));
        }

        /**
         * @param containers The list of containers. See `containers` below.
         * 
         * @return builder
         * 
         */
        public Builder containers(@Nullable Output<List<ContainerGroupContainerArgs>> containers) {
            $.containers = containers;
            return this;
        }

        /**
         * @param containers The list of containers. See `containers` below.
         * 
         * @return builder
         * 
         */
        public Builder containers(List<ContainerGroupContainerArgs> containers) {
            return containers(Output.of(containers));
        }

        /**
         * @param containers The list of containers. See `containers` below.
         * 
         * @return builder
         * 
         */
        public Builder containers(ContainerGroupContainerArgs... containers) {
            return containers(List.of(containers));
        }

        /**
         * @param cpu The amount of CPU resources allocated to the container group.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<Double> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The amount of CPU resources allocated to the container group.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Double cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param dnsConfig The structure of dnsConfig. See `dns_config` below.
         * 
         * @return builder
         * 
         */
        public Builder dnsConfig(@Nullable Output<ContainerGroupDnsConfigArgs> dnsConfig) {
            $.dnsConfig = dnsConfig;
            return this;
        }

        /**
         * @param dnsConfig The structure of dnsConfig. See `dns_config` below.
         * 
         * @return builder
         * 
         */
        public Builder dnsConfig(ContainerGroupDnsConfigArgs dnsConfig) {
            return dnsConfig(Output.of(dnsConfig));
        }

        /**
         * @param eipBandwidth The bandwidth of the EIP. Default value: `5`.
         * 
         * @return builder
         * 
         */
        public Builder eipBandwidth(@Nullable Output<Integer> eipBandwidth) {
            $.eipBandwidth = eipBandwidth;
            return this;
        }

        /**
         * @param eipBandwidth The bandwidth of the EIP. Default value: `5`.
         * 
         * @return builder
         * 
         */
        public Builder eipBandwidth(Integer eipBandwidth) {
            return eipBandwidth(Output.of(eipBandwidth));
        }

        /**
         * @param eipInstanceId The ID of the elastic IP address (EIP).
         * 
         * @return builder
         * 
         */
        public Builder eipInstanceId(@Nullable Output<String> eipInstanceId) {
            $.eipInstanceId = eipInstanceId;
            return this;
        }

        /**
         * @param eipInstanceId The ID of the elastic IP address (EIP).
         * 
         * @return builder
         * 
         */
        public Builder eipInstanceId(String eipInstanceId) {
            return eipInstanceId(Output.of(eipInstanceId));
        }

        /**
         * @param hostAliases HostAliases. See `host_aliases` below.
         * 
         * @return builder
         * 
         */
        public Builder hostAliases(@Nullable Output<List<ContainerGroupHostAliasArgs>> hostAliases) {
            $.hostAliases = hostAliases;
            return this;
        }

        /**
         * @param hostAliases HostAliases. See `host_aliases` below.
         * 
         * @return builder
         * 
         */
        public Builder hostAliases(List<ContainerGroupHostAliasArgs> hostAliases) {
            return hostAliases(Output.of(hostAliases));
        }

        /**
         * @param hostAliases HostAliases. See `host_aliases` below.
         * 
         * @return builder
         * 
         */
        public Builder hostAliases(ContainerGroupHostAliasArgs... hostAliases) {
            return hostAliases(List.of(hostAliases));
        }

        /**
         * @param imageRegistryCredentials The image registry credential. See `image_registry_credential` below.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistryCredentials(@Nullable Output<List<ContainerGroupImageRegistryCredentialArgs>> imageRegistryCredentials) {
            $.imageRegistryCredentials = imageRegistryCredentials;
            return this;
        }

        /**
         * @param imageRegistryCredentials The image registry credential. See `image_registry_credential` below.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistryCredentials(List<ContainerGroupImageRegistryCredentialArgs> imageRegistryCredentials) {
            return imageRegistryCredentials(Output.of(imageRegistryCredentials));
        }

        /**
         * @param imageRegistryCredentials The image registry credential. See `image_registry_credential` below.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistryCredentials(ContainerGroupImageRegistryCredentialArgs... imageRegistryCredentials) {
            return imageRegistryCredentials(List.of(imageRegistryCredentials));
        }

        /**
         * @param initContainers The list of initContainers. See `init_containers` below.
         * 
         * @return builder
         * 
         */
        public Builder initContainers(@Nullable Output<List<ContainerGroupInitContainerArgs>> initContainers) {
            $.initContainers = initContainers;
            return this;
        }

        /**
         * @param initContainers The list of initContainers. See `init_containers` below.
         * 
         * @return builder
         * 
         */
        public Builder initContainers(List<ContainerGroupInitContainerArgs> initContainers) {
            return initContainers(Output.of(initContainers));
        }

        /**
         * @param initContainers The list of initContainers. See `init_containers` below.
         * 
         * @return builder
         * 
         */
        public Builder initContainers(ContainerGroupInitContainerArgs... initContainers) {
            return initContainers(List.of(initContainers));
        }

        /**
         * @param insecureRegistry The address of the self-built mirror warehouse. When creating an image cache using an image in a self-built image repository with a self-signed certificate, you need to configure this parameter to skip certificate authentication to avoid image pull failure due to certificate authentication failure.
         * 
         * @return builder
         * 
         */
        public Builder insecureRegistry(@Nullable Output<String> insecureRegistry) {
            $.insecureRegistry = insecureRegistry;
            return this;
        }

        /**
         * @param insecureRegistry The address of the self-built mirror warehouse. When creating an image cache using an image in a self-built image repository with a self-signed certificate, you need to configure this parameter to skip certificate authentication to avoid image pull failure due to certificate authentication failure.
         * 
         * @return builder
         * 
         */
        public Builder insecureRegistry(String insecureRegistry) {
            return insecureRegistry(Output.of(insecureRegistry));
        }

        /**
         * @param instanceType The type of the ECS instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The type of the ECS instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param internetIp (Available since v1.170.0) The Public IP of the container group.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(@Nullable Output<String> internetIp) {
            $.internetIp = internetIp;
            return this;
        }

        /**
         * @param internetIp (Available since v1.170.0) The Public IP of the container group.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(String internetIp) {
            return internetIp(Output.of(internetIp));
        }

        /**
         * @param intranetIp (Available since v1.170.0) The Private IP of the container group.
         * 
         * @return builder
         * 
         */
        public Builder intranetIp(@Nullable Output<String> intranetIp) {
            $.intranetIp = intranetIp;
            return this;
        }

        /**
         * @param intranetIp (Available since v1.170.0) The Private IP of the container group.
         * 
         * @return builder
         * 
         */
        public Builder intranetIp(String intranetIp) {
            return intranetIp(Output.of(intranetIp));
        }

        /**
         * @param memory The amount of memory resources allocated to the container group.
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<Double> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The amount of memory resources allocated to the container group.
         * 
         * @return builder
         * 
         */
        public Builder memory(Double memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param plainHttpRegistry The address of the self-built mirror warehouse. When creating an image cache from an image in a self-built image repository using the HTTP protocol, you need to configure this parameter so that the ECI uses the HTTP protocol to pull the image to avoid image pull failure due to different protocols.
         * 
         * @return builder
         * 
         */
        public Builder plainHttpRegistry(@Nullable Output<String> plainHttpRegistry) {
            $.plainHttpRegistry = plainHttpRegistry;
            return this;
        }

        /**
         * @param plainHttpRegistry The address of the self-built mirror warehouse. When creating an image cache from an image in a self-built image repository using the HTTP protocol, you need to configure this parameter so that the ECI uses the HTTP protocol to pull the image to avoid image pull failure due to different protocols.
         * 
         * @return builder
         * 
         */
        public Builder plainHttpRegistry(String plainHttpRegistry) {
            return plainHttpRegistry(Output.of(plainHttpRegistry));
        }

        /**
         * @param ramRoleName The RAM role that the container group assumes. ECI and ECS share the same RAM role.
         * 
         * @return builder
         * 
         */
        public Builder ramRoleName(@Nullable Output<String> ramRoleName) {
            $.ramRoleName = ramRoleName;
            return this;
        }

        /**
         * @param ramRoleName The RAM role that the container group assumes. ECI and ECS share the same RAM role.
         * 
         * @return builder
         * 
         */
        public Builder ramRoleName(String ramRoleName) {
            return ramRoleName(Output.of(ramRoleName));
        }

        /**
         * @param resourceGroupId The ID of the resource group. **NOTE:** From version 1.208.0, `resource_group_id` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group. **NOTE:** From version 1.208.0, `resource_group_id` can be modified.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param restartPolicy The restart policy of the container group. Valid values: `Always`, `Never`, `OnFailure`.
         * 
         * @return builder
         * 
         */
        public Builder restartPolicy(@Nullable Output<String> restartPolicy) {
            $.restartPolicy = restartPolicy;
            return this;
        }

        /**
         * @param restartPolicy The restart policy of the container group. Valid values: `Always`, `Never`, `OnFailure`.
         * 
         * @return builder
         * 
         */
        public Builder restartPolicy(String restartPolicy) {
            return restartPolicy(Output.of(restartPolicy));
        }

        /**
         * @param securityContext The security context of the container group. See `security_context` below.
         * 
         * @return builder
         * 
         */
        public Builder securityContext(@Nullable Output<ContainerGroupSecurityContextArgs> securityContext) {
            $.securityContext = securityContext;
            return this;
        }

        /**
         * @param securityContext The security context of the container group. See `security_context` below.
         * 
         * @return builder
         * 
         */
        public Builder securityContext(ContainerGroupSecurityContextArgs securityContext) {
            return securityContext(Output.of(securityContext));
        }

        /**
         * @param securityGroupId The ID of the security group to which the container group belongs. Container groups within the same security group can access each other.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId The ID of the security group to which the container group belongs. Container groups within the same security group can access each other.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param status The status of container group.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of container group.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * - Key: It can be up to 64 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It cannot be a null string.
         * - Value: It can be up to 128 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It can be a null string.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * - Key: It can be up to 64 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It cannot be a null string.
         * - Value: It can be up to 128 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It can be a null string.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param volumes The list of volumes. See `volumes` below.
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<ContainerGroupVolumeArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes The list of volumes. See `volumes` below.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<ContainerGroupVolumeArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes The list of volumes. See `volumes` below.
         * 
         * @return builder
         * 
         */
        public Builder volumes(ContainerGroupVolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }

        /**
         * @param vswitchId The ID of the VSwitch. Currently, container groups can only be deployed in VPC networks. The number of IP addresses in the VSwitch CIDR block determines the maximum number of container groups that can be created in the VSwitch. Before you can create an ECI instance, plan the CIDR block of the VSwitch.
         * **NOTE:** From version 1.208.0, You can specify up to 10 `vswitch_id`. Separate multiple vSwitch IDs with commas (,), such as vsw-***,vsw-***.  attribute `vswitch_id` updating diff will be ignored when you set multiple vSwitchIds, there is only one valid `vswitch_id` exists in the set vSwitchIds.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of the VSwitch. Currently, container groups can only be deployed in VPC networks. The number of IP addresses in the VSwitch CIDR block determines the maximum number of container groups that can be created in the VSwitch. Before you can create an ECI instance, plan the CIDR block of the VSwitch.
         * **NOTE:** From version 1.208.0, You can specify up to 10 `vswitch_id`. Separate multiple vSwitch IDs with commas (,), such as vsw-***,vsw-***.  attribute `vswitch_id` updating diff will be ignored when you set multiple vSwitchIds, there is only one valid `vswitch_id` exists in the set vSwitchIds.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The ID of the zone where you want to deploy the container group. If no value is specified, the system assigns a zone to the container group. By default, no value is specified.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The ID of the zone where you want to deploy the container group. If no value is specified, the system assigns a zone to the container group. By default, no value is specified.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ContainerGroupState build() {
            return $;
        }
    }

}
