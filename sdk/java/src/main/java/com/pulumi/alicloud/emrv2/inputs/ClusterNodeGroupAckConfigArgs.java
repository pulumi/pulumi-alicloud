// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.emrv2.inputs;

import com.pulumi.alicloud.emrv2.inputs.ClusterNodeGroupAckConfigCustomAnnotationArgs;
import com.pulumi.alicloud.emrv2.inputs.ClusterNodeGroupAckConfigCustomLabelArgs;
import com.pulumi.alicloud.emrv2.inputs.ClusterNodeGroupAckConfigNodeSelectorArgs;
import com.pulumi.alicloud.emrv2.inputs.ClusterNodeGroupAckConfigPvcArgs;
import com.pulumi.alicloud.emrv2.inputs.ClusterNodeGroupAckConfigTolerationArgs;
import com.pulumi.alicloud.emrv2.inputs.ClusterNodeGroupAckConfigVolumeArgs;
import com.pulumi.alicloud.emrv2.inputs.ClusterNodeGroupAckConfigVolumeMountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNodeGroupAckConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNodeGroupAckConfigArgs Empty = new ClusterNodeGroupAckConfigArgs();

    /**
     * The ack cluster instance id.
     * 
     */
    @Import(name="ackInstanceId", required=true)
    private Output<String> ackInstanceId;

    /**
     * @return The ack cluster instance id.
     * 
     */
    public Output<String> ackInstanceId() {
        return this.ackInstanceId;
    }

    /**
     * The ack cluster custom annotations. See `custom_annotations` below.
     * 
     */
    @Import(name="customAnnotations")
    private @Nullable Output<List<ClusterNodeGroupAckConfigCustomAnnotationArgs>> customAnnotations;

    /**
     * @return The ack cluster custom annotations. See `custom_annotations` below.
     * 
     */
    public Optional<Output<List<ClusterNodeGroupAckConfigCustomAnnotationArgs>>> customAnnotations() {
        return Optional.ofNullable(this.customAnnotations);
    }

    /**
     * The ack cluster custom labels. See `custom_labels` below.
     * 
     */
    @Import(name="customLabels")
    private @Nullable Output<List<ClusterNodeGroupAckConfigCustomLabelArgs>> customLabels;

    /**
     * @return The ack cluster custom labels. See `custom_labels` below.
     * 
     */
    public Optional<Output<List<ClusterNodeGroupAckConfigCustomLabelArgs>>> customLabels() {
        return Optional.ofNullable(this.customLabels);
    }

    /**
     * The job pod resource of limit cpu.
     * 
     */
    @Import(name="limitCpu", required=true)
    private Output<Double> limitCpu;

    /**
     * @return The job pod resource of limit cpu.
     * 
     */
    public Output<Double> limitCpu() {
        return this.limitCpu;
    }

    /**
     * The job pod resource of limit memory.
     * 
     */
    @Import(name="limitMemory", required=true)
    private Output<Double> limitMemory;

    /**
     * @return The job pod resource of limit memory.
     * 
     */
    public Output<Double> limitMemory() {
        return this.limitMemory;
    }

    /**
     * The ack cluster namespace.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The ack cluster namespace.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * The ack cluster node affinity.
     * 
     */
    @Import(name="nodeAffinity")
    private @Nullable Output<String> nodeAffinity;

    /**
     * @return The ack cluster node affinity.
     * 
     */
    public Optional<Output<String>> nodeAffinity() {
        return Optional.ofNullable(this.nodeAffinity);
    }

    /**
     * The ack cluster node selectors for job pods scheduling. See `node_selectors` below.
     * 
     */
    @Import(name="nodeSelectors")
    private @Nullable Output<List<ClusterNodeGroupAckConfigNodeSelectorArgs>> nodeSelectors;

    /**
     * @return The ack cluster node selectors for job pods scheduling. See `node_selectors` below.
     * 
     */
    public Optional<Output<List<ClusterNodeGroupAckConfigNodeSelectorArgs>>> nodeSelectors() {
        return Optional.ofNullable(this.nodeSelectors);
    }

    /**
     * The job pod affinity.
     * 
     */
    @Import(name="podAffinity")
    private @Nullable Output<String> podAffinity;

    /**
     * @return The job pod affinity.
     * 
     */
    public Optional<Output<String>> podAffinity() {
        return Optional.ofNullable(this.podAffinity);
    }

    /**
     * The job pod anti-affinity.
     * 
     */
    @Import(name="podAntiAffinity")
    private @Nullable Output<String> podAntiAffinity;

    /**
     * @return The job pod anti-affinity.
     * 
     */
    public Optional<Output<String>> podAntiAffinity() {
        return Optional.ofNullable(this.podAntiAffinity);
    }

    /**
     * The job pod pre start command.
     * 
     */
    @Import(name="preStartCommands")
    private @Nullable Output<List<String>> preStartCommands;

    /**
     * @return The job pod pre start command.
     * 
     */
    public Optional<Output<List<String>>> preStartCommands() {
        return Optional.ofNullable(this.preStartCommands);
    }

    /**
     * The ack cluster persistent volume claim. See `pvcs` below.
     * 
     */
    @Import(name="pvcs")
    private @Nullable Output<List<ClusterNodeGroupAckConfigPvcArgs>> pvcs;

    /**
     * @return The ack cluster persistent volume claim. See `pvcs` below.
     * 
     */
    public Optional<Output<List<ClusterNodeGroupAckConfigPvcArgs>>> pvcs() {
        return Optional.ofNullable(this.pvcs);
    }

    /**
     * The job pod resource of request cpu.
     * 
     */
    @Import(name="requestCpu", required=true)
    private Output<Double> requestCpu;

    /**
     * @return The job pod resource of request cpu.
     * 
     */
    public Output<Double> requestCpu() {
        return this.requestCpu;
    }

    /**
     * The job pod resource of request memory.
     * 
     */
    @Import(name="requestMemory", required=true)
    private Output<Double> requestMemory;

    /**
     * @return The job pod resource of request memory.
     * 
     */
    public Output<Double> requestMemory() {
        return this.requestMemory;
    }

    /**
     * The ack cluster tolerations. See `tolerations` below.
     * 
     */
    @Import(name="tolerations")
    private @Nullable Output<List<ClusterNodeGroupAckConfigTolerationArgs>> tolerations;

    /**
     * @return The ack cluster tolerations. See `tolerations` below.
     * 
     */
    public Optional<Output<List<ClusterNodeGroupAckConfigTolerationArgs>>> tolerations() {
        return Optional.ofNullable(this.tolerations);
    }

    /**
     * The ack cluster volume mounts. See `volume_mounts` below.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable Output<List<ClusterNodeGroupAckConfigVolumeMountArgs>> volumeMounts;

    /**
     * @return The ack cluster volume mounts. See `volume_mounts` below.
     * 
     */
    public Optional<Output<List<ClusterNodeGroupAckConfigVolumeMountArgs>>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    /**
     * The ack cluster volumes. See `volumes` below.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<ClusterNodeGroupAckConfigVolumeArgs>> volumes;

    /**
     * @return The ack cluster volumes. See `volumes` below.
     * 
     */
    public Optional<Output<List<ClusterNodeGroupAckConfigVolumeArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private ClusterNodeGroupAckConfigArgs() {}

    private ClusterNodeGroupAckConfigArgs(ClusterNodeGroupAckConfigArgs $) {
        this.ackInstanceId = $.ackInstanceId;
        this.customAnnotations = $.customAnnotations;
        this.customLabels = $.customLabels;
        this.limitCpu = $.limitCpu;
        this.limitMemory = $.limitMemory;
        this.namespace = $.namespace;
        this.nodeAffinity = $.nodeAffinity;
        this.nodeSelectors = $.nodeSelectors;
        this.podAffinity = $.podAffinity;
        this.podAntiAffinity = $.podAntiAffinity;
        this.preStartCommands = $.preStartCommands;
        this.pvcs = $.pvcs;
        this.requestCpu = $.requestCpu;
        this.requestMemory = $.requestMemory;
        this.tolerations = $.tolerations;
        this.volumeMounts = $.volumeMounts;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNodeGroupAckConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNodeGroupAckConfigArgs $;

        public Builder() {
            $ = new ClusterNodeGroupAckConfigArgs();
        }

        public Builder(ClusterNodeGroupAckConfigArgs defaults) {
            $ = new ClusterNodeGroupAckConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ackInstanceId The ack cluster instance id.
         * 
         * @return builder
         * 
         */
        public Builder ackInstanceId(Output<String> ackInstanceId) {
            $.ackInstanceId = ackInstanceId;
            return this;
        }

        /**
         * @param ackInstanceId The ack cluster instance id.
         * 
         * @return builder
         * 
         */
        public Builder ackInstanceId(String ackInstanceId) {
            return ackInstanceId(Output.of(ackInstanceId));
        }

        /**
         * @param customAnnotations The ack cluster custom annotations. See `custom_annotations` below.
         * 
         * @return builder
         * 
         */
        public Builder customAnnotations(@Nullable Output<List<ClusterNodeGroupAckConfigCustomAnnotationArgs>> customAnnotations) {
            $.customAnnotations = customAnnotations;
            return this;
        }

        /**
         * @param customAnnotations The ack cluster custom annotations. See `custom_annotations` below.
         * 
         * @return builder
         * 
         */
        public Builder customAnnotations(List<ClusterNodeGroupAckConfigCustomAnnotationArgs> customAnnotations) {
            return customAnnotations(Output.of(customAnnotations));
        }

        /**
         * @param customAnnotations The ack cluster custom annotations. See `custom_annotations` below.
         * 
         * @return builder
         * 
         */
        public Builder customAnnotations(ClusterNodeGroupAckConfigCustomAnnotationArgs... customAnnotations) {
            return customAnnotations(List.of(customAnnotations));
        }

        /**
         * @param customLabels The ack cluster custom labels. See `custom_labels` below.
         * 
         * @return builder
         * 
         */
        public Builder customLabels(@Nullable Output<List<ClusterNodeGroupAckConfigCustomLabelArgs>> customLabels) {
            $.customLabels = customLabels;
            return this;
        }

        /**
         * @param customLabels The ack cluster custom labels. See `custom_labels` below.
         * 
         * @return builder
         * 
         */
        public Builder customLabels(List<ClusterNodeGroupAckConfigCustomLabelArgs> customLabels) {
            return customLabels(Output.of(customLabels));
        }

        /**
         * @param customLabels The ack cluster custom labels. See `custom_labels` below.
         * 
         * @return builder
         * 
         */
        public Builder customLabels(ClusterNodeGroupAckConfigCustomLabelArgs... customLabels) {
            return customLabels(List.of(customLabels));
        }

        /**
         * @param limitCpu The job pod resource of limit cpu.
         * 
         * @return builder
         * 
         */
        public Builder limitCpu(Output<Double> limitCpu) {
            $.limitCpu = limitCpu;
            return this;
        }

        /**
         * @param limitCpu The job pod resource of limit cpu.
         * 
         * @return builder
         * 
         */
        public Builder limitCpu(Double limitCpu) {
            return limitCpu(Output.of(limitCpu));
        }

        /**
         * @param limitMemory The job pod resource of limit memory.
         * 
         * @return builder
         * 
         */
        public Builder limitMemory(Output<Double> limitMemory) {
            $.limitMemory = limitMemory;
            return this;
        }

        /**
         * @param limitMemory The job pod resource of limit memory.
         * 
         * @return builder
         * 
         */
        public Builder limitMemory(Double limitMemory) {
            return limitMemory(Output.of(limitMemory));
        }

        /**
         * @param namespace The ack cluster namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The ack cluster namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param nodeAffinity The ack cluster node affinity.
         * 
         * @return builder
         * 
         */
        public Builder nodeAffinity(@Nullable Output<String> nodeAffinity) {
            $.nodeAffinity = nodeAffinity;
            return this;
        }

        /**
         * @param nodeAffinity The ack cluster node affinity.
         * 
         * @return builder
         * 
         */
        public Builder nodeAffinity(String nodeAffinity) {
            return nodeAffinity(Output.of(nodeAffinity));
        }

        /**
         * @param nodeSelectors The ack cluster node selectors for job pods scheduling. See `node_selectors` below.
         * 
         * @return builder
         * 
         */
        public Builder nodeSelectors(@Nullable Output<List<ClusterNodeGroupAckConfigNodeSelectorArgs>> nodeSelectors) {
            $.nodeSelectors = nodeSelectors;
            return this;
        }

        /**
         * @param nodeSelectors The ack cluster node selectors for job pods scheduling. See `node_selectors` below.
         * 
         * @return builder
         * 
         */
        public Builder nodeSelectors(List<ClusterNodeGroupAckConfigNodeSelectorArgs> nodeSelectors) {
            return nodeSelectors(Output.of(nodeSelectors));
        }

        /**
         * @param nodeSelectors The ack cluster node selectors for job pods scheduling. See `node_selectors` below.
         * 
         * @return builder
         * 
         */
        public Builder nodeSelectors(ClusterNodeGroupAckConfigNodeSelectorArgs... nodeSelectors) {
            return nodeSelectors(List.of(nodeSelectors));
        }

        /**
         * @param podAffinity The job pod affinity.
         * 
         * @return builder
         * 
         */
        public Builder podAffinity(@Nullable Output<String> podAffinity) {
            $.podAffinity = podAffinity;
            return this;
        }

        /**
         * @param podAffinity The job pod affinity.
         * 
         * @return builder
         * 
         */
        public Builder podAffinity(String podAffinity) {
            return podAffinity(Output.of(podAffinity));
        }

        /**
         * @param podAntiAffinity The job pod anti-affinity.
         * 
         * @return builder
         * 
         */
        public Builder podAntiAffinity(@Nullable Output<String> podAntiAffinity) {
            $.podAntiAffinity = podAntiAffinity;
            return this;
        }

        /**
         * @param podAntiAffinity The job pod anti-affinity.
         * 
         * @return builder
         * 
         */
        public Builder podAntiAffinity(String podAntiAffinity) {
            return podAntiAffinity(Output.of(podAntiAffinity));
        }

        /**
         * @param preStartCommands The job pod pre start command.
         * 
         * @return builder
         * 
         */
        public Builder preStartCommands(@Nullable Output<List<String>> preStartCommands) {
            $.preStartCommands = preStartCommands;
            return this;
        }

        /**
         * @param preStartCommands The job pod pre start command.
         * 
         * @return builder
         * 
         */
        public Builder preStartCommands(List<String> preStartCommands) {
            return preStartCommands(Output.of(preStartCommands));
        }

        /**
         * @param preStartCommands The job pod pre start command.
         * 
         * @return builder
         * 
         */
        public Builder preStartCommands(String... preStartCommands) {
            return preStartCommands(List.of(preStartCommands));
        }

        /**
         * @param pvcs The ack cluster persistent volume claim. See `pvcs` below.
         * 
         * @return builder
         * 
         */
        public Builder pvcs(@Nullable Output<List<ClusterNodeGroupAckConfigPvcArgs>> pvcs) {
            $.pvcs = pvcs;
            return this;
        }

        /**
         * @param pvcs The ack cluster persistent volume claim. See `pvcs` below.
         * 
         * @return builder
         * 
         */
        public Builder pvcs(List<ClusterNodeGroupAckConfigPvcArgs> pvcs) {
            return pvcs(Output.of(pvcs));
        }

        /**
         * @param pvcs The ack cluster persistent volume claim. See `pvcs` below.
         * 
         * @return builder
         * 
         */
        public Builder pvcs(ClusterNodeGroupAckConfigPvcArgs... pvcs) {
            return pvcs(List.of(pvcs));
        }

        /**
         * @param requestCpu The job pod resource of request cpu.
         * 
         * @return builder
         * 
         */
        public Builder requestCpu(Output<Double> requestCpu) {
            $.requestCpu = requestCpu;
            return this;
        }

        /**
         * @param requestCpu The job pod resource of request cpu.
         * 
         * @return builder
         * 
         */
        public Builder requestCpu(Double requestCpu) {
            return requestCpu(Output.of(requestCpu));
        }

        /**
         * @param requestMemory The job pod resource of request memory.
         * 
         * @return builder
         * 
         */
        public Builder requestMemory(Output<Double> requestMemory) {
            $.requestMemory = requestMemory;
            return this;
        }

        /**
         * @param requestMemory The job pod resource of request memory.
         * 
         * @return builder
         * 
         */
        public Builder requestMemory(Double requestMemory) {
            return requestMemory(Output.of(requestMemory));
        }

        /**
         * @param tolerations The ack cluster tolerations. See `tolerations` below.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(@Nullable Output<List<ClusterNodeGroupAckConfigTolerationArgs>> tolerations) {
            $.tolerations = tolerations;
            return this;
        }

        /**
         * @param tolerations The ack cluster tolerations. See `tolerations` below.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(List<ClusterNodeGroupAckConfigTolerationArgs> tolerations) {
            return tolerations(Output.of(tolerations));
        }

        /**
         * @param tolerations The ack cluster tolerations. See `tolerations` below.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(ClusterNodeGroupAckConfigTolerationArgs... tolerations) {
            return tolerations(List.of(tolerations));
        }

        /**
         * @param volumeMounts The ack cluster volume mounts. See `volume_mounts` below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(@Nullable Output<List<ClusterNodeGroupAckConfigVolumeMountArgs>> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        /**
         * @param volumeMounts The ack cluster volume mounts. See `volume_mounts` below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(List<ClusterNodeGroupAckConfigVolumeMountArgs> volumeMounts) {
            return volumeMounts(Output.of(volumeMounts));
        }

        /**
         * @param volumeMounts The ack cluster volume mounts. See `volume_mounts` below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(ClusterNodeGroupAckConfigVolumeMountArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        /**
         * @param volumes The ack cluster volumes. See `volumes` below.
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<ClusterNodeGroupAckConfigVolumeArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes The ack cluster volumes. See `volumes` below.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<ClusterNodeGroupAckConfigVolumeArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes The ack cluster volumes. See `volumes` below.
         * 
         * @return builder
         * 
         */
        public Builder volumes(ClusterNodeGroupAckConfigVolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public ClusterNodeGroupAckConfigArgs build() {
            if ($.ackInstanceId == null) {
                throw new MissingRequiredPropertyException("ClusterNodeGroupAckConfigArgs", "ackInstanceId");
            }
            if ($.limitCpu == null) {
                throw new MissingRequiredPropertyException("ClusterNodeGroupAckConfigArgs", "limitCpu");
            }
            if ($.limitMemory == null) {
                throw new MissingRequiredPropertyException("ClusterNodeGroupAckConfigArgs", "limitMemory");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("ClusterNodeGroupAckConfigArgs", "namespace");
            }
            if ($.requestCpu == null) {
                throw new MissingRequiredPropertyException("ClusterNodeGroupAckConfigArgs", "requestCpu");
            }
            if ($.requestMemory == null) {
                throw new MissingRequiredPropertyException("ClusterNodeGroupAckConfigArgs", "requestMemory");
            }
            return $;
        }
    }

}
