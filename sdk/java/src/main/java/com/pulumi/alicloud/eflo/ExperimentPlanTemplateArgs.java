// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo;

import com.pulumi.alicloud.eflo.inputs.ExperimentPlanTemplateTemplatePipelineArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExperimentPlanTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExperimentPlanTemplateArgs Empty = new ExperimentPlanTemplateArgs();

    /**
     * Used to indicate the privacy level of the content or information. It can have the following optional parameters:
     * - private: Indicates that the content is private and restricted to specific users or permission groups. Private content is usually not publicly displayed, and only authorized users can view or edit it.
     * - public: Indicates that the content is public and can be accessed by anyone. Public content is usually viewable by all users and is suitable for sharing information or resources
     * 
     */
    @Import(name="privacyLevel", required=true)
    private Output<String> privacyLevel;

    /**
     * @return Used to indicate the privacy level of the content or information. It can have the following optional parameters:
     * - private: Indicates that the content is private and restricted to specific users or permission groups. Private content is usually not publicly displayed, and only authorized users can view or edit it.
     * - public: Indicates that the content is public and can be accessed by anyone. Public content is usually viewable by all users and is suitable for sharing information or resources
     * 
     */
    public Output<String> privacyLevel() {
        return this.privacyLevel;
    }

    /**
     * Describe the purpose of this template.
     * 
     */
    @Import(name="templateDescription")
    private @Nullable Output<String> templateDescription;

    /**
     * @return Describe the purpose of this template.
     * 
     */
    public Optional<Output<String>> templateDescription() {
        return Optional.ofNullable(this.templateDescription);
    }

    /**
     * Help users identify and select specific templates.
     * 
     */
    @Import(name="templateName", required=true)
    private Output<String> templateName;

    /**
     * @return Help users identify and select specific templates.
     * 
     */
    public Output<String> templateName() {
        return this.templateName;
    }

    /**
     * Representative Template Pipeline. See `template_pipeline` below.
     * 
     */
    @Import(name="templatePipelines", required=true)
    private Output<List<ExperimentPlanTemplateTemplatePipelineArgs>> templatePipelines;

    /**
     * @return Representative Template Pipeline. See `template_pipeline` below.
     * 
     */
    public Output<List<ExperimentPlanTemplateTemplatePipelineArgs>> templatePipelines() {
        return this.templatePipelines;
    }

    private ExperimentPlanTemplateArgs() {}

    private ExperimentPlanTemplateArgs(ExperimentPlanTemplateArgs $) {
        this.privacyLevel = $.privacyLevel;
        this.templateDescription = $.templateDescription;
        this.templateName = $.templateName;
        this.templatePipelines = $.templatePipelines;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExperimentPlanTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExperimentPlanTemplateArgs $;

        public Builder() {
            $ = new ExperimentPlanTemplateArgs();
        }

        public Builder(ExperimentPlanTemplateArgs defaults) {
            $ = new ExperimentPlanTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param privacyLevel Used to indicate the privacy level of the content or information. It can have the following optional parameters:
         * - private: Indicates that the content is private and restricted to specific users or permission groups. Private content is usually not publicly displayed, and only authorized users can view or edit it.
         * - public: Indicates that the content is public and can be accessed by anyone. Public content is usually viewable by all users and is suitable for sharing information or resources
         * 
         * @return builder
         * 
         */
        public Builder privacyLevel(Output<String> privacyLevel) {
            $.privacyLevel = privacyLevel;
            return this;
        }

        /**
         * @param privacyLevel Used to indicate the privacy level of the content or information. It can have the following optional parameters:
         * - private: Indicates that the content is private and restricted to specific users or permission groups. Private content is usually not publicly displayed, and only authorized users can view or edit it.
         * - public: Indicates that the content is public and can be accessed by anyone. Public content is usually viewable by all users and is suitable for sharing information or resources
         * 
         * @return builder
         * 
         */
        public Builder privacyLevel(String privacyLevel) {
            return privacyLevel(Output.of(privacyLevel));
        }

        /**
         * @param templateDescription Describe the purpose of this template.
         * 
         * @return builder
         * 
         */
        public Builder templateDescription(@Nullable Output<String> templateDescription) {
            $.templateDescription = templateDescription;
            return this;
        }

        /**
         * @param templateDescription Describe the purpose of this template.
         * 
         * @return builder
         * 
         */
        public Builder templateDescription(String templateDescription) {
            return templateDescription(Output.of(templateDescription));
        }

        /**
         * @param templateName Help users identify and select specific templates.
         * 
         * @return builder
         * 
         */
        public Builder templateName(Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName Help users identify and select specific templates.
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        /**
         * @param templatePipelines Representative Template Pipeline. See `template_pipeline` below.
         * 
         * @return builder
         * 
         */
        public Builder templatePipelines(Output<List<ExperimentPlanTemplateTemplatePipelineArgs>> templatePipelines) {
            $.templatePipelines = templatePipelines;
            return this;
        }

        /**
         * @param templatePipelines Representative Template Pipeline. See `template_pipeline` below.
         * 
         * @return builder
         * 
         */
        public Builder templatePipelines(List<ExperimentPlanTemplateTemplatePipelineArgs> templatePipelines) {
            return templatePipelines(Output.of(templatePipelines));
        }

        /**
         * @param templatePipelines Representative Template Pipeline. See `template_pipeline` below.
         * 
         * @return builder
         * 
         */
        public Builder templatePipelines(ExperimentPlanTemplateTemplatePipelineArgs... templatePipelines) {
            return templatePipelines(List.of(templatePipelines));
        }

        public ExperimentPlanTemplateArgs build() {
            if ($.privacyLevel == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateArgs", "privacyLevel");
            }
            if ($.templateName == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateArgs", "templateName");
            }
            if ($.templatePipelines == null) {
                throw new MissingRequiredPropertyException("ExperimentPlanTemplateArgs", "templatePipelines");
            }
            return $;
        }
    }

}
