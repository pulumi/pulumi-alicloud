// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection;

import com.pulumi.alicloud.threatdetection.inputs.AntiBruteForceRuleProtocolTypeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AntiBruteForceRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AntiBruteForceRuleArgs Empty = new AntiBruteForceRuleArgs();

    /**
     * The name of the defense rule.
     * 
     */
    @Import(name="antiBruteForceRuleName", required=true)
    private Output<String> antiBruteForceRuleName;

    /**
     * @return The name of the defense rule.
     * 
     */
    public Output<String> antiBruteForceRuleName() {
        return this.antiBruteForceRuleName;
    }

    /**
     * Specifies whether to set the defense rule as the default rule. Valid values:
     * 
     */
    @Import(name="defaultRule")
    private @Nullable Output<Boolean> defaultRule;

    /**
     * @return Specifies whether to set the defense rule as the default rule. Valid values:
     * 
     */
    public Optional<Output<Boolean>> defaultRule() {
        return Optional.ofNullable(this.defaultRule);
    }

    /**
     * FailCount
     * 
     */
    @Import(name="failCount", required=true)
    private Output<Integer> failCount;

    /**
     * @return FailCount
     * 
     */
    public Output<Integer> failCount() {
        return this.failCount;
    }

    /**
     * The period of time during which logons from an account are not allowed. Unit: minutes. Valid values:
     * 
     */
    @Import(name="forbiddenTime", required=true)
    private Output<Integer> forbiddenTime;

    /**
     * @return The period of time during which logons from an account are not allowed. Unit: minutes. Valid values:
     * 
     */
    public Output<Integer> forbiddenTime() {
        return this.forbiddenTime;
    }

    /**
     * The types of protocols supported for interception by the brute force attack rule creation. See `protocolType` below.
     * 
     */
    @Import(name="protocolType")
    private @Nullable Output<AntiBruteForceRuleProtocolTypeArgs> protocolType;

    /**
     * @return The types of protocols supported for interception by the brute force attack rule creation. See `protocolType` below.
     * 
     */
    public Optional<Output<AntiBruteForceRuleProtocolTypeArgs>> protocolType() {
        return Optional.ofNullable(this.protocolType);
    }

    /**
     * The maximum period of time during which failed logon attempts from an account can occur. Unit: minutes. Valid values:
     * 
     */
    @Import(name="span", required=true)
    private Output<Integer> span;

    /**
     * @return The maximum period of time during which failed logon attempts from an account can occur. Unit: minutes. Valid values:
     * 
     */
    public Output<Integer> span() {
        return this.span;
    }

    /**
     * The UUIDs of the servers to which you want to apply the defense rule.
     * 
     */
    @Import(name="uuidLists", required=true)
    private Output<List<String>> uuidLists;

    /**
     * @return The UUIDs of the servers to which you want to apply the defense rule.
     * 
     */
    public Output<List<String>> uuidLists() {
        return this.uuidLists;
    }

    private AntiBruteForceRuleArgs() {}

    private AntiBruteForceRuleArgs(AntiBruteForceRuleArgs $) {
        this.antiBruteForceRuleName = $.antiBruteForceRuleName;
        this.defaultRule = $.defaultRule;
        this.failCount = $.failCount;
        this.forbiddenTime = $.forbiddenTime;
        this.protocolType = $.protocolType;
        this.span = $.span;
        this.uuidLists = $.uuidLists;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AntiBruteForceRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AntiBruteForceRuleArgs $;

        public Builder() {
            $ = new AntiBruteForceRuleArgs();
        }

        public Builder(AntiBruteForceRuleArgs defaults) {
            $ = new AntiBruteForceRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param antiBruteForceRuleName The name of the defense rule.
         * 
         * @return builder
         * 
         */
        public Builder antiBruteForceRuleName(Output<String> antiBruteForceRuleName) {
            $.antiBruteForceRuleName = antiBruteForceRuleName;
            return this;
        }

        /**
         * @param antiBruteForceRuleName The name of the defense rule.
         * 
         * @return builder
         * 
         */
        public Builder antiBruteForceRuleName(String antiBruteForceRuleName) {
            return antiBruteForceRuleName(Output.of(antiBruteForceRuleName));
        }

        /**
         * @param defaultRule Specifies whether to set the defense rule as the default rule. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder defaultRule(@Nullable Output<Boolean> defaultRule) {
            $.defaultRule = defaultRule;
            return this;
        }

        /**
         * @param defaultRule Specifies whether to set the defense rule as the default rule. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder defaultRule(Boolean defaultRule) {
            return defaultRule(Output.of(defaultRule));
        }

        /**
         * @param failCount FailCount
         * 
         * @return builder
         * 
         */
        public Builder failCount(Output<Integer> failCount) {
            $.failCount = failCount;
            return this;
        }

        /**
         * @param failCount FailCount
         * 
         * @return builder
         * 
         */
        public Builder failCount(Integer failCount) {
            return failCount(Output.of(failCount));
        }

        /**
         * @param forbiddenTime The period of time during which logons from an account are not allowed. Unit: minutes. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder forbiddenTime(Output<Integer> forbiddenTime) {
            $.forbiddenTime = forbiddenTime;
            return this;
        }

        /**
         * @param forbiddenTime The period of time during which logons from an account are not allowed. Unit: minutes. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder forbiddenTime(Integer forbiddenTime) {
            return forbiddenTime(Output.of(forbiddenTime));
        }

        /**
         * @param protocolType The types of protocols supported for interception by the brute force attack rule creation. See `protocolType` below.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(@Nullable Output<AntiBruteForceRuleProtocolTypeArgs> protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param protocolType The types of protocols supported for interception by the brute force attack rule creation. See `protocolType` below.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(AntiBruteForceRuleProtocolTypeArgs protocolType) {
            return protocolType(Output.of(protocolType));
        }

        /**
         * @param span The maximum period of time during which failed logon attempts from an account can occur. Unit: minutes. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder span(Output<Integer> span) {
            $.span = span;
            return this;
        }

        /**
         * @param span The maximum period of time during which failed logon attempts from an account can occur. Unit: minutes. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder span(Integer span) {
            return span(Output.of(span));
        }

        /**
         * @param uuidLists The UUIDs of the servers to which you want to apply the defense rule.
         * 
         * @return builder
         * 
         */
        public Builder uuidLists(Output<List<String>> uuidLists) {
            $.uuidLists = uuidLists;
            return this;
        }

        /**
         * @param uuidLists The UUIDs of the servers to which you want to apply the defense rule.
         * 
         * @return builder
         * 
         */
        public Builder uuidLists(List<String> uuidLists) {
            return uuidLists(Output.of(uuidLists));
        }

        /**
         * @param uuidLists The UUIDs of the servers to which you want to apply the defense rule.
         * 
         * @return builder
         * 
         */
        public Builder uuidLists(String... uuidLists) {
            return uuidLists(List.of(uuidLists));
        }

        public AntiBruteForceRuleArgs build() {
            if ($.antiBruteForceRuleName == null) {
                throw new MissingRequiredPropertyException("AntiBruteForceRuleArgs", "antiBruteForceRuleName");
            }
            if ($.failCount == null) {
                throw new MissingRequiredPropertyException("AntiBruteForceRuleArgs", "failCount");
            }
            if ($.forbiddenTime == null) {
                throw new MissingRequiredPropertyException("AntiBruteForceRuleArgs", "forbiddenTime");
            }
            if ($.span == null) {
                throw new MissingRequiredPropertyException("AntiBruteForceRuleArgs", "span");
            }
            if ($.uuidLists == null) {
                throw new MissingRequiredPropertyException("AntiBruteForceRuleArgs", "uuidLists");
            }
            return $;
        }
    }

}
