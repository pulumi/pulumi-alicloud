// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.quickbi.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetUsersUser {
    /**
     * @return Alibaba Cloud account ID.
     * 
     */
    private String accountId;
    /**
     * @return An Alibaba Cloud account, Alibaba Cloud name.
     * 
     */
    private String accountName;
    /**
     * @return Whether it is the administrator. Valid values: `true` and `false`.
     * 
     */
    private Boolean adminUser;
    /**
     * @return Whether this is a permissions administrator. Valid values: `true` and `false`.
     * 
     */
    private Boolean authAdminUser;
    /**
     * @return The email of the user.
     * 
     */
    private String email;
    /**
     * @return The ID of the User.
     * 
     */
    private String id;
    /**
     * @return The nickname of the user.
     * 
     */
    private String nickName;
    /**
     * @return The phone number of the user.
     * 
     */
    private String phone;
    /**
     * @return The ID of the User.
     * 
     */
    private String userId;
    /**
     * @return The members of the organization of the type of role separately. Valid values: `Analyst`, `Developer` and `Visitor`.
     * 
     */
    private String userType;

    private GetUsersUser() {}
    /**
     * @return Alibaba Cloud account ID.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return An Alibaba Cloud account, Alibaba Cloud name.
     * 
     */
    public String accountName() {
        return this.accountName;
    }
    /**
     * @return Whether it is the administrator. Valid values: `true` and `false`.
     * 
     */
    public Boolean adminUser() {
        return this.adminUser;
    }
    /**
     * @return Whether this is a permissions administrator. Valid values: `true` and `false`.
     * 
     */
    public Boolean authAdminUser() {
        return this.authAdminUser;
    }
    /**
     * @return The email of the user.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return The ID of the User.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The nickname of the user.
     * 
     */
    public String nickName() {
        return this.nickName;
    }
    /**
     * @return The phone number of the user.
     * 
     */
    public String phone() {
        return this.phone;
    }
    /**
     * @return The ID of the User.
     * 
     */
    public String userId() {
        return this.userId;
    }
    /**
     * @return The members of the organization of the type of role separately. Valid values: `Analyst`, `Developer` and `Visitor`.
     * 
     */
    public String userType() {
        return this.userType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String accountName;
        private Boolean adminUser;
        private Boolean authAdminUser;
        private String email;
        private String id;
        private String nickName;
        private String phone;
        private String userId;
        private String userType;
        public Builder() {}
        public Builder(GetUsersUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.accountName = defaults.accountName;
    	      this.adminUser = defaults.adminUser;
    	      this.authAdminUser = defaults.authAdminUser;
    	      this.email = defaults.email;
    	      this.id = defaults.id;
    	      this.nickName = defaults.nickName;
    	      this.phone = defaults.phone;
    	      this.userId = defaults.userId;
    	      this.userType = defaults.userType;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        @CustomType.Setter
        public Builder accountName(String accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        @CustomType.Setter
        public Builder adminUser(Boolean adminUser) {
            this.adminUser = Objects.requireNonNull(adminUser);
            return this;
        }
        @CustomType.Setter
        public Builder authAdminUser(Boolean authAdminUser) {
            this.authAdminUser = Objects.requireNonNull(authAdminUser);
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder nickName(String nickName) {
            this.nickName = Objects.requireNonNull(nickName);
            return this;
        }
        @CustomType.Setter
        public Builder phone(String phone) {
            this.phone = Objects.requireNonNull(phone);
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }
        @CustomType.Setter
        public Builder userType(String userType) {
            this.userType = Objects.requireNonNull(userType);
            return this;
        }
        public GetUsersUser build() {
            final var o = new GetUsersUser();
            o.accountId = accountId;
            o.accountName = accountName;
            o.adminUser = adminUser;
            o.authAdminUser = authAdminUser;
            o.email = email;
            o.id = id;
            o.nickName = nickName;
            o.phone = phone;
            o.userId = userId;
            o.userType = userType;
            return o;
        }
    }
}
