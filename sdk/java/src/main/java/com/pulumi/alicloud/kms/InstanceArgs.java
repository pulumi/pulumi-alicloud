// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.kms;

import com.pulumi.alicloud.kms.inputs.InstanceBindVpcArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * Aucillary VPCs used to access this KMS instance See `bindVpcs` below.
     * 
     */
    @Import(name="bindVpcs")
    private @Nullable Output<List<InstanceBindVpcArgs>> bindVpcs;

    /**
     * @return Aucillary VPCs used to access this KMS instance See `bindVpcs` below.
     * 
     */
    public Optional<Output<List<InstanceBindVpcArgs>>> bindVpcs() {
        return Optional.ofNullable(this.bindVpcs);
    }

    /**
     * Whether to force deletion even without backup.
     * 
     */
    @Import(name="forceDeleteWithoutBackup")
    private @Nullable Output<String> forceDeleteWithoutBackup;

    /**
     * @return Whether to force deletion even without backup.
     * 
     */
    public Optional<Output<String>> forceDeleteWithoutBackup() {
        return Optional.ofNullable(this.forceDeleteWithoutBackup);
    }

    /**
     * The name of the resource
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return The name of the resource
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * Maximum number of stored keys. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    @Import(name="keyNum")
    private @Nullable Output<Integer> keyNum;

    /**
     * @return Maximum number of stored keys. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    public Optional<Output<Integer>> keyNum() {
        return Optional.ofNullable(this.keyNum);
    }

    /**
     * Instance Audit Log Switch. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    @Import(name="log")
    private @Nullable Output<String> log;

    /**
     * @return Instance Audit Log Switch. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    public Optional<Output<String>> log() {
        return Optional.ofNullable(this.log);
    }

    /**
     * Instance log capacity. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    @Import(name="logStorage")
    private @Nullable Output<Integer> logStorage;

    /**
     * @return Instance log capacity. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    public Optional<Output<Integer>> logStorage() {
        return Optional.ofNullable(this.logStorage);
    }

    /**
     * Payment type, valid values:
     * - `Subscription`: Prepaid.
     * - `PayAsYouGo`: Postpaid.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return Payment type, valid values:
     * - `Subscription`: Prepaid.
     * - `PayAsYouGo`: Postpaid.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * Purchase cycle, in months. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return Purchase cycle, in months. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * KMS Instance commodity type (software/hardware)
     * 
     */
    @Import(name="productVersion")
    private @Nullable Output<String> productVersion;

    /**
     * @return KMS Instance commodity type (software/hardware)
     * 
     */
    public Optional<Output<String>> productVersion() {
        return Optional.ofNullable(this.productVersion);
    }

    /**
     * Automatic renewal period, in months. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    @Import(name="renewPeriod")
    private @Nullable Output<Integer> renewPeriod;

    /**
     * @return Automatic renewal period, in months. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    public Optional<Output<Integer>> renewPeriod() {
        return Optional.ofNullable(this.renewPeriod);
    }

    /**
     * Renewal options. Valid values: `AutoRenewal`, `ManualRenewal`. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    @Import(name="renewStatus")
    private @Nullable Output<String> renewStatus;

    /**
     * @return Renewal options. Valid values: `AutoRenewal`, `ManualRenewal`. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    public Optional<Output<String>> renewStatus() {
        return Optional.ofNullable(this.renewStatus);
    }

    /**
     * Automatic renewal period unit, valid value:
     * - `M`: Month.
     * - `Y`: Year.
     * 
     */
    @Import(name="renewalPeriodUnit")
    private @Nullable Output<String> renewalPeriodUnit;

    /**
     * @return Automatic renewal period unit, valid value:
     * - `M`: Month.
     * - `Y`: Year.
     * 
     */
    public Optional<Output<String>> renewalPeriodUnit() {
        return Optional.ofNullable(this.renewalPeriodUnit);
    }

    /**
     * Maximum number of Secrets. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    @Import(name="secretNum")
    private @Nullable Output<Integer> secretNum;

    /**
     * @return Maximum number of Secrets. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    public Optional<Output<Integer>> secretNum() {
        return Optional.ofNullable(this.secretNum);
    }

    /**
     * The computation performance level of the KMS instance. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    @Import(name="spec")
    private @Nullable Output<Integer> spec;

    /**
     * @return The computation performance level of the KMS instance. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    public Optional<Output<Integer>> spec() {
        return Optional.ofNullable(this.spec);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the virtual private cloud (VPC) that is associated with the KMS instance.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The ID of the virtual private cloud (VPC) that is associated with the KMS instance.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * The number of managed accesses. The maximum number of VPCs that can access this KMS instance. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    @Import(name="vpcNum")
    private @Nullable Output<Integer> vpcNum;

    /**
     * @return The number of managed accesses. The maximum number of VPCs that can access this KMS instance. The attribute is valid when the attribute `paymentType` is `Subscription`.
     * 
     */
    public Optional<Output<Integer>> vpcNum() {
        return Optional.ofNullable(this.vpcNum);
    }

    /**
     * Instance bind vswitches
     * 
     */
    @Import(name="vswitchIds", required=true)
    private Output<List<String>> vswitchIds;

    /**
     * @return Instance bind vswitches
     * 
     */
    public Output<List<String>> vswitchIds() {
        return this.vswitchIds;
    }

    /**
     * zone id
     * 
     */
    @Import(name="zoneIds", required=true)
    private Output<List<String>> zoneIds;

    /**
     * @return zone id
     * 
     */
    public Output<List<String>> zoneIds() {
        return this.zoneIds;
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.bindVpcs = $.bindVpcs;
        this.forceDeleteWithoutBackup = $.forceDeleteWithoutBackup;
        this.instanceName = $.instanceName;
        this.keyNum = $.keyNum;
        this.log = $.log;
        this.logStorage = $.logStorage;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.productVersion = $.productVersion;
        this.renewPeriod = $.renewPeriod;
        this.renewStatus = $.renewStatus;
        this.renewalPeriodUnit = $.renewalPeriodUnit;
        this.secretNum = $.secretNum;
        this.spec = $.spec;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
        this.vpcNum = $.vpcNum;
        this.vswitchIds = $.vswitchIds;
        this.zoneIds = $.zoneIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bindVpcs Aucillary VPCs used to access this KMS instance See `bindVpcs` below.
         * 
         * @return builder
         * 
         */
        public Builder bindVpcs(@Nullable Output<List<InstanceBindVpcArgs>> bindVpcs) {
            $.bindVpcs = bindVpcs;
            return this;
        }

        /**
         * @param bindVpcs Aucillary VPCs used to access this KMS instance See `bindVpcs` below.
         * 
         * @return builder
         * 
         */
        public Builder bindVpcs(List<InstanceBindVpcArgs> bindVpcs) {
            return bindVpcs(Output.of(bindVpcs));
        }

        /**
         * @param bindVpcs Aucillary VPCs used to access this KMS instance See `bindVpcs` below.
         * 
         * @return builder
         * 
         */
        public Builder bindVpcs(InstanceBindVpcArgs... bindVpcs) {
            return bindVpcs(List.of(bindVpcs));
        }

        /**
         * @param forceDeleteWithoutBackup Whether to force deletion even without backup.
         * 
         * @return builder
         * 
         */
        public Builder forceDeleteWithoutBackup(@Nullable Output<String> forceDeleteWithoutBackup) {
            $.forceDeleteWithoutBackup = forceDeleteWithoutBackup;
            return this;
        }

        /**
         * @param forceDeleteWithoutBackup Whether to force deletion even without backup.
         * 
         * @return builder
         * 
         */
        public Builder forceDeleteWithoutBackup(String forceDeleteWithoutBackup) {
            return forceDeleteWithoutBackup(Output.of(forceDeleteWithoutBackup));
        }

        /**
         * @param instanceName The name of the resource
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName The name of the resource
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param keyNum Maximum number of stored keys. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder keyNum(@Nullable Output<Integer> keyNum) {
            $.keyNum = keyNum;
            return this;
        }

        /**
         * @param keyNum Maximum number of stored keys. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder keyNum(Integer keyNum) {
            return keyNum(Output.of(keyNum));
        }

        /**
         * @param log Instance Audit Log Switch. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder log(@Nullable Output<String> log) {
            $.log = log;
            return this;
        }

        /**
         * @param log Instance Audit Log Switch. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder log(String log) {
            return log(Output.of(log));
        }

        /**
         * @param logStorage Instance log capacity. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder logStorage(@Nullable Output<Integer> logStorage) {
            $.logStorage = logStorage;
            return this;
        }

        /**
         * @param logStorage Instance log capacity. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder logStorage(Integer logStorage) {
            return logStorage(Output.of(logStorage));
        }

        /**
         * @param paymentType Payment type, valid values:
         * - `Subscription`: Prepaid.
         * - `PayAsYouGo`: Postpaid.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType Payment type, valid values:
         * - `Subscription`: Prepaid.
         * - `PayAsYouGo`: Postpaid.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period Purchase cycle, in months. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Purchase cycle, in months. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param productVersion KMS Instance commodity type (software/hardware)
         * 
         * @return builder
         * 
         */
        public Builder productVersion(@Nullable Output<String> productVersion) {
            $.productVersion = productVersion;
            return this;
        }

        /**
         * @param productVersion KMS Instance commodity type (software/hardware)
         * 
         * @return builder
         * 
         */
        public Builder productVersion(String productVersion) {
            return productVersion(Output.of(productVersion));
        }

        /**
         * @param renewPeriod Automatic renewal period, in months. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder renewPeriod(@Nullable Output<Integer> renewPeriod) {
            $.renewPeriod = renewPeriod;
            return this;
        }

        /**
         * @param renewPeriod Automatic renewal period, in months. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder renewPeriod(Integer renewPeriod) {
            return renewPeriod(Output.of(renewPeriod));
        }

        /**
         * @param renewStatus Renewal options. Valid values: `AutoRenewal`, `ManualRenewal`. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder renewStatus(@Nullable Output<String> renewStatus) {
            $.renewStatus = renewStatus;
            return this;
        }

        /**
         * @param renewStatus Renewal options. Valid values: `AutoRenewal`, `ManualRenewal`. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder renewStatus(String renewStatus) {
            return renewStatus(Output.of(renewStatus));
        }

        /**
         * @param renewalPeriodUnit Automatic renewal period unit, valid value:
         * - `M`: Month.
         * - `Y`: Year.
         * 
         * @return builder
         * 
         */
        public Builder renewalPeriodUnit(@Nullable Output<String> renewalPeriodUnit) {
            $.renewalPeriodUnit = renewalPeriodUnit;
            return this;
        }

        /**
         * @param renewalPeriodUnit Automatic renewal period unit, valid value:
         * - `M`: Month.
         * - `Y`: Year.
         * 
         * @return builder
         * 
         */
        public Builder renewalPeriodUnit(String renewalPeriodUnit) {
            return renewalPeriodUnit(Output.of(renewalPeriodUnit));
        }

        /**
         * @param secretNum Maximum number of Secrets. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder secretNum(@Nullable Output<Integer> secretNum) {
            $.secretNum = secretNum;
            return this;
        }

        /**
         * @param secretNum Maximum number of Secrets. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder secretNum(Integer secretNum) {
            return secretNum(Output.of(secretNum));
        }

        /**
         * @param spec The computation performance level of the KMS instance. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder spec(@Nullable Output<Integer> spec) {
            $.spec = spec;
            return this;
        }

        /**
         * @param spec The computation performance level of the KMS instance. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder spec(Integer spec) {
            return spec(Output.of(spec));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vpcId The ID of the virtual private cloud (VPC) that is associated with the KMS instance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the virtual private cloud (VPC) that is associated with the KMS instance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vpcNum The number of managed accesses. The maximum number of VPCs that can access this KMS instance. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder vpcNum(@Nullable Output<Integer> vpcNum) {
            $.vpcNum = vpcNum;
            return this;
        }

        /**
         * @param vpcNum The number of managed accesses. The maximum number of VPCs that can access this KMS instance. The attribute is valid when the attribute `paymentType` is `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder vpcNum(Integer vpcNum) {
            return vpcNum(Output.of(vpcNum));
        }

        /**
         * @param vswitchIds Instance bind vswitches
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(Output<List<String>> vswitchIds) {
            $.vswitchIds = vswitchIds;
            return this;
        }

        /**
         * @param vswitchIds Instance bind vswitches
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(List<String> vswitchIds) {
            return vswitchIds(Output.of(vswitchIds));
        }

        /**
         * @param vswitchIds Instance bind vswitches
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }

        /**
         * @param zoneIds zone id
         * 
         * @return builder
         * 
         */
        public Builder zoneIds(Output<List<String>> zoneIds) {
            $.zoneIds = zoneIds;
            return this;
        }

        /**
         * @param zoneIds zone id
         * 
         * @return builder
         * 
         */
        public Builder zoneIds(List<String> zoneIds) {
            return zoneIds(Output.of(zoneIds));
        }

        /**
         * @param zoneIds zone id
         * 
         * @return builder
         * 
         */
        public Builder zoneIds(String... zoneIds) {
            return zoneIds(List.of(zoneIds));
        }

        public InstanceArgs build() {
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "vpcId");
            }
            if ($.vswitchIds == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "vswitchIds");
            }
            if ($.zoneIds == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "zoneIds");
            }
            return $;
        }
    }

}
