// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FilesetArgs extends com.pulumi.resources.ResourceArgs {

    public static final FilesetArgs Empty = new FilesetArgs();

    /**
     * The description of the Fileset. It must be `2` to `128` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Fileset. It must be `2` to `128` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The dry run.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return The dry run.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The ID of the file system.
     * 
     */
    @Import(name="fileSystemId", required=true)
    private Output<String> fileSystemId;

    /**
     * @return The ID of the file system.
     * 
     */
    public Output<String> fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * The path of the fileset.
     * 
     */
    @Import(name="fileSystemPath", required=true)
    private Output<String> fileSystemPath;

    /**
     * @return The path of the fileset.
     * 
     */
    public Output<String> fileSystemPath() {
        return this.fileSystemPath;
    }

    private FilesetArgs() {}

    private FilesetArgs(FilesetArgs $) {
        this.description = $.description;
        this.dryRun = $.dryRun;
        this.fileSystemId = $.fileSystemId;
        this.fileSystemPath = $.fileSystemPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilesetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilesetArgs $;

        public Builder() {
            $ = new FilesetArgs();
        }

        public Builder(FilesetArgs defaults) {
            $ = new FilesetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the Fileset. It must be `2` to `128` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Fileset. It must be `2` to `128` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dryRun The dry run.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun The dry run.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param fileSystemPath The path of the fileset.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemPath(Output<String> fileSystemPath) {
            $.fileSystemPath = fileSystemPath;
            return this;
        }

        /**
         * @param fileSystemPath The path of the fileset.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemPath(String fileSystemPath) {
            return fileSystemPath(Output.of(fileSystemPath));
        }

        public FilesetArgs build() {
            if ($.fileSystemId == null) {
                throw new MissingRequiredPropertyException("FilesetArgs", "fileSystemId");
            }
            if ($.fileSystemPath == null) {
                throw new MissingRequiredPropertyException("FilesetArgs", "fileSystemPath");
            }
            return $;
        }
    }

}
