// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.fc.TriggerArgs;
import com.pulumi.alicloud.fc.inputs.TriggerState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides an Alicloud Function Compute Trigger resource. Based on trigger, execute your code in response to events in Alibaba Cloud.
 *  For information about Service and how to use it, see [What is Function Compute](https://www.alibabacloud.com/help/en/fc/developer-reference/api-fc-open-2021-04-06-createtrigger).
 * 
 * &gt; **NOTE:** The resource requires a provider field &#39;account_id&#39;. See account_id.
 * 
 * &gt; **NOTE:** Available since v1.93.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.AlicloudFunctions;
 * import com.pulumi.alicloud.inputs.GetRegionsArgs;
 * import com.pulumi.random.RandomInteger;
 * import com.pulumi.random.RandomIntegerArgs;
 * import com.pulumi.alicloud.log.Project;
 * import com.pulumi.alicloud.log.Store;
 * import com.pulumi.alicloud.log.StoreArgs;
 * import com.pulumi.alicloud.ram.Role;
 * import com.pulumi.alicloud.ram.RoleArgs;
 * import com.pulumi.alicloud.ram.RolePolicyAttachment;
 * import com.pulumi.alicloud.ram.RolePolicyAttachmentArgs;
 * import com.pulumi.alicloud.fc.Service;
 * import com.pulumi.alicloud.fc.ServiceArgs;
 * import com.pulumi.alicloud.fc.inputs.ServiceLogConfigArgs;
 * import com.pulumi.alicloud.oss.Bucket;
 * import com.pulumi.alicloud.oss.BucketArgs;
 * import com.pulumi.alicloud.oss.BucketObject;
 * import com.pulumi.alicloud.oss.BucketObjectArgs;
 * import com.pulumi.alicloud.fc.Function;
 * import com.pulumi.alicloud.fc.FunctionArgs;
 * import com.pulumi.alicloud.fc.Trigger;
 * import com.pulumi.alicloud.fc.TriggerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var defaultAccount = AlicloudFunctions.getAccount();
 * 
 *         final var defaultRegions = AlicloudFunctions.getRegions(GetRegionsArgs.builder()
 *             .current(true)
 *             .build());
 * 
 *         var defaultRandomInteger = new RandomInteger(&#34;defaultRandomInteger&#34;, RandomIntegerArgs.builder()        
 *             .max(99999)
 *             .min(10000)
 *             .build());
 * 
 *         var defaultProject = new Project(&#34;defaultProject&#34;);
 * 
 *         var defaultStore = new Store(&#34;defaultStore&#34;, StoreArgs.builder()        
 *             .project(defaultProject.name())
 *             .build());
 * 
 *         var sourceStore = new Store(&#34;sourceStore&#34;, StoreArgs.builder()        
 *             .project(defaultProject.name())
 *             .build());
 * 
 *         var defaultRole = new Role(&#34;defaultRole&#34;, RoleArgs.builder()        
 *             .document(&#34;&#34;&#34;
 *   {
 *       &#34;Statement&#34;: [
 *         {
 *           &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
 *           &#34;Effect&#34;: &#34;Allow&#34;,
 *           &#34;Principal&#34;: {
 *             &#34;Service&#34;: [
 *               &#34;fc.aliyuncs.com&#34;
 *             ]
 *           }
 *         }
 *       ],
 *       &#34;Version&#34;: &#34;1&#34;
 *   }
 *             &#34;&#34;&#34;)
 *             .description(&#34;this is a example&#34;)
 *             .force(true)
 *             .build());
 * 
 *         var defaultRolePolicyAttachment = new RolePolicyAttachment(&#34;defaultRolePolicyAttachment&#34;, RolePolicyAttachmentArgs.builder()        
 *             .roleName(defaultRole.name())
 *             .policyName(&#34;AliyunLogFullAccess&#34;)
 *             .policyType(&#34;System&#34;)
 *             .build());
 * 
 *         var defaultService = new Service(&#34;defaultService&#34;, ServiceArgs.builder()        
 *             .description(&#34;example-value&#34;)
 *             .role(defaultRole.arn())
 *             .logConfig(ServiceLogConfigArgs.builder()
 *                 .project(defaultProject.name())
 *                 .logstore(defaultStore.name())
 *                 .enableInstanceMetrics(true)
 *                 .enableRequestMetrics(true)
 *                 .build())
 *             .build());
 * 
 *         var defaultBucket = new Bucket(&#34;defaultBucket&#34;, BucketArgs.builder()        
 *             .bucket(defaultRandomInteger.result().applyValue(result -&gt; String.format(&#34;terraform-example-%s&#34;, result)))
 *             .build());
 * 
 *         var defaultBucketObject = new BucketObject(&#34;defaultBucketObject&#34;, BucketObjectArgs.builder()        
 *             .bucket(defaultBucket.id())
 *             .key(&#34;index.py&#34;)
 *             .content(&#34;&#34;&#34;
 * import logging 
 * def handler(event, context): 
 * logger = logging.getLogger() 
 * logger.info(&#39;hello world&#39;) 
 * return &#39;hello world&#39;            &#34;&#34;&#34;)
 *             .build());
 * 
 *         var defaultFunction = new Function(&#34;defaultFunction&#34;, FunctionArgs.builder()        
 *             .service(defaultService.name())
 *             .description(&#34;example&#34;)
 *             .ossBucket(defaultBucket.id())
 *             .ossKey(defaultBucketObject.key())
 *             .memorySize(&#34;512&#34;)
 *             .runtime(&#34;python3.10&#34;)
 *             .handler(&#34;hello.handler&#34;)
 *             .build());
 * 
 *         var defaultTrigger = new Trigger(&#34;defaultTrigger&#34;, TriggerArgs.builder()        
 *             .service(defaultService.name())
 *             .function(defaultFunction.name())
 *             .role(defaultRole.arn())
 *             .sourceArn(defaultProject.name().applyValue(name -&gt; String.format(&#34;acs:log:%s:%s:project/%s&#34;, defaultRegions.applyValue(getRegionsResult -&gt; getRegionsResult.regions()[0].id()),defaultAccount.applyValue(getAccountResult -&gt; getAccountResult.id()),name)))
 *             .type(&#34;log&#34;)
 *             .config(Output.tuple(sourceStore.name(), defaultProject.name(), defaultStore.name()).applyValue(values -&gt; {
 *                 var sourceStoreName = values.t1;
 *                 var defaultProjectName = values.t2;
 *                 var defaultStoreName = values.t3;
 *                 return &#34;&#34;&#34;
 *     {
 *         &#34;sourceConfig&#34;: {
 *             &#34;logstore&#34;: &#34;%s&#34;,
 *             &#34;startTime&#34;: null
 *         },
 *         &#34;jobConfig&#34;: {
 *             &#34;maxRetryTime&#34;: 3,
 *             &#34;triggerInterval&#34;: 60
 *         },
 *         &#34;functionParameter&#34;: {
 *             &#34;a&#34;: &#34;b&#34;,
 *             &#34;c&#34;: &#34;d&#34;
 *         },
 *         &#34;logConfig&#34;: {
 *              &#34;project&#34;: &#34;%s&#34;,
 *             &#34;logstore&#34;: &#34;%s&#34;
 *         },
 *         &#34;targetConfig&#34;: null,
 *         &#34;enable&#34;: true
 *     }
 *   
 * &#34;, sourceStoreName,defaultProjectName,defaultStoreName);
 *             }))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * MNS topic trigger:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.AlicloudFunctions;
 * import com.pulumi.alicloud.inputs.GetRegionsArgs;
 * import com.pulumi.random.RandomInteger;
 * import com.pulumi.random.RandomIntegerArgs;
 * import com.pulumi.alicloud.mns.Topic;
 * import com.pulumi.alicloud.ram.Role;
 * import com.pulumi.alicloud.ram.RoleArgs;
 * import com.pulumi.alicloud.ram.RolePolicyAttachment;
 * import com.pulumi.alicloud.ram.RolePolicyAttachmentArgs;
 * import com.pulumi.alicloud.fc.Service;
 * import com.pulumi.alicloud.fc.ServiceArgs;
 * import com.pulumi.alicloud.oss.Bucket;
 * import com.pulumi.alicloud.oss.BucketArgs;
 * import com.pulumi.alicloud.oss.BucketObject;
 * import com.pulumi.alicloud.oss.BucketObjectArgs;
 * import com.pulumi.alicloud.fc.Function;
 * import com.pulumi.alicloud.fc.FunctionArgs;
 * import com.pulumi.alicloud.fc.Trigger;
 * import com.pulumi.alicloud.fc.TriggerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var defaultAccount = AlicloudFunctions.getAccount();
 * 
 *         final var defaultRegions = AlicloudFunctions.getRegions(GetRegionsArgs.builder()
 *             .current(true)
 *             .build());
 * 
 *         var defaultRandomInteger = new RandomInteger(&#34;defaultRandomInteger&#34;, RandomIntegerArgs.builder()        
 *             .max(99999)
 *             .min(10000)
 *             .build());
 * 
 *         var defaultTopic = new Topic(&#34;defaultTopic&#34;);
 * 
 *         var defaultRole = new Role(&#34;defaultRole&#34;, RoleArgs.builder()        
 *             .document(&#34;&#34;&#34;
 *   {
 *       &#34;Statement&#34;: [
 *         {
 *           &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
 *           &#34;Effect&#34;: &#34;Allow&#34;,
 *           &#34;Principal&#34;: {
 *             &#34;Service&#34;: [
 *               &#34;mns.aliyuncs.com&#34;
 *             ]
 *           }
 *         }
 *       ],
 *       &#34;Version&#34;: &#34;1&#34;
 *   }
 *             &#34;&#34;&#34;)
 *             .description(&#34;this is a example&#34;)
 *             .force(true)
 *             .build());
 * 
 *         var defaultRolePolicyAttachment = new RolePolicyAttachment(&#34;defaultRolePolicyAttachment&#34;, RolePolicyAttachmentArgs.builder()        
 *             .roleName(defaultRole.name())
 *             .policyName(&#34;AliyunMNSNotificationRolePolicy&#34;)
 *             .policyType(&#34;System&#34;)
 *             .build());
 * 
 *         var defaultService = new Service(&#34;defaultService&#34;, ServiceArgs.builder()        
 *             .description(&#34;example-value&#34;)
 *             .internetAccess(false)
 *             .build());
 * 
 *         var defaultBucket = new Bucket(&#34;defaultBucket&#34;, BucketArgs.builder()        
 *             .bucket(defaultRandomInteger.result().applyValue(result -&gt; String.format(&#34;terraform-example-%s&#34;, result)))
 *             .build());
 * 
 *         var defaultBucketObject = new BucketObject(&#34;defaultBucketObject&#34;, BucketObjectArgs.builder()        
 *             .bucket(defaultBucket.id())
 *             .key(&#34;index.py&#34;)
 *             .content(&#34;&#34;&#34;
 * import logging 
 * def handler(event, context): 
 * logger = logging.getLogger() 
 * logger.info(&#39;hello world&#39;) 
 * return &#39;hello world&#39;            &#34;&#34;&#34;)
 *             .build());
 * 
 *         var defaultFunction = new Function(&#34;defaultFunction&#34;, FunctionArgs.builder()        
 *             .service(defaultService.name())
 *             .description(&#34;example&#34;)
 *             .ossBucket(defaultBucket.id())
 *             .ossKey(defaultBucketObject.key())
 *             .memorySize(&#34;512&#34;)
 *             .runtime(&#34;python3.10&#34;)
 *             .handler(&#34;hello.handler&#34;)
 *             .build());
 * 
 *         var defaultTrigger = new Trigger(&#34;defaultTrigger&#34;, TriggerArgs.builder()        
 *             .service(defaultService.name())
 *             .function(defaultFunction.name())
 *             .role(defaultRole.arn())
 *             .sourceArn(defaultTopic.name().applyValue(name -&gt; String.format(&#34;acs:mns:%s:%s:/topics/%s&#34;, defaultRegions.applyValue(getRegionsResult -&gt; getRegionsResult.regions()[0].id()),defaultAccount.applyValue(getAccountResult -&gt; getAccountResult.id()),name)))
 *             .type(&#34;mns_topic&#34;)
 *             .configMns(&#34;&#34;&#34;
 *   {
 *     &#34;filterTag&#34;:&#34;exampleTag&#34;,
 *     &#34;notifyContentFormat&#34;:&#34;STREAM&#34;,
 *     &#34;notifyStrategy&#34;:&#34;BACKOFF_RETRY&#34;
 *   }
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * CDN events trigger:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.AlicloudFunctions;
 * import com.pulumi.random.RandomInteger;
 * import com.pulumi.random.RandomIntegerArgs;
 * import com.pulumi.alicloud.cdn.DomainNew;
 * import com.pulumi.alicloud.cdn.DomainNewArgs;
 * import com.pulumi.alicloud.cdn.inputs.DomainNewSourceArgs;
 * import com.pulumi.alicloud.fc.Service;
 * import com.pulumi.alicloud.fc.ServiceArgs;
 * import com.pulumi.alicloud.ram.Role;
 * import com.pulumi.alicloud.ram.RoleArgs;
 * import com.pulumi.alicloud.ram.Policy;
 * import com.pulumi.alicloud.ram.PolicyArgs;
 * import com.pulumi.alicloud.ram.RolePolicyAttachment;
 * import com.pulumi.alicloud.ram.RolePolicyAttachmentArgs;
 * import com.pulumi.alicloud.oss.Bucket;
 * import com.pulumi.alicloud.oss.BucketArgs;
 * import com.pulumi.alicloud.oss.BucketObject;
 * import com.pulumi.alicloud.oss.BucketObjectArgs;
 * import com.pulumi.alicloud.fc.Function;
 * import com.pulumi.alicloud.fc.FunctionArgs;
 * import com.pulumi.alicloud.fc.Trigger;
 * import com.pulumi.alicloud.fc.TriggerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var defaultAccount = AlicloudFunctions.getAccount();
 * 
 *         var defaultRandomInteger = new RandomInteger(&#34;defaultRandomInteger&#34;, RandomIntegerArgs.builder()        
 *             .max(99999)
 *             .min(10000)
 *             .build());
 * 
 *         var defaultDomainNew = new DomainNew(&#34;defaultDomainNew&#34;, DomainNewArgs.builder()        
 *             .domainName(defaultRandomInteger.result().applyValue(result -&gt; String.format(&#34;example%s.tf.com&#34;, result)))
 *             .cdnType(&#34;web&#34;)
 *             .scope(&#34;overseas&#34;)
 *             .sources(DomainNewSourceArgs.builder()
 *                 .content(&#34;1.1.1.1&#34;)
 *                 .type(&#34;ipaddr&#34;)
 *                 .priority(20)
 *                 .port(80)
 *                 .weight(10)
 *                 .build())
 *             .build());
 * 
 *         var defaultService = new Service(&#34;defaultService&#34;, ServiceArgs.builder()        
 *             .description(&#34;example-value&#34;)
 *             .internetAccess(false)
 *             .build());
 * 
 *         var defaultRole = new Role(&#34;defaultRole&#34;, RoleArgs.builder()        
 *             .document(&#34;&#34;&#34;
 *     {
 *       &#34;Statement&#34;: [
 *         {
 *           &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
 *           &#34;Effect&#34;: &#34;Allow&#34;,
 *           &#34;Principal&#34;: {
 *             &#34;Service&#34;: [
 *               &#34;cdn.aliyuncs.com&#34;
 *             ]
 *           }
 *         }
 *       ],
 *       &#34;Version&#34;: &#34;1&#34;
 *   }
 *             &#34;&#34;&#34;)
 *             .description(&#34;this is a example&#34;)
 *             .force(true)
 *             .build());
 * 
 *         var defaultPolicy = new Policy(&#34;defaultPolicy&#34;, PolicyArgs.builder()        
 *             .policyName(defaultRandomInteger.result().applyValue(result -&gt; String.format(&#34;fcservicepolicy-%s&#34;, result)))
 *             .policyDocument(Output.tuple(defaultService.name(), defaultService.name()).applyValue(values -&gt; {
 *                 var defaultServiceName = values.t1;
 *                 var defaultServiceName1 = values.t2;
 *                 return &#34;&#34;&#34;
 *     {
 *         &#34;Version&#34;: &#34;1&#34;,
 *         &#34;Statement&#34;: [
 *         {
 *             &#34;Action&#34;: [
 *             &#34;fc:InvokeFunction&#34;
 *             ],
 *         &#34;Resource&#34;: [
 *             &#34;acs:fc:*:*:services/%s/functions/*&#34;,
 *             &#34;acs:fc:*:*:services/%s.*{@literal /}functions/*&#34;
 *         ],
 *         &#34;Effect&#34;: &#34;Allow&#34;
 *         }
 *         ]
 *     }
 * &#34;, defaultServiceName,defaultServiceName1);
 *             }))
 *             .description(&#34;this is a example&#34;)
 *             .force(true)
 *             .build());
 * 
 *         var defaultRolePolicyAttachment = new RolePolicyAttachment(&#34;defaultRolePolicyAttachment&#34;, RolePolicyAttachmentArgs.builder()        
 *             .roleName(defaultRole.name())
 *             .policyName(defaultPolicy.name())
 *             .policyType(&#34;Custom&#34;)
 *             .build());
 * 
 *         var defaultBucket = new Bucket(&#34;defaultBucket&#34;, BucketArgs.builder()        
 *             .bucket(defaultRandomInteger.result().applyValue(result -&gt; String.format(&#34;terraform-example-%s&#34;, result)))
 *             .build());
 * 
 *         var defaultBucketObject = new BucketObject(&#34;defaultBucketObject&#34;, BucketObjectArgs.builder()        
 *             .bucket(defaultBucket.id())
 *             .key(&#34;index.py&#34;)
 *             .content(&#34;&#34;&#34;
 * import logging 
 * def handler(event, context): 
 * logger = logging.getLogger() 
 * logger.info(&#39;hello world&#39;) 
 * return &#39;hello world&#39;            &#34;&#34;&#34;)
 *             .build());
 * 
 *         var defaultFunction = new Function(&#34;defaultFunction&#34;, FunctionArgs.builder()        
 *             .service(defaultService.name())
 *             .description(&#34;example&#34;)
 *             .ossBucket(defaultBucket.id())
 *             .ossKey(defaultBucketObject.key())
 *             .memorySize(&#34;512&#34;)
 *             .runtime(&#34;python3.10&#34;)
 *             .handler(&#34;hello.handler&#34;)
 *             .build());
 * 
 *         var defaultTrigger = new Trigger(&#34;defaultTrigger&#34;, TriggerArgs.builder()        
 *             .service(defaultService.name())
 *             .function(defaultFunction.name())
 *             .role(defaultRole.arn())
 *             .sourceArn(String.format(&#34;acs:cdn:*:%s&#34;, defaultAccount.applyValue(getAccountResult -&gt; getAccountResult.id())))
 *             .type(&#34;cdn_events&#34;)
 *             .config(defaultDomainNew.domainName().applyValue(domainName -&gt; &#34;&#34;&#34;
 *       {&#34;eventName&#34;:&#34;LogFileCreated&#34;,
 *      &#34;eventVersion&#34;:&#34;1.0.0&#34;,
 *      &#34;notes&#34;:&#34;cdn events trigger&#34;,
 *      &#34;filter&#34;:{
 *         &#34;domain&#34;: [&#34;%s&#34;]
 *         }
 *     }
 * &#34;, domainName)))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * EventBridge trigger:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.AlicloudFunctions;
 * import com.pulumi.alicloud.inputs.GetRegionsArgs;
 * import com.pulumi.random.RandomInteger;
 * import com.pulumi.random.RandomIntegerArgs;
 * import com.pulumi.alicloud.eventbridge.ServiceLinkedRole;
 * import com.pulumi.alicloud.eventbridge.ServiceLinkedRoleArgs;
 * import com.pulumi.alicloud.fc.Service;
 * import com.pulumi.alicloud.fc.ServiceArgs;
 * import com.pulumi.alicloud.oss.Bucket;
 * import com.pulumi.alicloud.oss.BucketArgs;
 * import com.pulumi.alicloud.oss.BucketObject;
 * import com.pulumi.alicloud.oss.BucketObjectArgs;
 * import com.pulumi.alicloud.fc.Function;
 * import com.pulumi.alicloud.fc.FunctionArgs;
 * import com.pulumi.alicloud.fc.Trigger;
 * import com.pulumi.alicloud.fc.TriggerArgs;
 * import com.pulumi.alicloud.rocketmq.Instance;
 * import com.pulumi.alicloud.rocketmq.InstanceArgs;
 * import com.pulumi.alicloud.rocketmq.Group;
 * import com.pulumi.alicloud.rocketmq.GroupArgs;
 * import com.pulumi.alicloud.rocketmq.Topic;
 * import com.pulumi.alicloud.rocketmq.TopicArgs;
 * import com.pulumi.alicloud.amqp.Instance;
 * import com.pulumi.alicloud.amqp.InstanceArgs;
 * import com.pulumi.alicloud.amqp.VirtualHost;
 * import com.pulumi.alicloud.amqp.VirtualHostArgs;
 * import com.pulumi.alicloud.amqp.Queue;
 * import com.pulumi.alicloud.amqp.QueueArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var defaultAccount = AlicloudFunctions.getAccount();
 * 
 *         final var defaultRegions = AlicloudFunctions.getRegions(GetRegionsArgs.builder()
 *             .current(true)
 *             .build());
 * 
 *         var defaultRandomInteger = new RandomInteger(&#34;defaultRandomInteger&#34;, RandomIntegerArgs.builder()        
 *             .max(99999)
 *             .min(10000)
 *             .build());
 * 
 *         var serviceLinkedRole = new ServiceLinkedRole(&#34;serviceLinkedRole&#34;, ServiceLinkedRoleArgs.builder()        
 *             .productName(&#34;AliyunServiceRoleForEventBridgeSendToFC&#34;)
 *             .build());
 * 
 *         var defaultService = new Service(&#34;defaultService&#34;, ServiceArgs.builder()        
 *             .description(&#34;example-value&#34;)
 *             .internetAccess(false)
 *             .build());
 * 
 *         var defaultBucket = new Bucket(&#34;defaultBucket&#34;, BucketArgs.builder()        
 *             .bucket(defaultRandomInteger.result().applyValue(result -&gt; String.format(&#34;terraform-example-%s&#34;, result)))
 *             .build());
 * 
 *         var defaultBucketObject = new BucketObject(&#34;defaultBucketObject&#34;, BucketObjectArgs.builder()        
 *             .bucket(defaultBucket.id())
 *             .key(&#34;index.py&#34;)
 *             .content(&#34;&#34;&#34;
 * import logging 
 * def handler(event, context): 
 * logger = logging.getLogger() 
 * logger.info(&#39;hello world&#39;) 
 * return &#39;hello world&#39;            &#34;&#34;&#34;)
 *             .build());
 * 
 *         var defaultFunction = new Function(&#34;defaultFunction&#34;, FunctionArgs.builder()        
 *             .service(defaultService.name())
 *             .description(&#34;example&#34;)
 *             .ossBucket(defaultBucket.id())
 *             .ossKey(defaultBucketObject.key())
 *             .memorySize(&#34;512&#34;)
 *             .runtime(&#34;python3.10&#34;)
 *             .handler(&#34;hello.handler&#34;)
 *             .build());
 * 
 *         var ossTrigger = new Trigger(&#34;ossTrigger&#34;, TriggerArgs.builder()        
 *             .service(defaultService.name())
 *             .function(defaultFunction.name())
 *             .type(&#34;eventbridge&#34;)
 *             .config(&#34;&#34;&#34;
 *     {
 *         &#34;triggerEnable&#34;: false,
 *         &#34;asyncInvocationType&#34;: false,
 *         &#34;eventRuleFilterPattern&#34;: {
 *           &#34;source&#34;:[
 *             &#34;acs.oss&#34;
 *             ],
 *             &#34;type&#34;:[
 *               &#34;oss:BucketCreated:PutBucket&#34;
 *             ]
 *         },
 *         &#34;eventSourceConfig&#34;: {
 *             &#34;eventSourceType&#34;: &#34;Default&#34;
 *         }
 *     }
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *         var mnsTrigger = new Trigger(&#34;mnsTrigger&#34;, TriggerArgs.builder()        
 *             .service(defaultService.name())
 *             .function(defaultFunction.name())
 *             .type(&#34;eventbridge&#34;)
 *             .config(&#34;&#34;&#34;
 *     {
 *         &#34;triggerEnable&#34;: false,
 *         &#34;asyncInvocationType&#34;: false,
 *         &#34;eventRuleFilterPattern&#34;: &#34;{}&#34;,
 *         &#34;eventSourceConfig&#34;: {
 *             &#34;eventSourceType&#34;: &#34;MNS&#34;,
 *             &#34;eventSourceParameters&#34;: {
 *                 &#34;sourceMNSParameters&#34;: {
 *                     &#34;RegionId&#34;: &#34;cn-hangzhou&#34;,
 *                     &#34;QueueName&#34;: &#34;mns-queue&#34;,
 *                     &#34;IsBase64Decode&#34;: true
 *                 }
 *             }
 *         }
 *     }
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *         var defaultInstance = new Instance(&#34;defaultInstance&#34;, InstanceArgs.builder()        
 *             .instanceName(defaultRandomInteger.result().applyValue(result -&gt; String.format(&#34;terraform-example-%s&#34;, result)))
 *             .remark(&#34;terraform-example&#34;)
 *             .build());
 * 
 *         var defaultGroup = new Group(&#34;defaultGroup&#34;, GroupArgs.builder()        
 *             .groupName(&#34;GID-example&#34;)
 *             .instanceId(defaultInstance.id())
 *             .remark(&#34;terraform-example&#34;)
 *             .build());
 * 
 *         var defaultTopic = new Topic(&#34;defaultTopic&#34;, TopicArgs.builder()        
 *             .topicName(&#34;mytopic&#34;)
 *             .instanceId(defaultInstance.id())
 *             .messageType(0)
 *             .remark(&#34;terraform-example&#34;)
 *             .build());
 * 
 *         var rocketmqTrigger = new Trigger(&#34;rocketmqTrigger&#34;, TriggerArgs.builder()        
 *             .service(defaultService.name())
 *             .function(defaultFunction.name())
 *             .type(&#34;eventbridge&#34;)
 *             .config(Output.tuple(defaultInstance.id(), defaultGroup.groupName(), defaultTopic.topicName()).applyValue(values -&gt; {
 *                 var id = values.t1;
 *                 var groupName = values.t2;
 *                 var topicName = values.t3;
 *                 return &#34;&#34;&#34;
 *     {
 *         &#34;triggerEnable&#34;: false,
 *         &#34;asyncInvocationType&#34;: false,
 *         &#34;eventRuleFilterPattern&#34;: &#34;{}&#34;,
 *         &#34;eventSourceConfig&#34;: {
 *             &#34;eventSourceType&#34;: &#34;RocketMQ&#34;,
 *             &#34;eventSourceParameters&#34;: {
 *                 &#34;sourceRocketMQParameters&#34;: {
 *                     &#34;RegionId&#34;: &#34;%s&#34;,
 *                     &#34;InstanceId&#34;: &#34;%s&#34;,
 *                     &#34;GroupID&#34;: &#34;%s&#34;,
 *                     &#34;Topic&#34;: &#34;%s&#34;,
 *                     &#34;Timestamp&#34;: 1686296162,
 *                     &#34;Tag&#34;: &#34;example-tag&#34;,
 *                     &#34;Offset&#34;: &#34;CONSUME_FROM_LAST_OFFSET&#34;
 *                 }
 *             }
 *         }
 *     }
 * &#34;, defaultRegions.applyValue(getRegionsResult -&gt; getRegionsResult.regions()[0].id()),id,groupName,topicName);
 *             }))
 *             .build());
 * 
 *         var defaultAmqp_instanceInstance = new Instance(&#34;defaultAmqp/instanceInstance&#34;, InstanceArgs.builder()        
 *             .instanceName(defaultRandomInteger.result().applyValue(result -&gt; String.format(&#34;terraform-example-%s&#34;, result)))
 *             .instanceType(&#34;professional&#34;)
 *             .maxTps(1000)
 *             .queueCapacity(50)
 *             .supportEip(true)
 *             .maxEipTps(128)
 *             .paymentType(&#34;Subscription&#34;)
 *             .period(1)
 *             .build());
 * 
 *         var defaultVirtualHost = new VirtualHost(&#34;defaultVirtualHost&#34;, VirtualHostArgs.builder()        
 *             .instanceId(defaultAmqp / instanceInstance.id())
 *             .virtualHostName(&#34;example-VirtualHost&#34;)
 *             .build());
 * 
 *         var defaultQueue = new Queue(&#34;defaultQueue&#34;, QueueArgs.builder()        
 *             .instanceId(defaultVirtualHost.instanceId())
 *             .queueName(&#34;example-queue&#34;)
 *             .virtualHostName(defaultVirtualHost.virtualHostName())
 *             .build());
 * 
 *         var rabbitmqTrigger = new Trigger(&#34;rabbitmqTrigger&#34;, TriggerArgs.builder()        
 *             .service(defaultService.name())
 *             .function(defaultFunction.name())
 *             .type(&#34;eventbridge&#34;)
 *             .config(Output.tuple(defaultVirtualHost.virtualHostName(), defaultQueue.queueName()).applyValue(values -&gt; {
 *                 var virtualHostName = values.t1;
 *                 var queueName = values.t2;
 *                 return &#34;&#34;&#34;
 *     {
 *         &#34;triggerEnable&#34;: false,
 *         &#34;asyncInvocationType&#34;: false,
 *         &#34;eventRuleFilterPattern&#34;: &#34;{}&#34;,
 *         &#34;eventSourceConfig&#34;: {
 *             &#34;eventSourceType&#34;: &#34;RabbitMQ&#34;,
 *             &#34;eventSourceParameters&#34;: {
 *                 &#34;sourceRabbitMQParameters&#34;: {
 *                     &#34;RegionId&#34;: &#34;%s&#34;,
 *                     &#34;InstanceId&#34;: &#34;%s&#34;,
 *                     &#34;VirtualHostName&#34;: &#34;%s&#34;,
 *                     &#34;QueueName&#34;: &#34;%s&#34;
 *                 }
 *             }
 *         }
 *     }
 * &#34;, defaultRegions.applyValue(getRegionsResult -&gt; getRegionsResult.regions()[0].id()),defaultAmqp / instanceInstance.id(),virtualHostName,queueName);
 *             }))
 *             .build());
 * 
 *     }
 * }
 * ```
 * ## Module Support
 * 
 * You can use to the existing fc module
 * to create several triggers quickly.
 * 
 * ## Import
 * 
 * Function Compute trigger can be imported using the id, e.g.
 * 
 * ```sh
 *  $ pulumi import alicloud:fc/trigger:Trigger foo my-fc-service:hello-world:hello-trigger
 * ```
 * 
 */
@ResourceType(type="alicloud:fc/trigger:Trigger")
public class Trigger extends com.pulumi.resources.CustomResource {
    /**
     * The config of Function Compute trigger.It is valid when `type` is not &#34;mns_topic&#34;.See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
     * 
     */
    @Export(name="config", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> config;

    /**
     * @return The config of Function Compute trigger.It is valid when `type` is not &#34;mns_topic&#34;.See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
     * 
     */
    public Output<Optional<String>> config() {
        return Codegen.optional(this.config);
    }
    /**
     * The config of Function Compute trigger when the type is &#34;mns_topic&#34;.It is conflict with `config`.
     * 
     */
    @Export(name="configMns", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> configMns;

    /**
     * @return The config of Function Compute trigger when the type is &#34;mns_topic&#34;.It is conflict with `config`.
     * 
     */
    public Output<Optional<String>> configMns() {
        return Codegen.optional(this.configMns);
    }
    /**
     * The Function Compute function name.
     * 
     */
    @Export(name="function", refs={String.class}, tree="[0]")
    private Output<String> function;

    /**
     * @return The Function Compute function name.
     * 
     */
    public Output<String> function() {
        return this.function;
    }
    /**
     * The date this resource was last modified.
     * 
     */
    @Export(name="lastModified", refs={String.class}, tree="[0]")
    private Output<String> lastModified;

    /**
     * @return The date this resource was last modified.
     * 
     */
    public Output<String> lastModified() {
        return this.lastModified;
    }
    /**
     * The Function Compute trigger name. It is the only in one service and is conflict with &#34;name_prefix&#34;.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The Function Compute trigger name. It is the only in one service and is conflict with &#34;name_prefix&#34;.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Setting a prefix to get a only trigger name. It is conflict with &#34;name&#34;.
     * 
     */
    @Export(name="namePrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namePrefix;

    /**
     * @return Setting a prefix to get a only trigger name. It is conflict with &#34;name&#34;.
     * 
     */
    public Output<Optional<String>> namePrefix() {
        return Codegen.optional(this.namePrefix);
    }
    /**
     * RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is &#34;acs:ram::$account-id:role/$role-name&#34;. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
     * 
     */
    @Export(name="role", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> role;

    /**
     * @return RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is &#34;acs:ram::$account-id:role/$role-name&#34;. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
     * 
     */
    public Output<Optional<String>> role() {
        return Codegen.optional(this.role);
    }
    /**
     * The Function Compute service name.
     * 
     */
    @Export(name="service", refs={String.class}, tree="[0]")
    private Output<String> service;

    /**
     * @return The Function Compute service name.
     * 
     */
    public Output<String> service() {
        return this.service;
    }
    /**
     * Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
     * 
     */
    @Export(name="sourceArn", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceArn;

    /**
     * @return Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
     * 
     */
    public Output<Optional<String>> sourceArn() {
        return Codegen.optional(this.sourceArn);
    }
    /**
     * The Function Compute trigger ID.
     * 
     */
    @Export(name="triggerId", refs={String.class}, tree="[0]")
    private Output<String> triggerId;

    /**
     * @return The Function Compute trigger ID.
     * 
     */
    public Output<String> triggerId() {
        return this.triggerId;
    }
    /**
     * The Type of the trigger. Valid values: [&#34;oss&#34;, &#34;log&#34;, &#34;timer&#34;, &#34;http&#34;, &#34;mns_topic&#34;, &#34;cdn_events&#34;, &#34;eventbridge&#34;].
     * 
     * &gt; **NOTE:** Config does not support modification when type is mns_topic.
     * **NOTE:** type = cdn_events, available in 1.47.0+.
     * **NOTE:** type = eventbridge, available in 1.173.0+.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The Type of the trigger. Valid values: [&#34;oss&#34;, &#34;log&#34;, &#34;timer&#34;, &#34;http&#34;, &#34;mns_topic&#34;, &#34;cdn_events&#34;, &#34;eventbridge&#34;].
     * 
     * &gt; **NOTE:** Config does not support modification when type is mns_topic.
     * **NOTE:** type = cdn_events, available in 1.47.0+.
     * **NOTE:** type = eventbridge, available in 1.173.0+.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Trigger(String name) {
        this(name, TriggerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Trigger(String name, TriggerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Trigger(String name, TriggerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:fc/trigger:Trigger", name, args == null ? TriggerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Trigger(String name, Output<String> id, @Nullable TriggerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:fc/trigger:Trigger", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Trigger get(String name, Output<String> id, @Nullable TriggerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Trigger(name, id, state, options);
    }
}
