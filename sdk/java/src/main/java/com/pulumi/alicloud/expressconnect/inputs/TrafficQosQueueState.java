// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.expressconnect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrafficQosQueueState extends com.pulumi.resources.ResourceArgs {

    public static final TrafficQosQueueState Empty = new TrafficQosQueueState();

    /**
     * QoS queue bandwidth percentage.
     * 
     * - When the QoS queue type is **Medium**, this field must be entered. Valid values: 1 to 100.
     * - When the QoS queue type is **Default**, this field is &#34;-&#34;.
     * 
     */
    @Import(name="bandwidthPercent")
    private @Nullable Output<String> bandwidthPercent;

    /**
     * @return QoS queue bandwidth percentage.
     * 
     * - When the QoS queue type is **Medium**, this field must be entered. Valid values: 1 to 100.
     * - When the QoS queue type is **Default**, this field is &#34;-&#34;.
     * 
     */
    public Optional<Output<String>> bandwidthPercent() {
        return Optional.ofNullable(this.bandwidthPercent);
    }

    /**
     * The QoS policy ID.
     * 
     */
    @Import(name="qosId")
    private @Nullable Output<String> qosId;

    /**
     * @return The QoS policy ID.
     * 
     */
    public Optional<Output<String>> qosId() {
        return Optional.ofNullable(this.qosId);
    }

    /**
     * The description of the QoS queue.  The length is 0 to 256 characters and cannot start with &#39;http:// &#39;or &#39;https.
     * 
     */
    @Import(name="queueDescription")
    private @Nullable Output<String> queueDescription;

    /**
     * @return The description of the QoS queue.  The length is 0 to 256 characters and cannot start with &#39;http:// &#39;or &#39;https.
     * 
     */
    public Optional<Output<String>> queueDescription() {
        return Optional.ofNullable(this.queueDescription);
    }

    /**
     * The QoS queue ID.
     * 
     */
    @Import(name="queueId")
    private @Nullable Output<String> queueId;

    /**
     * @return The QoS queue ID.
     * 
     */
    public Optional<Output<String>> queueId() {
        return Optional.ofNullable(this.queueId);
    }

    /**
     * The name of the QoS queue.  The length is 0 to 128 characters and cannot start with &#39;http:// &#39;or &#39;https.
     * 
     */
    @Import(name="queueName")
    private @Nullable Output<String> queueName;

    /**
     * @return The name of the QoS queue.  The length is 0 to 128 characters and cannot start with &#39;http:// &#39;or &#39;https.
     * 
     */
    public Optional<Output<String>> queueName() {
        return Optional.ofNullable(this.queueName);
    }

    /**
     * QoS queue type, value:
     * - **High**: High priority queue.
     * - **Medium**: Normal priority queue.
     * - **Default**: the Default priority queue.
     * &gt; **NOTE:**  Default priority queue cannot be created.
     * 
     */
    @Import(name="queueType")
    private @Nullable Output<String> queueType;

    /**
     * @return QoS queue type, value:
     * - **High**: High priority queue.
     * - **Medium**: Normal priority queue.
     * - **Default**: the Default priority queue.
     * &gt; **NOTE:**  Default priority queue cannot be created.
     * 
     */
    public Optional<Output<String>> queueType() {
        return Optional.ofNullable(this.queueType);
    }

    /**
     * The status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private TrafficQosQueueState() {}

    private TrafficQosQueueState(TrafficQosQueueState $) {
        this.bandwidthPercent = $.bandwidthPercent;
        this.qosId = $.qosId;
        this.queueDescription = $.queueDescription;
        this.queueId = $.queueId;
        this.queueName = $.queueName;
        this.queueType = $.queueType;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrafficQosQueueState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrafficQosQueueState $;

        public Builder() {
            $ = new TrafficQosQueueState();
        }

        public Builder(TrafficQosQueueState defaults) {
            $ = new TrafficQosQueueState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidthPercent QoS queue bandwidth percentage.
         * 
         * - When the QoS queue type is **Medium**, this field must be entered. Valid values: 1 to 100.
         * - When the QoS queue type is **Default**, this field is &#34;-&#34;.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPercent(@Nullable Output<String> bandwidthPercent) {
            $.bandwidthPercent = bandwidthPercent;
            return this;
        }

        /**
         * @param bandwidthPercent QoS queue bandwidth percentage.
         * 
         * - When the QoS queue type is **Medium**, this field must be entered. Valid values: 1 to 100.
         * - When the QoS queue type is **Default**, this field is &#34;-&#34;.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPercent(String bandwidthPercent) {
            return bandwidthPercent(Output.of(bandwidthPercent));
        }

        /**
         * @param qosId The QoS policy ID.
         * 
         * @return builder
         * 
         */
        public Builder qosId(@Nullable Output<String> qosId) {
            $.qosId = qosId;
            return this;
        }

        /**
         * @param qosId The QoS policy ID.
         * 
         * @return builder
         * 
         */
        public Builder qosId(String qosId) {
            return qosId(Output.of(qosId));
        }

        /**
         * @param queueDescription The description of the QoS queue.  The length is 0 to 256 characters and cannot start with &#39;http:// &#39;or &#39;https.
         * 
         * @return builder
         * 
         */
        public Builder queueDescription(@Nullable Output<String> queueDescription) {
            $.queueDescription = queueDescription;
            return this;
        }

        /**
         * @param queueDescription The description of the QoS queue.  The length is 0 to 256 characters and cannot start with &#39;http:// &#39;or &#39;https.
         * 
         * @return builder
         * 
         */
        public Builder queueDescription(String queueDescription) {
            return queueDescription(Output.of(queueDescription));
        }

        /**
         * @param queueId The QoS queue ID.
         * 
         * @return builder
         * 
         */
        public Builder queueId(@Nullable Output<String> queueId) {
            $.queueId = queueId;
            return this;
        }

        /**
         * @param queueId The QoS queue ID.
         * 
         * @return builder
         * 
         */
        public Builder queueId(String queueId) {
            return queueId(Output.of(queueId));
        }

        /**
         * @param queueName The name of the QoS queue.  The length is 0 to 128 characters and cannot start with &#39;http:// &#39;or &#39;https.
         * 
         * @return builder
         * 
         */
        public Builder queueName(@Nullable Output<String> queueName) {
            $.queueName = queueName;
            return this;
        }

        /**
         * @param queueName The name of the QoS queue.  The length is 0 to 128 characters and cannot start with &#39;http:// &#39;or &#39;https.
         * 
         * @return builder
         * 
         */
        public Builder queueName(String queueName) {
            return queueName(Output.of(queueName));
        }

        /**
         * @param queueType QoS queue type, value:
         * - **High**: High priority queue.
         * - **Medium**: Normal priority queue.
         * - **Default**: the Default priority queue.
         * &gt; **NOTE:**  Default priority queue cannot be created.
         * 
         * @return builder
         * 
         */
        public Builder queueType(@Nullable Output<String> queueType) {
            $.queueType = queueType;
            return this;
        }

        /**
         * @param queueType QoS queue type, value:
         * - **High**: High priority queue.
         * - **Medium**: Normal priority queue.
         * - **Default**: the Default priority queue.
         * &gt; **NOTE:**  Default priority queue cannot be created.
         * 
         * @return builder
         * 
         */
        public Builder queueType(String queueType) {
            return queueType(Output.of(queueType));
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public TrafficQosQueueState build() {
            return $;
        }
    }

}
