// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vod.inputs;

import com.pulumi.alicloud.vod.inputs.DomainSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainState extends com.pulumi.resources.ResourceArgs {

    public static final DomainState Empty = new DomainState();

    /**
     * The name of the certificate. The value of this parameter is returned if HTTPS is enabled.
     * 
     */
    @Import(name="certName")
    private @Nullable Output<String> certName;

    /**
     * @return The name of the certificate. The value of this parameter is returned if HTTPS is enabled.
     * 
     */
    public Optional<Output<String>> certName() {
        return Optional.ofNullable(this.certName);
    }

    /**
     * The URL that is used for health checks.
     * 
     */
    @Import(name="checkUrl")
    private @Nullable Output<String> checkUrl;

    /**
     * @return The URL that is used for health checks.
     * 
     */
    public Optional<Output<String>> checkUrl() {
        return Optional.ofNullable(this.checkUrl);
    }

    /**
     * The CNAME that is assigned to the domain name for CDN. You must add a CNAME record in the system of your Domain Name System (DNS) service provider to map the domain name for CDN to the CNAME.
     * 
     */
    @Import(name="cname")
    private @Nullable Output<String> cname;

    /**
     * @return The CNAME that is assigned to the domain name for CDN. You must add a CNAME record in the system of your Domain Name System (DNS) service provider to map the domain name for CDN to the CNAME.
     * 
     */
    public Optional<Output<String>> cname() {
        return Optional.ofNullable(this.cname);
    }

    /**
     * The description of the domain name for CDN.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the domain name for CDN.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The domain name for CDN that you want to add to ApsaraVideo VOD. Wildcard domain names are supported. Start the domain name with a period (.). Example: `.example.com.`.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return The domain name for CDN that you want to add to ApsaraVideo VOD. Wildcard domain names are supported. Start the domain name with a period (.). Example: `.example.com.`.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * The time when the domain name for CDN was added. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    @Import(name="gmtCreated")
    private @Nullable Output<String> gmtCreated;

    /**
     * @return The time when the domain name for CDN was added. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    public Optional<Output<String>> gmtCreated() {
        return Optional.ofNullable(this.gmtCreated);
    }

    /**
     * The last time when the domain name for CDN was modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    @Import(name="gmtModified")
    private @Nullable Output<String> gmtModified;

    /**
     * @return The last time when the domain name for CDN was modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
     * 
     */
    public Optional<Output<String>> gmtModified() {
        return Optional.ofNullable(this.gmtModified);
    }

    /**
     * This parameter is applicable to users of level 3 or higher in mainland China and users outside mainland China. Valid values:
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return This parameter is applicable to users of level 3 or higher in mainland China and users outside mainland China. Valid values:
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The information about the address of the origin server. For more information about the Sources parameter, See the following `Block sources`.
     * 
     */
    @Import(name="sources")
    private @Nullable Output<List<DomainSourceArgs>> sources;

    /**
     * @return The information about the address of the origin server. For more information about the Sources parameter, See the following `Block sources`.
     * 
     */
    public Optional<Output<List<DomainSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    /**
     * Indicates whether the Secure Sockets Layer (SSL) certificate is enabled. Valid values: `on`,`off`.
     * 
     */
    @Import(name="sslProtocol")
    private @Nullable Output<String> sslProtocol;

    /**
     * @return Indicates whether the Secure Sockets Layer (SSL) certificate is enabled. Valid values: `on`,`off`.
     * 
     */
    public Optional<Output<String>> sslProtocol() {
        return Optional.ofNullable(this.sslProtocol);
    }

    /**
     * The public key of the certificate. The value of this parameter is returned if HTTPS is enabled.
     * 
     */
    @Import(name="sslPub")
    private @Nullable Output<String> sslPub;

    /**
     * @return The public key of the certificate. The value of this parameter is returned if HTTPS is enabled.
     * 
     */
    public Optional<Output<String>> sslPub() {
        return Optional.ofNullable(this.sslPub);
    }

    /**
     * The status of the domain name for CDN. Valid values:
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the domain name for CDN. Valid values:
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A mapping of tags to assign to the resource.
     * * `Key`: It can be up to 64 characters in length. It cannot be a null string.
     * * `Value`: It can be up to 128 characters in length. It can be a null string.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * * `Key`: It can be up to 64 characters in length. It cannot be a null string.
     * * `Value`: It can be up to 128 characters in length. It can be a null string.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The top-level domain name.
     * 
     */
    @Import(name="topLevelDomain")
    private @Nullable Output<String> topLevelDomain;

    /**
     * @return The top-level domain name.
     * 
     */
    public Optional<Output<String>> topLevelDomain() {
        return Optional.ofNullable(this.topLevelDomain);
    }

    /**
     * The weight of the origin server.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<String> weight;

    /**
     * @return The weight of the origin server.
     * 
     */
    public Optional<Output<String>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private DomainState() {}

    private DomainState(DomainState $) {
        this.certName = $.certName;
        this.checkUrl = $.checkUrl;
        this.cname = $.cname;
        this.description = $.description;
        this.domainName = $.domainName;
        this.gmtCreated = $.gmtCreated;
        this.gmtModified = $.gmtModified;
        this.scope = $.scope;
        this.sources = $.sources;
        this.sslProtocol = $.sslProtocol;
        this.sslPub = $.sslPub;
        this.status = $.status;
        this.tags = $.tags;
        this.topLevelDomain = $.topLevelDomain;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainState $;

        public Builder() {
            $ = new DomainState();
        }

        public Builder(DomainState defaults) {
            $ = new DomainState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certName The name of the certificate. The value of this parameter is returned if HTTPS is enabled.
         * 
         * @return builder
         * 
         */
        public Builder certName(@Nullable Output<String> certName) {
            $.certName = certName;
            return this;
        }

        /**
         * @param certName The name of the certificate. The value of this parameter is returned if HTTPS is enabled.
         * 
         * @return builder
         * 
         */
        public Builder certName(String certName) {
            return certName(Output.of(certName));
        }

        /**
         * @param checkUrl The URL that is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder checkUrl(@Nullable Output<String> checkUrl) {
            $.checkUrl = checkUrl;
            return this;
        }

        /**
         * @param checkUrl The URL that is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder checkUrl(String checkUrl) {
            return checkUrl(Output.of(checkUrl));
        }

        /**
         * @param cname The CNAME that is assigned to the domain name for CDN. You must add a CNAME record in the system of your Domain Name System (DNS) service provider to map the domain name for CDN to the CNAME.
         * 
         * @return builder
         * 
         */
        public Builder cname(@Nullable Output<String> cname) {
            $.cname = cname;
            return this;
        }

        /**
         * @param cname The CNAME that is assigned to the domain name for CDN. You must add a CNAME record in the system of your Domain Name System (DNS) service provider to map the domain name for CDN to the CNAME.
         * 
         * @return builder
         * 
         */
        public Builder cname(String cname) {
            return cname(Output.of(cname));
        }

        /**
         * @param description The description of the domain name for CDN.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the domain name for CDN.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domainName The domain name for CDN that you want to add to ApsaraVideo VOD. Wildcard domain names are supported. Start the domain name with a period (.). Example: `.example.com.`.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The domain name for CDN that you want to add to ApsaraVideo VOD. Wildcard domain names are supported. Start the domain name with a period (.). Example: `.example.com.`.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param gmtCreated The time when the domain name for CDN was added. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder gmtCreated(@Nullable Output<String> gmtCreated) {
            $.gmtCreated = gmtCreated;
            return this;
        }

        /**
         * @param gmtCreated The time when the domain name for CDN was added. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder gmtCreated(String gmtCreated) {
            return gmtCreated(Output.of(gmtCreated));
        }

        /**
         * @param gmtModified The last time when the domain name for CDN was modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder gmtModified(@Nullable Output<String> gmtModified) {
            $.gmtModified = gmtModified;
            return this;
        }

        /**
         * @param gmtModified The last time when the domain name for CDN was modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder gmtModified(String gmtModified) {
            return gmtModified(Output.of(gmtModified));
        }

        /**
         * @param scope This parameter is applicable to users of level 3 or higher in mainland China and users outside mainland China. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope This parameter is applicable to users of level 3 or higher in mainland China and users outside mainland China. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param sources The information about the address of the origin server. For more information about the Sources parameter, See the following `Block sources`.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable Output<List<DomainSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources The information about the address of the origin server. For more information about the Sources parameter, See the following `Block sources`.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<DomainSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources The information about the address of the origin server. For more information about the Sources parameter, See the following `Block sources`.
         * 
         * @return builder
         * 
         */
        public Builder sources(DomainSourceArgs... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param sslProtocol Indicates whether the Secure Sockets Layer (SSL) certificate is enabled. Valid values: `on`,`off`.
         * 
         * @return builder
         * 
         */
        public Builder sslProtocol(@Nullable Output<String> sslProtocol) {
            $.sslProtocol = sslProtocol;
            return this;
        }

        /**
         * @param sslProtocol Indicates whether the Secure Sockets Layer (SSL) certificate is enabled. Valid values: `on`,`off`.
         * 
         * @return builder
         * 
         */
        public Builder sslProtocol(String sslProtocol) {
            return sslProtocol(Output.of(sslProtocol));
        }

        /**
         * @param sslPub The public key of the certificate. The value of this parameter is returned if HTTPS is enabled.
         * 
         * @return builder
         * 
         */
        public Builder sslPub(@Nullable Output<String> sslPub) {
            $.sslPub = sslPub;
            return this;
        }

        /**
         * @param sslPub The public key of the certificate. The value of this parameter is returned if HTTPS is enabled.
         * 
         * @return builder
         * 
         */
        public Builder sslPub(String sslPub) {
            return sslPub(Output.of(sslPub));
        }

        /**
         * @param status The status of the domain name for CDN. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the domain name for CDN. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * * `Key`: It can be up to 64 characters in length. It cannot be a null string.
         * * `Value`: It can be up to 128 characters in length. It can be a null string.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * * `Key`: It can be up to 64 characters in length. It cannot be a null string.
         * * `Value`: It can be up to 128 characters in length. It can be a null string.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param topLevelDomain The top-level domain name.
         * 
         * @return builder
         * 
         */
        public Builder topLevelDomain(@Nullable Output<String> topLevelDomain) {
            $.topLevelDomain = topLevelDomain;
            return this;
        }

        /**
         * @param topLevelDomain The top-level domain name.
         * 
         * @return builder
         * 
         */
        public Builder topLevelDomain(String topLevelDomain) {
            return topLevelDomain(Output.of(topLevelDomain));
        }

        /**
         * @param weight The weight of the origin server.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<String> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight The weight of the origin server.
         * 
         * @return builder
         * 
         */
        public Builder weight(String weight) {
            return weight(Output.of(weight));
        }

        public DomainState build() {
            return $;
        }
    }

}
