// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.fc.V3FunctionArgs;
import com.pulumi.alicloud.fc.inputs.V3FunctionState;
import com.pulumi.alicloud.fc.outputs.V3FunctionCode;
import com.pulumi.alicloud.fc.outputs.V3FunctionCustomContainerConfig;
import com.pulumi.alicloud.fc.outputs.V3FunctionCustomDns;
import com.pulumi.alicloud.fc.outputs.V3FunctionCustomRuntimeConfig;
import com.pulumi.alicloud.fc.outputs.V3FunctionGpuConfig;
import com.pulumi.alicloud.fc.outputs.V3FunctionInstanceLifecycleConfig;
import com.pulumi.alicloud.fc.outputs.V3FunctionInvocationRestriction;
import com.pulumi.alicloud.fc.outputs.V3FunctionLogConfig;
import com.pulumi.alicloud.fc.outputs.V3FunctionNasConfig;
import com.pulumi.alicloud.fc.outputs.V3FunctionOssMountConfig;
import com.pulumi.alicloud.fc.outputs.V3FunctionTracingConfig;
import com.pulumi.alicloud.fc.outputs.V3FunctionVpcConfig;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Function Compute Service V3 (FCV3) Function resource.
 * 
 * The resource scheduling and running of Function Compute is based on functions. The FC function consists of function code and function configuration.
 * 
 * For information about Function Compute Service V3 (FCV3) Function and how to use it, see [What is Function](https://www.alibabacloud.com/help/en/functioncompute/developer-reference/api-fc-2023-03-30-getfunction).
 * 
 * &gt; **NOTE:** Available since v1.228.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.random.Uuid;
 * import com.pulumi.alicloud.oss.Bucket;
 * import com.pulumi.alicloud.oss.BucketArgs;
 * import com.pulumi.alicloud.oss.BucketObject;
 * import com.pulumi.alicloud.oss.BucketObjectArgs;
 * import com.pulumi.alicloud.fc.V3Function;
 * import com.pulumi.alicloud.fc.V3FunctionArgs;
 * import com.pulumi.alicloud.fc.inputs.V3FunctionCustomRuntimeConfigArgs;
 * import com.pulumi.alicloud.fc.inputs.V3FunctionCustomRuntimeConfigHealthCheckConfigArgs;
 * import com.pulumi.alicloud.fc.inputs.V3FunctionLogConfigArgs;
 * import com.pulumi.alicloud.fc.inputs.V3FunctionCodeArgs;
 * import com.pulumi.alicloud.fc.inputs.V3FunctionInstanceLifecycleConfigArgs;
 * import com.pulumi.alicloud.fc.inputs.V3FunctionInstanceLifecycleConfigInitializerArgs;
 * import com.pulumi.alicloud.fc.inputs.V3FunctionInstanceLifecycleConfigPreStopArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("terraform-example");
 *         var default_ = new Uuid("default");
 * 
 *         var defaultBucket = new Bucket("defaultBucket", BucketArgs.builder()
 *             .bucket(String.format("%s-%s", name,default_.result()))
 *             .build());
 * 
 *         var defaultBucketObject = new BucketObject("defaultBucketObject", BucketObjectArgs.builder()
 *             .bucket(defaultBucket.bucket())
 *             .key("FCV3Py39.zip")
 *             .content("print('hello')")
 *             .build());
 * 
 *         var defaultV3Function = new V3Function("defaultV3Function", V3FunctionArgs.builder()
 *             .description("Create")
 *             .memorySize(512)
 *             .layers("acs:fc:cn-shanghai:official:layers/Python39-Aliyun-SDK/versions/3")
 *             .timeout(3)
 *             .runtime("custom.debian10")
 *             .handler("index.handler")
 *             .diskSize(512)
 *             .customRuntimeConfig(V3FunctionCustomRuntimeConfigArgs.builder()
 *                 .commands(                
 *                     "python",
 *                     "-c",
 *                     "example")
 *                 .args(                
 *                     "app.py",
 *                     "xx",
 *                     "x")
 *                 .port(9000)
 *                 .healthCheckConfig(V3FunctionCustomRuntimeConfigHealthCheckConfigArgs.builder()
 *                     .httpGetUrl("/ready")
 *                     .initialDelaySeconds(1)
 *                     .periodSeconds(10)
 *                     .successThreshold(1)
 *                     .timeoutSeconds(1)
 *                     .failureThreshold(3)
 *                     .build())
 *                 .build())
 *             .logConfig(V3FunctionLogConfigArgs.builder()
 *                 .logBeginRule("None")
 *                 .build())
 *             .code(V3FunctionCodeArgs.builder()
 *                 .ossBucketName(defaultBucket.bucket())
 *                 .ossObjectName(defaultBucketObject.key())
 *                 .checksum("4270285996107335518")
 *                 .build())
 *             .instanceLifecycleConfig(V3FunctionInstanceLifecycleConfigArgs.builder()
 *                 .initializer(V3FunctionInstanceLifecycleConfigInitializerArgs.builder()
 *                     .timeout(1)
 *                     .handler("index.init")
 *                     .build())
 *                 .preStop(V3FunctionInstanceLifecycleConfigPreStopArgs.builder()
 *                     .timeout(1)
 *                     .handler("index.stop")
 *                     .build())
 *                 .build())
 *             .cpu(0.5)
 *             .instanceConcurrency(2)
 *             .functionName(String.format("%s-%s", name,default_.result()))
 *             .environmentVariables(Map.of("EnvKey", "EnvVal"))
 *             .internetAccess(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Function Compute Service V3 (FCV3) Function can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:fc/v3Function:V3Function example &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:fc/v3Function:V3Function")
public class V3Function extends com.pulumi.resources.CustomResource {
    /**
     * Function code ZIP package. code and customContainerConfig. See `code` below.
     * 
     */
    @Export(name="code", refs={V3FunctionCode.class}, tree="[0]")
    private Output</* @Nullable */ V3FunctionCode> code;

    /**
     * @return Function code ZIP package. code and customContainerConfig. See `code` below.
     * 
     */
    public Output<Optional<V3FunctionCode>> code() {
        return Codegen.optional(this.code);
    }
    /**
     * The code package size of the function returned by the system, in byte Example : 1024
     * 
     */
    @Export(name="codeSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> codeSize;

    /**
     * @return The code package size of the function returned by the system, in byte Example : 1024
     * 
     */
    public Output<Integer> codeSize() {
        return this.codeSize;
    }
    /**
     * The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
     * 
     */
    @Export(name="cpu", refs={Double.class}, tree="[0]")
    private Output<Double> cpu;

    /**
     * @return The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
     * 
     */
    public Output<Double> cpu() {
        return this.cpu;
    }
    /**
     * The creation time of the function.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The creation time of the function.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
     * 
     */
    @Export(name="customContainerConfig", refs={V3FunctionCustomContainerConfig.class}, tree="[0]")
    private Output</* @Nullable */ V3FunctionCustomContainerConfig> customContainerConfig;

    /**
     * @return The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
     * 
     */
    public Output<Optional<V3FunctionCustomContainerConfig>> customContainerConfig() {
        return Codegen.optional(this.customContainerConfig);
    }
    /**
     * Function custom DNS configuration See `customDns` below.
     * 
     */
    @Export(name="customDns", refs={V3FunctionCustomDns.class}, tree="[0]")
    private Output</* @Nullable */ V3FunctionCustomDns> customDns;

    /**
     * @return Function custom DNS configuration See `customDns` below.
     * 
     */
    public Output<Optional<V3FunctionCustomDns>> customDns() {
        return Codegen.optional(this.customDns);
    }
    /**
     * Customize the runtime configuration. See `customRuntimeConfig` below.
     * 
     */
    @Export(name="customRuntimeConfig", refs={V3FunctionCustomRuntimeConfig.class}, tree="[0]")
    private Output</* @Nullable */ V3FunctionCustomRuntimeConfig> customRuntimeConfig;

    /**
     * @return Customize the runtime configuration. See `customRuntimeConfig` below.
     * 
     */
    public Output<Optional<V3FunctionCustomRuntimeConfig>> customRuntimeConfig() {
        return Codegen.optional(this.customRuntimeConfig);
    }
    /**
     * The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
     * 
     */
    @Export(name="diskSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> diskSize;

    /**
     * @return The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
     * 
     */
    public Output<Integer> diskSize() {
        return this.diskSize;
    }
    /**
     * The environment variable set for the function, you can get the value of the environment variable in the function.
     * 
     */
    @Export(name="environmentVariables", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> environmentVariables;

    /**
     * @return The environment variable set for the function, you can get the value of the environment variable in the function.
     * 
     */
    public Output<Optional<Map<String,String>>> environmentVariables() {
        return Codegen.optional(this.environmentVariables);
    }
    /**
     * ARN of function
     * 
     */
    @Export(name="functionArn", refs={String.class}, tree="[0]")
    private Output<String> functionArn;

    /**
     * @return ARN of function
     * 
     */
    public Output<String> functionArn() {
        return this.functionArn;
    }
    /**
     * The first ID of the resource
     * 
     */
    @Export(name="functionId", refs={String.class}, tree="[0]")
    private Output<String> functionId;

    /**
     * @return The first ID of the resource
     * 
     */
    public Output<String> functionId() {
        return this.functionId;
    }
    /**
     * The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
     * 
     */
    @Export(name="functionName", refs={String.class}, tree="[0]")
    private Output<String> functionName;

    /**
     * @return The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }
    /**
     * Function GPU configuration. See `gpuConfig` below.
     * 
     */
    @Export(name="gpuConfig", refs={V3FunctionGpuConfig.class}, tree="[0]")
    private Output</* @Nullable */ V3FunctionGpuConfig> gpuConfig;

    /**
     * @return Function GPU configuration. See `gpuConfig` below.
     * 
     */
    public Output<Optional<V3FunctionGpuConfig>> gpuConfig() {
        return Codegen.optional(this.gpuConfig);
    }
    /**
     * Function Handler: the call entry for the function compute system to run your function.
     * 
     */
    @Export(name="handler", refs={String.class}, tree="[0]")
    private Output<String> handler;

    /**
     * @return Function Handler: the call entry for the function compute system to run your function.
     * 
     */
    public Output<String> handler() {
        return this.handler;
    }
    /**
     * Maximum instance concurrency.
     * 
     */
    @Export(name="instanceConcurrency", refs={Integer.class}, tree="[0]")
    private Output<Integer> instanceConcurrency;

    /**
     * @return Maximum instance concurrency.
     * 
     */
    public Output<Integer> instanceConcurrency() {
        return this.instanceConcurrency;
    }
    /**
     * Instance isolation mode
     * 
     */
    @Export(name="instanceIsolationMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> instanceIsolationMode;

    /**
     * @return Instance isolation mode
     * 
     */
    public Output<Optional<String>> instanceIsolationMode() {
        return Codegen.optional(this.instanceIsolationMode);
    }
    /**
     * Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
     * 
     */
    @Export(name="instanceLifecycleConfig", refs={V3FunctionInstanceLifecycleConfig.class}, tree="[0]")
    private Output</* @Nullable */ V3FunctionInstanceLifecycleConfig> instanceLifecycleConfig;

    /**
     * @return Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
     * 
     */
    public Output<Optional<V3FunctionInstanceLifecycleConfig>> instanceLifecycleConfig() {
        return Codegen.optional(this.instanceLifecycleConfig);
    }
    /**
     * Allow function to access public network
     * 
     */
    @Export(name="internetAccess", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> internetAccess;

    /**
     * @return Allow function to access public network
     * 
     */
    public Output<Boolean> internetAccess() {
        return this.internetAccess;
    }
    /**
     * Invocation Restriction Detail See `invocationRestriction` below.
     * 
     */
    @Export(name="invocationRestriction", refs={V3FunctionInvocationRestriction.class}, tree="[0]")
    private Output</* @Nullable */ V3FunctionInvocationRestriction> invocationRestriction;

    /**
     * @return Invocation Restriction Detail See `invocationRestriction` below.
     * 
     */
    public Output<Optional<V3FunctionInvocationRestriction>> invocationRestriction() {
        return Codegen.optional(this.invocationRestriction);
    }
    /**
     * Last time the function was Updated
     * 
     */
    @Export(name="lastModifiedTime", refs={String.class}, tree="[0]")
    private Output<String> lastModifiedTime;

    /**
     * @return Last time the function was Updated
     * 
     */
    public Output<String> lastModifiedTime() {
        return this.lastModifiedTime;
    }
    /**
     * The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
     * 
     */
    @Export(name="lastUpdateStatus", refs={String.class}, tree="[0]")
    private Output<String> lastUpdateStatus;

    /**
     * @return The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
     * 
     */
    public Output<String> lastUpdateStatus() {
        return this.lastUpdateStatus;
    }
    /**
     * The reason that caused the last function to update the Operation State to the current value
     * 
     */
    @Export(name="lastUpdateStatusReason", refs={String.class}, tree="[0]")
    private Output<String> lastUpdateStatusReason;

    /**
     * @return The reason that caused the last function to update the Operation State to the current value
     * 
     */
    public Output<String> lastUpdateStatusReason() {
        return this.lastUpdateStatusReason;
    }
    /**
     * Status code of the reason that caused the last function update operation status to the current value
     * 
     */
    @Export(name="lastUpdateStatusReasonCode", refs={String.class}, tree="[0]")
    private Output<String> lastUpdateStatusReasonCode;

    /**
     * @return Status code of the reason that caused the last function update operation status to the current value
     * 
     */
    public Output<String> lastUpdateStatusReasonCode() {
        return this.lastUpdateStatusReasonCode;
    }
    /**
     * The list of layers.
     * 
     */
    @Export(name="layers", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> layers;

    /**
     * @return The list of layers.
     * 
     */
    public Output<Optional<List<String>>> layers() {
        return Codegen.optional(this.layers);
    }
    /**
     * The logs generated by the function are written to the configured Logstore. See `logConfig` below.
     * 
     */
    @Export(name="logConfig", refs={V3FunctionLogConfig.class}, tree="[0]")
    private Output</* @Nullable */ V3FunctionLogConfig> logConfig;

    /**
     * @return The logs generated by the function are written to the configured Logstore. See `logConfig` below.
     * 
     */
    public Output<Optional<V3FunctionLogConfig>> logConfig() {
        return Codegen.optional(this.logConfig);
    }
    /**
     * The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
     * 
     */
    @Export(name="memorySize", refs={Integer.class}, tree="[0]")
    private Output<Integer> memorySize;

    /**
     * @return The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
     * 
     */
    public Output<Integer> memorySize() {
        return this.memorySize;
    }
    /**
     * NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
     * 
     */
    @Export(name="nasConfig", refs={V3FunctionNasConfig.class}, tree="[0]")
    private Output<V3FunctionNasConfig> nasConfig;

    /**
     * @return NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
     * 
     */
    public Output<V3FunctionNasConfig> nasConfig() {
        return this.nasConfig;
    }
    /**
     * OSS mount configuration See `ossMountConfig` below.
     * 
     */
    @Export(name="ossMountConfig", refs={V3FunctionOssMountConfig.class}, tree="[0]")
    private Output<V3FunctionOssMountConfig> ossMountConfig;

    /**
     * @return OSS mount configuration See `ossMountConfig` below.
     * 
     */
    public Output<V3FunctionOssMountConfig> ossMountConfig() {
        return this.ossMountConfig;
    }
    /**
     * Resource Group ID.
     * 
     */
    @Export(name="resourceGroupId", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupId;

    /**
     * @return Resource Group ID.
     * 
     */
    public Output<String> resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
     * 
     */
    @Export(name="role", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> role;

    /**
     * @return The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
     * 
     */
    public Output<Optional<String>> role() {
        return Codegen.optional(this.role);
    }
    /**
     * Function runtime type.
     * 
     */
    @Export(name="runtime", refs={String.class}, tree="[0]")
    private Output<String> runtime;

    /**
     * @return Function runtime type.
     * 
     */
    public Output<String> runtime() {
        return this.runtime;
    }
    /**
     * The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
     * 
     */
    @Export(name="sessionAffinity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sessionAffinity;

    /**
     * @return The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
     * 
     */
    public Output<Optional<String>> sessionAffinity() {
        return Codegen.optional(this.sessionAffinity);
    }
    /**
     * When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
     * 
     */
    @Export(name="sessionAffinityConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sessionAffinityConfig;

    /**
     * @return When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
     * 
     */
    public Output<Optional<String>> sessionAffinityConfig() {
        return Codegen.optional(this.sessionAffinityConfig);
    }
    /**
     * Function Status
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Function Status
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The reason why the function is in the current state
     * 
     */
    @Export(name="stateReason", refs={String.class}, tree="[0]")
    private Output<String> stateReason;

    /**
     * @return The reason why the function is in the current state
     * 
     */
    public Output<String> stateReason() {
        return this.stateReason;
    }
    /**
     * The status code of the reason the function is in the current state.
     * 
     */
    @Export(name="stateReasonCode", refs={String.class}, tree="[0]")
    private Output<String> stateReasonCode;

    /**
     * @return The status code of the reason the function is in the current state.
     * 
     */
    public Output<String> stateReasonCode() {
        return this.stateReasonCode;
    }
    /**
     * The tag of the resource
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return The tag of the resource
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The maximum running time of the function, in seconds.
     * 
     */
    @Export(name="timeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> timeout;

    /**
     * @return The maximum running time of the function, in seconds.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }
    /**
     * Tracing configuration
     * 
     */
    @Export(name="tracingConfig", refs={V3FunctionTracingConfig.class}, tree="[0]")
    private Output<V3FunctionTracingConfig> tracingConfig;

    /**
     * @return Tracing configuration
     * 
     */
    public Output<V3FunctionTracingConfig> tracingConfig() {
        return this.tracingConfig;
    }
    /**
     * VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
     * 
     */
    @Export(name="vpcConfig", refs={V3FunctionVpcConfig.class}, tree="[0]")
    private Output<V3FunctionVpcConfig> vpcConfig;

    /**
     * @return VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
     * 
     */
    public Output<V3FunctionVpcConfig> vpcConfig() {
        return this.vpcConfig;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public V3Function(java.lang.String name) {
        this(name, V3FunctionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public V3Function(java.lang.String name, V3FunctionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public V3Function(java.lang.String name, V3FunctionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:fc/v3Function:V3Function", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private V3Function(java.lang.String name, Output<java.lang.String> id, @Nullable V3FunctionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:fc/v3Function:V3Function", name, state, makeResourceOptions(options, id), false);
    }

    private static V3FunctionArgs makeArgs(V3FunctionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? V3FunctionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static V3Function get(java.lang.String name, Output<java.lang.String> id, @Nullable V3FunctionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new V3Function(name, id, state, options);
    }
}
