// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowLogState extends com.pulumi.resources.ResourceArgs {

    public static final FlowLogState Empty = new FlowLogState();

    /**
     * The sampling interval of the flow log. Unit: seconds. Valid values: 1, 5, and 10 (default).
     * 
     */
    @Import(name="aggregationInterval")
    private @Nullable Output<String> aggregationInterval;

    /**
     * @return The sampling interval of the flow log. Unit: seconds. Valid values: 1, 5, and 10 (default).
     * 
     */
    public Optional<Output<String>> aggregationInterval() {
        return Optional.ofNullable(this.aggregationInterval);
    }

    /**
     * Business status
     * 
     */
    @Import(name="businessStatus")
    private @Nullable Output<String> businessStatus;

    /**
     * @return Business status
     * 
     */
    public Optional<Output<String>> businessStatus() {
        return Optional.ofNullable(this.businessStatus);
    }

    /**
     * Creation time
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Creation time
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The Description of the VPC Flow Log.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The Description of the VPC Flow Log.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The flow log ID.
     * 
     */
    @Import(name="flowLogId")
    private @Nullable Output<String> flowLogId;

    /**
     * @return The flow log ID.
     * 
     */
    public Optional<Output<String>> flowLogId() {
        return Optional.ofNullable(this.flowLogId);
    }

    /**
     * The Name of the VPC Flow Log.
     * 
     */
    @Import(name="flowLogName")
    private @Nullable Output<String> flowLogName;

    /**
     * @return The Name of the VPC Flow Log.
     * 
     */
    public Optional<Output<String>> flowLogName() {
        return Optional.ofNullable(this.flowLogName);
    }

    /**
     * The IP address type of the collected traffic.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<String> ipVersion;

    /**
     * @return The IP address type of the collected traffic.
     * 
     */
    public Optional<Output<String>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The Logstore that stores the captured traffic data.
     * 
     */
    @Import(name="logStoreName")
    private @Nullable Output<String> logStoreName;

    /**
     * @return The Logstore that stores the captured traffic data.
     * 
     */
    public Optional<Output<String>> logStoreName() {
        return Optional.ofNullable(this.logStoreName);
    }

    /**
     * The project that manages the captured traffic data.
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return The project that manages the captured traffic data.
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * The region ID.
     * 
     */
    @Import(name="regionId")
    private @Nullable Output<String> regionId;

    /**
     * @return The region ID.
     * 
     */
    public Optional<Output<String>> regionId() {
        return Optional.ofNullable(this.regionId);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The ID of the resource.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The ID of the resource.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * The resource type of the traffic captured by the flow log:
     * - `NetworkInterface`: ENI.
     * - `VSwitch`: All ENIs in the VSwitch.
     * - `VPC`: All ENIs in the VPC.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return The resource type of the traffic captured by the flow log:
     * - `NetworkInterface`: ENI.
     * - `VSwitch`: All ENIs in the VSwitch.
     * - `VPC`: All ENIs in the VPC.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * The status of the VPC Flow Log. Valid values: `Active` and `Inactive`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the VPC Flow Log. Valid values: `Active` and `Inactive`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tag of the current instance resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tag of the current instance resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The collected flow path. Value:
     * - *all**: indicates full acquisition.
     * - *internetGateway**: indicates public network traffic collection.
     * 
     */
    @Import(name="trafficPaths")
    private @Nullable Output<List<String>> trafficPaths;

    /**
     * @return The collected flow path. Value:
     * - *all**: indicates full acquisition.
     * - *internetGateway**: indicates public network traffic collection.
     * 
     */
    public Optional<Output<List<String>>> trafficPaths() {
        return Optional.ofNullable(this.trafficPaths);
    }

    /**
     * The type of traffic collected. Valid values:
     * - *All**: All traffic.
     * - *Allow**: Access control allowedtraffic.
     * - *Drop**: Access control denied traffic.
     * 
     */
    @Import(name="trafficType")
    private @Nullable Output<String> trafficType;

    /**
     * @return The type of traffic collected. Valid values:
     * - *All**: All traffic.
     * - *Allow**: Access control allowedtraffic.
     * - *Drop**: Access control denied traffic.
     * 
     */
    public Optional<Output<String>> trafficType() {
        return Optional.ofNullable(this.trafficType);
    }

    private FlowLogState() {}

    private FlowLogState(FlowLogState $) {
        this.aggregationInterval = $.aggregationInterval;
        this.businessStatus = $.businessStatus;
        this.createTime = $.createTime;
        this.description = $.description;
        this.flowLogId = $.flowLogId;
        this.flowLogName = $.flowLogName;
        this.ipVersion = $.ipVersion;
        this.logStoreName = $.logStoreName;
        this.projectName = $.projectName;
        this.regionId = $.regionId;
        this.resourceGroupId = $.resourceGroupId;
        this.resourceId = $.resourceId;
        this.resourceType = $.resourceType;
        this.status = $.status;
        this.tags = $.tags;
        this.trafficPaths = $.trafficPaths;
        this.trafficType = $.trafficType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowLogState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowLogState $;

        public Builder() {
            $ = new FlowLogState();
        }

        public Builder(FlowLogState defaults) {
            $ = new FlowLogState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregationInterval The sampling interval of the flow log. Unit: seconds. Valid values: 1, 5, and 10 (default).
         * 
         * @return builder
         * 
         */
        public Builder aggregationInterval(@Nullable Output<String> aggregationInterval) {
            $.aggregationInterval = aggregationInterval;
            return this;
        }

        /**
         * @param aggregationInterval The sampling interval of the flow log. Unit: seconds. Valid values: 1, 5, and 10 (default).
         * 
         * @return builder
         * 
         */
        public Builder aggregationInterval(String aggregationInterval) {
            return aggregationInterval(Output.of(aggregationInterval));
        }

        /**
         * @param businessStatus Business status
         * 
         * @return builder
         * 
         */
        public Builder businessStatus(@Nullable Output<String> businessStatus) {
            $.businessStatus = businessStatus;
            return this;
        }

        /**
         * @param businessStatus Business status
         * 
         * @return builder
         * 
         */
        public Builder businessStatus(String businessStatus) {
            return businessStatus(Output.of(businessStatus));
        }

        /**
         * @param createTime Creation time
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Creation time
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description The Description of the VPC Flow Log.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The Description of the VPC Flow Log.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param flowLogId The flow log ID.
         * 
         * @return builder
         * 
         */
        public Builder flowLogId(@Nullable Output<String> flowLogId) {
            $.flowLogId = flowLogId;
            return this;
        }

        /**
         * @param flowLogId The flow log ID.
         * 
         * @return builder
         * 
         */
        public Builder flowLogId(String flowLogId) {
            return flowLogId(Output.of(flowLogId));
        }

        /**
         * @param flowLogName The Name of the VPC Flow Log.
         * 
         * @return builder
         * 
         */
        public Builder flowLogName(@Nullable Output<String> flowLogName) {
            $.flowLogName = flowLogName;
            return this;
        }

        /**
         * @param flowLogName The Name of the VPC Flow Log.
         * 
         * @return builder
         * 
         */
        public Builder flowLogName(String flowLogName) {
            return flowLogName(Output.of(flowLogName));
        }

        /**
         * @param ipVersion The IP address type of the collected traffic.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<String> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP address type of the collected traffic.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(String ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param logStoreName The Logstore that stores the captured traffic data.
         * 
         * @return builder
         * 
         */
        public Builder logStoreName(@Nullable Output<String> logStoreName) {
            $.logStoreName = logStoreName;
            return this;
        }

        /**
         * @param logStoreName The Logstore that stores the captured traffic data.
         * 
         * @return builder
         * 
         */
        public Builder logStoreName(String logStoreName) {
            return logStoreName(Output.of(logStoreName));
        }

        /**
         * @param projectName The project that manages the captured traffic data.
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName The project that manages the captured traffic data.
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param regionId The region ID.
         * 
         * @return builder
         * 
         */
        public Builder regionId(@Nullable Output<String> regionId) {
            $.regionId = regionId;
            return this;
        }

        /**
         * @param regionId The region ID.
         * 
         * @return builder
         * 
         */
        public Builder regionId(String regionId) {
            return regionId(Output.of(regionId));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param resourceId The ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param resourceType The resource type of the traffic captured by the flow log:
         * - `NetworkInterface`: ENI.
         * - `VSwitch`: All ENIs in the VSwitch.
         * - `VPC`: All ENIs in the VPC.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The resource type of the traffic captured by the flow log:
         * - `NetworkInterface`: ENI.
         * - `VSwitch`: All ENIs in the VSwitch.
         * - `VPC`: All ENIs in the VPC.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param status The status of the VPC Flow Log. Valid values: `Active` and `Inactive`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the VPC Flow Log. Valid values: `Active` and `Inactive`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags The tag of the current instance resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the current instance resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param trafficPaths The collected flow path. Value:
         * - *all**: indicates full acquisition.
         * - *internetGateway**: indicates public network traffic collection.
         * 
         * @return builder
         * 
         */
        public Builder trafficPaths(@Nullable Output<List<String>> trafficPaths) {
            $.trafficPaths = trafficPaths;
            return this;
        }

        /**
         * @param trafficPaths The collected flow path. Value:
         * - *all**: indicates full acquisition.
         * - *internetGateway**: indicates public network traffic collection.
         * 
         * @return builder
         * 
         */
        public Builder trafficPaths(List<String> trafficPaths) {
            return trafficPaths(Output.of(trafficPaths));
        }

        /**
         * @param trafficPaths The collected flow path. Value:
         * - *all**: indicates full acquisition.
         * - *internetGateway**: indicates public network traffic collection.
         * 
         * @return builder
         * 
         */
        public Builder trafficPaths(String... trafficPaths) {
            return trafficPaths(List.of(trafficPaths));
        }

        /**
         * @param trafficType The type of traffic collected. Valid values:
         * - *All**: All traffic.
         * - *Allow**: Access control allowedtraffic.
         * - *Drop**: Access control denied traffic.
         * 
         * @return builder
         * 
         */
        public Builder trafficType(@Nullable Output<String> trafficType) {
            $.trafficType = trafficType;
            return this;
        }

        /**
         * @param trafficType The type of traffic collected. Valid values:
         * - *All**: All traffic.
         * - *Allow**: Access control allowedtraffic.
         * - *Drop**: Access control denied traffic.
         * 
         * @return builder
         * 
         */
        public Builder trafficType(String trafficType) {
            return trafficType(Output.of(trafficType));
        }

        public FlowLogState build() {
            return $;
        }
    }

}
