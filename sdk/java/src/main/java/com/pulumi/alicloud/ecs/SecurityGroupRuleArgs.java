// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityGroupRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityGroupRuleArgs Empty = new SecurityGroupRuleArgs();

    /**
     * The target IP address range. The default value is 0.0.0.0/0 (which means no restriction will be applied). Other supported formats include 10.159.6.18/12. Only IPv4 is supported.
     * 
     */
    @Import(name="cidrIp")
    private @Nullable Output<String> cidrIp;

    /**
     * @return The target IP address range. The default value is 0.0.0.0/0 (which means no restriction will be applied). Other supported formats include 10.159.6.18/12. Only IPv4 is supported.
     * 
     */
    public Optional<Output<String>> cidrIp() {
        return Optional.ofNullable(this.cidrIp);
    }

    /**
     * The description of the security group rule. The description can be up to 1 to 512 characters in length. Defaults to null.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the security group rule. The description can be up to 1 to 512 characters in length. Defaults to null.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The protocol. Can be `tcp`, `udp`, `icmp`, `gre` or `all`.
     * 
     */
    @Import(name="ipProtocol", required=true)
    private Output<String> ipProtocol;

    /**
     * @return The protocol. Can be `tcp`, `udp`, `icmp`, `gre` or `all`.
     * 
     */
    public Output<String> ipProtocol() {
        return this.ipProtocol;
    }

    /**
     * Source IPv6 CIDR address block that requires access. Supports IP address ranges in CIDR format and IPv6 format. **NOTE:** This parameter cannot be set at the same time as the `cidr_ip` parameter.
     * 
     * &gt; **NOTE:**  You must specify one of the following field: `cidr_ip`,`source_security_group_id`,`prefix_list_id`,`ipv6_cidr_ip`.
     * 
     */
    @Import(name="ipv6CidrIp")
    private @Nullable Output<String> ipv6CidrIp;

    /**
     * @return Source IPv6 CIDR address block that requires access. Supports IP address ranges in CIDR format and IPv6 format. **NOTE:** This parameter cannot be set at the same time as the `cidr_ip` parameter.
     * 
     * &gt; **NOTE:**  You must specify one of the following field: `cidr_ip`,`source_security_group_id`,`prefix_list_id`,`ipv6_cidr_ip`.
     * 
     */
    public Optional<Output<String>> ipv6CidrIp() {
        return Optional.ofNullable(this.ipv6CidrIp);
    }

    /**
     * Network type, can be either `internet` or `intranet`, the default value is `internet`.
     * 
     */
    @Import(name="nicType")
    private @Nullable Output<String> nicType;

    /**
     * @return Network type, can be either `internet` or `intranet`, the default value is `internet`.
     * 
     */
    public Optional<Output<String>> nicType() {
        return Optional.ofNullable(this.nicType);
    }

    /**
     * Authorization policy, can be either `accept` or `drop`, the default value is `accept`.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return Authorization policy, can be either `accept` or `drop`, the default value is `accept`.
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * The range of port numbers relevant to the IP protocol. Default to &#34;-1/-1&#34;. When the protocol is tcp or udp, each side port number range from 1 to 65535 and &#39;-1/-1&#39; will be invalid.
     * For example, `1/200` means that the range of the port numbers is 1-200. Other protocols&#39; &#39;port_range&#39; can only be &#34;-1/-1&#34;, and other values will be invalid.
     * 
     */
    @Import(name="portRange")
    private @Nullable Output<String> portRange;

    /**
     * @return The range of port numbers relevant to the IP protocol. Default to &#34;-1/-1&#34;. When the protocol is tcp or udp, each side port number range from 1 to 65535 and &#39;-1/-1&#39; will be invalid.
     * For example, `1/200` means that the range of the port numbers is 1-200. Other protocols&#39; &#39;port_range&#39; can only be &#34;-1/-1&#34;, and other values will be invalid.
     * 
     */
    public Optional<Output<String>> portRange() {
        return Optional.ofNullable(this.portRange);
    }

    /**
     * The ID of the source/destination prefix list to which you want to control access. **NOTE:** If you specify `cidr_ip`,`source_security_group_id`,`ipv6_cidr_ip` parameter, this parameter is ignored.
     * 
     */
    @Import(name="prefixListId")
    private @Nullable Output<String> prefixListId;

    /**
     * @return The ID of the source/destination prefix list to which you want to control access. **NOTE:** If you specify `cidr_ip`,`source_security_group_id`,`ipv6_cidr_ip` parameter, this parameter is ignored.
     * 
     */
    public Optional<Output<String>> prefixListId() {
        return Optional.ofNullable(this.prefixListId);
    }

    /**
     * Authorization policy priority, with parameter values: `1-100`, default value: 1.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Authorization policy priority, with parameter values: `1-100`, default value: 1.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The security group to apply this rule to.
     * 
     */
    @Import(name="securityGroupId", required=true)
    private Output<String> securityGroupId;

    /**
     * @return The security group to apply this rule to.
     * 
     */
    public Output<String> securityGroupId() {
        return this.securityGroupId;
    }

    /**
     * The Alibaba Cloud user account Id of the target security group when security groups are authorized across accounts.  This parameter is invalid if `cidr_ip` has already been set.
     * 
     */
    @Import(name="sourceGroupOwnerAccount")
    private @Nullable Output<String> sourceGroupOwnerAccount;

    /**
     * @return The Alibaba Cloud user account Id of the target security group when security groups are authorized across accounts.  This parameter is invalid if `cidr_ip` has already been set.
     * 
     */
    public Optional<Output<String>> sourceGroupOwnerAccount() {
        return Optional.ofNullable(this.sourceGroupOwnerAccount);
    }

    /**
     * The target security group ID within the same region. If this field is specified, the `nic_type` can only select `intranet`.
     * 
     */
    @Import(name="sourceSecurityGroupId")
    private @Nullable Output<String> sourceSecurityGroupId;

    /**
     * @return The target security group ID within the same region. If this field is specified, the `nic_type` can only select `intranet`.
     * 
     */
    public Optional<Output<String>> sourceSecurityGroupId() {
        return Optional.ofNullable(this.sourceSecurityGroupId);
    }

    /**
     * The type of rule being created. Valid options are `ingress` (inbound) or `egress` (outbound).
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of rule being created. Valid options are `ingress` (inbound) or `egress` (outbound).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private SecurityGroupRuleArgs() {}

    private SecurityGroupRuleArgs(SecurityGroupRuleArgs $) {
        this.cidrIp = $.cidrIp;
        this.description = $.description;
        this.ipProtocol = $.ipProtocol;
        this.ipv6CidrIp = $.ipv6CidrIp;
        this.nicType = $.nicType;
        this.policy = $.policy;
        this.portRange = $.portRange;
        this.prefixListId = $.prefixListId;
        this.priority = $.priority;
        this.securityGroupId = $.securityGroupId;
        this.sourceGroupOwnerAccount = $.sourceGroupOwnerAccount;
        this.sourceSecurityGroupId = $.sourceSecurityGroupId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityGroupRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityGroupRuleArgs $;

        public Builder() {
            $ = new SecurityGroupRuleArgs();
        }

        public Builder(SecurityGroupRuleArgs defaults) {
            $ = new SecurityGroupRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidrIp The target IP address range. The default value is 0.0.0.0/0 (which means no restriction will be applied). Other supported formats include 10.159.6.18/12. Only IPv4 is supported.
         * 
         * @return builder
         * 
         */
        public Builder cidrIp(@Nullable Output<String> cidrIp) {
            $.cidrIp = cidrIp;
            return this;
        }

        /**
         * @param cidrIp The target IP address range. The default value is 0.0.0.0/0 (which means no restriction will be applied). Other supported formats include 10.159.6.18/12. Only IPv4 is supported.
         * 
         * @return builder
         * 
         */
        public Builder cidrIp(String cidrIp) {
            return cidrIp(Output.of(cidrIp));
        }

        /**
         * @param description The description of the security group rule. The description can be up to 1 to 512 characters in length. Defaults to null.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the security group rule. The description can be up to 1 to 512 characters in length. Defaults to null.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipProtocol The protocol. Can be `tcp`, `udp`, `icmp`, `gre` or `all`.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(Output<String> ipProtocol) {
            $.ipProtocol = ipProtocol;
            return this;
        }

        /**
         * @param ipProtocol The protocol. Can be `tcp`, `udp`, `icmp`, `gre` or `all`.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(String ipProtocol) {
            return ipProtocol(Output.of(ipProtocol));
        }

        /**
         * @param ipv6CidrIp Source IPv6 CIDR address block that requires access. Supports IP address ranges in CIDR format and IPv6 format. **NOTE:** This parameter cannot be set at the same time as the `cidr_ip` parameter.
         * 
         * &gt; **NOTE:**  You must specify one of the following field: `cidr_ip`,`source_security_group_id`,`prefix_list_id`,`ipv6_cidr_ip`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrIp(@Nullable Output<String> ipv6CidrIp) {
            $.ipv6CidrIp = ipv6CidrIp;
            return this;
        }

        /**
         * @param ipv6CidrIp Source IPv6 CIDR address block that requires access. Supports IP address ranges in CIDR format and IPv6 format. **NOTE:** This parameter cannot be set at the same time as the `cidr_ip` parameter.
         * 
         * &gt; **NOTE:**  You must specify one of the following field: `cidr_ip`,`source_security_group_id`,`prefix_list_id`,`ipv6_cidr_ip`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrIp(String ipv6CidrIp) {
            return ipv6CidrIp(Output.of(ipv6CidrIp));
        }

        /**
         * @param nicType Network type, can be either `internet` or `intranet`, the default value is `internet`.
         * 
         * @return builder
         * 
         */
        public Builder nicType(@Nullable Output<String> nicType) {
            $.nicType = nicType;
            return this;
        }

        /**
         * @param nicType Network type, can be either `internet` or `intranet`, the default value is `internet`.
         * 
         * @return builder
         * 
         */
        public Builder nicType(String nicType) {
            return nicType(Output.of(nicType));
        }

        /**
         * @param policy Authorization policy, can be either `accept` or `drop`, the default value is `accept`.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy Authorization policy, can be either `accept` or `drop`, the default value is `accept`.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param portRange The range of port numbers relevant to the IP protocol. Default to &#34;-1/-1&#34;. When the protocol is tcp or udp, each side port number range from 1 to 65535 and &#39;-1/-1&#39; will be invalid.
         * For example, `1/200` means that the range of the port numbers is 1-200. Other protocols&#39; &#39;port_range&#39; can only be &#34;-1/-1&#34;, and other values will be invalid.
         * 
         * @return builder
         * 
         */
        public Builder portRange(@Nullable Output<String> portRange) {
            $.portRange = portRange;
            return this;
        }

        /**
         * @param portRange The range of port numbers relevant to the IP protocol. Default to &#34;-1/-1&#34;. When the protocol is tcp or udp, each side port number range from 1 to 65535 and &#39;-1/-1&#39; will be invalid.
         * For example, `1/200` means that the range of the port numbers is 1-200. Other protocols&#39; &#39;port_range&#39; can only be &#34;-1/-1&#34;, and other values will be invalid.
         * 
         * @return builder
         * 
         */
        public Builder portRange(String portRange) {
            return portRange(Output.of(portRange));
        }

        /**
         * @param prefixListId The ID of the source/destination prefix list to which you want to control access. **NOTE:** If you specify `cidr_ip`,`source_security_group_id`,`ipv6_cidr_ip` parameter, this parameter is ignored.
         * 
         * @return builder
         * 
         */
        public Builder prefixListId(@Nullable Output<String> prefixListId) {
            $.prefixListId = prefixListId;
            return this;
        }

        /**
         * @param prefixListId The ID of the source/destination prefix list to which you want to control access. **NOTE:** If you specify `cidr_ip`,`source_security_group_id`,`ipv6_cidr_ip` parameter, this parameter is ignored.
         * 
         * @return builder
         * 
         */
        public Builder prefixListId(String prefixListId) {
            return prefixListId(Output.of(prefixListId));
        }

        /**
         * @param priority Authorization policy priority, with parameter values: `1-100`, default value: 1.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Authorization policy priority, with parameter values: `1-100`, default value: 1.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param securityGroupId The security group to apply this rule to.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId The security group to apply this rule to.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param sourceGroupOwnerAccount The Alibaba Cloud user account Id of the target security group when security groups are authorized across accounts.  This parameter is invalid if `cidr_ip` has already been set.
         * 
         * @return builder
         * 
         */
        public Builder sourceGroupOwnerAccount(@Nullable Output<String> sourceGroupOwnerAccount) {
            $.sourceGroupOwnerAccount = sourceGroupOwnerAccount;
            return this;
        }

        /**
         * @param sourceGroupOwnerAccount The Alibaba Cloud user account Id of the target security group when security groups are authorized across accounts.  This parameter is invalid if `cidr_ip` has already been set.
         * 
         * @return builder
         * 
         */
        public Builder sourceGroupOwnerAccount(String sourceGroupOwnerAccount) {
            return sourceGroupOwnerAccount(Output.of(sourceGroupOwnerAccount));
        }

        /**
         * @param sourceSecurityGroupId The target security group ID within the same region. If this field is specified, the `nic_type` can only select `intranet`.
         * 
         * @return builder
         * 
         */
        public Builder sourceSecurityGroupId(@Nullable Output<String> sourceSecurityGroupId) {
            $.sourceSecurityGroupId = sourceSecurityGroupId;
            return this;
        }

        /**
         * @param sourceSecurityGroupId The target security group ID within the same region. If this field is specified, the `nic_type` can only select `intranet`.
         * 
         * @return builder
         * 
         */
        public Builder sourceSecurityGroupId(String sourceSecurityGroupId) {
            return sourceSecurityGroupId(Output.of(sourceSecurityGroupId));
        }

        /**
         * @param type The type of rule being created. Valid options are `ingress` (inbound) or `egress` (outbound).
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of rule being created. Valid options are `ingress` (inbound) or `egress` (outbound).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SecurityGroupRuleArgs build() {
            if ($.ipProtocol == null) {
                throw new MissingRequiredPropertyException("SecurityGroupRuleArgs", "ipProtocol");
            }
            if ($.securityGroupId == null) {
                throw new MissingRequiredPropertyException("SecurityGroupRuleArgs", "securityGroupId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SecurityGroupRuleArgs", "type");
            }
            return $;
        }
    }

}
