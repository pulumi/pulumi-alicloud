// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduledPreloadJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledPreloadJobArgs Empty = new ScheduledPreloadJobArgs();

    /**
     * The method to submit the URLs to be prefetched.
     * 
     */
    @Import(name="insertWay", required=true)
    private Output<String> insertWay;

    /**
     * @return The method to submit the URLs to be prefetched.
     * 
     */
    public Output<String> insertWay() {
        return this.insertWay;
    }

    /**
     * Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
     * 
     */
    @Import(name="ossUrl")
    private @Nullable Output<String> ossUrl;

    /**
     * @return Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
     * 
     */
    public Optional<Output<String>> ossUrl() {
        return Optional.ofNullable(this.ossUrl);
    }

    /**
     * The task name.
     * 
     */
    @Import(name="scheduledPreloadJobName", required=true)
    private Output<String> scheduledPreloadJobName;

    /**
     * @return The task name.
     * 
     */
    public Output<String> scheduledPreloadJobName() {
        return this.scheduledPreloadJobName;
    }

    /**
     * The site ID.
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return The site ID.
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    /**
     * A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
     * 
     */
    @Import(name="urlList")
    private @Nullable Output<String> urlList;

    /**
     * @return A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
     * 
     */
    public Optional<Output<String>> urlList() {
        return Optional.ofNullable(this.urlList);
    }

    private ScheduledPreloadJobArgs() {}

    private ScheduledPreloadJobArgs(ScheduledPreloadJobArgs $) {
        this.insertWay = $.insertWay;
        this.ossUrl = $.ossUrl;
        this.scheduledPreloadJobName = $.scheduledPreloadJobName;
        this.siteId = $.siteId;
        this.urlList = $.urlList;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledPreloadJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledPreloadJobArgs $;

        public Builder() {
            $ = new ScheduledPreloadJobArgs();
        }

        public Builder(ScheduledPreloadJobArgs defaults) {
            $ = new ScheduledPreloadJobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param insertWay The method to submit the URLs to be prefetched.
         * 
         * @return builder
         * 
         */
        public Builder insertWay(Output<String> insertWay) {
            $.insertWay = insertWay;
            return this;
        }

        /**
         * @param insertWay The method to submit the URLs to be prefetched.
         * 
         * @return builder
         * 
         */
        public Builder insertWay(String insertWay) {
            return insertWay(Output.of(insertWay));
        }

        /**
         * @param ossUrl Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
         * 
         * @return builder
         * 
         */
        public Builder ossUrl(@Nullable Output<String> ossUrl) {
            $.ossUrl = ossUrl;
            return this;
        }

        /**
         * @param ossUrl Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
         * 
         * @return builder
         * 
         */
        public Builder ossUrl(String ossUrl) {
            return ossUrl(Output.of(ossUrl));
        }

        /**
         * @param scheduledPreloadJobName The task name.
         * 
         * @return builder
         * 
         */
        public Builder scheduledPreloadJobName(Output<String> scheduledPreloadJobName) {
            $.scheduledPreloadJobName = scheduledPreloadJobName;
            return this;
        }

        /**
         * @param scheduledPreloadJobName The task name.
         * 
         * @return builder
         * 
         */
        public Builder scheduledPreloadJobName(String scheduledPreloadJobName) {
            return scheduledPreloadJobName(Output.of(scheduledPreloadJobName));
        }

        /**
         * @param siteId The site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param urlList A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
         * 
         * @return builder
         * 
         */
        public Builder urlList(@Nullable Output<String> urlList) {
            $.urlList = urlList;
            return this;
        }

        /**
         * @param urlList A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
         * 
         * @return builder
         * 
         */
        public Builder urlList(String urlList) {
            return urlList(Output.of(urlList));
        }

        public ScheduledPreloadJobArgs build() {
            if ($.insertWay == null) {
                throw new MissingRequiredPropertyException("ScheduledPreloadJobArgs", "insertWay");
            }
            if ($.scheduledPreloadJobName == null) {
                throw new MissingRequiredPropertyException("ScheduledPreloadJobArgs", "scheduledPreloadJobName");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("ScheduledPreloadJobArgs", "siteId");
            }
            return $;
        }
    }

}
