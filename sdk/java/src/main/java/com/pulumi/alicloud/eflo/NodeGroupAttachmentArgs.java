// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo;

import com.pulumi.alicloud.eflo.inputs.NodeGroupAttachmentDataDiskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodeGroupAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeGroupAttachmentArgs Empty = new NodeGroupAttachmentArgs();

    /**
     * Cluster ID
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return Cluster ID
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The data disk of the cloud disk to be attached to the node. See `dataDisk` below.
     * 
     */
    @Import(name="dataDisks")
    private @Nullable Output<List<NodeGroupAttachmentDataDiskArgs>> dataDisks;

    /**
     * @return The data disk of the cloud disk to be attached to the node. See `dataDisk` below.
     * 
     */
    public Optional<Output<List<NodeGroupAttachmentDataDiskArgs>>> dataDisks() {
        return Optional.ofNullable(this.dataDisks);
    }

    /**
     * Node hostname
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return Node hostname
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * Node login password
     * 
     */
    @Import(name="loginPassword")
    private @Nullable Output<String> loginPassword;

    /**
     * @return Node login password
     * 
     */
    public Optional<Output<String>> loginPassword() {
        return Optional.ofNullable(this.loginPassword);
    }

    /**
     * Node group ID
     * 
     */
    @Import(name="nodeGroupId")
    private @Nullable Output<String> nodeGroupId;

    /**
     * @return Node group ID
     * 
     */
    public Optional<Output<String>> nodeGroupId() {
        return Optional.ofNullable(this.nodeGroupId);
    }

    /**
     * Node ID
     * 
     */
    @Import(name="nodeId")
    private @Nullable Output<String> nodeId;

    /**
     * @return Node ID
     * 
     */
    public Optional<Output<String>> nodeId() {
        return Optional.ofNullable(this.nodeId);
    }

    /**
     * User-defined data
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return User-defined data
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    /**
     * Vpc id
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return Vpc id
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * vswitch id
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return vswitch id
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    private NodeGroupAttachmentArgs() {}

    private NodeGroupAttachmentArgs(NodeGroupAttachmentArgs $) {
        this.clusterId = $.clusterId;
        this.dataDisks = $.dataDisks;
        this.hostname = $.hostname;
        this.loginPassword = $.loginPassword;
        this.nodeGroupId = $.nodeGroupId;
        this.nodeId = $.nodeId;
        this.userData = $.userData;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeGroupAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeGroupAttachmentArgs $;

        public Builder() {
            $ = new NodeGroupAttachmentArgs();
        }

        public Builder(NodeGroupAttachmentArgs defaults) {
            $ = new NodeGroupAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId Cluster ID
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId Cluster ID
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param dataDisks The data disk of the cloud disk to be attached to the node. See `dataDisk` below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(@Nullable Output<List<NodeGroupAttachmentDataDiskArgs>> dataDisks) {
            $.dataDisks = dataDisks;
            return this;
        }

        /**
         * @param dataDisks The data disk of the cloud disk to be attached to the node. See `dataDisk` below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(List<NodeGroupAttachmentDataDiskArgs> dataDisks) {
            return dataDisks(Output.of(dataDisks));
        }

        /**
         * @param dataDisks The data disk of the cloud disk to be attached to the node. See `dataDisk` below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(NodeGroupAttachmentDataDiskArgs... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }

        /**
         * @param hostname Node hostname
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Node hostname
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param loginPassword Node login password
         * 
         * @return builder
         * 
         */
        public Builder loginPassword(@Nullable Output<String> loginPassword) {
            $.loginPassword = loginPassword;
            return this;
        }

        /**
         * @param loginPassword Node login password
         * 
         * @return builder
         * 
         */
        public Builder loginPassword(String loginPassword) {
            return loginPassword(Output.of(loginPassword));
        }

        /**
         * @param nodeGroupId Node group ID
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupId(@Nullable Output<String> nodeGroupId) {
            $.nodeGroupId = nodeGroupId;
            return this;
        }

        /**
         * @param nodeGroupId Node group ID
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupId(String nodeGroupId) {
            return nodeGroupId(Output.of(nodeGroupId));
        }

        /**
         * @param nodeId Node ID
         * 
         * @return builder
         * 
         */
        public Builder nodeId(@Nullable Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeId Node ID
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        /**
         * @param userData User-defined data
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData User-defined data
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        /**
         * @param vpcId Vpc id
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId Vpc id
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId vswitch id
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId vswitch id
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public NodeGroupAttachmentArgs build() {
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("NodeGroupAttachmentArgs", "hostname");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("NodeGroupAttachmentArgs", "vpcId");
            }
            if ($.vswitchId == null) {
                throw new MissingRequiredPropertyException("NodeGroupAttachmentArgs", "vswitchId");
            }
            return $;
        }
    }

}
