// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataFlowArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataFlowArgs Empty = new DataFlowArgs();

    /**
     * The Description of the data flow. Restrictions:
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The Description of the data flow. Restrictions:
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The dry run.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return The dry run.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The ID of the file system.
     * 
     */
    @Import(name="fileSystemId", required=true)
    private Output<String> fileSystemId;

    /**
     * @return The ID of the file system.
     * 
     */
    public Output<String> fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * The ID of the Fileset.
     * 
     */
    @Import(name="fsetId", required=true)
    private Output<String> fsetId;

    /**
     * @return The ID of the Fileset.
     * 
     */
    public Output<String> fsetId() {
        return this.fsetId;
    }

    /**
     * The security protection type of the source storage. If the source storage must be accessed through security protection, specify the security protection type of the source storage. Value:
     * 
     */
    @Import(name="sourceSecurityType")
    private @Nullable Output<String> sourceSecurityType;

    /**
     * @return The security protection type of the source storage. If the source storage must be accessed through security protection, specify the security protection type of the source storage. Value:
     * 
     */
    public Optional<Output<String>> sourceSecurityType() {
        return Optional.ofNullable(this.sourceSecurityType);
    }

    /**
     * The access path of the source store. Format: `&lt;storage type&gt;://&lt;path&gt;`. Among them:
     * - storage type: currently only OSS is supported.
     * - path: the bucket name of OSS.
     * - Only lowercase letters, numbers, and dashes (-) are supported and must start and end with lowercase letters or numbers.
     * 
     */
    @Import(name="sourceStorage", required=true)
    private Output<String> sourceStorage;

    /**
     * @return The access path of the source store. Format: `&lt;storage type&gt;://&lt;path&gt;`. Among them:
     * - storage type: currently only OSS is supported.
     * - path: the bucket name of OSS.
     * - Only lowercase letters, numbers, and dashes (-) are supported and must start and end with lowercase letters or numbers.
     * 
     */
    public Output<String> sourceStorage() {
        return this.sourceStorage;
    }

    /**
     * The status of the Data flow. Valid values: `Running`, `Stopped`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Data flow. Valid values: `Running`, `Stopped`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The maximum transmission bandwidth of data flow, unit: `MB/s`. Valid values: `1200`, `1500`, `600`. **NOTE:** The transmission bandwidth of data flow must be less than the IO bandwidth of the file system.
     * 
     */
    @Import(name="throughput", required=true)
    private Output<Integer> throughput;

    /**
     * @return The maximum transmission bandwidth of data flow, unit: `MB/s`. Valid values: `1200`, `1500`, `600`. **NOTE:** The transmission bandwidth of data flow must be less than the IO bandwidth of the file system.
     * 
     */
    public Output<Integer> throughput() {
        return this.throughput;
    }

    private DataFlowArgs() {}

    private DataFlowArgs(DataFlowArgs $) {
        this.description = $.description;
        this.dryRun = $.dryRun;
        this.fileSystemId = $.fileSystemId;
        this.fsetId = $.fsetId;
        this.sourceSecurityType = $.sourceSecurityType;
        this.sourceStorage = $.sourceStorage;
        this.status = $.status;
        this.throughput = $.throughput;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataFlowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataFlowArgs $;

        public Builder() {
            $ = new DataFlowArgs();
        }

        public Builder(DataFlowArgs defaults) {
            $ = new DataFlowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The Description of the data flow. Restrictions:
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The Description of the data flow. Restrictions:
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dryRun The dry run.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun The dry run.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param fsetId The ID of the Fileset.
         * 
         * @return builder
         * 
         */
        public Builder fsetId(Output<String> fsetId) {
            $.fsetId = fsetId;
            return this;
        }

        /**
         * @param fsetId The ID of the Fileset.
         * 
         * @return builder
         * 
         */
        public Builder fsetId(String fsetId) {
            return fsetId(Output.of(fsetId));
        }

        /**
         * @param sourceSecurityType The security protection type of the source storage. If the source storage must be accessed through security protection, specify the security protection type of the source storage. Value:
         * 
         * @return builder
         * 
         */
        public Builder sourceSecurityType(@Nullable Output<String> sourceSecurityType) {
            $.sourceSecurityType = sourceSecurityType;
            return this;
        }

        /**
         * @param sourceSecurityType The security protection type of the source storage. If the source storage must be accessed through security protection, specify the security protection type of the source storage. Value:
         * 
         * @return builder
         * 
         */
        public Builder sourceSecurityType(String sourceSecurityType) {
            return sourceSecurityType(Output.of(sourceSecurityType));
        }

        /**
         * @param sourceStorage The access path of the source store. Format: `&lt;storage type&gt;://&lt;path&gt;`. Among them:
         * - storage type: currently only OSS is supported.
         * - path: the bucket name of OSS.
         * - Only lowercase letters, numbers, and dashes (-) are supported and must start and end with lowercase letters or numbers.
         * 
         * @return builder
         * 
         */
        public Builder sourceStorage(Output<String> sourceStorage) {
            $.sourceStorage = sourceStorage;
            return this;
        }

        /**
         * @param sourceStorage The access path of the source store. Format: `&lt;storage type&gt;://&lt;path&gt;`. Among them:
         * - storage type: currently only OSS is supported.
         * - path: the bucket name of OSS.
         * - Only lowercase letters, numbers, and dashes (-) are supported and must start and end with lowercase letters or numbers.
         * 
         * @return builder
         * 
         */
        public Builder sourceStorage(String sourceStorage) {
            return sourceStorage(Output.of(sourceStorage));
        }

        /**
         * @param status The status of the Data flow. Valid values: `Running`, `Stopped`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Data flow. Valid values: `Running`, `Stopped`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param throughput The maximum transmission bandwidth of data flow, unit: `MB/s`. Valid values: `1200`, `1500`, `600`. **NOTE:** The transmission bandwidth of data flow must be less than the IO bandwidth of the file system.
         * 
         * @return builder
         * 
         */
        public Builder throughput(Output<Integer> throughput) {
            $.throughput = throughput;
            return this;
        }

        /**
         * @param throughput The maximum transmission bandwidth of data flow, unit: `MB/s`. Valid values: `1200`, `1500`, `600`. **NOTE:** The transmission bandwidth of data flow must be less than the IO bandwidth of the file system.
         * 
         * @return builder
         * 
         */
        public Builder throughput(Integer throughput) {
            return throughput(Output.of(throughput));
        }

        public DataFlowArgs build() {
            if ($.fileSystemId == null) {
                throw new MissingRequiredPropertyException("DataFlowArgs", "fileSystemId");
            }
            if ($.fsetId == null) {
                throw new MissingRequiredPropertyException("DataFlowArgs", "fsetId");
            }
            if ($.sourceStorage == null) {
                throw new MissingRequiredPropertyException("DataFlowArgs", "sourceStorage");
            }
            if ($.throughput == null) {
                throw new MissingRequiredPropertyException("DataFlowArgs", "throughput");
            }
            return $;
        }
    }

}
