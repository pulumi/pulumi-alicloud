// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.graphdatabase;

import com.pulumi.alicloud.graphdatabase.inputs.DbInstanceDbInstanceIpArrayArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbInstanceArgs Empty = new DbInstanceArgs();

    /**
     * The category of the db instance. Valid values: `HA`, `SINGLE`(Available in 1.173.0+).
     * 
     */
    @Import(name="dbInstanceCategory", required=true)
    private Output<String> dbInstanceCategory;

    /**
     * @return The category of the db instance. Valid values: `HA`, `SINGLE`(Available in 1.173.0+).
     * 
     */
    public Output<String> dbInstanceCategory() {
        return this.dbInstanceCategory;
    }

    /**
     * According to the practical example or notes.
     * 
     */
    @Import(name="dbInstanceDescription")
    private @Nullable Output<String> dbInstanceDescription;

    /**
     * @return According to the practical example or notes.
     * 
     */
    public Optional<Output<String>> dbInstanceDescription() {
        return Optional.ofNullable(this.dbInstanceDescription);
    }

    /**
     * IP ADDRESS whitelist for the instance group list. See `db_instance_ip_array` below.
     * 
     */
    @Import(name="dbInstanceIpArrays")
    private @Nullable Output<List<DbInstanceDbInstanceIpArrayArgs>> dbInstanceIpArrays;

    /**
     * @return IP ADDRESS whitelist for the instance group list. See `db_instance_ip_array` below.
     * 
     */
    public Optional<Output<List<DbInstanceDbInstanceIpArrayArgs>>> dbInstanceIpArrays() {
        return Optional.ofNullable(this.dbInstanceIpArrays);
    }

    /**
     * The network type of the db instance. Valid values: `vpc`.
     * 
     */
    @Import(name="dbInstanceNetworkType", required=true)
    private Output<String> dbInstanceNetworkType;

    /**
     * @return The network type of the db instance. Valid values: `vpc`.
     * 
     */
    public Output<String> dbInstanceNetworkType() {
        return this.dbInstanceNetworkType;
    }

    /**
     * Disk storage type. Valid values: `cloud_essd`, `cloud_ssd`. Modification is not supported.
     * 
     */
    @Import(name="dbInstanceStorageType", required=true)
    private Output<String> dbInstanceStorageType;

    /**
     * @return Disk storage type. Valid values: `cloud_essd`, `cloud_ssd`. Modification is not supported.
     * 
     */
    public Output<String> dbInstanceStorageType() {
        return this.dbInstanceStorageType;
    }

    /**
     * The class of the db node. Valid values: `gdb.r.xlarge`, `gdb.r.2xlarge`, `gdb.r.4xlarge`, `gdb.r.8xlarge`, `gdb.r.16xlarge`, `gdb.r.xlarge_basic`, `gdb.r.2xlarge_basic`, `gdb.r.4xlarge_basic`, `gdb.r.8xlarge_basic`, `gdb.r.16xlarge_basic`.
     * 
     */
    @Import(name="dbNodeClass", required=true)
    private Output<String> dbNodeClass;

    /**
     * @return The class of the db node. Valid values: `gdb.r.xlarge`, `gdb.r.2xlarge`, `gdb.r.4xlarge`, `gdb.r.8xlarge`, `gdb.r.16xlarge`, `gdb.r.xlarge_basic`, `gdb.r.2xlarge_basic`, `gdb.r.4xlarge_basic`, `gdb.r.8xlarge_basic`, `gdb.r.16xlarge_basic`.
     * 
     */
    public Output<String> dbNodeClass() {
        return this.dbNodeClass;
    }

    /**
     * Instance storage space, which is measured in GB.
     * 
     */
    @Import(name="dbNodeStorage", required=true)
    private Output<Integer> dbNodeStorage;

    /**
     * @return Instance storage space, which is measured in GB.
     * 
     */
    public Output<Integer> dbNodeStorage() {
        return this.dbNodeStorage;
    }

    /**
     * Kernel Version. Valid values: `1.0` or `1.0-OpenCypher`. `1.0`: represented as gremlin, `1.0-OpenCypher`: said opencypher.
     * 
     */
    @Import(name="dbVersion", required=true)
    private Output<String> dbVersion;

    /**
     * @return Kernel Version. Valid values: `1.0` or `1.0-OpenCypher`. `1.0`: represented as gremlin, `1.0-OpenCypher`: said opencypher.
     * 
     */
    public Output<String> dbVersion() {
        return this.dbVersion;
    }

    /**
     * The paymen type of the resource. Valid values: `PayAsYouGo`.
     * 
     */
    @Import(name="paymentType", required=true)
    private Output<String> paymentType;

    /**
     * @return The paymen type of the resource. Valid values: `PayAsYouGo`.
     * 
     */
    public Output<String> paymentType() {
        return this.paymentType;
    }

    /**
     * ID of the VPC.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return ID of the VPC.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The ID of attaching vswitch to instance.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of attaching vswitch to instance.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    /**
     * The zone ID of the resource.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone ID of the resource.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private DbInstanceArgs() {}

    private DbInstanceArgs(DbInstanceArgs $) {
        this.dbInstanceCategory = $.dbInstanceCategory;
        this.dbInstanceDescription = $.dbInstanceDescription;
        this.dbInstanceIpArrays = $.dbInstanceIpArrays;
        this.dbInstanceNetworkType = $.dbInstanceNetworkType;
        this.dbInstanceStorageType = $.dbInstanceStorageType;
        this.dbNodeClass = $.dbNodeClass;
        this.dbNodeStorage = $.dbNodeStorage;
        this.dbVersion = $.dbVersion;
        this.paymentType = $.paymentType;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbInstanceArgs $;

        public Builder() {
            $ = new DbInstanceArgs();
        }

        public Builder(DbInstanceArgs defaults) {
            $ = new DbInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbInstanceCategory The category of the db instance. Valid values: `HA`, `SINGLE`(Available in 1.173.0+).
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceCategory(Output<String> dbInstanceCategory) {
            $.dbInstanceCategory = dbInstanceCategory;
            return this;
        }

        /**
         * @param dbInstanceCategory The category of the db instance. Valid values: `HA`, `SINGLE`(Available in 1.173.0+).
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceCategory(String dbInstanceCategory) {
            return dbInstanceCategory(Output.of(dbInstanceCategory));
        }

        /**
         * @param dbInstanceDescription According to the practical example or notes.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceDescription(@Nullable Output<String> dbInstanceDescription) {
            $.dbInstanceDescription = dbInstanceDescription;
            return this;
        }

        /**
         * @param dbInstanceDescription According to the practical example or notes.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceDescription(String dbInstanceDescription) {
            return dbInstanceDescription(Output.of(dbInstanceDescription));
        }

        /**
         * @param dbInstanceIpArrays IP ADDRESS whitelist for the instance group list. See `db_instance_ip_array` below.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceIpArrays(@Nullable Output<List<DbInstanceDbInstanceIpArrayArgs>> dbInstanceIpArrays) {
            $.dbInstanceIpArrays = dbInstanceIpArrays;
            return this;
        }

        /**
         * @param dbInstanceIpArrays IP ADDRESS whitelist for the instance group list. See `db_instance_ip_array` below.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceIpArrays(List<DbInstanceDbInstanceIpArrayArgs> dbInstanceIpArrays) {
            return dbInstanceIpArrays(Output.of(dbInstanceIpArrays));
        }

        /**
         * @param dbInstanceIpArrays IP ADDRESS whitelist for the instance group list. See `db_instance_ip_array` below.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceIpArrays(DbInstanceDbInstanceIpArrayArgs... dbInstanceIpArrays) {
            return dbInstanceIpArrays(List.of(dbInstanceIpArrays));
        }

        /**
         * @param dbInstanceNetworkType The network type of the db instance. Valid values: `vpc`.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceNetworkType(Output<String> dbInstanceNetworkType) {
            $.dbInstanceNetworkType = dbInstanceNetworkType;
            return this;
        }

        /**
         * @param dbInstanceNetworkType The network type of the db instance. Valid values: `vpc`.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceNetworkType(String dbInstanceNetworkType) {
            return dbInstanceNetworkType(Output.of(dbInstanceNetworkType));
        }

        /**
         * @param dbInstanceStorageType Disk storage type. Valid values: `cloud_essd`, `cloud_ssd`. Modification is not supported.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceStorageType(Output<String> dbInstanceStorageType) {
            $.dbInstanceStorageType = dbInstanceStorageType;
            return this;
        }

        /**
         * @param dbInstanceStorageType Disk storage type. Valid values: `cloud_essd`, `cloud_ssd`. Modification is not supported.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceStorageType(String dbInstanceStorageType) {
            return dbInstanceStorageType(Output.of(dbInstanceStorageType));
        }

        /**
         * @param dbNodeClass The class of the db node. Valid values: `gdb.r.xlarge`, `gdb.r.2xlarge`, `gdb.r.4xlarge`, `gdb.r.8xlarge`, `gdb.r.16xlarge`, `gdb.r.xlarge_basic`, `gdb.r.2xlarge_basic`, `gdb.r.4xlarge_basic`, `gdb.r.8xlarge_basic`, `gdb.r.16xlarge_basic`.
         * 
         * @return builder
         * 
         */
        public Builder dbNodeClass(Output<String> dbNodeClass) {
            $.dbNodeClass = dbNodeClass;
            return this;
        }

        /**
         * @param dbNodeClass The class of the db node. Valid values: `gdb.r.xlarge`, `gdb.r.2xlarge`, `gdb.r.4xlarge`, `gdb.r.8xlarge`, `gdb.r.16xlarge`, `gdb.r.xlarge_basic`, `gdb.r.2xlarge_basic`, `gdb.r.4xlarge_basic`, `gdb.r.8xlarge_basic`, `gdb.r.16xlarge_basic`.
         * 
         * @return builder
         * 
         */
        public Builder dbNodeClass(String dbNodeClass) {
            return dbNodeClass(Output.of(dbNodeClass));
        }

        /**
         * @param dbNodeStorage Instance storage space, which is measured in GB.
         * 
         * @return builder
         * 
         */
        public Builder dbNodeStorage(Output<Integer> dbNodeStorage) {
            $.dbNodeStorage = dbNodeStorage;
            return this;
        }

        /**
         * @param dbNodeStorage Instance storage space, which is measured in GB.
         * 
         * @return builder
         * 
         */
        public Builder dbNodeStorage(Integer dbNodeStorage) {
            return dbNodeStorage(Output.of(dbNodeStorage));
        }

        /**
         * @param dbVersion Kernel Version. Valid values: `1.0` or `1.0-OpenCypher`. `1.0`: represented as gremlin, `1.0-OpenCypher`: said opencypher.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(Output<String> dbVersion) {
            $.dbVersion = dbVersion;
            return this;
        }

        /**
         * @param dbVersion Kernel Version. Valid values: `1.0` or `1.0-OpenCypher`. `1.0`: represented as gremlin, `1.0-OpenCypher`: said opencypher.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(String dbVersion) {
            return dbVersion(Output.of(dbVersion));
        }

        /**
         * @param paymentType The paymen type of the resource. Valid values: `PayAsYouGo`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The paymen type of the resource. Valid values: `PayAsYouGo`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param vpcId ID of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId ID of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of attaching vswitch to instance.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of attaching vswitch to instance.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The zone ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public DbInstanceArgs build() {
            if ($.dbInstanceCategory == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "dbInstanceCategory");
            }
            if ($.dbInstanceNetworkType == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "dbInstanceNetworkType");
            }
            if ($.dbInstanceStorageType == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "dbInstanceStorageType");
            }
            if ($.dbNodeClass == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "dbNodeClass");
            }
            if ($.dbNodeStorage == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "dbNodeStorage");
            }
            if ($.dbVersion == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "dbVersion");
            }
            if ($.paymentType == null) {
                throw new MissingRequiredPropertyException("DbInstanceArgs", "paymentType");
            }
            return $;
        }
    }

}
