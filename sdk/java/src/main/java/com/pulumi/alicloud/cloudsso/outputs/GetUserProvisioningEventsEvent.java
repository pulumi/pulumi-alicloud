// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudsso.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetUserProvisioningEventsEvent {
    /**
     * @return Event content
     * 
     */
    private String content;
    /**
     * @return The creation time of the resource
     * 
     */
    private String createTime;
    /**
     * @return Processing policy when you delete a RAM user
     * 
     */
    private String deletionStrategy;
    /**
     * @return Directory ID
     * 
     */
    private String directoryId;
    /**
     * @return Conflict strategy
     * 
     */
    private String duplicationStrategy;
    /**
     * @return Number of manual retry failures
     * 
     */
    private Double errorCount;
    /**
     * @return Error message for last failure
     * 
     */
    private String errorInfo;
    /**
     * @return Dead letter event ID
     * 
     */
    private String eventId;
    /**
     * @return The ID of the resource supplied above.
     * 
     */
    private String id;
    /**
     * @return Last synchronization time
     * 
     */
    private String lastSyncTime;
    /**
     * @return User Provisioning body ID
     * 
     */
    private String principalId;
    /**
     * @return User Provisioning body name
     * 
     */
    private String principalName;
    /**
     * @return User Provisioning body type
     * 
     */
    private String principalType;
    /**
     * @return The type of the source action that triggered the event.
     * 
     */
    private String sourceType;
    /**
     * @return User Provisioning target ID
     * 
     */
    private String targetId;
    /**
     * @return User Provisioning target name
     * 
     */
    private String targetName;
    /**
     * @return RD path of User Provisioning target
     * 
     */
    private String targetPath;
    /**
     * @return User Provisioning target type
     * 
     */
    private String targetType;
    /**
     * @return Event update time
     * 
     */
    private String updateTime;
    /**
     * @return The ID of the User Provisioning.
     * 
     */
    private String userProvisioningId;

    private GetUserProvisioningEventsEvent() {}
    /**
     * @return Event content
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return The creation time of the resource
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Processing policy when you delete a RAM user
     * 
     */
    public String deletionStrategy() {
        return this.deletionStrategy;
    }
    /**
     * @return Directory ID
     * 
     */
    public String directoryId() {
        return this.directoryId;
    }
    /**
     * @return Conflict strategy
     * 
     */
    public String duplicationStrategy() {
        return this.duplicationStrategy;
    }
    /**
     * @return Number of manual retry failures
     * 
     */
    public Double errorCount() {
        return this.errorCount;
    }
    /**
     * @return Error message for last failure
     * 
     */
    public String errorInfo() {
        return this.errorInfo;
    }
    /**
     * @return Dead letter event ID
     * 
     */
    public String eventId() {
        return this.eventId;
    }
    /**
     * @return The ID of the resource supplied above.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Last synchronization time
     * 
     */
    public String lastSyncTime() {
        return this.lastSyncTime;
    }
    /**
     * @return User Provisioning body ID
     * 
     */
    public String principalId() {
        return this.principalId;
    }
    /**
     * @return User Provisioning body name
     * 
     */
    public String principalName() {
        return this.principalName;
    }
    /**
     * @return User Provisioning body type
     * 
     */
    public String principalType() {
        return this.principalType;
    }
    /**
     * @return The type of the source action that triggered the event.
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return User Provisioning target ID
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return User Provisioning target name
     * 
     */
    public String targetName() {
        return this.targetName;
    }
    /**
     * @return RD path of User Provisioning target
     * 
     */
    public String targetPath() {
        return this.targetPath;
    }
    /**
     * @return User Provisioning target type
     * 
     */
    public String targetType() {
        return this.targetType;
    }
    /**
     * @return Event update time
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return The ID of the User Provisioning.
     * 
     */
    public String userProvisioningId() {
        return this.userProvisioningId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserProvisioningEventsEvent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String content;
        private String createTime;
        private String deletionStrategy;
        private String directoryId;
        private String duplicationStrategy;
        private Double errorCount;
        private String errorInfo;
        private String eventId;
        private String id;
        private String lastSyncTime;
        private String principalId;
        private String principalName;
        private String principalType;
        private String sourceType;
        private String targetId;
        private String targetName;
        private String targetPath;
        private String targetType;
        private String updateTime;
        private String userProvisioningId;
        public Builder() {}
        public Builder(GetUserProvisioningEventsEvent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.createTime = defaults.createTime;
    	      this.deletionStrategy = defaults.deletionStrategy;
    	      this.directoryId = defaults.directoryId;
    	      this.duplicationStrategy = defaults.duplicationStrategy;
    	      this.errorCount = defaults.errorCount;
    	      this.errorInfo = defaults.errorInfo;
    	      this.eventId = defaults.eventId;
    	      this.id = defaults.id;
    	      this.lastSyncTime = defaults.lastSyncTime;
    	      this.principalId = defaults.principalId;
    	      this.principalName = defaults.principalName;
    	      this.principalType = defaults.principalType;
    	      this.sourceType = defaults.sourceType;
    	      this.targetId = defaults.targetId;
    	      this.targetName = defaults.targetName;
    	      this.targetPath = defaults.targetPath;
    	      this.targetType = defaults.targetType;
    	      this.updateTime = defaults.updateTime;
    	      this.userProvisioningId = defaults.userProvisioningId;
        }

        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder deletionStrategy(String deletionStrategy) {
            if (deletionStrategy == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "deletionStrategy");
            }
            this.deletionStrategy = deletionStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder directoryId(String directoryId) {
            if (directoryId == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "directoryId");
            }
            this.directoryId = directoryId;
            return this;
        }
        @CustomType.Setter
        public Builder duplicationStrategy(String duplicationStrategy) {
            if (duplicationStrategy == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "duplicationStrategy");
            }
            this.duplicationStrategy = duplicationStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder errorCount(Double errorCount) {
            if (errorCount == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "errorCount");
            }
            this.errorCount = errorCount;
            return this;
        }
        @CustomType.Setter
        public Builder errorInfo(String errorInfo) {
            if (errorInfo == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "errorInfo");
            }
            this.errorInfo = errorInfo;
            return this;
        }
        @CustomType.Setter
        public Builder eventId(String eventId) {
            if (eventId == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "eventId");
            }
            this.eventId = eventId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastSyncTime(String lastSyncTime) {
            if (lastSyncTime == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "lastSyncTime");
            }
            this.lastSyncTime = lastSyncTime;
            return this;
        }
        @CustomType.Setter
        public Builder principalId(String principalId) {
            if (principalId == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "principalId");
            }
            this.principalId = principalId;
            return this;
        }
        @CustomType.Setter
        public Builder principalName(String principalName) {
            if (principalName == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "principalName");
            }
            this.principalName = principalName;
            return this;
        }
        @CustomType.Setter
        public Builder principalType(String principalType) {
            if (principalType == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "principalType");
            }
            this.principalType = principalType;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            if (sourceType == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "sourceType");
            }
            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            if (targetId == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "targetId");
            }
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder targetName(String targetName) {
            if (targetName == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "targetName");
            }
            this.targetName = targetName;
            return this;
        }
        @CustomType.Setter
        public Builder targetPath(String targetPath) {
            if (targetPath == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "targetPath");
            }
            this.targetPath = targetPath;
            return this;
        }
        @CustomType.Setter
        public Builder targetType(String targetType) {
            if (targetType == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "targetType");
            }
            this.targetType = targetType;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder userProvisioningId(String userProvisioningId) {
            if (userProvisioningId == null) {
              throw new MissingRequiredPropertyException("GetUserProvisioningEventsEvent", "userProvisioningId");
            }
            this.userProvisioningId = userProvisioningId;
            return this;
        }
        public GetUserProvisioningEventsEvent build() {
            final var _resultValue = new GetUserProvisioningEventsEvent();
            _resultValue.content = content;
            _resultValue.createTime = createTime;
            _resultValue.deletionStrategy = deletionStrategy;
            _resultValue.directoryId = directoryId;
            _resultValue.duplicationStrategy = duplicationStrategy;
            _resultValue.errorCount = errorCount;
            _resultValue.errorInfo = errorInfo;
            _resultValue.eventId = eventId;
            _resultValue.id = id;
            _resultValue.lastSyncTime = lastSyncTime;
            _resultValue.principalId = principalId;
            _resultValue.principalName = principalName;
            _resultValue.principalType = principalType;
            _resultValue.sourceType = sourceType;
            _resultValue.targetId = targetId;
            _resultValue.targetName = targetName;
            _resultValue.targetPath = targetPath;
            _resultValue.targetType = targetType;
            _resultValue.updateTime = updateTime;
            _resultValue.userProvisioningId = userProvisioningId;
            return _resultValue;
        }
    }
}
