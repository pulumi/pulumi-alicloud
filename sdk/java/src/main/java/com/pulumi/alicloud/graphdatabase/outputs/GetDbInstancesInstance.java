// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.graphdatabase.outputs;

import com.pulumi.alicloud.graphdatabase.outputs.GetDbInstancesInstanceDbInstanceIpArray;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDbInstancesInstance {
    /**
     * @return Virtual Private Cloud (vpc connection such as a VPN connection or leased line domain name).
     * 
     */
    private String connectionString;
    /**
     * @return Creation time, which follows the format of `YYYY-MM-DD &#39;T&#39;hh:mm:ssZ`, such as `2011-05-30 T12:11:4Z`.
     * 
     */
    private String createTime;
    /**
     * @return The current kernel image version.
     * 
     */
    private String currentMinorVersion;
    /**
     * @return The category of the db instance.
     * 
     */
    private String dbInstanceCategory;
    /**
     * @return For example, instances can be grouped according to Cpu core count.
     * 
     */
    private String dbInstanceCpu;
    /**
     * @return According to the practical example or notes.
     * 
     */
    private String dbInstanceDescription;
    /**
     * @return The ID of the instance.
     * 
     */
    private String dbInstanceId;
    /**
     * @return IP ADDRESS whitelist for the instance group list.
     * 
     */
    private List<GetDbInstancesInstanceDbInstanceIpArray> dbInstanceIpArrays;
    /**
     * @return Instance memory, which is measured in MB.
     * 
     */
    private String dbInstanceMemory;
    /**
     * @return The network type of the db instance.
     * 
     */
    private String dbInstanceNetworkType;
    /**
     * @return Disk storage type. Valid values: `cloud_essd`, `cloud_ssd`.
     * 
     */
    private String dbInstanceStorageType;
    /**
     * @return The type of the db instance.
     * 
     */
    private String dbInstanceType;
    /**
     * @return The class of the db node.
     * 
     */
    private String dbNodeClass;
    /**
     * @return The count of the db node.
     * 
     */
    private String dbNodeCount;
    /**
     * @return Instance storage space, which is measured in GB.
     * 
     */
    private String dbNodeStorage;
    /**
     * @return Kernel Version. Value range: `1.0` or `1.0-OpenCypher`. `1.0`: represented as gremlin, `1.0-OpenCypher`: said opencypher.
     * 
     */
    private String dbVersion;
    /**
     * @return The instance after it expires time for subscription instance.
     * 
     */
    private String expireTime;
    /**
     * @return The expire status of the db instance.
     * 
     */
    private String expired;
    /**
     * @return The ID of the Db Instance.
     * 
     */
    private String id;
    /**
     * @return The latest kernel image version.
     * 
     */
    private String latestMinorVersion;
    /**
     * @return Instance lock state. Value range: `Unlock`, `ManualLock`, `LockByExpiration`, `LockByRestoration` and `LockByDiskQuota`. `Unlock`: normal. `ManualLock`: the manual trigger lock. `LockByExpiration`: that represents the instance expires automatically lock. `LockByRestoration`: indicates that the instance rollback before auto-lock. `LockByDiskQuota`: that represents the instance space full automatic lock.
     * 
     */
    private String lockMode;
    /**
     * @return An instance is locked the reason.
     * 
     */
    private String lockReason;
    /**
     * @return Instance maintenance time such as `00:00Z-02:00Z`, 0 to 2 points to carry out routine maintenance.
     * 
     */
    private String maintainTime;
    /**
     * @return The master instance ID of the db instance.
     * 
     */
    private String masterDbInstanceId;
    /**
     * @return The paymen type of the resource.
     * 
     */
    private String paymentType;
    /**
     * @return Application Port.
     * 
     */
    private Integer port;
    /**
     * @return The public connection string ID of the resource.
     * 
     */
    private String publicConnectionString;
    /**
     * @return The public port ID of the resource.
     * 
     */
    private Integer publicPort;
    /**
     * @return The array of the readonly db instances.
     * 
     */
    private List<String> readOnlyDbInstanceIds;
    /**
     * @return Instance status. Value range: `Creating`, `Running`, `Deleting`, `Rebooting`, `DBInstanceClassChanging`, `NetAddressCreating` and `NetAddressDeleting`.
     * 
     */
    private String status;
    /**
     * @return The vpc id of the db instance.
     * 
     */
    private String vpcId;
    /**
     * @return The vswitch id.
     * 
     */
    private String vswitchId;
    /**
     * @return The zone ID of the resource.
     * 
     */
    private String zoneId;

    private GetDbInstancesInstance() {}
    /**
     * @return Virtual Private Cloud (vpc connection such as a VPN connection or leased line domain name).
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return Creation time, which follows the format of `YYYY-MM-DD &#39;T&#39;hh:mm:ssZ`, such as `2011-05-30 T12:11:4Z`.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The current kernel image version.
     * 
     */
    public String currentMinorVersion() {
        return this.currentMinorVersion;
    }
    /**
     * @return The category of the db instance.
     * 
     */
    public String dbInstanceCategory() {
        return this.dbInstanceCategory;
    }
    /**
     * @return For example, instances can be grouped according to Cpu core count.
     * 
     */
    public String dbInstanceCpu() {
        return this.dbInstanceCpu;
    }
    /**
     * @return According to the practical example or notes.
     * 
     */
    public String dbInstanceDescription() {
        return this.dbInstanceDescription;
    }
    /**
     * @return The ID of the instance.
     * 
     */
    public String dbInstanceId() {
        return this.dbInstanceId;
    }
    /**
     * @return IP ADDRESS whitelist for the instance group list.
     * 
     */
    public List<GetDbInstancesInstanceDbInstanceIpArray> dbInstanceIpArrays() {
        return this.dbInstanceIpArrays;
    }
    /**
     * @return Instance memory, which is measured in MB.
     * 
     */
    public String dbInstanceMemory() {
        return this.dbInstanceMemory;
    }
    /**
     * @return The network type of the db instance.
     * 
     */
    public String dbInstanceNetworkType() {
        return this.dbInstanceNetworkType;
    }
    /**
     * @return Disk storage type. Valid values: `cloud_essd`, `cloud_ssd`.
     * 
     */
    public String dbInstanceStorageType() {
        return this.dbInstanceStorageType;
    }
    /**
     * @return The type of the db instance.
     * 
     */
    public String dbInstanceType() {
        return this.dbInstanceType;
    }
    /**
     * @return The class of the db node.
     * 
     */
    public String dbNodeClass() {
        return this.dbNodeClass;
    }
    /**
     * @return The count of the db node.
     * 
     */
    public String dbNodeCount() {
        return this.dbNodeCount;
    }
    /**
     * @return Instance storage space, which is measured in GB.
     * 
     */
    public String dbNodeStorage() {
        return this.dbNodeStorage;
    }
    /**
     * @return Kernel Version. Value range: `1.0` or `1.0-OpenCypher`. `1.0`: represented as gremlin, `1.0-OpenCypher`: said opencypher.
     * 
     */
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return The instance after it expires time for subscription instance.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The expire status of the db instance.
     * 
     */
    public String expired() {
        return this.expired;
    }
    /**
     * @return The ID of the Db Instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The latest kernel image version.
     * 
     */
    public String latestMinorVersion() {
        return this.latestMinorVersion;
    }
    /**
     * @return Instance lock state. Value range: `Unlock`, `ManualLock`, `LockByExpiration`, `LockByRestoration` and `LockByDiskQuota`. `Unlock`: normal. `ManualLock`: the manual trigger lock. `LockByExpiration`: that represents the instance expires automatically lock. `LockByRestoration`: indicates that the instance rollback before auto-lock. `LockByDiskQuota`: that represents the instance space full automatic lock.
     * 
     */
    public String lockMode() {
        return this.lockMode;
    }
    /**
     * @return An instance is locked the reason.
     * 
     */
    public String lockReason() {
        return this.lockReason;
    }
    /**
     * @return Instance maintenance time such as `00:00Z-02:00Z`, 0 to 2 points to carry out routine maintenance.
     * 
     */
    public String maintainTime() {
        return this.maintainTime;
    }
    /**
     * @return The master instance ID of the db instance.
     * 
     */
    public String masterDbInstanceId() {
        return this.masterDbInstanceId;
    }
    /**
     * @return The paymen type of the resource.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return Application Port.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The public connection string ID of the resource.
     * 
     */
    public String publicConnectionString() {
        return this.publicConnectionString;
    }
    /**
     * @return The public port ID of the resource.
     * 
     */
    public Integer publicPort() {
        return this.publicPort;
    }
    /**
     * @return The array of the readonly db instances.
     * 
     */
    public List<String> readOnlyDbInstanceIds() {
        return this.readOnlyDbInstanceIds;
    }
    /**
     * @return Instance status. Value range: `Creating`, `Running`, `Deleting`, `Rebooting`, `DBInstanceClassChanging`, `NetAddressCreating` and `NetAddressDeleting`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The vpc id of the db instance.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The vswitch id.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The zone ID of the resource.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectionString;
        private String createTime;
        private String currentMinorVersion;
        private String dbInstanceCategory;
        private String dbInstanceCpu;
        private String dbInstanceDescription;
        private String dbInstanceId;
        private List<GetDbInstancesInstanceDbInstanceIpArray> dbInstanceIpArrays;
        private String dbInstanceMemory;
        private String dbInstanceNetworkType;
        private String dbInstanceStorageType;
        private String dbInstanceType;
        private String dbNodeClass;
        private String dbNodeCount;
        private String dbNodeStorage;
        private String dbVersion;
        private String expireTime;
        private String expired;
        private String id;
        private String latestMinorVersion;
        private String lockMode;
        private String lockReason;
        private String maintainTime;
        private String masterDbInstanceId;
        private String paymentType;
        private Integer port;
        private String publicConnectionString;
        private Integer publicPort;
        private List<String> readOnlyDbInstanceIds;
        private String status;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetDbInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionString = defaults.connectionString;
    	      this.createTime = defaults.createTime;
    	      this.currentMinorVersion = defaults.currentMinorVersion;
    	      this.dbInstanceCategory = defaults.dbInstanceCategory;
    	      this.dbInstanceCpu = defaults.dbInstanceCpu;
    	      this.dbInstanceDescription = defaults.dbInstanceDescription;
    	      this.dbInstanceId = defaults.dbInstanceId;
    	      this.dbInstanceIpArrays = defaults.dbInstanceIpArrays;
    	      this.dbInstanceMemory = defaults.dbInstanceMemory;
    	      this.dbInstanceNetworkType = defaults.dbInstanceNetworkType;
    	      this.dbInstanceStorageType = defaults.dbInstanceStorageType;
    	      this.dbInstanceType = defaults.dbInstanceType;
    	      this.dbNodeClass = defaults.dbNodeClass;
    	      this.dbNodeCount = defaults.dbNodeCount;
    	      this.dbNodeStorage = defaults.dbNodeStorage;
    	      this.dbVersion = defaults.dbVersion;
    	      this.expireTime = defaults.expireTime;
    	      this.expired = defaults.expired;
    	      this.id = defaults.id;
    	      this.latestMinorVersion = defaults.latestMinorVersion;
    	      this.lockMode = defaults.lockMode;
    	      this.lockReason = defaults.lockReason;
    	      this.maintainTime = defaults.maintainTime;
    	      this.masterDbInstanceId = defaults.masterDbInstanceId;
    	      this.paymentType = defaults.paymentType;
    	      this.port = defaults.port;
    	      this.publicConnectionString = defaults.publicConnectionString;
    	      this.publicPort = defaults.publicPort;
    	      this.readOnlyDbInstanceIds = defaults.readOnlyDbInstanceIds;
    	      this.status = defaults.status;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder currentMinorVersion(String currentMinorVersion) {
            this.currentMinorVersion = Objects.requireNonNull(currentMinorVersion);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceCategory(String dbInstanceCategory) {
            this.dbInstanceCategory = Objects.requireNonNull(dbInstanceCategory);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceCpu(String dbInstanceCpu) {
            this.dbInstanceCpu = Objects.requireNonNull(dbInstanceCpu);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceDescription(String dbInstanceDescription) {
            this.dbInstanceDescription = Objects.requireNonNull(dbInstanceDescription);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceId(String dbInstanceId) {
            this.dbInstanceId = Objects.requireNonNull(dbInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceIpArrays(List<GetDbInstancesInstanceDbInstanceIpArray> dbInstanceIpArrays) {
            this.dbInstanceIpArrays = Objects.requireNonNull(dbInstanceIpArrays);
            return this;
        }
        public Builder dbInstanceIpArrays(GetDbInstancesInstanceDbInstanceIpArray... dbInstanceIpArrays) {
            return dbInstanceIpArrays(List.of(dbInstanceIpArrays));
        }
        @CustomType.Setter
        public Builder dbInstanceMemory(String dbInstanceMemory) {
            this.dbInstanceMemory = Objects.requireNonNull(dbInstanceMemory);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceNetworkType(String dbInstanceNetworkType) {
            this.dbInstanceNetworkType = Objects.requireNonNull(dbInstanceNetworkType);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceStorageType(String dbInstanceStorageType) {
            this.dbInstanceStorageType = Objects.requireNonNull(dbInstanceStorageType);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceType(String dbInstanceType) {
            this.dbInstanceType = Objects.requireNonNull(dbInstanceType);
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeClass(String dbNodeClass) {
            this.dbNodeClass = Objects.requireNonNull(dbNodeClass);
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeCount(String dbNodeCount) {
            this.dbNodeCount = Objects.requireNonNull(dbNodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorage(String dbNodeStorage) {
            this.dbNodeStorage = Objects.requireNonNull(dbNodeStorage);
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(String dbVersion) {
            this.dbVersion = Objects.requireNonNull(dbVersion);
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        @CustomType.Setter
        public Builder expired(String expired) {
            this.expired = Objects.requireNonNull(expired);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder latestMinorVersion(String latestMinorVersion) {
            this.latestMinorVersion = Objects.requireNonNull(latestMinorVersion);
            return this;
        }
        @CustomType.Setter
        public Builder lockMode(String lockMode) {
            this.lockMode = Objects.requireNonNull(lockMode);
            return this;
        }
        @CustomType.Setter
        public Builder lockReason(String lockReason) {
            this.lockReason = Objects.requireNonNull(lockReason);
            return this;
        }
        @CustomType.Setter
        public Builder maintainTime(String maintainTime) {
            this.maintainTime = Objects.requireNonNull(maintainTime);
            return this;
        }
        @CustomType.Setter
        public Builder masterDbInstanceId(String masterDbInstanceId) {
            this.masterDbInstanceId = Objects.requireNonNull(masterDbInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder publicConnectionString(String publicConnectionString) {
            this.publicConnectionString = Objects.requireNonNull(publicConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder publicPort(Integer publicPort) {
            this.publicPort = Objects.requireNonNull(publicPort);
            return this;
        }
        @CustomType.Setter
        public Builder readOnlyDbInstanceIds(List<String> readOnlyDbInstanceIds) {
            this.readOnlyDbInstanceIds = Objects.requireNonNull(readOnlyDbInstanceIds);
            return this;
        }
        public Builder readOnlyDbInstanceIds(String... readOnlyDbInstanceIds) {
            return readOnlyDbInstanceIds(List.of(readOnlyDbInstanceIds));
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            this.vswitchId = Objects.requireNonNull(vswitchId);
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }
        public GetDbInstancesInstance build() {
            final var o = new GetDbInstancesInstance();
            o.connectionString = connectionString;
            o.createTime = createTime;
            o.currentMinorVersion = currentMinorVersion;
            o.dbInstanceCategory = dbInstanceCategory;
            o.dbInstanceCpu = dbInstanceCpu;
            o.dbInstanceDescription = dbInstanceDescription;
            o.dbInstanceId = dbInstanceId;
            o.dbInstanceIpArrays = dbInstanceIpArrays;
            o.dbInstanceMemory = dbInstanceMemory;
            o.dbInstanceNetworkType = dbInstanceNetworkType;
            o.dbInstanceStorageType = dbInstanceStorageType;
            o.dbInstanceType = dbInstanceType;
            o.dbNodeClass = dbNodeClass;
            o.dbNodeCount = dbNodeCount;
            o.dbNodeStorage = dbNodeStorage;
            o.dbVersion = dbVersion;
            o.expireTime = expireTime;
            o.expired = expired;
            o.id = id;
            o.latestMinorVersion = latestMinorVersion;
            o.lockMode = lockMode;
            o.lockReason = lockReason;
            o.maintainTime = maintainTime;
            o.masterDbInstanceId = masterDbInstanceId;
            o.paymentType = paymentType;
            o.port = port;
            o.publicConnectionString = publicConnectionString;
            o.publicPort = publicPort;
            o.readOnlyDbInstanceIds = readOnlyDbInstanceIds;
            o.status = status;
            o.vpcId = vpcId;
            o.vswitchId = vswitchId;
            o.zoneId = zoneId;
            return o;
        }
    }
}
