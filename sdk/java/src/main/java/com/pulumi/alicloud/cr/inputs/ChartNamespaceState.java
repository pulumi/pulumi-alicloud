// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChartNamespaceState extends com.pulumi.resources.ResourceArgs {

    public static final ChartNamespaceState Empty = new ChartNamespaceState();

    /**
     * Specifies whether to automatically create repositories in the namespace. Valid values:
     * 
     */
    @Import(name="autoCreateRepo")
    private @Nullable Output<Boolean> autoCreateRepo;

    /**
     * @return Specifies whether to automatically create repositories in the namespace. Valid values:
     * 
     */
    public Optional<Output<Boolean>> autoCreateRepo() {
        return Optional.ofNullable(this.autoCreateRepo);
    }

    /**
     * DefaultRepoType. Valid values: `PRIVATE`, `PUBLIC`.
     * 
     */
    @Import(name="defaultRepoType")
    private @Nullable Output<String> defaultRepoType;

    /**
     * @return DefaultRepoType. Valid values: `PRIVATE`, `PUBLIC`.
     * 
     */
    public Optional<Output<String>> defaultRepoType() {
        return Optional.ofNullable(this.defaultRepoType);
    }

    /**
     * The ID of the Container Registry instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The ID of the Container Registry instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The name of the namespace that you want to create.
     * 
     */
    @Import(name="namespaceName")
    private @Nullable Output<String> namespaceName;

    /**
     * @return The name of the namespace that you want to create.
     * 
     */
    public Optional<Output<String>> namespaceName() {
        return Optional.ofNullable(this.namespaceName);
    }

    private ChartNamespaceState() {}

    private ChartNamespaceState(ChartNamespaceState $) {
        this.autoCreateRepo = $.autoCreateRepo;
        this.defaultRepoType = $.defaultRepoType;
        this.instanceId = $.instanceId;
        this.namespaceName = $.namespaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChartNamespaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChartNamespaceState $;

        public Builder() {
            $ = new ChartNamespaceState();
        }

        public Builder(ChartNamespaceState defaults) {
            $ = new ChartNamespaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoCreateRepo Specifies whether to automatically create repositories in the namespace. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder autoCreateRepo(@Nullable Output<Boolean> autoCreateRepo) {
            $.autoCreateRepo = autoCreateRepo;
            return this;
        }

        /**
         * @param autoCreateRepo Specifies whether to automatically create repositories in the namespace. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder autoCreateRepo(Boolean autoCreateRepo) {
            return autoCreateRepo(Output.of(autoCreateRepo));
        }

        /**
         * @param defaultRepoType DefaultRepoType. Valid values: `PRIVATE`, `PUBLIC`.
         * 
         * @return builder
         * 
         */
        public Builder defaultRepoType(@Nullable Output<String> defaultRepoType) {
            $.defaultRepoType = defaultRepoType;
            return this;
        }

        /**
         * @param defaultRepoType DefaultRepoType. Valid values: `PRIVATE`, `PUBLIC`.
         * 
         * @return builder
         * 
         */
        public Builder defaultRepoType(String defaultRepoType) {
            return defaultRepoType(Output.of(defaultRepoType));
        }

        /**
         * @param instanceId The ID of the Container Registry instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the Container Registry instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param namespaceName The name of the namespace that you want to create.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(@Nullable Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        /**
         * @param namespaceName The name of the namespace that you want to create.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        public ChartNamespaceState build() {
            return $;
        }
    }

}
