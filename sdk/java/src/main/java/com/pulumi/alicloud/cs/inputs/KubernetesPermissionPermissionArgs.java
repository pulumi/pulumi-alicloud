// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesPermissionPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesPermissionPermissionArgs Empty = new KubernetesPermissionPermissionArgs();

    /**
     * The ID of the cluster that you want to manage.
     * 
     */
    @Import(name="cluster", required=true)
    private Output<String> cluster;

    /**
     * @return The ID of the cluster that you want to manage.
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }

    /**
     * Specifies whether to perform a custom authorization. To perform a custom authorization, set `role_name` to a custom cluster role.
     * 
     */
    @Import(name="isCustom")
    private @Nullable Output<Boolean> isCustom;

    /**
     * @return Specifies whether to perform a custom authorization. To perform a custom authorization, set `role_name` to a custom cluster role.
     * 
     */
    public Optional<Output<Boolean>> isCustom() {
        return Optional.ofNullable(this.isCustom);
    }

    /**
     * Specifies whether the permissions are granted to a RAM role. When `uid` is ram role id, the value of `is_ram_role` must be `true`.
     * 
     */
    @Import(name="isRamRole")
    private @Nullable Output<Boolean> isRamRole;

    /**
     * @return Specifies whether the permissions are granted to a RAM role. When `uid` is ram role id, the value of `is_ram_role` must be `true`.
     * 
     */
    public Optional<Output<Boolean>> isRamRole() {
        return Optional.ofNullable(this.isRamRole);
    }

    /**
     * The namespace to which the permissions are scoped. This parameter is required only if you set role_type to namespace.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to which the permissions are scoped. This parameter is required only if you set role_type to namespace.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies the predefined role that you want to assign. Valid values `admin`, `ops`, `dev`, `restricted` and the custom cluster roles.
     * 
     */
    @Import(name="roleName", required=true)
    private Output<String> roleName;

    /**
     * @return Specifies the predefined role that you want to assign. Valid values `admin`, `ops`, `dev`, `restricted` and the custom cluster roles.
     * 
     */
    public Output<String> roleName() {
        return this.roleName;
    }

    /**
     * The authorization type. Valid values `cluster`, `namespace`.
     * 
     */
    @Import(name="roleType", required=true)
    private Output<String> roleType;

    /**
     * @return The authorization type. Valid values `cluster`, `namespace`.
     * 
     */
    public Output<String> roleType() {
        return this.roleType;
    }

    private KubernetesPermissionPermissionArgs() {}

    private KubernetesPermissionPermissionArgs(KubernetesPermissionPermissionArgs $) {
        this.cluster = $.cluster;
        this.isCustom = $.isCustom;
        this.isRamRole = $.isRamRole;
        this.namespace = $.namespace;
        this.roleName = $.roleName;
        this.roleType = $.roleType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesPermissionPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesPermissionPermissionArgs $;

        public Builder() {
            $ = new KubernetesPermissionPermissionArgs();
        }

        public Builder(KubernetesPermissionPermissionArgs defaults) {
            $ = new KubernetesPermissionPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cluster The ID of the cluster that you want to manage.
         * 
         * @return builder
         * 
         */
        public Builder cluster(Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster The ID of the cluster that you want to manage.
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param isCustom Specifies whether to perform a custom authorization. To perform a custom authorization, set `role_name` to a custom cluster role.
         * 
         * @return builder
         * 
         */
        public Builder isCustom(@Nullable Output<Boolean> isCustom) {
            $.isCustom = isCustom;
            return this;
        }

        /**
         * @param isCustom Specifies whether to perform a custom authorization. To perform a custom authorization, set `role_name` to a custom cluster role.
         * 
         * @return builder
         * 
         */
        public Builder isCustom(Boolean isCustom) {
            return isCustom(Output.of(isCustom));
        }

        /**
         * @param isRamRole Specifies whether the permissions are granted to a RAM role. When `uid` is ram role id, the value of `is_ram_role` must be `true`.
         * 
         * @return builder
         * 
         */
        public Builder isRamRole(@Nullable Output<Boolean> isRamRole) {
            $.isRamRole = isRamRole;
            return this;
        }

        /**
         * @param isRamRole Specifies whether the permissions are granted to a RAM role. When `uid` is ram role id, the value of `is_ram_role` must be `true`.
         * 
         * @return builder
         * 
         */
        public Builder isRamRole(Boolean isRamRole) {
            return isRamRole(Output.of(isRamRole));
        }

        /**
         * @param namespace The namespace to which the permissions are scoped. This parameter is required only if you set role_type to namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to which the permissions are scoped. This parameter is required only if you set role_type to namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param roleName Specifies the predefined role that you want to assign. Valid values `admin`, `ops`, `dev`, `restricted` and the custom cluster roles.
         * 
         * @return builder
         * 
         */
        public Builder roleName(Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName Specifies the predefined role that you want to assign. Valid values `admin`, `ops`, `dev`, `restricted` and the custom cluster roles.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        /**
         * @param roleType The authorization type. Valid values `cluster`, `namespace`.
         * 
         * @return builder
         * 
         */
        public Builder roleType(Output<String> roleType) {
            $.roleType = roleType;
            return this;
        }

        /**
         * @param roleType The authorization type. Valid values `cluster`, `namespace`.
         * 
         * @return builder
         * 
         */
        public Builder roleType(String roleType) {
            return roleType(Output.of(roleType));
        }

        public KubernetesPermissionPermissionArgs build() {
            if ($.cluster == null) {
                throw new MissingRequiredPropertyException("KubernetesPermissionPermissionArgs", "cluster");
            }
            if ($.roleName == null) {
                throw new MissingRequiredPropertyException("KubernetesPermissionPermissionArgs", "roleName");
            }
            if ($.roleType == null) {
                throw new MissingRequiredPropertyException("KubernetesPermissionPermissionArgs", "roleType");
            }
            return $;
        }
    }

}
