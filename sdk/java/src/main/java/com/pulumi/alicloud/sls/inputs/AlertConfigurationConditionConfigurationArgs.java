// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertConfigurationConditionConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertConfigurationConditionConfigurationArgs Empty = new AlertConfigurationConditionConfigurationArgs();

    /**
     * Data matching expression. When the data content does not need to be determined, set it to an empty string. In other cases, it needs to be set as an expression, for example, errCnt&gt; 10.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<String> condition;

    /**
     * @return Data matching expression. When the data content does not need to be determined, set it to an empty string. In other cases, it needs to be set as an expression, for example, errCnt&gt; 10.
     * 
     */
    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * The number of pieces of data to determine the number of pieces of data to indicate how many pieces of data meet the conditions. If data exists, it is satisfied. Set it to an empty string. In other cases, it needs to be set as an expression, such as__count__&gt; 3.
     * 
     */
    @Import(name="countCondition")
    private @Nullable Output<String> countCondition;

    /**
     * @return The number of pieces of data to determine the number of pieces of data to indicate how many pieces of data meet the conditions. If data exists, it is satisfied. Set it to an empty string. In other cases, it needs to be set as an expression, such as__count__&gt; 3.
     * 
     */
    public Optional<Output<String>> countCondition() {
        return Optional.ofNullable(this.countCondition);
    }

    private AlertConfigurationConditionConfigurationArgs() {}

    private AlertConfigurationConditionConfigurationArgs(AlertConfigurationConditionConfigurationArgs $) {
        this.condition = $.condition;
        this.countCondition = $.countCondition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertConfigurationConditionConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertConfigurationConditionConfigurationArgs $;

        public Builder() {
            $ = new AlertConfigurationConditionConfigurationArgs();
        }

        public Builder(AlertConfigurationConditionConfigurationArgs defaults) {
            $ = new AlertConfigurationConditionConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition Data matching expression. When the data content does not need to be determined, set it to an empty string. In other cases, it needs to be set as an expression, for example, errCnt&gt; 10.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition Data matching expression. When the data content does not need to be determined, set it to an empty string. In other cases, it needs to be set as an expression, for example, errCnt&gt; 10.
         * 
         * @return builder
         * 
         */
        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param countCondition The number of pieces of data to determine the number of pieces of data to indicate how many pieces of data meet the conditions. If data exists, it is satisfied. Set it to an empty string. In other cases, it needs to be set as an expression, such as__count__&gt; 3.
         * 
         * @return builder
         * 
         */
        public Builder countCondition(@Nullable Output<String> countCondition) {
            $.countCondition = countCondition;
            return this;
        }

        /**
         * @param countCondition The number of pieces of data to determine the number of pieces of data to indicate how many pieces of data meet the conditions. If data exists, it is satisfied. Set it to an empty string. In other cases, it needs to be set as an expression, such as__count__&gt; 3.
         * 
         * @return builder
         * 
         */
        public Builder countCondition(String countCondition) {
            return countCondition(Output.of(countCondition));
        }

        public AlertConfigurationConditionConfigurationArgs build() {
            return $;
        }
    }

}
