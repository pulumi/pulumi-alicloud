// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetKubernetesPermissionPermission extends com.pulumi.resources.InvokeArgs {

    public static final GetKubernetesPermissionPermission Empty = new GetKubernetesPermissionPermission();

    /**
     * ndicates whether the permissions are granted to the cluster owner. Valid values `0`, `1`.
     * 
     */
    @Import(name="isOwner")
    private @Nullable Boolean isOwner;

    /**
     * @return ndicates whether the permissions are granted to the cluster owner. Valid values `0`, `1`.
     * 
     */
    public Optional<Boolean> isOwner() {
        return Optional.ofNullable(this.isOwner);
    }

    /**
     * Indicates whether the permissions are granted to the RAM role. Valid values `0`,`1`.
     * 
     */
    @Import(name="isRamRole")
    private @Nullable Boolean isRamRole;

    /**
     * @return Indicates whether the permissions are granted to the RAM role. Valid values `0`,`1`.
     * 
     */
    public Optional<Boolean> isRamRole() {
        return Optional.ofNullable(this.isRamRole);
    }

    /**
     * The permission settings to manage ACK clusters.
     * 
     */
    @Import(name="resourceId", required=true)
    private String resourceId;

    /**
     * @return The permission settings to manage ACK clusters.
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * The authorization type. Valid values `cluster`, `namespace` and `console`.
     * 
     */
    @Import(name="resourceType", required=true)
    private String resourceType;

    /**
     * @return The authorization type. Valid values `cluster`, `namespace` and `console`.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * The name of the predefined role. If a custom role is assigned, the value is the name of the assigined custom role.
     * 
     */
    @Import(name="roleName", required=true)
    private String roleName;

    /**
     * @return The name of the predefined role. If a custom role is assigned, the value is the name of the assigined custom role.
     * 
     */
    public String roleName() {
        return this.roleName;
    }

    /**
     * The predefined role. Valid values `admin`,`ops`,`dev`,`restricted` and `custom`.
     * 
     */
    @Import(name="roleType")
    private @Nullable String roleType;

    /**
     * @return The predefined role. Valid values `admin`,`ops`,`dev`,`restricted` and `custom`.
     * 
     */
    public Optional<String> roleType() {
        return Optional.ofNullable(this.roleType);
    }

    private GetKubernetesPermissionPermission() {}

    private GetKubernetesPermissionPermission(GetKubernetesPermissionPermission $) {
        this.isOwner = $.isOwner;
        this.isRamRole = $.isRamRole;
        this.resourceId = $.resourceId;
        this.resourceType = $.resourceType;
        this.roleName = $.roleName;
        this.roleType = $.roleType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetKubernetesPermissionPermission defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetKubernetesPermissionPermission $;

        public Builder() {
            $ = new GetKubernetesPermissionPermission();
        }

        public Builder(GetKubernetesPermissionPermission defaults) {
            $ = new GetKubernetesPermissionPermission(Objects.requireNonNull(defaults));
        }

        /**
         * @param isOwner ndicates whether the permissions are granted to the cluster owner. Valid values `0`, `1`.
         * 
         * @return builder
         * 
         */
        public Builder isOwner(@Nullable Boolean isOwner) {
            $.isOwner = isOwner;
            return this;
        }

        /**
         * @param isRamRole Indicates whether the permissions are granted to the RAM role. Valid values `0`,`1`.
         * 
         * @return builder
         * 
         */
        public Builder isRamRole(@Nullable Boolean isRamRole) {
            $.isRamRole = isRamRole;
            return this;
        }

        /**
         * @param resourceId The permission settings to manage ACK clusters.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceType The authorization type. Valid values `cluster`, `namespace` and `console`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param roleName The name of the predefined role. If a custom role is assigned, the value is the name of the assigined custom role.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleType The predefined role. Valid values `admin`,`ops`,`dev`,`restricted` and `custom`.
         * 
         * @return builder
         * 
         */
        public Builder roleType(@Nullable String roleType) {
            $.roleType = roleType;
            return this;
        }

        public GetKubernetesPermissionPermission build() {
            if ($.resourceId == null) {
                throw new MissingRequiredPropertyException("GetKubernetesPermissionPermission", "resourceId");
            }
            if ($.resourceType == null) {
                throw new MissingRequiredPropertyException("GetKubernetesPermissionPermission", "resourceType");
            }
            if ($.roleName == null) {
                throw new MissingRequiredPropertyException("GetKubernetesPermissionPermission", "roleName");
            }
            return $;
        }
    }

}
