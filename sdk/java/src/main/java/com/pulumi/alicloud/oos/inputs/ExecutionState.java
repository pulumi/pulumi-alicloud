// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExecutionState extends com.pulumi.resources.ResourceArgs {

    public static final ExecutionState Empty = new ExecutionState();

    /**
     * The counters of OOS Execution.
     * 
     */
    @Import(name="counters")
    private @Nullable Output<String> counters;

    /**
     * @return The counters of OOS Execution.
     * 
     */
    public Optional<Output<String>> counters() {
        return Optional.ofNullable(this.counters);
    }

    /**
     * The time when the execution was created.
     * 
     */
    @Import(name="createDate")
    private @Nullable Output<String> createDate;

    /**
     * @return The time when the execution was created.
     * 
     */
    public Optional<Output<String>> createDate() {
        return Optional.ofNullable(this.createDate);
    }

    /**
     * The description of OOS Execution.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of OOS Execution.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The time when the execution was ended.
     * 
     */
    @Import(name="endDate")
    private @Nullable Output<String> endDate;

    /**
     * @return The time when the execution was ended.
     * 
     */
    public Optional<Output<String>> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * The user who execute the template.
     * 
     */
    @Import(name="executedBy")
    private @Nullable Output<String> executedBy;

    /**
     * @return The user who execute the template.
     * 
     */
    public Optional<Output<String>> executedBy() {
        return Optional.ofNullable(this.executedBy);
    }

    /**
     * Whether to include subtasks.
     * 
     */
    @Import(name="isParent")
    private @Nullable Output<Boolean> isParent;

    /**
     * @return Whether to include subtasks.
     * 
     */
    public Optional<Output<Boolean>> isParent() {
        return Optional.ofNullable(this.isParent);
    }

    /**
     * The loop mode of OOS Execution.
     * 
     */
    @Import(name="loopMode")
    private @Nullable Output<String> loopMode;

    /**
     * @return The loop mode of OOS Execution.
     * 
     */
    public Optional<Output<String>> loopMode() {
        return Optional.ofNullable(this.loopMode);
    }

    /**
     * The mode of OOS Execution. Valid: `Automatic`, `Debug`. Default to `Automatic`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The mode of OOS Execution. Valid: `Automatic`, `Debug`. Default to `Automatic`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The outputs of OOS Execution.
     * 
     */
    @Import(name="outputs")
    private @Nullable Output<String> outputs;

    /**
     * @return The outputs of OOS Execution.
     * 
     */
    public Optional<Output<String>> outputs() {
        return Optional.ofNullable(this.outputs);
    }

    /**
     * The parameters required by the template. Default to `{}`.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<String> parameters;

    /**
     * @return The parameters required by the template. Default to `{}`.
     * 
     */
    public Optional<Output<String>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The id of parent execution.
     * 
     */
    @Import(name="parentExecutionId")
    private @Nullable Output<String> parentExecutionId;

    /**
     * @return The id of parent execution.
     * 
     */
    public Optional<Output<String>> parentExecutionId() {
        return Optional.ofNullable(this.parentExecutionId);
    }

    /**
     * The role that executes the current template.
     * 
     */
    @Import(name="ramRole")
    private @Nullable Output<String> ramRole;

    /**
     * @return The role that executes the current template.
     * 
     */
    public Optional<Output<String>> ramRole() {
        return Optional.ofNullable(this.ramRole);
    }

    /**
     * The mode of safety check.
     * 
     */
    @Import(name="safetyCheck")
    private @Nullable Output<String> safetyCheck;

    /**
     * @return The mode of safety check.
     * 
     */
    public Optional<Output<String>> safetyCheck() {
        return Optional.ofNullable(this.safetyCheck);
    }

    /**
     * The time when the execution was started.
     * 
     */
    @Import(name="startDate")
    private @Nullable Output<String> startDate;

    /**
     * @return The time when the execution was started.
     * 
     */
    public Optional<Output<String>> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * The status of OOS Execution.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of OOS Execution.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The message of status.
     * 
     */
    @Import(name="statusMessage")
    private @Nullable Output<String> statusMessage;

    /**
     * @return The message of status.
     * 
     */
    public Optional<Output<String>> statusMessage() {
        return Optional.ofNullable(this.statusMessage);
    }

    /**
     * The content of template. When the user selects an existing template to create and execute a task, it is not necessary to pass in this field.
     * 
     */
    @Import(name="templateContent")
    private @Nullable Output<String> templateContent;

    /**
     * @return The content of template. When the user selects an existing template to create and execute a task, it is not necessary to pass in this field.
     * 
     */
    public Optional<Output<String>> templateContent() {
        return Optional.ofNullable(this.templateContent);
    }

    /**
     * The id of template.
     * 
     */
    @Import(name="templateId")
    private @Nullable Output<String> templateId;

    /**
     * @return The id of template.
     * 
     */
    public Optional<Output<String>> templateId() {
        return Optional.ofNullable(this.templateId);
    }

    /**
     * The name of execution template.
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return The name of execution template.
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    /**
     * The version of execution template.
     * 
     */
    @Import(name="templateVersion")
    private @Nullable Output<String> templateVersion;

    /**
     * @return The version of execution template.
     * 
     */
    public Optional<Output<String>> templateVersion() {
        return Optional.ofNullable(this.templateVersion);
    }

    /**
     * The time when the execution was updated.
     * 
     */
    @Import(name="updateDate")
    private @Nullable Output<String> updateDate;

    /**
     * @return The time when the execution was updated.
     * 
     */
    public Optional<Output<String>> updateDate() {
        return Optional.ofNullable(this.updateDate);
    }

    private ExecutionState() {}

    private ExecutionState(ExecutionState $) {
        this.counters = $.counters;
        this.createDate = $.createDate;
        this.description = $.description;
        this.endDate = $.endDate;
        this.executedBy = $.executedBy;
        this.isParent = $.isParent;
        this.loopMode = $.loopMode;
        this.mode = $.mode;
        this.outputs = $.outputs;
        this.parameters = $.parameters;
        this.parentExecutionId = $.parentExecutionId;
        this.ramRole = $.ramRole;
        this.safetyCheck = $.safetyCheck;
        this.startDate = $.startDate;
        this.status = $.status;
        this.statusMessage = $.statusMessage;
        this.templateContent = $.templateContent;
        this.templateId = $.templateId;
        this.templateName = $.templateName;
        this.templateVersion = $.templateVersion;
        this.updateDate = $.updateDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExecutionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExecutionState $;

        public Builder() {
            $ = new ExecutionState();
        }

        public Builder(ExecutionState defaults) {
            $ = new ExecutionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param counters The counters of OOS Execution.
         * 
         * @return builder
         * 
         */
        public Builder counters(@Nullable Output<String> counters) {
            $.counters = counters;
            return this;
        }

        /**
         * @param counters The counters of OOS Execution.
         * 
         * @return builder
         * 
         */
        public Builder counters(String counters) {
            return counters(Output.of(counters));
        }

        /**
         * @param createDate The time when the execution was created.
         * 
         * @return builder
         * 
         */
        public Builder createDate(@Nullable Output<String> createDate) {
            $.createDate = createDate;
            return this;
        }

        /**
         * @param createDate The time when the execution was created.
         * 
         * @return builder
         * 
         */
        public Builder createDate(String createDate) {
            return createDate(Output.of(createDate));
        }

        /**
         * @param description The description of OOS Execution.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of OOS Execution.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endDate The time when the execution was ended.
         * 
         * @return builder
         * 
         */
        public Builder endDate(@Nullable Output<String> endDate) {
            $.endDate = endDate;
            return this;
        }

        /**
         * @param endDate The time when the execution was ended.
         * 
         * @return builder
         * 
         */
        public Builder endDate(String endDate) {
            return endDate(Output.of(endDate));
        }

        /**
         * @param executedBy The user who execute the template.
         * 
         * @return builder
         * 
         */
        public Builder executedBy(@Nullable Output<String> executedBy) {
            $.executedBy = executedBy;
            return this;
        }

        /**
         * @param executedBy The user who execute the template.
         * 
         * @return builder
         * 
         */
        public Builder executedBy(String executedBy) {
            return executedBy(Output.of(executedBy));
        }

        /**
         * @param isParent Whether to include subtasks.
         * 
         * @return builder
         * 
         */
        public Builder isParent(@Nullable Output<Boolean> isParent) {
            $.isParent = isParent;
            return this;
        }

        /**
         * @param isParent Whether to include subtasks.
         * 
         * @return builder
         * 
         */
        public Builder isParent(Boolean isParent) {
            return isParent(Output.of(isParent));
        }

        /**
         * @param loopMode The loop mode of OOS Execution.
         * 
         * @return builder
         * 
         */
        public Builder loopMode(@Nullable Output<String> loopMode) {
            $.loopMode = loopMode;
            return this;
        }

        /**
         * @param loopMode The loop mode of OOS Execution.
         * 
         * @return builder
         * 
         */
        public Builder loopMode(String loopMode) {
            return loopMode(Output.of(loopMode));
        }

        /**
         * @param mode The mode of OOS Execution. Valid: `Automatic`, `Debug`. Default to `Automatic`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The mode of OOS Execution. Valid: `Automatic`, `Debug`. Default to `Automatic`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param outputs The outputs of OOS Execution.
         * 
         * @return builder
         * 
         */
        public Builder outputs(@Nullable Output<String> outputs) {
            $.outputs = outputs;
            return this;
        }

        /**
         * @param outputs The outputs of OOS Execution.
         * 
         * @return builder
         * 
         */
        public Builder outputs(String outputs) {
            return outputs(Output.of(outputs));
        }

        /**
         * @param parameters The parameters required by the template. Default to `{}`.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<String> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters The parameters required by the template. Default to `{}`.
         * 
         * @return builder
         * 
         */
        public Builder parameters(String parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parentExecutionId The id of parent execution.
         * 
         * @return builder
         * 
         */
        public Builder parentExecutionId(@Nullable Output<String> parentExecutionId) {
            $.parentExecutionId = parentExecutionId;
            return this;
        }

        /**
         * @param parentExecutionId The id of parent execution.
         * 
         * @return builder
         * 
         */
        public Builder parentExecutionId(String parentExecutionId) {
            return parentExecutionId(Output.of(parentExecutionId));
        }

        /**
         * @param ramRole The role that executes the current template.
         * 
         * @return builder
         * 
         */
        public Builder ramRole(@Nullable Output<String> ramRole) {
            $.ramRole = ramRole;
            return this;
        }

        /**
         * @param ramRole The role that executes the current template.
         * 
         * @return builder
         * 
         */
        public Builder ramRole(String ramRole) {
            return ramRole(Output.of(ramRole));
        }

        /**
         * @param safetyCheck The mode of safety check.
         * 
         * @return builder
         * 
         */
        public Builder safetyCheck(@Nullable Output<String> safetyCheck) {
            $.safetyCheck = safetyCheck;
            return this;
        }

        /**
         * @param safetyCheck The mode of safety check.
         * 
         * @return builder
         * 
         */
        public Builder safetyCheck(String safetyCheck) {
            return safetyCheck(Output.of(safetyCheck));
        }

        /**
         * @param startDate The time when the execution was started.
         * 
         * @return builder
         * 
         */
        public Builder startDate(@Nullable Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate The time when the execution was started.
         * 
         * @return builder
         * 
         */
        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param status The status of OOS Execution.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of OOS Execution.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param statusMessage The message of status.
         * 
         * @return builder
         * 
         */
        public Builder statusMessage(@Nullable Output<String> statusMessage) {
            $.statusMessage = statusMessage;
            return this;
        }

        /**
         * @param statusMessage The message of status.
         * 
         * @return builder
         * 
         */
        public Builder statusMessage(String statusMessage) {
            return statusMessage(Output.of(statusMessage));
        }

        /**
         * @param templateContent The content of template. When the user selects an existing template to create and execute a task, it is not necessary to pass in this field.
         * 
         * @return builder
         * 
         */
        public Builder templateContent(@Nullable Output<String> templateContent) {
            $.templateContent = templateContent;
            return this;
        }

        /**
         * @param templateContent The content of template. When the user selects an existing template to create and execute a task, it is not necessary to pass in this field.
         * 
         * @return builder
         * 
         */
        public Builder templateContent(String templateContent) {
            return templateContent(Output.of(templateContent));
        }

        /**
         * @param templateId The id of template.
         * 
         * @return builder
         * 
         */
        public Builder templateId(@Nullable Output<String> templateId) {
            $.templateId = templateId;
            return this;
        }

        /**
         * @param templateId The id of template.
         * 
         * @return builder
         * 
         */
        public Builder templateId(String templateId) {
            return templateId(Output.of(templateId));
        }

        /**
         * @param templateName The name of execution template.
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName The name of execution template.
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        /**
         * @param templateVersion The version of execution template.
         * 
         * @return builder
         * 
         */
        public Builder templateVersion(@Nullable Output<String> templateVersion) {
            $.templateVersion = templateVersion;
            return this;
        }

        /**
         * @param templateVersion The version of execution template.
         * 
         * @return builder
         * 
         */
        public Builder templateVersion(String templateVersion) {
            return templateVersion(Output.of(templateVersion));
        }

        /**
         * @param updateDate The time when the execution was updated.
         * 
         * @return builder
         * 
         */
        public Builder updateDate(@Nullable Output<String> updateDate) {
            $.updateDate = updateDate;
            return this;
        }

        /**
         * @param updateDate The time when the execution was updated.
         * 
         * @return builder
         * 
         */
        public Builder updateDate(String updateDate) {
            return updateDate(Output.of(updateDate));
        }

        public ExecutionState build() {
            return $;
        }
    }

}
