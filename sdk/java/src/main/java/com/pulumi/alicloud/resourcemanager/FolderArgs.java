// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.resourcemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FolderArgs extends com.pulumi.resources.ResourceArgs {

    public static final FolderArgs Empty = new FolderArgs();

    /**
     * The name of the folder.
     * 
     */
    @Import(name="folderName", required=true)
    private Output<String> folderName;

    /**
     * @return The name of the folder.
     * 
     */
    public Output<String> folderName() {
        return this.folderName;
    }

    /**
     * The ID of the parent folder.
     * 
     */
    @Import(name="parentFolderId")
    private @Nullable Output<String> parentFolderId;

    /**
     * @return The ID of the parent folder.
     * 
     */
    public Optional<Output<String>> parentFolderId() {
        return Optional.ofNullable(this.parentFolderId);
    }

    /**
     * The tag of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tag of the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private FolderArgs() {}

    private FolderArgs(FolderArgs $) {
        this.folderName = $.folderName;
        this.parentFolderId = $.parentFolderId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FolderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FolderArgs $;

        public Builder() {
            $ = new FolderArgs();
        }

        public Builder(FolderArgs defaults) {
            $ = new FolderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param folderName The name of the folder.
         * 
         * @return builder
         * 
         */
        public Builder folderName(Output<String> folderName) {
            $.folderName = folderName;
            return this;
        }

        /**
         * @param folderName The name of the folder.
         * 
         * @return builder
         * 
         */
        public Builder folderName(String folderName) {
            return folderName(Output.of(folderName));
        }

        /**
         * @param parentFolderId The ID of the parent folder.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderId(@Nullable Output<String> parentFolderId) {
            $.parentFolderId = parentFolderId;
            return this;
        }

        /**
         * @param parentFolderId The ID of the parent folder.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderId(String parentFolderId) {
            return parentFolderId(Output.of(parentFolderId));
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tag of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public FolderArgs build() {
            if ($.folderName == null) {
                throw new MissingRequiredPropertyException("FolderArgs", "folderName");
            }
            return $;
        }
    }

}
