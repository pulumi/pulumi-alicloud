// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OssExportSinkConfigurationSinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final OssExportSinkConfigurationSinkArgs Empty = new OssExportSinkConfigurationSinkArgs();

    /**
     * The OSS bucket.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The OSS bucket.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * The interval between two data shipping operations. Valid values: 300 to 900. Unit: seconds.
     * 
     */
    @Import(name="bufferInterval", required=true)
    private Output<String> bufferInterval;

    /**
     * @return The interval between two data shipping operations. Valid values: 300 to 900. Unit: seconds.
     * 
     */
    public Output<String> bufferInterval() {
        return this.bufferInterval;
    }

    /**
     * The size of the OSS object to which data is shipped. Valid values: 5 to 256. Unit: MB.
     * 
     */
    @Import(name="bufferSize", required=true)
    private Output<String> bufferSize;

    /**
     * @return The size of the OSS object to which data is shipped. Valid values: 5 to 256. Unit: MB.
     * 
     */
    public Output<String> bufferSize() {
        return this.bufferSize;
    }

    /**
     * Supports four compression types, such as snappy, gzip, zstd, and none.
     * 
     */
    @Import(name="compressionType", required=true)
    private Output<String> compressionType;

    /**
     * @return Supports four compression types, such as snappy, gzip, zstd, and none.
     * 
     */
    public Output<String> compressionType() {
        return this.compressionType;
    }

    /**
     * The OSS file content details. Note: the value of this parameter should be updated based on the value of the contentType parameter.
     * 
     * If the contentType value is JSON, the parameters of the contentDetail value are as follows:
     * 
     * If the tag is allowed to be posted, the value of the parameter enableTag is true. Example:{&#34;enableTag&#34;: true}
     * 
     * You are not allowed to post tags. The value of the parameter enableTag is false. Example:{&#34;enableTag&#34;: false}
     * 
     * If the contentType value is csv, the parameters of the contentDetail value are as follows:
     * 
     * The parameter columns is the key of the log in the source logstore.
     * 
     * The delimiter parameter, which can be &#34;,&#34;,&#34;|&#34;,&#34;&#34;, or &#34;\t&#34;.
     * 
     * The header parameter determines whether the OSS file retains the header. The optional value is true or false.
     * 
     * The lineFeed parameter. Optional values are &#34;\t&#34;, &#34;\n&#34;, or &#34;&#34;.
     * 
     * The invalid field content parameter is null to specify the delivery content when the field name does not exist.
     * 
     * The escape character parameter &#34;quote&#34;. Optional values are &#34;&#34; &#34;,&#34; &#39;&#34;, or&#34; &#34;.
     * 
     * Example:{&#34;null&#34;: &#34;-&#34;, &#34;header&#34;: false, &#34;lineFeed&#34;: &#34;\n&#34;, &#34;quote&#34;: &#34;&#34;, &#34;delimiter&#34;: &#34;,&#34;, &#34;columns&#34;: [&#34;a&#34;, &#34;B&#34;, &#34;c&#34;, &#34;d&#34;]}
     * 
     * When the contentType value is parquet, the parameters of the contentDetail value are as follows:
     * 
     * The columns parameter is the key of the log in the source Logstore and must carry the data type of the key, for example:{&#34;columns&#34;: [{&#34;name&#34;: &#34;a&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;B&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;c&#34;, &#34;type&#34;: &#34;string&#34;: &#34;string&#34;}]}
     * 
     * When the contentType value is set to orc, the parameters of the contentDetail value are as follows:
     * 
     * The columns parameter is the key of the log in the source Logstore and must carry the data type of the key, for example:{&#34;columns&#34;: [{&#34;name&#34;: &#34;a&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;B&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;c&#34;, &#34;type&#34;: &#34;string&#34;: &#34;string&#34;}]}
     * 
     */
    @Import(name="contentDetail", required=true)
    private Output<String> contentDetail;

    /**
     * @return The OSS file content details. Note: the value of this parameter should be updated based on the value of the contentType parameter.
     * 
     * If the contentType value is JSON, the parameters of the contentDetail value are as follows:
     * 
     * If the tag is allowed to be posted, the value of the parameter enableTag is true. Example:{&#34;enableTag&#34;: true}
     * 
     * You are not allowed to post tags. The value of the parameter enableTag is false. Example:{&#34;enableTag&#34;: false}
     * 
     * If the contentType value is csv, the parameters of the contentDetail value are as follows:
     * 
     * The parameter columns is the key of the log in the source logstore.
     * 
     * The delimiter parameter, which can be &#34;,&#34;,&#34;|&#34;,&#34;&#34;, or &#34;\t&#34;.
     * 
     * The header parameter determines whether the OSS file retains the header. The optional value is true or false.
     * 
     * The lineFeed parameter. Optional values are &#34;\t&#34;, &#34;\n&#34;, or &#34;&#34;.
     * 
     * The invalid field content parameter is null to specify the delivery content when the field name does not exist.
     * 
     * The escape character parameter &#34;quote&#34;. Optional values are &#34;&#34; &#34;,&#34; &#39;&#34;, or&#34; &#34;.
     * 
     * Example:{&#34;null&#34;: &#34;-&#34;, &#34;header&#34;: false, &#34;lineFeed&#34;: &#34;\n&#34;, &#34;quote&#34;: &#34;&#34;, &#34;delimiter&#34;: &#34;,&#34;, &#34;columns&#34;: [&#34;a&#34;, &#34;B&#34;, &#34;c&#34;, &#34;d&#34;]}
     * 
     * When the contentType value is parquet, the parameters of the contentDetail value are as follows:
     * 
     * The columns parameter is the key of the log in the source Logstore and must carry the data type of the key, for example:{&#34;columns&#34;: [{&#34;name&#34;: &#34;a&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;B&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;c&#34;, &#34;type&#34;: &#34;string&#34;: &#34;string&#34;}]}
     * 
     * When the contentType value is set to orc, the parameters of the contentDetail value are as follows:
     * 
     * The columns parameter is the key of the log in the source Logstore and must carry the data type of the key, for example:{&#34;columns&#34;: [{&#34;name&#34;: &#34;a&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;B&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;c&#34;, &#34;type&#34;: &#34;string&#34;: &#34;string&#34;}]}
     * 
     */
    public Output<String> contentDetail() {
        return this.contentDetail;
    }

    /**
     * The storage format of the OSS object. Valid values: json, parquet, csv, and orc.
     * 
     */
    @Import(name="contentType", required=true)
    private Output<String> contentType;

    /**
     * @return The storage format of the OSS object. Valid values: json, parquet, csv, and orc.
     * 
     */
    public Output<String> contentType() {
        return this.contentType;
    }

    /**
     * The latency of data shipping. The value of this parameter cannot exceed the data retention period of the source Logstore.
     * 
     */
    @Import(name="delaySeconds")
    private @Nullable Output<Integer> delaySeconds;

    /**
     * @return The latency of data shipping. The value of this parameter cannot exceed the data retention period of the source Logstore.
     * 
     */
    public Optional<Output<Integer>> delaySeconds() {
        return Optional.ofNullable(this.delaySeconds);
    }

    /**
     * The OSS Endpoint can only be an OSS intranet Endpoint and only supports the same region. Example value: https://oss-cn-hangzhou-internal.aliyuncs.com
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return The OSS Endpoint can only be an OSS intranet Endpoint and only supports the same region. Example value: https://oss-cn-hangzhou-internal.aliyuncs.com
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    /**
     * The directory is dynamically generated according to the time. The default value is% Y/%m/%d/%H/%M. The corresponding generated directory is, for example, 2017/01/23/12/00. Note that the partition format cannot start and end. Example values:%Y/%m/%d
     * 
     */
    @Import(name="pathFormat")
    private @Nullable Output<String> pathFormat;

    /**
     * @return The directory is dynamically generated according to the time. The default value is% Y/%m/%d/%H/%M. The corresponding generated directory is, for example, 2017/01/23/12/00. Note that the partition format cannot start and end. Example values:%Y/%m/%d
     * 
     */
    public Optional<Output<String>> pathFormat() {
        return Optional.ofNullable(this.pathFormat);
    }

    /**
     * The partition format type. only support time
     * 
     */
    @Import(name="pathFormatType")
    private @Nullable Output<String> pathFormatType;

    /**
     * @return The partition format type. only support time
     * 
     */
    public Optional<Output<String>> pathFormatType() {
        return Optional.ofNullable(this.pathFormatType);
    }

    /**
     * The prefix of the OSS object.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return The prefix of the OSS object.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * The ARN of the RAM role that is used to write data to OSS. Example value: acs:ram::xxxxxxx
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return The ARN of the RAM role that is used to write data to OSS. Example value: acs:ram::xxxxxxx
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * The suffix of the OSS object.
     * 
     */
    @Import(name="suffix")
    private @Nullable Output<String> suffix;

    /**
     * @return The suffix of the OSS object.
     * 
     */
    public Optional<Output<String>> suffix() {
        return Optional.ofNullable(this.suffix);
    }

    /**
     * The time zone. Example value: +0800
     * 
     */
    @Import(name="timeZone", required=true)
    private Output<String> timeZone;

    /**
     * @return The time zone. Example value: +0800
     * 
     */
    public Output<String> timeZone() {
        return this.timeZone;
    }

    private OssExportSinkConfigurationSinkArgs() {}

    private OssExportSinkConfigurationSinkArgs(OssExportSinkConfigurationSinkArgs $) {
        this.bucket = $.bucket;
        this.bufferInterval = $.bufferInterval;
        this.bufferSize = $.bufferSize;
        this.compressionType = $.compressionType;
        this.contentDetail = $.contentDetail;
        this.contentType = $.contentType;
        this.delaySeconds = $.delaySeconds;
        this.endpoint = $.endpoint;
        this.pathFormat = $.pathFormat;
        this.pathFormatType = $.pathFormatType;
        this.prefix = $.prefix;
        this.roleArn = $.roleArn;
        this.suffix = $.suffix;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OssExportSinkConfigurationSinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OssExportSinkConfigurationSinkArgs $;

        public Builder() {
            $ = new OssExportSinkConfigurationSinkArgs();
        }

        public Builder(OssExportSinkConfigurationSinkArgs defaults) {
            $ = new OssExportSinkConfigurationSinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The OSS bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The OSS bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param bufferInterval The interval between two data shipping operations. Valid values: 300 to 900. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder bufferInterval(Output<String> bufferInterval) {
            $.bufferInterval = bufferInterval;
            return this;
        }

        /**
         * @param bufferInterval The interval between two data shipping operations. Valid values: 300 to 900. Unit: seconds.
         * 
         * @return builder
         * 
         */
        public Builder bufferInterval(String bufferInterval) {
            return bufferInterval(Output.of(bufferInterval));
        }

        /**
         * @param bufferSize The size of the OSS object to which data is shipped. Valid values: 5 to 256. Unit: MB.
         * 
         * @return builder
         * 
         */
        public Builder bufferSize(Output<String> bufferSize) {
            $.bufferSize = bufferSize;
            return this;
        }

        /**
         * @param bufferSize The size of the OSS object to which data is shipped. Valid values: 5 to 256. Unit: MB.
         * 
         * @return builder
         * 
         */
        public Builder bufferSize(String bufferSize) {
            return bufferSize(Output.of(bufferSize));
        }

        /**
         * @param compressionType Supports four compression types, such as snappy, gzip, zstd, and none.
         * 
         * @return builder
         * 
         */
        public Builder compressionType(Output<String> compressionType) {
            $.compressionType = compressionType;
            return this;
        }

        /**
         * @param compressionType Supports four compression types, such as snappy, gzip, zstd, and none.
         * 
         * @return builder
         * 
         */
        public Builder compressionType(String compressionType) {
            return compressionType(Output.of(compressionType));
        }

        /**
         * @param contentDetail The OSS file content details. Note: the value of this parameter should be updated based on the value of the contentType parameter.
         * 
         * If the contentType value is JSON, the parameters of the contentDetail value are as follows:
         * 
         * If the tag is allowed to be posted, the value of the parameter enableTag is true. Example:{&#34;enableTag&#34;: true}
         * 
         * You are not allowed to post tags. The value of the parameter enableTag is false. Example:{&#34;enableTag&#34;: false}
         * 
         * If the contentType value is csv, the parameters of the contentDetail value are as follows:
         * 
         * The parameter columns is the key of the log in the source logstore.
         * 
         * The delimiter parameter, which can be &#34;,&#34;,&#34;|&#34;,&#34;&#34;, or &#34;\t&#34;.
         * 
         * The header parameter determines whether the OSS file retains the header. The optional value is true or false.
         * 
         * The lineFeed parameter. Optional values are &#34;\t&#34;, &#34;\n&#34;, or &#34;&#34;.
         * 
         * The invalid field content parameter is null to specify the delivery content when the field name does not exist.
         * 
         * The escape character parameter &#34;quote&#34;. Optional values are &#34;&#34; &#34;,&#34; &#39;&#34;, or&#34; &#34;.
         * 
         * Example:{&#34;null&#34;: &#34;-&#34;, &#34;header&#34;: false, &#34;lineFeed&#34;: &#34;\n&#34;, &#34;quote&#34;: &#34;&#34;, &#34;delimiter&#34;: &#34;,&#34;, &#34;columns&#34;: [&#34;a&#34;, &#34;B&#34;, &#34;c&#34;, &#34;d&#34;]}
         * 
         * When the contentType value is parquet, the parameters of the contentDetail value are as follows:
         * 
         * The columns parameter is the key of the log in the source Logstore and must carry the data type of the key, for example:{&#34;columns&#34;: [{&#34;name&#34;: &#34;a&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;B&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;c&#34;, &#34;type&#34;: &#34;string&#34;: &#34;string&#34;}]}
         * 
         * When the contentType value is set to orc, the parameters of the contentDetail value are as follows:
         * 
         * The columns parameter is the key of the log in the source Logstore and must carry the data type of the key, for example:{&#34;columns&#34;: [{&#34;name&#34;: &#34;a&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;B&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;c&#34;, &#34;type&#34;: &#34;string&#34;: &#34;string&#34;}]}
         * 
         * @return builder
         * 
         */
        public Builder contentDetail(Output<String> contentDetail) {
            $.contentDetail = contentDetail;
            return this;
        }

        /**
         * @param contentDetail The OSS file content details. Note: the value of this parameter should be updated based on the value of the contentType parameter.
         * 
         * If the contentType value is JSON, the parameters of the contentDetail value are as follows:
         * 
         * If the tag is allowed to be posted, the value of the parameter enableTag is true. Example:{&#34;enableTag&#34;: true}
         * 
         * You are not allowed to post tags. The value of the parameter enableTag is false. Example:{&#34;enableTag&#34;: false}
         * 
         * If the contentType value is csv, the parameters of the contentDetail value are as follows:
         * 
         * The parameter columns is the key of the log in the source logstore.
         * 
         * The delimiter parameter, which can be &#34;,&#34;,&#34;|&#34;,&#34;&#34;, or &#34;\t&#34;.
         * 
         * The header parameter determines whether the OSS file retains the header. The optional value is true or false.
         * 
         * The lineFeed parameter. Optional values are &#34;\t&#34;, &#34;\n&#34;, or &#34;&#34;.
         * 
         * The invalid field content parameter is null to specify the delivery content when the field name does not exist.
         * 
         * The escape character parameter &#34;quote&#34;. Optional values are &#34;&#34; &#34;,&#34; &#39;&#34;, or&#34; &#34;.
         * 
         * Example:{&#34;null&#34;: &#34;-&#34;, &#34;header&#34;: false, &#34;lineFeed&#34;: &#34;\n&#34;, &#34;quote&#34;: &#34;&#34;, &#34;delimiter&#34;: &#34;,&#34;, &#34;columns&#34;: [&#34;a&#34;, &#34;B&#34;, &#34;c&#34;, &#34;d&#34;]}
         * 
         * When the contentType value is parquet, the parameters of the contentDetail value are as follows:
         * 
         * The columns parameter is the key of the log in the source Logstore and must carry the data type of the key, for example:{&#34;columns&#34;: [{&#34;name&#34;: &#34;a&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;B&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;c&#34;, &#34;type&#34;: &#34;string&#34;: &#34;string&#34;}]}
         * 
         * When the contentType value is set to orc, the parameters of the contentDetail value are as follows:
         * 
         * The columns parameter is the key of the log in the source Logstore and must carry the data type of the key, for example:{&#34;columns&#34;: [{&#34;name&#34;: &#34;a&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;B&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;c&#34;, &#34;type&#34;: &#34;string&#34;: &#34;string&#34;}]}
         * 
         * @return builder
         * 
         */
        public Builder contentDetail(String contentDetail) {
            return contentDetail(Output.of(contentDetail));
        }

        /**
         * @param contentType The storage format of the OSS object. Valid values: json, parquet, csv, and orc.
         * 
         * @return builder
         * 
         */
        public Builder contentType(Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType The storage format of the OSS object. Valid values: json, parquet, csv, and orc.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param delaySeconds The latency of data shipping. The value of this parameter cannot exceed the data retention period of the source Logstore.
         * 
         * @return builder
         * 
         */
        public Builder delaySeconds(@Nullable Output<Integer> delaySeconds) {
            $.delaySeconds = delaySeconds;
            return this;
        }

        /**
         * @param delaySeconds The latency of data shipping. The value of this parameter cannot exceed the data retention period of the source Logstore.
         * 
         * @return builder
         * 
         */
        public Builder delaySeconds(Integer delaySeconds) {
            return delaySeconds(Output.of(delaySeconds));
        }

        /**
         * @param endpoint The OSS Endpoint can only be an OSS intranet Endpoint and only supports the same region. Example value: https://oss-cn-hangzhou-internal.aliyuncs.com
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The OSS Endpoint can only be an OSS intranet Endpoint and only supports the same region. Example value: https://oss-cn-hangzhou-internal.aliyuncs.com
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param pathFormat The directory is dynamically generated according to the time. The default value is% Y/%m/%d/%H/%M. The corresponding generated directory is, for example, 2017/01/23/12/00. Note that the partition format cannot start and end. Example values:%Y/%m/%d
         * 
         * @return builder
         * 
         */
        public Builder pathFormat(@Nullable Output<String> pathFormat) {
            $.pathFormat = pathFormat;
            return this;
        }

        /**
         * @param pathFormat The directory is dynamically generated according to the time. The default value is% Y/%m/%d/%H/%M. The corresponding generated directory is, for example, 2017/01/23/12/00. Note that the partition format cannot start and end. Example values:%Y/%m/%d
         * 
         * @return builder
         * 
         */
        public Builder pathFormat(String pathFormat) {
            return pathFormat(Output.of(pathFormat));
        }

        /**
         * @param pathFormatType The partition format type. only support time
         * 
         * @return builder
         * 
         */
        public Builder pathFormatType(@Nullable Output<String> pathFormatType) {
            $.pathFormatType = pathFormatType;
            return this;
        }

        /**
         * @param pathFormatType The partition format type. only support time
         * 
         * @return builder
         * 
         */
        public Builder pathFormatType(String pathFormatType) {
            return pathFormatType(Output.of(pathFormatType));
        }

        /**
         * @param prefix The prefix of the OSS object.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix The prefix of the OSS object.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param roleArn The ARN of the RAM role that is used to write data to OSS. Example value: acs:ram::xxxxxxx
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The ARN of the RAM role that is used to write data to OSS. Example value: acs:ram::xxxxxxx
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param suffix The suffix of the OSS object.
         * 
         * @return builder
         * 
         */
        public Builder suffix(@Nullable Output<String> suffix) {
            $.suffix = suffix;
            return this;
        }

        /**
         * @param suffix The suffix of the OSS object.
         * 
         * @return builder
         * 
         */
        public Builder suffix(String suffix) {
            return suffix(Output.of(suffix));
        }

        /**
         * @param timeZone The time zone. Example value: +0800
         * 
         * @return builder
         * 
         */
        public Builder timeZone(Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The time zone. Example value: +0800
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public OssExportSinkConfigurationSinkArgs build() {
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("OssExportSinkConfigurationSinkArgs", "bucket");
            }
            if ($.bufferInterval == null) {
                throw new MissingRequiredPropertyException("OssExportSinkConfigurationSinkArgs", "bufferInterval");
            }
            if ($.bufferSize == null) {
                throw new MissingRequiredPropertyException("OssExportSinkConfigurationSinkArgs", "bufferSize");
            }
            if ($.compressionType == null) {
                throw new MissingRequiredPropertyException("OssExportSinkConfigurationSinkArgs", "compressionType");
            }
            if ($.contentDetail == null) {
                throw new MissingRequiredPropertyException("OssExportSinkConfigurationSinkArgs", "contentDetail");
            }
            if ($.contentType == null) {
                throw new MissingRequiredPropertyException("OssExportSinkConfigurationSinkArgs", "contentType");
            }
            if ($.endpoint == null) {
                throw new MissingRequiredPropertyException("OssExportSinkConfigurationSinkArgs", "endpoint");
            }
            if ($.roleArn == null) {
                throw new MissingRequiredPropertyException("OssExportSinkConfigurationSinkArgs", "roleArn");
            }
            if ($.timeZone == null) {
                throw new MissingRequiredPropertyException("OssExportSinkConfigurationSinkArgs", "timeZone");
            }
            return $;
        }
    }

}
