// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.expressconnect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualPhysicalConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final VirtualPhysicalConnectionState Empty = new VirtualPhysicalConnectionState();

    /**
     * The ID of the access point of the physical connection.
     * 
     */
    @Import(name="accessPointId")
    private @Nullable Output<String> accessPointId;

    /**
     * @return The ID of the access point of the physical connection.
     * 
     */
    public Optional<Output<String>> accessPointId() {
        return Optional.ofNullable(this.accessPointId);
    }

    /**
     * The physical location where the physical connection access device is located.
     * 
     */
    @Import(name="adLocation")
    private @Nullable Output<String> adLocation;

    /**
     * @return The physical location where the physical connection access device is located.
     * 
     */
    public Optional<Output<String>> adLocation() {
        return Optional.ofNullable(this.adLocation);
    }

    /**
     * The bandwidth of the physical connection. Unit: Mbps.
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<String> bandwidth;

    /**
     * @return The bandwidth of the physical connection. Unit: Mbps.
     * 
     */
    public Optional<Output<String>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * The commercial status of the physical line. Value:-**Normal**: activated.-**Financialized**: Arrears locked.-**SecurityLocked**: locked for security reasons.
     * 
     */
    @Import(name="businessStatus")
    private @Nullable Output<String> businessStatus;

    /**
     * @return The commercial status of the physical line. Value:-**Normal**: activated.-**Financialized**: Arrears locked.-**SecurityLocked**: locked for security reasons.
     * 
     */
    public Optional<Output<String>> businessStatus() {
        return Optional.ofNullable(this.businessStatus);
    }

    /**
     * The circuit code provided by the operator for the physical connection.
     * 
     */
    @Import(name="circuitCode")
    private @Nullable Output<String> circuitCode;

    /**
     * @return The circuit code provided by the operator for the physical connection.
     * 
     */
    public Optional<Output<String>> circuitCode() {
        return Optional.ofNullable(this.circuitCode);
    }

    /**
     * The creation time of the resource
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The creation time of the resource
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The description of the physical connection.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the physical connection.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies whether to precheck the API request. Valid values: `true` and `false`.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Specifies whether to precheck the API request. Valid values: `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The opening time of the physical connection.
     * 
     */
    @Import(name="enabledTime")
    private @Nullable Output<String> enabledTime;

    /**
     * @return The opening time of the physical connection.
     * 
     */
    public Optional<Output<String>> enabledTime() {
        return Optional.ofNullable(this.enabledTime);
    }

    /**
     * The expiration time of the shared line.Time is expressed according to ISO8601 standard and UTC time is used. The format is: YYYY-MM-DDThh:mm:ssZ.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return The expiration time of the shared line.Time is expressed according to ISO8601 standard and UTC time is used. The format is: YYYY-MM-DDThh:mm:ssZ.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The estimated bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
     * 
     */
    @Import(name="expectSpec")
    private @Nullable Output<String> expectSpec;

    /**
     * @return The estimated bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
     * 
     */
    public Optional<Output<String>> expectSpec() {
        return Optional.ofNullable(this.expectSpec);
    }

    /**
     * Operators that provide access to physical lines. Value:-**CT**: China Telecom.-**CU**: China Unicom.-**CM**: China Mobile.-**CO**: China Other.-**Equinix**:Equinix.-**Other**: Other abroad.
     * 
     */
    @Import(name="lineOperator")
    private @Nullable Output<String> lineOperator;

    /**
     * @return Operators that provide access to physical lines. Value:-**CT**: China Telecom.-**CU**: China Unicom.-**CM**: China Mobile.-**CO**: China Other.-**Equinix**:Equinix.-**Other**: Other abroad.
     * 
     */
    public Optional<Output<String>> lineOperator() {
        return Optional.ofNullable(this.lineOperator);
    }

    /**
     * The state of LOA. Value:-**Applying**:LOA application.-**Accept**:LOA application passed.-**Available**:LOA is Available.-**Rejected**:LOA application Rejected.-**Completing**: The dedicated line is under construction.-**Complete**: The construction of the dedicated line is completed.-**Deleted**:LOA has been Deleted.
     * 
     */
    @Import(name="loaStatus")
    private @Nullable Output<String> loaStatus;

    /**
     * @return The state of LOA. Value:-**Applying**:LOA application.-**Accept**:LOA application passed.-**Available**:LOA is Available.-**Rejected**:LOA application Rejected.-**Completing**: The dedicated line is under construction.-**Complete**: The construction of the dedicated line is completed.-**Deleted**:LOA has been Deleted.
     * 
     */
    public Optional<Output<String>> loaStatus() {
        return Optional.ofNullable(this.loaStatus);
    }

    /**
     * The payment method of shared dedicated line. Value:
     * - **PayByPhysicalConnectionOwner**: indicates that the owner of the physical line associated with the shared line pays.
     * - **PayByVirtualPhysicalConnectionOwner**: indicates that the owner of the shared line pays.
     * 
     */
    @Import(name="orderMode")
    private @Nullable Output<String> orderMode;

    /**
     * @return The payment method of shared dedicated line. Value:
     * - **PayByPhysicalConnectionOwner**: indicates that the owner of the physical line associated with the shared line pays.
     * - **PayByVirtualPhysicalConnectionOwner**: indicates that the owner of the shared line pays.
     * 
     */
    public Optional<Output<String>> orderMode() {
        return Optional.ofNullable(this.orderMode);
    }

    /**
     * The ID of the Alibaba Cloud account (primary account) to which the physical connection belongs.
     * 
     */
    @Import(name="parentPhysicalConnectionAliUid")
    private @Nullable Output<String> parentPhysicalConnectionAliUid;

    /**
     * @return The ID of the Alibaba Cloud account (primary account) to which the physical connection belongs.
     * 
     */
    public Optional<Output<String>> parentPhysicalConnectionAliUid() {
        return Optional.ofNullable(this.parentPhysicalConnectionAliUid);
    }

    /**
     * The ID of the instance of the physical connection.
     * 
     */
    @Import(name="parentPhysicalConnectionId")
    private @Nullable Output<String> parentPhysicalConnectionId;

    /**
     * @return The ID of the instance of the physical connection.
     * 
     */
    public Optional<Output<String>> parentPhysicalConnectionId() {
        return Optional.ofNullable(this.parentPhysicalConnectionId);
    }

    /**
     * The geographic location of the local data center.
     * 
     */
    @Import(name="peerLocation")
    private @Nullable Output<String> peerLocation;

    /**
     * @return The geographic location of the local data center.
     * 
     */
    public Optional<Output<String>> peerLocation() {
        return Optional.ofNullable(this.peerLocation);
    }

    /**
     * The port number of the physical connection device.
     * 
     */
    @Import(name="portNumber")
    private @Nullable Output<String> portNumber;

    /**
     * @return The port number of the physical connection device.
     * 
     */
    public Optional<Output<String>> portNumber() {
        return Optional.ofNullable(this.portNumber);
    }

    /**
     * Physical connection port type. Value:-**100Base-T**: 100 megabytes port.-**1000Base-T**: Gigabit port.-**1000Base-LX**: Gigabit single mode optical port (10km).-**10GBase-T**: 10 Gigabit port.-**10GBase-LR**: 10 Gigabit single mode optical port (10km).-**40GBase-LR**: 40 megabytes single-mode optical port.-**100GBase-LR**: 100,000 megabytes single-mode optical port.
     * 
     */
    @Import(name="portType")
    private @Nullable Output<String> portType;

    /**
     * @return Physical connection port type. Value:-**100Base-T**: 100 megabytes port.-**1000Base-T**: Gigabit port.-**1000Base-LX**: Gigabit single mode optical port (10km).-**10GBase-T**: 10 Gigabit port.-**10GBase-LR**: 10 Gigabit single mode optical port (10km).-**40GBase-LR**: 40 megabytes single-mode optical port.-**100GBase-LR**: 100,000 megabytes single-mode optical port.
     * 
     */
    public Optional<Output<String>> portType() {
        return Optional.ofNullable(this.portType);
    }

    /**
     * The ID of the redundant physical connection.
     * 
     */
    @Import(name="redundantPhysicalConnectionId")
    private @Nullable Output<String> redundantPhysicalConnectionId;

    /**
     * @return The ID of the redundant physical connection.
     * 
     */
    public Optional<Output<String>> redundantPhysicalConnectionId() {
        return Optional.ofNullable(this.redundantPhysicalConnectionId);
    }

    /**
     * The resource group id.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The resource group id.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
     * 
     */
    @Import(name="spec")
    private @Nullable Output<String> spec;

    /**
     * @return The bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
     * 
     */
    public Optional<Output<String>> spec() {
        return Optional.ofNullable(this.spec);
    }

    /**
     * The status of the resource
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The name of the physical connection.
     * 
     */
    @Import(name="virtualPhysicalConnectionName")
    private @Nullable Output<String> virtualPhysicalConnectionName;

    /**
     * @return The name of the physical connection.
     * 
     */
    public Optional<Output<String>> virtualPhysicalConnectionName() {
        return Optional.ofNullable(this.virtualPhysicalConnectionName);
    }

    /**
     * The business status of the shared line. Value:-**Confirmed**: The shared line has been Confirmed to receive.-**UnConfirmed**: The shared line has not been confirmed to be received.-**Deleted**: The shared line has been Deleted.
     * 
     */
    @Import(name="virtualPhysicalConnectionStatus")
    private @Nullable Output<String> virtualPhysicalConnectionStatus;

    /**
     * @return The business status of the shared line. Value:-**Confirmed**: The shared line has been Confirmed to receive.-**UnConfirmed**: The shared line has not been confirmed to be received.-**Deleted**: The shared line has been Deleted.
     * 
     */
    public Optional<Output<String>> virtualPhysicalConnectionStatus() {
        return Optional.ofNullable(this.virtualPhysicalConnectionStatus);
    }

    /**
     * The VLAN ID of the shared leased line. Valid values: `0` to `2999`.
     * 
     */
    @Import(name="vlanId")
    private @Nullable Output<Integer> vlanId;

    /**
     * @return The VLAN ID of the shared leased line. Valid values: `0` to `2999`.
     * 
     */
    public Optional<Output<Integer>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    /**
     * The ID of the Alibaba Cloud account (primary account) of the owner of the shared line.
     * 
     */
    @Import(name="vpconnAliUid")
    private @Nullable Output<String> vpconnAliUid;

    /**
     * @return The ID of the Alibaba Cloud account (primary account) of the owner of the shared line.
     * 
     */
    public Optional<Output<String>> vpconnAliUid() {
        return Optional.ofNullable(this.vpconnAliUid);
    }

    private VirtualPhysicalConnectionState() {}

    private VirtualPhysicalConnectionState(VirtualPhysicalConnectionState $) {
        this.accessPointId = $.accessPointId;
        this.adLocation = $.adLocation;
        this.bandwidth = $.bandwidth;
        this.businessStatus = $.businessStatus;
        this.circuitCode = $.circuitCode;
        this.createTime = $.createTime;
        this.description = $.description;
        this.dryRun = $.dryRun;
        this.enabledTime = $.enabledTime;
        this.endTime = $.endTime;
        this.expectSpec = $.expectSpec;
        this.lineOperator = $.lineOperator;
        this.loaStatus = $.loaStatus;
        this.orderMode = $.orderMode;
        this.parentPhysicalConnectionAliUid = $.parentPhysicalConnectionAliUid;
        this.parentPhysicalConnectionId = $.parentPhysicalConnectionId;
        this.peerLocation = $.peerLocation;
        this.portNumber = $.portNumber;
        this.portType = $.portType;
        this.redundantPhysicalConnectionId = $.redundantPhysicalConnectionId;
        this.resourceGroupId = $.resourceGroupId;
        this.spec = $.spec;
        this.status = $.status;
        this.virtualPhysicalConnectionName = $.virtualPhysicalConnectionName;
        this.virtualPhysicalConnectionStatus = $.virtualPhysicalConnectionStatus;
        this.vlanId = $.vlanId;
        this.vpconnAliUid = $.vpconnAliUid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualPhysicalConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualPhysicalConnectionState $;

        public Builder() {
            $ = new VirtualPhysicalConnectionState();
        }

        public Builder(VirtualPhysicalConnectionState defaults) {
            $ = new VirtualPhysicalConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessPointId The ID of the access point of the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder accessPointId(@Nullable Output<String> accessPointId) {
            $.accessPointId = accessPointId;
            return this;
        }

        /**
         * @param accessPointId The ID of the access point of the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder accessPointId(String accessPointId) {
            return accessPointId(Output.of(accessPointId));
        }

        /**
         * @param adLocation The physical location where the physical connection access device is located.
         * 
         * @return builder
         * 
         */
        public Builder adLocation(@Nullable Output<String> adLocation) {
            $.adLocation = adLocation;
            return this;
        }

        /**
         * @param adLocation The physical location where the physical connection access device is located.
         * 
         * @return builder
         * 
         */
        public Builder adLocation(String adLocation) {
            return adLocation(Output.of(adLocation));
        }

        /**
         * @param bandwidth The bandwidth of the physical connection. Unit: Mbps.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<String> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth The bandwidth of the physical connection. Unit: Mbps.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(String bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param businessStatus The commercial status of the physical line. Value:-**Normal**: activated.-**Financialized**: Arrears locked.-**SecurityLocked**: locked for security reasons.
         * 
         * @return builder
         * 
         */
        public Builder businessStatus(@Nullable Output<String> businessStatus) {
            $.businessStatus = businessStatus;
            return this;
        }

        /**
         * @param businessStatus The commercial status of the physical line. Value:-**Normal**: activated.-**Financialized**: Arrears locked.-**SecurityLocked**: locked for security reasons.
         * 
         * @return builder
         * 
         */
        public Builder businessStatus(String businessStatus) {
            return businessStatus(Output.of(businessStatus));
        }

        /**
         * @param circuitCode The circuit code provided by the operator for the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder circuitCode(@Nullable Output<String> circuitCode) {
            $.circuitCode = circuitCode;
            return this;
        }

        /**
         * @param circuitCode The circuit code provided by the operator for the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder circuitCode(String circuitCode) {
            return circuitCode(Output.of(circuitCode));
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description The description of the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dryRun Specifies whether to precheck the API request. Valid values: `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Specifies whether to precheck the API request. Valid values: `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param enabledTime The opening time of the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder enabledTime(@Nullable Output<String> enabledTime) {
            $.enabledTime = enabledTime;
            return this;
        }

        /**
         * @param enabledTime The opening time of the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder enabledTime(String enabledTime) {
            return enabledTime(Output.of(enabledTime));
        }

        /**
         * @param endTime The expiration time of the shared line.Time is expressed according to ISO8601 standard and UTC time is used. The format is: YYYY-MM-DDThh:mm:ssZ.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The expiration time of the shared line.Time is expressed according to ISO8601 standard and UTC time is used. The format is: YYYY-MM-DDThh:mm:ssZ.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param expectSpec The estimated bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
         * 
         * @return builder
         * 
         */
        public Builder expectSpec(@Nullable Output<String> expectSpec) {
            $.expectSpec = expectSpec;
            return this;
        }

        /**
         * @param expectSpec The estimated bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
         * 
         * @return builder
         * 
         */
        public Builder expectSpec(String expectSpec) {
            return expectSpec(Output.of(expectSpec));
        }

        /**
         * @param lineOperator Operators that provide access to physical lines. Value:-**CT**: China Telecom.-**CU**: China Unicom.-**CM**: China Mobile.-**CO**: China Other.-**Equinix**:Equinix.-**Other**: Other abroad.
         * 
         * @return builder
         * 
         */
        public Builder lineOperator(@Nullable Output<String> lineOperator) {
            $.lineOperator = lineOperator;
            return this;
        }

        /**
         * @param lineOperator Operators that provide access to physical lines. Value:-**CT**: China Telecom.-**CU**: China Unicom.-**CM**: China Mobile.-**CO**: China Other.-**Equinix**:Equinix.-**Other**: Other abroad.
         * 
         * @return builder
         * 
         */
        public Builder lineOperator(String lineOperator) {
            return lineOperator(Output.of(lineOperator));
        }

        /**
         * @param loaStatus The state of LOA. Value:-**Applying**:LOA application.-**Accept**:LOA application passed.-**Available**:LOA is Available.-**Rejected**:LOA application Rejected.-**Completing**: The dedicated line is under construction.-**Complete**: The construction of the dedicated line is completed.-**Deleted**:LOA has been Deleted.
         * 
         * @return builder
         * 
         */
        public Builder loaStatus(@Nullable Output<String> loaStatus) {
            $.loaStatus = loaStatus;
            return this;
        }

        /**
         * @param loaStatus The state of LOA. Value:-**Applying**:LOA application.-**Accept**:LOA application passed.-**Available**:LOA is Available.-**Rejected**:LOA application Rejected.-**Completing**: The dedicated line is under construction.-**Complete**: The construction of the dedicated line is completed.-**Deleted**:LOA has been Deleted.
         * 
         * @return builder
         * 
         */
        public Builder loaStatus(String loaStatus) {
            return loaStatus(Output.of(loaStatus));
        }

        /**
         * @param orderMode The payment method of shared dedicated line. Value:
         * - **PayByPhysicalConnectionOwner**: indicates that the owner of the physical line associated with the shared line pays.
         * - **PayByVirtualPhysicalConnectionOwner**: indicates that the owner of the shared line pays.
         * 
         * @return builder
         * 
         */
        public Builder orderMode(@Nullable Output<String> orderMode) {
            $.orderMode = orderMode;
            return this;
        }

        /**
         * @param orderMode The payment method of shared dedicated line. Value:
         * - **PayByPhysicalConnectionOwner**: indicates that the owner of the physical line associated with the shared line pays.
         * - **PayByVirtualPhysicalConnectionOwner**: indicates that the owner of the shared line pays.
         * 
         * @return builder
         * 
         */
        public Builder orderMode(String orderMode) {
            return orderMode(Output.of(orderMode));
        }

        /**
         * @param parentPhysicalConnectionAliUid The ID of the Alibaba Cloud account (primary account) to which the physical connection belongs.
         * 
         * @return builder
         * 
         */
        public Builder parentPhysicalConnectionAliUid(@Nullable Output<String> parentPhysicalConnectionAliUid) {
            $.parentPhysicalConnectionAliUid = parentPhysicalConnectionAliUid;
            return this;
        }

        /**
         * @param parentPhysicalConnectionAliUid The ID of the Alibaba Cloud account (primary account) to which the physical connection belongs.
         * 
         * @return builder
         * 
         */
        public Builder parentPhysicalConnectionAliUid(String parentPhysicalConnectionAliUid) {
            return parentPhysicalConnectionAliUid(Output.of(parentPhysicalConnectionAliUid));
        }

        /**
         * @param parentPhysicalConnectionId The ID of the instance of the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder parentPhysicalConnectionId(@Nullable Output<String> parentPhysicalConnectionId) {
            $.parentPhysicalConnectionId = parentPhysicalConnectionId;
            return this;
        }

        /**
         * @param parentPhysicalConnectionId The ID of the instance of the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder parentPhysicalConnectionId(String parentPhysicalConnectionId) {
            return parentPhysicalConnectionId(Output.of(parentPhysicalConnectionId));
        }

        /**
         * @param peerLocation The geographic location of the local data center.
         * 
         * @return builder
         * 
         */
        public Builder peerLocation(@Nullable Output<String> peerLocation) {
            $.peerLocation = peerLocation;
            return this;
        }

        /**
         * @param peerLocation The geographic location of the local data center.
         * 
         * @return builder
         * 
         */
        public Builder peerLocation(String peerLocation) {
            return peerLocation(Output.of(peerLocation));
        }

        /**
         * @param portNumber The port number of the physical connection device.
         * 
         * @return builder
         * 
         */
        public Builder portNumber(@Nullable Output<String> portNumber) {
            $.portNumber = portNumber;
            return this;
        }

        /**
         * @param portNumber The port number of the physical connection device.
         * 
         * @return builder
         * 
         */
        public Builder portNumber(String portNumber) {
            return portNumber(Output.of(portNumber));
        }

        /**
         * @param portType Physical connection port type. Value:-**100Base-T**: 100 megabytes port.-**1000Base-T**: Gigabit port.-**1000Base-LX**: Gigabit single mode optical port (10km).-**10GBase-T**: 10 Gigabit port.-**10GBase-LR**: 10 Gigabit single mode optical port (10km).-**40GBase-LR**: 40 megabytes single-mode optical port.-**100GBase-LR**: 100,000 megabytes single-mode optical port.
         * 
         * @return builder
         * 
         */
        public Builder portType(@Nullable Output<String> portType) {
            $.portType = portType;
            return this;
        }

        /**
         * @param portType Physical connection port type. Value:-**100Base-T**: 100 megabytes port.-**1000Base-T**: Gigabit port.-**1000Base-LX**: Gigabit single mode optical port (10km).-**10GBase-T**: 10 Gigabit port.-**10GBase-LR**: 10 Gigabit single mode optical port (10km).-**40GBase-LR**: 40 megabytes single-mode optical port.-**100GBase-LR**: 100,000 megabytes single-mode optical port.
         * 
         * @return builder
         * 
         */
        public Builder portType(String portType) {
            return portType(Output.of(portType));
        }

        /**
         * @param redundantPhysicalConnectionId The ID of the redundant physical connection.
         * 
         * @return builder
         * 
         */
        public Builder redundantPhysicalConnectionId(@Nullable Output<String> redundantPhysicalConnectionId) {
            $.redundantPhysicalConnectionId = redundantPhysicalConnectionId;
            return this;
        }

        /**
         * @param redundantPhysicalConnectionId The ID of the redundant physical connection.
         * 
         * @return builder
         * 
         */
        public Builder redundantPhysicalConnectionId(String redundantPhysicalConnectionId) {
            return redundantPhysicalConnectionId(Output.of(redundantPhysicalConnectionId));
        }

        /**
         * @param resourceGroupId The resource group id.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The resource group id.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param spec The bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
         * 
         * @return builder
         * 
         */
        public Builder spec(@Nullable Output<String> spec) {
            $.spec = spec;
            return this;
        }

        /**
         * @param spec The bandwidth value of the shared line. Valid values: `50M`, `100M`, `200M`, `300M`, `400M`, `500M`, `1G`, `2G`, `5G`, `8G`, and `10G`. **Note**: By default, the values of 2G, 5G, 8G, and 10G are unavailable. If you want to specify these values, contact your customer manager. Unit: **M** indicates Mbps, **G** indicates Gbps.
         * 
         * @return builder
         * 
         */
        public Builder spec(String spec) {
            return spec(Output.of(spec));
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param virtualPhysicalConnectionName The name of the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder virtualPhysicalConnectionName(@Nullable Output<String> virtualPhysicalConnectionName) {
            $.virtualPhysicalConnectionName = virtualPhysicalConnectionName;
            return this;
        }

        /**
         * @param virtualPhysicalConnectionName The name of the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder virtualPhysicalConnectionName(String virtualPhysicalConnectionName) {
            return virtualPhysicalConnectionName(Output.of(virtualPhysicalConnectionName));
        }

        /**
         * @param virtualPhysicalConnectionStatus The business status of the shared line. Value:-**Confirmed**: The shared line has been Confirmed to receive.-**UnConfirmed**: The shared line has not been confirmed to be received.-**Deleted**: The shared line has been Deleted.
         * 
         * @return builder
         * 
         */
        public Builder virtualPhysicalConnectionStatus(@Nullable Output<String> virtualPhysicalConnectionStatus) {
            $.virtualPhysicalConnectionStatus = virtualPhysicalConnectionStatus;
            return this;
        }

        /**
         * @param virtualPhysicalConnectionStatus The business status of the shared line. Value:-**Confirmed**: The shared line has been Confirmed to receive.-**UnConfirmed**: The shared line has not been confirmed to be received.-**Deleted**: The shared line has been Deleted.
         * 
         * @return builder
         * 
         */
        public Builder virtualPhysicalConnectionStatus(String virtualPhysicalConnectionStatus) {
            return virtualPhysicalConnectionStatus(Output.of(virtualPhysicalConnectionStatus));
        }

        /**
         * @param vlanId The VLAN ID of the shared leased line. Valid values: `0` to `2999`.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(@Nullable Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId The VLAN ID of the shared leased line. Valid values: `0` to `2999`.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        /**
         * @param vpconnAliUid The ID of the Alibaba Cloud account (primary account) of the owner of the shared line.
         * 
         * @return builder
         * 
         */
        public Builder vpconnAliUid(@Nullable Output<String> vpconnAliUid) {
            $.vpconnAliUid = vpconnAliUid;
            return this;
        }

        /**
         * @param vpconnAliUid The ID of the Alibaba Cloud account (primary account) of the owner of the shared line.
         * 
         * @return builder
         * 
         */
        public Builder vpconnAliUid(String vpconnAliUid) {
            return vpconnAliUid(Output.of(vpconnAliUid));
        }

        public VirtualPhysicalConnectionState build() {
            return $;
        }
    }

}
