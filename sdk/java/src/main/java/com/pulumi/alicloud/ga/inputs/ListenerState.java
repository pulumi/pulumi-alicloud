// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ga.inputs;

import com.pulumi.alicloud.ga.inputs.ListenerCertificateArgs;
import com.pulumi.alicloud.ga.inputs.ListenerForwardedForConfigArgs;
import com.pulumi.alicloud.ga.inputs.ListenerPortRangeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerState extends com.pulumi.resources.ResourceArgs {

    public static final ListenerState Empty = new ListenerState();

    /**
     * The accelerator id.
     * 
     */
    @Import(name="acceleratorId")
    private @Nullable Output<String> acceleratorId;

    /**
     * @return The accelerator id.
     * 
     */
    public Optional<Output<String>> acceleratorId() {
        return Optional.ofNullable(this.acceleratorId);
    }

    /**
     * The certificates of the listener. See `certificates` below.
     * &gt; **NOTE:** This parameter needs to be configured only for monitoring of the `HTTPS` protocol.
     * 
     */
    @Import(name="certificates")
    private @Nullable Output<List<ListenerCertificateArgs>> certificates;

    /**
     * @return The certificates of the listener. See `certificates` below.
     * &gt; **NOTE:** This parameter needs to be configured only for monitoring of the `HTTPS` protocol.
     * 
     */
    public Optional<Output<List<ListenerCertificateArgs>>> certificates() {
        return Optional.ofNullable(this.certificates);
    }

    /**
     * The clientAffinity of the listener. Default value: `NONE`. Valid values:
     * 
     */
    @Import(name="clientAffinity")
    private @Nullable Output<String> clientAffinity;

    /**
     * @return The clientAffinity of the listener. Default value: `NONE`. Valid values:
     * 
     */
    public Optional<Output<String>> clientAffinity() {
        return Optional.ofNullable(this.clientAffinity);
    }

    /**
     * The description of the listener.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the listener.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The XForward headers. See `forwarded_for_config` below.
     * 
     */
    @Import(name="forwardedForConfig")
    private @Nullable Output<ListenerForwardedForConfigArgs> forwardedForConfig;

    /**
     * @return The XForward headers. See `forwarded_for_config` below.
     * 
     */
    public Optional<Output<ListenerForwardedForConfigArgs>> forwardedForConfig() {
        return Optional.ofNullable(this.forwardedForConfig);
    }

    /**
     * The routing type of the listener. Default Value: `Standard`. Valid values:
     * 
     */
    @Import(name="listenerType")
    private @Nullable Output<String> listenerType;

    /**
     * @return The routing type of the listener. Default Value: `Standard`. Valid values:
     * 
     */
    public Optional<Output<String>> listenerType() {
        return Optional.ofNullable(this.listenerType);
    }

    /**
     * The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The portRanges of the listener. See `port_ranges` below.
     * &gt; **NOTE:** For `HTTP` or `HTTPS` protocol monitoring, only one monitoring port can be configured, that is, the start monitoring port and end monitoring port should be the same.
     * 
     */
    @Import(name="portRanges")
    private @Nullable Output<List<ListenerPortRangeArgs>> portRanges;

    /**
     * @return The portRanges of the listener. See `port_ranges` below.
     * &gt; **NOTE:** For `HTTP` or `HTTPS` protocol monitoring, only one monitoring port can be configured, that is, the start monitoring port and end monitoring port should be the same.
     * 
     */
    public Optional<Output<List<ListenerPortRangeArgs>>> portRanges() {
        return Optional.ofNullable(this.portRanges);
    }

    /**
     * Type of network transport protocol monitored. Default value: `TCP`. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Type of network transport protocol monitored. Default value: `TCP`. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The proxy protocol of the listener. Default value: `false`. Valid values:
     * 
     */
    @Import(name="proxyProtocol")
    private @Nullable Output<Boolean> proxyProtocol;

    /**
     * @return The proxy protocol of the listener. Default value: `false`. Valid values:
     * 
     */
    public Optional<Output<Boolean>> proxyProtocol() {
        return Optional.ofNullable(this.proxyProtocol);
    }

    /**
     * The ID of the security policy. **NOTE:** Only `HTTPS` listeners support this parameter. Valid values:
     * 
     */
    @Import(name="securityPolicyId")
    private @Nullable Output<String> securityPolicyId;

    /**
     * @return The ID of the security policy. **NOTE:** Only `HTTPS` listeners support this parameter. Valid values:
     * 
     */
    public Optional<Output<String>> securityPolicyId() {
        return Optional.ofNullable(this.securityPolicyId);
    }

    /**
     * The status of the listener.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the listener.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ListenerState() {}

    private ListenerState(ListenerState $) {
        this.acceleratorId = $.acceleratorId;
        this.certificates = $.certificates;
        this.clientAffinity = $.clientAffinity;
        this.description = $.description;
        this.forwardedForConfig = $.forwardedForConfig;
        this.listenerType = $.listenerType;
        this.name = $.name;
        this.portRanges = $.portRanges;
        this.protocol = $.protocol;
        this.proxyProtocol = $.proxyProtocol;
        this.securityPolicyId = $.securityPolicyId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerState $;

        public Builder() {
            $ = new ListenerState();
        }

        public Builder(ListenerState defaults) {
            $ = new ListenerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceleratorId The accelerator id.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorId(@Nullable Output<String> acceleratorId) {
            $.acceleratorId = acceleratorId;
            return this;
        }

        /**
         * @param acceleratorId The accelerator id.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorId(String acceleratorId) {
            return acceleratorId(Output.of(acceleratorId));
        }

        /**
         * @param certificates The certificates of the listener. See `certificates` below.
         * &gt; **NOTE:** This parameter needs to be configured only for monitoring of the `HTTPS` protocol.
         * 
         * @return builder
         * 
         */
        public Builder certificates(@Nullable Output<List<ListenerCertificateArgs>> certificates) {
            $.certificates = certificates;
            return this;
        }

        /**
         * @param certificates The certificates of the listener. See `certificates` below.
         * &gt; **NOTE:** This parameter needs to be configured only for monitoring of the `HTTPS` protocol.
         * 
         * @return builder
         * 
         */
        public Builder certificates(List<ListenerCertificateArgs> certificates) {
            return certificates(Output.of(certificates));
        }

        /**
         * @param certificates The certificates of the listener. See `certificates` below.
         * &gt; **NOTE:** This parameter needs to be configured only for monitoring of the `HTTPS` protocol.
         * 
         * @return builder
         * 
         */
        public Builder certificates(ListenerCertificateArgs... certificates) {
            return certificates(List.of(certificates));
        }

        /**
         * @param clientAffinity The clientAffinity of the listener. Default value: `NONE`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder clientAffinity(@Nullable Output<String> clientAffinity) {
            $.clientAffinity = clientAffinity;
            return this;
        }

        /**
         * @param clientAffinity The clientAffinity of the listener. Default value: `NONE`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder clientAffinity(String clientAffinity) {
            return clientAffinity(Output.of(clientAffinity));
        }

        /**
         * @param description The description of the listener.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the listener.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param forwardedForConfig The XForward headers. See `forwarded_for_config` below.
         * 
         * @return builder
         * 
         */
        public Builder forwardedForConfig(@Nullable Output<ListenerForwardedForConfigArgs> forwardedForConfig) {
            $.forwardedForConfig = forwardedForConfig;
            return this;
        }

        /**
         * @param forwardedForConfig The XForward headers. See `forwarded_for_config` below.
         * 
         * @return builder
         * 
         */
        public Builder forwardedForConfig(ListenerForwardedForConfigArgs forwardedForConfig) {
            return forwardedForConfig(Output.of(forwardedForConfig));
        }

        /**
         * @param listenerType The routing type of the listener. Default Value: `Standard`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder listenerType(@Nullable Output<String> listenerType) {
            $.listenerType = listenerType;
            return this;
        }

        /**
         * @param listenerType The routing type of the listener. Default Value: `Standard`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder listenerType(String listenerType) {
            return listenerType(Output.of(listenerType));
        }

        /**
         * @param name The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param portRanges The portRanges of the listener. See `port_ranges` below.
         * &gt; **NOTE:** For `HTTP` or `HTTPS` protocol monitoring, only one monitoring port can be configured, that is, the start monitoring port and end monitoring port should be the same.
         * 
         * @return builder
         * 
         */
        public Builder portRanges(@Nullable Output<List<ListenerPortRangeArgs>> portRanges) {
            $.portRanges = portRanges;
            return this;
        }

        /**
         * @param portRanges The portRanges of the listener. See `port_ranges` below.
         * &gt; **NOTE:** For `HTTP` or `HTTPS` protocol monitoring, only one monitoring port can be configured, that is, the start monitoring port and end monitoring port should be the same.
         * 
         * @return builder
         * 
         */
        public Builder portRanges(List<ListenerPortRangeArgs> portRanges) {
            return portRanges(Output.of(portRanges));
        }

        /**
         * @param portRanges The portRanges of the listener. See `port_ranges` below.
         * &gt; **NOTE:** For `HTTP` or `HTTPS` protocol monitoring, only one monitoring port can be configured, that is, the start monitoring port and end monitoring port should be the same.
         * 
         * @return builder
         * 
         */
        public Builder portRanges(ListenerPortRangeArgs... portRanges) {
            return portRanges(List.of(portRanges));
        }

        /**
         * @param protocol Type of network transport protocol monitored. Default value: `TCP`. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Type of network transport protocol monitored. Default value: `TCP`. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param proxyProtocol The proxy protocol of the listener. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocol(@Nullable Output<Boolean> proxyProtocol) {
            $.proxyProtocol = proxyProtocol;
            return this;
        }

        /**
         * @param proxyProtocol The proxy protocol of the listener. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocol(Boolean proxyProtocol) {
            return proxyProtocol(Output.of(proxyProtocol));
        }

        /**
         * @param securityPolicyId The ID of the security policy. **NOTE:** Only `HTTPS` listeners support this parameter. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(@Nullable Output<String> securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        /**
         * @param securityPolicyId The ID of the security policy. **NOTE:** Only `HTTPS` listeners support this parameter. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(String securityPolicyId) {
            return securityPolicyId(Output.of(securityPolicyId));
        }

        /**
         * @param status The status of the listener.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the listener.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ListenerState build() {
            return $;
        }
    }

}
