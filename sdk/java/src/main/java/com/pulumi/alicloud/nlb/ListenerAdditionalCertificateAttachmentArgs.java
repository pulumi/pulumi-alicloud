// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerAdditionalCertificateAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListenerAdditionalCertificateAttachmentArgs Empty = new ListenerAdditionalCertificateAttachmentArgs();

    /**
     * The ID of additional certificates.
     * 
     */
    @Import(name="certificateId", required=true)
    private Output<String> certificateId;

    /**
     * @return The ID of additional certificates.
     * 
     */
    public Output<String> certificateId() {
        return this.certificateId;
    }

    /**
     * Specifies whether to perform a dry run, without performing the actual request. Valid values:
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Specifies whether to perform a dry run, without performing the actual request. Valid values:
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The listener ID. You must specify the ID of a listener that uses SSL over TCP.
     * 
     */
    @Import(name="listenerId", required=true)
    private Output<String> listenerId;

    /**
     * @return The listener ID. You must specify the ID of a listener that uses SSL over TCP.
     * 
     */
    public Output<String> listenerId() {
        return this.listenerId;
    }

    private ListenerAdditionalCertificateAttachmentArgs() {}

    private ListenerAdditionalCertificateAttachmentArgs(ListenerAdditionalCertificateAttachmentArgs $) {
        this.certificateId = $.certificateId;
        this.dryRun = $.dryRun;
        this.listenerId = $.listenerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerAdditionalCertificateAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerAdditionalCertificateAttachmentArgs $;

        public Builder() {
            $ = new ListenerAdditionalCertificateAttachmentArgs();
        }

        public Builder(ListenerAdditionalCertificateAttachmentArgs defaults) {
            $ = new ListenerAdditionalCertificateAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId The ID of additional certificates.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId The ID of additional certificates.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param dryRun Specifies whether to perform a dry run, without performing the actual request. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Specifies whether to perform a dry run, without performing the actual request. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param listenerId The listener ID. You must specify the ID of a listener that uses SSL over TCP.
         * 
         * @return builder
         * 
         */
        public Builder listenerId(Output<String> listenerId) {
            $.listenerId = listenerId;
            return this;
        }

        /**
         * @param listenerId The listener ID. You must specify the ID of a listener that uses SSL over TCP.
         * 
         * @return builder
         * 
         */
        public Builder listenerId(String listenerId) {
            return listenerId(Output.of(listenerId));
        }

        public ListenerAdditionalCertificateAttachmentArgs build() {
            if ($.certificateId == null) {
                throw new MissingRequiredPropertyException("ListenerAdditionalCertificateAttachmentArgs", "certificateId");
            }
            if ($.listenerId == null) {
                throw new MissingRequiredPropertyException("ListenerAdditionalCertificateAttachmentArgs", "listenerId");
            }
            return $;
        }
    }

}
