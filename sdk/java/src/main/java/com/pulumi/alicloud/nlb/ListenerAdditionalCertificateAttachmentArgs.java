// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerAdditionalCertificateAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListenerAdditionalCertificateAttachmentArgs Empty = new ListenerAdditionalCertificateAttachmentArgs();

    /**
     * Certificate ID. Currently, only server certificates are supported.
     * 
     */
    @Import(name="certificateId", required=true)
    private Output<String> certificateId;

    /**
     * @return Certificate ID. Currently, only server certificates are supported.
     * 
     */
    public Output<String> certificateId() {
        return this.certificateId;
    }

    /**
     * Whether to PreCheck only this request, value: - **true**: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code &#39;DryRunOperation&#39; is returned &#39;. - **false** (default): Sends a normal request, returns the HTTP 2xx status code after the check, and directly performs the operation.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Whether to PreCheck only this request, value: - **true**: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code &#39;DryRunOperation&#39; is returned &#39;. - **false** (default): Sends a normal request, returns the HTTP 2xx status code after the check, and directly performs the operation.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The ID of the tcpssl listener.
     * 
     */
    @Import(name="listenerId", required=true)
    private Output<String> listenerId;

    /**
     * @return The ID of the tcpssl listener.
     * 
     */
    public Output<String> listenerId() {
        return this.listenerId;
    }

    private ListenerAdditionalCertificateAttachmentArgs() {}

    private ListenerAdditionalCertificateAttachmentArgs(ListenerAdditionalCertificateAttachmentArgs $) {
        this.certificateId = $.certificateId;
        this.dryRun = $.dryRun;
        this.listenerId = $.listenerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerAdditionalCertificateAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerAdditionalCertificateAttachmentArgs $;

        public Builder() {
            $ = new ListenerAdditionalCertificateAttachmentArgs();
        }

        public Builder(ListenerAdditionalCertificateAttachmentArgs defaults) {
            $ = new ListenerAdditionalCertificateAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId Certificate ID. Currently, only server certificates are supported.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId Certificate ID. Currently, only server certificates are supported.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param dryRun Whether to PreCheck only this request, value: - **true**: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code &#39;DryRunOperation&#39; is returned &#39;. - **false** (default): Sends a normal request, returns the HTTP 2xx status code after the check, and directly performs the operation.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Whether to PreCheck only this request, value: - **true**: sends a check request and does not create a resource. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code &#39;DryRunOperation&#39; is returned &#39;. - **false** (default): Sends a normal request, returns the HTTP 2xx status code after the check, and directly performs the operation.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param listenerId The ID of the tcpssl listener.
         * 
         * @return builder
         * 
         */
        public Builder listenerId(Output<String> listenerId) {
            $.listenerId = listenerId;
            return this;
        }

        /**
         * @param listenerId The ID of the tcpssl listener.
         * 
         * @return builder
         * 
         */
        public Builder listenerId(String listenerId) {
            return listenerId(Output.of(listenerId));
        }

        public ListenerAdditionalCertificateAttachmentArgs build() {
            if ($.certificateId == null) {
                throw new MissingRequiredPropertyException("ListenerAdditionalCertificateAttachmentArgs", "certificateId");
            }
            if ($.listenerId == null) {
                throw new MissingRequiredPropertyException("ListenerAdditionalCertificateAttachmentArgs", "listenerId");
            }
            return $;
        }
    }

}
