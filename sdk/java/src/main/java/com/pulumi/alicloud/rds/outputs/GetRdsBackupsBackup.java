// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRdsBackupsBackup {
    /**
     * @return The backup download url.
     * 
     */
    private String backupDownloadUrl;
    /**
     * @return BackupEndTime.
     * 
     */
    private String backupEndTime;
    /**
     * @return BackupId.
     * 
     */
    private String backupId;
    /**
     * @return The initiator of the backup task. Value:
     * * **System**: automatically initiated by the System
     * * **User**: manually initiated by the User.
     * 
     */
    private String backupInitiator;
    /**
     * @return The backup intranet download url.
     * 
     */
    private String backupIntranetDownloadUrl;
    /**
     * @return BackupMethod.
     * 
     */
    private String backupMethod;
    /**
     * @return BackupMode.
     * 
     */
    private String backupMode;
    /**
     * @return BackupSize.
     * 
     */
    private String backupSize;
    /**
     * @return BackupStartTime.
     * 
     */
    private String backupStartTime;
    /**
     * @return Backup task status. **NOTE:** This parameter will only be returned when a task is executed. Value:
     * * **NoStart**: Not started
     * * **Checking**: check the backup
     * * **Preparing**: Prepare a backup
     * * **Waiting**: Waiting for backup
     * * **Uploading**: Upload backup
     * * **Finished**: Complete backup
     * * **Failed**: backup Failed
     * 
     */
    private String backupStatus;
    /**
     * @return BackupType.
     * 
     */
    private String backupType;
    /**
     * @return The consistency point of the backup set. The return value is a timestamp. **NOTE:** only MySQL 5.6 returns this parameter, and other versions return 0.
     * 
     */
    private String consistentTime;
    /**
     * @return The backup mode is divided into the normal backup mode (full and incremental recovery is supported) and the replication-only mode (full recovery is supported only). **NOTE:** Only SQL Server returns this parameter. Valid values:
     * * **0**: General Backup Mode
     * * **1**: Copy only mode
     * 
     */
    private String copyOnlyBackup;
    /**
     * @return The db instance id.
     * 
     */
    private String dbInstanceId;
    /**
     * @return The encrypted information of the backup set.
     * 
     */
    private String encryption;
    /**
     * @return HostInstanceID.
     * 
     */
    private String hostInstanceId;
    /**
     * @return The ID of the Backup.
     * 
     */
    private String id;
    /**
     * @return Whether the backup set is available, the value is:
     * * **0**: Not available
     * * **1**: Available.
     * 
     */
    private Integer isAvail;
    /**
     * @return The backup set status of the database table. **NOTE:** an empty string indicates that the backup set for database table recovery is not enabled. Valid values:
     * * **OK**: normal.
     * * **LARGE**: There are too many tables that cannot be used for database and table recovery.
     * * **EMPTY**: The backup set that failed to be backed up.
     * 
     */
    private String metaStatus;
    /**
     * @return The storage medium for the backup set. Valid values:
     * * **0**: Regular storage
     * * **1**: Archive storage.
     * 
     */
    private String storageClass;
    /**
     * @return StoreStatus.
     * 
     */
    private String storeStatus;

    private GetRdsBackupsBackup() {}
    /**
     * @return The backup download url.
     * 
     */
    public String backupDownloadUrl() {
        return this.backupDownloadUrl;
    }
    /**
     * @return BackupEndTime.
     * 
     */
    public String backupEndTime() {
        return this.backupEndTime;
    }
    /**
     * @return BackupId.
     * 
     */
    public String backupId() {
        return this.backupId;
    }
    /**
     * @return The initiator of the backup task. Value:
     * * **System**: automatically initiated by the System
     * * **User**: manually initiated by the User.
     * 
     */
    public String backupInitiator() {
        return this.backupInitiator;
    }
    /**
     * @return The backup intranet download url.
     * 
     */
    public String backupIntranetDownloadUrl() {
        return this.backupIntranetDownloadUrl;
    }
    /**
     * @return BackupMethod.
     * 
     */
    public String backupMethod() {
        return this.backupMethod;
    }
    /**
     * @return BackupMode.
     * 
     */
    public String backupMode() {
        return this.backupMode;
    }
    /**
     * @return BackupSize.
     * 
     */
    public String backupSize() {
        return this.backupSize;
    }
    /**
     * @return BackupStartTime.
     * 
     */
    public String backupStartTime() {
        return this.backupStartTime;
    }
    /**
     * @return Backup task status. **NOTE:** This parameter will only be returned when a task is executed. Value:
     * * **NoStart**: Not started
     * * **Checking**: check the backup
     * * **Preparing**: Prepare a backup
     * * **Waiting**: Waiting for backup
     * * **Uploading**: Upload backup
     * * **Finished**: Complete backup
     * * **Failed**: backup Failed
     * 
     */
    public String backupStatus() {
        return this.backupStatus;
    }
    /**
     * @return BackupType.
     * 
     */
    public String backupType() {
        return this.backupType;
    }
    /**
     * @return The consistency point of the backup set. The return value is a timestamp. **NOTE:** only MySQL 5.6 returns this parameter, and other versions return 0.
     * 
     */
    public String consistentTime() {
        return this.consistentTime;
    }
    /**
     * @return The backup mode is divided into the normal backup mode (full and incremental recovery is supported) and the replication-only mode (full recovery is supported only). **NOTE:** Only SQL Server returns this parameter. Valid values:
     * * **0**: General Backup Mode
     * * **1**: Copy only mode
     * 
     */
    public String copyOnlyBackup() {
        return this.copyOnlyBackup;
    }
    /**
     * @return The db instance id.
     * 
     */
    public String dbInstanceId() {
        return this.dbInstanceId;
    }
    /**
     * @return The encrypted information of the backup set.
     * 
     */
    public String encryption() {
        return this.encryption;
    }
    /**
     * @return HostInstanceID.
     * 
     */
    public String hostInstanceId() {
        return this.hostInstanceId;
    }
    /**
     * @return The ID of the Backup.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the backup set is available, the value is:
     * * **0**: Not available
     * * **1**: Available.
     * 
     */
    public Integer isAvail() {
        return this.isAvail;
    }
    /**
     * @return The backup set status of the database table. **NOTE:** an empty string indicates that the backup set for database table recovery is not enabled. Valid values:
     * * **OK**: normal.
     * * **LARGE**: There are too many tables that cannot be used for database and table recovery.
     * * **EMPTY**: The backup set that failed to be backed up.
     * 
     */
    public String metaStatus() {
        return this.metaStatus;
    }
    /**
     * @return The storage medium for the backup set. Valid values:
     * * **0**: Regular storage
     * * **1**: Archive storage.
     * 
     */
    public String storageClass() {
        return this.storageClass;
    }
    /**
     * @return StoreStatus.
     * 
     */
    public String storeStatus() {
        return this.storeStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRdsBackupsBackup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupDownloadUrl;
        private String backupEndTime;
        private String backupId;
        private String backupInitiator;
        private String backupIntranetDownloadUrl;
        private String backupMethod;
        private String backupMode;
        private String backupSize;
        private String backupStartTime;
        private String backupStatus;
        private String backupType;
        private String consistentTime;
        private String copyOnlyBackup;
        private String dbInstanceId;
        private String encryption;
        private String hostInstanceId;
        private String id;
        private Integer isAvail;
        private String metaStatus;
        private String storageClass;
        private String storeStatus;
        public Builder() {}
        public Builder(GetRdsBackupsBackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupDownloadUrl = defaults.backupDownloadUrl;
    	      this.backupEndTime = defaults.backupEndTime;
    	      this.backupId = defaults.backupId;
    	      this.backupInitiator = defaults.backupInitiator;
    	      this.backupIntranetDownloadUrl = defaults.backupIntranetDownloadUrl;
    	      this.backupMethod = defaults.backupMethod;
    	      this.backupMode = defaults.backupMode;
    	      this.backupSize = defaults.backupSize;
    	      this.backupStartTime = defaults.backupStartTime;
    	      this.backupStatus = defaults.backupStatus;
    	      this.backupType = defaults.backupType;
    	      this.consistentTime = defaults.consistentTime;
    	      this.copyOnlyBackup = defaults.copyOnlyBackup;
    	      this.dbInstanceId = defaults.dbInstanceId;
    	      this.encryption = defaults.encryption;
    	      this.hostInstanceId = defaults.hostInstanceId;
    	      this.id = defaults.id;
    	      this.isAvail = defaults.isAvail;
    	      this.metaStatus = defaults.metaStatus;
    	      this.storageClass = defaults.storageClass;
    	      this.storeStatus = defaults.storeStatus;
        }

        @CustomType.Setter
        public Builder backupDownloadUrl(String backupDownloadUrl) {
            this.backupDownloadUrl = Objects.requireNonNull(backupDownloadUrl);
            return this;
        }
        @CustomType.Setter
        public Builder backupEndTime(String backupEndTime) {
            this.backupEndTime = Objects.requireNonNull(backupEndTime);
            return this;
        }
        @CustomType.Setter
        public Builder backupId(String backupId) {
            this.backupId = Objects.requireNonNull(backupId);
            return this;
        }
        @CustomType.Setter
        public Builder backupInitiator(String backupInitiator) {
            this.backupInitiator = Objects.requireNonNull(backupInitiator);
            return this;
        }
        @CustomType.Setter
        public Builder backupIntranetDownloadUrl(String backupIntranetDownloadUrl) {
            this.backupIntranetDownloadUrl = Objects.requireNonNull(backupIntranetDownloadUrl);
            return this;
        }
        @CustomType.Setter
        public Builder backupMethod(String backupMethod) {
            this.backupMethod = Objects.requireNonNull(backupMethod);
            return this;
        }
        @CustomType.Setter
        public Builder backupMode(String backupMode) {
            this.backupMode = Objects.requireNonNull(backupMode);
            return this;
        }
        @CustomType.Setter
        public Builder backupSize(String backupSize) {
            this.backupSize = Objects.requireNonNull(backupSize);
            return this;
        }
        @CustomType.Setter
        public Builder backupStartTime(String backupStartTime) {
            this.backupStartTime = Objects.requireNonNull(backupStartTime);
            return this;
        }
        @CustomType.Setter
        public Builder backupStatus(String backupStatus) {
            this.backupStatus = Objects.requireNonNull(backupStatus);
            return this;
        }
        @CustomType.Setter
        public Builder backupType(String backupType) {
            this.backupType = Objects.requireNonNull(backupType);
            return this;
        }
        @CustomType.Setter
        public Builder consistentTime(String consistentTime) {
            this.consistentTime = Objects.requireNonNull(consistentTime);
            return this;
        }
        @CustomType.Setter
        public Builder copyOnlyBackup(String copyOnlyBackup) {
            this.copyOnlyBackup = Objects.requireNonNull(copyOnlyBackup);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceId(String dbInstanceId) {
            this.dbInstanceId = Objects.requireNonNull(dbInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder encryption(String encryption) {
            this.encryption = Objects.requireNonNull(encryption);
            return this;
        }
        @CustomType.Setter
        public Builder hostInstanceId(String hostInstanceId) {
            this.hostInstanceId = Objects.requireNonNull(hostInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isAvail(Integer isAvail) {
            this.isAvail = Objects.requireNonNull(isAvail);
            return this;
        }
        @CustomType.Setter
        public Builder metaStatus(String metaStatus) {
            this.metaStatus = Objects.requireNonNull(metaStatus);
            return this;
        }
        @CustomType.Setter
        public Builder storageClass(String storageClass) {
            this.storageClass = Objects.requireNonNull(storageClass);
            return this;
        }
        @CustomType.Setter
        public Builder storeStatus(String storeStatus) {
            this.storeStatus = Objects.requireNonNull(storeStatus);
            return this;
        }
        public GetRdsBackupsBackup build() {
            final var o = new GetRdsBackupsBackup();
            o.backupDownloadUrl = backupDownloadUrl;
            o.backupEndTime = backupEndTime;
            o.backupId = backupId;
            o.backupInitiator = backupInitiator;
            o.backupIntranetDownloadUrl = backupIntranetDownloadUrl;
            o.backupMethod = backupMethod;
            o.backupMode = backupMode;
            o.backupSize = backupSize;
            o.backupStartTime = backupStartTime;
            o.backupStatus = backupStatus;
            o.backupType = backupType;
            o.consistentTime = consistentTime;
            o.copyOnlyBackup = copyOnlyBackup;
            o.dbInstanceId = dbInstanceId;
            o.encryption = encryption;
            o.hostInstanceId = hostInstanceId;
            o.id = id;
            o.isAvail = isAvail;
            o.metaStatus = metaStatus;
            o.storageClass = storageClass;
            o.storeStatus = storeStatus;
            return o;
        }
    }
}
