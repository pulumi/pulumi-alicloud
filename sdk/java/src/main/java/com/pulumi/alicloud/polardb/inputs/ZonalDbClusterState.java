// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.polardb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZonalDbClusterState extends com.pulumi.resources.ResourceArgs {

    public static final ZonalDbClusterState Empty = new ZonalDbClusterState();

    /**
     * Auto-renewal period of an cluster, in the unit of the month. It is valid when payType is `PrePaid`. Valid value:1, 2, 3, 6, 12, 24, 36, Default to 1.
     * 
     */
    @Import(name="autoRenewPeriod")
    private @Nullable Output<Integer> autoRenewPeriod;

    /**
     * @return Auto-renewal period of an cluster, in the unit of the month. It is valid when payType is `PrePaid`. Valid value:1, 2, 3, 6, 12, 24, 36, Default to 1.
     * 
     */
    public Optional<Output<Integer>> autoRenewPeriod() {
        return Optional.ofNullable(this.autoRenewPeriod);
    }

    /**
     * PolarDB zonal cluster latest version.
     * 
     */
    @Import(name="clusterLatestVersion")
    private @Nullable Output<String> clusterLatestVersion;

    /**
     * @return PolarDB zonal cluster latest version.
     * 
     */
    public Optional<Output<String>> clusterLatestVersion() {
        return Optional.ofNullable(this.clusterLatestVersion);
    }

    /**
     * current DB Cluster revision Version.
     * 
     */
    @Import(name="clusterVersion")
    private @Nullable Output<String> clusterVersion;

    /**
     * @return current DB Cluster revision Version.
     * 
     */
    public Optional<Output<String>> clusterVersion() {
        return Optional.ofNullable(this.clusterVersion);
    }

    /**
     * PolarDB zonal cluster creation time.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return PolarDB zonal cluster creation time.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The edition of the PolarDB service. Valid values are `SENormal`.
     * 
     */
    @Import(name="creationCategory")
    private @Nullable Output<String> creationCategory;

    /**
     * @return The edition of the PolarDB service. Valid values are `SENormal`.
     * 
     */
    public Optional<Output<String>> creationCategory() {
        return Optional.ofNullable(this.creationCategory);
    }

    /**
     * Cache of the relationship between node key and node ID for PolarDB zonal Cluster
     * 
     */
    @Import(name="dbClusterNodesAttributes")
    private @Nullable Output<Map<String,String>> dbClusterNodesAttributes;

    /**
     * @return Cache of the relationship between node key and node ID for PolarDB zonal Cluster
     * 
     */
    public Optional<Output<Map<String,String>>> dbClusterNodesAttributes() {
        return Optional.ofNullable(this.dbClusterNodesAttributes);
    }

    /**
     * Map of node needs to be created after DB cluster was launched.
     * 
     */
    @Import(name="dbClusterNodesConfigs")
    private @Nullable Output<Map<String,String>> dbClusterNodesConfigs;

    /**
     * @return Map of node needs to be created after DB cluster was launched.
     * 
     */
    public Optional<Output<Map<String,String>>> dbClusterNodesConfigs() {
        return Optional.ofNullable(this.dbClusterNodesConfigs);
    }

    /**
     * Cache of node ID for PolarDB zonal Cluster
     * 
     */
    @Import(name="dbClusterNodesIds")
    private @Nullable Output<Map<String,String>> dbClusterNodesIds;

    /**
     * @return Cache of node ID for PolarDB zonal Cluster
     * 
     */
    public Optional<Output<Map<String,String>>> dbClusterNodesIds() {
        return Optional.ofNullable(this.dbClusterNodesIds);
    }

    /**
     * Database minor version. Value options can refer to the latest docs [CreateDBCluster](https://www.alibabacloud.com/help/en/polardb/latest/createdbcluster-1) `DBMinorVersion`. This parameter takes effect only when `dbType` is MySQL and `dbVersion` is 8.0.
     * 
     */
    @Import(name="dbMinorVersion")
    private @Nullable Output<String> dbMinorVersion;

    /**
     * @return Database minor version. Value options can refer to the latest docs [CreateDBCluster](https://www.alibabacloud.com/help/en/polardb/latest/createdbcluster-1) `DBMinorVersion`. This parameter takes effect only when `dbType` is MySQL and `dbVersion` is 8.0.
     * 
     */
    public Optional<Output<String>> dbMinorVersion() {
        return Optional.ofNullable(this.dbMinorVersion);
    }

    /**
     * The dbNodeClass of cluster node.Only effective when the cluster is created for the first time. After the cluster is started, the cluster specification is maintained through the node class.
     * 
     */
    @Import(name="dbNodeClass")
    private @Nullable Output<String> dbNodeClass;

    /**
     * @return The dbNodeClass of cluster node.Only effective when the cluster is created for the first time. After the cluster is started, the cluster specification is maintained through the node class.
     * 
     */
    public Optional<Output<String>> dbNodeClass() {
        return Optional.ofNullable(this.dbNodeClass);
    }

    /**
     * Database type. Value options: MySQL, Oracle, PostgreSQL.
     * 
     */
    @Import(name="dbType")
    private @Nullable Output<String> dbType;

    /**
     * @return Database type. Value options: MySQL, Oracle, PostgreSQL.
     * 
     */
    public Optional<Output<String>> dbType() {
        return Optional.ofNullable(this.dbType);
    }

    /**
     * Database version. Value options can refer to the latest docs [CreateDBCluster](https://www.alibabacloud.com/help/en/polardb/latest/createdbcluster-1) `DBVersion`.
     * 
     */
    @Import(name="dbVersion")
    private @Nullable Output<String> dbVersion;

    /**
     * @return Database version. Value options can refer to the latest docs [CreateDBCluster](https://www.alibabacloud.com/help/en/polardb/latest/createdbcluster-1) `DBVersion`.
     * 
     */
    public Optional<Output<String>> dbVersion() {
        return Optional.ofNullable(this.dbVersion);
    }

    /**
     * The description of cluster.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of cluster.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Zone to launch the DB cluster.
     * 
     */
    @Import(name="ensRegionId")
    private @Nullable Output<String> ensRegionId;

    /**
     * @return The Zone to launch the DB cluster.
     * 
     */
    public Optional<Output<String>> ensRegionId() {
        return Optional.ofNullable(this.ensRegionId);
    }

    /**
     * Valid values are `PrePaid`, `PostPaid`, Default to `PostPaid`.
     * 
     */
    @Import(name="payType")
    private @Nullable Output<String> payType;

    /**
     * @return Valid values are `PrePaid`, `PostPaid`, Default to `PostPaid`.
     * 
     */
    public Optional<Output<String>> payType() {
        return Optional.ofNullable(this.payType);
    }

    /**
     * PolarDB zonal cluster region
     * 
     */
    @Import(name="regionId")
    private @Nullable Output<String> regionId;

    /**
     * @return PolarDB zonal cluster region
     * 
     */
    public Optional<Output<String>> regionId() {
        return Optional.ofNullable(this.regionId);
    }

    /**
     * Valid values are `AutoRenewal`, `Normal`, `NotRenewal`, Default to `NotRenewal`.
     * 
     */
    @Import(name="renewalStatus")
    private @Nullable Output<String> renewalStatus;

    /**
     * @return Valid values are `AutoRenewal`, `Normal`, `NotRenewal`, Default to `NotRenewal`.
     * 
     */
    public Optional<Output<String>> renewalStatus() {
        return Optional.ofNullable(this.renewalStatus);
    }

    /**
     * The billing method of the storage. Valid values `Prepaid`.
     * 
     */
    @Import(name="storagePayType")
    private @Nullable Output<String> storagePayType;

    /**
     * @return The billing method of the storage. Valid values `Prepaid`.
     * 
     */
    public Optional<Output<String>> storagePayType() {
        return Optional.ofNullable(this.storagePayType);
    }

    /**
     * Storage space charged by space (monthly package). Unit: GB.
     * &gt; **NOTE:**  Valid values for PolarDB for MySQL Standard Edition: 20 to 32000. It is valid when payType are `PrePaid` ,`PostPaid`.
     * 
     */
    @Import(name="storageSpace")
    private @Nullable Output<Integer> storageSpace;

    /**
     * @return Storage space charged by space (monthly package). Unit: GB.
     * &gt; **NOTE:**  Valid values for PolarDB for MySQL Standard Edition: 20 to 32000. It is valid when payType are `PrePaid` ,`PostPaid`.
     * 
     */
    public Optional<Output<Integer>> storageSpace() {
        return Optional.ofNullable(this.storageSpace);
    }

    /**
     * The storage type of the cluster. Valid values are `ESSDPL1`, `ESSDPL0`.
     * 
     */
    @Import(name="storageType")
    private @Nullable Output<String> storageType;

    /**
     * @return The storage type of the cluster. Valid values are `ESSDPL1`, `ESSDPL0`.
     * 
     */
    public Optional<Output<String>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    /**
     * The Version Code of the target version, whose parameter values can be obtained from the [DescribeDBClusterVersionZonal](https://www.alibabacloud.com/help/en/polardb/api-polardb-2017-08-01-describedbclusterversionzonal) interface.
     * 
     */
    @Import(name="targetMinorVersion")
    private @Nullable Output<String> targetMinorVersion;

    /**
     * @return The Version Code of the target version, whose parameter values can be obtained from the [DescribeDBClusterVersionZonal](https://www.alibabacloud.com/help/en/polardb/api-polardb-2017-08-01-describedbclusterversionzonal) interface.
     * 
     */
    public Optional<Output<String>> targetMinorVersion() {
        return Optional.ofNullable(this.targetMinorVersion);
    }

    /**
     * The duration that you will buy DB cluster (in month). It is valid when payType is `PrePaid`. Valid values: [1~9], 12, 24, 36.
     * &gt; **NOTE:** The attribute `period` is only used to create Subscription instance or modify the PayAsYouGo instance to `PostPaid`. Once effect, it will not be modified that means running `pulumi up` will not affect the resource.
     * 
     */
    @Import(name="usedTime")
    private @Nullable Output<Integer> usedTime;

    /**
     * @return The duration that you will buy DB cluster (in month). It is valid when payType is `PrePaid`. Valid values: [1~9], 12, 24, 36.
     * &gt; **NOTE:** The attribute `period` is only used to create Subscription instance or modify the PayAsYouGo instance to `PostPaid`. Once effect, it will not be modified that means running `pulumi up` will not affect the resource.
     * 
     */
    public Optional<Output<Integer>> usedTime() {
        return Optional.ofNullable(this.usedTime);
    }

    /**
     * The id of the ENS VPC.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The id of the ENS VPC.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The ENS virtual switch ID to launch DB instances in one VPC.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ENS virtual switch ID to launch DB instances in one VPC.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private ZonalDbClusterState() {}

    private ZonalDbClusterState(ZonalDbClusterState $) {
        this.autoRenewPeriod = $.autoRenewPeriod;
        this.clusterLatestVersion = $.clusterLatestVersion;
        this.clusterVersion = $.clusterVersion;
        this.createTime = $.createTime;
        this.creationCategory = $.creationCategory;
        this.dbClusterNodesAttributes = $.dbClusterNodesAttributes;
        this.dbClusterNodesConfigs = $.dbClusterNodesConfigs;
        this.dbClusterNodesIds = $.dbClusterNodesIds;
        this.dbMinorVersion = $.dbMinorVersion;
        this.dbNodeClass = $.dbNodeClass;
        this.dbType = $.dbType;
        this.dbVersion = $.dbVersion;
        this.description = $.description;
        this.ensRegionId = $.ensRegionId;
        this.payType = $.payType;
        this.regionId = $.regionId;
        this.renewalStatus = $.renewalStatus;
        this.storagePayType = $.storagePayType;
        this.storageSpace = $.storageSpace;
        this.storageType = $.storageType;
        this.targetMinorVersion = $.targetMinorVersion;
        this.usedTime = $.usedTime;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZonalDbClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZonalDbClusterState $;

        public Builder() {
            $ = new ZonalDbClusterState();
        }

        public Builder(ZonalDbClusterState defaults) {
            $ = new ZonalDbClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRenewPeriod Auto-renewal period of an cluster, in the unit of the month. It is valid when payType is `PrePaid`. Valid value:1, 2, 3, 6, 12, 24, 36, Default to 1.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewPeriod(@Nullable Output<Integer> autoRenewPeriod) {
            $.autoRenewPeriod = autoRenewPeriod;
            return this;
        }

        /**
         * @param autoRenewPeriod Auto-renewal period of an cluster, in the unit of the month. It is valid when payType is `PrePaid`. Valid value:1, 2, 3, 6, 12, 24, 36, Default to 1.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewPeriod(Integer autoRenewPeriod) {
            return autoRenewPeriod(Output.of(autoRenewPeriod));
        }

        /**
         * @param clusterLatestVersion PolarDB zonal cluster latest version.
         * 
         * @return builder
         * 
         */
        public Builder clusterLatestVersion(@Nullable Output<String> clusterLatestVersion) {
            $.clusterLatestVersion = clusterLatestVersion;
            return this;
        }

        /**
         * @param clusterLatestVersion PolarDB zonal cluster latest version.
         * 
         * @return builder
         * 
         */
        public Builder clusterLatestVersion(String clusterLatestVersion) {
            return clusterLatestVersion(Output.of(clusterLatestVersion));
        }

        /**
         * @param clusterVersion current DB Cluster revision Version.
         * 
         * @return builder
         * 
         */
        public Builder clusterVersion(@Nullable Output<String> clusterVersion) {
            $.clusterVersion = clusterVersion;
            return this;
        }

        /**
         * @param clusterVersion current DB Cluster revision Version.
         * 
         * @return builder
         * 
         */
        public Builder clusterVersion(String clusterVersion) {
            return clusterVersion(Output.of(clusterVersion));
        }

        /**
         * @param createTime PolarDB zonal cluster creation time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime PolarDB zonal cluster creation time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param creationCategory The edition of the PolarDB service. Valid values are `SENormal`.
         * 
         * @return builder
         * 
         */
        public Builder creationCategory(@Nullable Output<String> creationCategory) {
            $.creationCategory = creationCategory;
            return this;
        }

        /**
         * @param creationCategory The edition of the PolarDB service. Valid values are `SENormal`.
         * 
         * @return builder
         * 
         */
        public Builder creationCategory(String creationCategory) {
            return creationCategory(Output.of(creationCategory));
        }

        /**
         * @param dbClusterNodesAttributes Cache of the relationship between node key and node ID for PolarDB zonal Cluster
         * 
         * @return builder
         * 
         */
        public Builder dbClusterNodesAttributes(@Nullable Output<Map<String,String>> dbClusterNodesAttributes) {
            $.dbClusterNodesAttributes = dbClusterNodesAttributes;
            return this;
        }

        /**
         * @param dbClusterNodesAttributes Cache of the relationship between node key and node ID for PolarDB zonal Cluster
         * 
         * @return builder
         * 
         */
        public Builder dbClusterNodesAttributes(Map<String,String> dbClusterNodesAttributes) {
            return dbClusterNodesAttributes(Output.of(dbClusterNodesAttributes));
        }

        /**
         * @param dbClusterNodesConfigs Map of node needs to be created after DB cluster was launched.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterNodesConfigs(@Nullable Output<Map<String,String>> dbClusterNodesConfigs) {
            $.dbClusterNodesConfigs = dbClusterNodesConfigs;
            return this;
        }

        /**
         * @param dbClusterNodesConfigs Map of node needs to be created after DB cluster was launched.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterNodesConfigs(Map<String,String> dbClusterNodesConfigs) {
            return dbClusterNodesConfigs(Output.of(dbClusterNodesConfigs));
        }

        /**
         * @param dbClusterNodesIds Cache of node ID for PolarDB zonal Cluster
         * 
         * @return builder
         * 
         */
        public Builder dbClusterNodesIds(@Nullable Output<Map<String,String>> dbClusterNodesIds) {
            $.dbClusterNodesIds = dbClusterNodesIds;
            return this;
        }

        /**
         * @param dbClusterNodesIds Cache of node ID for PolarDB zonal Cluster
         * 
         * @return builder
         * 
         */
        public Builder dbClusterNodesIds(Map<String,String> dbClusterNodesIds) {
            return dbClusterNodesIds(Output.of(dbClusterNodesIds));
        }

        /**
         * @param dbMinorVersion Database minor version. Value options can refer to the latest docs [CreateDBCluster](https://www.alibabacloud.com/help/en/polardb/latest/createdbcluster-1) `DBMinorVersion`. This parameter takes effect only when `dbType` is MySQL and `dbVersion` is 8.0.
         * 
         * @return builder
         * 
         */
        public Builder dbMinorVersion(@Nullable Output<String> dbMinorVersion) {
            $.dbMinorVersion = dbMinorVersion;
            return this;
        }

        /**
         * @param dbMinorVersion Database minor version. Value options can refer to the latest docs [CreateDBCluster](https://www.alibabacloud.com/help/en/polardb/latest/createdbcluster-1) `DBMinorVersion`. This parameter takes effect only when `dbType` is MySQL and `dbVersion` is 8.0.
         * 
         * @return builder
         * 
         */
        public Builder dbMinorVersion(String dbMinorVersion) {
            return dbMinorVersion(Output.of(dbMinorVersion));
        }

        /**
         * @param dbNodeClass The dbNodeClass of cluster node.Only effective when the cluster is created for the first time. After the cluster is started, the cluster specification is maintained through the node class.
         * 
         * @return builder
         * 
         */
        public Builder dbNodeClass(@Nullable Output<String> dbNodeClass) {
            $.dbNodeClass = dbNodeClass;
            return this;
        }

        /**
         * @param dbNodeClass The dbNodeClass of cluster node.Only effective when the cluster is created for the first time. After the cluster is started, the cluster specification is maintained through the node class.
         * 
         * @return builder
         * 
         */
        public Builder dbNodeClass(String dbNodeClass) {
            return dbNodeClass(Output.of(dbNodeClass));
        }

        /**
         * @param dbType Database type. Value options: MySQL, Oracle, PostgreSQL.
         * 
         * @return builder
         * 
         */
        public Builder dbType(@Nullable Output<String> dbType) {
            $.dbType = dbType;
            return this;
        }

        /**
         * @param dbType Database type. Value options: MySQL, Oracle, PostgreSQL.
         * 
         * @return builder
         * 
         */
        public Builder dbType(String dbType) {
            return dbType(Output.of(dbType));
        }

        /**
         * @param dbVersion Database version. Value options can refer to the latest docs [CreateDBCluster](https://www.alibabacloud.com/help/en/polardb/latest/createdbcluster-1) `DBVersion`.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(@Nullable Output<String> dbVersion) {
            $.dbVersion = dbVersion;
            return this;
        }

        /**
         * @param dbVersion Database version. Value options can refer to the latest docs [CreateDBCluster](https://www.alibabacloud.com/help/en/polardb/latest/createdbcluster-1) `DBVersion`.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(String dbVersion) {
            return dbVersion(Output.of(dbVersion));
        }

        /**
         * @param description The description of cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ensRegionId The Zone to launch the DB cluster.
         * 
         * @return builder
         * 
         */
        public Builder ensRegionId(@Nullable Output<String> ensRegionId) {
            $.ensRegionId = ensRegionId;
            return this;
        }

        /**
         * @param ensRegionId The Zone to launch the DB cluster.
         * 
         * @return builder
         * 
         */
        public Builder ensRegionId(String ensRegionId) {
            return ensRegionId(Output.of(ensRegionId));
        }

        /**
         * @param payType Valid values are `PrePaid`, `PostPaid`, Default to `PostPaid`.
         * 
         * @return builder
         * 
         */
        public Builder payType(@Nullable Output<String> payType) {
            $.payType = payType;
            return this;
        }

        /**
         * @param payType Valid values are `PrePaid`, `PostPaid`, Default to `PostPaid`.
         * 
         * @return builder
         * 
         */
        public Builder payType(String payType) {
            return payType(Output.of(payType));
        }

        /**
         * @param regionId PolarDB zonal cluster region
         * 
         * @return builder
         * 
         */
        public Builder regionId(@Nullable Output<String> regionId) {
            $.regionId = regionId;
            return this;
        }

        /**
         * @param regionId PolarDB zonal cluster region
         * 
         * @return builder
         * 
         */
        public Builder regionId(String regionId) {
            return regionId(Output.of(regionId));
        }

        /**
         * @param renewalStatus Valid values are `AutoRenewal`, `Normal`, `NotRenewal`, Default to `NotRenewal`.
         * 
         * @return builder
         * 
         */
        public Builder renewalStatus(@Nullable Output<String> renewalStatus) {
            $.renewalStatus = renewalStatus;
            return this;
        }

        /**
         * @param renewalStatus Valid values are `AutoRenewal`, `Normal`, `NotRenewal`, Default to `NotRenewal`.
         * 
         * @return builder
         * 
         */
        public Builder renewalStatus(String renewalStatus) {
            return renewalStatus(Output.of(renewalStatus));
        }

        /**
         * @param storagePayType The billing method of the storage. Valid values `Prepaid`.
         * 
         * @return builder
         * 
         */
        public Builder storagePayType(@Nullable Output<String> storagePayType) {
            $.storagePayType = storagePayType;
            return this;
        }

        /**
         * @param storagePayType The billing method of the storage. Valid values `Prepaid`.
         * 
         * @return builder
         * 
         */
        public Builder storagePayType(String storagePayType) {
            return storagePayType(Output.of(storagePayType));
        }

        /**
         * @param storageSpace Storage space charged by space (monthly package). Unit: GB.
         * &gt; **NOTE:**  Valid values for PolarDB for MySQL Standard Edition: 20 to 32000. It is valid when payType are `PrePaid` ,`PostPaid`.
         * 
         * @return builder
         * 
         */
        public Builder storageSpace(@Nullable Output<Integer> storageSpace) {
            $.storageSpace = storageSpace;
            return this;
        }

        /**
         * @param storageSpace Storage space charged by space (monthly package). Unit: GB.
         * &gt; **NOTE:**  Valid values for PolarDB for MySQL Standard Edition: 20 to 32000. It is valid when payType are `PrePaid` ,`PostPaid`.
         * 
         * @return builder
         * 
         */
        public Builder storageSpace(Integer storageSpace) {
            return storageSpace(Output.of(storageSpace));
        }

        /**
         * @param storageType The storage type of the cluster. Valid values are `ESSDPL1`, `ESSDPL0`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(@Nullable Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType The storage type of the cluster. Valid values are `ESSDPL1`, `ESSDPL0`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        /**
         * @param targetMinorVersion The Version Code of the target version, whose parameter values can be obtained from the [DescribeDBClusterVersionZonal](https://www.alibabacloud.com/help/en/polardb/api-polardb-2017-08-01-describedbclusterversionzonal) interface.
         * 
         * @return builder
         * 
         */
        public Builder targetMinorVersion(@Nullable Output<String> targetMinorVersion) {
            $.targetMinorVersion = targetMinorVersion;
            return this;
        }

        /**
         * @param targetMinorVersion The Version Code of the target version, whose parameter values can be obtained from the [DescribeDBClusterVersionZonal](https://www.alibabacloud.com/help/en/polardb/api-polardb-2017-08-01-describedbclusterversionzonal) interface.
         * 
         * @return builder
         * 
         */
        public Builder targetMinorVersion(String targetMinorVersion) {
            return targetMinorVersion(Output.of(targetMinorVersion));
        }

        /**
         * @param usedTime The duration that you will buy DB cluster (in month). It is valid when payType is `PrePaid`. Valid values: [1~9], 12, 24, 36.
         * &gt; **NOTE:** The attribute `period` is only used to create Subscription instance or modify the PayAsYouGo instance to `PostPaid`. Once effect, it will not be modified that means running `pulumi up` will not affect the resource.
         * 
         * @return builder
         * 
         */
        public Builder usedTime(@Nullable Output<Integer> usedTime) {
            $.usedTime = usedTime;
            return this;
        }

        /**
         * @param usedTime The duration that you will buy DB cluster (in month). It is valid when payType is `PrePaid`. Valid values: [1~9], 12, 24, 36.
         * &gt; **NOTE:** The attribute `period` is only used to create Subscription instance or modify the PayAsYouGo instance to `PostPaid`. Once effect, it will not be modified that means running `pulumi up` will not affect the resource.
         * 
         * @return builder
         * 
         */
        public Builder usedTime(Integer usedTime) {
            return usedTime(Output.of(usedTime));
        }

        /**
         * @param vpcId The id of the ENS VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The id of the ENS VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ENS virtual switch ID to launch DB instances in one VPC.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ENS virtual switch ID to launch DB instances in one VPC.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public ZonalDbClusterState build() {
            return $;
        }
    }

}
