// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ehpc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobTemplateArgs Empty = new JobTemplateArgs();

    /**
     * Queue Jobs, Is of the Form: 1-10:2.
     * 
     */
    @Import(name="arrayRequest")
    private @Nullable Output<String> arrayRequest;

    /**
     * @return Queue Jobs, Is of the Form: 1-10:2.
     * 
     */
    public Optional<Output<String>> arrayRequest() {
        return Optional.ofNullable(this.arrayRequest);
    }

    /**
     * Job Maximum Run Time.
     * 
     */
    @Import(name="clockTime")
    private @Nullable Output<String> clockTime;

    /**
     * @return Job Maximum Run Time.
     * 
     */
    public Optional<Output<String>> clockTime() {
        return Optional.ofNullable(this.clockTime);
    }

    /**
     * Job Commands.
     * 
     */
    @Import(name="commandLine", required=true)
    private Output<String> commandLine;

    /**
     * @return Job Commands.
     * 
     */
    public Output<String> commandLine() {
        return this.commandLine;
    }

    /**
     * A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
     * 
     */
    @Import(name="gpu")
    private @Nullable Output<Integer> gpu;

    /**
     * @return A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
     * 
     */
    public Optional<Output<Integer>> gpu() {
        return Optional.ofNullable(this.gpu);
    }

    /**
     * A Job Template Name.
     * 
     */
    @Import(name="jobTemplateName", required=true)
    private Output<String> jobTemplateName;

    /**
     * @return A Job Template Name.
     * 
     */
    public Output<String> jobTemplateName() {
        return this.jobTemplateName;
    }

    /**
     * A Single Compute Node Maximum Memory.
     * 
     */
    @Import(name="mem")
    private @Nullable Output<String> mem;

    /**
     * @return A Single Compute Node Maximum Memory.
     * 
     */
    public Optional<Output<String>> mem() {
        return Optional.ofNullable(this.mem);
    }

    /**
     * Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
     * 
     */
    @Import(name="node")
    private @Nullable Output<Integer> node;

    /**
     * @return Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
     * 
     */
    public Optional<Output<Integer>> node() {
        return Optional.ofNullable(this.node);
    }

    /**
     * Job Commands the Directory.
     * 
     */
    @Import(name="packagePath")
    private @Nullable Output<String> packagePath;

    /**
     * @return Job Commands the Directory.
     * 
     */
    public Optional<Output<String>> packagePath() {
        return Optional.ofNullable(this.packagePath);
    }

    /**
     * The Job Priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The Job Priority.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The Job Queue.
     * 
     */
    @Import(name="queue")
    private @Nullable Output<String> queue;

    /**
     * @return The Job Queue.
     * 
     */
    public Optional<Output<String>> queue() {
        return Optional.ofNullable(this.queue);
    }

    /**
     * If the Job Is Support for the Re-Run.
     * 
     */
    @Import(name="reRunable")
    private @Nullable Output<Boolean> reRunable;

    /**
     * @return If the Job Is Support for the Re-Run.
     * 
     */
    public Optional<Output<Boolean>> reRunable() {
        return Optional.ofNullable(this.reRunable);
    }

    /**
     * The name of the user who performed the job.
     * 
     */
    @Import(name="runasUser")
    private @Nullable Output<String> runasUser;

    /**
     * @return The name of the user who performed the job.
     * 
     */
    public Optional<Output<String>> runasUser() {
        return Optional.ofNullable(this.runasUser);
    }

    /**
     * Error Output Path.
     * 
     */
    @Import(name="stderrRedirectPath")
    private @Nullable Output<String> stderrRedirectPath;

    /**
     * @return Error Output Path.
     * 
     */
    public Optional<Output<String>> stderrRedirectPath() {
        return Optional.ofNullable(this.stderrRedirectPath);
    }

    /**
     * Standard Output Path and.
     * 
     */
    @Import(name="stdoutRedirectPath")
    private @Nullable Output<String> stdoutRedirectPath;

    /**
     * @return Standard Output Path and.
     * 
     */
    public Optional<Output<String>> stdoutRedirectPath() {
        return Optional.ofNullable(this.stdoutRedirectPath);
    }

    /**
     * A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
     * 
     */
    @Import(name="task")
    private @Nullable Output<Integer> task;

    /**
     * @return A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
     * 
     */
    public Optional<Output<Integer>> task() {
        return Optional.ofNullable(this.task);
    }

    /**
     * A Single Task and the Number of Required Threads.
     * 
     */
    @Import(name="thread")
    private @Nullable Output<Integer> thread;

    /**
     * @return A Single Task and the Number of Required Threads.
     * 
     */
    public Optional<Output<Integer>> thread() {
        return Optional.ofNullable(this.thread);
    }

    /**
     * The Job of the Environment Variable.
     * 
     */
    @Import(name="variables")
    private @Nullable Output<String> variables;

    /**
     * @return The Job of the Environment Variable.
     * 
     */
    public Optional<Output<String>> variables() {
        return Optional.ofNullable(this.variables);
    }

    private JobTemplateArgs() {}

    private JobTemplateArgs(JobTemplateArgs $) {
        this.arrayRequest = $.arrayRequest;
        this.clockTime = $.clockTime;
        this.commandLine = $.commandLine;
        this.gpu = $.gpu;
        this.jobTemplateName = $.jobTemplateName;
        this.mem = $.mem;
        this.node = $.node;
        this.packagePath = $.packagePath;
        this.priority = $.priority;
        this.queue = $.queue;
        this.reRunable = $.reRunable;
        this.runasUser = $.runasUser;
        this.stderrRedirectPath = $.stderrRedirectPath;
        this.stdoutRedirectPath = $.stdoutRedirectPath;
        this.task = $.task;
        this.thread = $.thread;
        this.variables = $.variables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobTemplateArgs $;

        public Builder() {
            $ = new JobTemplateArgs();
        }

        public Builder(JobTemplateArgs defaults) {
            $ = new JobTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arrayRequest Queue Jobs, Is of the Form: 1-10:2.
         * 
         * @return builder
         * 
         */
        public Builder arrayRequest(@Nullable Output<String> arrayRequest) {
            $.arrayRequest = arrayRequest;
            return this;
        }

        /**
         * @param arrayRequest Queue Jobs, Is of the Form: 1-10:2.
         * 
         * @return builder
         * 
         */
        public Builder arrayRequest(String arrayRequest) {
            return arrayRequest(Output.of(arrayRequest));
        }

        /**
         * @param clockTime Job Maximum Run Time.
         * 
         * @return builder
         * 
         */
        public Builder clockTime(@Nullable Output<String> clockTime) {
            $.clockTime = clockTime;
            return this;
        }

        /**
         * @param clockTime Job Maximum Run Time.
         * 
         * @return builder
         * 
         */
        public Builder clockTime(String clockTime) {
            return clockTime(Output.of(clockTime));
        }

        /**
         * @param commandLine Job Commands.
         * 
         * @return builder
         * 
         */
        public Builder commandLine(Output<String> commandLine) {
            $.commandLine = commandLine;
            return this;
        }

        /**
         * @param commandLine Job Commands.
         * 
         * @return builder
         * 
         */
        public Builder commandLine(String commandLine) {
            return commandLine(Output.of(commandLine));
        }

        /**
         * @param gpu A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
         * 
         * @return builder
         * 
         */
        public Builder gpu(@Nullable Output<Integer> gpu) {
            $.gpu = gpu;
            return this;
        }

        /**
         * @param gpu A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
         * 
         * @return builder
         * 
         */
        public Builder gpu(Integer gpu) {
            return gpu(Output.of(gpu));
        }

        /**
         * @param jobTemplateName A Job Template Name.
         * 
         * @return builder
         * 
         */
        public Builder jobTemplateName(Output<String> jobTemplateName) {
            $.jobTemplateName = jobTemplateName;
            return this;
        }

        /**
         * @param jobTemplateName A Job Template Name.
         * 
         * @return builder
         * 
         */
        public Builder jobTemplateName(String jobTemplateName) {
            return jobTemplateName(Output.of(jobTemplateName));
        }

        /**
         * @param mem A Single Compute Node Maximum Memory.
         * 
         * @return builder
         * 
         */
        public Builder mem(@Nullable Output<String> mem) {
            $.mem = mem;
            return this;
        }

        /**
         * @param mem A Single Compute Node Maximum Memory.
         * 
         * @return builder
         * 
         */
        public Builder mem(String mem) {
            return mem(Output.of(mem));
        }

        /**
         * @param node Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
         * 
         * @return builder
         * 
         */
        public Builder node(@Nullable Output<Integer> node) {
            $.node = node;
            return this;
        }

        /**
         * @param node Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
         * 
         * @return builder
         * 
         */
        public Builder node(Integer node) {
            return node(Output.of(node));
        }

        /**
         * @param packagePath Job Commands the Directory.
         * 
         * @return builder
         * 
         */
        public Builder packagePath(@Nullable Output<String> packagePath) {
            $.packagePath = packagePath;
            return this;
        }

        /**
         * @param packagePath Job Commands the Directory.
         * 
         * @return builder
         * 
         */
        public Builder packagePath(String packagePath) {
            return packagePath(Output.of(packagePath));
        }

        /**
         * @param priority The Job Priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The Job Priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param queue The Job Queue.
         * 
         * @return builder
         * 
         */
        public Builder queue(@Nullable Output<String> queue) {
            $.queue = queue;
            return this;
        }

        /**
         * @param queue The Job Queue.
         * 
         * @return builder
         * 
         */
        public Builder queue(String queue) {
            return queue(Output.of(queue));
        }

        /**
         * @param reRunable If the Job Is Support for the Re-Run.
         * 
         * @return builder
         * 
         */
        public Builder reRunable(@Nullable Output<Boolean> reRunable) {
            $.reRunable = reRunable;
            return this;
        }

        /**
         * @param reRunable If the Job Is Support for the Re-Run.
         * 
         * @return builder
         * 
         */
        public Builder reRunable(Boolean reRunable) {
            return reRunable(Output.of(reRunable));
        }

        /**
         * @param runasUser The name of the user who performed the job.
         * 
         * @return builder
         * 
         */
        public Builder runasUser(@Nullable Output<String> runasUser) {
            $.runasUser = runasUser;
            return this;
        }

        /**
         * @param runasUser The name of the user who performed the job.
         * 
         * @return builder
         * 
         */
        public Builder runasUser(String runasUser) {
            return runasUser(Output.of(runasUser));
        }

        /**
         * @param stderrRedirectPath Error Output Path.
         * 
         * @return builder
         * 
         */
        public Builder stderrRedirectPath(@Nullable Output<String> stderrRedirectPath) {
            $.stderrRedirectPath = stderrRedirectPath;
            return this;
        }

        /**
         * @param stderrRedirectPath Error Output Path.
         * 
         * @return builder
         * 
         */
        public Builder stderrRedirectPath(String stderrRedirectPath) {
            return stderrRedirectPath(Output.of(stderrRedirectPath));
        }

        /**
         * @param stdoutRedirectPath Standard Output Path and.
         * 
         * @return builder
         * 
         */
        public Builder stdoutRedirectPath(@Nullable Output<String> stdoutRedirectPath) {
            $.stdoutRedirectPath = stdoutRedirectPath;
            return this;
        }

        /**
         * @param stdoutRedirectPath Standard Output Path and.
         * 
         * @return builder
         * 
         */
        public Builder stdoutRedirectPath(String stdoutRedirectPath) {
            return stdoutRedirectPath(Output.of(stdoutRedirectPath));
        }

        /**
         * @param task A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
         * 
         * @return builder
         * 
         */
        public Builder task(@Nullable Output<Integer> task) {
            $.task = task;
            return this;
        }

        /**
         * @param task A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
         * 
         * @return builder
         * 
         */
        public Builder task(Integer task) {
            return task(Output.of(task));
        }

        /**
         * @param thread A Single Task and the Number of Required Threads.
         * 
         * @return builder
         * 
         */
        public Builder thread(@Nullable Output<Integer> thread) {
            $.thread = thread;
            return this;
        }

        /**
         * @param thread A Single Task and the Number of Required Threads.
         * 
         * @return builder
         * 
         */
        public Builder thread(Integer thread) {
            return thread(Output.of(thread));
        }

        /**
         * @param variables The Job of the Environment Variable.
         * 
         * @return builder
         * 
         */
        public Builder variables(@Nullable Output<String> variables) {
            $.variables = variables;
            return this;
        }

        /**
         * @param variables The Job of the Environment Variable.
         * 
         * @return builder
         * 
         */
        public Builder variables(String variables) {
            return variables(Output.of(variables));
        }

        public JobTemplateArgs build() {
            if ($.commandLine == null) {
                throw new MissingRequiredPropertyException("JobTemplateArgs", "commandLine");
            }
            if ($.jobTemplateName == null) {
                throw new MissingRequiredPropertyException("JobTemplateArgs", "jobTemplateName");
            }
            return $;
        }
    }

}
