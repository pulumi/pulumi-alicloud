// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.alicloud.ecs.outputs.GetElasticityAssurancesAssuranceAllocatedResource;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetElasticityAssurancesAssurance {
    /**
     * @return Details of resource allocation.
     * 
     */
    private List<GetElasticityAssurancesAssuranceAllocatedResource> allocatedResources;
    /**
     * @return Description of flexible guarantee service.
     * 
     */
    private String description;
    /**
     * @return The first ID of the resource
     * 
     */
    private String elasticityAssuranceId;
    /**
     * @return Flexible guarantee service failure time.
     * 
     */
    private String endTime;
    /**
     * @return ID of flexible guarantee service.
     * 
     */
    private String id;
    /**
     * @return The billing method of the instance. Possible value: PostPaid. Currently, only pay-as-you-go is supported.
     * 
     */
    private String instanceChargeType;
    /**
     * @return The ID of the elasticity assurance.
     * 
     */
    private String privatePoolOptionsId;
    /**
     * @return The matching mode of flexible guarantee service. Possible values:-Open: flexible guarantee service for Open mode.-Target: specifies the flexible guarantee service of the mode.
     * 
     */
    private String privatePoolOptionsMatchCriteria;
    /**
     * @return The name of the elasticity assurance.
     * 
     */
    private String privatePoolOptionsName;
    /**
     * @return The ID of the resource group.
     * 
     */
    private String resourceGroupId;
    /**
     * @return Flexible guarantee service effective time.
     * 
     */
    private String startTime;
    /**
     * @return Flexible guarantee effective way. Possible values:-Now: Effective immediately.-Later: the specified time takes effect.
     * 
     */
    private String startTimeType;
    /**
     * @return The status of flexible guarantee services. Possible values: `All`, `Preparing`, `Prepared`, `Active`, `Released`.
     * 
     */
    private String status;
    /**
     * @return The tag key-value pair information bound by the elastic guarantee service.
     * 
     */
    private @Nullable Map<String,Object> tags;
    /**
     * @return The total number of flexible guarantee services.
     * 
     */
    private String totalAssuranceTimes;
    /**
     * @return This parameter is not yet available.
     * 
     */
    private Integer usedAssuranceTimes;

    private GetElasticityAssurancesAssurance() {}
    /**
     * @return Details of resource allocation.
     * 
     */
    public List<GetElasticityAssurancesAssuranceAllocatedResource> allocatedResources() {
        return this.allocatedResources;
    }
    /**
     * @return Description of flexible guarantee service.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The first ID of the resource
     * 
     */
    public String elasticityAssuranceId() {
        return this.elasticityAssuranceId;
    }
    /**
     * @return Flexible guarantee service failure time.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return ID of flexible guarantee service.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The billing method of the instance. Possible value: PostPaid. Currently, only pay-as-you-go is supported.
     * 
     */
    public String instanceChargeType() {
        return this.instanceChargeType;
    }
    /**
     * @return The ID of the elasticity assurance.
     * 
     */
    public String privatePoolOptionsId() {
        return this.privatePoolOptionsId;
    }
    /**
     * @return The matching mode of flexible guarantee service. Possible values:-Open: flexible guarantee service for Open mode.-Target: specifies the flexible guarantee service of the mode.
     * 
     */
    public String privatePoolOptionsMatchCriteria() {
        return this.privatePoolOptionsMatchCriteria;
    }
    /**
     * @return The name of the elasticity assurance.
     * 
     */
    public String privatePoolOptionsName() {
        return this.privatePoolOptionsName;
    }
    /**
     * @return The ID of the resource group.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return Flexible guarantee service effective time.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return Flexible guarantee effective way. Possible values:-Now: Effective immediately.-Later: the specified time takes effect.
     * 
     */
    public String startTimeType() {
        return this.startTimeType;
    }
    /**
     * @return The status of flexible guarantee services. Possible values: `All`, `Preparing`, `Prepared`, `Active`, `Released`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The tag key-value pair information bound by the elastic guarantee service.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The total number of flexible guarantee services.
     * 
     */
    public String totalAssuranceTimes() {
        return this.totalAssuranceTimes;
    }
    /**
     * @return This parameter is not yet available.
     * 
     */
    public Integer usedAssuranceTimes() {
        return this.usedAssuranceTimes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetElasticityAssurancesAssurance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetElasticityAssurancesAssuranceAllocatedResource> allocatedResources;
        private String description;
        private String elasticityAssuranceId;
        private String endTime;
        private String id;
        private String instanceChargeType;
        private String privatePoolOptionsId;
        private String privatePoolOptionsMatchCriteria;
        private String privatePoolOptionsName;
        private String resourceGroupId;
        private String startTime;
        private String startTimeType;
        private String status;
        private @Nullable Map<String,Object> tags;
        private String totalAssuranceTimes;
        private Integer usedAssuranceTimes;
        public Builder() {}
        public Builder(GetElasticityAssurancesAssurance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedResources = defaults.allocatedResources;
    	      this.description = defaults.description;
    	      this.elasticityAssuranceId = defaults.elasticityAssuranceId;
    	      this.endTime = defaults.endTime;
    	      this.id = defaults.id;
    	      this.instanceChargeType = defaults.instanceChargeType;
    	      this.privatePoolOptionsId = defaults.privatePoolOptionsId;
    	      this.privatePoolOptionsMatchCriteria = defaults.privatePoolOptionsMatchCriteria;
    	      this.privatePoolOptionsName = defaults.privatePoolOptionsName;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.startTime = defaults.startTime;
    	      this.startTimeType = defaults.startTimeType;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.totalAssuranceTimes = defaults.totalAssuranceTimes;
    	      this.usedAssuranceTimes = defaults.usedAssuranceTimes;
        }

        @CustomType.Setter
        public Builder allocatedResources(List<GetElasticityAssurancesAssuranceAllocatedResource> allocatedResources) {
            if (allocatedResources == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "allocatedResources");
            }
            this.allocatedResources = allocatedResources;
            return this;
        }
        public Builder allocatedResources(GetElasticityAssurancesAssuranceAllocatedResource... allocatedResources) {
            return allocatedResources(List.of(allocatedResources));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder elasticityAssuranceId(String elasticityAssuranceId) {
            if (elasticityAssuranceId == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "elasticityAssuranceId");
            }
            this.elasticityAssuranceId = elasticityAssuranceId;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(String endTime) {
            if (endTime == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "endTime");
            }
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceChargeType(String instanceChargeType) {
            if (instanceChargeType == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "instanceChargeType");
            }
            this.instanceChargeType = instanceChargeType;
            return this;
        }
        @CustomType.Setter
        public Builder privatePoolOptionsId(String privatePoolOptionsId) {
            if (privatePoolOptionsId == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "privatePoolOptionsId");
            }
            this.privatePoolOptionsId = privatePoolOptionsId;
            return this;
        }
        @CustomType.Setter
        public Builder privatePoolOptionsMatchCriteria(String privatePoolOptionsMatchCriteria) {
            if (privatePoolOptionsMatchCriteria == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "privatePoolOptionsMatchCriteria");
            }
            this.privatePoolOptionsMatchCriteria = privatePoolOptionsMatchCriteria;
            return this;
        }
        @CustomType.Setter
        public Builder privatePoolOptionsName(String privatePoolOptionsName) {
            if (privatePoolOptionsName == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "privatePoolOptionsName");
            }
            this.privatePoolOptionsName = privatePoolOptionsName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            if (resourceGroupId == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "resourceGroupId");
            }
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            if (startTime == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "startTime");
            }
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder startTimeType(String startTimeType) {
            if (startTimeType == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "startTimeType");
            }
            this.startTimeType = startTimeType;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,Object> tags) {

            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder totalAssuranceTimes(String totalAssuranceTimes) {
            if (totalAssuranceTimes == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "totalAssuranceTimes");
            }
            this.totalAssuranceTimes = totalAssuranceTimes;
            return this;
        }
        @CustomType.Setter
        public Builder usedAssuranceTimes(Integer usedAssuranceTimes) {
            if (usedAssuranceTimes == null) {
              throw new MissingRequiredPropertyException("GetElasticityAssurancesAssurance", "usedAssuranceTimes");
            }
            this.usedAssuranceTimes = usedAssuranceTimes;
            return this;
        }
        public GetElasticityAssurancesAssurance build() {
            final var _resultValue = new GetElasticityAssurancesAssurance();
            _resultValue.allocatedResources = allocatedResources;
            _resultValue.description = description;
            _resultValue.elasticityAssuranceId = elasticityAssuranceId;
            _resultValue.endTime = endTime;
            _resultValue.id = id;
            _resultValue.instanceChargeType = instanceChargeType;
            _resultValue.privatePoolOptionsId = privatePoolOptionsId;
            _resultValue.privatePoolOptionsMatchCriteria = privatePoolOptionsMatchCriteria;
            _resultValue.privatePoolOptionsName = privatePoolOptionsName;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.startTime = startTime;
            _resultValue.startTimeType = startTimeType;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.totalAssuranceTimes = totalAssuranceTimes;
            _resultValue.usedAssuranceTimes = usedAssuranceTimes;
            return _resultValue;
        }
    }
}
