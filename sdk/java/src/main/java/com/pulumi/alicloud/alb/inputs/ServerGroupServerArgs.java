// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerGroupServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerGroupServerArgs Empty = new ServerGroupServerArgs();

    /**
     * The description of the backend server. The description must be 2 to 256 characters in length, and cannot start with http:// or https://.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the backend server. The description must be 2 to 256 characters in length, and cannot start with http:// or https://.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The port that is used by the backend server. Valid values: `1` to `65535`. You can specify at most 200 servers in each call.
     * 
     * &gt; **NOTE:**   This parameter is required if you set `ServerType` to `Ecs`, `Eni`, `Eci`, or `Ip`. You do not need to set this parameter if `ServerType` is set to `Fc`.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port that is used by the backend server. Valid values: `1` to `65535`. You can specify at most 200 servers in each call.
     * 
     * &gt; **NOTE:**   This parameter is required if you set `ServerType` to `Ecs`, `Eni`, `Eci`, or `Ip`. You do not need to set this parameter if `ServerType` is set to `Fc`.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Specifies whether to enable the remote IP feature. You can specify at most 200 servers in each call. Default values:
     * 
     */
    @Import(name="remoteIpEnabled")
    private @Nullable Output<Boolean> remoteIpEnabled;

    /**
     * @return Specifies whether to enable the remote IP feature. You can specify at most 200 servers in each call. Default values:
     * 
     */
    public Optional<Output<Boolean>> remoteIpEnabled() {
        return Optional.ofNullable(this.remoteIpEnabled);
    }

    /**
     * The ID of the server group.
     * 
     */
    @Import(name="serverGroupId")
    private @Nullable Output<String> serverGroupId;

    /**
     * @return The ID of the server group.
     * 
     */
    public Optional<Output<String>> serverGroupId() {
        return Optional.ofNullable(this.serverGroupId);
    }

    /**
     * The ID of the backend server. You can specify at most 200 servers in each call.
     * 
     * *   If the server group is of the `Instance` type, set ServerId to the ID of a resource of the `Ecs`, `Eni`, or `Eci` type.
     * 
     * *   If the server group is of the `Ip` type, set ServerId to IP addresses.
     * 
     * &gt; **NOTE:**   You cannot perform this operation on a server group of the Function Compute type. You can call the [ListServerGroups](https://www.alibabacloud.com/help/en/doc-detail/213627.html) operation to query the type of server groups.
     * 
     */
    @Import(name="serverId", required=true)
    private Output<String> serverId;

    /**
     * @return The ID of the backend server. You can specify at most 200 servers in each call.
     * 
     * *   If the server group is of the `Instance` type, set ServerId to the ID of a resource of the `Ecs`, `Eni`, or `Eci` type.
     * 
     * *   If the server group is of the `Ip` type, set ServerId to IP addresses.
     * 
     * &gt; **NOTE:**   You cannot perform this operation on a server group of the Function Compute type. You can call the [ListServerGroups](https://www.alibabacloud.com/help/en/doc-detail/213627.html) operation to query the type of server groups.
     * 
     */
    public Output<String> serverId() {
        return this.serverId;
    }

    /**
     * The IP address of the backend server. You can specify at most 200 servers in each call.
     * 
     * &gt; **NOTE:**   You do not need to set this parameter if you set `ServerType` to `Fc`.
     * 
     */
    @Import(name="serverIp")
    private @Nullable Output<String> serverIp;

    /**
     * @return The IP address of the backend server. You can specify at most 200 servers in each call.
     * 
     * &gt; **NOTE:**   You do not need to set this parameter if you set `ServerType` to `Fc`.
     * 
     */
    public Optional<Output<String>> serverIp() {
        return Optional.ofNullable(this.serverIp);
    }

    /**
     * The type of the backend server. You can specify at most 200 servers in each call. Default values:
     * 
     * - `Ecs`: Elastic Compute Service (ECS) instance
     * - `Eni`: elastic network interface (ENI)
     * - `Eci`: elastic container instance
     * - `Ip`: IP address
     * - `Fc`: Function Compute
     * 
     */
    @Import(name="serverType", required=true)
    private Output<String> serverType;

    /**
     * @return The type of the backend server. You can specify at most 200 servers in each call. Default values:
     * 
     * - `Ecs`: Elastic Compute Service (ECS) instance
     * - `Eni`: elastic network interface (ENI)
     * - `Eci`: elastic container instance
     * - `Ip`: IP address
     * - `Fc`: Function Compute
     * 
     */
    public Output<String> serverType() {
        return this.serverType;
    }

    /**
     * The status of the resource
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The weight of the backend server. Valid values: `0` to `100`. Default value: `0`. If the value is set to `0`, no requests are forwarded to the server. You can specify at most 200 servers in each call.
     * 
     * &gt; **NOTE:**   Default value: `0`. We strongly recommend specifying this parameter.
     * **NOTE:**   You do not need to set this parameter if you set `ServerType` to `Fc`.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return The weight of the backend server. Valid values: `0` to `100`. Default value: `0`. If the value is set to `0`, no requests are forwarded to the server. You can specify at most 200 servers in each call.
     * 
     * &gt; **NOTE:**   Default value: `0`. We strongly recommend specifying this parameter.
     * **NOTE:**   You do not need to set this parameter if you set `ServerType` to `Fc`.
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private ServerGroupServerArgs() {}

    private ServerGroupServerArgs(ServerGroupServerArgs $) {
        this.description = $.description;
        this.port = $.port;
        this.remoteIpEnabled = $.remoteIpEnabled;
        this.serverGroupId = $.serverGroupId;
        this.serverId = $.serverId;
        this.serverIp = $.serverIp;
        this.serverType = $.serverType;
        this.status = $.status;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerGroupServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerGroupServerArgs $;

        public Builder() {
            $ = new ServerGroupServerArgs();
        }

        public Builder(ServerGroupServerArgs defaults) {
            $ = new ServerGroupServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the backend server. The description must be 2 to 256 characters in length, and cannot start with http:// or https://.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the backend server. The description must be 2 to 256 characters in length, and cannot start with http:// or https://.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param port The port that is used by the backend server. Valid values: `1` to `65535`. You can specify at most 200 servers in each call.
         * 
         * &gt; **NOTE:**   This parameter is required if you set `ServerType` to `Ecs`, `Eni`, `Eci`, or `Ip`. You do not need to set this parameter if `ServerType` is set to `Fc`.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port that is used by the backend server. Valid values: `1` to `65535`. You can specify at most 200 servers in each call.
         * 
         * &gt; **NOTE:**   This parameter is required if you set `ServerType` to `Ecs`, `Eni`, `Eci`, or `Ip`. You do not need to set this parameter if `ServerType` is set to `Fc`.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param remoteIpEnabled Specifies whether to enable the remote IP feature. You can specify at most 200 servers in each call. Default values:
         * 
         * @return builder
         * 
         */
        public Builder remoteIpEnabled(@Nullable Output<Boolean> remoteIpEnabled) {
            $.remoteIpEnabled = remoteIpEnabled;
            return this;
        }

        /**
         * @param remoteIpEnabled Specifies whether to enable the remote IP feature. You can specify at most 200 servers in each call. Default values:
         * 
         * @return builder
         * 
         */
        public Builder remoteIpEnabled(Boolean remoteIpEnabled) {
            return remoteIpEnabled(Output.of(remoteIpEnabled));
        }

        /**
         * @param serverGroupId The ID of the server group.
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(@Nullable Output<String> serverGroupId) {
            $.serverGroupId = serverGroupId;
            return this;
        }

        /**
         * @param serverGroupId The ID of the server group.
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(String serverGroupId) {
            return serverGroupId(Output.of(serverGroupId));
        }

        /**
         * @param serverId The ID of the backend server. You can specify at most 200 servers in each call.
         * 
         * *   If the server group is of the `Instance` type, set ServerId to the ID of a resource of the `Ecs`, `Eni`, or `Eci` type.
         * 
         * *   If the server group is of the `Ip` type, set ServerId to IP addresses.
         * 
         * &gt; **NOTE:**   You cannot perform this operation on a server group of the Function Compute type. You can call the [ListServerGroups](https://www.alibabacloud.com/help/en/doc-detail/213627.html) operation to query the type of server groups.
         * 
         * @return builder
         * 
         */
        public Builder serverId(Output<String> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId The ID of the backend server. You can specify at most 200 servers in each call.
         * 
         * *   If the server group is of the `Instance` type, set ServerId to the ID of a resource of the `Ecs`, `Eni`, or `Eci` type.
         * 
         * *   If the server group is of the `Ip` type, set ServerId to IP addresses.
         * 
         * &gt; **NOTE:**   You cannot perform this operation on a server group of the Function Compute type. You can call the [ListServerGroups](https://www.alibabacloud.com/help/en/doc-detail/213627.html) operation to query the type of server groups.
         * 
         * @return builder
         * 
         */
        public Builder serverId(String serverId) {
            return serverId(Output.of(serverId));
        }

        /**
         * @param serverIp The IP address of the backend server. You can specify at most 200 servers in each call.
         * 
         * &gt; **NOTE:**   You do not need to set this parameter if you set `ServerType` to `Fc`.
         * 
         * @return builder
         * 
         */
        public Builder serverIp(@Nullable Output<String> serverIp) {
            $.serverIp = serverIp;
            return this;
        }

        /**
         * @param serverIp The IP address of the backend server. You can specify at most 200 servers in each call.
         * 
         * &gt; **NOTE:**   You do not need to set this parameter if you set `ServerType` to `Fc`.
         * 
         * @return builder
         * 
         */
        public Builder serverIp(String serverIp) {
            return serverIp(Output.of(serverIp));
        }

        /**
         * @param serverType The type of the backend server. You can specify at most 200 servers in each call. Default values:
         * 
         * - `Ecs`: Elastic Compute Service (ECS) instance
         * - `Eni`: elastic network interface (ENI)
         * - `Eci`: elastic container instance
         * - `Ip`: IP address
         * - `Fc`: Function Compute
         * 
         * @return builder
         * 
         */
        public Builder serverType(Output<String> serverType) {
            $.serverType = serverType;
            return this;
        }

        /**
         * @param serverType The type of the backend server. You can specify at most 200 servers in each call. Default values:
         * 
         * - `Ecs`: Elastic Compute Service (ECS) instance
         * - `Eni`: elastic network interface (ENI)
         * - `Eci`: elastic container instance
         * - `Ip`: IP address
         * - `Fc`: Function Compute
         * 
         * @return builder
         * 
         */
        public Builder serverType(String serverType) {
            return serverType(Output.of(serverType));
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param weight The weight of the backend server. Valid values: `0` to `100`. Default value: `0`. If the value is set to `0`, no requests are forwarded to the server. You can specify at most 200 servers in each call.
         * 
         * &gt; **NOTE:**   Default value: `0`. We strongly recommend specifying this parameter.
         * **NOTE:**   You do not need to set this parameter if you set `ServerType` to `Fc`.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight The weight of the backend server. Valid values: `0` to `100`. Default value: `0`. If the value is set to `0`, no requests are forwarded to the server. You can specify at most 200 servers in each call.
         * 
         * &gt; **NOTE:**   Default value: `0`. We strongly recommend specifying this parameter.
         * **NOTE:**   You do not need to set this parameter if you set `ServerType` to `Fc`.
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public ServerGroupServerArgs build() {
            if ($.serverId == null) {
                throw new MissingRequiredPropertyException("ServerGroupServerArgs", "serverId");
            }
            if ($.serverType == null) {
                throw new MissingRequiredPropertyException("ServerGroupServerArgs", "serverType");
            }
            return $;
        }
    }

}
