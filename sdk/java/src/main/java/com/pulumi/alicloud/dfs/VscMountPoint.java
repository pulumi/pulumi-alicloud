// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dfs;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.dfs.VscMountPointArgs;
import com.pulumi.alicloud.dfs.inputs.VscMountPointState;
import com.pulumi.alicloud.dfs.outputs.VscMountPointInstance;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Apsara File Storage for HDFS (DFS) Vsc Mount Point resource.
 * 
 * For information about Apsara File Storage for HDFS (DFS) Vsc Mount Point and how to use it, see [What is Vsc Mount Point](https://www.alibabacloud.com/help/en/aibaba-cloud-storage-services/latest/apsara-file-storage-for-hdfs).
 * 
 * &gt; **NOTE:** Available since v1.218.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.random.integer;
 * import com.pulumi.random.IntegerArgs;
 * import com.pulumi.alicloud.dfs.FileSystem;
 * import com.pulumi.alicloud.dfs.FileSystemArgs;
 * import com.pulumi.alicloud.dfs.VscMountPoint;
 * import com.pulumi.alicloud.dfs.VscMountPointArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("terraform-example");
 *         var default_ = new Integer("default", IntegerArgs.builder()
 *             .min(10000)
 *             .max(99999)
 *             .build());
 * 
 *         var defaultFileSystem = new FileSystem("defaultFileSystem", FileSystemArgs.builder()
 *             .spaceCapacity("1024")
 *             .description("for vsc mountpoint RMC test")
 *             .storageType("PERFORMANCE")
 *             .zoneId("cn-hangzhou-b")
 *             .protocolType("PANGU")
 *             .dataRedundancyType("LRS")
 *             .fileSystemName(name)
 *             .build());
 * 
 *         var defaultFsForRMCVscMp = new VscMountPoint("defaultFsForRMCVscMp", VscMountPointArgs.builder()
 *             .fileSystemId(defaultFileSystem.id())
 *             .aliasPrefix(name)
 *             .description(name)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Apsara File Storage for HDFS (DFS) Vsc Mount Point can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:dfs/vscMountPoint:VscMountPoint example &lt;file_system_id&gt;:&lt;mount_point_id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:dfs/vscMountPoint:VscMountPoint")
public class VscMountPoint extends com.pulumi.resources.CustomResource {
    /**
     * Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
     * 
     */
    @Export(name="aliasPrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> aliasPrefix;

    /**
     * @return Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
     * 
     */
    public Output<Optional<String>> aliasPrefix() {
        return Codegen.optional(this.aliasPrefix);
    }
    /**
     * The description of the Mount point.  The length is 0 to 100 characters.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the Mount point.  The length is 0 to 100 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The ID of the HDFS file system resource associated with the VSC mount point.
     * 
     */
    @Export(name="fileSystemId", refs={String.class}, tree="[0]")
    private Output<String> fileSystemId;

    /**
     * @return The ID of the HDFS file system resource associated with the VSC mount point.
     * 
     */
    public Output<String> fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * The collection of ECS instances on which the HDFS file system is mounted.
     * 
     */
    @Export(name="instances", refs={List.class,VscMountPointInstance.class}, tree="[0,1]")
    private Output<List<VscMountPointInstance>> instances;

    /**
     * @return The collection of ECS instances on which the HDFS file system is mounted.
     * 
     */
    public Output<List<VscMountPointInstance>> instances() {
        return this.instances;
    }
    /**
     * VSC mount point ID, which is the unique identifier of the vsc mount point and is used to access the associated HDFS file system.
     * 
     */
    @Export(name="mountPointId", refs={String.class}, tree="[0]")
    private Output<String> mountPointId;

    /**
     * @return VSC mount point ID, which is the unique identifier of the vsc mount point and is used to access the associated HDFS file system.
     * 
     */
    public Output<String> mountPointId() {
        return this.mountPointId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VscMountPoint(java.lang.String name) {
        this(name, VscMountPointArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VscMountPoint(java.lang.String name, VscMountPointArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VscMountPoint(java.lang.String name, VscMountPointArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:dfs/vscMountPoint:VscMountPoint", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private VscMountPoint(java.lang.String name, Output<java.lang.String> id, @Nullable VscMountPointState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:dfs/vscMountPoint:VscMountPoint", name, state, makeResourceOptions(options, id), false);
    }

    private static VscMountPointArgs makeArgs(VscMountPointArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VscMountPointArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VscMountPoint get(java.lang.String name, Output<java.lang.String> id, @Nullable VscMountPointState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VscMountPoint(name, id, state, options);
    }
}
