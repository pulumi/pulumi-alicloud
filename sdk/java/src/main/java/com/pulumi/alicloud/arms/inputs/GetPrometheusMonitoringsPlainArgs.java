// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPrometheusMonitoringsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPrometheusMonitoringsPlainArgs Empty = new GetPrometheusMonitoringsPlainArgs();

    /**
     * The ID of the Prometheus instance.
     * 
     */
    @Import(name="clusterId", required=true)
    private String clusterId;

    /**
     * @return The ID of the Prometheus instance.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * A list of Prometheus Monitoring IDs.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return A list of Prometheus Monitoring IDs.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * A regex string to filter results by Prometheus Monitoring name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    /**
     * @return A regex string to filter results by Prometheus Monitoring name.
     * 
     */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable String outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The status of the monitoring configuration. Valid values: `run`, `stop`.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of the monitoring configuration. Valid values: `run`, `stop`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The type of the monitoring configuration. Valid values: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The type of the monitoring configuration. Valid values: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private GetPrometheusMonitoringsPlainArgs() {}

    private GetPrometheusMonitoringsPlainArgs(GetPrometheusMonitoringsPlainArgs $) {
        this.clusterId = $.clusterId;
        this.ids = $.ids;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPrometheusMonitoringsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPrometheusMonitoringsPlainArgs $;

        public Builder() {
            $ = new GetPrometheusMonitoringsPlainArgs();
        }

        public Builder(GetPrometheusMonitoringsPlainArgs defaults) {
            $ = new GetPrometheusMonitoringsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The ID of the Prometheus instance.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param ids A list of Prometheus Monitoring IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of Prometheus Monitoring IDs.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param nameRegex A regex string to filter results by Prometheus Monitoring name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param status The status of the monitoring configuration. Valid values: `run`, `stop`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param type The type of the monitoring configuration. Valid values: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public GetPrometheusMonitoringsPlainArgs build() {
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("GetPrometheusMonitoringsPlainArgs", "clusterId");
            }
            return $;
        }
    }

}
