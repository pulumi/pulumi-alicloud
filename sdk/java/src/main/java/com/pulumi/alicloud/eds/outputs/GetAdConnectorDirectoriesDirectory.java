// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds.outputs;

import com.pulumi.alicloud.eds.outputs.GetAdConnectorDirectoriesDirectoryAdConnector;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAdConnectorDirectoriesDirectory {
    /**
     * @return The ID of the ad connector directory.
     * 
     */
    private String adConnectorDirectoryId;
    /**
     * @return The AD connectors.
     * 
     */
    private List<GetAdConnectorDirectoriesDirectoryAdConnector> adConnectors;
    /**
     * @return The CreateTime of resource.
     * 
     */
    private String createTime;
    /**
     * @return The ID of the security group.
     * 
     */
    private String customSecurityGroupId;
    /**
     * @return The name of directory.
     * 
     */
    private String directoryName;
    /**
     * @return The name of the domain.
     * 
     */
    private String directoryType;
    /**
     * @return The address of DNSAddress.
     * 
     */
    private List<String> dnsAddresses;
    /**
     * @return The username of DNS.
     * 
     */
    private String dnsUserName;
    /**
     * @return The name of the domain.
     * 
     */
    private String domainName;
    /**
     * @return domain admin user name.
     * 
     */
    private String domainUserName;
    /**
     * @return Whether to grant local administrator rights to users who use cloud desktops.
     * 
     */
    private Boolean enableAdminAccess;
    /**
     * @return The ID of the Ad Connector Directory.
     * 
     */
    private String id;
    /**
     * @return Whether MFA authentication is enabled. After all AD users in this directory log on to the cloud desktop, enter the correct password and then enter the dynamic verification code generated by the MFA device.
     * 
     */
    private Boolean mfaEnabled;
    /**
     * @return The status of directory.
     * 
     */
    private String status;
    /**
     * @return The Enterprise already has the DNS address of the AD subdomain.
     * 
     */
    private List<String> subDnsAddresses;
    /**
     * @return The Enterprise already has a fully qualified domain name (FQDN) of an AD subdomain, with both a host name and a domain name.
     * 
     */
    private String subDomainName;
    /**
     * @return The trust password.
     * 
     */
    private String trustPassword;
    /**
     * @return The ID of the vpc.
     * 
     */
    private String vpcId;
    /**
     * @return List of VSwitch IDs in the directory.
     * 
     */
    private List<String> vswitchIds;

    private GetAdConnectorDirectoriesDirectory() {}
    /**
     * @return The ID of the ad connector directory.
     * 
     */
    public String adConnectorDirectoryId() {
        return this.adConnectorDirectoryId;
    }
    /**
     * @return The AD connectors.
     * 
     */
    public List<GetAdConnectorDirectoriesDirectoryAdConnector> adConnectors() {
        return this.adConnectors;
    }
    /**
     * @return The CreateTime of resource.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The ID of the security group.
     * 
     */
    public String customSecurityGroupId() {
        return this.customSecurityGroupId;
    }
    /**
     * @return The name of directory.
     * 
     */
    public String directoryName() {
        return this.directoryName;
    }
    /**
     * @return The name of the domain.
     * 
     */
    public String directoryType() {
        return this.directoryType;
    }
    /**
     * @return The address of DNSAddress.
     * 
     */
    public List<String> dnsAddresses() {
        return this.dnsAddresses;
    }
    /**
     * @return The username of DNS.
     * 
     */
    public String dnsUserName() {
        return this.dnsUserName;
    }
    /**
     * @return The name of the domain.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return domain admin user name.
     * 
     */
    public String domainUserName() {
        return this.domainUserName;
    }
    /**
     * @return Whether to grant local administrator rights to users who use cloud desktops.
     * 
     */
    public Boolean enableAdminAccess() {
        return this.enableAdminAccess;
    }
    /**
     * @return The ID of the Ad Connector Directory.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether MFA authentication is enabled. After all AD users in this directory log on to the cloud desktop, enter the correct password and then enter the dynamic verification code generated by the MFA device.
     * 
     */
    public Boolean mfaEnabled() {
        return this.mfaEnabled;
    }
    /**
     * @return The status of directory.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The Enterprise already has the DNS address of the AD subdomain.
     * 
     */
    public List<String> subDnsAddresses() {
        return this.subDnsAddresses;
    }
    /**
     * @return The Enterprise already has a fully qualified domain name (FQDN) of an AD subdomain, with both a host name and a domain name.
     * 
     */
    public String subDomainName() {
        return this.subDomainName;
    }
    /**
     * @return The trust password.
     * 
     */
    public String trustPassword() {
        return this.trustPassword;
    }
    /**
     * @return The ID of the vpc.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return List of VSwitch IDs in the directory.
     * 
     */
    public List<String> vswitchIds() {
        return this.vswitchIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAdConnectorDirectoriesDirectory defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adConnectorDirectoryId;
        private List<GetAdConnectorDirectoriesDirectoryAdConnector> adConnectors;
        private String createTime;
        private String customSecurityGroupId;
        private String directoryName;
        private String directoryType;
        private List<String> dnsAddresses;
        private String dnsUserName;
        private String domainName;
        private String domainUserName;
        private Boolean enableAdminAccess;
        private String id;
        private Boolean mfaEnabled;
        private String status;
        private List<String> subDnsAddresses;
        private String subDomainName;
        private String trustPassword;
        private String vpcId;
        private List<String> vswitchIds;
        public Builder() {}
        public Builder(GetAdConnectorDirectoriesDirectory defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adConnectorDirectoryId = defaults.adConnectorDirectoryId;
    	      this.adConnectors = defaults.adConnectors;
    	      this.createTime = defaults.createTime;
    	      this.customSecurityGroupId = defaults.customSecurityGroupId;
    	      this.directoryName = defaults.directoryName;
    	      this.directoryType = defaults.directoryType;
    	      this.dnsAddresses = defaults.dnsAddresses;
    	      this.dnsUserName = defaults.dnsUserName;
    	      this.domainName = defaults.domainName;
    	      this.domainUserName = defaults.domainUserName;
    	      this.enableAdminAccess = defaults.enableAdminAccess;
    	      this.id = defaults.id;
    	      this.mfaEnabled = defaults.mfaEnabled;
    	      this.status = defaults.status;
    	      this.subDnsAddresses = defaults.subDnsAddresses;
    	      this.subDomainName = defaults.subDomainName;
    	      this.trustPassword = defaults.trustPassword;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchIds = defaults.vswitchIds;
        }

        @CustomType.Setter
        public Builder adConnectorDirectoryId(String adConnectorDirectoryId) {
            this.adConnectorDirectoryId = Objects.requireNonNull(adConnectorDirectoryId);
            return this;
        }
        @CustomType.Setter
        public Builder adConnectors(List<GetAdConnectorDirectoriesDirectoryAdConnector> adConnectors) {
            this.adConnectors = Objects.requireNonNull(adConnectors);
            return this;
        }
        public Builder adConnectors(GetAdConnectorDirectoriesDirectoryAdConnector... adConnectors) {
            return adConnectors(List.of(adConnectors));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder customSecurityGroupId(String customSecurityGroupId) {
            this.customSecurityGroupId = Objects.requireNonNull(customSecurityGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder directoryName(String directoryName) {
            this.directoryName = Objects.requireNonNull(directoryName);
            return this;
        }
        @CustomType.Setter
        public Builder directoryType(String directoryType) {
            this.directoryType = Objects.requireNonNull(directoryType);
            return this;
        }
        @CustomType.Setter
        public Builder dnsAddresses(List<String> dnsAddresses) {
            this.dnsAddresses = Objects.requireNonNull(dnsAddresses);
            return this;
        }
        public Builder dnsAddresses(String... dnsAddresses) {
            return dnsAddresses(List.of(dnsAddresses));
        }
        @CustomType.Setter
        public Builder dnsUserName(String dnsUserName) {
            this.dnsUserName = Objects.requireNonNull(dnsUserName);
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        @CustomType.Setter
        public Builder domainUserName(String domainUserName) {
            this.domainUserName = Objects.requireNonNull(domainUserName);
            return this;
        }
        @CustomType.Setter
        public Builder enableAdminAccess(Boolean enableAdminAccess) {
            this.enableAdminAccess = Objects.requireNonNull(enableAdminAccess);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder mfaEnabled(Boolean mfaEnabled) {
            this.mfaEnabled = Objects.requireNonNull(mfaEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder subDnsAddresses(List<String> subDnsAddresses) {
            this.subDnsAddresses = Objects.requireNonNull(subDnsAddresses);
            return this;
        }
        public Builder subDnsAddresses(String... subDnsAddresses) {
            return subDnsAddresses(List.of(subDnsAddresses));
        }
        @CustomType.Setter
        public Builder subDomainName(String subDomainName) {
            this.subDomainName = Objects.requireNonNull(subDomainName);
            return this;
        }
        @CustomType.Setter
        public Builder trustPassword(String trustPassword) {
            this.trustPassword = Objects.requireNonNull(trustPassword);
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        @CustomType.Setter
        public Builder vswitchIds(List<String> vswitchIds) {
            this.vswitchIds = Objects.requireNonNull(vswitchIds);
            return this;
        }
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }
        public GetAdConnectorDirectoriesDirectory build() {
            final var o = new GetAdConnectorDirectoriesDirectory();
            o.adConnectorDirectoryId = adConnectorDirectoryId;
            o.adConnectors = adConnectors;
            o.createTime = createTime;
            o.customSecurityGroupId = customSecurityGroupId;
            o.directoryName = directoryName;
            o.directoryType = directoryType;
            o.dnsAddresses = dnsAddresses;
            o.dnsUserName = dnsUserName;
            o.domainName = domainName;
            o.domainUserName = domainUserName;
            o.enableAdminAccess = enableAdminAccess;
            o.id = id;
            o.mfaEnabled = mfaEnabled;
            o.status = status;
            o.subDnsAddresses = subDnsAddresses;
            o.subDomainName = subDomainName;
            o.trustPassword = trustPassword;
            o.vpcId = vpcId;
            o.vswitchIds = vswitchIds;
            return o;
        }
    }
}
