// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EcsSnapshotGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final EcsSnapshotGroupArgs Empty = new EcsSnapshotGroupArgs();

    /**
     * The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
     * 
     */
    @Import(name="diskIds")
    private @Nullable Output<List<String>> diskIds;

    /**
     * @return The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
     * 
     */
    public Optional<Output<List<String>>> diskIds() {
        return Optional.ofNullable(this.diskIds);
    }

    /**
     * The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
     * 
     */
    @Import(name="excludeDiskIds")
    private @Nullable Output<List<String>> excludeDiskIds;

    /**
     * @return The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
     * 
     */
    public Optional<Output<List<String>>> excludeDiskIds() {
        return Optional.ofNullable(this.excludeDiskIds);
    }

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * Specifies whether to enable the instant access feature.
     * 
     */
    @Import(name="instantAccess")
    private @Nullable Output<Boolean> instantAccess;

    /**
     * @return Specifies whether to enable the instant access feature.
     * 
     */
    public Optional<Output<Boolean>> instantAccess() {
        return Optional.ofNullable(this.instantAccess);
    }

    /**
     * Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
     * 
     */
    @Import(name="instantAccessRetentionDays")
    private @Nullable Output<Integer> instantAccessRetentionDays;

    /**
     * @return Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
     * 
     */
    public Optional<Output<Integer>> instantAccessRetentionDays() {
        return Optional.ofNullable(this.instantAccessRetentionDays);
    }

    /**
     * The ID of the resource group to which the snapshot consistency group belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group to which the snapshot consistency group belongs.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
     * 
     */
    @Import(name="snapshotGroupName")
    private @Nullable Output<String> snapshotGroupName;

    /**
     * @return The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
     * 
     */
    public Optional<Output<String>> snapshotGroupName() {
        return Optional.ofNullable(this.snapshotGroupName);
    }

    /**
     * A mapping of tags to assign to the snapshot group.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the snapshot group.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private EcsSnapshotGroupArgs() {}

    private EcsSnapshotGroupArgs(EcsSnapshotGroupArgs $) {
        this.description = $.description;
        this.diskIds = $.diskIds;
        this.excludeDiskIds = $.excludeDiskIds;
        this.instanceId = $.instanceId;
        this.instantAccess = $.instantAccess;
        this.instantAccessRetentionDays = $.instantAccessRetentionDays;
        this.resourceGroupId = $.resourceGroupId;
        this.snapshotGroupName = $.snapshotGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EcsSnapshotGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EcsSnapshotGroupArgs $;

        public Builder() {
            $ = new EcsSnapshotGroupArgs();
        }

        public Builder(EcsSnapshotGroupArgs defaults) {
            $ = new EcsSnapshotGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diskIds The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
         * 
         * @return builder
         * 
         */
        public Builder diskIds(@Nullable Output<List<String>> diskIds) {
            $.diskIds = diskIds;
            return this;
        }

        /**
         * @param diskIds The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
         * 
         * @return builder
         * 
         */
        public Builder diskIds(List<String> diskIds) {
            return diskIds(Output.of(diskIds));
        }

        /**
         * @param diskIds The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
         * 
         * @return builder
         * 
         */
        public Builder diskIds(String... diskIds) {
            return diskIds(List.of(diskIds));
        }

        /**
         * @param excludeDiskIds The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
         * 
         * @return builder
         * 
         */
        public Builder excludeDiskIds(@Nullable Output<List<String>> excludeDiskIds) {
            $.excludeDiskIds = excludeDiskIds;
            return this;
        }

        /**
         * @param excludeDiskIds The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
         * 
         * @return builder
         * 
         */
        public Builder excludeDiskIds(List<String> excludeDiskIds) {
            return excludeDiskIds(Output.of(excludeDiskIds));
        }

        /**
         * @param excludeDiskIds The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
         * 
         * @return builder
         * 
         */
        public Builder excludeDiskIds(String... excludeDiskIds) {
            return excludeDiskIds(List.of(excludeDiskIds));
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param instantAccess Specifies whether to enable the instant access feature.
         * 
         * @return builder
         * 
         */
        public Builder instantAccess(@Nullable Output<Boolean> instantAccess) {
            $.instantAccess = instantAccess;
            return this;
        }

        /**
         * @param instantAccess Specifies whether to enable the instant access feature.
         * 
         * @return builder
         * 
         */
        public Builder instantAccess(Boolean instantAccess) {
            return instantAccess(Output.of(instantAccess));
        }

        /**
         * @param instantAccessRetentionDays Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
         * 
         * @return builder
         * 
         */
        public Builder instantAccessRetentionDays(@Nullable Output<Integer> instantAccessRetentionDays) {
            $.instantAccessRetentionDays = instantAccessRetentionDays;
            return this;
        }

        /**
         * @param instantAccessRetentionDays Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
         * 
         * @return builder
         * 
         */
        public Builder instantAccessRetentionDays(Integer instantAccessRetentionDays) {
            return instantAccessRetentionDays(Output.of(instantAccessRetentionDays));
        }

        /**
         * @param resourceGroupId The ID of the resource group to which the snapshot consistency group belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group to which the snapshot consistency group belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param snapshotGroupName The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder snapshotGroupName(@Nullable Output<String> snapshotGroupName) {
            $.snapshotGroupName = snapshotGroupName;
            return this;
        }

        /**
         * @param snapshotGroupName The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder snapshotGroupName(String snapshotGroupName) {
            return snapshotGroupName(Output.of(snapshotGroupName));
        }

        /**
         * @param tags A mapping of tags to assign to the snapshot group.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the snapshot group.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public EcsSnapshotGroupArgs build() {
            return $;
        }
    }

}
