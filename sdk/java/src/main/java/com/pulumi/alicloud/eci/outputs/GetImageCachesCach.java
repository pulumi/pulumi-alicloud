// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eci.outputs;

import com.pulumi.alicloud.eci.outputs.GetImageCachesCachEvent;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetImageCachesCach {
    /**
     * @return The id of container group.
     * 
     */
    private String containerGroupId;
    /**
     * @return Image cache pulls image event information.
     * 
     */
    private List<GetImageCachesCachEvent> events;
    /**
     * @return The time of expired.
     * 
     */
    private String expireDateTime;
    /**
     * @return The ID of the ECI Image Cache.
     * 
     */
    private String id;
    /**
     * @return The id of the ECI Image Cache.
     * 
     */
    private String imageCacheId;
    /**
     * @return The name of ECI Image Cache.
     * 
     */
    private String imageCacheName;
    /**
     * @return The list of cached images.
     * 
     */
    private List<String> images;
    /**
     * @return The progress of ECI Image Cache.
     * 
     */
    private String progress;
    /**
     * @return The id of snapshot.
     * 
     */
    private String snapshotId;
    /**
     * @return The status of ECI Image Cache.
     * 
     */
    private String status;

    private GetImageCachesCach() {}
    /**
     * @return The id of container group.
     * 
     */
    public String containerGroupId() {
        return this.containerGroupId;
    }
    /**
     * @return Image cache pulls image event information.
     * 
     */
    public List<GetImageCachesCachEvent> events() {
        return this.events;
    }
    /**
     * @return The time of expired.
     * 
     */
    public String expireDateTime() {
        return this.expireDateTime;
    }
    /**
     * @return The ID of the ECI Image Cache.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The id of the ECI Image Cache.
     * 
     */
    public String imageCacheId() {
        return this.imageCacheId;
    }
    /**
     * @return The name of ECI Image Cache.
     * 
     */
    public String imageCacheName() {
        return this.imageCacheName;
    }
    /**
     * @return The list of cached images.
     * 
     */
    public List<String> images() {
        return this.images;
    }
    /**
     * @return The progress of ECI Image Cache.
     * 
     */
    public String progress() {
        return this.progress;
    }
    /**
     * @return The id of snapshot.
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return The status of ECI Image Cache.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageCachesCach defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String containerGroupId;
        private List<GetImageCachesCachEvent> events;
        private String expireDateTime;
        private String id;
        private String imageCacheId;
        private String imageCacheName;
        private List<String> images;
        private String progress;
        private String snapshotId;
        private String status;
        public Builder() {}
        public Builder(GetImageCachesCach defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerGroupId = defaults.containerGroupId;
    	      this.events = defaults.events;
    	      this.expireDateTime = defaults.expireDateTime;
    	      this.id = defaults.id;
    	      this.imageCacheId = defaults.imageCacheId;
    	      this.imageCacheName = defaults.imageCacheName;
    	      this.images = defaults.images;
    	      this.progress = defaults.progress;
    	      this.snapshotId = defaults.snapshotId;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder containerGroupId(String containerGroupId) {
            if (containerGroupId == null) {
              throw new MissingRequiredPropertyException("GetImageCachesCach", "containerGroupId");
            }
            this.containerGroupId = containerGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder events(List<GetImageCachesCachEvent> events) {
            if (events == null) {
              throw new MissingRequiredPropertyException("GetImageCachesCach", "events");
            }
            this.events = events;
            return this;
        }
        public Builder events(GetImageCachesCachEvent... events) {
            return events(List.of(events));
        }
        @CustomType.Setter
        public Builder expireDateTime(String expireDateTime) {
            if (expireDateTime == null) {
              throw new MissingRequiredPropertyException("GetImageCachesCach", "expireDateTime");
            }
            this.expireDateTime = expireDateTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImageCachesCach", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageCacheId(String imageCacheId) {
            if (imageCacheId == null) {
              throw new MissingRequiredPropertyException("GetImageCachesCach", "imageCacheId");
            }
            this.imageCacheId = imageCacheId;
            return this;
        }
        @CustomType.Setter
        public Builder imageCacheName(String imageCacheName) {
            if (imageCacheName == null) {
              throw new MissingRequiredPropertyException("GetImageCachesCach", "imageCacheName");
            }
            this.imageCacheName = imageCacheName;
            return this;
        }
        @CustomType.Setter
        public Builder images(List<String> images) {
            if (images == null) {
              throw new MissingRequiredPropertyException("GetImageCachesCach", "images");
            }
            this.images = images;
            return this;
        }
        public Builder images(String... images) {
            return images(List.of(images));
        }
        @CustomType.Setter
        public Builder progress(String progress) {
            if (progress == null) {
              throw new MissingRequiredPropertyException("GetImageCachesCach", "progress");
            }
            this.progress = progress;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            if (snapshotId == null) {
              throw new MissingRequiredPropertyException("GetImageCachesCach", "snapshotId");
            }
            this.snapshotId = snapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetImageCachesCach", "status");
            }
            this.status = status;
            return this;
        }
        public GetImageCachesCach build() {
            final var _resultValue = new GetImageCachesCach();
            _resultValue.containerGroupId = containerGroupId;
            _resultValue.events = events;
            _resultValue.expireDateTime = expireDateTime;
            _resultValue.id = id;
            _resultValue.imageCacheId = imageCacheId;
            _resultValue.imageCacheName = imageCacheName;
            _resultValue.images = images;
            _resultValue.progress = progress;
            _resultValue.snapshotId = snapshotId;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
