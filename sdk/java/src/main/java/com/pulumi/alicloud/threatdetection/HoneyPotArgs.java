// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class HoneyPotArgs extends com.pulumi.resources.ResourceArgs {

    public static final HoneyPotArgs Empty = new HoneyPotArgs();

    /**
     * The image ID of the honeypot.
     * 
     */
    @Import(name="honeypotImageId", required=true)
    private Output<String> honeypotImageId;

    /**
     * @return The image ID of the honeypot.
     * 
     */
    public Output<String> honeypotImageId() {
        return this.honeypotImageId;
    }

    /**
     * Honeypot mirror name.
     * 
     */
    @Import(name="honeypotImageName", required=true)
    private Output<String> honeypotImageName;

    /**
     * @return Honeypot mirror name.
     * 
     */
    public Output<String> honeypotImageName() {
        return this.honeypotImageName;
    }

    /**
     * Honeypot custom name.
     * 
     */
    @Import(name="honeypotName", required=true)
    private Output<String> honeypotName;

    /**
     * @return Honeypot custom name.
     * 
     */
    public Output<String> honeypotName() {
        return this.honeypotName;
    }

    /**
     * The ID of the honeypot management node.
     * 
     */
    @Import(name="nodeId", required=true)
    private Output<String> nodeId;

    /**
     * @return The ID of the honeypot management node.
     * 
     */
    public Output<String> nodeId() {
        return this.nodeId;
    }

    private HoneyPotArgs() {}

    private HoneyPotArgs(HoneyPotArgs $) {
        this.honeypotImageId = $.honeypotImageId;
        this.honeypotImageName = $.honeypotImageName;
        this.honeypotName = $.honeypotName;
        this.nodeId = $.nodeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HoneyPotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HoneyPotArgs $;

        public Builder() {
            $ = new HoneyPotArgs();
        }

        public Builder(HoneyPotArgs defaults) {
            $ = new HoneyPotArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param honeypotImageId The image ID of the honeypot.
         * 
         * @return builder
         * 
         */
        public Builder honeypotImageId(Output<String> honeypotImageId) {
            $.honeypotImageId = honeypotImageId;
            return this;
        }

        /**
         * @param honeypotImageId The image ID of the honeypot.
         * 
         * @return builder
         * 
         */
        public Builder honeypotImageId(String honeypotImageId) {
            return honeypotImageId(Output.of(honeypotImageId));
        }

        /**
         * @param honeypotImageName Honeypot mirror name.
         * 
         * @return builder
         * 
         */
        public Builder honeypotImageName(Output<String> honeypotImageName) {
            $.honeypotImageName = honeypotImageName;
            return this;
        }

        /**
         * @param honeypotImageName Honeypot mirror name.
         * 
         * @return builder
         * 
         */
        public Builder honeypotImageName(String honeypotImageName) {
            return honeypotImageName(Output.of(honeypotImageName));
        }

        /**
         * @param honeypotName Honeypot custom name.
         * 
         * @return builder
         * 
         */
        public Builder honeypotName(Output<String> honeypotName) {
            $.honeypotName = honeypotName;
            return this;
        }

        /**
         * @param honeypotName Honeypot custom name.
         * 
         * @return builder
         * 
         */
        public Builder honeypotName(String honeypotName) {
            return honeypotName(Output.of(honeypotName));
        }

        /**
         * @param nodeId The ID of the honeypot management node.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeId The ID of the honeypot management node.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        public HoneyPotArgs build() {
            if ($.honeypotImageId == null) {
                throw new MissingRequiredPropertyException("HoneyPotArgs", "honeypotImageId");
            }
            if ($.honeypotImageName == null) {
                throw new MissingRequiredPropertyException("HoneyPotArgs", "honeypotImageName");
            }
            if ($.honeypotName == null) {
                throw new MissingRequiredPropertyException("HoneyPotArgs", "honeypotName");
            }
            if ($.nodeId == null) {
                throw new MissingRequiredPropertyException("HoneyPotArgs", "nodeId");
            }
            return $;
        }
    }

}
