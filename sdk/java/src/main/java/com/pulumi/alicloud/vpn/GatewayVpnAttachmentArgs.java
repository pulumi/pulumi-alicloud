// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn;

import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentBgpConfigArgs;
import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentHealthCheckConfigArgs;
import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIkeConfigArgs;
import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIpsecConfigArgs;
import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentTunnelOptionsSpecificationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayVpnAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayVpnAttachmentArgs Empty = new GatewayVpnAttachmentArgs();

    /**
     * Bgp configuration information.
     * - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgp_config` below.
     * 
     */
    @Import(name="bgpConfig")
    private @Nullable Output<GatewayVpnAttachmentBgpConfigArgs> bgpConfig;

    /**
     * @return Bgp configuration information.
     * - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgp_config` below.
     * 
     */
    public Optional<Output<GatewayVpnAttachmentBgpConfigArgs>> bgpConfig() {
        return Optional.ofNullable(this.bgpConfig);
    }

    /**
     * Customer gateway ID.
     * - This parameter is required when creating a single-tunnel mode vpn attachment.
     * 
     */
    @Import(name="customerGatewayId")
    private @Nullable Output<String> customerGatewayId;

    /**
     * @return Customer gateway ID.
     * - This parameter is required when creating a single-tunnel mode vpn attachment.
     * 
     */
    public Optional<Output<String>> customerGatewayId() {
        return Optional.ofNullable(this.customerGatewayId);
    }

    /**
     * Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
     * 
     */
    @Import(name="effectImmediately")
    private @Nullable Output<Boolean> effectImmediately;

    /**
     * @return Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
     * 
     */
    public Optional<Output<Boolean>> effectImmediately() {
        return Optional.ofNullable(this.effectImmediately);
    }

    /**
     * This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Whether to enable the DPD (peer survival detection) function.
     * - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
     * - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
     * 
     */
    @Import(name="enableDpd")
    private @Nullable Output<Boolean> enableDpd;

    /**
     * @return This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Whether to enable the DPD (peer survival detection) function.
     * - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
     * - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
     * 
     */
    public Optional<Output<Boolean>> enableDpd() {
        return Optional.ofNullable(this.enableDpd);
    }

    /**
     * This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Specifies whether to enable NAT traversal. Valid values:
     * - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
     * - false: disables NAT traversal.
     * 
     */
    @Import(name="enableNatTraversal")
    private @Nullable Output<Boolean> enableNatTraversal;

    /**
     * @return This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Specifies whether to enable NAT traversal. Valid values:
     * - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
     * - false: disables NAT traversal.
     * 
     */
    public Optional<Output<Boolean>> enableNatTraversal() {
        return Optional.ofNullable(this.enableNatTraversal);
    }

    /**
     * You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
     * 
     * &gt; **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
     * 
     */
    @Import(name="enableTunnelsBgp")
    private @Nullable Output<Boolean> enableTunnelsBgp;

    /**
     * @return You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
     * 
     * &gt; **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
     * 
     */
    public Optional<Output<Boolean>> enableTunnelsBgp() {
        return Optional.ofNullable(this.enableTunnelsBgp);
    }

    /**
     * This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Health check configuration information. See `health_check_config` below.
     * 
     */
    @Import(name="healthCheckConfig")
    private @Nullable Output<GatewayVpnAttachmentHealthCheckConfigArgs> healthCheckConfig;

    /**
     * @return This parameter is supported if you create an vpn attachment in single-tunnel mode.
     * Health check configuration information. See `health_check_config` below.
     * 
     */
    public Optional<Output<GatewayVpnAttachmentHealthCheckConfigArgs>> healthCheckConfig() {
        return Optional.ofNullable(this.healthCheckConfig);
    }

    /**
     * The configurations of Phase 1 negotiations.
     * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ike_config` below.
     * 
     */
    @Import(name="ikeConfig")
    private @Nullable Output<GatewayVpnAttachmentIkeConfigArgs> ikeConfig;

    /**
     * @return The configurations of Phase 1 negotiations.
     * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ike_config` below.
     * 
     */
    public Optional<Output<GatewayVpnAttachmentIkeConfigArgs>> ikeConfig() {
        return Optional.ofNullable(this.ikeConfig);
    }

    /**
     * Configuration negotiated in the second stage.
     * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsec_config` below.
     * 
     */
    @Import(name="ipsecConfig")
    private @Nullable Output<GatewayVpnAttachmentIpsecConfigArgs> ipsecConfig;

    /**
     * @return Configuration negotiated in the second stage.
     * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsec_config` below.
     * 
     */
    public Optional<Output<GatewayVpnAttachmentIpsecConfigArgs>> ipsecConfig() {
        return Optional.ofNullable(this.ipsecConfig);
    }

    /**
     * The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
     * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
     * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
     * 
     */
    @Import(name="localSubnet", required=true)
    private Output<String> localSubnet;

    /**
     * @return The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
     * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
     * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
     * 
     */
    public Output<String> localSubnet() {
        return this.localSubnet;
    }

    /**
     * network type
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return network type
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
     * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
     * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
     * 
     */
    @Import(name="remoteSubnet", required=true)
    private Output<String> remoteSubnet;

    /**
     * @return The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
     * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
     * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
     * 
     */
    public Output<String> remoteSubnet() {
        return this.remoteSubnet;
    }

    /**
     * The ID of the resource group
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Tags
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Configure the tunnel.
     * - You can configure parameters in the `tunnel_options_specification` array when you create a vpn attachment in dual-tunnel mode.
     * - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnel_options_specification` below.
     * 
     */
    @Import(name="tunnelOptionsSpecifications")
    private @Nullable Output<List<GatewayVpnAttachmentTunnelOptionsSpecificationArgs>> tunnelOptionsSpecifications;

    /**
     * @return Configure the tunnel.
     * - You can configure parameters in the `tunnel_options_specification` array when you create a vpn attachment in dual-tunnel mode.
     * - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnel_options_specification` below.
     * 
     */
    public Optional<Output<List<GatewayVpnAttachmentTunnelOptionsSpecificationArgs>>> tunnelOptionsSpecifications() {
        return Optional.ofNullable(this.tunnelOptionsSpecifications);
    }

    /**
     * vpn attachment name
     * 
     */
    @Import(name="vpnAttachmentName")
    private @Nullable Output<String> vpnAttachmentName;

    /**
     * @return vpn attachment name
     * 
     */
    public Optional<Output<String>> vpnAttachmentName() {
        return Optional.ofNullable(this.vpnAttachmentName);
    }

    private GatewayVpnAttachmentArgs() {}

    private GatewayVpnAttachmentArgs(GatewayVpnAttachmentArgs $) {
        this.bgpConfig = $.bgpConfig;
        this.customerGatewayId = $.customerGatewayId;
        this.effectImmediately = $.effectImmediately;
        this.enableDpd = $.enableDpd;
        this.enableNatTraversal = $.enableNatTraversal;
        this.enableTunnelsBgp = $.enableTunnelsBgp;
        this.healthCheckConfig = $.healthCheckConfig;
        this.ikeConfig = $.ikeConfig;
        this.ipsecConfig = $.ipsecConfig;
        this.localSubnet = $.localSubnet;
        this.networkType = $.networkType;
        this.remoteSubnet = $.remoteSubnet;
        this.resourceGroupId = $.resourceGroupId;
        this.tags = $.tags;
        this.tunnelOptionsSpecifications = $.tunnelOptionsSpecifications;
        this.vpnAttachmentName = $.vpnAttachmentName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayVpnAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayVpnAttachmentArgs $;

        public Builder() {
            $ = new GatewayVpnAttachmentArgs();
        }

        public Builder(GatewayVpnAttachmentArgs defaults) {
            $ = new GatewayVpnAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bgpConfig Bgp configuration information.
         * - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgp_config` below.
         * 
         * @return builder
         * 
         */
        public Builder bgpConfig(@Nullable Output<GatewayVpnAttachmentBgpConfigArgs> bgpConfig) {
            $.bgpConfig = bgpConfig;
            return this;
        }

        /**
         * @param bgpConfig Bgp configuration information.
         * - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgp_config` below.
         * 
         * @return builder
         * 
         */
        public Builder bgpConfig(GatewayVpnAttachmentBgpConfigArgs bgpConfig) {
            return bgpConfig(Output.of(bgpConfig));
        }

        /**
         * @param customerGatewayId Customer gateway ID.
         * - This parameter is required when creating a single-tunnel mode vpn attachment.
         * 
         * @return builder
         * 
         */
        public Builder customerGatewayId(@Nullable Output<String> customerGatewayId) {
            $.customerGatewayId = customerGatewayId;
            return this;
        }

        /**
         * @param customerGatewayId Customer gateway ID.
         * - This parameter is required when creating a single-tunnel mode vpn attachment.
         * 
         * @return builder
         * 
         */
        public Builder customerGatewayId(String customerGatewayId) {
            return customerGatewayId(Output.of(customerGatewayId));
        }

        /**
         * @param effectImmediately Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder effectImmediately(@Nullable Output<Boolean> effectImmediately) {
            $.effectImmediately = effectImmediately;
            return this;
        }

        /**
         * @param effectImmediately Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder effectImmediately(Boolean effectImmediately) {
            return effectImmediately(Output.of(effectImmediately));
        }

        /**
         * @param enableDpd This parameter is supported if you create an vpn attachment in single-tunnel mode.
         * Whether to enable the DPD (peer survival detection) function.
         * - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
         * - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
         * 
         * @return builder
         * 
         */
        public Builder enableDpd(@Nullable Output<Boolean> enableDpd) {
            $.enableDpd = enableDpd;
            return this;
        }

        /**
         * @param enableDpd This parameter is supported if you create an vpn attachment in single-tunnel mode.
         * Whether to enable the DPD (peer survival detection) function.
         * - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
         * - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
         * 
         * @return builder
         * 
         */
        public Builder enableDpd(Boolean enableDpd) {
            return enableDpd(Output.of(enableDpd));
        }

        /**
         * @param enableNatTraversal This parameter is supported if you create an vpn attachment in single-tunnel mode.
         * Specifies whether to enable NAT traversal. Valid values:
         * - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
         * - false: disables NAT traversal.
         * 
         * @return builder
         * 
         */
        public Builder enableNatTraversal(@Nullable Output<Boolean> enableNatTraversal) {
            $.enableNatTraversal = enableNatTraversal;
            return this;
        }

        /**
         * @param enableNatTraversal This parameter is supported if you create an vpn attachment in single-tunnel mode.
         * Specifies whether to enable NAT traversal. Valid values:
         * - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
         * - false: disables NAT traversal.
         * 
         * @return builder
         * 
         */
        public Builder enableNatTraversal(Boolean enableNatTraversal) {
            return enableNatTraversal(Output.of(enableNatTraversal));
        }

        /**
         * @param enableTunnelsBgp You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
         * 
         * &gt; **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
         * 
         * @return builder
         * 
         */
        public Builder enableTunnelsBgp(@Nullable Output<Boolean> enableTunnelsBgp) {
            $.enableTunnelsBgp = enableTunnelsBgp;
            return this;
        }

        /**
         * @param enableTunnelsBgp You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
         * 
         * &gt; **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
         * 
         * @return builder
         * 
         */
        public Builder enableTunnelsBgp(Boolean enableTunnelsBgp) {
            return enableTunnelsBgp(Output.of(enableTunnelsBgp));
        }

        /**
         * @param healthCheckConfig This parameter is supported if you create an vpn attachment in single-tunnel mode.
         * Health check configuration information. See `health_check_config` below.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConfig(@Nullable Output<GatewayVpnAttachmentHealthCheckConfigArgs> healthCheckConfig) {
            $.healthCheckConfig = healthCheckConfig;
            return this;
        }

        /**
         * @param healthCheckConfig This parameter is supported if you create an vpn attachment in single-tunnel mode.
         * Health check configuration information. See `health_check_config` below.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConfig(GatewayVpnAttachmentHealthCheckConfigArgs healthCheckConfig) {
            return healthCheckConfig(Output.of(healthCheckConfig));
        }

        /**
         * @param ikeConfig The configurations of Phase 1 negotiations.
         * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ike_config` below.
         * 
         * @return builder
         * 
         */
        public Builder ikeConfig(@Nullable Output<GatewayVpnAttachmentIkeConfigArgs> ikeConfig) {
            $.ikeConfig = ikeConfig;
            return this;
        }

        /**
         * @param ikeConfig The configurations of Phase 1 negotiations.
         * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ike_config` below.
         * 
         * @return builder
         * 
         */
        public Builder ikeConfig(GatewayVpnAttachmentIkeConfigArgs ikeConfig) {
            return ikeConfig(Output.of(ikeConfig));
        }

        /**
         * @param ipsecConfig Configuration negotiated in the second stage.
         * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsec_config` below.
         * 
         * @return builder
         * 
         */
        public Builder ipsecConfig(@Nullable Output<GatewayVpnAttachmentIpsecConfigArgs> ipsecConfig) {
            $.ipsecConfig = ipsecConfig;
            return this;
        }

        /**
         * @param ipsecConfig Configuration negotiated in the second stage.
         * - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsec_config` below.
         * 
         * @return builder
         * 
         */
        public Builder ipsecConfig(GatewayVpnAttachmentIpsecConfigArgs ipsecConfig) {
            return ipsecConfig(Output.of(ipsecConfig));
        }

        /**
         * @param localSubnet The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
         * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
         * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
         * 
         * @return builder
         * 
         */
        public Builder localSubnet(Output<String> localSubnet) {
            $.localSubnet = localSubnet;
            return this;
        }

        /**
         * @param localSubnet The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
         * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
         * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
         * 
         * @return builder
         * 
         */
        public Builder localSubnet(String localSubnet) {
            return localSubnet(Output.of(localSubnet));
        }

        /**
         * @param networkType network type
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType network type
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param remoteSubnet The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
         * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
         * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
         * 
         * @return builder
         * 
         */
        public Builder remoteSubnet(Output<String> remoteSubnet) {
            $.remoteSubnet = remoteSubnet;
            return this;
        }

        /**
         * @param remoteSubnet The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
         * - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
         * - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
         * 
         * @return builder
         * 
         */
        public Builder remoteSubnet(String remoteSubnet) {
            return remoteSubnet(Output.of(remoteSubnet));
        }

        /**
         * @param resourceGroupId The ID of the resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param tags Tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tunnelOptionsSpecifications Configure the tunnel.
         * - You can configure parameters in the `tunnel_options_specification` array when you create a vpn attachment in dual-tunnel mode.
         * - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnel_options_specification` below.
         * 
         * @return builder
         * 
         */
        public Builder tunnelOptionsSpecifications(@Nullable Output<List<GatewayVpnAttachmentTunnelOptionsSpecificationArgs>> tunnelOptionsSpecifications) {
            $.tunnelOptionsSpecifications = tunnelOptionsSpecifications;
            return this;
        }

        /**
         * @param tunnelOptionsSpecifications Configure the tunnel.
         * - You can configure parameters in the `tunnel_options_specification` array when you create a vpn attachment in dual-tunnel mode.
         * - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnel_options_specification` below.
         * 
         * @return builder
         * 
         */
        public Builder tunnelOptionsSpecifications(List<GatewayVpnAttachmentTunnelOptionsSpecificationArgs> tunnelOptionsSpecifications) {
            return tunnelOptionsSpecifications(Output.of(tunnelOptionsSpecifications));
        }

        /**
         * @param tunnelOptionsSpecifications Configure the tunnel.
         * - You can configure parameters in the `tunnel_options_specification` array when you create a vpn attachment in dual-tunnel mode.
         * - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnel_options_specification` below.
         * 
         * @return builder
         * 
         */
        public Builder tunnelOptionsSpecifications(GatewayVpnAttachmentTunnelOptionsSpecificationArgs... tunnelOptionsSpecifications) {
            return tunnelOptionsSpecifications(List.of(tunnelOptionsSpecifications));
        }

        /**
         * @param vpnAttachmentName vpn attachment name
         * 
         * @return builder
         * 
         */
        public Builder vpnAttachmentName(@Nullable Output<String> vpnAttachmentName) {
            $.vpnAttachmentName = vpnAttachmentName;
            return this;
        }

        /**
         * @param vpnAttachmentName vpn attachment name
         * 
         * @return builder
         * 
         */
        public Builder vpnAttachmentName(String vpnAttachmentName) {
            return vpnAttachmentName(Output.of(vpnAttachmentName));
        }

        public GatewayVpnAttachmentArgs build() {
            if ($.localSubnet == null) {
                throw new MissingRequiredPropertyException("GatewayVpnAttachmentArgs", "localSubnet");
            }
            if ($.remoteSubnet == null) {
                throw new MissingRequiredPropertyException("GatewayVpnAttachmentArgs", "remoteSubnet");
            }
            return $;
        }
    }

}
