// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V3TriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final V3TriggerArgs Empty = new V3TriggerArgs();

    /**
     * Description of the trigger
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the trigger
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Function Name
     * 
     */
    @Import(name="functionName", required=true)
    private Output<String> functionName;

    /**
     * @return Function Name
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }

    /**
     * The role required by the event source (such as OSS) to call the function.
     * 
     */
    @Import(name="invocationRole")
    private @Nullable Output<String> invocationRole;

    /**
     * @return The role required by the event source (such as OSS) to call the function.
     * 
     */
    public Optional<Output<String>> invocationRole() {
        return Optional.ofNullable(this.invocationRole);
    }

    /**
     * The version or alias of the function
     * 
     */
    @Import(name="qualifier", required=true)
    private Output<String> qualifier;

    /**
     * @return The version or alias of the function
     * 
     */
    public Output<String> qualifier() {
        return this.qualifier;
    }

    /**
     * Trigger Event source ARN
     * 
     */
    @Import(name="sourceArn")
    private @Nullable Output<String> sourceArn;

    /**
     * @return Trigger Event source ARN
     * 
     */
    public Optional<Output<String>> sourceArn() {
        return Optional.ofNullable(this.sourceArn);
    }

    /**
     * Trigger configuration. The configuration varies for different types of triggers.
     * 
     */
    @Import(name="triggerConfig")
    private @Nullable Output<String> triggerConfig;

    /**
     * @return Trigger configuration. The configuration varies for different types of triggers.
     * 
     */
    public Optional<Output<String>> triggerConfig() {
        return Optional.ofNullable(this.triggerConfig);
    }

    /**
     * Trigger Name
     * 
     */
    @Import(name="triggerName")
    private @Nullable Output<String> triggerName;

    /**
     * @return Trigger Name
     * 
     */
    public Optional<Output<String>> triggerName() {
        return Optional.ofNullable(this.triggerName);
    }

    /**
     * The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
     * 
     */
    @Import(name="triggerType", required=true)
    private Output<String> triggerType;

    /**
     * @return The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
     * 
     */
    public Output<String> triggerType() {
        return this.triggerType;
    }

    private V3TriggerArgs() {}

    private V3TriggerArgs(V3TriggerArgs $) {
        this.description = $.description;
        this.functionName = $.functionName;
        this.invocationRole = $.invocationRole;
        this.qualifier = $.qualifier;
        this.sourceArn = $.sourceArn;
        this.triggerConfig = $.triggerConfig;
        this.triggerName = $.triggerName;
        this.triggerType = $.triggerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V3TriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V3TriggerArgs $;

        public Builder() {
            $ = new V3TriggerArgs();
        }

        public Builder(V3TriggerArgs defaults) {
            $ = new V3TriggerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the trigger
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the trigger
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param functionName Function Name
         * 
         * @return builder
         * 
         */
        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName Function Name
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param invocationRole The role required by the event source (such as OSS) to call the function.
         * 
         * @return builder
         * 
         */
        public Builder invocationRole(@Nullable Output<String> invocationRole) {
            $.invocationRole = invocationRole;
            return this;
        }

        /**
         * @param invocationRole The role required by the event source (such as OSS) to call the function.
         * 
         * @return builder
         * 
         */
        public Builder invocationRole(String invocationRole) {
            return invocationRole(Output.of(invocationRole));
        }

        /**
         * @param qualifier The version or alias of the function
         * 
         * @return builder
         * 
         */
        public Builder qualifier(Output<String> qualifier) {
            $.qualifier = qualifier;
            return this;
        }

        /**
         * @param qualifier The version or alias of the function
         * 
         * @return builder
         * 
         */
        public Builder qualifier(String qualifier) {
            return qualifier(Output.of(qualifier));
        }

        /**
         * @param sourceArn Trigger Event source ARN
         * 
         * @return builder
         * 
         */
        public Builder sourceArn(@Nullable Output<String> sourceArn) {
            $.sourceArn = sourceArn;
            return this;
        }

        /**
         * @param sourceArn Trigger Event source ARN
         * 
         * @return builder
         * 
         */
        public Builder sourceArn(String sourceArn) {
            return sourceArn(Output.of(sourceArn));
        }

        /**
         * @param triggerConfig Trigger configuration. The configuration varies for different types of triggers.
         * 
         * @return builder
         * 
         */
        public Builder triggerConfig(@Nullable Output<String> triggerConfig) {
            $.triggerConfig = triggerConfig;
            return this;
        }

        /**
         * @param triggerConfig Trigger configuration. The configuration varies for different types of triggers.
         * 
         * @return builder
         * 
         */
        public Builder triggerConfig(String triggerConfig) {
            return triggerConfig(Output.of(triggerConfig));
        }

        /**
         * @param triggerName Trigger Name
         * 
         * @return builder
         * 
         */
        public Builder triggerName(@Nullable Output<String> triggerName) {
            $.triggerName = triggerName;
            return this;
        }

        /**
         * @param triggerName Trigger Name
         * 
         * @return builder
         * 
         */
        public Builder triggerName(String triggerName) {
            return triggerName(Output.of(triggerName));
        }

        /**
         * @param triggerType The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
         * 
         * @return builder
         * 
         */
        public Builder triggerType(Output<String> triggerType) {
            $.triggerType = triggerType;
            return this;
        }

        /**
         * @param triggerType The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
         * 
         * @return builder
         * 
         */
        public Builder triggerType(String triggerType) {
            return triggerType(Output.of(triggerType));
        }

        public V3TriggerArgs build() {
            if ($.functionName == null) {
                throw new MissingRequiredPropertyException("V3TriggerArgs", "functionName");
            }
            if ($.qualifier == null) {
                throw new MissingRequiredPropertyException("V3TriggerArgs", "qualifier");
            }
            if ($.triggerType == null) {
                throw new MissingRequiredPropertyException("V3TriggerArgs", "triggerType");
            }
            return $;
        }
    }

}
