// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTrafficMirrorSessionsSession {
    /**
     * @return Indicates whether traffic mirror sessions are enabled. default to `false`.
     * 
     */
    private Boolean enabled;
    /**
     * @return The ID of the Traffic Mirror Session.
     * 
     */
    private String id;
    /**
     * @return The maximum transmission unit (MTU).
     * 
     */
    private Integer packetLength;
    /**
     * @return The priority of the traffic mirror session. A smaller value indicates a higher priority.
     * 
     */
    private Integer priority;
    /**
     * @return The state of the traffic mirror session. Valid values: `Creating`, `Created`, `Modifying` and `Deleting`.
     * 
     */
    private String status;
    /**
     * @return The ID of the filter.
     * 
     */
    private String trafficMirrorFilterId;
    /**
     * @return The state of the traffic mirror session. Valid values: `Normal` or `FinancialLocked`. `Normal`: working as expected. `FinancialLocked`: locked due to overdue payments.
     * 
     */
    private String trafficMirrorSessionBusinessStatus;
    /**
     * @return The description of the traffic mirror session.
     * 
     */
    private String trafficMirrorSessionDescription;
    /**
     * @return The first ID of the resource.
     * 
     */
    private String trafficMirrorSessionId;
    /**
     * @return The name of the traffic mirror session.
     * 
     */
    private String trafficMirrorSessionName;
    /**
     * @return The ID of the mirror source.
     * 
     */
    private List<String> trafficMirrorSourceIds;
    /**
     * @return The ID of the mirror destination. You can specify only an ENI or a Server Load Balancer (SLB) instance as a mirror destination.
     * 
     */
    private String trafficMirrorTargetId;
    /**
     * @return The type of the mirror destination. Valid values: `NetworkInterface` or `SLB`. `NetworkInterface`: an ENI. `SLB`: an internal-facing SLB instance
     * 
     */
    private String trafficMirrorTargetType;
    /**
     * @return You can specify VNIs to distinguish different mirrored traffic.
     * 
     */
    private Integer virtualNetworkId;

    private GetTrafficMirrorSessionsSession() {}
    /**
     * @return Indicates whether traffic mirror sessions are enabled. default to `false`.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The ID of the Traffic Mirror Session.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The maximum transmission unit (MTU).
     * 
     */
    public Integer packetLength() {
        return this.packetLength;
    }
    /**
     * @return The priority of the traffic mirror session. A smaller value indicates a higher priority.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return The state of the traffic mirror session. Valid values: `Creating`, `Created`, `Modifying` and `Deleting`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The ID of the filter.
     * 
     */
    public String trafficMirrorFilterId() {
        return this.trafficMirrorFilterId;
    }
    /**
     * @return The state of the traffic mirror session. Valid values: `Normal` or `FinancialLocked`. `Normal`: working as expected. `FinancialLocked`: locked due to overdue payments.
     * 
     */
    public String trafficMirrorSessionBusinessStatus() {
        return this.trafficMirrorSessionBusinessStatus;
    }
    /**
     * @return The description of the traffic mirror session.
     * 
     */
    public String trafficMirrorSessionDescription() {
        return this.trafficMirrorSessionDescription;
    }
    /**
     * @return The first ID of the resource.
     * 
     */
    public String trafficMirrorSessionId() {
        return this.trafficMirrorSessionId;
    }
    /**
     * @return The name of the traffic mirror session.
     * 
     */
    public String trafficMirrorSessionName() {
        return this.trafficMirrorSessionName;
    }
    /**
     * @return The ID of the mirror source.
     * 
     */
    public List<String> trafficMirrorSourceIds() {
        return this.trafficMirrorSourceIds;
    }
    /**
     * @return The ID of the mirror destination. You can specify only an ENI or a Server Load Balancer (SLB) instance as a mirror destination.
     * 
     */
    public String trafficMirrorTargetId() {
        return this.trafficMirrorTargetId;
    }
    /**
     * @return The type of the mirror destination. Valid values: `NetworkInterface` or `SLB`. `NetworkInterface`: an ENI. `SLB`: an internal-facing SLB instance
     * 
     */
    public String trafficMirrorTargetType() {
        return this.trafficMirrorTargetType;
    }
    /**
     * @return You can specify VNIs to distinguish different mirrored traffic.
     * 
     */
    public Integer virtualNetworkId() {
        return this.virtualNetworkId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTrafficMirrorSessionsSession defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enabled;
        private String id;
        private Integer packetLength;
        private Integer priority;
        private String status;
        private String trafficMirrorFilterId;
        private String trafficMirrorSessionBusinessStatus;
        private String trafficMirrorSessionDescription;
        private String trafficMirrorSessionId;
        private String trafficMirrorSessionName;
        private List<String> trafficMirrorSourceIds;
        private String trafficMirrorTargetId;
        private String trafficMirrorTargetType;
        private Integer virtualNetworkId;
        public Builder() {}
        public Builder(GetTrafficMirrorSessionsSession defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.packetLength = defaults.packetLength;
    	      this.priority = defaults.priority;
    	      this.status = defaults.status;
    	      this.trafficMirrorFilterId = defaults.trafficMirrorFilterId;
    	      this.trafficMirrorSessionBusinessStatus = defaults.trafficMirrorSessionBusinessStatus;
    	      this.trafficMirrorSessionDescription = defaults.trafficMirrorSessionDescription;
    	      this.trafficMirrorSessionId = defaults.trafficMirrorSessionId;
    	      this.trafficMirrorSessionName = defaults.trafficMirrorSessionName;
    	      this.trafficMirrorSourceIds = defaults.trafficMirrorSourceIds;
    	      this.trafficMirrorTargetId = defaults.trafficMirrorTargetId;
    	      this.trafficMirrorTargetType = defaults.trafficMirrorTargetType;
    	      this.virtualNetworkId = defaults.virtualNetworkId;
        }

        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder packetLength(Integer packetLength) {
            this.packetLength = Objects.requireNonNull(packetLength);
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder trafficMirrorFilterId(String trafficMirrorFilterId) {
            this.trafficMirrorFilterId = Objects.requireNonNull(trafficMirrorFilterId);
            return this;
        }
        @CustomType.Setter
        public Builder trafficMirrorSessionBusinessStatus(String trafficMirrorSessionBusinessStatus) {
            this.trafficMirrorSessionBusinessStatus = Objects.requireNonNull(trafficMirrorSessionBusinessStatus);
            return this;
        }
        @CustomType.Setter
        public Builder trafficMirrorSessionDescription(String trafficMirrorSessionDescription) {
            this.trafficMirrorSessionDescription = Objects.requireNonNull(trafficMirrorSessionDescription);
            return this;
        }
        @CustomType.Setter
        public Builder trafficMirrorSessionId(String trafficMirrorSessionId) {
            this.trafficMirrorSessionId = Objects.requireNonNull(trafficMirrorSessionId);
            return this;
        }
        @CustomType.Setter
        public Builder trafficMirrorSessionName(String trafficMirrorSessionName) {
            this.trafficMirrorSessionName = Objects.requireNonNull(trafficMirrorSessionName);
            return this;
        }
        @CustomType.Setter
        public Builder trafficMirrorSourceIds(List<String> trafficMirrorSourceIds) {
            this.trafficMirrorSourceIds = Objects.requireNonNull(trafficMirrorSourceIds);
            return this;
        }
        public Builder trafficMirrorSourceIds(String... trafficMirrorSourceIds) {
            return trafficMirrorSourceIds(List.of(trafficMirrorSourceIds));
        }
        @CustomType.Setter
        public Builder trafficMirrorTargetId(String trafficMirrorTargetId) {
            this.trafficMirrorTargetId = Objects.requireNonNull(trafficMirrorTargetId);
            return this;
        }
        @CustomType.Setter
        public Builder trafficMirrorTargetType(String trafficMirrorTargetType) {
            this.trafficMirrorTargetType = Objects.requireNonNull(trafficMirrorTargetType);
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkId(Integer virtualNetworkId) {
            this.virtualNetworkId = Objects.requireNonNull(virtualNetworkId);
            return this;
        }
        public GetTrafficMirrorSessionsSession build() {
            final var o = new GetTrafficMirrorSessionsSession();
            o.enabled = enabled;
            o.id = id;
            o.packetLength = packetLength;
            o.priority = priority;
            o.status = status;
            o.trafficMirrorFilterId = trafficMirrorFilterId;
            o.trafficMirrorSessionBusinessStatus = trafficMirrorSessionBusinessStatus;
            o.trafficMirrorSessionDescription = trafficMirrorSessionDescription;
            o.trafficMirrorSessionId = trafficMirrorSessionId;
            o.trafficMirrorSessionName = trafficMirrorSessionName;
            o.trafficMirrorSourceIds = trafficMirrorSourceIds;
            o.trafficMirrorTargetId = trafficMirrorTargetId;
            o.trafficMirrorTargetType = trafficMirrorTargetType;
            o.virtualNetworkId = virtualNetworkId;
            return o;
        }
    }
}
