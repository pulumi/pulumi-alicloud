// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rocketmq.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnatEntryState extends com.pulumi.resources.ResourceArgs {

    public static final DnatEntryState Empty = new DnatEntryState();

    /**
     * The external public IP address.when &#34;type&#34; is &#34;Internet&#34;,automatically identify the external ip.
     * 
     */
    @Import(name="externalIp")
    private @Nullable Output<String> externalIp;

    /**
     * @return The external public IP address.when &#34;type&#34; is &#34;Internet&#34;,automatically identify the external ip.
     * 
     */
    public Optional<Output<String>> externalIp() {
        return Optional.ofNullable(this.externalIp);
    }

    /**
     * The public port.Value range: 1 to 65535 or &#34;any&#34;.
     * 
     */
    @Import(name="externalPort")
    private @Nullable Output<String> externalPort;

    /**
     * @return The public port.Value range: 1 to 65535 or &#34;any&#34;.
     * 
     */
    public Optional<Output<String>> externalPort() {
        return Optional.ofNullable(this.externalPort);
    }

    /**
     * The destination private IP address.
     * 
     */
    @Import(name="internalIp")
    private @Nullable Output<String> internalIp;

    /**
     * @return The destination private IP address.
     * 
     */
    public Optional<Output<String>> internalIp() {
        return Optional.ofNullable(this.internalIp);
    }

    /**
     * The destination private port.Value range: 1 to 65535 or &#34;any&#34;.
     * 
     */
    @Import(name="internalPort")
    private @Nullable Output<String> internalPort;

    /**
     * @return The destination private port.Value range: 1 to 65535 or &#34;any&#34;.
     * 
     */
    public Optional<Output<String>> internalPort() {
        return Optional.ofNullable(this.internalPort);
    }

    /**
     * The protocol type. Valid values: TCP: Forwards packets of the TCP protocol. UDP: Forwards packets of the UDP protocol. Any: Forwards packets of all protocols.
     * 
     */
    @Import(name="ipProtocol")
    private @Nullable Output<String> ipProtocol;

    /**
     * @return The protocol type. Valid values: TCP: Forwards packets of the TCP protocol. UDP: Forwards packets of the UDP protocol. Any: Forwards packets of all protocols.
     * 
     */
    public Optional<Output<String>> ipProtocol() {
        return Optional.ofNullable(this.ipProtocol);
    }

    /**
     * The ID of the SAG instance.
     * 
     */
    @Import(name="sagId")
    private @Nullable Output<String> sagId;

    /**
     * @return The ID of the SAG instance.
     * 
     */
    public Optional<Output<String>> sagId() {
        return Optional.ofNullable(this.sagId);
    }

    /**
     * The DNAT type. Valid values: Intranet: DNAT of private IP addresses. Internet: DNAT of public IP addresses
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The DNAT type. Valid values: Intranet: DNAT of private IP addresses. Internet: DNAT of public IP addresses
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DnatEntryState() {}

    private DnatEntryState(DnatEntryState $) {
        this.externalIp = $.externalIp;
        this.externalPort = $.externalPort;
        this.internalIp = $.internalIp;
        this.internalPort = $.internalPort;
        this.ipProtocol = $.ipProtocol;
        this.sagId = $.sagId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnatEntryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnatEntryState $;

        public Builder() {
            $ = new DnatEntryState();
        }

        public Builder(DnatEntryState defaults) {
            $ = new DnatEntryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalIp The external public IP address.when &#34;type&#34; is &#34;Internet&#34;,automatically identify the external ip.
         * 
         * @return builder
         * 
         */
        public Builder externalIp(@Nullable Output<String> externalIp) {
            $.externalIp = externalIp;
            return this;
        }

        /**
         * @param externalIp The external public IP address.when &#34;type&#34; is &#34;Internet&#34;,automatically identify the external ip.
         * 
         * @return builder
         * 
         */
        public Builder externalIp(String externalIp) {
            return externalIp(Output.of(externalIp));
        }

        /**
         * @param externalPort The public port.Value range: 1 to 65535 or &#34;any&#34;.
         * 
         * @return builder
         * 
         */
        public Builder externalPort(@Nullable Output<String> externalPort) {
            $.externalPort = externalPort;
            return this;
        }

        /**
         * @param externalPort The public port.Value range: 1 to 65535 or &#34;any&#34;.
         * 
         * @return builder
         * 
         */
        public Builder externalPort(String externalPort) {
            return externalPort(Output.of(externalPort));
        }

        /**
         * @param internalIp The destination private IP address.
         * 
         * @return builder
         * 
         */
        public Builder internalIp(@Nullable Output<String> internalIp) {
            $.internalIp = internalIp;
            return this;
        }

        /**
         * @param internalIp The destination private IP address.
         * 
         * @return builder
         * 
         */
        public Builder internalIp(String internalIp) {
            return internalIp(Output.of(internalIp));
        }

        /**
         * @param internalPort The destination private port.Value range: 1 to 65535 or &#34;any&#34;.
         * 
         * @return builder
         * 
         */
        public Builder internalPort(@Nullable Output<String> internalPort) {
            $.internalPort = internalPort;
            return this;
        }

        /**
         * @param internalPort The destination private port.Value range: 1 to 65535 or &#34;any&#34;.
         * 
         * @return builder
         * 
         */
        public Builder internalPort(String internalPort) {
            return internalPort(Output.of(internalPort));
        }

        /**
         * @param ipProtocol The protocol type. Valid values: TCP: Forwards packets of the TCP protocol. UDP: Forwards packets of the UDP protocol. Any: Forwards packets of all protocols.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(@Nullable Output<String> ipProtocol) {
            $.ipProtocol = ipProtocol;
            return this;
        }

        /**
         * @param ipProtocol The protocol type. Valid values: TCP: Forwards packets of the TCP protocol. UDP: Forwards packets of the UDP protocol. Any: Forwards packets of all protocols.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(String ipProtocol) {
            return ipProtocol(Output.of(ipProtocol));
        }

        /**
         * @param sagId The ID of the SAG instance.
         * 
         * @return builder
         * 
         */
        public Builder sagId(@Nullable Output<String> sagId) {
            $.sagId = sagId;
            return this;
        }

        /**
         * @param sagId The ID of the SAG instance.
         * 
         * @return builder
         * 
         */
        public Builder sagId(String sagId) {
            return sagId(Output.of(sagId));
        }

        /**
         * @param type The DNAT type. Valid values: Intranet: DNAT of private IP addresses. Internet: DNAT of public IP addresses
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The DNAT type. Valid values: Intranet: DNAT of private IP addresses. Internet: DNAT of public IP addresses
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DnatEntryState build() {
            return $;
        }
    }

}
