// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2FunctionCodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2FunctionCodeArgs Empty = new V2FunctionCodeArgs();

    /**
     * The OSS bucket name of the function code package.
     * 
     */
    @Import(name="ossBucketName")
    private @Nullable Output<String> ossBucketName;

    /**
     * @return The OSS bucket name of the function code package.
     * 
     */
    public Optional<Output<String>> ossBucketName() {
        return Optional.ofNullable(this.ossBucketName);
    }

    /**
     * The OSS object name of the function code package.
     * 
     */
    @Import(name="ossObjectName")
    private @Nullable Output<String> ossObjectName;

    /**
     * @return The OSS object name of the function code package.
     * 
     */
    public Optional<Output<String>> ossObjectName() {
        return Optional.ofNullable(this.ossObjectName);
    }

    /**
     * Upload the base64 encoding of the code zip package directly in the request body.
     * 
     */
    @Import(name="zipFile")
    private @Nullable Output<String> zipFile;

    /**
     * @return Upload the base64 encoding of the code zip package directly in the request body.
     * 
     */
    public Optional<Output<String>> zipFile() {
        return Optional.ofNullable(this.zipFile);
    }

    private V2FunctionCodeArgs() {}

    private V2FunctionCodeArgs(V2FunctionCodeArgs $) {
        this.ossBucketName = $.ossBucketName;
        this.ossObjectName = $.ossObjectName;
        this.zipFile = $.zipFile;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2FunctionCodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2FunctionCodeArgs $;

        public Builder() {
            $ = new V2FunctionCodeArgs();
        }

        public Builder(V2FunctionCodeArgs defaults) {
            $ = new V2FunctionCodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ossBucketName The OSS bucket name of the function code package.
         * 
         * @return builder
         * 
         */
        public Builder ossBucketName(@Nullable Output<String> ossBucketName) {
            $.ossBucketName = ossBucketName;
            return this;
        }

        /**
         * @param ossBucketName The OSS bucket name of the function code package.
         * 
         * @return builder
         * 
         */
        public Builder ossBucketName(String ossBucketName) {
            return ossBucketName(Output.of(ossBucketName));
        }

        /**
         * @param ossObjectName The OSS object name of the function code package.
         * 
         * @return builder
         * 
         */
        public Builder ossObjectName(@Nullable Output<String> ossObjectName) {
            $.ossObjectName = ossObjectName;
            return this;
        }

        /**
         * @param ossObjectName The OSS object name of the function code package.
         * 
         * @return builder
         * 
         */
        public Builder ossObjectName(String ossObjectName) {
            return ossObjectName(Output.of(ossObjectName));
        }

        /**
         * @param zipFile Upload the base64 encoding of the code zip package directly in the request body.
         * 
         * @return builder
         * 
         */
        public Builder zipFile(@Nullable Output<String> zipFile) {
            $.zipFile = zipFile;
            return this;
        }

        /**
         * @param zipFile Upload the base64 encoding of the code zip package directly in the request body.
         * 
         * @return builder
         * 
         */
        public Builder zipFile(String zipFile) {
            return zipFile(Output.of(zipFile));
        }

        public V2FunctionCodeArgs build() {
            return $;
        }
    }

}
