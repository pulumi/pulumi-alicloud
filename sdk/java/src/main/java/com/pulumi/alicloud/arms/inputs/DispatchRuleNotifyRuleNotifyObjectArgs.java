// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.arms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DispatchRuleNotifyRuleNotifyObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final DispatchRuleNotifyRuleNotifyObjectArgs Empty = new DispatchRuleNotifyRuleNotifyObjectArgs();

    /**
     * The name of the contact or contact group.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the contact or contact group.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The ID of the contact or contact group.
     * 
     */
    @Import(name="notifyObjectId", required=true)
    private Output<String> notifyObjectId;

    /**
     * @return The ID of the contact or contact group.
     * 
     */
    public Output<String> notifyObjectId() {
        return this.notifyObjectId;
    }

    /**
     * The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group.
     * 
     */
    @Import(name="notifyType", required=true)
    private Output<String> notifyType;

    /**
     * @return The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group.
     * 
     */
    public Output<String> notifyType() {
        return this.notifyType;
    }

    private DispatchRuleNotifyRuleNotifyObjectArgs() {}

    private DispatchRuleNotifyRuleNotifyObjectArgs(DispatchRuleNotifyRuleNotifyObjectArgs $) {
        this.name = $.name;
        this.notifyObjectId = $.notifyObjectId;
        this.notifyType = $.notifyType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DispatchRuleNotifyRuleNotifyObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DispatchRuleNotifyRuleNotifyObjectArgs $;

        public Builder() {
            $ = new DispatchRuleNotifyRuleNotifyObjectArgs();
        }

        public Builder(DispatchRuleNotifyRuleNotifyObjectArgs defaults) {
            $ = new DispatchRuleNotifyRuleNotifyObjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the contact or contact group.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the contact or contact group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifyObjectId The ID of the contact or contact group.
         * 
         * @return builder
         * 
         */
        public Builder notifyObjectId(Output<String> notifyObjectId) {
            $.notifyObjectId = notifyObjectId;
            return this;
        }

        /**
         * @param notifyObjectId The ID of the contact or contact group.
         * 
         * @return builder
         * 
         */
        public Builder notifyObjectId(String notifyObjectId) {
            return notifyObjectId(Output.of(notifyObjectId));
        }

        /**
         * @param notifyType The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group.
         * 
         * @return builder
         * 
         */
        public Builder notifyType(Output<String> notifyType) {
            $.notifyType = notifyType;
            return this;
        }

        /**
         * @param notifyType The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group.
         * 
         * @return builder
         * 
         */
        public Builder notifyType(String notifyType) {
            return notifyType(Output.of(notifyType));
        }

        public DispatchRuleNotifyRuleNotifyObjectArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DispatchRuleNotifyRuleNotifyObjectArgs", "name");
            }
            if ($.notifyObjectId == null) {
                throw new MissingRequiredPropertyException("DispatchRuleNotifyRuleNotifyObjectArgs", "notifyObjectId");
            }
            if ($.notifyType == null) {
                throw new MissingRequiredPropertyException("DispatchRuleNotifyRuleNotifyObjectArgs", "notifyType");
            }
            return $;
        }
    }

}
