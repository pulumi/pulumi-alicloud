// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChainChainConfigNodeNodeConfigDenyPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChainChainConfigNodeNodeConfigDenyPolicyArgs Empty = new ChainChainConfigNodeNodeConfigDenyPolicyArgs();

    /**
     * The action of trigger blocking. Valid values: `BLOCK`, `BLOCK_RETAG`, `BLOCK_DELETE_TAG`. While `Block` means block the delivery chain from continuing to execute, `BLOCK_RETAG` means block overwriting push image tag, `BLOCK_DELETE_TAG` means block deletion of mirror tags.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return The action of trigger blocking. Valid values: `BLOCK`, `BLOCK_RETAG`, `BLOCK_DELETE_TAG`. While `Block` means block the delivery chain from continuing to execute, `BLOCK_RETAG` means block overwriting push image tag, `BLOCK_DELETE_TAG` means block deletion of mirror tags.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The count of scanning vulnerabilities that triggers blocking.
     * 
     */
    @Import(name="issueCount")
    private @Nullable Output<String> issueCount;

    /**
     * @return The count of scanning vulnerabilities that triggers blocking.
     * 
     */
    public Optional<Output<String>> issueCount() {
        return Optional.ofNullable(this.issueCount);
    }

    /**
     * The level of scanning vulnerability that triggers blocking. Valid values: `LOW`, `MEDIUM`, `HIGH`, `UNKNOWN`.
     * 
     */
    @Import(name="issueLevel")
    private @Nullable Output<String> issueLevel;

    /**
     * @return The level of scanning vulnerability that triggers blocking. Valid values: `LOW`, `MEDIUM`, `HIGH`, `UNKNOWN`.
     * 
     */
    public Optional<Output<String>> issueLevel() {
        return Optional.ofNullable(this.issueLevel);
    }

    /**
     * The logic of trigger blocking. Valid values: `AND`, `OR`.
     * 
     */
    @Import(name="logic")
    private @Nullable Output<String> logic;

    /**
     * @return The logic of trigger blocking. Valid values: `AND`, `OR`.
     * 
     */
    public Optional<Output<String>> logic() {
        return Optional.ofNullable(this.logic);
    }

    private ChainChainConfigNodeNodeConfigDenyPolicyArgs() {}

    private ChainChainConfigNodeNodeConfigDenyPolicyArgs(ChainChainConfigNodeNodeConfigDenyPolicyArgs $) {
        this.action = $.action;
        this.issueCount = $.issueCount;
        this.issueLevel = $.issueLevel;
        this.logic = $.logic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChainChainConfigNodeNodeConfigDenyPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChainChainConfigNodeNodeConfigDenyPolicyArgs $;

        public Builder() {
            $ = new ChainChainConfigNodeNodeConfigDenyPolicyArgs();
        }

        public Builder(ChainChainConfigNodeNodeConfigDenyPolicyArgs defaults) {
            $ = new ChainChainConfigNodeNodeConfigDenyPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action of trigger blocking. Valid values: `BLOCK`, `BLOCK_RETAG`, `BLOCK_DELETE_TAG`. While `Block` means block the delivery chain from continuing to execute, `BLOCK_RETAG` means block overwriting push image tag, `BLOCK_DELETE_TAG` means block deletion of mirror tags.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action of trigger blocking. Valid values: `BLOCK`, `BLOCK_RETAG`, `BLOCK_DELETE_TAG`. While `Block` means block the delivery chain from continuing to execute, `BLOCK_RETAG` means block overwriting push image tag, `BLOCK_DELETE_TAG` means block deletion of mirror tags.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param issueCount The count of scanning vulnerabilities that triggers blocking.
         * 
         * @return builder
         * 
         */
        public Builder issueCount(@Nullable Output<String> issueCount) {
            $.issueCount = issueCount;
            return this;
        }

        /**
         * @param issueCount The count of scanning vulnerabilities that triggers blocking.
         * 
         * @return builder
         * 
         */
        public Builder issueCount(String issueCount) {
            return issueCount(Output.of(issueCount));
        }

        /**
         * @param issueLevel The level of scanning vulnerability that triggers blocking. Valid values: `LOW`, `MEDIUM`, `HIGH`, `UNKNOWN`.
         * 
         * @return builder
         * 
         */
        public Builder issueLevel(@Nullable Output<String> issueLevel) {
            $.issueLevel = issueLevel;
            return this;
        }

        /**
         * @param issueLevel The level of scanning vulnerability that triggers blocking. Valid values: `LOW`, `MEDIUM`, `HIGH`, `UNKNOWN`.
         * 
         * @return builder
         * 
         */
        public Builder issueLevel(String issueLevel) {
            return issueLevel(Output.of(issueLevel));
        }

        /**
         * @param logic The logic of trigger blocking. Valid values: `AND`, `OR`.
         * 
         * @return builder
         * 
         */
        public Builder logic(@Nullable Output<String> logic) {
            $.logic = logic;
            return this;
        }

        /**
         * @param logic The logic of trigger blocking. Valid values: `AND`, `OR`.
         * 
         * @return builder
         * 
         */
        public Builder logic(String logic) {
            return logic(Output.of(logic));
        }

        public ChainChainConfigNodeNodeConfigDenyPolicyArgs build() {
            return $;
        }
    }

}
