// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.outputs;

import com.pulumi.alicloud.cs.outputs.NodePoolKubeletConfigurationReservedMemory;
import com.pulumi.alicloud.cs.outputs.NodePoolKubeletConfigurationTracing;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodePoolKubeletConfiguration {
    /**
     * @return Allowed sysctl mode whitelist.
     * 
     */
    private @Nullable List<String> allowedUnsafeSysctls;
    /**
     * @return The list of IP addresses of the cluster DNS servers.
     * 
     */
    private @Nullable List<String> clusterDns;
    /**
     * @return The maximum number of log files that can exist in each container.
     * 
     */
    private @Nullable String containerLogMaxFiles;
    /**
     * @return The maximum size that can be reached before a log file is rotated.
     * 
     */
    private @Nullable String containerLogMaxSize;
    /**
     * @return Specifies the maximum number of concurrent workers required to perform log rotation operations.
     * 
     */
    private @Nullable String containerLogMaxWorkers;
    /**
     * @return Specifies the duration for which container logs are monitored for log rotation.
     * 
     */
    private @Nullable String containerLogMonitorInterval;
    /**
     * @return CPU CFS quota constraint switch.
     * 
     */
    private @Nullable String cpuCfsQuota;
    /**
     * @return CPU CFS quota period value.
     * 
     */
    private @Nullable String cpuCfsQuotaPeriod;
    /**
     * @return Same as cpuManagerPolicy. The name of the policy to use. Requires the CPUManager feature gate to be enabled. Valid value is `none` or `static`.
     * 
     */
    private @Nullable String cpuManagerPolicy;
    /**
     * @return Same as eventBurst. The maximum size of a burst of event creations, temporarily allows event creations to burst to this number, while still not exceeding `event_record_qps`. It is only used when `event_record_qps` is greater than 0. Valid value is `[0-100]`.
     * 
     */
    private @Nullable String eventBurst;
    /**
     * @return Same as eventRecordQPS. The maximum event creations per second. If 0, there is no limit enforced. Valid value is `[0-50]`.
     * 
     */
    private @Nullable String eventRecordQps;
    /**
     * @return Same as evictionHard. The map of signal names to quantities that defines hard eviction thresholds. For example: `{&#34;memory.available&#34; = &#34;300Mi&#34;}`.
     * 
     */
    private @Nullable Map<String,String> evictionHard;
    /**
     * @return Same as evictionSoft. The map of signal names to quantities that defines soft eviction thresholds. For example: `{&#34;memory.available&#34; = &#34;300Mi&#34;}`.
     * 
     */
    private @Nullable Map<String,String> evictionSoft;
    /**
     * @return Same as evictionSoftGracePeriod. The map of signal names to quantities that defines grace periods for each soft eviction signal. For example: `{&#34;memory.available&#34; = &#34;30s&#34;}`.
     * 
     */
    private @Nullable Map<String,String> evictionSoftGracePeriod;
    /**
     * @return Feature switch to enable configuration of experimental features.
     * 
     */
    private @Nullable Map<String,Boolean> featureGates;
    /**
     * @return If the image usage exceeds this threshold, image garbage collection will continue.
     * 
     */
    private @Nullable String imageGcHighThresholdPercent;
    /**
     * @return Image garbage collection is not performed when the image usage is below this threshold.
     * 
     */
    private @Nullable String imageGcLowThresholdPercent;
    /**
     * @return Same as kubeAPIBurst. The burst to allow while talking with kubernetes api-server. Valid value is `[0-100]`.
     * 
     */
    private @Nullable String kubeApiBurst;
    /**
     * @return Same as kubeAPIQPS. The QPS to use while talking with kubernetes api-server. Valid value is `[0-50]`.
     * 
     */
    private @Nullable String kubeApiQps;
    /**
     * @return Same as kubeReserved. The set of ResourceName=ResourceQuantity (e.g. cpu=200m,memory=150G) pairs that describe resources reserved for kubernetes system components. Currently, cpu, memory and local storage for root file system are supported. See [compute resources](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) for more details.
     * 
     */
    private @Nullable Map<String,String> kubeReserved;
    /**
     * @return The maximum number of running pods.
     * 
     */
    private @Nullable String maxPods;
    /**
     * @return The policy to be used by the memory manager.
     * 
     */
    private @Nullable String memoryManagerPolicy;
    /**
     * @return The maximum number of PIDs that can be used in a Pod.
     * 
     */
    private @Nullable String podPidsLimit;
    /**
     * @return Read-only port number.
     * 
     */
    private @Nullable String readOnlyPort;
    /**
     * @return Same as registryBurst. The maximum size of burst pulls, temporarily allows pulls to burst to this number, while still not exceeding `registry_pull_qps`. Only used if `registry_pull_qps` is greater than 0. Valid value is `[0-100]`.
     * 
     */
    private @Nullable String registryBurst;
    /**
     * @return Same as registryPullQPS. The limit of registry pulls per second. Setting it to `0` means no limit. Valid value is `[0-50]`.
     * 
     */
    private @Nullable String registryPullQps;
    /**
     * @return Reserve memory for NUMA nodes. See `reserved_memory` below.
     * 
     */
    private @Nullable List<NodePoolKubeletConfigurationReservedMemory> reservedMemories;
    /**
     * @return Same as serializeImagePulls. When enabled, it tells the Kubelet to pull images one at a time. We recommend not changing the default value on nodes that run docker daemon with version &lt; 1.9 or an Aufs storage backend. Valid value is `true` or `false`.
     * 
     */
    private @Nullable String serializeImagePulls;
    /**
     * @return Same as systemReserved. The set of ResourceName=ResourceQuantity (e.g. cpu=200m,memory=150G) pairs that describe resources reserved for non-kubernetes components. Currently, only cpu and memory are supported. See [compute resources](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) for more details.
     * 
     */
    private @Nullable Map<String,String> systemReserved;
    /**
     * @return Name of the Topology Manager policy used.
     * 
     */
    private @Nullable String topologyManagerPolicy;
    /**
     * @return OpenTelemetry tracks the configuration information for client settings versioning. See `tracing` below.
     * 
     */
    private @Nullable NodePoolKubeletConfigurationTracing tracing;

    private NodePoolKubeletConfiguration() {}
    /**
     * @return Allowed sysctl mode whitelist.
     * 
     */
    public List<String> allowedUnsafeSysctls() {
        return this.allowedUnsafeSysctls == null ? List.of() : this.allowedUnsafeSysctls;
    }
    /**
     * @return The list of IP addresses of the cluster DNS servers.
     * 
     */
    public List<String> clusterDns() {
        return this.clusterDns == null ? List.of() : this.clusterDns;
    }
    /**
     * @return The maximum number of log files that can exist in each container.
     * 
     */
    public Optional<String> containerLogMaxFiles() {
        return Optional.ofNullable(this.containerLogMaxFiles);
    }
    /**
     * @return The maximum size that can be reached before a log file is rotated.
     * 
     */
    public Optional<String> containerLogMaxSize() {
        return Optional.ofNullable(this.containerLogMaxSize);
    }
    /**
     * @return Specifies the maximum number of concurrent workers required to perform log rotation operations.
     * 
     */
    public Optional<String> containerLogMaxWorkers() {
        return Optional.ofNullable(this.containerLogMaxWorkers);
    }
    /**
     * @return Specifies the duration for which container logs are monitored for log rotation.
     * 
     */
    public Optional<String> containerLogMonitorInterval() {
        return Optional.ofNullable(this.containerLogMonitorInterval);
    }
    /**
     * @return CPU CFS quota constraint switch.
     * 
     */
    public Optional<String> cpuCfsQuota() {
        return Optional.ofNullable(this.cpuCfsQuota);
    }
    /**
     * @return CPU CFS quota period value.
     * 
     */
    public Optional<String> cpuCfsQuotaPeriod() {
        return Optional.ofNullable(this.cpuCfsQuotaPeriod);
    }
    /**
     * @return Same as cpuManagerPolicy. The name of the policy to use. Requires the CPUManager feature gate to be enabled. Valid value is `none` or `static`.
     * 
     */
    public Optional<String> cpuManagerPolicy() {
        return Optional.ofNullable(this.cpuManagerPolicy);
    }
    /**
     * @return Same as eventBurst. The maximum size of a burst of event creations, temporarily allows event creations to burst to this number, while still not exceeding `event_record_qps`. It is only used when `event_record_qps` is greater than 0. Valid value is `[0-100]`.
     * 
     */
    public Optional<String> eventBurst() {
        return Optional.ofNullable(this.eventBurst);
    }
    /**
     * @return Same as eventRecordQPS. The maximum event creations per second. If 0, there is no limit enforced. Valid value is `[0-50]`.
     * 
     */
    public Optional<String> eventRecordQps() {
        return Optional.ofNullable(this.eventRecordQps);
    }
    /**
     * @return Same as evictionHard. The map of signal names to quantities that defines hard eviction thresholds. For example: `{&#34;memory.available&#34; = &#34;300Mi&#34;}`.
     * 
     */
    public Map<String,String> evictionHard() {
        return this.evictionHard == null ? Map.of() : this.evictionHard;
    }
    /**
     * @return Same as evictionSoft. The map of signal names to quantities that defines soft eviction thresholds. For example: `{&#34;memory.available&#34; = &#34;300Mi&#34;}`.
     * 
     */
    public Map<String,String> evictionSoft() {
        return this.evictionSoft == null ? Map.of() : this.evictionSoft;
    }
    /**
     * @return Same as evictionSoftGracePeriod. The map of signal names to quantities that defines grace periods for each soft eviction signal. For example: `{&#34;memory.available&#34; = &#34;30s&#34;}`.
     * 
     */
    public Map<String,String> evictionSoftGracePeriod() {
        return this.evictionSoftGracePeriod == null ? Map.of() : this.evictionSoftGracePeriod;
    }
    /**
     * @return Feature switch to enable configuration of experimental features.
     * 
     */
    public Map<String,Boolean> featureGates() {
        return this.featureGates == null ? Map.of() : this.featureGates;
    }
    /**
     * @return If the image usage exceeds this threshold, image garbage collection will continue.
     * 
     */
    public Optional<String> imageGcHighThresholdPercent() {
        return Optional.ofNullable(this.imageGcHighThresholdPercent);
    }
    /**
     * @return Image garbage collection is not performed when the image usage is below this threshold.
     * 
     */
    public Optional<String> imageGcLowThresholdPercent() {
        return Optional.ofNullable(this.imageGcLowThresholdPercent);
    }
    /**
     * @return Same as kubeAPIBurst. The burst to allow while talking with kubernetes api-server. Valid value is `[0-100]`.
     * 
     */
    public Optional<String> kubeApiBurst() {
        return Optional.ofNullable(this.kubeApiBurst);
    }
    /**
     * @return Same as kubeAPIQPS. The QPS to use while talking with kubernetes api-server. Valid value is `[0-50]`.
     * 
     */
    public Optional<String> kubeApiQps() {
        return Optional.ofNullable(this.kubeApiQps);
    }
    /**
     * @return Same as kubeReserved. The set of ResourceName=ResourceQuantity (e.g. cpu=200m,memory=150G) pairs that describe resources reserved for kubernetes system components. Currently, cpu, memory and local storage for root file system are supported. See [compute resources](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) for more details.
     * 
     */
    public Map<String,String> kubeReserved() {
        return this.kubeReserved == null ? Map.of() : this.kubeReserved;
    }
    /**
     * @return The maximum number of running pods.
     * 
     */
    public Optional<String> maxPods() {
        return Optional.ofNullable(this.maxPods);
    }
    /**
     * @return The policy to be used by the memory manager.
     * 
     */
    public Optional<String> memoryManagerPolicy() {
        return Optional.ofNullable(this.memoryManagerPolicy);
    }
    /**
     * @return The maximum number of PIDs that can be used in a Pod.
     * 
     */
    public Optional<String> podPidsLimit() {
        return Optional.ofNullable(this.podPidsLimit);
    }
    /**
     * @return Read-only port number.
     * 
     */
    public Optional<String> readOnlyPort() {
        return Optional.ofNullable(this.readOnlyPort);
    }
    /**
     * @return Same as registryBurst. The maximum size of burst pulls, temporarily allows pulls to burst to this number, while still not exceeding `registry_pull_qps`. Only used if `registry_pull_qps` is greater than 0. Valid value is `[0-100]`.
     * 
     */
    public Optional<String> registryBurst() {
        return Optional.ofNullable(this.registryBurst);
    }
    /**
     * @return Same as registryPullQPS. The limit of registry pulls per second. Setting it to `0` means no limit. Valid value is `[0-50]`.
     * 
     */
    public Optional<String> registryPullQps() {
        return Optional.ofNullable(this.registryPullQps);
    }
    /**
     * @return Reserve memory for NUMA nodes. See `reserved_memory` below.
     * 
     */
    public List<NodePoolKubeletConfigurationReservedMemory> reservedMemories() {
        return this.reservedMemories == null ? List.of() : this.reservedMemories;
    }
    /**
     * @return Same as serializeImagePulls. When enabled, it tells the Kubelet to pull images one at a time. We recommend not changing the default value on nodes that run docker daemon with version &lt; 1.9 or an Aufs storage backend. Valid value is `true` or `false`.
     * 
     */
    public Optional<String> serializeImagePulls() {
        return Optional.ofNullable(this.serializeImagePulls);
    }
    /**
     * @return Same as systemReserved. The set of ResourceName=ResourceQuantity (e.g. cpu=200m,memory=150G) pairs that describe resources reserved for non-kubernetes components. Currently, only cpu and memory are supported. See [compute resources](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) for more details.
     * 
     */
    public Map<String,String> systemReserved() {
        return this.systemReserved == null ? Map.of() : this.systemReserved;
    }
    /**
     * @return Name of the Topology Manager policy used.
     * 
     */
    public Optional<String> topologyManagerPolicy() {
        return Optional.ofNullable(this.topologyManagerPolicy);
    }
    /**
     * @return OpenTelemetry tracks the configuration information for client settings versioning. See `tracing` below.
     * 
     */
    public Optional<NodePoolKubeletConfigurationTracing> tracing() {
        return Optional.ofNullable(this.tracing);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodePoolKubeletConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allowedUnsafeSysctls;
        private @Nullable List<String> clusterDns;
        private @Nullable String containerLogMaxFiles;
        private @Nullable String containerLogMaxSize;
        private @Nullable String containerLogMaxWorkers;
        private @Nullable String containerLogMonitorInterval;
        private @Nullable String cpuCfsQuota;
        private @Nullable String cpuCfsQuotaPeriod;
        private @Nullable String cpuManagerPolicy;
        private @Nullable String eventBurst;
        private @Nullable String eventRecordQps;
        private @Nullable Map<String,String> evictionHard;
        private @Nullable Map<String,String> evictionSoft;
        private @Nullable Map<String,String> evictionSoftGracePeriod;
        private @Nullable Map<String,Boolean> featureGates;
        private @Nullable String imageGcHighThresholdPercent;
        private @Nullable String imageGcLowThresholdPercent;
        private @Nullable String kubeApiBurst;
        private @Nullable String kubeApiQps;
        private @Nullable Map<String,String> kubeReserved;
        private @Nullable String maxPods;
        private @Nullable String memoryManagerPolicy;
        private @Nullable String podPidsLimit;
        private @Nullable String readOnlyPort;
        private @Nullable String registryBurst;
        private @Nullable String registryPullQps;
        private @Nullable List<NodePoolKubeletConfigurationReservedMemory> reservedMemories;
        private @Nullable String serializeImagePulls;
        private @Nullable Map<String,String> systemReserved;
        private @Nullable String topologyManagerPolicy;
        private @Nullable NodePoolKubeletConfigurationTracing tracing;
        public Builder() {}
        public Builder(NodePoolKubeletConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedUnsafeSysctls = defaults.allowedUnsafeSysctls;
    	      this.clusterDns = defaults.clusterDns;
    	      this.containerLogMaxFiles = defaults.containerLogMaxFiles;
    	      this.containerLogMaxSize = defaults.containerLogMaxSize;
    	      this.containerLogMaxWorkers = defaults.containerLogMaxWorkers;
    	      this.containerLogMonitorInterval = defaults.containerLogMonitorInterval;
    	      this.cpuCfsQuota = defaults.cpuCfsQuota;
    	      this.cpuCfsQuotaPeriod = defaults.cpuCfsQuotaPeriod;
    	      this.cpuManagerPolicy = defaults.cpuManagerPolicy;
    	      this.eventBurst = defaults.eventBurst;
    	      this.eventRecordQps = defaults.eventRecordQps;
    	      this.evictionHard = defaults.evictionHard;
    	      this.evictionSoft = defaults.evictionSoft;
    	      this.evictionSoftGracePeriod = defaults.evictionSoftGracePeriod;
    	      this.featureGates = defaults.featureGates;
    	      this.imageGcHighThresholdPercent = defaults.imageGcHighThresholdPercent;
    	      this.imageGcLowThresholdPercent = defaults.imageGcLowThresholdPercent;
    	      this.kubeApiBurst = defaults.kubeApiBurst;
    	      this.kubeApiQps = defaults.kubeApiQps;
    	      this.kubeReserved = defaults.kubeReserved;
    	      this.maxPods = defaults.maxPods;
    	      this.memoryManagerPolicy = defaults.memoryManagerPolicy;
    	      this.podPidsLimit = defaults.podPidsLimit;
    	      this.readOnlyPort = defaults.readOnlyPort;
    	      this.registryBurst = defaults.registryBurst;
    	      this.registryPullQps = defaults.registryPullQps;
    	      this.reservedMemories = defaults.reservedMemories;
    	      this.serializeImagePulls = defaults.serializeImagePulls;
    	      this.systemReserved = defaults.systemReserved;
    	      this.topologyManagerPolicy = defaults.topologyManagerPolicy;
    	      this.tracing = defaults.tracing;
        }

        @CustomType.Setter
        public Builder allowedUnsafeSysctls(@Nullable List<String> allowedUnsafeSysctls) {

            this.allowedUnsafeSysctls = allowedUnsafeSysctls;
            return this;
        }
        public Builder allowedUnsafeSysctls(String... allowedUnsafeSysctls) {
            return allowedUnsafeSysctls(List.of(allowedUnsafeSysctls));
        }
        @CustomType.Setter
        public Builder clusterDns(@Nullable List<String> clusterDns) {

            this.clusterDns = clusterDns;
            return this;
        }
        public Builder clusterDns(String... clusterDns) {
            return clusterDns(List.of(clusterDns));
        }
        @CustomType.Setter
        public Builder containerLogMaxFiles(@Nullable String containerLogMaxFiles) {

            this.containerLogMaxFiles = containerLogMaxFiles;
            return this;
        }
        @CustomType.Setter
        public Builder containerLogMaxSize(@Nullable String containerLogMaxSize) {

            this.containerLogMaxSize = containerLogMaxSize;
            return this;
        }
        @CustomType.Setter
        public Builder containerLogMaxWorkers(@Nullable String containerLogMaxWorkers) {

            this.containerLogMaxWorkers = containerLogMaxWorkers;
            return this;
        }
        @CustomType.Setter
        public Builder containerLogMonitorInterval(@Nullable String containerLogMonitorInterval) {

            this.containerLogMonitorInterval = containerLogMonitorInterval;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCfsQuota(@Nullable String cpuCfsQuota) {

            this.cpuCfsQuota = cpuCfsQuota;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCfsQuotaPeriod(@Nullable String cpuCfsQuotaPeriod) {

            this.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder cpuManagerPolicy(@Nullable String cpuManagerPolicy) {

            this.cpuManagerPolicy = cpuManagerPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder eventBurst(@Nullable String eventBurst) {

            this.eventBurst = eventBurst;
            return this;
        }
        @CustomType.Setter
        public Builder eventRecordQps(@Nullable String eventRecordQps) {

            this.eventRecordQps = eventRecordQps;
            return this;
        }
        @CustomType.Setter
        public Builder evictionHard(@Nullable Map<String,String> evictionHard) {

            this.evictionHard = evictionHard;
            return this;
        }
        @CustomType.Setter
        public Builder evictionSoft(@Nullable Map<String,String> evictionSoft) {

            this.evictionSoft = evictionSoft;
            return this;
        }
        @CustomType.Setter
        public Builder evictionSoftGracePeriod(@Nullable Map<String,String> evictionSoftGracePeriod) {

            this.evictionSoftGracePeriod = evictionSoftGracePeriod;
            return this;
        }
        @CustomType.Setter
        public Builder featureGates(@Nullable Map<String,Boolean> featureGates) {

            this.featureGates = featureGates;
            return this;
        }
        @CustomType.Setter
        public Builder imageGcHighThresholdPercent(@Nullable String imageGcHighThresholdPercent) {

            this.imageGcHighThresholdPercent = imageGcHighThresholdPercent;
            return this;
        }
        @CustomType.Setter
        public Builder imageGcLowThresholdPercent(@Nullable String imageGcLowThresholdPercent) {

            this.imageGcLowThresholdPercent = imageGcLowThresholdPercent;
            return this;
        }
        @CustomType.Setter
        public Builder kubeApiBurst(@Nullable String kubeApiBurst) {

            this.kubeApiBurst = kubeApiBurst;
            return this;
        }
        @CustomType.Setter
        public Builder kubeApiQps(@Nullable String kubeApiQps) {

            this.kubeApiQps = kubeApiQps;
            return this;
        }
        @CustomType.Setter
        public Builder kubeReserved(@Nullable Map<String,String> kubeReserved) {

            this.kubeReserved = kubeReserved;
            return this;
        }
        @CustomType.Setter
        public Builder maxPods(@Nullable String maxPods) {

            this.maxPods = maxPods;
            return this;
        }
        @CustomType.Setter
        public Builder memoryManagerPolicy(@Nullable String memoryManagerPolicy) {

            this.memoryManagerPolicy = memoryManagerPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder podPidsLimit(@Nullable String podPidsLimit) {

            this.podPidsLimit = podPidsLimit;
            return this;
        }
        @CustomType.Setter
        public Builder readOnlyPort(@Nullable String readOnlyPort) {

            this.readOnlyPort = readOnlyPort;
            return this;
        }
        @CustomType.Setter
        public Builder registryBurst(@Nullable String registryBurst) {

            this.registryBurst = registryBurst;
            return this;
        }
        @CustomType.Setter
        public Builder registryPullQps(@Nullable String registryPullQps) {

            this.registryPullQps = registryPullQps;
            return this;
        }
        @CustomType.Setter
        public Builder reservedMemories(@Nullable List<NodePoolKubeletConfigurationReservedMemory> reservedMemories) {

            this.reservedMemories = reservedMemories;
            return this;
        }
        public Builder reservedMemories(NodePoolKubeletConfigurationReservedMemory... reservedMemories) {
            return reservedMemories(List.of(reservedMemories));
        }
        @CustomType.Setter
        public Builder serializeImagePulls(@Nullable String serializeImagePulls) {

            this.serializeImagePulls = serializeImagePulls;
            return this;
        }
        @CustomType.Setter
        public Builder systemReserved(@Nullable Map<String,String> systemReserved) {

            this.systemReserved = systemReserved;
            return this;
        }
        @CustomType.Setter
        public Builder topologyManagerPolicy(@Nullable String topologyManagerPolicy) {

            this.topologyManagerPolicy = topologyManagerPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder tracing(@Nullable NodePoolKubeletConfigurationTracing tracing) {

            this.tracing = tracing;
            return this;
        }
        public NodePoolKubeletConfiguration build() {
            final var _resultValue = new NodePoolKubeletConfiguration();
            _resultValue.allowedUnsafeSysctls = allowedUnsafeSysctls;
            _resultValue.clusterDns = clusterDns;
            _resultValue.containerLogMaxFiles = containerLogMaxFiles;
            _resultValue.containerLogMaxSize = containerLogMaxSize;
            _resultValue.containerLogMaxWorkers = containerLogMaxWorkers;
            _resultValue.containerLogMonitorInterval = containerLogMonitorInterval;
            _resultValue.cpuCfsQuota = cpuCfsQuota;
            _resultValue.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            _resultValue.cpuManagerPolicy = cpuManagerPolicy;
            _resultValue.eventBurst = eventBurst;
            _resultValue.eventRecordQps = eventRecordQps;
            _resultValue.evictionHard = evictionHard;
            _resultValue.evictionSoft = evictionSoft;
            _resultValue.evictionSoftGracePeriod = evictionSoftGracePeriod;
            _resultValue.featureGates = featureGates;
            _resultValue.imageGcHighThresholdPercent = imageGcHighThresholdPercent;
            _resultValue.imageGcLowThresholdPercent = imageGcLowThresholdPercent;
            _resultValue.kubeApiBurst = kubeApiBurst;
            _resultValue.kubeApiQps = kubeApiQps;
            _resultValue.kubeReserved = kubeReserved;
            _resultValue.maxPods = maxPods;
            _resultValue.memoryManagerPolicy = memoryManagerPolicy;
            _resultValue.podPidsLimit = podPidsLimit;
            _resultValue.readOnlyPort = readOnlyPort;
            _resultValue.registryBurst = registryBurst;
            _resultValue.registryPullQps = registryPullQps;
            _resultValue.reservedMemories = reservedMemories;
            _resultValue.serializeImagePulls = serializeImagePulls;
            _resultValue.systemReserved = systemReserved;
            _resultValue.topologyManagerPolicy = topologyManagerPolicy;
            _resultValue.tracing = tracing;
            return _resultValue;
        }
    }
}
