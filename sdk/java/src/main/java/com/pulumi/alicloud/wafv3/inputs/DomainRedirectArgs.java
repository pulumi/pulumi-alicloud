// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.wafv3.inputs;

import com.pulumi.alicloud.wafv3.inputs.DomainRedirectRequestHeaderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainRedirectArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainRedirectArgs Empty = new DomainRedirectArgs();

    /**
     * The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
     * 
     * - If you specify IP addresses, specify the value in the **\[&#34;ip1&#34;,&#34;ip2&#34;,...]** format. You can enter up to 20 IP addresses.
     * - If you specify domain names, specify the value in the **\[&#34;domain&#34;]** format. You can enter up to 20 domain names.
     * 
     */
    @Import(name="backends")
    private @Nullable Output<List<String>> backends;

    /**
     * @return The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
     * 
     * - If you specify IP addresses, specify the value in the **\[&#34;ip1&#34;,&#34;ip2&#34;,...]** format. You can enter up to 20 IP addresses.
     * - If you specify domain names, specify the value in the **\[&#34;domain&#34;]** format. You can enter up to 20 domain names.
     * 
     */
    public Optional<Output<List<String>>> backends() {
        return Optional.ofNullable(this.backends);
    }

    /**
     * The secondary IP address or domain name of the origin server.
     * 
     */
    @Import(name="backupBackends")
    private @Nullable Output<List<String>> backupBackends;

    /**
     * @return The secondary IP address or domain name of the origin server.
     * 
     */
    public Optional<Output<List<String>>> backupBackends() {
        return Optional.ofNullable(this.backupBackends);
    }

    /**
     * Connection timeout duration. Unit: seconds.
     * Value range: 1~3600. Default value: 5.
     * 
     */
    @Import(name="connectTimeout")
    private @Nullable Output<Integer> connectTimeout;

    /**
     * @return Connection timeout duration. Unit: seconds.
     * Value range: 1~3600. Default value: 5.
     * 
     */
    public Optional<Output<Integer>> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }

    /**
     * Specifies whether to enable force redirect from HTTPS to HTTP for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    @Import(name="focusHttpBackend")
    private @Nullable Output<Boolean> focusHttpBackend;

    /**
     * @return Specifies whether to enable force redirect from HTTPS to HTTP for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    public Optional<Output<Boolean>> focusHttpBackend() {
        return Optional.ofNullable(this.focusHttpBackend);
    }

    /**
     * Specifies whether to enable the persistent connection feature. Valid values:
     * 
     */
    @Import(name="keepalive")
    private @Nullable Output<Boolean> keepalive;

    /**
     * @return Specifies whether to enable the persistent connection feature. Valid values:
     * 
     */
    public Optional<Output<Boolean>> keepalive() {
        return Optional.ofNullable(this.keepalive);
    }

    /**
     * The number of reused persistent connections. Valid values: 60 to 1000. Default value: 1000
     * 
     * &gt; **NOTE:**   This parameter specifies the number of persistent connections that can be reused after you enable the persistent connection feature.
     * 
     */
    @Import(name="keepaliveRequests")
    private @Nullable Output<Integer> keepaliveRequests;

    /**
     * @return The number of reused persistent connections. Valid values: 60 to 1000. Default value: 1000
     * 
     * &gt; **NOTE:**   This parameter specifies the number of persistent connections that can be reused after you enable the persistent connection feature.
     * 
     */
    public Optional<Output<Integer>> keepaliveRequests() {
        return Optional.ofNullable(this.keepaliveRequests);
    }

    /**
     * Idle long connection timeout, value range: 1~60, default 15, unit: seconds.
     * 
     * &gt; **NOTE:**  How long the multiplexed long connection is idle and then released.
     * 
     */
    @Import(name="keepaliveTimeout")
    private @Nullable Output<Integer> keepaliveTimeout;

    /**
     * @return Idle long connection timeout, value range: 1~60, default 15, unit: seconds.
     * 
     * &gt; **NOTE:**  How long the multiplexed long connection is idle and then released.
     * 
     */
    public Optional<Output<Integer>> keepaliveTimeout() {
        return Optional.ofNullable(this.keepaliveTimeout);
    }

    /**
     * The load balancing algorithm that you want to use to forward requests to the origin server. Valid values:
     * 
     */
    @Import(name="loadbalance", required=true)
    private Output<String> loadbalance;

    /**
     * @return The load balancing algorithm that you want to use to forward requests to the origin server. Valid values:
     * 
     */
    public Output<String> loadbalance() {
        return this.loadbalance;
    }

    /**
     * The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
     * 
     */
    @Import(name="readTimeout")
    private @Nullable Output<Integer> readTimeout;

    /**
     * @return The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
     * 
     */
    public Optional<Output<Integer>> readTimeout() {
        return Optional.ofNullable(this.readTimeout);
    }

    /**
     * The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
     * By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `request_headers` below.
     * 
     */
    @Import(name="requestHeaders")
    private @Nullable Output<List<DomainRedirectRequestHeaderArgs>> requestHeaders;

    /**
     * @return The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
     * By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `request_headers` below.
     * 
     */
    public Optional<Output<List<DomainRedirectRequestHeaderArgs>>> requestHeaders() {
        return Optional.ofNullable(this.requestHeaders);
    }

    /**
     * Specifies whether WAF retries if WAF fails to forward requests to the origin server. Valid values:
     * 
     */
    @Import(name="retry")
    private @Nullable Output<Boolean> retry;

    /**
     * @return Specifies whether WAF retries if WAF fails to forward requests to the origin server. Valid values:
     * 
     */
    public Optional<Output<Boolean>> retry() {
        return Optional.ofNullable(this.retry);
    }

    /**
     * Specifies whether to enable the Server Name Indication (SNI) feature for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    @Import(name="sniEnabled")
    private @Nullable Output<Boolean> sniEnabled;

    /**
     * @return Specifies whether to enable the Server Name Indication (SNI) feature for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
     * 
     */
    public Optional<Output<Boolean>> sniEnabled() {
        return Optional.ofNullable(this.sniEnabled);
    }

    /**
     * The custom value of the SNI field. If you do not specify this parameter, the value of the `Host` header field is automatically used. In most cases, you do not need to specify a custom value for the SNI field. However, if you want WAF to use an SNI field whose value is different from the value of the Host header field in back-to-origin requests, you can specify a custom value for the SNI field.
     * 
     * &gt; **NOTE:**   This parameter is required only if you set `SniEnabled` to true.
     * 
     */
    @Import(name="sniHost")
    private @Nullable Output<String> sniHost;

    /**
     * @return The custom value of the SNI field. If you do not specify this parameter, the value of the `Host` header field is automatically used. In most cases, you do not need to specify a custom value for the SNI field. However, if you want WAF to use an SNI field whose value is different from the value of the Host header field in back-to-origin requests, you can specify a custom value for the SNI field.
     * 
     * &gt; **NOTE:**   This parameter is required only if you set `SniEnabled` to true.
     * 
     */
    public Optional<Output<String>> sniHost() {
        return Optional.ofNullable(this.sniHost);
    }

    /**
     * The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
     * 
     */
    @Import(name="writeTimeout")
    private @Nullable Output<Integer> writeTimeout;

    /**
     * @return The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
     * 
     */
    public Optional<Output<Integer>> writeTimeout() {
        return Optional.ofNullable(this.writeTimeout);
    }

    /**
     * Specifies whether to use the X-Forward-For-Proto header field to pass the protocol used by WAF to forward requests to the origin server. Valid values:
     * 
     */
    @Import(name="xffProto")
    private @Nullable Output<Boolean> xffProto;

    /**
     * @return Specifies whether to use the X-Forward-For-Proto header field to pass the protocol used by WAF to forward requests to the origin server. Valid values:
     * 
     */
    public Optional<Output<Boolean>> xffProto() {
        return Optional.ofNullable(this.xffProto);
    }

    private DomainRedirectArgs() {}

    private DomainRedirectArgs(DomainRedirectArgs $) {
        this.backends = $.backends;
        this.backupBackends = $.backupBackends;
        this.connectTimeout = $.connectTimeout;
        this.focusHttpBackend = $.focusHttpBackend;
        this.keepalive = $.keepalive;
        this.keepaliveRequests = $.keepaliveRequests;
        this.keepaliveTimeout = $.keepaliveTimeout;
        this.loadbalance = $.loadbalance;
        this.readTimeout = $.readTimeout;
        this.requestHeaders = $.requestHeaders;
        this.retry = $.retry;
        this.sniEnabled = $.sniEnabled;
        this.sniHost = $.sniHost;
        this.writeTimeout = $.writeTimeout;
        this.xffProto = $.xffProto;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainRedirectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainRedirectArgs $;

        public Builder() {
            $ = new DomainRedirectArgs();
        }

        public Builder(DomainRedirectArgs defaults) {
            $ = new DomainRedirectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backends The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
         * 
         * - If you specify IP addresses, specify the value in the **\[&#34;ip1&#34;,&#34;ip2&#34;,...]** format. You can enter up to 20 IP addresses.
         * - If you specify domain names, specify the value in the **\[&#34;domain&#34;]** format. You can enter up to 20 domain names.
         * 
         * @return builder
         * 
         */
        public Builder backends(@Nullable Output<List<String>> backends) {
            $.backends = backends;
            return this;
        }

        /**
         * @param backends The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
         * 
         * - If you specify IP addresses, specify the value in the **\[&#34;ip1&#34;,&#34;ip2&#34;,...]** format. You can enter up to 20 IP addresses.
         * - If you specify domain names, specify the value in the **\[&#34;domain&#34;]** format. You can enter up to 20 domain names.
         * 
         * @return builder
         * 
         */
        public Builder backends(List<String> backends) {
            return backends(Output.of(backends));
        }

        /**
         * @param backends The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
         * 
         * - If you specify IP addresses, specify the value in the **\[&#34;ip1&#34;,&#34;ip2&#34;,...]** format. You can enter up to 20 IP addresses.
         * - If you specify domain names, specify the value in the **\[&#34;domain&#34;]** format. You can enter up to 20 domain names.
         * 
         * @return builder
         * 
         */
        public Builder backends(String... backends) {
            return backends(List.of(backends));
        }

        /**
         * @param backupBackends The secondary IP address or domain name of the origin server.
         * 
         * @return builder
         * 
         */
        public Builder backupBackends(@Nullable Output<List<String>> backupBackends) {
            $.backupBackends = backupBackends;
            return this;
        }

        /**
         * @param backupBackends The secondary IP address or domain name of the origin server.
         * 
         * @return builder
         * 
         */
        public Builder backupBackends(List<String> backupBackends) {
            return backupBackends(Output.of(backupBackends));
        }

        /**
         * @param backupBackends The secondary IP address or domain name of the origin server.
         * 
         * @return builder
         * 
         */
        public Builder backupBackends(String... backupBackends) {
            return backupBackends(List.of(backupBackends));
        }

        /**
         * @param connectTimeout Connection timeout duration. Unit: seconds.
         * Value range: 1~3600. Default value: 5.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(@Nullable Output<Integer> connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * @param connectTimeout Connection timeout duration. Unit: seconds.
         * Value range: 1~3600. Default value: 5.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(Integer connectTimeout) {
            return connectTimeout(Output.of(connectTimeout));
        }

        /**
         * @param focusHttpBackend Specifies whether to enable force redirect from HTTPS to HTTP for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder focusHttpBackend(@Nullable Output<Boolean> focusHttpBackend) {
            $.focusHttpBackend = focusHttpBackend;
            return this;
        }

        /**
         * @param focusHttpBackend Specifies whether to enable force redirect from HTTPS to HTTP for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder focusHttpBackend(Boolean focusHttpBackend) {
            return focusHttpBackend(Output.of(focusHttpBackend));
        }

        /**
         * @param keepalive Specifies whether to enable the persistent connection feature. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder keepalive(@Nullable Output<Boolean> keepalive) {
            $.keepalive = keepalive;
            return this;
        }

        /**
         * @param keepalive Specifies whether to enable the persistent connection feature. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder keepalive(Boolean keepalive) {
            return keepalive(Output.of(keepalive));
        }

        /**
         * @param keepaliveRequests The number of reused persistent connections. Valid values: 60 to 1000. Default value: 1000
         * 
         * &gt; **NOTE:**   This parameter specifies the number of persistent connections that can be reused after you enable the persistent connection feature.
         * 
         * @return builder
         * 
         */
        public Builder keepaliveRequests(@Nullable Output<Integer> keepaliveRequests) {
            $.keepaliveRequests = keepaliveRequests;
            return this;
        }

        /**
         * @param keepaliveRequests The number of reused persistent connections. Valid values: 60 to 1000. Default value: 1000
         * 
         * &gt; **NOTE:**   This parameter specifies the number of persistent connections that can be reused after you enable the persistent connection feature.
         * 
         * @return builder
         * 
         */
        public Builder keepaliveRequests(Integer keepaliveRequests) {
            return keepaliveRequests(Output.of(keepaliveRequests));
        }

        /**
         * @param keepaliveTimeout Idle long connection timeout, value range: 1~60, default 15, unit: seconds.
         * 
         * &gt; **NOTE:**  How long the multiplexed long connection is idle and then released.
         * 
         * @return builder
         * 
         */
        public Builder keepaliveTimeout(@Nullable Output<Integer> keepaliveTimeout) {
            $.keepaliveTimeout = keepaliveTimeout;
            return this;
        }

        /**
         * @param keepaliveTimeout Idle long connection timeout, value range: 1~60, default 15, unit: seconds.
         * 
         * &gt; **NOTE:**  How long the multiplexed long connection is idle and then released.
         * 
         * @return builder
         * 
         */
        public Builder keepaliveTimeout(Integer keepaliveTimeout) {
            return keepaliveTimeout(Output.of(keepaliveTimeout));
        }

        /**
         * @param loadbalance The load balancing algorithm that you want to use to forward requests to the origin server. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder loadbalance(Output<String> loadbalance) {
            $.loadbalance = loadbalance;
            return this;
        }

        /**
         * @param loadbalance The load balancing algorithm that you want to use to forward requests to the origin server. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder loadbalance(String loadbalance) {
            return loadbalance(Output.of(loadbalance));
        }

        /**
         * @param readTimeout The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
         * 
         * @return builder
         * 
         */
        public Builder readTimeout(@Nullable Output<Integer> readTimeout) {
            $.readTimeout = readTimeout;
            return this;
        }

        /**
         * @param readTimeout The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
         * 
         * @return builder
         * 
         */
        public Builder readTimeout(Integer readTimeout) {
            return readTimeout(Output.of(readTimeout));
        }

        /**
         * @param requestHeaders The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
         * By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `request_headers` below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(@Nullable Output<List<DomainRedirectRequestHeaderArgs>> requestHeaders) {
            $.requestHeaders = requestHeaders;
            return this;
        }

        /**
         * @param requestHeaders The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
         * By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `request_headers` below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(List<DomainRedirectRequestHeaderArgs> requestHeaders) {
            return requestHeaders(Output.of(requestHeaders));
        }

        /**
         * @param requestHeaders The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
         * By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `request_headers` below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(DomainRedirectRequestHeaderArgs... requestHeaders) {
            return requestHeaders(List.of(requestHeaders));
        }

        /**
         * @param retry Specifies whether WAF retries if WAF fails to forward requests to the origin server. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder retry(@Nullable Output<Boolean> retry) {
            $.retry = retry;
            return this;
        }

        /**
         * @param retry Specifies whether WAF retries if WAF fails to forward requests to the origin server. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder retry(Boolean retry) {
            return retry(Output.of(retry));
        }

        /**
         * @param sniEnabled Specifies whether to enable the Server Name Indication (SNI) feature for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder sniEnabled(@Nullable Output<Boolean> sniEnabled) {
            $.sniEnabled = sniEnabled;
            return this;
        }

        /**
         * @param sniEnabled Specifies whether to enable the Server Name Indication (SNI) feature for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder sniEnabled(Boolean sniEnabled) {
            return sniEnabled(Output.of(sniEnabled));
        }

        /**
         * @param sniHost The custom value of the SNI field. If you do not specify this parameter, the value of the `Host` header field is automatically used. In most cases, you do not need to specify a custom value for the SNI field. However, if you want WAF to use an SNI field whose value is different from the value of the Host header field in back-to-origin requests, you can specify a custom value for the SNI field.
         * 
         * &gt; **NOTE:**   This parameter is required only if you set `SniEnabled` to true.
         * 
         * @return builder
         * 
         */
        public Builder sniHost(@Nullable Output<String> sniHost) {
            $.sniHost = sniHost;
            return this;
        }

        /**
         * @param sniHost The custom value of the SNI field. If you do not specify this parameter, the value of the `Host` header field is automatically used. In most cases, you do not need to specify a custom value for the SNI field. However, if you want WAF to use an SNI field whose value is different from the value of the Host header field in back-to-origin requests, you can specify a custom value for the SNI field.
         * 
         * &gt; **NOTE:**   This parameter is required only if you set `SniEnabled` to true.
         * 
         * @return builder
         * 
         */
        public Builder sniHost(String sniHost) {
            return sniHost(Output.of(sniHost));
        }

        /**
         * @param writeTimeout The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
         * 
         * @return builder
         * 
         */
        public Builder writeTimeout(@Nullable Output<Integer> writeTimeout) {
            $.writeTimeout = writeTimeout;
            return this;
        }

        /**
         * @param writeTimeout The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
         * 
         * @return builder
         * 
         */
        public Builder writeTimeout(Integer writeTimeout) {
            return writeTimeout(Output.of(writeTimeout));
        }

        /**
         * @param xffProto Specifies whether to use the X-Forward-For-Proto header field to pass the protocol used by WAF to forward requests to the origin server. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder xffProto(@Nullable Output<Boolean> xffProto) {
            $.xffProto = xffProto;
            return this;
        }

        /**
         * @param xffProto Specifies whether to use the X-Forward-For-Proto header field to pass the protocol used by WAF to forward requests to the origin server. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder xffProto(Boolean xffProto) {
            return xffProto(Output.of(xffProto));
        }

        public DomainRedirectArgs build() {
            if ($.loadbalance == null) {
                throw new MissingRequiredPropertyException("DomainRedirectArgs", "loadbalance");
            }
            return $;
        }
    }

}
