// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.amqp;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.amqp.QueueArgs;
import com.pulumi.alicloud.amqp.inputs.QueueState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a RabbitMQ (AMQP) Queue resource.
 * 
 * For information about RabbitMQ (AMQP) Queue and how to use it, see [What is Queue](https://www.alibabacloud.com/help/en/message-queue-for-rabbitmq/latest/createqueue).
 * 
 * &gt; **NOTE:** Available since v1.127.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.amqp.Instance;
 * import com.pulumi.alicloud.amqp.InstanceArgs;
 * import com.pulumi.alicloud.amqp.VirtualHost;
 * import com.pulumi.alicloud.amqp.VirtualHostArgs;
 * import com.pulumi.alicloud.amqp.Exchange;
 * import com.pulumi.alicloud.amqp.ExchangeArgs;
 * import com.pulumi.alicloud.amqp.Queue;
 * import com.pulumi.alicloud.amqp.QueueArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultInstance = new Instance(&#34;defaultInstance&#34;, InstanceArgs.builder()        
 *             .instanceType(&#34;enterprise&#34;)
 *             .maxTps(3000)
 *             .queueCapacity(200)
 *             .storageSize(700)
 *             .supportEip(false)
 *             .maxEipTps(128)
 *             .paymentType(&#34;Subscription&#34;)
 *             .period(1)
 *             .build());
 * 
 *         var defaultVirtualHost = new VirtualHost(&#34;defaultVirtualHost&#34;, VirtualHostArgs.builder()        
 *             .instanceId(defaultInstance.id())
 *             .virtualHostName(&#34;tf-example&#34;)
 *             .build());
 * 
 *         var defaultExchange = new Exchange(&#34;defaultExchange&#34;, ExchangeArgs.builder()        
 *             .autoDeleteState(false)
 *             .exchangeName(&#34;tf-example&#34;)
 *             .exchangeType(&#34;DIRECT&#34;)
 *             .instanceId(defaultInstance.id())
 *             .internal(false)
 *             .virtualHostName(defaultVirtualHost.virtualHostName())
 *             .build());
 * 
 *         var example = new Queue(&#34;example&#34;, QueueArgs.builder()        
 *             .instanceId(defaultInstance.id())
 *             .queueName(&#34;tf-example&#34;)
 *             .virtualHostName(defaultVirtualHost.virtualHostName())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * RabbitMQ (AMQP) Queue can be imported using the id, e.g.
 * 
 * ```sh
 *  $ pulumi import alicloud:amqp/queue:Queue example &lt;instance_id&gt;:&lt;virtual_host_name&gt;:&lt;queue_name&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:amqp/queue:Queue")
public class Queue extends com.pulumi.resources.CustomResource {
    /**
     * Specifies whether the Auto Delete attribute is configured. Valid values:
     * * true: The Auto Delete attribute is configured. The queue is automatically deleted after the last subscription from consumers to this queue is canceled.
     * * false: The Auto Delete attribute is not configured.
     * 
     */
    @Export(name="autoDeleteState", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> autoDeleteState;

    /**
     * @return Specifies whether the Auto Delete attribute is configured. Valid values:
     * * true: The Auto Delete attribute is configured. The queue is automatically deleted after the last subscription from consumers to this queue is canceled.
     * * false: The Auto Delete attribute is not configured.
     * 
     */
    public Output<Optional<Boolean>> autoDeleteState() {
        return Codegen.optional(this.autoDeleteState);
    }
    /**
     * The validity period after which the queue is automatically deleted.
     * If the queue is not accessed within a specified period of time, it is automatically deleted.
     * 
     */
    @Export(name="autoExpireState", type=String.class, parameters={})
    private Output</* @Nullable */ String> autoExpireState;

    /**
     * @return The validity period after which the queue is automatically deleted.
     * If the queue is not accessed within a specified period of time, it is automatically deleted.
     * 
     */
    public Output<Optional<String>> autoExpireState() {
        return Codegen.optional(this.autoExpireState);
    }
    /**
     * The dead-letter exchange. A dead-letter exchange is used to receive rejected messages.
     * If a consumer rejects a message that cannot be retried, this message is routed to a specified dead-letter exchange.
     * Then, the dead-letter exchange routes the message to the queue that is bound to the dead-letter exchange.
     * 
     */
    @Export(name="deadLetterExchange", type=String.class, parameters={})
    private Output</* @Nullable */ String> deadLetterExchange;

    /**
     * @return The dead-letter exchange. A dead-letter exchange is used to receive rejected messages.
     * If a consumer rejects a message that cannot be retried, this message is routed to a specified dead-letter exchange.
     * Then, the dead-letter exchange routes the message to the queue that is bound to the dead-letter exchange.
     * 
     */
    public Output<Optional<String>> deadLetterExchange() {
        return Codegen.optional(this.deadLetterExchange);
    }
    /**
     * The dead letter routing key.
     * 
     */
    @Export(name="deadLetterRoutingKey", type=String.class, parameters={})
    private Output</* @Nullable */ String> deadLetterRoutingKey;

    /**
     * @return The dead letter routing key.
     * 
     */
    public Output<Optional<String>> deadLetterRoutingKey() {
        return Codegen.optional(this.deadLetterRoutingKey);
    }
    /**
     * Specifies whether the queue is an exclusive queue. Valid values:
     * * true: The queue is an exclusive queue. It can be used only for the connection that declares the exclusive queue. After the connection is closed, the exclusive queue is automatically deleted.
     * * false: The queue is not an exclusive queue.
     * 
     */
    @Export(name="exclusiveState", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> exclusiveState;

    /**
     * @return Specifies whether the queue is an exclusive queue. Valid values:
     * * true: The queue is an exclusive queue. It can be used only for the connection that declares the exclusive queue. After the connection is closed, the exclusive queue is automatically deleted.
     * * false: The queue is not an exclusive queue.
     * 
     */
    public Output<Optional<Boolean>> exclusiveState() {
        return Codegen.optional(this.exclusiveState);
    }
    /**
     * The ID of the instance.
     * 
     */
    @Export(name="instanceId", type=String.class, parameters={})
    private Output<String> instanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }
    /**
     * The maximum number of messages that can be stored in the queue.
     * If this threshold is exceeded, the earliest messages that are routed to the queue are discarded.
     * 
     */
    @Export(name="maxLength", type=String.class, parameters={})
    private Output</* @Nullable */ String> maxLength;

    /**
     * @return The maximum number of messages that can be stored in the queue.
     * If this threshold is exceeded, the earliest messages that are routed to the queue are discarded.
     * 
     */
    public Output<Optional<String>> maxLength() {
        return Codegen.optional(this.maxLength);
    }
    /**
     * The highest priority supported by the queue. This parameter is set to a positive integer.
     * Valid values: 0 to 255. Recommended values: 1 to 10
     * 
     */
    @Export(name="maximumPriority", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> maximumPriority;

    /**
     * @return The highest priority supported by the queue. This parameter is set to a positive integer.
     * Valid values: 0 to 255. Recommended values: 1 to 10
     * 
     */
    public Output<Optional<Integer>> maximumPriority() {
        return Codegen.optional(this.maximumPriority);
    }
    /**
     * The message TTL of the queue.
     * If the retention period of a message in the queue exceeds the message TTL of the queue, the message expires.
     * Message TTL must be set to a non-negative integer, in milliseconds.
     * For example, if the message TTL of the queue is 1000, messages survive for at most 1 second in the queue.
     * 
     */
    @Export(name="messageTtl", type=String.class, parameters={})
    private Output</* @Nullable */ String> messageTtl;

    /**
     * @return The message TTL of the queue.
     * If the retention period of a message in the queue exceeds the message TTL of the queue, the message expires.
     * Message TTL must be set to a non-negative integer, in milliseconds.
     * For example, if the message TTL of the queue is 1000, messages survive for at most 1 second in the queue.
     * 
     */
    public Output<Optional<String>> messageTtl() {
        return Codegen.optional(this.messageTtl);
    }
    /**
     * The name of the queue.
     * The queue name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (_), periods (.), and at signs (@).
     * 
     */
    @Export(name="queueName", type=String.class, parameters={})
    private Output<String> queueName;

    /**
     * @return The name of the queue.
     * The queue name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (_), periods (.), and at signs (@).
     * 
     */
    public Output<String> queueName() {
        return this.queueName;
    }
    /**
     * The name of the virtual host.
     * 
     */
    @Export(name="virtualHostName", type=String.class, parameters={})
    private Output<String> virtualHostName;

    /**
     * @return The name of the virtual host.
     * 
     */
    public Output<String> virtualHostName() {
        return this.virtualHostName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Queue(String name) {
        this(name, QueueArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Queue(String name, QueueArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Queue(String name, QueueArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:amqp/queue:Queue", name, args == null ? QueueArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Queue(String name, Output<String> id, @Nullable QueueState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:amqp/queue:Queue", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Queue get(String name, Output<String> id, @Nullable QueueState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Queue(name, id, state, options);
    }
}
