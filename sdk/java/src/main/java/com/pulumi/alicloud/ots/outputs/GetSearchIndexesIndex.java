// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ots.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSearchIndexesIndex {
    /**
     * @return The creation time of the index.
     * 
     */
    private Integer createTime;
    /**
     * @return Timestamp for sync phase.
     * 
     */
    private Integer currentSyncTimestamp;
    /**
     * @return The resource ID. The value is `&lt;instance_name&gt;:&lt;table_name&gt;:&lt;indexName&gt;:&lt;indexType&gt;`.
     * 
     */
    private String id;
    /**
     * @return The index name of the OTS Table which could not be changed.
     * 
     */
    private String indexName;
    /**
     * @return The name of OTS instance.
     * 
     */
    private String instanceName;
    /**
     * @return Last update time for metering data..
     * 
     */
    private Integer meteringLastUpdateTime;
    /**
     * @return Reserve related resources for the index.
     * 
     */
    private Integer reservedReadCu;
    /**
     * @return The number of rows of data for index.
     * 
     */
    private Integer rowCount;
    /**
     * @return JSON representation of the schema of index.
     * 
     */
    private String schema;
    /**
     * @return Storage space occupied by index.
     * 
     */
    private Integer storageSize;
    /**
     * @return The synchronization state of the index.
     * 
     */
    private String syncPhase;
    /**
     * @return The name of OTS table.
     * 
     */
    private String tableName;
    /**
     * @return TTL of index.
     * 
     */
    private Integer timeToLive;

    private GetSearchIndexesIndex() {}
    /**
     * @return The creation time of the index.
     * 
     */
    public Integer createTime() {
        return this.createTime;
    }
    /**
     * @return Timestamp for sync phase.
     * 
     */
    public Integer currentSyncTimestamp() {
        return this.currentSyncTimestamp;
    }
    /**
     * @return The resource ID. The value is `&lt;instance_name&gt;:&lt;table_name&gt;:&lt;indexName&gt;:&lt;indexType&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The index name of the OTS Table which could not be changed.
     * 
     */
    public String indexName() {
        return this.indexName;
    }
    /**
     * @return The name of OTS instance.
     * 
     */
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return Last update time for metering data..
     * 
     */
    public Integer meteringLastUpdateTime() {
        return this.meteringLastUpdateTime;
    }
    /**
     * @return Reserve related resources for the index.
     * 
     */
    public Integer reservedReadCu() {
        return this.reservedReadCu;
    }
    /**
     * @return The number of rows of data for index.
     * 
     */
    public Integer rowCount() {
        return this.rowCount;
    }
    /**
     * @return JSON representation of the schema of index.
     * 
     */
    public String schema() {
        return this.schema;
    }
    /**
     * @return Storage space occupied by index.
     * 
     */
    public Integer storageSize() {
        return this.storageSize;
    }
    /**
     * @return The synchronization state of the index.
     * 
     */
    public String syncPhase() {
        return this.syncPhase;
    }
    /**
     * @return The name of OTS table.
     * 
     */
    public String tableName() {
        return this.tableName;
    }
    /**
     * @return TTL of index.
     * 
     */
    public Integer timeToLive() {
        return this.timeToLive;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSearchIndexesIndex defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer createTime;
        private Integer currentSyncTimestamp;
        private String id;
        private String indexName;
        private String instanceName;
        private Integer meteringLastUpdateTime;
        private Integer reservedReadCu;
        private Integer rowCount;
        private String schema;
        private Integer storageSize;
        private String syncPhase;
        private String tableName;
        private Integer timeToLive;
        public Builder() {}
        public Builder(GetSearchIndexesIndex defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.currentSyncTimestamp = defaults.currentSyncTimestamp;
    	      this.id = defaults.id;
    	      this.indexName = defaults.indexName;
    	      this.instanceName = defaults.instanceName;
    	      this.meteringLastUpdateTime = defaults.meteringLastUpdateTime;
    	      this.reservedReadCu = defaults.reservedReadCu;
    	      this.rowCount = defaults.rowCount;
    	      this.schema = defaults.schema;
    	      this.storageSize = defaults.storageSize;
    	      this.syncPhase = defaults.syncPhase;
    	      this.tableName = defaults.tableName;
    	      this.timeToLive = defaults.timeToLive;
        }

        @CustomType.Setter
        public Builder createTime(Integer createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder currentSyncTimestamp(Integer currentSyncTimestamp) {
            if (currentSyncTimestamp == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "currentSyncTimestamp");
            }
            this.currentSyncTimestamp = currentSyncTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder indexName(String indexName) {
            if (indexName == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "indexName");
            }
            this.indexName = indexName;
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(String instanceName) {
            if (instanceName == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "instanceName");
            }
            this.instanceName = instanceName;
            return this;
        }
        @CustomType.Setter
        public Builder meteringLastUpdateTime(Integer meteringLastUpdateTime) {
            if (meteringLastUpdateTime == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "meteringLastUpdateTime");
            }
            this.meteringLastUpdateTime = meteringLastUpdateTime;
            return this;
        }
        @CustomType.Setter
        public Builder reservedReadCu(Integer reservedReadCu) {
            if (reservedReadCu == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "reservedReadCu");
            }
            this.reservedReadCu = reservedReadCu;
            return this;
        }
        @CustomType.Setter
        public Builder rowCount(Integer rowCount) {
            if (rowCount == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "rowCount");
            }
            this.rowCount = rowCount;
            return this;
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            if (schema == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "schema");
            }
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder storageSize(Integer storageSize) {
            if (storageSize == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "storageSize");
            }
            this.storageSize = storageSize;
            return this;
        }
        @CustomType.Setter
        public Builder syncPhase(String syncPhase) {
            if (syncPhase == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "syncPhase");
            }
            this.syncPhase = syncPhase;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(String tableName) {
            if (tableName == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "tableName");
            }
            this.tableName = tableName;
            return this;
        }
        @CustomType.Setter
        public Builder timeToLive(Integer timeToLive) {
            if (timeToLive == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexesIndex", "timeToLive");
            }
            this.timeToLive = timeToLive;
            return this;
        }
        public GetSearchIndexesIndex build() {
            final var _resultValue = new GetSearchIndexesIndex();
            _resultValue.createTime = createTime;
            _resultValue.currentSyncTimestamp = currentSyncTimestamp;
            _resultValue.id = id;
            _resultValue.indexName = indexName;
            _resultValue.instanceName = instanceName;
            _resultValue.meteringLastUpdateTime = meteringLastUpdateTime;
            _resultValue.reservedReadCu = reservedReadCu;
            _resultValue.rowCount = rowCount;
            _resultValue.schema = schema;
            _resultValue.storageSize = storageSize;
            _resultValue.syncPhase = syncPhase;
            _resultValue.tableName = tableName;
            _resultValue.timeToLive = timeToLive;
            return _resultValue;
        }
    }
}
