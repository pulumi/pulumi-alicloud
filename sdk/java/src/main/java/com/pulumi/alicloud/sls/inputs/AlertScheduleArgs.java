// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertScheduleArgs Empty = new AlertScheduleArgs();

    /**
     * Cron expression, the minimum accuracy is minutes, 24 hours. For example, 0 0/1 * * * means that the check is conducted every 1 hour from 00:00. When type is set to Cron, cronExpression must be set.
     * 
     */
    @Import(name="cronExpression")
    private @Nullable Output<String> cronExpression;

    /**
     * @return Cron expression, the minimum accuracy is minutes, 24 hours. For example, 0 0/1 * * * means that the check is conducted every 1 hour from 00:00. When type is set to Cron, cronExpression must be set.
     * 
     */
    public Optional<Output<String>> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }

    /**
     * Timed task execution delay (unit: s).
     * 
     */
    @Import(name="delay")
    private @Nullable Output<Integer> delay;

    /**
     * @return Timed task execution delay (unit: s).
     * 
     */
    public Optional<Output<Integer>> delay() {
        return Optional.ofNullable(this.delay);
    }

    /**
     * Fixed interval for scheduling.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<String> interval;

    /**
     * @return Fixed interval for scheduling.
     * 
     */
    public Optional<Output<String>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Dispatch immediately.
     * 
     */
    @Import(name="runImmdiately")
    private @Nullable Output<Boolean> runImmdiately;

    /**
     * @return Dispatch immediately.
     * 
     */
    public Optional<Output<Boolean>> runImmdiately() {
        return Optional.ofNullable(this.runImmdiately);
    }

    /**
     * The time zone where the Cron expression is located. The default value is null, indicating the eighth zone in the east.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return The time zone where the Cron expression is located. The default value is null, indicating the eighth zone in the east.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    /**
     * Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows: Fixedate: checks query and analysis results at regular intervals. Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows: Fixedate: checks query and analysis results at regular intervals. Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private AlertScheduleArgs() {}

    private AlertScheduleArgs(AlertScheduleArgs $) {
        this.cronExpression = $.cronExpression;
        this.delay = $.delay;
        this.interval = $.interval;
        this.runImmdiately = $.runImmdiately;
        this.timeZone = $.timeZone;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertScheduleArgs $;

        public Builder() {
            $ = new AlertScheduleArgs();
        }

        public Builder(AlertScheduleArgs defaults) {
            $ = new AlertScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cronExpression Cron expression, the minimum accuracy is minutes, 24 hours. For example, 0 0/1 * * * means that the check is conducted every 1 hour from 00:00. When type is set to Cron, cronExpression must be set.
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(@Nullable Output<String> cronExpression) {
            $.cronExpression = cronExpression;
            return this;
        }

        /**
         * @param cronExpression Cron expression, the minimum accuracy is minutes, 24 hours. For example, 0 0/1 * * * means that the check is conducted every 1 hour from 00:00. When type is set to Cron, cronExpression must be set.
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(String cronExpression) {
            return cronExpression(Output.of(cronExpression));
        }

        /**
         * @param delay Timed task execution delay (unit: s).
         * 
         * @return builder
         * 
         */
        public Builder delay(@Nullable Output<Integer> delay) {
            $.delay = delay;
            return this;
        }

        /**
         * @param delay Timed task execution delay (unit: s).
         * 
         * @return builder
         * 
         */
        public Builder delay(Integer delay) {
            return delay(Output.of(delay));
        }

        /**
         * @param interval Fixed interval for scheduling.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<String> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval Fixed interval for scheduling.
         * 
         * @return builder
         * 
         */
        public Builder interval(String interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param runImmdiately Dispatch immediately.
         * 
         * @return builder
         * 
         */
        public Builder runImmdiately(@Nullable Output<Boolean> runImmdiately) {
            $.runImmdiately = runImmdiately;
            return this;
        }

        /**
         * @param runImmdiately Dispatch immediately.
         * 
         * @return builder
         * 
         */
        public Builder runImmdiately(Boolean runImmdiately) {
            return runImmdiately(Output.of(runImmdiately));
        }

        /**
         * @param timeZone The time zone where the Cron expression is located. The default value is null, indicating the eighth zone in the east.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The time zone where the Cron expression is located. The default value is null, indicating the eighth zone in the east.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param type Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows: Fixedate: checks query and analysis results at regular intervals. Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows: Fixedate: checks query and analysis results at regular intervals. Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AlertScheduleArgs build() {
            return $;
        }
    }

}
