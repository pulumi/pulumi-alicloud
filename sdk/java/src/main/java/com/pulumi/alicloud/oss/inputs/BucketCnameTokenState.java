// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketCnameTokenState extends com.pulumi.resources.ResourceArgs {

    public static final BucketCnameTokenState Empty = new BucketCnameTokenState();

    /**
     * The name of the bucket
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return The name of the bucket
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * The custom domain
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The custom domain
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Token used to verify domain ownership
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return Token used to verify domain ownership
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    private BucketCnameTokenState() {}

    private BucketCnameTokenState(BucketCnameTokenState $) {
        this.bucket = $.bucket;
        this.domain = $.domain;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketCnameTokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketCnameTokenState $;

        public Builder() {
            $ = new BucketCnameTokenState();
        }

        public Builder(BucketCnameTokenState defaults) {
            $ = new BucketCnameTokenState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The name of the bucket
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The name of the bucket
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param domain The custom domain
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The custom domain
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param token Token used to verify domain ownership
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Token used to verify domain ownership
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public BucketCnameTokenState build() {
            return $;
        }
    }

}
