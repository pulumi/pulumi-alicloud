// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alikafka.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceConfluentConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceConfluentConfigArgs Empty = new InstanceConfluentConfigArgs();

    /**
     * The number of CPU cores of Connect.
     * 
     */
    @Import(name="connectCu")
    private @Nullable Output<Integer> connectCu;

    /**
     * @return The number of CPU cores of Connect.
     * 
     */
    public Optional<Output<Integer>> connectCu() {
        return Optional.ofNullable(this.connectCu);
    }

    /**
     * The number of replicas of Connect.
     * 
     */
    @Import(name="connectReplica")
    private @Nullable Output<Integer> connectReplica;

    /**
     * @return The number of replicas of Connect.
     * 
     */
    public Optional<Output<Integer>> connectReplica() {
        return Optional.ofNullable(this.connectReplica);
    }

    /**
     * The number of CPU cores of Control Center.
     * 
     */
    @Import(name="controlCenterCu")
    private @Nullable Output<Integer> controlCenterCu;

    /**
     * @return The number of CPU cores of Control Center.
     * 
     */
    public Optional<Output<Integer>> controlCenterCu() {
        return Optional.ofNullable(this.controlCenterCu);
    }

    /**
     * The number of replicas of Control Center.
     * 
     */
    @Import(name="controlCenterReplica")
    private @Nullable Output<Integer> controlCenterReplica;

    /**
     * @return The number of replicas of Control Center.
     * 
     */
    public Optional<Output<Integer>> controlCenterReplica() {
        return Optional.ofNullable(this.controlCenterReplica);
    }

    /**
     * The disk capacity of Control Center.
     * 
     */
    @Import(name="controlCenterStorage")
    private @Nullable Output<Integer> controlCenterStorage;

    /**
     * @return The disk capacity of Control Center.
     * 
     */
    public Optional<Output<Integer>> controlCenterStorage() {
        return Optional.ofNullable(this.controlCenterStorage);
    }

    /**
     * The number of CPU cores of the Kafka broker.
     * 
     */
    @Import(name="kafkaCu")
    private @Nullable Output<Integer> kafkaCu;

    /**
     * @return The number of CPU cores of the Kafka broker.
     * 
     */
    public Optional<Output<Integer>> kafkaCu() {
        return Optional.ofNullable(this.kafkaCu);
    }

    /**
     * The number of replicas of the Kafka broker.
     * 
     */
    @Import(name="kafkaReplica")
    private @Nullable Output<Integer> kafkaReplica;

    /**
     * @return The number of replicas of the Kafka broker.
     * 
     */
    public Optional<Output<Integer>> kafkaReplica() {
        return Optional.ofNullable(this.kafkaReplica);
    }

    /**
     * The number of CPU cores of Kafka Rest Proxy.
     * 
     */
    @Import(name="kafkaRestProxyCu")
    private @Nullable Output<Integer> kafkaRestProxyCu;

    /**
     * @return The number of CPU cores of Kafka Rest Proxy.
     * 
     */
    public Optional<Output<Integer>> kafkaRestProxyCu() {
        return Optional.ofNullable(this.kafkaRestProxyCu);
    }

    /**
     * The number of replicas of Kafka Rest Proxy.
     * 
     */
    @Import(name="kafkaRestProxyReplica")
    private @Nullable Output<Integer> kafkaRestProxyReplica;

    /**
     * @return The number of replicas of Kafka Rest Proxy.
     * 
     */
    public Optional<Output<Integer>> kafkaRestProxyReplica() {
        return Optional.ofNullable(this.kafkaRestProxyReplica);
    }

    /**
     * The disk capacity of the Kafka broker.
     * 
     */
    @Import(name="kafkaStorage")
    private @Nullable Output<Integer> kafkaStorage;

    /**
     * @return The disk capacity of the Kafka broker.
     * 
     */
    public Optional<Output<Integer>> kafkaStorage() {
        return Optional.ofNullable(this.kafkaStorage);
    }

    /**
     * The number of CPU cores of ksqlDB.
     * 
     */
    @Import(name="ksqlCu")
    private @Nullable Output<Integer> ksqlCu;

    /**
     * @return The number of CPU cores of ksqlDB.
     * 
     */
    public Optional<Output<Integer>> ksqlCu() {
        return Optional.ofNullable(this.ksqlCu);
    }

    /**
     * The number of replicas of ksqlDB.
     * 
     */
    @Import(name="ksqlReplica")
    private @Nullable Output<Integer> ksqlReplica;

    /**
     * @return The number of replicas of ksqlDB.
     * 
     */
    public Optional<Output<Integer>> ksqlReplica() {
        return Optional.ofNullable(this.ksqlReplica);
    }

    /**
     * The disk capacity of ksqlDB.
     * 
     */
    @Import(name="ksqlStorage")
    private @Nullable Output<Integer> ksqlStorage;

    /**
     * @return The disk capacity of ksqlDB.
     * 
     */
    public Optional<Output<Integer>> ksqlStorage() {
        return Optional.ofNullable(this.ksqlStorage);
    }

    /**
     * The number of CPU cores of Schema Registry.
     * 
     */
    @Import(name="schemaRegistryCu")
    private @Nullable Output<Integer> schemaRegistryCu;

    /**
     * @return The number of CPU cores of Schema Registry.
     * 
     */
    public Optional<Output<Integer>> schemaRegistryCu() {
        return Optional.ofNullable(this.schemaRegistryCu);
    }

    /**
     * The number of replicas of Schema Registry.
     * 
     */
    @Import(name="schemaRegistryReplica")
    private @Nullable Output<Integer> schemaRegistryReplica;

    /**
     * @return The number of replicas of Schema Registry.
     * 
     */
    public Optional<Output<Integer>> schemaRegistryReplica() {
        return Optional.ofNullable(this.schemaRegistryReplica);
    }

    /**
     * The number of CPU cores of ZooKeeper.
     * 
     */
    @Import(name="zookeeperCu")
    private @Nullable Output<Integer> zookeeperCu;

    /**
     * @return The number of CPU cores of ZooKeeper.
     * 
     */
    public Optional<Output<Integer>> zookeeperCu() {
        return Optional.ofNullable(this.zookeeperCu);
    }

    /**
     * The number of replicas of ZooKeeper.
     * 
     */
    @Import(name="zookeeperReplica")
    private @Nullable Output<Integer> zookeeperReplica;

    /**
     * @return The number of replicas of ZooKeeper.
     * 
     */
    public Optional<Output<Integer>> zookeeperReplica() {
        return Optional.ofNullable(this.zookeeperReplica);
    }

    /**
     * The disk capacity of ZooKeeper.
     * 
     */
    @Import(name="zookeeperStorage")
    private @Nullable Output<Integer> zookeeperStorage;

    /**
     * @return The disk capacity of ZooKeeper.
     * 
     */
    public Optional<Output<Integer>> zookeeperStorage() {
        return Optional.ofNullable(this.zookeeperStorage);
    }

    private InstanceConfluentConfigArgs() {}

    private InstanceConfluentConfigArgs(InstanceConfluentConfigArgs $) {
        this.connectCu = $.connectCu;
        this.connectReplica = $.connectReplica;
        this.controlCenterCu = $.controlCenterCu;
        this.controlCenterReplica = $.controlCenterReplica;
        this.controlCenterStorage = $.controlCenterStorage;
        this.kafkaCu = $.kafkaCu;
        this.kafkaReplica = $.kafkaReplica;
        this.kafkaRestProxyCu = $.kafkaRestProxyCu;
        this.kafkaRestProxyReplica = $.kafkaRestProxyReplica;
        this.kafkaStorage = $.kafkaStorage;
        this.ksqlCu = $.ksqlCu;
        this.ksqlReplica = $.ksqlReplica;
        this.ksqlStorage = $.ksqlStorage;
        this.schemaRegistryCu = $.schemaRegistryCu;
        this.schemaRegistryReplica = $.schemaRegistryReplica;
        this.zookeeperCu = $.zookeeperCu;
        this.zookeeperReplica = $.zookeeperReplica;
        this.zookeeperStorage = $.zookeeperStorage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceConfluentConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceConfluentConfigArgs $;

        public Builder() {
            $ = new InstanceConfluentConfigArgs();
        }

        public Builder(InstanceConfluentConfigArgs defaults) {
            $ = new InstanceConfluentConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectCu The number of CPU cores of Connect.
         * 
         * @return builder
         * 
         */
        public Builder connectCu(@Nullable Output<Integer> connectCu) {
            $.connectCu = connectCu;
            return this;
        }

        /**
         * @param connectCu The number of CPU cores of Connect.
         * 
         * @return builder
         * 
         */
        public Builder connectCu(Integer connectCu) {
            return connectCu(Output.of(connectCu));
        }

        /**
         * @param connectReplica The number of replicas of Connect.
         * 
         * @return builder
         * 
         */
        public Builder connectReplica(@Nullable Output<Integer> connectReplica) {
            $.connectReplica = connectReplica;
            return this;
        }

        /**
         * @param connectReplica The number of replicas of Connect.
         * 
         * @return builder
         * 
         */
        public Builder connectReplica(Integer connectReplica) {
            return connectReplica(Output.of(connectReplica));
        }

        /**
         * @param controlCenterCu The number of CPU cores of Control Center.
         * 
         * @return builder
         * 
         */
        public Builder controlCenterCu(@Nullable Output<Integer> controlCenterCu) {
            $.controlCenterCu = controlCenterCu;
            return this;
        }

        /**
         * @param controlCenterCu The number of CPU cores of Control Center.
         * 
         * @return builder
         * 
         */
        public Builder controlCenterCu(Integer controlCenterCu) {
            return controlCenterCu(Output.of(controlCenterCu));
        }

        /**
         * @param controlCenterReplica The number of replicas of Control Center.
         * 
         * @return builder
         * 
         */
        public Builder controlCenterReplica(@Nullable Output<Integer> controlCenterReplica) {
            $.controlCenterReplica = controlCenterReplica;
            return this;
        }

        /**
         * @param controlCenterReplica The number of replicas of Control Center.
         * 
         * @return builder
         * 
         */
        public Builder controlCenterReplica(Integer controlCenterReplica) {
            return controlCenterReplica(Output.of(controlCenterReplica));
        }

        /**
         * @param controlCenterStorage The disk capacity of Control Center.
         * 
         * @return builder
         * 
         */
        public Builder controlCenterStorage(@Nullable Output<Integer> controlCenterStorage) {
            $.controlCenterStorage = controlCenterStorage;
            return this;
        }

        /**
         * @param controlCenterStorage The disk capacity of Control Center.
         * 
         * @return builder
         * 
         */
        public Builder controlCenterStorage(Integer controlCenterStorage) {
            return controlCenterStorage(Output.of(controlCenterStorage));
        }

        /**
         * @param kafkaCu The number of CPU cores of the Kafka broker.
         * 
         * @return builder
         * 
         */
        public Builder kafkaCu(@Nullable Output<Integer> kafkaCu) {
            $.kafkaCu = kafkaCu;
            return this;
        }

        /**
         * @param kafkaCu The number of CPU cores of the Kafka broker.
         * 
         * @return builder
         * 
         */
        public Builder kafkaCu(Integer kafkaCu) {
            return kafkaCu(Output.of(kafkaCu));
        }

        /**
         * @param kafkaReplica The number of replicas of the Kafka broker.
         * 
         * @return builder
         * 
         */
        public Builder kafkaReplica(@Nullable Output<Integer> kafkaReplica) {
            $.kafkaReplica = kafkaReplica;
            return this;
        }

        /**
         * @param kafkaReplica The number of replicas of the Kafka broker.
         * 
         * @return builder
         * 
         */
        public Builder kafkaReplica(Integer kafkaReplica) {
            return kafkaReplica(Output.of(kafkaReplica));
        }

        /**
         * @param kafkaRestProxyCu The number of CPU cores of Kafka Rest Proxy.
         * 
         * @return builder
         * 
         */
        public Builder kafkaRestProxyCu(@Nullable Output<Integer> kafkaRestProxyCu) {
            $.kafkaRestProxyCu = kafkaRestProxyCu;
            return this;
        }

        /**
         * @param kafkaRestProxyCu The number of CPU cores of Kafka Rest Proxy.
         * 
         * @return builder
         * 
         */
        public Builder kafkaRestProxyCu(Integer kafkaRestProxyCu) {
            return kafkaRestProxyCu(Output.of(kafkaRestProxyCu));
        }

        /**
         * @param kafkaRestProxyReplica The number of replicas of Kafka Rest Proxy.
         * 
         * @return builder
         * 
         */
        public Builder kafkaRestProxyReplica(@Nullable Output<Integer> kafkaRestProxyReplica) {
            $.kafkaRestProxyReplica = kafkaRestProxyReplica;
            return this;
        }

        /**
         * @param kafkaRestProxyReplica The number of replicas of Kafka Rest Proxy.
         * 
         * @return builder
         * 
         */
        public Builder kafkaRestProxyReplica(Integer kafkaRestProxyReplica) {
            return kafkaRestProxyReplica(Output.of(kafkaRestProxyReplica));
        }

        /**
         * @param kafkaStorage The disk capacity of the Kafka broker.
         * 
         * @return builder
         * 
         */
        public Builder kafkaStorage(@Nullable Output<Integer> kafkaStorage) {
            $.kafkaStorage = kafkaStorage;
            return this;
        }

        /**
         * @param kafkaStorage The disk capacity of the Kafka broker.
         * 
         * @return builder
         * 
         */
        public Builder kafkaStorage(Integer kafkaStorage) {
            return kafkaStorage(Output.of(kafkaStorage));
        }

        /**
         * @param ksqlCu The number of CPU cores of ksqlDB.
         * 
         * @return builder
         * 
         */
        public Builder ksqlCu(@Nullable Output<Integer> ksqlCu) {
            $.ksqlCu = ksqlCu;
            return this;
        }

        /**
         * @param ksqlCu The number of CPU cores of ksqlDB.
         * 
         * @return builder
         * 
         */
        public Builder ksqlCu(Integer ksqlCu) {
            return ksqlCu(Output.of(ksqlCu));
        }

        /**
         * @param ksqlReplica The number of replicas of ksqlDB.
         * 
         * @return builder
         * 
         */
        public Builder ksqlReplica(@Nullable Output<Integer> ksqlReplica) {
            $.ksqlReplica = ksqlReplica;
            return this;
        }

        /**
         * @param ksqlReplica The number of replicas of ksqlDB.
         * 
         * @return builder
         * 
         */
        public Builder ksqlReplica(Integer ksqlReplica) {
            return ksqlReplica(Output.of(ksqlReplica));
        }

        /**
         * @param ksqlStorage The disk capacity of ksqlDB.
         * 
         * @return builder
         * 
         */
        public Builder ksqlStorage(@Nullable Output<Integer> ksqlStorage) {
            $.ksqlStorage = ksqlStorage;
            return this;
        }

        /**
         * @param ksqlStorage The disk capacity of ksqlDB.
         * 
         * @return builder
         * 
         */
        public Builder ksqlStorage(Integer ksqlStorage) {
            return ksqlStorage(Output.of(ksqlStorage));
        }

        /**
         * @param schemaRegistryCu The number of CPU cores of Schema Registry.
         * 
         * @return builder
         * 
         */
        public Builder schemaRegistryCu(@Nullable Output<Integer> schemaRegistryCu) {
            $.schemaRegistryCu = schemaRegistryCu;
            return this;
        }

        /**
         * @param schemaRegistryCu The number of CPU cores of Schema Registry.
         * 
         * @return builder
         * 
         */
        public Builder schemaRegistryCu(Integer schemaRegistryCu) {
            return schemaRegistryCu(Output.of(schemaRegistryCu));
        }

        /**
         * @param schemaRegistryReplica The number of replicas of Schema Registry.
         * 
         * @return builder
         * 
         */
        public Builder schemaRegistryReplica(@Nullable Output<Integer> schemaRegistryReplica) {
            $.schemaRegistryReplica = schemaRegistryReplica;
            return this;
        }

        /**
         * @param schemaRegistryReplica The number of replicas of Schema Registry.
         * 
         * @return builder
         * 
         */
        public Builder schemaRegistryReplica(Integer schemaRegistryReplica) {
            return schemaRegistryReplica(Output.of(schemaRegistryReplica));
        }

        /**
         * @param zookeeperCu The number of CPU cores of ZooKeeper.
         * 
         * @return builder
         * 
         */
        public Builder zookeeperCu(@Nullable Output<Integer> zookeeperCu) {
            $.zookeeperCu = zookeeperCu;
            return this;
        }

        /**
         * @param zookeeperCu The number of CPU cores of ZooKeeper.
         * 
         * @return builder
         * 
         */
        public Builder zookeeperCu(Integer zookeeperCu) {
            return zookeeperCu(Output.of(zookeeperCu));
        }

        /**
         * @param zookeeperReplica The number of replicas of ZooKeeper.
         * 
         * @return builder
         * 
         */
        public Builder zookeeperReplica(@Nullable Output<Integer> zookeeperReplica) {
            $.zookeeperReplica = zookeeperReplica;
            return this;
        }

        /**
         * @param zookeeperReplica The number of replicas of ZooKeeper.
         * 
         * @return builder
         * 
         */
        public Builder zookeeperReplica(Integer zookeeperReplica) {
            return zookeeperReplica(Output.of(zookeeperReplica));
        }

        /**
         * @param zookeeperStorage The disk capacity of ZooKeeper.
         * 
         * @return builder
         * 
         */
        public Builder zookeeperStorage(@Nullable Output<Integer> zookeeperStorage) {
            $.zookeeperStorage = zookeeperStorage;
            return this;
        }

        /**
         * @param zookeeperStorage The disk capacity of ZooKeeper.
         * 
         * @return builder
         * 
         */
        public Builder zookeeperStorage(Integer zookeeperStorage) {
            return zookeeperStorage(Output.of(zookeeperStorage));
        }

        public InstanceConfluentConfigArgs build() {
            return $;
        }
    }

}
