// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteMapState extends com.pulumi.resources.ResourceArgs {

    public static final RouteMapState Empty = new RouteMapState();

    /**
     * A match statement. It indicates the mode in which the AS path attribute is matched. Valid values: [&#34;Include&#34;, &#34;Complete&#34;].
     * 
     */
    @Import(name="asPathMatchMode")
    private @Nullable Output<String> asPathMatchMode;

    /**
     * @return A match statement. It indicates the mode in which the AS path attribute is matched. Valid values: [&#34;Include&#34;, &#34;Complete&#34;].
     * 
     */
    public Optional<Output<String>> asPathMatchMode() {
        return Optional.ofNullable(this.asPathMatchMode);
    }

    /**
     * The ID of the CEN instance.
     * 
     */
    @Import(name="cenId")
    private @Nullable Output<String> cenId;

    /**
     * @return The ID of the CEN instance.
     * 
     */
    public Optional<Output<String>> cenId() {
        return Optional.ofNullable(this.cenId);
    }

    /**
     * The ID of the region to which the CEN instance belongs.
     * 
     */
    @Import(name="cenRegionId")
    private @Nullable Output<String> cenRegionId;

    /**
     * @return The ID of the region to which the CEN instance belongs.
     * 
     */
    public Optional<Output<String>> cenRegionId() {
        return Optional.ofNullable(this.cenRegionId);
    }

    /**
     * A match statement. It indicates the mode in which the prefix attribute is matched. Valid values: [&#34;Include&#34;, &#34;Complete&#34;].
     * 
     */
    @Import(name="cidrMatchMode")
    private @Nullable Output<String> cidrMatchMode;

    /**
     * @return A match statement. It indicates the mode in which the prefix attribute is matched. Valid values: [&#34;Include&#34;, &#34;Complete&#34;].
     * 
     */
    public Optional<Output<String>> cidrMatchMode() {
        return Optional.ofNullable(this.cidrMatchMode);
    }

    /**
     * A match statement. It indicates the mode in which the community attribute is matched. Valid values: [&#34;Include&#34;, &#34;Complete&#34;].
     * 
     */
    @Import(name="communityMatchMode")
    private @Nullable Output<String> communityMatchMode;

    /**
     * @return A match statement. It indicates the mode in which the community attribute is matched. Valid values: [&#34;Include&#34;, &#34;Complete&#34;].
     * 
     */
    public Optional<Output<String>> communityMatchMode() {
        return Optional.ofNullable(this.communityMatchMode);
    }

    /**
     * An action statement. It indicates the mode in which the community attribute is operated. Valid values: [&#34;Additive&#34;, &#34;Replace&#34;].
     * 
     */
    @Import(name="communityOperateMode")
    private @Nullable Output<String> communityOperateMode;

    /**
     * @return An action statement. It indicates the mode in which the community attribute is operated. Valid values: [&#34;Additive&#34;, &#34;Replace&#34;].
     * 
     */
    public Optional<Output<String>> communityOperateMode() {
        return Optional.ofNullable(this.communityOperateMode);
    }

    /**
     * The description of the route map.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the route map.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A match statement that indicates the list of destination instance types. Valid values: [&#34;VPC&#34;, &#34;VBR&#34;, &#34;CCN&#34;, &#34;VPN&#34;].
     * 
     */
    @Import(name="destinationChildInstanceTypes")
    private @Nullable Output<List<String>> destinationChildInstanceTypes;

    /**
     * @return A match statement that indicates the list of destination instance types. Valid values: [&#34;VPC&#34;, &#34;VBR&#34;, &#34;CCN&#34;, &#34;VPN&#34;].
     * 
     */
    public Optional<Output<List<String>>> destinationChildInstanceTypes() {
        return Optional.ofNullable(this.destinationChildInstanceTypes);
    }

    /**
     * A match statement that indicates the prefix list. The prefix is in the CIDR format. You can enter a maximum of 32 CIDR blocks.
     * 
     */
    @Import(name="destinationCidrBlocks")
    private @Nullable Output<List<String>> destinationCidrBlocks;

    /**
     * @return A match statement that indicates the prefix list. The prefix is in the CIDR format. You can enter a maximum of 32 CIDR blocks.
     * 
     */
    public Optional<Output<List<String>>> destinationCidrBlocks() {
        return Optional.ofNullable(this.destinationCidrBlocks);
    }

    /**
     * A match statement that indicates the list of IDs of the destination instances.
     * 
     */
    @Import(name="destinationInstanceIds")
    private @Nullable Output<List<String>> destinationInstanceIds;

    /**
     * @return A match statement that indicates the list of IDs of the destination instances.
     * 
     */
    public Optional<Output<List<String>>> destinationInstanceIds() {
        return Optional.ofNullable(this.destinationInstanceIds);
    }

    /**
     * Indicates whether to enable the reverse match method for the DestinationInstanceIds match condition. Valid values: [&#34;false&#34;, &#34;true&#34;]. Default to &#34;false&#34;.
     * 
     */
    @Import(name="destinationInstanceIdsReverseMatch")
    private @Nullable Output<Boolean> destinationInstanceIdsReverseMatch;

    /**
     * @return Indicates whether to enable the reverse match method for the DestinationInstanceIds match condition. Valid values: [&#34;false&#34;, &#34;true&#34;]. Default to &#34;false&#34;.
     * 
     */
    public Optional<Output<Boolean>> destinationInstanceIdsReverseMatch() {
        return Optional.ofNullable(this.destinationInstanceIdsReverseMatch);
    }

    /**
     * A match statement that indicates the list of IDs of the destination route tables. You can enter a maximum of 32 route table IDs.
     * 
     */
    @Import(name="destinationRouteTableIds")
    private @Nullable Output<List<String>> destinationRouteTableIds;

    /**
     * @return A match statement that indicates the list of IDs of the destination route tables. You can enter a maximum of 32 route table IDs.
     * 
     */
    public Optional<Output<List<String>>> destinationRouteTableIds() {
        return Optional.ofNullable(this.destinationRouteTableIds);
    }

    /**
     * The action that is performed to a route if the route matches all the match conditions. Valid values: [&#34;Permit&#34;, &#34;Deny&#34;].
     * 
     */
    @Import(name="mapResult")
    private @Nullable Output<String> mapResult;

    /**
     * @return The action that is performed to a route if the route matches all the match conditions. Valid values: [&#34;Permit&#34;, &#34;Deny&#34;].
     * 
     */
    public Optional<Output<String>> mapResult() {
        return Optional.ofNullable(this.mapResult);
    }

    /**
     * A match statement that indicates the AS path list. The AS path is a well-known mandatory attribute, which describes the numbers of the ASs that a BGP route passes through during transmission.
     * 
     */
    @Import(name="matchAsns")
    private @Nullable Output<List<String>> matchAsns;

    /**
     * @return A match statement that indicates the AS path list. The AS path is a well-known mandatory attribute, which describes the numbers of the ASs that a BGP route passes through during transmission.
     * 
     */
    public Optional<Output<List<String>>> matchAsns() {
        return Optional.ofNullable(this.matchAsns);
    }

    /**
     * A match statement that indicates the community set. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
     * 
     */
    @Import(name="matchCommunitySets")
    private @Nullable Output<List<String>> matchCommunitySets;

    /**
     * @return A match statement that indicates the community set. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
     * 
     */
    public Optional<Output<List<String>>> matchCommunitySets() {
        return Optional.ofNullable(this.matchCommunitySets);
    }

    /**
     * The priority of the next route map that is associated with the current route map. Value range: 1 to 100.
     * 
     */
    @Import(name="nextPriority")
    private @Nullable Output<Integer> nextPriority;

    /**
     * @return The priority of the next route map that is associated with the current route map. Value range: 1 to 100.
     * 
     */
    public Optional<Output<Integer>> nextPriority() {
        return Optional.ofNullable(this.nextPriority);
    }

    /**
     * An action statement that operates the community attribute. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
     * 
     */
    @Import(name="operateCommunitySets")
    private @Nullable Output<List<String>> operateCommunitySets;

    /**
     * @return An action statement that operates the community attribute. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
     * 
     */
    public Optional<Output<List<String>>> operateCommunitySets() {
        return Optional.ofNullable(this.operateCommunitySets);
    }

    /**
     * An action statement that modifies the priority of the route. Value range: 1 to 100. The default priority of a route is 50. A lower value indicates a higher preference.
     * 
     */
    @Import(name="preference")
    private @Nullable Output<Integer> preference;

    /**
     * @return An action statement that modifies the priority of the route. Value range: 1 to 100. The default priority of a route is 50. A lower value indicates a higher preference.
     * 
     */
    public Optional<Output<Integer>> preference() {
        return Optional.ofNullable(this.preference);
    }

    /**
     * An action statement that indicates an AS path is prepended when the regional gateway receives or advertises a route.
     * 
     */
    @Import(name="prependAsPaths")
    private @Nullable Output<List<String>> prependAsPaths;

    /**
     * @return An action statement that indicates an AS path is prepended when the regional gateway receives or advertises a route.
     * 
     */
    public Optional<Output<List<String>>> prependAsPaths() {
        return Optional.ofNullable(this.prependAsPaths);
    }

    /**
     * The priority of the route map. Value range: 1 to 100. A lower value indicates a higher priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The priority of the route map. Value range: 1 to 100. A lower value indicates a higher priority.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * ID of the RouteMap. It is available in 1.161.0+.
     * 
     */
    @Import(name="routeMapId")
    private @Nullable Output<String> routeMapId;

    /**
     * @return ID of the RouteMap. It is available in 1.161.0+.
     * 
     */
    public Optional<Output<String>> routeMapId() {
        return Optional.ofNullable(this.routeMapId);
    }

    /**
     * A match statement that indicates the list of route types. Valid values: [&#34;System&#34;, &#34;Custom&#34;, &#34;BGP&#34;].
     * 
     */
    @Import(name="routeTypes")
    private @Nullable Output<List<String>> routeTypes;

    /**
     * @return A match statement that indicates the list of route types. Valid values: [&#34;System&#34;, &#34;Custom&#34;, &#34;BGP&#34;].
     * 
     */
    public Optional<Output<List<String>>> routeTypes() {
        return Optional.ofNullable(this.routeTypes);
    }

    /**
     * A match statement that indicates the list of source instance types. Valid values: [&#34;VPC&#34;, &#34;VBR&#34;, &#34;CCN&#34;].
     * 
     */
    @Import(name="sourceChildInstanceTypes")
    private @Nullable Output<List<String>> sourceChildInstanceTypes;

    /**
     * @return A match statement that indicates the list of source instance types. Valid values: [&#34;VPC&#34;, &#34;VBR&#34;, &#34;CCN&#34;].
     * 
     */
    public Optional<Output<List<String>>> sourceChildInstanceTypes() {
        return Optional.ofNullable(this.sourceChildInstanceTypes);
    }

    /**
     * A match statement that indicates the list of IDs of the source instances.
     * 
     */
    @Import(name="sourceInstanceIds")
    private @Nullable Output<List<String>> sourceInstanceIds;

    /**
     * @return A match statement that indicates the list of IDs of the source instances.
     * 
     */
    public Optional<Output<List<String>>> sourceInstanceIds() {
        return Optional.ofNullable(this.sourceInstanceIds);
    }

    /**
     * Indicates whether to enable the reverse match method for the SourceInstanceIds match condition. Valid values: [&#34;false&#34;, &#34;true&#34;]. Default to &#34;false&#34;.
     * 
     */
    @Import(name="sourceInstanceIdsReverseMatch")
    private @Nullable Output<Boolean> sourceInstanceIdsReverseMatch;

    /**
     * @return Indicates whether to enable the reverse match method for the SourceInstanceIds match condition. Valid values: [&#34;false&#34;, &#34;true&#34;]. Default to &#34;false&#34;.
     * 
     */
    public Optional<Output<Boolean>> sourceInstanceIdsReverseMatch() {
        return Optional.ofNullable(this.sourceInstanceIdsReverseMatch);
    }

    /**
     * A match statement that indicates the list of IDs of the source regions. You can enter a maximum of 32 region IDs.
     * 
     */
    @Import(name="sourceRegionIds")
    private @Nullable Output<List<String>> sourceRegionIds;

    /**
     * @return A match statement that indicates the list of IDs of the source regions. You can enter a maximum of 32 region IDs.
     * 
     */
    public Optional<Output<List<String>>> sourceRegionIds() {
        return Optional.ofNullable(this.sourceRegionIds);
    }

    /**
     * A match statement that indicates the list of IDs of the source route tables. You can enter a maximum of 32 route table IDs.
     * 
     */
    @Import(name="sourceRouteTableIds")
    private @Nullable Output<List<String>> sourceRouteTableIds;

    /**
     * @return A match statement that indicates the list of IDs of the source route tables. You can enter a maximum of 32 route table IDs.
     * 
     */
    public Optional<Output<List<String>>> sourceRouteTableIds() {
        return Optional.ofNullable(this.sourceRouteTableIds);
    }

    /**
     * (Computed) The status of route map. Valid values: [&#34;Creating&#34;, &#34;Active&#34;, &#34;Deleting&#34;].
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return (Computed) The status of route map. Valid values: [&#34;Creating&#34;, &#34;Active&#34;, &#34;Deleting&#34;].
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The routing table ID of the forwarding router. If you do not enter the routing table ID, the routing policy is automatically associated with the default routing table of the forwarding router.
     * 
     */
    @Import(name="transitRouterRouteTableId")
    private @Nullable Output<String> transitRouterRouteTableId;

    /**
     * @return The routing table ID of the forwarding router. If you do not enter the routing table ID, the routing policy is automatically associated with the default routing table of the forwarding router.
     * 
     */
    public Optional<Output<String>> transitRouterRouteTableId() {
        return Optional.ofNullable(this.transitRouterRouteTableId);
    }

    /**
     * The direction in which the route map is applied. Valid values: [&#34;RegionIn&#34;, &#34;RegionOut&#34;].
     * 
     */
    @Import(name="transmitDirection")
    private @Nullable Output<String> transmitDirection;

    /**
     * @return The direction in which the route map is applied. Valid values: [&#34;RegionIn&#34;, &#34;RegionOut&#34;].
     * 
     */
    public Optional<Output<String>> transmitDirection() {
        return Optional.ofNullable(this.transmitDirection);
    }

    private RouteMapState() {}

    private RouteMapState(RouteMapState $) {
        this.asPathMatchMode = $.asPathMatchMode;
        this.cenId = $.cenId;
        this.cenRegionId = $.cenRegionId;
        this.cidrMatchMode = $.cidrMatchMode;
        this.communityMatchMode = $.communityMatchMode;
        this.communityOperateMode = $.communityOperateMode;
        this.description = $.description;
        this.destinationChildInstanceTypes = $.destinationChildInstanceTypes;
        this.destinationCidrBlocks = $.destinationCidrBlocks;
        this.destinationInstanceIds = $.destinationInstanceIds;
        this.destinationInstanceIdsReverseMatch = $.destinationInstanceIdsReverseMatch;
        this.destinationRouteTableIds = $.destinationRouteTableIds;
        this.mapResult = $.mapResult;
        this.matchAsns = $.matchAsns;
        this.matchCommunitySets = $.matchCommunitySets;
        this.nextPriority = $.nextPriority;
        this.operateCommunitySets = $.operateCommunitySets;
        this.preference = $.preference;
        this.prependAsPaths = $.prependAsPaths;
        this.priority = $.priority;
        this.routeMapId = $.routeMapId;
        this.routeTypes = $.routeTypes;
        this.sourceChildInstanceTypes = $.sourceChildInstanceTypes;
        this.sourceInstanceIds = $.sourceInstanceIds;
        this.sourceInstanceIdsReverseMatch = $.sourceInstanceIdsReverseMatch;
        this.sourceRegionIds = $.sourceRegionIds;
        this.sourceRouteTableIds = $.sourceRouteTableIds;
        this.status = $.status;
        this.transitRouterRouteTableId = $.transitRouterRouteTableId;
        this.transmitDirection = $.transmitDirection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteMapState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteMapState $;

        public Builder() {
            $ = new RouteMapState();
        }

        public Builder(RouteMapState defaults) {
            $ = new RouteMapState(Objects.requireNonNull(defaults));
        }

        /**
         * @param asPathMatchMode A match statement. It indicates the mode in which the AS path attribute is matched. Valid values: [&#34;Include&#34;, &#34;Complete&#34;].
         * 
         * @return builder
         * 
         */
        public Builder asPathMatchMode(@Nullable Output<String> asPathMatchMode) {
            $.asPathMatchMode = asPathMatchMode;
            return this;
        }

        /**
         * @param asPathMatchMode A match statement. It indicates the mode in which the AS path attribute is matched. Valid values: [&#34;Include&#34;, &#34;Complete&#34;].
         * 
         * @return builder
         * 
         */
        public Builder asPathMatchMode(String asPathMatchMode) {
            return asPathMatchMode(Output.of(asPathMatchMode));
        }

        /**
         * @param cenId The ID of the CEN instance.
         * 
         * @return builder
         * 
         */
        public Builder cenId(@Nullable Output<String> cenId) {
            $.cenId = cenId;
            return this;
        }

        /**
         * @param cenId The ID of the CEN instance.
         * 
         * @return builder
         * 
         */
        public Builder cenId(String cenId) {
            return cenId(Output.of(cenId));
        }

        /**
         * @param cenRegionId The ID of the region to which the CEN instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder cenRegionId(@Nullable Output<String> cenRegionId) {
            $.cenRegionId = cenRegionId;
            return this;
        }

        /**
         * @param cenRegionId The ID of the region to which the CEN instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder cenRegionId(String cenRegionId) {
            return cenRegionId(Output.of(cenRegionId));
        }

        /**
         * @param cidrMatchMode A match statement. It indicates the mode in which the prefix attribute is matched. Valid values: [&#34;Include&#34;, &#34;Complete&#34;].
         * 
         * @return builder
         * 
         */
        public Builder cidrMatchMode(@Nullable Output<String> cidrMatchMode) {
            $.cidrMatchMode = cidrMatchMode;
            return this;
        }

        /**
         * @param cidrMatchMode A match statement. It indicates the mode in which the prefix attribute is matched. Valid values: [&#34;Include&#34;, &#34;Complete&#34;].
         * 
         * @return builder
         * 
         */
        public Builder cidrMatchMode(String cidrMatchMode) {
            return cidrMatchMode(Output.of(cidrMatchMode));
        }

        /**
         * @param communityMatchMode A match statement. It indicates the mode in which the community attribute is matched. Valid values: [&#34;Include&#34;, &#34;Complete&#34;].
         * 
         * @return builder
         * 
         */
        public Builder communityMatchMode(@Nullable Output<String> communityMatchMode) {
            $.communityMatchMode = communityMatchMode;
            return this;
        }

        /**
         * @param communityMatchMode A match statement. It indicates the mode in which the community attribute is matched. Valid values: [&#34;Include&#34;, &#34;Complete&#34;].
         * 
         * @return builder
         * 
         */
        public Builder communityMatchMode(String communityMatchMode) {
            return communityMatchMode(Output.of(communityMatchMode));
        }

        /**
         * @param communityOperateMode An action statement. It indicates the mode in which the community attribute is operated. Valid values: [&#34;Additive&#34;, &#34;Replace&#34;].
         * 
         * @return builder
         * 
         */
        public Builder communityOperateMode(@Nullable Output<String> communityOperateMode) {
            $.communityOperateMode = communityOperateMode;
            return this;
        }

        /**
         * @param communityOperateMode An action statement. It indicates the mode in which the community attribute is operated. Valid values: [&#34;Additive&#34;, &#34;Replace&#34;].
         * 
         * @return builder
         * 
         */
        public Builder communityOperateMode(String communityOperateMode) {
            return communityOperateMode(Output.of(communityOperateMode));
        }

        /**
         * @param description The description of the route map.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the route map.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationChildInstanceTypes A match statement that indicates the list of destination instance types. Valid values: [&#34;VPC&#34;, &#34;VBR&#34;, &#34;CCN&#34;, &#34;VPN&#34;].
         * 
         * @return builder
         * 
         */
        public Builder destinationChildInstanceTypes(@Nullable Output<List<String>> destinationChildInstanceTypes) {
            $.destinationChildInstanceTypes = destinationChildInstanceTypes;
            return this;
        }

        /**
         * @param destinationChildInstanceTypes A match statement that indicates the list of destination instance types. Valid values: [&#34;VPC&#34;, &#34;VBR&#34;, &#34;CCN&#34;, &#34;VPN&#34;].
         * 
         * @return builder
         * 
         */
        public Builder destinationChildInstanceTypes(List<String> destinationChildInstanceTypes) {
            return destinationChildInstanceTypes(Output.of(destinationChildInstanceTypes));
        }

        /**
         * @param destinationChildInstanceTypes A match statement that indicates the list of destination instance types. Valid values: [&#34;VPC&#34;, &#34;VBR&#34;, &#34;CCN&#34;, &#34;VPN&#34;].
         * 
         * @return builder
         * 
         */
        public Builder destinationChildInstanceTypes(String... destinationChildInstanceTypes) {
            return destinationChildInstanceTypes(List.of(destinationChildInstanceTypes));
        }

        /**
         * @param destinationCidrBlocks A match statement that indicates the prefix list. The prefix is in the CIDR format. You can enter a maximum of 32 CIDR blocks.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlocks(@Nullable Output<List<String>> destinationCidrBlocks) {
            $.destinationCidrBlocks = destinationCidrBlocks;
            return this;
        }

        /**
         * @param destinationCidrBlocks A match statement that indicates the prefix list. The prefix is in the CIDR format. You can enter a maximum of 32 CIDR blocks.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlocks(List<String> destinationCidrBlocks) {
            return destinationCidrBlocks(Output.of(destinationCidrBlocks));
        }

        /**
         * @param destinationCidrBlocks A match statement that indicates the prefix list. The prefix is in the CIDR format. You can enter a maximum of 32 CIDR blocks.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlocks(String... destinationCidrBlocks) {
            return destinationCidrBlocks(List.of(destinationCidrBlocks));
        }

        /**
         * @param destinationInstanceIds A match statement that indicates the list of IDs of the destination instances.
         * 
         * @return builder
         * 
         */
        public Builder destinationInstanceIds(@Nullable Output<List<String>> destinationInstanceIds) {
            $.destinationInstanceIds = destinationInstanceIds;
            return this;
        }

        /**
         * @param destinationInstanceIds A match statement that indicates the list of IDs of the destination instances.
         * 
         * @return builder
         * 
         */
        public Builder destinationInstanceIds(List<String> destinationInstanceIds) {
            return destinationInstanceIds(Output.of(destinationInstanceIds));
        }

        /**
         * @param destinationInstanceIds A match statement that indicates the list of IDs of the destination instances.
         * 
         * @return builder
         * 
         */
        public Builder destinationInstanceIds(String... destinationInstanceIds) {
            return destinationInstanceIds(List.of(destinationInstanceIds));
        }

        /**
         * @param destinationInstanceIdsReverseMatch Indicates whether to enable the reverse match method for the DestinationInstanceIds match condition. Valid values: [&#34;false&#34;, &#34;true&#34;]. Default to &#34;false&#34;.
         * 
         * @return builder
         * 
         */
        public Builder destinationInstanceIdsReverseMatch(@Nullable Output<Boolean> destinationInstanceIdsReverseMatch) {
            $.destinationInstanceIdsReverseMatch = destinationInstanceIdsReverseMatch;
            return this;
        }

        /**
         * @param destinationInstanceIdsReverseMatch Indicates whether to enable the reverse match method for the DestinationInstanceIds match condition. Valid values: [&#34;false&#34;, &#34;true&#34;]. Default to &#34;false&#34;.
         * 
         * @return builder
         * 
         */
        public Builder destinationInstanceIdsReverseMatch(Boolean destinationInstanceIdsReverseMatch) {
            return destinationInstanceIdsReverseMatch(Output.of(destinationInstanceIdsReverseMatch));
        }

        /**
         * @param destinationRouteTableIds A match statement that indicates the list of IDs of the destination route tables. You can enter a maximum of 32 route table IDs.
         * 
         * @return builder
         * 
         */
        public Builder destinationRouteTableIds(@Nullable Output<List<String>> destinationRouteTableIds) {
            $.destinationRouteTableIds = destinationRouteTableIds;
            return this;
        }

        /**
         * @param destinationRouteTableIds A match statement that indicates the list of IDs of the destination route tables. You can enter a maximum of 32 route table IDs.
         * 
         * @return builder
         * 
         */
        public Builder destinationRouteTableIds(List<String> destinationRouteTableIds) {
            return destinationRouteTableIds(Output.of(destinationRouteTableIds));
        }

        /**
         * @param destinationRouteTableIds A match statement that indicates the list of IDs of the destination route tables. You can enter a maximum of 32 route table IDs.
         * 
         * @return builder
         * 
         */
        public Builder destinationRouteTableIds(String... destinationRouteTableIds) {
            return destinationRouteTableIds(List.of(destinationRouteTableIds));
        }

        /**
         * @param mapResult The action that is performed to a route if the route matches all the match conditions. Valid values: [&#34;Permit&#34;, &#34;Deny&#34;].
         * 
         * @return builder
         * 
         */
        public Builder mapResult(@Nullable Output<String> mapResult) {
            $.mapResult = mapResult;
            return this;
        }

        /**
         * @param mapResult The action that is performed to a route if the route matches all the match conditions. Valid values: [&#34;Permit&#34;, &#34;Deny&#34;].
         * 
         * @return builder
         * 
         */
        public Builder mapResult(String mapResult) {
            return mapResult(Output.of(mapResult));
        }

        /**
         * @param matchAsns A match statement that indicates the AS path list. The AS path is a well-known mandatory attribute, which describes the numbers of the ASs that a BGP route passes through during transmission.
         * 
         * @return builder
         * 
         */
        public Builder matchAsns(@Nullable Output<List<String>> matchAsns) {
            $.matchAsns = matchAsns;
            return this;
        }

        /**
         * @param matchAsns A match statement that indicates the AS path list. The AS path is a well-known mandatory attribute, which describes the numbers of the ASs that a BGP route passes through during transmission.
         * 
         * @return builder
         * 
         */
        public Builder matchAsns(List<String> matchAsns) {
            return matchAsns(Output.of(matchAsns));
        }

        /**
         * @param matchAsns A match statement that indicates the AS path list. The AS path is a well-known mandatory attribute, which describes the numbers of the ASs that a BGP route passes through during transmission.
         * 
         * @return builder
         * 
         */
        public Builder matchAsns(String... matchAsns) {
            return matchAsns(List.of(matchAsns));
        }

        /**
         * @param matchCommunitySets A match statement that indicates the community set. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
         * 
         * @return builder
         * 
         */
        public Builder matchCommunitySets(@Nullable Output<List<String>> matchCommunitySets) {
            $.matchCommunitySets = matchCommunitySets;
            return this;
        }

        /**
         * @param matchCommunitySets A match statement that indicates the community set. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
         * 
         * @return builder
         * 
         */
        public Builder matchCommunitySets(List<String> matchCommunitySets) {
            return matchCommunitySets(Output.of(matchCommunitySets));
        }

        /**
         * @param matchCommunitySets A match statement that indicates the community set. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
         * 
         * @return builder
         * 
         */
        public Builder matchCommunitySets(String... matchCommunitySets) {
            return matchCommunitySets(List.of(matchCommunitySets));
        }

        /**
         * @param nextPriority The priority of the next route map that is associated with the current route map. Value range: 1 to 100.
         * 
         * @return builder
         * 
         */
        public Builder nextPriority(@Nullable Output<Integer> nextPriority) {
            $.nextPriority = nextPriority;
            return this;
        }

        /**
         * @param nextPriority The priority of the next route map that is associated with the current route map. Value range: 1 to 100.
         * 
         * @return builder
         * 
         */
        public Builder nextPriority(Integer nextPriority) {
            return nextPriority(Output.of(nextPriority));
        }

        /**
         * @param operateCommunitySets An action statement that operates the community attribute. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
         * 
         * @return builder
         * 
         */
        public Builder operateCommunitySets(@Nullable Output<List<String>> operateCommunitySets) {
            $.operateCommunitySets = operateCommunitySets;
            return this;
        }

        /**
         * @param operateCommunitySets An action statement that operates the community attribute. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
         * 
         * @return builder
         * 
         */
        public Builder operateCommunitySets(List<String> operateCommunitySets) {
            return operateCommunitySets(Output.of(operateCommunitySets));
        }

        /**
         * @param operateCommunitySets An action statement that operates the community attribute. The format of each community is nn:nn, which ranges from 1 to 65535. You can enter a maximum of 32 communities. Communities must comply with RFC 1997. Large communities (RFC 8092) are not supported.
         * 
         * @return builder
         * 
         */
        public Builder operateCommunitySets(String... operateCommunitySets) {
            return operateCommunitySets(List.of(operateCommunitySets));
        }

        /**
         * @param preference An action statement that modifies the priority of the route. Value range: 1 to 100. The default priority of a route is 50. A lower value indicates a higher preference.
         * 
         * @return builder
         * 
         */
        public Builder preference(@Nullable Output<Integer> preference) {
            $.preference = preference;
            return this;
        }

        /**
         * @param preference An action statement that modifies the priority of the route. Value range: 1 to 100. The default priority of a route is 50. A lower value indicates a higher preference.
         * 
         * @return builder
         * 
         */
        public Builder preference(Integer preference) {
            return preference(Output.of(preference));
        }

        /**
         * @param prependAsPaths An action statement that indicates an AS path is prepended when the regional gateway receives or advertises a route.
         * 
         * @return builder
         * 
         */
        public Builder prependAsPaths(@Nullable Output<List<String>> prependAsPaths) {
            $.prependAsPaths = prependAsPaths;
            return this;
        }

        /**
         * @param prependAsPaths An action statement that indicates an AS path is prepended when the regional gateway receives or advertises a route.
         * 
         * @return builder
         * 
         */
        public Builder prependAsPaths(List<String> prependAsPaths) {
            return prependAsPaths(Output.of(prependAsPaths));
        }

        /**
         * @param prependAsPaths An action statement that indicates an AS path is prepended when the regional gateway receives or advertises a route.
         * 
         * @return builder
         * 
         */
        public Builder prependAsPaths(String... prependAsPaths) {
            return prependAsPaths(List.of(prependAsPaths));
        }

        /**
         * @param priority The priority of the route map. Value range: 1 to 100. A lower value indicates a higher priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the route map. Value range: 1 to 100. A lower value indicates a higher priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param routeMapId ID of the RouteMap. It is available in 1.161.0+.
         * 
         * @return builder
         * 
         */
        public Builder routeMapId(@Nullable Output<String> routeMapId) {
            $.routeMapId = routeMapId;
            return this;
        }

        /**
         * @param routeMapId ID of the RouteMap. It is available in 1.161.0+.
         * 
         * @return builder
         * 
         */
        public Builder routeMapId(String routeMapId) {
            return routeMapId(Output.of(routeMapId));
        }

        /**
         * @param routeTypes A match statement that indicates the list of route types. Valid values: [&#34;System&#34;, &#34;Custom&#34;, &#34;BGP&#34;].
         * 
         * @return builder
         * 
         */
        public Builder routeTypes(@Nullable Output<List<String>> routeTypes) {
            $.routeTypes = routeTypes;
            return this;
        }

        /**
         * @param routeTypes A match statement that indicates the list of route types. Valid values: [&#34;System&#34;, &#34;Custom&#34;, &#34;BGP&#34;].
         * 
         * @return builder
         * 
         */
        public Builder routeTypes(List<String> routeTypes) {
            return routeTypes(Output.of(routeTypes));
        }

        /**
         * @param routeTypes A match statement that indicates the list of route types. Valid values: [&#34;System&#34;, &#34;Custom&#34;, &#34;BGP&#34;].
         * 
         * @return builder
         * 
         */
        public Builder routeTypes(String... routeTypes) {
            return routeTypes(List.of(routeTypes));
        }

        /**
         * @param sourceChildInstanceTypes A match statement that indicates the list of source instance types. Valid values: [&#34;VPC&#34;, &#34;VBR&#34;, &#34;CCN&#34;].
         * 
         * @return builder
         * 
         */
        public Builder sourceChildInstanceTypes(@Nullable Output<List<String>> sourceChildInstanceTypes) {
            $.sourceChildInstanceTypes = sourceChildInstanceTypes;
            return this;
        }

        /**
         * @param sourceChildInstanceTypes A match statement that indicates the list of source instance types. Valid values: [&#34;VPC&#34;, &#34;VBR&#34;, &#34;CCN&#34;].
         * 
         * @return builder
         * 
         */
        public Builder sourceChildInstanceTypes(List<String> sourceChildInstanceTypes) {
            return sourceChildInstanceTypes(Output.of(sourceChildInstanceTypes));
        }

        /**
         * @param sourceChildInstanceTypes A match statement that indicates the list of source instance types. Valid values: [&#34;VPC&#34;, &#34;VBR&#34;, &#34;CCN&#34;].
         * 
         * @return builder
         * 
         */
        public Builder sourceChildInstanceTypes(String... sourceChildInstanceTypes) {
            return sourceChildInstanceTypes(List.of(sourceChildInstanceTypes));
        }

        /**
         * @param sourceInstanceIds A match statement that indicates the list of IDs of the source instances.
         * 
         * @return builder
         * 
         */
        public Builder sourceInstanceIds(@Nullable Output<List<String>> sourceInstanceIds) {
            $.sourceInstanceIds = sourceInstanceIds;
            return this;
        }

        /**
         * @param sourceInstanceIds A match statement that indicates the list of IDs of the source instances.
         * 
         * @return builder
         * 
         */
        public Builder sourceInstanceIds(List<String> sourceInstanceIds) {
            return sourceInstanceIds(Output.of(sourceInstanceIds));
        }

        /**
         * @param sourceInstanceIds A match statement that indicates the list of IDs of the source instances.
         * 
         * @return builder
         * 
         */
        public Builder sourceInstanceIds(String... sourceInstanceIds) {
            return sourceInstanceIds(List.of(sourceInstanceIds));
        }

        /**
         * @param sourceInstanceIdsReverseMatch Indicates whether to enable the reverse match method for the SourceInstanceIds match condition. Valid values: [&#34;false&#34;, &#34;true&#34;]. Default to &#34;false&#34;.
         * 
         * @return builder
         * 
         */
        public Builder sourceInstanceIdsReverseMatch(@Nullable Output<Boolean> sourceInstanceIdsReverseMatch) {
            $.sourceInstanceIdsReverseMatch = sourceInstanceIdsReverseMatch;
            return this;
        }

        /**
         * @param sourceInstanceIdsReverseMatch Indicates whether to enable the reverse match method for the SourceInstanceIds match condition. Valid values: [&#34;false&#34;, &#34;true&#34;]. Default to &#34;false&#34;.
         * 
         * @return builder
         * 
         */
        public Builder sourceInstanceIdsReverseMatch(Boolean sourceInstanceIdsReverseMatch) {
            return sourceInstanceIdsReverseMatch(Output.of(sourceInstanceIdsReverseMatch));
        }

        /**
         * @param sourceRegionIds A match statement that indicates the list of IDs of the source regions. You can enter a maximum of 32 region IDs.
         * 
         * @return builder
         * 
         */
        public Builder sourceRegionIds(@Nullable Output<List<String>> sourceRegionIds) {
            $.sourceRegionIds = sourceRegionIds;
            return this;
        }

        /**
         * @param sourceRegionIds A match statement that indicates the list of IDs of the source regions. You can enter a maximum of 32 region IDs.
         * 
         * @return builder
         * 
         */
        public Builder sourceRegionIds(List<String> sourceRegionIds) {
            return sourceRegionIds(Output.of(sourceRegionIds));
        }

        /**
         * @param sourceRegionIds A match statement that indicates the list of IDs of the source regions. You can enter a maximum of 32 region IDs.
         * 
         * @return builder
         * 
         */
        public Builder sourceRegionIds(String... sourceRegionIds) {
            return sourceRegionIds(List.of(sourceRegionIds));
        }

        /**
         * @param sourceRouteTableIds A match statement that indicates the list of IDs of the source route tables. You can enter a maximum of 32 route table IDs.
         * 
         * @return builder
         * 
         */
        public Builder sourceRouteTableIds(@Nullable Output<List<String>> sourceRouteTableIds) {
            $.sourceRouteTableIds = sourceRouteTableIds;
            return this;
        }

        /**
         * @param sourceRouteTableIds A match statement that indicates the list of IDs of the source route tables. You can enter a maximum of 32 route table IDs.
         * 
         * @return builder
         * 
         */
        public Builder sourceRouteTableIds(List<String> sourceRouteTableIds) {
            return sourceRouteTableIds(Output.of(sourceRouteTableIds));
        }

        /**
         * @param sourceRouteTableIds A match statement that indicates the list of IDs of the source route tables. You can enter a maximum of 32 route table IDs.
         * 
         * @return builder
         * 
         */
        public Builder sourceRouteTableIds(String... sourceRouteTableIds) {
            return sourceRouteTableIds(List.of(sourceRouteTableIds));
        }

        /**
         * @param status (Computed) The status of route map. Valid values: [&#34;Creating&#34;, &#34;Active&#34;, &#34;Deleting&#34;].
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status (Computed) The status of route map. Valid values: [&#34;Creating&#34;, &#34;Active&#34;, &#34;Deleting&#34;].
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param transitRouterRouteTableId The routing table ID of the forwarding router. If you do not enter the routing table ID, the routing policy is automatically associated with the default routing table of the forwarding router.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteTableId(@Nullable Output<String> transitRouterRouteTableId) {
            $.transitRouterRouteTableId = transitRouterRouteTableId;
            return this;
        }

        /**
         * @param transitRouterRouteTableId The routing table ID of the forwarding router. If you do not enter the routing table ID, the routing policy is automatically associated with the default routing table of the forwarding router.
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteTableId(String transitRouterRouteTableId) {
            return transitRouterRouteTableId(Output.of(transitRouterRouteTableId));
        }

        /**
         * @param transmitDirection The direction in which the route map is applied. Valid values: [&#34;RegionIn&#34;, &#34;RegionOut&#34;].
         * 
         * @return builder
         * 
         */
        public Builder transmitDirection(@Nullable Output<String> transmitDirection) {
            $.transmitDirection = transmitDirection;
            return this;
        }

        /**
         * @param transmitDirection The direction in which the route map is applied. Valid values: [&#34;RegionIn&#34;, &#34;RegionOut&#34;].
         * 
         * @return builder
         * 
         */
        public Builder transmitDirection(String transmitDirection) {
            return transmitDirection(Output.of(transmitDirection));
        }

        public RouteMapState build() {
            return $;
        }
    }

}
