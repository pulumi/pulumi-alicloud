// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudsso.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DirectoryPasswordPolicy {
    /**
     * @return Whether to restrict login after Password Expiration
     * 
     */
    private @Nullable Boolean hardExpire;
    /**
     * @return Number of password retries.
     * 
     */
    private @Nullable Integer maxLoginAttempts;
    /**
     * @return Password validity period.
     * 
     */
    private @Nullable Integer maxPasswordAge;
    /**
     * @return Maximum password length.
     * 
     */
    private @Nullable Integer maxPasswordLength;
    /**
     * @return The minimum number of different characters in a password.
     * 
     */
    private @Nullable Integer minPasswordDifferentChars;
    /**
     * @return Minimum password length.
     * 
     */
    private @Nullable Integer minPasswordLength;
    /**
     * @return Whether the user name is not allowed in the password.
     * 
     */
    private @Nullable Boolean passwordNotContainUsername;
    /**
     * @return Historical password check policy.
     * 
     */
    private @Nullable Integer passwordReusePrevention;
    /**
     * @return Whether lowercase letters are required in the password.
     * 
     */
    private @Nullable Boolean requireLowerCaseChars;
    /**
     * @return Whether numbers are required in the password.
     * 
     */
    private @Nullable Boolean requireNumbers;
    /**
     * @return Whether symbols are required in the password.
     * 
     */
    private @Nullable Boolean requireSymbols;
    /**
     * @return Whether uppercase letters are required in the password.
     * 
     */
    private @Nullable Boolean requireUpperCaseChars;

    private DirectoryPasswordPolicy() {}
    /**
     * @return Whether to restrict login after Password Expiration
     * 
     */
    public Optional<Boolean> hardExpire() {
        return Optional.ofNullable(this.hardExpire);
    }
    /**
     * @return Number of password retries.
     * 
     */
    public Optional<Integer> maxLoginAttempts() {
        return Optional.ofNullable(this.maxLoginAttempts);
    }
    /**
     * @return Password validity period.
     * 
     */
    public Optional<Integer> maxPasswordAge() {
        return Optional.ofNullable(this.maxPasswordAge);
    }
    /**
     * @return Maximum password length.
     * 
     */
    public Optional<Integer> maxPasswordLength() {
        return Optional.ofNullable(this.maxPasswordLength);
    }
    /**
     * @return The minimum number of different characters in a password.
     * 
     */
    public Optional<Integer> minPasswordDifferentChars() {
        return Optional.ofNullable(this.minPasswordDifferentChars);
    }
    /**
     * @return Minimum password length.
     * 
     */
    public Optional<Integer> minPasswordLength() {
        return Optional.ofNullable(this.minPasswordLength);
    }
    /**
     * @return Whether the user name is not allowed in the password.
     * 
     */
    public Optional<Boolean> passwordNotContainUsername() {
        return Optional.ofNullable(this.passwordNotContainUsername);
    }
    /**
     * @return Historical password check policy.
     * 
     */
    public Optional<Integer> passwordReusePrevention() {
        return Optional.ofNullable(this.passwordReusePrevention);
    }
    /**
     * @return Whether lowercase letters are required in the password.
     * 
     */
    public Optional<Boolean> requireLowerCaseChars() {
        return Optional.ofNullable(this.requireLowerCaseChars);
    }
    /**
     * @return Whether numbers are required in the password.
     * 
     */
    public Optional<Boolean> requireNumbers() {
        return Optional.ofNullable(this.requireNumbers);
    }
    /**
     * @return Whether symbols are required in the password.
     * 
     */
    public Optional<Boolean> requireSymbols() {
        return Optional.ofNullable(this.requireSymbols);
    }
    /**
     * @return Whether uppercase letters are required in the password.
     * 
     */
    public Optional<Boolean> requireUpperCaseChars() {
        return Optional.ofNullable(this.requireUpperCaseChars);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DirectoryPasswordPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean hardExpire;
        private @Nullable Integer maxLoginAttempts;
        private @Nullable Integer maxPasswordAge;
        private @Nullable Integer maxPasswordLength;
        private @Nullable Integer minPasswordDifferentChars;
        private @Nullable Integer minPasswordLength;
        private @Nullable Boolean passwordNotContainUsername;
        private @Nullable Integer passwordReusePrevention;
        private @Nullable Boolean requireLowerCaseChars;
        private @Nullable Boolean requireNumbers;
        private @Nullable Boolean requireSymbols;
        private @Nullable Boolean requireUpperCaseChars;
        public Builder() {}
        public Builder(DirectoryPasswordPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hardExpire = defaults.hardExpire;
    	      this.maxLoginAttempts = defaults.maxLoginAttempts;
    	      this.maxPasswordAge = defaults.maxPasswordAge;
    	      this.maxPasswordLength = defaults.maxPasswordLength;
    	      this.minPasswordDifferentChars = defaults.minPasswordDifferentChars;
    	      this.minPasswordLength = defaults.minPasswordLength;
    	      this.passwordNotContainUsername = defaults.passwordNotContainUsername;
    	      this.passwordReusePrevention = defaults.passwordReusePrevention;
    	      this.requireLowerCaseChars = defaults.requireLowerCaseChars;
    	      this.requireNumbers = defaults.requireNumbers;
    	      this.requireSymbols = defaults.requireSymbols;
    	      this.requireUpperCaseChars = defaults.requireUpperCaseChars;
        }

        @CustomType.Setter
        public Builder hardExpire(@Nullable Boolean hardExpire) {

            this.hardExpire = hardExpire;
            return this;
        }
        @CustomType.Setter
        public Builder maxLoginAttempts(@Nullable Integer maxLoginAttempts) {

            this.maxLoginAttempts = maxLoginAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder maxPasswordAge(@Nullable Integer maxPasswordAge) {

            this.maxPasswordAge = maxPasswordAge;
            return this;
        }
        @CustomType.Setter
        public Builder maxPasswordLength(@Nullable Integer maxPasswordLength) {

            this.maxPasswordLength = maxPasswordLength;
            return this;
        }
        @CustomType.Setter
        public Builder minPasswordDifferentChars(@Nullable Integer minPasswordDifferentChars) {

            this.minPasswordDifferentChars = minPasswordDifferentChars;
            return this;
        }
        @CustomType.Setter
        public Builder minPasswordLength(@Nullable Integer minPasswordLength) {

            this.minPasswordLength = minPasswordLength;
            return this;
        }
        @CustomType.Setter
        public Builder passwordNotContainUsername(@Nullable Boolean passwordNotContainUsername) {

            this.passwordNotContainUsername = passwordNotContainUsername;
            return this;
        }
        @CustomType.Setter
        public Builder passwordReusePrevention(@Nullable Integer passwordReusePrevention) {

            this.passwordReusePrevention = passwordReusePrevention;
            return this;
        }
        @CustomType.Setter
        public Builder requireLowerCaseChars(@Nullable Boolean requireLowerCaseChars) {

            this.requireLowerCaseChars = requireLowerCaseChars;
            return this;
        }
        @CustomType.Setter
        public Builder requireNumbers(@Nullable Boolean requireNumbers) {

            this.requireNumbers = requireNumbers;
            return this;
        }
        @CustomType.Setter
        public Builder requireSymbols(@Nullable Boolean requireSymbols) {

            this.requireSymbols = requireSymbols;
            return this;
        }
        @CustomType.Setter
        public Builder requireUpperCaseChars(@Nullable Boolean requireUpperCaseChars) {

            this.requireUpperCaseChars = requireUpperCaseChars;
            return this;
        }
        public DirectoryPasswordPolicy build() {
            final var _resultValue = new DirectoryPasswordPolicy();
            _resultValue.hardExpire = hardExpire;
            _resultValue.maxLoginAttempts = maxLoginAttempts;
            _resultValue.maxPasswordAge = maxPasswordAge;
            _resultValue.maxPasswordLength = maxPasswordLength;
            _resultValue.minPasswordDifferentChars = minPasswordDifferentChars;
            _resultValue.minPasswordLength = minPasswordLength;
            _resultValue.passwordNotContainUsername = passwordNotContainUsername;
            _resultValue.passwordReusePrevention = passwordReusePrevention;
            _resultValue.requireLowerCaseChars = requireLowerCaseChars;
            _resultValue.requireNumbers = requireNumbers;
            _resultValue.requireSymbols = requireSymbols;
            _resultValue.requireUpperCaseChars = requireUpperCaseChars;
            return _resultValue;
        }
    }
}
