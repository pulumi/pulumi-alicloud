// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.message;

import com.pulumi.alicloud.message.inputs.ServiceEventRuleEndpointArgs;
import com.pulumi.alicloud.message.inputs.ServiceEventRuleMatchRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceEventRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceEventRuleArgs Empty = new ServiceEventRuleArgs();

    /**
     * DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
     * - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
     * 
     */
    @Import(name="deliveryMode")
    private @Nullable Output<String> deliveryMode;

    /**
     * @return DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
     * - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
     * 
     */
    public Optional<Output<String>> deliveryMode() {
        return Optional.ofNullable(this.deliveryMode);
    }

    /**
     * Message Receiving Terminal Endpoint Object. See `endpoint` below.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<ServiceEventRuleEndpointArgs> endpoint;

    /**
     * @return Message Receiving Terminal Endpoint Object. See `endpoint` below.
     * 
     */
    public Optional<Output<ServiceEventRuleEndpointArgs>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * Event Type List
     * 
     */
    @Import(name="eventTypes", required=true)
    private Output<List<String>> eventTypes;

    /**
     * @return Event Type List
     * 
     */
    public Output<List<String>> eventTypes() {
        return this.eventTypes;
    }

    /**
     * Matching rules, or relationships between multiple rules. See `match_rules` below.
     * 
     */
    @Import(name="matchRules")
    private @Nullable Output<List<List<ServiceEventRuleMatchRuleArgs>>> matchRules;

    /**
     * @return Matching rules, or relationships between multiple rules. See `match_rules` below.
     * 
     */
    public Optional<Output<List<List<ServiceEventRuleMatchRuleArgs>>>> matchRules() {
        return Optional.ofNullable(this.matchRules);
    }

    /**
     * The event notification rule name.
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return The event notification rule name.
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    private ServiceEventRuleArgs() {}

    private ServiceEventRuleArgs(ServiceEventRuleArgs $) {
        this.deliveryMode = $.deliveryMode;
        this.endpoint = $.endpoint;
        this.eventTypes = $.eventTypes;
        this.matchRules = $.matchRules;
        this.ruleName = $.ruleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceEventRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceEventRuleArgs $;

        public Builder() {
            $ = new ServiceEventRuleArgs();
        }

        public Builder(ServiceEventRuleArgs defaults) {
            $ = new ServiceEventRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deliveryMode DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
         * - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
         * 
         * @return builder
         * 
         */
        public Builder deliveryMode(@Nullable Output<String> deliveryMode) {
            $.deliveryMode = deliveryMode;
            return this;
        }

        /**
         * @param deliveryMode DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
         * - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
         * 
         * @return builder
         * 
         */
        public Builder deliveryMode(String deliveryMode) {
            return deliveryMode(Output.of(deliveryMode));
        }

        /**
         * @param endpoint Message Receiving Terminal Endpoint Object. See `endpoint` below.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<ServiceEventRuleEndpointArgs> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint Message Receiving Terminal Endpoint Object. See `endpoint` below.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(ServiceEventRuleEndpointArgs endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param eventTypes Event Type List
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(Output<List<String>> eventTypes) {
            $.eventTypes = eventTypes;
            return this;
        }

        /**
         * @param eventTypes Event Type List
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(List<String> eventTypes) {
            return eventTypes(Output.of(eventTypes));
        }

        /**
         * @param eventTypes Event Type List
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(String... eventTypes) {
            return eventTypes(List.of(eventTypes));
        }

        /**
         * @param matchRules Matching rules, or relationships between multiple rules. See `match_rules` below.
         * 
         * @return builder
         * 
         */
        public Builder matchRules(@Nullable Output<List<List<ServiceEventRuleMatchRuleArgs>>> matchRules) {
            $.matchRules = matchRules;
            return this;
        }

        /**
         * @param matchRules Matching rules, or relationships between multiple rules. See `match_rules` below.
         * 
         * @return builder
         * 
         */
        public Builder matchRules(List<List<ServiceEventRuleMatchRuleArgs>> matchRules) {
            return matchRules(Output.of(matchRules));
        }

        /**
         * @param matchRules Matching rules, or relationships between multiple rules. See `match_rules` below.
         * 
         * @return builder
         * 
         */
        public Builder matchRules(List<ServiceEventRuleMatchRuleArgs>... matchRules) {
            return matchRules(List.of(matchRules));
        }

        /**
         * @param ruleName The event notification rule name.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName The event notification rule name.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        public ServiceEventRuleArgs build() {
            if ($.eventTypes == null) {
                throw new MissingRequiredPropertyException("ServiceEventRuleArgs", "eventTypes");
            }
            if ($.ruleName == null) {
                throw new MissingRequiredPropertyException("ServiceEventRuleArgs", "ruleName");
            }
            return $;
        }
    }

}
