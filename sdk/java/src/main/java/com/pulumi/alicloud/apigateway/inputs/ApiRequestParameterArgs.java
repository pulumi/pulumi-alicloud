// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.apigateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiRequestParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiRequestParameterArgs Empty = new ApiRequestParameterArgs();

    /**
     * The default value of the parameter.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return The default value of the parameter.
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * The description of parameter.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of parameter.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Request&#39;s parameter location; values: BODY, HEAD, QUERY, and PATH.
     * 
     */
    @Import(name="in", required=true)
    private Output<String> in;

    /**
     * @return Request&#39;s parameter location; values: BODY, HEAD, QUERY, and PATH.
     * 
     */
    public Output<String> in() {
        return this.in;
    }

    /**
     * Backend service&#39;s parameter location; values: BODY, HEAD, QUERY, and PATH.
     * 
     */
    @Import(name="inService", required=true)
    private Output<String> inService;

    /**
     * @return Backend service&#39;s parameter location; values: BODY, HEAD, QUERY, and PATH.
     * 
     */
    public Output<String> inService() {
        return this.inService;
    }

    /**
     * Request&#39;s parameter name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Request&#39;s parameter name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Backend service&#39;s parameter name.
     * 
     */
    @Import(name="nameService", required=true)
    private Output<String> nameService;

    /**
     * @return Backend service&#39;s parameter name.
     * 
     */
    public Output<String> nameService() {
        return this.nameService;
    }

    /**
     * Parameter required or not; values: REQUIRED and OPTIONAL.
     * 
     */
    @Import(name="required", required=true)
    private Output<String> required;

    /**
     * @return Parameter required or not; values: REQUIRED and OPTIONAL.
     * 
     */
    public Output<String> required() {
        return this.required;
    }

    /**
     * Parameter type which supports values of &#39;STRING&#39;,&#39;INT&#39;,&#39;BOOLEAN&#39;,&#39;LONG&#39;,&#34;FLOAT&#34; and &#34;DOUBLE&#34;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Parameter type which supports values of &#39;STRING&#39;,&#39;INT&#39;,&#39;BOOLEAN&#39;,&#39;LONG&#39;,&#34;FLOAT&#34; and &#34;DOUBLE&#34;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ApiRequestParameterArgs() {}

    private ApiRequestParameterArgs(ApiRequestParameterArgs $) {
        this.defaultValue = $.defaultValue;
        this.description = $.description;
        this.in = $.in;
        this.inService = $.inService;
        this.name = $.name;
        this.nameService = $.nameService;
        this.required = $.required;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiRequestParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiRequestParameterArgs $;

        public Builder() {
            $ = new ApiRequestParameterArgs();
        }

        public Builder(ApiRequestParameterArgs defaults) {
            $ = new ApiRequestParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultValue The default value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue The default value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param description The description of parameter.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of parameter.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param in Request&#39;s parameter location; values: BODY, HEAD, QUERY, and PATH.
         * 
         * @return builder
         * 
         */
        public Builder in(Output<String> in) {
            $.in = in;
            return this;
        }

        /**
         * @param in Request&#39;s parameter location; values: BODY, HEAD, QUERY, and PATH.
         * 
         * @return builder
         * 
         */
        public Builder in(String in) {
            return in(Output.of(in));
        }

        /**
         * @param inService Backend service&#39;s parameter location; values: BODY, HEAD, QUERY, and PATH.
         * 
         * @return builder
         * 
         */
        public Builder inService(Output<String> inService) {
            $.inService = inService;
            return this;
        }

        /**
         * @param inService Backend service&#39;s parameter location; values: BODY, HEAD, QUERY, and PATH.
         * 
         * @return builder
         * 
         */
        public Builder inService(String inService) {
            return inService(Output.of(inService));
        }

        /**
         * @param name Request&#39;s parameter name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Request&#39;s parameter name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameService Backend service&#39;s parameter name.
         * 
         * @return builder
         * 
         */
        public Builder nameService(Output<String> nameService) {
            $.nameService = nameService;
            return this;
        }

        /**
         * @param nameService Backend service&#39;s parameter name.
         * 
         * @return builder
         * 
         */
        public Builder nameService(String nameService) {
            return nameService(Output.of(nameService));
        }

        /**
         * @param required Parameter required or not; values: REQUIRED and OPTIONAL.
         * 
         * @return builder
         * 
         */
        public Builder required(Output<String> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required Parameter required or not; values: REQUIRED and OPTIONAL.
         * 
         * @return builder
         * 
         */
        public Builder required(String required) {
            return required(Output.of(required));
        }

        /**
         * @param type Parameter type which supports values of &#39;STRING&#39;,&#39;INT&#39;,&#39;BOOLEAN&#39;,&#39;LONG&#39;,&#34;FLOAT&#34; and &#34;DOUBLE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Parameter type which supports values of &#39;STRING&#39;,&#39;INT&#39;,&#39;BOOLEAN&#39;,&#39;LONG&#39;,&#34;FLOAT&#34; and &#34;DOUBLE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ApiRequestParameterArgs build() {
            if ($.in == null) {
                throw new MissingRequiredPropertyException("ApiRequestParameterArgs", "in");
            }
            if ($.inService == null) {
                throw new MissingRequiredPropertyException("ApiRequestParameterArgs", "inService");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ApiRequestParameterArgs", "name");
            }
            if ($.nameService == null) {
                throw new MissingRequiredPropertyException("ApiRequestParameterArgs", "nameService");
            }
            if ($.required == null) {
                throw new MissingRequiredPropertyException("ApiRequestParameterArgs", "required");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ApiRequestParameterArgs", "type");
            }
            return $;
        }
    }

}
