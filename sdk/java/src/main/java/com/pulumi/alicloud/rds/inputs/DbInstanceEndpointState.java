// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.rds.inputs;

import com.pulumi.alicloud.rds.inputs.DbInstanceEndpointNodeItemArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbInstanceEndpointState extends com.pulumi.resources.ResourceArgs {

    public static final DbInstanceEndpointState Empty = new DbInstanceEndpointState();

    /**
     * The internal endpoint.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Output<String> connectionString;

    /**
     * @return The internal endpoint.
     * 
     */
    public Optional<Output<String>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * The IP address of the internal endpoint.
     * 
     */
    @Import(name="connectionStringPrefix")
    private @Nullable Output<String> connectionStringPrefix;

    /**
     * @return The IP address of the internal endpoint.
     * 
     */
    public Optional<Output<String>> connectionStringPrefix() {
        return Optional.ofNullable(this.connectionStringPrefix);
    }

    /**
     * The user-defined description of the endpoint.
     * 
     */
    @Import(name="dbInstanceEndpointDescription")
    private @Nullable Output<String> dbInstanceEndpointDescription;

    /**
     * @return The user-defined description of the endpoint.
     * 
     */
    public Optional<Output<String>> dbInstanceEndpointDescription() {
        return Optional.ofNullable(this.dbInstanceEndpointDescription);
    }

    /**
     * The Endpoint ID of the instance.
     * 
     */
    @Import(name="dbInstanceEndpointId")
    private @Nullable Output<String> dbInstanceEndpointId;

    /**
     * @return The Endpoint ID of the instance.
     * 
     */
    public Optional<Output<String>> dbInstanceEndpointId() {
        return Optional.ofNullable(this.dbInstanceEndpointId);
    }

    /**
     * The type of the endpoint.
     * 
     */
    @Import(name="dbInstanceEndpointType")
    private @Nullable Output<String> dbInstanceEndpointType;

    /**
     * @return The type of the endpoint.
     * 
     */
    public Optional<Output<String>> dbInstanceEndpointType() {
        return Optional.ofNullable(this.dbInstanceEndpointType);
    }

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="dbInstanceId")
    private @Nullable Output<String> dbInstanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Optional<Output<String>> dbInstanceId() {
        return Optional.ofNullable(this.dbInstanceId);
    }

    /**
     * The type of the IP address.
     * 
     */
    @Import(name="ipType")
    private @Nullable Output<String> ipType;

    /**
     * @return The type of the IP address.
     * 
     */
    public Optional<Output<String>> ipType() {
        return Optional.ofNullable(this.ipType);
    }

    /**
     * The information about the node that is configured for the endpoint.  It contains two sub-fields(node_id and weight).
     * 
     */
    @Import(name="nodeItems")
    private @Nullable Output<List<DbInstanceEndpointNodeItemArgs>> nodeItems;

    /**
     * @return The information about the node that is configured for the endpoint.  It contains two sub-fields(node_id and weight).
     * 
     */
    public Optional<Output<List<DbInstanceEndpointNodeItemArgs>>> nodeItems() {
        return Optional.ofNullable(this.nodeItems);
    }

    /**
     * The port number of the internal endpoint. You can specify the port number for the internal endpoint.Valid values: 3000 to 5999.
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return The port number of the internal endpoint. You can specify the port number for the internal endpoint.Valid values: 3000 to 5999.
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The IP address of the internal endpoint.
     * 
     */
    @Import(name="privateIpAddress")
    private @Nullable Output<String> privateIpAddress;

    /**
     * @return The IP address of the internal endpoint.
     * 
     */
    public Optional<Output<String>> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }

    /**
     * The virtual private cloud (VPC) ID of the internal endpoint.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The virtual private cloud (VPC) ID of the internal endpoint.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The vSwitch ID of the internal endpoint.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The vSwitch ID of the internal endpoint.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private DbInstanceEndpointState() {}

    private DbInstanceEndpointState(DbInstanceEndpointState $) {
        this.connectionString = $.connectionString;
        this.connectionStringPrefix = $.connectionStringPrefix;
        this.dbInstanceEndpointDescription = $.dbInstanceEndpointDescription;
        this.dbInstanceEndpointId = $.dbInstanceEndpointId;
        this.dbInstanceEndpointType = $.dbInstanceEndpointType;
        this.dbInstanceId = $.dbInstanceId;
        this.ipType = $.ipType;
        this.nodeItems = $.nodeItems;
        this.port = $.port;
        this.privateIpAddress = $.privateIpAddress;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbInstanceEndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbInstanceEndpointState $;

        public Builder() {
            $ = new DbInstanceEndpointState();
        }

        public Builder(DbInstanceEndpointState defaults) {
            $ = new DbInstanceEndpointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionString The internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(@Nullable Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        /**
         * @param connectionString The internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        /**
         * @param connectionStringPrefix The IP address of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder connectionStringPrefix(@Nullable Output<String> connectionStringPrefix) {
            $.connectionStringPrefix = connectionStringPrefix;
            return this;
        }

        /**
         * @param connectionStringPrefix The IP address of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder connectionStringPrefix(String connectionStringPrefix) {
            return connectionStringPrefix(Output.of(connectionStringPrefix));
        }

        /**
         * @param dbInstanceEndpointDescription The user-defined description of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceEndpointDescription(@Nullable Output<String> dbInstanceEndpointDescription) {
            $.dbInstanceEndpointDescription = dbInstanceEndpointDescription;
            return this;
        }

        /**
         * @param dbInstanceEndpointDescription The user-defined description of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceEndpointDescription(String dbInstanceEndpointDescription) {
            return dbInstanceEndpointDescription(Output.of(dbInstanceEndpointDescription));
        }

        /**
         * @param dbInstanceEndpointId The Endpoint ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceEndpointId(@Nullable Output<String> dbInstanceEndpointId) {
            $.dbInstanceEndpointId = dbInstanceEndpointId;
            return this;
        }

        /**
         * @param dbInstanceEndpointId The Endpoint ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceEndpointId(String dbInstanceEndpointId) {
            return dbInstanceEndpointId(Output.of(dbInstanceEndpointId));
        }

        /**
         * @param dbInstanceEndpointType The type of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceEndpointType(@Nullable Output<String> dbInstanceEndpointType) {
            $.dbInstanceEndpointType = dbInstanceEndpointType;
            return this;
        }

        /**
         * @param dbInstanceEndpointType The type of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceEndpointType(String dbInstanceEndpointType) {
            return dbInstanceEndpointType(Output.of(dbInstanceEndpointType));
        }

        /**
         * @param dbInstanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(@Nullable Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param ipType The type of the IP address.
         * 
         * @return builder
         * 
         */
        public Builder ipType(@Nullable Output<String> ipType) {
            $.ipType = ipType;
            return this;
        }

        /**
         * @param ipType The type of the IP address.
         * 
         * @return builder
         * 
         */
        public Builder ipType(String ipType) {
            return ipType(Output.of(ipType));
        }

        /**
         * @param nodeItems The information about the node that is configured for the endpoint.  It contains two sub-fields(node_id and weight).
         * 
         * @return builder
         * 
         */
        public Builder nodeItems(@Nullable Output<List<DbInstanceEndpointNodeItemArgs>> nodeItems) {
            $.nodeItems = nodeItems;
            return this;
        }

        /**
         * @param nodeItems The information about the node that is configured for the endpoint.  It contains two sub-fields(node_id and weight).
         * 
         * @return builder
         * 
         */
        public Builder nodeItems(List<DbInstanceEndpointNodeItemArgs> nodeItems) {
            return nodeItems(Output.of(nodeItems));
        }

        /**
         * @param nodeItems The information about the node that is configured for the endpoint.  It contains two sub-fields(node_id and weight).
         * 
         * @return builder
         * 
         */
        public Builder nodeItems(DbInstanceEndpointNodeItemArgs... nodeItems) {
            return nodeItems(List.of(nodeItems));
        }

        /**
         * @param port The port number of the internal endpoint. You can specify the port number for the internal endpoint.Valid values: 3000 to 5999.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port number of the internal endpoint. You can specify the port number for the internal endpoint.Valid values: 3000 to 5999.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param privateIpAddress The IP address of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(@Nullable Output<String> privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        /**
         * @param privateIpAddress The IP address of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(String privateIpAddress) {
            return privateIpAddress(Output.of(privateIpAddress));
        }

        /**
         * @param vpcId The virtual private cloud (VPC) ID of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The virtual private cloud (VPC) ID of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The vSwitch ID of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The vSwitch ID of the internal endpoint.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public DbInstanceEndpointState build() {
            return $;
        }
    }

}
