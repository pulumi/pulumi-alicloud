// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eflo;

import com.pulumi.alicloud.eflo.inputs.NodeGroupIpAllocationPolicyArgs;
import com.pulumi.alicloud.eflo.inputs.NodeGroupNodeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodeGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeGroupArgs Empty = new NodeGroupArgs();

    /**
     * Az
     * 
     */
    @Import(name="az", required=true)
    private Output<String> az;

    /**
     * @return Az
     * 
     */
    public Output<String> az() {
        return this.az;
    }

    /**
     * Cluster ID
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return Cluster ID
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * Whether to allow skipping failed nodes. Default value: False
     * 
     */
    @Import(name="ignoreFailedNodeTasks")
    private @Nullable Output<Boolean> ignoreFailedNodeTasks;

    /**
     * @return Whether to allow skipping failed nodes. Default value: False
     * 
     */
    public Optional<Output<Boolean>> ignoreFailedNodeTasks() {
        return Optional.ofNullable(this.ignoreFailedNodeTasks);
    }

    /**
     * Image ID. You can modify the image ID since v1.252.0.
     * 
     */
    @Import(name="imageId", required=true)
    private Output<String> imageId;

    /**
     * @return Image ID. You can modify the image ID since v1.252.0.
     * 
     */
    public Output<String> imageId() {
        return this.imageId;
    }

    /**
     * IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
     * 
     */
    @Import(name="ipAllocationPolicies")
    private @Nullable Output<List<NodeGroupIpAllocationPolicyArgs>> ipAllocationPolicies;

    /**
     * @return IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
     * 
     */
    public Optional<Output<List<NodeGroupIpAllocationPolicyArgs>>> ipAllocationPolicies() {
        return Optional.ofNullable(this.ipAllocationPolicies);
    }

    /**
     * key pair name
     * 
     */
    @Import(name="keyPairName")
    private @Nullable Output<String> keyPairName;

    /**
     * @return key pair name
     * 
     */
    public Optional<Output<String>> keyPairName() {
        return Optional.ofNullable(this.keyPairName);
    }

    /**
     * Login Password
     * 
     */
    @Import(name="loginPassword")
    private @Nullable Output<String> loginPassword;

    /**
     * @return Login Password
     * 
     */
    public Optional<Output<String>> loginPassword() {
        return Optional.ofNullable(this.loginPassword);
    }

    /**
     * Machine type
     * 
     */
    @Import(name="machineType", required=true)
    private Output<String> machineType;

    /**
     * @return Machine type
     * 
     */
    public Output<String> machineType() {
        return this.machineType;
    }

    /**
     * NodeGroupDescription
     * 
     */
    @Import(name="nodeGroupDescription")
    private @Nullable Output<String> nodeGroupDescription;

    /**
     * @return NodeGroupDescription
     * 
     */
    public Optional<Output<String>> nodeGroupDescription() {
        return Optional.ofNullable(this.nodeGroupDescription);
    }

    /**
     * The name of the resource
     * 
     */
    @Import(name="nodeGroupName", required=true)
    private Output<String> nodeGroupName;

    /**
     * @return The name of the resource
     * 
     */
    public Output<String> nodeGroupName() {
        return this.nodeGroupName;
    }

    /**
     * Node List See `nodes` below.
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<NodeGroupNodeArgs>> nodes;

    /**
     * @return Node List See `nodes` below.
     * 
     */
    public Optional<Output<List<NodeGroupNodeArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * Custom Data
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return Custom Data
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    /**
     * Cluster subnet list
     * 
     */
    @Import(name="vpdSubnets")
    private @Nullable Output<List<String>> vpdSubnets;

    /**
     * @return Cluster subnet list
     * 
     */
    public Optional<Output<List<String>>> vpdSubnets() {
        return Optional.ofNullable(this.vpdSubnets);
    }

    /**
     * Zone ID of the switch
     * 
     */
    @Import(name="vswitchZoneId")
    private @Nullable Output<String> vswitchZoneId;

    /**
     * @return Zone ID of the switch
     * 
     */
    public Optional<Output<String>> vswitchZoneId() {
        return Optional.ofNullable(this.vswitchZoneId);
    }

    /**
     * Zone ID
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Zone ID
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private NodeGroupArgs() {}

    private NodeGroupArgs(NodeGroupArgs $) {
        this.az = $.az;
        this.clusterId = $.clusterId;
        this.ignoreFailedNodeTasks = $.ignoreFailedNodeTasks;
        this.imageId = $.imageId;
        this.ipAllocationPolicies = $.ipAllocationPolicies;
        this.keyPairName = $.keyPairName;
        this.loginPassword = $.loginPassword;
        this.machineType = $.machineType;
        this.nodeGroupDescription = $.nodeGroupDescription;
        this.nodeGroupName = $.nodeGroupName;
        this.nodes = $.nodes;
        this.userData = $.userData;
        this.vpdSubnets = $.vpdSubnets;
        this.vswitchZoneId = $.vswitchZoneId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeGroupArgs $;

        public Builder() {
            $ = new NodeGroupArgs();
        }

        public Builder(NodeGroupArgs defaults) {
            $ = new NodeGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param az Az
         * 
         * @return builder
         * 
         */
        public Builder az(Output<String> az) {
            $.az = az;
            return this;
        }

        /**
         * @param az Az
         * 
         * @return builder
         * 
         */
        public Builder az(String az) {
            return az(Output.of(az));
        }

        /**
         * @param clusterId Cluster ID
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId Cluster ID
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param ignoreFailedNodeTasks Whether to allow skipping failed nodes. Default value: False
         * 
         * @return builder
         * 
         */
        public Builder ignoreFailedNodeTasks(@Nullable Output<Boolean> ignoreFailedNodeTasks) {
            $.ignoreFailedNodeTasks = ignoreFailedNodeTasks;
            return this;
        }

        /**
         * @param ignoreFailedNodeTasks Whether to allow skipping failed nodes. Default value: False
         * 
         * @return builder
         * 
         */
        public Builder ignoreFailedNodeTasks(Boolean ignoreFailedNodeTasks) {
            return ignoreFailedNodeTasks(Output.of(ignoreFailedNodeTasks));
        }

        /**
         * @param imageId Image ID. You can modify the image ID since v1.252.0.
         * 
         * @return builder
         * 
         */
        public Builder imageId(Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId Image ID. You can modify the image ID since v1.252.0.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param ipAllocationPolicies IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocationPolicies(@Nullable Output<List<NodeGroupIpAllocationPolicyArgs>> ipAllocationPolicies) {
            $.ipAllocationPolicies = ipAllocationPolicies;
            return this;
        }

        /**
         * @param ipAllocationPolicies IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocationPolicies(List<NodeGroupIpAllocationPolicyArgs> ipAllocationPolicies) {
            return ipAllocationPolicies(Output.of(ipAllocationPolicies));
        }

        /**
         * @param ipAllocationPolicies IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocationPolicies(NodeGroupIpAllocationPolicyArgs... ipAllocationPolicies) {
            return ipAllocationPolicies(List.of(ipAllocationPolicies));
        }

        /**
         * @param keyPairName key pair name
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(@Nullable Output<String> keyPairName) {
            $.keyPairName = keyPairName;
            return this;
        }

        /**
         * @param keyPairName key pair name
         * 
         * @return builder
         * 
         */
        public Builder keyPairName(String keyPairName) {
            return keyPairName(Output.of(keyPairName));
        }

        /**
         * @param loginPassword Login Password
         * 
         * @return builder
         * 
         */
        public Builder loginPassword(@Nullable Output<String> loginPassword) {
            $.loginPassword = loginPassword;
            return this;
        }

        /**
         * @param loginPassword Login Password
         * 
         * @return builder
         * 
         */
        public Builder loginPassword(String loginPassword) {
            return loginPassword(Output.of(loginPassword));
        }

        /**
         * @param machineType Machine type
         * 
         * @return builder
         * 
         */
        public Builder machineType(Output<String> machineType) {
            $.machineType = machineType;
            return this;
        }

        /**
         * @param machineType Machine type
         * 
         * @return builder
         * 
         */
        public Builder machineType(String machineType) {
            return machineType(Output.of(machineType));
        }

        /**
         * @param nodeGroupDescription NodeGroupDescription
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupDescription(@Nullable Output<String> nodeGroupDescription) {
            $.nodeGroupDescription = nodeGroupDescription;
            return this;
        }

        /**
         * @param nodeGroupDescription NodeGroupDescription
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupDescription(String nodeGroupDescription) {
            return nodeGroupDescription(Output.of(nodeGroupDescription));
        }

        /**
         * @param nodeGroupName The name of the resource
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupName(Output<String> nodeGroupName) {
            $.nodeGroupName = nodeGroupName;
            return this;
        }

        /**
         * @param nodeGroupName The name of the resource
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupName(String nodeGroupName) {
            return nodeGroupName(Output.of(nodeGroupName));
        }

        /**
         * @param nodes Node List See `nodes` below.
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<NodeGroupNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes Node List See `nodes` below.
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<NodeGroupNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes Node List See `nodes` below.
         * 
         * @return builder
         * 
         */
        public Builder nodes(NodeGroupNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param userData Custom Data
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData Custom Data
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        /**
         * @param vpdSubnets Cluster subnet list
         * 
         * @return builder
         * 
         */
        public Builder vpdSubnets(@Nullable Output<List<String>> vpdSubnets) {
            $.vpdSubnets = vpdSubnets;
            return this;
        }

        /**
         * @param vpdSubnets Cluster subnet list
         * 
         * @return builder
         * 
         */
        public Builder vpdSubnets(List<String> vpdSubnets) {
            return vpdSubnets(Output.of(vpdSubnets));
        }

        /**
         * @param vpdSubnets Cluster subnet list
         * 
         * @return builder
         * 
         */
        public Builder vpdSubnets(String... vpdSubnets) {
            return vpdSubnets(List.of(vpdSubnets));
        }

        /**
         * @param vswitchZoneId Zone ID of the switch
         * 
         * @return builder
         * 
         */
        public Builder vswitchZoneId(@Nullable Output<String> vswitchZoneId) {
            $.vswitchZoneId = vswitchZoneId;
            return this;
        }

        /**
         * @param vswitchZoneId Zone ID of the switch
         * 
         * @return builder
         * 
         */
        public Builder vswitchZoneId(String vswitchZoneId) {
            return vswitchZoneId(Output.of(vswitchZoneId));
        }

        /**
         * @param zoneId Zone ID
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Zone ID
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public NodeGroupArgs build() {
            if ($.az == null) {
                throw new MissingRequiredPropertyException("NodeGroupArgs", "az");
            }
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("NodeGroupArgs", "clusterId");
            }
            if ($.imageId == null) {
                throw new MissingRequiredPropertyException("NodeGroupArgs", "imageId");
            }
            if ($.machineType == null) {
                throw new MissingRequiredPropertyException("NodeGroupArgs", "machineType");
            }
            if ($.nodeGroupName == null) {
                throw new MissingRequiredPropertyException("NodeGroupArgs", "nodeGroupName");
            }
            return $;
        }
    }

}
