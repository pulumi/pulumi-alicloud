// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.outputs;

import com.pulumi.alicloud.ess.outputs.GetScalingGroupsGroupLaunchTemplateOverride;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetScalingGroupsGroup {
    /**
     * @return Number of active instances in scaling group.
     * 
     */
    private Integer activeCapacity;
    /**
     * @return Active scaling configuration for scaling group.
     * 
     */
    private String activeScalingConfiguration;
    /**
     * @return (Available since v1.242.0) The allocation policy of instances. Auto Scaling selects instance types based on the allocation policy to create instances. The allocation policy applies to pay-as-you-go and preemptible instances.
     * 
     */
    private String allocationStrategy;
    /**
     * @return (Available since v1.242.0) Indicates whether instances in the scaling group are evenly distributed across multiple zones.
     * 
     */
    private Boolean azBalance;
    /**
     * @return (Available since v1.249.0) Indicates whether pay-as-you-go instances can be automatically created to meet the requirement on the number of ECS instances when the expected capacity of preemptible instances cannot be provided due to reasons such as cost-related issues and insufficient resources. This parameter is available only if you set MultiAZPolicy to COST_OPTIMIZED. Valid values: true, false.
     * 
     */
    private Boolean capacityOptionsCompensateWithOnDemand;
    /**
     * @return (Available since v1.249.0) The minimum number of pay-as-you-go instances required in the scaling group. When the actual number of pay-as-you-go instances drops below the minimum threshold, Auto Scaling preferentially creates pay-as-you-go instances. Valid values: 0 to 1000.
     * 
     */
    private Integer capacityOptionsOnDemandBaseCapacity;
    /**
     * @return (Available since v1.249.0) The percentage of pay-as-you-go instances in the excess instances when the minimum number of pay-as-you-go instances is reached. OnDemandBaseCapacity specifies the minimum number of pay-as-you-go instances that must be contained in the scaling group. Valid values: 0 to 100.
     * 
     */
    private Integer capacityOptionsOnDemandPercentageAboveBaseCapacity;
    /**
     * @return (Available since v1.249.0) Indicates whether pay-as-you-go instances can be replaced with preemptible instances. If you specify CompensateWithOnDemand, it may result in a higher percentage of pay-as-you-go instances compared to the value of OnDemandPercentageAboveBaseCapacity. If you specify this parameter, Auto Scaling preferentially deploys preemptible instances to replace the surplus pay-as-you-go instances when preemptible instance types are available. If you specify CompensateWithOnDemand, Auto Scaling creates pay-as-you-go instances when preemptible instance types are insufficient. To avoid retaining these pay-as-you-go instances for extended periods, Auto Scaling attempts to replace them with preemptible instances when sufficient preemptible instance types become available. Valid values: true, false.
     * 
     */
    private Boolean capacityOptionsSpotAutoReplaceOnDemand;
    /**
     * @return (Available since v1.249.0) Indicates whether pay-as-you-go instances can be automatically created to meet the requirement on the number of ECS instances when the expected capacity of preemptible instances cannot be provided due to reasons such as cost-related issues and insufficient resources. This parameter is available only if you set MultiAZPolicy to COST_OPTIMIZED. Valid values: true, false.
     * 
     */
    private Boolean compensateWithOnDemand;
    /**
     * @return Default cooldown time of scaling group.
     * 
     */
    private Integer cooldownTime;
    /**
     * @return Creation time of scaling group.
     * 
     */
    private String creationTime;
    /**
     * @return Db instances id which the ECS instance attached to.
     * 
     */
    private List<String> dbInstanceIds;
    /**
     * @return (Available since v1.242.0) The expected number of ECS instances in the scaling group. Auto Scaling automatically maintains the expected number of ECS instances that you specified.
     * 
     */
    private Integer desiredCapacity;
    /**
     * @return (Available since v1.242.0) Indicates whether the Expected Number of Instances feature is enabled.
     * 
     */
    private Boolean enableDesiredCapacity;
    /**
     * @return Whether the scaling group deletion protection is enabled.
     * 
     */
    private Boolean groupDeletionProtection;
    /**
     * @return (Available since v1.242.0) The type of the instances in the scaling group.
     * 
     */
    private String groupType;
    /**
     * @return The health check method of the scaling group.
     * 
     */
    private String healthCheckType;
    /**
     * @return ID of the scaling group.
     * 
     */
    private String id;
    /**
     * @return (Available since v1.242.0) The number of instances that are in the Initialized state and ready to be scaled out in the scaling group.
     * 
     */
    private Integer initCapacity;
    /**
     * @return Active launch template ID for scaling group.
     * 
     */
    private String launchTemplateId;
    /**
     * @return (Available since v1.249.0) The instance types that are specified by using the Extend Launch Template feature.
     * 
     */
    private List<GetScalingGroupsGroupLaunchTemplateOverride> launchTemplateOverrides;
    /**
     * @return Version of active launch template.
     * 
     */
    private String launchTemplateVersion;
    /**
     * @return Lifecycle state of scaling group.
     * 
     */
    private String lifecycleState;
    /**
     * @return Slb instances id which the ECS instance attached to.
     * 
     */
    private List<String> loadBalancerIds;
    /**
     * @return (Available since v1.242.0) The maximum life span of each instance in the scaling group. Unit: seconds.
     * 
     */
    private Integer maxInstanceLifetime;
    /**
     * @return The maximum number of ECS instances.
     * 
     */
    private Integer maxSize;
    /**
     * @return The minimum number of ECS instances.
     * 
     */
    private Integer minSize;
    /**
     * @return The modification time.
     * 
     */
    private String modificationTime;
    /**
     * @return (Available since v1.242.0) The ID of the CloudMonitor application group that is associated with the scaling group.
     * 
     */
    private String monitorGroupId;
    /**
     * @return (Available since v1.242.0) The scaling policy of the multi-zone scaling group of the ECS type.
     * 
     */
    private String multiAzPolicy;
    /**
     * @return Name of the scaling group.
     * 
     */
    private String name;
    /**
     * @return (Available since v1.242.0) The lower limit of the number of pay-as-you-go instances in the scaling group.
     * 
     */
    private Integer onDemandBaseCapacity;
    /**
     * @return (Available since v1.242.0) The percentage of pay-as-you-go instances in the excess instances when the minimum number of pay-as-you-go instances is reached. OnDemandBaseCapacity specifies the minimum number of pay-as-you-go instances that must be contained in the scaling group.
     * 
     */
    private Integer onDemandPercentageAboveBaseCapacity;
    /**
     * @return (Available since v1.242.0) The number of ECS instances that are being added to the scaling group and still being configured.
     * 
     */
    private Integer pendingCapacity;
    /**
     * @return (Available since v1.242.0) The number of ECS instances that are in the Pending Add state in the scaling group.
     * 
     */
    private Integer pendingWaitCapacity;
    /**
     * @return (Available since v1.242.0) The number of ECS instances that are in the Protected state in the scaling group.
     * 
     */
    private Integer protectedCapacity;
    /**
     * @return Region ID the scaling group belongs to.
     * 
     */
    private String regionId;
    /**
     * @return Removal policy used to select the ECS instance to remove from the scaling group.
     * 
     */
    private List<String> removalPolicies;
    /**
     * @return (Available since v1.242.0) The number of ECS instances that are being removed from the scaling group.
     * 
     */
    private Integer removingCapacity;
    /**
     * @return (Available since v1.242.0) The number of ECS instances that are in the Pending Remove state in the scaling group.
     * 
     */
    private Integer removingWaitCapacity;
    /**
     * @return (Available since v1.242.0) The ID of the resource group to which the scaling group that you want to query belongs.
     * 
     */
    private String resourceGroupId;
    /**
     * @return (Available since v1.242.0) The reclaim mode of the scaling group.
     * 
     */
    private String scalingPolicy;
    /**
     * @return (Available since v1.242.0) The allocation policy of preemptible instances. This parameter indicates the method used by Auto Scaling to select instance types to create the required number of preemptible instances. This parameter takes effect only if you set multiAzPolicy to COMPOSABLE.
     * 
     */
    private String spotAllocationStrategy;
    /**
     * @return (Available since v1.242.0) The number of preemptible instances in the scaling group.
     * 
     */
    private Integer spotCapacity;
    /**
     * @return (Available since v1.242.0) The number of instance types. Auto Scaling creates preemptible instances of multiple instance types that are provided at the lowest price.
     * 
     */
    private Integer spotInstancePools;
    /**
     * @return (Available since v1.242.0) Indicates whether supplementation of preemptible instances is enabled. If this parameter is set to true, Auto Scaling creates an instance to replace a preemptible instance when Auto Scaling receives a system message indicating that the preemptible instance is to be reclaimed.
     * 
     */
    private Boolean spotInstanceRemedy;
    /**
     * @return (Available since v1.242.0) The number of instances that are in the Standby state in the scaling group.
     * 
     */
    private Integer standbyCapacity;
    /**
     * @return (Available since v1.242.0) The period of time that is required by an ECS instance to enter the Stopped state during the scale-in process. Unit: seconds.
     * 
     */
    private Integer stopInstanceTimeout;
    /**
     * @return (Available since v1.242.0) The number of instances that are in Economical Mode in the scaling group.
     * 
     */
    private Integer stoppedCapacity;
    /**
     * @return The Process in suspension.
     * 
     */
    private List<String> suspendedProcesses;
    /**
     * @return (Available since v1.242.0) Indicates whether Auto Scaling stops executing the scaling operation in the scaling group.
     * 
     */
    private Boolean systemSuspended;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Number of instances in scaling group.
     * 
     */
    private Integer totalCapacity;
    /**
     * @return The number of all ECS instances in the scaling group.
     * 
     */
    private Integer totalInstanceCount;
    /**
     * @return The ID of the VPC to which the scaling group belongs.
     * 
     */
    private String vpcId;
    /**
     * @return The ID of the vSwitch to which the scaling group belongs.
     * 
     */
    private String vswitchId;
    /**
     * @return Vswitches id in which the ECS instance launched.
     * 
     */
    private List<String> vswitchIds;

    private GetScalingGroupsGroup() {}
    /**
     * @return Number of active instances in scaling group.
     * 
     */
    public Integer activeCapacity() {
        return this.activeCapacity;
    }
    /**
     * @return Active scaling configuration for scaling group.
     * 
     */
    public String activeScalingConfiguration() {
        return this.activeScalingConfiguration;
    }
    /**
     * @return (Available since v1.242.0) The allocation policy of instances. Auto Scaling selects instance types based on the allocation policy to create instances. The allocation policy applies to pay-as-you-go and preemptible instances.
     * 
     */
    public String allocationStrategy() {
        return this.allocationStrategy;
    }
    /**
     * @return (Available since v1.242.0) Indicates whether instances in the scaling group are evenly distributed across multiple zones.
     * 
     */
    public Boolean azBalance() {
        return this.azBalance;
    }
    /**
     * @return (Available since v1.249.0) Indicates whether pay-as-you-go instances can be automatically created to meet the requirement on the number of ECS instances when the expected capacity of preemptible instances cannot be provided due to reasons such as cost-related issues and insufficient resources. This parameter is available only if you set MultiAZPolicy to COST_OPTIMIZED. Valid values: true, false.
     * 
     */
    public Boolean capacityOptionsCompensateWithOnDemand() {
        return this.capacityOptionsCompensateWithOnDemand;
    }
    /**
     * @return (Available since v1.249.0) The minimum number of pay-as-you-go instances required in the scaling group. When the actual number of pay-as-you-go instances drops below the minimum threshold, Auto Scaling preferentially creates pay-as-you-go instances. Valid values: 0 to 1000.
     * 
     */
    public Integer capacityOptionsOnDemandBaseCapacity() {
        return this.capacityOptionsOnDemandBaseCapacity;
    }
    /**
     * @return (Available since v1.249.0) The percentage of pay-as-you-go instances in the excess instances when the minimum number of pay-as-you-go instances is reached. OnDemandBaseCapacity specifies the minimum number of pay-as-you-go instances that must be contained in the scaling group. Valid values: 0 to 100.
     * 
     */
    public Integer capacityOptionsOnDemandPercentageAboveBaseCapacity() {
        return this.capacityOptionsOnDemandPercentageAboveBaseCapacity;
    }
    /**
     * @return (Available since v1.249.0) Indicates whether pay-as-you-go instances can be replaced with preemptible instances. If you specify CompensateWithOnDemand, it may result in a higher percentage of pay-as-you-go instances compared to the value of OnDemandPercentageAboveBaseCapacity. If you specify this parameter, Auto Scaling preferentially deploys preemptible instances to replace the surplus pay-as-you-go instances when preemptible instance types are available. If you specify CompensateWithOnDemand, Auto Scaling creates pay-as-you-go instances when preemptible instance types are insufficient. To avoid retaining these pay-as-you-go instances for extended periods, Auto Scaling attempts to replace them with preemptible instances when sufficient preemptible instance types become available. Valid values: true, false.
     * 
     */
    public Boolean capacityOptionsSpotAutoReplaceOnDemand() {
        return this.capacityOptionsSpotAutoReplaceOnDemand;
    }
    /**
     * @return (Available since v1.249.0) Indicates whether pay-as-you-go instances can be automatically created to meet the requirement on the number of ECS instances when the expected capacity of preemptible instances cannot be provided due to reasons such as cost-related issues and insufficient resources. This parameter is available only if you set MultiAZPolicy to COST_OPTIMIZED. Valid values: true, false.
     * 
     */
    public Boolean compensateWithOnDemand() {
        return this.compensateWithOnDemand;
    }
    /**
     * @return Default cooldown time of scaling group.
     * 
     */
    public Integer cooldownTime() {
        return this.cooldownTime;
    }
    /**
     * @return Creation time of scaling group.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return Db instances id which the ECS instance attached to.
     * 
     */
    public List<String> dbInstanceIds() {
        return this.dbInstanceIds;
    }
    /**
     * @return (Available since v1.242.0) The expected number of ECS instances in the scaling group. Auto Scaling automatically maintains the expected number of ECS instances that you specified.
     * 
     */
    public Integer desiredCapacity() {
        return this.desiredCapacity;
    }
    /**
     * @return (Available since v1.242.0) Indicates whether the Expected Number of Instances feature is enabled.
     * 
     */
    public Boolean enableDesiredCapacity() {
        return this.enableDesiredCapacity;
    }
    /**
     * @return Whether the scaling group deletion protection is enabled.
     * 
     */
    public Boolean groupDeletionProtection() {
        return this.groupDeletionProtection;
    }
    /**
     * @return (Available since v1.242.0) The type of the instances in the scaling group.
     * 
     */
    public String groupType() {
        return this.groupType;
    }
    /**
     * @return The health check method of the scaling group.
     * 
     */
    public String healthCheckType() {
        return this.healthCheckType;
    }
    /**
     * @return ID of the scaling group.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Available since v1.242.0) The number of instances that are in the Initialized state and ready to be scaled out in the scaling group.
     * 
     */
    public Integer initCapacity() {
        return this.initCapacity;
    }
    /**
     * @return Active launch template ID for scaling group.
     * 
     */
    public String launchTemplateId() {
        return this.launchTemplateId;
    }
    /**
     * @return (Available since v1.249.0) The instance types that are specified by using the Extend Launch Template feature.
     * 
     */
    public List<GetScalingGroupsGroupLaunchTemplateOverride> launchTemplateOverrides() {
        return this.launchTemplateOverrides;
    }
    /**
     * @return Version of active launch template.
     * 
     */
    public String launchTemplateVersion() {
        return this.launchTemplateVersion;
    }
    /**
     * @return Lifecycle state of scaling group.
     * 
     */
    public String lifecycleState() {
        return this.lifecycleState;
    }
    /**
     * @return Slb instances id which the ECS instance attached to.
     * 
     */
    public List<String> loadBalancerIds() {
        return this.loadBalancerIds;
    }
    /**
     * @return (Available since v1.242.0) The maximum life span of each instance in the scaling group. Unit: seconds.
     * 
     */
    public Integer maxInstanceLifetime() {
        return this.maxInstanceLifetime;
    }
    /**
     * @return The maximum number of ECS instances.
     * 
     */
    public Integer maxSize() {
        return this.maxSize;
    }
    /**
     * @return The minimum number of ECS instances.
     * 
     */
    public Integer minSize() {
        return this.minSize;
    }
    /**
     * @return The modification time.
     * 
     */
    public String modificationTime() {
        return this.modificationTime;
    }
    /**
     * @return (Available since v1.242.0) The ID of the CloudMonitor application group that is associated with the scaling group.
     * 
     */
    public String monitorGroupId() {
        return this.monitorGroupId;
    }
    /**
     * @return (Available since v1.242.0) The scaling policy of the multi-zone scaling group of the ECS type.
     * 
     */
    public String multiAzPolicy() {
        return this.multiAzPolicy;
    }
    /**
     * @return Name of the scaling group.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Available since v1.242.0) The lower limit of the number of pay-as-you-go instances in the scaling group.
     * 
     */
    public Integer onDemandBaseCapacity() {
        return this.onDemandBaseCapacity;
    }
    /**
     * @return (Available since v1.242.0) The percentage of pay-as-you-go instances in the excess instances when the minimum number of pay-as-you-go instances is reached. OnDemandBaseCapacity specifies the minimum number of pay-as-you-go instances that must be contained in the scaling group.
     * 
     */
    public Integer onDemandPercentageAboveBaseCapacity() {
        return this.onDemandPercentageAboveBaseCapacity;
    }
    /**
     * @return (Available since v1.242.0) The number of ECS instances that are being added to the scaling group and still being configured.
     * 
     */
    public Integer pendingCapacity() {
        return this.pendingCapacity;
    }
    /**
     * @return (Available since v1.242.0) The number of ECS instances that are in the Pending Add state in the scaling group.
     * 
     */
    public Integer pendingWaitCapacity() {
        return this.pendingWaitCapacity;
    }
    /**
     * @return (Available since v1.242.0) The number of ECS instances that are in the Protected state in the scaling group.
     * 
     */
    public Integer protectedCapacity() {
        return this.protectedCapacity;
    }
    /**
     * @return Region ID the scaling group belongs to.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return Removal policy used to select the ECS instance to remove from the scaling group.
     * 
     */
    public List<String> removalPolicies() {
        return this.removalPolicies;
    }
    /**
     * @return (Available since v1.242.0) The number of ECS instances that are being removed from the scaling group.
     * 
     */
    public Integer removingCapacity() {
        return this.removingCapacity;
    }
    /**
     * @return (Available since v1.242.0) The number of ECS instances that are in the Pending Remove state in the scaling group.
     * 
     */
    public Integer removingWaitCapacity() {
        return this.removingWaitCapacity;
    }
    /**
     * @return (Available since v1.242.0) The ID of the resource group to which the scaling group that you want to query belongs.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return (Available since v1.242.0) The reclaim mode of the scaling group.
     * 
     */
    public String scalingPolicy() {
        return this.scalingPolicy;
    }
    /**
     * @return (Available since v1.242.0) The allocation policy of preemptible instances. This parameter indicates the method used by Auto Scaling to select instance types to create the required number of preemptible instances. This parameter takes effect only if you set multiAzPolicy to COMPOSABLE.
     * 
     */
    public String spotAllocationStrategy() {
        return this.spotAllocationStrategy;
    }
    /**
     * @return (Available since v1.242.0) The number of preemptible instances in the scaling group.
     * 
     */
    public Integer spotCapacity() {
        return this.spotCapacity;
    }
    /**
     * @return (Available since v1.242.0) The number of instance types. Auto Scaling creates preemptible instances of multiple instance types that are provided at the lowest price.
     * 
     */
    public Integer spotInstancePools() {
        return this.spotInstancePools;
    }
    /**
     * @return (Available since v1.242.0) Indicates whether supplementation of preemptible instances is enabled. If this parameter is set to true, Auto Scaling creates an instance to replace a preemptible instance when Auto Scaling receives a system message indicating that the preemptible instance is to be reclaimed.
     * 
     */
    public Boolean spotInstanceRemedy() {
        return this.spotInstanceRemedy;
    }
    /**
     * @return (Available since v1.242.0) The number of instances that are in the Standby state in the scaling group.
     * 
     */
    public Integer standbyCapacity() {
        return this.standbyCapacity;
    }
    /**
     * @return (Available since v1.242.0) The period of time that is required by an ECS instance to enter the Stopped state during the scale-in process. Unit: seconds.
     * 
     */
    public Integer stopInstanceTimeout() {
        return this.stopInstanceTimeout;
    }
    /**
     * @return (Available since v1.242.0) The number of instances that are in Economical Mode in the scaling group.
     * 
     */
    public Integer stoppedCapacity() {
        return this.stoppedCapacity;
    }
    /**
     * @return The Process in suspension.
     * 
     */
    public List<String> suspendedProcesses() {
        return this.suspendedProcesses;
    }
    /**
     * @return (Available since v1.242.0) Indicates whether Auto Scaling stops executing the scaling operation in the scaling group.
     * 
     */
    public Boolean systemSuspended() {
        return this.systemSuspended;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Number of instances in scaling group.
     * 
     */
    public Integer totalCapacity() {
        return this.totalCapacity;
    }
    /**
     * @return The number of all ECS instances in the scaling group.
     * 
     */
    public Integer totalInstanceCount() {
        return this.totalInstanceCount;
    }
    /**
     * @return The ID of the VPC to which the scaling group belongs.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The ID of the vSwitch to which the scaling group belongs.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return Vswitches id in which the ECS instance launched.
     * 
     */
    public List<String> vswitchIds() {
        return this.vswitchIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScalingGroupsGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activeCapacity;
        private String activeScalingConfiguration;
        private String allocationStrategy;
        private Boolean azBalance;
        private Boolean capacityOptionsCompensateWithOnDemand;
        private Integer capacityOptionsOnDemandBaseCapacity;
        private Integer capacityOptionsOnDemandPercentageAboveBaseCapacity;
        private Boolean capacityOptionsSpotAutoReplaceOnDemand;
        private Boolean compensateWithOnDemand;
        private Integer cooldownTime;
        private String creationTime;
        private List<String> dbInstanceIds;
        private Integer desiredCapacity;
        private Boolean enableDesiredCapacity;
        private Boolean groupDeletionProtection;
        private String groupType;
        private String healthCheckType;
        private String id;
        private Integer initCapacity;
        private String launchTemplateId;
        private List<GetScalingGroupsGroupLaunchTemplateOverride> launchTemplateOverrides;
        private String launchTemplateVersion;
        private String lifecycleState;
        private List<String> loadBalancerIds;
        private Integer maxInstanceLifetime;
        private Integer maxSize;
        private Integer minSize;
        private String modificationTime;
        private String monitorGroupId;
        private String multiAzPolicy;
        private String name;
        private Integer onDemandBaseCapacity;
        private Integer onDemandPercentageAboveBaseCapacity;
        private Integer pendingCapacity;
        private Integer pendingWaitCapacity;
        private Integer protectedCapacity;
        private String regionId;
        private List<String> removalPolicies;
        private Integer removingCapacity;
        private Integer removingWaitCapacity;
        private String resourceGroupId;
        private String scalingPolicy;
        private String spotAllocationStrategy;
        private Integer spotCapacity;
        private Integer spotInstancePools;
        private Boolean spotInstanceRemedy;
        private Integer standbyCapacity;
        private Integer stopInstanceTimeout;
        private Integer stoppedCapacity;
        private List<String> suspendedProcesses;
        private Boolean systemSuspended;
        private Map<String,String> tags;
        private Integer totalCapacity;
        private Integer totalInstanceCount;
        private String vpcId;
        private String vswitchId;
        private List<String> vswitchIds;
        public Builder() {}
        public Builder(GetScalingGroupsGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeCapacity = defaults.activeCapacity;
    	      this.activeScalingConfiguration = defaults.activeScalingConfiguration;
    	      this.allocationStrategy = defaults.allocationStrategy;
    	      this.azBalance = defaults.azBalance;
    	      this.capacityOptionsCompensateWithOnDemand = defaults.capacityOptionsCompensateWithOnDemand;
    	      this.capacityOptionsOnDemandBaseCapacity = defaults.capacityOptionsOnDemandBaseCapacity;
    	      this.capacityOptionsOnDemandPercentageAboveBaseCapacity = defaults.capacityOptionsOnDemandPercentageAboveBaseCapacity;
    	      this.capacityOptionsSpotAutoReplaceOnDemand = defaults.capacityOptionsSpotAutoReplaceOnDemand;
    	      this.compensateWithOnDemand = defaults.compensateWithOnDemand;
    	      this.cooldownTime = defaults.cooldownTime;
    	      this.creationTime = defaults.creationTime;
    	      this.dbInstanceIds = defaults.dbInstanceIds;
    	      this.desiredCapacity = defaults.desiredCapacity;
    	      this.enableDesiredCapacity = defaults.enableDesiredCapacity;
    	      this.groupDeletionProtection = defaults.groupDeletionProtection;
    	      this.groupType = defaults.groupType;
    	      this.healthCheckType = defaults.healthCheckType;
    	      this.id = defaults.id;
    	      this.initCapacity = defaults.initCapacity;
    	      this.launchTemplateId = defaults.launchTemplateId;
    	      this.launchTemplateOverrides = defaults.launchTemplateOverrides;
    	      this.launchTemplateVersion = defaults.launchTemplateVersion;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.loadBalancerIds = defaults.loadBalancerIds;
    	      this.maxInstanceLifetime = defaults.maxInstanceLifetime;
    	      this.maxSize = defaults.maxSize;
    	      this.minSize = defaults.minSize;
    	      this.modificationTime = defaults.modificationTime;
    	      this.monitorGroupId = defaults.monitorGroupId;
    	      this.multiAzPolicy = defaults.multiAzPolicy;
    	      this.name = defaults.name;
    	      this.onDemandBaseCapacity = defaults.onDemandBaseCapacity;
    	      this.onDemandPercentageAboveBaseCapacity = defaults.onDemandPercentageAboveBaseCapacity;
    	      this.pendingCapacity = defaults.pendingCapacity;
    	      this.pendingWaitCapacity = defaults.pendingWaitCapacity;
    	      this.protectedCapacity = defaults.protectedCapacity;
    	      this.regionId = defaults.regionId;
    	      this.removalPolicies = defaults.removalPolicies;
    	      this.removingCapacity = defaults.removingCapacity;
    	      this.removingWaitCapacity = defaults.removingWaitCapacity;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.scalingPolicy = defaults.scalingPolicy;
    	      this.spotAllocationStrategy = defaults.spotAllocationStrategy;
    	      this.spotCapacity = defaults.spotCapacity;
    	      this.spotInstancePools = defaults.spotInstancePools;
    	      this.spotInstanceRemedy = defaults.spotInstanceRemedy;
    	      this.standbyCapacity = defaults.standbyCapacity;
    	      this.stopInstanceTimeout = defaults.stopInstanceTimeout;
    	      this.stoppedCapacity = defaults.stoppedCapacity;
    	      this.suspendedProcesses = defaults.suspendedProcesses;
    	      this.systemSuspended = defaults.systemSuspended;
    	      this.tags = defaults.tags;
    	      this.totalCapacity = defaults.totalCapacity;
    	      this.totalInstanceCount = defaults.totalInstanceCount;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.vswitchIds = defaults.vswitchIds;
        }

        @CustomType.Setter
        public Builder activeCapacity(Integer activeCapacity) {
            if (activeCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "activeCapacity");
            }
            this.activeCapacity = activeCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder activeScalingConfiguration(String activeScalingConfiguration) {
            if (activeScalingConfiguration == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "activeScalingConfiguration");
            }
            this.activeScalingConfiguration = activeScalingConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder allocationStrategy(String allocationStrategy) {
            if (allocationStrategy == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "allocationStrategy");
            }
            this.allocationStrategy = allocationStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder azBalance(Boolean azBalance) {
            if (azBalance == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "azBalance");
            }
            this.azBalance = azBalance;
            return this;
        }
        @CustomType.Setter
        public Builder capacityOptionsCompensateWithOnDemand(Boolean capacityOptionsCompensateWithOnDemand) {
            if (capacityOptionsCompensateWithOnDemand == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "capacityOptionsCompensateWithOnDemand");
            }
            this.capacityOptionsCompensateWithOnDemand = capacityOptionsCompensateWithOnDemand;
            return this;
        }
        @CustomType.Setter
        public Builder capacityOptionsOnDemandBaseCapacity(Integer capacityOptionsOnDemandBaseCapacity) {
            if (capacityOptionsOnDemandBaseCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "capacityOptionsOnDemandBaseCapacity");
            }
            this.capacityOptionsOnDemandBaseCapacity = capacityOptionsOnDemandBaseCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder capacityOptionsOnDemandPercentageAboveBaseCapacity(Integer capacityOptionsOnDemandPercentageAboveBaseCapacity) {
            if (capacityOptionsOnDemandPercentageAboveBaseCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "capacityOptionsOnDemandPercentageAboveBaseCapacity");
            }
            this.capacityOptionsOnDemandPercentageAboveBaseCapacity = capacityOptionsOnDemandPercentageAboveBaseCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder capacityOptionsSpotAutoReplaceOnDemand(Boolean capacityOptionsSpotAutoReplaceOnDemand) {
            if (capacityOptionsSpotAutoReplaceOnDemand == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "capacityOptionsSpotAutoReplaceOnDemand");
            }
            this.capacityOptionsSpotAutoReplaceOnDemand = capacityOptionsSpotAutoReplaceOnDemand;
            return this;
        }
        @CustomType.Setter
        public Builder compensateWithOnDemand(Boolean compensateWithOnDemand) {
            if (compensateWithOnDemand == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "compensateWithOnDemand");
            }
            this.compensateWithOnDemand = compensateWithOnDemand;
            return this;
        }
        @CustomType.Setter
        public Builder cooldownTime(Integer cooldownTime) {
            if (cooldownTime == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "cooldownTime");
            }
            this.cooldownTime = cooldownTime;
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceIds(List<String> dbInstanceIds) {
            if (dbInstanceIds == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "dbInstanceIds");
            }
            this.dbInstanceIds = dbInstanceIds;
            return this;
        }
        public Builder dbInstanceIds(String... dbInstanceIds) {
            return dbInstanceIds(List.of(dbInstanceIds));
        }
        @CustomType.Setter
        public Builder desiredCapacity(Integer desiredCapacity) {
            if (desiredCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "desiredCapacity");
            }
            this.desiredCapacity = desiredCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder enableDesiredCapacity(Boolean enableDesiredCapacity) {
            if (enableDesiredCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "enableDesiredCapacity");
            }
            this.enableDesiredCapacity = enableDesiredCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder groupDeletionProtection(Boolean groupDeletionProtection) {
            if (groupDeletionProtection == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "groupDeletionProtection");
            }
            this.groupDeletionProtection = groupDeletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder groupType(String groupType) {
            if (groupType == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "groupType");
            }
            this.groupType = groupType;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckType(String healthCheckType) {
            if (healthCheckType == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "healthCheckType");
            }
            this.healthCheckType = healthCheckType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder initCapacity(Integer initCapacity) {
            if (initCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "initCapacity");
            }
            this.initCapacity = initCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder launchTemplateId(String launchTemplateId) {
            if (launchTemplateId == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "launchTemplateId");
            }
            this.launchTemplateId = launchTemplateId;
            return this;
        }
        @CustomType.Setter
        public Builder launchTemplateOverrides(List<GetScalingGroupsGroupLaunchTemplateOverride> launchTemplateOverrides) {
            if (launchTemplateOverrides == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "launchTemplateOverrides");
            }
            this.launchTemplateOverrides = launchTemplateOverrides;
            return this;
        }
        public Builder launchTemplateOverrides(GetScalingGroupsGroupLaunchTemplateOverride... launchTemplateOverrides) {
            return launchTemplateOverrides(List.of(launchTemplateOverrides));
        }
        @CustomType.Setter
        public Builder launchTemplateVersion(String launchTemplateVersion) {
            if (launchTemplateVersion == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "launchTemplateVersion");
            }
            this.launchTemplateVersion = launchTemplateVersion;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleState(String lifecycleState) {
            if (lifecycleState == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "lifecycleState");
            }
            this.lifecycleState = lifecycleState;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerIds(List<String> loadBalancerIds) {
            if (loadBalancerIds == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "loadBalancerIds");
            }
            this.loadBalancerIds = loadBalancerIds;
            return this;
        }
        public Builder loadBalancerIds(String... loadBalancerIds) {
            return loadBalancerIds(List.of(loadBalancerIds));
        }
        @CustomType.Setter
        public Builder maxInstanceLifetime(Integer maxInstanceLifetime) {
            if (maxInstanceLifetime == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "maxInstanceLifetime");
            }
            this.maxInstanceLifetime = maxInstanceLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder maxSize(Integer maxSize) {
            if (maxSize == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "maxSize");
            }
            this.maxSize = maxSize;
            return this;
        }
        @CustomType.Setter
        public Builder minSize(Integer minSize) {
            if (minSize == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "minSize");
            }
            this.minSize = minSize;
            return this;
        }
        @CustomType.Setter
        public Builder modificationTime(String modificationTime) {
            if (modificationTime == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "modificationTime");
            }
            this.modificationTime = modificationTime;
            return this;
        }
        @CustomType.Setter
        public Builder monitorGroupId(String monitorGroupId) {
            if (monitorGroupId == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "monitorGroupId");
            }
            this.monitorGroupId = monitorGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder multiAzPolicy(String multiAzPolicy) {
            if (multiAzPolicy == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "multiAzPolicy");
            }
            this.multiAzPolicy = multiAzPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder onDemandBaseCapacity(Integer onDemandBaseCapacity) {
            if (onDemandBaseCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "onDemandBaseCapacity");
            }
            this.onDemandBaseCapacity = onDemandBaseCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder onDemandPercentageAboveBaseCapacity(Integer onDemandPercentageAboveBaseCapacity) {
            if (onDemandPercentageAboveBaseCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "onDemandPercentageAboveBaseCapacity");
            }
            this.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder pendingCapacity(Integer pendingCapacity) {
            if (pendingCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "pendingCapacity");
            }
            this.pendingCapacity = pendingCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder pendingWaitCapacity(Integer pendingWaitCapacity) {
            if (pendingWaitCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "pendingWaitCapacity");
            }
            this.pendingWaitCapacity = pendingWaitCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder protectedCapacity(Integer protectedCapacity) {
            if (protectedCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "protectedCapacity");
            }
            this.protectedCapacity = protectedCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder regionId(String regionId) {
            if (regionId == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "regionId");
            }
            this.regionId = regionId;
            return this;
        }
        @CustomType.Setter
        public Builder removalPolicies(List<String> removalPolicies) {
            if (removalPolicies == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "removalPolicies");
            }
            this.removalPolicies = removalPolicies;
            return this;
        }
        public Builder removalPolicies(String... removalPolicies) {
            return removalPolicies(List.of(removalPolicies));
        }
        @CustomType.Setter
        public Builder removingCapacity(Integer removingCapacity) {
            if (removingCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "removingCapacity");
            }
            this.removingCapacity = removingCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder removingWaitCapacity(Integer removingWaitCapacity) {
            if (removingWaitCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "removingWaitCapacity");
            }
            this.removingWaitCapacity = removingWaitCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            if (resourceGroupId == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "resourceGroupId");
            }
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder scalingPolicy(String scalingPolicy) {
            if (scalingPolicy == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "scalingPolicy");
            }
            this.scalingPolicy = scalingPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder spotAllocationStrategy(String spotAllocationStrategy) {
            if (spotAllocationStrategy == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "spotAllocationStrategy");
            }
            this.spotAllocationStrategy = spotAllocationStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder spotCapacity(Integer spotCapacity) {
            if (spotCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "spotCapacity");
            }
            this.spotCapacity = spotCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder spotInstancePools(Integer spotInstancePools) {
            if (spotInstancePools == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "spotInstancePools");
            }
            this.spotInstancePools = spotInstancePools;
            return this;
        }
        @CustomType.Setter
        public Builder spotInstanceRemedy(Boolean spotInstanceRemedy) {
            if (spotInstanceRemedy == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "spotInstanceRemedy");
            }
            this.spotInstanceRemedy = spotInstanceRemedy;
            return this;
        }
        @CustomType.Setter
        public Builder standbyCapacity(Integer standbyCapacity) {
            if (standbyCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "standbyCapacity");
            }
            this.standbyCapacity = standbyCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder stopInstanceTimeout(Integer stopInstanceTimeout) {
            if (stopInstanceTimeout == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "stopInstanceTimeout");
            }
            this.stopInstanceTimeout = stopInstanceTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder stoppedCapacity(Integer stoppedCapacity) {
            if (stoppedCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "stoppedCapacity");
            }
            this.stoppedCapacity = stoppedCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder suspendedProcesses(List<String> suspendedProcesses) {
            if (suspendedProcesses == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "suspendedProcesses");
            }
            this.suspendedProcesses = suspendedProcesses;
            return this;
        }
        public Builder suspendedProcesses(String... suspendedProcesses) {
            return suspendedProcesses(List.of(suspendedProcesses));
        }
        @CustomType.Setter
        public Builder systemSuspended(Boolean systemSuspended) {
            if (systemSuspended == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "systemSuspended");
            }
            this.systemSuspended = systemSuspended;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder totalCapacity(Integer totalCapacity) {
            if (totalCapacity == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "totalCapacity");
            }
            this.totalCapacity = totalCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder totalInstanceCount(Integer totalInstanceCount) {
            if (totalInstanceCount == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "totalInstanceCount");
            }
            this.totalInstanceCount = totalInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            if (vswitchId == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "vswitchId");
            }
            this.vswitchId = vswitchId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchIds(List<String> vswitchIds) {
            if (vswitchIds == null) {
              throw new MissingRequiredPropertyException("GetScalingGroupsGroup", "vswitchIds");
            }
            this.vswitchIds = vswitchIds;
            return this;
        }
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }
        public GetScalingGroupsGroup build() {
            final var _resultValue = new GetScalingGroupsGroup();
            _resultValue.activeCapacity = activeCapacity;
            _resultValue.activeScalingConfiguration = activeScalingConfiguration;
            _resultValue.allocationStrategy = allocationStrategy;
            _resultValue.azBalance = azBalance;
            _resultValue.capacityOptionsCompensateWithOnDemand = capacityOptionsCompensateWithOnDemand;
            _resultValue.capacityOptionsOnDemandBaseCapacity = capacityOptionsOnDemandBaseCapacity;
            _resultValue.capacityOptionsOnDemandPercentageAboveBaseCapacity = capacityOptionsOnDemandPercentageAboveBaseCapacity;
            _resultValue.capacityOptionsSpotAutoReplaceOnDemand = capacityOptionsSpotAutoReplaceOnDemand;
            _resultValue.compensateWithOnDemand = compensateWithOnDemand;
            _resultValue.cooldownTime = cooldownTime;
            _resultValue.creationTime = creationTime;
            _resultValue.dbInstanceIds = dbInstanceIds;
            _resultValue.desiredCapacity = desiredCapacity;
            _resultValue.enableDesiredCapacity = enableDesiredCapacity;
            _resultValue.groupDeletionProtection = groupDeletionProtection;
            _resultValue.groupType = groupType;
            _resultValue.healthCheckType = healthCheckType;
            _resultValue.id = id;
            _resultValue.initCapacity = initCapacity;
            _resultValue.launchTemplateId = launchTemplateId;
            _resultValue.launchTemplateOverrides = launchTemplateOverrides;
            _resultValue.launchTemplateVersion = launchTemplateVersion;
            _resultValue.lifecycleState = lifecycleState;
            _resultValue.loadBalancerIds = loadBalancerIds;
            _resultValue.maxInstanceLifetime = maxInstanceLifetime;
            _resultValue.maxSize = maxSize;
            _resultValue.minSize = minSize;
            _resultValue.modificationTime = modificationTime;
            _resultValue.monitorGroupId = monitorGroupId;
            _resultValue.multiAzPolicy = multiAzPolicy;
            _resultValue.name = name;
            _resultValue.onDemandBaseCapacity = onDemandBaseCapacity;
            _resultValue.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity;
            _resultValue.pendingCapacity = pendingCapacity;
            _resultValue.pendingWaitCapacity = pendingWaitCapacity;
            _resultValue.protectedCapacity = protectedCapacity;
            _resultValue.regionId = regionId;
            _resultValue.removalPolicies = removalPolicies;
            _resultValue.removingCapacity = removingCapacity;
            _resultValue.removingWaitCapacity = removingWaitCapacity;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.scalingPolicy = scalingPolicy;
            _resultValue.spotAllocationStrategy = spotAllocationStrategy;
            _resultValue.spotCapacity = spotCapacity;
            _resultValue.spotInstancePools = spotInstancePools;
            _resultValue.spotInstanceRemedy = spotInstanceRemedy;
            _resultValue.standbyCapacity = standbyCapacity;
            _resultValue.stopInstanceTimeout = stopInstanceTimeout;
            _resultValue.stoppedCapacity = stoppedCapacity;
            _resultValue.suspendedProcesses = suspendedProcesses;
            _resultValue.systemSuspended = systemSuspended;
            _resultValue.tags = tags;
            _resultValue.totalCapacity = totalCapacity;
            _resultValue.totalInstanceCount = totalInstanceCount;
            _resultValue.vpcId = vpcId;
            _resultValue.vswitchId = vswitchId;
            _resultValue.vswitchIds = vswitchIds;
            return _resultValue;
        }
    }
}
