// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImagesPlainArgs Empty = new GetImagesPlainArgs();

    /**
     * The scenario in which the image will be used. Default value: `CreateEcs`. Valid values:
     * * `CreateEcs`: instance creation.
     * * `ChangeOS`: replacement of the system disk or operating system.
     * 
     */
    @Import(name="actionType")
    private @Nullable String actionType;

    /**
     * @return The scenario in which the image will be used. Default value: `CreateEcs`. Valid values:
     * * `CreateEcs`: instance creation.
     * * `ChangeOS`: replacement of the system disk or operating system.
     * 
     */
    public Optional<String> actionType() {
        return Optional.ofNullable(this.actionType);
    }

    /**
     * The image architecture. Valid values: `i386` and `x86_64`.
     * 
     */
    @Import(name="architecture")
    private @Nullable String architecture;

    /**
     * @return The image architecture. Valid values: `i386` and `x86_64`.
     * 
     */
    public Optional<String> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * Specifies whether the image is running on an ECS instance. Default value: `false`. Valid values:
     * 
     */
    @Import(name="dryRun")
    private @Nullable Boolean dryRun;

    /**
     * @return Specifies whether the image is running on an ECS instance. Default value: `false`. Valid values:
     * 
     */
    public Optional<Boolean> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The name of the image family. You can set this parameter to query images of the specified image family. This parameter is empty by default.
     * 
     */
    @Import(name="imageFamily")
    private @Nullable String imageFamily;

    /**
     * @return The name of the image family. You can set this parameter to query images of the specified image family. This parameter is empty by default.
     * 
     */
    public Optional<String> imageFamily() {
        return Optional.ofNullable(this.imageFamily);
    }

    /**
     * The ID of the image.
     * 
     */
    @Import(name="imageId")
    private @Nullable String imageId;

    /**
     * @return The ID of the image.
     * 
     */
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * The name of the image.
     * 
     */
    @Import(name="imageName")
    private @Nullable String imageName;

    /**
     * @return The name of the image.
     * 
     */
    public Optional<String> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * The ID of the Alibaba Cloud account to which the image belongs. This parameter takes effect only when you query shared images or community images.
     * 
     */
    @Import(name="imageOwnerId")
    private @Nullable String imageOwnerId;

    /**
     * @return The ID of the Alibaba Cloud account to which the image belongs. This parameter takes effect only when you query shared images or community images.
     * 
     */
    public Optional<String> imageOwnerId() {
        return Optional.ofNullable(this.imageOwnerId);
    }

    /**
     * The instance type for which the image can be used.
     * 
     */
    @Import(name="instanceType")
    private @Nullable String instanceType;

    /**
     * @return The instance type for which the image can be used.
     * 
     */
    public Optional<String> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * Specifies whether the image supports cloud-init.
     * 
     */
    @Import(name="isSupportCloudInit")
    private @Nullable Boolean isSupportCloudInit;

    /**
     * @return Specifies whether the image supports cloud-init.
     * 
     */
    public Optional<Boolean> isSupportCloudInit() {
        return Optional.ofNullable(this.isSupportCloudInit);
    }

    /**
     * Specifies whether the image can be used on I/O optimized instances.
     * 
     */
    @Import(name="isSupportIoOptimized")
    private @Nullable Boolean isSupportIoOptimized;

    /**
     * @return Specifies whether the image can be used on I/O optimized instances.
     * 
     */
    public Optional<Boolean> isSupportIoOptimized() {
        return Optional.ofNullable(this.isSupportIoOptimized);
    }

    /**
     * If more than one result are returned, select the most recent one.
     * 
     */
    @Import(name="mostRecent")
    private @Nullable Boolean mostRecent;

    /**
     * @return If more than one result are returned, select the most recent one.
     * 
     */
    public Optional<Boolean> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }

    /**
     * A regex string to filter resulting images by name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    /**
     * @return A regex string to filter resulting images by name.
     * 
     */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * The operating system type of the image. Valid values: `windows` and `linux`.
     * 
     */
    @Import(name="osType")
    private @Nullable String osType;

    /**
     * @return The operating system type of the image. Valid values: `windows` and `linux`.
     * 
     */
    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     * &gt; **NOTE:** At least one of the `name_regex`, `most_recent` and `owners` must be set.
     * 
     */
    @Import(name="outputFile")
    private @Nullable String outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     * &gt; **NOTE:** At least one of the `name_regex`, `most_recent` and `owners` must be set.
     * 
     */
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * Filter results by a specific image owner. Valid items are `system`, `self`, `others`, `marketplace`.
     * 
     */
    @Import(name="owners")
    private @Nullable String owners;

    /**
     * @return Filter results by a specific image owner. Valid items are `system`, `self`, `others`, `marketplace`.
     * 
     */
    public Optional<String> owners() {
        return Optional.ofNullable(this.owners);
    }

    /**
     * The ID of the resource group to which the custom image belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable String resourceGroupId;

    /**
     * @return The ID of the resource group to which the custom image belongs.
     * 
     */
    public Optional<String> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The ID of the snapshot used to create the custom image.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable String snapshotId;

    /**
     * @return The ID of the snapshot used to create the custom image.
     * 
     */
    public Optional<String> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * The status of the image. The following values are available, Separate multiple parameter values by using commas (,). Default value: `Available`. Valid values:
     * * `Creating`: The image is being created.
     * * `Waiting`: The image is waiting to be processed.
     * * `Available`: The image is available.
     * * `UnAvailable`: The image is unavailable.
     * * `CreateFailed`: The image failed to be created.
     * * `Deprecated`: The image is discontinued.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of the image. The following values are available, Separate multiple parameter values by using commas (,). Default value: `Available`. Valid values:
     * * `Creating`: The image is being created.
     * * `Waiting`: The image is waiting to be processed.
     * * `Available`: The image is available.
     * * `UnAvailable`: The image is unavailable.
     * * `CreateFailed`: The image failed to be created.
     * * `Deprecated`: The image is discontinued.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,Object> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Map<String,Object>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies whether to check the validity of the request without actually making the request. Valid values:
     * 
     */
    @Import(name="usage")
    private @Nullable String usage;

    /**
     * @return Specifies whether to check the validity of the request without actually making the request. Valid values:
     * 
     */
    public Optional<String> usage() {
        return Optional.ofNullable(this.usage);
    }

    private GetImagesPlainArgs() {}

    private GetImagesPlainArgs(GetImagesPlainArgs $) {
        this.actionType = $.actionType;
        this.architecture = $.architecture;
        this.dryRun = $.dryRun;
        this.imageFamily = $.imageFamily;
        this.imageId = $.imageId;
        this.imageName = $.imageName;
        this.imageOwnerId = $.imageOwnerId;
        this.instanceType = $.instanceType;
        this.isSupportCloudInit = $.isSupportCloudInit;
        this.isSupportIoOptimized = $.isSupportIoOptimized;
        this.mostRecent = $.mostRecent;
        this.nameRegex = $.nameRegex;
        this.osType = $.osType;
        this.outputFile = $.outputFile;
        this.owners = $.owners;
        this.resourceGroupId = $.resourceGroupId;
        this.snapshotId = $.snapshotId;
        this.status = $.status;
        this.tags = $.tags;
        this.usage = $.usage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagesPlainArgs $;

        public Builder() {
            $ = new GetImagesPlainArgs();
        }

        public Builder(GetImagesPlainArgs defaults) {
            $ = new GetImagesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionType The scenario in which the image will be used. Default value: `CreateEcs`. Valid values:
         * * `CreateEcs`: instance creation.
         * * `ChangeOS`: replacement of the system disk or operating system.
         * 
         * @return builder
         * 
         */
        public Builder actionType(@Nullable String actionType) {
            $.actionType = actionType;
            return this;
        }

        /**
         * @param architecture The image architecture. Valid values: `i386` and `x86_64`.
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable String architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param dryRun Specifies whether the image is running on an ECS instance. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Boolean dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param imageFamily The name of the image family. You can set this parameter to query images of the specified image family. This parameter is empty by default.
         * 
         * @return builder
         * 
         */
        public Builder imageFamily(@Nullable String imageFamily) {
            $.imageFamily = imageFamily;
            return this;
        }

        /**
         * @param imageId The ID of the image.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable String imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageName The name of the image.
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable String imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageOwnerId The ID of the Alibaba Cloud account to which the image belongs. This parameter takes effect only when you query shared images or community images.
         * 
         * @return builder
         * 
         */
        public Builder imageOwnerId(@Nullable String imageOwnerId) {
            $.imageOwnerId = imageOwnerId;
            return this;
        }

        /**
         * @param instanceType The instance type for which the image can be used.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable String instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param isSupportCloudInit Specifies whether the image supports cloud-init.
         * 
         * @return builder
         * 
         */
        public Builder isSupportCloudInit(@Nullable Boolean isSupportCloudInit) {
            $.isSupportCloudInit = isSupportCloudInit;
            return this;
        }

        /**
         * @param isSupportIoOptimized Specifies whether the image can be used on I/O optimized instances.
         * 
         * @return builder
         * 
         */
        public Builder isSupportIoOptimized(@Nullable Boolean isSupportIoOptimized) {
            $.isSupportIoOptimized = isSupportIoOptimized;
            return this;
        }

        /**
         * @param mostRecent If more than one result are returned, select the most recent one.
         * 
         * @return builder
         * 
         */
        public Builder mostRecent(@Nullable Boolean mostRecent) {
            $.mostRecent = mostRecent;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter resulting images by name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param osType The operating system type of the image. Valid values: `windows` and `linux`.
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable String osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * &gt; **NOTE:** At least one of the `name_regex`, `most_recent` and `owners` must be set.
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param owners Filter results by a specific image owner. Valid items are `system`, `self`, `others`, `marketplace`.
         * 
         * @return builder
         * 
         */
        public Builder owners(@Nullable String owners) {
            $.owners = owners;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group to which the custom image belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable String resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param snapshotId The ID of the snapshot used to create the custom image.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable String snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param status The status of the image. The following values are available, Separate multiple parameter values by using commas (,). Default value: `Available`. Valid values:
         * * `Creating`: The image is being created.
         * * `Waiting`: The image is waiting to be processed.
         * * `Available`: The image is available.
         * * `UnAvailable`: The image is unavailable.
         * * `CreateFailed`: The image failed to be created.
         * * `Deprecated`: The image is discontinued.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,Object> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param usage Specifies whether to check the validity of the request without actually making the request. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder usage(@Nullable String usage) {
            $.usage = usage;
            return this;
        }

        public GetImagesPlainArgs build() {
            return $;
        }
    }

}
