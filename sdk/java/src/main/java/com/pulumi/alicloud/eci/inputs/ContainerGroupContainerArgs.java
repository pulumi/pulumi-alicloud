// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eci.inputs;

import com.pulumi.alicloud.eci.inputs.ContainerGroupContainerEnvironmentVarArgs;
import com.pulumi.alicloud.eci.inputs.ContainerGroupContainerLivenessProbeArgs;
import com.pulumi.alicloud.eci.inputs.ContainerGroupContainerPortArgs;
import com.pulumi.alicloud.eci.inputs.ContainerGroupContainerReadinessProbeArgs;
import com.pulumi.alicloud.eci.inputs.ContainerGroupContainerVolumeMountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerGroupContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerGroupContainerArgs Empty = new ContainerGroupContainerArgs();

    /**
     * The arguments passed to the commands.
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<String>> args;

    /**
     * @return The arguments passed to the commands.
     * 
     */
    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * Commands to be executed inside the container when performing health checks using the command line method.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return Commands to be executed inside the container when performing health checks using the command line method.
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * The amount of CPU resources allocated to the container. Default value: `0`.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<Double> cpu;

    /**
     * @return The amount of CPU resources allocated to the container. Default value: `0`.
     * 
     */
    public Optional<Output<Double>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * The structure of environmentVars. See `environment_vars` below.
     * 
     */
    @Import(name="environmentVars")
    private @Nullable Output<List<ContainerGroupContainerEnvironmentVarArgs>> environmentVars;

    /**
     * @return The structure of environmentVars. See `environment_vars` below.
     * 
     */
    public Optional<Output<List<ContainerGroupContainerEnvironmentVarArgs>>> environmentVars() {
        return Optional.ofNullable(this.environmentVars);
    }

    /**
     * The number GPUs. Default value: `0`.
     * 
     */
    @Import(name="gpu")
    private @Nullable Output<Integer> gpu;

    /**
     * @return The number GPUs. Default value: `0`.
     * 
     */
    public Optional<Output<Integer>> gpu() {
        return Optional.ofNullable(this.gpu);
    }

    /**
     * The image of the container.
     * 
     */
    @Import(name="image", required=true)
    private Output<String> image;

    /**
     * @return The image of the container.
     * 
     */
    public Output<String> image() {
        return this.image;
    }

    /**
     * The restart policy of the image. Default value: `IfNotPresent`. Valid values: `Always`, `IfNotPresent`, `Never`.
     * 
     */
    @Import(name="imagePullPolicy")
    private @Nullable Output<String> imagePullPolicy;

    /**
     * @return The restart policy of the image. Default value: `IfNotPresent`. Valid values: `Always`, `IfNotPresent`, `Never`.
     * 
     */
    public Optional<Output<String>> imagePullPolicy() {
        return Optional.ofNullable(this.imagePullPolicy);
    }

    /**
     * The health check of the container. See `liveness_probe` below.
     * 
     */
    @Import(name="livenessProbes")
    private @Nullable Output<List<ContainerGroupContainerLivenessProbeArgs>> livenessProbes;

    /**
     * @return The health check of the container. See `liveness_probe` below.
     * 
     */
    public Optional<Output<List<ContainerGroupContainerLivenessProbeArgs>>> livenessProbes() {
        return Optional.ofNullable(this.livenessProbes);
    }

    /**
     * The amount of memory resources allocated to the container. Default value: `0`.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Double> memory;

    /**
     * @return The amount of memory resources allocated to the container. Default value: `0`.
     * 
     */
    public Optional<Output<Double>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * The name of the mounted volume.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the mounted volume.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The structure of port. See `ports` below.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<ContainerGroupContainerPortArgs>> ports;

    /**
     * @return The structure of port. See `ports` below.
     * 
     */
    public Optional<Output<List<ContainerGroupContainerPortArgs>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * The health check of the container. See `readiness_probe` below.
     * 
     */
    @Import(name="readinessProbes")
    private @Nullable Output<List<ContainerGroupContainerReadinessProbeArgs>> readinessProbes;

    /**
     * @return The health check of the container. See `readiness_probe` below.
     * 
     */
    public Optional<Output<List<ContainerGroupContainerReadinessProbeArgs>>> readinessProbes() {
        return Optional.ofNullable(this.readinessProbes);
    }

    /**
     * (Available since v1.208.0) Indicates whether the container passed the readiness probe.
     * 
     */
    @Import(name="ready")
    private @Nullable Output<Boolean> ready;

    /**
     * @return (Available since v1.208.0) Indicates whether the container passed the readiness probe.
     * 
     */
    public Optional<Output<Boolean>> ready() {
        return Optional.ofNullable(this.ready);
    }

    /**
     * (Available since v1.208.0) The number of times that the container restarted.
     * 
     */
    @Import(name="restartCount")
    private @Nullable Output<Integer> restartCount;

    /**
     * @return (Available since v1.208.0) The number of times that the container restarted.
     * 
     */
    public Optional<Output<Integer>> restartCount() {
        return Optional.ofNullable(this.restartCount);
    }

    /**
     * The structure of volumeMounts. See `volume_mounts` below.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable Output<List<ContainerGroupContainerVolumeMountArgs>> volumeMounts;

    /**
     * @return The structure of volumeMounts. See `volume_mounts` below.
     * 
     */
    public Optional<Output<List<ContainerGroupContainerVolumeMountArgs>>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    /**
     * The working directory of the container.
     * 
     */
    @Import(name="workingDir")
    private @Nullable Output<String> workingDir;

    /**
     * @return The working directory of the container.
     * 
     */
    public Optional<Output<String>> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    private ContainerGroupContainerArgs() {}

    private ContainerGroupContainerArgs(ContainerGroupContainerArgs $) {
        this.args = $.args;
        this.commands = $.commands;
        this.cpu = $.cpu;
        this.environmentVars = $.environmentVars;
        this.gpu = $.gpu;
        this.image = $.image;
        this.imagePullPolicy = $.imagePullPolicy;
        this.livenessProbes = $.livenessProbes;
        this.memory = $.memory;
        this.name = $.name;
        this.ports = $.ports;
        this.readinessProbes = $.readinessProbes;
        this.ready = $.ready;
        this.restartCount = $.restartCount;
        this.volumeMounts = $.volumeMounts;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerGroupContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerGroupContainerArgs $;

        public Builder() {
            $ = new ContainerGroupContainerArgs();
        }

        public Builder(ContainerGroupContainerArgs defaults) {
            $ = new ContainerGroupContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param args The arguments passed to the commands.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args The arguments passed to the commands.
         * 
         * @return builder
         * 
         */
        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        /**
         * @param args The arguments passed to the commands.
         * 
         * @return builder
         * 
         */
        public Builder args(String... args) {
            return args(List.of(args));
        }

        /**
         * @param commands Commands to be executed inside the container when performing health checks using the command line method.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands Commands to be executed inside the container when performing health checks using the command line method.
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands Commands to be executed inside the container when performing health checks using the command line method.
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param cpu The amount of CPU resources allocated to the container. Default value: `0`.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<Double> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The amount of CPU resources allocated to the container. Default value: `0`.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Double cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param environmentVars The structure of environmentVars. See `environment_vars` below.
         * 
         * @return builder
         * 
         */
        public Builder environmentVars(@Nullable Output<List<ContainerGroupContainerEnvironmentVarArgs>> environmentVars) {
            $.environmentVars = environmentVars;
            return this;
        }

        /**
         * @param environmentVars The structure of environmentVars. See `environment_vars` below.
         * 
         * @return builder
         * 
         */
        public Builder environmentVars(List<ContainerGroupContainerEnvironmentVarArgs> environmentVars) {
            return environmentVars(Output.of(environmentVars));
        }

        /**
         * @param environmentVars The structure of environmentVars. See `environment_vars` below.
         * 
         * @return builder
         * 
         */
        public Builder environmentVars(ContainerGroupContainerEnvironmentVarArgs... environmentVars) {
            return environmentVars(List.of(environmentVars));
        }

        /**
         * @param gpu The number GPUs. Default value: `0`.
         * 
         * @return builder
         * 
         */
        public Builder gpu(@Nullable Output<Integer> gpu) {
            $.gpu = gpu;
            return this;
        }

        /**
         * @param gpu The number GPUs. Default value: `0`.
         * 
         * @return builder
         * 
         */
        public Builder gpu(Integer gpu) {
            return gpu(Output.of(gpu));
        }

        /**
         * @param image The image of the container.
         * 
         * @return builder
         * 
         */
        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The image of the container.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param imagePullPolicy The restart policy of the image. Default value: `IfNotPresent`. Valid values: `Always`, `IfNotPresent`, `Never`.
         * 
         * @return builder
         * 
         */
        public Builder imagePullPolicy(@Nullable Output<String> imagePullPolicy) {
            $.imagePullPolicy = imagePullPolicy;
            return this;
        }

        /**
         * @param imagePullPolicy The restart policy of the image. Default value: `IfNotPresent`. Valid values: `Always`, `IfNotPresent`, `Never`.
         * 
         * @return builder
         * 
         */
        public Builder imagePullPolicy(String imagePullPolicy) {
            return imagePullPolicy(Output.of(imagePullPolicy));
        }

        /**
         * @param livenessProbes The health check of the container. See `liveness_probe` below.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbes(@Nullable Output<List<ContainerGroupContainerLivenessProbeArgs>> livenessProbes) {
            $.livenessProbes = livenessProbes;
            return this;
        }

        /**
         * @param livenessProbes The health check of the container. See `liveness_probe` below.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbes(List<ContainerGroupContainerLivenessProbeArgs> livenessProbes) {
            return livenessProbes(Output.of(livenessProbes));
        }

        /**
         * @param livenessProbes The health check of the container. See `liveness_probe` below.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbes(ContainerGroupContainerLivenessProbeArgs... livenessProbes) {
            return livenessProbes(List.of(livenessProbes));
        }

        /**
         * @param memory The amount of memory resources allocated to the container. Default value: `0`.
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<Double> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The amount of memory resources allocated to the container. Default value: `0`.
         * 
         * @return builder
         * 
         */
        public Builder memory(Double memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param name The name of the mounted volume.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the mounted volume.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ports The structure of port. See `ports` below.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<ContainerGroupContainerPortArgs>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports The structure of port. See `ports` below.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<ContainerGroupContainerPortArgs> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports The structure of port. See `ports` below.
         * 
         * @return builder
         * 
         */
        public Builder ports(ContainerGroupContainerPortArgs... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param readinessProbes The health check of the container. See `readiness_probe` below.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbes(@Nullable Output<List<ContainerGroupContainerReadinessProbeArgs>> readinessProbes) {
            $.readinessProbes = readinessProbes;
            return this;
        }

        /**
         * @param readinessProbes The health check of the container. See `readiness_probe` below.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbes(List<ContainerGroupContainerReadinessProbeArgs> readinessProbes) {
            return readinessProbes(Output.of(readinessProbes));
        }

        /**
         * @param readinessProbes The health check of the container. See `readiness_probe` below.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbes(ContainerGroupContainerReadinessProbeArgs... readinessProbes) {
            return readinessProbes(List.of(readinessProbes));
        }

        /**
         * @param ready (Available since v1.208.0) Indicates whether the container passed the readiness probe.
         * 
         * @return builder
         * 
         */
        public Builder ready(@Nullable Output<Boolean> ready) {
            $.ready = ready;
            return this;
        }

        /**
         * @param ready (Available since v1.208.0) Indicates whether the container passed the readiness probe.
         * 
         * @return builder
         * 
         */
        public Builder ready(Boolean ready) {
            return ready(Output.of(ready));
        }

        /**
         * @param restartCount (Available since v1.208.0) The number of times that the container restarted.
         * 
         * @return builder
         * 
         */
        public Builder restartCount(@Nullable Output<Integer> restartCount) {
            $.restartCount = restartCount;
            return this;
        }

        /**
         * @param restartCount (Available since v1.208.0) The number of times that the container restarted.
         * 
         * @return builder
         * 
         */
        public Builder restartCount(Integer restartCount) {
            return restartCount(Output.of(restartCount));
        }

        /**
         * @param volumeMounts The structure of volumeMounts. See `volume_mounts` below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(@Nullable Output<List<ContainerGroupContainerVolumeMountArgs>> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        /**
         * @param volumeMounts The structure of volumeMounts. See `volume_mounts` below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(List<ContainerGroupContainerVolumeMountArgs> volumeMounts) {
            return volumeMounts(Output.of(volumeMounts));
        }

        /**
         * @param volumeMounts The structure of volumeMounts. See `volume_mounts` below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(ContainerGroupContainerVolumeMountArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        /**
         * @param workingDir The working directory of the container.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(@Nullable Output<String> workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        /**
         * @param workingDir The working directory of the container.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(String workingDir) {
            return workingDir(Output.of(workingDir));
        }

        public ContainerGroupContainerArgs build() {
            $.image = Objects.requireNonNull($.image, "expected parameter 'image' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
