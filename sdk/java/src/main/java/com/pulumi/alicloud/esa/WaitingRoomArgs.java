// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.alicloud.esa.inputs.WaitingRoomHostNameAndPathArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WaitingRoomArgs extends com.pulumi.resources.ResourceArgs {

    public static final WaitingRoomArgs Empty = new WaitingRoomArgs();

    /**
     * Custom Cookie name.
     * 
     */
    @Import(name="cookieName", required=true)
    private Output<String> cookieName;

    /**
     * @return Custom Cookie name.
     * 
     */
    public Output<String> cookieName() {
        return this.cookieName;
    }

    /**
     * User-defined waiting room page content, when the waiting room type is custom type, you need to enter. The incoming content needs to be base64 encoded.
     * 
     */
    @Import(name="customPageHtml")
    private @Nullable Output<String> customPageHtml;

    /**
     * @return User-defined waiting room page content, when the waiting room type is custom type, you need to enter. The incoming content needs to be base64 encoded.
     * 
     */
    public Optional<Output<String>> customPageHtml() {
        return Optional.ofNullable(this.customPageHtml);
    }

    /**
     * Waiting room description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Waiting room description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Disable session renewal. Value:
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    @Import(name="disableSessionRenewalEnable")
    private @Nullable Output<String> disableSessionRenewalEnable;

    /**
     * @return Disable session renewal. Value:
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    public Optional<Output<String>> disableSessionRenewalEnable() {
        return Optional.ofNullable(this.disableSessionRenewalEnable);
    }

    /**
     * Host name and path. See `host_name_and_path` below.
     * 
     */
    @Import(name="hostNameAndPaths", required=true)
    private Output<List<WaitingRoomHostNameAndPathArgs>> hostNameAndPaths;

    /**
     * @return Host name and path. See `host_name_and_path` below.
     * 
     */
    public Output<List<WaitingRoomHostNameAndPathArgs>> hostNameAndPaths() {
        return this.hostNameAndPaths;
    }

    /**
     * The JSON response. If the accept request header contains &#34;application/json&#34;, JSON data is returned. Value:
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    @Import(name="jsonResponseEnable")
    private @Nullable Output<String> jsonResponseEnable;

    /**
     * @return The JSON response. If the accept request header contains &#34;application/json&#34;, JSON data is returned. Value:
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    public Optional<Output<String>> jsonResponseEnable() {
        return Optional.ofNullable(this.jsonResponseEnable);
    }

    /**
     * The language of the waiting room page. When the waiting room type is the default type, it needs to be passed in. The following types are supported:
     * -&#39;enus&#39;: English.
     * -&#39;zhcn&#39;: Simplified Chinese.
     * -&#39;zhhk&#39;: Traditional Chinese.
     * 
     */
    @Import(name="language")
    private @Nullable Output<String> language;

    /**
     * @return The language of the waiting room page. When the waiting room type is the default type, it needs to be passed in. The following types are supported:
     * -&#39;enus&#39;: English.
     * -&#39;zhcn&#39;: Simplified Chinese.
     * -&#39;zhhk&#39;: Traditional Chinese.
     * 
     */
    public Optional<Output<String>> language() {
        return Optional.ofNullable(this.language);
    }

    /**
     * Number of new users per minute.
     * 
     */
    @Import(name="newUsersPerMinute", required=true)
    private Output<String> newUsersPerMinute;

    /**
     * @return Number of new users per minute.
     * 
     */
    public Output<String> newUsersPerMinute() {
        return this.newUsersPerMinute;
    }

    /**
     * All in line. Value:
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    @Import(name="queueAllEnable")
    private @Nullable Output<String> queueAllEnable;

    /**
     * @return All in line. Value:
     * -&#39;on&#39;: open.
     * -&#39;off&#39;: closed.
     * 
     */
    public Optional<Output<String>> queueAllEnable() {
        return Optional.ofNullable(this.queueAllEnable);
    }

    /**
     * Way of queuing. Value:
     * -&#39;random&#39;: random.
     * -&#39;fifo&#39;: first in, first out.
     * -&#39;Passthrough &#39;: through.
     * -&#39;Reject-all&#39;: reject all.
     * 
     */
    @Import(name="queuingMethod", required=true)
    private Output<String> queuingMethod;

    /**
     * @return Way of queuing. Value:
     * -&#39;random&#39;: random.
     * -&#39;fifo&#39;: first in, first out.
     * -&#39;Passthrough &#39;: through.
     * -&#39;Reject-all&#39;: reject all.
     * 
     */
    public Output<String> queuingMethod() {
        return this.queuingMethod;
    }

    /**
     * Waiting room status code. Value:
     * -&#39;200&#39;
     * -&#39;202&#39;
     * -&#39;429&#39;
     * 
     */
    @Import(name="queuingStatusCode", required=true)
    private Output<String> queuingStatusCode;

    /**
     * @return Waiting room status code. Value:
     * -&#39;200&#39;
     * -&#39;202&#39;
     * -&#39;429&#39;
     * 
     */
    public Output<String> queuingStatusCode() {
        return this.queuingStatusCode;
    }

    /**
     * Session duration in minutes.
     * 
     */
    @Import(name="sessionDuration", required=true)
    private Output<String> sessionDuration;

    /**
     * @return Session duration in minutes.
     * 
     */
    public Output<String> sessionDuration() {
        return this.sessionDuration;
    }

    /**
     * The site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.
     * 
     */
    @Import(name="siteId", required=true)
    private Output<Integer> siteId;

    /**
     * @return The site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }

    /**
     * Waiting room enabled status. Value:
     * -&#39;on&#39;: Enable waiting room
     * -&#39;off&#39;: disabled waiting room
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return Waiting room enabled status. Value:
     * -&#39;on&#39;: Enable waiting room
     * -&#39;off&#39;: disabled waiting room
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     * Total number of active users.
     * 
     */
    @Import(name="totalActiveUsers", required=true)
    private Output<String> totalActiveUsers;

    /**
     * @return Total number of active users.
     * 
     */
    public Output<String> totalActiveUsers() {
        return this.totalActiveUsers;
    }

    /**
     * The name of the waiting room.
     * 
     */
    @Import(name="waitingRoomName", required=true)
    private Output<String> waitingRoomName;

    /**
     * @return The name of the waiting room.
     * 
     */
    public Output<String> waitingRoomName() {
        return this.waitingRoomName;
    }

    /**
     * Waiting room type, support:
     * -&#39;default&#39;: Indicates the default type.
     * -&#39;custom&#39;: indicates a custom type.
     * 
     */
    @Import(name="waitingRoomType", required=true)
    private Output<String> waitingRoomType;

    /**
     * @return Waiting room type, support:
     * -&#39;default&#39;: Indicates the default type.
     * -&#39;custom&#39;: indicates a custom type.
     * 
     */
    public Output<String> waitingRoomType() {
        return this.waitingRoomType;
    }

    private WaitingRoomArgs() {}

    private WaitingRoomArgs(WaitingRoomArgs $) {
        this.cookieName = $.cookieName;
        this.customPageHtml = $.customPageHtml;
        this.description = $.description;
        this.disableSessionRenewalEnable = $.disableSessionRenewalEnable;
        this.hostNameAndPaths = $.hostNameAndPaths;
        this.jsonResponseEnable = $.jsonResponseEnable;
        this.language = $.language;
        this.newUsersPerMinute = $.newUsersPerMinute;
        this.queueAllEnable = $.queueAllEnable;
        this.queuingMethod = $.queuingMethod;
        this.queuingStatusCode = $.queuingStatusCode;
        this.sessionDuration = $.sessionDuration;
        this.siteId = $.siteId;
        this.status = $.status;
        this.totalActiveUsers = $.totalActiveUsers;
        this.waitingRoomName = $.waitingRoomName;
        this.waitingRoomType = $.waitingRoomType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WaitingRoomArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WaitingRoomArgs $;

        public Builder() {
            $ = new WaitingRoomArgs();
        }

        public Builder(WaitingRoomArgs defaults) {
            $ = new WaitingRoomArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cookieName Custom Cookie name.
         * 
         * @return builder
         * 
         */
        public Builder cookieName(Output<String> cookieName) {
            $.cookieName = cookieName;
            return this;
        }

        /**
         * @param cookieName Custom Cookie name.
         * 
         * @return builder
         * 
         */
        public Builder cookieName(String cookieName) {
            return cookieName(Output.of(cookieName));
        }

        /**
         * @param customPageHtml User-defined waiting room page content, when the waiting room type is custom type, you need to enter. The incoming content needs to be base64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder customPageHtml(@Nullable Output<String> customPageHtml) {
            $.customPageHtml = customPageHtml;
            return this;
        }

        /**
         * @param customPageHtml User-defined waiting room page content, when the waiting room type is custom type, you need to enter. The incoming content needs to be base64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder customPageHtml(String customPageHtml) {
            return customPageHtml(Output.of(customPageHtml));
        }

        /**
         * @param description Waiting room description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Waiting room description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableSessionRenewalEnable Disable session renewal. Value:
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder disableSessionRenewalEnable(@Nullable Output<String> disableSessionRenewalEnable) {
            $.disableSessionRenewalEnable = disableSessionRenewalEnable;
            return this;
        }

        /**
         * @param disableSessionRenewalEnable Disable session renewal. Value:
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder disableSessionRenewalEnable(String disableSessionRenewalEnable) {
            return disableSessionRenewalEnable(Output.of(disableSessionRenewalEnable));
        }

        /**
         * @param hostNameAndPaths Host name and path. See `host_name_and_path` below.
         * 
         * @return builder
         * 
         */
        public Builder hostNameAndPaths(Output<List<WaitingRoomHostNameAndPathArgs>> hostNameAndPaths) {
            $.hostNameAndPaths = hostNameAndPaths;
            return this;
        }

        /**
         * @param hostNameAndPaths Host name and path. See `host_name_and_path` below.
         * 
         * @return builder
         * 
         */
        public Builder hostNameAndPaths(List<WaitingRoomHostNameAndPathArgs> hostNameAndPaths) {
            return hostNameAndPaths(Output.of(hostNameAndPaths));
        }

        /**
         * @param hostNameAndPaths Host name and path. See `host_name_and_path` below.
         * 
         * @return builder
         * 
         */
        public Builder hostNameAndPaths(WaitingRoomHostNameAndPathArgs... hostNameAndPaths) {
            return hostNameAndPaths(List.of(hostNameAndPaths));
        }

        /**
         * @param jsonResponseEnable The JSON response. If the accept request header contains &#34;application/json&#34;, JSON data is returned. Value:
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder jsonResponseEnable(@Nullable Output<String> jsonResponseEnable) {
            $.jsonResponseEnable = jsonResponseEnable;
            return this;
        }

        /**
         * @param jsonResponseEnable The JSON response. If the accept request header contains &#34;application/json&#34;, JSON data is returned. Value:
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder jsonResponseEnable(String jsonResponseEnable) {
            return jsonResponseEnable(Output.of(jsonResponseEnable));
        }

        /**
         * @param language The language of the waiting room page. When the waiting room type is the default type, it needs to be passed in. The following types are supported:
         * -&#39;enus&#39;: English.
         * -&#39;zhcn&#39;: Simplified Chinese.
         * -&#39;zhhk&#39;: Traditional Chinese.
         * 
         * @return builder
         * 
         */
        public Builder language(@Nullable Output<String> language) {
            $.language = language;
            return this;
        }

        /**
         * @param language The language of the waiting room page. When the waiting room type is the default type, it needs to be passed in. The following types are supported:
         * -&#39;enus&#39;: English.
         * -&#39;zhcn&#39;: Simplified Chinese.
         * -&#39;zhhk&#39;: Traditional Chinese.
         * 
         * @return builder
         * 
         */
        public Builder language(String language) {
            return language(Output.of(language));
        }

        /**
         * @param newUsersPerMinute Number of new users per minute.
         * 
         * @return builder
         * 
         */
        public Builder newUsersPerMinute(Output<String> newUsersPerMinute) {
            $.newUsersPerMinute = newUsersPerMinute;
            return this;
        }

        /**
         * @param newUsersPerMinute Number of new users per minute.
         * 
         * @return builder
         * 
         */
        public Builder newUsersPerMinute(String newUsersPerMinute) {
            return newUsersPerMinute(Output.of(newUsersPerMinute));
        }

        /**
         * @param queueAllEnable All in line. Value:
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder queueAllEnable(@Nullable Output<String> queueAllEnable) {
            $.queueAllEnable = queueAllEnable;
            return this;
        }

        /**
         * @param queueAllEnable All in line. Value:
         * -&#39;on&#39;: open.
         * -&#39;off&#39;: closed.
         * 
         * @return builder
         * 
         */
        public Builder queueAllEnable(String queueAllEnable) {
            return queueAllEnable(Output.of(queueAllEnable));
        }

        /**
         * @param queuingMethod Way of queuing. Value:
         * -&#39;random&#39;: random.
         * -&#39;fifo&#39;: first in, first out.
         * -&#39;Passthrough &#39;: through.
         * -&#39;Reject-all&#39;: reject all.
         * 
         * @return builder
         * 
         */
        public Builder queuingMethod(Output<String> queuingMethod) {
            $.queuingMethod = queuingMethod;
            return this;
        }

        /**
         * @param queuingMethod Way of queuing. Value:
         * -&#39;random&#39;: random.
         * -&#39;fifo&#39;: first in, first out.
         * -&#39;Passthrough &#39;: through.
         * -&#39;Reject-all&#39;: reject all.
         * 
         * @return builder
         * 
         */
        public Builder queuingMethod(String queuingMethod) {
            return queuingMethod(Output.of(queuingMethod));
        }

        /**
         * @param queuingStatusCode Waiting room status code. Value:
         * -&#39;200&#39;
         * -&#39;202&#39;
         * -&#39;429&#39;
         * 
         * @return builder
         * 
         */
        public Builder queuingStatusCode(Output<String> queuingStatusCode) {
            $.queuingStatusCode = queuingStatusCode;
            return this;
        }

        /**
         * @param queuingStatusCode Waiting room status code. Value:
         * -&#39;200&#39;
         * -&#39;202&#39;
         * -&#39;429&#39;
         * 
         * @return builder
         * 
         */
        public Builder queuingStatusCode(String queuingStatusCode) {
            return queuingStatusCode(Output.of(queuingStatusCode));
        }

        /**
         * @param sessionDuration Session duration in minutes.
         * 
         * @return builder
         * 
         */
        public Builder sessionDuration(Output<String> sessionDuration) {
            $.sessionDuration = sessionDuration;
            return this;
        }

        /**
         * @param sessionDuration Session duration in minutes.
         * 
         * @return builder
         * 
         */
        public Builder sessionDuration(String sessionDuration) {
            return sessionDuration(Output.of(sessionDuration));
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param status Waiting room enabled status. Value:
         * -&#39;on&#39;: Enable waiting room
         * -&#39;off&#39;: disabled waiting room
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Waiting room enabled status. Value:
         * -&#39;on&#39;: Enable waiting room
         * -&#39;off&#39;: disabled waiting room
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param totalActiveUsers Total number of active users.
         * 
         * @return builder
         * 
         */
        public Builder totalActiveUsers(Output<String> totalActiveUsers) {
            $.totalActiveUsers = totalActiveUsers;
            return this;
        }

        /**
         * @param totalActiveUsers Total number of active users.
         * 
         * @return builder
         * 
         */
        public Builder totalActiveUsers(String totalActiveUsers) {
            return totalActiveUsers(Output.of(totalActiveUsers));
        }

        /**
         * @param waitingRoomName The name of the waiting room.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomName(Output<String> waitingRoomName) {
            $.waitingRoomName = waitingRoomName;
            return this;
        }

        /**
         * @param waitingRoomName The name of the waiting room.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomName(String waitingRoomName) {
            return waitingRoomName(Output.of(waitingRoomName));
        }

        /**
         * @param waitingRoomType Waiting room type, support:
         * -&#39;default&#39;: Indicates the default type.
         * -&#39;custom&#39;: indicates a custom type.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomType(Output<String> waitingRoomType) {
            $.waitingRoomType = waitingRoomType;
            return this;
        }

        /**
         * @param waitingRoomType Waiting room type, support:
         * -&#39;default&#39;: Indicates the default type.
         * -&#39;custom&#39;: indicates a custom type.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomType(String waitingRoomType) {
            return waitingRoomType(Output.of(waitingRoomType));
        }

        public WaitingRoomArgs build() {
            if ($.cookieName == null) {
                throw new MissingRequiredPropertyException("WaitingRoomArgs", "cookieName");
            }
            if ($.hostNameAndPaths == null) {
                throw new MissingRequiredPropertyException("WaitingRoomArgs", "hostNameAndPaths");
            }
            if ($.newUsersPerMinute == null) {
                throw new MissingRequiredPropertyException("WaitingRoomArgs", "newUsersPerMinute");
            }
            if ($.queuingMethod == null) {
                throw new MissingRequiredPropertyException("WaitingRoomArgs", "queuingMethod");
            }
            if ($.queuingStatusCode == null) {
                throw new MissingRequiredPropertyException("WaitingRoomArgs", "queuingStatusCode");
            }
            if ($.sessionDuration == null) {
                throw new MissingRequiredPropertyException("WaitingRoomArgs", "sessionDuration");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("WaitingRoomArgs", "siteId");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("WaitingRoomArgs", "status");
            }
            if ($.totalActiveUsers == null) {
                throw new MissingRequiredPropertyException("WaitingRoomArgs", "totalActiveUsers");
            }
            if ($.waitingRoomName == null) {
                throw new MissingRequiredPropertyException("WaitingRoomArgs", "waitingRoomName");
            }
            if ($.waitingRoomType == null) {
                throw new MissingRequiredPropertyException("WaitingRoomArgs", "waitingRoomType");
            }
            return $;
        }
    }

}
