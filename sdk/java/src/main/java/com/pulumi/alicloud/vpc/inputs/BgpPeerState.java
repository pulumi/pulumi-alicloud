// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BgpPeerState extends com.pulumi.resources.ResourceArgs {

    public static final BgpPeerState Empty = new BgpPeerState();

    /**
     * The BFD hop count. Valid values: `1` to `255`. **NOTE:** The attribute is valid when the attribute `enable_bfd` is `true`. The parameter specifies the maximum number of network devices that a packet can traverse from the source to the destination. You can set a proper value based on the factors that affect the physical connection.
     * 
     */
    @Import(name="bfdMultiHop")
    private @Nullable Output<Integer> bfdMultiHop;

    /**
     * @return The BFD hop count. Valid values: `1` to `255`. **NOTE:** The attribute is valid when the attribute `enable_bfd` is `true`. The parameter specifies the maximum number of network devices that a packet can traverse from the source to the destination. You can set a proper value based on the factors that affect the physical connection.
     * 
     */
    public Optional<Output<Integer>> bfdMultiHop() {
        return Optional.ofNullable(this.bfdMultiHop);
    }

    /**
     * The ID of the BGP group.
     * 
     */
    @Import(name="bgpGroupId")
    private @Nullable Output<String> bgpGroupId;

    /**
     * @return The ID of the BGP group.
     * 
     */
    public Optional<Output<String>> bgpGroupId() {
        return Optional.ofNullable(this.bgpGroupId);
    }

    /**
     * The name of the BGP neighbor.
     * 
     */
    @Import(name="bgpPeerName")
    private @Nullable Output<String> bgpPeerName;

    /**
     * @return The name of the BGP neighbor.
     * 
     */
    public Optional<Output<String>> bgpPeerName() {
        return Optional.ofNullable(this.bgpPeerName);
    }

    /**
     * Specifies whether to enable the Bidirectional Forwarding Detection (BFD) feature.
     * 
     */
    @Import(name="enableBfd")
    private @Nullable Output<Boolean> enableBfd;

    /**
     * @return Specifies whether to enable the Bidirectional Forwarding Detection (BFD) feature.
     * 
     */
    public Optional<Output<Boolean>> enableBfd() {
        return Optional.ofNullable(this.enableBfd);
    }

    /**
     * The IP version.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<String> ipVersion;

    /**
     * @return The IP version.
     * 
     */
    public Optional<Output<String>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The IP address of the BGP peer.
     * 
     */
    @Import(name="peerIpAddress")
    private @Nullable Output<String> peerIpAddress;

    /**
     * @return The IP address of the BGP peer.
     * 
     */
    public Optional<Output<String>> peerIpAddress() {
        return Optional.ofNullable(this.peerIpAddress);
    }

    /**
     * Status of BGP neighbors.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of BGP neighbors.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private BgpPeerState() {}

    private BgpPeerState(BgpPeerState $) {
        this.bfdMultiHop = $.bfdMultiHop;
        this.bgpGroupId = $.bgpGroupId;
        this.bgpPeerName = $.bgpPeerName;
        this.enableBfd = $.enableBfd;
        this.ipVersion = $.ipVersion;
        this.peerIpAddress = $.peerIpAddress;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BgpPeerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BgpPeerState $;

        public Builder() {
            $ = new BgpPeerState();
        }

        public Builder(BgpPeerState defaults) {
            $ = new BgpPeerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bfdMultiHop The BFD hop count. Valid values: `1` to `255`. **NOTE:** The attribute is valid when the attribute `enable_bfd` is `true`. The parameter specifies the maximum number of network devices that a packet can traverse from the source to the destination. You can set a proper value based on the factors that affect the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder bfdMultiHop(@Nullable Output<Integer> bfdMultiHop) {
            $.bfdMultiHop = bfdMultiHop;
            return this;
        }

        /**
         * @param bfdMultiHop The BFD hop count. Valid values: `1` to `255`. **NOTE:** The attribute is valid when the attribute `enable_bfd` is `true`. The parameter specifies the maximum number of network devices that a packet can traverse from the source to the destination. You can set a proper value based on the factors that affect the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder bfdMultiHop(Integer bfdMultiHop) {
            return bfdMultiHop(Output.of(bfdMultiHop));
        }

        /**
         * @param bgpGroupId The ID of the BGP group.
         * 
         * @return builder
         * 
         */
        public Builder bgpGroupId(@Nullable Output<String> bgpGroupId) {
            $.bgpGroupId = bgpGroupId;
            return this;
        }

        /**
         * @param bgpGroupId The ID of the BGP group.
         * 
         * @return builder
         * 
         */
        public Builder bgpGroupId(String bgpGroupId) {
            return bgpGroupId(Output.of(bgpGroupId));
        }

        /**
         * @param bgpPeerName The name of the BGP neighbor.
         * 
         * @return builder
         * 
         */
        public Builder bgpPeerName(@Nullable Output<String> bgpPeerName) {
            $.bgpPeerName = bgpPeerName;
            return this;
        }

        /**
         * @param bgpPeerName The name of the BGP neighbor.
         * 
         * @return builder
         * 
         */
        public Builder bgpPeerName(String bgpPeerName) {
            return bgpPeerName(Output.of(bgpPeerName));
        }

        /**
         * @param enableBfd Specifies whether to enable the Bidirectional Forwarding Detection (BFD) feature.
         * 
         * @return builder
         * 
         */
        public Builder enableBfd(@Nullable Output<Boolean> enableBfd) {
            $.enableBfd = enableBfd;
            return this;
        }

        /**
         * @param enableBfd Specifies whether to enable the Bidirectional Forwarding Detection (BFD) feature.
         * 
         * @return builder
         * 
         */
        public Builder enableBfd(Boolean enableBfd) {
            return enableBfd(Output.of(enableBfd));
        }

        /**
         * @param ipVersion The IP version.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<String> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP version.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(String ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param peerIpAddress The IP address of the BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder peerIpAddress(@Nullable Output<String> peerIpAddress) {
            $.peerIpAddress = peerIpAddress;
            return this;
        }

        /**
         * @param peerIpAddress The IP address of the BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder peerIpAddress(String peerIpAddress) {
            return peerIpAddress(Output.of(peerIpAddress));
        }

        /**
         * @param status Status of BGP neighbors.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of BGP neighbors.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public BgpPeerState build() {
            return $;
        }
    }

}
