// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds.outputs;

import com.pulumi.alicloud.eds.outputs.GetBundlesBundleDesktopTypeAttribute;
import com.pulumi.alicloud.eds.outputs.GetBundlesBundleDisk;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBundlesBundle {
    /**
     * @return The bundle id of the bundle.
     * 
     */
    private String bundleId;
    /**
     * @return The name of the bundle.
     * 
     */
    private String bundleName;
    /**
     * @return The bundle type of  the bundle. Valid values: `SYSTEM`,`CUSTOM`.
     * 
     */
    private String bundleType;
    /**
     * @return The description of the bundle.
     * 
     */
    private String description;
    /**
     * @return The desktop type of the bundle.
     * 
     */
    private String desktopType;
    /**
     * @return The desktop type attribute of the bundle.
     * 
     */
    private List<GetBundlesBundleDesktopTypeAttribute> desktopTypeAttributes;
    /**
     * @return The disks of the bundle.
     * 
     */
    private List<GetBundlesBundleDisk> disks;
    /**
     * @return The ID of the bundle.
     * 
     */
    private String id;
    /**
     * @return The image id attribute of the bundle.
     * 
     */
    private String imageId;
    /**
     * @return The os type attribute of the bundle.
     * 
     */
    private String osType;

    private GetBundlesBundle() {}
    /**
     * @return The bundle id of the bundle.
     * 
     */
    public String bundleId() {
        return this.bundleId;
    }
    /**
     * @return The name of the bundle.
     * 
     */
    public String bundleName() {
        return this.bundleName;
    }
    /**
     * @return The bundle type of  the bundle. Valid values: `SYSTEM`,`CUSTOM`.
     * 
     */
    public String bundleType() {
        return this.bundleType;
    }
    /**
     * @return The description of the bundle.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The desktop type of the bundle.
     * 
     */
    public String desktopType() {
        return this.desktopType;
    }
    /**
     * @return The desktop type attribute of the bundle.
     * 
     */
    public List<GetBundlesBundleDesktopTypeAttribute> desktopTypeAttributes() {
        return this.desktopTypeAttributes;
    }
    /**
     * @return The disks of the bundle.
     * 
     */
    public List<GetBundlesBundleDisk> disks() {
        return this.disks;
    }
    /**
     * @return The ID of the bundle.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The image id attribute of the bundle.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return The os type attribute of the bundle.
     * 
     */
    public String osType() {
        return this.osType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBundlesBundle defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bundleId;
        private String bundleName;
        private String bundleType;
        private String description;
        private String desktopType;
        private List<GetBundlesBundleDesktopTypeAttribute> desktopTypeAttributes;
        private List<GetBundlesBundleDisk> disks;
        private String id;
        private String imageId;
        private String osType;
        public Builder() {}
        public Builder(GetBundlesBundle defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bundleId = defaults.bundleId;
    	      this.bundleName = defaults.bundleName;
    	      this.bundleType = defaults.bundleType;
    	      this.description = defaults.description;
    	      this.desktopType = defaults.desktopType;
    	      this.desktopTypeAttributes = defaults.desktopTypeAttributes;
    	      this.disks = defaults.disks;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.osType = defaults.osType;
        }

        @CustomType.Setter
        public Builder bundleId(String bundleId) {
            if (bundleId == null) {
              throw new MissingRequiredPropertyException("GetBundlesBundle", "bundleId");
            }
            this.bundleId = bundleId;
            return this;
        }
        @CustomType.Setter
        public Builder bundleName(String bundleName) {
            if (bundleName == null) {
              throw new MissingRequiredPropertyException("GetBundlesBundle", "bundleName");
            }
            this.bundleName = bundleName;
            return this;
        }
        @CustomType.Setter
        public Builder bundleType(String bundleType) {
            if (bundleType == null) {
              throw new MissingRequiredPropertyException("GetBundlesBundle", "bundleType");
            }
            this.bundleType = bundleType;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetBundlesBundle", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder desktopType(String desktopType) {
            if (desktopType == null) {
              throw new MissingRequiredPropertyException("GetBundlesBundle", "desktopType");
            }
            this.desktopType = desktopType;
            return this;
        }
        @CustomType.Setter
        public Builder desktopTypeAttributes(List<GetBundlesBundleDesktopTypeAttribute> desktopTypeAttributes) {
            if (desktopTypeAttributes == null) {
              throw new MissingRequiredPropertyException("GetBundlesBundle", "desktopTypeAttributes");
            }
            this.desktopTypeAttributes = desktopTypeAttributes;
            return this;
        }
        public Builder desktopTypeAttributes(GetBundlesBundleDesktopTypeAttribute... desktopTypeAttributes) {
            return desktopTypeAttributes(List.of(desktopTypeAttributes));
        }
        @CustomType.Setter
        public Builder disks(List<GetBundlesBundleDisk> disks) {
            if (disks == null) {
              throw new MissingRequiredPropertyException("GetBundlesBundle", "disks");
            }
            this.disks = disks;
            return this;
        }
        public Builder disks(GetBundlesBundleDisk... disks) {
            return disks(List.of(disks));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBundlesBundle", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            if (imageId == null) {
              throw new MissingRequiredPropertyException("GetBundlesBundle", "imageId");
            }
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            if (osType == null) {
              throw new MissingRequiredPropertyException("GetBundlesBundle", "osType");
            }
            this.osType = osType;
            return this;
        }
        public GetBundlesBundle build() {
            final var _resultValue = new GetBundlesBundle();
            _resultValue.bundleId = bundleId;
            _resultValue.bundleName = bundleName;
            _resultValue.bundleType = bundleType;
            _resultValue.description = description;
            _resultValue.desktopType = desktopType;
            _resultValue.desktopTypeAttributes = desktopTypeAttributes;
            _resultValue.disks = disks;
            _resultValue.id = id;
            _resultValue.imageId = imageId;
            _resultValue.osType = osType;
            return _resultValue;
        }
    }
}
