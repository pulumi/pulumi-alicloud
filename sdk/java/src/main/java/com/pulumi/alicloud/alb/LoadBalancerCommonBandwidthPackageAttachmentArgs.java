// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerCommonBandwidthPackageAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerCommonBandwidthPackageAttachmentArgs Empty = new LoadBalancerCommonBandwidthPackageAttachmentArgs();

    /**
     * The ID of the bound shared bandwidth package.
     * 
     */
    @Import(name="bandwidthPackageId", required=true)
    private Output<String> bandwidthPackageId;

    /**
     * @return The ID of the bound shared bandwidth package.
     * 
     */
    public Output<String> bandwidthPackageId() {
        return this.bandwidthPackageId;
    }

    /**
     * Whether to PreCheck this request only. Value:-**true**: sends a check request and does not bind the shared bandwidth package to the load balancing instance. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code &#39;DryRunOperation&#39; is returned &#39;.-**false** (default): Sends a normal request, returns the HTTP 2xx status code after the check, and directly performs the operation.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Whether to PreCheck this request only. Value:-**true**: sends a check request and does not bind the shared bandwidth package to the load balancing instance. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code &#39;DryRunOperation&#39; is returned &#39;.-**false** (default): Sends a normal request, returns the HTTP 2xx status code after the check, and directly performs the operation.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The ID of the applied server load balancer instance.
     * 
     */
    @Import(name="loadBalancerId", required=true)
    private Output<String> loadBalancerId;

    /**
     * @return The ID of the applied server load balancer instance.
     * 
     */
    public Output<String> loadBalancerId() {
        return this.loadBalancerId;
    }

    private LoadBalancerCommonBandwidthPackageAttachmentArgs() {}

    private LoadBalancerCommonBandwidthPackageAttachmentArgs(LoadBalancerCommonBandwidthPackageAttachmentArgs $) {
        this.bandwidthPackageId = $.bandwidthPackageId;
        this.dryRun = $.dryRun;
        this.loadBalancerId = $.loadBalancerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerCommonBandwidthPackageAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerCommonBandwidthPackageAttachmentArgs $;

        public Builder() {
            $ = new LoadBalancerCommonBandwidthPackageAttachmentArgs();
        }

        public Builder(LoadBalancerCommonBandwidthPackageAttachmentArgs defaults) {
            $ = new LoadBalancerCommonBandwidthPackageAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidthPackageId The ID of the bound shared bandwidth package.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageId(Output<String> bandwidthPackageId) {
            $.bandwidthPackageId = bandwidthPackageId;
            return this;
        }

        /**
         * @param bandwidthPackageId The ID of the bound shared bandwidth package.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageId(String bandwidthPackageId) {
            return bandwidthPackageId(Output.of(bandwidthPackageId));
        }

        /**
         * @param dryRun Whether to PreCheck this request only. Value:-**true**: sends a check request and does not bind the shared bandwidth package to the load balancing instance. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code &#39;DryRunOperation&#39; is returned &#39;.-**false** (default): Sends a normal request, returns the HTTP 2xx status code after the check, and directly performs the operation.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Whether to PreCheck this request only. Value:-**true**: sends a check request and does not bind the shared bandwidth package to the load balancing instance. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code &#39;DryRunOperation&#39; is returned &#39;.-**false** (default): Sends a normal request, returns the HTTP 2xx status code after the check, and directly performs the operation.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param loadBalancerId The ID of the applied server load balancer instance.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId The ID of the applied server load balancer instance.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        public LoadBalancerCommonBandwidthPackageAttachmentArgs build() {
            if ($.bandwidthPackageId == null) {
                throw new MissingRequiredPropertyException("LoadBalancerCommonBandwidthPackageAttachmentArgs", "bandwidthPackageId");
            }
            if ($.loadBalancerId == null) {
                throw new MissingRequiredPropertyException("LoadBalancerCommonBandwidthPackageAttachmentArgs", "loadBalancerId");
            }
            return $;
        }
    }

}
