// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FilesetState extends com.pulumi.resources.ResourceArgs {

    public static final FilesetState Empty = new FilesetState();

    /**
     * The description of the Fileset. It must be `2` to `128` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Fileset. It must be `2` to `128` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The dry run.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return The dry run.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The ID of the file system.
     * 
     */
    @Import(name="fileSystemId")
    private @Nullable Output<String> fileSystemId;

    /**
     * @return The ID of the file system.
     * 
     */
    public Optional<Output<String>> fileSystemId() {
        return Optional.ofNullable(this.fileSystemId);
    }

    /**
     * The path of the fileset.
     * 
     */
    @Import(name="fileSystemPath")
    private @Nullable Output<String> fileSystemPath;

    /**
     * @return The path of the fileset.
     * 
     */
    public Optional<Output<String>> fileSystemPath() {
        return Optional.ofNullable(this.fileSystemPath);
    }

    /**
     * The first ID of the resource.
     * 
     */
    @Import(name="filesetId")
    private @Nullable Output<String> filesetId;

    /**
     * @return The first ID of the resource.
     * 
     */
    public Optional<Output<String>> filesetId() {
        return Optional.ofNullable(this.filesetId);
    }

    /**
     * The status of the fileset.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the fileset.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private FilesetState() {}

    private FilesetState(FilesetState $) {
        this.description = $.description;
        this.dryRun = $.dryRun;
        this.fileSystemId = $.fileSystemId;
        this.fileSystemPath = $.fileSystemPath;
        this.filesetId = $.filesetId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilesetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilesetState $;

        public Builder() {
            $ = new FilesetState();
        }

        public Builder(FilesetState defaults) {
            $ = new FilesetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the Fileset. It must be `2` to `128` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Fileset. It must be `2` to `128` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dryRun The dry run.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun The dry run.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(@Nullable Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId The ID of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param fileSystemPath The path of the fileset.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemPath(@Nullable Output<String> fileSystemPath) {
            $.fileSystemPath = fileSystemPath;
            return this;
        }

        /**
         * @param fileSystemPath The path of the fileset.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemPath(String fileSystemPath) {
            return fileSystemPath(Output.of(fileSystemPath));
        }

        /**
         * @param filesetId The first ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder filesetId(@Nullable Output<String> filesetId) {
            $.filesetId = filesetId;
            return this;
        }

        /**
         * @param filesetId The first ID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder filesetId(String filesetId) {
            return filesetId(Output.of(filesetId));
        }

        /**
         * @param status The status of the fileset.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the fileset.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public FilesetState build() {
            return $;
        }
    }

}
