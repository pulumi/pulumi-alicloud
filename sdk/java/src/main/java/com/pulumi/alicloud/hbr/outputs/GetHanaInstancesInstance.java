// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbr.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetHanaInstancesInstance {
    /**
     * @return The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
     * 
     */
    private String alertSetting;
    /**
     * @return The ID of the SAP HANA instance.
     * 
     */
    private String hanaInstanceId;
    /**
     * @return The name of the SAP HANA instance.
     * 
     */
    private String hanaName;
    /**
     * @return The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
     * 
     */
    private String host;
    /**
     * @return The ID of the Hana Instance. The value formats as `&lt;vault_id&gt;:&lt;hana_instance_id&gt;`.
     * 
     */
    private String id;
    /**
     * @return The instance number of the SAP HANA system.
     * 
     */
    private Integer instanceNumber;
    /**
     * @return The ID of the resource group.
     * 
     */
    private String resourceGroupId;
    /**
     * @return The status of the SAP HANA instance.
     * 
     */
    private String status;
    /**
     * @return The status information.
     * 
     */
    private String statusMessage;
    /**
     * @return Indicates whether the SAP HANA instance is connected over Secure Sockets Layer (SSL).
     * 
     */
    private Boolean useSsl;
    /**
     * @return The username of the SYSTEMDB database.
     * 
     */
    private String userName;
    /**
     * @return Indicates whether the SSL certificate of the SAP HANA instance is verified.
     * 
     */
    private Boolean validateCertificate;
    /**
     * @return The ID of the backup vault.
     * 
     */
    private String vaultId;

    private GetHanaInstancesInstance() {}
    /**
     * @return The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
     * 
     */
    public String alertSetting() {
        return this.alertSetting;
    }
    /**
     * @return The ID of the SAP HANA instance.
     * 
     */
    public String hanaInstanceId() {
        return this.hanaInstanceId;
    }
    /**
     * @return The name of the SAP HANA instance.
     * 
     */
    public String hanaName() {
        return this.hanaName;
    }
    /**
     * @return The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The ID of the Hana Instance. The value formats as `&lt;vault_id&gt;:&lt;hana_instance_id&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The instance number of the SAP HANA system.
     * 
     */
    public Integer instanceNumber() {
        return this.instanceNumber;
    }
    /**
     * @return The ID of the resource group.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return The status of the SAP HANA instance.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The status information.
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    /**
     * @return Indicates whether the SAP HANA instance is connected over Secure Sockets Layer (SSL).
     * 
     */
    public Boolean useSsl() {
        return this.useSsl;
    }
    /**
     * @return The username of the SYSTEMDB database.
     * 
     */
    public String userName() {
        return this.userName;
    }
    /**
     * @return Indicates whether the SSL certificate of the SAP HANA instance is verified.
     * 
     */
    public Boolean validateCertificate() {
        return this.validateCertificate;
    }
    /**
     * @return The ID of the backup vault.
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHanaInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alertSetting;
        private String hanaInstanceId;
        private String hanaName;
        private String host;
        private String id;
        private Integer instanceNumber;
        private String resourceGroupId;
        private String status;
        private String statusMessage;
        private Boolean useSsl;
        private String userName;
        private Boolean validateCertificate;
        private String vaultId;
        public Builder() {}
        public Builder(GetHanaInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alertSetting = defaults.alertSetting;
    	      this.hanaInstanceId = defaults.hanaInstanceId;
    	      this.hanaName = defaults.hanaName;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.instanceNumber = defaults.instanceNumber;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.status = defaults.status;
    	      this.statusMessage = defaults.statusMessage;
    	      this.useSsl = defaults.useSsl;
    	      this.userName = defaults.userName;
    	      this.validateCertificate = defaults.validateCertificate;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder alertSetting(String alertSetting) {
            if (alertSetting == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "alertSetting");
            }
            this.alertSetting = alertSetting;
            return this;
        }
        @CustomType.Setter
        public Builder hanaInstanceId(String hanaInstanceId) {
            if (hanaInstanceId == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "hanaInstanceId");
            }
            this.hanaInstanceId = hanaInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder hanaName(String hanaName) {
            if (hanaName == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "hanaName");
            }
            this.hanaName = hanaName;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceNumber(Integer instanceNumber) {
            if (instanceNumber == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "instanceNumber");
            }
            this.instanceNumber = instanceNumber;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            if (resourceGroupId == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "resourceGroupId");
            }
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            if (statusMessage == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "statusMessage");
            }
            this.statusMessage = statusMessage;
            return this;
        }
        @CustomType.Setter
        public Builder useSsl(Boolean useSsl) {
            if (useSsl == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "useSsl");
            }
            this.useSsl = useSsl;
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            if (userName == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "userName");
            }
            this.userName = userName;
            return this;
        }
        @CustomType.Setter
        public Builder validateCertificate(Boolean validateCertificate) {
            if (validateCertificate == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "validateCertificate");
            }
            this.validateCertificate = validateCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(String vaultId) {
            if (vaultId == null) {
              throw new MissingRequiredPropertyException("GetHanaInstancesInstance", "vaultId");
            }
            this.vaultId = vaultId;
            return this;
        }
        public GetHanaInstancesInstance build() {
            final var _resultValue = new GetHanaInstancesInstance();
            _resultValue.alertSetting = alertSetting;
            _resultValue.hanaInstanceId = hanaInstanceId;
            _resultValue.hanaName = hanaName;
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.instanceNumber = instanceNumber;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.status = status;
            _resultValue.statusMessage = statusMessage;
            _resultValue.useSsl = useSsl;
            _resultValue.userName = userName;
            _resultValue.validateCertificate = validateCertificate;
            _resultValue.vaultId = vaultId;
            return _resultValue;
        }
    }
}
