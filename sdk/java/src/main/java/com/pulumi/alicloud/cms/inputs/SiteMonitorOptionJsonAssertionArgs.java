// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SiteMonitorOptionJsonAssertionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SiteMonitorOptionJsonAssertionArgs Empty = new SiteMonitorOptionJsonAssertionArgs();

    /**
     * Assertion comparison operator. Value:
     * - contains: contains.
     * - doesNotContain: does not contain.
     * - matches: regular matching.
     * - doesNotMatch: regular mismatch.
     * - is: Numeric equals or character matches equals.
     * - isNot: not equal.
     * - Lesthan: less.
     * - moreThan: Greater.
     * 
     */
    @Import(name="operator")
    private @Nullable Output<String> operator;

    /**
     * @return Assertion comparison operator. Value:
     * - contains: contains.
     * - doesNotContain: does not contain.
     * - matches: regular matching.
     * - doesNotMatch: regular mismatch.
     * - is: Numeric equals or character matches equals.
     * - isNot: not equal.
     * - Lesthan: less.
     * - moreThan: Greater.
     * 
     */
    public Optional<Output<String>> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * Assertion matches the target numeric value or character of the comparison.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return Assertion matches the target numeric value or character of the comparison.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private SiteMonitorOptionJsonAssertionArgs() {}

    private SiteMonitorOptionJsonAssertionArgs(SiteMonitorOptionJsonAssertionArgs $) {
        this.operator = $.operator;
        this.target = $.target;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SiteMonitorOptionJsonAssertionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SiteMonitorOptionJsonAssertionArgs $;

        public Builder() {
            $ = new SiteMonitorOptionJsonAssertionArgs();
        }

        public Builder(SiteMonitorOptionJsonAssertionArgs defaults) {
            $ = new SiteMonitorOptionJsonAssertionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param operator Assertion comparison operator. Value:
         * - contains: contains.
         * - doesNotContain: does not contain.
         * - matches: regular matching.
         * - doesNotMatch: regular mismatch.
         * - is: Numeric equals or character matches equals.
         * - isNot: not equal.
         * - Lesthan: less.
         * - moreThan: Greater.
         * 
         * @return builder
         * 
         */
        public Builder operator(@Nullable Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Assertion comparison operator. Value:
         * - contains: contains.
         * - doesNotContain: does not contain.
         * - matches: regular matching.
         * - doesNotMatch: regular mismatch.
         * - is: Numeric equals or character matches equals.
         * - isNot: not equal.
         * - Lesthan: less.
         * - moreThan: Greater.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param target Assertion matches the target numeric value or character of the comparison.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target Assertion matches the target numeric value or character of the comparison.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SiteMonitorOptionJsonAssertionArgs build() {
            return $;
        }
    }

}
