// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.outputs;

import com.pulumi.alicloud.vpn.outputs.GetConnectionsConnectionTunnelOptionsSpecificationTunnelBgpConfig;
import com.pulumi.alicloud.vpn.outputs.GetConnectionsConnectionTunnelOptionsSpecificationTunnelIkeConfig;
import com.pulumi.alicloud.vpn.outputs.GetConnectionsConnectionTunnelOptionsSpecificationTunnelIpsecConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetConnectionsConnectionTunnelOptionsSpecification {
    /**
     * @return Use the VPN customer gateway ID as the search key.
     * 
     */
    private String customerGatewayId;
    /**
     * @return Wether enable Dpd detection.
     * 
     */
    private Boolean enableDpd;
    /**
     * @return enable nat traversal.
     * 
     */
    private Boolean enableNatTraversal;
    private String internetIp;
    /**
     * @return The role of Tunnel.
     * 
     */
    private String role;
    private String state;
    /**
     * @return The negotiation status of the BGP routing protocol. Valid values: `success`, `false`.
     * 
     */
    private String status;
    /**
     * @return The bgp config of Tunnel.
     * 
     */
    private GetConnectionsConnectionTunnelOptionsSpecificationTunnelBgpConfig tunnelBgpConfig;
    private String tunnelId;
    /**
     * @return The configuration of Phase 1 negotiations in Tunnel.
     * 
     */
    private GetConnectionsConnectionTunnelOptionsSpecificationTunnelIkeConfig tunnelIkeConfig;
    /**
     * @return IPsec configuration in Tunnel.
     * 
     */
    private GetConnectionsConnectionTunnelOptionsSpecificationTunnelIpsecConfig tunnelIpsecConfig;
    private String zoneNo;

    private GetConnectionsConnectionTunnelOptionsSpecification() {}
    /**
     * @return Use the VPN customer gateway ID as the search key.
     * 
     */
    public String customerGatewayId() {
        return this.customerGatewayId;
    }
    /**
     * @return Wether enable Dpd detection.
     * 
     */
    public Boolean enableDpd() {
        return this.enableDpd;
    }
    /**
     * @return enable nat traversal.
     * 
     */
    public Boolean enableNatTraversal() {
        return this.enableNatTraversal;
    }
    public String internetIp() {
        return this.internetIp;
    }
    /**
     * @return The role of Tunnel.
     * 
     */
    public String role() {
        return this.role;
    }
    public String state() {
        return this.state;
    }
    /**
     * @return The negotiation status of the BGP routing protocol. Valid values: `success`, `false`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The bgp config of Tunnel.
     * 
     */
    public GetConnectionsConnectionTunnelOptionsSpecificationTunnelBgpConfig tunnelBgpConfig() {
        return this.tunnelBgpConfig;
    }
    public String tunnelId() {
        return this.tunnelId;
    }
    /**
     * @return The configuration of Phase 1 negotiations in Tunnel.
     * 
     */
    public GetConnectionsConnectionTunnelOptionsSpecificationTunnelIkeConfig tunnelIkeConfig() {
        return this.tunnelIkeConfig;
    }
    /**
     * @return IPsec configuration in Tunnel.
     * 
     */
    public GetConnectionsConnectionTunnelOptionsSpecificationTunnelIpsecConfig tunnelIpsecConfig() {
        return this.tunnelIpsecConfig;
    }
    public String zoneNo() {
        return this.zoneNo;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionsConnectionTunnelOptionsSpecification defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String customerGatewayId;
        private Boolean enableDpd;
        private Boolean enableNatTraversal;
        private String internetIp;
        private String role;
        private String state;
        private String status;
        private GetConnectionsConnectionTunnelOptionsSpecificationTunnelBgpConfig tunnelBgpConfig;
        private String tunnelId;
        private GetConnectionsConnectionTunnelOptionsSpecificationTunnelIkeConfig tunnelIkeConfig;
        private GetConnectionsConnectionTunnelOptionsSpecificationTunnelIpsecConfig tunnelIpsecConfig;
        private String zoneNo;
        public Builder() {}
        public Builder(GetConnectionsConnectionTunnelOptionsSpecification defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customerGatewayId = defaults.customerGatewayId;
    	      this.enableDpd = defaults.enableDpd;
    	      this.enableNatTraversal = defaults.enableNatTraversal;
    	      this.internetIp = defaults.internetIp;
    	      this.role = defaults.role;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.tunnelBgpConfig = defaults.tunnelBgpConfig;
    	      this.tunnelId = defaults.tunnelId;
    	      this.tunnelIkeConfig = defaults.tunnelIkeConfig;
    	      this.tunnelIpsecConfig = defaults.tunnelIpsecConfig;
    	      this.zoneNo = defaults.zoneNo;
        }

        @CustomType.Setter
        public Builder customerGatewayId(String customerGatewayId) {
            if (customerGatewayId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionTunnelOptionsSpecification", "customerGatewayId");
            }
            this.customerGatewayId = customerGatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder enableDpd(Boolean enableDpd) {
            if (enableDpd == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionTunnelOptionsSpecification", "enableDpd");
            }
            this.enableDpd = enableDpd;
            return this;
        }
        @CustomType.Setter
        public Builder enableNatTraversal(Boolean enableNatTraversal) {
            if (enableNatTraversal == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionTunnelOptionsSpecification", "enableNatTraversal");
            }
            this.enableNatTraversal = enableNatTraversal;
            return this;
        }
        @CustomType.Setter
        public Builder internetIp(String internetIp) {
            if (internetIp == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionTunnelOptionsSpecification", "internetIp");
            }
            this.internetIp = internetIp;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionTunnelOptionsSpecification", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionTunnelOptionsSpecification", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionTunnelOptionsSpecification", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelBgpConfig(GetConnectionsConnectionTunnelOptionsSpecificationTunnelBgpConfig tunnelBgpConfig) {
            if (tunnelBgpConfig == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionTunnelOptionsSpecification", "tunnelBgpConfig");
            }
            this.tunnelBgpConfig = tunnelBgpConfig;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelId(String tunnelId) {
            if (tunnelId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionTunnelOptionsSpecification", "tunnelId");
            }
            this.tunnelId = tunnelId;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelIkeConfig(GetConnectionsConnectionTunnelOptionsSpecificationTunnelIkeConfig tunnelIkeConfig) {
            if (tunnelIkeConfig == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionTunnelOptionsSpecification", "tunnelIkeConfig");
            }
            this.tunnelIkeConfig = tunnelIkeConfig;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelIpsecConfig(GetConnectionsConnectionTunnelOptionsSpecificationTunnelIpsecConfig tunnelIpsecConfig) {
            if (tunnelIpsecConfig == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionTunnelOptionsSpecification", "tunnelIpsecConfig");
            }
            this.tunnelIpsecConfig = tunnelIpsecConfig;
            return this;
        }
        @CustomType.Setter
        public Builder zoneNo(String zoneNo) {
            if (zoneNo == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionTunnelOptionsSpecification", "zoneNo");
            }
            this.zoneNo = zoneNo;
            return this;
        }
        public GetConnectionsConnectionTunnelOptionsSpecification build() {
            final var _resultValue = new GetConnectionsConnectionTunnelOptionsSpecification();
            _resultValue.customerGatewayId = customerGatewayId;
            _resultValue.enableDpd = enableDpd;
            _resultValue.enableNatTraversal = enableNatTraversal;
            _resultValue.internetIp = internetIp;
            _resultValue.role = role;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.tunnelBgpConfig = tunnelBgpConfig;
            _resultValue.tunnelId = tunnelId;
            _resultValue.tunnelIkeConfig = tunnelIkeConfig;
            _resultValue.tunnelIpsecConfig = tunnelIpsecConfig;
            _resultValue.zoneNo = zoneNo;
            return _resultValue;
        }
    }
}
