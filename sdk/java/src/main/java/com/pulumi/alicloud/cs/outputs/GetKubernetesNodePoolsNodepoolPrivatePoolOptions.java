// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetKubernetesNodePoolsNodepoolPrivatePoolOptions {
    /**
     * @return The ID of the private node pool.
     * 
     */
    private String privatePoolOptionsId;
    /**
     * @return The type of private node pool. This parameter specifies the type of the private pool that you want to use to create instances. A private node pool is generated when an elasticity assurance or a capacity reservation service takes effect. The system selects a private node pool to launch instances. Valid values: `Open`: specifies an open private node pool. The system selects an open private node pool to launch instances. If no matching open private node pool is available, the resources in the public node pool are used. `Target`: specifies a private node pool. The system uses the resources of the specified private node pool to launch instances. If the specified private node pool is unavailable, instances cannot be started. `None`: no private node pool is used. The resources of private node pools are not used to launch the instances.
     * 
     */
    private String privatePoolOptionsMatchCriteria;

    private GetKubernetesNodePoolsNodepoolPrivatePoolOptions() {}
    /**
     * @return The ID of the private node pool.
     * 
     */
    public String privatePoolOptionsId() {
        return this.privatePoolOptionsId;
    }
    /**
     * @return The type of private node pool. This parameter specifies the type of the private pool that you want to use to create instances. A private node pool is generated when an elasticity assurance or a capacity reservation service takes effect. The system selects a private node pool to launch instances. Valid values: `Open`: specifies an open private node pool. The system selects an open private node pool to launch instances. If no matching open private node pool is available, the resources in the public node pool are used. `Target`: specifies a private node pool. The system uses the resources of the specified private node pool to launch instances. If the specified private node pool is unavailable, instances cannot be started. `None`: no private node pool is used. The resources of private node pools are not used to launch the instances.
     * 
     */
    public String privatePoolOptionsMatchCriteria() {
        return this.privatePoolOptionsMatchCriteria;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKubernetesNodePoolsNodepoolPrivatePoolOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String privatePoolOptionsId;
        private String privatePoolOptionsMatchCriteria;
        public Builder() {}
        public Builder(GetKubernetesNodePoolsNodepoolPrivatePoolOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.privatePoolOptionsId = defaults.privatePoolOptionsId;
    	      this.privatePoolOptionsMatchCriteria = defaults.privatePoolOptionsMatchCriteria;
        }

        @CustomType.Setter
        public Builder privatePoolOptionsId(String privatePoolOptionsId) {
            if (privatePoolOptionsId == null) {
              throw new MissingRequiredPropertyException("GetKubernetesNodePoolsNodepoolPrivatePoolOptions", "privatePoolOptionsId");
            }
            this.privatePoolOptionsId = privatePoolOptionsId;
            return this;
        }
        @CustomType.Setter
        public Builder privatePoolOptionsMatchCriteria(String privatePoolOptionsMatchCriteria) {
            if (privatePoolOptionsMatchCriteria == null) {
              throw new MissingRequiredPropertyException("GetKubernetesNodePoolsNodepoolPrivatePoolOptions", "privatePoolOptionsMatchCriteria");
            }
            this.privatePoolOptionsMatchCriteria = privatePoolOptionsMatchCriteria;
            return this;
        }
        public GetKubernetesNodePoolsNodepoolPrivatePoolOptions build() {
            final var _resultValue = new GetKubernetesNodePoolsNodepoolPrivatePoolOptions();
            _resultValue.privatePoolOptionsId = privatePoolOptionsId;
            _resultValue.privatePoolOptionsMatchCriteria = privatePoolOptionsMatchCriteria;
            return _resultValue;
        }
    }
}
