// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ens.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageState extends com.pulumi.resources.ResourceArgs {

    public static final ImageState Empty = new ImageState();

    /**
     * The image creation time.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The image creation time.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Specifies whether to automatically release the instance after the image is packaged and uploaded. Only image builders are supported. Default value: `false`. Valid values:
     * 
     */
    @Import(name="deleteAfterImageUpload")
    private @Nullable Output<String> deleteAfterImageUpload;

    /**
     * @return Specifies whether to automatically release the instance after the image is packaged and uploaded. Only image builders are supported. Default value: `false`. Valid values:
     * 
     */
    public Optional<Output<String>> deleteAfterImageUpload() {
        return Optional.ofNullable(this.deleteAfterImageUpload);
    }

    /**
     * The name of the image. The name must be 2 to 128 characters in length. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter but cannot start with http:// or https://. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return The name of the image. The name must be 2 to 128 characters in length. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter but cannot start with http:// or https://. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * The ID of the instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The ID of the instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The state of the image.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The state of the image.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The region of the target OSS where the image is to be stored.
     * 
     */
    @Import(name="targetOssRegionId")
    private @Nullable Output<String> targetOssRegionId;

    /**
     * @return The region of the target OSS where the image is to be stored.
     * 
     */
    public Optional<Output<String>> targetOssRegionId() {
        return Optional.ofNullable(this.targetOssRegionId);
    }

    private ImageState() {}

    private ImageState(ImageState $) {
        this.createTime = $.createTime;
        this.deleteAfterImageUpload = $.deleteAfterImageUpload;
        this.imageName = $.imageName;
        this.instanceId = $.instanceId;
        this.status = $.status;
        this.targetOssRegionId = $.targetOssRegionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageState $;

        public Builder() {
            $ = new ImageState();
        }

        public Builder(ImageState defaults) {
            $ = new ImageState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The image creation time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The image creation time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param deleteAfterImageUpload Specifies whether to automatically release the instance after the image is packaged and uploaded. Only image builders are supported. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder deleteAfterImageUpload(@Nullable Output<String> deleteAfterImageUpload) {
            $.deleteAfterImageUpload = deleteAfterImageUpload;
            return this;
        }

        /**
         * @param deleteAfterImageUpload Specifies whether to automatically release the instance after the image is packaged and uploaded. Only image builders are supported. Default value: `false`. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder deleteAfterImageUpload(String deleteAfterImageUpload) {
            return deleteAfterImageUpload(Output.of(deleteAfterImageUpload));
        }

        /**
         * @param imageName The name of the image. The name must be 2 to 128 characters in length. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter but cannot start with http:// or https://. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName The name of the image. The name must be 2 to 128 characters in length. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter but cannot start with http:// or https://. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param status The state of the image.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The state of the image.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param targetOssRegionId The region of the target OSS where the image is to be stored.
         * 
         * @return builder
         * 
         */
        public Builder targetOssRegionId(@Nullable Output<String> targetOssRegionId) {
            $.targetOssRegionId = targetOssRegionId;
            return this;
        }

        /**
         * @param targetOssRegionId The region of the target OSS where the image is to be stored.
         * 
         * @return builder
         * 
         */
        public Builder targetOssRegionId(String targetOssRegionId) {
            return targetOssRegionId(Output.of(targetOssRegionId));
        }

        public ImageState build() {
            return $;
        }
    }

}
