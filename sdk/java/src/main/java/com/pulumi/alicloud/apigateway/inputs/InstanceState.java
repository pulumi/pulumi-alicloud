// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.apigateway.inputs;

import com.pulumi.alicloud.apigateway.inputs.InstanceToConnectVpcIpBlockArgs;
import com.pulumi.alicloud.apigateway.inputs.InstanceZoneVswitchSecurityGroupArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * (Available since v1.228.0) The CIDR blocks that can be accessed by the Vpc integration instance.
     * 
     */
    @Import(name="connectCidrBlocks")
    private @Nullable Output<String> connectCidrBlocks;

    /**
     * @return (Available since v1.228.0) The CIDR blocks that can be accessed by the Vpc integration instance.
     * 
     */
    public Optional<Output<String>> connectCidrBlocks() {
        return Optional.ofNullable(this.connectCidrBlocks);
    }

    /**
     * Creation time.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Creation time.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Indicates whether to delete the IP block that the VPC can access, conflict with `to_connect_vpc_ip_block`.
     * 
     */
    @Import(name="deleteVpcIpBlock")
    private @Nullable Output<String> deleteVpcIpBlock;

    /**
     * @return Indicates whether to delete the IP block that the VPC can access, conflict with `to_connect_vpc_ip_block`.
     * 
     */
    public Optional<Output<String>> deleteVpcIpBlock() {
        return Optional.ofNullable(this.deleteVpcIpBlock);
    }

    /**
     * The time of the instance package. Valid values:
     * - PricingCycle is **Month**, indicating monthly payment. The value range is **1** to **9**.
     * - PricingCycle is **Year**, indicating annual payment. The value range is **1** to **3**.
     * 
     * When the value of&gt; ChargeType is **PrePaid**, this parameter is available and must be passed in.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return The time of the instance package. Valid values:
     * - PricingCycle is **Month**, indicating monthly payment. The value range is **1** to **9**.
     * - PricingCycle is **Year**, indicating annual payment. The value range is **1** to **3**.
     * 
     * When the value of&gt; ChargeType is **PrePaid**, this parameter is available and must be passed in.
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * Specifies whether IPv6 egress capability is enabled.
     * 
     */
    @Import(name="egressIpv6Enable")
    private @Nullable Output<Boolean> egressIpv6Enable;

    /**
     * @return Specifies whether IPv6 egress capability is enabled.
     * 
     */
    public Optional<Output<Boolean>> egressIpv6Enable() {
        return Optional.ofNullable(this.egressIpv6Enable);
    }

    /**
     * Https policy.
     * 
     */
    @Import(name="httpsPolicy")
    private @Nullable Output<String> httpsPolicy;

    /**
     * @return Https policy.
     * 
     */
    public Optional<Output<String>> httpsPolicy() {
        return Optional.ofNullable(this.httpsPolicy);
    }

    /**
     * The CIDR block for the instance deployment. Valid values are:
     * - `192.168.0.0/16`.
     * - `172.16.0.0/12`.
     * 
     */
    @Import(name="instanceCidr")
    private @Nullable Output<String> instanceCidr;

    /**
     * @return The CIDR block for the instance deployment. Valid values are:
     * - `192.168.0.0/16`.
     * - `172.16.0.0/12`.
     * 
     */
    public Optional<Output<String>> instanceCidr() {
        return Optional.ofNullable(this.instanceCidr);
    }

    /**
     * Instance name.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return Instance name.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * Instance type.
     * 
     */
    @Import(name="instanceSpec")
    private @Nullable Output<String> instanceSpec;

    /**
     * @return Instance type.
     * 
     */
    public Optional<Output<String>> instanceSpec() {
        return Optional.ofNullable(this.instanceSpec);
    }

    /**
     * The type of the instance. Valid values are:
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return The type of the instance. Valid values are:
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * Specifies whether IPv6 ingress capability is enabled.
     * 
     */
    @Import(name="ipv6Enabled")
    private @Nullable Output<Boolean> ipv6Enabled;

    /**
     * @return Specifies whether IPv6 ingress capability is enabled.
     * 
     */
    public Optional<Output<Boolean>> ipv6Enabled() {
        return Optional.ofNullable(this.ipv6Enabled);
    }

    /**
     * The payment type of the resource.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The payment type of the resource.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * The subscription instance is of the subscription year or month type. This parameter is required when the Payment type is PrePaid. The value range is as follows:
     * 
     */
    @Import(name="pricingCycle")
    private @Nullable Output<String> pricingCycle;

    /**
     * @return The subscription instance is of the subscription year or month type. This parameter is required when the Payment type is PrePaid. The value range is as follows:
     * 
     */
    public Optional<Output<String>> pricingCycle() {
        return Optional.ofNullable(this.pricingCycle);
    }

    /**
     * The status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Does ipv6 support.
     * 
     */
    @Import(name="supportIpv6")
    private @Nullable Output<Boolean> supportIpv6;

    /**
     * @return Does ipv6 support.
     * 
     */
    public Optional<Output<Boolean>> supportIpv6() {
        return Optional.ofNullable(this.supportIpv6);
    }

    /**
     * The additional IP block that the VPC integration instance can access, conflict with `delete_vpc_ip_block`. See `to_connect_vpc_ip_block` below.
     * 
     */
    @Import(name="toConnectVpcIpBlock")
    private @Nullable Output<InstanceToConnectVpcIpBlockArgs> toConnectVpcIpBlock;

    /**
     * @return The additional IP block that the VPC integration instance can access, conflict with `delete_vpc_ip_block`. See `to_connect_vpc_ip_block` below.
     * 
     */
    public Optional<Output<InstanceToConnectVpcIpBlockArgs>> toConnectVpcIpBlock() {
        return Optional.ofNullable(this.toConnectVpcIpBlock);
    }

    /**
     * User&#39;s VpcID.
     * 
     */
    @Import(name="userVpcId")
    private @Nullable Output<String> userVpcId;

    /**
     * @return User&#39;s VpcID.
     * 
     */
    public Optional<Output<String>> userVpcId() {
        return Optional.ofNullable(this.userVpcId);
    }

    /**
     * Whether the slb of the Vpc supports.
     * 
     */
    @Import(name="vpcSlbIntranetEnable")
    private @Nullable Output<Boolean> vpcSlbIntranetEnable;

    /**
     * @return Whether the slb of the Vpc supports.
     * 
     */
    public Optional<Output<Boolean>> vpcSlbIntranetEnable() {
        return Optional.ofNullable(this.vpcSlbIntranetEnable);
    }

    /**
     * The zone where the instance is deployed.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone where the instance is deployed.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    /**
     * Network configuration details for Vpc integration instance which includes the availability zone, VSwitch, and security group information. See `zone_vswitch_security_group` below.
     * 
     */
    @Import(name="zoneVswitchSecurityGroups")
    private @Nullable Output<List<InstanceZoneVswitchSecurityGroupArgs>> zoneVswitchSecurityGroups;

    /**
     * @return Network configuration details for Vpc integration instance which includes the availability zone, VSwitch, and security group information. See `zone_vswitch_security_group` below.
     * 
     */
    public Optional<Output<List<InstanceZoneVswitchSecurityGroupArgs>>> zoneVswitchSecurityGroups() {
        return Optional.ofNullable(this.zoneVswitchSecurityGroups);
    }

    private InstanceState() {}

    private InstanceState(InstanceState $) {
        this.connectCidrBlocks = $.connectCidrBlocks;
        this.createTime = $.createTime;
        this.deleteVpcIpBlock = $.deleteVpcIpBlock;
        this.duration = $.duration;
        this.egressIpv6Enable = $.egressIpv6Enable;
        this.httpsPolicy = $.httpsPolicy;
        this.instanceCidr = $.instanceCidr;
        this.instanceName = $.instanceName;
        this.instanceSpec = $.instanceSpec;
        this.instanceType = $.instanceType;
        this.ipv6Enabled = $.ipv6Enabled;
        this.paymentType = $.paymentType;
        this.pricingCycle = $.pricingCycle;
        this.status = $.status;
        this.supportIpv6 = $.supportIpv6;
        this.toConnectVpcIpBlock = $.toConnectVpcIpBlock;
        this.userVpcId = $.userVpcId;
        this.vpcSlbIntranetEnable = $.vpcSlbIntranetEnable;
        this.zoneId = $.zoneId;
        this.zoneVswitchSecurityGroups = $.zoneVswitchSecurityGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceState $;

        public Builder() {
            $ = new InstanceState();
        }

        public Builder(InstanceState defaults) {
            $ = new InstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectCidrBlocks (Available since v1.228.0) The CIDR blocks that can be accessed by the Vpc integration instance.
         * 
         * @return builder
         * 
         */
        public Builder connectCidrBlocks(@Nullable Output<String> connectCidrBlocks) {
            $.connectCidrBlocks = connectCidrBlocks;
            return this;
        }

        /**
         * @param connectCidrBlocks (Available since v1.228.0) The CIDR blocks that can be accessed by the Vpc integration instance.
         * 
         * @return builder
         * 
         */
        public Builder connectCidrBlocks(String connectCidrBlocks) {
            return connectCidrBlocks(Output.of(connectCidrBlocks));
        }

        /**
         * @param createTime Creation time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Creation time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param deleteVpcIpBlock Indicates whether to delete the IP block that the VPC can access, conflict with `to_connect_vpc_ip_block`.
         * 
         * @return builder
         * 
         */
        public Builder deleteVpcIpBlock(@Nullable Output<String> deleteVpcIpBlock) {
            $.deleteVpcIpBlock = deleteVpcIpBlock;
            return this;
        }

        /**
         * @param deleteVpcIpBlock Indicates whether to delete the IP block that the VPC can access, conflict with `to_connect_vpc_ip_block`.
         * 
         * @return builder
         * 
         */
        public Builder deleteVpcIpBlock(String deleteVpcIpBlock) {
            return deleteVpcIpBlock(Output.of(deleteVpcIpBlock));
        }

        /**
         * @param duration The time of the instance package. Valid values:
         * - PricingCycle is **Month**, indicating monthly payment. The value range is **1** to **9**.
         * - PricingCycle is **Year**, indicating annual payment. The value range is **1** to **3**.
         * 
         * When the value of&gt; ChargeType is **PrePaid**, this parameter is available and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The time of the instance package. Valid values:
         * - PricingCycle is **Month**, indicating monthly payment. The value range is **1** to **9**.
         * - PricingCycle is **Year**, indicating annual payment. The value range is **1** to **3**.
         * 
         * When the value of&gt; ChargeType is **PrePaid**, this parameter is available and must be passed in.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param egressIpv6Enable Specifies whether IPv6 egress capability is enabled.
         * 
         * @return builder
         * 
         */
        public Builder egressIpv6Enable(@Nullable Output<Boolean> egressIpv6Enable) {
            $.egressIpv6Enable = egressIpv6Enable;
            return this;
        }

        /**
         * @param egressIpv6Enable Specifies whether IPv6 egress capability is enabled.
         * 
         * @return builder
         * 
         */
        public Builder egressIpv6Enable(Boolean egressIpv6Enable) {
            return egressIpv6Enable(Output.of(egressIpv6Enable));
        }

        /**
         * @param httpsPolicy Https policy.
         * 
         * @return builder
         * 
         */
        public Builder httpsPolicy(@Nullable Output<String> httpsPolicy) {
            $.httpsPolicy = httpsPolicy;
            return this;
        }

        /**
         * @param httpsPolicy Https policy.
         * 
         * @return builder
         * 
         */
        public Builder httpsPolicy(String httpsPolicy) {
            return httpsPolicy(Output.of(httpsPolicy));
        }

        /**
         * @param instanceCidr The CIDR block for the instance deployment. Valid values are:
         * - `192.168.0.0/16`.
         * - `172.16.0.0/12`.
         * 
         * @return builder
         * 
         */
        public Builder instanceCidr(@Nullable Output<String> instanceCidr) {
            $.instanceCidr = instanceCidr;
            return this;
        }

        /**
         * @param instanceCidr The CIDR block for the instance deployment. Valid values are:
         * - `192.168.0.0/16`.
         * - `172.16.0.0/12`.
         * 
         * @return builder
         * 
         */
        public Builder instanceCidr(String instanceCidr) {
            return instanceCidr(Output.of(instanceCidr));
        }

        /**
         * @param instanceName Instance name.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName Instance name.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param instanceSpec Instance type.
         * 
         * @return builder
         * 
         */
        public Builder instanceSpec(@Nullable Output<String> instanceSpec) {
            $.instanceSpec = instanceSpec;
            return this;
        }

        /**
         * @param instanceSpec Instance type.
         * 
         * @return builder
         * 
         */
        public Builder instanceSpec(String instanceSpec) {
            return instanceSpec(Output.of(instanceSpec));
        }

        /**
         * @param instanceType The type of the instance. Valid values are:
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The type of the instance. Valid values are:
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param ipv6Enabled Specifies whether IPv6 ingress capability is enabled.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Enabled(@Nullable Output<Boolean> ipv6Enabled) {
            $.ipv6Enabled = ipv6Enabled;
            return this;
        }

        /**
         * @param ipv6Enabled Specifies whether IPv6 ingress capability is enabled.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Enabled(Boolean ipv6Enabled) {
            return ipv6Enabled(Output.of(ipv6Enabled));
        }

        /**
         * @param paymentType The payment type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param pricingCycle The subscription instance is of the subscription year or month type. This parameter is required when the Payment type is PrePaid. The value range is as follows:
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(@Nullable Output<String> pricingCycle) {
            $.pricingCycle = pricingCycle;
            return this;
        }

        /**
         * @param pricingCycle The subscription instance is of the subscription year or month type. This parameter is required when the Payment type is PrePaid. The value range is as follows:
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(String pricingCycle) {
            return pricingCycle(Output.of(pricingCycle));
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param supportIpv6 Does ipv6 support.
         * 
         * @return builder
         * 
         */
        public Builder supportIpv6(@Nullable Output<Boolean> supportIpv6) {
            $.supportIpv6 = supportIpv6;
            return this;
        }

        /**
         * @param supportIpv6 Does ipv6 support.
         * 
         * @return builder
         * 
         */
        public Builder supportIpv6(Boolean supportIpv6) {
            return supportIpv6(Output.of(supportIpv6));
        }

        /**
         * @param toConnectVpcIpBlock The additional IP block that the VPC integration instance can access, conflict with `delete_vpc_ip_block`. See `to_connect_vpc_ip_block` below.
         * 
         * @return builder
         * 
         */
        public Builder toConnectVpcIpBlock(@Nullable Output<InstanceToConnectVpcIpBlockArgs> toConnectVpcIpBlock) {
            $.toConnectVpcIpBlock = toConnectVpcIpBlock;
            return this;
        }

        /**
         * @param toConnectVpcIpBlock The additional IP block that the VPC integration instance can access, conflict with `delete_vpc_ip_block`. See `to_connect_vpc_ip_block` below.
         * 
         * @return builder
         * 
         */
        public Builder toConnectVpcIpBlock(InstanceToConnectVpcIpBlockArgs toConnectVpcIpBlock) {
            return toConnectVpcIpBlock(Output.of(toConnectVpcIpBlock));
        }

        /**
         * @param userVpcId User&#39;s VpcID.
         * 
         * @return builder
         * 
         */
        public Builder userVpcId(@Nullable Output<String> userVpcId) {
            $.userVpcId = userVpcId;
            return this;
        }

        /**
         * @param userVpcId User&#39;s VpcID.
         * 
         * @return builder
         * 
         */
        public Builder userVpcId(String userVpcId) {
            return userVpcId(Output.of(userVpcId));
        }

        /**
         * @param vpcSlbIntranetEnable Whether the slb of the Vpc supports.
         * 
         * @return builder
         * 
         */
        public Builder vpcSlbIntranetEnable(@Nullable Output<Boolean> vpcSlbIntranetEnable) {
            $.vpcSlbIntranetEnable = vpcSlbIntranetEnable;
            return this;
        }

        /**
         * @param vpcSlbIntranetEnable Whether the slb of the Vpc supports.
         * 
         * @return builder
         * 
         */
        public Builder vpcSlbIntranetEnable(Boolean vpcSlbIntranetEnable) {
            return vpcSlbIntranetEnable(Output.of(vpcSlbIntranetEnable));
        }

        /**
         * @param zoneId The zone where the instance is deployed.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone where the instance is deployed.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        /**
         * @param zoneVswitchSecurityGroups Network configuration details for Vpc integration instance which includes the availability zone, VSwitch, and security group information. See `zone_vswitch_security_group` below.
         * 
         * @return builder
         * 
         */
        public Builder zoneVswitchSecurityGroups(@Nullable Output<List<InstanceZoneVswitchSecurityGroupArgs>> zoneVswitchSecurityGroups) {
            $.zoneVswitchSecurityGroups = zoneVswitchSecurityGroups;
            return this;
        }

        /**
         * @param zoneVswitchSecurityGroups Network configuration details for Vpc integration instance which includes the availability zone, VSwitch, and security group information. See `zone_vswitch_security_group` below.
         * 
         * @return builder
         * 
         */
        public Builder zoneVswitchSecurityGroups(List<InstanceZoneVswitchSecurityGroupArgs> zoneVswitchSecurityGroups) {
            return zoneVswitchSecurityGroups(Output.of(zoneVswitchSecurityGroups));
        }

        /**
         * @param zoneVswitchSecurityGroups Network configuration details for Vpc integration instance which includes the availability zone, VSwitch, and security group information. See `zone_vswitch_security_group` below.
         * 
         * @return builder
         * 
         */
        public Builder zoneVswitchSecurityGroups(InstanceZoneVswitchSecurityGroupArgs... zoneVswitchSecurityGroups) {
            return zoneVswitchSecurityGroups(List.of(zoneVswitchSecurityGroups));
        }

        public InstanceState build() {
            return $;
        }
    }

}
