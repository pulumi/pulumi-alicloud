// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.pai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceWorkspaceState extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceWorkspaceState Empty = new WorkspaceWorkspaceState();

    /**
     * The UTC time when the workspace is created. The time format is ISO8601.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The UTC time when the workspace is created. The time format is ISO8601.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Workspace description, no more than 80 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Workspace description, no more than 80 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * It is recommended that you name the workspace based on the business attribute to identify the purpose of the workspace. If not configured, the default value is the workspace name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return It is recommended that you name the workspace based on the business attribute to identify the purpose of the workspace. If not configured, the default value is the workspace name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Environments contained in the workspace:
     * - Simple mode only production environment (prod).
     * - Standard mode includes development environment (dev) and production environment (prod).
     * 
     */
    @Import(name="envTypes")
    private @Nullable Output<List<String>> envTypes;

    /**
     * @return Environments contained in the workspace:
     * - Simple mode only production environment (prod).
     * - Standard mode includes development environment (dev) and production environment (prod).
     * 
     */
    public Optional<Output<List<String>>> envTypes() {
        return Optional.ofNullable(this.envTypes);
    }

    /**
     * Workspace state, possible values:
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Workspace state, possible values:
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The workspace name. The format is as follows:
     * - 3 to 23 characters in length and can contain letters, underscores, or numbers.
     * - Must start with a large or small letter.
     * - Unique in the current region.
     * 
     */
    @Import(name="workspaceName")
    private @Nullable Output<String> workspaceName;

    /**
     * @return The workspace name. The format is as follows:
     * - 3 to 23 characters in length and can contain letters, underscores, or numbers.
     * - Must start with a large or small letter.
     * - Unique in the current region.
     * 
     */
    public Optional<Output<String>> workspaceName() {
        return Optional.ofNullable(this.workspaceName);
    }

    private WorkspaceWorkspaceState() {}

    private WorkspaceWorkspaceState(WorkspaceWorkspaceState $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.displayName = $.displayName;
        this.envTypes = $.envTypes;
        this.status = $.status;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceWorkspaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceWorkspaceState $;

        public Builder() {
            $ = new WorkspaceWorkspaceState();
        }

        public Builder(WorkspaceWorkspaceState defaults) {
            $ = new WorkspaceWorkspaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The UTC time when the workspace is created. The time format is ISO8601.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The UTC time when the workspace is created. The time format is ISO8601.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Workspace description, no more than 80 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Workspace description, no more than 80 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName It is recommended that you name the workspace based on the business attribute to identify the purpose of the workspace. If not configured, the default value is the workspace name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName It is recommended that you name the workspace based on the business attribute to identify the purpose of the workspace. If not configured, the default value is the workspace name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param envTypes Environments contained in the workspace:
         * - Simple mode only production environment (prod).
         * - Standard mode includes development environment (dev) and production environment (prod).
         * 
         * @return builder
         * 
         */
        public Builder envTypes(@Nullable Output<List<String>> envTypes) {
            $.envTypes = envTypes;
            return this;
        }

        /**
         * @param envTypes Environments contained in the workspace:
         * - Simple mode only production environment (prod).
         * - Standard mode includes development environment (dev) and production environment (prod).
         * 
         * @return builder
         * 
         */
        public Builder envTypes(List<String> envTypes) {
            return envTypes(Output.of(envTypes));
        }

        /**
         * @param envTypes Environments contained in the workspace:
         * - Simple mode only production environment (prod).
         * - Standard mode includes development environment (dev) and production environment (prod).
         * 
         * @return builder
         * 
         */
        public Builder envTypes(String... envTypes) {
            return envTypes(List.of(envTypes));
        }

        /**
         * @param status Workspace state, possible values:
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Workspace state, possible values:
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param workspaceName The workspace name. The format is as follows:
         * - 3 to 23 characters in length and can contain letters, underscores, or numbers.
         * - Must start with a large or small letter.
         * - Unique in the current region.
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(@Nullable Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        /**
         * @param workspaceName The workspace name. The format is as follows:
         * - 3 to 23 characters in length and can contain letters, underscores, or numbers.
         * - Must start with a large or small letter.
         * - Unique in the current region.
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public WorkspaceWorkspaceState build() {
            return $;
        }
    }

}
