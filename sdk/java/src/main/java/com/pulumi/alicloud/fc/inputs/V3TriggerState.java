// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc.inputs;

import com.pulumi.alicloud.fc.inputs.V3TriggerHttpTriggerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V3TriggerState extends com.pulumi.resources.ResourceArgs {

    public static final V3TriggerState Empty = new V3TriggerState();

    /**
     * Creation time
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Creation time
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Description of the trigger
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the trigger
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Function Name
     * 
     */
    @Import(name="functionName")
    private @Nullable Output<String> functionName;

    /**
     * @return Function Name
     * 
     */
    public Optional<Output<String>> functionName() {
        return Optional.ofNullable(this.functionName);
    }

    /**
     * (Available since v1.234.0) HTTP trigger information
     * 
     */
    @Import(name="httpTrigger")
    private @Nullable Output<V3TriggerHttpTriggerArgs> httpTrigger;

    /**
     * @return (Available since v1.234.0) HTTP trigger information
     * 
     */
    public Optional<Output<V3TriggerHttpTriggerArgs>> httpTrigger() {
        return Optional.ofNullable(this.httpTrigger);
    }

    /**
     * The role required by the event source (such as OSS) to call the function.
     * 
     */
    @Import(name="invocationRole")
    private @Nullable Output<String> invocationRole;

    /**
     * @return The role required by the event source (such as OSS) to call the function.
     * 
     */
    public Optional<Output<String>> invocationRole() {
        return Optional.ofNullable(this.invocationRole);
    }

    /**
     * (Available since v1.234.0) The last modified time of the trigger
     * 
     */
    @Import(name="lastModifiedTime")
    private @Nullable Output<String> lastModifiedTime;

    /**
     * @return (Available since v1.234.0) The last modified time of the trigger
     * 
     */
    public Optional<Output<String>> lastModifiedTime() {
        return Optional.ofNullable(this.lastModifiedTime);
    }

    /**
     * The version or alias of the function
     * 
     */
    @Import(name="qualifier")
    private @Nullable Output<String> qualifier;

    /**
     * @return The version or alias of the function
     * 
     */
    public Optional<Output<String>> qualifier() {
        return Optional.ofNullable(this.qualifier);
    }

    /**
     * Trigger Event source ARN
     * 
     */
    @Import(name="sourceArn")
    private @Nullable Output<String> sourceArn;

    /**
     * @return Trigger Event source ARN
     * 
     */
    public Optional<Output<String>> sourceArn() {
        return Optional.ofNullable(this.sourceArn);
    }

    /**
     * The state of the trigger
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The state of the trigger
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * (Available since v1.234.0) Resource identity of the function
     * 
     */
    @Import(name="targetArn")
    private @Nullable Output<String> targetArn;

    /**
     * @return (Available since v1.234.0) Resource identity of the function
     * 
     */
    public Optional<Output<String>> targetArn() {
        return Optional.ofNullable(this.targetArn);
    }

    /**
     * Trigger configuration. The configuration varies for different types of triggers.
     * 
     */
    @Import(name="triggerConfig")
    private @Nullable Output<String> triggerConfig;

    /**
     * @return Trigger configuration. The configuration varies for different types of triggers.
     * 
     */
    public Optional<Output<String>> triggerConfig() {
        return Optional.ofNullable(this.triggerConfig);
    }

    /**
     * (Available since v1.234.0) Trigger ID
     * 
     */
    @Import(name="triggerId")
    private @Nullable Output<String> triggerId;

    /**
     * @return (Available since v1.234.0) Trigger ID
     * 
     */
    public Optional<Output<String>> triggerId() {
        return Optional.ofNullable(this.triggerId);
    }

    /**
     * Trigger Name
     * 
     */
    @Import(name="triggerName")
    private @Nullable Output<String> triggerName;

    /**
     * @return Trigger Name
     * 
     */
    public Optional<Output<String>> triggerName() {
        return Optional.ofNullable(this.triggerName);
    }

    /**
     * The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
     * 
     */
    @Import(name="triggerType")
    private @Nullable Output<String> triggerType;

    /**
     * @return The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
     * 
     */
    public Optional<Output<String>> triggerType() {
        return Optional.ofNullable(this.triggerType);
    }

    private V3TriggerState() {}

    private V3TriggerState(V3TriggerState $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.functionName = $.functionName;
        this.httpTrigger = $.httpTrigger;
        this.invocationRole = $.invocationRole;
        this.lastModifiedTime = $.lastModifiedTime;
        this.qualifier = $.qualifier;
        this.sourceArn = $.sourceArn;
        this.status = $.status;
        this.targetArn = $.targetArn;
        this.triggerConfig = $.triggerConfig;
        this.triggerId = $.triggerId;
        this.triggerName = $.triggerName;
        this.triggerType = $.triggerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V3TriggerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V3TriggerState $;

        public Builder() {
            $ = new V3TriggerState();
        }

        public Builder(V3TriggerState defaults) {
            $ = new V3TriggerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Creation time
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Creation time
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Description of the trigger
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the trigger
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param functionName Function Name
         * 
         * @return builder
         * 
         */
        public Builder functionName(@Nullable Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName Function Name
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param httpTrigger (Available since v1.234.0) HTTP trigger information
         * 
         * @return builder
         * 
         */
        public Builder httpTrigger(@Nullable Output<V3TriggerHttpTriggerArgs> httpTrigger) {
            $.httpTrigger = httpTrigger;
            return this;
        }

        /**
         * @param httpTrigger (Available since v1.234.0) HTTP trigger information
         * 
         * @return builder
         * 
         */
        public Builder httpTrigger(V3TriggerHttpTriggerArgs httpTrigger) {
            return httpTrigger(Output.of(httpTrigger));
        }

        /**
         * @param invocationRole The role required by the event source (such as OSS) to call the function.
         * 
         * @return builder
         * 
         */
        public Builder invocationRole(@Nullable Output<String> invocationRole) {
            $.invocationRole = invocationRole;
            return this;
        }

        /**
         * @param invocationRole The role required by the event source (such as OSS) to call the function.
         * 
         * @return builder
         * 
         */
        public Builder invocationRole(String invocationRole) {
            return invocationRole(Output.of(invocationRole));
        }

        /**
         * @param lastModifiedTime (Available since v1.234.0) The last modified time of the trigger
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedTime(@Nullable Output<String> lastModifiedTime) {
            $.lastModifiedTime = lastModifiedTime;
            return this;
        }

        /**
         * @param lastModifiedTime (Available since v1.234.0) The last modified time of the trigger
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedTime(String lastModifiedTime) {
            return lastModifiedTime(Output.of(lastModifiedTime));
        }

        /**
         * @param qualifier The version or alias of the function
         * 
         * @return builder
         * 
         */
        public Builder qualifier(@Nullable Output<String> qualifier) {
            $.qualifier = qualifier;
            return this;
        }

        /**
         * @param qualifier The version or alias of the function
         * 
         * @return builder
         * 
         */
        public Builder qualifier(String qualifier) {
            return qualifier(Output.of(qualifier));
        }

        /**
         * @param sourceArn Trigger Event source ARN
         * 
         * @return builder
         * 
         */
        public Builder sourceArn(@Nullable Output<String> sourceArn) {
            $.sourceArn = sourceArn;
            return this;
        }

        /**
         * @param sourceArn Trigger Event source ARN
         * 
         * @return builder
         * 
         */
        public Builder sourceArn(String sourceArn) {
            return sourceArn(Output.of(sourceArn));
        }

        /**
         * @param status The state of the trigger
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The state of the trigger
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param targetArn (Available since v1.234.0) Resource identity of the function
         * 
         * @return builder
         * 
         */
        public Builder targetArn(@Nullable Output<String> targetArn) {
            $.targetArn = targetArn;
            return this;
        }

        /**
         * @param targetArn (Available since v1.234.0) Resource identity of the function
         * 
         * @return builder
         * 
         */
        public Builder targetArn(String targetArn) {
            return targetArn(Output.of(targetArn));
        }

        /**
         * @param triggerConfig Trigger configuration. The configuration varies for different types of triggers.
         * 
         * @return builder
         * 
         */
        public Builder triggerConfig(@Nullable Output<String> triggerConfig) {
            $.triggerConfig = triggerConfig;
            return this;
        }

        /**
         * @param triggerConfig Trigger configuration. The configuration varies for different types of triggers.
         * 
         * @return builder
         * 
         */
        public Builder triggerConfig(String triggerConfig) {
            return triggerConfig(Output.of(triggerConfig));
        }

        /**
         * @param triggerId (Available since v1.234.0) Trigger ID
         * 
         * @return builder
         * 
         */
        public Builder triggerId(@Nullable Output<String> triggerId) {
            $.triggerId = triggerId;
            return this;
        }

        /**
         * @param triggerId (Available since v1.234.0) Trigger ID
         * 
         * @return builder
         * 
         */
        public Builder triggerId(String triggerId) {
            return triggerId(Output.of(triggerId));
        }

        /**
         * @param triggerName Trigger Name
         * 
         * @return builder
         * 
         */
        public Builder triggerName(@Nullable Output<String> triggerName) {
            $.triggerName = triggerName;
            return this;
        }

        /**
         * @param triggerName Trigger Name
         * 
         * @return builder
         * 
         */
        public Builder triggerName(String triggerName) {
            return triggerName(Output.of(triggerName));
        }

        /**
         * @param triggerType The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
         * 
         * @return builder
         * 
         */
        public Builder triggerType(@Nullable Output<String> triggerType) {
            $.triggerType = triggerType;
            return this;
        }

        /**
         * @param triggerType The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
         * 
         * @return builder
         * 
         */
        public Builder triggerType(String triggerType) {
            return triggerType(Output.of(triggerType));
        }

        public V3TriggerState build() {
            return $;
        }
    }

}
