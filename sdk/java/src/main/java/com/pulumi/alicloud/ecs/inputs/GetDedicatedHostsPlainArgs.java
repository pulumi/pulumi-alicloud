// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.inputs;

import com.pulumi.alicloud.ecs.inputs.GetDedicatedHostsOperationLock;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDedicatedHostsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDedicatedHostsPlainArgs Empty = new GetDedicatedHostsPlainArgs();

    /**
     * The ID of ECS Dedicated Host.
     * 
     */
    @Import(name="dedicatedHostId")
    private @Nullable String dedicatedHostId;

    /**
     * @return The ID of ECS Dedicated Host.
     * 
     */
    public Optional<String> dedicatedHostId() {
        return Optional.ofNullable(this.dedicatedHostId);
    }

    /**
     * The name of ECS Dedicated Host.
     * 
     */
    @Import(name="dedicatedHostName")
    private @Nullable String dedicatedHostName;

    /**
     * @return The name of ECS Dedicated Host.
     * 
     */
    public Optional<String> dedicatedHostName() {
        return Optional.ofNullable(this.dedicatedHostName);
    }

    /**
     * The type of the dedicated host.
     * 
     */
    @Import(name="dedicatedHostType")
    private @Nullable String dedicatedHostType;

    /**
     * @return The type of the dedicated host.
     * 
     */
    public Optional<String> dedicatedHostType() {
        return Optional.ofNullable(this.dedicatedHostType);
    }

    /**
     * A list of ECS Dedicated Host ids.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return A list of ECS Dedicated Host ids.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * A regex string to filter results by the ECS Dedicated Host name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    /**
     * @return A regex string to filter results by the ECS Dedicated Host name.
     * 
     */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * The reason why the dedicated host resource is locked. See `operation_locks` below.
     * 
     */
    @Import(name="operationLocks")
    private @Nullable List<GetDedicatedHostsOperationLock> operationLocks;

    /**
     * @return The reason why the dedicated host resource is locked. See `operation_locks` below.
     * 
     */
    public Optional<List<GetDedicatedHostsOperationLock>> operationLocks() {
        return Optional.ofNullable(this.operationLocks);
    }

    /**
     * Save the result to the file.
     * 
     */
    @Import(name="outputFile")
    private @Nullable String outputFile;

    /**
     * @return Save the result to the file.
     * 
     */
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The ID of the resource group to which the ECS Dedicated Host belongs.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable String resourceGroupId;

    /**
     * @return The ID of the resource group to which the ECS Dedicated Host belongs.
     * 
     */
    public Optional<String> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The status of the ECS Dedicated Host. Valid Value: `Available`, `Creating`, `PermanentFailure`, `Released`, `UnderAssessment`.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of the ECS Dedicated Host. Valid Value: `Available`, `Creating`, `PermanentFailure`, `Released`, `UnderAssessment`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The zone ID of the ECS Dedicated Host.
     * 
     */
    @Import(name="zoneId")
    private @Nullable String zoneId;

    /**
     * @return The zone ID of the ECS Dedicated Host.
     * 
     */
    public Optional<String> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private GetDedicatedHostsPlainArgs() {}

    private GetDedicatedHostsPlainArgs(GetDedicatedHostsPlainArgs $) {
        this.dedicatedHostId = $.dedicatedHostId;
        this.dedicatedHostName = $.dedicatedHostName;
        this.dedicatedHostType = $.dedicatedHostType;
        this.ids = $.ids;
        this.nameRegex = $.nameRegex;
        this.operationLocks = $.operationLocks;
        this.outputFile = $.outputFile;
        this.resourceGroupId = $.resourceGroupId;
        this.status = $.status;
        this.tags = $.tags;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDedicatedHostsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDedicatedHostsPlainArgs $;

        public Builder() {
            $ = new GetDedicatedHostsPlainArgs();
        }

        public Builder(GetDedicatedHostsPlainArgs defaults) {
            $ = new GetDedicatedHostsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dedicatedHostId The ID of ECS Dedicated Host.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostId(@Nullable String dedicatedHostId) {
            $.dedicatedHostId = dedicatedHostId;
            return this;
        }

        /**
         * @param dedicatedHostName The name of ECS Dedicated Host.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostName(@Nullable String dedicatedHostName) {
            $.dedicatedHostName = dedicatedHostName;
            return this;
        }

        /**
         * @param dedicatedHostType The type of the dedicated host.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostType(@Nullable String dedicatedHostType) {
            $.dedicatedHostType = dedicatedHostType;
            return this;
        }

        /**
         * @param ids A list of ECS Dedicated Host ids.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of ECS Dedicated Host ids.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param nameRegex A regex string to filter results by the ECS Dedicated Host name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param operationLocks The reason why the dedicated host resource is locked. See `operation_locks` below.
         * 
         * @return builder
         * 
         */
        public Builder operationLocks(@Nullable List<GetDedicatedHostsOperationLock> operationLocks) {
            $.operationLocks = operationLocks;
            return this;
        }

        /**
         * @param operationLocks The reason why the dedicated host resource is locked. See `operation_locks` below.
         * 
         * @return builder
         * 
         */
        public Builder operationLocks(GetDedicatedHostsOperationLock... operationLocks) {
            return operationLocks(List.of(operationLocks));
        }

        /**
         * @param outputFile Save the result to the file.
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group to which the ECS Dedicated Host belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable String resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param status The status of the ECS Dedicated Host. Valid Value: `Available`, `Creating`, `PermanentFailure`, `Released`, `UnderAssessment`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param zoneId The zone ID of the ECS Dedicated Host.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable String zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        public GetDedicatedHostsPlainArgs build() {
            return $;
        }
    }

}
