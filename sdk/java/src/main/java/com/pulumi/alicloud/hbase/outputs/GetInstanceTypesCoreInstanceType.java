// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.hbase.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceTypesCoreInstanceType {
    /**
     * @return Name of the category, single or cluster.
     * 
     */
    private String category;
    /**
     * @return Cpu size of the instance type.
     * 
     */
    private Integer cpuSize;
    /**
     * @return The engine name, `singlehbase`, `hbase`, `hbaseue`, `bds`.
     * 
     */
    private String engine;
    /**
     * @return The hbase instance type of create hbase cluster instance.
     * 
     */
    private String instanceType;
    /**
     * @return Max count of the core instance nodes.
     * 
     */
    private Integer maxCoreCount;
    /**
     * @return Mem size of the instance type.
     * 
     */
    private Integer memSize;
    /**
     * @return Name of the storage type.
     * 
     */
    private String storageType;
    /**
     * @return The engine version, singlehbase/hbase=1.1/2.0, bds=1.0.
     * 
     */
    private String version;
    /**
     * @return Name of zone id.
     * 
     */
    private String zone;

    private GetInstanceTypesCoreInstanceType() {}
    /**
     * @return Name of the category, single or cluster.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return Cpu size of the instance type.
     * 
     */
    public Integer cpuSize() {
        return this.cpuSize;
    }
    /**
     * @return The engine name, `singlehbase`, `hbase`, `hbaseue`, `bds`.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The hbase instance type of create hbase cluster instance.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return Max count of the core instance nodes.
     * 
     */
    public Integer maxCoreCount() {
        return this.maxCoreCount;
    }
    /**
     * @return Mem size of the instance type.
     * 
     */
    public Integer memSize() {
        return this.memSize;
    }
    /**
     * @return Name of the storage type.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return The engine version, singlehbase/hbase=1.1/2.0, bds=1.0.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return Name of zone id.
     * 
     */
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceTypesCoreInstanceType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private Integer cpuSize;
        private String engine;
        private String instanceType;
        private Integer maxCoreCount;
        private Integer memSize;
        private String storageType;
        private String version;
        private String zone;
        public Builder() {}
        public Builder(GetInstanceTypesCoreInstanceType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.cpuSize = defaults.cpuSize;
    	      this.engine = defaults.engine;
    	      this.instanceType = defaults.instanceType;
    	      this.maxCoreCount = defaults.maxCoreCount;
    	      this.memSize = defaults.memSize;
    	      this.storageType = defaults.storageType;
    	      this.version = defaults.version;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder category(String category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }
        @CustomType.Setter
        public Builder cpuSize(Integer cpuSize) {
            this.cpuSize = Objects.requireNonNull(cpuSize);
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        @CustomType.Setter
        public Builder maxCoreCount(Integer maxCoreCount) {
            this.maxCoreCount = Objects.requireNonNull(maxCoreCount);
            return this;
        }
        @CustomType.Setter
        public Builder memSize(Integer memSize) {
            this.memSize = Objects.requireNonNull(memSize);
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            this.storageType = Objects.requireNonNull(storageType);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }
        public GetInstanceTypesCoreInstanceType build() {
            final var o = new GetInstanceTypesCoreInstanceType();
            o.category = category;
            o.cpuSize = cpuSize;
            o.engine = engine;
            o.instanceType = instanceType;
            o.maxCoreCount = maxCoreCount;
            o.memSize = memSize;
            o.storageType = storageType;
            o.version = version;
            o.zone = zone;
            return o;
        }
    }
}
