// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.alicloud.esa.inputs.LoadBalancerAdaptiveRoutingArgs;
import com.pulumi.alicloud.esa.inputs.LoadBalancerMonitorArgs;
import com.pulumi.alicloud.esa.inputs.LoadBalancerRandomSteeringArgs;
import com.pulumi.alicloud.esa.inputs.LoadBalancerRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerState extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerState Empty = new LoadBalancerState();

    /**
     * Cross-pool origin configuration. See `adaptiveRouting` below.
     * 
     */
    @Import(name="adaptiveRouting")
    private @Nullable Output<LoadBalancerAdaptiveRoutingArgs> adaptiveRouting;

    /**
     * @return Cross-pool origin configuration. See `adaptiveRouting` below.
     * 
     */
    public Optional<Output<LoadBalancerAdaptiveRoutingArgs>> adaptiveRouting() {
        return Optional.ofNullable(this.adaptiveRouting);
    }

    /**
     * List of default pool IDs.
     * 
     */
    @Import(name="defaultPools")
    private @Nullable Output<List<Integer>> defaultPools;

    /**
     * @return List of default pool IDs.
     * 
     */
    public Optional<Output<List<Integer>>> defaultPools() {
        return Optional.ofNullable(this.defaultPools);
    }

    /**
     * The detailed description of the load balancer for easy management and identification.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The detailed description of the load balancer for easy management and identification.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the load balancer is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the load balancer is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
     * 
     */
    @Import(name="fallbackPool")
    private @Nullable Output<Integer> fallbackPool;

    /**
     * @return The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
     * 
     */
    public Optional<Output<Integer>> fallbackPool() {
        return Optional.ofNullable(this.fallbackPool);
    }

    /**
     * The unique identifier ID of the load balancer.
     * 
     */
    @Import(name="loadBalancerId")
    private @Nullable Output<Integer> loadBalancerId;

    /**
     * @return The unique identifier ID of the load balancer.
     * 
     */
    public Optional<Output<Integer>> loadBalancerId() {
        return Optional.ofNullable(this.loadBalancerId);
    }

    /**
     * The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
     * 
     */
    @Import(name="loadBalancerName")
    private @Nullable Output<String> loadBalancerName;

    /**
     * @return The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
     * 
     */
    public Optional<Output<String>> loadBalancerName() {
        return Optional.ofNullable(this.loadBalancerName);
    }

    /**
     * Monitor configuration for health check. See `monitor` below.
     * 
     */
    @Import(name="monitor")
    private @Nullable Output<LoadBalancerMonitorArgs> monitor;

    /**
     * @return Monitor configuration for health check. See `monitor` below.
     * 
     */
    public Optional<Output<LoadBalancerMonitorArgs>> monitor() {
        return Optional.ofNullable(this.monitor);
    }

    /**
     * Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
     * 
     */
    @Import(name="randomSteering")
    private @Nullable Output<LoadBalancerRandomSteeringArgs> randomSteering;

    /**
     * @return Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
     * 
     */
    public Optional<Output<LoadBalancerRandomSteeringArgs>> randomSteering() {
        return Optional.ofNullable(this.randomSteering);
    }

    /**
     * Address pools corresponding to primary regions.
     * 
     */
    @Import(name="regionPools")
    private @Nullable Output<String> regionPools;

    /**
     * @return Address pools corresponding to primary regions.
     * 
     */
    public Optional<Output<String>> regionPools() {
        return Optional.ofNullable(this.regionPools);
    }

    /**
     * Rule configuration list, used to define behavior under specific conditions. See `rules` below.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<LoadBalancerRuleArgs>> rules;

    /**
     * @return Rule configuration list, used to define behavior under specific conditions. See `rules` below.
     * 
     */
    public Optional<Output<List<LoadBalancerRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * Session persistence. Valid values:
     * 
     */
    @Import(name="sessionAffinity")
    private @Nullable Output<String> sessionAffinity;

    /**
     * @return Session persistence. Valid values:
     * 
     */
    public Optional<Output<String>> sessionAffinity() {
        return Optional.ofNullable(this.sessionAffinity);
    }

    /**
     * The site ID.
     * 
     */
    @Import(name="siteId")
    private @Nullable Output<Integer> siteId;

    /**
     * @return The site ID.
     * 
     */
    public Optional<Output<Integer>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    /**
     * The status of the load balancer.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the load balancer.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Load balancing policy.
     * 
     */
    @Import(name="steeringPolicy")
    private @Nullable Output<String> steeringPolicy;

    /**
     * @return Load balancing policy.
     * 
     */
    public Optional<Output<String>> steeringPolicy() {
        return Optional.ofNullable(this.steeringPolicy);
    }

    /**
     * Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
     * 
     */
    @Import(name="subRegionPools")
    private @Nullable Output<String> subRegionPools;

    /**
     * @return Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
     * 
     */
    public Optional<Output<String>> subRegionPools() {
        return Optional.ofNullable(this.subRegionPools);
    }

    /**
     * TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private LoadBalancerState() {}

    private LoadBalancerState(LoadBalancerState $) {
        this.adaptiveRouting = $.adaptiveRouting;
        this.defaultPools = $.defaultPools;
        this.description = $.description;
        this.enabled = $.enabled;
        this.fallbackPool = $.fallbackPool;
        this.loadBalancerId = $.loadBalancerId;
        this.loadBalancerName = $.loadBalancerName;
        this.monitor = $.monitor;
        this.randomSteering = $.randomSteering;
        this.regionPools = $.regionPools;
        this.rules = $.rules;
        this.sessionAffinity = $.sessionAffinity;
        this.siteId = $.siteId;
        this.status = $.status;
        this.steeringPolicy = $.steeringPolicy;
        this.subRegionPools = $.subRegionPools;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerState $;

        public Builder() {
            $ = new LoadBalancerState();
        }

        public Builder(LoadBalancerState defaults) {
            $ = new LoadBalancerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adaptiveRouting Cross-pool origin configuration. See `adaptiveRouting` below.
         * 
         * @return builder
         * 
         */
        public Builder adaptiveRouting(@Nullable Output<LoadBalancerAdaptiveRoutingArgs> adaptiveRouting) {
            $.adaptiveRouting = adaptiveRouting;
            return this;
        }

        /**
         * @param adaptiveRouting Cross-pool origin configuration. See `adaptiveRouting` below.
         * 
         * @return builder
         * 
         */
        public Builder adaptiveRouting(LoadBalancerAdaptiveRoutingArgs adaptiveRouting) {
            return adaptiveRouting(Output.of(adaptiveRouting));
        }

        /**
         * @param defaultPools List of default pool IDs.
         * 
         * @return builder
         * 
         */
        public Builder defaultPools(@Nullable Output<List<Integer>> defaultPools) {
            $.defaultPools = defaultPools;
            return this;
        }

        /**
         * @param defaultPools List of default pool IDs.
         * 
         * @return builder
         * 
         */
        public Builder defaultPools(List<Integer> defaultPools) {
            return defaultPools(Output.of(defaultPools));
        }

        /**
         * @param defaultPools List of default pool IDs.
         * 
         * @return builder
         * 
         */
        public Builder defaultPools(Integer... defaultPools) {
            return defaultPools(List.of(defaultPools));
        }

        /**
         * @param description The detailed description of the load balancer for easy management and identification.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The detailed description of the load balancer for easy management and identification.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether the load balancer is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the load balancer is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fallbackPool The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
         * 
         * @return builder
         * 
         */
        public Builder fallbackPool(@Nullable Output<Integer> fallbackPool) {
            $.fallbackPool = fallbackPool;
            return this;
        }

        /**
         * @param fallbackPool The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
         * 
         * @return builder
         * 
         */
        public Builder fallbackPool(Integer fallbackPool) {
            return fallbackPool(Output.of(fallbackPool));
        }

        /**
         * @param loadBalancerId The unique identifier ID of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(@Nullable Output<Integer> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId The unique identifier ID of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(Integer loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param loadBalancerName The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(@Nullable Output<String> loadBalancerName) {
            $.loadBalancerName = loadBalancerName;
            return this;
        }

        /**
         * @param loadBalancerName The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(String loadBalancerName) {
            return loadBalancerName(Output.of(loadBalancerName));
        }

        /**
         * @param monitor Monitor configuration for health check. See `monitor` below.
         * 
         * @return builder
         * 
         */
        public Builder monitor(@Nullable Output<LoadBalancerMonitorArgs> monitor) {
            $.monitor = monitor;
            return this;
        }

        /**
         * @param monitor Monitor configuration for health check. See `monitor` below.
         * 
         * @return builder
         * 
         */
        public Builder monitor(LoadBalancerMonitorArgs monitor) {
            return monitor(Output.of(monitor));
        }

        /**
         * @param randomSteering Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
         * 
         * @return builder
         * 
         */
        public Builder randomSteering(@Nullable Output<LoadBalancerRandomSteeringArgs> randomSteering) {
            $.randomSteering = randomSteering;
            return this;
        }

        /**
         * @param randomSteering Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
         * 
         * @return builder
         * 
         */
        public Builder randomSteering(LoadBalancerRandomSteeringArgs randomSteering) {
            return randomSteering(Output.of(randomSteering));
        }

        /**
         * @param regionPools Address pools corresponding to primary regions.
         * 
         * @return builder
         * 
         */
        public Builder regionPools(@Nullable Output<String> regionPools) {
            $.regionPools = regionPools;
            return this;
        }

        /**
         * @param regionPools Address pools corresponding to primary regions.
         * 
         * @return builder
         * 
         */
        public Builder regionPools(String regionPools) {
            return regionPools(Output.of(regionPools));
        }

        /**
         * @param rules Rule configuration list, used to define behavior under specific conditions. See `rules` below.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<LoadBalancerRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules Rule configuration list, used to define behavior under specific conditions. See `rules` below.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<LoadBalancerRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules Rule configuration list, used to define behavior under specific conditions. See `rules` below.
         * 
         * @return builder
         * 
         */
        public Builder rules(LoadBalancerRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param sessionAffinity Session persistence. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(@Nullable Output<String> sessionAffinity) {
            $.sessionAffinity = sessionAffinity;
            return this;
        }

        /**
         * @param sessionAffinity Session persistence. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(String sessionAffinity) {
            return sessionAffinity(Output.of(sessionAffinity));
        }

        /**
         * @param siteId The site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(@Nullable Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param status The status of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param steeringPolicy Load balancing policy.
         * 
         * @return builder
         * 
         */
        public Builder steeringPolicy(@Nullable Output<String> steeringPolicy) {
            $.steeringPolicy = steeringPolicy;
            return this;
        }

        /**
         * @param steeringPolicy Load balancing policy.
         * 
         * @return builder
         * 
         */
        public Builder steeringPolicy(String steeringPolicy) {
            return steeringPolicy(Output.of(steeringPolicy));
        }

        /**
         * @param subRegionPools Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
         * 
         * @return builder
         * 
         */
        public Builder subRegionPools(@Nullable Output<String> subRegionPools) {
            $.subRegionPools = subRegionPools;
            return this;
        }

        /**
         * @param subRegionPools Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
         * 
         * @return builder
         * 
         */
        public Builder subRegionPools(String subRegionPools) {
            return subRegionPools(Output.of(subRegionPools));
        }

        /**
         * @param ttl TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        public LoadBalancerState build() {
            return $;
        }
    }

}
