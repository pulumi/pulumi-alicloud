// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLifecycleHooksHook {
    /**
     * @return Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses.
     * 
     */
    private String defaultResult;
    /**
     * @return Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the default_result parameter.
     * 
     */
    private Integer heartbeatTimeout;
    /**
     * @return ID of the lifecycle hook.
     * 
     */
    private String id;
    /**
     * @return Type of Scaling activity attached to lifecycle hook.
     * 
     */
    private String lifecycleTransition;
    /**
     * @return Name of the lifecycle hook.
     * 
     */
    private String name;
    /**
     * @return The Arn of notification target.
     * 
     */
    private String notificationArn;
    /**
     * @return Additional information that you want to include when Auto Scaling sends a message to the notification target.
     * 
     */
    private String notificationMetadata;
    /**
     * @return Scaling group id the lifecycle hooks belong to.
     * 
     */
    private String scalingGroupId;

    private GetLifecycleHooksHook() {}
    /**
     * @return Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses.
     * 
     */
    public String defaultResult() {
        return this.defaultResult;
    }
    /**
     * @return Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the default_result parameter.
     * 
     */
    public Integer heartbeatTimeout() {
        return this.heartbeatTimeout;
    }
    /**
     * @return ID of the lifecycle hook.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Type of Scaling activity attached to lifecycle hook.
     * 
     */
    public String lifecycleTransition() {
        return this.lifecycleTransition;
    }
    /**
     * @return Name of the lifecycle hook.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Arn of notification target.
     * 
     */
    public String notificationArn() {
        return this.notificationArn;
    }
    /**
     * @return Additional information that you want to include when Auto Scaling sends a message to the notification target.
     * 
     */
    public String notificationMetadata() {
        return this.notificationMetadata;
    }
    /**
     * @return Scaling group id the lifecycle hooks belong to.
     * 
     */
    public String scalingGroupId() {
        return this.scalingGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLifecycleHooksHook defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String defaultResult;
        private Integer heartbeatTimeout;
        private String id;
        private String lifecycleTransition;
        private String name;
        private String notificationArn;
        private String notificationMetadata;
        private String scalingGroupId;
        public Builder() {}
        public Builder(GetLifecycleHooksHook defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultResult = defaults.defaultResult;
    	      this.heartbeatTimeout = defaults.heartbeatTimeout;
    	      this.id = defaults.id;
    	      this.lifecycleTransition = defaults.lifecycleTransition;
    	      this.name = defaults.name;
    	      this.notificationArn = defaults.notificationArn;
    	      this.notificationMetadata = defaults.notificationMetadata;
    	      this.scalingGroupId = defaults.scalingGroupId;
        }

        @CustomType.Setter
        public Builder defaultResult(String defaultResult) {
            if (defaultResult == null) {
              throw new MissingRequiredPropertyException("GetLifecycleHooksHook", "defaultResult");
            }
            this.defaultResult = defaultResult;
            return this;
        }
        @CustomType.Setter
        public Builder heartbeatTimeout(Integer heartbeatTimeout) {
            if (heartbeatTimeout == null) {
              throw new MissingRequiredPropertyException("GetLifecycleHooksHook", "heartbeatTimeout");
            }
            this.heartbeatTimeout = heartbeatTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLifecycleHooksHook", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleTransition(String lifecycleTransition) {
            if (lifecycleTransition == null) {
              throw new MissingRequiredPropertyException("GetLifecycleHooksHook", "lifecycleTransition");
            }
            this.lifecycleTransition = lifecycleTransition;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLifecycleHooksHook", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notificationArn(String notificationArn) {
            if (notificationArn == null) {
              throw new MissingRequiredPropertyException("GetLifecycleHooksHook", "notificationArn");
            }
            this.notificationArn = notificationArn;
            return this;
        }
        @CustomType.Setter
        public Builder notificationMetadata(String notificationMetadata) {
            if (notificationMetadata == null) {
              throw new MissingRequiredPropertyException("GetLifecycleHooksHook", "notificationMetadata");
            }
            this.notificationMetadata = notificationMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder scalingGroupId(String scalingGroupId) {
            if (scalingGroupId == null) {
              throw new MissingRequiredPropertyException("GetLifecycleHooksHook", "scalingGroupId");
            }
            this.scalingGroupId = scalingGroupId;
            return this;
        }
        public GetLifecycleHooksHook build() {
            final var _resultValue = new GetLifecycleHooksHook();
            _resultValue.defaultResult = defaultResult;
            _resultValue.heartbeatTimeout = heartbeatTimeout;
            _resultValue.id = id;
            _resultValue.lifecycleTransition = lifecycleTransition;
            _resultValue.name = name;
            _resultValue.notificationArn = notificationArn;
            _resultValue.notificationMetadata = notificationMetadata;
            _resultValue.scalingGroupId = scalingGroupId;
            return _resultValue;
        }
    }
}
