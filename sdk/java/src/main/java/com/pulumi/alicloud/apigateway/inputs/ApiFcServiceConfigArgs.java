// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.apigateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiFcServiceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiFcServiceConfigArgs Empty = new ApiFcServiceConfigArgs();

    /**
     * RAM role arn attached to the Function Compute service. This governs both who / what can invoke your Function, as well as what resources our Function has access to. See [User Permissions](https://www.alibabacloud.com/help/doc-detail/52885.htm) for more details.
     * 
     */
    @Import(name="arnRole", required=true)
    private Output<String> arnRole;

    /**
     * @return RAM role arn attached to the Function Compute service. This governs both who / what can invoke your Function, as well as what resources our Function has access to. See [User Permissions](https://www.alibabacloud.com/help/doc-detail/52885.htm) for more details.
     * 
     */
    public Output<String> arnRole() {
        return this.arnRole;
    }

    /**
     * The base url of function compute service. Required if `function_type` is `HttpTrigger`.
     * 
     */
    @Import(name="functionBaseUrl")
    private @Nullable Output<String> functionBaseUrl;

    /**
     * @return The base url of function compute service. Required if `function_type` is `HttpTrigger`.
     * 
     */
    public Optional<Output<String>> functionBaseUrl() {
        return Optional.ofNullable(this.functionBaseUrl);
    }

    /**
     * The function name of function compute service. Required if `function_type` is `FCEvent`.
     * 
     */
    @Import(name="functionName")
    private @Nullable Output<String> functionName;

    /**
     * @return The function name of function compute service. Required if `function_type` is `FCEvent`.
     * 
     */
    public Optional<Output<String>> functionName() {
        return Optional.ofNullable(this.functionName);
    }

    /**
     * The type of function compute service. Supports values of `FCEvent`,`HttpTrigger`. Default value: `FCEvent`.
     * 
     */
    @Import(name="functionType")
    private @Nullable Output<String> functionType;

    /**
     * @return The type of function compute service. Supports values of `FCEvent`,`HttpTrigger`. Default value: `FCEvent`.
     * 
     */
    public Optional<Output<String>> functionType() {
        return Optional.ofNullable(this.functionType);
    }

    /**
     * The function compute version of function compute service. Supports values of `2.0`, `3.0`. Default value: `2.0`.
     * 
     */
    @Import(name="functionVersion")
    private @Nullable Output<String> functionVersion;

    /**
     * @return The function compute version of function compute service. Supports values of `2.0`, `3.0`. Default value: `2.0`.
     * 
     */
    public Optional<Output<String>> functionVersion() {
        return Optional.ofNullable(this.functionVersion);
    }

    /**
     * The http method of function compute service. Required if `function_type` is `HttpTrigger`.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return The http method of function compute service. Required if `function_type` is `HttpTrigger`.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * Whether to filter path in `function_base_url`. Optional if `function_type` is `HttpTrigger`.
     * 
     */
    @Import(name="onlyBusinessPath")
    private @Nullable Output<Boolean> onlyBusinessPath;

    /**
     * @return Whether to filter path in `function_base_url`. Optional if `function_type` is `HttpTrigger`.
     * 
     */
    public Optional<Output<Boolean>> onlyBusinessPath() {
        return Optional.ofNullable(this.onlyBusinessPath);
    }

    /**
     * The path of function compute service. Required if `function_type` is `HttpTrigger`.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path of function compute service. Required if `function_type` is `HttpTrigger`.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The qualifier of function name of compute service.
     * 
     */
    @Import(name="qualifier")
    private @Nullable Output<String> qualifier;

    /**
     * @return The qualifier of function name of compute service.
     * 
     */
    public Optional<Output<String>> qualifier() {
        return Optional.ofNullable(this.qualifier);
    }

    /**
     * The region that the function compute service belongs to.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The region that the function compute service belongs to.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The service name of function compute service. Required if `function_type` is `FCEvent` and `function_version` is `2.0`.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The service name of function compute service. Required if `function_type` is `FCEvent` and `function_version` is `2.0`.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Backend service time-out time; unit: millisecond.
     * 
     */
    @Import(name="timeout", required=true)
    private Output<Integer> timeout;

    /**
     * @return Backend service time-out time; unit: millisecond.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }

    private ApiFcServiceConfigArgs() {}

    private ApiFcServiceConfigArgs(ApiFcServiceConfigArgs $) {
        this.arnRole = $.arnRole;
        this.functionBaseUrl = $.functionBaseUrl;
        this.functionName = $.functionName;
        this.functionType = $.functionType;
        this.functionVersion = $.functionVersion;
        this.method = $.method;
        this.onlyBusinessPath = $.onlyBusinessPath;
        this.path = $.path;
        this.qualifier = $.qualifier;
        this.region = $.region;
        this.serviceName = $.serviceName;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiFcServiceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiFcServiceConfigArgs $;

        public Builder() {
            $ = new ApiFcServiceConfigArgs();
        }

        public Builder(ApiFcServiceConfigArgs defaults) {
            $ = new ApiFcServiceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arnRole RAM role arn attached to the Function Compute service. This governs both who / what can invoke your Function, as well as what resources our Function has access to. See [User Permissions](https://www.alibabacloud.com/help/doc-detail/52885.htm) for more details.
         * 
         * @return builder
         * 
         */
        public Builder arnRole(Output<String> arnRole) {
            $.arnRole = arnRole;
            return this;
        }

        /**
         * @param arnRole RAM role arn attached to the Function Compute service. This governs both who / what can invoke your Function, as well as what resources our Function has access to. See [User Permissions](https://www.alibabacloud.com/help/doc-detail/52885.htm) for more details.
         * 
         * @return builder
         * 
         */
        public Builder arnRole(String arnRole) {
            return arnRole(Output.of(arnRole));
        }

        /**
         * @param functionBaseUrl The base url of function compute service. Required if `function_type` is `HttpTrigger`.
         * 
         * @return builder
         * 
         */
        public Builder functionBaseUrl(@Nullable Output<String> functionBaseUrl) {
            $.functionBaseUrl = functionBaseUrl;
            return this;
        }

        /**
         * @param functionBaseUrl The base url of function compute service. Required if `function_type` is `HttpTrigger`.
         * 
         * @return builder
         * 
         */
        public Builder functionBaseUrl(String functionBaseUrl) {
            return functionBaseUrl(Output.of(functionBaseUrl));
        }

        /**
         * @param functionName The function name of function compute service. Required if `function_type` is `FCEvent`.
         * 
         * @return builder
         * 
         */
        public Builder functionName(@Nullable Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName The function name of function compute service. Required if `function_type` is `FCEvent`.
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param functionType The type of function compute service. Supports values of `FCEvent`,`HttpTrigger`. Default value: `FCEvent`.
         * 
         * @return builder
         * 
         */
        public Builder functionType(@Nullable Output<String> functionType) {
            $.functionType = functionType;
            return this;
        }

        /**
         * @param functionType The type of function compute service. Supports values of `FCEvent`,`HttpTrigger`. Default value: `FCEvent`.
         * 
         * @return builder
         * 
         */
        public Builder functionType(String functionType) {
            return functionType(Output.of(functionType));
        }

        /**
         * @param functionVersion The function compute version of function compute service. Supports values of `2.0`, `3.0`. Default value: `2.0`.
         * 
         * @return builder
         * 
         */
        public Builder functionVersion(@Nullable Output<String> functionVersion) {
            $.functionVersion = functionVersion;
            return this;
        }

        /**
         * @param functionVersion The function compute version of function compute service. Supports values of `2.0`, `3.0`. Default value: `2.0`.
         * 
         * @return builder
         * 
         */
        public Builder functionVersion(String functionVersion) {
            return functionVersion(Output.of(functionVersion));
        }

        /**
         * @param method The http method of function compute service. Required if `function_type` is `HttpTrigger`.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method The http method of function compute service. Required if `function_type` is `HttpTrigger`.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param onlyBusinessPath Whether to filter path in `function_base_url`. Optional if `function_type` is `HttpTrigger`.
         * 
         * @return builder
         * 
         */
        public Builder onlyBusinessPath(@Nullable Output<Boolean> onlyBusinessPath) {
            $.onlyBusinessPath = onlyBusinessPath;
            return this;
        }

        /**
         * @param onlyBusinessPath Whether to filter path in `function_base_url`. Optional if `function_type` is `HttpTrigger`.
         * 
         * @return builder
         * 
         */
        public Builder onlyBusinessPath(Boolean onlyBusinessPath) {
            return onlyBusinessPath(Output.of(onlyBusinessPath));
        }

        /**
         * @param path The path of function compute service. Required if `function_type` is `HttpTrigger`.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path of function compute service. Required if `function_type` is `HttpTrigger`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param qualifier The qualifier of function name of compute service.
         * 
         * @return builder
         * 
         */
        public Builder qualifier(@Nullable Output<String> qualifier) {
            $.qualifier = qualifier;
            return this;
        }

        /**
         * @param qualifier The qualifier of function name of compute service.
         * 
         * @return builder
         * 
         */
        public Builder qualifier(String qualifier) {
            return qualifier(Output.of(qualifier));
        }

        /**
         * @param region The region that the function compute service belongs to.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region that the function compute service belongs to.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceName The service name of function compute service. Required if `function_type` is `FCEvent` and `function_version` is `2.0`.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The service name of function compute service. Required if `function_type` is `FCEvent` and `function_version` is `2.0`.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param timeout Backend service time-out time; unit: millisecond.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Backend service time-out time; unit: millisecond.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public ApiFcServiceConfigArgs build() {
            if ($.arnRole == null) {
                throw new MissingRequiredPropertyException("ApiFcServiceConfigArgs", "arnRole");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("ApiFcServiceConfigArgs", "region");
            }
            if ($.timeout == null) {
                throw new MissingRequiredPropertyException("ApiFcServiceConfigArgs", "timeout");
            }
            return $;
        }
    }

}
