// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionIkeConfig {
    /**
     * @return the authentication algorithm that is used in Phase 1 negotiations. Valid values: md5, sha1, sha2
     * 
     */
    private @Nullable String ikeAuthAlg;
    /**
     * @return the encryption algorithm that is used in Phase 1 negotiations. Valid values: aes, aes192, aes256, des, and 3des. Default value: aes.
     * 
     */
    private @Nullable String ikeEncAlg;
    /**
     * @return the SA lifetime as a result of Phase 1 negotiations. Unit: seconds. Valid values: 0 to 86400. Default value: 86400.
     * 
     */
    private @Nullable Integer ikeLifetime;
    /**
     * @return the identifier of the VPN gateway. It can contain at most 100 characters. The default value is the IP address of the VPN gateway.
     * 
     */
    private @Nullable String ikeLocalId;
    /**
     * @return the negotiation mode of IKE. Valid values: main and aggressive. Default value: main.
     * - main: This mode offers higher security during negotiations.
     * - aggressive: This mode supports faster negotiations and a higher success rate.
     * 
     */
    private @Nullable String ikeMode;
    /**
     * @return the Diffie-Hellman key exchange algorithm that is used in Phase 1 negotiations. Valid values: group1, group2, group5, and group14. Default value: group2.
     * 
     */
    private @Nullable String ikePfs;
    /**
     * @return the identifier of the customer gateway. It can contain at most 100 characters. The default value is the IP address of the customer gateway.
     * 
     */
    private @Nullable String ikeRemoteId;
    /**
     * @return the version of the Internet Key Exchange (IKE) protocol. Valid values: ikev1 and ikev2. Default value: ikev1.
     * Compared with IKEv1, IKEv2 simplifies the security association (SA) negotiation process and provides better support for scenarios with multiple CIDR blocks.
     * 
     */
    private @Nullable String ikeVersion;
    /**
     * @return the pre-shared key that is used for identity authentication between the VPN gateway and the on-premises data center. The key must be 1 to 100 characters in length and can contain digits, letters, and the following special characters: ~!\`{@literal @}#$%^&amp;*()_-+={}[]|;:&#39;,.&lt;&gt;/? If you do not specify a pre-shared key, the system randomly generates a 16-bit string as the pre-shared key. You can call the DescribeVpnConnection operation to query the pre-shared key that is automatically generated by the system.
     * 
     */
    private @Nullable String psk;

    private ConnectionIkeConfig() {}
    /**
     * @return the authentication algorithm that is used in Phase 1 negotiations. Valid values: md5, sha1, sha2
     * 
     */
    public Optional<String> ikeAuthAlg() {
        return Optional.ofNullable(this.ikeAuthAlg);
    }
    /**
     * @return the encryption algorithm that is used in Phase 1 negotiations. Valid values: aes, aes192, aes256, des, and 3des. Default value: aes.
     * 
     */
    public Optional<String> ikeEncAlg() {
        return Optional.ofNullable(this.ikeEncAlg);
    }
    /**
     * @return the SA lifetime as a result of Phase 1 negotiations. Unit: seconds. Valid values: 0 to 86400. Default value: 86400.
     * 
     */
    public Optional<Integer> ikeLifetime() {
        return Optional.ofNullable(this.ikeLifetime);
    }
    /**
     * @return the identifier of the VPN gateway. It can contain at most 100 characters. The default value is the IP address of the VPN gateway.
     * 
     */
    public Optional<String> ikeLocalId() {
        return Optional.ofNullable(this.ikeLocalId);
    }
    /**
     * @return the negotiation mode of IKE. Valid values: main and aggressive. Default value: main.
     * - main: This mode offers higher security during negotiations.
     * - aggressive: This mode supports faster negotiations and a higher success rate.
     * 
     */
    public Optional<String> ikeMode() {
        return Optional.ofNullable(this.ikeMode);
    }
    /**
     * @return the Diffie-Hellman key exchange algorithm that is used in Phase 1 negotiations. Valid values: group1, group2, group5, and group14. Default value: group2.
     * 
     */
    public Optional<String> ikePfs() {
        return Optional.ofNullable(this.ikePfs);
    }
    /**
     * @return the identifier of the customer gateway. It can contain at most 100 characters. The default value is the IP address of the customer gateway.
     * 
     */
    public Optional<String> ikeRemoteId() {
        return Optional.ofNullable(this.ikeRemoteId);
    }
    /**
     * @return the version of the Internet Key Exchange (IKE) protocol. Valid values: ikev1 and ikev2. Default value: ikev1.
     * Compared with IKEv1, IKEv2 simplifies the security association (SA) negotiation process and provides better support for scenarios with multiple CIDR blocks.
     * 
     */
    public Optional<String> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }
    /**
     * @return the pre-shared key that is used for identity authentication between the VPN gateway and the on-premises data center. The key must be 1 to 100 characters in length and can contain digits, letters, and the following special characters: ~!\`{@literal @}#$%^&amp;*()_-+={}[]|;:&#39;,.&lt;&gt;/? If you do not specify a pre-shared key, the system randomly generates a 16-bit string as the pre-shared key. You can call the DescribeVpnConnection operation to query the pre-shared key that is automatically generated by the system.
     * 
     */
    public Optional<String> psk() {
        return Optional.ofNullable(this.psk);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionIkeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String ikeAuthAlg;
        private @Nullable String ikeEncAlg;
        private @Nullable Integer ikeLifetime;
        private @Nullable String ikeLocalId;
        private @Nullable String ikeMode;
        private @Nullable String ikePfs;
        private @Nullable String ikeRemoteId;
        private @Nullable String ikeVersion;
        private @Nullable String psk;
        public Builder() {}
        public Builder(ConnectionIkeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ikeAuthAlg = defaults.ikeAuthAlg;
    	      this.ikeEncAlg = defaults.ikeEncAlg;
    	      this.ikeLifetime = defaults.ikeLifetime;
    	      this.ikeLocalId = defaults.ikeLocalId;
    	      this.ikeMode = defaults.ikeMode;
    	      this.ikePfs = defaults.ikePfs;
    	      this.ikeRemoteId = defaults.ikeRemoteId;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.psk = defaults.psk;
        }

        @CustomType.Setter
        public Builder ikeAuthAlg(@Nullable String ikeAuthAlg) {

            this.ikeAuthAlg = ikeAuthAlg;
            return this;
        }
        @CustomType.Setter
        public Builder ikeEncAlg(@Nullable String ikeEncAlg) {

            this.ikeEncAlg = ikeEncAlg;
            return this;
        }
        @CustomType.Setter
        public Builder ikeLifetime(@Nullable Integer ikeLifetime) {

            this.ikeLifetime = ikeLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder ikeLocalId(@Nullable String ikeLocalId) {

            this.ikeLocalId = ikeLocalId;
            return this;
        }
        @CustomType.Setter
        public Builder ikeMode(@Nullable String ikeMode) {

            this.ikeMode = ikeMode;
            return this;
        }
        @CustomType.Setter
        public Builder ikePfs(@Nullable String ikePfs) {

            this.ikePfs = ikePfs;
            return this;
        }
        @CustomType.Setter
        public Builder ikeRemoteId(@Nullable String ikeRemoteId) {

            this.ikeRemoteId = ikeRemoteId;
            return this;
        }
        @CustomType.Setter
        public Builder ikeVersion(@Nullable String ikeVersion) {

            this.ikeVersion = ikeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder psk(@Nullable String psk) {

            this.psk = psk;
            return this;
        }
        public ConnectionIkeConfig build() {
            final var _resultValue = new ConnectionIkeConfig();
            _resultValue.ikeAuthAlg = ikeAuthAlg;
            _resultValue.ikeEncAlg = ikeEncAlg;
            _resultValue.ikeLifetime = ikeLifetime;
            _resultValue.ikeLocalId = ikeLocalId;
            _resultValue.ikeMode = ikeMode;
            _resultValue.ikePfs = ikePfs;
            _resultValue.ikeRemoteId = ikeRemoteId;
            _resultValue.ikeVersion = ikeVersion;
            _resultValue.psk = psk;
            return _resultValue;
        }
    }
}
