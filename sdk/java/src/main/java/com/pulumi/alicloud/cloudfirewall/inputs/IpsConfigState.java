// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudfirewall.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpsConfigState extends com.pulumi.resources.ResourceArgs {

    public static final IpsConfigState Empty = new IpsConfigState();

    /**
     * Basic rule switch. Value:
     * - 1: Open.
     * - 0: Closed (Default).
     * 
     */
    @Import(name="basicRules")
    private @Nullable Output<Integer> basicRules;

    /**
     * @return Basic rule switch. Value:
     * - 1: Open.
     * - 0: Closed (Default).
     * 
     */
    public Optional<Output<Integer>> basicRules() {
        return Optional.ofNullable(this.basicRules);
    }

    /**
     * Threat intelligence. Value:
     * - 1: Open.
     * - 0: Closed (Default).
     * 
     */
    @Import(name="ctiRules")
    private @Nullable Output<Integer> ctiRules;

    /**
     * @return Threat intelligence. Value:
     * - 1: Open.
     * - 0: Closed (Default).
     * 
     */
    public Optional<Output<Integer>> ctiRules() {
        return Optional.ofNullable(this.ctiRules);
    }

    /**
     * Language
     * 
     */
    @Import(name="lang")
    private @Nullable Output<String> lang;

    /**
     * @return Language
     * 
     */
    public Optional<Output<String>> lang() {
        return Optional.ofNullable(this.lang);
    }

    /**
     * Sensitive data detection Daily detection traffic limit. Defaults to 0.
     * 
     */
    @Import(name="maxSdl")
    private @Nullable Output<Integer> maxSdl;

    /**
     * @return Sensitive data detection Daily detection traffic limit. Defaults to 0.
     * 
     */
    public Optional<Output<Integer>> maxSdl() {
        return Optional.ofNullable(this.maxSdl);
    }

    /**
     * Virtual patch switch. Value:
     * - 1: Open.
     * - 0: Closed (Default).
     * 
     */
    @Import(name="patchRules")
    private @Nullable Output<Integer> patchRules;

    /**
     * @return Virtual patch switch. Value:
     * - 1: Open.
     * - 0: Closed (Default).
     * 
     */
    public Optional<Output<Integer>> patchRules() {
        return Optional.ofNullable(this.patchRules);
    }

    /**
     * The IPS rule Group. Value:
     * - 1: loose rule Group.
     * - 2: Medium rule Group.
     * - 3: Strict rule groups.
     * 
     */
    @Import(name="ruleClass")
    private @Nullable Output<Integer> ruleClass;

    /**
     * @return The IPS rule Group. Value:
     * - 1: loose rule Group.
     * - 2: Medium rule Group.
     * - 3: Strict rule groups.
     * 
     */
    public Optional<Output<Integer>> ruleClass() {
        return Optional.ofNullable(this.ruleClass);
    }

    /**
     * IPS defense mode. Value:
     * - 1: Intercept mode.
     * - 0: Observation mode (Default).
     * 
     */
    @Import(name="runMode")
    private @Nullable Output<Integer> runMode;

    /**
     * @return IPS defense mode. Value:
     * - 1: Intercept mode.
     * - 0: Observation mode (Default).
     * 
     */
    public Optional<Output<Integer>> runMode() {
        return Optional.ofNullable(this.runMode);
    }

    private IpsConfigState() {}

    private IpsConfigState(IpsConfigState $) {
        this.basicRules = $.basicRules;
        this.ctiRules = $.ctiRules;
        this.lang = $.lang;
        this.maxSdl = $.maxSdl;
        this.patchRules = $.patchRules;
        this.ruleClass = $.ruleClass;
        this.runMode = $.runMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpsConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpsConfigState $;

        public Builder() {
            $ = new IpsConfigState();
        }

        public Builder(IpsConfigState defaults) {
            $ = new IpsConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param basicRules Basic rule switch. Value:
         * - 1: Open.
         * - 0: Closed (Default).
         * 
         * @return builder
         * 
         */
        public Builder basicRules(@Nullable Output<Integer> basicRules) {
            $.basicRules = basicRules;
            return this;
        }

        /**
         * @param basicRules Basic rule switch. Value:
         * - 1: Open.
         * - 0: Closed (Default).
         * 
         * @return builder
         * 
         */
        public Builder basicRules(Integer basicRules) {
            return basicRules(Output.of(basicRules));
        }

        /**
         * @param ctiRules Threat intelligence. Value:
         * - 1: Open.
         * - 0: Closed (Default).
         * 
         * @return builder
         * 
         */
        public Builder ctiRules(@Nullable Output<Integer> ctiRules) {
            $.ctiRules = ctiRules;
            return this;
        }

        /**
         * @param ctiRules Threat intelligence. Value:
         * - 1: Open.
         * - 0: Closed (Default).
         * 
         * @return builder
         * 
         */
        public Builder ctiRules(Integer ctiRules) {
            return ctiRules(Output.of(ctiRules));
        }

        /**
         * @param lang Language
         * 
         * @return builder
         * 
         */
        public Builder lang(@Nullable Output<String> lang) {
            $.lang = lang;
            return this;
        }

        /**
         * @param lang Language
         * 
         * @return builder
         * 
         */
        public Builder lang(String lang) {
            return lang(Output.of(lang));
        }

        /**
         * @param maxSdl Sensitive data detection Daily detection traffic limit. Defaults to 0.
         * 
         * @return builder
         * 
         */
        public Builder maxSdl(@Nullable Output<Integer> maxSdl) {
            $.maxSdl = maxSdl;
            return this;
        }

        /**
         * @param maxSdl Sensitive data detection Daily detection traffic limit. Defaults to 0.
         * 
         * @return builder
         * 
         */
        public Builder maxSdl(Integer maxSdl) {
            return maxSdl(Output.of(maxSdl));
        }

        /**
         * @param patchRules Virtual patch switch. Value:
         * - 1: Open.
         * - 0: Closed (Default).
         * 
         * @return builder
         * 
         */
        public Builder patchRules(@Nullable Output<Integer> patchRules) {
            $.patchRules = patchRules;
            return this;
        }

        /**
         * @param patchRules Virtual patch switch. Value:
         * - 1: Open.
         * - 0: Closed (Default).
         * 
         * @return builder
         * 
         */
        public Builder patchRules(Integer patchRules) {
            return patchRules(Output.of(patchRules));
        }

        /**
         * @param ruleClass The IPS rule Group. Value:
         * - 1: loose rule Group.
         * - 2: Medium rule Group.
         * - 3: Strict rule groups.
         * 
         * @return builder
         * 
         */
        public Builder ruleClass(@Nullable Output<Integer> ruleClass) {
            $.ruleClass = ruleClass;
            return this;
        }

        /**
         * @param ruleClass The IPS rule Group. Value:
         * - 1: loose rule Group.
         * - 2: Medium rule Group.
         * - 3: Strict rule groups.
         * 
         * @return builder
         * 
         */
        public Builder ruleClass(Integer ruleClass) {
            return ruleClass(Output.of(ruleClass));
        }

        /**
         * @param runMode IPS defense mode. Value:
         * - 1: Intercept mode.
         * - 0: Observation mode (Default).
         * 
         * @return builder
         * 
         */
        public Builder runMode(@Nullable Output<Integer> runMode) {
            $.runMode = runMode;
            return this;
        }

        /**
         * @param runMode IPS defense mode. Value:
         * - 1: Intercept mode.
         * - 0: Observation mode (Default).
         * 
         * @return builder
         * 
         */
        public Builder runMode(Integer runMode) {
            return runMode(Output.of(runMode));
        }

        public IpsConfigState build() {
            return $;
        }
    }

}
