// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.tsdb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstancesInstance {
    /**
     * @return Auto renew.
     * 
     */
    private String autoRenew;
    /**
     * @return The cpu core number of instance.
     * 
     */
    private String cpuNumber;
    /**
     * @return The disk type of instance. `cloud_ssd` refers to SSD disk, `cloud_efficiency` refers to efficiency disk,cloud_essd refers to ESSD PL1 disk.
     * 
     */
    private String diskCategory;
    /**
     * @return The engine type of instance. Enumerative: `tsdb_tsdb` refers to TSDB, `tsdb_influxdb` refers to TSDB for InfluxDB️.
     * 
     */
    private String engineType;
    /**
     * @return Instance expiration time.
     * 
     */
    private Integer expiredTime;
    /**
     * @return The ID of the Instance.
     * 
     */
    private String id;
    /**
     * @return The alias of the instance.
     * 
     */
    private String instanceAlias;
    /**
     * @return The specification of the instance.
     * 
     */
    private String instanceClass;
    /**
     * @return The ID of the instance.
     * 
     */
    private String instanceId;
    /**
     * @return The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
     * 
     */
    private String instanceStorage;
    /**
     * @return The memory size of instance.
     * 
     */
    private String memorySize;
    /**
     * @return Instance network type.
     * 
     */
    private String networkType;
    /**
     * @return The billing method. Valid values: `PayAsYouGo` and `Subscription`. The `PayAsYouGo` value indicates the pay-as-you-go method, and the `Subscription` value indicates the subscription method.
     * 
     */
    private String paymentType;
    /**
     * @return Instance status, enumerative: ACTIVATION,DELETED, CREATING,CLASS_CHANGING,LOCKED.
     * 
     */
    private String status;
    /**
     * @return The vpc connection address of instance.
     * 
     */
    private String vpcConnectionAddress;
    /**
     * @return The ID of the virtual private cloud (VPC) that is connected to the instance.
     * 
     */
    private String vpcId;
    /**
     * @return The vswitch id.
     * 
     */
    private String vswitchId;
    /**
     * @return The zone ID of the instance.
     * 
     */
    private String zoneId;

    private GetInstancesInstance() {}
    /**
     * @return Auto renew.
     * 
     */
    public String autoRenew() {
        return this.autoRenew;
    }
    /**
     * @return The cpu core number of instance.
     * 
     */
    public String cpuNumber() {
        return this.cpuNumber;
    }
    /**
     * @return The disk type of instance. `cloud_ssd` refers to SSD disk, `cloud_efficiency` refers to efficiency disk,cloud_essd refers to ESSD PL1 disk.
     * 
     */
    public String diskCategory() {
        return this.diskCategory;
    }
    /**
     * @return The engine type of instance. Enumerative: `tsdb_tsdb` refers to TSDB, `tsdb_influxdb` refers to TSDB for InfluxDB️.
     * 
     */
    public String engineType() {
        return this.engineType;
    }
    /**
     * @return Instance expiration time.
     * 
     */
    public Integer expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return The ID of the Instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The alias of the instance.
     * 
     */
    public String instanceAlias() {
        return this.instanceAlias;
    }
    /**
     * @return The specification of the instance.
     * 
     */
    public String instanceClass() {
        return this.instanceClass;
    }
    /**
     * @return The ID of the instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
     * 
     */
    public String instanceStorage() {
        return this.instanceStorage;
    }
    /**
     * @return The memory size of instance.
     * 
     */
    public String memorySize() {
        return this.memorySize;
    }
    /**
     * @return Instance network type.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return The billing method. Valid values: `PayAsYouGo` and `Subscription`. The `PayAsYouGo` value indicates the pay-as-you-go method, and the `Subscription` value indicates the subscription method.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return Instance status, enumerative: ACTIVATION,DELETED, CREATING,CLASS_CHANGING,LOCKED.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The vpc connection address of instance.
     * 
     */
    public String vpcConnectionAddress() {
        return this.vpcConnectionAddress;
    }
    /**
     * @return The ID of the virtual private cloud (VPC) that is connected to the instance.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The vswitch id.
     * 
     */
    public String vswitchId() {
        return this.vswitchId;
    }
    /**
     * @return The zone ID of the instance.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String autoRenew;
        private String cpuNumber;
        private String diskCategory;
        private String engineType;
        private Integer expiredTime;
        private String id;
        private String instanceAlias;
        private String instanceClass;
        private String instanceId;
        private String instanceStorage;
        private String memorySize;
        private String networkType;
        private String paymentType;
        private String status;
        private String vpcConnectionAddress;
        private String vpcId;
        private String vswitchId;
        private String zoneId;
        public Builder() {}
        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoRenew = defaults.autoRenew;
    	      this.cpuNumber = defaults.cpuNumber;
    	      this.diskCategory = defaults.diskCategory;
    	      this.engineType = defaults.engineType;
    	      this.expiredTime = defaults.expiredTime;
    	      this.id = defaults.id;
    	      this.instanceAlias = defaults.instanceAlias;
    	      this.instanceClass = defaults.instanceClass;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceStorage = defaults.instanceStorage;
    	      this.memorySize = defaults.memorySize;
    	      this.networkType = defaults.networkType;
    	      this.paymentType = defaults.paymentType;
    	      this.status = defaults.status;
    	      this.vpcConnectionAddress = defaults.vpcConnectionAddress;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchId = defaults.vswitchId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder autoRenew(String autoRenew) {
            if (autoRenew == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "autoRenew");
            }
            this.autoRenew = autoRenew;
            return this;
        }
        @CustomType.Setter
        public Builder cpuNumber(String cpuNumber) {
            if (cpuNumber == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "cpuNumber");
            }
            this.cpuNumber = cpuNumber;
            return this;
        }
        @CustomType.Setter
        public Builder diskCategory(String diskCategory) {
            if (diskCategory == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "diskCategory");
            }
            this.diskCategory = diskCategory;
            return this;
        }
        @CustomType.Setter
        public Builder engineType(String engineType) {
            if (engineType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "engineType");
            }
            this.engineType = engineType;
            return this;
        }
        @CustomType.Setter
        public Builder expiredTime(Integer expiredTime) {
            if (expiredTime == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "expiredTime");
            }
            this.expiredTime = expiredTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceAlias(String instanceAlias) {
            if (instanceAlias == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "instanceAlias");
            }
            this.instanceAlias = instanceAlias;
            return this;
        }
        @CustomType.Setter
        public Builder instanceClass(String instanceClass) {
            if (instanceClass == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "instanceClass");
            }
            this.instanceClass = instanceClass;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceStorage(String instanceStorage) {
            if (instanceStorage == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "instanceStorage");
            }
            this.instanceStorage = instanceStorage;
            return this;
        }
        @CustomType.Setter
        public Builder memorySize(String memorySize) {
            if (memorySize == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "memorySize");
            }
            this.memorySize = memorySize;
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            if (networkType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "networkType");
            }
            this.networkType = networkType;
            return this;
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            if (paymentType == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "paymentType");
            }
            this.paymentType = paymentType;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder vpcConnectionAddress(String vpcConnectionAddress) {
            if (vpcConnectionAddress == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "vpcConnectionAddress");
            }
            this.vpcConnectionAddress = vpcConnectionAddress;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchId(String vswitchId) {
            if (vswitchId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "vswitchId");
            }
            this.vswitchId = vswitchId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetInstancesInstance build() {
            final var _resultValue = new GetInstancesInstance();
            _resultValue.autoRenew = autoRenew;
            _resultValue.cpuNumber = cpuNumber;
            _resultValue.diskCategory = diskCategory;
            _resultValue.engineType = engineType;
            _resultValue.expiredTime = expiredTime;
            _resultValue.id = id;
            _resultValue.instanceAlias = instanceAlias;
            _resultValue.instanceClass = instanceClass;
            _resultValue.instanceId = instanceId;
            _resultValue.instanceStorage = instanceStorage;
            _resultValue.memorySize = memorySize;
            _resultValue.networkType = networkType;
            _resultValue.paymentType = paymentType;
            _resultValue.status = status;
            _resultValue.vpcConnectionAddress = vpcConnectionAddress;
            _resultValue.vpcId = vpcId;
            _resultValue.vswitchId = vswitchId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
