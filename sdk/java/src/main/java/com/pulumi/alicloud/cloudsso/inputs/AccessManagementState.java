// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudsso.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessManagementState extends com.pulumi.resources.ResourceArgs {

    public static final AccessManagementState Empty = new AccessManagementState();

    /**
     * The ID of the access configuration.
     * 
     */
    @Import(name="accessConfigurationId")
    private @Nullable Output<String> accessConfigurationId;

    /**
     * @return The ID of the access configuration.
     * 
     */
    public Optional<Output<String>> accessConfigurationId() {
        return Optional.ofNullable(this.accessConfigurationId);
    }

    /**
     * (Available since v1.254.0) The time when the access permissions were assigned.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return (Available since v1.254.0) The time when the access permissions were assigned.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Specifies whether to de-provision the access configuration when you remove the access permissions from the CloudSSO identity. Valid values: `DeprovisionForLastAccessAssignmentOnAccount` and `None`. Default Value: `DeprovisionForLastAccessAssignmentOnAccount`. **NOTE:** When `deprovision_strategy` is `DeprovisionForLastAccessAssignmentOnAccount`, and the access assignment to be deleted is the last access assignment for the same account and the same AC, this option is used for the undeployment operation.
     * 
     */
    @Import(name="deprovisionStrategy")
    private @Nullable Output<String> deprovisionStrategy;

    /**
     * @return Specifies whether to de-provision the access configuration when you remove the access permissions from the CloudSSO identity. Valid values: `DeprovisionForLastAccessAssignmentOnAccount` and `None`. Default Value: `DeprovisionForLastAccessAssignmentOnAccount`. **NOTE:** When `deprovision_strategy` is `DeprovisionForLastAccessAssignmentOnAccount`, and the access assignment to be deleted is the last access assignment for the same account and the same AC, this option is used for the undeployment operation.
     * 
     */
    public Optional<Output<String>> deprovisionStrategy() {
        return Optional.ofNullable(this.deprovisionStrategy);
    }

    /**
     * The ID of the Directory.
     * 
     */
    @Import(name="directoryId")
    private @Nullable Output<String> directoryId;

    /**
     * @return The ID of the Directory.
     * 
     */
    public Optional<Output<String>> directoryId() {
        return Optional.ofNullable(this.directoryId);
    }

    /**
     * The ID of the CloudSSO identity.
     * 
     */
    @Import(name="principalId")
    private @Nullable Output<String> principalId;

    /**
     * @return The ID of the CloudSSO identity.
     * 
     */
    public Optional<Output<String>> principalId() {
        return Optional.ofNullable(this.principalId);
    }

    /**
     * The type of the CloudSSO identity. Valid values: `User`, `Group`.
     * 
     */
    @Import(name="principalType")
    private @Nullable Output<String> principalType;

    /**
     * @return The type of the CloudSSO identity. Valid values: `User`, `Group`.
     * 
     */
    public Optional<Output<String>> principalType() {
        return Optional.ofNullable(this.principalType);
    }

    /**
     * The ID of the task object.
     * 
     */
    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    /**
     * @return The ID of the task object.
     * 
     */
    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * The type of the task object. Valid values: `RD-Account`.
     * 
     */
    @Import(name="targetType")
    private @Nullable Output<String> targetType;

    /**
     * @return The type of the task object. Valid values: `RD-Account`.
     * 
     */
    public Optional<Output<String>> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    private AccessManagementState() {}

    private AccessManagementState(AccessManagementState $) {
        this.accessConfigurationId = $.accessConfigurationId;
        this.createTime = $.createTime;
        this.deprovisionStrategy = $.deprovisionStrategy;
        this.directoryId = $.directoryId;
        this.principalId = $.principalId;
        this.principalType = $.principalType;
        this.targetId = $.targetId;
        this.targetType = $.targetType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessManagementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessManagementState $;

        public Builder() {
            $ = new AccessManagementState();
        }

        public Builder(AccessManagementState defaults) {
            $ = new AccessManagementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessConfigurationId The ID of the access configuration.
         * 
         * @return builder
         * 
         */
        public Builder accessConfigurationId(@Nullable Output<String> accessConfigurationId) {
            $.accessConfigurationId = accessConfigurationId;
            return this;
        }

        /**
         * @param accessConfigurationId The ID of the access configuration.
         * 
         * @return builder
         * 
         */
        public Builder accessConfigurationId(String accessConfigurationId) {
            return accessConfigurationId(Output.of(accessConfigurationId));
        }

        /**
         * @param createTime (Available since v1.254.0) The time when the access permissions were assigned.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime (Available since v1.254.0) The time when the access permissions were assigned.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param deprovisionStrategy Specifies whether to de-provision the access configuration when you remove the access permissions from the CloudSSO identity. Valid values: `DeprovisionForLastAccessAssignmentOnAccount` and `None`. Default Value: `DeprovisionForLastAccessAssignmentOnAccount`. **NOTE:** When `deprovision_strategy` is `DeprovisionForLastAccessAssignmentOnAccount`, and the access assignment to be deleted is the last access assignment for the same account and the same AC, this option is used for the undeployment operation.
         * 
         * @return builder
         * 
         */
        public Builder deprovisionStrategy(@Nullable Output<String> deprovisionStrategy) {
            $.deprovisionStrategy = deprovisionStrategy;
            return this;
        }

        /**
         * @param deprovisionStrategy Specifies whether to de-provision the access configuration when you remove the access permissions from the CloudSSO identity. Valid values: `DeprovisionForLastAccessAssignmentOnAccount` and `None`. Default Value: `DeprovisionForLastAccessAssignmentOnAccount`. **NOTE:** When `deprovision_strategy` is `DeprovisionForLastAccessAssignmentOnAccount`, and the access assignment to be deleted is the last access assignment for the same account and the same AC, this option is used for the undeployment operation.
         * 
         * @return builder
         * 
         */
        public Builder deprovisionStrategy(String deprovisionStrategy) {
            return deprovisionStrategy(Output.of(deprovisionStrategy));
        }

        /**
         * @param directoryId The ID of the Directory.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(@Nullable Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        /**
         * @param directoryId The ID of the Directory.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        /**
         * @param principalId The ID of the CloudSSO identity.
         * 
         * @return builder
         * 
         */
        public Builder principalId(@Nullable Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId The ID of the CloudSSO identity.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param principalType The type of the CloudSSO identity. Valid values: `User`, `Group`.
         * 
         * @return builder
         * 
         */
        public Builder principalType(@Nullable Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType The type of the CloudSSO identity. Valid values: `User`, `Group`.
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        /**
         * @param targetId The ID of the task object.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId The ID of the task object.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param targetType The type of the task object. Valid values: `RD-Account`.
         * 
         * @return builder
         * 
         */
        public Builder targetType(@Nullable Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType The type of the task object. Valid values: `RD-Account`.
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        public AccessManagementState build() {
            return $;
        }
    }

}
