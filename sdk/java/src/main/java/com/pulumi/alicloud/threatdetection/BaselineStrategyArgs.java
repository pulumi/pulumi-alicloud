// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.threatdetection;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BaselineStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final BaselineStrategyArgs Empty = new BaselineStrategyArgs();

    /**
     * Policy name.
     * 
     */
    @Import(name="baselineStrategyName", required=true)
    private Output<String> baselineStrategyName;

    /**
     * @return Policy name.
     * 
     */
    public Output<String> baselineStrategyName() {
        return this.baselineStrategyName;
    }

    /**
     * The type of policy. Value:
     * * **common**: standard policy
     * * **custom**: custom policy
     * 
     */
    @Import(name="customType", required=true)
    private Output<String> customType;

    /**
     * @return The type of policy. Value:
     * * **common**: standard policy
     * * **custom**: custom policy
     * 
     */
    public Output<String> customType() {
        return this.customType;
    }

    /**
     * The detection period of the policy.
     * 
     */
    @Import(name="cycleDays", required=true)
    private Output<Integer> cycleDays;

    /**
     * @return The detection period of the policy.
     * 
     */
    public Output<Integer> cycleDays() {
        return this.cycleDays;
    }

    /**
     * The detection period of the policy. Value:
     * * **0**: 0:00~06:00
     * * **6**: 6:00~12:00
     * * **12**: 12:00~18:00
     * * **18**: 18:00~24:00
     * 
     */
    @Import(name="cycleStartTime")
    private @Nullable Output<Integer> cycleStartTime;

    /**
     * @return The detection period of the policy. Value:
     * * **0**: 0:00~06:00
     * * **6**: 6:00~12:00
     * * **12**: 12:00~18:00
     * * **18**: 18:00~24:00
     * 
     */
    public Optional<Output<Integer>> cycleStartTime() {
        return Optional.ofNullable(this.cycleStartTime);
    }

    /**
     * The baseline check policy execution end time.
     * 
     */
    @Import(name="endTime", required=true)
    private Output<String> endTime;

    /**
     * @return The baseline check policy execution end time.
     * 
     */
    public Output<String> endTime() {
        return this.endTime;
    }

    /**
     * Detection item subtype.
     * 
     */
    @Import(name="riskSubTypeName", required=true)
    private Output<String> riskSubTypeName;

    /**
     * @return Detection item subtype.
     * 
     */
    public Output<String> riskSubTypeName() {
        return this.riskSubTypeName;
    }

    /**
     * The baseline check policy start time.
     * 
     */
    @Import(name="startTime", required=true)
    private Output<String> startTime;

    /**
     * @return The baseline check policy start time.
     * 
     */
    public Output<String> startTime() {
        return this.startTime;
    }

    /**
     * The method of adding assets that take effect from the policy. Value:
     * * **groupId**: Added by asset group.
     * * **uuid**: Add by single asset.
     * 
     */
    @Import(name="targetType", required=true)
    private Output<String> targetType;

    /**
     * @return The method of adding assets that take effect from the policy. Value:
     * * **groupId**: Added by asset group.
     * * **uuid**: Add by single asset.
     * 
     */
    public Output<String> targetType() {
        return this.targetType;
    }

    private BaselineStrategyArgs() {}

    private BaselineStrategyArgs(BaselineStrategyArgs $) {
        this.baselineStrategyName = $.baselineStrategyName;
        this.customType = $.customType;
        this.cycleDays = $.cycleDays;
        this.cycleStartTime = $.cycleStartTime;
        this.endTime = $.endTime;
        this.riskSubTypeName = $.riskSubTypeName;
        this.startTime = $.startTime;
        this.targetType = $.targetType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BaselineStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BaselineStrategyArgs $;

        public Builder() {
            $ = new BaselineStrategyArgs();
        }

        public Builder(BaselineStrategyArgs defaults) {
            $ = new BaselineStrategyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baselineStrategyName Policy name.
         * 
         * @return builder
         * 
         */
        public Builder baselineStrategyName(Output<String> baselineStrategyName) {
            $.baselineStrategyName = baselineStrategyName;
            return this;
        }

        /**
         * @param baselineStrategyName Policy name.
         * 
         * @return builder
         * 
         */
        public Builder baselineStrategyName(String baselineStrategyName) {
            return baselineStrategyName(Output.of(baselineStrategyName));
        }

        /**
         * @param customType The type of policy. Value:
         * * **common**: standard policy
         * * **custom**: custom policy
         * 
         * @return builder
         * 
         */
        public Builder customType(Output<String> customType) {
            $.customType = customType;
            return this;
        }

        /**
         * @param customType The type of policy. Value:
         * * **common**: standard policy
         * * **custom**: custom policy
         * 
         * @return builder
         * 
         */
        public Builder customType(String customType) {
            return customType(Output.of(customType));
        }

        /**
         * @param cycleDays The detection period of the policy.
         * 
         * @return builder
         * 
         */
        public Builder cycleDays(Output<Integer> cycleDays) {
            $.cycleDays = cycleDays;
            return this;
        }

        /**
         * @param cycleDays The detection period of the policy.
         * 
         * @return builder
         * 
         */
        public Builder cycleDays(Integer cycleDays) {
            return cycleDays(Output.of(cycleDays));
        }

        /**
         * @param cycleStartTime The detection period of the policy. Value:
         * * **0**: 0:00~06:00
         * * **6**: 6:00~12:00
         * * **12**: 12:00~18:00
         * * **18**: 18:00~24:00
         * 
         * @return builder
         * 
         */
        public Builder cycleStartTime(@Nullable Output<Integer> cycleStartTime) {
            $.cycleStartTime = cycleStartTime;
            return this;
        }

        /**
         * @param cycleStartTime The detection period of the policy. Value:
         * * **0**: 0:00~06:00
         * * **6**: 6:00~12:00
         * * **12**: 12:00~18:00
         * * **18**: 18:00~24:00
         * 
         * @return builder
         * 
         */
        public Builder cycleStartTime(Integer cycleStartTime) {
            return cycleStartTime(Output.of(cycleStartTime));
        }

        /**
         * @param endTime The baseline check policy execution end time.
         * 
         * @return builder
         * 
         */
        public Builder endTime(Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The baseline check policy execution end time.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param riskSubTypeName Detection item subtype.
         * 
         * @return builder
         * 
         */
        public Builder riskSubTypeName(Output<String> riskSubTypeName) {
            $.riskSubTypeName = riskSubTypeName;
            return this;
        }

        /**
         * @param riskSubTypeName Detection item subtype.
         * 
         * @return builder
         * 
         */
        public Builder riskSubTypeName(String riskSubTypeName) {
            return riskSubTypeName(Output.of(riskSubTypeName));
        }

        /**
         * @param startTime The baseline check policy start time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The baseline check policy start time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param targetType The method of adding assets that take effect from the policy. Value:
         * * **groupId**: Added by asset group.
         * * **uuid**: Add by single asset.
         * 
         * @return builder
         * 
         */
        public Builder targetType(Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType The method of adding assets that take effect from the policy. Value:
         * * **groupId**: Added by asset group.
         * * **uuid**: Add by single asset.
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        public BaselineStrategyArgs build() {
            if ($.baselineStrategyName == null) {
                throw new MissingRequiredPropertyException("BaselineStrategyArgs", "baselineStrategyName");
            }
            if ($.customType == null) {
                throw new MissingRequiredPropertyException("BaselineStrategyArgs", "customType");
            }
            if ($.cycleDays == null) {
                throw new MissingRequiredPropertyException("BaselineStrategyArgs", "cycleDays");
            }
            if ($.endTime == null) {
                throw new MissingRequiredPropertyException("BaselineStrategyArgs", "endTime");
            }
            if ($.riskSubTypeName == null) {
                throw new MissingRequiredPropertyException("BaselineStrategyArgs", "riskSubTypeName");
            }
            if ($.startTime == null) {
                throw new MissingRequiredPropertyException("BaselineStrategyArgs", "startTime");
            }
            if ($.targetType == null) {
                throw new MissingRequiredPropertyException("BaselineStrategyArgs", "targetType");
            }
            return $;
        }
    }

}
