// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.tag;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyArgs Empty = new PolicyArgs();

    /**
     * The content of the policy.
     * 
     */
    @Import(name="policyContent", required=true)
    private Output<String> policyContent;

    /**
     * @return The content of the policy.
     * 
     */
    public Output<String> policyContent() {
        return this.policyContent;
    }

    /**
     * The description of the policy. The description must be 1 to 512 characters in length.
     * 
     */
    @Import(name="policyDesc")
    private @Nullable Output<String> policyDesc;

    /**
     * @return The description of the policy. The description must be 1 to 512 characters in length.
     * 
     */
    public Optional<Output<String>> policyDesc() {
        return Optional.ofNullable(this.policyDesc);
    }

    /**
     * The name of the policy. name must be 1 to 128 characters in length and can contain letters,
     * digits, and hyphens (-).
     * 
     */
    @Import(name="policyName", required=true)
    private Output<String> policyName;

    /**
     * @return The name of the policy. name must be 1 to 128 characters in length and can contain letters,
     * digits, and hyphens (-).
     * 
     */
    public Output<String> policyName() {
        return this.policyName;
    }

    /**
     * The type of the tag policy. Valid values: `USER`, `RD`.
     * 
     */
    @Import(name="userType")
    private @Nullable Output<String> userType;

    /**
     * @return The type of the tag policy. Valid values: `USER`, `RD`.
     * 
     */
    public Optional<Output<String>> userType() {
        return Optional.ofNullable(this.userType);
    }

    private PolicyArgs() {}

    private PolicyArgs(PolicyArgs $) {
        this.policyContent = $.policyContent;
        this.policyDesc = $.policyDesc;
        this.policyName = $.policyName;
        this.userType = $.userType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyArgs $;

        public Builder() {
            $ = new PolicyArgs();
        }

        public Builder(PolicyArgs defaults) {
            $ = new PolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param policyContent The content of the policy.
         * 
         * @return builder
         * 
         */
        public Builder policyContent(Output<String> policyContent) {
            $.policyContent = policyContent;
            return this;
        }

        /**
         * @param policyContent The content of the policy.
         * 
         * @return builder
         * 
         */
        public Builder policyContent(String policyContent) {
            return policyContent(Output.of(policyContent));
        }

        /**
         * @param policyDesc The description of the policy. The description must be 1 to 512 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder policyDesc(@Nullable Output<String> policyDesc) {
            $.policyDesc = policyDesc;
            return this;
        }

        /**
         * @param policyDesc The description of the policy. The description must be 1 to 512 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder policyDesc(String policyDesc) {
            return policyDesc(Output.of(policyDesc));
        }

        /**
         * @param policyName The name of the policy. name must be 1 to 128 characters in length and can contain letters,
         * digits, and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder policyName(Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        /**
         * @param policyName The name of the policy. name must be 1 to 128 characters in length and can contain letters,
         * digits, and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        /**
         * @param userType The type of the tag policy. Valid values: `USER`, `RD`.
         * 
         * @return builder
         * 
         */
        public Builder userType(@Nullable Output<String> userType) {
            $.userType = userType;
            return this;
        }

        /**
         * @param userType The type of the tag policy. Valid values: `USER`, `RD`.
         * 
         * @return builder
         * 
         */
        public Builder userType(String userType) {
            return userType(Output.of(userType));
        }

        public PolicyArgs build() {
            $.policyContent = Objects.requireNonNull($.policyContent, "expected parameter 'policyContent' to be non-null");
            $.policyName = Objects.requireNonNull($.policyName, "expected parameter 'policyName' to be non-null");
            return $;
        }
    }

}
