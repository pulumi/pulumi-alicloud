// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ens.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceDataDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceDataDiskArgs Empty = new InstanceDataDiskArgs();

    /**
     * Data disk type. Optional values:
     * - cloud_efficiency: Ultra cloud disk
     * - cloud_ssd: Full Flash cloud disk
     * - local_hdd: local hdd disk
     * - local_ssd: local disk ssd.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Data disk type. Optional values:
     * - cloud_efficiency: Ultra cloud disk
     * - cloud_ssd: Full Flash cloud disk
     * - local_hdd: local hdd disk
     * - local_ssd: local disk ssd.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * Cloud Disk ID.
     * 
     */
    @Import(name="diskId")
    private @Nullable Output<String> diskId;

    /**
     * @return Cloud Disk ID.
     * 
     */
    public Optional<Output<String>> diskId() {
        return Optional.ofNullable(this.diskId);
    }

    /**
     * The ID of the KMS key used by the cloud disk.
     * 
     */
    @Import(name="encryptKeyId")
    private @Nullable Output<String> encryptKeyId;

    /**
     * @return The ID of the KMS key used by the cloud disk.
     * 
     */
    public Optional<Output<String>> encryptKeyId() {
        return Optional.ofNullable(this.encryptKeyId);
    }

    /**
     * Whether to encrypt the cloud disk. Value range:  true: Yes  false (default): No.
     * 
     */
    @Import(name="encrypted")
    private @Nullable Output<Boolean> encrypted;

    /**
     * @return Whether to encrypt the cloud disk. Value range:  true: Yes  false (default): No.
     * 
     */
    public Optional<Output<Boolean>> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }

    /**
     * Data disk size, unit: GB.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return Data disk size, unit: GB.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    private InstanceDataDiskArgs() {}

    private InstanceDataDiskArgs(InstanceDataDiskArgs $) {
        this.category = $.category;
        this.diskId = $.diskId;
        this.encryptKeyId = $.encryptKeyId;
        this.encrypted = $.encrypted;
        this.size = $.size;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceDataDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceDataDiskArgs $;

        public Builder() {
            $ = new InstanceDataDiskArgs();
        }

        public Builder(InstanceDataDiskArgs defaults) {
            $ = new InstanceDataDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category Data disk type. Optional values:
         * - cloud_efficiency: Ultra cloud disk
         * - cloud_ssd: Full Flash cloud disk
         * - local_hdd: local hdd disk
         * - local_ssd: local disk ssd.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Data disk type. Optional values:
         * - cloud_efficiency: Ultra cloud disk
         * - cloud_ssd: Full Flash cloud disk
         * - local_hdd: local hdd disk
         * - local_ssd: local disk ssd.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param diskId Cloud Disk ID.
         * 
         * @return builder
         * 
         */
        public Builder diskId(@Nullable Output<String> diskId) {
            $.diskId = diskId;
            return this;
        }

        /**
         * @param diskId Cloud Disk ID.
         * 
         * @return builder
         * 
         */
        public Builder diskId(String diskId) {
            return diskId(Output.of(diskId));
        }

        /**
         * @param encryptKeyId The ID of the KMS key used by the cloud disk.
         * 
         * @return builder
         * 
         */
        public Builder encryptKeyId(@Nullable Output<String> encryptKeyId) {
            $.encryptKeyId = encryptKeyId;
            return this;
        }

        /**
         * @param encryptKeyId The ID of the KMS key used by the cloud disk.
         * 
         * @return builder
         * 
         */
        public Builder encryptKeyId(String encryptKeyId) {
            return encryptKeyId(Output.of(encryptKeyId));
        }

        /**
         * @param encrypted Whether to encrypt the cloud disk. Value range:  true: Yes  false (default): No.
         * 
         * @return builder
         * 
         */
        public Builder encrypted(@Nullable Output<Boolean> encrypted) {
            $.encrypted = encrypted;
            return this;
        }

        /**
         * @param encrypted Whether to encrypt the cloud disk. Value range:  true: Yes  false (default): No.
         * 
         * @return builder
         * 
         */
        public Builder encrypted(Boolean encrypted) {
            return encrypted(Output.of(encrypted));
        }

        /**
         * @param size Data disk size, unit: GB.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Data disk size, unit: GB.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public InstanceDataDiskArgs build() {
            return $;
        }
    }

}
