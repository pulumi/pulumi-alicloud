// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudfirewall.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class NatFirewallNatRouteEntryListArgs extends com.pulumi.resources.ResourceArgs {

    public static final NatFirewallNatRouteEntryListArgs Empty = new NatFirewallNatRouteEntryListArgs();

    /**
     * The destination network segment of the default route.
     * 
     */
    @Import(name="destinationCidr", required=true)
    private Output<String> destinationCidr;

    /**
     * @return The destination network segment of the default route.
     * 
     */
    public Output<String> destinationCidr() {
        return this.destinationCidr;
    }

    /**
     * The next hop address of the original NAT gateway.
     * 
     */
    @Import(name="nexthopId", required=true)
    private Output<String> nexthopId;

    /**
     * @return The next hop address of the original NAT gateway.
     * 
     */
    public Output<String> nexthopId() {
        return this.nexthopId;
    }

    /**
     * The network type of the next hop. Value: NatGateway : NAT Gateway.
     * 
     */
    @Import(name="nexthopType", required=true)
    private Output<String> nexthopType;

    /**
     * @return The network type of the next hop. Value: NatGateway : NAT Gateway.
     * 
     */
    public Output<String> nexthopType() {
        return this.nexthopType;
    }

    /**
     * The route table where the default route of the NAT gateway is located.
     * 
     */
    @Import(name="routeTableId", required=true)
    private Output<String> routeTableId;

    /**
     * @return The route table where the default route of the NAT gateway is located.
     * 
     */
    public Output<String> routeTableId() {
        return this.routeTableId;
    }

    private NatFirewallNatRouteEntryListArgs() {}

    private NatFirewallNatRouteEntryListArgs(NatFirewallNatRouteEntryListArgs $) {
        this.destinationCidr = $.destinationCidr;
        this.nexthopId = $.nexthopId;
        this.nexthopType = $.nexthopType;
        this.routeTableId = $.routeTableId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NatFirewallNatRouteEntryListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NatFirewallNatRouteEntryListArgs $;

        public Builder() {
            $ = new NatFirewallNatRouteEntryListArgs();
        }

        public Builder(NatFirewallNatRouteEntryListArgs defaults) {
            $ = new NatFirewallNatRouteEntryListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationCidr The destination network segment of the default route.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidr(Output<String> destinationCidr) {
            $.destinationCidr = destinationCidr;
            return this;
        }

        /**
         * @param destinationCidr The destination network segment of the default route.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidr(String destinationCidr) {
            return destinationCidr(Output.of(destinationCidr));
        }

        /**
         * @param nexthopId The next hop address of the original NAT gateway.
         * 
         * @return builder
         * 
         */
        public Builder nexthopId(Output<String> nexthopId) {
            $.nexthopId = nexthopId;
            return this;
        }

        /**
         * @param nexthopId The next hop address of the original NAT gateway.
         * 
         * @return builder
         * 
         */
        public Builder nexthopId(String nexthopId) {
            return nexthopId(Output.of(nexthopId));
        }

        /**
         * @param nexthopType The network type of the next hop. Value: NatGateway : NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder nexthopType(Output<String> nexthopType) {
            $.nexthopType = nexthopType;
            return this;
        }

        /**
         * @param nexthopType The network type of the next hop. Value: NatGateway : NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder nexthopType(String nexthopType) {
            return nexthopType(Output.of(nexthopType));
        }

        /**
         * @param routeTableId The route table where the default route of the NAT gateway is located.
         * 
         * @return builder
         * 
         */
        public Builder routeTableId(Output<String> routeTableId) {
            $.routeTableId = routeTableId;
            return this;
        }

        /**
         * @param routeTableId The route table where the default route of the NAT gateway is located.
         * 
         * @return builder
         * 
         */
        public Builder routeTableId(String routeTableId) {
            return routeTableId(Output.of(routeTableId));
        }

        public NatFirewallNatRouteEntryListArgs build() {
            if ($.destinationCidr == null) {
                throw new MissingRequiredPropertyException("NatFirewallNatRouteEntryListArgs", "destinationCidr");
            }
            if ($.nexthopId == null) {
                throw new MissingRequiredPropertyException("NatFirewallNatRouteEntryListArgs", "nexthopId");
            }
            if ($.nexthopType == null) {
                throw new MissingRequiredPropertyException("NatFirewallNatRouteEntryListArgs", "nexthopType");
            }
            if ($.routeTableId == null) {
                throw new MissingRequiredPropertyException("NatFirewallNatRouteEntryListArgs", "routeTableId");
            }
            return $;
        }
    }

}
