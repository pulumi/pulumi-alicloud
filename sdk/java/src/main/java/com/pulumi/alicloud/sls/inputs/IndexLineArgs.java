// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IndexLineArgs extends com.pulumi.resources.ResourceArgs {

    public static final IndexLineArgs Empty = new IndexLineArgs();

    /**
     * Is case sensitive
     * 
     */
    @Import(name="caseSensitive", required=true)
    private Output<Boolean> caseSensitive;

    /**
     * @return Is case sensitive
     * 
     */
    public Output<Boolean> caseSensitive() {
        return this.caseSensitive;
    }

    /**
     * Does it include Chinese
     * 
     */
    @Import(name="chn", required=true)
    private Output<Boolean> chn;

    /**
     * @return Does it include Chinese
     * 
     */
    public Output<Boolean> chn() {
        return this.chn;
    }

    /**
     * List of excluded fields
     * 
     */
    @Import(name="excludeKeys")
    private @Nullable Output<List<String>> excludeKeys;

    /**
     * @return List of excluded fields
     * 
     */
    public Optional<Output<List<String>>> excludeKeys() {
        return Optional.ofNullable(this.excludeKeys);
    }

    /**
     * Include field list
     * 
     */
    @Import(name="includeKeys")
    private @Nullable Output<List<String>> includeKeys;

    /**
     * @return Include field list
     * 
     */
    public Optional<Output<List<String>>> includeKeys() {
        return Optional.ofNullable(this.includeKeys);
    }

    /**
     * Delimiter
     * 
     */
    @Import(name="tokens", required=true)
    private Output<List<String>> tokens;

    /**
     * @return Delimiter
     * 
     */
    public Output<List<String>> tokens() {
        return this.tokens;
    }

    private IndexLineArgs() {}

    private IndexLineArgs(IndexLineArgs $) {
        this.caseSensitive = $.caseSensitive;
        this.chn = $.chn;
        this.excludeKeys = $.excludeKeys;
        this.includeKeys = $.includeKeys;
        this.tokens = $.tokens;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IndexLineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IndexLineArgs $;

        public Builder() {
            $ = new IndexLineArgs();
        }

        public Builder(IndexLineArgs defaults) {
            $ = new IndexLineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caseSensitive Is case sensitive
         * 
         * @return builder
         * 
         */
        public Builder caseSensitive(Output<Boolean> caseSensitive) {
            $.caseSensitive = caseSensitive;
            return this;
        }

        /**
         * @param caseSensitive Is case sensitive
         * 
         * @return builder
         * 
         */
        public Builder caseSensitive(Boolean caseSensitive) {
            return caseSensitive(Output.of(caseSensitive));
        }

        /**
         * @param chn Does it include Chinese
         * 
         * @return builder
         * 
         */
        public Builder chn(Output<Boolean> chn) {
            $.chn = chn;
            return this;
        }

        /**
         * @param chn Does it include Chinese
         * 
         * @return builder
         * 
         */
        public Builder chn(Boolean chn) {
            return chn(Output.of(chn));
        }

        /**
         * @param excludeKeys List of excluded fields
         * 
         * @return builder
         * 
         */
        public Builder excludeKeys(@Nullable Output<List<String>> excludeKeys) {
            $.excludeKeys = excludeKeys;
            return this;
        }

        /**
         * @param excludeKeys List of excluded fields
         * 
         * @return builder
         * 
         */
        public Builder excludeKeys(List<String> excludeKeys) {
            return excludeKeys(Output.of(excludeKeys));
        }

        /**
         * @param excludeKeys List of excluded fields
         * 
         * @return builder
         * 
         */
        public Builder excludeKeys(String... excludeKeys) {
            return excludeKeys(List.of(excludeKeys));
        }

        /**
         * @param includeKeys Include field list
         * 
         * @return builder
         * 
         */
        public Builder includeKeys(@Nullable Output<List<String>> includeKeys) {
            $.includeKeys = includeKeys;
            return this;
        }

        /**
         * @param includeKeys Include field list
         * 
         * @return builder
         * 
         */
        public Builder includeKeys(List<String> includeKeys) {
            return includeKeys(Output.of(includeKeys));
        }

        /**
         * @param includeKeys Include field list
         * 
         * @return builder
         * 
         */
        public Builder includeKeys(String... includeKeys) {
            return includeKeys(List.of(includeKeys));
        }

        /**
         * @param tokens Delimiter
         * 
         * @return builder
         * 
         */
        public Builder tokens(Output<List<String>> tokens) {
            $.tokens = tokens;
            return this;
        }

        /**
         * @param tokens Delimiter
         * 
         * @return builder
         * 
         */
        public Builder tokens(List<String> tokens) {
            return tokens(Output.of(tokens));
        }

        /**
         * @param tokens Delimiter
         * 
         * @return builder
         * 
         */
        public Builder tokens(String... tokens) {
            return tokens(List.of(tokens));
        }

        public IndexLineArgs build() {
            if ($.caseSensitive == null) {
                throw new MissingRequiredPropertyException("IndexLineArgs", "caseSensitive");
            }
            if ($.chn == null) {
                throw new MissingRequiredPropertyException("IndexLineArgs", "chn");
            }
            if ($.tokens == null) {
                throw new MissingRequiredPropertyException("IndexLineArgs", "tokens");
            }
            return $;
        }
    }

}
