// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.clickhouse;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.clickhouse.AccountArgs;
import com.pulumi.alicloud.clickhouse.inputs.AccountState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Click House Account resource.
 * 
 * For information about Click House Account and how to use it, see [What is Account](https://www.alibabacloud.com/help/zh/clickhouse/latest/api-clickhouse-2019-11-11-createaccount).
 * 
 * &gt; **NOTE:** Available since v1.134.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.clickhouse.ClickhouseFunctions;
 * import com.pulumi.alicloud.clickhouse.inputs.GetRegionsArgs;
 * import com.pulumi.alicloud.vpc.Network;
 * import com.pulumi.alicloud.vpc.NetworkArgs;
 * import com.pulumi.alicloud.vpc.Switch;
 * import com.pulumi.alicloud.vpc.SwitchArgs;
 * import com.pulumi.alicloud.clickhouse.DbCluster;
 * import com.pulumi.alicloud.clickhouse.DbClusterArgs;
 * import com.pulumi.alicloud.clickhouse.Account;
 * import com.pulumi.alicloud.clickhouse.AccountArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("tf-example");
 *         final var type = config.get("type").orElse("Normal");
 *         final var default = ClickhouseFunctions.getRegions(GetRegionsArgs.builder()
 *             .current(true)
 *             .build());
 * 
 *         var defaultNetwork = new Network("defaultNetwork", NetworkArgs.builder()        
 *             .vpcName(name)
 *             .cidrBlock("10.4.0.0/16")
 *             .build());
 * 
 *         var defaultSwitch = new Switch("defaultSwitch", SwitchArgs.builder()        
 *             .vswitchName(name)
 *             .cidrBlock("10.4.0.0/24")
 *             .vpcId(defaultNetwork.id())
 *             .zoneId(default_.regions()[0].zoneIds()[0].zoneId())
 *             .build());
 * 
 *         var defaultDbCluster = new DbCluster("defaultDbCluster", DbClusterArgs.builder()        
 *             .dbClusterVersion("22.8.5.29")
 *             .category("Basic")
 *             .dbClusterClass("S8")
 *             .dbClusterNetworkType("vpc")
 *             .dbNodeGroupCount("1")
 *             .paymentType("PayAsYouGo")
 *             .dbNodeStorage("500")
 *             .storageType("cloud_essd")
 *             .vswitchId(defaultSwitch.id())
 *             .vpcId(defaultNetwork.id())
 *             .build());
 * 
 *         var defaultAccount = new Account("defaultAccount", AccountArgs.builder()        
 *             .dbClusterId(defaultDbCluster.id())
 *             .accountDescription("tf-example-description")
 *             .accountName("examplename")
 *             .accountPassword("Example1234")
 *             .type(type)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Click House Account can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:clickhouse/account:Account example &lt;db_cluster_id&gt;:&lt;account_name&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:clickhouse/account:Account")
public class Account extends com.pulumi.resources.CustomResource {
    /**
     * In Chinese, English letter. May contain Chinese and English characters, lowercase letters, numbers, and underscores (_), the dash (-). Cannot start with http:// and https:// at the beginning. Length is from 2 to 256 characters.
     * 
     */
    @Export(name="accountDescription", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accountDescription;

    /**
     * @return In Chinese, English letter. May contain Chinese and English characters, lowercase letters, numbers, and underscores (_), the dash (-). Cannot start with http:// and https:// at the beginning. Length is from 2 to 256 characters.
     * 
     */
    public Output<Optional<String>> accountDescription() {
        return Codegen.optional(this.accountDescription);
    }
    /**
     * Account name: lowercase letters, numbers, underscores, lowercase letter; length no more than 16 characters.
     * 
     */
    @Export(name="accountName", refs={String.class}, tree="[0]")
    private Output<String> accountName;

    /**
     * @return Account name: lowercase letters, numbers, underscores, lowercase letter; length no more than 16 characters.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }
    /**
     * The account password: uppercase letters, lowercase letters, lowercase letters, numbers, and special characters (special character! #$%^&amp; author (s):_+-=) in a length of 8-32 bit.
     * 
     */
    @Export(name="accountPassword", refs={String.class}, tree="[0]")
    private Output<String> accountPassword;

    /**
     * @return The account password: uppercase letters, lowercase letters, lowercase letters, numbers, and special characters (special character! #$%^&amp; author (s):_+-=) in a length of 8-32 bit.
     * 
     */
    public Output<String> accountPassword() {
        return this.accountPassword;
    }
    /**
     * The list of databases to which you want to grant permissions. Separate databases with commas (,).
     * 
     */
    @Export(name="allowDatabases", refs={String.class}, tree="[0]")
    private Output<String> allowDatabases;

    /**
     * @return The list of databases to which you want to grant permissions. Separate databases with commas (,).
     * 
     */
    public Output<String> allowDatabases() {
        return this.allowDatabases;
    }
    /**
     * The list of dictionaries to which you want to grant permissions. Separate dictionaries with commas (,).
     * 
     */
    @Export(name="allowDictionaries", refs={String.class}, tree="[0]")
    private Output<String> allowDictionaries;

    /**
     * @return The list of dictionaries to which you want to grant permissions. Separate dictionaries with commas (,).
     * 
     */
    public Output<String> allowDictionaries() {
        return this.allowDictionaries;
    }
    /**
     * The db cluster id.
     * 
     */
    @Export(name="dbClusterId", refs={String.class}, tree="[0]")
    private Output<String> dbClusterId;

    /**
     * @return The db cluster id.
     * 
     */
    public Output<String> dbClusterId() {
        return this.dbClusterId;
    }
    /**
     * Specifies whether to grant DDL permissions to the database account. Valid values: `true` and `false`.
     * 
     */
    @Export(name="ddlAuthority", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> ddlAuthority;

    /**
     * @return Specifies whether to grant DDL permissions to the database account. Valid values: `true` and `false`.
     * 
     */
    public Output<Boolean> ddlAuthority() {
        return this.ddlAuthority;
    }
    /**
     * Specifies whether to grant DML permissions to the database account. Valid values: `all` and `readOnly,modify`.
     * 
     */
    @Export(name="dmlAuthority", refs={String.class}, tree="[0]")
    private Output<String> dmlAuthority;

    /**
     * @return Specifies whether to grant DML permissions to the database account. Valid values: `all` and `readOnly,modify`.
     * 
     */
    public Output<String> dmlAuthority() {
        return this.dmlAuthority;
    }
    /**
     * The status of the resource. Valid Status: `Creating`,`Available`,`Deleting`.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The status of the resource. Valid Status: `Creating`,`Available`,`Deleting`.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The list of all databases. Separate databases with commas (,). Field &#39;total_databases&#39; has been deprecated from provider version 1.223.1.
     * 
     * @deprecated
     * Field &#39;total_databases&#39; has been deprecated from version 1.223.1 and it will be removed in the future version.
     * 
     */
    @Deprecated /* Field 'total_databases' has been deprecated from version 1.223.1 and it will be removed in the future version. */
    @Export(name="totalDatabases", refs={String.class}, tree="[0]")
    private Output<String> totalDatabases;

    /**
     * @return The list of all databases. Separate databases with commas (,). Field &#39;total_databases&#39; has been deprecated from provider version 1.223.1.
     * 
     */
    public Output<String> totalDatabases() {
        return this.totalDatabases;
    }
    /**
     * The list of all dictionaries. Separate dictionaries with commas (,). Field &#39;total_dictionaries&#39; has been deprecated from provider version 1.223.1.
     * 
     * @deprecated
     * Field &#39;total_dictionaries&#39; has been deprecated from version 1.223.1 and it will be removed in the future version.
     * 
     */
    @Deprecated /* Field 'total_dictionaries' has been deprecated from version 1.223.1 and it will be removed in the future version. */
    @Export(name="totalDictionaries", refs={String.class}, tree="[0]")
    private Output<String> totalDictionaries;

    /**
     * @return The list of all dictionaries. Separate dictionaries with commas (,). Field &#39;total_dictionaries&#39; has been deprecated from provider version 1.223.1.
     * 
     */
    public Output<String> totalDictionaries() {
        return this.totalDictionaries;
    }
    /**
     * The type of the database account. Valid values: `Normal` or `Super`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> type;

    /**
     * @return The type of the database account. Valid values: `Normal` or `Super`.
     * 
     */
    public Output<Optional<String>> type() {
        return Codegen.optional(this.type);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Account(String name) {
        this(name, AccountArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Account(String name, AccountArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Account(String name, AccountArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:clickhouse/account:Account", name, args == null ? AccountArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Account(String name, Output<String> id, @Nullable AccountState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:clickhouse/account:Account", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Account get(String name, Output<String> id, @Nullable AccountState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Account(name, id, state, options);
    }
}
