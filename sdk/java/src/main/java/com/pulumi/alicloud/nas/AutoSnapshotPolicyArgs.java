// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutoSnapshotPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoSnapshotPolicyArgs Empty = new AutoSnapshotPolicyArgs();

    /**
     * The name of the automatic snapshot policy. Limits:
     * - The name must be `2` to `128` characters in length,
     * - The name must start with a letter.
     * - The name can contain digits, colons (:), underscores (_), and hyphens (-). The name cannot start with `http://` or `https://`.
     * - The value of this parameter is empty by default.
     * 
     */
    @Import(name="autoSnapshotPolicyName")
    private @Nullable Output<String> autoSnapshotPolicyName;

    /**
     * @return The name of the automatic snapshot policy. Limits:
     * - The name must be `2` to `128` characters in length,
     * - The name must start with a letter.
     * - The name can contain digits, colons (:), underscores (_), and hyphens (-). The name cannot start with `http://` or `https://`.
     * - The value of this parameter is empty by default.
     * 
     */
    public Optional<Output<String>> autoSnapshotPolicyName() {
        return Optional.ofNullable(this.autoSnapshotPolicyName);
    }

    /**
     * The day on which an auto snapshot is created.
     * - A maximum of 7 time points can be selected.
     * - The format is  an JSON array of [&#34;1&#34;, &#34;2&#34;, … &#34;7&#34;]  and the time points are separated by commas (,).
     * 
     */
    @Import(name="repeatWeekdays", required=true)
    private Output<List<String>> repeatWeekdays;

    /**
     * @return The day on which an auto snapshot is created.
     * - A maximum of 7 time points can be selected.
     * - The format is  an JSON array of [&#34;1&#34;, &#34;2&#34;, … &#34;7&#34;]  and the time points are separated by commas (,).
     * 
     */
    public Output<List<String>> repeatWeekdays() {
        return this.repeatWeekdays;
    }

    /**
     * The number of days for which you want to retain auto snapshots. Unit: days. Valid values:
     * - `-1`: the default value. Auto snapshots are permanently retained. After the number of auto snapshots exceeds the upper limit, the earliest auto snapshot is automatically deleted.
     * 
     */
    @Import(name="retentionDays")
    private @Nullable Output<Integer> retentionDays;

    /**
     * @return The number of days for which you want to retain auto snapshots. Unit: days. Valid values:
     * - `-1`: the default value. Auto snapshots are permanently retained. After the number of auto snapshots exceeds the upper limit, the earliest auto snapshot is automatically deleted.
     * 
     */
    public Optional<Output<Integer>> retentionDays() {
        return Optional.ofNullable(this.retentionDays);
    }

    /**
     * The point in time at which an auto snapshot is created.
     * - A maximum of 24 time points can be selected.
     * - The format is  an JSON array of [&#34;0&#34;, &#34;1&#34;, … &#34;23&#34;] and the time points are separated by commas (,).
     * 
     */
    @Import(name="timePoints", required=true)
    private Output<List<String>> timePoints;

    /**
     * @return The point in time at which an auto snapshot is created.
     * - A maximum of 24 time points can be selected.
     * - The format is  an JSON array of [&#34;0&#34;, &#34;1&#34;, … &#34;23&#34;] and the time points are separated by commas (,).
     * 
     */
    public Output<List<String>> timePoints() {
        return this.timePoints;
    }

    private AutoSnapshotPolicyArgs() {}

    private AutoSnapshotPolicyArgs(AutoSnapshotPolicyArgs $) {
        this.autoSnapshotPolicyName = $.autoSnapshotPolicyName;
        this.repeatWeekdays = $.repeatWeekdays;
        this.retentionDays = $.retentionDays;
        this.timePoints = $.timePoints;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoSnapshotPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoSnapshotPolicyArgs $;

        public Builder() {
            $ = new AutoSnapshotPolicyArgs();
        }

        public Builder(AutoSnapshotPolicyArgs defaults) {
            $ = new AutoSnapshotPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoSnapshotPolicyName The name of the automatic snapshot policy. Limits:
         * - The name must be `2` to `128` characters in length,
         * - The name must start with a letter.
         * - The name can contain digits, colons (:), underscores (_), and hyphens (-). The name cannot start with `http://` or `https://`.
         * - The value of this parameter is empty by default.
         * 
         * @return builder
         * 
         */
        public Builder autoSnapshotPolicyName(@Nullable Output<String> autoSnapshotPolicyName) {
            $.autoSnapshotPolicyName = autoSnapshotPolicyName;
            return this;
        }

        /**
         * @param autoSnapshotPolicyName The name of the automatic snapshot policy. Limits:
         * - The name must be `2` to `128` characters in length,
         * - The name must start with a letter.
         * - The name can contain digits, colons (:), underscores (_), and hyphens (-). The name cannot start with `http://` or `https://`.
         * - The value of this parameter is empty by default.
         * 
         * @return builder
         * 
         */
        public Builder autoSnapshotPolicyName(String autoSnapshotPolicyName) {
            return autoSnapshotPolicyName(Output.of(autoSnapshotPolicyName));
        }

        /**
         * @param repeatWeekdays The day on which an auto snapshot is created.
         * - A maximum of 7 time points can be selected.
         * - The format is  an JSON array of [&#34;1&#34;, &#34;2&#34;, … &#34;7&#34;]  and the time points are separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder repeatWeekdays(Output<List<String>> repeatWeekdays) {
            $.repeatWeekdays = repeatWeekdays;
            return this;
        }

        /**
         * @param repeatWeekdays The day on which an auto snapshot is created.
         * - A maximum of 7 time points can be selected.
         * - The format is  an JSON array of [&#34;1&#34;, &#34;2&#34;, … &#34;7&#34;]  and the time points are separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder repeatWeekdays(List<String> repeatWeekdays) {
            return repeatWeekdays(Output.of(repeatWeekdays));
        }

        /**
         * @param repeatWeekdays The day on which an auto snapshot is created.
         * - A maximum of 7 time points can be selected.
         * - The format is  an JSON array of [&#34;1&#34;, &#34;2&#34;, … &#34;7&#34;]  and the time points are separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder repeatWeekdays(String... repeatWeekdays) {
            return repeatWeekdays(List.of(repeatWeekdays));
        }

        /**
         * @param retentionDays The number of days for which you want to retain auto snapshots. Unit: days. Valid values:
         * - `-1`: the default value. Auto snapshots are permanently retained. After the number of auto snapshots exceeds the upper limit, the earliest auto snapshot is automatically deleted.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(@Nullable Output<Integer> retentionDays) {
            $.retentionDays = retentionDays;
            return this;
        }

        /**
         * @param retentionDays The number of days for which you want to retain auto snapshots. Unit: days. Valid values:
         * - `-1`: the default value. Auto snapshots are permanently retained. After the number of auto snapshots exceeds the upper limit, the earliest auto snapshot is automatically deleted.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(Integer retentionDays) {
            return retentionDays(Output.of(retentionDays));
        }

        /**
         * @param timePoints The point in time at which an auto snapshot is created.
         * - A maximum of 24 time points can be selected.
         * - The format is  an JSON array of [&#34;0&#34;, &#34;1&#34;, … &#34;23&#34;] and the time points are separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder timePoints(Output<List<String>> timePoints) {
            $.timePoints = timePoints;
            return this;
        }

        /**
         * @param timePoints The point in time at which an auto snapshot is created.
         * - A maximum of 24 time points can be selected.
         * - The format is  an JSON array of [&#34;0&#34;, &#34;1&#34;, … &#34;23&#34;] and the time points are separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder timePoints(List<String> timePoints) {
            return timePoints(Output.of(timePoints));
        }

        /**
         * @param timePoints The point in time at which an auto snapshot is created.
         * - A maximum of 24 time points can be selected.
         * - The format is  an JSON array of [&#34;0&#34;, &#34;1&#34;, … &#34;23&#34;] and the time points are separated by commas (,).
         * 
         * @return builder
         * 
         */
        public Builder timePoints(String... timePoints) {
            return timePoints(List.of(timePoints));
        }

        public AutoSnapshotPolicyArgs build() {
            if ($.repeatWeekdays == null) {
                throw new MissingRequiredPropertyException("AutoSnapshotPolicyArgs", "repeatWeekdays");
            }
            if ($.timePoints == null) {
                throw new MissingRequiredPropertyException("AutoSnapshotPolicyArgs", "timePoints");
            }
            return $;
        }
    }

}
