// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OssExportSinkConfigurationSink {
    /**
     * @return The OSS bucket.
     * 
     */
    private String bucket;
    /**
     * @return The interval between two data shipping operations. Valid values: 300 to 900. Unit: seconds.
     * 
     */
    private String bufferInterval;
    /**
     * @return The size of the OSS object to which data is shipped. Valid values: 5 to 256. Unit: MB.
     * 
     */
    private String bufferSize;
    /**
     * @return Supports four compression types, such as snappy, gzip, zstd, and none.
     * 
     */
    private String compressionType;
    /**
     * @return The OSS file content details. Note: the value of this parameter should be updated based on the value of the contentType parameter.
     * 
     * If the contentType value is JSON, the parameters of the contentDetail value are as follows:
     * 
     * If the tag is allowed to be posted, the value of the parameter enableTag is true. Example:{&#34;enableTag&#34;: true}
     * 
     * You are not allowed to post tags. The value of the parameter enableTag is false. Example:{&#34;enableTag&#34;: false}
     * 
     * If the contentType value is csv, the parameters of the contentDetail value are as follows:
     * 
     * The parameter columns is the key of the log in the source logstore.
     * 
     * The delimiter parameter, which can be &#34;,&#34;,&#34;|&#34;,&#34;&#34;, or &#34;\t&#34;.
     * 
     * The header parameter determines whether the OSS file retains the header. The optional value is true or false.
     * 
     * The lineFeed parameter. Optional values are &#34;\t&#34;, &#34;\n&#34;, or &#34;&#34;.
     * 
     * The invalid field content parameter is null to specify the delivery content when the field name does not exist.
     * 
     * The escape character parameter &#34;quote&#34;. Optional values are &#34;&#34; &#34;,&#34; &#39;&#34;, or&#34; &#34;.
     * 
     * Example:{&#34;null&#34;: &#34;-&#34;, &#34;header&#34;: false, &#34;lineFeed&#34;: &#34;\n&#34;, &#34;quote&#34;: &#34;&#34;, &#34;delimiter&#34;: &#34;,&#34;, &#34;columns&#34;: [&#34;a&#34;, &#34;B&#34;, &#34;c&#34;, &#34;d&#34;]}
     * 
     * When the contentType value is parquet, the parameters of the contentDetail value are as follows:
     * 
     * The columns parameter is the key of the log in the source Logstore and must carry the data type of the key, for example:{&#34;columns&#34;: [{&#34;name&#34;: &#34;a&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;B&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;c&#34;, &#34;type&#34;: &#34;string&#34;: &#34;string&#34;}]}
     * 
     * When the contentType value is set to orc, the parameters of the contentDetail value are as follows:
     * 
     * The columns parameter is the key of the log in the source Logstore and must carry the data type of the key, for example:{&#34;columns&#34;: [{&#34;name&#34;: &#34;a&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;B&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;c&#34;, &#34;type&#34;: &#34;string&#34;: &#34;string&#34;}]}
     * 
     */
    private String contentDetail;
    /**
     * @return The storage format of the OSS object. Valid values: json, parquet, csv, and orc.
     * 
     */
    private String contentType;
    /**
     * @return The latency of data shipping. The value of this parameter cannot exceed the data retention period of the source Logstore.
     * 
     */
    private @Nullable Integer delaySeconds;
    /**
     * @return The OSS Endpoint can only be an OSS intranet Endpoint and only supports the same region. Example value: https://oss-cn-hangzhou-internal.aliyuncs.com
     * 
     */
    private String endpoint;
    /**
     * @return The directory is dynamically generated according to the time. The default value is% Y/%m/%d/%H/%M. The corresponding generated directory is, for example, 2017/01/23/12/00. Note that the partition format cannot start and end. Example values:%Y/%m/%d
     * 
     */
    private @Nullable String pathFormat;
    /**
     * @return The partition format type. only support time
     * 
     */
    private @Nullable String pathFormatType;
    /**
     * @return The prefix of the OSS object.
     * 
     */
    private @Nullable String prefix;
    /**
     * @return The ARN of the RAM role that is used to write data to OSS. Example value: acs:ram::xxxxxxx
     * 
     */
    private String roleArn;
    /**
     * @return The suffix of the OSS object.
     * 
     */
    private @Nullable String suffix;
    /**
     * @return The time zone. Example value: +0800
     * 
     */
    private String timeZone;

    private OssExportSinkConfigurationSink() {}
    /**
     * @return The OSS bucket.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return The interval between two data shipping operations. Valid values: 300 to 900. Unit: seconds.
     * 
     */
    public String bufferInterval() {
        return this.bufferInterval;
    }
    /**
     * @return The size of the OSS object to which data is shipped. Valid values: 5 to 256. Unit: MB.
     * 
     */
    public String bufferSize() {
        return this.bufferSize;
    }
    /**
     * @return Supports four compression types, such as snappy, gzip, zstd, and none.
     * 
     */
    public String compressionType() {
        return this.compressionType;
    }
    /**
     * @return The OSS file content details. Note: the value of this parameter should be updated based on the value of the contentType parameter.
     * 
     * If the contentType value is JSON, the parameters of the contentDetail value are as follows:
     * 
     * If the tag is allowed to be posted, the value of the parameter enableTag is true. Example:{&#34;enableTag&#34;: true}
     * 
     * You are not allowed to post tags. The value of the parameter enableTag is false. Example:{&#34;enableTag&#34;: false}
     * 
     * If the contentType value is csv, the parameters of the contentDetail value are as follows:
     * 
     * The parameter columns is the key of the log in the source logstore.
     * 
     * The delimiter parameter, which can be &#34;,&#34;,&#34;|&#34;,&#34;&#34;, or &#34;\t&#34;.
     * 
     * The header parameter determines whether the OSS file retains the header. The optional value is true or false.
     * 
     * The lineFeed parameter. Optional values are &#34;\t&#34;, &#34;\n&#34;, or &#34;&#34;.
     * 
     * The invalid field content parameter is null to specify the delivery content when the field name does not exist.
     * 
     * The escape character parameter &#34;quote&#34;. Optional values are &#34;&#34; &#34;,&#34; &#39;&#34;, or&#34; &#34;.
     * 
     * Example:{&#34;null&#34;: &#34;-&#34;, &#34;header&#34;: false, &#34;lineFeed&#34;: &#34;\n&#34;, &#34;quote&#34;: &#34;&#34;, &#34;delimiter&#34;: &#34;,&#34;, &#34;columns&#34;: [&#34;a&#34;, &#34;B&#34;, &#34;c&#34;, &#34;d&#34;]}
     * 
     * When the contentType value is parquet, the parameters of the contentDetail value are as follows:
     * 
     * The columns parameter is the key of the log in the source Logstore and must carry the data type of the key, for example:{&#34;columns&#34;: [{&#34;name&#34;: &#34;a&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;B&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;c&#34;, &#34;type&#34;: &#34;string&#34;: &#34;string&#34;}]}
     * 
     * When the contentType value is set to orc, the parameters of the contentDetail value are as follows:
     * 
     * The columns parameter is the key of the log in the source Logstore and must carry the data type of the key, for example:{&#34;columns&#34;: [{&#34;name&#34;: &#34;a&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;B&#34;, &#34;type&#34;: &#34;string&#34;}, {&#34;name&#34;: &#34;c&#34;, &#34;type&#34;: &#34;string&#34;: &#34;string&#34;}]}
     * 
     */
    public String contentDetail() {
        return this.contentDetail;
    }
    /**
     * @return The storage format of the OSS object. Valid values: json, parquet, csv, and orc.
     * 
     */
    public String contentType() {
        return this.contentType;
    }
    /**
     * @return The latency of data shipping. The value of this parameter cannot exceed the data retention period of the source Logstore.
     * 
     */
    public Optional<Integer> delaySeconds() {
        return Optional.ofNullable(this.delaySeconds);
    }
    /**
     * @return The OSS Endpoint can only be an OSS intranet Endpoint and only supports the same region. Example value: https://oss-cn-hangzhou-internal.aliyuncs.com
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return The directory is dynamically generated according to the time. The default value is% Y/%m/%d/%H/%M. The corresponding generated directory is, for example, 2017/01/23/12/00. Note that the partition format cannot start and end. Example values:%Y/%m/%d
     * 
     */
    public Optional<String> pathFormat() {
        return Optional.ofNullable(this.pathFormat);
    }
    /**
     * @return The partition format type. only support time
     * 
     */
    public Optional<String> pathFormatType() {
        return Optional.ofNullable(this.pathFormatType);
    }
    /**
     * @return The prefix of the OSS object.
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return The ARN of the RAM role that is used to write data to OSS. Example value: acs:ram::xxxxxxx
     * 
     */
    public String roleArn() {
        return this.roleArn;
    }
    /**
     * @return The suffix of the OSS object.
     * 
     */
    public Optional<String> suffix() {
        return Optional.ofNullable(this.suffix);
    }
    /**
     * @return The time zone. Example value: +0800
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OssExportSinkConfigurationSink defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private String bufferInterval;
        private String bufferSize;
        private String compressionType;
        private String contentDetail;
        private String contentType;
        private @Nullable Integer delaySeconds;
        private String endpoint;
        private @Nullable String pathFormat;
        private @Nullable String pathFormatType;
        private @Nullable String prefix;
        private String roleArn;
        private @Nullable String suffix;
        private String timeZone;
        public Builder() {}
        public Builder(OssExportSinkConfigurationSink defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.bufferInterval = defaults.bufferInterval;
    	      this.bufferSize = defaults.bufferSize;
    	      this.compressionType = defaults.compressionType;
    	      this.contentDetail = defaults.contentDetail;
    	      this.contentType = defaults.contentType;
    	      this.delaySeconds = defaults.delaySeconds;
    	      this.endpoint = defaults.endpoint;
    	      this.pathFormat = defaults.pathFormat;
    	      this.pathFormatType = defaults.pathFormatType;
    	      this.prefix = defaults.prefix;
    	      this.roleArn = defaults.roleArn;
    	      this.suffix = defaults.suffix;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("OssExportSinkConfigurationSink", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder bufferInterval(String bufferInterval) {
            if (bufferInterval == null) {
              throw new MissingRequiredPropertyException("OssExportSinkConfigurationSink", "bufferInterval");
            }
            this.bufferInterval = bufferInterval;
            return this;
        }
        @CustomType.Setter
        public Builder bufferSize(String bufferSize) {
            if (bufferSize == null) {
              throw new MissingRequiredPropertyException("OssExportSinkConfigurationSink", "bufferSize");
            }
            this.bufferSize = bufferSize;
            return this;
        }
        @CustomType.Setter
        public Builder compressionType(String compressionType) {
            if (compressionType == null) {
              throw new MissingRequiredPropertyException("OssExportSinkConfigurationSink", "compressionType");
            }
            this.compressionType = compressionType;
            return this;
        }
        @CustomType.Setter
        public Builder contentDetail(String contentDetail) {
            if (contentDetail == null) {
              throw new MissingRequiredPropertyException("OssExportSinkConfigurationSink", "contentDetail");
            }
            this.contentDetail = contentDetail;
            return this;
        }
        @CustomType.Setter
        public Builder contentType(String contentType) {
            if (contentType == null) {
              throw new MissingRequiredPropertyException("OssExportSinkConfigurationSink", "contentType");
            }
            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder delaySeconds(@Nullable Integer delaySeconds) {

            this.delaySeconds = delaySeconds;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("OssExportSinkConfigurationSink", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder pathFormat(@Nullable String pathFormat) {

            this.pathFormat = pathFormat;
            return this;
        }
        @CustomType.Setter
        public Builder pathFormatType(@Nullable String pathFormatType) {

            this.pathFormatType = pathFormatType;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {

            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            if (roleArn == null) {
              throw new MissingRequiredPropertyException("OssExportSinkConfigurationSink", "roleArn");
            }
            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder suffix(@Nullable String suffix) {

            this.suffix = suffix;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("OssExportSinkConfigurationSink", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        public OssExportSinkConfigurationSink build() {
            final var _resultValue = new OssExportSinkConfigurationSink();
            _resultValue.bucket = bucket;
            _resultValue.bufferInterval = bufferInterval;
            _resultValue.bufferSize = bufferSize;
            _resultValue.compressionType = compressionType;
            _resultValue.contentDetail = contentDetail;
            _resultValue.contentType = contentType;
            _resultValue.delaySeconds = delaySeconds;
            _resultValue.endpoint = endpoint;
            _resultValue.pathFormat = pathFormat;
            _resultValue.pathFormatType = pathFormatType;
            _resultValue.prefix = prefix;
            _resultValue.roleArn = roleArn;
            _resultValue.suffix = suffix;
            _resultValue.timeZone = timeZone;
            return _resultValue;
        }
    }
}
