// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.oss.outputs;

import com.pulumi.alicloud.oss.outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorAuth;
import com.pulumi.alicloud.oss.outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorHeaders;
import com.pulumi.alicloud.oss.outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorMultiAlternates;
import com.pulumi.alicloud.oss.outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorReturnHeaders;
import com.pulumi.alicloud.oss.outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorTaggings;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketWebsiteRoutingRulesRoutingRuleRedirect {
    /**
     * @return If this field is set to true, the prefix of Object is replaced with the value specified by ReplaceKeyPrefixWith. If this field is not specified or is blank, the Object prefix is truncated.
     * 
     */
    private @Nullable Boolean enableReplacePrefix;
    /**
     * @return The domain name during the jump. The domain name must comply with the domain name specification.
     * 
     */
    private @Nullable String hostName;
    /**
     * @return The status code returned during the jump. It takes effect only when the RedirectType is set to External or AliCDN.
     * 
     */
    private @Nullable String httpRedirectCode;
    /**
     * @return Image back-to-source allows getting Image information
     * 
     */
    private @Nullable Boolean mirrorAllowGetImageInfo;
    /**
     * @return Whether to allow HeadObject in image back-to-source
     * 
     */
    private @Nullable Boolean mirrorAllowHeadObject;
    /**
     * @return Mirror back-to-source allows support for video frame truncation
     * 
     */
    private @Nullable Boolean mirrorAllowVideoSnapshot;
    /**
     * @return The status code of the mirror back-to-source trigger asynchronous pull mode.
     * 
     */
    private @Nullable Integer mirrorAsyncStatus;
    /**
     * @return Image back Source station authentication information See `mirrorAuth` below.
     * 
     */
    private @Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorAuth mirrorAuth;
    /**
     * @return Whether to check the MD5 of the source body. It takes effect only when the RedirectType is set to Mirror.
     * 
     */
    private @Nullable Boolean mirrorCheckMd5;
    /**
     * @return Mirrored back-to-source high-speed Channel vpregion
     * 
     */
    private @Nullable String mirrorDstRegion;
    /**
     * @return Mirroring back-to-source high-speed Channel standby station VpcId
     * 
     */
    private @Nullable String mirrorDstSlaveVpcId;
    /**
     * @return Mirror back-to-source high-speed Channel VpcId
     * 
     */
    private @Nullable String mirrorDstVpcId;
    /**
     * @return If the result of the image back-to-source acquisition is 3xx, whether to continue to jump to the specified Location to obtain data. It takes effect only when the RedirectType is set to Mirror.
     * 
     */
    private @Nullable Boolean mirrorFollowRedirect;
    /**
     * @return Specifies the Header carried when the image returns to the source. It takes effect only when the RedirectType is set to Mirror. See `mirrorHeaders` below.
     * 
     */
    private @Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorHeaders mirrorHeaders;
    /**
     * @return Whether it is a mirror back-to-source high-speed Channel
     * 
     */
    private @Nullable Boolean mirrorIsExpressTunnel;
    /**
     * @return Mirror back-to-source multi-source station configuration container. **NOTE:**: If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. See `mirrorMultiAlternates` below.
     * 
     */
    private @Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorMultiAlternates mirrorMultiAlternates;
    /**
     * @return Transparent transmission/to source Station
     * 
     */
    private @Nullable Boolean mirrorPassOriginalSlashes;
    /**
     * @return Same as PassQueryString and takes precedence over PassQueryString. It takes effect only when the RedirectType is set to Mirror.
     * 
     */
    private @Nullable Boolean mirrorPassQueryString;
    /**
     * @return Whether mirroring back to source does not save data
     * 
     */
    private @Nullable Boolean mirrorProxyPass;
    /**
     * @return The container that saves the image back to the source and returns the response header rule. **NOTE:**: If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. See `mirrorReturnHeaders` below.
     * 
     */
    private @Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorReturnHeaders mirrorReturnHeaders;
    /**
     * @return Roles used when mirroring back-to-source
     * 
     */
    private @Nullable String mirrorRole;
    /**
     * @return Mirror back-to-source back-to-source OSS automatically saves user metadata
     * 
     */
    private @Nullable Boolean mirrorSaveOssMeta;
    /**
     * @return Transparent transmission of SNI
     * 
     */
    private @Nullable Boolean mirrorSni;
    /**
     * @return It is used to judge the status of active-standby switching. The judgment logic of active-standby switching is that the source station returns an error. If MirrorSwitchAllErrors is true, it is considered a failure except the following status code: 200,206,301,302,303,307,404; If false, only the source Station Returns 5xx or times out is considered a failure.
     * 
     */
    private @Nullable Boolean mirrorSwitchAllErrors;
    /**
     * @return Save the label according to the parameters when saving the file from the mirror back to the source. **NOTE:**: If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. See `mirrorTaggings` below.
     * 
     */
    private @Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorTaggings mirrorTaggings;
    /**
     * @return Mirror back-to-source leased line back-to-source tunnel ID
     * 
     */
    private @Nullable String mirrorTunnelId;
    /**
     * @return The address of the origin of the image. It takes effect only when the RedirectType is set to Mirror. The origin address must start with http:// or https:// and end with a forward slash (/). OSS takes the Object name after the Origin address to form the origin URL.
     * 
     */
    private @Nullable String mirrorUrl;
    /**
     * @return Mirror back-to-source Master-backup back-to-source switching decision URL
     * 
     */
    private @Nullable String mirrorUrlProbe;
    /**
     * @return Mirror back-to-source primary backup back-to-source backup station URL
     * 
     */
    private @Nullable String mirrorUrlSlave;
    /**
     * @return Whether the source station LastModifiedTime is used for the image back-to-source save file.
     * 
     */
    private @Nullable Boolean mirrorUserLastModified;
    /**
     * @return Whether to use role for mirroring back to source
     * 
     */
    private @Nullable Boolean mirrorUsingRole;
    /**
     * @return Whether to carry the request parameters when executing the jump or mirror back-to-source rule. Did the user carry the request parameters when requesting OSS? a = B &amp; c = d, and set PassQueryString to true. If the rule is a 302 jump, this request parameter is added to the Location header of the jump. For example Location:example.com? a = B &amp; c = d, and the jump type is mirrored back-to-origin, this request parameter is also carried in the back-to-origin request initiated. Values: true, false (default)
     * 
     */
    private @Nullable Boolean passQueryString;
    /**
     * @return The protocol at the time of the jump. It takes effect only when the RedirectType is set to External or AliCDN.
     * 
     */
    private @Nullable String protocol;
    /**
     * @return Specifies the type of jump. The value range is as follows: Mirror: Mirror back to the source. External: External redirects, that is, OSS returns a 3xx request to redirect to another address. AliCDN: Alibaba Cloud CDN jump, mainly used for Alibaba Cloud CDN. Unlike External, OSS adds an additional Header. After recognizing this Header, Alibaba Cloud CDN redirects the data to the specified address and returns the obtained data to the user instead of returning the 3xx Redirection request to the user.
     * 
     */
    private @Nullable String redirectType;
    /**
     * @return The prefix of the Object name will be replaced with this value during Redirect. If the prefix is empty, this string is inserted in front of the Object name.
     * 
     */
    private @Nullable String replaceKeyPrefixWith;
    /**
     * @return During redirection, the Object name is replaced with the value specified by ReplaceKeyWith. You can set variables in ReplaceKeyWith. Currently, the supported variable is ${key}, which indicates the name of the Object in the request.
     * 
     */
    private @Nullable String replaceKeyWith;
    /**
     * @return Mirror back-to-source transparent source station response code list
     * 
     */
    private @Nullable String transparentMirrorResponseCodes;

    private BucketWebsiteRoutingRulesRoutingRuleRedirect() {}
    /**
     * @return If this field is set to true, the prefix of Object is replaced with the value specified by ReplaceKeyPrefixWith. If this field is not specified or is blank, the Object prefix is truncated.
     * 
     */
    public Optional<Boolean> enableReplacePrefix() {
        return Optional.ofNullable(this.enableReplacePrefix);
    }
    /**
     * @return The domain name during the jump. The domain name must comply with the domain name specification.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }
    /**
     * @return The status code returned during the jump. It takes effect only when the RedirectType is set to External or AliCDN.
     * 
     */
    public Optional<String> httpRedirectCode() {
        return Optional.ofNullable(this.httpRedirectCode);
    }
    /**
     * @return Image back-to-source allows getting Image information
     * 
     */
    public Optional<Boolean> mirrorAllowGetImageInfo() {
        return Optional.ofNullable(this.mirrorAllowGetImageInfo);
    }
    /**
     * @return Whether to allow HeadObject in image back-to-source
     * 
     */
    public Optional<Boolean> mirrorAllowHeadObject() {
        return Optional.ofNullable(this.mirrorAllowHeadObject);
    }
    /**
     * @return Mirror back-to-source allows support for video frame truncation
     * 
     */
    public Optional<Boolean> mirrorAllowVideoSnapshot() {
        return Optional.ofNullable(this.mirrorAllowVideoSnapshot);
    }
    /**
     * @return The status code of the mirror back-to-source trigger asynchronous pull mode.
     * 
     */
    public Optional<Integer> mirrorAsyncStatus() {
        return Optional.ofNullable(this.mirrorAsyncStatus);
    }
    /**
     * @return Image back Source station authentication information See `mirrorAuth` below.
     * 
     */
    public Optional<BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorAuth> mirrorAuth() {
        return Optional.ofNullable(this.mirrorAuth);
    }
    /**
     * @return Whether to check the MD5 of the source body. It takes effect only when the RedirectType is set to Mirror.
     * 
     */
    public Optional<Boolean> mirrorCheckMd5() {
        return Optional.ofNullable(this.mirrorCheckMd5);
    }
    /**
     * @return Mirrored back-to-source high-speed Channel vpregion
     * 
     */
    public Optional<String> mirrorDstRegion() {
        return Optional.ofNullable(this.mirrorDstRegion);
    }
    /**
     * @return Mirroring back-to-source high-speed Channel standby station VpcId
     * 
     */
    public Optional<String> mirrorDstSlaveVpcId() {
        return Optional.ofNullable(this.mirrorDstSlaveVpcId);
    }
    /**
     * @return Mirror back-to-source high-speed Channel VpcId
     * 
     */
    public Optional<String> mirrorDstVpcId() {
        return Optional.ofNullable(this.mirrorDstVpcId);
    }
    /**
     * @return If the result of the image back-to-source acquisition is 3xx, whether to continue to jump to the specified Location to obtain data. It takes effect only when the RedirectType is set to Mirror.
     * 
     */
    public Optional<Boolean> mirrorFollowRedirect() {
        return Optional.ofNullable(this.mirrorFollowRedirect);
    }
    /**
     * @return Specifies the Header carried when the image returns to the source. It takes effect only when the RedirectType is set to Mirror. See `mirrorHeaders` below.
     * 
     */
    public Optional<BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorHeaders> mirrorHeaders() {
        return Optional.ofNullable(this.mirrorHeaders);
    }
    /**
     * @return Whether it is a mirror back-to-source high-speed Channel
     * 
     */
    public Optional<Boolean> mirrorIsExpressTunnel() {
        return Optional.ofNullable(this.mirrorIsExpressTunnel);
    }
    /**
     * @return Mirror back-to-source multi-source station configuration container. **NOTE:**: If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. See `mirrorMultiAlternates` below.
     * 
     */
    public Optional<BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorMultiAlternates> mirrorMultiAlternates() {
        return Optional.ofNullable(this.mirrorMultiAlternates);
    }
    /**
     * @return Transparent transmission/to source Station
     * 
     */
    public Optional<Boolean> mirrorPassOriginalSlashes() {
        return Optional.ofNullable(this.mirrorPassOriginalSlashes);
    }
    /**
     * @return Same as PassQueryString and takes precedence over PassQueryString. It takes effect only when the RedirectType is set to Mirror.
     * 
     */
    public Optional<Boolean> mirrorPassQueryString() {
        return Optional.ofNullable(this.mirrorPassQueryString);
    }
    /**
     * @return Whether mirroring back to source does not save data
     * 
     */
    public Optional<Boolean> mirrorProxyPass() {
        return Optional.ofNullable(this.mirrorProxyPass);
    }
    /**
     * @return The container that saves the image back to the source and returns the response header rule. **NOTE:**: If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. See `mirrorReturnHeaders` below.
     * 
     */
    public Optional<BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorReturnHeaders> mirrorReturnHeaders() {
        return Optional.ofNullable(this.mirrorReturnHeaders);
    }
    /**
     * @return Roles used when mirroring back-to-source
     * 
     */
    public Optional<String> mirrorRole() {
        return Optional.ofNullable(this.mirrorRole);
    }
    /**
     * @return Mirror back-to-source back-to-source OSS automatically saves user metadata
     * 
     */
    public Optional<Boolean> mirrorSaveOssMeta() {
        return Optional.ofNullable(this.mirrorSaveOssMeta);
    }
    /**
     * @return Transparent transmission of SNI
     * 
     */
    public Optional<Boolean> mirrorSni() {
        return Optional.ofNullable(this.mirrorSni);
    }
    /**
     * @return It is used to judge the status of active-standby switching. The judgment logic of active-standby switching is that the source station returns an error. If MirrorSwitchAllErrors is true, it is considered a failure except the following status code: 200,206,301,302,303,307,404; If false, only the source Station Returns 5xx or times out is considered a failure.
     * 
     */
    public Optional<Boolean> mirrorSwitchAllErrors() {
        return Optional.ofNullable(this.mirrorSwitchAllErrors);
    }
    /**
     * @return Save the label according to the parameters when saving the file from the mirror back to the source. **NOTE:**: If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. See `mirrorTaggings` below.
     * 
     */
    public Optional<BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorTaggings> mirrorTaggings() {
        return Optional.ofNullable(this.mirrorTaggings);
    }
    /**
     * @return Mirror back-to-source leased line back-to-source tunnel ID
     * 
     */
    public Optional<String> mirrorTunnelId() {
        return Optional.ofNullable(this.mirrorTunnelId);
    }
    /**
     * @return The address of the origin of the image. It takes effect only when the RedirectType is set to Mirror. The origin address must start with http:// or https:// and end with a forward slash (/). OSS takes the Object name after the Origin address to form the origin URL.
     * 
     */
    public Optional<String> mirrorUrl() {
        return Optional.ofNullable(this.mirrorUrl);
    }
    /**
     * @return Mirror back-to-source Master-backup back-to-source switching decision URL
     * 
     */
    public Optional<String> mirrorUrlProbe() {
        return Optional.ofNullable(this.mirrorUrlProbe);
    }
    /**
     * @return Mirror back-to-source primary backup back-to-source backup station URL
     * 
     */
    public Optional<String> mirrorUrlSlave() {
        return Optional.ofNullable(this.mirrorUrlSlave);
    }
    /**
     * @return Whether the source station LastModifiedTime is used for the image back-to-source save file.
     * 
     */
    public Optional<Boolean> mirrorUserLastModified() {
        return Optional.ofNullable(this.mirrorUserLastModified);
    }
    /**
     * @return Whether to use role for mirroring back to source
     * 
     */
    public Optional<Boolean> mirrorUsingRole() {
        return Optional.ofNullable(this.mirrorUsingRole);
    }
    /**
     * @return Whether to carry the request parameters when executing the jump or mirror back-to-source rule. Did the user carry the request parameters when requesting OSS? a = B &amp; c = d, and set PassQueryString to true. If the rule is a 302 jump, this request parameter is added to the Location header of the jump. For example Location:example.com? a = B &amp; c = d, and the jump type is mirrored back-to-origin, this request parameter is also carried in the back-to-origin request initiated. Values: true, false (default)
     * 
     */
    public Optional<Boolean> passQueryString() {
        return Optional.ofNullable(this.passQueryString);
    }
    /**
     * @return The protocol at the time of the jump. It takes effect only when the RedirectType is set to External or AliCDN.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return Specifies the type of jump. The value range is as follows: Mirror: Mirror back to the source. External: External redirects, that is, OSS returns a 3xx request to redirect to another address. AliCDN: Alibaba Cloud CDN jump, mainly used for Alibaba Cloud CDN. Unlike External, OSS adds an additional Header. After recognizing this Header, Alibaba Cloud CDN redirects the data to the specified address and returns the obtained data to the user instead of returning the 3xx Redirection request to the user.
     * 
     */
    public Optional<String> redirectType() {
        return Optional.ofNullable(this.redirectType);
    }
    /**
     * @return The prefix of the Object name will be replaced with this value during Redirect. If the prefix is empty, this string is inserted in front of the Object name.
     * 
     */
    public Optional<String> replaceKeyPrefixWith() {
        return Optional.ofNullable(this.replaceKeyPrefixWith);
    }
    /**
     * @return During redirection, the Object name is replaced with the value specified by ReplaceKeyWith. You can set variables in ReplaceKeyWith. Currently, the supported variable is ${key}, which indicates the name of the Object in the request.
     * 
     */
    public Optional<String> replaceKeyWith() {
        return Optional.ofNullable(this.replaceKeyWith);
    }
    /**
     * @return Mirror back-to-source transparent source station response code list
     * 
     */
    public Optional<String> transparentMirrorResponseCodes() {
        return Optional.ofNullable(this.transparentMirrorResponseCodes);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketWebsiteRoutingRulesRoutingRuleRedirect defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enableReplacePrefix;
        private @Nullable String hostName;
        private @Nullable String httpRedirectCode;
        private @Nullable Boolean mirrorAllowGetImageInfo;
        private @Nullable Boolean mirrorAllowHeadObject;
        private @Nullable Boolean mirrorAllowVideoSnapshot;
        private @Nullable Integer mirrorAsyncStatus;
        private @Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorAuth mirrorAuth;
        private @Nullable Boolean mirrorCheckMd5;
        private @Nullable String mirrorDstRegion;
        private @Nullable String mirrorDstSlaveVpcId;
        private @Nullable String mirrorDstVpcId;
        private @Nullable Boolean mirrorFollowRedirect;
        private @Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorHeaders mirrorHeaders;
        private @Nullable Boolean mirrorIsExpressTunnel;
        private @Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorMultiAlternates mirrorMultiAlternates;
        private @Nullable Boolean mirrorPassOriginalSlashes;
        private @Nullable Boolean mirrorPassQueryString;
        private @Nullable Boolean mirrorProxyPass;
        private @Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorReturnHeaders mirrorReturnHeaders;
        private @Nullable String mirrorRole;
        private @Nullable Boolean mirrorSaveOssMeta;
        private @Nullable Boolean mirrorSni;
        private @Nullable Boolean mirrorSwitchAllErrors;
        private @Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorTaggings mirrorTaggings;
        private @Nullable String mirrorTunnelId;
        private @Nullable String mirrorUrl;
        private @Nullable String mirrorUrlProbe;
        private @Nullable String mirrorUrlSlave;
        private @Nullable Boolean mirrorUserLastModified;
        private @Nullable Boolean mirrorUsingRole;
        private @Nullable Boolean passQueryString;
        private @Nullable String protocol;
        private @Nullable String redirectType;
        private @Nullable String replaceKeyPrefixWith;
        private @Nullable String replaceKeyWith;
        private @Nullable String transparentMirrorResponseCodes;
        public Builder() {}
        public Builder(BucketWebsiteRoutingRulesRoutingRuleRedirect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableReplacePrefix = defaults.enableReplacePrefix;
    	      this.hostName = defaults.hostName;
    	      this.httpRedirectCode = defaults.httpRedirectCode;
    	      this.mirrorAllowGetImageInfo = defaults.mirrorAllowGetImageInfo;
    	      this.mirrorAllowHeadObject = defaults.mirrorAllowHeadObject;
    	      this.mirrorAllowVideoSnapshot = defaults.mirrorAllowVideoSnapshot;
    	      this.mirrorAsyncStatus = defaults.mirrorAsyncStatus;
    	      this.mirrorAuth = defaults.mirrorAuth;
    	      this.mirrorCheckMd5 = defaults.mirrorCheckMd5;
    	      this.mirrorDstRegion = defaults.mirrorDstRegion;
    	      this.mirrorDstSlaveVpcId = defaults.mirrorDstSlaveVpcId;
    	      this.mirrorDstVpcId = defaults.mirrorDstVpcId;
    	      this.mirrorFollowRedirect = defaults.mirrorFollowRedirect;
    	      this.mirrorHeaders = defaults.mirrorHeaders;
    	      this.mirrorIsExpressTunnel = defaults.mirrorIsExpressTunnel;
    	      this.mirrorMultiAlternates = defaults.mirrorMultiAlternates;
    	      this.mirrorPassOriginalSlashes = defaults.mirrorPassOriginalSlashes;
    	      this.mirrorPassQueryString = defaults.mirrorPassQueryString;
    	      this.mirrorProxyPass = defaults.mirrorProxyPass;
    	      this.mirrorReturnHeaders = defaults.mirrorReturnHeaders;
    	      this.mirrorRole = defaults.mirrorRole;
    	      this.mirrorSaveOssMeta = defaults.mirrorSaveOssMeta;
    	      this.mirrorSni = defaults.mirrorSni;
    	      this.mirrorSwitchAllErrors = defaults.mirrorSwitchAllErrors;
    	      this.mirrorTaggings = defaults.mirrorTaggings;
    	      this.mirrorTunnelId = defaults.mirrorTunnelId;
    	      this.mirrorUrl = defaults.mirrorUrl;
    	      this.mirrorUrlProbe = defaults.mirrorUrlProbe;
    	      this.mirrorUrlSlave = defaults.mirrorUrlSlave;
    	      this.mirrorUserLastModified = defaults.mirrorUserLastModified;
    	      this.mirrorUsingRole = defaults.mirrorUsingRole;
    	      this.passQueryString = defaults.passQueryString;
    	      this.protocol = defaults.protocol;
    	      this.redirectType = defaults.redirectType;
    	      this.replaceKeyPrefixWith = defaults.replaceKeyPrefixWith;
    	      this.replaceKeyWith = defaults.replaceKeyWith;
    	      this.transparentMirrorResponseCodes = defaults.transparentMirrorResponseCodes;
        }

        @CustomType.Setter
        public Builder enableReplacePrefix(@Nullable Boolean enableReplacePrefix) {

            this.enableReplacePrefix = enableReplacePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(@Nullable String hostName) {

            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder httpRedirectCode(@Nullable String httpRedirectCode) {

            this.httpRedirectCode = httpRedirectCode;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorAllowGetImageInfo(@Nullable Boolean mirrorAllowGetImageInfo) {

            this.mirrorAllowGetImageInfo = mirrorAllowGetImageInfo;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorAllowHeadObject(@Nullable Boolean mirrorAllowHeadObject) {

            this.mirrorAllowHeadObject = mirrorAllowHeadObject;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorAllowVideoSnapshot(@Nullable Boolean mirrorAllowVideoSnapshot) {

            this.mirrorAllowVideoSnapshot = mirrorAllowVideoSnapshot;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorAsyncStatus(@Nullable Integer mirrorAsyncStatus) {

            this.mirrorAsyncStatus = mirrorAsyncStatus;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorAuth(@Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorAuth mirrorAuth) {

            this.mirrorAuth = mirrorAuth;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorCheckMd5(@Nullable Boolean mirrorCheckMd5) {

            this.mirrorCheckMd5 = mirrorCheckMd5;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorDstRegion(@Nullable String mirrorDstRegion) {

            this.mirrorDstRegion = mirrorDstRegion;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorDstSlaveVpcId(@Nullable String mirrorDstSlaveVpcId) {

            this.mirrorDstSlaveVpcId = mirrorDstSlaveVpcId;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorDstVpcId(@Nullable String mirrorDstVpcId) {

            this.mirrorDstVpcId = mirrorDstVpcId;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorFollowRedirect(@Nullable Boolean mirrorFollowRedirect) {

            this.mirrorFollowRedirect = mirrorFollowRedirect;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorHeaders(@Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorHeaders mirrorHeaders) {

            this.mirrorHeaders = mirrorHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorIsExpressTunnel(@Nullable Boolean mirrorIsExpressTunnel) {

            this.mirrorIsExpressTunnel = mirrorIsExpressTunnel;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorMultiAlternates(@Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorMultiAlternates mirrorMultiAlternates) {

            this.mirrorMultiAlternates = mirrorMultiAlternates;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorPassOriginalSlashes(@Nullable Boolean mirrorPassOriginalSlashes) {

            this.mirrorPassOriginalSlashes = mirrorPassOriginalSlashes;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorPassQueryString(@Nullable Boolean mirrorPassQueryString) {

            this.mirrorPassQueryString = mirrorPassQueryString;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorProxyPass(@Nullable Boolean mirrorProxyPass) {

            this.mirrorProxyPass = mirrorProxyPass;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorReturnHeaders(@Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorReturnHeaders mirrorReturnHeaders) {

            this.mirrorReturnHeaders = mirrorReturnHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorRole(@Nullable String mirrorRole) {

            this.mirrorRole = mirrorRole;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorSaveOssMeta(@Nullable Boolean mirrorSaveOssMeta) {

            this.mirrorSaveOssMeta = mirrorSaveOssMeta;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorSni(@Nullable Boolean mirrorSni) {

            this.mirrorSni = mirrorSni;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorSwitchAllErrors(@Nullable Boolean mirrorSwitchAllErrors) {

            this.mirrorSwitchAllErrors = mirrorSwitchAllErrors;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorTaggings(@Nullable BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorTaggings mirrorTaggings) {

            this.mirrorTaggings = mirrorTaggings;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorTunnelId(@Nullable String mirrorTunnelId) {

            this.mirrorTunnelId = mirrorTunnelId;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorUrl(@Nullable String mirrorUrl) {

            this.mirrorUrl = mirrorUrl;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorUrlProbe(@Nullable String mirrorUrlProbe) {

            this.mirrorUrlProbe = mirrorUrlProbe;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorUrlSlave(@Nullable String mirrorUrlSlave) {

            this.mirrorUrlSlave = mirrorUrlSlave;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorUserLastModified(@Nullable Boolean mirrorUserLastModified) {

            this.mirrorUserLastModified = mirrorUserLastModified;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorUsingRole(@Nullable Boolean mirrorUsingRole) {

            this.mirrorUsingRole = mirrorUsingRole;
            return this;
        }
        @CustomType.Setter
        public Builder passQueryString(@Nullable Boolean passQueryString) {

            this.passQueryString = passQueryString;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {

            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder redirectType(@Nullable String redirectType) {

            this.redirectType = redirectType;
            return this;
        }
        @CustomType.Setter
        public Builder replaceKeyPrefixWith(@Nullable String replaceKeyPrefixWith) {

            this.replaceKeyPrefixWith = replaceKeyPrefixWith;
            return this;
        }
        @CustomType.Setter
        public Builder replaceKeyWith(@Nullable String replaceKeyWith) {

            this.replaceKeyWith = replaceKeyWith;
            return this;
        }
        @CustomType.Setter
        public Builder transparentMirrorResponseCodes(@Nullable String transparentMirrorResponseCodes) {

            this.transparentMirrorResponseCodes = transparentMirrorResponseCodes;
            return this;
        }
        public BucketWebsiteRoutingRulesRoutingRuleRedirect build() {
            final var _resultValue = new BucketWebsiteRoutingRulesRoutingRuleRedirect();
            _resultValue.enableReplacePrefix = enableReplacePrefix;
            _resultValue.hostName = hostName;
            _resultValue.httpRedirectCode = httpRedirectCode;
            _resultValue.mirrorAllowGetImageInfo = mirrorAllowGetImageInfo;
            _resultValue.mirrorAllowHeadObject = mirrorAllowHeadObject;
            _resultValue.mirrorAllowVideoSnapshot = mirrorAllowVideoSnapshot;
            _resultValue.mirrorAsyncStatus = mirrorAsyncStatus;
            _resultValue.mirrorAuth = mirrorAuth;
            _resultValue.mirrorCheckMd5 = mirrorCheckMd5;
            _resultValue.mirrorDstRegion = mirrorDstRegion;
            _resultValue.mirrorDstSlaveVpcId = mirrorDstSlaveVpcId;
            _resultValue.mirrorDstVpcId = mirrorDstVpcId;
            _resultValue.mirrorFollowRedirect = mirrorFollowRedirect;
            _resultValue.mirrorHeaders = mirrorHeaders;
            _resultValue.mirrorIsExpressTunnel = mirrorIsExpressTunnel;
            _resultValue.mirrorMultiAlternates = mirrorMultiAlternates;
            _resultValue.mirrorPassOriginalSlashes = mirrorPassOriginalSlashes;
            _resultValue.mirrorPassQueryString = mirrorPassQueryString;
            _resultValue.mirrorProxyPass = mirrorProxyPass;
            _resultValue.mirrorReturnHeaders = mirrorReturnHeaders;
            _resultValue.mirrorRole = mirrorRole;
            _resultValue.mirrorSaveOssMeta = mirrorSaveOssMeta;
            _resultValue.mirrorSni = mirrorSni;
            _resultValue.mirrorSwitchAllErrors = mirrorSwitchAllErrors;
            _resultValue.mirrorTaggings = mirrorTaggings;
            _resultValue.mirrorTunnelId = mirrorTunnelId;
            _resultValue.mirrorUrl = mirrorUrl;
            _resultValue.mirrorUrlProbe = mirrorUrlProbe;
            _resultValue.mirrorUrlSlave = mirrorUrlSlave;
            _resultValue.mirrorUserLastModified = mirrorUserLastModified;
            _resultValue.mirrorUsingRole = mirrorUsingRole;
            _resultValue.passQueryString = passQueryString;
            _resultValue.protocol = protocol;
            _resultValue.redirectType = redirectType;
            _resultValue.replaceKeyPrefixWith = replaceKeyPrefixWith;
            _resultValue.replaceKeyWith = replaceKeyWith;
            _resultValue.transparentMirrorResponseCodes = transparentMirrorResponseCodes;
            return _resultValue;
        }
    }
}
