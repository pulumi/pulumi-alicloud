// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ddos.outputs;

import com.pulumi.alicloud.ddos.outputs.BgpPolicyContentFingerPrintRuleList;
import com.pulumi.alicloud.ddos.outputs.BgpPolicyContentLayer4RuleList;
import com.pulumi.alicloud.ddos.outputs.BgpPolicyContentPortRuleList;
import com.pulumi.alicloud.ddos.outputs.BgpPolicyContentSourceBlockList;
import com.pulumi.alicloud.ddos.outputs.BgpPolicyContentSourceLimit;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BgpPolicyContent {
    /**
     * @return Blacklist and whitelist timeout.
     * 
     */
    private @Nullable Integer blackIpListExpireAt;
    /**
     * @return Whether to enable L4 protection.
     * 
     */
    private @Nullable Boolean enableDefense;
    /**
     * @return Switch to discard ICMP.
     * 
     */
    private @Nullable Boolean enableDropIcmp;
    /**
     * @return Whether the intelligent switch is on.
     * 
     */
    private @Nullable Boolean enableIntelligence;
    /**
     * @return Fingerprint Rules. See `fingerPrintRuleList` below.
     * 
     */
    private @Nullable List<BgpPolicyContentFingerPrintRuleList> fingerPrintRuleLists;
    /**
     * @return Smart mode. Valid values: weak, hard, and default.
     * 
     */
    private @Nullable String intelligenceLevel;
    /**
     * @return L4 protection rules. See `layer4RuleList` below.
     * 
     */
    private @Nullable List<BgpPolicyContentLayer4RuleList> layer4RuleLists;
    /**
     * @return Port Rule List. See `portRuleList` below.
     * 
     */
    private @Nullable List<BgpPolicyContentPortRuleList> portRuleLists;
    /**
     * @return Reflective port filtering.
     * 
     */
    private @Nullable List<Integer> reflectBlockUdpPortLists;
    /**
     * @return List of Regional Banned Countries.
     * 
     */
    private @Nullable List<Integer> regionBlockCountryLists;
    /**
     * @return List of Prohibited Provinces by Region.
     * 
     */
    private @Nullable List<Integer> regionBlockProvinceLists;
    /**
     * @return Source pull Black. See `sourceBlockList` below.
     * 
     */
    private @Nullable List<BgpPolicyContentSourceBlockList> sourceBlockLists;
    /**
     * @return Do not fill in when the source speed limit is deleted. See `sourceLimit` below.
     * 
     */
    private @Nullable BgpPolicyContentSourceLimit sourceLimit;
    /**
     * @return Add white high protection back to source network segment switch.
     * 
     */
    private @Nullable Boolean whitenGfbrNets;

    private BgpPolicyContent() {}
    /**
     * @return Blacklist and whitelist timeout.
     * 
     */
    public Optional<Integer> blackIpListExpireAt() {
        return Optional.ofNullable(this.blackIpListExpireAt);
    }
    /**
     * @return Whether to enable L4 protection.
     * 
     */
    public Optional<Boolean> enableDefense() {
        return Optional.ofNullable(this.enableDefense);
    }
    /**
     * @return Switch to discard ICMP.
     * 
     */
    public Optional<Boolean> enableDropIcmp() {
        return Optional.ofNullable(this.enableDropIcmp);
    }
    /**
     * @return Whether the intelligent switch is on.
     * 
     */
    public Optional<Boolean> enableIntelligence() {
        return Optional.ofNullable(this.enableIntelligence);
    }
    /**
     * @return Fingerprint Rules. See `fingerPrintRuleList` below.
     * 
     */
    public List<BgpPolicyContentFingerPrintRuleList> fingerPrintRuleLists() {
        return this.fingerPrintRuleLists == null ? List.of() : this.fingerPrintRuleLists;
    }
    /**
     * @return Smart mode. Valid values: weak, hard, and default.
     * 
     */
    public Optional<String> intelligenceLevel() {
        return Optional.ofNullable(this.intelligenceLevel);
    }
    /**
     * @return L4 protection rules. See `layer4RuleList` below.
     * 
     */
    public List<BgpPolicyContentLayer4RuleList> layer4RuleLists() {
        return this.layer4RuleLists == null ? List.of() : this.layer4RuleLists;
    }
    /**
     * @return Port Rule List. See `portRuleList` below.
     * 
     */
    public List<BgpPolicyContentPortRuleList> portRuleLists() {
        return this.portRuleLists == null ? List.of() : this.portRuleLists;
    }
    /**
     * @return Reflective port filtering.
     * 
     */
    public List<Integer> reflectBlockUdpPortLists() {
        return this.reflectBlockUdpPortLists == null ? List.of() : this.reflectBlockUdpPortLists;
    }
    /**
     * @return List of Regional Banned Countries.
     * 
     */
    public List<Integer> regionBlockCountryLists() {
        return this.regionBlockCountryLists == null ? List.of() : this.regionBlockCountryLists;
    }
    /**
     * @return List of Prohibited Provinces by Region.
     * 
     */
    public List<Integer> regionBlockProvinceLists() {
        return this.regionBlockProvinceLists == null ? List.of() : this.regionBlockProvinceLists;
    }
    /**
     * @return Source pull Black. See `sourceBlockList` below.
     * 
     */
    public List<BgpPolicyContentSourceBlockList> sourceBlockLists() {
        return this.sourceBlockLists == null ? List.of() : this.sourceBlockLists;
    }
    /**
     * @return Do not fill in when the source speed limit is deleted. See `sourceLimit` below.
     * 
     */
    public Optional<BgpPolicyContentSourceLimit> sourceLimit() {
        return Optional.ofNullable(this.sourceLimit);
    }
    /**
     * @return Add white high protection back to source network segment switch.
     * 
     */
    public Optional<Boolean> whitenGfbrNets() {
        return Optional.ofNullable(this.whitenGfbrNets);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BgpPolicyContent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer blackIpListExpireAt;
        private @Nullable Boolean enableDefense;
        private @Nullable Boolean enableDropIcmp;
        private @Nullable Boolean enableIntelligence;
        private @Nullable List<BgpPolicyContentFingerPrintRuleList> fingerPrintRuleLists;
        private @Nullable String intelligenceLevel;
        private @Nullable List<BgpPolicyContentLayer4RuleList> layer4RuleLists;
        private @Nullable List<BgpPolicyContentPortRuleList> portRuleLists;
        private @Nullable List<Integer> reflectBlockUdpPortLists;
        private @Nullable List<Integer> regionBlockCountryLists;
        private @Nullable List<Integer> regionBlockProvinceLists;
        private @Nullable List<BgpPolicyContentSourceBlockList> sourceBlockLists;
        private @Nullable BgpPolicyContentSourceLimit sourceLimit;
        private @Nullable Boolean whitenGfbrNets;
        public Builder() {}
        public Builder(BgpPolicyContent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blackIpListExpireAt = defaults.blackIpListExpireAt;
    	      this.enableDefense = defaults.enableDefense;
    	      this.enableDropIcmp = defaults.enableDropIcmp;
    	      this.enableIntelligence = defaults.enableIntelligence;
    	      this.fingerPrintRuleLists = defaults.fingerPrintRuleLists;
    	      this.intelligenceLevel = defaults.intelligenceLevel;
    	      this.layer4RuleLists = defaults.layer4RuleLists;
    	      this.portRuleLists = defaults.portRuleLists;
    	      this.reflectBlockUdpPortLists = defaults.reflectBlockUdpPortLists;
    	      this.regionBlockCountryLists = defaults.regionBlockCountryLists;
    	      this.regionBlockProvinceLists = defaults.regionBlockProvinceLists;
    	      this.sourceBlockLists = defaults.sourceBlockLists;
    	      this.sourceLimit = defaults.sourceLimit;
    	      this.whitenGfbrNets = defaults.whitenGfbrNets;
        }

        @CustomType.Setter
        public Builder blackIpListExpireAt(@Nullable Integer blackIpListExpireAt) {

            this.blackIpListExpireAt = blackIpListExpireAt;
            return this;
        }
        @CustomType.Setter
        public Builder enableDefense(@Nullable Boolean enableDefense) {

            this.enableDefense = enableDefense;
            return this;
        }
        @CustomType.Setter
        public Builder enableDropIcmp(@Nullable Boolean enableDropIcmp) {

            this.enableDropIcmp = enableDropIcmp;
            return this;
        }
        @CustomType.Setter
        public Builder enableIntelligence(@Nullable Boolean enableIntelligence) {

            this.enableIntelligence = enableIntelligence;
            return this;
        }
        @CustomType.Setter
        public Builder fingerPrintRuleLists(@Nullable List<BgpPolicyContentFingerPrintRuleList> fingerPrintRuleLists) {

            this.fingerPrintRuleLists = fingerPrintRuleLists;
            return this;
        }
        public Builder fingerPrintRuleLists(BgpPolicyContentFingerPrintRuleList... fingerPrintRuleLists) {
            return fingerPrintRuleLists(List.of(fingerPrintRuleLists));
        }
        @CustomType.Setter
        public Builder intelligenceLevel(@Nullable String intelligenceLevel) {

            this.intelligenceLevel = intelligenceLevel;
            return this;
        }
        @CustomType.Setter
        public Builder layer4RuleLists(@Nullable List<BgpPolicyContentLayer4RuleList> layer4RuleLists) {

            this.layer4RuleLists = layer4RuleLists;
            return this;
        }
        public Builder layer4RuleLists(BgpPolicyContentLayer4RuleList... layer4RuleLists) {
            return layer4RuleLists(List.of(layer4RuleLists));
        }
        @CustomType.Setter
        public Builder portRuleLists(@Nullable List<BgpPolicyContentPortRuleList> portRuleLists) {

            this.portRuleLists = portRuleLists;
            return this;
        }
        public Builder portRuleLists(BgpPolicyContentPortRuleList... portRuleLists) {
            return portRuleLists(List.of(portRuleLists));
        }
        @CustomType.Setter
        public Builder reflectBlockUdpPortLists(@Nullable List<Integer> reflectBlockUdpPortLists) {

            this.reflectBlockUdpPortLists = reflectBlockUdpPortLists;
            return this;
        }
        public Builder reflectBlockUdpPortLists(Integer... reflectBlockUdpPortLists) {
            return reflectBlockUdpPortLists(List.of(reflectBlockUdpPortLists));
        }
        @CustomType.Setter
        public Builder regionBlockCountryLists(@Nullable List<Integer> regionBlockCountryLists) {

            this.regionBlockCountryLists = regionBlockCountryLists;
            return this;
        }
        public Builder regionBlockCountryLists(Integer... regionBlockCountryLists) {
            return regionBlockCountryLists(List.of(regionBlockCountryLists));
        }
        @CustomType.Setter
        public Builder regionBlockProvinceLists(@Nullable List<Integer> regionBlockProvinceLists) {

            this.regionBlockProvinceLists = regionBlockProvinceLists;
            return this;
        }
        public Builder regionBlockProvinceLists(Integer... regionBlockProvinceLists) {
            return regionBlockProvinceLists(List.of(regionBlockProvinceLists));
        }
        @CustomType.Setter
        public Builder sourceBlockLists(@Nullable List<BgpPolicyContentSourceBlockList> sourceBlockLists) {

            this.sourceBlockLists = sourceBlockLists;
            return this;
        }
        public Builder sourceBlockLists(BgpPolicyContentSourceBlockList... sourceBlockLists) {
            return sourceBlockLists(List.of(sourceBlockLists));
        }
        @CustomType.Setter
        public Builder sourceLimit(@Nullable BgpPolicyContentSourceLimit sourceLimit) {

            this.sourceLimit = sourceLimit;
            return this;
        }
        @CustomType.Setter
        public Builder whitenGfbrNets(@Nullable Boolean whitenGfbrNets) {

            this.whitenGfbrNets = whitenGfbrNets;
            return this;
        }
        public BgpPolicyContent build() {
            final var _resultValue = new BgpPolicyContent();
            _resultValue.blackIpListExpireAt = blackIpListExpireAt;
            _resultValue.enableDefense = enableDefense;
            _resultValue.enableDropIcmp = enableDropIcmp;
            _resultValue.enableIntelligence = enableIntelligence;
            _resultValue.fingerPrintRuleLists = fingerPrintRuleLists;
            _resultValue.intelligenceLevel = intelligenceLevel;
            _resultValue.layer4RuleLists = layer4RuleLists;
            _resultValue.portRuleLists = portRuleLists;
            _resultValue.reflectBlockUdpPortLists = reflectBlockUdpPortLists;
            _resultValue.regionBlockCountryLists = regionBlockCountryLists;
            _resultValue.regionBlockProvinceLists = regionBlockProvinceLists;
            _resultValue.sourceBlockLists = sourceBlockLists;
            _resultValue.sourceLimit = sourceLimit;
            _resultValue.whitenGfbrNets = whitenGfbrNets;
            return _resultValue;
        }
    }
}
