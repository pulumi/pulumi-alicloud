// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class IpsecServerIkeConfig {
    /**
     * @return The authentication algorithm that is used in Phase 1 negotiations. Default value: `sha1`.
     * 
     */
    private @Nullable String ikeAuthAlg;
    /**
     * @return The encryption algorithm that is used in Phase 1 negotiations. Default value: `aes`.
     * 
     */
    private @Nullable String ikeEncAlg;
    /**
     * @return IkeLifetime: the SA lifetime determined by Phase 1 negotiations. Valid values: `0` to `86400`. Default value: `86400`. Unit: `seconds`.
     * 
     */
    private @Nullable Integer ikeLifetime;
    /**
     * @return The IKE negotiation mode. Default value: `main`.
     * 
     */
    private @Nullable String ikeMode;
    /**
     * @return The Diffie-Hellman key exchange algorithm that is used in Phase 1 negotiations. Default value: `group2`.
     * 
     */
    private @Nullable String ikePfs;
    /**
     * @return The IKE version. Valid values: `ikev1` and `ikev2`. Default value: `ikev2`.
     * 
     */
    private @Nullable String ikeVersion;
    /**
     * @return The identifier of the IPsec server. The value can be a fully qualified domain name (FQDN) or an IP address. The default value is the public IP address of the VPN gateway.
     * 
     */
    private @Nullable String localId;
    /**
     * @return The identifier of the customer gateway. The value can be an FQDN or an IP address. By default, this parameter is not specified.
     * 
     */
    private @Nullable String remoteId;

    private IpsecServerIkeConfig() {}
    /**
     * @return The authentication algorithm that is used in Phase 1 negotiations. Default value: `sha1`.
     * 
     */
    public Optional<String> ikeAuthAlg() {
        return Optional.ofNullable(this.ikeAuthAlg);
    }
    /**
     * @return The encryption algorithm that is used in Phase 1 negotiations. Default value: `aes`.
     * 
     */
    public Optional<String> ikeEncAlg() {
        return Optional.ofNullable(this.ikeEncAlg);
    }
    /**
     * @return IkeLifetime: the SA lifetime determined by Phase 1 negotiations. Valid values: `0` to `86400`. Default value: `86400`. Unit: `seconds`.
     * 
     */
    public Optional<Integer> ikeLifetime() {
        return Optional.ofNullable(this.ikeLifetime);
    }
    /**
     * @return The IKE negotiation mode. Default value: `main`.
     * 
     */
    public Optional<String> ikeMode() {
        return Optional.ofNullable(this.ikeMode);
    }
    /**
     * @return The Diffie-Hellman key exchange algorithm that is used in Phase 1 negotiations. Default value: `group2`.
     * 
     */
    public Optional<String> ikePfs() {
        return Optional.ofNullable(this.ikePfs);
    }
    /**
     * @return The IKE version. Valid values: `ikev1` and `ikev2`. Default value: `ikev2`.
     * 
     */
    public Optional<String> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }
    /**
     * @return The identifier of the IPsec server. The value can be a fully qualified domain name (FQDN) or an IP address. The default value is the public IP address of the VPN gateway.
     * 
     */
    public Optional<String> localId() {
        return Optional.ofNullable(this.localId);
    }
    /**
     * @return The identifier of the customer gateway. The value can be an FQDN or an IP address. By default, this parameter is not specified.
     * 
     */
    public Optional<String> remoteId() {
        return Optional.ofNullable(this.remoteId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IpsecServerIkeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String ikeAuthAlg;
        private @Nullable String ikeEncAlg;
        private @Nullable Integer ikeLifetime;
        private @Nullable String ikeMode;
        private @Nullable String ikePfs;
        private @Nullable String ikeVersion;
        private @Nullable String localId;
        private @Nullable String remoteId;
        public Builder() {}
        public Builder(IpsecServerIkeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ikeAuthAlg = defaults.ikeAuthAlg;
    	      this.ikeEncAlg = defaults.ikeEncAlg;
    	      this.ikeLifetime = defaults.ikeLifetime;
    	      this.ikeMode = defaults.ikeMode;
    	      this.ikePfs = defaults.ikePfs;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.localId = defaults.localId;
    	      this.remoteId = defaults.remoteId;
        }

        @CustomType.Setter
        public Builder ikeAuthAlg(@Nullable String ikeAuthAlg) {
            this.ikeAuthAlg = ikeAuthAlg;
            return this;
        }
        @CustomType.Setter
        public Builder ikeEncAlg(@Nullable String ikeEncAlg) {
            this.ikeEncAlg = ikeEncAlg;
            return this;
        }
        @CustomType.Setter
        public Builder ikeLifetime(@Nullable Integer ikeLifetime) {
            this.ikeLifetime = ikeLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder ikeMode(@Nullable String ikeMode) {
            this.ikeMode = ikeMode;
            return this;
        }
        @CustomType.Setter
        public Builder ikePfs(@Nullable String ikePfs) {
            this.ikePfs = ikePfs;
            return this;
        }
        @CustomType.Setter
        public Builder ikeVersion(@Nullable String ikeVersion) {
            this.ikeVersion = ikeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder localId(@Nullable String localId) {
            this.localId = localId;
            return this;
        }
        @CustomType.Setter
        public Builder remoteId(@Nullable String remoteId) {
            this.remoteId = remoteId;
            return this;
        }
        public IpsecServerIkeConfig build() {
            final var o = new IpsecServerIkeConfig();
            o.ikeAuthAlg = ikeAuthAlg;
            o.ikeEncAlg = ikeEncAlg;
            o.ikeLifetime = ikeLifetime;
            o.ikeMode = ikeMode;
            o.ikePfs = ikePfs;
            o.ikeVersion = ikeVersion;
            o.localId = localId;
            o.remoteId = remoteId;
            return o;
        }
    }
}
