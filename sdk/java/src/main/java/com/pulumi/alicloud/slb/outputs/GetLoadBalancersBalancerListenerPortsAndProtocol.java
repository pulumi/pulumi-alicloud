// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.slb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLoadBalancersBalancerListenerPortsAndProtocol {
    private String description;
    private Integer forwardPort;
    private String listenerForward;
    private Integer listenerPort;
    private String listenerProtocol;

    private GetLoadBalancersBalancerListenerPortsAndProtocol() {}
    public String description() {
        return this.description;
    }
    public Integer forwardPort() {
        return this.forwardPort;
    }
    public String listenerForward() {
        return this.listenerForward;
    }
    public Integer listenerPort() {
        return this.listenerPort;
    }
    public String listenerProtocol() {
        return this.listenerProtocol;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancersBalancerListenerPortsAndProtocol defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private Integer forwardPort;
        private String listenerForward;
        private Integer listenerPort;
        private String listenerProtocol;
        public Builder() {}
        public Builder(GetLoadBalancersBalancerListenerPortsAndProtocol defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.forwardPort = defaults.forwardPort;
    	      this.listenerForward = defaults.listenerForward;
    	      this.listenerPort = defaults.listenerPort;
    	      this.listenerProtocol = defaults.listenerProtocol;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancersBalancerListenerPortsAndProtocol", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder forwardPort(Integer forwardPort) {
            if (forwardPort == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancersBalancerListenerPortsAndProtocol", "forwardPort");
            }
            this.forwardPort = forwardPort;
            return this;
        }
        @CustomType.Setter
        public Builder listenerForward(String listenerForward) {
            if (listenerForward == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancersBalancerListenerPortsAndProtocol", "listenerForward");
            }
            this.listenerForward = listenerForward;
            return this;
        }
        @CustomType.Setter
        public Builder listenerPort(Integer listenerPort) {
            if (listenerPort == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancersBalancerListenerPortsAndProtocol", "listenerPort");
            }
            this.listenerPort = listenerPort;
            return this;
        }
        @CustomType.Setter
        public Builder listenerProtocol(String listenerProtocol) {
            if (listenerProtocol == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancersBalancerListenerPortsAndProtocol", "listenerProtocol");
            }
            this.listenerProtocol = listenerProtocol;
            return this;
        }
        public GetLoadBalancersBalancerListenerPortsAndProtocol build() {
            final var _resultValue = new GetLoadBalancersBalancerListenerPortsAndProtocol();
            _resultValue.description = description;
            _resultValue.forwardPort = forwardPort;
            _resultValue.listenerForward = listenerForward;
            _resultValue.listenerPort = listenerPort;
            _resultValue.listenerProtocol = listenerProtocol;
            return _resultValue;
        }
    }
}
