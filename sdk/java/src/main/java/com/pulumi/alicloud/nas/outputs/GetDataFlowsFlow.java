// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDataFlowsFlow {
    /**
     * @return The time when Fileset was created. Executing the ISO8601 standard means that the return format is: &#39;yyyy-MM-ddTHH:mm:ssZ&#39;.
     * 
     */
    private String createTime;
    /**
     * @return The ID of the Data Flow.
     * 
     */
    private String dataFlowId;
    /**
     * @return The Description of data flow.
     * 
     */
    private String description;
    /**
     * @return Error message.
     * 
     */
    private String errorMessage;
    /**
     * @return The ID of the file system.
     * 
     */
    private String fileSystemId;
    /**
     * @return The path of Fileset in the CPFS file system.
     * 
     */
    private String fileSystemPath;
    /**
     * @return Description of automatic update.
     * 
     */
    private String fsetDescription;
    /**
     * @return The ID of the Fileset.
     * 
     */
    private String fsetId;
    /**
     * @return The resource ID of the data flow. The value formats as `&lt;file_system_id&gt;:&lt;data_flow_id&gt;`.
     * 
     */
    private String id;
    /**
     * @return The security protection type of the source storage.
     * 
     */
    private String sourceSecurityType;
    /**
     * @return The access path of the source store. Format: `&lt;storage type&gt;://&lt;path&gt;`.
     * 
     */
    private String sourceStorage;
    /**
     * @return The status of the Data flow.
     * 
     */
    private String status;
    /**
     * @return The maximum transmission bandwidth of data flow, unit: `MB/s`.
     * 
     */
    private Integer throughput;

    private GetDataFlowsFlow() {}
    /**
     * @return The time when Fileset was created. Executing the ISO8601 standard means that the return format is: &#39;yyyy-MM-ddTHH:mm:ssZ&#39;.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The ID of the Data Flow.
     * 
     */
    public String dataFlowId() {
        return this.dataFlowId;
    }
    /**
     * @return The Description of data flow.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Error message.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return The ID of the file system.
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return The path of Fileset in the CPFS file system.
     * 
     */
    public String fileSystemPath() {
        return this.fileSystemPath;
    }
    /**
     * @return Description of automatic update.
     * 
     */
    public String fsetDescription() {
        return this.fsetDescription;
    }
    /**
     * @return The ID of the Fileset.
     * 
     */
    public String fsetId() {
        return this.fsetId;
    }
    /**
     * @return The resource ID of the data flow. The value formats as `&lt;file_system_id&gt;:&lt;data_flow_id&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The security protection type of the source storage.
     * 
     */
    public String sourceSecurityType() {
        return this.sourceSecurityType;
    }
    /**
     * @return The access path of the source store. Format: `&lt;storage type&gt;://&lt;path&gt;`.
     * 
     */
    public String sourceStorage() {
        return this.sourceStorage;
    }
    /**
     * @return The status of the Data flow.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The maximum transmission bandwidth of data flow, unit: `MB/s`.
     * 
     */
    public Integer throughput() {
        return this.throughput;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataFlowsFlow defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String dataFlowId;
        private String description;
        private String errorMessage;
        private String fileSystemId;
        private String fileSystemPath;
        private String fsetDescription;
        private String fsetId;
        private String id;
        private String sourceSecurityType;
        private String sourceStorage;
        private String status;
        private Integer throughput;
        public Builder() {}
        public Builder(GetDataFlowsFlow defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.dataFlowId = defaults.dataFlowId;
    	      this.description = defaults.description;
    	      this.errorMessage = defaults.errorMessage;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.fileSystemPath = defaults.fileSystemPath;
    	      this.fsetDescription = defaults.fsetDescription;
    	      this.fsetId = defaults.fsetId;
    	      this.id = defaults.id;
    	      this.sourceSecurityType = defaults.sourceSecurityType;
    	      this.sourceStorage = defaults.sourceStorage;
    	      this.status = defaults.status;
    	      this.throughput = defaults.throughput;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder dataFlowId(String dataFlowId) {
            if (dataFlowId == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "dataFlowId");
            }
            this.dataFlowId = dataFlowId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessage(String errorMessage) {
            if (errorMessage == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "errorMessage");
            }
            this.errorMessage = errorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemId(String fileSystemId) {
            if (fileSystemId == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "fileSystemId");
            }
            this.fileSystemId = fileSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemPath(String fileSystemPath) {
            if (fileSystemPath == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "fileSystemPath");
            }
            this.fileSystemPath = fileSystemPath;
            return this;
        }
        @CustomType.Setter
        public Builder fsetDescription(String fsetDescription) {
            if (fsetDescription == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "fsetDescription");
            }
            this.fsetDescription = fsetDescription;
            return this;
        }
        @CustomType.Setter
        public Builder fsetId(String fsetId) {
            if (fsetId == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "fsetId");
            }
            this.fsetId = fsetId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder sourceSecurityType(String sourceSecurityType) {
            if (sourceSecurityType == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "sourceSecurityType");
            }
            this.sourceSecurityType = sourceSecurityType;
            return this;
        }
        @CustomType.Setter
        public Builder sourceStorage(String sourceStorage) {
            if (sourceStorage == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "sourceStorage");
            }
            this.sourceStorage = sourceStorage;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder throughput(Integer throughput) {
            if (throughput == null) {
              throw new MissingRequiredPropertyException("GetDataFlowsFlow", "throughput");
            }
            this.throughput = throughput;
            return this;
        }
        public GetDataFlowsFlow build() {
            final var _resultValue = new GetDataFlowsFlow();
            _resultValue.createTime = createTime;
            _resultValue.dataFlowId = dataFlowId;
            _resultValue.description = description;
            _resultValue.errorMessage = errorMessage;
            _resultValue.fileSystemId = fileSystemId;
            _resultValue.fileSystemPath = fileSystemPath;
            _resultValue.fsetDescription = fsetDescription;
            _resultValue.fsetId = fsetId;
            _resultValue.id = id;
            _resultValue.sourceSecurityType = sourceSecurityType;
            _resultValue.sourceStorage = sourceStorage;
            _resultValue.status = status;
            _resultValue.throughput = throughput;
            return _resultValue;
        }
    }
}
