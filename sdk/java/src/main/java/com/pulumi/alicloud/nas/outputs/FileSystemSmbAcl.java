// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nas.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FileSystemSmbAcl {
    /**
     * @return Whether to allow anonymous access.
     * - true: Allow anonymous access.
     * - false (default): Anonymous access is not allowed.
     * 
     */
    private @Nullable Boolean enableAnonymousAccess;
    /**
     * @return Whether SMB ACL is enabled
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Whether transmission encryption is enabled.
     * - true: Enables encryption in transit.
     * - false (default): Transport encryption is not enabled.
     * 
     */
    private @Nullable Boolean encryptData;
    /**
     * @return The user directory home path for each user. The file path format is as follows:
     * - A forward slash (/) or backslash (\) as a separator.
     * - Each paragraph cannot contain &#34;:|? *.
     * - The length of each segment ranges from 0 to 255.
     * - The total length range is 0~32767.
     * 
     * For example, if the user directory is/home, the file system will automatically create A directory of/home/A when user A logs in. Skip if/home/A already exists.
     * 
     * &gt; **NOTE:**  Explain that user A needs to have the permission to create A directory, otherwise the/home/A directory cannot be created.
     * 
     */
    private @Nullable String homeDirPath;
    /**
     * @return Whether to reject non-encrypted clients.
     * - true: Deny non-encrypted clients.
     * - false (default): Non-encrypted clients are not rejected.
     * 
     */
    private @Nullable Boolean rejectUnencryptedAccess;
    /**
     * @return The ID of the Super User. The ID rules are as follows:
     * - Must start with S and no other letters can appear after the S at the beginning.
     * - At least three dashes (-) apart.
     * 
     * Such as S-1-5-22 or S-1-5-22-23.
     * 
     */
    private @Nullable String superAdminSid;

    private FileSystemSmbAcl() {}
    /**
     * @return Whether to allow anonymous access.
     * - true: Allow anonymous access.
     * - false (default): Anonymous access is not allowed.
     * 
     */
    public Optional<Boolean> enableAnonymousAccess() {
        return Optional.ofNullable(this.enableAnonymousAccess);
    }
    /**
     * @return Whether SMB ACL is enabled
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Whether transmission encryption is enabled.
     * - true: Enables encryption in transit.
     * - false (default): Transport encryption is not enabled.
     * 
     */
    public Optional<Boolean> encryptData() {
        return Optional.ofNullable(this.encryptData);
    }
    /**
     * @return The user directory home path for each user. The file path format is as follows:
     * - A forward slash (/) or backslash (\) as a separator.
     * - Each paragraph cannot contain &#34;:|? *.
     * - The length of each segment ranges from 0 to 255.
     * - The total length range is 0~32767.
     * 
     * For example, if the user directory is/home, the file system will automatically create A directory of/home/A when user A logs in. Skip if/home/A already exists.
     * 
     * &gt; **NOTE:**  Explain that user A needs to have the permission to create A directory, otherwise the/home/A directory cannot be created.
     * 
     */
    public Optional<String> homeDirPath() {
        return Optional.ofNullable(this.homeDirPath);
    }
    /**
     * @return Whether to reject non-encrypted clients.
     * - true: Deny non-encrypted clients.
     * - false (default): Non-encrypted clients are not rejected.
     * 
     */
    public Optional<Boolean> rejectUnencryptedAccess() {
        return Optional.ofNullable(this.rejectUnencryptedAccess);
    }
    /**
     * @return The ID of the Super User. The ID rules are as follows:
     * - Must start with S and no other letters can appear after the S at the beginning.
     * - At least three dashes (-) apart.
     * 
     * Such as S-1-5-22 or S-1-5-22-23.
     * 
     */
    public Optional<String> superAdminSid() {
        return Optional.ofNullable(this.superAdminSid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FileSystemSmbAcl defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enableAnonymousAccess;
        private @Nullable Boolean enabled;
        private @Nullable Boolean encryptData;
        private @Nullable String homeDirPath;
        private @Nullable Boolean rejectUnencryptedAccess;
        private @Nullable String superAdminSid;
        public Builder() {}
        public Builder(FileSystemSmbAcl defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableAnonymousAccess = defaults.enableAnonymousAccess;
    	      this.enabled = defaults.enabled;
    	      this.encryptData = defaults.encryptData;
    	      this.homeDirPath = defaults.homeDirPath;
    	      this.rejectUnencryptedAccess = defaults.rejectUnencryptedAccess;
    	      this.superAdminSid = defaults.superAdminSid;
        }

        @CustomType.Setter
        public Builder enableAnonymousAccess(@Nullable Boolean enableAnonymousAccess) {

            this.enableAnonymousAccess = enableAnonymousAccess;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder encryptData(@Nullable Boolean encryptData) {

            this.encryptData = encryptData;
            return this;
        }
        @CustomType.Setter
        public Builder homeDirPath(@Nullable String homeDirPath) {

            this.homeDirPath = homeDirPath;
            return this;
        }
        @CustomType.Setter
        public Builder rejectUnencryptedAccess(@Nullable Boolean rejectUnencryptedAccess) {

            this.rejectUnencryptedAccess = rejectUnencryptedAccess;
            return this;
        }
        @CustomType.Setter
        public Builder superAdminSid(@Nullable String superAdminSid) {

            this.superAdminSid = superAdminSid;
            return this;
        }
        public FileSystemSmbAcl build() {
            final var _resultValue = new FileSystemSmbAcl();
            _resultValue.enableAnonymousAccess = enableAnonymousAccess;
            _resultValue.enabled = enabled;
            _resultValue.encryptData = encryptData;
            _resultValue.homeDirPath = homeDirPath;
            _resultValue.rejectUnencryptedAccess = rejectUnencryptedAccess;
            _resultValue.superAdminSid = superAdminSid;
            return _resultValue;
        }
    }
}
