// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetScalingRulesRule {
    /**
     * @return Adjustment type of the scaling rule.
     * 
     */
    private String adjustmentType;
    /**
     * @return Adjustment value of the scaling rule.
     * 
     */
    private Integer adjustmentValue;
    /**
     * @return Cooldown time of the scaling rule.
     * 
     */
    private Integer cooldown;
    /**
     * @return ID of the scaling rule.
     * 
     */
    private String id;
    /**
     * @return (Available since v1.242.0) The maximum number of ECS instances that can be added to the scaling group.
     * 
     */
    private Integer initialMaxSize;
    /**
     * @return (Available since v1.242.0) The predefined metric of the scaling rule.
     * 
     */
    private String metricName;
    /**
     * @return Min adjustment magnitude of scaling rule.
     * 
     */
    private Integer minAdjustmentMagnitude;
    /**
     * @return Name of the scaling rule.
     * 
     */
    private String name;
    /**
     * @return (Available since v1.242.0) The mode of the predictive scaling rule.
     * 
     */
    private String predictiveScalingMode;
    /**
     * @return (Available since v1.242.0) The amount of buffer time before the prediction task is executed. By default, all prediction tasks that are automatically created by a predictive scaling rule are executed on the hour. You can set a buffer time to execute prediction tasks and prepare resources in advance.
     * 
     */
    private Integer predictiveTaskBufferTime;
    /**
     * @return (Available since v1.242.0) The action on the predicted maximum value.
     * 
     */
    private String predictiveValueBehavior;
    /**
     * @return (Available since v1.242.0) The ratio based on which the predicted value is increased if you set predictive_value_behavior to PredictiveValueOverrideMaxWithBuffer. If the predicted value that is increased by this ratio is greater than the initial maximum capacity, the increased value is used as the maximum value for prediction tasks.
     * 
     */
    private Integer predictiveValueBuffer;
    /**
     * @return Scaling group id the scaling rules belong to.
     * 
     */
    private String scalingGroupId;
    /**
     * @return Ari of scaling rule.
     * 
     */
    private String scalingRuleAri;
    /**
     * @return (Available since v1.242.0) The target value of the metric.
     * 
     */
    private Double targetValue;
    /**
     * @return Type of scaling rule.
     * 
     */
    private String type;

    private GetScalingRulesRule() {}
    /**
     * @return Adjustment type of the scaling rule.
     * 
     */
    public String adjustmentType() {
        return this.adjustmentType;
    }
    /**
     * @return Adjustment value of the scaling rule.
     * 
     */
    public Integer adjustmentValue() {
        return this.adjustmentValue;
    }
    /**
     * @return Cooldown time of the scaling rule.
     * 
     */
    public Integer cooldown() {
        return this.cooldown;
    }
    /**
     * @return ID of the scaling rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Available since v1.242.0) The maximum number of ECS instances that can be added to the scaling group.
     * 
     */
    public Integer initialMaxSize() {
        return this.initialMaxSize;
    }
    /**
     * @return (Available since v1.242.0) The predefined metric of the scaling rule.
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return Min adjustment magnitude of scaling rule.
     * 
     */
    public Integer minAdjustmentMagnitude() {
        return this.minAdjustmentMagnitude;
    }
    /**
     * @return Name of the scaling rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Available since v1.242.0) The mode of the predictive scaling rule.
     * 
     */
    public String predictiveScalingMode() {
        return this.predictiveScalingMode;
    }
    /**
     * @return (Available since v1.242.0) The amount of buffer time before the prediction task is executed. By default, all prediction tasks that are automatically created by a predictive scaling rule are executed on the hour. You can set a buffer time to execute prediction tasks and prepare resources in advance.
     * 
     */
    public Integer predictiveTaskBufferTime() {
        return this.predictiveTaskBufferTime;
    }
    /**
     * @return (Available since v1.242.0) The action on the predicted maximum value.
     * 
     */
    public String predictiveValueBehavior() {
        return this.predictiveValueBehavior;
    }
    /**
     * @return (Available since v1.242.0) The ratio based on which the predicted value is increased if you set predictive_value_behavior to PredictiveValueOverrideMaxWithBuffer. If the predicted value that is increased by this ratio is greater than the initial maximum capacity, the increased value is used as the maximum value for prediction tasks.
     * 
     */
    public Integer predictiveValueBuffer() {
        return this.predictiveValueBuffer;
    }
    /**
     * @return Scaling group id the scaling rules belong to.
     * 
     */
    public String scalingGroupId() {
        return this.scalingGroupId;
    }
    /**
     * @return Ari of scaling rule.
     * 
     */
    public String scalingRuleAri() {
        return this.scalingRuleAri;
    }
    /**
     * @return (Available since v1.242.0) The target value of the metric.
     * 
     */
    public Double targetValue() {
        return this.targetValue;
    }
    /**
     * @return Type of scaling rule.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScalingRulesRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adjustmentType;
        private Integer adjustmentValue;
        private Integer cooldown;
        private String id;
        private Integer initialMaxSize;
        private String metricName;
        private Integer minAdjustmentMagnitude;
        private String name;
        private String predictiveScalingMode;
        private Integer predictiveTaskBufferTime;
        private String predictiveValueBehavior;
        private Integer predictiveValueBuffer;
        private String scalingGroupId;
        private String scalingRuleAri;
        private Double targetValue;
        private String type;
        public Builder() {}
        public Builder(GetScalingRulesRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adjustmentType = defaults.adjustmentType;
    	      this.adjustmentValue = defaults.adjustmentValue;
    	      this.cooldown = defaults.cooldown;
    	      this.id = defaults.id;
    	      this.initialMaxSize = defaults.initialMaxSize;
    	      this.metricName = defaults.metricName;
    	      this.minAdjustmentMagnitude = defaults.minAdjustmentMagnitude;
    	      this.name = defaults.name;
    	      this.predictiveScalingMode = defaults.predictiveScalingMode;
    	      this.predictiveTaskBufferTime = defaults.predictiveTaskBufferTime;
    	      this.predictiveValueBehavior = defaults.predictiveValueBehavior;
    	      this.predictiveValueBuffer = defaults.predictiveValueBuffer;
    	      this.scalingGroupId = defaults.scalingGroupId;
    	      this.scalingRuleAri = defaults.scalingRuleAri;
    	      this.targetValue = defaults.targetValue;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder adjustmentType(String adjustmentType) {
            if (adjustmentType == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "adjustmentType");
            }
            this.adjustmentType = adjustmentType;
            return this;
        }
        @CustomType.Setter
        public Builder adjustmentValue(Integer adjustmentValue) {
            if (adjustmentValue == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "adjustmentValue");
            }
            this.adjustmentValue = adjustmentValue;
            return this;
        }
        @CustomType.Setter
        public Builder cooldown(Integer cooldown) {
            if (cooldown == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "cooldown");
            }
            this.cooldown = cooldown;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder initialMaxSize(Integer initialMaxSize) {
            if (initialMaxSize == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "initialMaxSize");
            }
            this.initialMaxSize = initialMaxSize;
            return this;
        }
        @CustomType.Setter
        public Builder metricName(String metricName) {
            if (metricName == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "metricName");
            }
            this.metricName = metricName;
            return this;
        }
        @CustomType.Setter
        public Builder minAdjustmentMagnitude(Integer minAdjustmentMagnitude) {
            if (minAdjustmentMagnitude == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "minAdjustmentMagnitude");
            }
            this.minAdjustmentMagnitude = minAdjustmentMagnitude;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder predictiveScalingMode(String predictiveScalingMode) {
            if (predictiveScalingMode == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "predictiveScalingMode");
            }
            this.predictiveScalingMode = predictiveScalingMode;
            return this;
        }
        @CustomType.Setter
        public Builder predictiveTaskBufferTime(Integer predictiveTaskBufferTime) {
            if (predictiveTaskBufferTime == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "predictiveTaskBufferTime");
            }
            this.predictiveTaskBufferTime = predictiveTaskBufferTime;
            return this;
        }
        @CustomType.Setter
        public Builder predictiveValueBehavior(String predictiveValueBehavior) {
            if (predictiveValueBehavior == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "predictiveValueBehavior");
            }
            this.predictiveValueBehavior = predictiveValueBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder predictiveValueBuffer(Integer predictiveValueBuffer) {
            if (predictiveValueBuffer == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "predictiveValueBuffer");
            }
            this.predictiveValueBuffer = predictiveValueBuffer;
            return this;
        }
        @CustomType.Setter
        public Builder scalingGroupId(String scalingGroupId) {
            if (scalingGroupId == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "scalingGroupId");
            }
            this.scalingGroupId = scalingGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder scalingRuleAri(String scalingRuleAri) {
            if (scalingRuleAri == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "scalingRuleAri");
            }
            this.scalingRuleAri = scalingRuleAri;
            return this;
        }
        @CustomType.Setter
        public Builder targetValue(Double targetValue) {
            if (targetValue == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "targetValue");
            }
            this.targetValue = targetValue;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetScalingRulesRule", "type");
            }
            this.type = type;
            return this;
        }
        public GetScalingRulesRule build() {
            final var _resultValue = new GetScalingRulesRule();
            _resultValue.adjustmentType = adjustmentType;
            _resultValue.adjustmentValue = adjustmentValue;
            _resultValue.cooldown = cooldown;
            _resultValue.id = id;
            _resultValue.initialMaxSize = initialMaxSize;
            _resultValue.metricName = metricName;
            _resultValue.minAdjustmentMagnitude = minAdjustmentMagnitude;
            _resultValue.name = name;
            _resultValue.predictiveScalingMode = predictiveScalingMode;
            _resultValue.predictiveTaskBufferTime = predictiveTaskBufferTime;
            _resultValue.predictiveValueBehavior = predictiveValueBehavior;
            _resultValue.predictiveValueBuffer = predictiveValueBuffer;
            _resultValue.scalingGroupId = scalingGroupId;
            _resultValue.scalingRuleAri = scalingRuleAri;
            _resultValue.targetValue = targetValue;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
