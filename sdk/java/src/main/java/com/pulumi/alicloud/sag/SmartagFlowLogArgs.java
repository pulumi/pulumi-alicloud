// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sag;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SmartagFlowLogArgs extends com.pulumi.resources.ResourceArgs {

    public static final SmartagFlowLogArgs Empty = new SmartagFlowLogArgs();

    /**
     * The time interval at which log data of active connections is collected. Valid values: `60` to `6000`. Default value: `300`. Unit: second.
     * 
     */
    @Import(name="activeAging")
    private @Nullable Output<Integer> activeAging;

    /**
     * @return The time interval at which log data of active connections is collected. Valid values: `60` to `6000`. Default value: `300`. Unit: second.
     * 
     */
    public Optional<Output<Integer>> activeAging() {
        return Optional.ofNullable(this.activeAging);
    }

    /**
     * The description of the flow log.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the flow log.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the flow log.
     * 
     */
    @Import(name="flowLogName")
    private @Nullable Output<String> flowLogName;

    /**
     * @return The name of the flow log.
     * 
     */
    public Optional<Output<String>> flowLogName() {
        return Optional.ofNullable(this.flowLogName);
    }

    /**
     * The time interval at which log data of inactive connections is connected. Valid values: `10` to `600`. Default value: `15`. Unit: second.
     * 
     */
    @Import(name="inactiveAging")
    private @Nullable Output<Integer> inactiveAging;

    /**
     * @return The time interval at which log data of inactive connections is connected. Valid values: `10` to `600`. Default value: `15`. Unit: second.
     * 
     */
    public Optional<Output<Integer>> inactiveAging() {
        return Optional.ofNullable(this.inactiveAging);
    }

    /**
     * The Logstore in Log Service. If `output_type` is set to `sls` or `all`, this parameter is required.
     * 
     */
    @Import(name="logstoreName")
    private @Nullable Output<String> logstoreName;

    /**
     * @return The Logstore in Log Service. If `output_type` is set to `sls` or `all`, this parameter is required.
     * 
     */
    public Optional<Output<String>> logstoreName() {
        return Optional.ofNullable(this.logstoreName);
    }

    /**
     * The IP address of the NetFlow collector where the flow log is stored. If `output_type` is set to `netflow` or `all`, this parameter is required.
     * 
     */
    @Import(name="netflowServerIp")
    private @Nullable Output<String> netflowServerIp;

    /**
     * @return The IP address of the NetFlow collector where the flow log is stored. If `output_type` is set to `netflow` or `all`, this parameter is required.
     * 
     */
    public Optional<Output<String>> netflowServerIp() {
        return Optional.ofNullable(this.netflowServerIp);
    }

    /**
     * The port of the NetFlow collector. Default value: `9995`. If `output_type` is set to `netflow` or `all`, this parameter is required.
     * 
     */
    @Import(name="netflowServerPort")
    private @Nullable Output<Integer> netflowServerPort;

    /**
     * @return The port of the NetFlow collector. Default value: `9995`. If `output_type` is set to `netflow` or `all`, this parameter is required.
     * 
     */
    public Optional<Output<Integer>> netflowServerPort() {
        return Optional.ofNullable(this.netflowServerPort);
    }

    /**
     * The NetFlow version. Default value: `V9`. Valid values: `V10`, `V5`, `V9`. If `output_type` is set to `netflow` or `all`, this parameter is required.
     * 
     */
    @Import(name="netflowVersion")
    private @Nullable Output<String> netflowVersion;

    /**
     * @return The NetFlow version. Default value: `V9`. Valid values: `V10`, `V5`, `V9`. If `output_type` is set to `netflow` or `all`, this parameter is required.
     * 
     */
    public Optional<Output<String>> netflowVersion() {
        return Optional.ofNullable(this.netflowVersion);
    }

    /**
     * The location where the flow log is stored. Valid values:
     * 
     */
    @Import(name="outputType", required=true)
    private Output<String> outputType;

    /**
     * @return The location where the flow log is stored. Valid values:
     * 
     */
    public Output<String> outputType() {
        return this.outputType;
    }

    /**
     * The project in Log Service. If `output_type` is set to `sls` or `all`, this parameter is required.
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return The project in Log Service. If `output_type` is set to `sls` or `all`, this parameter is required.
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * The ID of the region where Log Service is deployed. If `output_type` is set to `sls` or `all`, this parameter is required.
     * 
     */
    @Import(name="slsRegionId")
    private @Nullable Output<String> slsRegionId;

    /**
     * @return The ID of the region where Log Service is deployed. If `output_type` is set to `sls` or `all`, this parameter is required.
     * 
     */
    public Optional<Output<String>> slsRegionId() {
        return Optional.ofNullable(this.slsRegionId);
    }

    /**
     * The status of the flow log. Valid values:  `Active`: The flow log is enabled. `Inactive`: The flow log is disabled.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the flow log. Valid values:  `Active`: The flow log is enabled. `Inactive`: The flow log is disabled.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private SmartagFlowLogArgs() {}

    private SmartagFlowLogArgs(SmartagFlowLogArgs $) {
        this.activeAging = $.activeAging;
        this.description = $.description;
        this.flowLogName = $.flowLogName;
        this.inactiveAging = $.inactiveAging;
        this.logstoreName = $.logstoreName;
        this.netflowServerIp = $.netflowServerIp;
        this.netflowServerPort = $.netflowServerPort;
        this.netflowVersion = $.netflowVersion;
        this.outputType = $.outputType;
        this.projectName = $.projectName;
        this.slsRegionId = $.slsRegionId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SmartagFlowLogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SmartagFlowLogArgs $;

        public Builder() {
            $ = new SmartagFlowLogArgs();
        }

        public Builder(SmartagFlowLogArgs defaults) {
            $ = new SmartagFlowLogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeAging The time interval at which log data of active connections is collected. Valid values: `60` to `6000`. Default value: `300`. Unit: second.
         * 
         * @return builder
         * 
         */
        public Builder activeAging(@Nullable Output<Integer> activeAging) {
            $.activeAging = activeAging;
            return this;
        }

        /**
         * @param activeAging The time interval at which log data of active connections is collected. Valid values: `60` to `6000`. Default value: `300`. Unit: second.
         * 
         * @return builder
         * 
         */
        public Builder activeAging(Integer activeAging) {
            return activeAging(Output.of(activeAging));
        }

        /**
         * @param description The description of the flow log.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the flow log.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param flowLogName The name of the flow log.
         * 
         * @return builder
         * 
         */
        public Builder flowLogName(@Nullable Output<String> flowLogName) {
            $.flowLogName = flowLogName;
            return this;
        }

        /**
         * @param flowLogName The name of the flow log.
         * 
         * @return builder
         * 
         */
        public Builder flowLogName(String flowLogName) {
            return flowLogName(Output.of(flowLogName));
        }

        /**
         * @param inactiveAging The time interval at which log data of inactive connections is connected. Valid values: `10` to `600`. Default value: `15`. Unit: second.
         * 
         * @return builder
         * 
         */
        public Builder inactiveAging(@Nullable Output<Integer> inactiveAging) {
            $.inactiveAging = inactiveAging;
            return this;
        }

        /**
         * @param inactiveAging The time interval at which log data of inactive connections is connected. Valid values: `10` to `600`. Default value: `15`. Unit: second.
         * 
         * @return builder
         * 
         */
        public Builder inactiveAging(Integer inactiveAging) {
            return inactiveAging(Output.of(inactiveAging));
        }

        /**
         * @param logstoreName The Logstore in Log Service. If `output_type` is set to `sls` or `all`, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder logstoreName(@Nullable Output<String> logstoreName) {
            $.logstoreName = logstoreName;
            return this;
        }

        /**
         * @param logstoreName The Logstore in Log Service. If `output_type` is set to `sls` or `all`, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder logstoreName(String logstoreName) {
            return logstoreName(Output.of(logstoreName));
        }

        /**
         * @param netflowServerIp The IP address of the NetFlow collector where the flow log is stored. If `output_type` is set to `netflow` or `all`, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder netflowServerIp(@Nullable Output<String> netflowServerIp) {
            $.netflowServerIp = netflowServerIp;
            return this;
        }

        /**
         * @param netflowServerIp The IP address of the NetFlow collector where the flow log is stored. If `output_type` is set to `netflow` or `all`, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder netflowServerIp(String netflowServerIp) {
            return netflowServerIp(Output.of(netflowServerIp));
        }

        /**
         * @param netflowServerPort The port of the NetFlow collector. Default value: `9995`. If `output_type` is set to `netflow` or `all`, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder netflowServerPort(@Nullable Output<Integer> netflowServerPort) {
            $.netflowServerPort = netflowServerPort;
            return this;
        }

        /**
         * @param netflowServerPort The port of the NetFlow collector. Default value: `9995`. If `output_type` is set to `netflow` or `all`, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder netflowServerPort(Integer netflowServerPort) {
            return netflowServerPort(Output.of(netflowServerPort));
        }

        /**
         * @param netflowVersion The NetFlow version. Default value: `V9`. Valid values: `V10`, `V5`, `V9`. If `output_type` is set to `netflow` or `all`, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder netflowVersion(@Nullable Output<String> netflowVersion) {
            $.netflowVersion = netflowVersion;
            return this;
        }

        /**
         * @param netflowVersion The NetFlow version. Default value: `V9`. Valid values: `V10`, `V5`, `V9`. If `output_type` is set to `netflow` or `all`, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder netflowVersion(String netflowVersion) {
            return netflowVersion(Output.of(netflowVersion));
        }

        /**
         * @param outputType The location where the flow log is stored. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder outputType(Output<String> outputType) {
            $.outputType = outputType;
            return this;
        }

        /**
         * @param outputType The location where the flow log is stored. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder outputType(String outputType) {
            return outputType(Output.of(outputType));
        }

        /**
         * @param projectName The project in Log Service. If `output_type` is set to `sls` or `all`, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName The project in Log Service. If `output_type` is set to `sls` or `all`, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param slsRegionId The ID of the region where Log Service is deployed. If `output_type` is set to `sls` or `all`, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder slsRegionId(@Nullable Output<String> slsRegionId) {
            $.slsRegionId = slsRegionId;
            return this;
        }

        /**
         * @param slsRegionId The ID of the region where Log Service is deployed. If `output_type` is set to `sls` or `all`, this parameter is required.
         * 
         * @return builder
         * 
         */
        public Builder slsRegionId(String slsRegionId) {
            return slsRegionId(Output.of(slsRegionId));
        }

        /**
         * @param status The status of the flow log. Valid values:  `Active`: The flow log is enabled. `Inactive`: The flow log is disabled.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the flow log. Valid values:  `Active`: The flow log is enabled. `Inactive`: The flow log is disabled.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public SmartagFlowLogArgs build() {
            if ($.outputType == null) {
                throw new MissingRequiredPropertyException("SmartagFlowLogArgs", "outputType");
            }
            return $;
        }
    }

}
