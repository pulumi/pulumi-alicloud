// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.cs.KubernetesPermissionArgs;
import com.pulumi.alicloud.cs.inputs.KubernetesPermissionState;
import com.pulumi.alicloud.cs.outputs.KubernetesPermissionPermission;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource will help you implement RBAC authorization for the kubernetes cluster, see [What is kubernetes permissions](https://www.alibabacloud.com/help/en/ack/ack-managed-and-ack-dedicated/developer-reference/api-grantpermissions).
 * 
 * &gt; **NOTE:** Please make sure that the target RAM user has been granted a RAM policy with at least read-only permission of the target cluster in the RAM console. Otherwise, the `ErrorRamPolicyConfig` error will be returned.
 * For more information about how to authorize a RAM user by attaching RAM policies, see [Create a custom RAM policy](https://www.alibabacloud.com/help/doc-detail/86485.htm).
 * 
 * &gt; **NOTE:** If you call this operation as a RAM user, make sure that this RAM user has the permissions to grant other RAM users the permissions to manage ACK clusters. Otherwise, the `StatusForbidden` or `ForbiddenGrantPermissions` errors will be returned. For more information, see [Use a RAM user to grant RBAC permissions to other RAM users](https://www.alibabacloud.com/help/faq-detail/119035.htm).
 * 
 * &gt; **NOTE:** This operation overwrites the permissions that have been granted to the specified RAM user. When you call this operation, make sure that the required permissions are included.
 * 
 * &gt; **NOTE:** Available since v1.122.0.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.random.Integer;
 * import com.pulumi.random.IntegerArgs;
 * import com.pulumi.alicloud.vpc.VpcFunctions;
 * import com.pulumi.alicloud.vpc.inputs.GetEnhancedNatAvailableZonesArgs;
 * import com.pulumi.alicloud.cs.CsFunctions;
 * import com.pulumi.alicloud.cs.inputs.GetKubernetesVersionArgs;
 * import com.pulumi.alicloud.vpc.Network;
 * import com.pulumi.alicloud.vpc.NetworkArgs;
 * import com.pulumi.alicloud.vpc.Switch;
 * import com.pulumi.alicloud.vpc.SwitchArgs;
 * import com.pulumi.alicloud.cs.ManagedKubernetes;
 * import com.pulumi.alicloud.cs.ManagedKubernetesArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.JoinArgs;
 * import com.pulumi.std.inputs.SplitArgs;
 * import com.pulumi.alicloud.ram.User;
 * import com.pulumi.alicloud.ram.UserArgs;
 * import com.pulumi.alicloud.cs.KubernetesPermission;
 * import com.pulumi.alicloud.cs.KubernetesPermissionArgs;
 * import com.pulumi.alicloud.cs.inputs.KubernetesPermissionPermissionArgs;
 * import com.pulumi.codegen.internal.KeyedValue;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         var defaultInteger = new Integer("defaultInteger", IntegerArgs.builder()
 *             .max(99999)
 *             .min(10000)
 *             .build());
 * 
 *         final var name = config.get("name").orElse("terraform-example");
 *         final var vpcCidr = config.get("vpcCidr").orElse("10.0.0.0/8");
 *         final var vswitchCidrs = config.get("vswitchCidrs").orElse(List.of(        
 *             "10.1.0.0/16",
 *             "10.2.0.0/16"));
 *         final var podCidr = config.get("podCidr").orElse("172.16.0.0/16");
 *         final var serviceCidr = config.get("serviceCidr").orElse("192.168.0.0/16");
 *         final var enhanced = VpcFunctions.getEnhancedNatAvailableZones(GetEnhancedNatAvailableZonesArgs.builder()
 *             .build());
 * 
 *         final var default = CsFunctions.getKubernetesVersion(GetKubernetesVersionArgs.builder()
 *             .clusterType("ManagedKubernetes")
 *             .build());
 * 
 *         var vpc = new Network("vpc", NetworkArgs.builder()
 *             .cidrBlock(vpcCidr)
 *             .build());
 * 
 *         // According to the vswitch cidr blocks to launch several vswitches
 *         for (var i = 0; i < vswitchCidrs.length(); i++) {
 *             new Switch("defaultSwitch-" + i, SwitchArgs.builder()
 *                 .vpcId(vpc.id())
 *                 .cidrBlock(vswitchCidrs[range.value()])
 *                 .zoneId(enhanced.zones()[range.value()].zoneId())
 *                 .build());
 * 
 *         
 * }
 *         // Create a new RAM cluster.
 *         var defaultManagedKubernetes = new ManagedKubernetes("defaultManagedKubernetes", ManagedKubernetesArgs.builder()
 *             .name(String.format("%s-%s", name,defaultInteger.result()))
 *             .clusterSpec("ack.pro.small")
 *             .version(default_.metadatas()[0].version())
 *             .workerVswitchIds(StdFunctions.join(JoinArgs.builder()
 *                 .separator(",")
 *                 .input(defaultSwitch.stream().map(element -> element.id()).collect(toList()))
 *                 .build()).applyValue(_invoke -> StdFunctions.split(SplitArgs.builder()
 *                 .separator(",")
 *                 .text(_invoke.result())
 *                 .build())).applyValue(_invoke -> _invoke.result()))
 *             .newNatGateway(false)
 *             .podCidr(podCidr)
 *             .serviceCidr(serviceCidr)
 *             .slbInternetEnabled(false)
 *             .build());
 * 
 *         // Create a new RAM user.
 *         var user = new User("user", UserArgs.builder()
 *             .name(String.format("%s-%s", name,defaultInteger.result()))
 *             .build());
 * 
 *         // Create a cluster permission for user.
 *         var defaultKubernetesPermission = new KubernetesPermission("defaultKubernetesPermission", KubernetesPermissionArgs.builder()
 *             .uid(user.id())
 *             .permissions(KubernetesPermissionPermissionArgs.builder()
 *                 .cluster(defaultManagedKubernetes.id())
 *                 .roleType("cluster")
 *                 .roleName("admin")
 *                 .namespace("")
 *                 .isCustom(false)
 *                 .isRamRole(false)
 *                 .build())
 *             .build());
 * 
 *         var attach = new KubernetesPermission("attach", KubernetesPermissionArgs.builder()
 *             .uid(user.id())
 *             .permissions(KubernetesPermissionPermissionArgs.builder()
 *                 .cluster(defaultManagedKubernetes.id())
 *                 .roleType("namespace")
 *                 .roleName("cs:dev")
 *                 .namespace("default")
 *                 .isCustom(true)
 *                 .isRamRole(false)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="alicloud:cs/kubernetesPermission:KubernetesPermission")
public class KubernetesPermission extends com.pulumi.resources.CustomResource {
    /**
     * A list of user permission. See `permissions` below.
     * 
     */
    @Export(name="permissions", refs={List.class,KubernetesPermissionPermission.class}, tree="[0,1]")
    private Output</* @Nullable */ List<KubernetesPermissionPermission>> permissions;

    /**
     * @return A list of user permission. See `permissions` below.
     * 
     */
    public Output<Optional<List<KubernetesPermissionPermission>>> permissions() {
        return Codegen.optional(this.permissions);
    }
    /**
     * The ID of the Ram user, and it can also be the id of the Ram Role. If you use Ram Role id, you need to set `isRamRole` to `true` during authorization.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return The ID of the Ram user, and it can also be the id of the Ram Role. If you use Ram Role id, you need to set `isRamRole` to `true` during authorization.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public KubernetesPermission(java.lang.String name) {
        this(name, KubernetesPermissionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public KubernetesPermission(java.lang.String name, KubernetesPermissionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public KubernetesPermission(java.lang.String name, KubernetesPermissionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:cs/kubernetesPermission:KubernetesPermission", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private KubernetesPermission(java.lang.String name, Output<java.lang.String> id, @Nullable KubernetesPermissionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:cs/kubernetesPermission:KubernetesPermission", name, state, makeResourceOptions(options, id), false);
    }

    private static KubernetesPermissionArgs makeArgs(KubernetesPermissionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? KubernetesPermissionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static KubernetesPermission get(java.lang.String name, Output<java.lang.String> id, @Nullable KubernetesPermissionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new KubernetesPermission(name, id, state, options);
    }
}
