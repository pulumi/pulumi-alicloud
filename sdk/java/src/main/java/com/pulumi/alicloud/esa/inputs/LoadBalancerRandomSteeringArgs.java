// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerRandomSteeringArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerRandomSteeringArgs Empty = new LoadBalancerRandomSteeringArgs();

    /**
     * The default round-robin weight, used for all pools that do not have individually specified weights. The value range is 0-100.
     * 
     */
    @Import(name="defaultWeight")
    private @Nullable Output<Integer> defaultWeight;

    /**
     * @return The default round-robin weight, used for all pools that do not have individually specified weights. The value range is 0-100.
     * 
     */
    public Optional<Output<Integer>> defaultWeight() {
        return Optional.ofNullable(this.defaultWeight);
    }

    /**
     * Weight configuration for each backend server pool, where the key is the pool ID and the value is the weight coefficient. The weight coefficient represents the proportion of relative traffic distribution.
     * 
     */
    @Import(name="poolWeights")
    private @Nullable Output<Map<String,String>> poolWeights;

    /**
     * @return Weight configuration for each backend server pool, where the key is the pool ID and the value is the weight coefficient. The weight coefficient represents the proportion of relative traffic distribution.
     * 
     */
    public Optional<Output<Map<String,String>>> poolWeights() {
        return Optional.ofNullable(this.poolWeights);
    }

    private LoadBalancerRandomSteeringArgs() {}

    private LoadBalancerRandomSteeringArgs(LoadBalancerRandomSteeringArgs $) {
        this.defaultWeight = $.defaultWeight;
        this.poolWeights = $.poolWeights;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerRandomSteeringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerRandomSteeringArgs $;

        public Builder() {
            $ = new LoadBalancerRandomSteeringArgs();
        }

        public Builder(LoadBalancerRandomSteeringArgs defaults) {
            $ = new LoadBalancerRandomSteeringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultWeight The default round-robin weight, used for all pools that do not have individually specified weights. The value range is 0-100.
         * 
         * @return builder
         * 
         */
        public Builder defaultWeight(@Nullable Output<Integer> defaultWeight) {
            $.defaultWeight = defaultWeight;
            return this;
        }

        /**
         * @param defaultWeight The default round-robin weight, used for all pools that do not have individually specified weights. The value range is 0-100.
         * 
         * @return builder
         * 
         */
        public Builder defaultWeight(Integer defaultWeight) {
            return defaultWeight(Output.of(defaultWeight));
        }

        /**
         * @param poolWeights Weight configuration for each backend server pool, where the key is the pool ID and the value is the weight coefficient. The weight coefficient represents the proportion of relative traffic distribution.
         * 
         * @return builder
         * 
         */
        public Builder poolWeights(@Nullable Output<Map<String,String>> poolWeights) {
            $.poolWeights = poolWeights;
            return this;
        }

        /**
         * @param poolWeights Weight configuration for each backend server pool, where the key is the pool ID and the value is the weight coefficient. The weight coefficient represents the proportion of relative traffic distribution.
         * 
         * @return builder
         * 
         */
        public Builder poolWeights(Map<String,String> poolWeights) {
            return poolWeights(Output.of(poolWeights));
        }

        public LoadBalancerRandomSteeringArgs build() {
            return $;
        }
    }

}
