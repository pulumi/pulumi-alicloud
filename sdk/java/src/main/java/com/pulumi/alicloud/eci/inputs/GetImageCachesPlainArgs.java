// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eci.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImageCachesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImageCachesPlainArgs Empty = new GetImageCachesPlainArgs();

    /**
     * A list ids of ECI Image Cache.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return A list ids of ECI Image Cache.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * Find the mirror cache containing it according to the image name.
     * 
     */
    @Import(name="image")
    private @Nullable String image;

    /**
     * @return Find the mirror cache containing it according to the image name.
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * The name of ECI Image Cache.
     * 
     */
    @Import(name="imageCacheName")
    private @Nullable String imageCacheName;

    /**
     * @return The name of ECI Image Cache.
     * 
     */
    public Optional<String> imageCacheName() {
        return Optional.ofNullable(this.imageCacheName);
    }

    /**
     * A regex string to filter results by the image cache name.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    /**
     * @return A regex string to filter results by the image cache name.
     * 
     */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable String outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The id of snapshot.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable String snapshotId;

    /**
     * @return The id of snapshot.
     * 
     */
    public Optional<String> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * The status of ECI Image Cache.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of ECI Image Cache.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    private GetImageCachesPlainArgs() {}

    private GetImageCachesPlainArgs(GetImageCachesPlainArgs $) {
        this.ids = $.ids;
        this.image = $.image;
        this.imageCacheName = $.imageCacheName;
        this.nameRegex = $.nameRegex;
        this.outputFile = $.outputFile;
        this.snapshotId = $.snapshotId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImageCachesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImageCachesPlainArgs $;

        public Builder() {
            $ = new GetImageCachesPlainArgs();
        }

        public Builder(GetImageCachesPlainArgs defaults) {
            $ = new GetImageCachesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ids A list ids of ECI Image Cache.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list ids of ECI Image Cache.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param image Find the mirror cache containing it according to the image name.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable String image) {
            $.image = image;
            return this;
        }

        /**
         * @param imageCacheName The name of ECI Image Cache.
         * 
         * @return builder
         * 
         */
        public Builder imageCacheName(@Nullable String imageCacheName) {
            $.imageCacheName = imageCacheName;
            return this;
        }

        /**
         * @param nameRegex A regex string to filter results by the image cache name.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param snapshotId The id of snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable String snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param status The status of ECI Image Cache.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public GetImageCachesPlainArgs build() {
            return $;
        }
    }

}
