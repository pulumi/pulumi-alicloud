// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.selectdb.outputs;

import com.pulumi.alicloud.selectdb.outputs.GetDbClustersClusterParam;
import com.pulumi.alicloud.selectdb.outputs.GetDbClustersClusterParamChangeLog;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDbClustersCluster {
    /**
     * @return The cache size for DBCluster.
     * 
     */
    private Integer cacheSize;
    /**
     * @return The cpu resource amount of DBCluster. Depends on `db_cluster_class`.
     * 
     */
    private Integer cpu;
    /**
     * @return The creation time of the resource.
     * 
     */
    private String createTime;
    /**
     * @return The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     * 
     */
    private String dbClusterClass;
    /**
     * @return The DBCluster description.
     * 
     */
    private String dbClusterDescription;
    /**
     * @return The cluster ID.
     * 
     */
    private String dbClusterId;
    /**
     * @return The instance ID.
     * 
     */
    private String dbInstanceId;
    /**
     * @return The Engine of the DBCluster.
     * 
     */
    private String engine;
    /**
     * @return The engine version of the DBCluster.
     * 
     */
    private String engineVersion;
    private String id;
    /**
     * @return The memory resource amount of DBCluster. Depends on `db_cluster_class`.
     * 
     */
    private Integer memory;
    /**
     * @return The configuration change logs of parameters.
     * 
     */
    private List<GetDbClustersClusterParamChangeLog> paramChangeLogs;
    /**
     * @return The details about each parameter in DBCluster returned.
     * 
     */
    private List<GetDbClustersClusterParam> params;
    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    private String paymentType;
    /**
     * @return The ID of region for the cluster.
     * 
     */
    private String regionId;
    /**
     * @return The status of the DBCluster. Valid values: `ACTIVATION`,`CREATING`,`DELETING`,`RESTARTING`,`ORDER_PREPARING`.
     * 
     */
    private String status;
    /**
     * @return The ID of the VPC for the cluster.
     * 
     */
    private String vpcId;
    /**
     * @return The ID of zone for the cluster.
     * 
     */
    private String zoneId;

    private GetDbClustersCluster() {}
    /**
     * @return The cache size for DBCluster.
     * 
     */
    public Integer cacheSize() {
        return this.cacheSize;
    }
    /**
     * @return The cpu resource amount of DBCluster. Depends on `db_cluster_class`.
     * 
     */
    public Integer cpu() {
        return this.cpu;
    }
    /**
     * @return The creation time of the resource.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     * 
     */
    public String dbClusterClass() {
        return this.dbClusterClass;
    }
    /**
     * @return The DBCluster description.
     * 
     */
    public String dbClusterDescription() {
        return this.dbClusterDescription;
    }
    /**
     * @return The cluster ID.
     * 
     */
    public String dbClusterId() {
        return this.dbClusterId;
    }
    /**
     * @return The instance ID.
     * 
     */
    public String dbInstanceId() {
        return this.dbInstanceId;
    }
    /**
     * @return The Engine of the DBCluster.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The engine version of the DBCluster.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The memory resource amount of DBCluster. Depends on `db_cluster_class`.
     * 
     */
    public Integer memory() {
        return this.memory;
    }
    /**
     * @return The configuration change logs of parameters.
     * 
     */
    public List<GetDbClustersClusterParamChangeLog> paramChangeLogs() {
        return this.paramChangeLogs;
    }
    /**
     * @return The details about each parameter in DBCluster returned.
     * 
     */
    public List<GetDbClustersClusterParam> params() {
        return this.params;
    }
    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    public String paymentType() {
        return this.paymentType;
    }
    /**
     * @return The ID of region for the cluster.
     * 
     */
    public String regionId() {
        return this.regionId;
    }
    /**
     * @return The status of the DBCluster. Valid values: `ACTIVATION`,`CREATING`,`DELETING`,`RESTARTING`,`ORDER_PREPARING`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The ID of the VPC for the cluster.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The ID of zone for the cluster.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbClustersCluster defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer cacheSize;
        private Integer cpu;
        private String createTime;
        private String dbClusterClass;
        private String dbClusterDescription;
        private String dbClusterId;
        private String dbInstanceId;
        private String engine;
        private String engineVersion;
        private String id;
        private Integer memory;
        private List<GetDbClustersClusterParamChangeLog> paramChangeLogs;
        private List<GetDbClustersClusterParam> params;
        private String paymentType;
        private String regionId;
        private String status;
        private String vpcId;
        private String zoneId;
        public Builder() {}
        public Builder(GetDbClustersCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheSize = defaults.cacheSize;
    	      this.cpu = defaults.cpu;
    	      this.createTime = defaults.createTime;
    	      this.dbClusterClass = defaults.dbClusterClass;
    	      this.dbClusterDescription = defaults.dbClusterDescription;
    	      this.dbClusterId = defaults.dbClusterId;
    	      this.dbInstanceId = defaults.dbInstanceId;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.id = defaults.id;
    	      this.memory = defaults.memory;
    	      this.paramChangeLogs = defaults.paramChangeLogs;
    	      this.params = defaults.params;
    	      this.paymentType = defaults.paymentType;
    	      this.regionId = defaults.regionId;
    	      this.status = defaults.status;
    	      this.vpcId = defaults.vpcId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder cacheSize(Integer cacheSize) {
            if (cacheSize == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "cacheSize");
            }
            this.cacheSize = cacheSize;
            return this;
        }
        @CustomType.Setter
        public Builder cpu(Integer cpu) {
            if (cpu == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "cpu");
            }
            this.cpu = cpu;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterClass(String dbClusterClass) {
            if (dbClusterClass == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "dbClusterClass");
            }
            this.dbClusterClass = dbClusterClass;
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterDescription(String dbClusterDescription) {
            if (dbClusterDescription == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "dbClusterDescription");
            }
            this.dbClusterDescription = dbClusterDescription;
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterId(String dbClusterId) {
            if (dbClusterId == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "dbClusterId");
            }
            this.dbClusterId = dbClusterId;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceId(String dbInstanceId) {
            if (dbInstanceId == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "dbInstanceId");
            }
            this.dbInstanceId = dbInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            if (engine == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "engine");
            }
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            if (engineVersion == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "engineVersion");
            }
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder memory(Integer memory) {
            if (memory == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "memory");
            }
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder paramChangeLogs(List<GetDbClustersClusterParamChangeLog> paramChangeLogs) {
            if (paramChangeLogs == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "paramChangeLogs");
            }
            this.paramChangeLogs = paramChangeLogs;
            return this;
        }
        public Builder paramChangeLogs(GetDbClustersClusterParamChangeLog... paramChangeLogs) {
            return paramChangeLogs(List.of(paramChangeLogs));
        }
        @CustomType.Setter
        public Builder params(List<GetDbClustersClusterParam> params) {
            if (params == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "params");
            }
            this.params = params;
            return this;
        }
        public Builder params(GetDbClustersClusterParam... params) {
            return params(List.of(params));
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            if (paymentType == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "paymentType");
            }
            this.paymentType = paymentType;
            return this;
        }
        @CustomType.Setter
        public Builder regionId(String regionId) {
            if (regionId == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "regionId");
            }
            this.regionId = regionId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetDbClustersCluster", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetDbClustersCluster build() {
            final var _resultValue = new GetDbClustersCluster();
            _resultValue.cacheSize = cacheSize;
            _resultValue.cpu = cpu;
            _resultValue.createTime = createTime;
            _resultValue.dbClusterClass = dbClusterClass;
            _resultValue.dbClusterDescription = dbClusterDescription;
            _resultValue.dbClusterId = dbClusterId;
            _resultValue.dbInstanceId = dbInstanceId;
            _resultValue.engine = engine;
            _resultValue.engineVersion = engineVersion;
            _resultValue.id = id;
            _resultValue.memory = memory;
            _resultValue.paramChangeLogs = paramChangeLogs;
            _resultValue.params = params;
            _resultValue.paymentType = paymentType;
            _resultValue.regionId = regionId;
            _resultValue.status = status;
            _resultValue.vpcId = vpcId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
