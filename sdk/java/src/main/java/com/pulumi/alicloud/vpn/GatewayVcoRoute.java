// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.vpn.GatewayVcoRouteArgs;
import com.pulumi.alicloud.vpn.inputs.GatewayVcoRouteState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a VPN Gateway Vco Route resource.
 * 
 * For information about VPN Gateway Vco Route and how to use it, see [What is Vco Route](https://www.alibabacloud.com/help/zh/virtual-private-cloud/latest/createvcorouteentry).
 * 
 * &gt; **NOTE:** Available since v1.183.0+.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.cen.Instance;
 * import com.pulumi.alicloud.cen.InstanceArgs;
 * import com.pulumi.alicloud.cen.TransitRouter;
 * import com.pulumi.alicloud.cen.TransitRouterArgs;
 * import com.pulumi.alicloud.cen.TransitRouterCidr;
 * import com.pulumi.alicloud.cen.TransitRouterCidrArgs;
 * import com.pulumi.alicloud.cen.CenFunctions;
 * import com.pulumi.alicloud.cen.inputs.GetTransitRouterAvailableResourcesArgs;
 * import com.pulumi.alicloud.vpn.CustomerGateway;
 * import com.pulumi.alicloud.vpn.CustomerGatewayArgs;
 * import com.pulumi.alicloud.vpn.GatewayVpnAttachment;
 * import com.pulumi.alicloud.vpn.GatewayVpnAttachmentArgs;
 * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIkeConfigArgs;
 * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentIpsecConfigArgs;
 * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentBgpConfigArgs;
 * import com.pulumi.alicloud.vpn.inputs.GatewayVpnAttachmentHealthCheckConfigArgs;
 * import com.pulumi.alicloud.cen.TransitRouterVpnAttachment;
 * import com.pulumi.alicloud.cen.TransitRouterVpnAttachmentArgs;
 * import com.pulumi.alicloud.cen.inputs.TransitRouterVpnAttachmentZoneArgs;
 * import com.pulumi.alicloud.vpn.GatewayVcoRoute;
 * import com.pulumi.alicloud.vpn.GatewayVcoRouteArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var name = config.get("name").orElse("tf-example");
 *         var defaultInstance = new Instance("defaultInstance", InstanceArgs.builder()
 *             .cenInstanceName(name)
 *             .build());
 * 
 *         var defaultTransitRouter = new TransitRouter("defaultTransitRouter", TransitRouterArgs.builder()
 *             .cenId(defaultInstance.id())
 *             .transitRouterDescription(name)
 *             .transitRouterName(name)
 *             .build());
 * 
 *         var defaultTransitRouterCidr = new TransitRouterCidr("defaultTransitRouterCidr", TransitRouterCidrArgs.builder()
 *             .transitRouterId(defaultTransitRouter.transitRouterId())
 *             .cidr("192.168.0.0/16")
 *             .transitRouterCidrName(name)
 *             .description(name)
 *             .publishCidrRoute(true)
 *             .build());
 * 
 *         final var default = CenFunctions.getTransitRouterAvailableResources(GetTransitRouterAvailableResourcesArgs.builder()
 *             .build());
 * 
 *         var defaultCustomerGateway = new CustomerGateway("defaultCustomerGateway", CustomerGatewayArgs.builder()
 *             .customerGatewayName(name)
 *             .ipAddress("42.104.22.210")
 *             .asn("45014")
 *             .description(name)
 *             .build());
 * 
 *         var defaultGatewayVpnAttachment = new GatewayVpnAttachment("defaultGatewayVpnAttachment", GatewayVpnAttachmentArgs.builder()
 *             .customerGatewayId(defaultCustomerGateway.id())
 *             .networkType("public")
 *             .localSubnet("0.0.0.0/0")
 *             .remoteSubnet("0.0.0.0/0")
 *             .effectImmediately(false)
 *             .ikeConfig(GatewayVpnAttachmentIkeConfigArgs.builder()
 *                 .ikeAuthAlg("md5")
 *                 .ikeEncAlg("des")
 *                 .ikeVersion("ikev2")
 *                 .ikeMode("main")
 *                 .ikeLifetime(86400)
 *                 .psk("tf-examplevpn2")
 *                 .ikePfs("group1")
 *                 .remoteId("testbob2")
 *                 .localId("testalice2")
 *                 .build())
 *             .ipsecConfig(GatewayVpnAttachmentIpsecConfigArgs.builder()
 *                 .ipsecPfs("group5")
 *                 .ipsecEncAlg("des")
 *                 .ipsecAuthAlg("md5")
 *                 .ipsecLifetime(86400)
 *                 .build())
 *             .bgpConfig(GatewayVpnAttachmentBgpConfigArgs.builder()
 *                 .enable(true)
 *                 .localAsn(45014)
 *                 .tunnelCidr("169.254.11.0/30")
 *                 .localBgpIp("169.254.11.1")
 *                 .build())
 *             .healthCheckConfig(GatewayVpnAttachmentHealthCheckConfigArgs.builder()
 *                 .enable(true)
 *                 .sip("192.168.1.1")
 *                 .dip("10.0.0.1")
 *                 .interval(10)
 *                 .retry(10)
 *                 .policy("revoke_route")
 *                 .build())
 *             .enableDpd(true)
 *             .enableNatTraversal(true)
 *             .vpnAttachmentName(name)
 *             .build());
 * 
 *         var defaultTransitRouterVpnAttachment = new TransitRouterVpnAttachment("defaultTransitRouterVpnAttachment", TransitRouterVpnAttachmentArgs.builder()
 *             .autoPublishRouteEnabled(false)
 *             .transitRouterAttachmentDescription(name)
 *             .transitRouterAttachmentName(name)
 *             .cenId(defaultTransitRouter.cenId())
 *             .transitRouterId(defaultTransitRouterCidr.transitRouterId())
 *             .vpnId(defaultGatewayVpnAttachment.id())
 *             .zones(TransitRouterVpnAttachmentZoneArgs.builder()
 *                 .zoneId(default_.resources()[0].masterZones()[0])
 *                 .build())
 *             .build());
 * 
 *         var defaultGatewayVcoRoute = new GatewayVcoRoute("defaultGatewayVcoRoute", GatewayVcoRouteArgs.builder()
 *             .nextHop(defaultTransitRouterVpnAttachment.vpnId())
 *             .vpnConnectionId(defaultTransitRouterVpnAttachment.vpnId())
 *             .weight(100)
 *             .routeDest("192.168.10.0/24")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * VPN Gateway Vco Route can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:vpn/gatewayVcoRoute:GatewayVcoRoute example &lt;vpn_connection_id&gt;:&lt;route_dest&gt;:&lt;next_hop&gt;:&lt;weight&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:vpn/gatewayVcoRoute:GatewayVcoRoute")
public class GatewayVcoRoute extends com.pulumi.resources.CustomResource {
    /**
     * The next hop of the destination route.
     * 
     */
    @Export(name="nextHop", refs={String.class}, tree="[0]")
    private Output<String> nextHop;

    /**
     * @return The next hop of the destination route.
     * 
     */
    public Output<String> nextHop() {
        return this.nextHop;
    }
    /**
     * The tunneling protocol. Set the value to Ipsec, which specifies the IPsec tunneling protocol.
     * 
     */
    @Export(name="overlayMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> overlayMode;

    /**
     * @return The tunneling protocol. Set the value to Ipsec, which specifies the IPsec tunneling protocol.
     * 
     */
    public Output<Optional<String>> overlayMode() {
        return Codegen.optional(this.overlayMode);
    }
    /**
     * The destination network segment of the destination route.
     * 
     */
    @Export(name="routeDest", refs={String.class}, tree="[0]")
    private Output<String> routeDest;

    /**
     * @return The destination network segment of the destination route.
     * 
     */
    public Output<String> routeDest() {
        return this.routeDest;
    }
    /**
     * The status of the vpn route entry.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The status of the vpn route entry.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The id of the vpn attachment.
     * 
     */
    @Export(name="vpnConnectionId", refs={String.class}, tree="[0]")
    private Output<String> vpnConnectionId;

    /**
     * @return The id of the vpn attachment.
     * 
     */
    public Output<String> vpnConnectionId() {
        return this.vpnConnectionId;
    }
    /**
     * The weight value of the destination route. Valid values: `0`, `100`.
     * 
     */
    @Export(name="weight", refs={Integer.class}, tree="[0]")
    private Output<Integer> weight;

    /**
     * @return The weight value of the destination route. Valid values: `0`, `100`.
     * 
     */
    public Output<Integer> weight() {
        return this.weight;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GatewayVcoRoute(java.lang.String name) {
        this(name, GatewayVcoRouteArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GatewayVcoRoute(java.lang.String name, GatewayVcoRouteArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GatewayVcoRoute(java.lang.String name, GatewayVcoRouteArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:vpn/gatewayVcoRoute:GatewayVcoRoute", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GatewayVcoRoute(java.lang.String name, Output<java.lang.String> id, @Nullable GatewayVcoRouteState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:vpn/gatewayVcoRoute:GatewayVcoRoute", name, state, makeResourceOptions(options, id), false);
    }

    private static GatewayVcoRouteArgs makeArgs(GatewayVcoRouteArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GatewayVcoRouteArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GatewayVcoRoute get(java.lang.String name, Output<java.lang.String> id, @Nullable GatewayVcoRouteState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GatewayVcoRoute(name, id, state, options);
    }
}
