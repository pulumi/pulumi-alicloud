// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerGroupHealthCheckConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerGroupHealthCheckConfigArgs Empty = new ServerGroupHealthCheckConfigArgs();

    /**
     * The status code for a successful health check
     * 
     */
    @Import(name="healthCheckCodes")
    private @Nullable Output<List<String>> healthCheckCodes;

    /**
     * @return The status code for a successful health check
     * 
     */
    public Optional<Output<List<String>>> healthCheckCodes() {
        return Optional.ofNullable(this.healthCheckCodes);
    }

    /**
     * The backend port that is used for health checks.
     * 
     * Valid values: `0` to `65535`.
     * 
     * If you set the value to `0`, the backend port is used for health checks.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
     * 
     */
    @Import(name="healthCheckConnectPort")
    private @Nullable Output<Integer> healthCheckConnectPort;

    /**
     * @return The backend port that is used for health checks.
     * 
     * Valid values: `0` to `65535`.
     * 
     * If you set the value to `0`, the backend port is used for health checks.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
     * 
     */
    public Optional<Output<Integer>> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }

    /**
     * Specifies whether to enable the health check feature. Valid values:
     * 
     */
    @Import(name="healthCheckEnabled", required=true)
    private Output<Boolean> healthCheckEnabled;

    /**
     * @return Specifies whether to enable the health check feature. Valid values:
     * 
     */
    public Output<Boolean> healthCheckEnabled() {
        return this.healthCheckEnabled;
    }

    /**
     * The domain name that is used for health checks.
     * 
     * *   **Backend Server Internal IP** (default): Use the internal IP address of backend servers as the health check domain name.
     * 
     * *   **Custom Domain Name**: Enter a domain name.
     * 
     * *   The domain name must be 1 to 80 characters in length.
     * *   The domain name can contain lowercase letters, digits, hyphens (-), and periods (.).
     * *   The domain name must contain at least one period (.) but cannot start or end with a period (.).
     * *   The rightmost domain label of the domain name can contain only letters, and cannot contain digits or hyphens (-).
     * *   The domain name cannot start or end with a hyphen (-).
     * 
     * &gt; **NOTE:**   This parameter takes effect only if `HealthCheckProtocol` is set to `HTTP`, `HTTPS`, or `gRPC`.
     * 
     */
    @Import(name="healthCheckHost")
    private @Nullable Output<String> healthCheckHost;

    /**
     * @return The domain name that is used for health checks.
     * 
     * *   **Backend Server Internal IP** (default): Use the internal IP address of backend servers as the health check domain name.
     * 
     * *   **Custom Domain Name**: Enter a domain name.
     * 
     * *   The domain name must be 1 to 80 characters in length.
     * *   The domain name can contain lowercase letters, digits, hyphens (-), and periods (.).
     * *   The domain name must contain at least one period (.) but cannot start or end with a period (.).
     * *   The rightmost domain label of the domain name can contain only letters, and cannot contain digits or hyphens (-).
     * *   The domain name cannot start or end with a hyphen (-).
     * 
     * &gt; **NOTE:**   This parameter takes effect only if `HealthCheckProtocol` is set to `HTTP`, `HTTPS`, or `gRPC`.
     * 
     */
    public Optional<Output<String>> healthCheckHost() {
        return Optional.ofNullable(this.healthCheckHost);
    }

    /**
     * The HTTP version that is used for health checks. Valid values:
     * 
     * *   **HTTP1.0**
     * 
     * *   **HTTP1.1**
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to true and `HealthCheckProtocol` to `HTTP` or `HTTPS`.
     * 
     */
    @Import(name="healthCheckHttpVersion")
    private @Nullable Output<String> healthCheckHttpVersion;

    /**
     * @return The HTTP version that is used for health checks. Valid values:
     * 
     * *   **HTTP1.0**
     * 
     * *   **HTTP1.1**
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to true and `HealthCheckProtocol` to `HTTP` or `HTTPS`.
     * 
     */
    public Optional<Output<String>> healthCheckHttpVersion() {
        return Optional.ofNullable(this.healthCheckHttpVersion);
    }

    /**
     * The interval at which health checks are performed. Unit: seconds.
     * 
     * Valid values: `1` to `50`.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
     * 
     */
    @Import(name="healthCheckInterval")
    private @Nullable Output<Integer> healthCheckInterval;

    /**
     * @return The interval at which health checks are performed. Unit: seconds.
     * 
     * Valid values: `1` to `50`.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
     * 
     */
    public Optional<Output<Integer>> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }

    /**
     * The HTTP method that is used for health checks. Valid values:
     * 
     * *   `GET`: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.
     * 
     * *   `POST`: gRPC health checks use the POST method by default.
     * 
     * *   `HEAD`: HTTP and HTTPS health checks use the HEAD method by default.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to true and `HealthCheckProtocol` to `HTTP`, `HTTPS`, or `gRPC`.
     * 
     */
    @Import(name="healthCheckMethod")
    private @Nullable Output<String> healthCheckMethod;

    /**
     * @return The HTTP method that is used for health checks. Valid values:
     * 
     * *   `GET`: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.
     * 
     * *   `POST`: gRPC health checks use the POST method by default.
     * 
     * *   `HEAD`: HTTP and HTTPS health checks use the HEAD method by default.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to true and `HealthCheckProtocol` to `HTTP`, `HTTPS`, or `gRPC`.
     * 
     */
    public Optional<Output<String>> healthCheckMethod() {
        return Optional.ofNullable(this.healthCheckMethod);
    }

    /**
     * The URL that is used for health checks.
     * 
     * The URL must be 1 to 80 characters in length, and can contain letters, digits, and the following special characters: `- / . % ? # &amp; =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] {@literal @} $ ^ : &#39; , +`. The URL must start with a forward slash (`/`).
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true` and `HealthCheckProtocol` to `HTTP` or `HTTPS`.
     * 
     */
    @Import(name="healthCheckPath")
    private @Nullable Output<String> healthCheckPath;

    /**
     * @return The URL that is used for health checks.
     * 
     * The URL must be 1 to 80 characters in length, and can contain letters, digits, and the following special characters: `- / . % ? # &amp; =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] {@literal @} $ ^ : &#39; , +`. The URL must start with a forward slash (`/`).
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true` and `HealthCheckProtocol` to `HTTP` or `HTTPS`.
     * 
     */
    public Optional<Output<String>> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }

    /**
     * The protocol that is used for health checks. Valid values:
     * 
     * - `HTTP`: HTTP health checks simulate browser behaviors by sending HEAD or GET requests to probe the availability of backend servers.
     * - `HTTPS`: HTTPS health checks simulate browser behaviors by sending HEAD or GET requests to probe the availability of backend servers. HTTPS provides higher security than HTTP because HTTPS supports data encryption.
     * - `TCP`: TCP health checks send TCP SYN packets to a backend server to probe the availability of backend servers.
     * - `gRPC`: gRPC health checks send POST or GET requests to a backend server to check whether the backend server is healthy.
     * 
     */
    @Import(name="healthCheckProtocol")
    private @Nullable Output<String> healthCheckProtocol;

    /**
     * @return The protocol that is used for health checks. Valid values:
     * 
     * - `HTTP`: HTTP health checks simulate browser behaviors by sending HEAD or GET requests to probe the availability of backend servers.
     * - `HTTPS`: HTTPS health checks simulate browser behaviors by sending HEAD or GET requests to probe the availability of backend servers. HTTPS provides higher security than HTTP because HTTPS supports data encryption.
     * - `TCP`: TCP health checks send TCP SYN packets to a backend server to probe the availability of backend servers.
     * - `gRPC`: gRPC health checks send POST or GET requests to a backend server to check whether the backend server is healthy.
     * 
     */
    public Optional<Output<String>> healthCheckProtocol() {
        return Optional.ofNullable(this.healthCheckProtocol);
    }

    /**
     * The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
     * 
     * Valid values: `1` to `300`.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
     * 
     */
    @Import(name="healthCheckTimeout")
    private @Nullable Output<Integer> healthCheckTimeout;

    /**
     * @return The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
     * 
     * Valid values: `1` to `300`.
     * 
     * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
     * 
     */
    public Optional<Output<Integer>> healthCheckTimeout() {
        return Optional.ofNullable(this.healthCheckTimeout);
    }

    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health check status of the backend server changes from `fail` to `success`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `3`.
     * 
     */
    @Import(name="healthyThreshold")
    private @Nullable Output<Integer> healthyThreshold;

    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health check status of the backend server changes from `fail` to `success`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `3`.
     * 
     */
    public Optional<Output<Integer>> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }

    /**
     * The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health check status of the backend server changes from `success` to `fail`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `3`.
     * 
     */
    @Import(name="unhealthyThreshold")
    private @Nullable Output<Integer> unhealthyThreshold;

    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health check status of the backend server changes from `success` to `fail`.
     * 
     * Valid values: `2` to `10`.
     * 
     * Default value: `3`.
     * 
     */
    public Optional<Output<Integer>> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    private ServerGroupHealthCheckConfigArgs() {}

    private ServerGroupHealthCheckConfigArgs(ServerGroupHealthCheckConfigArgs $) {
        this.healthCheckCodes = $.healthCheckCodes;
        this.healthCheckConnectPort = $.healthCheckConnectPort;
        this.healthCheckEnabled = $.healthCheckEnabled;
        this.healthCheckHost = $.healthCheckHost;
        this.healthCheckHttpVersion = $.healthCheckHttpVersion;
        this.healthCheckInterval = $.healthCheckInterval;
        this.healthCheckMethod = $.healthCheckMethod;
        this.healthCheckPath = $.healthCheckPath;
        this.healthCheckProtocol = $.healthCheckProtocol;
        this.healthCheckTimeout = $.healthCheckTimeout;
        this.healthyThreshold = $.healthyThreshold;
        this.unhealthyThreshold = $.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerGroupHealthCheckConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerGroupHealthCheckConfigArgs $;

        public Builder() {
            $ = new ServerGroupHealthCheckConfigArgs();
        }

        public Builder(ServerGroupHealthCheckConfigArgs defaults) {
            $ = new ServerGroupHealthCheckConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param healthCheckCodes The status code for a successful health check
         * 
         * @return builder
         * 
         */
        public Builder healthCheckCodes(@Nullable Output<List<String>> healthCheckCodes) {
            $.healthCheckCodes = healthCheckCodes;
            return this;
        }

        /**
         * @param healthCheckCodes The status code for a successful health check
         * 
         * @return builder
         * 
         */
        public Builder healthCheckCodes(List<String> healthCheckCodes) {
            return healthCheckCodes(Output.of(healthCheckCodes));
        }

        /**
         * @param healthCheckCodes The status code for a successful health check
         * 
         * @return builder
         * 
         */
        public Builder healthCheckCodes(String... healthCheckCodes) {
            return healthCheckCodes(List.of(healthCheckCodes));
        }

        /**
         * @param healthCheckConnectPort The backend port that is used for health checks.
         * 
         * Valid values: `0` to `65535`.
         * 
         * If you set the value to `0`, the backend port is used for health checks.
         * 
         * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(@Nullable Output<Integer> healthCheckConnectPort) {
            $.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }

        /**
         * @param healthCheckConnectPort The backend port that is used for health checks.
         * 
         * Valid values: `0` to `65535`.
         * 
         * If you set the value to `0`, the backend port is used for health checks.
         * 
         * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(Integer healthCheckConnectPort) {
            return healthCheckConnectPort(Output.of(healthCheckConnectPort));
        }

        /**
         * @param healthCheckEnabled Specifies whether to enable the health check feature. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEnabled(Output<Boolean> healthCheckEnabled) {
            $.healthCheckEnabled = healthCheckEnabled;
            return this;
        }

        /**
         * @param healthCheckEnabled Specifies whether to enable the health check feature. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEnabled(Boolean healthCheckEnabled) {
            return healthCheckEnabled(Output.of(healthCheckEnabled));
        }

        /**
         * @param healthCheckHost The domain name that is used for health checks.
         * 
         * *   **Backend Server Internal IP** (default): Use the internal IP address of backend servers as the health check domain name.
         * 
         * *   **Custom Domain Name**: Enter a domain name.
         * 
         * *   The domain name must be 1 to 80 characters in length.
         * *   The domain name can contain lowercase letters, digits, hyphens (-), and periods (.).
         * *   The domain name must contain at least one period (.) but cannot start or end with a period (.).
         * *   The rightmost domain label of the domain name can contain only letters, and cannot contain digits or hyphens (-).
         * *   The domain name cannot start or end with a hyphen (-).
         * 
         * &gt; **NOTE:**   This parameter takes effect only if `HealthCheckProtocol` is set to `HTTP`, `HTTPS`, or `gRPC`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHost(@Nullable Output<String> healthCheckHost) {
            $.healthCheckHost = healthCheckHost;
            return this;
        }

        /**
         * @param healthCheckHost The domain name that is used for health checks.
         * 
         * *   **Backend Server Internal IP** (default): Use the internal IP address of backend servers as the health check domain name.
         * 
         * *   **Custom Domain Name**: Enter a domain name.
         * 
         * *   The domain name must be 1 to 80 characters in length.
         * *   The domain name can contain lowercase letters, digits, hyphens (-), and periods (.).
         * *   The domain name must contain at least one period (.) but cannot start or end with a period (.).
         * *   The rightmost domain label of the domain name can contain only letters, and cannot contain digits or hyphens (-).
         * *   The domain name cannot start or end with a hyphen (-).
         * 
         * &gt; **NOTE:**   This parameter takes effect only if `HealthCheckProtocol` is set to `HTTP`, `HTTPS`, or `gRPC`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHost(String healthCheckHost) {
            return healthCheckHost(Output.of(healthCheckHost));
        }

        /**
         * @param healthCheckHttpVersion The HTTP version that is used for health checks. Valid values:
         * 
         * *   **HTTP1.0**
         * 
         * *   **HTTP1.1**
         * 
         * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to true and `HealthCheckProtocol` to `HTTP` or `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpVersion(@Nullable Output<String> healthCheckHttpVersion) {
            $.healthCheckHttpVersion = healthCheckHttpVersion;
            return this;
        }

        /**
         * @param healthCheckHttpVersion The HTTP version that is used for health checks. Valid values:
         * 
         * *   **HTTP1.0**
         * 
         * *   **HTTP1.1**
         * 
         * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to true and `HealthCheckProtocol` to `HTTP` or `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpVersion(String healthCheckHttpVersion) {
            return healthCheckHttpVersion(Output.of(healthCheckHttpVersion));
        }

        /**
         * @param healthCheckInterval The interval at which health checks are performed. Unit: seconds.
         * 
         * Valid values: `1` to `50`.
         * 
         * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(@Nullable Output<Integer> healthCheckInterval) {
            $.healthCheckInterval = healthCheckInterval;
            return this;
        }

        /**
         * @param healthCheckInterval The interval at which health checks are performed. Unit: seconds.
         * 
         * Valid values: `1` to `50`.
         * 
         * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(Integer healthCheckInterval) {
            return healthCheckInterval(Output.of(healthCheckInterval));
        }

        /**
         * @param healthCheckMethod The HTTP method that is used for health checks. Valid values:
         * 
         * *   `GET`: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.
         * 
         * *   `POST`: gRPC health checks use the POST method by default.
         * 
         * *   `HEAD`: HTTP and HTTPS health checks use the HEAD method by default.
         * 
         * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to true and `HealthCheckProtocol` to `HTTP`, `HTTPS`, or `gRPC`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckMethod(@Nullable Output<String> healthCheckMethod) {
            $.healthCheckMethod = healthCheckMethod;
            return this;
        }

        /**
         * @param healthCheckMethod The HTTP method that is used for health checks. Valid values:
         * 
         * *   `GET`: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.
         * 
         * *   `POST`: gRPC health checks use the POST method by default.
         * 
         * *   `HEAD`: HTTP and HTTPS health checks use the HEAD method by default.
         * 
         * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to true and `HealthCheckProtocol` to `HTTP`, `HTTPS`, or `gRPC`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckMethod(String healthCheckMethod) {
            return healthCheckMethod(Output.of(healthCheckMethod));
        }

        /**
         * @param healthCheckPath The URL that is used for health checks.
         * 
         * The URL must be 1 to 80 characters in length, and can contain letters, digits, and the following special characters: `- / . % ? # &amp; =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] {@literal @} $ ^ : &#39; , +`. The URL must start with a forward slash (`/`).
         * 
         * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true` and `HealthCheckProtocol` to `HTTP` or `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(@Nullable Output<String> healthCheckPath) {
            $.healthCheckPath = healthCheckPath;
            return this;
        }

        /**
         * @param healthCheckPath The URL that is used for health checks.
         * 
         * The URL must be 1 to 80 characters in length, and can contain letters, digits, and the following special characters: `- / . % ? # &amp; =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] {@literal @} $ ^ : &#39; , +`. The URL must start with a forward slash (`/`).
         * 
         * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true` and `HealthCheckProtocol` to `HTTP` or `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(String healthCheckPath) {
            return healthCheckPath(Output.of(healthCheckPath));
        }

        /**
         * @param healthCheckProtocol The protocol that is used for health checks. Valid values:
         * 
         * - `HTTP`: HTTP health checks simulate browser behaviors by sending HEAD or GET requests to probe the availability of backend servers.
         * - `HTTPS`: HTTPS health checks simulate browser behaviors by sending HEAD or GET requests to probe the availability of backend servers. HTTPS provides higher security than HTTP because HTTPS supports data encryption.
         * - `TCP`: TCP health checks send TCP SYN packets to a backend server to probe the availability of backend servers.
         * - `gRPC`: gRPC health checks send POST or GET requests to a backend server to check whether the backend server is healthy.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckProtocol(@Nullable Output<String> healthCheckProtocol) {
            $.healthCheckProtocol = healthCheckProtocol;
            return this;
        }

        /**
         * @param healthCheckProtocol The protocol that is used for health checks. Valid values:
         * 
         * - `HTTP`: HTTP health checks simulate browser behaviors by sending HEAD or GET requests to probe the availability of backend servers.
         * - `HTTPS`: HTTPS health checks simulate browser behaviors by sending HEAD or GET requests to probe the availability of backend servers. HTTPS provides higher security than HTTP because HTTPS supports data encryption.
         * - `TCP`: TCP health checks send TCP SYN packets to a backend server to probe the availability of backend servers.
         * - `gRPC`: gRPC health checks send POST or GET requests to a backend server to check whether the backend server is healthy.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckProtocol(String healthCheckProtocol) {
            return healthCheckProtocol(Output.of(healthCheckProtocol));
        }

        /**
         * @param healthCheckTimeout The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
         * 
         * Valid values: `1` to `300`.
         * 
         * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTimeout(@Nullable Output<Integer> healthCheckTimeout) {
            $.healthCheckTimeout = healthCheckTimeout;
            return this;
        }

        /**
         * @param healthCheckTimeout The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
         * 
         * Valid values: `1` to `300`.
         * 
         * &gt; **NOTE:**   This parameter takes effect only if you set `HealthCheckEnabled` to `true`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTimeout(Integer healthCheckTimeout) {
            return healthCheckTimeout(Output.of(healthCheckTimeout));
        }

        /**
         * @param healthyThreshold The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health check status of the backend server changes from `fail` to `success`.
         * 
         * Valid values: `2` to `10`.
         * 
         * Default value: `3`.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(@Nullable Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param healthyThreshold The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health check status of the backend server changes from `fail` to `success`.
         * 
         * Valid values: `2` to `10`.
         * 
         * Default value: `3`.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        /**
         * @param unhealthyThreshold The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health check status of the backend server changes from `success` to `fail`.
         * 
         * Valid values: `2` to `10`.
         * 
         * Default value: `3`.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(@Nullable Output<Integer> unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        /**
         * @param unhealthyThreshold The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health check status of the backend server changes from `success` to `fail`.
         * 
         * Valid values: `2` to `10`.
         * 
         * Default value: `3`.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            return unhealthyThreshold(Output.of(unhealthyThreshold));
        }

        public ServerGroupHealthCheckConfigArgs build() {
            if ($.healthCheckEnabled == null) {
                throw new MissingRequiredPropertyException("ServerGroupHealthCheckConfigArgs", "healthCheckEnabled");
            }
            return $;
        }
    }

}
