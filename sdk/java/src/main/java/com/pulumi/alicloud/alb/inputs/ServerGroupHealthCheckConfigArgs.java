// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerGroupHealthCheckConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerGroupHealthCheckConfigArgs Empty = new ServerGroupHealthCheckConfigArgs();

    /**
     * The HTTP status codes that are used to indicate whether the backend server passes the health check. Valid values:
     * - If `health_check_protocol` is set to `HTTP` or `HTTPS`. Valid values: `http_2xx`, `http_3xx`, `http_4xx`, and `http_5xx`. Default value: `http_2xx`.
     * - If `health_check_protocol` is set to `gRPC`. Valid values: `0` to `99`. Default value: `0`.
     * 
     */
    @Import(name="healthCheckCodes")
    private @Nullable Output<List<String>> healthCheckCodes;

    /**
     * @return The HTTP status codes that are used to indicate whether the backend server passes the health check. Valid values:
     * - If `health_check_protocol` is set to `HTTP` or `HTTPS`. Valid values: `http_2xx`, `http_3xx`, `http_4xx`, and `http_5xx`. Default value: `http_2xx`.
     * - If `health_check_protocol` is set to `gRPC`. Valid values: `0` to `99`. Default value: `0`.
     * 
     */
    public Optional<Output<List<String>>> healthCheckCodes() {
        return Optional.ofNullable(this.healthCheckCodes);
    }

    /**
     * The backend port that is used for health checks. Default value: `0`. Valid values: `0` to `65535`. A value of 0 indicates that a backend server port is used for health checks.
     * 
     */
    @Import(name="healthCheckConnectPort")
    private @Nullable Output<Integer> healthCheckConnectPort;

    /**
     * @return The backend port that is used for health checks. Default value: `0`. Valid values: `0` to `65535`. A value of 0 indicates that a backend server port is used for health checks.
     * 
     */
    public Optional<Output<Integer>> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }

    /**
     * Specifies whether to enable the health check feature. Valid values: `true`, `false`.
     * 
     */
    @Import(name="healthCheckEnabled", required=true)
    private Output<Boolean> healthCheckEnabled;

    /**
     * @return Specifies whether to enable the health check feature. Valid values: `true`, `false`.
     * 
     */
    public Output<Boolean> healthCheckEnabled() {
        return this.healthCheckEnabled;
    }

    /**
     * The domain name that is used for health checks.
     * 
     */
    @Import(name="healthCheckHost")
    private @Nullable Output<String> healthCheckHost;

    /**
     * @return The domain name that is used for health checks.
     * 
     */
    public Optional<Output<String>> healthCheckHost() {
        return Optional.ofNullable(this.healthCheckHost);
    }

    /**
     * The version of the HTTP protocol. Default value: `HTTP1.1`. Valid values: `HTTP1.0` and `HTTP1.1`. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP` or `HTTPS`.
     * 
     */
    @Import(name="healthCheckHttpVersion")
    private @Nullable Output<String> healthCheckHttpVersion;

    /**
     * @return The version of the HTTP protocol. Default value: `HTTP1.1`. Valid values: `HTTP1.0` and `HTTP1.1`. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP` or `HTTPS`.
     * 
     */
    public Optional<Output<String>> healthCheckHttpVersion() {
        return Optional.ofNullable(this.healthCheckHttpVersion);
    }

    /**
     * The interval at which health checks are performed. Unit: seconds. Default value: `2`. Valid values: `1` to `50`.
     * 
     */
    @Import(name="healthCheckInterval")
    private @Nullable Output<Integer> healthCheckInterval;

    /**
     * @return The interval at which health checks are performed. Unit: seconds. Default value: `2`. Valid values: `1` to `50`.
     * 
     */
    public Optional<Output<Integer>> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }

    /**
     * The HTTP method that is used for health checks. Default value: `GET`. Valid values: `GET`, `POST`, `HEAD`. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP`, `HTTPS`, or `gRPC`. From version 1.215.0, `health_check_method` can be set to `POST`.
     * 
     */
    @Import(name="healthCheckMethod")
    private @Nullable Output<String> healthCheckMethod;

    /**
     * @return The HTTP method that is used for health checks. Default value: `GET`. Valid values: `GET`, `POST`, `HEAD`. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP`, `HTTPS`, or `gRPC`. From version 1.215.0, `health_check_method` can be set to `POST`.
     * 
     */
    public Optional<Output<String>> healthCheckMethod() {
        return Optional.ofNullable(this.healthCheckMethod);
    }

    /**
     * The path that is used for health checks. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP` or `HTTPS`.
     * 
     */
    @Import(name="healthCheckPath")
    private @Nullable Output<String> healthCheckPath;

    /**
     * @return The path that is used for health checks. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP` or `HTTPS`.
     * 
     */
    public Optional<Output<String>> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }

    /**
     * The protocol that is used for health checks. Valid values: `HTTP`, `HTTPS`, `TCP` and `gRPC`.
     * 
     */
    @Import(name="healthCheckProtocol")
    private @Nullable Output<String> healthCheckProtocol;

    /**
     * @return The protocol that is used for health checks. Valid values: `HTTP`, `HTTPS`, `TCP` and `gRPC`.
     * 
     */
    public Optional<Output<String>> healthCheckProtocol() {
        return Optional.ofNullable(this.healthCheckProtocol);
    }

    /**
     * The timeout period for a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Default value: `5`. Valid values: `1` to `300`. **NOTE:** If the value of `health_check_timeout` is smaller than the value of `health_check_interval`, the value of `health_check_timeout` is ignored and the value of `health_check_interval` is used.
     * 
     */
    @Import(name="healthCheckTimeout")
    private @Nullable Output<Integer> healthCheckTimeout;

    /**
     * @return The timeout period for a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Default value: `5`. Valid values: `1` to `300`. **NOTE:** If the value of `health_check_timeout` is smaller than the value of `health_check_interval`, the value of `health_check_timeout` is ignored and the value of `health_check_interval` is used.
     * 
     */
    public Optional<Output<Integer>> healthCheckTimeout() {
        return Optional.ofNullable(this.healthCheckTimeout);
    }

    /**
     * The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: `3`. Valid values: `2` to `10`.
     * 
     */
    @Import(name="healthyThreshold")
    private @Nullable Output<Integer> healthyThreshold;

    /**
     * @return The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: `3`. Valid values: `2` to `10`.
     * 
     */
    public Optional<Output<Integer>> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }

    /**
     * The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: `3`. Valid values: `2` to `10`.
     * 
     */
    @Import(name="unhealthyThreshold")
    private @Nullable Output<Integer> unhealthyThreshold;

    /**
     * @return The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: `3`. Valid values: `2` to `10`.
     * 
     */
    public Optional<Output<Integer>> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    private ServerGroupHealthCheckConfigArgs() {}

    private ServerGroupHealthCheckConfigArgs(ServerGroupHealthCheckConfigArgs $) {
        this.healthCheckCodes = $.healthCheckCodes;
        this.healthCheckConnectPort = $.healthCheckConnectPort;
        this.healthCheckEnabled = $.healthCheckEnabled;
        this.healthCheckHost = $.healthCheckHost;
        this.healthCheckHttpVersion = $.healthCheckHttpVersion;
        this.healthCheckInterval = $.healthCheckInterval;
        this.healthCheckMethod = $.healthCheckMethod;
        this.healthCheckPath = $.healthCheckPath;
        this.healthCheckProtocol = $.healthCheckProtocol;
        this.healthCheckTimeout = $.healthCheckTimeout;
        this.healthyThreshold = $.healthyThreshold;
        this.unhealthyThreshold = $.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerGroupHealthCheckConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerGroupHealthCheckConfigArgs $;

        public Builder() {
            $ = new ServerGroupHealthCheckConfigArgs();
        }

        public Builder(ServerGroupHealthCheckConfigArgs defaults) {
            $ = new ServerGroupHealthCheckConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param healthCheckCodes The HTTP status codes that are used to indicate whether the backend server passes the health check. Valid values:
         * - If `health_check_protocol` is set to `HTTP` or `HTTPS`. Valid values: `http_2xx`, `http_3xx`, `http_4xx`, and `http_5xx`. Default value: `http_2xx`.
         * - If `health_check_protocol` is set to `gRPC`. Valid values: `0` to `99`. Default value: `0`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckCodes(@Nullable Output<List<String>> healthCheckCodes) {
            $.healthCheckCodes = healthCheckCodes;
            return this;
        }

        /**
         * @param healthCheckCodes The HTTP status codes that are used to indicate whether the backend server passes the health check. Valid values:
         * - If `health_check_protocol` is set to `HTTP` or `HTTPS`. Valid values: `http_2xx`, `http_3xx`, `http_4xx`, and `http_5xx`. Default value: `http_2xx`.
         * - If `health_check_protocol` is set to `gRPC`. Valid values: `0` to `99`. Default value: `0`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckCodes(List<String> healthCheckCodes) {
            return healthCheckCodes(Output.of(healthCheckCodes));
        }

        /**
         * @param healthCheckCodes The HTTP status codes that are used to indicate whether the backend server passes the health check. Valid values:
         * - If `health_check_protocol` is set to `HTTP` or `HTTPS`. Valid values: `http_2xx`, `http_3xx`, `http_4xx`, and `http_5xx`. Default value: `http_2xx`.
         * - If `health_check_protocol` is set to `gRPC`. Valid values: `0` to `99`. Default value: `0`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckCodes(String... healthCheckCodes) {
            return healthCheckCodes(List.of(healthCheckCodes));
        }

        /**
         * @param healthCheckConnectPort The backend port that is used for health checks. Default value: `0`. Valid values: `0` to `65535`. A value of 0 indicates that a backend server port is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(@Nullable Output<Integer> healthCheckConnectPort) {
            $.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }

        /**
         * @param healthCheckConnectPort The backend port that is used for health checks. Default value: `0`. Valid values: `0` to `65535`. A value of 0 indicates that a backend server port is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckConnectPort(Integer healthCheckConnectPort) {
            return healthCheckConnectPort(Output.of(healthCheckConnectPort));
        }

        /**
         * @param healthCheckEnabled Specifies whether to enable the health check feature. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEnabled(Output<Boolean> healthCheckEnabled) {
            $.healthCheckEnabled = healthCheckEnabled;
            return this;
        }

        /**
         * @param healthCheckEnabled Specifies whether to enable the health check feature. Valid values: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEnabled(Boolean healthCheckEnabled) {
            return healthCheckEnabled(Output.of(healthCheckEnabled));
        }

        /**
         * @param healthCheckHost The domain name that is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHost(@Nullable Output<String> healthCheckHost) {
            $.healthCheckHost = healthCheckHost;
            return this;
        }

        /**
         * @param healthCheckHost The domain name that is used for health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHost(String healthCheckHost) {
            return healthCheckHost(Output.of(healthCheckHost));
        }

        /**
         * @param healthCheckHttpVersion The version of the HTTP protocol. Default value: `HTTP1.1`. Valid values: `HTTP1.0` and `HTTP1.1`. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP` or `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpVersion(@Nullable Output<String> healthCheckHttpVersion) {
            $.healthCheckHttpVersion = healthCheckHttpVersion;
            return this;
        }

        /**
         * @param healthCheckHttpVersion The version of the HTTP protocol. Default value: `HTTP1.1`. Valid values: `HTTP1.0` and `HTTP1.1`. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP` or `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckHttpVersion(String healthCheckHttpVersion) {
            return healthCheckHttpVersion(Output.of(healthCheckHttpVersion));
        }

        /**
         * @param healthCheckInterval The interval at which health checks are performed. Unit: seconds. Default value: `2`. Valid values: `1` to `50`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(@Nullable Output<Integer> healthCheckInterval) {
            $.healthCheckInterval = healthCheckInterval;
            return this;
        }

        /**
         * @param healthCheckInterval The interval at which health checks are performed. Unit: seconds. Default value: `2`. Valid values: `1` to `50`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckInterval(Integer healthCheckInterval) {
            return healthCheckInterval(Output.of(healthCheckInterval));
        }

        /**
         * @param healthCheckMethod The HTTP method that is used for health checks. Default value: `GET`. Valid values: `GET`, `POST`, `HEAD`. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP`, `HTTPS`, or `gRPC`. From version 1.215.0, `health_check_method` can be set to `POST`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckMethod(@Nullable Output<String> healthCheckMethod) {
            $.healthCheckMethod = healthCheckMethod;
            return this;
        }

        /**
         * @param healthCheckMethod The HTTP method that is used for health checks. Default value: `GET`. Valid values: `GET`, `POST`, `HEAD`. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP`, `HTTPS`, or `gRPC`. From version 1.215.0, `health_check_method` can be set to `POST`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckMethod(String healthCheckMethod) {
            return healthCheckMethod(Output.of(healthCheckMethod));
        }

        /**
         * @param healthCheckPath The path that is used for health checks. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP` or `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(@Nullable Output<String> healthCheckPath) {
            $.healthCheckPath = healthCheckPath;
            return this;
        }

        /**
         * @param healthCheckPath The path that is used for health checks. **NOTE:** This parameter takes effect only when `health_check_protocol` is set to `HTTP` or `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(String healthCheckPath) {
            return healthCheckPath(Output.of(healthCheckPath));
        }

        /**
         * @param healthCheckProtocol The protocol that is used for health checks. Valid values: `HTTP`, `HTTPS`, `TCP` and `gRPC`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckProtocol(@Nullable Output<String> healthCheckProtocol) {
            $.healthCheckProtocol = healthCheckProtocol;
            return this;
        }

        /**
         * @param healthCheckProtocol The protocol that is used for health checks. Valid values: `HTTP`, `HTTPS`, `TCP` and `gRPC`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckProtocol(String healthCheckProtocol) {
            return healthCheckProtocol(Output.of(healthCheckProtocol));
        }

        /**
         * @param healthCheckTimeout The timeout period for a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Default value: `5`. Valid values: `1` to `300`. **NOTE:** If the value of `health_check_timeout` is smaller than the value of `health_check_interval`, the value of `health_check_timeout` is ignored and the value of `health_check_interval` is used.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTimeout(@Nullable Output<Integer> healthCheckTimeout) {
            $.healthCheckTimeout = healthCheckTimeout;
            return this;
        }

        /**
         * @param healthCheckTimeout The timeout period for a health check response. If a backend Elastic Compute Service (ECS) instance does not send an expected response within the specified period of time, the ECS instance is considered unhealthy. Unit: seconds. Default value: `5`. Valid values: `1` to `300`. **NOTE:** If the value of `health_check_timeout` is smaller than the value of `health_check_interval`, the value of `health_check_timeout` is ignored and the value of `health_check_interval` is used.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTimeout(Integer healthCheckTimeout) {
            return healthCheckTimeout(Output.of(healthCheckTimeout));
        }

        /**
         * @param healthyThreshold The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: `3`. Valid values: `2` to `10`.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(@Nullable Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param healthyThreshold The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: `3`. Valid values: `2` to `10`.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        /**
         * @param unhealthyThreshold The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: `3`. Valid values: `2` to `10`.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(@Nullable Output<Integer> unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        /**
         * @param unhealthyThreshold The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: `3`. Valid values: `2` to `10`.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            return unhealthyThreshold(Output.of(unhealthyThreshold));
        }

        public ServerGroupHealthCheckConfigArgs build() {
            if ($.healthCheckEnabled == null) {
                throw new MissingRequiredPropertyException("ServerGroupHealthCheckConfigArgs", "healthCheckEnabled");
            }
            return $;
        }
    }

}
