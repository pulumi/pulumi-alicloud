// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderAssumeRoleWithOidcArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderAssumeRoleWithOidcArgs Empty = new ProviderAssumeRoleWithOidcArgs();

    /**
     * ARN of the OIDC IdP.
     * 
     */
    @Import(name="oidcProviderArn", required=true)
    private Output<String> oidcProviderArn;

    /**
     * @return ARN of the OIDC IdP.
     * 
     */
    public Output<String> oidcProviderArn() {
        return this.oidcProviderArn;
    }

    @Import(name="oidcToken")
    private @Nullable Output<String> oidcToken;

    public Optional<Output<String>> oidcToken() {
        return Optional.ofNullable(this.oidcToken);
    }

    /**
     * The file path of OIDC token that is issued by the external IdP.
     * 
     */
    @Import(name="oidcTokenFile")
    private @Nullable Output<String> oidcTokenFile;

    /**
     * @return The file path of OIDC token that is issued by the external IdP.
     * 
     */
    public Optional<Output<String>> oidcTokenFile() {
        return Optional.ofNullable(this.oidcTokenFile);
    }

    /**
     * The policy that specifies the permissions of the returned STS token. You can use this parameter to grant the STS token fewer permissions than the permissions granted to the RAM role.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return The policy that specifies the permissions of the returned STS token. You can use this parameter to grant the STS token fewer permissions than the permissions granted to the RAM role.
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * ARN of a RAM role to assume prior to making API calls.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return ARN of a RAM role to assume prior to making API calls.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * The custom name of the role session. Set this parameter based on your business requirements. In most cases, this parameter is set to the identity of the user who calls the operation, for example, the username.
     * 
     */
    @Import(name="roleSessionName")
    private @Nullable Output<String> roleSessionName;

    /**
     * @return The custom name of the role session. Set this parameter based on your business requirements. In most cases, this parameter is set to the identity of the user who calls the operation, for example, the username.
     * 
     */
    public Optional<Output<String>> roleSessionName() {
        return Optional.ofNullable(this.roleSessionName);
    }

    /**
     * The validity period of the STS token. Unit: seconds. Default value: 3600. Minimum value: 900. Maximum value: the value of the MaxSessionDuration parameter when creating a ram role.
     * 
     */
    @Import(name="sessionExpiration")
    private @Nullable Output<Integer> sessionExpiration;

    /**
     * @return The validity period of the STS token. Unit: seconds. Default value: 3600. Minimum value: 900. Maximum value: the value of the MaxSessionDuration parameter when creating a ram role.
     * 
     */
    public Optional<Output<Integer>> sessionExpiration() {
        return Optional.ofNullable(this.sessionExpiration);
    }

    private ProviderAssumeRoleWithOidcArgs() {}

    private ProviderAssumeRoleWithOidcArgs(ProviderAssumeRoleWithOidcArgs $) {
        this.oidcProviderArn = $.oidcProviderArn;
        this.oidcToken = $.oidcToken;
        this.oidcTokenFile = $.oidcTokenFile;
        this.policy = $.policy;
        this.roleArn = $.roleArn;
        this.roleSessionName = $.roleSessionName;
        this.sessionExpiration = $.sessionExpiration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderAssumeRoleWithOidcArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderAssumeRoleWithOidcArgs $;

        public Builder() {
            $ = new ProviderAssumeRoleWithOidcArgs();
        }

        public Builder(ProviderAssumeRoleWithOidcArgs defaults) {
            $ = new ProviderAssumeRoleWithOidcArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param oidcProviderArn ARN of the OIDC IdP.
         * 
         * @return builder
         * 
         */
        public Builder oidcProviderArn(Output<String> oidcProviderArn) {
            $.oidcProviderArn = oidcProviderArn;
            return this;
        }

        /**
         * @param oidcProviderArn ARN of the OIDC IdP.
         * 
         * @return builder
         * 
         */
        public Builder oidcProviderArn(String oidcProviderArn) {
            return oidcProviderArn(Output.of(oidcProviderArn));
        }

        public Builder oidcToken(@Nullable Output<String> oidcToken) {
            $.oidcToken = oidcToken;
            return this;
        }

        public Builder oidcToken(String oidcToken) {
            return oidcToken(Output.of(oidcToken));
        }

        /**
         * @param oidcTokenFile The file path of OIDC token that is issued by the external IdP.
         * 
         * @return builder
         * 
         */
        public Builder oidcTokenFile(@Nullable Output<String> oidcTokenFile) {
            $.oidcTokenFile = oidcTokenFile;
            return this;
        }

        /**
         * @param oidcTokenFile The file path of OIDC token that is issued by the external IdP.
         * 
         * @return builder
         * 
         */
        public Builder oidcTokenFile(String oidcTokenFile) {
            return oidcTokenFile(Output.of(oidcTokenFile));
        }

        /**
         * @param policy The policy that specifies the permissions of the returned STS token. You can use this parameter to grant the STS token fewer permissions than the permissions granted to the RAM role.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy The policy that specifies the permissions of the returned STS token. You can use this parameter to grant the STS token fewer permissions than the permissions granted to the RAM role.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param roleArn ARN of a RAM role to assume prior to making API calls.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn ARN of a RAM role to assume prior to making API calls.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param roleSessionName The custom name of the role session. Set this parameter based on your business requirements. In most cases, this parameter is set to the identity of the user who calls the operation, for example, the username.
         * 
         * @return builder
         * 
         */
        public Builder roleSessionName(@Nullable Output<String> roleSessionName) {
            $.roleSessionName = roleSessionName;
            return this;
        }

        /**
         * @param roleSessionName The custom name of the role session. Set this parameter based on your business requirements. In most cases, this parameter is set to the identity of the user who calls the operation, for example, the username.
         * 
         * @return builder
         * 
         */
        public Builder roleSessionName(String roleSessionName) {
            return roleSessionName(Output.of(roleSessionName));
        }

        /**
         * @param sessionExpiration The validity period of the STS token. Unit: seconds. Default value: 3600. Minimum value: 900. Maximum value: the value of the MaxSessionDuration parameter when creating a ram role.
         * 
         * @return builder
         * 
         */
        public Builder sessionExpiration(@Nullable Output<Integer> sessionExpiration) {
            $.sessionExpiration = sessionExpiration;
            return this;
        }

        /**
         * @param sessionExpiration The validity period of the STS token. Unit: seconds. Default value: 3600. Minimum value: 900. Maximum value: the value of the MaxSessionDuration parameter when creating a ram role.
         * 
         * @return builder
         * 
         */
        public Builder sessionExpiration(Integer sessionExpiration) {
            return sessionExpiration(Output.of(sessionExpiration));
        }

        public ProviderAssumeRoleWithOidcArgs build() {
            if ($.oidcProviderArn == null) {
                throw new MissingRequiredPropertyException("ProviderAssumeRoleWithOidcArgs", "oidcProviderArn");
            }
            if ($.roleArn == null) {
                throw new MissingRequiredPropertyException("ProviderAssumeRoleWithOidcArgs", "roleArn");
            }
            return $;
        }
    }

}
