// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.message.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceQueuesQueue {
    /**
     * @return The total number of messages that are in the Active state in the queue. The value is an approximate number.
     * 
     */
    private Integer activeMessages;
    /**
     * @return The time when the queue was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    private Integer createTime;
    /**
     * @return The total number of the messages that are in the Delayed state in the queue. The value is an approximate number.
     * 
     */
    private Integer delayMessages;
    /**
     * @return The delay period after which all messages that are sent to the queue can be consumed. Unit: seconds.
     * 
     */
    private Integer delaySeconds;
    /**
     * @return The ID of the Queue. Its value is same as Queue Name.
     * 
     */
    private String id;
    /**
     * @return The total number of the messages that are in the Inactive state in the queue. The value is an approximate number.
     * 
     */
    private Integer inactiveMessages;
    /**
     * @return The time when the queue was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    private Integer lastModifyTime;
    /**
     * @return Indicates whether the log management feature is enabled for the queue.
     * 
     */
    private Boolean loggingEnabled;
    /**
     * @return The maximum size of a message body that can be sent to the queue. Unit: bytes.
     * 
     */
    private Integer maximumMessageSize;
    /**
     * @return The maximum period for which a message can be retained in the queue. A message that is sent to the queue can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is consumed. Unit: seconds.
     * 
     */
    private Integer messageRetentionPeriod;
    /**
     * @return The maximum period for which a ReceiveMessage request waits if no message is available in the queue. Unit: seconds.
     * 
     */
    private Integer pollingWaitSeconds;
    /**
     * @return The internal url of the queue.
     * 
     */
    private String queueInternalUrl;
    /**
     * @return The name of the queue.
     * 
     */
    private String queueName;
    /**
     * @return The url of the queue.
     * 
     */
    private String queueUrl;
    /**
     * @return The invisibility period for which the received message remains the Inactive state. Unit: seconds.
     * 
     */
    private Integer visibilityTimeout;

    private GetServiceQueuesQueue() {}
    /**
     * @return The total number of messages that are in the Active state in the queue. The value is an approximate number.
     * 
     */
    public Integer activeMessages() {
        return this.activeMessages;
    }
    /**
     * @return The time when the queue was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    public Integer createTime() {
        return this.createTime;
    }
    /**
     * @return The total number of the messages that are in the Delayed state in the queue. The value is an approximate number.
     * 
     */
    public Integer delayMessages() {
        return this.delayMessages;
    }
    /**
     * @return The delay period after which all messages that are sent to the queue can be consumed. Unit: seconds.
     * 
     */
    public Integer delaySeconds() {
        return this.delaySeconds;
    }
    /**
     * @return The ID of the Queue. Its value is same as Queue Name.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The total number of the messages that are in the Inactive state in the queue. The value is an approximate number.
     * 
     */
    public Integer inactiveMessages() {
        return this.inactiveMessages;
    }
    /**
     * @return The time when the queue was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
     * 
     */
    public Integer lastModifyTime() {
        return this.lastModifyTime;
    }
    /**
     * @return Indicates whether the log management feature is enabled for the queue.
     * 
     */
    public Boolean loggingEnabled() {
        return this.loggingEnabled;
    }
    /**
     * @return The maximum size of a message body that can be sent to the queue. Unit: bytes.
     * 
     */
    public Integer maximumMessageSize() {
        return this.maximumMessageSize;
    }
    /**
     * @return The maximum period for which a message can be retained in the queue. A message that is sent to the queue can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is consumed. Unit: seconds.
     * 
     */
    public Integer messageRetentionPeriod() {
        return this.messageRetentionPeriod;
    }
    /**
     * @return The maximum period for which a ReceiveMessage request waits if no message is available in the queue. Unit: seconds.
     * 
     */
    public Integer pollingWaitSeconds() {
        return this.pollingWaitSeconds;
    }
    /**
     * @return The internal url of the queue.
     * 
     */
    public String queueInternalUrl() {
        return this.queueInternalUrl;
    }
    /**
     * @return The name of the queue.
     * 
     */
    public String queueName() {
        return this.queueName;
    }
    /**
     * @return The url of the queue.
     * 
     */
    public String queueUrl() {
        return this.queueUrl;
    }
    /**
     * @return The invisibility period for which the received message remains the Inactive state. Unit: seconds.
     * 
     */
    public Integer visibilityTimeout() {
        return this.visibilityTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceQueuesQueue defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activeMessages;
        private Integer createTime;
        private Integer delayMessages;
        private Integer delaySeconds;
        private String id;
        private Integer inactiveMessages;
        private Integer lastModifyTime;
        private Boolean loggingEnabled;
        private Integer maximumMessageSize;
        private Integer messageRetentionPeriod;
        private Integer pollingWaitSeconds;
        private String queueInternalUrl;
        private String queueName;
        private String queueUrl;
        private Integer visibilityTimeout;
        public Builder() {}
        public Builder(GetServiceQueuesQueue defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeMessages = defaults.activeMessages;
    	      this.createTime = defaults.createTime;
    	      this.delayMessages = defaults.delayMessages;
    	      this.delaySeconds = defaults.delaySeconds;
    	      this.id = defaults.id;
    	      this.inactiveMessages = defaults.inactiveMessages;
    	      this.lastModifyTime = defaults.lastModifyTime;
    	      this.loggingEnabled = defaults.loggingEnabled;
    	      this.maximumMessageSize = defaults.maximumMessageSize;
    	      this.messageRetentionPeriod = defaults.messageRetentionPeriod;
    	      this.pollingWaitSeconds = defaults.pollingWaitSeconds;
    	      this.queueInternalUrl = defaults.queueInternalUrl;
    	      this.queueName = defaults.queueName;
    	      this.queueUrl = defaults.queueUrl;
    	      this.visibilityTimeout = defaults.visibilityTimeout;
        }

        @CustomType.Setter
        public Builder activeMessages(Integer activeMessages) {
            if (activeMessages == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "activeMessages");
            }
            this.activeMessages = activeMessages;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(Integer createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder delayMessages(Integer delayMessages) {
            if (delayMessages == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "delayMessages");
            }
            this.delayMessages = delayMessages;
            return this;
        }
        @CustomType.Setter
        public Builder delaySeconds(Integer delaySeconds) {
            if (delaySeconds == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "delaySeconds");
            }
            this.delaySeconds = delaySeconds;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inactiveMessages(Integer inactiveMessages) {
            if (inactiveMessages == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "inactiveMessages");
            }
            this.inactiveMessages = inactiveMessages;
            return this;
        }
        @CustomType.Setter
        public Builder lastModifyTime(Integer lastModifyTime) {
            if (lastModifyTime == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "lastModifyTime");
            }
            this.lastModifyTime = lastModifyTime;
            return this;
        }
        @CustomType.Setter
        public Builder loggingEnabled(Boolean loggingEnabled) {
            if (loggingEnabled == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "loggingEnabled");
            }
            this.loggingEnabled = loggingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder maximumMessageSize(Integer maximumMessageSize) {
            if (maximumMessageSize == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "maximumMessageSize");
            }
            this.maximumMessageSize = maximumMessageSize;
            return this;
        }
        @CustomType.Setter
        public Builder messageRetentionPeriod(Integer messageRetentionPeriod) {
            if (messageRetentionPeriod == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "messageRetentionPeriod");
            }
            this.messageRetentionPeriod = messageRetentionPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder pollingWaitSeconds(Integer pollingWaitSeconds) {
            if (pollingWaitSeconds == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "pollingWaitSeconds");
            }
            this.pollingWaitSeconds = pollingWaitSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder queueInternalUrl(String queueInternalUrl) {
            if (queueInternalUrl == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "queueInternalUrl");
            }
            this.queueInternalUrl = queueInternalUrl;
            return this;
        }
        @CustomType.Setter
        public Builder queueName(String queueName) {
            if (queueName == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "queueName");
            }
            this.queueName = queueName;
            return this;
        }
        @CustomType.Setter
        public Builder queueUrl(String queueUrl) {
            if (queueUrl == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "queueUrl");
            }
            this.queueUrl = queueUrl;
            return this;
        }
        @CustomType.Setter
        public Builder visibilityTimeout(Integer visibilityTimeout) {
            if (visibilityTimeout == null) {
              throw new MissingRequiredPropertyException("GetServiceQueuesQueue", "visibilityTimeout");
            }
            this.visibilityTimeout = visibilityTimeout;
            return this;
        }
        public GetServiceQueuesQueue build() {
            final var _resultValue = new GetServiceQueuesQueue();
            _resultValue.activeMessages = activeMessages;
            _resultValue.createTime = createTime;
            _resultValue.delayMessages = delayMessages;
            _resultValue.delaySeconds = delaySeconds;
            _resultValue.id = id;
            _resultValue.inactiveMessages = inactiveMessages;
            _resultValue.lastModifyTime = lastModifyTime;
            _resultValue.loggingEnabled = loggingEnabled;
            _resultValue.maximumMessageSize = maximumMessageSize;
            _resultValue.messageRetentionPeriod = messageRetentionPeriod;
            _resultValue.pollingWaitSeconds = pollingWaitSeconds;
            _resultValue.queueInternalUrl = queueInternalUrl;
            _resultValue.queueName = queueName;
            _resultValue.queueUrl = queueUrl;
            _resultValue.visibilityTimeout = visibilityTimeout;
            return _resultValue;
        }
    }
}
