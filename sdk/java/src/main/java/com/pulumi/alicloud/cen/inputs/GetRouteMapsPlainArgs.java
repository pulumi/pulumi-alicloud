// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cen.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRouteMapsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRouteMapsPlainArgs Empty = new GetRouteMapsPlainArgs();

    /**
     * The ID of the CEN instance.
     * 
     */
    @Import(name="cenId", required=true)
    private String cenId;

    /**
     * @return The ID of the CEN instance.
     * 
     */
    public String cenId() {
        return this.cenId;
    }

    /**
     * The ID of the region to which the CEN instance belongs.
     * 
     */
    @Import(name="cenRegionId")
    private @Nullable String cenRegionId;

    /**
     * @return The ID of the region to which the CEN instance belongs.
     * 
     */
    public Optional<String> cenRegionId() {
        return Optional.ofNullable(this.cenRegionId);
    }

    /**
     * A regex string to filter CEN route map by description.
     * 
     */
    @Import(name="descriptionRegex")
    private @Nullable String descriptionRegex;

    /**
     * @return A regex string to filter CEN route map by description.
     * 
     */
    public Optional<String> descriptionRegex() {
        return Optional.ofNullable(this.descriptionRegex);
    }

    /**
     * A list of CEN route map IDs. Each item formats as `&lt;cen_id&gt;:&lt;route_map_id&gt;`.
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return A list of CEN route map IDs. Each item formats as `&lt;cen_id&gt;:&lt;route_map_id&gt;`.
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * File name where to save data source results (after running `pulumi preview`).
     * 
     */
    @Import(name="outputFile")
    private @Nullable String outputFile;

    /**
     * @return File name where to save data source results (after running `pulumi preview`).
     * 
     */
    public Optional<String> outputFile() {
        return Optional.ofNullable(this.outputFile);
    }

    /**
     * The status of the route map, including `Creating`, `Active` and `Deleting`.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of the route map, including `Creating`, `Active` and `Deleting`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The direction in which the route map is applied, including `RegionIn` and `RegionOut`.
     * 
     */
    @Import(name="transmitDirection")
    private @Nullable String transmitDirection;

    /**
     * @return The direction in which the route map is applied, including `RegionIn` and `RegionOut`.
     * 
     */
    public Optional<String> transmitDirection() {
        return Optional.ofNullable(this.transmitDirection);
    }

    private GetRouteMapsPlainArgs() {}

    private GetRouteMapsPlainArgs(GetRouteMapsPlainArgs $) {
        this.cenId = $.cenId;
        this.cenRegionId = $.cenRegionId;
        this.descriptionRegex = $.descriptionRegex;
        this.ids = $.ids;
        this.outputFile = $.outputFile;
        this.status = $.status;
        this.transmitDirection = $.transmitDirection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRouteMapsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRouteMapsPlainArgs $;

        public Builder() {
            $ = new GetRouteMapsPlainArgs();
        }

        public Builder(GetRouteMapsPlainArgs defaults) {
            $ = new GetRouteMapsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cenId The ID of the CEN instance.
         * 
         * @return builder
         * 
         */
        public Builder cenId(String cenId) {
            $.cenId = cenId;
            return this;
        }

        /**
         * @param cenRegionId The ID of the region to which the CEN instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder cenRegionId(@Nullable String cenRegionId) {
            $.cenRegionId = cenRegionId;
            return this;
        }

        /**
         * @param descriptionRegex A regex string to filter CEN route map by description.
         * 
         * @return builder
         * 
         */
        public Builder descriptionRegex(@Nullable String descriptionRegex) {
            $.descriptionRegex = descriptionRegex;
            return this;
        }

        /**
         * @param ids A list of CEN route map IDs. Each item formats as `&lt;cen_id&gt;:&lt;route_map_id&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids A list of CEN route map IDs. Each item formats as `&lt;cen_id&gt;:&lt;route_map_id&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param outputFile File name where to save data source results (after running `pulumi preview`).
         * 
         * @return builder
         * 
         */
        public Builder outputFile(@Nullable String outputFile) {
            $.outputFile = outputFile;
            return this;
        }

        /**
         * @param status The status of the route map, including `Creating`, `Active` and `Deleting`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param transmitDirection The direction in which the route map is applied, including `RegionIn` and `RegionOut`.
         * 
         * @return builder
         * 
         */
        public Builder transmitDirection(@Nullable String transmitDirection) {
            $.transmitDirection = transmitDirection;
            return this;
        }

        public GetRouteMapsPlainArgs build() {
            if ($.cenId == null) {
                throw new MissingRequiredPropertyException("GetRouteMapsPlainArgs", "cenId");
            }
            return $;
        }
    }

}
