// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ebs;

import com.pulumi.alicloud.ebs.inputs.SolutionInstanceParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SolutionInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SolutionInstanceArgs Empty = new SolutionInstanceArgs();

    /**
     * Solution Instance Description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Solution Instance Description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Solution Instance Creation Parameters. See `parameters` below.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<List<SolutionInstanceParameterArgs>> parameters;

    /**
     * @return Solution Instance Creation Parameters. See `parameters` below.
     * 
     */
    public Optional<Output<List<SolutionInstanceParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * Solution ID.
     * 
     */
    @Import(name="solutionId", required=true)
    private Output<String> solutionId;

    /**
     * @return Solution ID.
     * 
     */
    public Output<String> solutionId() {
        return this.solutionId;
    }

    /**
     * Solution Instance Name.
     * 
     */
    @Import(name="solutionInstanceName")
    private @Nullable Output<String> solutionInstanceName;

    /**
     * @return Solution Instance Name.
     * 
     */
    public Optional<Output<String>> solutionInstanceName() {
        return Optional.ofNullable(this.solutionInstanceName);
    }

    private SolutionInstanceArgs() {}

    private SolutionInstanceArgs(SolutionInstanceArgs $) {
        this.description = $.description;
        this.parameters = $.parameters;
        this.resourceGroupId = $.resourceGroupId;
        this.solutionId = $.solutionId;
        this.solutionInstanceName = $.solutionInstanceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SolutionInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SolutionInstanceArgs $;

        public Builder() {
            $ = new SolutionInstanceArgs();
        }

        public Builder(SolutionInstanceArgs defaults) {
            $ = new SolutionInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Solution Instance Description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Solution Instance Description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param parameters Solution Instance Creation Parameters. See `parameters` below.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<List<SolutionInstanceParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Solution Instance Creation Parameters. See `parameters` below.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<SolutionInstanceParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters Solution Instance Creation Parameters. See `parameters` below.
         * 
         * @return builder
         * 
         */
        public Builder parameters(SolutionInstanceParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param solutionId Solution ID.
         * 
         * @return builder
         * 
         */
        public Builder solutionId(Output<String> solutionId) {
            $.solutionId = solutionId;
            return this;
        }

        /**
         * @param solutionId Solution ID.
         * 
         * @return builder
         * 
         */
        public Builder solutionId(String solutionId) {
            return solutionId(Output.of(solutionId));
        }

        /**
         * @param solutionInstanceName Solution Instance Name.
         * 
         * @return builder
         * 
         */
        public Builder solutionInstanceName(@Nullable Output<String> solutionInstanceName) {
            $.solutionInstanceName = solutionInstanceName;
            return this;
        }

        /**
         * @param solutionInstanceName Solution Instance Name.
         * 
         * @return builder
         * 
         */
        public Builder solutionInstanceName(String solutionInstanceName) {
            return solutionInstanceName(Output.of(solutionInstanceName));
        }

        public SolutionInstanceArgs build() {
            if ($.solutionId == null) {
                throw new MissingRequiredPropertyException("SolutionInstanceArgs", "solutionId");
            }
            return $;
        }
    }

}
