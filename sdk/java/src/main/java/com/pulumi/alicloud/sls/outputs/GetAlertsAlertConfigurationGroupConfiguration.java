// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sls.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAlertsAlertConfigurationGroupConfiguration {
    /**
     * @return The field used for grouping evaluation.When type is set to custom, fields must be set.
     * 
     */
    private List<String> fields;
    /**
     * @return Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows:Fixedate: checks query and analysis results at regular intervals.Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
     * 
     */
    private String type;

    private GetAlertsAlertConfigurationGroupConfiguration() {}
    /**
     * @return The field used for grouping evaluation.When type is set to custom, fields must be set.
     * 
     */
    public List<String> fields() {
        return this.fields;
    }
    /**
     * @return Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows:Fixedate: checks query and analysis results at regular intervals.Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlertsAlertConfigurationGroupConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> fields;
        private String type;
        public Builder() {}
        public Builder(GetAlertsAlertConfigurationGroupConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fields = defaults.fields;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder fields(List<String> fields) {
            if (fields == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationGroupConfiguration", "fields");
            }
            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAlertsAlertConfigurationGroupConfiguration", "type");
            }
            this.type = type;
            return this;
        }
        public GetAlertsAlertConfigurationGroupConfiguration build() {
            final var _resultValue = new GetAlertsAlertConfigurationGroupConfiguration();
            _resultValue.fields = fields;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
