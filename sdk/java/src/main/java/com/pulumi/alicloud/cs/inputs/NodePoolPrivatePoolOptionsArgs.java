// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolPrivatePoolOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolPrivatePoolOptionsArgs Empty = new NodePoolPrivatePoolOptionsArgs();

    /**
     * The ID of the private node pool.
     * 
     */
    @Import(name="privatePoolOptionsId")
    private @Nullable Output<String> privatePoolOptionsId;

    /**
     * @return The ID of the private node pool.
     * 
     */
    public Optional<Output<String>> privatePoolOptionsId() {
        return Optional.ofNullable(this.privatePoolOptionsId);
    }

    /**
     * The type of private node pool. This parameter specifies the type of the private pool that you want to use to create instances. A private node pool is generated when an elasticity assurance or a capacity reservation service takes effect. The system selects a private node pool to launch instances. Valid values: `Open`: specifies an open private node pool. The system selects an open private node pool to launch instances. If no matching open private node pool is available, the resources in the public node pool are used. `Target`: specifies a private node pool. The system uses the resources of the specified private node pool to launch instances. If the specified private node pool is unavailable, instances cannot be started. `None`: no private node pool is used. The resources of private node pools are not used to launch the instances.
     * 
     */
    @Import(name="privatePoolOptionsMatchCriteria")
    private @Nullable Output<String> privatePoolOptionsMatchCriteria;

    /**
     * @return The type of private node pool. This parameter specifies the type of the private pool that you want to use to create instances. A private node pool is generated when an elasticity assurance or a capacity reservation service takes effect. The system selects a private node pool to launch instances. Valid values: `Open`: specifies an open private node pool. The system selects an open private node pool to launch instances. If no matching open private node pool is available, the resources in the public node pool are used. `Target`: specifies a private node pool. The system uses the resources of the specified private node pool to launch instances. If the specified private node pool is unavailable, instances cannot be started. `None`: no private node pool is used. The resources of private node pools are not used to launch the instances.
     * 
     */
    public Optional<Output<String>> privatePoolOptionsMatchCriteria() {
        return Optional.ofNullable(this.privatePoolOptionsMatchCriteria);
    }

    private NodePoolPrivatePoolOptionsArgs() {}

    private NodePoolPrivatePoolOptionsArgs(NodePoolPrivatePoolOptionsArgs $) {
        this.privatePoolOptionsId = $.privatePoolOptionsId;
        this.privatePoolOptionsMatchCriteria = $.privatePoolOptionsMatchCriteria;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolPrivatePoolOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolPrivatePoolOptionsArgs $;

        public Builder() {
            $ = new NodePoolPrivatePoolOptionsArgs();
        }

        public Builder(NodePoolPrivatePoolOptionsArgs defaults) {
            $ = new NodePoolPrivatePoolOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param privatePoolOptionsId The ID of the private node pool.
         * 
         * @return builder
         * 
         */
        public Builder privatePoolOptionsId(@Nullable Output<String> privatePoolOptionsId) {
            $.privatePoolOptionsId = privatePoolOptionsId;
            return this;
        }

        /**
         * @param privatePoolOptionsId The ID of the private node pool.
         * 
         * @return builder
         * 
         */
        public Builder privatePoolOptionsId(String privatePoolOptionsId) {
            return privatePoolOptionsId(Output.of(privatePoolOptionsId));
        }

        /**
         * @param privatePoolOptionsMatchCriteria The type of private node pool. This parameter specifies the type of the private pool that you want to use to create instances. A private node pool is generated when an elasticity assurance or a capacity reservation service takes effect. The system selects a private node pool to launch instances. Valid values: `Open`: specifies an open private node pool. The system selects an open private node pool to launch instances. If no matching open private node pool is available, the resources in the public node pool are used. `Target`: specifies a private node pool. The system uses the resources of the specified private node pool to launch instances. If the specified private node pool is unavailable, instances cannot be started. `None`: no private node pool is used. The resources of private node pools are not used to launch the instances.
         * 
         * @return builder
         * 
         */
        public Builder privatePoolOptionsMatchCriteria(@Nullable Output<String> privatePoolOptionsMatchCriteria) {
            $.privatePoolOptionsMatchCriteria = privatePoolOptionsMatchCriteria;
            return this;
        }

        /**
         * @param privatePoolOptionsMatchCriteria The type of private node pool. This parameter specifies the type of the private pool that you want to use to create instances. A private node pool is generated when an elasticity assurance or a capacity reservation service takes effect. The system selects a private node pool to launch instances. Valid values: `Open`: specifies an open private node pool. The system selects an open private node pool to launch instances. If no matching open private node pool is available, the resources in the public node pool are used. `Target`: specifies a private node pool. The system uses the resources of the specified private node pool to launch instances. If the specified private node pool is unavailable, instances cannot be started. `None`: no private node pool is used. The resources of private node pools are not used to launch the instances.
         * 
         * @return builder
         * 
         */
        public Builder privatePoolOptionsMatchCriteria(String privatePoolOptionsMatchCriteria) {
            return privatePoolOptionsMatchCriteria(Output.of(privatePoolOptionsMatchCriteria));
        }

        public NodePoolPrivatePoolOptionsArgs build() {
            return $;
        }
    }

}
