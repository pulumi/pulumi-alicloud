// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.selectdb.inputs;

import com.pulumi.alicloud.selectdb.inputs.DbInstanceDesiredSecurityIpListArgs;
import com.pulumi.alicloud.selectdb.inputs.DbInstanceInstanceNetInfoArgs;
import com.pulumi.alicloud.selectdb.inputs.DbInstanceSecurityIpListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final DbInstanceState Empty = new DbInstanceState();

    /**
     * The cache size in DBInstance on creating default cluster. The number should be divided by 100.
     * 
     */
    @Import(name="cacheSize")
    private @Nullable Output<Integer> cacheSize;

    /**
     * @return The cache size in DBInstance on creating default cluster. The number should be divided by 100.
     * 
     */
    public Optional<Output<Integer>> cacheSize() {
        return Optional.ofNullable(this.cacheSize);
    }

    /**
     * The sum of cache size for every `PayAsYouGo` clusters in DBInstance.
     * 
     */
    @Import(name="cacheSizePostpaid")
    private @Nullable Output<Integer> cacheSizePostpaid;

    /**
     * @return The sum of cache size for every `PayAsYouGo` clusters in DBInstance.
     * 
     */
    public Optional<Output<Integer>> cacheSizePostpaid() {
        return Optional.ofNullable(this.cacheSizePostpaid);
    }

    /**
     * The sum of cache size for every `Subscription` clusters in DBInstance.
     * 
     */
    @Import(name="cacheSizePrepaid")
    private @Nullable Output<Integer> cacheSizePrepaid;

    /**
     * @return The sum of cache size for every `Subscription` clusters in DBInstance.
     * 
     */
    public Optional<Output<Integer>> cacheSizePrepaid() {
        return Optional.ofNullable(this.cacheSizePrepaid);
    }

    /**
     * The sum of cluster counts for `PayAsYouGo` clusters in DBInstance.
     * 
     */
    @Import(name="clusterCountPostpaid")
    private @Nullable Output<Integer> clusterCountPostpaid;

    /**
     * @return The sum of cluster counts for `PayAsYouGo` clusters in DBInstance.
     * 
     */
    public Optional<Output<Integer>> clusterCountPostpaid() {
        return Optional.ofNullable(this.clusterCountPostpaid);
    }

    /**
     * The sum of cluster counts for `Subscription` clusters in DBInstance.
     * 
     */
    @Import(name="clusterCountPrepaid")
    private @Nullable Output<Integer> clusterCountPrepaid;

    /**
     * @return The sum of cluster counts for `Subscription` clusters in DBInstance.
     * 
     */
    public Optional<Output<Integer>> clusterCountPrepaid() {
        return Optional.ofNullable(this.clusterCountPrepaid);
    }

    /**
     * The sum of cpu resource amount for every `PayAsYouGo` clusters in DBInstance.
     * 
     */
    @Import(name="cpuPostpaid")
    private @Nullable Output<Integer> cpuPostpaid;

    /**
     * @return The sum of cpu resource amount for every `PayAsYouGo` clusters in DBInstance.
     * 
     */
    public Optional<Output<Integer>> cpuPostpaid() {
        return Optional.ofNullable(this.cpuPostpaid);
    }

    /**
     * The sum of cpu resource amount for every `Subscription` clusters in DBInstance.
     * 
     */
    @Import(name="cpuPrepaid")
    private @Nullable Output<Integer> cpuPrepaid;

    /**
     * @return The sum of cpu resource amount for every `Subscription` clusters in DBInstance.
     * 
     */
    public Optional<Output<Integer>> cpuPrepaid() {
        return Optional.ofNullable(this.cpuPrepaid);
    }

    /**
     * The class for default cluster in DBInstance. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     * 
     */
    @Import(name="dbInstanceClass")
    private @Nullable Output<String> dbInstanceClass;

    /**
     * @return The class for default cluster in DBInstance. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     * 
     */
    public Optional<Output<String>> dbInstanceClass() {
        return Optional.ofNullable(this.dbInstanceClass);
    }

    /**
     * The DBInstance description.
     * 
     */
    @Import(name="dbInstanceDescription")
    private @Nullable Output<String> dbInstanceDescription;

    /**
     * @return The DBInstance description.
     * 
     */
    public Optional<Output<String>> dbInstanceDescription() {
        return Optional.ofNullable(this.dbInstanceDescription);
    }

    /**
     * The modified IP address whitelists. See `desired_security_ip_lists` below.
     * 
     */
    @Import(name="desiredSecurityIpLists")
    private @Nullable Output<List<DbInstanceDesiredSecurityIpListArgs>> desiredSecurityIpLists;

    /**
     * @return The modified IP address whitelists. See `desired_security_ip_lists` below.
     * 
     */
    public Optional<Output<List<DbInstanceDesiredSecurityIpListArgs>>> desiredSecurityIpLists() {
        return Optional.ofNullable(this.desiredSecurityIpLists);
    }

    /**
     * If DBInstance need to open public network, set it to `true`.
     * 
     */
    @Import(name="enablePublicNetwork")
    private @Nullable Output<Boolean> enablePublicNetwork;

    /**
     * @return If DBInstance need to open public network, set it to `true`.
     * 
     */
    public Optional<Output<Boolean>> enablePublicNetwork() {
        return Optional.ofNullable(this.enablePublicNetwork);
    }

    /**
     * The engine of DBInstance. Always `selectdb`.
     * 
     */
    @Import(name="engine")
    private @Nullable Output<String> engine;

    /**
     * @return The engine of DBInstance. Always `selectdb`.
     * 
     */
    public Optional<Output<String>> engine() {
        return Optional.ofNullable(this.engine);
    }

    /**
     * The current DBInstance minor version.
     * 
     */
    @Import(name="engineMinorVersion")
    private @Nullable Output<String> engineMinorVersion;

    /**
     * @return The current DBInstance minor version.
     * 
     */
    public Optional<Output<String>> engineMinorVersion() {
        return Optional.ofNullable(this.engineMinorVersion);
    }

    /**
     * The time when DBInstance is created.
     * 
     */
    @Import(name="gmtCreated")
    private @Nullable Output<String> gmtCreated;

    /**
     * @return The time when DBInstance is created.
     * 
     */
    public Optional<Output<String>> gmtCreated() {
        return Optional.ofNullable(this.gmtCreated);
    }

    /**
     * The time when DBInstance will be expired. Available on `Subscription` DBInstance.
     * 
     */
    @Import(name="gmtExpired")
    private @Nullable Output<String> gmtExpired;

    /**
     * @return The time when DBInstance will be expired. Available on `Subscription` DBInstance.
     * 
     */
    public Optional<Output<String>> gmtExpired() {
        return Optional.ofNullable(this.gmtExpired);
    }

    /**
     * The time when DBInstance is modified.
     * 
     */
    @Import(name="gmtModified")
    private @Nullable Output<String> gmtModified;

    /**
     * @return The time when DBInstance is modified.
     * 
     */
    public Optional<Output<String>> gmtModified() {
        return Optional.ofNullable(this.gmtModified);
    }

    /**
     * The net infos for instances.
     * 
     */
    @Import(name="instanceNetInfos")
    private @Nullable Output<List<DbInstanceInstanceNetInfoArgs>> instanceNetInfos;

    /**
     * @return The net infos for instances.
     * 
     */
    public Optional<Output<List<DbInstanceInstanceNetInfoArgs>>> instanceNetInfos() {
        return Optional.ofNullable(this.instanceNetInfos);
    }

    /**
     * The lock mode of the instance. Set the value to lock, which specifies that the instance is locked when it automatically expires or has an overdue payment.
     * 
     */
    @Import(name="lockMode")
    private @Nullable Output<String> lockMode;

    /**
     * @return The lock mode of the instance. Set the value to lock, which specifies that the instance is locked when it automatically expires or has an overdue payment.
     * 
     */
    public Optional<Output<String>> lockMode() {
        return Optional.ofNullable(this.lockMode);
    }

    /**
     * The reason why the instance is locked.
     * 
     */
    @Import(name="lockReason")
    private @Nullable Output<String> lockReason;

    /**
     * @return The reason why the instance is locked.
     * 
     */
    public Optional<Output<String>> lockReason() {
        return Optional.ofNullable(this.lockReason);
    }

    /**
     * The sum of memory resource amount offor every `PayAsYouGo` clusters in DBInstance.
     * 
     */
    @Import(name="memoryPostpaid")
    private @Nullable Output<Integer> memoryPostpaid;

    /**
     * @return The sum of memory resource amount offor every `PayAsYouGo` clusters in DBInstance.
     * 
     */
    public Optional<Output<Integer>> memoryPostpaid() {
        return Optional.ofNullable(this.memoryPostpaid);
    }

    /**
     * The sum of memory resource amount offor every `Subscription` clusters in DBInstance.
     * 
     */
    @Import(name="memoryPrepaid")
    private @Nullable Output<Integer> memoryPrepaid;

    /**
     * @return The sum of memory resource amount offor every `Subscription` clusters in DBInstance.
     * 
     */
    public Optional<Output<Integer>> memoryPrepaid() {
        return Optional.ofNullable(this.memoryPrepaid);
    }

    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * It is valid when payment_type is `Subscription`. Valid values are `Year`, `Month`.
     * 
     */
    @Import(name="period")
    private @Nullable Output<String> period;

    /**
     * @return It is valid when payment_type is `Subscription`. Valid values are `Year`, `Month`.
     * 
     */
    public Optional<Output<String>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The duration that you will buy DBInstance. It is valid when payment_type is `Subscription`. Valid values: [1~9], 12, 24, 36.
     * 
     */
    @Import(name="periodTime")
    private @Nullable Output<Integer> periodTime;

    /**
     * @return The duration that you will buy DBInstance. It is valid when payment_type is `Subscription`. Valid values: [1~9], 12, 24, 36.
     * 
     */
    public Optional<Output<Integer>> periodTime() {
        return Optional.ofNullable(this.periodTime);
    }

    /**
     * The region ID of the instance.
     * 
     */
    @Import(name="regionId")
    private @Nullable Output<String> regionId;

    /**
     * @return The region ID of the instance.
     * 
     */
    public Optional<Output<String>> regionId() {
        return Optional.ofNullable(this.regionId);
    }

    /**
     * The details about each IP address whitelist returned.
     * 
     */
    @Import(name="securityIpLists")
    private @Nullable Output<List<DbInstanceSecurityIpListArgs>> securityIpLists;

    /**
     * @return The details about each IP address whitelist returned.
     * 
     */
    public Optional<Output<List<DbInstanceSecurityIpListArgs>>> securityIpLists() {
        return Optional.ofNullable(this.securityIpLists);
    }

    /**
     * The status of the resource. Valid values: `ACTIVE`,`STOPPED`,`STARTING`,`RESTART`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the resource. Valid values: `ACTIVE`,`STOPPED`,`STARTING`,`RESTART`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The sub domain of DBInstance.
     * 
     */
    @Import(name="subDomain")
    private @Nullable Output<String> subDomain;

    /**
     * @return The sub domain of DBInstance.
     * 
     */
    public Optional<Output<String>> subDomain() {
        return Optional.ofNullable(this.subDomain);
    }

    /**
     * A mapping of tags to assign to the resource.
     * - Key: It can be up to 64 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It cannot be a null string.
     * - Value: It can be up to 128 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It can be a null string.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * - Key: It can be up to 64 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It cannot be a null string.
     * - Value: It can be up to 128 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It can be a null string.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The DBInstance minor version want to upgraded to.
     * 
     */
    @Import(name="upgradedEngineMinorVersion")
    private @Nullable Output<String> upgradedEngineMinorVersion;

    /**
     * @return The DBInstance minor version want to upgraded to.
     * 
     */
    public Optional<Output<String>> upgradedEngineMinorVersion() {
        return Optional.ofNullable(this.upgradedEngineMinorVersion);
    }

    /**
     * The ID of the VPC for DBInstance.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The ID of the VPC for DBInstance.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The ID of vswitch for DBInstance.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The ID of vswitch for DBInstance.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    /**
     * The ID of zone for DBInstance.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The ID of zone for DBInstance.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private DbInstanceState() {}

    private DbInstanceState(DbInstanceState $) {
        this.cacheSize = $.cacheSize;
        this.cacheSizePostpaid = $.cacheSizePostpaid;
        this.cacheSizePrepaid = $.cacheSizePrepaid;
        this.clusterCountPostpaid = $.clusterCountPostpaid;
        this.clusterCountPrepaid = $.clusterCountPrepaid;
        this.cpuPostpaid = $.cpuPostpaid;
        this.cpuPrepaid = $.cpuPrepaid;
        this.dbInstanceClass = $.dbInstanceClass;
        this.dbInstanceDescription = $.dbInstanceDescription;
        this.desiredSecurityIpLists = $.desiredSecurityIpLists;
        this.enablePublicNetwork = $.enablePublicNetwork;
        this.engine = $.engine;
        this.engineMinorVersion = $.engineMinorVersion;
        this.gmtCreated = $.gmtCreated;
        this.gmtExpired = $.gmtExpired;
        this.gmtModified = $.gmtModified;
        this.instanceNetInfos = $.instanceNetInfos;
        this.lockMode = $.lockMode;
        this.lockReason = $.lockReason;
        this.memoryPostpaid = $.memoryPostpaid;
        this.memoryPrepaid = $.memoryPrepaid;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.periodTime = $.periodTime;
        this.regionId = $.regionId;
        this.securityIpLists = $.securityIpLists;
        this.status = $.status;
        this.subDomain = $.subDomain;
        this.tags = $.tags;
        this.upgradedEngineMinorVersion = $.upgradedEngineMinorVersion;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbInstanceState $;

        public Builder() {
            $ = new DbInstanceState();
        }

        public Builder(DbInstanceState defaults) {
            $ = new DbInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheSize The cache size in DBInstance on creating default cluster. The number should be divided by 100.
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(@Nullable Output<Integer> cacheSize) {
            $.cacheSize = cacheSize;
            return this;
        }

        /**
         * @param cacheSize The cache size in DBInstance on creating default cluster. The number should be divided by 100.
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(Integer cacheSize) {
            return cacheSize(Output.of(cacheSize));
        }

        /**
         * @param cacheSizePostpaid The sum of cache size for every `PayAsYouGo` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder cacheSizePostpaid(@Nullable Output<Integer> cacheSizePostpaid) {
            $.cacheSizePostpaid = cacheSizePostpaid;
            return this;
        }

        /**
         * @param cacheSizePostpaid The sum of cache size for every `PayAsYouGo` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder cacheSizePostpaid(Integer cacheSizePostpaid) {
            return cacheSizePostpaid(Output.of(cacheSizePostpaid));
        }

        /**
         * @param cacheSizePrepaid The sum of cache size for every `Subscription` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder cacheSizePrepaid(@Nullable Output<Integer> cacheSizePrepaid) {
            $.cacheSizePrepaid = cacheSizePrepaid;
            return this;
        }

        /**
         * @param cacheSizePrepaid The sum of cache size for every `Subscription` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder cacheSizePrepaid(Integer cacheSizePrepaid) {
            return cacheSizePrepaid(Output.of(cacheSizePrepaid));
        }

        /**
         * @param clusterCountPostpaid The sum of cluster counts for `PayAsYouGo` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder clusterCountPostpaid(@Nullable Output<Integer> clusterCountPostpaid) {
            $.clusterCountPostpaid = clusterCountPostpaid;
            return this;
        }

        /**
         * @param clusterCountPostpaid The sum of cluster counts for `PayAsYouGo` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder clusterCountPostpaid(Integer clusterCountPostpaid) {
            return clusterCountPostpaid(Output.of(clusterCountPostpaid));
        }

        /**
         * @param clusterCountPrepaid The sum of cluster counts for `Subscription` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder clusterCountPrepaid(@Nullable Output<Integer> clusterCountPrepaid) {
            $.clusterCountPrepaid = clusterCountPrepaid;
            return this;
        }

        /**
         * @param clusterCountPrepaid The sum of cluster counts for `Subscription` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder clusterCountPrepaid(Integer clusterCountPrepaid) {
            return clusterCountPrepaid(Output.of(clusterCountPrepaid));
        }

        /**
         * @param cpuPostpaid The sum of cpu resource amount for every `PayAsYouGo` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder cpuPostpaid(@Nullable Output<Integer> cpuPostpaid) {
            $.cpuPostpaid = cpuPostpaid;
            return this;
        }

        /**
         * @param cpuPostpaid The sum of cpu resource amount for every `PayAsYouGo` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder cpuPostpaid(Integer cpuPostpaid) {
            return cpuPostpaid(Output.of(cpuPostpaid));
        }

        /**
         * @param cpuPrepaid The sum of cpu resource amount for every `Subscription` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder cpuPrepaid(@Nullable Output<Integer> cpuPrepaid) {
            $.cpuPrepaid = cpuPrepaid;
            return this;
        }

        /**
         * @param cpuPrepaid The sum of cpu resource amount for every `Subscription` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder cpuPrepaid(Integer cpuPrepaid) {
            return cpuPrepaid(Output.of(cpuPrepaid));
        }

        /**
         * @param dbInstanceClass The class for default cluster in DBInstance. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceClass(@Nullable Output<String> dbInstanceClass) {
            $.dbInstanceClass = dbInstanceClass;
            return this;
        }

        /**
         * @param dbInstanceClass The class for default cluster in DBInstance. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceClass(String dbInstanceClass) {
            return dbInstanceClass(Output.of(dbInstanceClass));
        }

        /**
         * @param dbInstanceDescription The DBInstance description.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceDescription(@Nullable Output<String> dbInstanceDescription) {
            $.dbInstanceDescription = dbInstanceDescription;
            return this;
        }

        /**
         * @param dbInstanceDescription The DBInstance description.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceDescription(String dbInstanceDescription) {
            return dbInstanceDescription(Output.of(dbInstanceDescription));
        }

        /**
         * @param desiredSecurityIpLists The modified IP address whitelists. See `desired_security_ip_lists` below.
         * 
         * @return builder
         * 
         */
        public Builder desiredSecurityIpLists(@Nullable Output<List<DbInstanceDesiredSecurityIpListArgs>> desiredSecurityIpLists) {
            $.desiredSecurityIpLists = desiredSecurityIpLists;
            return this;
        }

        /**
         * @param desiredSecurityIpLists The modified IP address whitelists. See `desired_security_ip_lists` below.
         * 
         * @return builder
         * 
         */
        public Builder desiredSecurityIpLists(List<DbInstanceDesiredSecurityIpListArgs> desiredSecurityIpLists) {
            return desiredSecurityIpLists(Output.of(desiredSecurityIpLists));
        }

        /**
         * @param desiredSecurityIpLists The modified IP address whitelists. See `desired_security_ip_lists` below.
         * 
         * @return builder
         * 
         */
        public Builder desiredSecurityIpLists(DbInstanceDesiredSecurityIpListArgs... desiredSecurityIpLists) {
            return desiredSecurityIpLists(List.of(desiredSecurityIpLists));
        }

        /**
         * @param enablePublicNetwork If DBInstance need to open public network, set it to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enablePublicNetwork(@Nullable Output<Boolean> enablePublicNetwork) {
            $.enablePublicNetwork = enablePublicNetwork;
            return this;
        }

        /**
         * @param enablePublicNetwork If DBInstance need to open public network, set it to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enablePublicNetwork(Boolean enablePublicNetwork) {
            return enablePublicNetwork(Output.of(enablePublicNetwork));
        }

        /**
         * @param engine The engine of DBInstance. Always `selectdb`.
         * 
         * @return builder
         * 
         */
        public Builder engine(@Nullable Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine The engine of DBInstance. Always `selectdb`.
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param engineMinorVersion The current DBInstance minor version.
         * 
         * @return builder
         * 
         */
        public Builder engineMinorVersion(@Nullable Output<String> engineMinorVersion) {
            $.engineMinorVersion = engineMinorVersion;
            return this;
        }

        /**
         * @param engineMinorVersion The current DBInstance minor version.
         * 
         * @return builder
         * 
         */
        public Builder engineMinorVersion(String engineMinorVersion) {
            return engineMinorVersion(Output.of(engineMinorVersion));
        }

        /**
         * @param gmtCreated The time when DBInstance is created.
         * 
         * @return builder
         * 
         */
        public Builder gmtCreated(@Nullable Output<String> gmtCreated) {
            $.gmtCreated = gmtCreated;
            return this;
        }

        /**
         * @param gmtCreated The time when DBInstance is created.
         * 
         * @return builder
         * 
         */
        public Builder gmtCreated(String gmtCreated) {
            return gmtCreated(Output.of(gmtCreated));
        }

        /**
         * @param gmtExpired The time when DBInstance will be expired. Available on `Subscription` DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder gmtExpired(@Nullable Output<String> gmtExpired) {
            $.gmtExpired = gmtExpired;
            return this;
        }

        /**
         * @param gmtExpired The time when DBInstance will be expired. Available on `Subscription` DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder gmtExpired(String gmtExpired) {
            return gmtExpired(Output.of(gmtExpired));
        }

        /**
         * @param gmtModified The time when DBInstance is modified.
         * 
         * @return builder
         * 
         */
        public Builder gmtModified(@Nullable Output<String> gmtModified) {
            $.gmtModified = gmtModified;
            return this;
        }

        /**
         * @param gmtModified The time when DBInstance is modified.
         * 
         * @return builder
         * 
         */
        public Builder gmtModified(String gmtModified) {
            return gmtModified(Output.of(gmtModified));
        }

        /**
         * @param instanceNetInfos The net infos for instances.
         * 
         * @return builder
         * 
         */
        public Builder instanceNetInfos(@Nullable Output<List<DbInstanceInstanceNetInfoArgs>> instanceNetInfos) {
            $.instanceNetInfos = instanceNetInfos;
            return this;
        }

        /**
         * @param instanceNetInfos The net infos for instances.
         * 
         * @return builder
         * 
         */
        public Builder instanceNetInfos(List<DbInstanceInstanceNetInfoArgs> instanceNetInfos) {
            return instanceNetInfos(Output.of(instanceNetInfos));
        }

        /**
         * @param instanceNetInfos The net infos for instances.
         * 
         * @return builder
         * 
         */
        public Builder instanceNetInfos(DbInstanceInstanceNetInfoArgs... instanceNetInfos) {
            return instanceNetInfos(List.of(instanceNetInfos));
        }

        /**
         * @param lockMode The lock mode of the instance. Set the value to lock, which specifies that the instance is locked when it automatically expires or has an overdue payment.
         * 
         * @return builder
         * 
         */
        public Builder lockMode(@Nullable Output<String> lockMode) {
            $.lockMode = lockMode;
            return this;
        }

        /**
         * @param lockMode The lock mode of the instance. Set the value to lock, which specifies that the instance is locked when it automatically expires or has an overdue payment.
         * 
         * @return builder
         * 
         */
        public Builder lockMode(String lockMode) {
            return lockMode(Output.of(lockMode));
        }

        /**
         * @param lockReason The reason why the instance is locked.
         * 
         * @return builder
         * 
         */
        public Builder lockReason(@Nullable Output<String> lockReason) {
            $.lockReason = lockReason;
            return this;
        }

        /**
         * @param lockReason The reason why the instance is locked.
         * 
         * @return builder
         * 
         */
        public Builder lockReason(String lockReason) {
            return lockReason(Output.of(lockReason));
        }

        /**
         * @param memoryPostpaid The sum of memory resource amount offor every `PayAsYouGo` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder memoryPostpaid(@Nullable Output<Integer> memoryPostpaid) {
            $.memoryPostpaid = memoryPostpaid;
            return this;
        }

        /**
         * @param memoryPostpaid The sum of memory resource amount offor every `PayAsYouGo` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder memoryPostpaid(Integer memoryPostpaid) {
            return memoryPostpaid(Output.of(memoryPostpaid));
        }

        /**
         * @param memoryPrepaid The sum of memory resource amount offor every `Subscription` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder memoryPrepaid(@Nullable Output<Integer> memoryPrepaid) {
            $.memoryPrepaid = memoryPrepaid;
            return this;
        }

        /**
         * @param memoryPrepaid The sum of memory resource amount offor every `Subscription` clusters in DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder memoryPrepaid(Integer memoryPrepaid) {
            return memoryPrepaid(Output.of(memoryPrepaid));
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period It is valid when payment_type is `Subscription`. Valid values are `Year`, `Month`.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<String> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period It is valid when payment_type is `Subscription`. Valid values are `Year`, `Month`.
         * 
         * @return builder
         * 
         */
        public Builder period(String period) {
            return period(Output.of(period));
        }

        /**
         * @param periodTime The duration that you will buy DBInstance. It is valid when payment_type is `Subscription`. Valid values: [1~9], 12, 24, 36.
         * 
         * @return builder
         * 
         */
        public Builder periodTime(@Nullable Output<Integer> periodTime) {
            $.periodTime = periodTime;
            return this;
        }

        /**
         * @param periodTime The duration that you will buy DBInstance. It is valid when payment_type is `Subscription`. Valid values: [1~9], 12, 24, 36.
         * 
         * @return builder
         * 
         */
        public Builder periodTime(Integer periodTime) {
            return periodTime(Output.of(periodTime));
        }

        /**
         * @param regionId The region ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder regionId(@Nullable Output<String> regionId) {
            $.regionId = regionId;
            return this;
        }

        /**
         * @param regionId The region ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder regionId(String regionId) {
            return regionId(Output.of(regionId));
        }

        /**
         * @param securityIpLists The details about each IP address whitelist returned.
         * 
         * @return builder
         * 
         */
        public Builder securityIpLists(@Nullable Output<List<DbInstanceSecurityIpListArgs>> securityIpLists) {
            $.securityIpLists = securityIpLists;
            return this;
        }

        /**
         * @param securityIpLists The details about each IP address whitelist returned.
         * 
         * @return builder
         * 
         */
        public Builder securityIpLists(List<DbInstanceSecurityIpListArgs> securityIpLists) {
            return securityIpLists(Output.of(securityIpLists));
        }

        /**
         * @param securityIpLists The details about each IP address whitelist returned.
         * 
         * @return builder
         * 
         */
        public Builder securityIpLists(DbInstanceSecurityIpListArgs... securityIpLists) {
            return securityIpLists(List.of(securityIpLists));
        }

        /**
         * @param status The status of the resource. Valid values: `ACTIVE`,`STOPPED`,`STARTING`,`RESTART`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the resource. Valid values: `ACTIVE`,`STOPPED`,`STARTING`,`RESTART`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subDomain The sub domain of DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder subDomain(@Nullable Output<String> subDomain) {
            $.subDomain = subDomain;
            return this;
        }

        /**
         * @param subDomain The sub domain of DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder subDomain(String subDomain) {
            return subDomain(Output.of(subDomain));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * - Key: It can be up to 64 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It cannot be a null string.
         * - Value: It can be up to 128 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It can be a null string.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * - Key: It can be up to 64 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It cannot be a null string.
         * - Value: It can be up to 128 characters in length. It cannot begin with &#34;aliyun&#34;, &#34;acs:&#34;, &#34;http://&#34;, or &#34;https://&#34;. It can be a null string.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param upgradedEngineMinorVersion The DBInstance minor version want to upgraded to.
         * 
         * @return builder
         * 
         */
        public Builder upgradedEngineMinorVersion(@Nullable Output<String> upgradedEngineMinorVersion) {
            $.upgradedEngineMinorVersion = upgradedEngineMinorVersion;
            return this;
        }

        /**
         * @param upgradedEngineMinorVersion The DBInstance minor version want to upgraded to.
         * 
         * @return builder
         * 
         */
        public Builder upgradedEngineMinorVersion(String upgradedEngineMinorVersion) {
            return upgradedEngineMinorVersion(Output.of(upgradedEngineMinorVersion));
        }

        /**
         * @param vpcId The ID of the VPC for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The ID of vswitch for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The ID of vswitch for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The ID of zone for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The ID of zone for DBInstance.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public DbInstanceState build() {
            return $;
        }
    }

}
