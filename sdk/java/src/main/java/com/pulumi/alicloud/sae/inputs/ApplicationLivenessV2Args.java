// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.sae.inputs;

import com.pulumi.alicloud.sae.inputs.ApplicationLivenessV2ExecArgs;
import com.pulumi.alicloud.sae.inputs.ApplicationLivenessV2HttpGetArgs;
import com.pulumi.alicloud.sae.inputs.ApplicationLivenessV2TcpSocketArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationLivenessV2Args extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationLivenessV2Args Empty = new ApplicationLivenessV2Args();

    /**
     * Execute. See `exec` below.
     * 
     */
    @Import(name="exec")
    private @Nullable Output<ApplicationLivenessV2ExecArgs> exec;

    /**
     * @return Execute. See `exec` below.
     * 
     */
    public Optional<Output<ApplicationLivenessV2ExecArgs>> exec() {
        return Optional.ofNullable(this.exec);
    }

    /**
     * The liveness check settings of the container. See `http_get` below.
     * 
     */
    @Import(name="httpGet")
    private @Nullable Output<ApplicationLivenessV2HttpGetArgs> httpGet;

    /**
     * @return The liveness check settings of the container. See `http_get` below.
     * 
     */
    public Optional<Output<ApplicationLivenessV2HttpGetArgs>> httpGet() {
        return Optional.ofNullable(this.httpGet);
    }

    /**
     * The delay of the health check.
     * 
     */
    @Import(name="initialDelaySeconds")
    private @Nullable Output<Integer> initialDelaySeconds;

    /**
     * @return The delay of the health check.
     * 
     */
    public Optional<Output<Integer>> initialDelaySeconds() {
        return Optional.ofNullable(this.initialDelaySeconds);
    }

    /**
     * The interval at which the health check is performed.
     * 
     */
    @Import(name="periodSeconds")
    private @Nullable Output<Integer> periodSeconds;

    /**
     * @return The interval at which the health check is performed.
     * 
     */
    public Optional<Output<Integer>> periodSeconds() {
        return Optional.ofNullable(this.periodSeconds);
    }

    /**
     * The liveness check settings of the container. See `tcp_socket` below.
     * 
     */
    @Import(name="tcpSocket")
    private @Nullable Output<ApplicationLivenessV2TcpSocketArgs> tcpSocket;

    /**
     * @return The liveness check settings of the container. See `tcp_socket` below.
     * 
     */
    public Optional<Output<ApplicationLivenessV2TcpSocketArgs>> tcpSocket() {
        return Optional.ofNullable(this.tcpSocket);
    }

    /**
     * The timeout period of the health check.
     * 
     */
    @Import(name="timeoutSeconds")
    private @Nullable Output<Integer> timeoutSeconds;

    /**
     * @return The timeout period of the health check.
     * 
     */
    public Optional<Output<Integer>> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    private ApplicationLivenessV2Args() {}

    private ApplicationLivenessV2Args(ApplicationLivenessV2Args $) {
        this.exec = $.exec;
        this.httpGet = $.httpGet;
        this.initialDelaySeconds = $.initialDelaySeconds;
        this.periodSeconds = $.periodSeconds;
        this.tcpSocket = $.tcpSocket;
        this.timeoutSeconds = $.timeoutSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationLivenessV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationLivenessV2Args $;

        public Builder() {
            $ = new ApplicationLivenessV2Args();
        }

        public Builder(ApplicationLivenessV2Args defaults) {
            $ = new ApplicationLivenessV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param exec Execute. See `exec` below.
         * 
         * @return builder
         * 
         */
        public Builder exec(@Nullable Output<ApplicationLivenessV2ExecArgs> exec) {
            $.exec = exec;
            return this;
        }

        /**
         * @param exec Execute. See `exec` below.
         * 
         * @return builder
         * 
         */
        public Builder exec(ApplicationLivenessV2ExecArgs exec) {
            return exec(Output.of(exec));
        }

        /**
         * @param httpGet The liveness check settings of the container. See `http_get` below.
         * 
         * @return builder
         * 
         */
        public Builder httpGet(@Nullable Output<ApplicationLivenessV2HttpGetArgs> httpGet) {
            $.httpGet = httpGet;
            return this;
        }

        /**
         * @param httpGet The liveness check settings of the container. See `http_get` below.
         * 
         * @return builder
         * 
         */
        public Builder httpGet(ApplicationLivenessV2HttpGetArgs httpGet) {
            return httpGet(Output.of(httpGet));
        }

        /**
         * @param initialDelaySeconds The delay of the health check.
         * 
         * @return builder
         * 
         */
        public Builder initialDelaySeconds(@Nullable Output<Integer> initialDelaySeconds) {
            $.initialDelaySeconds = initialDelaySeconds;
            return this;
        }

        /**
         * @param initialDelaySeconds The delay of the health check.
         * 
         * @return builder
         * 
         */
        public Builder initialDelaySeconds(Integer initialDelaySeconds) {
            return initialDelaySeconds(Output.of(initialDelaySeconds));
        }

        /**
         * @param periodSeconds The interval at which the health check is performed.
         * 
         * @return builder
         * 
         */
        public Builder periodSeconds(@Nullable Output<Integer> periodSeconds) {
            $.periodSeconds = periodSeconds;
            return this;
        }

        /**
         * @param periodSeconds The interval at which the health check is performed.
         * 
         * @return builder
         * 
         */
        public Builder periodSeconds(Integer periodSeconds) {
            return periodSeconds(Output.of(periodSeconds));
        }

        /**
         * @param tcpSocket The liveness check settings of the container. See `tcp_socket` below.
         * 
         * @return builder
         * 
         */
        public Builder tcpSocket(@Nullable Output<ApplicationLivenessV2TcpSocketArgs> tcpSocket) {
            $.tcpSocket = tcpSocket;
            return this;
        }

        /**
         * @param tcpSocket The liveness check settings of the container. See `tcp_socket` below.
         * 
         * @return builder
         * 
         */
        public Builder tcpSocket(ApplicationLivenessV2TcpSocketArgs tcpSocket) {
            return tcpSocket(Output.of(tcpSocket));
        }

        /**
         * @param timeoutSeconds The timeout period of the health check.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * @param timeoutSeconds The timeout period of the health check.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            return timeoutSeconds(Output.of(timeoutSeconds));
        }

        public ApplicationLivenessV2Args build() {
            return $;
        }
    }

}
