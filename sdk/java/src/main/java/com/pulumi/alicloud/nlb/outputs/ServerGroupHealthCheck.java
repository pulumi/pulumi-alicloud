// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.nlb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerGroupHealthCheck {
    /**
     * @return The port of the backend server for health checks. Valid values: **0** ~ **65535**. **0** indicates that the port of the backend server is used for health check.
     * 
     */
    private @Nullable Integer healthCheckConnectPort;
    /**
     * @return Maximum timeout for health check responses. Unit: seconds. Valid values: **1** ~ **300**.
     * 
     */
    private @Nullable Integer healthCheckConnectTimeout;
    /**
     * @return The domain name used for health check. Valid values:
     * - **$SERVER_IP**: uses the intranet IP of the backend server.
     * - **domain**: Specify a specific domain name. The length is limited to 1 to 80 characters. Only lowercase letters, numbers, dashes (-), and half-width periods (.) can be used.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    private @Nullable String healthCheckDomain;
    /**
     * @return Whether to enable health check. Valid values:
     * - **true**: on.
     * - **false**: closed.
     * 
     */
    private @Nullable Boolean healthCheckEnabled;
    /**
     * @return Health status return code. Multiple status codes are separated by commas (,). Valid values: **http\_2xx**, **http\_3xx**, **http\_4xx**, and **http\_5xx**.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    private @Nullable List<String> healthCheckHttpCodes;
    /**
     * @return Time interval of health examination. Unit: seconds.Valid values: **5** ~ **50**.
     * 
     */
    private @Nullable Integer healthCheckInterval;
    /**
     * @return Health check protocol. Valid values: **TCP** or **HTTP**.
     * 
     */
    private @Nullable String healthCheckType;
    /**
     * @return Health check path.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    private @Nullable String healthCheckUrl;
    /**
     * @return After the health check is successful, the health check status of the backend server is determined from **failed** to **successful * *.Valid values: **2** to **10 * *.
     * 
     */
    private @Nullable Integer healthyThreshold;
    /**
     * @return The health check method. Valid values: **GET** or **HEAD**.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    private @Nullable String httpCheckMethod;
    /**
     * @return After the health check fails for many times in a row, the health check status of the backend server is determined from **Success** to **Failure**. Valid values: **2** to **10**.
     * 
     */
    private @Nullable Integer unhealthyThreshold;

    private ServerGroupHealthCheck() {}
    /**
     * @return The port of the backend server for health checks. Valid values: **0** ~ **65535**. **0** indicates that the port of the backend server is used for health check.
     * 
     */
    public Optional<Integer> healthCheckConnectPort() {
        return Optional.ofNullable(this.healthCheckConnectPort);
    }
    /**
     * @return Maximum timeout for health check responses. Unit: seconds. Valid values: **1** ~ **300**.
     * 
     */
    public Optional<Integer> healthCheckConnectTimeout() {
        return Optional.ofNullable(this.healthCheckConnectTimeout);
    }
    /**
     * @return The domain name used for health check. Valid values:
     * - **$SERVER_IP**: uses the intranet IP of the backend server.
     * - **domain**: Specify a specific domain name. The length is limited to 1 to 80 characters. Only lowercase letters, numbers, dashes (-), and half-width periods (.) can be used.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    public Optional<String> healthCheckDomain() {
        return Optional.ofNullable(this.healthCheckDomain);
    }
    /**
     * @return Whether to enable health check. Valid values:
     * - **true**: on.
     * - **false**: closed.
     * 
     */
    public Optional<Boolean> healthCheckEnabled() {
        return Optional.ofNullable(this.healthCheckEnabled);
    }
    /**
     * @return Health status return code. Multiple status codes are separated by commas (,). Valid values: **http\_2xx**, **http\_3xx**, **http\_4xx**, and **http\_5xx**.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    public List<String> healthCheckHttpCodes() {
        return this.healthCheckHttpCodes == null ? List.of() : this.healthCheckHttpCodes;
    }
    /**
     * @return Time interval of health examination. Unit: seconds.Valid values: **5** ~ **50**.
     * 
     */
    public Optional<Integer> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }
    /**
     * @return Health check protocol. Valid values: **TCP** or **HTTP**.
     * 
     */
    public Optional<String> healthCheckType() {
        return Optional.ofNullable(this.healthCheckType);
    }
    /**
     * @return Health check path.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    public Optional<String> healthCheckUrl() {
        return Optional.ofNullable(this.healthCheckUrl);
    }
    /**
     * @return After the health check is successful, the health check status of the backend server is determined from **failed** to **successful * *.Valid values: **2** to **10 * *.
     * 
     */
    public Optional<Integer> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }
    /**
     * @return The health check method. Valid values: **GET** or **HEAD**.
     * &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
     * 
     */
    public Optional<String> httpCheckMethod() {
        return Optional.ofNullable(this.httpCheckMethod);
    }
    /**
     * @return After the health check fails for many times in a row, the health check status of the backend server is determined from **Success** to **Failure**. Valid values: **2** to **10**.
     * 
     */
    public Optional<Integer> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerGroupHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer healthCheckConnectPort;
        private @Nullable Integer healthCheckConnectTimeout;
        private @Nullable String healthCheckDomain;
        private @Nullable Boolean healthCheckEnabled;
        private @Nullable List<String> healthCheckHttpCodes;
        private @Nullable Integer healthCheckInterval;
        private @Nullable String healthCheckType;
        private @Nullable String healthCheckUrl;
        private @Nullable Integer healthyThreshold;
        private @Nullable String httpCheckMethod;
        private @Nullable Integer unhealthyThreshold;
        public Builder() {}
        public Builder(ServerGroupHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthCheckConnectPort = defaults.healthCheckConnectPort;
    	      this.healthCheckConnectTimeout = defaults.healthCheckConnectTimeout;
    	      this.healthCheckDomain = defaults.healthCheckDomain;
    	      this.healthCheckEnabled = defaults.healthCheckEnabled;
    	      this.healthCheckHttpCodes = defaults.healthCheckHttpCodes;
    	      this.healthCheckInterval = defaults.healthCheckInterval;
    	      this.healthCheckType = defaults.healthCheckType;
    	      this.healthCheckUrl = defaults.healthCheckUrl;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.httpCheckMethod = defaults.httpCheckMethod;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder healthCheckConnectPort(@Nullable Integer healthCheckConnectPort) {

            this.healthCheckConnectPort = healthCheckConnectPort;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckConnectTimeout(@Nullable Integer healthCheckConnectTimeout) {

            this.healthCheckConnectTimeout = healthCheckConnectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckDomain(@Nullable String healthCheckDomain) {

            this.healthCheckDomain = healthCheckDomain;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckEnabled(@Nullable Boolean healthCheckEnabled) {

            this.healthCheckEnabled = healthCheckEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckHttpCodes(@Nullable List<String> healthCheckHttpCodes) {

            this.healthCheckHttpCodes = healthCheckHttpCodes;
            return this;
        }
        public Builder healthCheckHttpCodes(String... healthCheckHttpCodes) {
            return healthCheckHttpCodes(List.of(healthCheckHttpCodes));
        }
        @CustomType.Setter
        public Builder healthCheckInterval(@Nullable Integer healthCheckInterval) {

            this.healthCheckInterval = healthCheckInterval;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckType(@Nullable String healthCheckType) {

            this.healthCheckType = healthCheckType;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckUrl(@Nullable String healthCheckUrl) {

            this.healthCheckUrl = healthCheckUrl;
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(@Nullable Integer healthyThreshold) {

            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder httpCheckMethod(@Nullable String httpCheckMethod) {

            this.httpCheckMethod = httpCheckMethod;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(@Nullable Integer unhealthyThreshold) {

            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        public ServerGroupHealthCheck build() {
            final var _resultValue = new ServerGroupHealthCheck();
            _resultValue.healthCheckConnectPort = healthCheckConnectPort;
            _resultValue.healthCheckConnectTimeout = healthCheckConnectTimeout;
            _resultValue.healthCheckDomain = healthCheckDomain;
            _resultValue.healthCheckEnabled = healthCheckEnabled;
            _resultValue.healthCheckHttpCodes = healthCheckHttpCodes;
            _resultValue.healthCheckInterval = healthCheckInterval;
            _resultValue.healthCheckType = healthCheckType;
            _resultValue.healthCheckUrl = healthCheckUrl;
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.httpCheckMethod = httpCheckMethod;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            return _resultValue;
        }
    }
}
