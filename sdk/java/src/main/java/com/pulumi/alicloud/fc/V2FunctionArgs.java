// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc;

import com.pulumi.alicloud.fc.inputs.V2FunctionCodeArgs;
import com.pulumi.alicloud.fc.inputs.V2FunctionCustomContainerConfigArgs;
import com.pulumi.alicloud.fc.inputs.V2FunctionCustomDnsArgs;
import com.pulumi.alicloud.fc.inputs.V2FunctionCustomHealthCheckConfigArgs;
import com.pulumi.alicloud.fc.inputs.V2FunctionCustomRuntimeConfigArgs;
import com.pulumi.alicloud.fc.inputs.V2FunctionInstanceLifecycleConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2FunctionArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2FunctionArgs Empty = new V2FunctionArgs();

    /**
     * The listening port of the HTTP Server when the Custom Runtime or Custom Container is running.
     * 
     */
    @Import(name="caPort")
    private @Nullable Output<Integer> caPort;

    /**
     * @return The listening port of the HTTP Server when the Custom Runtime or Custom Container is running.
     * 
     */
    public Optional<Output<Integer>> caPort() {
        return Optional.ofNullable(this.caPort);
    }

    /**
     * Function Code ZIP package. code and customContainerConfig choose one. See `code` below.
     * 
     */
    @Import(name="code")
    private @Nullable Output<V2FunctionCodeArgs> code;

    /**
     * @return Function Code ZIP package. code and customContainerConfig choose one. See `code` below.
     * 
     */
    public Optional<Output<V2FunctionCodeArgs>> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * crc64 of function code.
     * 
     */
    @Import(name="codeChecksum")
    private @Nullable Output<String> codeChecksum;

    /**
     * @return crc64 of function code.
     * 
     */
    public Optional<Output<String>> codeChecksum() {
        return Optional.ofNullable(this.codeChecksum);
    }

    /**
     * The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<Double> cpu;

    /**
     * @return The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
     * 
     */
    public Optional<Output<Double>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * Custom-container runtime related function configuration. See `custom_container_config` below.
     * 
     */
    @Import(name="customContainerConfig")
    private @Nullable Output<V2FunctionCustomContainerConfigArgs> customContainerConfig;

    /**
     * @return Custom-container runtime related function configuration. See `custom_container_config` below.
     * 
     */
    public Optional<Output<V2FunctionCustomContainerConfigArgs>> customContainerConfig() {
        return Optional.ofNullable(this.customContainerConfig);
    }

    /**
     * Function custom DNS configuration. See `custom_dns` below.
     * 
     */
    @Import(name="customDns")
    private @Nullable Output<V2FunctionCustomDnsArgs> customDns;

    /**
     * @return Function custom DNS configuration. See `custom_dns` below.
     * 
     */
    public Optional<Output<V2FunctionCustomDnsArgs>> customDns() {
        return Optional.ofNullable(this.customDns);
    }

    /**
     * Custom runtime/container Custom health check configuration. See `custom_health_check_config` below.
     * 
     */
    @Import(name="customHealthCheckConfig")
    private @Nullable Output<V2FunctionCustomHealthCheckConfigArgs> customHealthCheckConfig;

    /**
     * @return Custom runtime/container Custom health check configuration. See `custom_health_check_config` below.
     * 
     */
    public Optional<Output<V2FunctionCustomHealthCheckConfigArgs>> customHealthCheckConfig() {
        return Optional.ofNullable(this.customHealthCheckConfig);
    }

    /**
     * Detailed configuration of Custom Runtime function. See `custom_runtime_config` below.
     * 
     */
    @Import(name="customRuntimeConfig")
    private @Nullable Output<V2FunctionCustomRuntimeConfigArgs> customRuntimeConfig;

    /**
     * @return Detailed configuration of Custom Runtime function. See `custom_runtime_config` below.
     * 
     */
    public Optional<Output<V2FunctionCustomRuntimeConfigArgs>> customRuntimeConfig() {
        return Optional.ofNullable(this.customRuntimeConfig);
    }

    /**
     * description of function.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return description of function.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The disk specification of the function. The unit is MB. The optional value is 512 MB or 10240MB.
     * 
     */
    @Import(name="diskSize")
    private @Nullable Output<Integer> diskSize;

    /**
     * @return The disk specification of the function. The unit is MB. The optional value is 512 MB or 10240MB.
     * 
     */
    public Optional<Output<Integer>> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }

    /**
     * The environment variable set for the function can get the value of the environment variable in the function. For more information, see Environment Variables.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<Map<String,Object>> environmentVariables;

    /**
     * @return The environment variable set for the function can get the value of the environment variable in the function. For more information, see Environment Variables.
     * 
     */
    public Optional<Output<Map<String,Object>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * function name.
     * 
     */
    @Import(name="functionName", required=true)
    private Output<String> functionName;

    /**
     * @return function name.
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }

    /**
     * The GPU memory specification of the function, in MB, is a multiple of 1024MB.
     * 
     */
    @Import(name="gpuMemorySize")
    private @Nullable Output<Integer> gpuMemorySize;

    /**
     * @return The GPU memory specification of the function, in MB, is a multiple of 1024MB.
     * 
     */
    public Optional<Output<Integer>> gpuMemorySize() {
        return Optional.ofNullable(this.gpuMemorySize);
    }

    /**
     * entry point of function.
     * 
     */
    @Import(name="handler", required=true)
    private Output<String> handler;

    /**
     * @return entry point of function.
     * 
     */
    public Output<String> handler() {
        return this.handler;
    }

    /**
     * max running time of initializer.
     * 
     */
    @Import(name="initializationTimeout")
    private @Nullable Output<Integer> initializationTimeout;

    /**
     * @return max running time of initializer.
     * 
     */
    public Optional<Output<Integer>> initializationTimeout() {
        return Optional.ofNullable(this.initializationTimeout);
    }

    /**
     * initializer entry point of function.
     * 
     */
    @Import(name="initializer")
    private @Nullable Output<String> initializer;

    /**
     * @return initializer entry point of function.
     * 
     */
    public Optional<Output<String>> initializer() {
        return Optional.ofNullable(this.initializer);
    }

    /**
     * The maximum concurrency allowed for a single function instance.
     * 
     */
    @Import(name="instanceConcurrency")
    private @Nullable Output<Integer> instanceConcurrency;

    /**
     * @return The maximum concurrency allowed for a single function instance.
     * 
     */
    public Optional<Output<Integer>> instanceConcurrency() {
        return Optional.ofNullable(this.instanceConcurrency);
    }

    /**
     * Instance lifecycle configuration. See `instance_lifecycle_config` below.
     * 
     */
    @Import(name="instanceLifecycleConfig")
    private @Nullable Output<V2FunctionInstanceLifecycleConfigArgs> instanceLifecycleConfig;

    /**
     * @return Instance lifecycle configuration. See `instance_lifecycle_config` below.
     * 
     */
    public Optional<Output<V2FunctionInstanceLifecycleConfigArgs>> instanceLifecycleConfig() {
        return Optional.ofNullable(this.instanceLifecycleConfig);
    }

    /**
     * The instance type of the function. Valid values:
     * - **e1**: Elastic instance.
     * - **c1**: performance instance.
     * - **fc.gpu.tesla.1**: the T4 card type of the Tesla series of GPU instances.
     * - **fc.gpu.ampere.1**: The Ampere series A10 card type of the GPU instance.
     * - **g1**: Same as **fc.gpu.tesla.1**.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return The instance type of the function. Valid values:
     * - **e1**: Elastic instance.
     * - **c1**: performance instance.
     * - **fc.gpu.tesla.1**: the T4 card type of the Tesla series of GPU instances.
     * - **fc.gpu.ampere.1**: The Ampere series A10 card type of the GPU instance.
     * - **g1**: Same as **fc.gpu.tesla.1**.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * List of layers.
     * &gt; **NOTE:**  Multiple layers will be merged in the order of array subscripts from large to small, and the contents of layers with small subscripts will overwrite the files with the same name of layers with large subscripts.
     * 
     */
    @Import(name="layers")
    private @Nullable Output<List<String>> layers;

    /**
     * @return List of layers.
     * &gt; **NOTE:**  Multiple layers will be merged in the order of array subscripts from large to small, and the contents of layers with small subscripts will overwrite the files with the same name of layers with large subscripts.
     * 
     */
    public Optional<Output<List<String>>> layers() {
        return Optional.ofNullable(this.layers);
    }

    /**
     * memory size needed by function.
     * 
     */
    @Import(name="memorySize")
    private @Nullable Output<Integer> memorySize;

    /**
     * @return memory size needed by function.
     * 
     */
    public Optional<Output<Integer>> memorySize() {
        return Optional.ofNullable(this.memorySize);
    }

    /**
     * runtime of function code.
     * 
     */
    @Import(name="runtime", required=true)
    private Output<String> runtime;

    /**
     * @return runtime of function code.
     * 
     */
    public Output<String> runtime() {
        return this.runtime;
    }

    /**
     * The name of the function Service.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The name of the function Service.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * max running time of function.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return max running time of function.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private V2FunctionArgs() {}

    private V2FunctionArgs(V2FunctionArgs $) {
        this.caPort = $.caPort;
        this.code = $.code;
        this.codeChecksum = $.codeChecksum;
        this.cpu = $.cpu;
        this.customContainerConfig = $.customContainerConfig;
        this.customDns = $.customDns;
        this.customHealthCheckConfig = $.customHealthCheckConfig;
        this.customRuntimeConfig = $.customRuntimeConfig;
        this.description = $.description;
        this.diskSize = $.diskSize;
        this.environmentVariables = $.environmentVariables;
        this.functionName = $.functionName;
        this.gpuMemorySize = $.gpuMemorySize;
        this.handler = $.handler;
        this.initializationTimeout = $.initializationTimeout;
        this.initializer = $.initializer;
        this.instanceConcurrency = $.instanceConcurrency;
        this.instanceLifecycleConfig = $.instanceLifecycleConfig;
        this.instanceType = $.instanceType;
        this.layers = $.layers;
        this.memorySize = $.memorySize;
        this.runtime = $.runtime;
        this.serviceName = $.serviceName;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2FunctionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2FunctionArgs $;

        public Builder() {
            $ = new V2FunctionArgs();
        }

        public Builder(V2FunctionArgs defaults) {
            $ = new V2FunctionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caPort The listening port of the HTTP Server when the Custom Runtime or Custom Container is running.
         * 
         * @return builder
         * 
         */
        public Builder caPort(@Nullable Output<Integer> caPort) {
            $.caPort = caPort;
            return this;
        }

        /**
         * @param caPort The listening port of the HTTP Server when the Custom Runtime or Custom Container is running.
         * 
         * @return builder
         * 
         */
        public Builder caPort(Integer caPort) {
            return caPort(Output.of(caPort));
        }

        /**
         * @param code Function Code ZIP package. code and customContainerConfig choose one. See `code` below.
         * 
         * @return builder
         * 
         */
        public Builder code(@Nullable Output<V2FunctionCodeArgs> code) {
            $.code = code;
            return this;
        }

        /**
         * @param code Function Code ZIP package. code and customContainerConfig choose one. See `code` below.
         * 
         * @return builder
         * 
         */
        public Builder code(V2FunctionCodeArgs code) {
            return code(Output.of(code));
        }

        /**
         * @param codeChecksum crc64 of function code.
         * 
         * @return builder
         * 
         */
        public Builder codeChecksum(@Nullable Output<String> codeChecksum) {
            $.codeChecksum = codeChecksum;
            return this;
        }

        /**
         * @param codeChecksum crc64 of function code.
         * 
         * @return builder
         * 
         */
        public Builder codeChecksum(String codeChecksum) {
            return codeChecksum(Output.of(codeChecksum));
        }

        /**
         * @param cpu The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<Double> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Double cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param customContainerConfig Custom-container runtime related function configuration. See `custom_container_config` below.
         * 
         * @return builder
         * 
         */
        public Builder customContainerConfig(@Nullable Output<V2FunctionCustomContainerConfigArgs> customContainerConfig) {
            $.customContainerConfig = customContainerConfig;
            return this;
        }

        /**
         * @param customContainerConfig Custom-container runtime related function configuration. See `custom_container_config` below.
         * 
         * @return builder
         * 
         */
        public Builder customContainerConfig(V2FunctionCustomContainerConfigArgs customContainerConfig) {
            return customContainerConfig(Output.of(customContainerConfig));
        }

        /**
         * @param customDns Function custom DNS configuration. See `custom_dns` below.
         * 
         * @return builder
         * 
         */
        public Builder customDns(@Nullable Output<V2FunctionCustomDnsArgs> customDns) {
            $.customDns = customDns;
            return this;
        }

        /**
         * @param customDns Function custom DNS configuration. See `custom_dns` below.
         * 
         * @return builder
         * 
         */
        public Builder customDns(V2FunctionCustomDnsArgs customDns) {
            return customDns(Output.of(customDns));
        }

        /**
         * @param customHealthCheckConfig Custom runtime/container Custom health check configuration. See `custom_health_check_config` below.
         * 
         * @return builder
         * 
         */
        public Builder customHealthCheckConfig(@Nullable Output<V2FunctionCustomHealthCheckConfigArgs> customHealthCheckConfig) {
            $.customHealthCheckConfig = customHealthCheckConfig;
            return this;
        }

        /**
         * @param customHealthCheckConfig Custom runtime/container Custom health check configuration. See `custom_health_check_config` below.
         * 
         * @return builder
         * 
         */
        public Builder customHealthCheckConfig(V2FunctionCustomHealthCheckConfigArgs customHealthCheckConfig) {
            return customHealthCheckConfig(Output.of(customHealthCheckConfig));
        }

        /**
         * @param customRuntimeConfig Detailed configuration of Custom Runtime function. See `custom_runtime_config` below.
         * 
         * @return builder
         * 
         */
        public Builder customRuntimeConfig(@Nullable Output<V2FunctionCustomRuntimeConfigArgs> customRuntimeConfig) {
            $.customRuntimeConfig = customRuntimeConfig;
            return this;
        }

        /**
         * @param customRuntimeConfig Detailed configuration of Custom Runtime function. See `custom_runtime_config` below.
         * 
         * @return builder
         * 
         */
        public Builder customRuntimeConfig(V2FunctionCustomRuntimeConfigArgs customRuntimeConfig) {
            return customRuntimeConfig(Output.of(customRuntimeConfig));
        }

        /**
         * @param description description of function.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description description of function.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diskSize The disk specification of the function. The unit is MB. The optional value is 512 MB or 10240MB.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(@Nullable Output<Integer> diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        /**
         * @param diskSize The disk specification of the function. The unit is MB. The optional value is 512 MB or 10240MB.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(Integer diskSize) {
            return diskSize(Output.of(diskSize));
        }

        /**
         * @param environmentVariables The environment variable set for the function can get the value of the environment variable in the function. For more information, see Environment Variables.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<Map<String,Object>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables The environment variable set for the function can get the value of the environment variable in the function. For more information, see Environment Variables.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(Map<String,Object> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param functionName function name.
         * 
         * @return builder
         * 
         */
        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName function name.
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param gpuMemorySize The GPU memory specification of the function, in MB, is a multiple of 1024MB.
         * 
         * @return builder
         * 
         */
        public Builder gpuMemorySize(@Nullable Output<Integer> gpuMemorySize) {
            $.gpuMemorySize = gpuMemorySize;
            return this;
        }

        /**
         * @param gpuMemorySize The GPU memory specification of the function, in MB, is a multiple of 1024MB.
         * 
         * @return builder
         * 
         */
        public Builder gpuMemorySize(Integer gpuMemorySize) {
            return gpuMemorySize(Output.of(gpuMemorySize));
        }

        /**
         * @param handler entry point of function.
         * 
         * @return builder
         * 
         */
        public Builder handler(Output<String> handler) {
            $.handler = handler;
            return this;
        }

        /**
         * @param handler entry point of function.
         * 
         * @return builder
         * 
         */
        public Builder handler(String handler) {
            return handler(Output.of(handler));
        }

        /**
         * @param initializationTimeout max running time of initializer.
         * 
         * @return builder
         * 
         */
        public Builder initializationTimeout(@Nullable Output<Integer> initializationTimeout) {
            $.initializationTimeout = initializationTimeout;
            return this;
        }

        /**
         * @param initializationTimeout max running time of initializer.
         * 
         * @return builder
         * 
         */
        public Builder initializationTimeout(Integer initializationTimeout) {
            return initializationTimeout(Output.of(initializationTimeout));
        }

        /**
         * @param initializer initializer entry point of function.
         * 
         * @return builder
         * 
         */
        public Builder initializer(@Nullable Output<String> initializer) {
            $.initializer = initializer;
            return this;
        }

        /**
         * @param initializer initializer entry point of function.
         * 
         * @return builder
         * 
         */
        public Builder initializer(String initializer) {
            return initializer(Output.of(initializer));
        }

        /**
         * @param instanceConcurrency The maximum concurrency allowed for a single function instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceConcurrency(@Nullable Output<Integer> instanceConcurrency) {
            $.instanceConcurrency = instanceConcurrency;
            return this;
        }

        /**
         * @param instanceConcurrency The maximum concurrency allowed for a single function instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceConcurrency(Integer instanceConcurrency) {
            return instanceConcurrency(Output.of(instanceConcurrency));
        }

        /**
         * @param instanceLifecycleConfig Instance lifecycle configuration. See `instance_lifecycle_config` below.
         * 
         * @return builder
         * 
         */
        public Builder instanceLifecycleConfig(@Nullable Output<V2FunctionInstanceLifecycleConfigArgs> instanceLifecycleConfig) {
            $.instanceLifecycleConfig = instanceLifecycleConfig;
            return this;
        }

        /**
         * @param instanceLifecycleConfig Instance lifecycle configuration. See `instance_lifecycle_config` below.
         * 
         * @return builder
         * 
         */
        public Builder instanceLifecycleConfig(V2FunctionInstanceLifecycleConfigArgs instanceLifecycleConfig) {
            return instanceLifecycleConfig(Output.of(instanceLifecycleConfig));
        }

        /**
         * @param instanceType The instance type of the function. Valid values:
         * - **e1**: Elastic instance.
         * - **c1**: performance instance.
         * - **fc.gpu.tesla.1**: the T4 card type of the Tesla series of GPU instances.
         * - **fc.gpu.ampere.1**: The Ampere series A10 card type of the GPU instance.
         * - **g1**: Same as **fc.gpu.tesla.1**.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The instance type of the function. Valid values:
         * - **e1**: Elastic instance.
         * - **c1**: performance instance.
         * - **fc.gpu.tesla.1**: the T4 card type of the Tesla series of GPU instances.
         * - **fc.gpu.ampere.1**: The Ampere series A10 card type of the GPU instance.
         * - **g1**: Same as **fc.gpu.tesla.1**.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param layers List of layers.
         * &gt; **NOTE:**  Multiple layers will be merged in the order of array subscripts from large to small, and the contents of layers with small subscripts will overwrite the files with the same name of layers with large subscripts.
         * 
         * @return builder
         * 
         */
        public Builder layers(@Nullable Output<List<String>> layers) {
            $.layers = layers;
            return this;
        }

        /**
         * @param layers List of layers.
         * &gt; **NOTE:**  Multiple layers will be merged in the order of array subscripts from large to small, and the contents of layers with small subscripts will overwrite the files with the same name of layers with large subscripts.
         * 
         * @return builder
         * 
         */
        public Builder layers(List<String> layers) {
            return layers(Output.of(layers));
        }

        /**
         * @param layers List of layers.
         * &gt; **NOTE:**  Multiple layers will be merged in the order of array subscripts from large to small, and the contents of layers with small subscripts will overwrite the files with the same name of layers with large subscripts.
         * 
         * @return builder
         * 
         */
        public Builder layers(String... layers) {
            return layers(List.of(layers));
        }

        /**
         * @param memorySize memory size needed by function.
         * 
         * @return builder
         * 
         */
        public Builder memorySize(@Nullable Output<Integer> memorySize) {
            $.memorySize = memorySize;
            return this;
        }

        /**
         * @param memorySize memory size needed by function.
         * 
         * @return builder
         * 
         */
        public Builder memorySize(Integer memorySize) {
            return memorySize(Output.of(memorySize));
        }

        /**
         * @param runtime runtime of function code.
         * 
         * @return builder
         * 
         */
        public Builder runtime(Output<String> runtime) {
            $.runtime = runtime;
            return this;
        }

        /**
         * @param runtime runtime of function code.
         * 
         * @return builder
         * 
         */
        public Builder runtime(String runtime) {
            return runtime(Output.of(runtime));
        }

        /**
         * @param serviceName The name of the function Service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the function Service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param timeout max running time of function.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout max running time of function.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public V2FunctionArgs build() {
            $.functionName = Objects.requireNonNull($.functionName, "expected parameter 'functionName' to be non-null");
            $.handler = Objects.requireNonNull($.handler, "expected parameter 'handler' to be non-null");
            $.runtime = Objects.requireNonNull($.runtime, "expected parameter 'runtime' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
