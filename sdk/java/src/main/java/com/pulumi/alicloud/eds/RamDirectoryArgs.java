// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RamDirectoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RamDirectoryArgs Empty = new RamDirectoryArgs();

    /**
     * The desktop access type. Valid values: `VPC`, `INTERNET`, `ANY`.
     * 
     */
    @Import(name="desktopAccessType")
    private @Nullable Output<String> desktopAccessType;

    /**
     * @return The desktop access type. Valid values: `VPC`, `INTERNET`, `ANY`.
     * 
     */
    public Optional<Output<String>> desktopAccessType() {
        return Optional.ofNullable(this.desktopAccessType);
    }

    /**
     * Whether to enable public network access.
     * 
     */
    @Import(name="enableAdminAccess")
    private @Nullable Output<Boolean> enableAdminAccess;

    /**
     * @return Whether to enable public network access.
     * 
     */
    public Optional<Output<Boolean>> enableAdminAccess() {
        return Optional.ofNullable(this.enableAdminAccess);
    }

    /**
     * Whether to grant local administrator rights to users who use cloud desktops.
     * 
     */
    @Import(name="enableInternetAccess")
    private @Nullable Output<Boolean> enableInternetAccess;

    /**
     * @return Whether to grant local administrator rights to users who use cloud desktops.
     * 
     */
    public Optional<Output<Boolean>> enableInternetAccess() {
        return Optional.ofNullable(this.enableInternetAccess);
    }

    /**
     * The name of the directory. The name must be 2 to 255 characters in length. It must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
     * 
     */
    @Import(name="ramDirectoryName", required=true)
    private Output<String> ramDirectoryName;

    /**
     * @return The name of the directory. The name must be 2 to 255 characters in length. It must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
     * 
     */
    public Output<String> ramDirectoryName() {
        return this.ramDirectoryName;
    }

    /**
     * List of VSwitch IDs in the directory.
     * 
     */
    @Import(name="vswitchIds", required=true)
    private Output<List<String>> vswitchIds;

    /**
     * @return List of VSwitch IDs in the directory.
     * 
     */
    public Output<List<String>> vswitchIds() {
        return this.vswitchIds;
    }

    private RamDirectoryArgs() {}

    private RamDirectoryArgs(RamDirectoryArgs $) {
        this.desktopAccessType = $.desktopAccessType;
        this.enableAdminAccess = $.enableAdminAccess;
        this.enableInternetAccess = $.enableInternetAccess;
        this.ramDirectoryName = $.ramDirectoryName;
        this.vswitchIds = $.vswitchIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RamDirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RamDirectoryArgs $;

        public Builder() {
            $ = new RamDirectoryArgs();
        }

        public Builder(RamDirectoryArgs defaults) {
            $ = new RamDirectoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param desktopAccessType The desktop access type. Valid values: `VPC`, `INTERNET`, `ANY`.
         * 
         * @return builder
         * 
         */
        public Builder desktopAccessType(@Nullable Output<String> desktopAccessType) {
            $.desktopAccessType = desktopAccessType;
            return this;
        }

        /**
         * @param desktopAccessType The desktop access type. Valid values: `VPC`, `INTERNET`, `ANY`.
         * 
         * @return builder
         * 
         */
        public Builder desktopAccessType(String desktopAccessType) {
            return desktopAccessType(Output.of(desktopAccessType));
        }

        /**
         * @param enableAdminAccess Whether to enable public network access.
         * 
         * @return builder
         * 
         */
        public Builder enableAdminAccess(@Nullable Output<Boolean> enableAdminAccess) {
            $.enableAdminAccess = enableAdminAccess;
            return this;
        }

        /**
         * @param enableAdminAccess Whether to enable public network access.
         * 
         * @return builder
         * 
         */
        public Builder enableAdminAccess(Boolean enableAdminAccess) {
            return enableAdminAccess(Output.of(enableAdminAccess));
        }

        /**
         * @param enableInternetAccess Whether to grant local administrator rights to users who use cloud desktops.
         * 
         * @return builder
         * 
         */
        public Builder enableInternetAccess(@Nullable Output<Boolean> enableInternetAccess) {
            $.enableInternetAccess = enableInternetAccess;
            return this;
        }

        /**
         * @param enableInternetAccess Whether to grant local administrator rights to users who use cloud desktops.
         * 
         * @return builder
         * 
         */
        public Builder enableInternetAccess(Boolean enableInternetAccess) {
            return enableInternetAccess(Output.of(enableInternetAccess));
        }

        /**
         * @param ramDirectoryName The name of the directory. The name must be 2 to 255 characters in length. It must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder ramDirectoryName(Output<String> ramDirectoryName) {
            $.ramDirectoryName = ramDirectoryName;
            return this;
        }

        /**
         * @param ramDirectoryName The name of the directory. The name must be 2 to 255 characters in length. It must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
         * 
         * @return builder
         * 
         */
        public Builder ramDirectoryName(String ramDirectoryName) {
            return ramDirectoryName(Output.of(ramDirectoryName));
        }

        /**
         * @param vswitchIds List of VSwitch IDs in the directory.
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(Output<List<String>> vswitchIds) {
            $.vswitchIds = vswitchIds;
            return this;
        }

        /**
         * @param vswitchIds List of VSwitch IDs in the directory.
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(List<String> vswitchIds) {
            return vswitchIds(Output.of(vswitchIds));
        }

        /**
         * @param vswitchIds List of VSwitch IDs in the directory.
         * 
         * @return builder
         * 
         */
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }

        public RamDirectoryArgs build() {
            if ($.ramDirectoryName == null) {
                throw new MissingRequiredPropertyException("RamDirectoryArgs", "ramDirectoryName");
            }
            if ($.vswitchIds == null) {
                throw new MissingRequiredPropertyException("RamDirectoryArgs", "vswitchIds");
            }
            return $;
        }
    }

}
