// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.resourcemanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HandshakeState extends com.pulumi.resources.ResourceArgs {

    public static final HandshakeState Empty = new HandshakeState();

    /**
     * The time when the invitation was created. The time is displayed in UTC.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The time when the invitation was created. The time is displayed in UTC.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The time when the invitation expires. The time is displayed in UTC.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    /**
     * @return The time when the invitation expires. The time is displayed in UTC.
     * 
     */
    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * The ID of the management account of the resource directory.
     * 
     */
    @Import(name="masterAccountId")
    private @Nullable Output<String> masterAccountId;

    /**
     * @return The ID of the management account of the resource directory.
     * 
     */
    public Optional<Output<String>> masterAccountId() {
        return Optional.ofNullable(this.masterAccountId);
    }

    /**
     * The name of the management account of the resource directory.
     * 
     */
    @Import(name="masterAccountName")
    private @Nullable Output<String> masterAccountName;

    /**
     * @return The name of the management account of the resource directory.
     * 
     */
    public Optional<Output<String>> masterAccountName() {
        return Optional.ofNullable(this.masterAccountName);
    }

    /**
     * The time when the invitation was modified. The time is displayed in UTC.
     * 
     */
    @Import(name="modifyTime")
    private @Nullable Output<String> modifyTime;

    /**
     * @return The time when the invitation was modified. The time is displayed in UTC.
     * 
     */
    public Optional<Output<String>> modifyTime() {
        return Optional.ofNullable(this.modifyTime);
    }

    /**
     * The description of the invitation.
     * The description can be up to 1,024 characters in length.
     * 
     */
    @Import(name="note")
    private @Nullable Output<String> note;

    /**
     * @return The description of the invitation.
     * The description can be up to 1,024 characters in length.
     * 
     */
    public Optional<Output<String>> note() {
        return Optional.ofNullable(this.note);
    }

    /**
     * The ID of the resource directory.
     * 
     */
    @Import(name="resourceDirectoryId")
    private @Nullable Output<String> resourceDirectoryId;

    /**
     * @return The ID of the resource directory.
     * 
     */
    public Optional<Output<String>> resourceDirectoryId() {
        return Optional.ofNullable(this.resourceDirectoryId);
    }

    /**
     * The status of the invitation.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the invitation.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID or logon email address of the account that you want to invite.
     * 
     */
    @Import(name="targetEntity")
    private @Nullable Output<String> targetEntity;

    /**
     * @return The ID or logon email address of the account that you want to invite.
     * 
     */
    public Optional<Output<String>> targetEntity() {
        return Optional.ofNullable(this.targetEntity);
    }

    /**
     * The type of the invited account. Valid values:
     * 
     * - Account: indicates the ID of the account.
     * - Email: indicates the logon email address of the account.
     * 
     */
    @Import(name="targetType")
    private @Nullable Output<String> targetType;

    /**
     * @return The type of the invited account. Valid values:
     * 
     * - Account: indicates the ID of the account.
     * - Email: indicates the logon email address of the account.
     * 
     */
    public Optional<Output<String>> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    private HandshakeState() {}

    private HandshakeState(HandshakeState $) {
        this.createTime = $.createTime;
        this.expireTime = $.expireTime;
        this.masterAccountId = $.masterAccountId;
        this.masterAccountName = $.masterAccountName;
        this.modifyTime = $.modifyTime;
        this.note = $.note;
        this.resourceDirectoryId = $.resourceDirectoryId;
        this.status = $.status;
        this.targetEntity = $.targetEntity;
        this.targetType = $.targetType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HandshakeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HandshakeState $;

        public Builder() {
            $ = new HandshakeState();
        }

        public Builder(HandshakeState defaults) {
            $ = new HandshakeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The time when the invitation was created. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The time when the invitation was created. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param expireTime The time when the invitation expires. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        /**
         * @param expireTime The time when the invitation expires. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        /**
         * @param masterAccountId The ID of the management account of the resource directory.
         * 
         * @return builder
         * 
         */
        public Builder masterAccountId(@Nullable Output<String> masterAccountId) {
            $.masterAccountId = masterAccountId;
            return this;
        }

        /**
         * @param masterAccountId The ID of the management account of the resource directory.
         * 
         * @return builder
         * 
         */
        public Builder masterAccountId(String masterAccountId) {
            return masterAccountId(Output.of(masterAccountId));
        }

        /**
         * @param masterAccountName The name of the management account of the resource directory.
         * 
         * @return builder
         * 
         */
        public Builder masterAccountName(@Nullable Output<String> masterAccountName) {
            $.masterAccountName = masterAccountName;
            return this;
        }

        /**
         * @param masterAccountName The name of the management account of the resource directory.
         * 
         * @return builder
         * 
         */
        public Builder masterAccountName(String masterAccountName) {
            return masterAccountName(Output.of(masterAccountName));
        }

        /**
         * @param modifyTime The time when the invitation was modified. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder modifyTime(@Nullable Output<String> modifyTime) {
            $.modifyTime = modifyTime;
            return this;
        }

        /**
         * @param modifyTime The time when the invitation was modified. The time is displayed in UTC.
         * 
         * @return builder
         * 
         */
        public Builder modifyTime(String modifyTime) {
            return modifyTime(Output.of(modifyTime));
        }

        /**
         * @param note The description of the invitation.
         * The description can be up to 1,024 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder note(@Nullable Output<String> note) {
            $.note = note;
            return this;
        }

        /**
         * @param note The description of the invitation.
         * The description can be up to 1,024 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder note(String note) {
            return note(Output.of(note));
        }

        /**
         * @param resourceDirectoryId The ID of the resource directory.
         * 
         * @return builder
         * 
         */
        public Builder resourceDirectoryId(@Nullable Output<String> resourceDirectoryId) {
            $.resourceDirectoryId = resourceDirectoryId;
            return this;
        }

        /**
         * @param resourceDirectoryId The ID of the resource directory.
         * 
         * @return builder
         * 
         */
        public Builder resourceDirectoryId(String resourceDirectoryId) {
            return resourceDirectoryId(Output.of(resourceDirectoryId));
        }

        /**
         * @param status The status of the invitation.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the invitation.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param targetEntity The ID or logon email address of the account that you want to invite.
         * 
         * @return builder
         * 
         */
        public Builder targetEntity(@Nullable Output<String> targetEntity) {
            $.targetEntity = targetEntity;
            return this;
        }

        /**
         * @param targetEntity The ID or logon email address of the account that you want to invite.
         * 
         * @return builder
         * 
         */
        public Builder targetEntity(String targetEntity) {
            return targetEntity(Output.of(targetEntity));
        }

        /**
         * @param targetType The type of the invited account. Valid values:
         * 
         * - Account: indicates the ID of the account.
         * - Email: indicates the logon email address of the account.
         * 
         * @return builder
         * 
         */
        public Builder targetType(@Nullable Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType The type of the invited account. Valid values:
         * 
         * - Account: indicates the ID of the account.
         * - Email: indicates the logon email address of the account.
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        public HandshakeState build() {
            return $;
        }
    }

}
