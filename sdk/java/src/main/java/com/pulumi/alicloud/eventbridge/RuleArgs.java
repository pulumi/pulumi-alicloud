// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eventbridge;

import com.pulumi.alicloud.eventbridge.inputs.RuleTargetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleArgs Empty = new RuleArgs();

    /**
     * The description of rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of event bus.
     * 
     */
    @Import(name="eventBusName", required=true)
    private Output<String> eventBusName;

    /**
     * @return The name of event bus.
     * 
     */
    public Output<String> eventBusName() {
        return this.eventBusName;
    }

    /**
     * The pattern to match interested events. Event mode, JSON format. The value description is as follows: `stringEqual` mode. `stringExpression` mode. Each field has up to 5 expressions (map structure).
     * 
     */
    @Import(name="filterPattern", required=true)
    private Output<String> filterPattern;

    /**
     * @return The pattern to match interested events. Event mode, JSON format. The value description is as follows: `stringEqual` mode. `stringExpression` mode. Each field has up to 5 expressions (map structure).
     * 
     */
    public Output<String> filterPattern() {
        return this.filterPattern;
    }

    /**
     * The name of rule.
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return The name of rule.
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    /**
     * Rule status, either Enable or Disable. Valid values: `DISABLE`, `ENABLE`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Rule status, either Enable or Disable. Valid values: `DISABLE`, `ENABLE`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The target of rule. See `targets` below.
     * 
     */
    @Import(name="targets", required=true)
    private Output<List<RuleTargetArgs>> targets;

    /**
     * @return The target of rule. See `targets` below.
     * 
     */
    public Output<List<RuleTargetArgs>> targets() {
        return this.targets;
    }

    private RuleArgs() {}

    private RuleArgs(RuleArgs $) {
        this.description = $.description;
        this.eventBusName = $.eventBusName;
        this.filterPattern = $.filterPattern;
        this.ruleName = $.ruleName;
        this.status = $.status;
        this.targets = $.targets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleArgs $;

        public Builder() {
            $ = new RuleArgs();
        }

        public Builder(RuleArgs defaults) {
            $ = new RuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param eventBusName The name of event bus.
         * 
         * @return builder
         * 
         */
        public Builder eventBusName(Output<String> eventBusName) {
            $.eventBusName = eventBusName;
            return this;
        }

        /**
         * @param eventBusName The name of event bus.
         * 
         * @return builder
         * 
         */
        public Builder eventBusName(String eventBusName) {
            return eventBusName(Output.of(eventBusName));
        }

        /**
         * @param filterPattern The pattern to match interested events. Event mode, JSON format. The value description is as follows: `stringEqual` mode. `stringExpression` mode. Each field has up to 5 expressions (map structure).
         * 
         * @return builder
         * 
         */
        public Builder filterPattern(Output<String> filterPattern) {
            $.filterPattern = filterPattern;
            return this;
        }

        /**
         * @param filterPattern The pattern to match interested events. Event mode, JSON format. The value description is as follows: `stringEqual` mode. `stringExpression` mode. Each field has up to 5 expressions (map structure).
         * 
         * @return builder
         * 
         */
        public Builder filterPattern(String filterPattern) {
            return filterPattern(Output.of(filterPattern));
        }

        /**
         * @param ruleName The name of rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName The name of rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param status Rule status, either Enable or Disable. Valid values: `DISABLE`, `ENABLE`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Rule status, either Enable or Disable. Valid values: `DISABLE`, `ENABLE`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param targets The target of rule. See `targets` below.
         * 
         * @return builder
         * 
         */
        public Builder targets(Output<List<RuleTargetArgs>> targets) {
            $.targets = targets;
            return this;
        }

        /**
         * @param targets The target of rule. See `targets` below.
         * 
         * @return builder
         * 
         */
        public Builder targets(List<RuleTargetArgs> targets) {
            return targets(Output.of(targets));
        }

        /**
         * @param targets The target of rule. See `targets` below.
         * 
         * @return builder
         * 
         */
        public Builder targets(RuleTargetArgs... targets) {
            return targets(List.of(targets));
        }

        public RuleArgs build() {
            $.eventBusName = Objects.requireNonNull($.eventBusName, "expected parameter 'eventBusName' to be non-null");
            $.filterPattern = Objects.requireNonNull($.filterPattern, "expected parameter 'filterPattern' to be non-null");
            $.ruleName = Objects.requireNonNull($.ruleName, "expected parameter 'ruleName' to be non-null");
            $.targets = Objects.requireNonNull($.targets, "expected parameter 'targets' to be non-null");
            return $;
        }
    }

}
