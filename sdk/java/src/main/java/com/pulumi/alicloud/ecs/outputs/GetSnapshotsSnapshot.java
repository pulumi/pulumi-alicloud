// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSnapshotsSnapshot {
    private String category;
    /**
     * @return Creation time. Time of creation. It is represented according to ISO8601, and UTC time is used. Format: YYYY-MM-DDThh:mmZ.
     * 
     */
    private String creationTime;
    /**
     * @return Description of the snapshot.
     * 
     */
    private String description;
    private String diskId;
    /**
     * @return Whether the snapshot is encrypted or not.
     * 
     */
    private Boolean encrypted;
    /**
     * @return ID of the snapshot.
     * 
     */
    private String id;
    private Boolean instantAccess;
    private Integer instantAccessRetentionDays;
    /**
     * @return Name of the snapshot.
     * 
     */
    private String name;
    /**
     * @return Product code on the image market place.
     * 
     */
    private String productCode;
    /**
     * @return Progress of snapshot creation, presented in percentage.
     * 
     */
    private String progress;
    /**
     * @return The remaining time of a snapshot creation task, in seconds.
     * 
     */
    private Integer remainTime;
    private String resourceGroupId;
    /**
     * @return The number of days that an automatic snapshot retains in the console for your instance.
     * 
     */
    private Integer retentionDays;
    private String snapshotId;
    private String snapshotName;
    private String snapshotSn;
    private String snapshotType;
    /**
     * @return Source disk ID, which is retained after the source disk of the snapshot is deleted.
     * 
     */
    private String sourceDiskId;
    /**
     * @return Size of the source disk, measured in GB.
     * 
     */
    private String sourceDiskSize;
    /**
     * @return Source disk attribute. Value range: `System`,`Data`.
     * 
     */
    private String sourceDiskType;
    private String sourceStorageType;
    /**
     * @return The snapshot status. Value range: `progressing`, `accomplished` and `failed`.
     * 
     */
    private String status;
    /**
     * @return A map of tags assigned to the snapshot.
     * 
     */
    private Map<String,Object> tags;
    private String type;
    /**
     * @return Whether the snapshots are used to create resources or not. Value range: `image`, `disk`, `image_disk` and `none`.
     * 
     */
    private String usage;

    private GetSnapshotsSnapshot() {}
    public String category() {
        return this.category;
    }
    /**
     * @return Creation time. Time of creation. It is represented according to ISO8601, and UTC time is used. Format: YYYY-MM-DDThh:mmZ.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return Description of the snapshot.
     * 
     */
    public String description() {
        return this.description;
    }
    public String diskId() {
        return this.diskId;
    }
    /**
     * @return Whether the snapshot is encrypted or not.
     * 
     */
    public Boolean encrypted() {
        return this.encrypted;
    }
    /**
     * @return ID of the snapshot.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean instantAccess() {
        return this.instantAccess;
    }
    public Integer instantAccessRetentionDays() {
        return this.instantAccessRetentionDays;
    }
    /**
     * @return Name of the snapshot.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Product code on the image market place.
     * 
     */
    public String productCode() {
        return this.productCode;
    }
    /**
     * @return Progress of snapshot creation, presented in percentage.
     * 
     */
    public String progress() {
        return this.progress;
    }
    /**
     * @return The remaining time of a snapshot creation task, in seconds.
     * 
     */
    public Integer remainTime() {
        return this.remainTime;
    }
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    /**
     * @return The number of days that an automatic snapshot retains in the console for your instance.
     * 
     */
    public Integer retentionDays() {
        return this.retentionDays;
    }
    public String snapshotId() {
        return this.snapshotId;
    }
    public String snapshotName() {
        return this.snapshotName;
    }
    public String snapshotSn() {
        return this.snapshotSn;
    }
    public String snapshotType() {
        return this.snapshotType;
    }
    /**
     * @return Source disk ID, which is retained after the source disk of the snapshot is deleted.
     * 
     */
    public String sourceDiskId() {
        return this.sourceDiskId;
    }
    /**
     * @return Size of the source disk, measured in GB.
     * 
     */
    public String sourceDiskSize() {
        return this.sourceDiskSize;
    }
    /**
     * @return Source disk attribute. Value range: `System`,`Data`.
     * 
     */
    public String sourceDiskType() {
        return this.sourceDiskType;
    }
    public String sourceStorageType() {
        return this.sourceStorageType;
    }
    /**
     * @return The snapshot status. Value range: `progressing`, `accomplished` and `failed`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A map of tags assigned to the snapshot.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }
    public String type() {
        return this.type;
    }
    /**
     * @return Whether the snapshots are used to create resources or not. Value range: `image`, `disk`, `image_disk` and `none`.
     * 
     */
    public String usage() {
        return this.usage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnapshotsSnapshot defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private String creationTime;
        private String description;
        private String diskId;
        private Boolean encrypted;
        private String id;
        private Boolean instantAccess;
        private Integer instantAccessRetentionDays;
        private String name;
        private String productCode;
        private String progress;
        private Integer remainTime;
        private String resourceGroupId;
        private Integer retentionDays;
        private String snapshotId;
        private String snapshotName;
        private String snapshotSn;
        private String snapshotType;
        private String sourceDiskId;
        private String sourceDiskSize;
        private String sourceDiskType;
        private String sourceStorageType;
        private String status;
        private Map<String,Object> tags;
        private String type;
        private String usage;
        public Builder() {}
        public Builder(GetSnapshotsSnapshot defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.creationTime = defaults.creationTime;
    	      this.description = defaults.description;
    	      this.diskId = defaults.diskId;
    	      this.encrypted = defaults.encrypted;
    	      this.id = defaults.id;
    	      this.instantAccess = defaults.instantAccess;
    	      this.instantAccessRetentionDays = defaults.instantAccessRetentionDays;
    	      this.name = defaults.name;
    	      this.productCode = defaults.productCode;
    	      this.progress = defaults.progress;
    	      this.remainTime = defaults.remainTime;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.retentionDays = defaults.retentionDays;
    	      this.snapshotId = defaults.snapshotId;
    	      this.snapshotName = defaults.snapshotName;
    	      this.snapshotSn = defaults.snapshotSn;
    	      this.snapshotType = defaults.snapshotType;
    	      this.sourceDiskId = defaults.sourceDiskId;
    	      this.sourceDiskSize = defaults.sourceDiskSize;
    	      this.sourceDiskType = defaults.sourceDiskType;
    	      this.sourceStorageType = defaults.sourceStorageType;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.usage = defaults.usage;
        }

        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder diskId(String diskId) {
            if (diskId == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "diskId");
            }
            this.diskId = diskId;
            return this;
        }
        @CustomType.Setter
        public Builder encrypted(Boolean encrypted) {
            if (encrypted == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "encrypted");
            }
            this.encrypted = encrypted;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instantAccess(Boolean instantAccess) {
            if (instantAccess == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "instantAccess");
            }
            this.instantAccess = instantAccess;
            return this;
        }
        @CustomType.Setter
        public Builder instantAccessRetentionDays(Integer instantAccessRetentionDays) {
            if (instantAccessRetentionDays == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "instantAccessRetentionDays");
            }
            this.instantAccessRetentionDays = instantAccessRetentionDays;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder productCode(String productCode) {
            if (productCode == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "productCode");
            }
            this.productCode = productCode;
            return this;
        }
        @CustomType.Setter
        public Builder progress(String progress) {
            if (progress == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "progress");
            }
            this.progress = progress;
            return this;
        }
        @CustomType.Setter
        public Builder remainTime(Integer remainTime) {
            if (remainTime == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "remainTime");
            }
            this.remainTime = remainTime;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            if (resourceGroupId == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "resourceGroupId");
            }
            this.resourceGroupId = resourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder retentionDays(Integer retentionDays) {
            if (retentionDays == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "retentionDays");
            }
            this.retentionDays = retentionDays;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            if (snapshotId == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "snapshotId");
            }
            this.snapshotId = snapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotName(String snapshotName) {
            if (snapshotName == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "snapshotName");
            }
            this.snapshotName = snapshotName;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotSn(String snapshotSn) {
            if (snapshotSn == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "snapshotSn");
            }
            this.snapshotSn = snapshotSn;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotType(String snapshotType) {
            if (snapshotType == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "snapshotType");
            }
            this.snapshotType = snapshotType;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDiskId(String sourceDiskId) {
            if (sourceDiskId == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "sourceDiskId");
            }
            this.sourceDiskId = sourceDiskId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDiskSize(String sourceDiskSize) {
            if (sourceDiskSize == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "sourceDiskSize");
            }
            this.sourceDiskSize = sourceDiskSize;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDiskType(String sourceDiskType) {
            if (sourceDiskType == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "sourceDiskType");
            }
            this.sourceDiskType = sourceDiskType;
            return this;
        }
        @CustomType.Setter
        public Builder sourceStorageType(String sourceStorageType) {
            if (sourceStorageType == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "sourceStorageType");
            }
            this.sourceStorageType = sourceStorageType;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder usage(String usage) {
            if (usage == null) {
              throw new MissingRequiredPropertyException("GetSnapshotsSnapshot", "usage");
            }
            this.usage = usage;
            return this;
        }
        public GetSnapshotsSnapshot build() {
            final var _resultValue = new GetSnapshotsSnapshot();
            _resultValue.category = category;
            _resultValue.creationTime = creationTime;
            _resultValue.description = description;
            _resultValue.diskId = diskId;
            _resultValue.encrypted = encrypted;
            _resultValue.id = id;
            _resultValue.instantAccess = instantAccess;
            _resultValue.instantAccessRetentionDays = instantAccessRetentionDays;
            _resultValue.name = name;
            _resultValue.productCode = productCode;
            _resultValue.progress = progress;
            _resultValue.remainTime = remainTime;
            _resultValue.resourceGroupId = resourceGroupId;
            _resultValue.retentionDays = retentionDays;
            _resultValue.snapshotId = snapshotId;
            _resultValue.snapshotName = snapshotName;
            _resultValue.snapshotSn = snapshotSn;
            _resultValue.snapshotType = snapshotType;
            _resultValue.sourceDiskId = sourceDiskId;
            _resultValue.sourceDiskSize = sourceDiskSize;
            _resultValue.sourceDiskType = sourceDiskType;
            _resultValue.sourceStorageType = sourceStorageType;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.usage = usage;
            return _resultValue;
        }
    }
}
