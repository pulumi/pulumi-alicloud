// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ga.outputs;

import com.pulumi.alicloud.ga.outputs.GetCustomRoutingPortMappingsCustomRoutingPortMappingDestinationSocketAddress;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCustomRoutingPortMappingsCustomRoutingPortMapping {
    /**
     * @return The ID of the GA instance.
     * 
     */
    private String acceleratorId;
    /**
     * @return The acceleration port.
     * 
     */
    private Integer acceleratorPort;
    /**
     * @return The service IP address and port of the backend instance.
     * 
     */
    private List<GetCustomRoutingPortMappingsCustomRoutingPortMappingDestinationSocketAddress> destinationSocketAddresses;
    /**
     * @return The ID of the endpoint group.
     * 
     */
    private String endpointGroupId;
    /**
     * @return The ID of the region in which the endpoint group resides.
     * 
     */
    private String endpointGroupRegion;
    /**
     * @return The ID of the endpoint.
     * 
     */
    private String endpointId;
    /**
     * @return The ID of the listener.
     * 
     */
    private String listenerId;
    /**
     * @return The protocol of the backend service.
     * 
     */
    private List<String> protocols;
    /**
     * @return The access policy of traffic for the backend instance. Valid Values: `allow`, `deny`.
     * 
     */
    private String status;
    /**
     * @return The ID of the endpoint (vSwitch).
     * 
     */
    private String vswitch;

    private GetCustomRoutingPortMappingsCustomRoutingPortMapping() {}
    /**
     * @return The ID of the GA instance.
     * 
     */
    public String acceleratorId() {
        return this.acceleratorId;
    }
    /**
     * @return The acceleration port.
     * 
     */
    public Integer acceleratorPort() {
        return this.acceleratorPort;
    }
    /**
     * @return The service IP address and port of the backend instance.
     * 
     */
    public List<GetCustomRoutingPortMappingsCustomRoutingPortMappingDestinationSocketAddress> destinationSocketAddresses() {
        return this.destinationSocketAddresses;
    }
    /**
     * @return The ID of the endpoint group.
     * 
     */
    public String endpointGroupId() {
        return this.endpointGroupId;
    }
    /**
     * @return The ID of the region in which the endpoint group resides.
     * 
     */
    public String endpointGroupRegion() {
        return this.endpointGroupRegion;
    }
    /**
     * @return The ID of the endpoint.
     * 
     */
    public String endpointId() {
        return this.endpointId;
    }
    /**
     * @return The ID of the listener.
     * 
     */
    public String listenerId() {
        return this.listenerId;
    }
    /**
     * @return The protocol of the backend service.
     * 
     */
    public List<String> protocols() {
        return this.protocols;
    }
    /**
     * @return The access policy of traffic for the backend instance. Valid Values: `allow`, `deny`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The ID of the endpoint (vSwitch).
     * 
     */
    public String vswitch() {
        return this.vswitch;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCustomRoutingPortMappingsCustomRoutingPortMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acceleratorId;
        private Integer acceleratorPort;
        private List<GetCustomRoutingPortMappingsCustomRoutingPortMappingDestinationSocketAddress> destinationSocketAddresses;
        private String endpointGroupId;
        private String endpointGroupRegion;
        private String endpointId;
        private String listenerId;
        private List<String> protocols;
        private String status;
        private String vswitch;
        public Builder() {}
        public Builder(GetCustomRoutingPortMappingsCustomRoutingPortMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorId = defaults.acceleratorId;
    	      this.acceleratorPort = defaults.acceleratorPort;
    	      this.destinationSocketAddresses = defaults.destinationSocketAddresses;
    	      this.endpointGroupId = defaults.endpointGroupId;
    	      this.endpointGroupRegion = defaults.endpointGroupRegion;
    	      this.endpointId = defaults.endpointId;
    	      this.listenerId = defaults.listenerId;
    	      this.protocols = defaults.protocols;
    	      this.status = defaults.status;
    	      this.vswitch = defaults.vswitch;
        }

        @CustomType.Setter
        public Builder acceleratorId(String acceleratorId) {
            if (acceleratorId == null) {
              throw new MissingRequiredPropertyException("GetCustomRoutingPortMappingsCustomRoutingPortMapping", "acceleratorId");
            }
            this.acceleratorId = acceleratorId;
            return this;
        }
        @CustomType.Setter
        public Builder acceleratorPort(Integer acceleratorPort) {
            if (acceleratorPort == null) {
              throw new MissingRequiredPropertyException("GetCustomRoutingPortMappingsCustomRoutingPortMapping", "acceleratorPort");
            }
            this.acceleratorPort = acceleratorPort;
            return this;
        }
        @CustomType.Setter
        public Builder destinationSocketAddresses(List<GetCustomRoutingPortMappingsCustomRoutingPortMappingDestinationSocketAddress> destinationSocketAddresses) {
            if (destinationSocketAddresses == null) {
              throw new MissingRequiredPropertyException("GetCustomRoutingPortMappingsCustomRoutingPortMapping", "destinationSocketAddresses");
            }
            this.destinationSocketAddresses = destinationSocketAddresses;
            return this;
        }
        public Builder destinationSocketAddresses(GetCustomRoutingPortMappingsCustomRoutingPortMappingDestinationSocketAddress... destinationSocketAddresses) {
            return destinationSocketAddresses(List.of(destinationSocketAddresses));
        }
        @CustomType.Setter
        public Builder endpointGroupId(String endpointGroupId) {
            if (endpointGroupId == null) {
              throw new MissingRequiredPropertyException("GetCustomRoutingPortMappingsCustomRoutingPortMapping", "endpointGroupId");
            }
            this.endpointGroupId = endpointGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder endpointGroupRegion(String endpointGroupRegion) {
            if (endpointGroupRegion == null) {
              throw new MissingRequiredPropertyException("GetCustomRoutingPortMappingsCustomRoutingPortMapping", "endpointGroupRegion");
            }
            this.endpointGroupRegion = endpointGroupRegion;
            return this;
        }
        @CustomType.Setter
        public Builder endpointId(String endpointId) {
            if (endpointId == null) {
              throw new MissingRequiredPropertyException("GetCustomRoutingPortMappingsCustomRoutingPortMapping", "endpointId");
            }
            this.endpointId = endpointId;
            return this;
        }
        @CustomType.Setter
        public Builder listenerId(String listenerId) {
            if (listenerId == null) {
              throw new MissingRequiredPropertyException("GetCustomRoutingPortMappingsCustomRoutingPortMapping", "listenerId");
            }
            this.listenerId = listenerId;
            return this;
        }
        @CustomType.Setter
        public Builder protocols(List<String> protocols) {
            if (protocols == null) {
              throw new MissingRequiredPropertyException("GetCustomRoutingPortMappingsCustomRoutingPortMapping", "protocols");
            }
            this.protocols = protocols;
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCustomRoutingPortMappingsCustomRoutingPortMapping", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder vswitch(String vswitch) {
            if (vswitch == null) {
              throw new MissingRequiredPropertyException("GetCustomRoutingPortMappingsCustomRoutingPortMapping", "vswitch");
            }
            this.vswitch = vswitch;
            return this;
        }
        public GetCustomRoutingPortMappingsCustomRoutingPortMapping build() {
            final var _resultValue = new GetCustomRoutingPortMappingsCustomRoutingPortMapping();
            _resultValue.acceleratorId = acceleratorId;
            _resultValue.acceleratorPort = acceleratorPort;
            _resultValue.destinationSocketAddresses = destinationSocketAddresses;
            _resultValue.endpointGroupId = endpointGroupId;
            _resultValue.endpointGroupRegion = endpointGroupRegion;
            _resultValue.endpointId = endpointId;
            _resultValue.listenerId = listenerId;
            _resultValue.protocols = protocols;
            _resultValue.status = status;
            _resultValue.vswitch = vswitch;
            return _resultValue;
        }
    }
}
