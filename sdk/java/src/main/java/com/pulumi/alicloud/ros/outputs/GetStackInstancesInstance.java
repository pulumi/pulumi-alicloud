// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ros.outputs;

import com.pulumi.alicloud.ros.outputs.GetStackInstancesInstanceParameterOverride;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetStackInstancesInstance {
    /**
     * @return The ID of the Stack Instance. The value formats as `&lt;stack_group_name&gt;:&lt;stack_instance_account_id&gt;:&lt;stack_instance_region_id&gt;`.
     * 
     */
    private String id;
    /**
     * @return ParameterOverrides.
     * 
     */
    private List<GetStackInstancesInstanceParameterOverride> parameterOverrides;
    /**
     * @return The ID of the stack group.
     * 
     */
    private String stackGroupId;
    /**
     * @return The name of the stack group.
     * 
     */
    private String stackGroupName;
    /**
     * @return The ID of the stack corresponding to the stack instance.
     * 
     */
    private String stackId;
    /**
     * @return The account to which the stack instance belongs.
     * 
     */
    private String stackInstanceAccountId;
    /**
     * @return The region of the stack instance.
     * 
     */
    private String stackInstanceRegionId;
    /**
     * @return The status of the stack instance. Valid values: `CURRENT` or `OUTDATED`.
     * * `CURRENT`: The stack corresponding to the stack instance is up to date with the stack group.
     * * `OUTDATED`: The stack corresponding to the stack instance is not up to date with the stack group. The `OUTDATED` state has the following possible causes:
     * * When the CreateStackInstances operation is called to create stack instances, the corresponding stacks fail to be created.
     * * When the UpdateStackInstances or UpdateStackGroup operation is called to update stack instances, the corresponding stacks fail to be updated, or only some of the stack instances are updated.
     * * The create or update operation is not complete.
     * 
     */
    private String status;
    /**
     * @return The reason why the stack is in its current state.
     * 
     */
    private String statusReason;

    private GetStackInstancesInstance() {}
    /**
     * @return The ID of the Stack Instance. The value formats as `&lt;stack_group_name&gt;:&lt;stack_instance_account_id&gt;:&lt;stack_instance_region_id&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ParameterOverrides.
     * 
     */
    public List<GetStackInstancesInstanceParameterOverride> parameterOverrides() {
        return this.parameterOverrides;
    }
    /**
     * @return The ID of the stack group.
     * 
     */
    public String stackGroupId() {
        return this.stackGroupId;
    }
    /**
     * @return The name of the stack group.
     * 
     */
    public String stackGroupName() {
        return this.stackGroupName;
    }
    /**
     * @return The ID of the stack corresponding to the stack instance.
     * 
     */
    public String stackId() {
        return this.stackId;
    }
    /**
     * @return The account to which the stack instance belongs.
     * 
     */
    public String stackInstanceAccountId() {
        return this.stackInstanceAccountId;
    }
    /**
     * @return The region of the stack instance.
     * 
     */
    public String stackInstanceRegionId() {
        return this.stackInstanceRegionId;
    }
    /**
     * @return The status of the stack instance. Valid values: `CURRENT` or `OUTDATED`.
     * * `CURRENT`: The stack corresponding to the stack instance is up to date with the stack group.
     * * `OUTDATED`: The stack corresponding to the stack instance is not up to date with the stack group. The `OUTDATED` state has the following possible causes:
     * * When the CreateStackInstances operation is called to create stack instances, the corresponding stacks fail to be created.
     * * When the UpdateStackInstances or UpdateStackGroup operation is called to update stack instances, the corresponding stacks fail to be updated, or only some of the stack instances are updated.
     * * The create or update operation is not complete.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The reason why the stack is in its current state.
     * 
     */
    public String statusReason() {
        return this.statusReason;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStackInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private List<GetStackInstancesInstanceParameterOverride> parameterOverrides;
        private String stackGroupId;
        private String stackGroupName;
        private String stackId;
        private String stackInstanceAccountId;
        private String stackInstanceRegionId;
        private String status;
        private String statusReason;
        public Builder() {}
        public Builder(GetStackInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.parameterOverrides = defaults.parameterOverrides;
    	      this.stackGroupId = defaults.stackGroupId;
    	      this.stackGroupName = defaults.stackGroupName;
    	      this.stackId = defaults.stackId;
    	      this.stackInstanceAccountId = defaults.stackInstanceAccountId;
    	      this.stackInstanceRegionId = defaults.stackInstanceRegionId;
    	      this.status = defaults.status;
    	      this.statusReason = defaults.statusReason;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder parameterOverrides(List<GetStackInstancesInstanceParameterOverride> parameterOverrides) {
            this.parameterOverrides = Objects.requireNonNull(parameterOverrides);
            return this;
        }
        public Builder parameterOverrides(GetStackInstancesInstanceParameterOverride... parameterOverrides) {
            return parameterOverrides(List.of(parameterOverrides));
        }
        @CustomType.Setter
        public Builder stackGroupId(String stackGroupId) {
            this.stackGroupId = Objects.requireNonNull(stackGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder stackGroupName(String stackGroupName) {
            this.stackGroupName = Objects.requireNonNull(stackGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder stackId(String stackId) {
            this.stackId = Objects.requireNonNull(stackId);
            return this;
        }
        @CustomType.Setter
        public Builder stackInstanceAccountId(String stackInstanceAccountId) {
            this.stackInstanceAccountId = Objects.requireNonNull(stackInstanceAccountId);
            return this;
        }
        @CustomType.Setter
        public Builder stackInstanceRegionId(String stackInstanceRegionId) {
            this.stackInstanceRegionId = Objects.requireNonNull(stackInstanceRegionId);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusReason(String statusReason) {
            this.statusReason = Objects.requireNonNull(statusReason);
            return this;
        }
        public GetStackInstancesInstance build() {
            final var o = new GetStackInstancesInstance();
            o.id = id;
            o.parameterOverrides = parameterOverrides;
            o.stackGroupId = stackGroupId;
            o.stackGroupName = stackGroupName;
            o.stackId = stackId;
            o.stackInstanceAccountId = stackInstanceAccountId;
            o.stackInstanceRegionId = stackInstanceRegionId;
            o.status = status;
            o.statusReason = statusReason;
            return o;
        }
    }
}
