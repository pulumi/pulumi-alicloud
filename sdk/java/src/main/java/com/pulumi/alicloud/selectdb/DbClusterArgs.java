// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.selectdb;

import com.pulumi.alicloud.selectdb.inputs.DbClusterDesiredParamArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbClusterArgs Empty = new DbClusterArgs();

    /**
     * The desired cache size on creating cluster. The number should be divided by 100.
     * 
     */
    @Import(name="cacheSize", required=true)
    private Output<Integer> cacheSize;

    /**
     * @return The desired cache size on creating cluster. The number should be divided by 100.
     * 
     */
    public Output<Integer> cacheSize() {
        return this.cacheSize;
    }

    /**
     * The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     * 
     */
    @Import(name="dbClusterClass", required=true)
    private Output<String> dbClusterClass;

    /**
     * @return The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
     * 
     */
    public Output<String> dbClusterClass() {
        return this.dbClusterClass;
    }

    /**
     * The DBCluster description.
     * 
     */
    @Import(name="dbClusterDescription", required=true)
    private Output<String> dbClusterDescription;

    /**
     * @return The DBCluster description.
     * 
     */
    public Output<String> dbClusterDescription() {
        return this.dbClusterDescription;
    }

    /**
     * The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
     * 
     */
    @Import(name="dbInstanceId", required=true)
    private Output<String> dbInstanceId;

    /**
     * @return The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
     * 
     */
    public Output<String> dbInstanceId() {
        return this.dbInstanceId;
    }

    /**
     * The modified parameter in DBCluster. See `desired_params` below.
     * 
     */
    @Import(name="desiredParams")
    private @Nullable Output<List<DbClusterDesiredParamArgs>> desiredParams;

    /**
     * @return The modified parameter in DBCluster. See `desired_params` below.
     * 
     */
    public Optional<Output<List<DbClusterDesiredParamArgs>>> desiredParams() {
        return Optional.ofNullable(this.desiredParams);
    }

    /**
     * The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
     * 
     */
    @Import(name="desiredStatus")
    private @Nullable Output<String> desiredStatus;

    /**
     * @return The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
     * 
     */
    public Optional<Output<String>> desiredStatus() {
        return Optional.ofNullable(this.desiredStatus);
    }

    /**
     * The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    @Import(name="paymentType", required=true)
    private Output<String> paymentType;

    /**
     * @return The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
     * 
     */
    public Output<String> paymentType() {
        return this.paymentType;
    }

    private DbClusterArgs() {}

    private DbClusterArgs(DbClusterArgs $) {
        this.cacheSize = $.cacheSize;
        this.dbClusterClass = $.dbClusterClass;
        this.dbClusterDescription = $.dbClusterDescription;
        this.dbInstanceId = $.dbInstanceId;
        this.desiredParams = $.desiredParams;
        this.desiredStatus = $.desiredStatus;
        this.paymentType = $.paymentType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbClusterArgs $;

        public Builder() {
            $ = new DbClusterArgs();
        }

        public Builder(DbClusterArgs defaults) {
            $ = new DbClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheSize The desired cache size on creating cluster. The number should be divided by 100.
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(Output<Integer> cacheSize) {
            $.cacheSize = cacheSize;
            return this;
        }

        /**
         * @param cacheSize The desired cache size on creating cluster. The number should be divided by 100.
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(Integer cacheSize) {
            return cacheSize(Output.of(cacheSize));
        }

        /**
         * @param dbClusterClass The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterClass(Output<String> dbClusterClass) {
            $.dbClusterClass = dbClusterClass;
            return this;
        }

        /**
         * @param dbClusterClass The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterClass(String dbClusterClass) {
            return dbClusterClass(Output.of(dbClusterClass));
        }

        /**
         * @param dbClusterDescription The DBCluster description.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterDescription(Output<String> dbClusterDescription) {
            $.dbClusterDescription = dbClusterDescription;
            return this;
        }

        /**
         * @param dbClusterDescription The DBCluster description.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterDescription(String dbClusterDescription) {
            return dbClusterDescription(Output.of(dbClusterDescription));
        }

        /**
         * @param dbInstanceId The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(Output<String> dbInstanceId) {
            $.dbInstanceId = dbInstanceId;
            return this;
        }

        /**
         * @param dbInstanceId The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
         * 
         * @return builder
         * 
         */
        public Builder dbInstanceId(String dbInstanceId) {
            return dbInstanceId(Output.of(dbInstanceId));
        }

        /**
         * @param desiredParams The modified parameter in DBCluster. See `desired_params` below.
         * 
         * @return builder
         * 
         */
        public Builder desiredParams(@Nullable Output<List<DbClusterDesiredParamArgs>> desiredParams) {
            $.desiredParams = desiredParams;
            return this;
        }

        /**
         * @param desiredParams The modified parameter in DBCluster. See `desired_params` below.
         * 
         * @return builder
         * 
         */
        public Builder desiredParams(List<DbClusterDesiredParamArgs> desiredParams) {
            return desiredParams(Output.of(desiredParams));
        }

        /**
         * @param desiredParams The modified parameter in DBCluster. See `desired_params` below.
         * 
         * @return builder
         * 
         */
        public Builder desiredParams(DbClusterDesiredParamArgs... desiredParams) {
            return desiredParams(List.of(desiredParams));
        }

        /**
         * @param desiredStatus The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
         * 
         * @return builder
         * 
         */
        public Builder desiredStatus(@Nullable Output<String> desiredStatus) {
            $.desiredStatus = desiredStatus;
            return this;
        }

        /**
         * @param desiredStatus The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
         * 
         * @return builder
         * 
         */
        public Builder desiredStatus(String desiredStatus) {
            return desiredStatus(Output.of(desiredStatus));
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        public DbClusterArgs build() {
            if ($.cacheSize == null) {
                throw new MissingRequiredPropertyException("DbClusterArgs", "cacheSize");
            }
            if ($.dbClusterClass == null) {
                throw new MissingRequiredPropertyException("DbClusterArgs", "dbClusterClass");
            }
            if ($.dbClusterDescription == null) {
                throw new MissingRequiredPropertyException("DbClusterArgs", "dbClusterDescription");
            }
            if ($.dbInstanceId == null) {
                throw new MissingRequiredPropertyException("DbClusterArgs", "dbInstanceId");
            }
            if ($.paymentType == null) {
                throw new MissingRequiredPropertyException("DbClusterArgs", "paymentType");
            }
            return $;
        }
    }

}
