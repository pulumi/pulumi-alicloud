// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cloudphone.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PolicyNetRedirectPolicy {
    /**
     * @return Whether to manually configure the transparent proxy.
     * 
     */
    private @Nullable String customProxy;
    /**
     * @return The transparent proxy IP address. The format is IPv4 address.
     * 
     */
    private @Nullable String hostAddr;
    /**
     * @return Whether to enable network redirection.
     * 
     */
    private @Nullable String netRedirect;
    /**
     * @return Transparent proxy port. The Port value range is 1\~ 65535.
     * 
     */
    private @Nullable String port;
    /**
     * @return The proxy password. The length range is 1\~ 256. Chinese characters and white space characters are not allowed.
     * 
     */
    private @Nullable String proxyPassword;
    /**
     * @return Agent protocol type.
     * 
     */
    private @Nullable String proxyType;
    /**
     * @return The proxy user name. The length range is 1\~ 256. Chinese characters and white space characters are not allowed.
     * 
     */
    private @Nullable String proxyUserName;

    private PolicyNetRedirectPolicy() {}
    /**
     * @return Whether to manually configure the transparent proxy.
     * 
     */
    public Optional<String> customProxy() {
        return Optional.ofNullable(this.customProxy);
    }
    /**
     * @return The transparent proxy IP address. The format is IPv4 address.
     * 
     */
    public Optional<String> hostAddr() {
        return Optional.ofNullable(this.hostAddr);
    }
    /**
     * @return Whether to enable network redirection.
     * 
     */
    public Optional<String> netRedirect() {
        return Optional.ofNullable(this.netRedirect);
    }
    /**
     * @return Transparent proxy port. The Port value range is 1\~ 65535.
     * 
     */
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The proxy password. The length range is 1\~ 256. Chinese characters and white space characters are not allowed.
     * 
     */
    public Optional<String> proxyPassword() {
        return Optional.ofNullable(this.proxyPassword);
    }
    /**
     * @return Agent protocol type.
     * 
     */
    public Optional<String> proxyType() {
        return Optional.ofNullable(this.proxyType);
    }
    /**
     * @return The proxy user name. The length range is 1\~ 256. Chinese characters and white space characters are not allowed.
     * 
     */
    public Optional<String> proxyUserName() {
        return Optional.ofNullable(this.proxyUserName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyNetRedirectPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String customProxy;
        private @Nullable String hostAddr;
        private @Nullable String netRedirect;
        private @Nullable String port;
        private @Nullable String proxyPassword;
        private @Nullable String proxyType;
        private @Nullable String proxyUserName;
        public Builder() {}
        public Builder(PolicyNetRedirectPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customProxy = defaults.customProxy;
    	      this.hostAddr = defaults.hostAddr;
    	      this.netRedirect = defaults.netRedirect;
    	      this.port = defaults.port;
    	      this.proxyPassword = defaults.proxyPassword;
    	      this.proxyType = defaults.proxyType;
    	      this.proxyUserName = defaults.proxyUserName;
        }

        @CustomType.Setter
        public Builder customProxy(@Nullable String customProxy) {

            this.customProxy = customProxy;
            return this;
        }
        @CustomType.Setter
        public Builder hostAddr(@Nullable String hostAddr) {

            this.hostAddr = hostAddr;
            return this;
        }
        @CustomType.Setter
        public Builder netRedirect(@Nullable String netRedirect) {

            this.netRedirect = netRedirect;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable String port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder proxyPassword(@Nullable String proxyPassword) {

            this.proxyPassword = proxyPassword;
            return this;
        }
        @CustomType.Setter
        public Builder proxyType(@Nullable String proxyType) {

            this.proxyType = proxyType;
            return this;
        }
        @CustomType.Setter
        public Builder proxyUserName(@Nullable String proxyUserName) {

            this.proxyUserName = proxyUserName;
            return this;
        }
        public PolicyNetRedirectPolicy build() {
            final var _resultValue = new PolicyNetRedirectPolicy();
            _resultValue.customProxy = customProxy;
            _resultValue.hostAddr = hostAddr;
            _resultValue.netRedirect = netRedirect;
            _resultValue.port = port;
            _resultValue.proxyPassword = proxyPassword;
            _resultValue.proxyType = proxyType;
            _resultValue.proxyUserName = proxyUserName;
            return _resultValue;
        }
    }
}
