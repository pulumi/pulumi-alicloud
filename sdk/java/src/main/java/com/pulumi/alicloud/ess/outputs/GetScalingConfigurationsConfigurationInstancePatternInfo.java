// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ess.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetScalingConfigurationsConfigurationInstancePatternInfo {
    /**
     * @return Architecture N of instance type N. Valid values: X86, Heterogeneous, BareMetal, Arm, SuperComputeCluster.
     * 
     */
    private List<String> architectures;
    /**
     * @return Specifies whether to include burstable instance types.  Valid values: Exclude, Include, Required.
     * 
     */
    private String burstablePerformance;
    /**
     * @return The number of vCPUs that are specified for an instance type in instancePatternInfo.
     * 
     */
    private Integer cores;
    /**
     * @return Instance type N that you want to exclude. You can use wildcard characters, such as an asterisk (*), to exclude an instance type or an instance family.
     * 
     */
    private List<String> excludedInstanceTypes;
    /**
     * @return The instance family level in instancePatternInfo.
     * 
     */
    private String instanceFamilyLevel;
    /**
     * @return The maximum hourly price for a pay-as-you-go instance or a preemptible instance in instancePatternInfo.
     * 
     */
    private Double maxPrice;
    /**
     * @return The memory size that is specified for an instance type in instancePatternInfo.
     * 
     */
    private Double memory;

    private GetScalingConfigurationsConfigurationInstancePatternInfo() {}
    /**
     * @return Architecture N of instance type N. Valid values: X86, Heterogeneous, BareMetal, Arm, SuperComputeCluster.
     * 
     */
    public List<String> architectures() {
        return this.architectures;
    }
    /**
     * @return Specifies whether to include burstable instance types.  Valid values: Exclude, Include, Required.
     * 
     */
    public String burstablePerformance() {
        return this.burstablePerformance;
    }
    /**
     * @return The number of vCPUs that are specified for an instance type in instancePatternInfo.
     * 
     */
    public Integer cores() {
        return this.cores;
    }
    /**
     * @return Instance type N that you want to exclude. You can use wildcard characters, such as an asterisk (*), to exclude an instance type or an instance family.
     * 
     */
    public List<String> excludedInstanceTypes() {
        return this.excludedInstanceTypes;
    }
    /**
     * @return The instance family level in instancePatternInfo.
     * 
     */
    public String instanceFamilyLevel() {
        return this.instanceFamilyLevel;
    }
    /**
     * @return The maximum hourly price for a pay-as-you-go instance or a preemptible instance in instancePatternInfo.
     * 
     */
    public Double maxPrice() {
        return this.maxPrice;
    }
    /**
     * @return The memory size that is specified for an instance type in instancePatternInfo.
     * 
     */
    public Double memory() {
        return this.memory;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScalingConfigurationsConfigurationInstancePatternInfo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> architectures;
        private String burstablePerformance;
        private Integer cores;
        private List<String> excludedInstanceTypes;
        private String instanceFamilyLevel;
        private Double maxPrice;
        private Double memory;
        public Builder() {}
        public Builder(GetScalingConfigurationsConfigurationInstancePatternInfo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architectures = defaults.architectures;
    	      this.burstablePerformance = defaults.burstablePerformance;
    	      this.cores = defaults.cores;
    	      this.excludedInstanceTypes = defaults.excludedInstanceTypes;
    	      this.instanceFamilyLevel = defaults.instanceFamilyLevel;
    	      this.maxPrice = defaults.maxPrice;
    	      this.memory = defaults.memory;
        }

        @CustomType.Setter
        public Builder architectures(List<String> architectures) {
            if (architectures == null) {
              throw new MissingRequiredPropertyException("GetScalingConfigurationsConfigurationInstancePatternInfo", "architectures");
            }
            this.architectures = architectures;
            return this;
        }
        public Builder architectures(String... architectures) {
            return architectures(List.of(architectures));
        }
        @CustomType.Setter
        public Builder burstablePerformance(String burstablePerformance) {
            if (burstablePerformance == null) {
              throw new MissingRequiredPropertyException("GetScalingConfigurationsConfigurationInstancePatternInfo", "burstablePerformance");
            }
            this.burstablePerformance = burstablePerformance;
            return this;
        }
        @CustomType.Setter
        public Builder cores(Integer cores) {
            if (cores == null) {
              throw new MissingRequiredPropertyException("GetScalingConfigurationsConfigurationInstancePatternInfo", "cores");
            }
            this.cores = cores;
            return this;
        }
        @CustomType.Setter
        public Builder excludedInstanceTypes(List<String> excludedInstanceTypes) {
            if (excludedInstanceTypes == null) {
              throw new MissingRequiredPropertyException("GetScalingConfigurationsConfigurationInstancePatternInfo", "excludedInstanceTypes");
            }
            this.excludedInstanceTypes = excludedInstanceTypes;
            return this;
        }
        public Builder excludedInstanceTypes(String... excludedInstanceTypes) {
            return excludedInstanceTypes(List.of(excludedInstanceTypes));
        }
        @CustomType.Setter
        public Builder instanceFamilyLevel(String instanceFamilyLevel) {
            if (instanceFamilyLevel == null) {
              throw new MissingRequiredPropertyException("GetScalingConfigurationsConfigurationInstancePatternInfo", "instanceFamilyLevel");
            }
            this.instanceFamilyLevel = instanceFamilyLevel;
            return this;
        }
        @CustomType.Setter
        public Builder maxPrice(Double maxPrice) {
            if (maxPrice == null) {
              throw new MissingRequiredPropertyException("GetScalingConfigurationsConfigurationInstancePatternInfo", "maxPrice");
            }
            this.maxPrice = maxPrice;
            return this;
        }
        @CustomType.Setter
        public Builder memory(Double memory) {
            if (memory == null) {
              throw new MissingRequiredPropertyException("GetScalingConfigurationsConfigurationInstancePatternInfo", "memory");
            }
            this.memory = memory;
            return this;
        }
        public GetScalingConfigurationsConfigurationInstancePatternInfo build() {
            final var _resultValue = new GetScalingConfigurationsConfigurationInstancePatternInfo();
            _resultValue.architectures = architectures;
            _resultValue.burstablePerformance = burstablePerformance;
            _resultValue.cores = cores;
            _resultValue.excludedInstanceTypes = excludedInstanceTypes;
            _resultValue.instanceFamilyLevel = instanceFamilyLevel;
            _resultValue.maxPrice = maxPrice;
            _resultValue.memory = memory;
            return _resultValue;
        }
    }
}
