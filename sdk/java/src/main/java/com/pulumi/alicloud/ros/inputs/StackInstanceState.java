// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ros.inputs;

import com.pulumi.alicloud.ros.inputs.StackInstanceParameterOverrideArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StackInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final StackInstanceState Empty = new StackInstanceState();

    /**
     * The operation description.
     * 
     */
    @Import(name="operationDescription")
    private @Nullable Output<String> operationDescription;

    /**
     * @return The operation description.
     * 
     */
    public Optional<Output<String>> operationDescription() {
        return Optional.ofNullable(this.operationDescription);
    }

    /**
     * The operation preferences. The operation settings. The following fields are supported:
     * * `FailureToleranceCount` The maximum number of stack group operation failures that can occur. In a stack group operation, if the total number of failures does not exceed the FailureToleranceCount value, the operation succeeds. Otherwise, the operation fails. If the FailureToleranceCount parameter is not specified, the default value 0 is used. You cannot specify both FailureToleranceCount and FailureTolerancePercentage. Valid values: `0` to `20`.
     * * `FailureTolerancePercentage`: The percentage of stack group operation failures that can occur. In a stack group operation, if the percentage of failures does not exceed the FailureTolerancePercentage value, the operation succeeds. Otherwise, the operation fails. You cannot specify both FailureToleranceCount and FailureTolerancePercentage. Valid values: `0` to `100`.
     * * `MaxConcurrentCount`: The maximum number of accounts within which to perform this operation at one time. You cannot specify both MaxConcurrentCount and MaxConcurrentPercentage. Valid values: `1` to `20`.
     * * `MaxConcurrentPercentage`: The maximum percentage of accounts within which to perform this operation at one time. You cannot specify both MaxConcurrentCount and MaxConcurrentPercentage. Valid values: `1` to `100`
     * 
     */
    @Import(name="operationPreferences")
    private @Nullable Output<String> operationPreferences;

    /**
     * @return The operation preferences. The operation settings. The following fields are supported:
     * * `FailureToleranceCount` The maximum number of stack group operation failures that can occur. In a stack group operation, if the total number of failures does not exceed the FailureToleranceCount value, the operation succeeds. Otherwise, the operation fails. If the FailureToleranceCount parameter is not specified, the default value 0 is used. You cannot specify both FailureToleranceCount and FailureTolerancePercentage. Valid values: `0` to `20`.
     * * `FailureTolerancePercentage`: The percentage of stack group operation failures that can occur. In a stack group operation, if the percentage of failures does not exceed the FailureTolerancePercentage value, the operation succeeds. Otherwise, the operation fails. You cannot specify both FailureToleranceCount and FailureTolerancePercentage. Valid values: `0` to `100`.
     * * `MaxConcurrentCount`: The maximum number of accounts within which to perform this operation at one time. You cannot specify both MaxConcurrentCount and MaxConcurrentPercentage. Valid values: `1` to `20`.
     * * `MaxConcurrentPercentage`: The maximum percentage of accounts within which to perform this operation at one time. You cannot specify both MaxConcurrentCount and MaxConcurrentPercentage. Valid values: `1` to `100`
     * 
     */
    public Optional<Output<String>> operationPreferences() {
        return Optional.ofNullable(this.operationPreferences);
    }

    /**
     * ParameterOverrides. See the following `Block parameter_overrides`.
     * 
     */
    @Import(name="parameterOverrides")
    private @Nullable Output<List<StackInstanceParameterOverrideArgs>> parameterOverrides;

    /**
     * @return ParameterOverrides. See the following `Block parameter_overrides`.
     * 
     */
    public Optional<Output<List<StackInstanceParameterOverrideArgs>>> parameterOverrides() {
        return Optional.ofNullable(this.parameterOverrides);
    }

    /**
     * Specifies whether to retain the stack corresponding to the stack instance.Default value `false`. **NOTE:** When `retain_stacks` is `true`, the stack is retained. If the stack is retained, the corresponding stack is not deleted when the stack instance is deleted from the stack group.
     * 
     */
    @Import(name="retainStacks")
    private @Nullable Output<Boolean> retainStacks;

    /**
     * @return Specifies whether to retain the stack corresponding to the stack instance.Default value `false`. **NOTE:** When `retain_stacks` is `true`, the stack is retained. If the stack is retained, the corresponding stack is not deleted when the stack instance is deleted from the stack group.
     * 
     */
    public Optional<Output<Boolean>> retainStacks() {
        return Optional.ofNullable(this.retainStacks);
    }

    /**
     * The name of the stack group.
     * 
     */
    @Import(name="stackGroupName")
    private @Nullable Output<String> stackGroupName;

    /**
     * @return The name of the stack group.
     * 
     */
    public Optional<Output<String>> stackGroupName() {
        return Optional.ofNullable(this.stackGroupName);
    }

    /**
     * The account to which the stack instance belongs.
     * 
     */
    @Import(name="stackInstanceAccountId")
    private @Nullable Output<String> stackInstanceAccountId;

    /**
     * @return The account to which the stack instance belongs.
     * 
     */
    public Optional<Output<String>> stackInstanceAccountId() {
        return Optional.ofNullable(this.stackInstanceAccountId);
    }

    /**
     * The region of the stack instance.
     * 
     */
    @Import(name="stackInstanceRegionId")
    private @Nullable Output<String> stackInstanceRegionId;

    /**
     * @return The region of the stack instance.
     * 
     */
    public Optional<Output<String>> stackInstanceRegionId() {
        return Optional.ofNullable(this.stackInstanceRegionId);
    }

    /**
     * The status of the stack instance. Valid values: `CURRENT` or `OUTDATED`.
     * * `CURRENT`: The stack corresponding to the stack instance is up to date with the stack group.
     * * `OUTDATED`: The stack corresponding to the stack instance is not up to date with the stack group. The `OUTDATED` state has the following possible causes:
     * * When the CreateStackInstances operation is called to create stack instances, the corresponding stacks fail to be created.
     * * When the UpdateStackInstances or UpdateStackGroup operation is called to update stack instances, the corresponding stacks fail to be updated, or only some of the stack instances are updated.
     * * The create or update operation is not complete.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the stack instance. Valid values: `CURRENT` or `OUTDATED`.
     * * `CURRENT`: The stack corresponding to the stack instance is up to date with the stack group.
     * * `OUTDATED`: The stack corresponding to the stack instance is not up to date with the stack group. The `OUTDATED` state has the following possible causes:
     * * When the CreateStackInstances operation is called to create stack instances, the corresponding stacks fail to be created.
     * * When the UpdateStackInstances or UpdateStackGroup operation is called to update stack instances, the corresponding stacks fail to be updated, or only some of the stack instances are updated.
     * * The create or update operation is not complete.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The timeout period that is specified for the stack creation request. Default value: `60`. Unit: `minutes`.
     * 
     */
    @Import(name="timeoutInMinutes")
    private @Nullable Output<String> timeoutInMinutes;

    /**
     * @return The timeout period that is specified for the stack creation request. Default value: `60`. Unit: `minutes`.
     * 
     */
    public Optional<Output<String>> timeoutInMinutes() {
        return Optional.ofNullable(this.timeoutInMinutes);
    }

    private StackInstanceState() {}

    private StackInstanceState(StackInstanceState $) {
        this.operationDescription = $.operationDescription;
        this.operationPreferences = $.operationPreferences;
        this.parameterOverrides = $.parameterOverrides;
        this.retainStacks = $.retainStacks;
        this.stackGroupName = $.stackGroupName;
        this.stackInstanceAccountId = $.stackInstanceAccountId;
        this.stackInstanceRegionId = $.stackInstanceRegionId;
        this.status = $.status;
        this.timeoutInMinutes = $.timeoutInMinutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StackInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StackInstanceState $;

        public Builder() {
            $ = new StackInstanceState();
        }

        public Builder(StackInstanceState defaults) {
            $ = new StackInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param operationDescription The operation description.
         * 
         * @return builder
         * 
         */
        public Builder operationDescription(@Nullable Output<String> operationDescription) {
            $.operationDescription = operationDescription;
            return this;
        }

        /**
         * @param operationDescription The operation description.
         * 
         * @return builder
         * 
         */
        public Builder operationDescription(String operationDescription) {
            return operationDescription(Output.of(operationDescription));
        }

        /**
         * @param operationPreferences The operation preferences. The operation settings. The following fields are supported:
         * * `FailureToleranceCount` The maximum number of stack group operation failures that can occur. In a stack group operation, if the total number of failures does not exceed the FailureToleranceCount value, the operation succeeds. Otherwise, the operation fails. If the FailureToleranceCount parameter is not specified, the default value 0 is used. You cannot specify both FailureToleranceCount and FailureTolerancePercentage. Valid values: `0` to `20`.
         * * `FailureTolerancePercentage`: The percentage of stack group operation failures that can occur. In a stack group operation, if the percentage of failures does not exceed the FailureTolerancePercentage value, the operation succeeds. Otherwise, the operation fails. You cannot specify both FailureToleranceCount and FailureTolerancePercentage. Valid values: `0` to `100`.
         * * `MaxConcurrentCount`: The maximum number of accounts within which to perform this operation at one time. You cannot specify both MaxConcurrentCount and MaxConcurrentPercentage. Valid values: `1` to `20`.
         * * `MaxConcurrentPercentage`: The maximum percentage of accounts within which to perform this operation at one time. You cannot specify both MaxConcurrentCount and MaxConcurrentPercentage. Valid values: `1` to `100`
         * 
         * @return builder
         * 
         */
        public Builder operationPreferences(@Nullable Output<String> operationPreferences) {
            $.operationPreferences = operationPreferences;
            return this;
        }

        /**
         * @param operationPreferences The operation preferences. The operation settings. The following fields are supported:
         * * `FailureToleranceCount` The maximum number of stack group operation failures that can occur. In a stack group operation, if the total number of failures does not exceed the FailureToleranceCount value, the operation succeeds. Otherwise, the operation fails. If the FailureToleranceCount parameter is not specified, the default value 0 is used. You cannot specify both FailureToleranceCount and FailureTolerancePercentage. Valid values: `0` to `20`.
         * * `FailureTolerancePercentage`: The percentage of stack group operation failures that can occur. In a stack group operation, if the percentage of failures does not exceed the FailureTolerancePercentage value, the operation succeeds. Otherwise, the operation fails. You cannot specify both FailureToleranceCount and FailureTolerancePercentage. Valid values: `0` to `100`.
         * * `MaxConcurrentCount`: The maximum number of accounts within which to perform this operation at one time. You cannot specify both MaxConcurrentCount and MaxConcurrentPercentage. Valid values: `1` to `20`.
         * * `MaxConcurrentPercentage`: The maximum percentage of accounts within which to perform this operation at one time. You cannot specify both MaxConcurrentCount and MaxConcurrentPercentage. Valid values: `1` to `100`
         * 
         * @return builder
         * 
         */
        public Builder operationPreferences(String operationPreferences) {
            return operationPreferences(Output.of(operationPreferences));
        }

        /**
         * @param parameterOverrides ParameterOverrides. See the following `Block parameter_overrides`.
         * 
         * @return builder
         * 
         */
        public Builder parameterOverrides(@Nullable Output<List<StackInstanceParameterOverrideArgs>> parameterOverrides) {
            $.parameterOverrides = parameterOverrides;
            return this;
        }

        /**
         * @param parameterOverrides ParameterOverrides. See the following `Block parameter_overrides`.
         * 
         * @return builder
         * 
         */
        public Builder parameterOverrides(List<StackInstanceParameterOverrideArgs> parameterOverrides) {
            return parameterOverrides(Output.of(parameterOverrides));
        }

        /**
         * @param parameterOverrides ParameterOverrides. See the following `Block parameter_overrides`.
         * 
         * @return builder
         * 
         */
        public Builder parameterOverrides(StackInstanceParameterOverrideArgs... parameterOverrides) {
            return parameterOverrides(List.of(parameterOverrides));
        }

        /**
         * @param retainStacks Specifies whether to retain the stack corresponding to the stack instance.Default value `false`. **NOTE:** When `retain_stacks` is `true`, the stack is retained. If the stack is retained, the corresponding stack is not deleted when the stack instance is deleted from the stack group.
         * 
         * @return builder
         * 
         */
        public Builder retainStacks(@Nullable Output<Boolean> retainStacks) {
            $.retainStacks = retainStacks;
            return this;
        }

        /**
         * @param retainStacks Specifies whether to retain the stack corresponding to the stack instance.Default value `false`. **NOTE:** When `retain_stacks` is `true`, the stack is retained. If the stack is retained, the corresponding stack is not deleted when the stack instance is deleted from the stack group.
         * 
         * @return builder
         * 
         */
        public Builder retainStacks(Boolean retainStacks) {
            return retainStacks(Output.of(retainStacks));
        }

        /**
         * @param stackGroupName The name of the stack group.
         * 
         * @return builder
         * 
         */
        public Builder stackGroupName(@Nullable Output<String> stackGroupName) {
            $.stackGroupName = stackGroupName;
            return this;
        }

        /**
         * @param stackGroupName The name of the stack group.
         * 
         * @return builder
         * 
         */
        public Builder stackGroupName(String stackGroupName) {
            return stackGroupName(Output.of(stackGroupName));
        }

        /**
         * @param stackInstanceAccountId The account to which the stack instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder stackInstanceAccountId(@Nullable Output<String> stackInstanceAccountId) {
            $.stackInstanceAccountId = stackInstanceAccountId;
            return this;
        }

        /**
         * @param stackInstanceAccountId The account to which the stack instance belongs.
         * 
         * @return builder
         * 
         */
        public Builder stackInstanceAccountId(String stackInstanceAccountId) {
            return stackInstanceAccountId(Output.of(stackInstanceAccountId));
        }

        /**
         * @param stackInstanceRegionId The region of the stack instance.
         * 
         * @return builder
         * 
         */
        public Builder stackInstanceRegionId(@Nullable Output<String> stackInstanceRegionId) {
            $.stackInstanceRegionId = stackInstanceRegionId;
            return this;
        }

        /**
         * @param stackInstanceRegionId The region of the stack instance.
         * 
         * @return builder
         * 
         */
        public Builder stackInstanceRegionId(String stackInstanceRegionId) {
            return stackInstanceRegionId(Output.of(stackInstanceRegionId));
        }

        /**
         * @param status The status of the stack instance. Valid values: `CURRENT` or `OUTDATED`.
         * * `CURRENT`: The stack corresponding to the stack instance is up to date with the stack group.
         * * `OUTDATED`: The stack corresponding to the stack instance is not up to date with the stack group. The `OUTDATED` state has the following possible causes:
         * * When the CreateStackInstances operation is called to create stack instances, the corresponding stacks fail to be created.
         * * When the UpdateStackInstances or UpdateStackGroup operation is called to update stack instances, the corresponding stacks fail to be updated, or only some of the stack instances are updated.
         * * The create or update operation is not complete.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the stack instance. Valid values: `CURRENT` or `OUTDATED`.
         * * `CURRENT`: The stack corresponding to the stack instance is up to date with the stack group.
         * * `OUTDATED`: The stack corresponding to the stack instance is not up to date with the stack group. The `OUTDATED` state has the following possible causes:
         * * When the CreateStackInstances operation is called to create stack instances, the corresponding stacks fail to be created.
         * * When the UpdateStackInstances or UpdateStackGroup operation is called to update stack instances, the corresponding stacks fail to be updated, or only some of the stack instances are updated.
         * * The create or update operation is not complete.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param timeoutInMinutes The timeout period that is specified for the stack creation request. Default value: `60`. Unit: `minutes`.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInMinutes(@Nullable Output<String> timeoutInMinutes) {
            $.timeoutInMinutes = timeoutInMinutes;
            return this;
        }

        /**
         * @param timeoutInMinutes The timeout period that is specified for the stack creation request. Default value: `60`. Unit: `minutes`.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInMinutes(String timeoutInMinutes) {
            return timeoutInMinutes(Output.of(timeoutInMinutes));
        }

        public StackInstanceState build() {
            return $;
        }
    }

}
