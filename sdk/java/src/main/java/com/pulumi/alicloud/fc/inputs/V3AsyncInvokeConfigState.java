// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc.inputs;

import com.pulumi.alicloud.fc.inputs.V3AsyncInvokeConfigDestinationConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V3AsyncInvokeConfigState extends com.pulumi.resources.ResourceArgs {

    public static final V3AsyncInvokeConfigState Empty = new V3AsyncInvokeConfigState();

    /**
     * Whether to enable an asynchronous task
     * 
     */
    @Import(name="asyncTask")
    private @Nullable Output<Boolean> asyncTask;

    /**
     * @return Whether to enable an asynchronous task
     * 
     */
    public Optional<Output<Boolean>> asyncTask() {
        return Optional.ofNullable(this.asyncTask);
    }

    /**
     * The creation time of the resource
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The creation time of the resource
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Target Configuration See `destination_config` below.
     * 
     */
    @Import(name="destinationConfig")
    private @Nullable Output<V3AsyncInvokeConfigDestinationConfigArgs> destinationConfig;

    /**
     * @return Target Configuration See `destination_config` below.
     * 
     */
    public Optional<Output<V3AsyncInvokeConfigDestinationConfigArgs>> destinationConfig() {
        return Optional.ofNullable(this.destinationConfig);
    }

    /**
     * Function Name
     * 
     */
    @Import(name="functionName")
    private @Nullable Output<String> functionName;

    /**
     * @return Function Name
     * 
     */
    public Optional<Output<String>> functionName() {
        return Optional.ofNullable(this.functionName);
    }

    /**
     * Event maximum survival time
     * 
     */
    @Import(name="maxAsyncEventAgeInSeconds")
    private @Nullable Output<Integer> maxAsyncEventAgeInSeconds;

    /**
     * @return Event maximum survival time
     * 
     */
    public Optional<Output<Integer>> maxAsyncEventAgeInSeconds() {
        return Optional.ofNullable(this.maxAsyncEventAgeInSeconds);
    }

    /**
     * Number of Asynchronous call retries
     * 
     */
    @Import(name="maxAsyncRetryAttempts")
    private @Nullable Output<Integer> maxAsyncRetryAttempts;

    /**
     * @return Number of Asynchronous call retries
     * 
     */
    public Optional<Output<Integer>> maxAsyncRetryAttempts() {
        return Optional.ofNullable(this.maxAsyncRetryAttempts);
    }

    /**
     * Function version or alias
     * 
     */
    @Import(name="qualifier")
    private @Nullable Output<String> qualifier;

    /**
     * @return Function version or alias
     * 
     */
    public Optional<Output<String>> qualifier() {
        return Optional.ofNullable(this.qualifier);
    }

    private V3AsyncInvokeConfigState() {}

    private V3AsyncInvokeConfigState(V3AsyncInvokeConfigState $) {
        this.asyncTask = $.asyncTask;
        this.createTime = $.createTime;
        this.destinationConfig = $.destinationConfig;
        this.functionName = $.functionName;
        this.maxAsyncEventAgeInSeconds = $.maxAsyncEventAgeInSeconds;
        this.maxAsyncRetryAttempts = $.maxAsyncRetryAttempts;
        this.qualifier = $.qualifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V3AsyncInvokeConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V3AsyncInvokeConfigState $;

        public Builder() {
            $ = new V3AsyncInvokeConfigState();
        }

        public Builder(V3AsyncInvokeConfigState defaults) {
            $ = new V3AsyncInvokeConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param asyncTask Whether to enable an asynchronous task
         * 
         * @return builder
         * 
         */
        public Builder asyncTask(@Nullable Output<Boolean> asyncTask) {
            $.asyncTask = asyncTask;
            return this;
        }

        /**
         * @param asyncTask Whether to enable an asynchronous task
         * 
         * @return builder
         * 
         */
        public Builder asyncTask(Boolean asyncTask) {
            return asyncTask(Output.of(asyncTask));
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the resource
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param destinationConfig Target Configuration See `destination_config` below.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfig(@Nullable Output<V3AsyncInvokeConfigDestinationConfigArgs> destinationConfig) {
            $.destinationConfig = destinationConfig;
            return this;
        }

        /**
         * @param destinationConfig Target Configuration See `destination_config` below.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfig(V3AsyncInvokeConfigDestinationConfigArgs destinationConfig) {
            return destinationConfig(Output.of(destinationConfig));
        }

        /**
         * @param functionName Function Name
         * 
         * @return builder
         * 
         */
        public Builder functionName(@Nullable Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName Function Name
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param maxAsyncEventAgeInSeconds Event maximum survival time
         * 
         * @return builder
         * 
         */
        public Builder maxAsyncEventAgeInSeconds(@Nullable Output<Integer> maxAsyncEventAgeInSeconds) {
            $.maxAsyncEventAgeInSeconds = maxAsyncEventAgeInSeconds;
            return this;
        }

        /**
         * @param maxAsyncEventAgeInSeconds Event maximum survival time
         * 
         * @return builder
         * 
         */
        public Builder maxAsyncEventAgeInSeconds(Integer maxAsyncEventAgeInSeconds) {
            return maxAsyncEventAgeInSeconds(Output.of(maxAsyncEventAgeInSeconds));
        }

        /**
         * @param maxAsyncRetryAttempts Number of Asynchronous call retries
         * 
         * @return builder
         * 
         */
        public Builder maxAsyncRetryAttempts(@Nullable Output<Integer> maxAsyncRetryAttempts) {
            $.maxAsyncRetryAttempts = maxAsyncRetryAttempts;
            return this;
        }

        /**
         * @param maxAsyncRetryAttempts Number of Asynchronous call retries
         * 
         * @return builder
         * 
         */
        public Builder maxAsyncRetryAttempts(Integer maxAsyncRetryAttempts) {
            return maxAsyncRetryAttempts(Output.of(maxAsyncRetryAttempts));
        }

        /**
         * @param qualifier Function version or alias
         * 
         * @return builder
         * 
         */
        public Builder qualifier(@Nullable Output<String> qualifier) {
            $.qualifier = qualifier;
            return this;
        }

        /**
         * @param qualifier Function version or alias
         * 
         * @return builder
         * 
         */
        public Builder qualifier(String qualifier) {
            return qualifier(Output.of(qualifier));
        }

        public V3AsyncInvokeConfigState build() {
            return $;
        }
    }

}
