// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ens.inputs;

import com.pulumi.alicloud.ens.inputs.InstanceDataDiskArgs;
import com.pulumi.alicloud.ens.inputs.InstanceSystemDiskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * Whether to automatically renew, default to False, this parameter is invalid when paying by volume.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Whether to automatically renew, default to False, this parameter is invalid when paying by volume.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * Operator, required for regional level scheduling, invalid for node level scheduling.
     * 
     */
    @Import(name="carrier")
    private @Nullable Output<String> carrier;

    /**
     * @return Operator, required for regional level scheduling, invalid for node level scheduling.
     * 
     */
    public Optional<Output<String>> carrier() {
        return Optional.ofNullable(this.carrier);
    }

    /**
     * Data disk specifications. See `data_disk` below.
     * 
     */
    @Import(name="dataDisks")
    private @Nullable Output<List<InstanceDataDiskArgs>> dataDisks;

    /**
     * @return Data disk specifications. See `data_disk` below.
     * 
     */
    public Optional<Output<List<InstanceDataDiskArgs>>> dataDisks() {
        return Optional.ofNullable(this.dataDisks);
    }

    /**
     * Node id. When ScheduleAreaLevel is Region, EnsRegionId is required. When ScheduleAreaLevel is Big, Middle, Small, EnsRegionId is not required.
     * 
     */
    @Import(name="ensRegionId")
    private @Nullable Output<String> ensRegionId;

    /**
     * @return Node id. When ScheduleAreaLevel is Region, EnsRegionId is required. When ScheduleAreaLevel is Big, Middle, Small, EnsRegionId is not required.
     * 
     */
    public Optional<Output<String>> ensRegionId() {
        return Optional.ofNullable(this.ensRegionId);
    }

    /**
     * Host Name.
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    /**
     * @return Host Name.
     * 
     */
    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * The Image Id field. If InstanceType is arm_bmi, the image Id is a non-required parameter. If instanceType is another specification value, the image Id is a required parameter.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The Image Id field. If InstanceType is arm_bmi, the image Id is a non-required parameter. If instanceType is another specification value, the image Id is a required parameter.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * Instance billing strategy, instance: instance granularity (prepaid method currently does not support instance), user: by user dimension (not transferred or prepaid method supports user).
     * 
     */
    @Import(name="instanceChargeStrategy")
    private @Nullable Output<String> instanceChargeStrategy;

    /**
     * @return Instance billing strategy, instance: instance granularity (prepaid method currently does not support instance), user: by user dimension (not transferred or prepaid method supports user).
     * 
     */
    public Optional<Output<String>> instanceChargeStrategy() {
        return Optional.ofNullable(this.instanceChargeStrategy);
    }

    /**
     * The instance name. It must be 2 to 128 characters in length and must start with an uppercase or lowercase letter or a Chinese character. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), periods (.), or hyphens (-). The default value is the InstanceId of the instance.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return The instance name. It must be 2 to 128 characters in length and must start with an uppercase or lowercase letter or a Chinese character. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), periods (.), or hyphens (-). The default value is the InstanceId of the instance.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * Instance specifications type.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return Instance specifications type.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * Instance Charge type.it could be BandwidthByDay, 95BandwidthByMonth, PayByBandwidth4thMonth.
     * 
     */
    @Import(name="internetChargeType")
    private @Nullable Output<String> internetChargeType;

    /**
     * @return Instance Charge type.it could be BandwidthByDay, 95BandwidthByMonth, PayByBandwidth4thMonth.
     * 
     */
    public Optional<Output<String>> internetChargeType() {
        return Optional.ofNullable(this.internetChargeType);
    }

    /**
     * The maximum public network bandwidth.
     * 
     */
    @Import(name="internetMaxBandwidthOut")
    private @Nullable Output<Integer> internetMaxBandwidthOut;

    /**
     * @return The maximum public network bandwidth.
     * 
     */
    public Optional<Output<Integer>> internetMaxBandwidthOut() {
        return Optional.ofNullable(this.internetMaxBandwidthOut);
    }

    /**
     * Region code, required for regional level scheduling, invalid for node level scheduling.
     * 
     */
    @Import(name="netDistrictCode")
    private @Nullable Output<String> netDistrictCode;

    /**
     * @return Region code, required for regional level scheduling, invalid for node level scheduling.
     * 
     */
    public Optional<Output<String>> netDistrictCode() {
        return Optional.ofNullable(this.netDistrictCode);
    }

    /**
     * The password of the instance。It is 8 to 30 characters in length and must contain three types of characters: uppercase and lowercase letters, numbers, and special symbols. The following special symbols can be set: &#39;&#39;&#39;()&#39;~! @#$%^&amp; *-_+ =|{}[]:;&#39;,.? /&#39;&#39;&#39;.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password of the instance。It is 8 to 30 characters in length and must contain three types of characters: uppercase and lowercase letters, numbers, and special symbols. The following special symbols can be set: &#39;&#39;&#39;()&#39;~! @#$%^&amp; *-_+ =|{}[]:;&#39;,.? /&#39;&#39;&#39;.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Whether to use image preset password prompt: Password and KeyPairNamePasswordInherit must be passed.
     * 
     */
    @Import(name="passwordInherit")
    private @Nullable Output<Boolean> passwordInherit;

    /**
     * @return Whether to use image preset password prompt: Password and KeyPairNamePasswordInherit must be passed.
     * 
     */
    public Optional<Output<Boolean>> passwordInherit() {
        return Optional.ofNullable(this.passwordInherit);
    }

    /**
     * Instance payment method, Subscription: prepaid, monthly package; PayAsYouGo: Pay as you go.
     * 
     */
    @Import(name="paymentType")
    private @Nullable Output<String> paymentType;

    /**
     * @return Instance payment method, Subscription: prepaid, monthly package; PayAsYouGo: Pay as you go.
     * 
     */
    public Optional<Output<String>> paymentType() {
        return Optional.ofNullable(this.paymentType);
    }

    /**
     * The duration of purchasing resources. If PeriodUnit is not specified, it defaults to purchasing on a monthly basis. Currently, only days and months are supported. If PeriodUnit=Day, Period can only be 3. If PeriodUnit=Monthc, then Period can be 1-9,12.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The duration of purchasing resources. If PeriodUnit is not specified, it defaults to purchasing on a monthly basis. Currently, only days and months are supported. If PeriodUnit=Day, Period can only be 3. If PeriodUnit=Monthc, then Period can be 1-9,12.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The unit of time for purchasing resources. If PeriodUnit is not specified, it defaults to purchasing by Month. Currently, only days and months are supported. If PeriodUnit=Day, Period can only be 3. If PeriodUnit=Month, then Period can be 1-9,12.
     * 
     */
    @Import(name="periodUnit")
    private @Nullable Output<String> periodUnit;

    /**
     * @return The unit of time for purchasing resources. If PeriodUnit is not specified, it defaults to purchasing by Month. Currently, only days and months are supported. If PeriodUnit=Day, Period can only be 3. If PeriodUnit=Month, then Period can be 1-9,12.
     * 
     */
    public Optional<Output<String>> periodUnit() {
        return Optional.ofNullable(this.periodUnit);
    }

    /**
     * Whether to allocate public IP. Value：true (default): can be assigned，false: cannot be assigned.
     * 
     */
    @Import(name="publicIpIdentification")
    private @Nullable Output<Boolean> publicIpIdentification;

    /**
     * @return Whether to allocate public IP. Value：true (default): can be assigned，false: cannot be assigned.
     * 
     */
    public Optional<Output<Boolean>> publicIpIdentification() {
        return Optional.ofNullable(this.publicIpIdentification);
    }

    /**
     * Number of instances.
     * 
     */
    @Import(name="quantity")
    private @Nullable Output<String> quantity;

    /**
     * @return Number of instances.
     * 
     */
    public Optional<Output<String>> quantity() {
        return Optional.ofNullable(this.quantity);
    }

    /**
     * Scheduling level, which is used to perform node level or regional scheduling.
     * 
     */
    @Import(name="scheduleAreaLevel")
    private @Nullable Output<String> scheduleAreaLevel;

    /**
     * @return Scheduling level, which is used to perform node level or regional scheduling.
     * 
     */
    public Optional<Output<String>> scheduleAreaLevel() {
        return Optional.ofNullable(this.scheduleAreaLevel);
    }

    /**
     * Dispatch price strategy. If left blank, it defaults to prioritizing low prices. Values: PriceLowPriority (priority high price), PriceLowPriority (priority low price).
     * 
     */
    @Import(name="schedulingPriceStrategy")
    private @Nullable Output<String> schedulingPriceStrategy;

    /**
     * @return Dispatch price strategy. If left blank, it defaults to prioritizing low prices. Values: PriceLowPriority (priority high price), PriceLowPriority (priority low price).
     * 
     */
    public Optional<Output<String>> schedulingPriceStrategy() {
        return Optional.ofNullable(this.schedulingPriceStrategy);
    }

    /**
     * When scheduling at the node level, it is Concentrate. When scheduling at the regional level, it is selected according to customer needs. Concentrate: Centralized; Disperse: Disperse.
     * 
     */
    @Import(name="schedulingStrategy")
    private @Nullable Output<String> schedulingStrategy;

    /**
     * @return When scheduling at the node level, it is Concentrate. When scheduling at the regional level, it is selected according to customer needs. Concentrate: Centralized; Disperse: Disperse.
     * 
     */
    public Optional<Output<String>> schedulingStrategy() {
        return Optional.ofNullable(this.schedulingStrategy);
    }

    /**
     * the status of the resource.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return the status of the resource.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The field representing the system disk specification. SystemDisk is a non-required parameter when InstanceType is x86_pm,x86_bmi,x86_bm,pc_bmi, or arm_bmi. SystemDisk is a required parameter when instanceType is other specification families. See `system_disk` below.
     * 
     */
    @Import(name="systemDisk")
    private @Nullable Output<InstanceSystemDiskArgs> systemDisk;

    /**
     * @return The field representing the system disk specification. SystemDisk is a non-required parameter when InstanceType is x86_pm,x86_bmi,x86_bm,pc_bmi, or arm_bmi. SystemDisk is a required parameter when instanceType is other specification families. See `system_disk` below.
     * 
     */
    public Optional<Output<InstanceSystemDiskArgs>> systemDisk() {
        return Optional.ofNullable(this.systemDisk);
    }

    /**
     * Specifies whether to automatically append sequential suffixes to the hostnames specified by the HostName parameter and instance names specified by the InstanceName parameter when you create multiple instances at a time. The sequential suffix ranges from 001 to 999. Valid values:  true false Default value: false.
     * 
     */
    @Import(name="uniqueSuffix")
    private @Nullable Output<Boolean> uniqueSuffix;

    /**
     * @return Specifies whether to automatically append sequential suffixes to the hostnames specified by the HostName parameter and instance names specified by the InstanceName parameter when you create multiple instances at a time. The sequential suffix ranges from 001 to 999. Valid values:  true false Default value: false.
     * 
     */
    public Optional<Output<Boolean>> uniqueSuffix() {
        return Optional.ofNullable(this.uniqueSuffix);
    }

    /**
     * User defined data, with a maximum support of 16KB. You can input UserData information. UserData encoded in Base64 format.
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return User defined data, with a maximum support of 16KB. You can input UserData information. UserData encoded in Base64 format.
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    private InstanceState() {}

    private InstanceState(InstanceState $) {
        this.autoRenew = $.autoRenew;
        this.carrier = $.carrier;
        this.dataDisks = $.dataDisks;
        this.ensRegionId = $.ensRegionId;
        this.hostName = $.hostName;
        this.imageId = $.imageId;
        this.instanceChargeStrategy = $.instanceChargeStrategy;
        this.instanceName = $.instanceName;
        this.instanceType = $.instanceType;
        this.internetChargeType = $.internetChargeType;
        this.internetMaxBandwidthOut = $.internetMaxBandwidthOut;
        this.netDistrictCode = $.netDistrictCode;
        this.password = $.password;
        this.passwordInherit = $.passwordInherit;
        this.paymentType = $.paymentType;
        this.period = $.period;
        this.periodUnit = $.periodUnit;
        this.publicIpIdentification = $.publicIpIdentification;
        this.quantity = $.quantity;
        this.scheduleAreaLevel = $.scheduleAreaLevel;
        this.schedulingPriceStrategy = $.schedulingPriceStrategy;
        this.schedulingStrategy = $.schedulingStrategy;
        this.status = $.status;
        this.systemDisk = $.systemDisk;
        this.uniqueSuffix = $.uniqueSuffix;
        this.userData = $.userData;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceState $;

        public Builder() {
            $ = new InstanceState();
        }

        public Builder(InstanceState defaults) {
            $ = new InstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRenew Whether to automatically renew, default to False, this parameter is invalid when paying by volume.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Whether to automatically renew, default to False, this parameter is invalid when paying by volume.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param carrier Operator, required for regional level scheduling, invalid for node level scheduling.
         * 
         * @return builder
         * 
         */
        public Builder carrier(@Nullable Output<String> carrier) {
            $.carrier = carrier;
            return this;
        }

        /**
         * @param carrier Operator, required for regional level scheduling, invalid for node level scheduling.
         * 
         * @return builder
         * 
         */
        public Builder carrier(String carrier) {
            return carrier(Output.of(carrier));
        }

        /**
         * @param dataDisks Data disk specifications. See `data_disk` below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(@Nullable Output<List<InstanceDataDiskArgs>> dataDisks) {
            $.dataDisks = dataDisks;
            return this;
        }

        /**
         * @param dataDisks Data disk specifications. See `data_disk` below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(List<InstanceDataDiskArgs> dataDisks) {
            return dataDisks(Output.of(dataDisks));
        }

        /**
         * @param dataDisks Data disk specifications. See `data_disk` below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(InstanceDataDiskArgs... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }

        /**
         * @param ensRegionId Node id. When ScheduleAreaLevel is Region, EnsRegionId is required. When ScheduleAreaLevel is Big, Middle, Small, EnsRegionId is not required.
         * 
         * @return builder
         * 
         */
        public Builder ensRegionId(@Nullable Output<String> ensRegionId) {
            $.ensRegionId = ensRegionId;
            return this;
        }

        /**
         * @param ensRegionId Node id. When ScheduleAreaLevel is Region, EnsRegionId is required. When ScheduleAreaLevel is Big, Middle, Small, EnsRegionId is not required.
         * 
         * @return builder
         * 
         */
        public Builder ensRegionId(String ensRegionId) {
            return ensRegionId(Output.of(ensRegionId));
        }

        /**
         * @param hostName Host Name.
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName Host Name.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param imageId The Image Id field. If InstanceType is arm_bmi, the image Id is a non-required parameter. If instanceType is another specification value, the image Id is a required parameter.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The Image Id field. If InstanceType is arm_bmi, the image Id is a non-required parameter. If instanceType is another specification value, the image Id is a required parameter.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param instanceChargeStrategy Instance billing strategy, instance: instance granularity (prepaid method currently does not support instance), user: by user dimension (not transferred or prepaid method supports user).
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeStrategy(@Nullable Output<String> instanceChargeStrategy) {
            $.instanceChargeStrategy = instanceChargeStrategy;
            return this;
        }

        /**
         * @param instanceChargeStrategy Instance billing strategy, instance: instance granularity (prepaid method currently does not support instance), user: by user dimension (not transferred or prepaid method supports user).
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeStrategy(String instanceChargeStrategy) {
            return instanceChargeStrategy(Output.of(instanceChargeStrategy));
        }

        /**
         * @param instanceName The instance name. It must be 2 to 128 characters in length and must start with an uppercase or lowercase letter or a Chinese character. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), periods (.), or hyphens (-). The default value is the InstanceId of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName The instance name. It must be 2 to 128 characters in length and must start with an uppercase or lowercase letter or a Chinese character. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), periods (.), or hyphens (-). The default value is the InstanceId of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param instanceType Instance specifications type.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType Instance specifications type.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param internetChargeType Instance Charge type.it could be BandwidthByDay, 95BandwidthByMonth, PayByBandwidth4thMonth.
         * 
         * @return builder
         * 
         */
        public Builder internetChargeType(@Nullable Output<String> internetChargeType) {
            $.internetChargeType = internetChargeType;
            return this;
        }

        /**
         * @param internetChargeType Instance Charge type.it could be BandwidthByDay, 95BandwidthByMonth, PayByBandwidth4thMonth.
         * 
         * @return builder
         * 
         */
        public Builder internetChargeType(String internetChargeType) {
            return internetChargeType(Output.of(internetChargeType));
        }

        /**
         * @param internetMaxBandwidthOut The maximum public network bandwidth.
         * 
         * @return builder
         * 
         */
        public Builder internetMaxBandwidthOut(@Nullable Output<Integer> internetMaxBandwidthOut) {
            $.internetMaxBandwidthOut = internetMaxBandwidthOut;
            return this;
        }

        /**
         * @param internetMaxBandwidthOut The maximum public network bandwidth.
         * 
         * @return builder
         * 
         */
        public Builder internetMaxBandwidthOut(Integer internetMaxBandwidthOut) {
            return internetMaxBandwidthOut(Output.of(internetMaxBandwidthOut));
        }

        /**
         * @param netDistrictCode Region code, required for regional level scheduling, invalid for node level scheduling.
         * 
         * @return builder
         * 
         */
        public Builder netDistrictCode(@Nullable Output<String> netDistrictCode) {
            $.netDistrictCode = netDistrictCode;
            return this;
        }

        /**
         * @param netDistrictCode Region code, required for regional level scheduling, invalid for node level scheduling.
         * 
         * @return builder
         * 
         */
        public Builder netDistrictCode(String netDistrictCode) {
            return netDistrictCode(Output.of(netDistrictCode));
        }

        /**
         * @param password The password of the instance。It is 8 to 30 characters in length and must contain three types of characters: uppercase and lowercase letters, numbers, and special symbols. The following special symbols can be set: &#39;&#39;&#39;()&#39;~! @#$%^&amp; *-_+ =|{}[]:;&#39;,.? /&#39;&#39;&#39;.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of the instance。It is 8 to 30 characters in length and must contain three types of characters: uppercase and lowercase letters, numbers, and special symbols. The following special symbols can be set: &#39;&#39;&#39;()&#39;~! @#$%^&amp; *-_+ =|{}[]:;&#39;,.? /&#39;&#39;&#39;.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordInherit Whether to use image preset password prompt: Password and KeyPairNamePasswordInherit must be passed.
         * 
         * @return builder
         * 
         */
        public Builder passwordInherit(@Nullable Output<Boolean> passwordInherit) {
            $.passwordInherit = passwordInherit;
            return this;
        }

        /**
         * @param passwordInherit Whether to use image preset password prompt: Password and KeyPairNamePasswordInherit must be passed.
         * 
         * @return builder
         * 
         */
        public Builder passwordInherit(Boolean passwordInherit) {
            return passwordInherit(Output.of(passwordInherit));
        }

        /**
         * @param paymentType Instance payment method, Subscription: prepaid, monthly package; PayAsYouGo: Pay as you go.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(@Nullable Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType Instance payment method, Subscription: prepaid, monthly package; PayAsYouGo: Pay as you go.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param period The duration of purchasing resources. If PeriodUnit is not specified, it defaults to purchasing on a monthly basis. Currently, only days and months are supported. If PeriodUnit=Day, Period can only be 3. If PeriodUnit=Monthc, then Period can be 1-9,12.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The duration of purchasing resources. If PeriodUnit is not specified, it defaults to purchasing on a monthly basis. Currently, only days and months are supported. If PeriodUnit=Day, Period can only be 3. If PeriodUnit=Monthc, then Period can be 1-9,12.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param periodUnit The unit of time for purchasing resources. If PeriodUnit is not specified, it defaults to purchasing by Month. Currently, only days and months are supported. If PeriodUnit=Day, Period can only be 3. If PeriodUnit=Month, then Period can be 1-9,12.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(@Nullable Output<String> periodUnit) {
            $.periodUnit = periodUnit;
            return this;
        }

        /**
         * @param periodUnit The unit of time for purchasing resources. If PeriodUnit is not specified, it defaults to purchasing by Month. Currently, only days and months are supported. If PeriodUnit=Day, Period can only be 3. If PeriodUnit=Month, then Period can be 1-9,12.
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(String periodUnit) {
            return periodUnit(Output.of(periodUnit));
        }

        /**
         * @param publicIpIdentification Whether to allocate public IP. Value：true (default): can be assigned，false: cannot be assigned.
         * 
         * @return builder
         * 
         */
        public Builder publicIpIdentification(@Nullable Output<Boolean> publicIpIdentification) {
            $.publicIpIdentification = publicIpIdentification;
            return this;
        }

        /**
         * @param publicIpIdentification Whether to allocate public IP. Value：true (default): can be assigned，false: cannot be assigned.
         * 
         * @return builder
         * 
         */
        public Builder publicIpIdentification(Boolean publicIpIdentification) {
            return publicIpIdentification(Output.of(publicIpIdentification));
        }

        /**
         * @param quantity Number of instances.
         * 
         * @return builder
         * 
         */
        public Builder quantity(@Nullable Output<String> quantity) {
            $.quantity = quantity;
            return this;
        }

        /**
         * @param quantity Number of instances.
         * 
         * @return builder
         * 
         */
        public Builder quantity(String quantity) {
            return quantity(Output.of(quantity));
        }

        /**
         * @param scheduleAreaLevel Scheduling level, which is used to perform node level or regional scheduling.
         * 
         * @return builder
         * 
         */
        public Builder scheduleAreaLevel(@Nullable Output<String> scheduleAreaLevel) {
            $.scheduleAreaLevel = scheduleAreaLevel;
            return this;
        }

        /**
         * @param scheduleAreaLevel Scheduling level, which is used to perform node level or regional scheduling.
         * 
         * @return builder
         * 
         */
        public Builder scheduleAreaLevel(String scheduleAreaLevel) {
            return scheduleAreaLevel(Output.of(scheduleAreaLevel));
        }

        /**
         * @param schedulingPriceStrategy Dispatch price strategy. If left blank, it defaults to prioritizing low prices. Values: PriceLowPriority (priority high price), PriceLowPriority (priority low price).
         * 
         * @return builder
         * 
         */
        public Builder schedulingPriceStrategy(@Nullable Output<String> schedulingPriceStrategy) {
            $.schedulingPriceStrategy = schedulingPriceStrategy;
            return this;
        }

        /**
         * @param schedulingPriceStrategy Dispatch price strategy. If left blank, it defaults to prioritizing low prices. Values: PriceLowPriority (priority high price), PriceLowPriority (priority low price).
         * 
         * @return builder
         * 
         */
        public Builder schedulingPriceStrategy(String schedulingPriceStrategy) {
            return schedulingPriceStrategy(Output.of(schedulingPriceStrategy));
        }

        /**
         * @param schedulingStrategy When scheduling at the node level, it is Concentrate. When scheduling at the regional level, it is selected according to customer needs. Concentrate: Centralized; Disperse: Disperse.
         * 
         * @return builder
         * 
         */
        public Builder schedulingStrategy(@Nullable Output<String> schedulingStrategy) {
            $.schedulingStrategy = schedulingStrategy;
            return this;
        }

        /**
         * @param schedulingStrategy When scheduling at the node level, it is Concentrate. When scheduling at the regional level, it is selected according to customer needs. Concentrate: Centralized; Disperse: Disperse.
         * 
         * @return builder
         * 
         */
        public Builder schedulingStrategy(String schedulingStrategy) {
            return schedulingStrategy(Output.of(schedulingStrategy));
        }

        /**
         * @param status the status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status the status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param systemDisk The field representing the system disk specification. SystemDisk is a non-required parameter when InstanceType is x86_pm,x86_bmi,x86_bm,pc_bmi, or arm_bmi. SystemDisk is a required parameter when instanceType is other specification families. See `system_disk` below.
         * 
         * @return builder
         * 
         */
        public Builder systemDisk(@Nullable Output<InstanceSystemDiskArgs> systemDisk) {
            $.systemDisk = systemDisk;
            return this;
        }

        /**
         * @param systemDisk The field representing the system disk specification. SystemDisk is a non-required parameter when InstanceType is x86_pm,x86_bmi,x86_bm,pc_bmi, or arm_bmi. SystemDisk is a required parameter when instanceType is other specification families. See `system_disk` below.
         * 
         * @return builder
         * 
         */
        public Builder systemDisk(InstanceSystemDiskArgs systemDisk) {
            return systemDisk(Output.of(systemDisk));
        }

        /**
         * @param uniqueSuffix Specifies whether to automatically append sequential suffixes to the hostnames specified by the HostName parameter and instance names specified by the InstanceName parameter when you create multiple instances at a time. The sequential suffix ranges from 001 to 999. Valid values:  true false Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder uniqueSuffix(@Nullable Output<Boolean> uniqueSuffix) {
            $.uniqueSuffix = uniqueSuffix;
            return this;
        }

        /**
         * @param uniqueSuffix Specifies whether to automatically append sequential suffixes to the hostnames specified by the HostName parameter and instance names specified by the InstanceName parameter when you create multiple instances at a time. The sequential suffix ranges from 001 to 999. Valid values:  true false Default value: false.
         * 
         * @return builder
         * 
         */
        public Builder uniqueSuffix(Boolean uniqueSuffix) {
            return uniqueSuffix(Output.of(uniqueSuffix));
        }

        /**
         * @param userData User defined data, with a maximum support of 16KB. You can input UserData information. UserData encoded in Base64 format.
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData User defined data, with a maximum support of 16KB. You can input UserData information. UserData encoded in Base64 format.
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        public InstanceState build() {
            return $;
        }
    }

}
