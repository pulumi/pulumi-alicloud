// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.fc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V3AliasArgs extends com.pulumi.resources.ResourceArgs {

    public static final V3AliasArgs Empty = new V3AliasArgs();

    /**
     * Grayscale version
     * 
     */
    @Import(name="additionalVersionWeight")
    private @Nullable Output<Map<String,Double>> additionalVersionWeight;

    /**
     * @return Grayscale version
     * 
     */
    public Optional<Output<Map<String,Double>>> additionalVersionWeight() {
        return Optional.ofNullable(this.additionalVersionWeight);
    }

    /**
     * Function Alias
     * 
     */
    @Import(name="aliasName")
    private @Nullable Output<String> aliasName;

    /**
     * @return Function Alias
     * 
     */
    public Optional<Output<String>> aliasName() {
        return Optional.ofNullable(this.aliasName);
    }

    /**
     * Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Function Name
     * 
     */
    @Import(name="functionName", required=true)
    private Output<String> functionName;

    /**
     * @return Function Name
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }

    /**
     * The version that the alias points
     * 
     */
    @Import(name="versionId")
    private @Nullable Output<String> versionId;

    /**
     * @return The version that the alias points
     * 
     */
    public Optional<Output<String>> versionId() {
        return Optional.ofNullable(this.versionId);
    }

    private V3AliasArgs() {}

    private V3AliasArgs(V3AliasArgs $) {
        this.additionalVersionWeight = $.additionalVersionWeight;
        this.aliasName = $.aliasName;
        this.description = $.description;
        this.functionName = $.functionName;
        this.versionId = $.versionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V3AliasArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V3AliasArgs $;

        public Builder() {
            $ = new V3AliasArgs();
        }

        public Builder(V3AliasArgs defaults) {
            $ = new V3AliasArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalVersionWeight Grayscale version
         * 
         * @return builder
         * 
         */
        public Builder additionalVersionWeight(@Nullable Output<Map<String,Double>> additionalVersionWeight) {
            $.additionalVersionWeight = additionalVersionWeight;
            return this;
        }

        /**
         * @param additionalVersionWeight Grayscale version
         * 
         * @return builder
         * 
         */
        public Builder additionalVersionWeight(Map<String,Double> additionalVersionWeight) {
            return additionalVersionWeight(Output.of(additionalVersionWeight));
        }

        /**
         * @param aliasName Function Alias
         * 
         * @return builder
         * 
         */
        public Builder aliasName(@Nullable Output<String> aliasName) {
            $.aliasName = aliasName;
            return this;
        }

        /**
         * @param aliasName Function Alias
         * 
         * @return builder
         * 
         */
        public Builder aliasName(String aliasName) {
            return aliasName(Output.of(aliasName));
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param functionName Function Name
         * 
         * @return builder
         * 
         */
        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName Function Name
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param versionId The version that the alias points
         * 
         * @return builder
         * 
         */
        public Builder versionId(@Nullable Output<String> versionId) {
            $.versionId = versionId;
            return this;
        }

        /**
         * @param versionId The version that the alias points
         * 
         * @return builder
         * 
         */
        public Builder versionId(String versionId) {
            return versionId(Output.of(versionId));
        }

        public V3AliasArgs build() {
            if ($.functionName == null) {
                throw new MissingRequiredPropertyException("V3AliasArgs", "functionName");
            }
            return $;
        }
    }

}
