// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEipsAddress {
    private String addressName;
    private String allocationId;
    private List<String> availableRegions;
    /**
     * @return EIP internet max bandwidth in Mbps.
     * 
     */
    private String bandwidth;
    private String bandwidthPackageBandwidth;
    private String bandwidthPackageId;
    private String bandwidthPackageType;
    private String createTime;
    /**
     * @return (Optional, Available in v1.124.4+) Whether enable the deletion protection or not.
     * 
     */
    private Boolean deletionProtection;
    private String description;
    private String expiredTime;
    private String hasReservationData;
    private String hdMonitorStatus;
    /**
     * @return ID of the EIP.
     * 
     */
    private String id;
    /**
     * @return The ID of the instance that is being bound.
     * 
     */
    private String instanceId;
    private String instanceRegionId;
    /**
     * @return The instance type of that the EIP is bound.
     * 
     */
    private String instanceType;
    /**
     * @return EIP internet charge type.
     * 
     */
    private String internetChargeType;
    /**
     * @return Public IP Address of the the EIP.
     * 
     */
    private String ipAddress;
    private String isp;
    private List<String> operationLocks;
    private String paymentType;
    private String reservationActiveTime;
    private String reservationBandwidth;
    private String reservationInternetChargeType;
    private String reservationOrderType;
    /**
     * @return The Id of resource group which the eips belongs.
     * 
     */
    private String resourceGroupId;
    private Boolean secondLimited;
    private String segmentInstanceId;
    /**
     * @return EIP status. Possible values are: `Associating`, `Unassociating`, `InUse` and `Available`.
     * 
     */
    private String status;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,Object> tags;

    private GetEipsAddress() {}
    public String addressName() {
        return this.addressName;
    }
    public String allocationId() {
        return this.allocationId;
    }
    public List<String> availableRegions() {
        return this.availableRegions;
    }
    /**
     * @return EIP internet max bandwidth in Mbps.
     * 
     */
    public String bandwidth() {
        return this.bandwidth;
    }
    public String bandwidthPackageBandwidth() {
        return this.bandwidthPackageBandwidth;
    }
    public String bandwidthPackageId() {
        return this.bandwidthPackageId;
    }
    public String bandwidthPackageType() {
        return this.bandwidthPackageType;
    }
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return (Optional, Available in v1.124.4+) Whether enable the deletion protection or not.
     * 
     */
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    public String description() {
        return this.description;
    }
    public String expiredTime() {
        return this.expiredTime;
    }
    public String hasReservationData() {
        return this.hasReservationData;
    }
    public String hdMonitorStatus() {
        return this.hdMonitorStatus;
    }
    /**
     * @return ID of the EIP.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the instance that is being bound.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    public String instanceRegionId() {
        return this.instanceRegionId;
    }
    /**
     * @return The instance type of that the EIP is bound.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return EIP internet charge type.
     * 
     */
    public String internetChargeType() {
        return this.internetChargeType;
    }
    /**
     * @return Public IP Address of the the EIP.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    public String isp() {
        return this.isp;
    }
    public List<String> operationLocks() {
        return this.operationLocks;
    }
    public String paymentType() {
        return this.paymentType;
    }
    public String reservationActiveTime() {
        return this.reservationActiveTime;
    }
    public String reservationBandwidth() {
        return this.reservationBandwidth;
    }
    public String reservationInternetChargeType() {
        return this.reservationInternetChargeType;
    }
    public String reservationOrderType() {
        return this.reservationOrderType;
    }
    /**
     * @return The Id of resource group which the eips belongs.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }
    public Boolean secondLimited() {
        return this.secondLimited;
    }
    public String segmentInstanceId() {
        return this.segmentInstanceId;
    }
    /**
     * @return EIP status. Possible values are: `Associating`, `Unassociating`, `InUse` and `Available`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,Object> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEipsAddress defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String addressName;
        private String allocationId;
        private List<String> availableRegions;
        private String bandwidth;
        private String bandwidthPackageBandwidth;
        private String bandwidthPackageId;
        private String bandwidthPackageType;
        private String createTime;
        private Boolean deletionProtection;
        private String description;
        private String expiredTime;
        private String hasReservationData;
        private String hdMonitorStatus;
        private String id;
        private String instanceId;
        private String instanceRegionId;
        private String instanceType;
        private String internetChargeType;
        private String ipAddress;
        private String isp;
        private List<String> operationLocks;
        private String paymentType;
        private String reservationActiveTime;
        private String reservationBandwidth;
        private String reservationInternetChargeType;
        private String reservationOrderType;
        private String resourceGroupId;
        private Boolean secondLimited;
        private String segmentInstanceId;
        private String status;
        private Map<String,Object> tags;
        public Builder() {}
        public Builder(GetEipsAddress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressName = defaults.addressName;
    	      this.allocationId = defaults.allocationId;
    	      this.availableRegions = defaults.availableRegions;
    	      this.bandwidth = defaults.bandwidth;
    	      this.bandwidthPackageBandwidth = defaults.bandwidthPackageBandwidth;
    	      this.bandwidthPackageId = defaults.bandwidthPackageId;
    	      this.bandwidthPackageType = defaults.bandwidthPackageType;
    	      this.createTime = defaults.createTime;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.description = defaults.description;
    	      this.expiredTime = defaults.expiredTime;
    	      this.hasReservationData = defaults.hasReservationData;
    	      this.hdMonitorStatus = defaults.hdMonitorStatus;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceRegionId = defaults.instanceRegionId;
    	      this.instanceType = defaults.instanceType;
    	      this.internetChargeType = defaults.internetChargeType;
    	      this.ipAddress = defaults.ipAddress;
    	      this.isp = defaults.isp;
    	      this.operationLocks = defaults.operationLocks;
    	      this.paymentType = defaults.paymentType;
    	      this.reservationActiveTime = defaults.reservationActiveTime;
    	      this.reservationBandwidth = defaults.reservationBandwidth;
    	      this.reservationInternetChargeType = defaults.reservationInternetChargeType;
    	      this.reservationOrderType = defaults.reservationOrderType;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.secondLimited = defaults.secondLimited;
    	      this.segmentInstanceId = defaults.segmentInstanceId;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder addressName(String addressName) {
            this.addressName = Objects.requireNonNull(addressName);
            return this;
        }
        @CustomType.Setter
        public Builder allocationId(String allocationId) {
            this.allocationId = Objects.requireNonNull(allocationId);
            return this;
        }
        @CustomType.Setter
        public Builder availableRegions(List<String> availableRegions) {
            this.availableRegions = Objects.requireNonNull(availableRegions);
            return this;
        }
        public Builder availableRegions(String... availableRegions) {
            return availableRegions(List.of(availableRegions));
        }
        @CustomType.Setter
        public Builder bandwidth(String bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthPackageBandwidth(String bandwidthPackageBandwidth) {
            this.bandwidthPackageBandwidth = Objects.requireNonNull(bandwidthPackageBandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthPackageId(String bandwidthPackageId) {
            this.bandwidthPackageId = Objects.requireNonNull(bandwidthPackageId);
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthPackageType(String bandwidthPackageType) {
            this.bandwidthPackageType = Objects.requireNonNull(bandwidthPackageType);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            this.deletionProtection = Objects.requireNonNull(deletionProtection);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder expiredTime(String expiredTime) {
            this.expiredTime = Objects.requireNonNull(expiredTime);
            return this;
        }
        @CustomType.Setter
        public Builder hasReservationData(String hasReservationData) {
            this.hasReservationData = Objects.requireNonNull(hasReservationData);
            return this;
        }
        @CustomType.Setter
        public Builder hdMonitorStatus(String hdMonitorStatus) {
            this.hdMonitorStatus = Objects.requireNonNull(hdMonitorStatus);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder instanceRegionId(String instanceRegionId) {
            this.instanceRegionId = Objects.requireNonNull(instanceRegionId);
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        @CustomType.Setter
        public Builder internetChargeType(String internetChargeType) {
            this.internetChargeType = Objects.requireNonNull(internetChargeType);
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        @CustomType.Setter
        public Builder isp(String isp) {
            this.isp = Objects.requireNonNull(isp);
            return this;
        }
        @CustomType.Setter
        public Builder operationLocks(List<String> operationLocks) {
            this.operationLocks = Objects.requireNonNull(operationLocks);
            return this;
        }
        public Builder operationLocks(String... operationLocks) {
            return operationLocks(List.of(operationLocks));
        }
        @CustomType.Setter
        public Builder paymentType(String paymentType) {
            this.paymentType = Objects.requireNonNull(paymentType);
            return this;
        }
        @CustomType.Setter
        public Builder reservationActiveTime(String reservationActiveTime) {
            this.reservationActiveTime = Objects.requireNonNull(reservationActiveTime);
            return this;
        }
        @CustomType.Setter
        public Builder reservationBandwidth(String reservationBandwidth) {
            this.reservationBandwidth = Objects.requireNonNull(reservationBandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder reservationInternetChargeType(String reservationInternetChargeType) {
            this.reservationInternetChargeType = Objects.requireNonNull(reservationInternetChargeType);
            return this;
        }
        @CustomType.Setter
        public Builder reservationOrderType(String reservationOrderType) {
            this.reservationOrderType = Objects.requireNonNull(reservationOrderType);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupId(String resourceGroupId) {
            this.resourceGroupId = Objects.requireNonNull(resourceGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder secondLimited(Boolean secondLimited) {
            this.secondLimited = Objects.requireNonNull(secondLimited);
            return this;
        }
        @CustomType.Setter
        public Builder segmentInstanceId(String segmentInstanceId) {
            this.segmentInstanceId = Objects.requireNonNull(segmentInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public GetEipsAddress build() {
            final var o = new GetEipsAddress();
            o.addressName = addressName;
            o.allocationId = allocationId;
            o.availableRegions = availableRegions;
            o.bandwidth = bandwidth;
            o.bandwidthPackageBandwidth = bandwidthPackageBandwidth;
            o.bandwidthPackageId = bandwidthPackageId;
            o.bandwidthPackageType = bandwidthPackageType;
            o.createTime = createTime;
            o.deletionProtection = deletionProtection;
            o.description = description;
            o.expiredTime = expiredTime;
            o.hasReservationData = hasReservationData;
            o.hdMonitorStatus = hdMonitorStatus;
            o.id = id;
            o.instanceId = instanceId;
            o.instanceRegionId = instanceRegionId;
            o.instanceType = instanceType;
            o.internetChargeType = internetChargeType;
            o.ipAddress = ipAddress;
            o.isp = isp;
            o.operationLocks = operationLocks;
            o.paymentType = paymentType;
            o.reservationActiveTime = reservationActiveTime;
            o.reservationBandwidth = reservationBandwidth;
            o.reservationInternetChargeType = reservationInternetChargeType;
            o.reservationOrderType = reservationOrderType;
            o.resourceGroupId = resourceGroupId;
            o.secondLimited = secondLimited;
            o.segmentInstanceId = segmentInstanceId;
            o.status = status;
            o.tags = tags;
            return o;
        }
    }
}
