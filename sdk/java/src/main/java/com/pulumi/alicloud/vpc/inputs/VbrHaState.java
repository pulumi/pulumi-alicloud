// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VbrHaState extends com.pulumi.resources.ResourceArgs {

    public static final VbrHaState Empty = new VbrHaState();

    /**
     * The creation time of the VBR.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The creation time of the VBR.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The description of the VBR switching group.
     * It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with &#39;http:// &#39;or &#39;https.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the VBR switching group.
     * It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with &#39;http:// &#39;or &#39;https.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether to PreCheck only this request. Value range:
     * - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
     * - *false** (default): Send a normal request and start the instance directly after passing the check.
     * 
     */
    @Import(name="dryRun")
    private @Nullable Output<Boolean> dryRun;

    /**
     * @return Whether to PreCheck only this request. Value range:
     * - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
     * - *false** (default): Send a normal request and start the instance directly after passing the check.
     * 
     */
    public Optional<Output<Boolean>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The instance ID of another VBR in The VBR switching group.
     * 
     */
    @Import(name="peerVbrId")
    private @Nullable Output<String> peerVbrId;

    /**
     * @return The instance ID of another VBR in The VBR switching group.
     * 
     */
    public Optional<Output<String>> peerVbrId() {
        return Optional.ofNullable(this.peerVbrId);
    }

    /**
     * The ID of the region to which the VBR belongs.
     * 
     */
    @Import(name="regionId")
    private @Nullable Output<String> regionId;

    /**
     * @return The ID of the region to which the VBR belongs.
     * 
     */
    public Optional<Output<String>> regionId() {
        return Optional.ofNullable(this.regionId);
    }

    /**
     * Status of VBR switching Group
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of VBR switching Group
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * VBR switch group name.
     * 
     */
    @Import(name="vbrHaName")
    private @Nullable Output<String> vbrHaName;

    /**
     * @return VBR switch group name.
     * 
     */
    public Optional<Output<String>> vbrHaName() {
        return Optional.ofNullable(this.vbrHaName);
    }

    /**
     * The VBR instance ID.
     * 
     */
    @Import(name="vbrId")
    private @Nullable Output<String> vbrId;

    /**
     * @return The VBR instance ID.
     * 
     */
    public Optional<Output<String>> vbrId() {
        return Optional.ofNullable(this.vbrId);
    }

    private VbrHaState() {}

    private VbrHaState(VbrHaState $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.dryRun = $.dryRun;
        this.peerVbrId = $.peerVbrId;
        this.regionId = $.regionId;
        this.status = $.status;
        this.vbrHaName = $.vbrHaName;
        this.vbrId = $.vbrId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VbrHaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VbrHaState $;

        public Builder() {
            $ = new VbrHaState();
        }

        public Builder(VbrHaState defaults) {
            $ = new VbrHaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The creation time of the VBR.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the VBR.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description The description of the VBR switching group.
         * It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with &#39;http:// &#39;or &#39;https.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the VBR switching group.
         * It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with &#39;http:// &#39;or &#39;https.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dryRun Whether to PreCheck only this request. Value range:
         * - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
         * - *false** (default): Send a normal request and start the instance directly after passing the check.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(@Nullable Output<Boolean> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        /**
         * @param dryRun Whether to PreCheck only this request. Value range:
         * - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
         * - *false** (default): Send a normal request and start the instance directly after passing the check.
         * 
         * @return builder
         * 
         */
        public Builder dryRun(Boolean dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param peerVbrId The instance ID of another VBR in The VBR switching group.
         * 
         * @return builder
         * 
         */
        public Builder peerVbrId(@Nullable Output<String> peerVbrId) {
            $.peerVbrId = peerVbrId;
            return this;
        }

        /**
         * @param peerVbrId The instance ID of another VBR in The VBR switching group.
         * 
         * @return builder
         * 
         */
        public Builder peerVbrId(String peerVbrId) {
            return peerVbrId(Output.of(peerVbrId));
        }

        /**
         * @param regionId The ID of the region to which the VBR belongs.
         * 
         * @return builder
         * 
         */
        public Builder regionId(@Nullable Output<String> regionId) {
            $.regionId = regionId;
            return this;
        }

        /**
         * @param regionId The ID of the region to which the VBR belongs.
         * 
         * @return builder
         * 
         */
        public Builder regionId(String regionId) {
            return regionId(Output.of(regionId));
        }

        /**
         * @param status Status of VBR switching Group
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of VBR switching Group
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param vbrHaName VBR switch group name.
         * 
         * @return builder
         * 
         */
        public Builder vbrHaName(@Nullable Output<String> vbrHaName) {
            $.vbrHaName = vbrHaName;
            return this;
        }

        /**
         * @param vbrHaName VBR switch group name.
         * 
         * @return builder
         * 
         */
        public Builder vbrHaName(String vbrHaName) {
            return vbrHaName(Output.of(vbrHaName));
        }

        /**
         * @param vbrId The VBR instance ID.
         * 
         * @return builder
         * 
         */
        public Builder vbrId(@Nullable Output<String> vbrId) {
            $.vbrId = vbrId;
            return this;
        }

        /**
         * @param vbrId The VBR instance ID.
         * 
         * @return builder
         * 
         */
        public Builder vbrId(String vbrId) {
            return vbrId(Output.of(vbrId));
        }

        public VbrHaState build() {
            return $;
        }
    }

}
