// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.esa;

import com.pulumi.alicloud.Utilities;
import com.pulumi.alicloud.esa.CacheRuleArgs;
import com.pulumi.alicloud.esa.inputs.CacheRuleState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a ESA Cache Rule resource.
 * 
 * For information about ESA Cache Rule and how to use it, see [What is Cache Rule](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateCacheRule).
 * 
 * &gt; **NOTE:** Available since v1.244.0.
 * 
 * ## Example Usage
 * 
 * Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.alicloud.esa.EsaFunctions;
 * import com.pulumi.alicloud.esa.inputs.GetSitesArgs;
 * import com.pulumi.alicloud.esa.CacheRule;
 * import com.pulumi.alicloud.esa.CacheRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var default = EsaFunctions.getSites(GetSitesArgs.builder()
 *             .planSubscribeType("enterpriseplan")
 *             .build());
 * 
 *         var defaultCacheRule = new CacheRule("defaultCacheRule", CacheRuleArgs.builder()
 *             .userDeviceType("off")
 *             .browserCacheMode("no_cache")
 *             .userLanguage("off")
 *             .checkPresenceHeader("headername")
 *             .includeCookie("cookie_exapmle")
 *             .edgeCacheMode("follow_origin")
 *             .additionalCacheablePorts("2053")
 *             .ruleName("rule_example")
 *             .edgeStatusCodeCacheTtl("300")
 *             .browserCacheTtl("300")
 *             .queryString("example")
 *             .userGeo("off")
 *             .sortQueryStringForCache("off")
 *             .checkPresenceCookie("cookiename")
 *             .cacheReserveEligibility("bypass_cache_reserve")
 *             .queryStringMode("ignore_all")
 *             .rule("http.host eq \"video.example.com\"")
 *             .cacheDeceptionArmor("off")
 *             .siteId(default_.sites()[0].id())
 *             .bypassCache("cache_all")
 *             .edgeCacheTtl("300")
 *             .ruleEnable("off")
 *             .siteVersion(0)
 *             .includeHeader("example")
 *             .serveStale("off")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ESA Cache Rule can be imported using the id, e.g.
 * 
 * ```sh
 * $ pulumi import alicloud:esa/cacheRule:CacheRule example &lt;site_id&gt;:&lt;cache_rule_id&gt;
 * ```
 * 
 */
@ResourceType(type="alicloud:esa/cacheRule:CacheRule")
public class CacheRule extends com.pulumi.resources.CustomResource {
    /**
     * Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
     * 
     */
    @Export(name="additionalCacheablePorts", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> additionalCacheablePorts;

    /**
     * @return Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
     * 
     */
    public Output<Optional<String>> additionalCacheablePorts() {
        return Codegen.optional(this.additionalCacheablePorts);
    }
    /**
     * Browser cache mode. value:
     * 
     */
    @Export(name="browserCacheMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> browserCacheMode;

    /**
     * @return Browser cache mode. value:
     * 
     */
    public Output<Optional<String>> browserCacheMode() {
        return Codegen.optional(this.browserCacheMode);
    }
    /**
     * The browser cache expiration time, in seconds.
     * 
     */
    @Export(name="browserCacheTtl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> browserCacheTtl;

    /**
     * @return The browser cache expiration time, in seconds.
     * 
     */
    public Output<Optional<String>> browserCacheTtl() {
        return Codegen.optional(this.browserCacheTtl);
    }
    /**
     * Set the cache bypass mode. value:
     * 
     */
    @Export(name="bypassCache", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bypassCache;

    /**
     * @return Set the cache bypass mode. value:
     * 
     */
    public Output<Optional<String>> bypassCache() {
        return Codegen.optional(this.bypassCache);
    }
    /**
     * Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
     * 
     */
    @Export(name="cacheDeceptionArmor", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cacheDeceptionArmor;

    /**
     * @return Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
     * 
     */
    public Output<Optional<String>> cacheDeceptionArmor() {
        return Codegen.optional(this.cacheDeceptionArmor);
    }
    /**
     * Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
     * 
     */
    @Export(name="cacheReserveEligibility", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cacheReserveEligibility;

    /**
     * @return Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
     * 
     */
    public Output<Optional<String>> cacheReserveEligibility() {
        return Codegen.optional(this.cacheReserveEligibility);
    }
    /**
     * The configured ConfigId. You can call the ListCacheRules operation to obtain the ConfigId.
     * 
     */
    @Export(name="cacheRuleId", refs={Integer.class}, tree="[0]")
    private Output<Integer> cacheRuleId;

    /**
     * @return The configured ConfigId. You can call the ListCacheRules operation to obtain the ConfigId.
     * 
     */
    public Output<Integer> cacheRuleId() {
        return this.cacheRuleId;
    }
    /**
     * When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
     * 
     */
    @Export(name="checkPresenceCookie", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> checkPresenceCookie;

    /**
     * @return When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
     * 
     */
    public Output<Optional<String>> checkPresenceCookie() {
        return Codegen.optional(this.checkPresenceCookie);
    }
    /**
     * When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
     * 
     */
    @Export(name="checkPresenceHeader", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> checkPresenceHeader;

    /**
     * @return When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
     * 
     */
    public Output<Optional<String>> checkPresenceHeader() {
        return Codegen.optional(this.checkPresenceHeader);
    }
    /**
     * Node cache mode. value:
     * 
     */
    @Export(name="edgeCacheMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> edgeCacheMode;

    /**
     * @return Node cache mode. value:
     * 
     */
    public Output<Optional<String>> edgeCacheMode() {
        return Codegen.optional(this.edgeCacheMode);
    }
    /**
     * The node cache expiration time, in seconds.
     * 
     */
    @Export(name="edgeCacheTtl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> edgeCacheTtl;

    /**
     * @return The node cache expiration time, in seconds.
     * 
     */
    public Output<Optional<String>> edgeCacheTtl() {
        return Codegen.optional(this.edgeCacheTtl);
    }
    /**
     * Status code cache expiration time, in seconds.
     * 
     */
    @Export(name="edgeStatusCodeCacheTtl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> edgeStatusCodeCacheTtl;

    /**
     * @return Status code cache expiration time, in seconds.
     * 
     */
    public Output<Optional<String>> edgeStatusCodeCacheTtl() {
        return Codegen.optional(this.edgeStatusCodeCacheTtl);
    }
    /**
     * When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
     * 
     */
    @Export(name="includeCookie", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> includeCookie;

    /**
     * @return When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
     * 
     */
    public Output<Optional<String>> includeCookie() {
        return Codegen.optional(this.includeCookie);
    }
    /**
     * When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
     * 
     */
    @Export(name="includeHeader", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> includeHeader;

    /**
     * @return When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
     * 
     */
    public Output<Optional<String>> includeHeader() {
        return Codegen.optional(this.includeHeader);
    }
    /**
     * The query string to be retained or deleted. You can enter multiple values separated by spaces.
     * 
     */
    @Export(name="queryString", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> queryString;

    /**
     * @return The query string to be retained or deleted. You can enter multiple values separated by spaces.
     * 
     */
    public Output<Optional<String>> queryString() {
        return Codegen.optional(this.queryString);
    }
    /**
     * The processing mode for the query string when the cache key is generated. value:
     * 
     */
    @Export(name="queryStringMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> queryStringMode;

    /**
     * @return The processing mode for the query string when the cache key is generated. value:
     * 
     */
    public Output<Optional<String>> queryStringMode() {
        return Codegen.optional(this.queryStringMode);
    }
    /**
     * The rule content.
     * 
     */
    @Export(name="rule", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> rule;

    /**
     * @return The rule content.
     * 
     */
    public Output<Optional<String>> rule() {
        return Codegen.optional(this.rule);
    }
    /**
     * Rule switch. value:
     * 
     */
    @Export(name="ruleEnable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ruleEnable;

    /**
     * @return Rule switch. value:
     * 
     */
    public Output<Optional<String>> ruleEnable() {
        return Codegen.optional(this.ruleEnable);
    }
    /**
     * Rule name, you can find out the rule whose rule name is the passed field.
     * 
     */
    @Export(name="ruleName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ruleName;

    /**
     * @return Rule name, you can find out the rule whose rule name is the passed field.
     * 
     */
    public Output<Optional<String>> ruleName() {
        return Codegen.optional(this.ruleName);
    }
    /**
     * Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
     * 
     */
    @Export(name="serveStale", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serveStale;

    /**
     * @return Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
     * 
     */
    public Output<Optional<String>> serveStale() {
        return Codegen.optional(this.serveStale);
    }
    /**
     * The site ID, which can be obtained by calling the ListSites API.
     * 
     */
    @Export(name="siteId", refs={Integer.class}, tree="[0]")
    private Output<Integer> siteId;

    /**
     * @return The site ID, which can be obtained by calling the ListSites API.
     * 
     */
    public Output<Integer> siteId() {
        return this.siteId;
    }
    /**
     * Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
     * 
     */
    @Export(name="siteVersion", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> siteVersion;

    /**
     * @return Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
     * 
     */
    public Output<Optional<Integer>> siteVersion() {
        return Codegen.optional(this.siteVersion);
    }
    /**
     * Query string sorting, which is disabled by default. value:
     * 
     */
    @Export(name="sortQueryStringForCache", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sortQueryStringForCache;

    /**
     * @return Query string sorting, which is disabled by default. value:
     * 
     */
    public Output<Optional<String>> sortQueryStringForCache() {
        return Codegen.optional(this.sortQueryStringForCache);
    }
    /**
     * When generating the cache key, add the client device type. value:
     * 
     */
    @Export(name="userDeviceType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userDeviceType;

    /**
     * @return When generating the cache key, add the client device type. value:
     * 
     */
    public Output<Optional<String>> userDeviceType() {
        return Codegen.optional(this.userDeviceType);
    }
    /**
     * When generating the cache key, add the client geographic location. value:
     * 
     */
    @Export(name="userGeo", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userGeo;

    /**
     * @return When generating the cache key, add the client geographic location. value:
     * 
     */
    public Output<Optional<String>> userGeo() {
        return Codegen.optional(this.userGeo);
    }
    /**
     * When generating the cache key, add the client language type. value:
     * 
     */
    @Export(name="userLanguage", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userLanguage;

    /**
     * @return When generating the cache key, add the client language type. value:
     * 
     */
    public Output<Optional<String>> userLanguage() {
        return Codegen.optional(this.userLanguage);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CacheRule(java.lang.String name) {
        this(name, CacheRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CacheRule(java.lang.String name, CacheRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CacheRule(java.lang.String name, CacheRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:esa/cacheRule:CacheRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CacheRule(java.lang.String name, Output<java.lang.String> id, @Nullable CacheRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("alicloud:esa/cacheRule:CacheRule", name, state, makeResourceOptions(options, id), false);
    }

    private static CacheRuleArgs makeArgs(CacheRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CacheRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CacheRule get(java.lang.String name, Output<java.lang.String> id, @Nullable CacheRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CacheRule(name, id, state, options);
    }
}
