// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eds.outputs;

import com.pulumi.alicloud.eds.outputs.GetRamDirectoriesDirectoryAdConnector;
import com.pulumi.alicloud.eds.outputs.GetRamDirectoriesDirectoryLog;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRamDirectoriesDirectory {
    /**
     * @return The AD connectors.
     * 
     */
    private List<GetRamDirectoriesDirectoryAdConnector> adConnectors;
    /**
     * @return The CreateTime of resource.
     * 
     */
    private String createTime;
    /**
     * @return The id of the custom security group.
     * 
     */
    private String customSecurityGroupId;
    /**
     * @return The desktop access type.
     * 
     */
    private String desktopAccessType;
    /**
     * @return The desktop vpc endpoint.
     * 
     */
    private String desktopVpcEndpoint;
    /**
     * @return The directory type.
     * 
     */
    private String directoryType;
    /**
     * @return The address of DNSAddress.
     * 
     */
    private List<String> dnsAddresses;
    /**
     * @return The username of DNS.
     * 
     */
    private String dnsUserName;
    /**
     * @return The name of the domain.
     * 
     */
    private String domainName;
    /**
     * @return The domain password.
     * 
     */
    private String domainPassword;
    /**
     * @return The username of the domain.
     * 
     */
    private String domainUserName;
    /**
     * @return Whether to enable admin access.
     * 
     */
    private Boolean enableAdminAccess;
    /**
     * @return Whether to enable cross desktop access.
     * 
     */
    private Boolean enableCrossDesktopAccess;
    /**
     * @return Whether enable internet access.
     * 
     */
    private Boolean enableInternetAccess;
    /**
     * @return The ids of filesystem.
     * 
     */
    private List<String> fileSystemIds;
    /**
     * @return The ID of the Ram Directory.
     * 
     */
    private String id;
    /**
     * @return The register log information.
     * 
     */
    private List<GetRamDirectoriesDirectoryLog> logs;
    /**
     * @return Whether to enable MFA.
     * 
     */
    private Boolean mfaEnabled;
    /**
     * @return The ID of ram directory.
     * 
     */
    private String ramDirectoryId;
    /**
     * @return The name of directory.
     * 
     */
    private String ramDirectoryName;
    /**
     * @return Whether to enable SSO.
     * 
     */
    private Boolean ssoEnabled;
    /**
     * @return The status of directory.
     * 
     */
    private String status;
    /**
     * @return The address of sub DNS.
     * 
     */
    private List<String> subDnsAddresses;
    /**
     * @return The Name of the sub-domain.
     * 
     */
    private String subDomainName;
    /**
     * @return The trust password.
     * 
     */
    private String trustPassword;
    /**
     * @return The ID of the vpc.
     * 
     */
    private String vpcId;
    /**
     * @return List of VSwitch IDs in the directory.
     * 
     */
    private List<String> vswitchIds;

    private GetRamDirectoriesDirectory() {}
    /**
     * @return The AD connectors.
     * 
     */
    public List<GetRamDirectoriesDirectoryAdConnector> adConnectors() {
        return this.adConnectors;
    }
    /**
     * @return The CreateTime of resource.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The id of the custom security group.
     * 
     */
    public String customSecurityGroupId() {
        return this.customSecurityGroupId;
    }
    /**
     * @return The desktop access type.
     * 
     */
    public String desktopAccessType() {
        return this.desktopAccessType;
    }
    /**
     * @return The desktop vpc endpoint.
     * 
     */
    public String desktopVpcEndpoint() {
        return this.desktopVpcEndpoint;
    }
    /**
     * @return The directory type.
     * 
     */
    public String directoryType() {
        return this.directoryType;
    }
    /**
     * @return The address of DNSAddress.
     * 
     */
    public List<String> dnsAddresses() {
        return this.dnsAddresses;
    }
    /**
     * @return The username of DNS.
     * 
     */
    public String dnsUserName() {
        return this.dnsUserName;
    }
    /**
     * @return The name of the domain.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return The domain password.
     * 
     */
    public String domainPassword() {
        return this.domainPassword;
    }
    /**
     * @return The username of the domain.
     * 
     */
    public String domainUserName() {
        return this.domainUserName;
    }
    /**
     * @return Whether to enable admin access.
     * 
     */
    public Boolean enableAdminAccess() {
        return this.enableAdminAccess;
    }
    /**
     * @return Whether to enable cross desktop access.
     * 
     */
    public Boolean enableCrossDesktopAccess() {
        return this.enableCrossDesktopAccess;
    }
    /**
     * @return Whether enable internet access.
     * 
     */
    public Boolean enableInternetAccess() {
        return this.enableInternetAccess;
    }
    /**
     * @return The ids of filesystem.
     * 
     */
    public List<String> fileSystemIds() {
        return this.fileSystemIds;
    }
    /**
     * @return The ID of the Ram Directory.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The register log information.
     * 
     */
    public List<GetRamDirectoriesDirectoryLog> logs() {
        return this.logs;
    }
    /**
     * @return Whether to enable MFA.
     * 
     */
    public Boolean mfaEnabled() {
        return this.mfaEnabled;
    }
    /**
     * @return The ID of ram directory.
     * 
     */
    public String ramDirectoryId() {
        return this.ramDirectoryId;
    }
    /**
     * @return The name of directory.
     * 
     */
    public String ramDirectoryName() {
        return this.ramDirectoryName;
    }
    /**
     * @return Whether to enable SSO.
     * 
     */
    public Boolean ssoEnabled() {
        return this.ssoEnabled;
    }
    /**
     * @return The status of directory.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The address of sub DNS.
     * 
     */
    public List<String> subDnsAddresses() {
        return this.subDnsAddresses;
    }
    /**
     * @return The Name of the sub-domain.
     * 
     */
    public String subDomainName() {
        return this.subDomainName;
    }
    /**
     * @return The trust password.
     * 
     */
    public String trustPassword() {
        return this.trustPassword;
    }
    /**
     * @return The ID of the vpc.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return List of VSwitch IDs in the directory.
     * 
     */
    public List<String> vswitchIds() {
        return this.vswitchIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRamDirectoriesDirectory defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRamDirectoriesDirectoryAdConnector> adConnectors;
        private String createTime;
        private String customSecurityGroupId;
        private String desktopAccessType;
        private String desktopVpcEndpoint;
        private String directoryType;
        private List<String> dnsAddresses;
        private String dnsUserName;
        private String domainName;
        private String domainPassword;
        private String domainUserName;
        private Boolean enableAdminAccess;
        private Boolean enableCrossDesktopAccess;
        private Boolean enableInternetAccess;
        private List<String> fileSystemIds;
        private String id;
        private List<GetRamDirectoriesDirectoryLog> logs;
        private Boolean mfaEnabled;
        private String ramDirectoryId;
        private String ramDirectoryName;
        private Boolean ssoEnabled;
        private String status;
        private List<String> subDnsAddresses;
        private String subDomainName;
        private String trustPassword;
        private String vpcId;
        private List<String> vswitchIds;
        public Builder() {}
        public Builder(GetRamDirectoriesDirectory defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adConnectors = defaults.adConnectors;
    	      this.createTime = defaults.createTime;
    	      this.customSecurityGroupId = defaults.customSecurityGroupId;
    	      this.desktopAccessType = defaults.desktopAccessType;
    	      this.desktopVpcEndpoint = defaults.desktopVpcEndpoint;
    	      this.directoryType = defaults.directoryType;
    	      this.dnsAddresses = defaults.dnsAddresses;
    	      this.dnsUserName = defaults.dnsUserName;
    	      this.domainName = defaults.domainName;
    	      this.domainPassword = defaults.domainPassword;
    	      this.domainUserName = defaults.domainUserName;
    	      this.enableAdminAccess = defaults.enableAdminAccess;
    	      this.enableCrossDesktopAccess = defaults.enableCrossDesktopAccess;
    	      this.enableInternetAccess = defaults.enableInternetAccess;
    	      this.fileSystemIds = defaults.fileSystemIds;
    	      this.id = defaults.id;
    	      this.logs = defaults.logs;
    	      this.mfaEnabled = defaults.mfaEnabled;
    	      this.ramDirectoryId = defaults.ramDirectoryId;
    	      this.ramDirectoryName = defaults.ramDirectoryName;
    	      this.ssoEnabled = defaults.ssoEnabled;
    	      this.status = defaults.status;
    	      this.subDnsAddresses = defaults.subDnsAddresses;
    	      this.subDomainName = defaults.subDomainName;
    	      this.trustPassword = defaults.trustPassword;
    	      this.vpcId = defaults.vpcId;
    	      this.vswitchIds = defaults.vswitchIds;
        }

        @CustomType.Setter
        public Builder adConnectors(List<GetRamDirectoriesDirectoryAdConnector> adConnectors) {
            if (adConnectors == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "adConnectors");
            }
            this.adConnectors = adConnectors;
            return this;
        }
        public Builder adConnectors(GetRamDirectoriesDirectoryAdConnector... adConnectors) {
            return adConnectors(List.of(adConnectors));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder customSecurityGroupId(String customSecurityGroupId) {
            if (customSecurityGroupId == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "customSecurityGroupId");
            }
            this.customSecurityGroupId = customSecurityGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder desktopAccessType(String desktopAccessType) {
            if (desktopAccessType == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "desktopAccessType");
            }
            this.desktopAccessType = desktopAccessType;
            return this;
        }
        @CustomType.Setter
        public Builder desktopVpcEndpoint(String desktopVpcEndpoint) {
            if (desktopVpcEndpoint == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "desktopVpcEndpoint");
            }
            this.desktopVpcEndpoint = desktopVpcEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder directoryType(String directoryType) {
            if (directoryType == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "directoryType");
            }
            this.directoryType = directoryType;
            return this;
        }
        @CustomType.Setter
        public Builder dnsAddresses(List<String> dnsAddresses) {
            if (dnsAddresses == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "dnsAddresses");
            }
            this.dnsAddresses = dnsAddresses;
            return this;
        }
        public Builder dnsAddresses(String... dnsAddresses) {
            return dnsAddresses(List.of(dnsAddresses));
        }
        @CustomType.Setter
        public Builder dnsUserName(String dnsUserName) {
            if (dnsUserName == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "dnsUserName");
            }
            this.dnsUserName = dnsUserName;
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            if (domainName == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "domainName");
            }
            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder domainPassword(String domainPassword) {
            if (domainPassword == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "domainPassword");
            }
            this.domainPassword = domainPassword;
            return this;
        }
        @CustomType.Setter
        public Builder domainUserName(String domainUserName) {
            if (domainUserName == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "domainUserName");
            }
            this.domainUserName = domainUserName;
            return this;
        }
        @CustomType.Setter
        public Builder enableAdminAccess(Boolean enableAdminAccess) {
            if (enableAdminAccess == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "enableAdminAccess");
            }
            this.enableAdminAccess = enableAdminAccess;
            return this;
        }
        @CustomType.Setter
        public Builder enableCrossDesktopAccess(Boolean enableCrossDesktopAccess) {
            if (enableCrossDesktopAccess == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "enableCrossDesktopAccess");
            }
            this.enableCrossDesktopAccess = enableCrossDesktopAccess;
            return this;
        }
        @CustomType.Setter
        public Builder enableInternetAccess(Boolean enableInternetAccess) {
            if (enableInternetAccess == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "enableInternetAccess");
            }
            this.enableInternetAccess = enableInternetAccess;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemIds(List<String> fileSystemIds) {
            if (fileSystemIds == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "fileSystemIds");
            }
            this.fileSystemIds = fileSystemIds;
            return this;
        }
        public Builder fileSystemIds(String... fileSystemIds) {
            return fileSystemIds(List.of(fileSystemIds));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logs(List<GetRamDirectoriesDirectoryLog> logs) {
            if (logs == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "logs");
            }
            this.logs = logs;
            return this;
        }
        public Builder logs(GetRamDirectoriesDirectoryLog... logs) {
            return logs(List.of(logs));
        }
        @CustomType.Setter
        public Builder mfaEnabled(Boolean mfaEnabled) {
            if (mfaEnabled == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "mfaEnabled");
            }
            this.mfaEnabled = mfaEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder ramDirectoryId(String ramDirectoryId) {
            if (ramDirectoryId == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "ramDirectoryId");
            }
            this.ramDirectoryId = ramDirectoryId;
            return this;
        }
        @CustomType.Setter
        public Builder ramDirectoryName(String ramDirectoryName) {
            if (ramDirectoryName == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "ramDirectoryName");
            }
            this.ramDirectoryName = ramDirectoryName;
            return this;
        }
        @CustomType.Setter
        public Builder ssoEnabled(Boolean ssoEnabled) {
            if (ssoEnabled == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "ssoEnabled");
            }
            this.ssoEnabled = ssoEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subDnsAddresses(List<String> subDnsAddresses) {
            if (subDnsAddresses == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "subDnsAddresses");
            }
            this.subDnsAddresses = subDnsAddresses;
            return this;
        }
        public Builder subDnsAddresses(String... subDnsAddresses) {
            return subDnsAddresses(List.of(subDnsAddresses));
        }
        @CustomType.Setter
        public Builder subDomainName(String subDomainName) {
            if (subDomainName == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "subDomainName");
            }
            this.subDomainName = subDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder trustPassword(String trustPassword) {
            if (trustPassword == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "trustPassword");
            }
            this.trustPassword = trustPassword;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vswitchIds(List<String> vswitchIds) {
            if (vswitchIds == null) {
              throw new MissingRequiredPropertyException("GetRamDirectoriesDirectory", "vswitchIds");
            }
            this.vswitchIds = vswitchIds;
            return this;
        }
        public Builder vswitchIds(String... vswitchIds) {
            return vswitchIds(List.of(vswitchIds));
        }
        public GetRamDirectoriesDirectory build() {
            final var _resultValue = new GetRamDirectoriesDirectory();
            _resultValue.adConnectors = adConnectors;
            _resultValue.createTime = createTime;
            _resultValue.customSecurityGroupId = customSecurityGroupId;
            _resultValue.desktopAccessType = desktopAccessType;
            _resultValue.desktopVpcEndpoint = desktopVpcEndpoint;
            _resultValue.directoryType = directoryType;
            _resultValue.dnsAddresses = dnsAddresses;
            _resultValue.dnsUserName = dnsUserName;
            _resultValue.domainName = domainName;
            _resultValue.domainPassword = domainPassword;
            _resultValue.domainUserName = domainUserName;
            _resultValue.enableAdminAccess = enableAdminAccess;
            _resultValue.enableCrossDesktopAccess = enableCrossDesktopAccess;
            _resultValue.enableInternetAccess = enableInternetAccess;
            _resultValue.fileSystemIds = fileSystemIds;
            _resultValue.id = id;
            _resultValue.logs = logs;
            _resultValue.mfaEnabled = mfaEnabled;
            _resultValue.ramDirectoryId = ramDirectoryId;
            _resultValue.ramDirectoryName = ramDirectoryName;
            _resultValue.ssoEnabled = ssoEnabled;
            _resultValue.status = status;
            _resultValue.subDnsAddresses = subDnsAddresses;
            _resultValue.subDomainName = subDomainName;
            _resultValue.trustPassword = trustPassword;
            _resultValue.vpcId = vpcId;
            _resultValue.vswitchIds = vswitchIds;
            return _resultValue;
        }
    }
}
